.ifndef graphio
 .space 256, ' '
graphio=1
definedunit$graphio$base=1
.section .text  
; #procedure generated by code generator class ilcg.tree.OpteronCG
label121f7cbcb3616:
#	 loadbmpfile
# entering a procedure at lexical level 1
 enter   $0,$1
 sub $((spaceforloadbmpfilel0)+16),%rsp
 and $0xfffffffffffffff0,%rsp
; #182
 movb $ 0,            -9(%rbp)
; #183
#push %rbp
 #pop %rsi  ---> 
 mov  %rbp, %rsi
 addq  $         16,%rsi
#push %rbp
 #pop %rdi  ---> 
 mov  %rbp, %rdi
 addq  $         -156,%rdi
.ifndef definedassign
definedassign=1
.extern 	 assign
.endif
 call assign#imported
; #184
#push %rbp
 #pop %rdi  ---> 
 mov  %rbp, %rdi
 addq  $         -156,%rdi
.ifndef definedreset
definedreset=1
.extern 	 reset
.endif
 call reset#imported
; #216
.ifndef definedioresult
definedioresult=1
.extern 	 ioresult
.endif
 call ioresult#imported
 movl %eax,            -160(%rbp)
 movl             -160(%rbp),%r8d
 cmpl  $    0,  %r8d
 jnz   label121f7cbcda758
; #191
#push %rbp
 #pop %rdi  ---> 
 mov  %rbp, %rdi
 addq  $         -156,%rdi
.ifndef definedfilesize
definedfilesize=1
.extern 	 filesize
.endif
 call filesize#imported
 movl %eax,            -236(%rbp)
 movl             -236(%rbp),%r8d
 movl %r8d,            -124(%rbp)
; #192
 movl $    54,            -128(%rbp)
; #193
#push %rbp
 #pop %rcx  ---> 
 mov  %rbp, %rcx
 addq  $         -152,%rcx
 movslq             -128(%rbp),%rdx
#push %rbp
 #pop %rsi  ---> 
 mov  %rbp, %rsi
 addq  $         -108,%rsi
#push %rbp
 #pop %rdi  ---> 
 mov  %rbp, %rdi
 addq  $         -156,%rdi
.ifndef definedblockread
definedblockread=1
.extern 	 blockread
.endif
 call blockread#imported
; #215
#push %rbp
 #pop %r8  ---> 
 mov  %rbp, %r8
 addq  $         -94,%r8
 movq %r8,            -248(%rbp)
; #196
 leaq          72,%rsi
 movq             176(%rbp),%rdi
.ifndef definedgetmem
definedgetmem=1
.extern 	 getmem
.endif
 call getmem#imported
 movq             176(%rbp),%r8
 movq    (%r8),%r8
 leaq          0,%r9
 movq %r9,            8(%r8)
 movq             176(%rbp),%r8
 movq    (%r8),%r8
 leaq          2,%r9
 movq %r9,            16(%r8)
 movq             176(%rbp),%r8
 movq    (%r8),%r8
 leaq          0,%r9
 movq %r9,            32(%r8)
 movq             176(%rbp),%r8
 movq    (%r8),%r8
 movq             -248(%rbp),%r9
 movl             8(%r9),%r9d
 addl  $     -1,%r9d
 movslq %r9d,%r9
 movq %r9,            40(%r8)
 movq             176(%rbp),%r8
 movq    (%r8),%r8
 leaq          0,%r9
 movq %r9,            56(%r8)
 movq             176(%rbp),%r8
 movq    (%r8),%r8
 movq             -248(%rbp),%r9
 movl             4(%r9),%r9d
 addl  $     -1,%r9d
 movslq %r9d,%r9
 movq %r9,            64(%r8)
 leaq          1,%rdx
 leaq          3,%rsi
 movq             176(%rbp),%rdi
.ifndef definedinitvec
definedinitvec=1
.extern 	 initvec
.endif
 call initvec#imported
; #197
 leaq          72,%rsi
#push %rbp
 #pop %rdi  ---> 
 mov  %rbp, %rdi
 addq  $         -120,%rdi
.ifndef definedgetmem
definedgetmem=1
.extern 	 getmem
.endif
 call getmem#imported
 movq             -120(%rbp),%r8
 leaq          0,%r9
 movq %r9,            8(%r8)
 movq             -120(%rbp),%r8
 movq             -248(%rbp),%r9
 movl             8(%r9),%r9d
 addl  $     -1,%r9d
 movslq %r9d,%r9
 movq %r9,            16(%r8)
 movq             -120(%rbp),%r8
 leaq          0,%r9
 movq %r9,            32(%r8)
 movq             -120(%rbp),%r8
 movq             -248(%rbp),%r9
 movl             4(%r9),%r9d
 addl  $     -1,%r9d
 movslq %r9d,%r9
 movq %r9,            40(%r8)
 movq             -120(%rbp),%r8
 leaq          0,%r9
 movq %r9,            56(%r8)
 movq             -120(%rbp),%r8
 leaq          2,%r9
 movq %r9,            64(%r8)
 leaq          1,%rdx
 leaq          3,%rsi
#push %rbp
 #pop %rdi  ---> 
 mov  %rbp, %rdi
 addq  $         -120,%rdi
.ifndef definedinitvec
definedinitvec=1
.extern 	 initvec
.endif
 call initvec#imported
; #212
 movq             -248(%rbp),%r8
 movswl             14(%r8),%r8d
 cmpl  $    8,  %r8d
 jz   label121f7cbcf5468
 movq             -248(%rbp),%r8
 movswl             14(%r8),%r8d
 cmpl  $    24,  %r8d
 jz   label121f7cbcf596c
 jmp  label121f7cbcf596e
 label121f7cbcf596c:
; #204
 movq             176(%rbp),%r8
 movq    (%r8),%r8
 movq             16(%r8),%rcx
 incq %rcx
 movq             176(%rbp),%r8
 movq    (%r8),%r8
 movq             64(%r8),%r8
 incq %r8
 imulq %r8,%rcx
 movl %ecx,            -124(%rbp)
; #205
 addq  $         -8,%rsp
 movl $    4,   (%rsp)
 addq  $         -8,%rsp
 movl             -124(%rbp),%r8d
 movl %r8d,   (%rsp)
 call label121f7c9fb581b1
 add  $16,%rsp
 movl %eax,            -276(%rbp)
 movl             -276(%rbp),%r8d
 cmpl  $    0,  %r8d
 jnz   label121f7cbcf7870
 jmp  label121f7cbcf7872
 label121f7cbcf7870:
 addq  $         -8,%rsp
 movl $    4,   (%rsp)
 addq  $         -8,%rsp
 movl             -124(%rbp),%r8d
 movl %r8d,   (%rsp)
 call label121f7c9fb581b1
 add  $16,%rsp
 movl %eax,            -280(%rbp)
 movl             -124(%rbp),%r8d
 addl  $     4,%r8d
 movl             -280(%rbp),%r9d
 subl %r9d,%r8d
 movl %r8d,            -124(%rbp)
 label121f7cbcf7872:
; #208
 movq             176(%rbp),%r8
 movq    (%r8),%r8
 movq             40(%r8),%rcx
 movl %ecx,            -284(%rbp)
 movl $    0,%r8d
 movl             -284(%rbp),%r9d
 cmpl %r9d, %r8d
 setle %bl
 subb $1, %bl
 not %bl
 movsbl %bl,%r8d
 test %r8d,%r8d
 jnz label121f7cbcf8874
 jmp  label121f7cbcf8876
 label121f7cbcf8874:
 movl $    0,            -128(%rbp)
 label121f7cbcbfc4c:
 movslq             -128(%rbp),%r8
 cmpq  $        0,  %r8
 jl   label121f7cbcf9a78
 movslq             -128(%rbp),%r8
 movq             -120(%rbp),%r9
 movq             16(%r9),%r9
 cmpq %r9,  %r8
 jg   label121f7cbcf9a78
 jmp  label121f7cbcf9a7a
 label121f7cbcf9a78:
 int $    5
 label121f7cbcf9a7a:
 leaq          0,%r8
 movq             -120(%rbp),%r9
 movq             40(%r9),%r9
 cmpq %r9,  %r8
 jg   label121f7cbcf9f7c
 jmp  label121f7cbcf9f7e
 label121f7cbcf9f7c:
 int $    5
 label121f7cbcf9f7e:
 leaq          0,%r8
 movq             -120(%rbp),%r9
 movq             64(%r9),%r9
 cmpq %r9,  %r8
 jg   label121f7cbcfa180
 jmp  label121f7cbcfa182
 label121f7cbcfa180:
 int $    5
 label121f7cbcfa182:
#push %rbp
 #pop %rcx  ---> 
 mov  %rbp, %rcx
 addq  $         -152,%rcx
 movslq             -124(%rbp),%rdx
 movslq             -128(%rbp),%rsi
 movq             -120(%rbp),%r8
 imulq             24(%r8),%rsi
 movq             -120(%rbp),%r8
 addq    (%r8),%rsi
#push %rbp
 #pop %rdi  ---> 
 mov  %rbp, %rdi
 addq  $         -156,%rdi
.ifndef definedblockread
definedblockread=1
.extern 	 blockread
.endif
 call blockread#imported
 movslq             -128(%rbp),%r8
 movslq             -284(%rbp),%r9
 cmpq %r9, %r8
 setz %bl
 subb $1, %bl
 not %bl
 movsbl %bl,%r8d
 test %r8d,%r8d
 jnz label121f7cbcbfc4a
 incl             -128(%rbp)
 jmp  label121f7cbcbfc4c
 label121f7cbcbfc4a:
 label121f7cbcf8876:
; #209
 movq             176(%rbp),%r8
 movq    (%r8),%r8
 movq             16(%r8),%rcx
 movl %ecx,            -548(%rbp)
 movq             176(%rbp),%r8
 movq    (%r8),%r8
 movq             40(%r8),%rcx
 movl %ecx,            -544(%rbp)
 movq             176(%rbp),%r8
 movq    (%r8),%r8
 movq             64(%r8),%rcx
 movl %ecx,            -540(%rbp)
 leaq          0,%r8
 movq %r8,            -352(%rbp)
 label121f7cbcfbb86:
 movq             -352(%rbp),%r8
 movslq             -548(%rbp),%r9
 cmpq %r9,  %r8
 jg   label121f7cbcfbb88
 leaq          0,%r8
 movq %r8,            -360(%rbp)
 label121f7cbcfc18a:
 movq             -360(%rbp),%r8
 movslq             -544(%rbp),%r9
 cmpq %r9,  %r8
 jg   label121f7cbcfc18c
 leaq          0,%r8
 movq %r8,            -368(%rbp)
 label121f7cbcfc78e:
 movq             -368(%rbp),%r8
 movslq             -540(%rbp),%r9
 cmpq %r9,  %r8
 jg   label121f7cbcfc790
 movq             -120(%rbp),%r8
 movq             16(%r8),%r8
  sub $8, %rsp
  movl %r8d, (%rsp)
  fildl (%rsp)
  add $8, %rsp 
 fildl             -360(%rbp)
 fxch
 fcompp
 pushw %ax
 fstsw %ax
 sahf
 popw %ax
 setb %bl
 not %bl
 inc %bl
 movsbl %bl,%r8d
 test %r8d,%r8d
 jnz label121f7cbcfc992
 jmp  label121f7cbcfc994
 label121f7cbcfc992:
 int $    5
 label121f7cbcfc994:
 movq             -120(%rbp),%r8
 movq             40(%r8),%r8
  sub $8, %rsp
  movl %r8d, (%rsp)
  fildl (%rsp)
  add $8, %rsp 
 fildl             -368(%rbp)
 fxch
 fcompp
 pushw %ax
 fstsw %ax
 sahf
 popw %ax
 setb %bl
 not %bl
 inc %bl
 movsbl %bl,%r8d
 test %r8d,%r8d
 jnz label121f7cbd03796
 jmp  label121f7cbd03798
 label121f7cbd03796:
 int $    5
 label121f7cbd03798:
 movq             -120(%rbp),%r8
 movq             64(%r8),%r8
  sub $8, %rsp
  movl %r8d, (%rsp)
  fildl (%rsp)
  add $8, %rsp 
 fildl             -352(%rbp)
 fxch
 fcompp
 pushw %ax
 fstsw %ax
 sahf
 popw %ax
 setb %bl
 not %bl
 inc %bl
 movsbl %bl,%r8d
 test %r8d,%r8d
 jnz label121f7cbd03a9a
 jmp  label121f7cbd03a9c
 label121f7cbd03a9a:
 int $    5
 label121f7cbd03a9c:
 movq             -352(%rbp),%r8
 movq             176(%rbp),%r9
 movq    (%r9),%r9
 imulq             24(%r9),%r8
 movq             -360(%rbp),%r9
 movq             176(%rbp),%r10
 movq    (%r10),%r10
 imulq             48(%r10),%r9
 addq             -368(%rbp),%r9
 addq %r9,%r8
 movq             176(%rbp),%r9
 movq    (%r9),%r9
 addq    (%r9),%r8
 movq %r8,            -560(%rbp)
 movq             -360(%rbp),%r8
 movq             -120(%rbp),%r9
 imulq             24(%r9),%r8
 movq             -368(%rbp),%r9
 movq             -120(%rbp),%r10
 imulq             48(%r10),%r9
 addq             -352(%rbp),%r9
 addq %r9,%r8
 movq             -120(%rbp),%r9
 addq    (%r9),%r8
 movzbl    (%r8),%r11d
 addl  $     -128,%r11d
 movsbw %r11b,%r8w
 push $0
 movw %r8w,(%rsp)
 movb (%rsp),%bl
 addq $8,%rsp
 movsbw %bl,%r8w
 push $0
 movw %r8w,(%rsp)
 movb (%rsp),%bl
 addq $8,%rsp
 movb %bl,            -549(%rbp)
 movq             -560(%rbp),%r8
 movb             -549(%rbp),%bl
 movb %bl,   (%r8)
 incq             -368(%rbp)
 jmp  label121f7cbcfc78e
 label121f7cbcfc790:
 incq             -360(%rbp)
 jmp  label121f7cbcfc18a
 label121f7cbcfc18c:
 incq             -352(%rbp)
 jmp  label121f7cbcfbb86
 label121f7cbcfbb88:
; #211
 movb $ -1,            -9(%rbp)
; #212
 label121f7cbcf596e:
 jmp  label121f7cbcf546a
 label121f7cbcf5468:
; #199
 movb $ 0,            -9(%rbp)
; #200
 leaq  label121f7cbcbf948,%rdi
.ifndef definedlength
definedlength=1
.extern 	 length
.endif
 call length#imported
 movl %eax,            -272(%rbp)
 leaq          5,%rcx
 movslq             -272(%rbp),%rdx
 leaq  label121f7cbcbf948,%rsi
 movslq     unit$system$base+        -24,%rdi
.ifndef definedprintstring
definedprintstring=1
.extern 	 printstring
.endif
 call printstring#imported
 movslq     unit$system$base+        -24,%rdi
.ifndef definedprintln
definedprintln=1
.extern 	 println
.endif
 call println#imported
; #201
 label121f7cbcf546a:
; #213
 leaq          72,%rsi
 movq             -120(%rbp),%rdi
.ifndef definedfreemem
definedfreemem=1
.extern 	 freemem
.endif
 call freemem#imported
; #214
#push %rbp
 #pop %rdi  ---> 
 mov  %rbp, %rdi
 addq  $         -156,%rdi
.ifndef definedpasclose
definedpasclose=1
.extern 	 pasclose
.endif
 call pasclose#imported
; #215
; #216
 jmp  label121f7cbcda75a
 label121f7cbcda758:
; #185
 movb $ 0,            -9(%rbp)
; #186
 leaq  label121f7cbcbf446,%rdi
.ifndef definedlength
definedlength=1
.extern 	 length
.endif
 call length#imported
 movl %eax,            -184(%rbp)
#push %rbp
 #pop %rdi  ---> 
 mov  %rbp, %rdi
 addq  $         16,%rdi
.ifndef definedlength
definedlength=1
.extern 	 length
.endif
 call length#imported
 movl %eax,            -208(%rbp)
.ifndef definedioresult
definedioresult=1
.extern 	 ioresult
.endif
 call ioresult#imported
 movl %eax,            -232(%rbp)
 leaq          5,%rcx
 movslq             -184(%rbp),%rdx
 leaq  label121f7cbcbf446,%rsi
 movslq     unit$system$base+        -24,%rdi
.ifndef definedprintstring
definedprintstring=1
.extern 	 printstring
.endif
 call printstring#imported
 leaq          5,%rcx
 movslq             -208(%rbp),%rdx
#push %rbp
 #pop %rsi  ---> 
 mov  %rbp, %rsi
 addq  $         16,%rsi
 movslq     unit$system$base+        -24,%rdi
.ifndef definedprintstring
definedprintstring=1
.extern 	 printstring
.endif
 call printstring#imported
 leaq          5,%rcx
 leaq          12,%rdx
 movslq             -232(%rbp),%rsi
 movslq     unit$system$base+        -24,%rdi
.ifndef definedprintint
definedprintint=1
.extern 	 printint
.endif
 call printint#imported
 movslq     unit$system$base+        -24,%rdi
.ifndef definedprintln
definedprintln=1
.extern 	 println
.endif
 call println#imported
; #187
 label121f7cbcda75a:
; #217
 label121f7cbcbf244:
 leaq          0,%rax
 movb             -9(%rbp),%al
spaceforloadbmpfilel0 = 560
loadbmpfilel0exit:
leave
 ret $0
.section .text  
; #procedure generated by code generator class ilcg.tree.OpteronCG
label121f7cbcb3410:
#	 storebmpfile
# entering a procedure at lexical level 1
 enter   $0,$1
 sub $((spaceforstorebmpfilel1)+16),%rsp
 and $0xfffffffffffffff0,%rsp
; #151
#push %rbp
 #pop %rsi  ---> 
 mov  %rbp, %rsi
 addq  $         16,%rsi
#push %rbp
 #pop %rdi  ---> 
 mov  %rbp, %rdi
 addq  $         -144,%rdi
.ifndef definedassign
definedassign=1
.extern 	 assign
.endif
 call assign#imported
; #152
#push %rbp
 #pop %rdi  ---> 
 mov  %rbp, %rdi
 addq  $         -144,%rdi
.ifndef definedrewrite
definedrewrite=1
.extern 	 rewrite
.endif
 call rewrite#imported
; #154
 push             1040(%rbp)
#push %rbp
 #pop %r8  ---> 
 mov  %rbp, %r8
 addq  $         -108,%r8
 push %r8
 call label121f7cbcb401c
 add  $16,%rsp
; #155
#push %rbp
 #pop %rcx  ---> 
 mov  %rbp, %rcx
 addq  $         -140,%rcx
 leaq          54,%rdx
#push %rbp
 #pop %rsi  ---> 
 mov  %rbp, %rsi
 addq  $         -108,%rsi
#push %rbp
 #pop %rdi  ---> 
 mov  %rbp, %rdi
 addq  $         -144,%rdi
.ifndef definedblockwrite
definedblockwrite=1
.extern 	 blockwrite
.endif
 call blockwrite#imported
; #156
 leaq          72,%rsi
#push %rbp
 #pop %rdi  ---> 
 mov  %rbp, %rdi
 addq  $         -24,%rdi
.ifndef definedgetmem
definedgetmem=1
.extern 	 getmem
.endif
 call getmem#imported
 movq             -24(%rbp),%r8
 leaq          0,%r9
 movq %r9,            8(%r8)
 movq             -24(%rbp),%r8
 movq             1040(%rbp),%r9
 movq             40(%r9),%r9
 movq %r9,            16(%r8)
 movq             -24(%rbp),%r8
 leaq          0,%r9
 movq %r9,            32(%r8)
 movq             -24(%rbp),%r8
 movq             1040(%rbp),%r9
 movq             64(%r9),%r9
 movq %r9,            40(%r8)
 movq             -24(%rbp),%r8
 leaq          0,%r9
 movq %r9,            56(%r8)
 movq             -24(%rbp),%r8
 movq             1040(%rbp),%r9
 movq             16(%r9),%r9
 movq %r9,            64(%r8)
 leaq          1,%rdx
 leaq          3,%rsi
#push %rbp
 #pop %rdi  ---> 
 mov  %rbp, %rdi
 addq  $         -24,%rdi
.ifndef definedinitvec
definedinitvec=1
.extern 	 initvec
.endif
 call initvec#imported
; #160
 movq             -24(%rbp),%r8
 movq             16(%r8),%rcx
 movl %ecx,            -356(%rbp)
 movq             -24(%rbp),%r8
 movq             40(%r8),%rcx
 movl %ecx,            -352(%rbp)
 movq             -24(%rbp),%r8
 movq             64(%r8),%rcx
 movl %ecx,            -348(%rbp)
 leaq          0,%r8
 movq %r8,            -152(%rbp)
 label121f7cbd0f3be:
 movq             -152(%rbp),%r8
 movslq             -356(%rbp),%r9
 cmpq %r9,  %r8
 jg   label121f7cbd0f3c0
 leaq          0,%r8
 movq %r8,            -160(%rbp)
 label121f7cbd0f8c2:
 movq             -160(%rbp),%r8
 movslq             -352(%rbp),%r9
 cmpq %r9,  %r8
 jg   label121f7cbd0f8c4
 leaq          0,%r8
 movq %r8,            -168(%rbp)
 label121f7cbd0fec6:
 movq             -168(%rbp),%r8
 movslq             -348(%rbp),%r9
 cmpq %r9,  %r8
 jg   label121f7cbd0fec8
 movq             1040(%rbp),%r8
 movq             16(%r8),%r8
  sub $8, %rsp
  movl %r8d, (%rsp)
  fildl (%rsp)
  add $8, %rsp 
 fildl             -168(%rbp)
 fxch
 fcompp
 pushw %ax
 fstsw %ax
 sahf
 popw %ax
 setb %bl
 not %bl
 inc %bl
 movsbl %bl,%r8d
 test %r8d,%r8d
 jnz label121f7cbd100ca
 jmp  label121f7cbd100cc
 label121f7cbd100ca:
 int $    5
 label121f7cbd100cc:
 movq             1040(%rbp),%r8
 movq             40(%r8),%r8
  sub $8, %rsp
  movl %r8d, (%rsp)
  fildl (%rsp)
  add $8, %rsp 
 fildl             -152(%rbp)
 fxch
 fcompp
 pushw %ax
 fstsw %ax
 sahf
 popw %ax
 setb %bl
 not %bl
 inc %bl
 movsbl %bl,%r8d
 test %r8d,%r8d
 jnz label121f7cbd105ce
 jmp  label121f7cbd105d0
 label121f7cbd105ce:
 int $    5
 label121f7cbd105d0:
 movq             1040(%rbp),%r8
 movq             64(%r8),%r8
  sub $8, %rsp
  movl %r8d, (%rsp)
  fildl (%rsp)
  add $8, %rsp 
 fildl             -160(%rbp)
 fxch
 fcompp
 pushw %ax
 fstsw %ax
 sahf
 popw %ax
 setb %bl
 not %bl
 inc %bl
 movsbl %bl,%r8d
 test %r8d,%r8d
 jnz label121f7cbd107d2
 jmp  label121f7cbd107d4
 label121f7cbd107d2:
 int $    5
 label121f7cbd107d4:
 movq             -152(%rbp),%r8
 movq             -24(%rbp),%r9
 imulq             24(%r9),%r8
 movq             -160(%rbp),%r9
 movq             -24(%rbp),%r10
 imulq             48(%r10),%r9
 addq             -168(%rbp),%r9
 addq %r9,%r8
 movq             -24(%rbp),%r9
 addq    (%r9),%r8
 movq %r8,            -456(%rbp)
 movq             -168(%rbp),%r8
 movq             1040(%rbp),%r9
 imulq             24(%r9),%r8
 movq             -152(%rbp),%r9
 movq             1040(%rbp),%r10
 imulq             48(%r10),%r9
 addq             -160(%rbp),%r9
 addq %r9,%r8
 movq             1040(%rbp),%r9
 addq    (%r9),%r8
 movb    (%r8),%bl
 addb  $  -128,%bl
 movb %bl,            -441(%rbp)
 movq             -456(%rbp),%r8
 movb             -441(%rbp),%bl
 movb %bl,   (%r8)
 incq             -168(%rbp)
 jmp  label121f7cbd0fec6
 label121f7cbd0fec8:
 incq             -160(%rbp)
 jmp  label121f7cbd0f8c2
 label121f7cbd0f8c4:
 incq             -152(%rbp)
 jmp  label121f7cbd0f3be
 label121f7cbd0f3c0:
; #164
 movq             1040(%rbp),%r8
 movq             16(%r8),%rcx
 incq %rcx
 movq             1040(%rbp),%r8
 movq             64(%r8),%r8
 incq %r8
 imulq %r8,%rcx
 movl %ecx,            -112(%rbp)
; #165
 addq  $         -8,%rsp
 movl $    4,   (%rsp)
 addq  $         -8,%rsp
 movl             -112(%rbp),%r8d
 movl %r8d,   (%rsp)
 call label121f7c9fb581b1
 add  $16,%rsp
 movl %eax,            -360(%rbp)
 movl             -360(%rbp),%r8d
 cmpl  $    0,  %r8d
 jnz   label121f7cbd143d6
 jmp  label121f7cbd143d8
 label121f7cbd143d6:
 addq  $         -8,%rsp
 movl $    4,   (%rsp)
 addq  $         -8,%rsp
 movl             -112(%rbp),%r8d
 movl %r8d,   (%rsp)
 call label121f7c9fb581b1
 add  $16,%rsp
 movl %eax,            -364(%rbp)
 movl             -112(%rbp),%r8d
 addl  $     4,%r8d
 movl             -364(%rbp),%r9d
 subl %r9d,%r8d
 movl %r8d,            -112(%rbp)
 label121f7cbd143d8:
; #168
 movq             1040(%rbp),%r8
 movq             40(%r8),%rcx
 movl %ecx,            -368(%rbp)
 movl $    0,%r8d
 movl             -368(%rbp),%r9d
 cmpl %r9d, %r8d
 setle %bl
 subb $1, %bl
 not %bl
 movsbl %bl,%r8d
 test %r8d,%r8d
 jnz label121f7cbd14cda
 jmp  label121f7cbd14cdc
 label121f7cbd14cda:
 movl $    0,            -116(%rbp)
 label121f7cbcbee3c:
 movslq             -116(%rbp),%r8
 cmpq  $        0,  %r8
 jl   label121f7cbd150de
 movslq             -116(%rbp),%r8
 movq             -24(%rbp),%r9
 movq             16(%r9),%r9
 cmpq %r9,  %r8
 jg   label121f7cbd150de
 jmp  label121f7cbd150e0
 label121f7cbd150de:
 int $    5
 label121f7cbd150e0:
 leaq          0,%r8
 movq             -24(%rbp),%r9
 movq             40(%r9),%r9
 cmpq %r9,  %r8
 jg   label121f7cbd152e2
 jmp  label121f7cbd152e4
 label121f7cbd152e2:
 int $    5
 label121f7cbd152e4:
 leaq          0,%r8
 movq             -24(%rbp),%r9
 movq             64(%r9),%r9
 cmpq %r9,  %r8
 jg   label121f7cbd153e6
 jmp  label121f7cbd153e8
 label121f7cbd153e6:
 int $    5
 label121f7cbd153e8:
#push %rbp
 #pop %rcx  ---> 
 mov  %rbp, %rcx
 addq  $         -140,%rcx
 movslq             -112(%rbp),%rdx
 movslq             -116(%rbp),%rsi
 movq             -24(%rbp),%r8
 imulq             24(%r8),%rsi
 movq             -24(%rbp),%r8
 addq    (%r8),%rsi
#push %rbp
 #pop %rdi  ---> 
 mov  %rbp, %rdi
 addq  $         -144,%rdi
.ifndef definedblockwrite
definedblockwrite=1
.extern 	 blockwrite
.endif
 call blockwrite#imported
 movslq             -116(%rbp),%r8
 movslq             -368(%rbp),%r9
 cmpq %r9, %r8
 setz %bl
 subb $1, %bl
 not %bl
 movsbl %bl,%r8d
 test %r8d,%r8d
 jnz label121f7cbcbee3a
 incl             -116(%rbp)
 jmp  label121f7cbcbee3c
 label121f7cbcbee3a:
 label121f7cbd14cdc:
; #171
 leaq          72,%rsi
 movq             -24(%rbp),%rdi
.ifndef definedfreemem
definedfreemem=1
.extern 	 freemem
.endif
 call freemem#imported
; #172
#push %rbp
 #pop %rdi  ---> 
 mov  %rbp, %rdi
 addq  $         -144,%rdi
.ifndef definedpasclose
definedpasclose=1
.extern 	 pasclose
.endif
 call pasclose#imported
; #174
 label121f7cbcbd738:
spaceforstorebmpfilel1 = 456
storebmpfilel1exit:
leave
 ret $0
.section .text  
; #procedure generated by code generator class ilcg.tree.OpteronCG
label121f7cbcb401c:
#	 initbmpheader
# entering a procedure at lexical level 1
 enter $((spaceforinitbmpheaderl2-8*1)+16),$1
 and $0xfffffffffffffff0,%rsp
; #91
 movq             16(%rbp),%r8
 movb $ 66,   (%r8)
; #92
 movq             16(%rbp),%r8
 movb $ 77,            1(%r8)
; #96
 movq             24(%rbp),%r8
 movq             64(%r8),%rcx
 incq %rcx
 movq             24(%rbp),%r8
 movq             16(%r8),%r8
 incq %r8
 imulq %r8,%rcx
 movq             24(%rbp),%r8
 movq             40(%r8),%r8
 incq %r8
 imulq %r8,%rcx
 addq  $         54,%rcx
 movq             16(%rbp),%r8
 movl %ecx,            2(%r8)
; #97
 leaq          0,%r8
 movq %r8,            -16(%rbp)
 label121f7cbd191f0:
 movq             -16(%rbp),%r8
 cmpq  $        3,  %r8
 jg   label121f7cbd191f2
 movq             16(%rbp),%r8
 movq             -16(%rbp),%r9
 movb $ 0,            6(%r8,%r9  )
 incq             -16(%rbp)
 jmp  label121f7cbd191f0
 label121f7cbd191f2:
; #98
 movq             16(%rbp),%r8
 movl $    54,            10(%r8)
; #138
 movq             16(%rbp),%r8
 addq  $         14,%r8
 movq %r8,            -48(%rbp)
; #128
 movq             -48(%rbp),%r8
 movl $    40,   (%r8)
; #129
 movq             24(%rbp),%r8
 movq             64(%r8),%rcx
 incq %rcx
 movq             -48(%rbp),%r8
 movl %ecx,            4(%r8)
; #130
 movq             24(%rbp),%r8
 movq             40(%r8),%rcx
 incq %rcx
 movq             -48(%rbp),%r8
 movl %ecx,            8(%r8)
; #131
 movq             -48(%rbp),%r8
 movw $  1,            12(%r8)
; #132
 movq             -48(%rbp),%r8
 movq             24(%rbp),%r9
 movq             16(%r9),%r9
 incq %r9
 imulq $        8,%r9,%r9
 movw %r9w,            14(%r8)
; #133
 movq             -48(%rbp),%r8
 movl $    0,            16(%r8)
; #134
 movq             -48(%rbp),%r8
 movl $    3780,            24(%r8)
; #135
 movq             -48(%rbp),%r8
 movl $    3780,            28(%r8)
; #136
 movq             -48(%rbp),%r8
 movl $    0,            32(%r8)
; #137
 movq             -48(%rbp),%r8
 movl $    0,            36(%r8)
; #138
; #141
 label121f7cbcb4220:
spaceforinitbmpheaderl2 = 48
initbmpheaderl2exit:
leave
 ret $0
.section .text  
; #procedure generated by code generator class ilcg.tree.OpteronCG
label121f7cbcd704e:
#	 unit$graphio
# entering a unit at lexical level 0
unit$graphio:
 enter  $0,$0
 call unit$system
cmpb $1,unit$graphioready
 jnz unit$graphioinit
 jmp unit$graphiol3exit
unit$graphioinit:movb $1, unit$graphioready
 label121f7cbcb3618:
spaceforunit$graphiol3 = 0
unit$graphiol3exit:
leave
 ret $0
	.section .bss
	.align 16
	.align 16
unit$graphio$base:
	.section .data
unit$graphioready: .byte  0
 label121f7cbcb4e30:
 .byte  0
 label121f7cbcb4e2e:
 .byte  0
 label121f7cbcb4e2c:
 .byte  0
 label121f7cbcb4e2a:
 .byte  0
 label121f7cbcb4e28:
 .byte  0
 label121f7cbcb4e26:
 .byte  0
 label121f7cbcb4e24:
 .byte  0
 label121f7cbcb4d22:
 .byte  0
 label121f7cbcbf446:
 .short   10
 .short   99
 .short   97
 .short   110
 .short   116
 .short   32
 .short   111
 .short   112
 .short   101
 .short   110
 .short   32
 label121f7cbcbf948:
 .short   30
 .short   32
 .short   56
 .short   32
 .short   98
 .short   105
 .short   116
 .short   32
 .short   98
 .short   109
 .short   112
 .short   32
 .short   102
 .short   105
 .short   108
 .short   101
 .short   115
 .short   32
 .short   110
 .short   111
 .short   116
 .short   32
 .short   115
 .short   117
 .short   112
 .short   112
 .short   111
 .short   114
 .short   116
 .short   101
 .short   100
.include "/users/staff/wpc/src/VectorPascal/mmpc/systemOpteron.asm"
.endif
