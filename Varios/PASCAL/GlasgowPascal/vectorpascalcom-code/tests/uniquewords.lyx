#LyX 1.2 created this file. For more info see http://www.lyx.org/
\lyxformat 220
\textclass article
\begin_preamble
\usepackage{graphicx, epsfig}
\reversemarginpar
\title{uniquewords.pas}
\end_preamble
\options  
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize 10
\papersize a4paper
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Standard


\begin_inset LatexCommand \tableofcontents{}

\end_inset 


\layout Section

uniquewords
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tabbing}
\newline 
***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
={
\backslash 
kill
\newline 
}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{program}  
\backslash 
textit{uniquewords} ;}}
\backslash 

\backslash 

\newline 

\backslash 

\backslash 

\newline 

\backslash 

\backslash 

\newline 

\backslash 
+
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{const} }}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textit{wordmax} =20;}}
\backslash 

\backslash 

\newline 

\backslash 
<
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{type} }}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textit{lexeme} =
\backslash 
textbf{string} [
\backslash 
textit{wordmax} ];}}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textit{lexset} = 
\backslash 
textbf{set}  
\backslash 
textbf{of}  
\backslash 
textit{lexeme} ;}}
\backslash 

\backslash 

\newline 

\backslash 

\backslash 

\newline 

\backslash 
<
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{var} }}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{files: 
\backslash 
textbf{ array } 
\backslash 
textsf{[1..2] } 
\backslash 
textbf{ of } 
\backslash 
textsf{ 
\backslash 
textit{text} ;}}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{words: 
\backslash 
textbf{ array } 
\backslash 
textsf{[1..2] } 
\backslash 
textbf{ of } 
\backslash 
textsf{ 
\backslash 
textit{lexset} ;}}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{Let 
\backslash 
textit{i} 
\backslash 
(
\backslash 
in
\backslash 
) integer;}}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{Let 
\backslash 
textit{commonwords} 
\backslash 
(
\backslash 
in
\backslash 
) lexset;}}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{Let 
\backslash 
textit{aword} 
\backslash 
(
\backslash 
in
\backslash 
) lexeme;}}
\backslash 

\backslash 

\newline 

\backslash 
<
\backslash 
textsf{
\backslash 
textbf{function}  
\backslash 
textit{openfiles} :
\backslash 
textit{boolean} ;} (see Section 
\backslash 
ref{sec:./uniquewordsopenfiles} )
\backslash 

\backslash 

\newline 

\backslash 

\backslash 

\newline 

\backslash 
<
\backslash 
textsf{
\backslash 
textbf{procedure}  
\backslash 
textit{loadset} 
\backslash 
textit{(} 
\backslash 
textbf{var}  
\backslash 
textit{f} :
\backslash 
textit{text} ;
\backslash 
textbf{var}  
\backslash 
textit{words} :
\backslash 
textit{lexset} );} (see Section 
\backslash 
ref{sec:./uniquewordsloadset} )
\backslash 

\backslash 

\newline 

\backslash 

\backslash 

\newline 

\backslash 

\backslash 

\newline 

\backslash 

\backslash 

\newline 

\backslash 

\backslash 

\newline 

\backslash 
end{tabbing}
\end_inset 

 The main program reads in the files to sets, intersects them and then lists
 the result.
 For instance the command: 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{verbatim}
\newline 
D:
\backslash 
WPC
\backslash 
documents
\backslash 
ilcg
\backslash 
book
\backslash 
tests>uniquewords norm.pas roman.pas
\newline 

\backslash 
end{verbatim}
\end_inset 

 produces the list of words 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{verbatim}
\newline 
array
\newline 
of
\newline 
program
\newline 
var
\newline 
writeln
\newline 

\backslash 
end{verbatim}
\end_inset 

 The contents of the two files can be determined by using the cat command
 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{verbatim}
\newline 
D:
\backslash 
WPC
\backslash 
documents
\backslash 
ilcg
\backslash 
book
\backslash 
tests>cat roman.pas norm.pas
\newline 
program roman;
\newline 
const rom:array[0..4] of string[1]=('C','L','X','V','I');
\newline 
numb:array[0..4] of integer=(2,1,1,0,3);
\newline 
var s:string;
\newline 
s:= numb . rom;
\newline 
writeln(s);
\newline 
end.
\newline 

\backslash 
begin{tabbing}
\newline 
***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=
\backslash 
kill
\newline 

\backslash 
+ 
\backslash 

\backslash 

\newline 

\backslash 

\backslash 

\newline 

\backslash 
end{tabbing}
\newline 
program norm;
\newline 
type vec=array[0..3] of real;
\newline 
function n(var v:vec):real;
\newline 
n:= sqrt(
\backslash 
+ (v*v));
\newline 
end;
\newline 
var v:vec;    r:real;
\newline 
v:=iota 0;
\newline 
r:=n(v);
\newline 
writeln(v,r);
\newline 
end.
\newline 

\backslash 
end{verbatim}
\end_inset 

 On the other hand we can find all of the unique words in a single file
 by intersecting it with itself thus: 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{verbatim}
\newline 
D:
\backslash 
WPC
\backslash 
documents
\backslash 
ilcg
\backslash 
book
\backslash 
tests>uniquewords norm.pas norm.pas
\newline 
array
\newline 
function
\newline 
iota
\newline 
n
\newline 
norm
\newline 
of
\newline 
program
\newline 
r
\newline 
real
\newline 
sqrt
\newline 
type
\newline 
v
\newline 
var
\newline 
vec
\newline 
writeln
\newline 

\backslash 
end{verbatim}
\layout Standard
 
\backslash 
begin{tabbing}
\newline 
***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
={
\backslash 
kill
\newline 
}
\backslash 
+ 
\backslash 

\backslash 

\newline 

\backslash 

\backslash 

\newline 

\backslash 

\backslash 

\newline 

\backslash 
-
\backslash 
<
\backslash 
+
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{begin} }}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf {
\backslash 
textbf {if } 
\backslash 
textsf{
\backslash 
textit{openfiles}}}}
\backslash 

\backslash 

\newline 

\backslash 
+
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{then} }}
\backslash 

\backslash 

\newline 

\backslash 
<
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{begin} }}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf {
\backslash 
textbf {for } 
\backslash 
textsf{
\backslash 
textit{i}
\backslash 
(
\backslash 
leftarrow
\backslash 
) 1} 
\backslash 
textbf{ to } 
\backslash 
textsf{2} 
\backslash 
textbf{ do } 
\backslash 
textsf{
\backslash 
textit{loadset} (
\backslash 
textit{files}
\backslash 
(_{
\backslash 
textit{i}}
\backslash 
), 
\backslash 
textit{words}
\backslash 
(_{
\backslash 
textit{i}}
\backslash 
))}; }}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textit{commonwords}
\backslash 
(
\backslash 
leftarrow
\backslash 
) 
\backslash 
textit{words}
\backslash 
(_{1}
\backslash 
) 
\backslash 
(
\backslash 
times
\backslash 
) 
\backslash 
textit{words}
\backslash 
(_{2}
\backslash 
)}; }
\backslash 

\backslash 

\newline 

\backslash 
+
\backslash 
parbox{14cm}{
\backslash 
textsf {
\backslash 
textbf {for } 
\backslash 
textsf{
\backslash 
textit{aword}} 
\backslash 
textbf{ in } 
\backslash 
textsf{
\backslash 
textit{commonwords}} 
\backslash 
textbf{ do } }}
\backslash 

\backslash 

\newline 

\backslash 
-
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{writeln}(
\backslash 
textit{aword})}; }
\backslash 

\backslash 

\newline 

\backslash 
<
\backslash 
-
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{end} }}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf {
\backslash 
textbf {else } 
\backslash 
textsf{
\backslash 
textbf{writeln}(
\backslash 
textit{
\backslash 
textrm{
\backslash 
textup { `Usage : uniquewords file1 file2' } }})}; }}
\backslash 

\backslash 

\newline 

\backslash 
<
\backslash 
-
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{end} .}}
\backslash 

\backslash 

\newline 

\backslash 
end{tabbing}
\end_inset 


\layout Section

openfiles
\layout Standard


\begin_inset LatexCommand \label{sec:./uniquewordsopenfiles}

\end_inset 


\layout Standard


\begin_inset ERT
status Open

\layout Standard

\backslash 
begin{tabbing}
\newline 
***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
={
\backslash 
kill
\newline 
}
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{function}  
\backslash 
textit{openfiles} :
\backslash 
textit{boolean} ;}}
\backslash 

\backslash 

\newline 

\backslash 
end{tabbing}
\end_inset 

 This returns true if it has suceeded in opening both files.
 Two possible error conditions can arise: 
\layout Enumerate

The number of filenames supplied to the program may be wrong.
 This is tested using the integer valued function 
\family sans 
paramcount
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
 {}
\end_inset 


\family default 
 which is provided in the System Unit.
 This returns the number of parameters provided to the program on the command
 line.
 
\layout Enumerate

The names provided may not correspond to valid files.
 This is tested by attempting to 
\family sans 
reset
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
 {}
\end_inset 


\family default 
 the files for writing and then testing the ioresult function.
 To use this one must disable the automatic i/o checks provided on reseting
 a file which would otherwise cause the program to abort with a run time
 error.
 This is done with the compiler directive {$i-}.
 The previous presence of this directive allows the 
\family sans 
 ioresult 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
 {}
\end_inset 


\family default 
 function to be used to test whether file opening failed.
 
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tabbing}
\newline 
***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
={
\backslash 
kill
\newline 
}
\backslash 

\backslash 

\newline 

\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{label}  99;}}
\backslash 

\backslash 

\newline 

\backslash 
+
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{var} }}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{Let 
\backslash 
textit{i} 
\backslash 
(
\backslash 
in
\backslash 
) integer;}}
\backslash 

\backslash 

\newline 

\backslash 
-
\backslash 
<
\backslash 
+
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{begin} }}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textit{openfiles}
\backslash 
(
\backslash 
leftarrow
\backslash 
) 
\backslash 
textit{false}}; }
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf {
\backslash 
textbf {if } 
\backslash 
textsf{
\backslash 
textit{paramcount} 
\backslash 
(<
\backslash 
) 2}}}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf {
\backslash 
textbf {then }  
\backslash 
textbf{ goto } 
\backslash 
textsf{99}; }}
\backslash 

\backslash 

\newline 

\backslash 
+
\backslash 
parbox{14cm}{
\backslash 
textsf {
\backslash 
textbf {for } 
\backslash 
textsf{
\backslash 
textit{i}
\backslash 
(
\backslash 
leftarrow
\backslash 
) 1} 
\backslash 
textbf{ to } 
\backslash 
textsf{2} 
\backslash 
textbf{ do } }}
\backslash 

\backslash 

\newline 

\backslash 
<
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{begin} }}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textit{assign} (
\backslash 
textit{files}
\backslash 
(_{
\backslash 
textit{i}}
\backslash 
), 
\backslash 
textit{paramstr} (
\backslash 
textit{i}))}; }
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
texttt{
\backslash 
small{
\backslash 
{
\backslash 
$i- checks off
\backslash 
}}}}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textit{reset} (
\backslash 
textit{files}
\backslash 
(_{
\backslash 
textit{i}}
\backslash 
))}; }
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf {
\backslash 
textbf {if } 
\backslash 
textsf{
\backslash 
textit{ioresult} 
\backslash 
(
\backslash 
neq
\backslash 
) 0}}}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf {
\backslash 
textbf {then }  
\backslash 
textbf{ goto } 
\backslash 
textsf{99}; }}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
texttt{
\backslash 
small{
\backslash 
{
\backslash 
$i+ checks on
\backslash 
}}}}
\backslash 

\backslash 

\newline 

\backslash 
<
\backslash 
-
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{end} ;}}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textit{openfiles}
\backslash 
(
\backslash 
leftarrow
\backslash 
) 
\backslash 
textit{true}}; }
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{99:}}
\backslash 

\backslash 

\newline 

\backslash 
<
\backslash 
-
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{end} ;}}
\backslash 

\backslash 

\newline 

\backslash 
end{tabbing}
\end_inset 


\layout Section

loadset
\layout Standard


\begin_inset LatexCommand \label{sec:./uniquewordsloadset}

\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tabbing}
\newline 
***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
={
\backslash 
kill
\newline 
}
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{procedure}  
\backslash 
textit{loadset} 
\backslash 
textit{(} 
\backslash 
textbf{var}  
\backslash 
textit{f} :
\backslash 
textit{text} ;
\backslash 
textbf{var}  
\backslash 
textit{words} :
\backslash 
textit{lexset} );}}
\backslash 

\backslash 

\newline 

\backslash 
end{tabbing}
\end_inset 

 This procedure finds all the unique words in a file and returns them in
 lexset.
 This module is responsible for all of the parsing of the input files.
 It declares the set 
\family sans 
letters
\family default 
 used in discriminating words from other text.
 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tabbing}
\newline 
***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
={
\backslash 
kill
\newline 
}
\backslash 

\backslash 

\newline 

\backslash 

\backslash 

\newline 

\backslash 
+
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{const} }}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textit{a} =
\backslash 
textrm{
\backslash 
textup { `a' } };}}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textit{z} =
\backslash 
textrm{
\backslash 
textup { `z' } };}}
\backslash 

\backslash 

\newline 

\backslash 
<
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{var} }}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{Let 
\backslash 
textit{letters} 
\backslash 
(
\backslash 
in
\backslash 
) set of char ;}}
\backslash 

\backslash 

\newline 

\backslash 

\backslash 

\newline 

\backslash 
<
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{type} }}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textit{state}  = 
\backslash 
textit{(} 
\backslash 
textit{inword} , 
\backslash 
textit{skipping} );}}
\backslash 

\backslash 

\newline 

\backslash 
<
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{var} }}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{Let 
\backslash 
textit{c} 
\backslash 
(
\backslash 
in
\backslash 
)  char;}}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{Let 
\backslash 
textit{s} 
\backslash 
(
\backslash 
in
\backslash 
)  state;}}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{Let 
\backslash 
textit{theword} 
\backslash 
(
\backslash 
in
\backslash 
) lexeme;}}
\backslash 

\backslash 

\newline 

\backslash 
<
\backslash 
textsf{
\backslash 
textbf{function}  
\backslash 
textit{getch} :
\backslash 
textit{char} ;} (see Section 
\backslash 
ref{sec:./uniquewords/loadsetgetch} )
\backslash 

\backslash 

\newline 

\backslash 
<
\backslash 
textsf{
\backslash 
textbf{procedure}  
\backslash 
textit{getlex} 
\backslash 
textit{(} 
\backslash 
textbf{var}  
\backslash 
textit{l} :
\backslash 
textit{lexeme} );} (see Section 
\backslash 
ref{sec:./uniquewords/loadsetgetlex} )
\backslash 

\backslash 

\newline 

\backslash 

\backslash 

\newline 

\backslash 
-
\backslash 
<
\backslash 
+
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{begin} }}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textit{s}
\backslash 
(
\backslash 
leftarrow
\backslash 
) 
\backslash 
textit{skipping}}; }
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textit{words}
\backslash 
(
\backslash 
leftarrow
\backslash 
) 
\backslash 
textit{}}; }
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textit{letters}
\backslash 
(
\backslash 
leftarrow
\backslash 
) 
\backslash 
textit{}[
\backslash 
textrm{
\backslash 
textup { `a' } }..
\backslash 
textrm{
\backslash 
textup { `z' } }, 
\backslash 
textrm{
\backslash 
textup { `A' } }..
\backslash 
textrm{
\backslash 
textup { `Z' } }]}; }
\backslash 

\backslash 

\newline 

\backslash 
+
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{repeat} }}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textit{getlex} (
\backslash 
textit{theword})}; }
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textit{words}
\backslash 
(
\backslash 
leftarrow
\backslash 
) 
\backslash 
textit{words} + 
\backslash 
textit{}[theword]}; }
\backslash 

\backslash 

\newline 

\backslash 
-
\backslash 
<
\backslash 
parbox{14cm}{
\backslash 
textsf {
\backslash 
textbf {until } 
\backslash 
textsf{
\backslash 
textit{theword} 
\backslash 
(=
\backslash 
) 
\backslash 
textit{
\backslash 
textrm{
\backslash 
textup { `' } }}}; }}
\backslash 

\backslash 

\newline 

\backslash 
<
\backslash 
-
\backslash 
parbox{3.5cm}{
\backslash 
scriptsize{of loadset}}
\backslash 
'{
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{end}  ;}}}
\backslash 

\backslash 

\newline 

\backslash 
end{tabbing}
\end_inset 


\layout Section

getch
\layout Standard


\begin_inset LatexCommand \label{sec:./uniquewords/loadsetgetch}

\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tabbing}
\newline 
***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
={
\backslash 
kill
\newline 
}
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{function}  
\backslash 
textit{getch} :
\backslash 
textit{char} ;}}
\backslash 

\backslash 

\newline 

\backslash 
end{tabbing}
\end_inset 

 Read in a character from the current file, return the null character on
 end of file.
 This function has to deal with the problems of 
\layout Enumerate

End of lines, which in Pascal are detected by the 
\family sans 
eoln
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
 {}
\end_inset 


\family default 
 function.
 These are dealt with by returning the ASCII CR character 13.
 
\layout Enumerate

End of file, detected by the 
\family sans 
eof
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
 {}
\end_inset 


\family default 
 function.
 This is dealt with by returning the ASCII NUL character 0.
 The occurence of NUL characters is dealt with at the next higher level
 of processing to ensure that termination occurs.
 
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tabbing}
\newline 
***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
={
\backslash 
kill
\newline 
}
\backslash 

\backslash 

\newline 

\backslash 

\backslash 

\newline 

\backslash 
+
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{var} }}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{Let 
\backslash 
textit{local} 
\backslash 
(
\backslash 
in
\backslash 
) char;}}
\backslash 

\backslash 

\newline 

\backslash 
-
\backslash 
<
\backslash 
+
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{begin} }}
\backslash 

\backslash 

\newline 

\backslash 
+
\backslash 
parbox{14cm}{
\backslash 
textsf {
\backslash 
textbf {if } 
\backslash 
textsf{
\backslash 
textit{eoln} (
\backslash 
textit{f})} 
\backslash 
textbf{ then } }}
\backslash 

\backslash 

\newline 

\backslash 
<
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{begin} }}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{readln} 
\backslash 
textit{(} 
\backslash 
textit{f} );}}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textit{getch}
\backslash 
(
\backslash 
leftarrow
\backslash 
) 
\backslash 
textbf{chr}(13)}; }
\backslash 

\backslash 

\newline 

\backslash 
<
\backslash 
-
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{end} }}
\backslash 

\backslash 

\newline 

\backslash 
+
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{else} }}
\backslash 

\backslash 

\newline 

\backslash 
<
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{begin} }}
\backslash 

\backslash 

\newline 

\backslash 
+
\backslash 
parbox{14cm}{
\backslash 
textsf {
\backslash 
textbf {if } 
\backslash 
textsf{
\backslash 
textit{eof} (
\backslash 
textit{f})} 
\backslash 
textbf{ then } }}
\backslash 

\backslash 

\newline 

\backslash 
<
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{begin} }}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textit{getch}
\backslash 
(
\backslash 
leftarrow
\backslash 
) 
\backslash 
textbf{chr}(0)}; }
\backslash 

\backslash 

\newline 

\backslash 
<
\backslash 
-
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{end} }}
\backslash 

\backslash 

\newline 

\backslash 
+
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{else} }}
\backslash 

\backslash 

\newline 

\backslash 
<
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{begin} }}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{read} 
\backslash 
textit{(} 
\backslash 
textit{f} ,
\backslash 
textit{local} );}}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textit{getch}
\backslash 
(
\backslash 
leftarrow
\backslash 
) 
\backslash 
textit{local}}; }
\backslash 

\backslash 

\newline 

\backslash 
<
\backslash 
-
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{end} ;}}
\backslash 

\backslash 

\newline 

\backslash 
<
\backslash 
-
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{end} ;}}
\backslash 

\backslash 

\newline 

\backslash 
<
\backslash 
-
\backslash 
parbox{3.5cm}{
\backslash 
scriptsize{of getch}}
\backslash 
'{
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{end}  ;}}}
\backslash 

\backslash 

\newline 

\backslash 
end{tabbing}
\end_inset 


\layout Section

getlex
\layout Standard


\begin_inset LatexCommand \label{sec:./uniquewords/loadsetgetlex}

\end_inset 


\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tabbing}
\newline 
***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
={
\backslash 
kill
\newline 
}
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{procedure}  
\backslash 
textit{getlex} 
\backslash 
textit{(} 
\backslash 
textbf{var}  
\backslash 
textit{l} :
\backslash 
textit{lexeme} );}}
\backslash 

\backslash 

\newline 

\backslash 
end{tabbing}
\end_inset 

 This procedure parses the input stream for the next word.
 It then returns it in l.
 It operates as a simple finite state machine that can be in one of two
 states: 
\layout Enumerate


\family sans 
skipping
\family default 
 : the machine is in this state between words whilst it moves over non letter
 characters.
 
\layout Enumerate


\family sans 
inword
\family default 
 : the machine is in this state whilst it parses a word.
 
\layout Standard

The special case of the occurence of the null character causes a branch
 to label 99 ensuring that a null string is returned by the procedure.
 This is used at the next higher level as a termination condition.
 Labels, though deprecated in structured programming remain a useful construct
 for escaping from loops.
 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tabbing}
\newline 
***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
={
\backslash 
kill
\newline 
}
\backslash 

\backslash 

\newline 

\backslash 

\backslash 

\newline 

\backslash 
end{tabbing}
\end_inset 

 Note that membership of the character in the set of letters is used to
 switch between the two states of the parser.
 This is an entirely orthodox use of sets in Pascal.
 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
begin{tabbing}
\newline 
***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
=***
\backslash 
={
\backslash 
kill
\newline 
}
\backslash 

\backslash 

\newline 

\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{label}  99;}}
\backslash 

\backslash 

\newline 

\backslash 
+
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{begin} }}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textit{l}
\backslash 
(
\backslash 
leftarrow
\backslash 
) 
\backslash 
textit{
\backslash 
textrm{
\backslash 
textup { `' } }}}; }
\backslash 

\backslash 

\newline 

\backslash 
+
\backslash 
parbox{14cm}{
\backslash 
textsf {
\backslash 
textbf {while } 
\backslash 
textsf{
\backslash 
textit{s} 
\backslash 
(=
\backslash 
) 
\backslash 
textit{skipping}} 
\backslash 
textbf{ do } }}
\backslash 

\backslash 

\newline 

\backslash 
<
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{begin} }}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textit{c}
\backslash 
(
\backslash 
leftarrow
\backslash 
) 
\backslash 
textit{getch}}; }
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf {
\backslash 
textbf {if } 
\backslash 
textsf{
\backslash 
textit{c}} 
\backslash 
textbf{ in } 
\backslash 
textsf{
\backslash 
textit{letters}} 
\backslash 
textbf{ then } 
\backslash 
textsf{
\backslash 
textit{s}
\backslash 
(
\backslash 
leftarrow
\backslash 
) 
\backslash 
textit{inword}}; }}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf {
\backslash 
textbf {if } 
\backslash 
textsf{
\backslash 
textit{c} 
\backslash 
(=
\backslash 
) 
\backslash 
textbf{chr}(0)} 
\backslash 
textbf{ then }  
\backslash 
textbf{ goto } 
\backslash 
textsf{99}; }}
\backslash 

\backslash 

\newline 

\backslash 
<
\backslash 
-
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{end} ;}}
\backslash 

\backslash 

\newline 

\backslash 
+
\backslash 
parbox{14cm}{
\backslash 
textsf {
\backslash 
textbf {while } 
\backslash 
textsf{
\backslash 
textit{s} 
\backslash 
(=
\backslash 
) 
\backslash 
textit{inword}} 
\backslash 
textbf{ do } }}
\backslash 

\backslash 

\newline 

\backslash 
<
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{begin} }}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf {
\backslash 
textbf {if } 
\backslash 
textsf{
\backslash 
textit{length} (
\backslash 
textit{l}) 
\backslash 
(=
\backslash 
) 
\backslash 
textit{wordmax}}}}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf {
\backslash 
textbf {then }  
\backslash 
textbf{ goto } 
\backslash 
textsf{99}; }}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textit{l}
\backslash 
(
\backslash 
leftarrow
\backslash 
) 
\backslash 
textit{l} + 
\backslash 
textit{c}}; }
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textit{c}
\backslash 
(
\backslash 
leftarrow
\backslash 
) 
\backslash 
textit{getch}}; }
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf {
\backslash 
textbf {if } 
\backslash 
textsf{
\backslash 
textit{c}} 
\backslash 
textbf{ in } 
\backslash 
textsf{
\backslash 
textit{letters}} 
\backslash 
textbf{ then } 
\backslash 
textsf{
\backslash 
textit{s}
\backslash 
(
\backslash 
leftarrow
\backslash 
) 
\backslash 
textit{inword}} 
\backslash 
textbf{ else } 
\backslash 
textsf{
\backslash 
textit{s}
\backslash 
(
\backslash 
leftarrow
\backslash 
) 
\backslash 
textit{skipping}}; }}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf {
\backslash 
textbf {if } 
\backslash 
textsf{
\backslash 
textit{c} 
\backslash 
(=
\backslash 
) 
\backslash 
textbf{chr}(0)} 
\backslash 
textbf{ then }  
\backslash 
textbf{ goto } 
\backslash 
textsf{99}; }}
\backslash 

\backslash 

\newline 

\backslash 
<
\backslash 
-
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{end} ;}}
\backslash 

\backslash 

\newline 

\backslash 
parbox{14cm}{
\backslash 
textsf{99:}}
\backslash 

\backslash 

\newline 

\backslash 
<
\backslash 
-
\backslash 
parbox{3.5cm}{
\backslash 
scriptsize{of getlex}}
\backslash 
'{
\backslash 
parbox{14cm}{
\backslash 
textsf{
\backslash 
textbf{end}  ;}}}
\backslash 

\backslash 

\newline 

\backslash 
end{tabbing}
\end_inset 


\the_end
