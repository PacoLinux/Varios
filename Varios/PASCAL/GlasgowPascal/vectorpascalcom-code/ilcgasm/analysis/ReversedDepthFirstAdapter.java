/* This file was generated by SableCC (http://www.sablecc.org/). */

package ilcgasm.analysis;

import ilcgasm.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAProgram(node);
    }

    public void inAReference(AReference node)
    {
        defaultIn(node);
    }

    public void outAReference(AReference node)
    {
        defaultOut(node);
    }

    public void caseAReference(AReference node)
    {
        inAReference(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getRef() != null)
        {
            node.getRef().apply(this);
        }
        outAReference(node);
    }

    public void inAArray(AArray node)
    {
        defaultIn(node);
    }

    public void outAArray(AArray node)
    {
        defaultOut(node);
    }

    public void caseAArray(AArray node)
    {
        inAArray(node);
        if(node.getKet() != null)
        {
            node.getKet().apply(this);
        }
        if(node.getIntlit() != null)
        {
            node.getIntlit().apply(this);
        }
        if(node.getBra() != null)
        {
            node.getBra().apply(this);
        }
        if(node.getVector() != null)
        {
            node.getVector().apply(this);
        }
        outAArray(node);
    }

    public void inAIdentifierId(AIdentifierId node)
    {
        defaultIn(node);
    }

    public void outAIdentifierId(AIdentifierId node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierId(AIdentifierId node)
    {
        inAIdentifierId(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierId(node);
    }

    public void inAOpId(AOpId node)
    {
        defaultIn(node);
    }

    public void outAOpId(AOpId node)
    {
        defaultOut(node);
    }

    public void caseAOpId(AOpId node)
    {
        inAOpId(node);
        if(node.getOpidentifier() != null)
        {
            node.getOpidentifier().apply(this);
        }
        outAOpId(node);
    }

    public void inATypeidTypes(ATypeidTypes node)
    {
        defaultIn(node);
    }

    public void outATypeidTypes(ATypeidTypes node)
    {
        defaultOut(node);
    }

    public void caseATypeidTypes(ATypeidTypes node)
    {
        inATypeidTypes(node);
        if(node.getTypeid() != null)
        {
            node.getTypeid().apply(this);
        }
        outATypeidTypes(node);
    }

    public void inAArrayTypes(AArrayTypes node)
    {
        defaultIn(node);
    }

    public void outAArrayTypes(AArrayTypes node)
    {
        defaultOut(node);
    }

    public void caseAArrayTypes(AArrayTypes node)
    {
        inAArrayTypes(node);
        if(node.getArray() != null)
        {
            node.getArray().apply(this);
        }
        if(node.getTypeid() != null)
        {
            node.getTypeid().apply(this);
        }
        outAArrayTypes(node);
    }

    public void inACartesianTypes(ACartesianTypes node)
    {
        defaultIn(node);
    }

    public void outACartesianTypes(ACartesianTypes node)
    {
        defaultOut(node);
    }

    public void caseACartesianTypes(ACartesianTypes node)
    {
        inACartesianTypes(node);
        if(node.getSket() != null)
        {
            node.getSket().apply(this);
        }
        if(node.getParams() != null)
        {
            node.getParams().apply(this);
        }
        if(node.getSbra() != null)
        {
            node.getSbra().apply(this);
        }
        outACartesianTypes(node);
    }

    public void inAReftypeTypes(AReftypeTypes node)
    {
        defaultIn(node);
    }

    public void outAReftypeTypes(AReftypeTypes node)
    {
        defaultOut(node);
    }

    public void caseAReftypeTypes(AReftypeTypes node)
    {
        inAReftypeTypes(node);
        if(node.getReference() != null)
        {
            node.getReference().apply(this);
        }
        outAReftypeTypes(node);
    }

    public void inAType(AType node)
    {
        defaultIn(node);
    }

    public void outAType(AType node)
    {
        defaultOut(node);
    }

    public void caseAType(AType node)
    {
        inAType(node);
        if(node.getTypes() != null)
        {
            node.getTypes().apply(this);
        }
        outAType(node);
    }

    public void inANullParams(ANullParams node)
    {
        defaultIn(node);
    }

    public void outANullParams(ANullParams node)
    {
        defaultOut(node);
    }

    public void caseANullParams(ANullParams node)
    {
        inANullParams(node);
        outANullParams(node);
    }

    public void inAListParams(AListParams node)
    {
        defaultIn(node);
    }

    public void outAListParams(AListParams node)
    {
        defaultOut(node);
    }

    public void caseAListParams(AListParams node)
    {
        inAListParams(node);
        {
            Object temp[] = node.getTypetail().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PTypetail) temp[i]).apply(this);
            }
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAListParams(node);
    }

    public void inATypetail(ATypetail node)
    {
        defaultIn(node);
    }

    public void outATypetail(ATypetail node)
    {
        defaultOut(node);
    }

    public void caseATypetail(ATypetail node)
    {
        inATypetail(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outATypetail(node);
    }

    public void inACartval(ACartval node)
    {
        defaultIn(node);
    }

    public void outACartval(ACartval node)
    {
        defaultOut(node);
    }

    public void caseACartval(ACartval node)
    {
        inACartval(node);
        if(node.getKet() != null)
        {
            node.getKet().apply(this);
        }
        {
            Object temp[] = node.getCarttail().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCarttail) temp[i]).apply(this);
            }
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getBra() != null)
        {
            node.getBra().apply(this);
        }
        outACartval(node);
    }

    public void inACarttail(ACarttail node)
    {
        defaultIn(node);
    }

    public void outACarttail(ACarttail node)
    {
        defaultOut(node);
    }

    public void caseACarttail(ACarttail node)
    {
        inACarttail(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outACarttail(node);
    }

    public void inALow(ALow node)
    {
        defaultIn(node);
    }

    public void outALow(ALow node)
    {
        defaultOut(node);
    }

    public void caseALow(ALow node)
    {
        inALow(node);
        if(node.getIntlit() != null)
        {
            node.getIntlit().apply(this);
        }
        outALow(node);
    }

    public void inAHigh(AHigh node)
    {
        defaultIn(node);
    }

    public void outAHigh(AHigh node)
    {
        defaultOut(node);
    }

    public void caseAHigh(AHigh node)
    {
        inAHigh(node);
        if(node.getIntlit() != null)
        {
            node.getIntlit().apply(this);
        }
        outAHigh(node);
    }

    public void inARealValue(ARealValue node)
    {
        defaultIn(node);
    }

    public void outARealValue(ARealValue node)
    {
        defaultOut(node);
    }

    public void caseARealValue(ARealValue node)
    {
        inARealValue(node);
        if(node.getFloatingConstant() != null)
        {
            node.getFloatingConstant().apply(this);
        }
        outARealValue(node);
    }

    public void inAIntValue(AIntValue node)
    {
        defaultIn(node);
    }

    public void outAIntValue(AIntValue node)
    {
        defaultOut(node);
    }

    public void caseAIntValue(AIntValue node)
    {
        inAIntValue(node);
        if(node.getIntlit() != null)
        {
            node.getIntlit().apply(this);
        }
        outAIntValue(node);
    }

    public void inATypeValue(ATypeValue node)
    {
        defaultIn(node);
    }

    public void outATypeValue(ATypeValue node)
    {
        defaultOut(node);
    }

    public void caseATypeValue(ATypeValue node)
    {
        inATypeValue(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outATypeValue(node);
    }

    public void inAIdValue(AIdValue node)
    {
        defaultIn(node);
    }

    public void outAIdValue(AIdValue node)
    {
        defaultOut(node);
    }

    public void caseAIdValue(AIdValue node)
    {
        inAIdValue(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdValue(node);
    }

    public void inAStringValue(AStringValue node)
    {
        defaultIn(node);
    }

    public void outAStringValue(AStringValue node)
    {
        defaultOut(node);
    }

    public void caseAStringValue(AStringValue node)
    {
        inAStringValue(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValue(node);
    }

    public void inACastValue(ACastValue node)
    {
        defaultIn(node);
    }

    public void outACastValue(ACastValue node)
    {
        defaultOut(node);
    }

    public void caseACastValue(ACastValue node)
    {
        inACastValue(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getKet() != null)
        {
            node.getKet().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getBra() != null)
        {
            node.getBra().apply(this);
        }
        outACastValue(node);
    }

    public void inAFnValue(AFnValue node)
    {
        defaultIn(node);
    }

    public void outAFnValue(AFnValue node)
    {
        defaultOut(node);
    }

    public void caseAFnValue(AFnValue node)
    {
        inAFnValue(node);
        if(node.getSket() != null)
        {
            node.getSket().apply(this);
        }
        {
            Object temp[] = node.getCarttail().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCarttail) temp[i]).apply(this);
            }
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getSbra() != null)
        {
            node.getSbra().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAFnValue(node);
    }

    public void inAProcValue(AProcValue node)
    {
        defaultIn(node);
    }

    public void outAProcValue(AProcValue node)
    {
        defaultOut(node);
    }

    public void caseAProcValue(AProcValue node)
    {
        inAProcValue(node);
        if(node.getSket() != null)
        {
            node.getSket().apply(this);
        }
        if(node.getSbra() != null)
        {
            node.getSbra().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAProcValue(node);
    }

    public void inAPrimfnValue(APrimfnValue node)
    {
        defaultIn(node);
    }

    public void outAPrimfnValue(APrimfnValue node)
    {
        defaultOut(node);
    }

    public void caseAPrimfnValue(APrimfnValue node)
    {
        inAPrimfnValue(node);
        if(node.getCartval() != null)
        {
            node.getCartval().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAPrimfnValue(node);
    }
}
