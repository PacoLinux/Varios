%!PS-Adobe-3.0 EPSF-3.0
%%Title: sumsq.fig
%%Creator: fig2dev Version 3.2 Patchlevel 5d
%%CreationDate: Wed May  1 09:34:38 2013
%%BoundingBox: 0 0 445 256
%Magnification: 1.0000
%%EndComments
%%BeginProlog
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index oldshow	% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proc char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% right30
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 32 16 true [ 32 0 0 -16 0 16 ]
	{<00030003000c000c0030003000c000c0030003000c000c00
	30003000c000c00000030003000c000c0030003000c000c0
	030003000c000c0030003000c000c000>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P2 exch def

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

/pageheader {
save
newpath 0 256 moveto 0 0 lineto 445 0 lineto 445 256 lineto closepath clip newpath
-13.2 259.5 translate
1 -1 scale
$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06299 0.06299 sc
} bind def
/pagefooter {
$F2psEnd
restore
} bind def
%%EndProlog
pageheader
%
% Fig objects follow
%
% 
% here starts figure with depth 50
% Polyline
0 slj
0 slc
7.500 slw
n 1575 1125 m 2475 1125 l 2475 1800 l 1575 1800 l
 cp gs col0 s gr 
% Polyline
n 4275 450 m 5175 450 l 5175 1125 l 4275 1125 l
 cp gs col0 s gr 
% Polyline
n 4275 1350 m 5175 1350 l 5175 2700 l 4275 2700 l
 cp gs col0 s gr 
% Polyline
n 1575 2475 m 2475 2475 l 2475 3600 l 1575 3600 l
 cp gs col0 s gr 
% Polyline
 [60] 0 sd
gs  clippath
1545 3688 m 1545 3840 l 1605 3840 l 1605 3688 l 1605 3688 l 1575 3808 l 1545 3688 l cp
eoclip
n 1575 225 m
 1575 3825 l gs col0 s gr gr
 [] 0 sd
% arrowhead
n 1545 3688 m 1575 3808 l 1605 3688 l  col0 s
% Polyline
 [60] 0 sd
gs  clippath
2445 3688 m 2445 3840 l 2505 3840 l 2505 3688 l 2505 3688 l 2475 3808 l 2445 3688 l cp
eoclip
n 2475 225 m
 2475 3825 l gs col0 s gr gr
 [] 0 sd
% arrowhead
n 2445 3688 m 2475 3808 l 2505 3688 l  col0 s
% Polyline
 [15 45] 45 sd
n 1575 1350 m
 2475 1350 l gs col0 s gr  [] 0 sd
% Polyline
 [15 45] 45 sd
n 4275 675 m
 5175 675 l gs col0 s gr  [] 0 sd
% Polyline
n 1575 450 m 2475 450 l 2475 675 l 1575 675 l
 cp gs col0 s gr 
% Polyline
 [15 45] 45 sd
n 1575 2700 m 2475 2700 l 2475 3150 l 1575 3150 l
 cp gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P2 [16 0 0 -8 105.00 180.00] PATmp PATsp ef gr PATusp gs col0 s gr  [] 0 sd
% Polyline
 [15 45] 45 sd
gs  clippath
2670 3463 m 2670 3615 l 2730 3615 l 2730 3463 l 2730 3463 l 2700 3583 l 2670 3463 l cp
2730 2612 m 2730 2460 l 2670 2460 l 2670 2612 l 2670 2612 l 2700 2492 l 2730 2612 l cp
eoclip
n 2700 2475 m
 2700 3600 l gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P2 [16 0 0 -8 180.00 165.00] PATmp PATsp ef gr PATusp gs col0 s gr gr
 [] 0 sd
% arrowhead
n 2730 2612 m 2700 2492 l 2670 2612 l  col0 s
% arrowhead
n 2670 3463 m 2700 3583 l 2730 3463 l  col0 s
% Polyline
2 slj
gs  clippath
4131 639 m 4258 557 l 4226 506 l 4098 588 l 4098 588 l 4216 549 l 4131 639 l cp
eoclip
n 2070 540 m 2071 541 l 2073 542 l 2077 545 l 2084 549 l 2093 555 l
 2105 563 l 2120 572 l 2139 583 l 2160 596 l 2184 611 l
 2211 627 l 2240 643 l 2272 661 l 2305 679 l 2340 698 l
 2377 716 l 2415 734 l 2454 752 l 2495 770 l 2537 787 l
 2581 803 l 2627 819 l 2675 833 l 2725 847 l 2778 860 l
 2834 871 l 2892 881 l 2953 889 l 3017 895 l 3083 899 l
 3150 900 l 3217 899 l 3283 895 l 3347 889 l 3408 881 l
 3466 871 l 3522 860 l 3575 847 l 3625 833 l 3673 819 l
 3719 803 l 3763 787 l 3805 770 l 3846 752 l 3885 734 l
 3923 716 l 3960 698 l 3995 679 l 4028 661 l 4060 643 l
 4089 627 l 4116 611 l 4140 596 l 4161 583 l 4180 572 l
 4195 563 l 4207 555 l 4216 549 l
 4230 540 l gs col0 s gr gr

% arrowhead
0 slj
n 4131 639 m 4216 549 l 4098 588 l  col0 s
% Polyline
2 slj
gs  clippath
5314 1363 m 5169 1316 l 5151 1373 l 5296 1420 l 5296 1420 l 5191 1355 l 5314 1363 l cp
eoclip
n 4680 540 m 4681 540 l 4684 540 l 4690 539 l 4699 539 l 4711 538 l
 4727 537 l 4748 536 l 4772 534 l 4801 532 l 4833 531 l
 4868 529 l 4907 527 l 4948 526 l 4991 525 l 5036 524 l
 5082 523 l 5129 523 l 5176 523 l 5224 525 l 5272 526 l
 5320 529 l 5367 533 l 5414 537 l 5461 543 l 5508 551 l
 5554 560 l 5600 570 l 5645 582 l 5690 597 l 5733 613 l
 5774 631 l 5814 652 l 5850 675 l 5886 703 l 5917 732 l
 5943 762 l 5965 791 l 5981 819 l 5994 846 l 6004 871 l
 6010 894 l 6014 916 l 6016 936 l 6016 956 l 6014 974 l
 6012 991 l 6008 1007 l 6004 1024 l 5999 1040 l 5994 1057 l
 5988 1073 l 5981 1091 l 5975 1110 l 5968 1130 l 5960 1151 l
 5951 1173 l 5942 1197 l 5931 1222 l 5919 1248 l 5905 1274 l
 5889 1301 l 5871 1326 l 5850 1350 l 5820 1376 l 5786 1396 l
 5751 1412 l 5715 1424 l 5677 1432 l 5639 1436 l 5601 1437 l
 5562 1436 l 5523 1433 l 5484 1428 l 5445 1421 l 5407 1413 l
 5370 1405 l 5334 1396 l 5300 1387 l 5270 1379 l 5243 1371 l
 5221 1364 l 5203 1359 l
 5175 1350 l gs col0 s gr gr

% arrowhead
0 slj
n 5314 1363 m 5191 1355 l 5296 1420 l  col0 s
% Polyline
2 slj
gs  clippath
4147 2080 m 4295 2051 l 4283 1992 l 4135 2022 l 4135 2022 l 4259 2028 l 4147 2080 l cp
eoclip
n 1980 1260 m 1981 1260 l 1985 1259 l 1991 1258 l 2000 1257 l 2013 1255 l
 2029 1253 l 2050 1250 l 2075 1247 l 2103 1244 l 2135 1240 l
 2169 1237 l 2205 1233 l 2244 1230 l 2284 1228 l 2325 1226 l
 2366 1224 l 2408 1224 l 2451 1224 l 2493 1226 l 2536 1229 l
 2580 1233 l 2623 1239 l 2667 1247 l 2711 1258 l 2755 1271 l
 2799 1286 l 2842 1305 l 2885 1326 l 2925 1350 l 2968 1381 l
 3004 1413 l 3034 1446 l 3057 1479 l 3072 1509 l 3081 1538 l
 3084 1565 l 3082 1590 l 3075 1614 l 3065 1635 l 3052 1656 l
 3038 1676 l 3022 1695 l 3007 1714 l 2993 1734 l 2981 1754 l
 2971 1776 l 2965 1799 l 2964 1823 l 2969 1849 l 2980 1877 l
 2998 1906 l 3025 1937 l 3059 1967 l 3101 1997 l 3150 2025 l
 3194 2045 l 3240 2062 l 3287 2076 l 3336 2087 l 3384 2097 l
 3433 2103 l 3482 2108 l 3530 2111 l 3578 2112 l 3626 2112 l
 3674 2110 l 3722 2108 l 3770 2104 l 3817 2099 l 3863 2094 l
 3909 2088 l 3954 2082 l 3998 2075 l 4039 2069 l 4079 2062 l
 4115 2056 l 4148 2050 l 4178 2044 l 4203 2039 l 4225 2035 l
 4242 2032 l 4255 2029 l
 4275 2025 l gs col0 s gr gr

% arrowhead
0 slj
n 4147 2080 m 4259 2028 l 4135 2022 l  col0 s
% Polyline
2 slj
gs  clippath
1462 1207 m 1600 1146 l 1576 1091 l 1438 1152 l 1438 1152 l 1560 1132 l 1462 1207 l cp
eoclip
n 1980 2610 m 1978 2610 l 1975 2611 l 1968 2612 l 1958 2613 l 1944 2615 l
 1925 2617 l 1902 2620 l 1874 2623 l 1842 2627 l 1806 2631 l
 1767 2635 l 1725 2638 l 1681 2642 l 1635 2645 l 1588 2648 l
 1540 2650 l 1491 2651 l 1443 2652 l 1395 2651 l 1347 2648 l
 1300 2645 l 1254 2639 l 1209 2632 l 1164 2622 l 1120 2610 l
 1078 2596 l 1037 2578 l 999 2557 l 962 2533 l 929 2506 l
 900 2475 l 876 2441 l 857 2406 l 842 2371 l 831 2336 l
 825 2302 l 821 2270 l 820 2240 l 822 2212 l 826 2187 l
 831 2163 l 838 2142 l 846 2122 l 855 2103 l 864 2085 l
 874 2068 l 885 2051 l 896 2034 l 908 2017 l 920 1999 l
 932 1979 l 945 1958 l 958 1935 l 971 1910 l 985 1882 l
 1000 1852 l 1015 1819 l 1031 1783 l 1048 1744 l 1066 1703 l
 1085 1661 l 1104 1618 l 1125 1575 l 1154 1521 l 1183 1471 l
 1212 1426 l 1240 1386 l 1267 1351 l 1294 1320 l 1320 1293 l
 1346 1268 l 1370 1247 l 1395 1228 l 1418 1211 l 1441 1195 l
 1464 1182 l 1484 1170 l 1504 1159 l 1521 1150 l 1537 1142 l
 1549 1136 l 1559 1132 l
 1575 1125 l gs col0 s gr gr

% arrowhead
0 slj
n 1462 1207 m 1560 1132 l 1438 1152 l  col0 s
/Times-Roman ff 190.50 scf sf
900 675 m
gs 1 -1 sc (vp) col0 sh gr
/Times-Roman ff 190.50 scf sf
675 2700 m
gs 1 -1 sc (v) col0 sh gr
/Times-Roman ff 190.50 scf sf
675 3375 m
gs 1 -1 sc (total) col0 sh gr
/Times-Roman ff 190.50 scf sf
675 3600 m
gs 1 -1 sc (i) col0 sh gr
/Times-Roman ff 190.50 scf sf
1800 1575 m
gs 1 -1 sc (bounds) col0 sh gr
/Times-Roman ff 190.50 scf sf
4500 900 m
gs 1 -1 sc (bounds) col0 sh gr
/Times-Roman ff 190.50 scf sf
5400 2025 m
gs 1 -1 sc (data for array allocated ) col0 sh gr
/Times-Roman ff 190.50 scf sf
5400 2250 m
gs 1 -1 sc (by vp) col0 sh gr
/Times-Roman ff 190.50 scf sf
4275 225 m
gs 1 -1 sc (descriptor pointed to by vp) col0 sh gr
/Times-Roman ff 190.50 scf sf
225 1350 m
gs 1 -1 sc (descriptor) col0 sh gr
/Times-Roman ff 190.50 scf sf
225 1575 m
gs 1 -1 sc (vp^[3..5]) col0 sh gr
/Times-Roman ff 190.50 scf sf
4725 1575 m
gs 1 -1 sc (0) col0 sh gr
/Times-Roman ff 190.50 scf sf
4725 1800 m
gs 1 -1 sc (1) col0 sh gr
/Times-Roman ff 190.50 scf sf
4725 2025 m
gs 1 -1 sc (2) col0 sh gr
/Times-Roman ff 190.50 scf sf
4725 2250 m
gs 1 -1 sc (3) col0 sh gr
/Times-Roman ff 190.50 scf sf
4725 2475 m
gs 1 -1 sc (4) col0 sh gr
/Times-Roman ff 190.50 scf sf
4725 2700 m
gs 1 -1 sc (5) col0 sh gr
/Times-Roman ff 190.50 scf sf
1575 4050 m
gs 1 -1 sc (stack) col0 sh gr
/Times-Roman ff 190.50 scf sf
4275 4050 m
gs 1 -1 sc (heap) col0 sh gr
/Times-Roman ff 190.50 scf sf
2925 3150 m
gs 1 -1 sc (frame for sumsq) col0 sh gr
% here ends figure;
pagefooter
showpage
%%Trailer
end
%EOF
