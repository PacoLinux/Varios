
//Title:        ilcg
//Version:
//Copyright:    Copyright (c) 1998
//Author:       Paul Cockshott
//Company:
//Description:  Your description
package ilcg.tree;
/**
Class that acts as an alias for a register when it is reserved.
*/

public class RegReservation  extends Register
{


    /** for an alias this returns the parent, for all other registers it returns null */
    public Register getParent()
    {
        return myParent;
    }

    /** Returns true if a register has been spilled */
    public boolean isSpilled()
    {
        return spilled;
    }

    /** returns a node specifying the mem loc into which it was spilled */
    public Node getSpillLocation()
    {
        return spillLocation;
    }

    /** This should be called whenever a spill is generated by the code generator.
    loc specifies where it is being spilled to.
     */
    public void spill(Node loc)
    {
        spilled=true;
        spillLocation = loc;
    }

    /** This should be called whenever it is unspilled or a spill is canceled
    due to the transaction within which it tookplace being aborted, it returns where it was
     spilled to and clears the spill flag */
    public Node unspill()
    {
        Node temp=spillLocation;
        spillLocation=null;
        spilled=false;
        return temp;
    }

    /** Create a child reservation that acts as a compile time alias for the parent
    for the purpose of register spilling */
    public RegReservation(Register parent)
    {
        myParent=parent;
        parent.latestReservation=this;
        words=parent.words;
        width=parent.width;
        reserved=parent.reserved;
        reservationMask=parent.reservationMask;
        rn=parent.rn;
        rt=parent.rt;
    }
    String deref(String t)
    {
        if(t.startsWith("ref "))return Format.typeDeref(t);
        return t;
    }

    public boolean equals(Object n)
    {
        if(n instanceof Register)return ((Register)n).rn.equals(rn);
        return false;
    }
    public String toString()
    {
        return rn;
    }



}
