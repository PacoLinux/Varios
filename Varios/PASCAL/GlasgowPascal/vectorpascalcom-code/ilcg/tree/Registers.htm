<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>Registers</TITLE>
</HEAD>
<BODY>

<B><I><FONT FACE="Arial"><P>Registers</P>
</B></I></FONT><FONT SIZE=2><P>The register class provides an internal representation of machine registers whilst code generation takes place. It stores the printable form of the register, its size and whether or not the register is reserved.</P>
</FONT><B><I><FONT FACE="Arial"><P>Register Aliases</P>
</B></I></FONT><FONT SIZE=2>
<P>One reason aliases are necessary is that machine definitions may define some registers to be subfields of others. When the parent register is reserved so must the aliases of its subfields. But there is another reason too.</P>

<P>When a register is allocated for the purpose of code generation it is important that it be spillable. That is tosay, when the number of registers allocated exceeds those available, the contents of some of these may have to be stored on the stack. </P>
<P>When this is done, there may be partially matched portions of the syntax tree that have pointers to the register because it contains results of intermediate calculations. When these come to be used, it is important that code is planted to recall the former contents of the register from the stack.</P>

<P>&nbsp;</P>
<P>The strategy used is to provide an additional level of indirection, so that code generation uses a  register alias, which, can potentially record information about where the register has been spilled to.</P>

<P>Thus the register class provides a means of creating aliases which when printed out, return the same name as the original register, but which can be spilled.</P>

<P>An interrogation predicate isSpilled is provided to detect if a register is spilled. When it is spilled, the alias records the location at which it was spilled. This can be obtained using the getSpillLocation method.</P></FONT></BODY>
</HTML>
