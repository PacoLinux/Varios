#LyX 1.1 created this file. For more info see http://www.lyx.org/
\lyxformat 2.16
\textclass report
\begin_preamble
\usepackage[T1]{fontenc}
\usepackage[latin1]{inputenc}
\usepackage{times}
\makeatletter
\end_preamble
\language default
\inputencoding latin1
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize a4paper
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\paperorientation portrait
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Title

MM Pascal Reference Manual
\layout Author

Paul Cockshott 
\layout Standard


\begin_inset LatexCommand \tableofcontents{}

\end_inset 


\layout Standard


\begin_inset LatexCommand \listoffigures{}

\end_inset 


\layout Standard


\begin_inset LatexCommand \listoftables{}

\end_inset 


\layout Chapter

The MM Pascal Language
\layout Standard

MM Pascal is a dialect of Pascal designed to make efficient use of the multi-med
ia instructionsets of recent procesors.
 It supports data parallel operations and saturated arithmetic.
 This describes the MM Pascal language.
 
\layout Section

Purpose
\layout Standard

A number of widely used contemporary processors have instructionset extensions
 for improved performance in multi-media applications.
 The aim is to allow operations to proceed on multiple pixels each clock
 cycle.
 Such instructionsets have been incorporated both in specialist DSP chips
 like the Texas C62xx
\begin_inset LatexCommand \cite{Texas}

\end_inset 

 and in general purpose CPU chips like the Intel IA32
\begin_inset LatexCommand \cite{Intel00}

\end_inset 

 or the AMD K6 
\begin_inset LatexCommand \cite{AMD}

\end_inset 

.
\layout Standard

These instructionset extensions are typically based on the Single Instruction-st
ream Multiple Data-stream (SIMD) model in which a single instruction causes
 the same mathematical operation to be carried out on several operands,
 or pairs of operands at the same time.
 The level or parallelism supported ranges from 2 floating point operations
 at a time on the AMD K6 architecture to 16 byte operations at a time on
 the intel P4 architecture.
 Whilst processor architectures are moving towards greater levels of parallelism
, the most widely used programming languages like C, Java and Delphi are
 structured around a model of computation in which operations take place
 on a single value at a time.
 This was appropriate when processors worked this way, but has become an
 impediment to programmers seeking to make use of the performance offered
 by multi-media instructionsets.
\layout Standard

MM Pascal aims to provide an efficient and concise notation for programmers
 using Multi-Media enhanced CPUs.
 In doing so it borrows concepts for expressing data parallelism that have
 a long history, dating back to Iverson's work on APL in the early '60s
\begin_inset LatexCommand \cite{Iverson62}

\end_inset 

.
 
\layout Standard

The\SpecialChar ~
 key concept here is the systematic overloading of all scalar operators
 to work on arrays.
 Given some type 
\begin_inset Formula \( t \)
\end_inset 

 let us denote an array whose elements are of type 
\begin_inset Formula \( T \)
\end_inset 

as having type 
\begin_inset Formula \( T[] \)
\end_inset 

.
 Then if we have a binary operator 
\begin_inset Formula \( \omega :(T\otimes T)\rightarrow T \)
\end_inset 

, in languages derived from APL we automatically have an operator 
\begin_inset Formula \( \omega :(T[]\otimes T[])\rightarrow T[] \)
\end_inset 

 
\begin_inset Formula \(  \)
\end_inset 

.
 Thus if 
\begin_inset Formula \( x,y \)
\end_inset 

 are arrays of integers 
\begin_inset Formula \( k=x+y \)
\end_inset 

 is the array of integers where 
\begin_inset Formula \( k_{i}=x_{i}+y_{i} \)
\end_inset 

.
\layout Standard

The basic concept is simple, there are complications to do with the semantics
 of operations between arrays of different lengths and different dimensions,
 but Iverson provides a consistent treatment of these.
 The most recent languages to be built round this model are J, an interpretive
 language
\begin_inset LatexCommand \cite{Jmanual}

\end_inset 

, and F
\begin_inset LatexCommand \cite{Metcalf96}

\end_inset 

 a modernised Fortran.
 In principle though any language with array types can be extended in a
 similar way.
 Iverson's approach to data parallelism is machine independent.
 It can be implemented using scalar instructions or using the SIMD model.
 The only difference is speed.
 MM Pascal incorporates Iversons approach to data parallelism.
\layout Standard

\SpecialChar ~

\layout Section

Lexical tokens
\layout Standard

A MM Pascal input file is assumed to consist of 8 bit characters.
 The vocabulary of MM Pascal consists of letters, digits, reserved words
 and special symbols.
 The letters allowed are shown in table 
\begin_inset LatexCommand \ref{letters}

\end_inset 

 .
 In what follows examples and reserved words of MM Pascal will be denoted
 in bold face.
\begin_float tab 
\layout Caption

The letters of MM Pascal
\begin_inset LatexCommand \label{letters}

\end_inset 

.
\layout Standard
\align center \LyXTable
multicol5
4 13 0 0 -1 -1 -1 -1
1 1 0 0
1 0 0 0
1 0 0 0
1 1 0 0
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

A
\newline 
B
\newline 
C
\newline 
D
\newline 
E
\newline 
F
\newline 
G
\newline 
H
\newline 
I
\newline 
J
\newline 
K
\newline 
L
\newline 
M
\newline 
N
\newline 
O
\newline 
P
\newline 
Q
\newline 
R
\newline 
S
\newline 
T
\newline 
U
\newline 
V
\newline 
W
\newline 
X
\newline 
Y
\newline 
Z
\newline 
a
\newline 
b
\newline 
c
\newline 
d
\newline 
e
\newline 
f
\newline 
g
\newline 
h
\newline 
i
\newline 
j
\newline 
k
\newline 
l
\newline 
m
\newline 
n
\newline 
o
\newline 
p
\newline 
q
\newline 
r
\newline 
s
\newline 
t
\newline 
u
\newline 
v
\newline 
w
\newline 
x
\newline 
y
\newline 
z
\end_float 
 The digits are shown in table 
\begin_inset LatexCommand \ref{digits}

\end_inset 

.
\begin_float tab 
\layout Caption

The digits of MM Pascal.
\begin_inset LatexCommand \label{digits}

\end_inset 


\layout Standard
\align center \LyXTable
multicol5
1 10 0 0 -1 -1 -1 -1
1 1 0 0
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

0
\newline 
1
\newline 
2
\newline 
3
\newline 
4
\newline 
5
\newline 
6
\newline 
7
\newline 
8
\newline 
9
\end_float 
 The special symbols are shown in table
\begin_inset LatexCommand \ref{specials}

\end_inset 

 .
\begin_float tab 
\layout Caption

Special symbols
\begin_inset LatexCommand \label{specials}

\end_inset 


\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
11 3 0 0 -1 -1 -1 -1
1 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 1 0 0
1 1 0 0
8 1 0 "" ""
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

+
\newline 
:
\newline 
(
\newline 
-
\newline 
'
\newline 
)
\newline 
*
\newline 
=
\newline 
[
\newline 
/
\newline 
<>
\newline 
]
\newline 
:=
\newline 
<
\newline 
{
\newline 
.
\newline 
<=
\newline 
}
\newline 
,
\newline 
>=
\newline 
^
\newline 
;
\newline 
>
\newline 
..
\newline 
+:
\newline 
@
\newline 
*)
\newline 
-:
\newline 
$
\newline 
(*
\newline 
_
\newline 
**
\newline 

\end_float 
\layout Subsection

Reserved words
\layout Standard

The reserved words are
\layout Standard


\series bold 
ABS, ADDR, AND, ARRAY,
\layout Standard


\series bold 
BEGIN,
\layout Standard


\series bold 
CASE, CHR, CONST, COS,
\layout Standard


\series bold 
DISPOSE, DIV, DO, DOWNTO,
\layout Standard


\series bold 
END, ELSE, EXIT,
\layout Standard


\series bold 
FALSE, FILE, FOR, FUNCTION,
\layout Standard


\series bold 
GOTO,
\layout Standard


\series bold 
IF, IMPLEMENTATION, IN, INTERFACE,
\layout Standard


\series bold 
LABEL, LN,
\layout Standard


\series bold 
MAX, MIN, MOD,
\layout Standard


\series bold 
NEW, NOT,
\layout Standard


\series bold 
OF, OR, ORD,
\layout Standard


\series bold 
PACKED, POW,PRED, PROCEDURE, PROGRAM,
\layout Standard


\series bold 
READ, READLN, RECORD, REPEAT, ROUND,
\layout Standard


\series bold 
SET, SHL, SHR, SIN, SIZEOF, STRING, SQRT, SUCC,
\layout Standard


\series bold 
TAN, THEN, TO, TRUE, TYPE,
\layout Standard


\series bold 
VAR,
\layout Standard


\series bold 
WITH, WHILE, WRITE, WRITELN,
\layout Standard


\series bold 
UNIT, UNTIL, USES 
\layout Standard

Reserved words may be written in either lower case or upper case letters,
 or any combination of the two.
 
\layout Subsection

Comments
\layout Standard

The comment construct 
\layout Standard


\series bold 
{
\series default 
 < any sequence of characters not contatining 
\begin_inset Quotes eld
\end_inset 

}
\begin_inset Quotes erd
\end_inset 

 >
\series bold 
 }
\series default 
 
\layout Standard

may be inserted between any two identifiers, special symbols, numbers or
 reserved words without altering the semantics or syntactic correctness
 of the program.
 The bracketing pair
\series bold 
 (* *)
\series default 
 may substitute for 
\series bold 
{ }
\series default 
.
 Where a comment starts with 
\series bold 
{
\series default 
 it continues until the next
\series bold 
 }
\series default 
.
 Where it starts with 
\series bold 
(*
\series default 
 it must be terminated by
\series bold 
 *)
\begin_float footnote 
\layout Standard

Note this differs from ISO Pascal which allows a comment starting with {
 to terminate with *) and vice versa.
\end_float 
.
\layout Subsection

Identifiers
\layout Standard

Identifiers are used to name values, storage locations, programs, program
 modules, types, procedures and functions.
 An identifier starts with a letter followed by zero or more letters, digits
 or the special symbol
\series bold 
 _
\series default 
.
 Case is not significant in identifiers.
\layout Subsection

Integer numbers
\layout Standard

Integer numbers are formed of a sequence of decimal digits, thus 
\series bold 
1
\series default 
, 
\series bold 
23
\series default 
, 
\series bold 
9976
\series default 
 etc, or as hexadecimal numbers, or as numbers of any base between 2 and
 36.
 A hexadecimal number takes the form of a 
\series bold 
$
\series default 
 followed by a sequence of hexadecimal digits thus 
\series bold 
$01, $3ff, $5A
\series default 
.
 The letters in a hexadecimal number may be upper or lower case and drawn
 from the range 
\series bold 
a..f
\series default 
 or 
\series bold 
A..F.
 
\layout Standard

A based integer is written with the base first followed by a # character
 and then a sequence of letters or digits.
 Thus
\series bold 
 2#1101
\series default 
 is a binary number 
\series bold 
8#67
\series default 
 an octal number and 
\series bold 
20#7i
\series default 
 a base 20 number.
\layout Standard

The default precision for integers is 32 bits.
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
1 2 0 0 -1 -1 -1 -1
1 1 0 0
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

<digit sequence>
\newline 
<digit> +
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
1 2 0 0 -1 -1 -1 -1
1 1 0 0
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

<decimal integer>
\newline 
<digit sequence>
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
1 2 0 0 -1 -1 -1 -1
1 1 0 0
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

<hex integer>
\newline 
`$'<hexdigit>+
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
1 2 0 0 -1 -1 -1 -1
1 1 0 0
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

<based integer> 
\newline 
<digit sequence>'#'<alphanumeric>+
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
3 2 0 0 -1 -1 -1 -1
1 1 0 0
1 1 0 0
1 1 0 0
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

<unsigned integer>
\newline 
<decimal integer>
\newline 

\newline 
<hex integer>
\newline 

\newline 
<based integer>
\begin_float tab 
\layout Caption

The hexadecimal digits of MM Pascal.
\layout Standard
\align center \LyXTable
multicol5
3 17 0 0 -1 -1 -1 -1
1 1 0 0
0 0 0 0
1 1 0 0
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 1 "" ""
8 0 1 "" ""
8 0 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

Value
\newline 
0
\newline 
1
\newline 
2
\newline 
3
\newline 
4
\newline 
5
\newline 
6
\newline 
7
\newline 
8
\newline 
9
\newline 
10
\newline 
11
\newline 
12
\newline 
13
\newline 
14
\newline 
15
\newline 
Notation 1
\newline 
0
\newline 
1
\newline 
2
\newline 
3
\newline 
4
\newline 
5
\newline 
6
\newline 
7
\newline 
8
\newline 
9
\newline 
A
\newline 
B
\newline 
C
\newline 
D
\newline 
E
\newline 
F
\newline 
Notation 2
\newline 

\newline 

\newline 

\newline 

\newline 

\newline 

\newline 

\newline 

\newline 

\newline 

\newline 
a
\newline 
b
\newline 
c
\newline 
d
\newline 
e
\newline 
f
\layout Standard

.
\end_float 
 
\layout Subsection

Real numbers
\layout Standard

Real numbers are supported in floating point notation, thus 
\series bold 
14.7, 9.99e5, 38E3, 3.6e-4
\series default 
 are all valid denotations for real numbers.
 The default precision for real numbers is also 32 bit, though intermediate
 calculations may use higher precision.
 The choice of 32 bits as the default precision is influenced by the fact
 that 32 bit floating point vector operations are well supported in multi-media
 instructions.
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
2 2 0 0 -1 -1 -1 -1
1 1 0 0
1 1 0 0
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

<exp>
\newline 
`e'
\newline 

\newline 
`E'
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
1 2 0 0 -1 -1 -1 -1
1 1 0 0
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

<scale factor>
\newline 
[<sign>] <unsigned integer>
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
2 2 0 0 -1 -1 -1 -1
1 1 0 0
1 1 0 0
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

<sign>
\newline 
`-'
\newline 

\newline 
`+'
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
3 2 0 0 -1 -1 -1 -1
1 1 0 0
1 1 0 0
0 1 0 0
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

<unsigned real>
\newline 
<decimal integer> `.' <digit sequence>
\newline 

\newline 
<decimal integer>` .' <digit sequence> <exp><scale factor> 
\newline 

\newline 
<decimal integer><exp> <scale factor>
\layout Subsection

Character strings
\layout Standard

Sequences of characters enclosed by quotes are called literal strings.
 Literal strings consisting of a single character are constants of the standard
 type char.
 If the string is to contain a quote character this quote character must
 be written twice.
\layout Standard


\series bold 
\size small 
'A' 'x' 'hello' 'John''s house'
\layout Standard

are all valid literal strings.
 The allowable characters in literal strings are:
\layout Standard


\family typewriter 
'
\size small 
 ' '!' '"' '#' '$' '%' '&' ''' '(' ')' '*' '+' ',' '-' '.' '/', 
\layout Standard


\family typewriter 
\size small 
'0' '1' '2' '3' '4' '5' '6' '7' '8' '9' ':' ';' '<' '=' '>' '?', 
\layout Standard


\family typewriter 
\size small 
'@' 'A' 'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K' 'L' 'M' 'N' 'O', 
\layout Standard


\family typewriter 
\size small 
'P' 'Q' 'R' 'S' 'T' 'U' 'V' 'W' 'X' 'Y' 'Z' '[' '
\backslash 
' ']' '^' '_', 
\layout Standard


\family typewriter 
\size small 
'`' 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o', 
\layout Standard


\family typewriter 
\size small 
'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z' '{' '|' '}' '~'
\layout Chapter

Declarations
\layout Standard

MM Pascal is a language supporting nested declaration contexts.
 A declaration context is either a program context, and unit interface or
 implementation context, or a procedure or function context.
 A resolution context determines the meaning of an identifier.
 Within a resolution context, identifiers can be declared to stand for constants
, types, variables, procedures or functions.
 When an identifier is used, the meaning taken on by the identifier is that
 given in the closest containing resolution context.
 Resolution contexts are any declaration context or a 
\series bold 
with
\series default 
 statement context.
 The ordering of these contexts when resolving an identifier is:
\layout Enumerate

The declaration context identified by any 
\series bold 
with
\series default 
 statements which nest the current occurence of the identifier.
 These 
\series bold 
with
\series default 
 statement contexts are searched from the innermost to the outermost.
\layout Enumerate

The declaration context of the currently nested procedure declarations.
 These procedure contexts are searched from the innermost to the outermost.
\layout Enumerate

The declaration context of the current unit or program.
\layout Enumerate

The interface declaration contexts of the units mentioned in the use list
 of the current unit or program.
 These contexts are searched from the rightmost unit mentioned in the use
 list to the leftmost identifier in the use list.
\layout Enumerate

The interface declartion context of the System unit.
\layout Enumerate

The pre-declared identifiers of the language.
\layout Section

Constants
\layout Standard

A constant definition introduces an identifier as a synonym for a constant.
 
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
2 2 0 0 -1 -1 -1 -1
1 1 0 0
1 1 0 0
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

<constant declaration>
\newline 
<identifier>=<expression>
\newline 

\newline 
<identifier>':'<type>'='<typed constant>
\layout Standard

Constants can be simple constants or typed constants.
 A simple constant must be a constant expression whose value is known at
 compile time.
 This restricts it to expressions for which all component identifiers are
 other constants, and for which the permitted operators are given in table
\begin_inset LatexCommand \ref{MMConst}

\end_inset 

 .
 This restricts simple constants to be of scalar or string types.
\layout Standard

\begin_float tab 
\layout Caption

The operators permitted in MM Pascal constant expressions.
\begin_inset LatexCommand \label{MMConst}

\end_inset 


\layout Standard
\align center \LyXTable
multicol5
1 10 0 0 -1 -1 -1 -1
1 1 0 0
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 1 "" ""
8 0 0 "" ""
8 1 0 "" ""
8 1 1 "" ""
8 0 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

+
\newline 
-
\newline 
*
\newline 
/
\newline 
div
\newline 
mod
\newline 
shr
\newline 
shl
\newline 
and
\newline 
or
\end_float 
Typed constants provide the program with initialised variables which may
 hold array types.
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
2 2 0 0 -1 -1 -1 -1
1 1 0 0
1 1 0 0
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

<typed constant>
\newline 
<expression>
\newline 

\newline 
<array constant>
\layout Subsection

Array constants
\layout Standard

Array constants are comma separated lists of constant expressions enclosed
 by brackets.
 Thus 
\layout Standard


\series bold 
tr:array[1..3] of real =(1.0,1.0,2.0);
\layout Standard

is a valid array constant declaration, as is:
\layout Standard


\series bold 
t2:array[1..2,1..3] of real=((1.0,2.0,4.0),(1.0,3.0,9.0));
\layout Standard

The array constant must structurally match the type given to the identifier.
 That is to say it must match with respect to number of dimensions, length
 of each dimension, and type of the array elements.
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
1 2 0 0 -1 -1 -1 -1
1 1 0 0
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

<array constant>
\newline 
'(' <typed constant> [,<typed constant>]* ')'
\layout Subsection

Predeclared constants
\layout List
\labelwidthstring 00.00.0000


\series bold 
maxint
\series default 
 The largest supported integer value.
\layout List
\labelwidthstring 00.00.0000


\series bold 
pi
\series default 
  A real numbered approximation to 
\begin_inset Formula \( \pi  \)
\end_inset 


\layout List
\labelwidthstring 00.00.0000


\series bold 
maxchar
\series default 
  The highest character in the character set.
\layout List
\labelwidthstring 00.00.0000


\series bold 
maxreal
\series default 
 The highest representable real.
 
\layout List
\labelwidthstring 00.00.0000


\series bold 
minreal
\series default 
 The smallest representable positive real number.
 
\layout List
\labelwidthstring 00.00.0000


\series bold 
epsreal
\series default 
 The smallest real number which when added to 1.0 yields a value distinguishable
 from 1.0.
 
\layout List
\labelwidthstring 00.00.0000


\series bold 
maxdouble
\series default 
 The highest representable double precision real number.
\layout List
\labelwidthstring 00.00.0000


\series bold 
mindouble
\series default 
 The smallest representable positive double precision real number.
\layout Section

Labels
\layout Standard

Labels are written as digit sequences.
 Labels must be declared before they are used.
 They can be used to label the start of a statement and can be the destination
 of a 
\series bold 
goto
\series default 
 statement.
 A 
\series bold 
goto
\series default 
 statement must have as its destination a label declared within the current
 innermost declaration context.
\layout Section

Types
\layout Standard

A type declaration determines the set of values that expressions of this
 type may assume and associates with this set an identifier.
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
3 2 0 0 -1 -1 -1 -1
1 1 0 0
1 0 0 0
1 1 0 0
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

<type>
\newline 
<simple type>
\newline 

\newline 
<structured type>
\newline 

\newline 
<pointer type>
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
1 2 0 0 -1 -1 -1 -1
1 1 0 0
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

<type definition>
\newline 
<identifier>'='<type> 
\layout Subsection

Simple types
\layout Standard

Simple types are either scalar, standard, subrange or dimensioned types.
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
5 2 0 0 -1 -1 -1 -1
1 1 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 1 0 0
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

<simple type>
\newline 
<scalar type>
\newline 

\newline 
<integral type>
\newline 

\newline 
<subrange type>
\newline 

\newline 
<dimensioned type>
\newline 

\newline 
<floating point type>
\layout Subsubsection

Scalar types
\layout Standard

A scalar type defines an ordered set of identifier by listing these identifiers.
 The declaration takes the form of a comma separated list of identifiers
 enclosed by brackets.
 The identifiers in the list are declared simultaneously with the declared
 scalar type to be constants of this declared scalar type.
 Thus 
\layout Standard


\series bold 
colour = (red,green,blue);
\layout Standard


\series bold 
day=(monday,tuesday,wednesday,thursday,friday,saturday,sunday);
\layout Standard

are valid scalar type declarations.
\layout Subsubsection

Standard types
\layout Standard

The following types are provided as standard in MM Pascal:
\begin_float tab 
\layout Caption

Categorisation of the standard types.
\layout Standard
\align center \LyXTable
multicol5
10 2 0 0 -1 -1 -1 -1
1 1 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 1 0 0
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

type
\newline 
category
\newline 
real
\newline 
floating point
\newline 
double
\newline 
floating point
\newline 
byte
\newline 
integral
\newline 
shortint
\newline 
integral
\newline 
word
\newline 
integral
\newline 
integer
\newline 
integral
\newline 
cardinal
\newline 
integral
\newline 
boolean
\newline 
scalar
\newline 
char
\newline 
scalar
\end_float 
\layout List
\labelwidthstring 00.00.0000


\series bold 
integer
\series default 
 The numbers are in the range -maxint to +maxint.
\layout List
\labelwidthstring 00.00.0000


\series bold 
real
\series default 
 These are a subset of the reals constrained by the IEEE 32 bit floating
 point format.
\layout List
\labelwidthstring 00.00.0000


\series bold 
double
\series default 
 These are a subset of the real numbers constrained by the IEEE 64 bit floating
 point format.
\layout List
\labelwidthstring 00.00.0000


\series bold 
boolean
\series default 
 These take on the values
\series bold 
 (false,true)
\series default 
 which are ordered such that 
\series bold 
true<false
\series default 
.
 
\layout List
\labelwidthstring 00.00.0000


\series bold 
char
\series default 
 These include the characters from 
\series bold 
chr(0)
\series default 
 to 
\series bold 
charmax
\series default 
.
 All the allowed characters for string literals are in the type char, but
 the characterset may include other characters whose printable form is country
 specific.
 
\layout List
\labelwidthstring 00.00.0000


\series bold 
byte
\series default 
 These take on the positive integers between 0 and 255.
\layout List
\labelwidthstring 00.00.0000


\series bold 
shortint
\series default 
 These take on the signed values between -128 and 127.
\layout List
\labelwidthstring 00.00.0000


\series bold 
word
\series default 
 These take on the positive integers from 0 to 65535.
\layout List
\labelwidthstring 00.00.0000


\series bold 
cardinal
\series default 
 These take on the positive integers form 0 to 4292967295, i.e., the most
 that can be represented in a 32 bit unsigned number.
\layout Subsubsection

Subrange types
\layout Standard

A type may be declared as a subrange of another scalar or integer type by
 indicating the largest and smallest value in the subrange.
 These values must be constants known at compile time.
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
1 2 0 0 -1 -1 -1 -1
1 1 0 0
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

<subrange type>
\newline 
<constant> '..' <constant>
\layout Standard

Examples: 1..10, 'a'..'f', monday..thursday.
\layout Subsubsection

Dimensioned types
\layout Standard

These provide a means by which floating point types can be specialised to
 represent dimensioned numbers as is required in physics calculations.
 For example:
\layout Standard


\series bold 
kms =(mass,distance,time);
\layout Standard


\series bold 
meter=real of distance;
\layout Standard


\series bold 
kilo=real of mass;
\layout Standard


\series bold 
second=real of time;
\layout Standard


\series bold 
newton=real of mass * distance * time POW -2;
\layout Standard


\series bold 
meterpersecond = real of distance *time POW -1;
\layout Standard

The grammar is given by:
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
1 2 0 0 -1 -1 -1 -1
1 1 0 0
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

<dimensioned type>
\newline 
<real type> <dimension >['*' <dimension>]*
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
2 2 0 0 -1 -1 -1 -1
1 1 0 0
1 1 0 0
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

<real type>
\newline 
'real'
\newline 

\newline 
'double'
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
1 2 0 0 -1 -1 -1 -1
1 1 0 0
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

<dimension>
\newline 
<identifier> ['POW' [<sign>] <unsigned integer>]
\layout Standard

The identifier must be a member of a scalar type, and that scalar type is
 then refered to as the basis space of the dimensioned type.
 The identifiers of the basis space are refered to as the dimensions of
 the dimensioned type.
 Associated with each dimension of a dimensioned type there is an integer
 number refered to as the power of that dimension.
 This is either introduced explicitly at type declaration time, or determined
 implicitly for the dimensional type of expressions.
 
\layout Standard

A value of a dimensioned type is a dimensioned value.
 Let 
\begin_inset Formula \( \log _{d}t \)
\end_inset 

 of a dimensioned type 
\begin_inset Formula \( t \)
\end_inset 

 be the power to which the dimension 
\begin_inset Formula \( d \)
\end_inset 

 of type 
\begin_inset Formula \( t \)
\end_inset 

 is raised.
 Thus for 
\begin_inset Formula \( t= \)
\end_inset 

newton in the example above, and 
\begin_inset Formula \( d= \)
\end_inset 

time, 
\begin_inset Formula \( \log _{d}t=-2 \)
\end_inset 


\layout Standard

If 
\begin_inset Formula \( x \)
\end_inset 

 and 
\begin_inset Formula \( y \)
\end_inset 

 are values of dimensioned types 
\begin_inset Formula \( t_{x} \)
\end_inset 

and 
\begin_inset Formula \( t_{y} \)
\end_inset 

respectively, then the following operators are only permissible if 
\begin_inset Formula \( t_{x}=t_{y} \)
\end_inset 


\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
1 8 0 0 -1 -1 -1 -1
1 1 0 0
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

+
\newline 
-
\newline 
<
\newline 
>
\newline 
<>
\newline 
=
\newline 
<=
\newline 
>=
\layout Standard

For + and -, the dimensional type of the result is the same as that of the
 arguments.
 The operations 
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
1 2 0 0 -1 -1 -1 -1
1 1 0 0
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

*
\newline 
/
\layout Standard

are permited if the types 
\begin_inset Formula \( t_{x} \)
\end_inset 

and 
\begin_inset Formula \( t_{y} \)
\end_inset 

 share the same basis space, or if the basis space of one of the types is
 a subrange of the basis space of the other.
  
\layout Standard

The operation 
\series bold 
POW
\series default 
 is permited between dimensioned types and integers.
\layout Paragraph*

Dimension deduction rules
\layout Enumerate

If 
\begin_inset Formula \( x=y*z \)
\end_inset 

 for 
\begin_inset Formula \( x:t_{1},y:t_{2},z:t_{3} \)
\end_inset 

 with basis space 
\begin_inset Formula \( B \)
\end_inset 

 then 
\begin_inset Formula \( \forall _{d\in B}\log _{d}t_{1}=\log _{d}t_{2}+\log _{d}t_{3} \)
\end_inset 

.
 
\layout Enumerate

If 
\begin_inset Formula \( x=y/z \)
\end_inset 

 for 
\begin_inset Formula \( x:t_{1},y:t_{2},z:t_{3} \)
\end_inset 

 with basis space 
\begin_inset Formula \( B \)
\end_inset 

 then 
\begin_inset Formula \( \forall _{d\in B}\log _{d}t_{1}=\log _{d}t_{2}-\log _{d}t_{3} \)
\end_inset 

.
 
\layout Enumerate

If 
\begin_inset Formula \( x=y \)
\end_inset 

 
\series bold 
POW
\series default 
 
\begin_inset Formula \( z \)
\end_inset 

 for 
\begin_inset Formula \( x:t_{1},y:t_{2},z:integer \)
\end_inset 

 with basis space for 
\begin_inset Formula \( t_{2} \)
\end_inset 

, 
\begin_inset Formula \( B \)
\end_inset 

 then 
\begin_inset Formula \( \forall _{d\in B}\log _{d}t_{1}=\log _{d}t_{2}\times z \)
\end_inset 

.
 
\layout Subsection

Stuctured types
\layout Subsubsection

Array types
\layout Standard

An array type is a structure consisting of a fixed number of elements all
 of which are the same type.
 The type of the elements is refered to as the element type.
 The elements of an array value are indicated by bracketed indexing expressions.
 The definition of an array type simultaneously defines the permited type
 of indexing expression and the element type.
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
1 2 0 0 -1 -1 -1 -1
1 1 0 0
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

<array type>
\newline 
'array' '[' <index type>[,<index type>]* ']' 'of' <type>
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
3 2 0 0 -1 -1 -1 -1
1 1 0 0
1 0 0 0
1 1 0 0
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

<index type>
\newline 
<subrange type>
\newline 

\newline 
<scalar type>
\newline 

\newline 
<integral type>
\layout Standard

Examples
\layout Standard


\series bold 
array[colour] of boolean;
\layout Standard


\series bold 
array[1..100] of integer;
\layout Standard


\series bold 
array[1..2,4..6] of byte;
\layout Standard


\series bold 
array[1..2] of array[4..6] of byte;
\layout Standard

The notation [
\emph on 
b,c
\emph default 
] in an array declaration is shorthand for the notation [
\emph on 
b
\emph default 
]
\series bold 
of array
\series default 
[
\emph on 
c
\emph default 
].
\layout Subsubsection

String types
\layout Standard

\layout Subsubsection

Record types
\layout Subsubsection

Set types
\layout Subsection

Pointer types
\layout Section

Variables
\layout Section

Procedures and Functions
\layout Section

Algorithms
\layout Subsection

Statements
\layout Subsection

Expressions
\layout Subsection

Programs and Units
\layout Chapter

The System Unit
\layout Section

Constants
\layout Section

Types
\layout Section

Procedures and Functions in Alphabetic Order
\layout Chapter

Running the compiler
\layout Section

Porting to other architectures
\layout Subsection

Compiler Structure
\layout Subsection

ILCG
\layout Subsection

An example ILCG description 
\layout Bibliography
\bibitem {Aho89}

Advanced Micro Devices, 3DNow! Technology Manual, 1999.
 
\layout Bibliography
\bibitem {2}

Aho, A.V., Ganapathi, M, TJiang S.W.K., Code Generation Using Tree Matching and
 Dynamic Programming, ACM Trans, Programming Languages and Systems 11, no.4,
 1989, pp.491-516.
 
\layout Bibliography
\bibitem {Cattel80}

 Cattell R.
 G.
 G., Automatic derivation of code generators from machine descriptions, ACM
 Transactions on Programming Languages and Systems, 2(2), pp.
 173-190, April 1980.
 
\layout Bibliography
\bibitem {Cheong97}

 Cheong, G., and Lam, M., An Optimizer for Multimedia Instruction Sets, 2nd
 SUIF Workshop, Stanford University, August 1997.
 
\layout Bibliography
\bibitem {graham80}

Susan L.
 Graham, Table Driven Code Generation, IEEE Computer, Vol 13, No.
 8, August 1980, pp 25..37.
 
\layout Bibliography
\bibitem {IA32 }

Intel, Intel Architecture Software Developers Manual Volumes 1 and 2, 1999.
 
\layout Bibliography
\bibitem {Intel00}

 Intel, Willamette Processor Software Developer's Guide, February, 2000.
 
\layout Bibliography
\bibitem {Iverson62}

K.
 E.
 Iverson, A Programming Language, John Wiley & Sons, Inc., New York (1962),
 p.
 16.
 
\layout Bibliography
\bibitem {Jmanual}

Iverson K.
 E, A personal View of APL, IBM Systems Journal, Vol 30, No 4, 1991.
 
\layout Bibliography
\bibitem {Krall00}

 Krall, A., and Lelait, S., Compilation Techniques for Multimedia Processors,
 International Journal of Parallel Programming, Vol.
 28, No.
 4, pp 347-361, 2000.
 
\layout Bibliography
\bibitem {Leupers99}

 Leupers, R., Compiler Optimization for Media Processors, EMMSEC 99/Sweden
 1999.
 
\layout Bibliography
\bibitem {Metcalf96}

 Metcalf, M., and Reid., J., The F Programming Language, OUP, 1996.
 
\layout Bibliography
\bibitem {Peleg97}

 Peleg, A., Wilke S., Weiser U., Intel MMX for Multimedia PCs, Comm.
 ACM, vol 40, no.
 1 1997.
 
\layout Bibliography
\bibitem {Sreraman00}

 Srereman, N., and Govindarajan, G., A Vectorizing Compiler for Multimedia
 Extensions, International Journal of Parallel Programming, Vol.
 28, No.
 4, pp 363-400, 2000.
 
\layout Bibliography
\bibitem {sable}

\i \'{ E}
tienne Gagnon, SABLECC, AN OBJECT-ORIENTED COMPILER FRAMEWORK, School of
 Computer Science McGill University, Montreal, March 1998.
 
\layout Bibliography
\bibitem {Texas}

Texas Instruments, TMS320C62xx CPU and Instruction Set Reference Guide,
 1998.
\the_end
