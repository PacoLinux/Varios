\relax 
\citation{texas}
\citation{IA32}
\citation{K6}
\@writefile{toc}{\contentsline {chapter}{\numberline {1}Multi-media instruction-sets}{3}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{toc}{\contentsline {section}{\numberline {1.1}The SIMD model}{3}}
\newlabel{datapath}{{1.1}{4}}
\@writefile{toc}{\contentsline {section}{\numberline {1.2}The MMX register architecture}{4}}
\@writefile{lof}{\contentsline {figure}{\numberline {1.1}{\ignorespaces The Intel IA32 with MMX register architecture}}{5}}
\newlabel{fig:mmxreg}{{1.1}{5}}
\@writefile{lot}{\contentsline {table}{\numberline {1.1}{\ignorespaces MMX data-types}}{5}}
\newlabel{mmxtypes}{{1.1}{5}}
\@writefile{toc}{\contentsline {section}{\numberline {1.3}MMX data-types}{5}}
\@writefile{lof}{\contentsline {figure}{\numberline {1.2}{\ignorespaces The MMX data formats}}{6}}
\newlabel{fig:mmxfmt}{{1.2}{6}}
\@writefile{lof}{\contentsline {figure}{\numberline {1.3}{\ignorespaces C code to add two images and corresponding assembler for the inner loop. Code compiled on the Intel C compiler version 4.0.}}{7}}
\newlabel{fig:imageadd}{{1.3}{7}}
\@writefile{lof}{\contentsline {figure}{\numberline {1.4}{\ignorespaces The AMD 3DNOW! extensions add 32 bit floating point data to the types that can be handled in MMX registers}}{8}}
\newlabel{fig:3DNOW}{{1.4}{8}}
\@writefile{toc}{\contentsline {section}{\numberline {1.4}3D Now!}{8}}
\@writefile{toc}{\contentsline {section}{\numberline {1.5}Streaming SIMD}{9}}
\@writefile{lof}{\contentsline {figure}{\numberline {1.5}{\ignorespaces The Streaming SIMD extensions add additional 32 bit floating point vector registers}}{10}}
\newlabel{fig:xmmpic}{{1.5}{10}}
\@writefile{lot}{\contentsline {table}{\numberline {1.2}{\ignorespaces The XMM registers support both scalar and vector arithmetic}}{10}}
\newlabel{tab:xmm}{{1.2}{10}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.5.1}Cache optimisation}{10}}
\@writefile{toc}{\contentsline {chapter}{\numberline {2}Possible programming techniques for MMX and Streaming SIMD}{12}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{toc}{\contentsline {section}{\numberline {2.1}Direct use of assembler code}{12}}
\@writefile{lof}{\contentsline {figure}{\numberline {2.1}{\ignorespaces Assembler version of the test program}}{13}}
\newlabel{fig:asm}{{2.1}{13}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1.1}The example program}{13}}
\@writefile{lof}{\contentsline {figure}{\numberline {2.2}{\ignorespaces C version of the test program}}{14}}
\newlabel{fig:vecaddC}{{2.2}{14}}
\@writefile{toc}{\contentsline {section}{\numberline {2.2}Use of assembler intrinsics}{14}}
\citation{Iverson62}
\@writefile{lof}{\contentsline {figure}{\numberline {2.3}{\ignorespaces C++ version of the test program}}{15}}
\newlabel{fig:seraddC}{{2.3}{15}}
\@writefile{lot}{\contentsline {table}{\numberline {2.1}{\ignorespaces Comparative performance of different versions of example program}}{15}}
\@writefile{toc}{\contentsline {section}{\numberline {2.3}Use of C++ classes}{15}}
\citation{jamanual}
\citation{Fmanual}
\@writefile{lof}{\contentsline {figure}{\numberline {2.4}{\ignorespaces Example program in High Performance Pascal}}{16}}
\newlabel{fig:HPPexample}{{2.4}{16}}
\@writefile{toc}{\contentsline {section}{\numberline {2.4}High level language expressions of data parallelism}{16}}
\citation{sable}
\@writefile{lof}{\contentsline {figure}{\numberline {2.5}{\ignorespaces System overview}}{18}}
\newlabel{fig:overview}{{2.5}{18}}
\citation{graham80}
\@writefile{toc}{\contentsline {chapter}{\numberline {3}ILCG as a notation for describing instuctionsets}{19}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{toc}{\contentsline {section}{\numberline {3.1}Supported types}{20}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1.1}Data formats}{20}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1.2}Typed formats}{20}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1.3}Ref types}{20}}
\@writefile{toc}{\contentsline {section}{\numberline {3.2}Supported operations}{20}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2.1}Type coercions}{20}}
\@writefile{lot}{\contentsline {table}{\numberline {3.1}{\ignorespaces Range expanding coercions}}{21}}
\newlabel{expansions}{{3.1}{21}}
\@writefile{lot}{\contentsline {table}{\numberline {3.2}{\ignorespaces Range contracting coercions}}{21}}
\newlabel{contractions}{{3.2}{21}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2.2}Arithmetic}{21}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2.3}Memory}{21}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2.4} Assignment }{22}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2.5} Dereferencing}{22}}
\@writefile{toc}{\contentsline {section}{\numberline {3.3}Machine description}{22}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3.1}Registers }{22}}
\@writefile{toc}{\contentsline {subsubsection}{Aliasing}{22}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3.2}Register sets}{23}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3.3}Register Arrays}{23}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3.4}Register Stacks}{23}}
\@writefile{toc}{\contentsline {paragraph}{PUSH}{23}}
\@writefile{toc}{\contentsline {paragraph}{POP}{24}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3.5}Instruction formats}{24}}
\@writefile{toc}{\contentsline {section}{\numberline {3.4}The package ilcg.tree}{24}}
\@writefile{toc}{\contentsline {chapter}{\numberline {4}The ILCG code-generator generator}{26}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{toc}{\contentsline {chapter}{\numberline {5}The grammer for processor definition}{27}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{toc}{\contentsline {section}{\numberline {5.1}ILCG grammar}{27}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.1.1}Helpers}{27}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.1.2}Tokens}{28}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.1.3}Non terminal symbols}{31}}
\@writefile{toc}{\contentsline {section}{\numberline {5.2}Pentium machine description}{34}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.2.1}Declare types to correspond to internal ilcg types }{34}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.2.2}compiler configuration flags }{34}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.2.3}Register declarations}{35}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.2.4}Operator definition}{35}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.2.5}Data formats}{36}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.2.6}Choice of effective address}{37}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.2.7} Formats for all memory addresses}{38}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.2.8}Instruction patterns for the 386}{38}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.2.9}Multi Instruction Templates}{40}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.2.10}Intel fpu instructions}{41}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.2.11}MMX registers and instructions}{43}}
\@writefile{toc}{\contentsline {subsubsection}{Registers}{43}}
\@writefile{toc}{\contentsline {subsubsection}{Addressing modes}{43}}
\@writefile{toc}{\contentsline {subsubsection}{MMX instructions}{44}}
\bibcite{K6}{1}
\bibcite{graham80}{2}
\bibcite{IA32}{3}
\bibcite{sable}{4}
\bibcite{texas}{5}
