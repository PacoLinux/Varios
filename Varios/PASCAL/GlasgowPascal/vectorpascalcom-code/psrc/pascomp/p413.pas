{ file P413.pas part of codegen P4}
	FUNCTION pAWordFormat4_AWF4:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword;
		 pAWordFormat4_AWF4:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype3_AFP3:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAFormatPredeclaredtype3_AFP3:=myrec;
		END;
	FUNCTION pAUnsigned9_AU9:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32;
		 pAUnsigned9_AU9:=myrec;
		END;
	FUNCTION pAUnsignedTformat8_AUT8:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUnsigned9_AU9;
		 pAUnsignedTformat8_AUT8:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7_ATP7:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pATformatPredeclaredtype7_ATP7:=myrec;
		END;
	FUNCTION pASigned14_AS14:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned14_AS14:=myrec;
		END;
	FUNCTION pASignedTformat13_AST13:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned14_AS14;
		 pASignedTformat13_AST13:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12_ATP12:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype12_ATP12:=myrec;
		END;
	FUNCTION pAIeee63Tformat18_AI63T18:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat18_AI63T18:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype17_ATP17:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype17_ATP17:=myrec;
		END;
	FUNCTION pADoublewordFormat22_ADF22:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdword;
		 pADoublewordFormat22_ADF22:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype21_AFP21:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAFormatPredeclaredtype21_AFP21:=myrec;
		END;
	FUNCTION pAUint64Unsigned27_AU64U27:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint64;
		 pAUint64Unsigned27_AU64U27:=myrec;
		END;
	FUNCTION pAUnsignedTformat26_AUT26:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint64Unsigned27_AU64U27;
		 pAUnsignedTformat26_AUT26:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype25_ATP25:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint64 ;
		 pATformatPredeclaredtype25_ATP25:=myrec;
		END;
	FUNCTION pAInt64Signed32_AI64S32:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64;
		 pAInt64Signed32_AI64S32:=myrec;
		END;
	FUNCTION pASignedTformat31_AST31:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt64Signed32_AI64S32;
		 pASignedTformat31_AST31:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype30_ATP30:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64 ;
		 pATformatPredeclaredtype30_ATP30:=myrec;
		END;
	FUNCTION pAOctetFormat36_AOF36:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat36_AOF36:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype35_AFP35:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype35_AFP35:=myrec;
		END;
	FUNCTION pAUint8Unsigned41_AU8U41:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned41_AU8U41:=myrec;
		END;
	FUNCTION pAUnsignedTformat40_AUT40:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned41_AU8U41;
		 pAUnsignedTformat40_AUT40:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype39_ATP39:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype39_ATP39:=myrec;
		END;
	FUNCTION pAInt16Signed46_AI16S46:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed46_AI16S46:=myrec;
		END;
	FUNCTION pASignedTformat45_AST45:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed46_AI16S46;
		 pASignedTformat45_AST45:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype44_ATP44:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype44_ATP44:=myrec;
		END;
	FUNCTION pAUint16Unsigned51_AU16U51:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16;
		 pAUint16Unsigned51_AU16U51:=myrec;
		END;
	FUNCTION pAUnsignedTformat50_AUT50:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint16Unsigned51_AU16U51;
		 pAUnsignedTformat50_AUT50:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype49_ATP49:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pATformatPredeclaredtype49_ATP49:=myrec;
		END;
	FUNCTION pAInt8Signed56_AI8S56:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed56_AI8S56:=myrec;
		END;
	FUNCTION pASignedTformat55_AST55:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed56_AI8S56;
		 pASignedTformat55_AST55:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype54_ATP54:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype54_ATP54:=myrec;
		END;
	FUNCTION pAIeee32Tformat60_AI32T60:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat60_AI32T60:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype59_ATP59:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype59_ATP59:=myrec;
		END;
	FUNCTION pAHalfwordFormat64_AHF64:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fhalfword;
		 pAHalfwordFormat64_AHF64:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype63_AFP63:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fhalfword ;
		 pAFormatPredeclaredtype63_AFP63:=myrec;
		END;
	FUNCTION pAWordFormat70_AWF70:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword;
		 pAWordFormat70_AWF70:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype69_AFP69:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAFormatPredeclaredtype69_AFP69:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType68_APT68:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAPredeclaredtypeType68_APT68:=myrec;
		END;
	FUNCTION pAHalfwordFormat73_AHF73:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fhalfword;
		 pAHalfwordFormat73_AHF73:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype72_AFP72:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fhalfword ;
		 pAFormatPredeclaredtype72_AFP72:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType71_APT71:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fhalfword ;
		 pAPredeclaredtypeType71_APT71:=myrec;
		END;
	FUNCTION pAOctetFormat76_AOF76:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat76_AOF76:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype75_AFP75:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype75_AFP75:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType74_APT74:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAPredeclaredtypeType74_APT74:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl67_AAP67:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 0;
		myrec^.last:= 2;
		 pAAlternativesPatterndecl67_AAP67:=myrec;
		END;
	FUNCTION pAUnreservedReservation82_AUR82:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation82_AUR82:=nil;
		 pAUnreservedReservation82_AUR82:=myrec;
		END;
	FUNCTION pANonAggregate83_ANA83:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate83_ANA83:=nil;
		 pANonAggregate83_ANA83:=myrec;
		END;
	FUNCTION pAInt64Signed87_AI64S87:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64;
		 pAInt64Signed87_AI64S87:=myrec;
		END;
	FUNCTION pASignedTformat86_AST86:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt64Signed87_AI64S87;
		 pASignedTformat86_AST86:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype85_ATP85:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64 ;
		 pATformatPredeclaredtype85_ATP85:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType84_APT84:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64 ;
		 pAPredeclaredtypeType84_APT84:=myrec;
		END;
	FUNCTION pANonAggregate91_ANA91:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate91_ANA91:=nil;
		 pANonAggregate91_ANA91:=myrec;
		END;
	FUNCTION pASigned95_AS95:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned95_AS95:=myrec;
		END;
	FUNCTION pASignedTformat94_AST94:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned95_AS95;
		 pASignedTformat94_AST94:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype93_ATP93:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype93_ATP93:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType92_APT92:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType92_APT92:=myrec;
		END;
	FUNCTION pANonAggregate99_ANA99:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate99_ANA99:=nil;
		 pANonAggregate99_ANA99:=myrec;
		END;
	FUNCTION pASigned103_AS103:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned103_AS103:=myrec;
		END;
	FUNCTION pASignedTformat102_AST102:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned103_AS103;
		 pASignedTformat102_AST102:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype101_ATP101:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype101_ATP101:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType100_APT100:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType100_APT100:=myrec;
		END;
	FUNCTION pANonAggregate107_ANA107:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate107_ANA107:=nil;
		 pANonAggregate107_ANA107:=myrec;
		END;
	FUNCTION pAUint64Unsigned111_AU64U111:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint64;
		 pAUint64Unsigned111_AU64U111:=myrec;
		END;
	FUNCTION pAUnsignedTformat110_AUT110:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint64Unsigned111_AU64U111;
		 pAUnsignedTformat110_AUT110:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype109_ATP109:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint64 ;
		 pATformatPredeclaredtype109_ATP109:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType108_APT108:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint64 ;
		 pAPredeclaredtypeType108_APT108:=myrec;
		END;
	FUNCTION pAUnreservedReservation115_AUR115:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation115_AUR115:=nil;
		 pAUnreservedReservation115_AUR115:=myrec;
		END;
	FUNCTION pANonAggregate116_ANA116:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate116_ANA116:=nil;
		 pANonAggregate116_ANA116:=myrec;
		END;
	FUNCTION pASigned120_AS120:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned120_AS120:=myrec;
		END;
	FUNCTION pASignedTformat119_AST119:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned120_AS120;
		 pASignedTformat119_AST119:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype118_ATP118:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype118_ATP118:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType117_APT117:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType117_APT117:=myrec;
		END;
	FUNCTION pAUnreservedReservation124_AUR124:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation124_AUR124:=nil;
		 pAUnreservedReservation124_AUR124:=myrec;
		END;
	FUNCTION pANonAggregate125_ANA125:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate125_ANA125:=nil;
		 pANonAggregate125_ANA125:=myrec;
		END;
	FUNCTION pASigned129_AS129:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned129_AS129:=myrec;
		END;
	FUNCTION pASignedTformat128_AST128:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned129_AS129;
		 pASignedTformat128_AST128:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype127_ATP127:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype127_ATP127:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType126_APT126:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType126_APT126:=myrec;
		END;
	FUNCTION pAUnreservedReservation133_AUR133:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation133_AUR133:=nil;
		 pAUnreservedReservation133_AUR133:=myrec;
		END;
	FUNCTION pANonAggregate134_ANA134:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate134_ANA134:=nil;
		 pANonAggregate134_ANA134:=myrec;
		END;
	FUNCTION pASigned138_AS138:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned138_AS138:=myrec;
		END;
	FUNCTION pASignedTformat137_AST137:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned138_AS138;
		 pASignedTformat137_AST137:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype136_ATP136:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype136_ATP136:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType135_APT135:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType135_APT135:=myrec;
		END;
	FUNCTION pANonAggregate142_ANA142:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate142_ANA142:=nil;
		 pANonAggregate142_ANA142:=myrec;
		END;
	FUNCTION pASigned146_AS146:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned146_AS146:=myrec;
		END;
	FUNCTION pASignedTformat145_AST145:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned146_AS146;
		 pASignedTformat145_AST145:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype144_ATP144:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype144_ATP144:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType143_APT143:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType143_APT143:=myrec;
		END;
	FUNCTION pAReservedReservation150_ARR150:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAReservedReservation150_ARR150:=nil;
		 pAReservedReservation150_ARR150:=myrec;
		END;
	FUNCTION pANonAggregate151_ANA151:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate151_ANA151:=nil;
		 pANonAggregate151_ANA151:=myrec;
		END;
	FUNCTION pASigned155_AS155:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned155_AS155:=myrec;
		END;
	FUNCTION pASignedTformat154_AST154:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned155_AS155;
		 pASignedTformat154_AST154:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype153_ATP153:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype153_ATP153:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType152_APT152:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType152_APT152:=myrec;
		END;
	FUNCTION pANonAggregate159_ANA159:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate159_ANA159:=nil;
		 pANonAggregate159_ANA159:=myrec;
		END;
	FUNCTION pASigned163_AS163:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned163_AS163:=myrec;
		END;
	FUNCTION pASignedTformat162_AST162:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned163_AS163;
		 pASignedTformat162_AST162:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype161_ATP161:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype161_ATP161:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType160_APT160:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType160_APT160:=myrec;
		END;
	FUNCTION pAUnreservedReservation167_AUR167:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation167_AUR167:=nil;
		 pAUnreservedReservation167_AUR167:=myrec;
		END;
	FUNCTION pANonAggregate168_ANA168:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate168_ANA168:=nil;
		 pANonAggregate168_ANA168:=myrec;
		END;
	FUNCTION pASigned172_AS172:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned172_AS172:=myrec;
		END;
	FUNCTION pASignedTformat171_AST171:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned172_AS172;
		 pASignedTformat171_AST171:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype170_ATP170:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype170_ATP170:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType169_APT169:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType169_APT169:=myrec;
		END;
	FUNCTION pAUnreservedReservation176_AUR176:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation176_AUR176:=nil;
		 pAUnreservedReservation176_AUR176:=myrec;
		END;
	FUNCTION pANonAggregate177_ANA177:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate177_ANA177:=nil;
		 pANonAggregate177_ANA177:=myrec;
		END;
	FUNCTION pASigned181_AS181:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned181_AS181:=myrec;
		END;
	FUNCTION pASignedTformat180_AST180:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned181_AS181;
		 pASignedTformat180_AST180:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype179_ATP179:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype179_ATP179:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType178_APT178:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType178_APT178:=myrec;
		END;
	FUNCTION pANonAggregate185_ANA185:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate185_ANA185:=nil;
		 pANonAggregate185_ANA185:=myrec;
		END;
	FUNCTION pAUnsigned189_AU189:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32;
		 pAUnsigned189_AU189:=myrec;
		END;
	FUNCTION pAUnsignedTformat188_AUT188:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUnsigned189_AU189;
		 pAUnsignedTformat188_AUT188:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype187_ATP187:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pATformatPredeclaredtype187_ATP187:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType186_APT186:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pAPredeclaredtypeType186_APT186:=myrec;
		END;
	FUNCTION pANonAggregate193_ANA193:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate193_ANA193:=nil;
		 pANonAggregate193_ANA193:=myrec;
		END;
	FUNCTION pAUnsigned197_AU197:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32;
		 pAUnsigned197_AU197:=myrec;
		END;
	FUNCTION pAUnsignedTformat196_AUT196:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUnsigned197_AU197;
		 pAUnsignedTformat196_AUT196:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype195_ATP195:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pATformatPredeclaredtype195_ATP195:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType194_APT194:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pAPredeclaredtypeType194_APT194:=myrec;
		END;
	FUNCTION pANonAggregate201_ANA201:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate201_ANA201:=nil;
		 pANonAggregate201_ANA201:=myrec;
		END;
	FUNCTION pAUnsigned205_AU205:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32;
		 pAUnsigned205_AU205:=myrec;
		END;
	FUNCTION pAUnsignedTformat204_AUT204:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUnsigned205_AU205;
		 pAUnsignedTformat204_AUT204:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype203_ATP203:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pATformatPredeclaredtype203_ATP203:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType202_APT202:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pAPredeclaredtypeType202_APT202:=myrec;
		END;
	FUNCTION pANonAggregate209_ANA209:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate209_ANA209:=nil;
		 pANonAggregate209_ANA209:=myrec;
		END;
	FUNCTION pAUnsigned213_AU213:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32;
		 pAUnsigned213_AU213:=myrec;
		END;
	FUNCTION pAUnsignedTformat212_AUT212:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUnsigned213_AU213;
		 pAUnsignedTformat212_AUT212:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype211_ATP211:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pATformatPredeclaredtype211_ATP211:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType210_APT210:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pAPredeclaredtypeType210_APT210:=myrec;
		END;
	FUNCTION pANonAggregate217_ANA217:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate217_ANA217:=nil;
		 pANonAggregate217_ANA217:=myrec;
		END;
	FUNCTION pAUnsigned221_AU221:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32;
		 pAUnsigned221_AU221:=myrec;
		END;
	FUNCTION pAUnsignedTformat220_AUT220:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUnsigned221_AU221;
		 pAUnsignedTformat220_AUT220:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype219_ATP219:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pATformatPredeclaredtype219_ATP219:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType218_APT218:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pAPredeclaredtypeType218_APT218:=myrec;
		END;
	FUNCTION pANonAggregate225_ANA225:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate225_ANA225:=nil;
		 pANonAggregate225_ANA225:=myrec;
		END;
	FUNCTION pAUnsigned229_AU229:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32;
		 pAUnsigned229_AU229:=myrec;
		END;
	FUNCTION pAUnsignedTformat228_AUT228:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUnsigned229_AU229;
		 pAUnsignedTformat228_AUT228:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype227_ATP227:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pATformatPredeclaredtype227_ATP227:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType226_APT226:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pAPredeclaredtypeType226_APT226:=myrec;
		END;
	FUNCTION pANonAggregate233_ANA233:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate233_ANA233:=nil;
		 pANonAggregate233_ANA233:=myrec;
		END;
	FUNCTION pAInt8Signed237_AI8S237:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed237_AI8S237:=myrec;
		END;
	FUNCTION pASignedTformat236_AST236:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed237_AI8S237;
		 pASignedTformat236_AST236:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype235_ATP235:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype235_ATP235:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType234_APT234:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType234_APT234:=myrec;
		END;
	FUNCTION pANonAggregate241_ANA241:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate241_ANA241:=nil;
		 pANonAggregate241_ANA241:=myrec;
		END;
	FUNCTION pAInt8Signed245_AI8S245:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed245_AI8S245:=myrec;
		END;
	FUNCTION pASignedTformat244_AST244:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed245_AI8S245;
		 pASignedTformat244_AST244:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype243_ATP243:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype243_ATP243:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType242_APT242:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType242_APT242:=myrec;
		END;
	FUNCTION pANonAggregate249_ANA249:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate249_ANA249:=nil;
		 pANonAggregate249_ANA249:=myrec;
		END;
	FUNCTION pAInt8Signed253_AI8S253:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed253_AI8S253:=myrec;
		END;
	FUNCTION pASignedTformat252_AST252:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed253_AI8S253;
		 pASignedTformat252_AST252:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype251_ATP251:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype251_ATP251:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType250_APT250:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType250_APT250:=myrec;
		END;
	FUNCTION pANonAggregate257_ANA257:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate257_ANA257:=nil;
		 pANonAggregate257_ANA257:=myrec;
		END;
	FUNCTION pAInt8Signed261_AI8S261:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed261_AI8S261:=myrec;
		END;
	FUNCTION pASignedTformat260_AST260:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed261_AI8S261;
		 pASignedTformat260_AST260:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype259_ATP259:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype259_ATP259:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType258_APT258:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType258_APT258:=myrec;
		END;
	FUNCTION pANonAggregate265_ANA265:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate265_ANA265:=nil;
		 pANonAggregate265_ANA265:=myrec;
		END;
	FUNCTION pAInt8Signed269_AI8S269:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed269_AI8S269:=myrec;
		END;
	FUNCTION pASignedTformat268_AST268:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed269_AI8S269;
		 pASignedTformat268_AST268:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype267_ATP267:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype267_ATP267:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType266_APT266:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType266_APT266:=myrec;
		END;
	FUNCTION pANonAggregate273_ANA273:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate273_ANA273:=nil;
		 pANonAggregate273_ANA273:=myrec;
		END;
	FUNCTION pAInt8Signed277_AI8S277:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed277_AI8S277:=myrec;
		END;
	FUNCTION pASignedTformat276_AST276:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed277_AI8S277;
		 pASignedTformat276_AST276:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype275_ATP275:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype275_ATP275:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType274_APT274:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType274_APT274:=myrec;
		END;
	FUNCTION pANonAggregate281_ANA281:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate281_ANA281:=nil;
		 pANonAggregate281_ANA281:=myrec;
		END;
	FUNCTION pAInt8Signed285_AI8S285:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed285_AI8S285:=myrec;
		END;
	FUNCTION pASignedTformat284_AST284:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed285_AI8S285;
		 pASignedTformat284_AST284:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype283_ATP283:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype283_ATP283:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType282_APT282:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType282_APT282:=myrec;
		END;
	FUNCTION pANonAggregate289_ANA289:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate289_ANA289:=nil;
		 pANonAggregate289_ANA289:=myrec;
		END;
	FUNCTION pAUint8Unsigned293_AU8U293:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned293_AU8U293:=myrec;
		END;
	FUNCTION pAUnsignedTformat292_AUT292:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned293_AU8U293;
		 pAUnsignedTformat292_AUT292:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype291_ATP291:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype291_ATP291:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType290_APT290:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType290_APT290:=myrec;
		END;
	FUNCTION pANonAggregate297_ANA297:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate297_ANA297:=nil;
		 pANonAggregate297_ANA297:=myrec;
		END;
	FUNCTION pAUint8Unsigned301_AU8U301:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned301_AU8U301:=myrec;
		END;
	FUNCTION pAUnsignedTformat300_AUT300:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned301_AU8U301;
		 pAUnsignedTformat300_AUT300:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype299_ATP299:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype299_ATP299:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType298_APT298:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType298_APT298:=myrec;
		END;
	FUNCTION pANonAggregate305_ANA305:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate305_ANA305:=nil;
		 pANonAggregate305_ANA305:=myrec;
		END;
	FUNCTION pAUint8Unsigned309_AU8U309:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned309_AU8U309:=myrec;
		END;
	FUNCTION pAUnsignedTformat308_AUT308:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned309_AU8U309;
		 pAUnsignedTformat308_AUT308:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype307_ATP307:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype307_ATP307:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType306_APT306:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType306_APT306:=myrec;
		END;
	FUNCTION pANonAggregate313_ANA313:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate313_ANA313:=nil;
		 pANonAggregate313_ANA313:=myrec;
		END;
	FUNCTION pAUint8Unsigned317_AU8U317:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned317_AU8U317:=myrec;
		END;
	FUNCTION pAUnsignedTformat316_AUT316:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned317_AU8U317;
		 pAUnsignedTformat316_AUT316:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype315_ATP315:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype315_ATP315:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType314_APT314:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType314_APT314:=myrec;
		END;
	FUNCTION pANonAggregate321_ANA321:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate321_ANA321:=nil;
		 pANonAggregate321_ANA321:=myrec;
		END;
	FUNCTION pAUint8Unsigned325_AU8U325:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned325_AU8U325:=myrec;
		END;
	FUNCTION pAUnsignedTformat324_AUT324:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned325_AU8U325;
		 pAUnsignedTformat324_AUT324:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype323_ATP323:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype323_ATP323:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType322_APT322:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType322_APT322:=myrec;
		END;
	FUNCTION pANonAggregate329_ANA329:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate329_ANA329:=nil;
		 pANonAggregate329_ANA329:=myrec;
		END;
	FUNCTION pAUint8Unsigned333_AU8U333:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned333_AU8U333:=myrec;
		END;
	FUNCTION pAUnsignedTformat332_AUT332:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned333_AU8U333;
		 pAUnsignedTformat332_AUT332:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype331_ATP331:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype331_ATP331:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType330_APT330:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType330_APT330:=myrec;
		END;
	FUNCTION pANonAggregate337_ANA337:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate337_ANA337:=nil;
		 pANonAggregate337_ANA337:=myrec;
		END;
	FUNCTION pAUint8Unsigned341_AU8U341:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned341_AU8U341:=myrec;
		END;
	FUNCTION pAUnsignedTformat340_AUT340:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned341_AU8U341;
		 pAUnsignedTformat340_AUT340:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype339_ATP339:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype339_ATP339:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType338_APT338:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType338_APT338:=myrec;
		END;
	FUNCTION pANonAggregate345_ANA345:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate345_ANA345:=nil;
		 pANonAggregate345_ANA345:=myrec;
		END;
	FUNCTION pAOctetFormat348_AOF348:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat348_AOF348:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype347_AFP347:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype347_AFP347:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType346_APT346:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAPredeclaredtypeType346_APT346:=myrec;
		END;
	FUNCTION pANonAggregate352_ANA352:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate352_ANA352:=nil;
		 pANonAggregate352_ANA352:=myrec;
		END;
	FUNCTION pAOctetFormat355_AOF355:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat355_AOF355:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype354_AFP354:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype354_AFP354:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType353_APT353:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAPredeclaredtypeType353_APT353:=myrec;
		END;
	FUNCTION pANonAggregate359_ANA359:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate359_ANA359:=nil;
		 pANonAggregate359_ANA359:=myrec;
		END;
	FUNCTION pAOctetFormat362_AOF362:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat362_AOF362:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype361_AFP361:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype361_AFP361:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType360_APT360:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAPredeclaredtypeType360_APT360:=myrec;
		END;
	FUNCTION pANonAggregate366_ANA366:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate366_ANA366:=nil;
		 pANonAggregate366_ANA366:=myrec;
		END;
	FUNCTION pAOctetFormat369_AOF369:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat369_AOF369:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype368_AFP368:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype368_AFP368:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType367_APT367:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAPredeclaredtypeType367_APT367:=myrec;
		END;
	FUNCTION pANonAggregate373_ANA373:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate373_ANA373:=nil;
		 pANonAggregate373_ANA373:=myrec;
		END;
	FUNCTION pAInt16Signed377_AI16S377:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed377_AI16S377:=myrec;
		END;
	FUNCTION pASignedTformat376_AST376:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed377_AI16S377;
		 pASignedTformat376_AST376:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype375_ATP375:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype375_ATP375:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType374_APT374:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pAPredeclaredtypeType374_APT374:=myrec;
		END;
	FUNCTION pANonAggregate381_ANA381:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate381_ANA381:=nil;
		 pANonAggregate381_ANA381:=myrec;
		END;
	FUNCTION pAInt16Signed385_AI16S385:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed385_AI16S385:=myrec;
		END;
	FUNCTION pASignedTformat384_AST384:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed385_AI16S385;
		 pASignedTformat384_AST384:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype383_ATP383:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype383_ATP383:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType382_APT382:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pAPredeclaredtypeType382_APT382:=myrec;
		END;
	FUNCTION pANonAggregate389_ANA389:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate389_ANA389:=nil;
		 pANonAggregate389_ANA389:=myrec;
		END;
	FUNCTION pAInt16Signed393_AI16S393:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed393_AI16S393:=myrec;
		END;
	FUNCTION pASignedTformat392_AST392:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed393_AI16S393;
		 pASignedTformat392_AST392:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype391_ATP391:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype391_ATP391:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType390_APT390:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pAPredeclaredtypeType390_APT390:=myrec;
		END;
	FUNCTION pANonAggregate397_ANA397:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate397_ANA397:=nil;
		 pANonAggregate397_ANA397:=myrec;
		END;
	FUNCTION pAInt16Signed401_AI16S401:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed401_AI16S401:=myrec;
		END;
	FUNCTION pASignedTformat400_AST400:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed401_AI16S401;
		 pASignedTformat400_AST400:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype399_ATP399:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype399_ATP399:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType398_APT398:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pAPredeclaredtypeType398_APT398:=myrec;
		END;
	FUNCTION pANonAggregate405_ANA405:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate405_ANA405:=nil;
		 pANonAggregate405_ANA405:=myrec;
		END;
	FUNCTION pAUint16Unsigned409_AU16U409:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16;
		 pAUint16Unsigned409_AU16U409:=myrec;
		END;
	FUNCTION pAUnsignedTformat408_AUT408:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint16Unsigned409_AU16U409;
		 pAUnsignedTformat408_AUT408:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype407_ATP407:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pATformatPredeclaredtype407_ATP407:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType406_APT406:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pAPredeclaredtypeType406_APT406:=myrec;
		END;
	FUNCTION pANonAggregate413_ANA413:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate413_ANA413:=nil;
		 pANonAggregate413_ANA413:=myrec;
		END;
	FUNCTION pAUint16Unsigned417_AU16U417:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16;
		 pAUint16Unsigned417_AU16U417:=myrec;
		END;
	FUNCTION pAUnsignedTformat416_AUT416:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint16Unsigned417_AU16U417;
		 pAUnsignedTformat416_AUT416:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype415_ATP415:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pATformatPredeclaredtype415_ATP415:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType414_APT414:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pAPredeclaredtypeType414_APT414:=myrec;
		END;
	FUNCTION pANonAggregate421_ANA421:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate421_ANA421:=nil;
		 pANonAggregate421_ANA421:=myrec;
		END;
	FUNCTION pAUint16Unsigned425_AU16U425:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16;
		 pAUint16Unsigned425_AU16U425:=myrec;
		END;
	FUNCTION pAUnsignedTformat424_AUT424:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint16Unsigned425_AU16U425;
		 pAUnsignedTformat424_AUT424:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype423_ATP423:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pATformatPredeclaredtype423_ATP423:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType422_APT422:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pAPredeclaredtypeType422_APT422:=myrec;
		END;
	FUNCTION pANonAggregate429_ANA429:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate429_ANA429:=nil;
		 pANonAggregate429_ANA429:=myrec;
		END;
	FUNCTION pAUint16Unsigned433_AU16U433:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16;
		 pAUint16Unsigned433_AU16U433:=myrec;
		END;
	FUNCTION pAUnsignedTformat432_AUT432:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint16Unsigned433_AU16U433;
		 pAUnsignedTformat432_AUT432:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype431_ATP431:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pATformatPredeclaredtype431_ATP431:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType430_APT430:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pAPredeclaredtypeType430_APT430:=myrec;
		END;
	FUNCTION pANonAggregate437_ANA437:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate437_ANA437:=nil;
		 pANonAggregate437_ANA437:=myrec;
		END;
	FUNCTION pAHalfwordFormat440_AHF440:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fhalfword;
		 pAHalfwordFormat440_AHF440:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype439_AFP439:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fhalfword ;
		 pAFormatPredeclaredtype439_AFP439:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType438_APT438:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fhalfword ;
		 pAPredeclaredtypeType438_APT438:=myrec;
		END;
	FUNCTION pANonAggregate444_ANA444:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate444_ANA444:=nil;
		 pANonAggregate444_ANA444:=myrec;
		END;
	FUNCTION pAHalfwordFormat447_AHF447:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fhalfword;
		 pAHalfwordFormat447_AHF447:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype446_AFP446:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fhalfword ;
		 pAFormatPredeclaredtype446_AFP446:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType445_APT445:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fhalfword ;
		 pAPredeclaredtypeType445_APT445:=myrec;
		END;
	FUNCTION pAUnreservedReservation451_AUR451:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation451_AUR451:=nil;
		 pAUnreservedReservation451_AUR451:=myrec;
		END;
	FUNCTION pANonAggregate452_ANA452:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate452_ANA452:=nil;
		 pANonAggregate452_ANA452:=myrec;
		END;
	FUNCTION pAWordFormat455_AWF455:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword;
		 pAWordFormat455_AWF455:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype454_AFP454:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAFormatPredeclaredtype454_AFP454:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType453_APT453:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAPredeclaredtypeType453_APT453:=myrec;
		END;
	FUNCTION pAUnreservedReservation459_AUR459:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation459_AUR459:=nil;
		 pAUnreservedReservation459_AUR459:=myrec;
		END;
	FUNCTION pANonAggregate460_ANA460:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate460_ANA460:=nil;
		 pANonAggregate460_ANA460:=myrec;
		END;
	FUNCTION pAWordFormat463_AWF463:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword;
		 pAWordFormat463_AWF463:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype462_AFP462:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAFormatPredeclaredtype462_AFP462:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType461_APT461:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAPredeclaredtypeType461_APT461:=myrec;
		END;
	FUNCTION pANonAggregate467_ANA467:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate467_ANA467:=nil;
		 pANonAggregate467_ANA467:=myrec;
		END;
	FUNCTION pASigned471_AS471:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned471_AS471:=myrec;
		END;
	FUNCTION pASignedTformat470_AST470:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned471_AS471;
		 pASignedTformat470_AST470:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype469_ATP469:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype469_ATP469:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType468_APT468:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType468_APT468:=myrec;
		END;
	FUNCTION pANonAggregate475_ANA475:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate475_ANA475:=nil;
		 pANonAggregate475_ANA475:=myrec;
		END;
	FUNCTION pASigned479_AS479:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned479_AS479:=myrec;
		END;
	FUNCTION pASignedTformat478_AST478:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned479_AS479;
		 pASignedTformat478_AST478:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype477_ATP477:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype477_ATP477:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType476_APT476:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType476_APT476:=myrec;
		END;
	FUNCTION pATypeid484_AT484:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ regutil0  ilcg.RegDetails@14b4b3a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid484_AT484:=myrec;
		END;
	FUNCTION pATypeidType483_ATT483:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid484_AT484;
		 pATypeidType483_ATT483:=myrec;
		END;
	FUNCTION pATypeid486_AT486:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ regutil1  ilcg.RegDetails@128453c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid486_AT486:=myrec;
		END;
	FUNCTION pATypeidType485_ATT485:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid486_AT486;
		 pATypeidType485_ATT485:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl482_AAP482:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 3;
		myrec^.last:= 4;
		 pAAlternativesPatterndecl482_AAP482:=myrec;
		END;
	FUNCTION pATypeid491_AT491:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ rui0  ilcg.RegDetails@11931f8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid491_AT491:=myrec;
		END;
	FUNCTION pATypeidType490_ATT490:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid491_AT491;
		 pATypeidType490_ATT490:=myrec;
		END;
	FUNCTION pATypeid493_AT493:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ rui1  ilcg.RegDetails@33c78b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid493_AT493:=myrec;
		END;
	FUNCTION pATypeidType492_ATT492:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid493_AT493;
		 pATypeidType492_ATT492:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl489_AAP489:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 5;
		myrec^.last:= 6;
		 pAAlternativesPatterndecl489_AAP489:=myrec;
		END;
	FUNCTION pATypeid498_AT498:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ rui  ilcg.pattern@113cf49}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid498_AT498:=myrec;
		END;
	FUNCTION pATypeidType497_ATT497:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid498_AT498;
		 pATypeidType497_ATT497:=myrec;
		END;
	FUNCTION pATypeid500_AT500:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ rug  ilcg.pattern@1104da7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid500_AT500:=myrec;
		END;
	FUNCTION pATypeidType499_ATT499:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid500_AT500;
		 pATypeidType499_ATT499:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl496_AAP496:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 7;
		myrec^.last:= 8;
		 pAAlternativesPatterndecl496_AAP496:=myrec;
		END;
	FUNCTION pAUnreservedReservation504_AUR504:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation504_AUR504:=nil;
		 pAUnreservedReservation504_AUR504:=myrec;
		END;
	FUNCTION pAOptionalsign507_AO507:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign507_AO507:=nil;
		 pAOptionalsign507_AO507:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber506_AIN506:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4096 ;
		 pAIntegerNumber506_AIN506:=myrec;
		END;
	FUNCTION pAStackAggregate505_ASA505:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAStackAggregate505_ASA505:=nil;
		 pAStackAggregate505_ASA505:=myrec;
		END;
	FUNCTION pASigned511_AS511:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned511_AS511:=myrec;
		END;
	FUNCTION pASignedTformat510_AST510:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned511_AS511;
		 pASignedTformat510_AST510:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype509_ATP509:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype509_ATP509:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType508_APT508:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType508_APT508:=myrec;
		END;
	FUNCTION pATypeid516_AT516:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ EDI  ilcg.RegDetails@130500f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid516_AT516:=myrec;
		END;
	FUNCTION pATypeidType515_ATT515:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid516_AT516;
		 pATypeidType515_ATT515:=myrec;
		END;
	FUNCTION pATypeid518_AT518:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ESI  ilcg.RegDetails@1cfad77}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid518_AT518:=myrec;
		END;
	FUNCTION pATypeidType517_ATT517:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid518_AT518;
		 pATypeidType517_ATT517:=myrec;
		END;
	FUNCTION pATypeid520_AT520:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ EBX  ilcg.RegDetails@c3c44}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid520_AT520:=myrec;
		END;
	FUNCTION pATypeidType519_ATT519:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid520_AT520;
		 pATypeidType519_ATT519:=myrec;
		END;
	FUNCTION pATypeid522_AT522:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ EBP  ilcg.RegDetails@1bb6a69}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid522_AT522:=myrec;
		END;
	FUNCTION pATypeidType521_ATT521:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid522_AT522;
		 pATypeidType521_ATT521:=myrec;
		END;
	FUNCTION pATypeid524_AT524:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ESP  ilcg.RegDetails@13dcf55}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid524_AT524:=myrec;
		END;
	FUNCTION pATypeidType523_ATT523:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid524_AT524;
		 pATypeidType523_ATT523:=myrec;
		END;
	FUNCTION pATypeid526_AT526:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ EAX  ilcg.RegDetails@4904d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid526_AT526:=myrec;
		END;
	FUNCTION pATypeidType525_ATT525:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid526_AT526;
		 pATypeidType525_ATT525:=myrec;
		END;
	FUNCTION pATypeid528_AT528:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ EDX  ilcg.RegDetails@1ed2061}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid528_AT528:=myrec;
		END;
	FUNCTION pATypeidType527_ATT527:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid528_AT528;
		 pATypeidType527_ATT527:=myrec;
		END;
	FUNCTION pATypeid530_AT530:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ECX  ilcg.RegDetails@1b68d78}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid530_AT530:=myrec;
		END;
	FUNCTION pATypeidType529_ATT529:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid530_AT530;
		 pATypeidType529_ATT529:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl514_AAP514:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 9;
		myrec^.last:= 16;
		 pAAlternativesPatterndecl514_AAP514:=myrec;
		END;
	FUNCTION pATypeid535_AT535:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ EAX  ilcg.RegDetails@4904d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid535_AT535:=myrec;
		END;
	FUNCTION pATypeidType534_ATT534:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid535_AT535;
		 pATypeidType534_ATT534:=myrec;
		END;
	FUNCTION pATypeid537_AT537:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ EDX  ilcg.RegDetails@1ed2061}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid537_AT537:=myrec;
		END;
	FUNCTION pATypeidType536_ATT536:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid537_AT537;
		 pATypeidType536_ATT536:=myrec;
		END;
	FUNCTION pATypeid539_AT539:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ECX  ilcg.RegDetails@1b68d78}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid539_AT539:=myrec;
		END;
	FUNCTION pATypeidType538_ATT538:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid539_AT539;
		 pATypeidType538_ATT538:=myrec;
		END;
	FUNCTION pATypeid541_AT541:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ EBX  ilcg.RegDetails@c3c44}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid541_AT541:=myrec;
		END;
	FUNCTION pATypeidType540_ATT540:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid541_AT541;
		 pATypeidType540_ATT540:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl533_AAP533:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 17;
		myrec^.last:= 20;
		 pAAlternativesPatterndecl533_AAP533:=myrec;
		END;
	FUNCTION pATypeid546_AT546:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ indexreg  ilcg.pattern@1dc6a9d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid546_AT546:=myrec;
		END;
	FUNCTION pATypeidType545_ATT545:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid546_AT546;
		 pATypeidType545_ATT545:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl544_AAP544:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 21;
		myrec^.last:= 21;
		 pAAlternativesPatterndecl544_AAP544:=myrec;
		END;
	FUNCTION pATypeid551_AT551:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ubx  ilcg.RegDetails@39f16f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid551_AT551:=myrec;
		END;
	FUNCTION pATypeidType550_ATT550:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid551_AT551;
		 pATypeidType550_ATT550:=myrec;
		END;
	FUNCTION pATypeid553_AT553:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ udi  ilcg.RegDetails@c8f0a4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid553_AT553:=myrec;
		END;
	FUNCTION pATypeidType552_ATT552:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid553_AT553;
		 pATypeidType552_ATT552:=myrec;
		END;
	FUNCTION pATypeid555_AT555:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ usi  ilcg.RegDetails@9801f4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid555_AT555:=myrec;
		END;
	FUNCTION pATypeidType554_ATT554:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid555_AT555;
		 pATypeidType554_ATT554:=myrec;
		END;
	FUNCTION pATypeid557_AT557:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ udx  ilcg.RegDetails@1fe1e26}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid557_AT557:=myrec;
		END;
	FUNCTION pATypeidType556_ATT556:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid557_AT557;
		 pATypeidType556_ATT556:=myrec;
		END;
	FUNCTION pATypeid559_AT559:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ESP  ilcg.RegDetails@13dcf55}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid559_AT559:=myrec;
		END;
	FUNCTION pATypeidType558_ATT558:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid559_AT559;
		 pATypeidType558_ATT558:=myrec;
		END;
	FUNCTION pATypeid561_AT561:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ucx  ilcg.RegDetails@396fce}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid561_AT561:=myrec;
		END;
	FUNCTION pATypeidType560_ATT560:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid561_AT561;
		 pATypeidType560_ATT560:=myrec;
		END;
	FUNCTION pATypeid563_AT563:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ EBP  ilcg.RegDetails@1bb6a69}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid563_AT563:=myrec;
		END;
	FUNCTION pATypeidType562_ATT562:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid563_AT563;
		 pATypeidType562_ATT562:=myrec;
		END;
	FUNCTION pATypeid565_AT565:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ uax  ilcg.RegDetails@18a2977}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid565_AT565:=myrec;
		END;
	FUNCTION pATypeidType564_ATT564:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid565_AT565;
		 pATypeidType564_ATT564:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl549_AAP549:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 22;
		myrec^.last:= 29;
		 pAAlternativesPatterndecl549_AAP549:=myrec;
		END;
	FUNCTION pATypeid570_AT570:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ireg  ilcg.pattern@84f665}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid570_AT570:=myrec;
		END;
	FUNCTION pATypeidType569_ATT569:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid570_AT570;
		 pATypeidType569_ATT569:=myrec;
		END;
	FUNCTION pATypeid572_AT572:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ureg  ilcg.pattern@453dd5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid572_AT572:=myrec;
		END;
	FUNCTION pATypeidType571_ATT571:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid572_AT572;
		 pATypeidType571_ATT571:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl568_AAP568:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 30;
		myrec^.last:= 31;
		 pAAlternativesPatterndecl568_AAP568:=myrec;
		END;
	FUNCTION pATypeid577_AT577:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BL  ilcg.RegDetails@1e2bda7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid577_AT577:=myrec;
		END;
	FUNCTION pATypeidType576_ATT576:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid577_AT577;
		 pATypeidType576_ATT576:=myrec;
		END;
	FUNCTION pATypeid579_AT579:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ DL  ilcg.RegDetails@904f75}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid579_AT579:=myrec;
		END;
	FUNCTION pATypeidType578_ATT578:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid579_AT579;
		 pATypeidType578_ATT578:=myrec;
		END;
	FUNCTION pATypeid581_AT581:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ AL  ilcg.RegDetails@1ee2ea8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid581_AT581:=myrec;
		END;
	FUNCTION pATypeidType580_ATT580:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid581_AT581;
		 pATypeidType580_ATT580:=myrec;
		END;
	FUNCTION pATypeid583_AT583:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ iBH  ilcg.RegDetails@166ce5f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid583_AT583:=myrec;
		END;
	FUNCTION pATypeidType582_ATT582:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid583_AT583;
		 pATypeidType582_ATT582:=myrec;
		END;
	FUNCTION pATypeid585_AT585:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ iDH  ilcg.RegDetails@1d18084}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid585_AT585:=myrec;
		END;
	FUNCTION pATypeidType584_ATT584:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid585_AT585;
		 pATypeidType584_ATT584:=myrec;
		END;
	FUNCTION pATypeid587_AT587:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ iCH  ilcg.RegDetails@bf015}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid587_AT587:=myrec;
		END;
	FUNCTION pATypeidType586_ATT586:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid587_AT587;
		 pATypeidType586_ATT586:=myrec;
		END;
	FUNCTION pATypeid589_AT589:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ CL  ilcg.RegDetails@17e6064}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid589_AT589:=myrec;
		END;
	FUNCTION pATypeidType588_ATT588:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid589_AT589;
		 pATypeidType588_ATT588:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl575_AAP575:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 32;
		myrec^.last:= 38;
		 pAAlternativesPatterndecl575_AAP575:=myrec;
		END;
	FUNCTION pATypeid594_AT594:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BH  ilcg.RegDetails@193d2f2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid594_AT594:=myrec;
		END;
	FUNCTION pATypeidType593_ATT593:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid594_AT594;
		 pATypeidType593_ATT593:=myrec;
		END;
	FUNCTION pATypeid596_AT596:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ DH  ilcg.RegDetails@66998f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid596_AT596:=myrec;
		END;
	FUNCTION pATypeidType595_ATT595:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid596_AT596;
		 pATypeidType595_ATT595:=myrec;
		END;
	FUNCTION pATypeid598_AT598:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ uAL  ilcg.RegDetails@1d9d55b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid598_AT598:=myrec;
		END;
	FUNCTION pATypeidType597_ATT597:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid598_AT598;
		 pATypeidType597_ATT597:=myrec;
		END;
	FUNCTION pATypeid600_AT600:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ uBL  ilcg.RegDetails@112bd54}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid600_AT600:=myrec;
		END;
	FUNCTION pATypeidType599_ATT599:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid600_AT600;
		 pATypeidType599_ATT599:=myrec;
		END;
	FUNCTION pATypeid602_AT602:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ uDL  ilcg.RegDetails@edec92}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid602_AT602:=myrec;
		END;
	FUNCTION pATypeidType601_ATT601:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid602_AT602;
		 pATypeidType601_ATT601:=myrec;
		END;
	FUNCTION pATypeid604_AT604:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ uCL  ilcg.RegDetails@e634bf}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid604_AT604:=myrec;
		END;
	FUNCTION pATypeidType603_ATT603:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid604_AT604;
		 pATypeidType603_ATT603:=myrec;
		END;
	FUNCTION pATypeid606_AT606:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ CH  ilcg.RegDetails@8bfdea}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid606_AT606:=myrec;
		END;
	FUNCTION pATypeidType605_ATT605:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid606_AT606;
		 pATypeidType605_ATT605:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl592_AAP592:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 39;
		myrec^.last:= 45;
		 pAAlternativesPatterndecl592_AAP592:=myrec;
		END;
	FUNCTION pATypeid611_AT611:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ oBL  ilcg.RegDetails@117a4c6}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid611_AT611:=myrec;
		END;
	FUNCTION pATypeidType610_ATT610:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid611_AT611;
		 pATypeidType610_ATT610:=myrec;
		END;
	FUNCTION pATypeid613_AT613:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ oAL  ilcg.RegDetails@1ac7fbb}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid613_AT613:=myrec;
		END;
	FUNCTION pATypeidType612_ATT612:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid613_AT613;
		 pATypeidType612_ATT612:=myrec;
		END;
	FUNCTION pATypeid615_AT615:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ oDL  ilcg.RegDetails@18feca1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid615_AT615:=myrec;
		END;
	FUNCTION pATypeidType614_ATT614:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid615_AT615;
		 pATypeidType614_ATT614:=myrec;
		END;
	FUNCTION pATypeid617_AT617:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ oCL  ilcg.RegDetails@10e6cbd}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid617_AT617:=myrec;
		END;
	FUNCTION pATypeidType616_ATT616:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid617_AT617;
		 pATypeidType616_ATT616:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl609_AAP609:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 46;
		myrec^.last:= 49;
		 pAAlternativesPatterndecl609_AAP609:=myrec;
		END;
	FUNCTION pATypeid622_AT622:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ AL  ilcg.RegDetails@1ee2ea8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid622_AT622:=myrec;
		END;
	FUNCTION pATypeidType621_ATT621:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid622_AT622;
		 pATypeidType621_ATT621:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl620_AAP620:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 50;
		myrec^.last:= 50;
		 pAAlternativesPatterndecl620_AAP620:=myrec;
		END;
	FUNCTION pATypeid627_AT627:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BL  ilcg.RegDetails@1e2bda7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid627_AT627:=myrec;
		END;
	FUNCTION pATypeidType626_ATT626:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid627_AT627;
		 pATypeidType626_ATT626:=myrec;
		END;
	FUNCTION pATypeid629_AT629:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ CL  ilcg.RegDetails@17e6064}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid629_AT629:=myrec;
		END;
	FUNCTION pATypeidType628_ATT628:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid629_AT629;
		 pATypeidType628_ATT628:=myrec;
		END;
	FUNCTION pATypeid631_AT631:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ DL  ilcg.RegDetails@904f75}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid631_AT631:=myrec;
		END;
	FUNCTION pATypeidType630_ATT630:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid631_AT631;
		 pATypeidType630_ATT630:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl625_AAP625:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 51;
		myrec^.last:= 53;
		 pAAlternativesPatterndecl625_AAP625:=myrec;
		END;
	FUNCTION pATypeid636_AT636:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bireg  ilcg.pattern@ef7d74}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid636_AT636:=myrec;
		END;
	FUNCTION pATypeidType635_ATT635:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid636_AT636;
		 pATypeidType635_ATT635:=myrec;
		END;
	FUNCTION pATypeid638_AT638:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bnonacc  ilcg.pattern@fe9ad1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid638_AT638:=myrec;
		END;
	FUNCTION pATypeidType637_ATT637:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid638_AT638;
		 pATypeidType637_ATT637:=myrec;
		END;
	FUNCTION pATypeid640_AT640:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bureg  ilcg.pattern@130b13c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid640_AT640:=myrec;
		END;
	FUNCTION pATypeidType639_ATT639:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid640_AT640;
		 pATypeidType639_ATT639:=myrec;
		END;
	FUNCTION pATypeid642_AT642:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ boreg  ilcg.pattern@1be9a50}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid642_AT642:=myrec;
		END;
	FUNCTION pATypeidType641_ATT641:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid642_AT642;
		 pATypeidType641_ATT641:=myrec;
		END;
	FUNCTION pATypeid644_AT644:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bacc  ilcg.pattern@933cba}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid644_AT644:=myrec;
		END;
	FUNCTION pATypeidType643_ATT643:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid644_AT644;
		 pATypeidType643_ATT643:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl634_AAP634:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 54;
		myrec^.last:= 58;
		 pAAlternativesPatterndecl634_AAP634:=myrec;
		END;
	FUNCTION pATypeid649_AT649:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BX  ilcg.RegDetails@1bca486}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid649_AT649:=myrec;
		END;
	FUNCTION pATypeidType648_ATT648:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid649_AT649;
		 pATypeidType648_ATT648:=myrec;
		END;
	FUNCTION pATypeid651_AT651:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ CX  ilcg.RegDetails@3c40f0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid651_AT651:=myrec;
		END;
	FUNCTION pATypeidType650_ATT650:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid651_AT651;
		 pATypeidType650_ATT650:=myrec;
		END;
	FUNCTION pATypeid653_AT653:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ DX  ilcg.RegDetails@71d29a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid653_AT653:=myrec;
		END;
	FUNCTION pATypeidType652_ATT652:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid653_AT653;
		 pATypeidType652_ATT652:=myrec;
		END;
	FUNCTION pATypeid655_AT655:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ AX  ilcg.RegDetails@c4cee}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid655_AT655:=myrec;
		END;
	FUNCTION pATypeidType654_ATT654:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid655_AT655;
		 pATypeidType654_ATT654:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl647_AAP647:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 59;
		myrec^.last:= 62;
		 pAAlternativesPatterndecl647_AAP647:=myrec;
		END;
	FUNCTION pATypeid660_AT660:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ uBX  ilcg.RegDetails@1991ba7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid660_AT660:=myrec;
		END;
	FUNCTION pATypeidType659_ATT659:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid660_AT660;
		 pATypeidType659_ATT659:=myrec;
		END;
	FUNCTION pATypeid662_AT662:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ uCX  ilcg.RegDetails@17b6074}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid662_AT662:=myrec;
		END;
	FUNCTION pATypeidType661_ATT661:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid662_AT662;
		 pATypeidType661_ATT661:=myrec;
		END;
	FUNCTION pATypeid664_AT664:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ uDX  ilcg.RegDetails@bdb6ae}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid664_AT664:=myrec;
		END;
	FUNCTION pATypeidType663_ATT663:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid664_AT664;
		 pATypeidType663_ATT663:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl658_AAP658:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 63;
		myrec^.last:= 65;
		 pAAlternativesPatterndecl658_AAP658:=myrec;
		END;
	FUNCTION pATypeid669_AT669:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SI  ilcg.RegDetails@127a49c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid669_AT669:=myrec;
		END;
	FUNCTION pATypeidType668_ATT668:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid669_AT669;
		 pATypeidType668_ATT668:=myrec;
		END;
	FUNCTION pATypeid671_AT671:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ DI  ilcg.RegDetails@9d9edd}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid671_AT671:=myrec;
		END;
	FUNCTION pATypeidType670_ATT670:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid671_AT671;
		 pATypeidType670_ATT670:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl667_AAP667:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 66;
		myrec^.last:= 67;
		 pAAlternativesPatterndecl667_AAP667:=myrec;
		END;
	FUNCTION pATypeid676_AT676:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ swreg  ilcg.pattern@15023d2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid676_AT676:=myrec;
		END;
	FUNCTION pATypeidType675_ATT675:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid676_AT676;
		 pATypeidType675_ATT675:=myrec;
		END;
	FUNCTION pATypeid678_AT678:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ uwreg  ilcg.pattern@1bb03ee}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid678_AT678:=myrec;
		END;
	FUNCTION pATypeidType677_ATT677:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid678_AT678;
		 pATypeidType677_ATT677:=myrec;
		END;
	FUNCTION pATypeid680_AT680:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ untypedwreg  ilcg.pattern@1239780}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid680_AT680:=myrec;
		END;
	FUNCTION pATypeidType679_ATT679:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid680_AT680;
		 pATypeidType679_ATT679:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl674_AAP674:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 68;
		myrec^.last:= 70;
		 pAAlternativesPatterndecl674_AAP674:=myrec;
		END;
	FUNCTION pATypeid685_AT685:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid685_AT685:=myrec;
		END;
	FUNCTION pATypeidType684_ATT684:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid685_AT685;
		 pATypeidType684_ATT684:=myrec;
		END;
	FUNCTION pATypeid687_AT687:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ wreg  ilcg.pattern@15004dd}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid687_AT687:=myrec;
		END;
	FUNCTION pATypeidType686_ATT686:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid687_AT687;
		 pATypeidType686_ATT686:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl683_AAP683:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 71;
		myrec^.last:= 72;
		 pAAlternativesPatterndecl683_AAP683:=myrec;
		END;
	FUNCTION pATypeid692_AT692:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid692_AT692:=myrec;
		END;
	FUNCTION pATypeidType691_ATT691:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid692_AT692;
		 pATypeidType691_ATT691:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl690_AAP690:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 73;
		myrec^.last:= 73;
		 pAAlternativesPatterndecl690_AAP690:=myrec;
		END;
	FUNCTION pATypeid697_AT697:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid697_AT697:=myrec;
		END;
	FUNCTION pATypeidType696_ATT696:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid697_AT697;
		 pATypeidType696_ATT696:=myrec;
		END;
	FUNCTION pATypeid699_AT699:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ wreg  ilcg.pattern@15004dd}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid699_AT699:=myrec;
		END;
	FUNCTION pATypeidType698_ATT698:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid699_AT699;
		 pATypeidType698_ATT698:=myrec;
		END;
	FUNCTION pATypeid701_AT701:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid701_AT701:=myrec;
		END;
	FUNCTION pATypeidType700_ATT700:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid701_AT701;
		 pATypeidType700_ATT700:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl695_AAP695:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 74;
		myrec^.last:= 76;
		 pAAlternativesPatterndecl695_AAP695:=myrec;
		END;
	FUNCTION pATypeid706_AT706:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bireg  ilcg.pattern@ef7d74}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid706_AT706:=myrec;
		END;
	FUNCTION pATypeidType705_ATT705:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid706_AT706;
		 pATypeidType705_ATT705:=myrec;
		END;
	FUNCTION pATypeid708_AT708:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ swreg  ilcg.pattern@15023d2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid708_AT708:=myrec;
		END;
	FUNCTION pATypeidType707_ATT707:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid708_AT708;
		 pATypeidType707_ATT707:=myrec;
		END;
	FUNCTION pATypeid710_AT710:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ireg  ilcg.pattern@84f665}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid710_AT710:=myrec;
		END;
	FUNCTION pATypeidType709_ATT709:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid710_AT710;
		 pATypeidType709_ATT709:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl704_AAP704:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 77;
		myrec^.last:= 79;
		 pAAlternativesPatterndecl704_AAP704:=myrec;
		END;
	FUNCTION pATypeid715_AT715:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bureg  ilcg.pattern@130b13c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid715_AT715:=myrec;
		END;
	FUNCTION pATypeidType714_ATT714:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid715_AT715;
		 pATypeidType714_ATT714:=myrec;
		END;
	FUNCTION pATypeid717_AT717:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ureg  ilcg.pattern@453dd5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid717_AT717:=myrec;
		END;
	FUNCTION pATypeidType716_ATT716:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid717_AT717;
		 pATypeidType716_ATT716:=myrec;
		END;
	FUNCTION pATypeid719_AT719:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ uwreg  ilcg.pattern@1bb03ee}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid719_AT719:=myrec;
		END;
	FUNCTION pATypeidType718_ATT718:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid719_AT719;
		 pATypeidType718_ATT718:=myrec;
		END;
	FUNCTION pATypeid721_AT721:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ureg  ilcg.pattern@453dd5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid721_AT721:=myrec;
		END;
	FUNCTION pATypeidType720_ATT720:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid721_AT721;
		 pATypeidType720_ATT720:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl713_AAP713:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 80;
		myrec^.last:= 83;
		 pAAlternativesPatterndecl713_AAP713:=myrec;
		END;
	FUNCTION pATypeid726_AT726:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ EAX  ilcg.RegDetails@4904d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid726_AT726:=myrec;
		END;
	FUNCTION pATypeidType725_ATT725:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid726_AT726;
		 pATypeidType725_ATT725:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl724_AAP724:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 84;
		myrec^.last:= 84;
		 pAAlternativesPatterndecl724_AAP724:=myrec;
		END;
	FUNCTION pATypeid731_AT731:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ EADX  ilcg.RegDetails@1d41116}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid731_AT731:=myrec;
		END;
	FUNCTION pATypeidType730_ATT730:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid731_AT731;
		 pATypeidType730_ATT730:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl729_AAP729:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 85;
		myrec^.last:= 85;
		 pAAlternativesPatterndecl729_AAP729:=myrec;
		END;
	FUNCTION pATypeid736_AT736:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ EDX  ilcg.RegDetails@1ed2061}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid736_AT736:=myrec;
		END;
	FUNCTION pATypeidType735_ATT735:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid736_AT736;
		 pATypeidType735_ATT735:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl734_AAP734:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 86;
		myrec^.last:= 86;
		 pAAlternativesPatterndecl734_AAP734:=myrec;
		END;
	FUNCTION pATypeid741_AT741:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ AX  ilcg.RegDetails@c4cee}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid741_AT741:=myrec;
		END;
	FUNCTION pATypeidType740_ATT740:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid741_AT741;
		 pATypeidType740_ATT740:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl739_AAP739:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 87;
		myrec^.last:= 87;
		 pAAlternativesPatterndecl739_AAP739:=myrec;
		END;
	FUNCTION pATypeid746_AT746:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ EBX  ilcg.RegDetails@c3c44}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid746_AT746:=myrec;
		END;
	FUNCTION pATypeidType745_ATT745:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid746_AT746;
		 pATypeidType745_ATT745:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl744_AAP744:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 88;
		myrec^.last:= 88;
		 pAAlternativesPatterndecl744_AAP744:=myrec;
		END;
	FUNCTION pATypeid751_AT751:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BL  ilcg.RegDetails@1e2bda7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid751_AT751:=myrec;
		END;
	FUNCTION pATypeidType750_ATT750:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid751_AT751;
		 pATypeidType750_ATT750:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl749_AAP749:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 89;
		myrec^.last:= 89;
		 pAAlternativesPatterndecl749_AAP749:=myrec;
		END;
	FUNCTION pATypeid756_AT756:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ECX  ilcg.RegDetails@1b68d78}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid756_AT756:=myrec;
		END;
	FUNCTION pATypeidType755_ATT755:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid756_AT756;
		 pATypeidType755_ATT755:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl754_AAP754:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 90;
		myrec^.last:= 90;
		 pAAlternativesPatterndecl754_AAP754:=myrec;
		END;
	FUNCTION pATypeid761_AT761:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ CL  ilcg.RegDetails@17e6064}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid761_AT761:=myrec;
		END;
	FUNCTION pATypeidType760_ATT760:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid761_AT761;
		 pATypeidType760_ATT760:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl759_AAP759:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 91;
		myrec^.last:= 91;
		 pAAlternativesPatterndecl759_AAP759:=myrec;
		END;
	FUNCTION pATypeid766_AT766:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ucx  ilcg.RegDetails@396fce}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid766_AT766:=myrec;
		END;
	FUNCTION pATypeidType765_ATT765:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid766_AT766;
		 pATypeidType765_ATT765:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl764_AAP764:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 92;
		myrec^.last:= 92;
		 pAAlternativesPatterndecl764_AAP764:=myrec;
		END;
	FUNCTION pATypeid771_AT771:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ECX  ilcg.RegDetails@1b68d78}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid771_AT771:=myrec;
		END;
	FUNCTION pATypeidType770_ATT770:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid771_AT771;
		 pATypeidType770_ATT770:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl769_AAP769:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 93;
		myrec^.last:= 93;
		 pAAlternativesPatterndecl769_AAP769:=myrec;
		END;
	FUNCTION pATypeid776_AT776:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ESI  ilcg.RegDetails@1cfad77}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid776_AT776:=myrec;
		END;
	FUNCTION pATypeidType775_ATT775:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid776_AT776;
		 pATypeidType775_ATT775:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl774_AAP774:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 94;
		myrec^.last:= 94;
		 pAAlternativesPatterndecl774_AAP774:=myrec;
		END;
	FUNCTION pATypeid781_AT781:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ EDI  ilcg.RegDetails@130500f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid781_AT781:=myrec;
		END;
	FUNCTION pATypeidType780_ATT780:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid781_AT781;
		 pATypeidType780_ATT780:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl779_AAP779:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 95;
		myrec^.last:= 95;
		 pAAlternativesPatterndecl779_AAP779:=myrec;
		END;
	FUNCTION pATypeid786_AT786:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ECX  ilcg.RegDetails@1b68d78}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid786_AT786:=myrec;
		END;
	FUNCTION pATypeidType785_ATT785:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid786_AT786;
		 pATypeidType785_ATT785:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl784_AAP784:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 96;
		myrec^.last:= 96;
		 pAAlternativesPatterndecl784_AAP784:=myrec;
		END;
	FUNCTION pATypeid791_AT791:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ EADXu  ilcg.RegDetails@8c5488}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid791_AT791:=myrec;
		END;
	FUNCTION pATypeidType790_ATT790:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid791_AT791;
		 pATypeidType790_ATT790:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl789_AAP789:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 97;
		myrec^.last:= 97;
		 pAAlternativesPatterndecl789_AAP789:=myrec;
		END;
	FUNCTION pATypeid796_AT796:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ecxbacc  ilcg.pattern@ec9441}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid796_AT796:=myrec;
		END;
	FUNCTION pATypeidType795_ATT795:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid796_AT796;
		 pATypeidType795_ATT795:=myrec;
		END;
	FUNCTION pATypeid798_AT798:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ecxacc  ilcg.pattern@1b66aff}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid798_AT798:=myrec;
		END;
	FUNCTION pATypeidType797_ATT797:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid798_AT798;
		 pATypeidType797_ATT797:=myrec;
		END;
	FUNCTION pATypeid800_AT800:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ecxuacc  ilcg.pattern@90d4f2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid800_AT800:=myrec;
		END;
	FUNCTION pATypeidType799_ATT799:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid800_AT800;
		 pATypeidType799_ATT799:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl794_AAP794:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 98;
		myrec^.last:= 100;
		 pAAlternativesPatterndecl794_AAP794:=myrec;
		END;
	FUNCTION pAAndOperator808_AAO808:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAAndOperator808_AAO808:=nil;
		 pAAndOperator808_AAO808:=myrec;
		END;
	FUNCTION pAOrOperator812_AOO812:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOrOperator812_AOO812:=nil;
		 pAOrOperator812_AOO812:=myrec;
		END;
	FUNCTION pAXorOperator816_AXO816:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAXorOperator816_AXO816:=nil;
		 pAXorOperator816_AXO816:=myrec;
		END;
	FUNCTION pALtOperator832_ALO832:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pALtOperator832_ALO832:=nil;
		 pALtOperator832_ALO832:=myrec;
		END;
	FUNCTION pALtOperator836_ALO836:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pALtOperator836_ALO836:=nil;
		 pALtOperator836_ALO836:=myrec;
		END;
	FUNCTION pAGtOperator840_AGO840:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAGtOperator840_AGO840:=nil;
		 pAGtOperator840_AGO840:=myrec;
		END;
	FUNCTION pAGtOperator844_AGO844:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAGtOperator844_AGO844:=nil;
		 pAGtOperator844_AGO844:=myrec;
		END;
	FUNCTION pAEqOperator848_AEO848:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAEqOperator848_AEO848:=nil;
		 pAEqOperator848_AEO848:=myrec;
		END;
	FUNCTION pALeOperator852_ALO852:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pALeOperator852_ALO852:=nil;
		 pALeOperator852_ALO852:=myrec;
		END;
	FUNCTION pALeOperator856_ALO856:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pALeOperator856_ALO856:=nil;
		 pALeOperator856_ALO856:=myrec;
		END;
	FUNCTION pAGeOperator860_AGO860:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAGeOperator860_AGO860:=nil;
		 pAGeOperator860_AGO860:=myrec;
		END;
	FUNCTION pAGeOperator864_AGO864:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAGeOperator864_AGO864:=nil;
		 pAGeOperator864_AGO864:=myrec;
		END;
	FUNCTION pANeOperator868_ANO868:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANeOperator868_ANO868:=nil;
		 pANeOperator868_ANO868:=myrec;
		END;
	FUNCTION pAShlOperator872_ASO872:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAShlOperator872_ASO872:=nil;
		 pAShlOperator872_ASO872:=myrec;
		END;
	FUNCTION pAShrOperator876_ASO876:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAShrOperator876_ASO876:=nil;
		 pAShrOperator876_ASO876:=myrec;
		END;
	FUNCTION pATypeid881_AT881:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ne  ilcg.Operation@128647a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid881_AT881:=myrec;
		END;
	FUNCTION pATypeidType880_ATT880:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid881_AT881;
		 pATypeidType880_ATT880:=myrec;
		END;
	FUNCTION pATypeid883_AT883:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ge  ilcg.Operation@a85268}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid883_AT883:=myrec;
		END;
	FUNCTION pATypeidType882_ATT882:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid883_AT883;
		 pATypeidType882_ATT882:=myrec;
		END;
	FUNCTION pATypeid885_AT885:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ le  ilcg.Operation@ee644c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid885_AT885:=myrec;
		END;
	FUNCTION pATypeidType884_ATT884:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid885_AT885;
		 pATypeidType884_ATT884:=myrec;
		END;
	FUNCTION pATypeid887_AT887:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ eq  ilcg.Operation@239f6}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid887_AT887:=myrec;
		END;
	FUNCTION pATypeidType886_ATT886:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid887_AT887;
		 pATypeidType886_ATT886:=myrec;
		END;
	FUNCTION pATypeid889_AT889:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ gt  ilcg.Operation@1c83354}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid889_AT889:=myrec;
		END;
	FUNCTION pATypeidType888_ATT888:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid889_AT889;
		 pATypeidType888_ATT888:=myrec;
		END;
	FUNCTION pATypeid891_AT891:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ lt  ilcg.Operation@12ee2a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid891_AT891:=myrec;
		END;
	FUNCTION pATypeidType890_ATT890:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid891_AT891;
		 pATypeidType890_ATT890:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl879_AAP879:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 101;
		myrec^.last:= 106;
		 pAAlternativesPatterndecl879_AAP879:=myrec;
		END;
	FUNCTION pATypeid896_AT896:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ eq  ilcg.Operation@239f6}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid896_AT896:=myrec;
		END;
	FUNCTION pATypeidType895_ATT895:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid896_AT896;
		 pATypeidType895_ATT895:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl894_AAP894:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 107;
		myrec^.last:= 107;
		 pAAlternativesPatterndecl894_AAP894:=myrec;
		END;
	FUNCTION pATypeid901_AT901:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ne  ilcg.Operation@128647a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid901_AT901:=myrec;
		END;
	FUNCTION pATypeidType900_ATT900:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid901_AT901;
		 pATypeidType900_ATT900:=myrec;
		END;
	FUNCTION pATypeid903_AT903:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ eq  ilcg.Operation@239f6}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid903_AT903:=myrec;
		END;
	FUNCTION pATypeidType902_ATT902:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid903_AT903;
		 pATypeidType902_ATT902:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl899_AAP899:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 108;
		myrec^.last:= 109;
		 pAAlternativesPatterndecl899_AAP899:=myrec;
		END;
	FUNCTION pATypeid908_AT908:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ne  ilcg.Operation@128647a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid908_AT908:=myrec;
		END;
	FUNCTION pATypeidType907_ATT907:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid908_AT908;
		 pATypeidType907_ATT907:=myrec;
		END;
	FUNCTION pATypeid910_AT910:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ae  ilcg.Operation@a16605}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid910_AT910:=myrec;
		END;
	FUNCTION pATypeidType909_ATT909:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid910_AT910;
		 pATypeidType909_ATT909:=myrec;
		END;
	FUNCTION pATypeid912_AT912:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ be  ilcg.Operation@1c3a0c7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid912_AT912:=myrec;
		END;
	FUNCTION pATypeidType911_ATT911:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid912_AT912;
		 pATypeidType911_ATT911:=myrec;
		END;
	FUNCTION pATypeid914_AT914:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ eq  ilcg.Operation@239f6}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid914_AT914:=myrec;
		END;
	FUNCTION pATypeidType913_ATT913:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid914_AT914;
		 pATypeidType913_ATT913:=myrec;
		END;
	FUNCTION pATypeid916_AT916:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ab  ilcg.Operation@1127c4d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid916_AT916:=myrec;
		END;
	FUNCTION pATypeidType915_ATT915:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid916_AT916;
		 pATypeidType915_ATT915:=myrec;
		END;
	FUNCTION pATypeid918_AT918:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bel  ilcg.Operation@9ebcd0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid918_AT918:=myrec;
		END;
	FUNCTION pATypeidType917_ATT917:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid918_AT918;
		 pATypeidType917_ATT917:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl906_AAP906:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 110;
		myrec^.last:= 115;
		 pAAlternativesPatterndecl906_AAP906:=myrec;
		END;
	FUNCTION pATypeid923_AT923:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ add  ilcg.Operation@11fb68f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid923_AT923:=myrec;
		END;
	FUNCTION pATypeidType922_ATT922:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid923_AT923;
		 pATypeidType922_ATT922:=myrec;
		END;
	FUNCTION pATypeid925_AT925:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ sub  ilcg.Operation@24d517}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid925_AT925:=myrec;
		END;
	FUNCTION pATypeidType924_ATT924:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid925_AT925;
		 pATypeidType924_ATT924:=myrec;
		END;
	FUNCTION pATypeid927_AT927:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ imul  ilcg.Operation@125b750}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid927_AT927:=myrec;
		END;
	FUNCTION pATypeidType926_ATT926:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid927_AT927;
		 pATypeidType926_ATT926:=myrec;
		END;
	FUNCTION pATypeid929_AT929:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ and  ilcg.Operation@64dfeb}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid929_AT929:=myrec;
		END;
	FUNCTION pATypeidType928_ATT928:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid929_AT929;
		 pATypeidType928_ATT928:=myrec;
		END;
	FUNCTION pATypeid931_AT931:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ or  ilcg.Operation@14865b1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid931_AT931:=myrec;
		END;
	FUNCTION pATypeidType930_ATT930:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid931_AT931;
		 pATypeidType930_ATT930:=myrec;
		END;
	FUNCTION pATypeid933_AT933:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xor  ilcg.Operation@d591a6}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid933_AT933:=myrec;
		END;
	FUNCTION pATypeidType932_ATT932:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid933_AT933;
		 pATypeidType932_ATT932:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl921_AAP921:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 116;
		myrec^.last:= 121;
		 pAAlternativesPatterndecl921_AAP921:=myrec;
		END;
	FUNCTION pATypeid938_AT938:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ and  ilcg.Operation@64dfeb}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid938_AT938:=myrec;
		END;
	FUNCTION pATypeidType937_ATT937:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid938_AT938;
		 pATypeidType937_ATT937:=myrec;
		END;
	FUNCTION pATypeid940_AT940:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ or  ilcg.Operation@14865b1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid940_AT940:=myrec;
		END;
	FUNCTION pATypeidType939_ATT939:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid940_AT940;
		 pATypeidType939_ATT939:=myrec;
		END;
	FUNCTION pATypeid942_AT942:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xor  ilcg.Operation@d591a6}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid942_AT942:=myrec;
		END;
	FUNCTION pATypeidType941_ATT941:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid942_AT942;
		 pATypeidType941_ATT941:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl936_AAP936:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 122;
		myrec^.last:= 124;
		 pAAlternativesPatterndecl936_AAP936:=myrec;
		END;
	FUNCTION pATypeid947_AT947:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ add  ilcg.Operation@11fb68f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid947_AT947:=myrec;
		END;
	FUNCTION pATypeidType946_ATT946:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid947_AT947;
		 pATypeidType946_ATT946:=myrec;
		END;
	FUNCTION pATypeid949_AT949:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ sub  ilcg.Operation@24d517}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid949_AT949:=myrec;
		END;
	FUNCTION pATypeidType948_ATT948:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid949_AT949;
		 pATypeidType948_ATT948:=myrec;
		END;
	FUNCTION pATypeid951_AT951:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ logoperator  ilcg.pattern@1082d45}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid951_AT951:=myrec;
		END;
	FUNCTION pATypeidType950_ATT950:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid951_AT951;
		 pATypeidType950_ATT950:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl945_AAP945:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 125;
		myrec^.last:= 127;
		 pAAlternativesPatterndecl945_AAP945:=myrec;
		END;
	FUNCTION pATypeid956_AT956:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ add  ilcg.Operation@11fb68f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid956_AT956:=myrec;
		END;
	FUNCTION pATypeidType955_ATT955:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid956_AT956;
		 pATypeidType955_ATT955:=myrec;
		END;
	FUNCTION pATypeid958_AT958:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ imul  ilcg.Operation@125b750}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid958_AT958:=myrec;
		END;
	FUNCTION pATypeidType957_ATT957:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid958_AT958;
		 pATypeidType957_ATT957:=myrec;
		END;
	FUNCTION pATypeid960_AT960:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ and  ilcg.Operation@64dfeb}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid960_AT960:=myrec;
		END;
	FUNCTION pATypeidType959_ATT959:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid960_AT960;
		 pATypeidType959_ATT959:=myrec;
		END;
	FUNCTION pATypeid962_AT962:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ or  ilcg.Operation@14865b1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid962_AT962:=myrec;
		END;
	FUNCTION pATypeidType961_ATT961:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid962_AT962;
		 pATypeidType961_ATT961:=myrec;
		END;
	FUNCTION pATypeid964_AT964:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xor  ilcg.Operation@d591a6}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid964_AT964:=myrec;
		END;
	FUNCTION pATypeidType963_ATT963:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid964_AT964;
		 pATypeidType963_ATT963:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl954_AAP954:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 128;
		myrec^.last:= 132;
		 pAAlternativesPatterndecl954_AAP954:=myrec;
		END;
	FUNCTION pATypeid969_AT969:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ shiftleft  ilcg.Operation@15c9f9d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid969_AT969:=myrec;
		END;
	FUNCTION pATypeidType968_ATT968:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid969_AT969;
		 pATypeidType968_ATT968:=myrec;
		END;
	FUNCTION pATypeid971_AT971:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ shiftright  ilcg.Operation@13244cd}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid971_AT971:=myrec;
		END;
	FUNCTION pATypeidType970_ATT970:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid971_AT971;
		 pATypeidType970_ATT970:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl967_AAP967:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 133;
		myrec^.last:= 134;
		 pAAlternativesPatterndecl967_AAP967:=myrec;
		END;
	FUNCTION pAUnsigned978_AU978:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32;
		 pAUnsigned978_AU978:=myrec;
		END;
	FUNCTION pAUnsignedTformat977_AUT977:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUnsigned978_AU978;
		 pAUnsignedTformat977_AUT977:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype976_ATP976:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pATformatPredeclaredtype976_ATP976:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType975_APT975:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pAPredeclaredtypeType975_APT975:=myrec;
		END;
	FUNCTION pAUint8Unsigned982_AU8U982:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned982_AU8U982:=myrec;
		END;
	FUNCTION pAUnsignedTformat981_AUT981:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned982_AU8U982;
		 pAUnsignedTformat981_AUT981:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype980_ATP980:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype980_ATP980:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType979_APT979:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType979_APT979:=myrec;
		END;
	FUNCTION pAUint16Unsigned986_AU16U986:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16;
		 pAUint16Unsigned986_AU16U986:=myrec;
		END;
	FUNCTION pAUnsignedTformat985_AUT985:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint16Unsigned986_AU16U986;
		 pAUnsignedTformat985_AUT985:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype984_ATP984:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pATformatPredeclaredtype984_ATP984:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType983_APT983:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pAPredeclaredtypeType983_APT983:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl974_AAP974:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 135;
		myrec^.last:= 137;
		 pAAlternativesPatterndecl974_AAP974:=myrec;
		END;
	FUNCTION pAInt8Signed993_AI8S993:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed993_AI8S993:=myrec;
		END;
	FUNCTION pASignedTformat992_AST992:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed993_AI8S993;
		 pASignedTformat992_AST992:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype991_ATP991:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype991_ATP991:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType990_APT990:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType990_APT990:=myrec;
		END;
	FUNCTION pAInt16Signed997_AI16S997:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed997_AI16S997:=myrec;
		END;
	FUNCTION pASignedTformat996_AST996:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed997_AI16S997;
		 pASignedTformat996_AST996:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype995_ATP995:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype995_ATP995:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType994_APT994:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pAPredeclaredtypeType994_APT994:=myrec;
		END;
	FUNCTION pASigned1001_AS1001:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned1001_AS1001:=myrec;
		END;
	FUNCTION pASignedTformat1000_AST1000:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned1001_AS1001;
		 pASignedTformat1000_AST1000:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype999_ATP999:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype999_ATP999:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType998_APT998:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType998_APT998:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl989_AAP989:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 138;
		myrec^.last:= 140;
		 pAAlternativesPatterndecl989_AAP989:=myrec;
		END;
	FUNCTION pAInt8Signed1008_AI8S1008:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed1008_AI8S1008:=myrec;
		END;
	FUNCTION pASignedTformat1007_AST1007:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed1008_AI8S1008;
		 pASignedTformat1007_AST1007:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1006_ATP1006:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype1006_ATP1006:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1005_APT1005:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType1005_APT1005:=myrec;
		END;
	FUNCTION pAInt16Signed1012_AI16S1012:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed1012_AI16S1012:=myrec;
		END;
	FUNCTION pASignedTformat1011_AST1011:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed1012_AI16S1012;
		 pASignedTformat1011_AST1011:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1010_ATP1010:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype1010_ATP1010:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1009_APT1009:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pAPredeclaredtypeType1009_APT1009:=myrec;
		END;
	FUNCTION pASigned1016_AS1016:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned1016_AS1016:=myrec;
		END;
	FUNCTION pASignedTformat1015_AST1015:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned1016_AS1016;
		 pASignedTformat1015_AST1015:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1014_ATP1014:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype1014_ATP1014:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1013_APT1013:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType1013_APT1013:=myrec;
		END;
	FUNCTION pAUnsigned1020_AU1020:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32;
		 pAUnsigned1020_AU1020:=myrec;
		END;
	FUNCTION pAUnsignedTformat1019_AUT1019:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUnsigned1020_AU1020;
		 pAUnsignedTformat1019_AUT1019:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1018_ATP1018:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pATformatPredeclaredtype1018_ATP1018:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1017_APT1017:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pAPredeclaredtypeType1017_APT1017:=myrec;
		END;
	FUNCTION pAUint8Unsigned1024_AU8U1024:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned1024_AU8U1024:=myrec;
		END;
	FUNCTION pAUnsignedTformat1023_AUT1023:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned1024_AU8U1024;
		 pAUnsignedTformat1023_AUT1023:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1022_ATP1022:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype1022_ATP1022:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1021_APT1021:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType1021_APT1021:=myrec;
		END;
	FUNCTION pAUint16Unsigned1028_AU16U1028:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16;
		 pAUint16Unsigned1028_AU16U1028:=myrec;
		END;
	FUNCTION pAUnsignedTformat1027_AUT1027:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint16Unsigned1028_AU16U1028;
		 pAUnsignedTformat1027_AUT1027:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1026_ATP1026:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pATformatPredeclaredtype1026_ATP1026:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1025_APT1025:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pAPredeclaredtypeType1025_APT1025:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1004_AAP1004:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 141;
		myrec^.last:= 146;
		 pAAlternativesPatterndecl1004_AAP1004:=myrec;
		END;
	FUNCTION pAIeee63Tformat1034_AI63T1034:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat1034_AI63T1034:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1033_ATP1033:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype1033_ATP1033:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1032_APT1032:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType1032_APT1032:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1031_AAP1031:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 147;
		myrec^.last:= 147;
		 pAAlternativesPatterndecl1031_AAP1031:=myrec;
		END;
	FUNCTION pAIeee32Tformat1040_AI32T1040:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat1040_AI32T1040:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1039_ATP1039:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype1039_ATP1039:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1038_APT1038:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType1038_APT1038:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1037_AAP1037:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 148;
		myrec^.last:= 148;
		 pAAlternativesPatterndecl1037_AAP1037:=myrec;
		END;
	FUNCTION pAIeee63Tformat1046_AI63T1046:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat1046_AI63T1046:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1045_ATP1045:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype1045_ATP1045:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1044_APT1044:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType1044_APT1044:=myrec;
		END;
	FUNCTION pATypeid1048_AT1048:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ float  ilcg.pattern@19d0cf0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1048_AT1048:=myrec;
		END;
	FUNCTION pATypeidType1047_ATT1047:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1048_AT1048;
		 pATypeidType1047_ATT1047:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1043_AAP1043:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 149;
		myrec^.last:= 150;
		 pAAlternativesPatterndecl1043_AAP1043:=myrec;
		END;
	FUNCTION pAUint8Unsigned1055_AU8U1055:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned1055_AU8U1055:=myrec;
		END;
	FUNCTION pAUnsignedTformat1054_AUT1054:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned1055_AU8U1055;
		 pAUnsignedTformat1054_AUT1054:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1053_ATP1053:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype1053_ATP1053:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1052_APT1052:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType1052_APT1052:=myrec;
		END;
	FUNCTION pAInt8Signed1059_AI8S1059:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed1059_AI8S1059:=myrec;
		END;
	FUNCTION pASignedTformat1058_AST1058:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed1059_AI8S1059;
		 pASignedTformat1058_AST1058:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1057_ATP1057:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype1057_ATP1057:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1056_APT1056:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType1056_APT1056:=myrec;
		END;
	FUNCTION pAOctetFormat1062_AOF1062:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat1062_AOF1062:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype1061_AFP1061:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype1061_AFP1061:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1060_APT1060:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAPredeclaredtypeType1060_APT1060:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1051_AAP1051:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 151;
		myrec^.last:= 153;
		 pAAlternativesPatterndecl1051_AAP1051:=myrec;
		END;
	FUNCTION pASigned1069_AS1069:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned1069_AS1069:=myrec;
		END;
	FUNCTION pASignedTformat1068_AST1068:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned1069_AS1069;
		 pASignedTformat1068_AST1068:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1067_ATP1067:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype1067_ATP1067:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1066_APT1066:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType1066_APT1066:=myrec;
		END;
	FUNCTION pAUnsigned1073_AU1073:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32;
		 pAUnsigned1073_AU1073:=myrec;
		END;
	FUNCTION pAUnsignedTformat1072_AUT1072:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUnsigned1073_AU1073;
		 pAUnsignedTformat1072_AUT1072:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1071_ATP1071:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pATformatPredeclaredtype1071_ATP1071:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1070_APT1070:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pAPredeclaredtypeType1070_APT1070:=myrec;
		END;
	FUNCTION pAWordFormat1076_AWF1076:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword;
		 pAWordFormat1076_AWF1076:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype1075_AFP1075:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAFormatPredeclaredtype1075_AFP1075:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1074_APT1074:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAPredeclaredtypeType1074_APT1074:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1065_AAP1065:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 154;
		myrec^.last:= 156;
		 pAAlternativesPatterndecl1065_AAP1065:=myrec;
		END;
	FUNCTION pAInt16Signed1083_AI16S1083:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed1083_AI16S1083:=myrec;
		END;
	FUNCTION pASignedTformat1082_AST1082:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed1083_AI16S1083;
		 pASignedTformat1082_AST1082:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1081_ATP1081:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype1081_ATP1081:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1080_APT1080:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pAPredeclaredtypeType1080_APT1080:=myrec;
		END;
	FUNCTION pAUint16Unsigned1087_AU16U1087:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16;
		 pAUint16Unsigned1087_AU16U1087:=myrec;
		END;
	FUNCTION pAUnsignedTformat1086_AUT1086:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint16Unsigned1087_AU16U1087;
		 pAUnsignedTformat1086_AUT1086:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1085_ATP1085:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pATformatPredeclaredtype1085_ATP1085:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1084_APT1084:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pAPredeclaredtypeType1084_APT1084:=myrec;
		END;
	FUNCTION pAHalfwordFormat1090_AHF1090:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fhalfword;
		 pAHalfwordFormat1090_AHF1090:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype1089_AFP1089:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fhalfword ;
		 pAFormatPredeclaredtype1089_AFP1089:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1088_APT1088:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fhalfword ;
		 pAPredeclaredtypeType1088_APT1088:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1079_AAP1079:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 157;
		myrec^.last:= 159;
		 pAAlternativesPatterndecl1079_AAP1079:=myrec;
		END;
	FUNCTION pATypeid1095_AT1095:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ byte  ilcg.pattern@1537060}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1095_AT1095:=myrec;
		END;
	FUNCTION pATypeidType1094_ATT1094:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1095_AT1095;
		 pATypeidType1094_ATT1094:=myrec;
		END;
	FUNCTION pATypeid1097_AT1097:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ word16  ilcg.pattern@10a4d7c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1097_AT1097:=myrec;
		END;
	FUNCTION pATypeidType1096_ATT1096:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1097_AT1097;
		 pATypeidType1096_ATT1096:=myrec;
		END;
	FUNCTION pATypeid1099_AT1099:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ word32  ilcg.pattern@226649}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1099_AT1099:=myrec;
		END;
	FUNCTION pATypeidType1098_ATT1098:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1099_AT1099;
		 pATypeidType1098_ATT1098:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1093_AAP1093:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 160;
		myrec^.last:= 162;
		 pAAlternativesPatterndecl1093_AAP1093:=myrec;
		END;
	FUNCTION pAOctetFormat1105_AOF1105:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat1105_AOF1105:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype1104_AFP1104:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype1104_AFP1104:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1103_APT1103:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAPredeclaredtypeType1103_APT1103:=myrec;
		END;
	FUNCTION pAWordFormat1108_AWF1108:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword;
		 pAWordFormat1108_AWF1108:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype1107_AFP1107:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAFormatPredeclaredtype1107_AFP1107:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1106_APT1106:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAPredeclaredtypeType1106_APT1106:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1102_AAP1102:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 163;
		myrec^.last:= 164;
		 pAAlternativesPatterndecl1102_AAP1102:=myrec;
		END;
	FUNCTION pASigned1115_AS1115:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned1115_AS1115:=myrec;
		END;
	FUNCTION pASignedTformat1114_AST1114:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned1115_AS1115;
		 pASignedTformat1114_AST1114:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1113_ATP1113:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype1113_ATP1113:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1112_APT1112:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType1112_APT1112:=myrec;
		END;
	FUNCTION pAUnsigned1119_AU1119:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32;
		 pAUnsigned1119_AU1119:=myrec;
		END;
	FUNCTION pAUnsignedTformat1118_AUT1118:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUnsigned1119_AU1119;
		 pAUnsignedTformat1118_AUT1118:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1117_ATP1117:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pATformatPredeclaredtype1117_ATP1117:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1116_APT1116:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pAPredeclaredtypeType1116_APT1116:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1111_AAP1111:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 165;
		myrec^.last:= 166;
		 pAAlternativesPatterndecl1111_AAP1111:=myrec;
		END;
	FUNCTION pASigned1126_AS1126:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned1126_AS1126:=myrec;
		END;
	FUNCTION pASignedTformat1125_AST1125:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned1126_AS1126;
		 pASignedTformat1125_AST1125:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1124_ATP1124:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype1124_ATP1124:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1123_APT1123:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType1123_APT1123:=myrec;
		END;
	FUNCTION pAInt64Signed1130_AI64S1130:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64;
		 pAInt64Signed1130_AI64S1130:=myrec;
		END;
	FUNCTION pASignedTformat1129_AST1129:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt64Signed1130_AI64S1130;
		 pASignedTformat1129_AST1129:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1128_ATP1128:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64 ;
		 pATformatPredeclaredtype1128_ATP1128:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1127_APT1127:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64 ;
		 pAPredeclaredtypeType1127_APT1127:=myrec;
		END;
	FUNCTION pAInt16Signed1134_AI16S1134:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed1134_AI16S1134:=myrec;
		END;
	FUNCTION pASignedTformat1133_AST1133:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed1134_AI16S1134;
		 pASignedTformat1133_AST1133:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1132_ATP1132:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype1132_ATP1132:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1131_APT1131:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pAPredeclaredtypeType1131_APT1131:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1122_AAP1122:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 167;
		myrec^.last:= 169;
		 pAAlternativesPatterndecl1122_AAP1122:=myrec;
		END;
	FUNCTION pAOptionalsign1143_AO1143:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign1143_AO1143:=nil;
		 pAOptionalsign1143_AO1143:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber1142_AIN1142:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber1142_AIN1142:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs1141_ANR1141:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber1142_AIN1142;
		 pANumberRhs1141_ANR1141:=myrec;
		END;
	FUNCTION pARhsValue1140_ARV1140:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs1141_ANR1141;
		 pARhsValue1140_ARV1140:=myrec;
		END;
	FUNCTION pAValueMeaning1139_AVM1139:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue1140_ARV1140;
		 pAValueMeaning1139_AVM1139:=myrec;
		END;
	FUNCTION pAAssemblypattern1145_AA1145:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'2' );
		pAAssemblypattern1145_AA1145:=list;
		END;
	FUNCTION pAAssemblesto1144_AA1144:pprintlist;
	begin
		pAAssemblesto1144_AA1144:=pAAssemblypattern1145_AA1145;
		END;
	FUNCTION pASideeffects1147_AS1147:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1147_AS1147:=nil;
		 pASideeffects1147_AS1147:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1148_AUP1148:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1148_AUP1148:=nil;
		 pAUnconditionalPrecond1148_AUP1148:=myrec;
		END;
	FUNCTION two_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning1139_AVM1139;
		matchedAssembler:=pAAssemblesto1144_AA1144;
		END;
		two_:=myrec;
	END;
	FUNCTION pAOptionalsign1157_AO1157:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign1157_AO1157:=nil;
		 pAOptionalsign1157_AO1157:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber1156_AIN1156:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber1156_AIN1156:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs1155_ANR1155:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber1156_AIN1156;
		 pANumberRhs1155_ANR1155:=myrec;
		END;
	FUNCTION pARhsValue1154_ARV1154:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs1155_ANR1155;
		 pARhsValue1154_ARV1154:=myrec;
		END;
	FUNCTION pAValueMeaning1153_AVM1153:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue1154_ARV1154;
		 pAValueMeaning1153_AVM1153:=myrec;
		END;
	FUNCTION pAAssemblypattern1159_AA1159:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'4' );
		pAAssemblypattern1159_AA1159:=list;
		END;
	FUNCTION pAAssemblesto1158_AA1158:pprintlist;
	begin
		pAAssemblesto1158_AA1158:=pAAssemblypattern1159_AA1159;
		END;
	FUNCTION pASideeffects1161_AS1161:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1161_AS1161:=nil;
		 pASideeffects1161_AS1161:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1162_AUP1162:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1162_AUP1162:=nil;
		 pAUnconditionalPrecond1162_AUP1162:=myrec;
		END;
	FUNCTION four_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning1153_AVM1153;
		matchedAssembler:=pAAssemblesto1158_AA1158;
		END;
		four_:=myrec;
	END;
	FUNCTION pAOptionalsign1171_AO1171:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign1171_AO1171:=nil;
		 pAOptionalsign1171_AO1171:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber1170_AIN1170:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber1170_AIN1170:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs1169_ANR1169:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber1170_AIN1170;
		 pANumberRhs1169_ANR1169:=myrec;
		END;
	FUNCTION pARhsValue1168_ARV1168:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs1169_ANR1169;
		 pARhsValue1168_ARV1168:=myrec;
		END;
	FUNCTION pAValueMeaning1167_AVM1167:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue1168_ARV1168;
		 pAValueMeaning1167_AVM1167:=myrec;
		END;
	FUNCTION pAAssemblypattern1173_AA1173:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'8' );
		pAAssemblypattern1173_AA1173:=list;
		END;
	FUNCTION pAAssemblesto1172_AA1172:pprintlist;
	begin
		pAAssemblesto1172_AA1172:=pAAssemblypattern1173_AA1173;
		END;
	FUNCTION pASideeffects1175_AS1175:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1175_AS1175:=nil;
		 pASideeffects1175_AS1175:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1176_AUP1176:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1176_AUP1176:=nil;
		 pAUnconditionalPrecond1176_AUP1176:=myrec;
		END;
	FUNCTION eight_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning1167_AVM1167;
		matchedAssembler:=pAAssemblesto1172_AA1172;
		END;
		eight_:=myrec;
	END;
	FUNCTION pAInt64Signed1183_AI64S1183:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64;
		 pAInt64Signed1183_AI64S1183:=myrec;
		END;
	FUNCTION pASignedTformat1182_AST1182:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt64Signed1183_AI64S1183;
		 pASignedTformat1182_AST1182:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1181_ATP1181:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64 ;
		 pATformatPredeclaredtype1181_ATP1181:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1180_APT1180:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64 ;
		 pAPredeclaredtypeType1180_APT1180:=myrec;
		END;
	FUNCTION pAUint64Unsigned1187_AU64U1187:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint64;
		 pAUint64Unsigned1187_AU64U1187:=myrec;
		END;
	FUNCTION pAUnsignedTformat1186_AUT1186:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint64Unsigned1187_AU64U1187;
		 pAUnsignedTformat1186_AUT1186:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1185_ATP1185:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint64 ;
		 pATformatPredeclaredtype1185_ATP1185:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1184_APT1184:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint64 ;
		 pAPredeclaredtypeType1184_APT1184:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1179_AAP1179:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 170;
		myrec^.last:= 171;
		 pAAlternativesPatterndecl1179_AAP1179:=myrec;
		END;
	FUNCTION pATypeid1192_AT1192:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ two  ilcg.pattern@1c39412}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1192_AT1192:=myrec;
		END;
	FUNCTION pATypeidType1191_ATT1191:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1192_AT1192;
		 pATypeidType1191_ATT1191:=myrec;
		END;
	FUNCTION pATypeid1194_AT1194:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ four  ilcg.pattern@15c44d6}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1194_AT1194:=myrec;
		END;
	FUNCTION pATypeidType1193_ATT1193:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1194_AT1194;
		 pATypeidType1193_ATT1193:=myrec;
		END;
	FUNCTION pATypeid1196_AT1196:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ eight  ilcg.pattern@105a248}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1196_AT1196:=myrec;
		END;
	FUNCTION pATypeidType1195_ATT1195:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1196_AT1196;
		 pATypeidType1195_ATT1195:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1190_AAP1190:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 172;
		myrec^.last:= 174;
		 pAAlternativesPatterndecl1190_AAP1190:=myrec;
		END;
		(*! Match l *)
	FUNCTION pAIdLoc1203_AIL1203:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1203_AIL1203:=myrec;
		END;
		(*l *)
	FUNCTION pALocValue1202_ALV1202:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1203_AIL1203;
		 pALocValue1202_ALV1202:=myrec;
		END;
	FUNCTION pAValueMeaning1201_AVM1201:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pALocValue1202_ALV1202;
		 pAValueMeaning1201_AVM1201:=myrec;
		END;
	FUNCTION pAAssemblypattern1205_AA1205:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pAAssemblypattern1205_AA1205:=list;
		END;
	FUNCTION pAAssemblesto1204_AA1204:pprintlist;
	begin
		pAAssemblesto1204_AA1204:=pAAssemblypattern1205_AA1205;
		END;
	FUNCTION pASideeffects1207_AS1207:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1207_AS1207:=nil;
		 pASideeffects1207_AS1207:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1208_AUP1208:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1208_AUP1208:=nil;
		 pAUnconditionalPrecond1208_AUP1208:=myrec;
		END;
	FUNCTION labelf_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patlabel;
		paramcount:=2;
		meaning:=pAValueMeaning1201_AVM1201;
		matchedAssembler:=pAAssemblesto1204_AA1204;
		END;
		labelf_:=myrec;
	END;
	FUNCTION pATypeid1212_AT1212:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ signed  ilcg.pattern@15e0163}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1212_AT1212:=myrec;
		END;
	FUNCTION pAConstRhs1215_ACR1215:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(0);;
		 pAConstRhs1215_ACR1215:=myrec;
		END;
	FUNCTION pARhsValue1214_ARV1214:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs1215_ACR1215;
		 pARhsValue1214_ARV1214:=myrec;
		END;
	FUNCTION pAValueMeaning1213_AVM1213:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue1214_ARV1214;
		 pAValueMeaning1213_AVM1213:=myrec;
		END;
	FUNCTION pAAssemblypattern1217_AA1217:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pAAssemblypattern1217_AA1217:=list;
		END;
	FUNCTION pAAssemblesto1216_AA1216:pprintlist;
	begin
		pAAssemblesto1216_AA1216:=pAAssemblypattern1217_AA1217;
		END;
	FUNCTION pASideeffects1219_AS1219:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1219_AS1219:=nil;
		 pASideeffects1219_AS1219:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1220_AUP1220:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1220_AUP1220:=nil;
		 pAUnconditionalPrecond1220_AUP1220:=myrec;
		END;
	FUNCTION sconst_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patsigned_;
		paramcount:=2;
		meaning:=pAValueMeaning1213_AVM1213;
		matchedAssembler:=pAAssemblesto1216_AA1216;
		END;
		sconst_:=myrec;
	END;
	FUNCTION pATypeid1225_AT1225:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ sconst  ilcg.pattern@19576c3}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1225_AT1225:=myrec;
		END;
	FUNCTION pATypeidType1224_ATT1224:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1225_AT1225;
		 pATypeidType1224_ATT1224:=myrec;
		END;
	FUNCTION pATypeid1227_AT1227:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ labelf  ilcg.pattern@130c132}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1227_AT1227:=myrec;
		END;
	FUNCTION pATypeidType1226_ATT1226:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1227_AT1227;
		 pATypeidType1226_ATT1226:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1223_AAP1223:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 175;
		myrec^.last:= 176;
		 pAAlternativesPatterndecl1223_AAP1223:=myrec;
		END;
	FUNCTION pATypeid1231_AT1231:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ lconstf  ilcg.pattern@8ebb5a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1231_AT1231:=myrec;
		END;
	FUNCTION pATypeid1233_AT1233:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ lconstf  ilcg.pattern@8ebb5a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1233_AT1233:=myrec;
		END;
	FUNCTION pAPlusDyadic1236_APD1236:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic1236_APD1236:=myrec;
		END;
		(*! Match l *)
	FUNCTION pAIdLoc1238_AIL1238:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1238_AIL1238:=myrec;
		END;
		(*l *)
	FUNCTION pALocValue1237_ALV1237:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1238_AIL1238;
		 pALocValue1237_ALV1237:=myrec;
		END;
		(*! Match s *)
	FUNCTION pAIdLoc1240_AIL1240:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc1240_AIL1240:=myrec;
		END;
		(*s *)
	FUNCTION pALocValue1239_ALV1239:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1240_AIL1240;
		 pALocValue1239_ALV1239:=myrec;
		END;
	FUNCTION pADyadicValue1235_ADV1235:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue1237_ALV1237;
		myrec^.arg2:=pALocValue1239_ALV1239;
		myrec^.fn:=pAPlusDyadic1236_APD1236;
		 pADyadicValue1235_ADV1235:=myrec;
		END;
	FUNCTION pAValueMeaning1234_AVM1234:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue1235_ADV1235;
		 pAValueMeaning1234_AVM1234:=myrec;
		END;
	FUNCTION pAAssemblypattern1242_AA1242:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'+' );
		pappendp(list,1);
		pAAssemblypattern1242_AA1242:=list;
		END;
	FUNCTION pAAssemblesto1241_AA1241:pprintlist;
	begin
		pAAssemblesto1241_AA1241:=pAAssemblypattern1242_AA1242;
		END;
	FUNCTION pASideeffects1246_AS1246:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1246_AS1246:=nil;
		 pASideeffects1246_AS1246:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1247_AUP1247:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1247_AUP1247:=nil;
		 pAUnconditionalPrecond1247_AUP1247:=myrec;
		END;
	FUNCTION labelconstf_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patlconstf_;
		params^[1]:=patlconstf_;
		paramcount:=3;
		meaning:=pAValueMeaning1234_AVM1234;
		matchedAssembler:=pAAssemblesto1241_AA1241;
		END;
		labelconstf_:=myrec;
	END;
	FUNCTION pATypeid1251_AT1251:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ signed  ilcg.pattern@15e0163}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1251_AT1251:=myrec;
		END;
	FUNCTION pAConstRhs1254_ACR1254:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(0);;
		 pAConstRhs1254_ACR1254:=myrec;
		END;
	FUNCTION pARhsValue1253_ARV1253:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs1254_ACR1254;
		 pARhsValue1253_ARV1253:=myrec;
		END;
	FUNCTION pAValueMeaning1252_AVM1252:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue1253_ARV1253;
		 pAValueMeaning1252_AVM1252:=myrec;
		END;
	FUNCTION pAAssemblypattern1256_AA1256:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pAAssemblypattern1256_AA1256:=list;
		END;
	FUNCTION pAAssemblesto1255_AA1255:pprintlist;
	begin
		pAAssemblesto1255_AA1255:=pAAssemblypattern1256_AA1256;
		END;
	FUNCTION pASideeffects1258_AS1258:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1258_AS1258:=nil;
		 pASideeffects1258_AS1258:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1259_AUP1259:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1259_AUP1259:=nil;
		 pAUnconditionalPrecond1259_AUP1259:=myrec;
		END;
	FUNCTION constf_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patsigned_;
		paramcount:=2;
		meaning:=pAValueMeaning1252_AVM1252;
		matchedAssembler:=pAAssemblesto1255_AA1255;
		END;
		constf_:=myrec;
	END;
	FUNCTION pATypeid1264_AT1264:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ constf  ilcg.pattern@11daf60}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1264_AT1264:=myrec;
		END;
	FUNCTION pATypeidType1263_ATT1263:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1264_AT1264;
		 pATypeidType1263_ATT1263:=myrec;
		END;
	FUNCTION pATypeid1266_AT1266:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ labelf  ilcg.pattern@130c132}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1266_AT1266:=myrec;
		END;
	FUNCTION pATypeidType1265_ATT1265:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1266_AT1266;
		 pATypeidType1265_ATT1265:=myrec;
		END;
	FUNCTION pATypeid1268_AT1268:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ labelconstf  ilcg.pattern@2ddc4c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1268_AT1268:=myrec;
		END;
	FUNCTION pATypeidType1267_ATT1267:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1268_AT1268;
		 pATypeidType1267_ATT1267:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1262_AAP1262:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 177;
		myrec^.last:= 179;
		 pAAlternativesPatterndecl1262_AAP1262:=myrec;
		END;
	FUNCTION pATypeid1272_AT1272:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1272_AT1272:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc1277_AIL1277:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1277_AIL1277:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1276_AR1276:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1277_AIL1277;
		 pARefval1276_AR1276:=myrec;
		END;
	FUNCTION pADerefRhs1275_ADR1275:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1276_AR1276;
		 pADerefRhs1275_ADR1275:=myrec;
		END;
	FUNCTION pARhsValue1274_ARV1274:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1275_ADR1275;
		 pARhsValue1274_ARV1274:=myrec;
		END;
	FUNCTION pAValueMeaning1273_AVM1273:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue1274_ARV1274;
		 pAValueMeaning1273_AVM1273:=myrec;
		END;
	FUNCTION pAAssemblypattern1279_AA1279:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pAAssemblypattern1279_AA1279:=list;
		END;
	FUNCTION pAAssemblesto1278_AA1278:pprintlist;
	begin
		pAAssemblesto1278_AA1278:=pAAssemblypattern1279_AA1279;
		END;
	FUNCTION pASideeffects1281_AS1281:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1281_AS1281:=nil;
		 pASideeffects1281_AS1281:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1282_AUP1282:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1282_AUP1282:=nil;
		 pAUnconditionalPrecond1282_AUP1282:=myrec;
		END;
	FUNCTION regindirf_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		paramcount:=2;
		meaning:=pAValueMeaning1273_AVM1273;
		matchedAssembler:=pAAssemblesto1278_AA1278;
		END;
		regindirf_:=myrec;
	END;
	FUNCTION pATypeid1286_AT1286:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1286_AT1286:=myrec;
		END;
	FUNCTION pATypeid1288_AT1288:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ scale  ilcg.pattern@113e371}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1288_AT1288:=myrec;
		END;
	FUNCTION pATimesDyadic1291_ATD1291:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcptimes;
		 pATimesDyadic1291_ATD1291:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc1295_AIL1295:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1295_AIL1295:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1294_AR1294:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1295_AIL1295;
		 pARefval1294_AR1294:=myrec;
		END;
	FUNCTION pADerefRhs1293_ADR1293:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1294_AR1294;
		 pADerefRhs1293_ADR1293:=myrec;
		END;
	FUNCTION pARhsValue1292_ARV1292:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1293_ADR1293;
		 pARhsValue1292_ARV1292:=myrec;
		END;
		(*! Match s *)
	FUNCTION pAIdLoc1297_AIL1297:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc1297_AIL1297:=myrec;
		END;
		(*s *)
	FUNCTION pALocValue1296_ALV1296:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1297_AIL1297;
		 pALocValue1296_ALV1296:=myrec;
		END;
	FUNCTION pADyadicValue1290_ADV1290:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue1292_ARV1292;
		myrec^.arg2:=pALocValue1296_ALV1296;
		myrec^.fn:=pATimesDyadic1291_ATD1291;
		 pADyadicValue1290_ADV1290:=myrec;
		END;
	FUNCTION pAValueMeaning1289_AVM1289:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue1290_ADV1290;
		 pAValueMeaning1289_AVM1289:=myrec;
		END;
	FUNCTION pAAssemblypattern1299_AA1299:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'*' );
		pappendp(list,1);
		pAAssemblypattern1299_AA1299:=list;
		END;
	FUNCTION pAAssemblesto1298_AA1298:pprintlist;
	begin
		pAAssemblesto1298_AA1298:=pAAssemblypattern1299_AA1299;
		END;
	FUNCTION pASideeffects1303_AS1303:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1303_AS1303:=nil;
		 pASideeffects1303_AS1303:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1304_AUP1304:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1304_AUP1304:=nil;
		 pAUnconditionalPrecond1304_AUP1304:=myrec;
		END;
	FUNCTION simplescaled_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		params^[1]:=patscale_;
		paramcount:=3;
		meaning:=pAValueMeaning1289_AVM1289;
		matchedAssembler:=pAAssemblesto1298_AA1298;
		END;
		simplescaled_:=myrec;
	END;
	FUNCTION pATypeid1308_AT1308:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1308_AT1308:=myrec;
		END;
	FUNCTION pATypeid1310_AT1310:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ scale  ilcg.pattern@113e371}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1310_AT1310:=myrec;
		END;
	FUNCTION pATypeid1312_AT1312:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ offset  ilcg.pattern@b0c5a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1312_AT1312:=myrec;
		END;
	FUNCTION pATimesDyadic1315_ATD1315:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcptimes;
		 pATimesDyadic1315_ATD1315:=myrec;
		END;
	FUNCTION pAMinusDyadic1317_AMD1317:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpminus;
		 pAMinusDyadic1317_AMD1317:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc1321_AIL1321:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1321_AIL1321:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1320_AR1320:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1321_AIL1321;
		 pARefval1320_AR1320:=myrec;
		END;
	FUNCTION pADerefRhs1319_ADR1319:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1320_AR1320;
		 pADerefRhs1319_ADR1319:=myrec;
		END;
	FUNCTION pARhsValue1318_ARV1318:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1319_ADR1319;
		 pARhsValue1318_ARV1318:=myrec;
		END;
		(*! Match o *)
	FUNCTION pAIdLoc1323_AIL1323:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc1323_AIL1323:=myrec;
		END;
		(*o *)
	FUNCTION pALocValue1322_ALV1322:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1323_AIL1323;
		 pALocValue1322_ALV1322:=myrec;
		END;
	FUNCTION pADyadicValue1316_ADV1316:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue1318_ARV1318;
		myrec^.arg2:=pALocValue1322_ALV1322;
		myrec^.fn:=pAMinusDyadic1317_AMD1317;
		 pADyadicValue1316_ADV1316:=myrec;
		END;
		(*! Match s *)
	FUNCTION pAIdLoc1325_AIL1325:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc1325_AIL1325:=myrec;
		END;
		(*s *)
	FUNCTION pALocValue1324_ALV1324:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1325_AIL1325;
		 pALocValue1324_ALV1324:=myrec;
		END;
	FUNCTION pADyadicValue1314_ADV1314:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pADyadicValue1316_ADV1316;
		myrec^.arg2:=pALocValue1324_ALV1324;
		myrec^.fn:=pATimesDyadic1315_ATD1315;
		 pADyadicValue1314_ADV1314:=myrec;
		END;
	FUNCTION pAValueMeaning1313_AVM1313:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue1314_ADV1314;
		 pAValueMeaning1313_AVM1313:=myrec;
		END;
	FUNCTION pAAssemblypattern1327_AA1327:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'*' );
		pappendp(list,1);
		pappends(list,'-(' );
		pappendp(list,1);
		pappends(list,'*' );
		pappendp(list,2);
		pappends(list,')' );
		pAAssemblypattern1327_AA1327:=list;
		END;
	FUNCTION pAAssemblesto1326_AA1326:pprintlist;
	begin
		pAAssemblesto1326_AA1326:=pAAssemblypattern1327_AA1327;
		END;
	FUNCTION pASideeffects1336_AS1336:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1336_AS1336:=nil;
		 pASideeffects1336_AS1336:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1337_AUP1337:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1337_AUP1337:=nil;
		 pAUnconditionalPrecond1337_AUP1337:=myrec;
		END;
	FUNCTION negcompscaled_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		params^[1]:=patscale_;
		params^[2]:=patoffset_;
		paramcount:=4;
		meaning:=pAValueMeaning1313_AVM1313;
		matchedAssembler:=pAAssemblesto1326_AA1326;
		END;
		negcompscaled_:=myrec;
	END;
	FUNCTION pATypeid1341_AT1341:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1341_AT1341:=myrec;
		END;
	FUNCTION pATypeid1343_AT1343:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ scale  ilcg.pattern@113e371}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1343_AT1343:=myrec;
		END;
	FUNCTION pATypeid1345_AT1345:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ offset  ilcg.pattern@b0c5a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1345_AT1345:=myrec;
		END;
	FUNCTION pATimesDyadic1348_ATD1348:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcptimes;
		 pATimesDyadic1348_ATD1348:=myrec;
		END;
	FUNCTION pAPlusDyadic1350_APD1350:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic1350_APD1350:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc1354_AIL1354:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1354_AIL1354:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1353_AR1353:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1354_AIL1354;
		 pARefval1353_AR1353:=myrec;
		END;
	FUNCTION pADerefRhs1352_ADR1352:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1353_AR1353;
		 pADerefRhs1352_ADR1352:=myrec;
		END;
	FUNCTION pARhsValue1351_ARV1351:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1352_ADR1352;
		 pARhsValue1351_ARV1351:=myrec;
		END;
		(*! Match o *)
	FUNCTION pAIdLoc1356_AIL1356:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc1356_AIL1356:=myrec;
		END;
		(*o *)
	FUNCTION pALocValue1355_ALV1355:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1356_AIL1356;
		 pALocValue1355_ALV1355:=myrec;
		END;
	FUNCTION pADyadicValue1349_ADV1349:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue1351_ARV1351;
		myrec^.arg2:=pALocValue1355_ALV1355;
		myrec^.fn:=pAPlusDyadic1350_APD1350;
		 pADyadicValue1349_ADV1349:=myrec;
		END;
		(*! Match s *)
	FUNCTION pAIdLoc1358_AIL1358:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc1358_AIL1358:=myrec;
		END;
		(*s *)
	FUNCTION pALocValue1357_ALV1357:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1358_AIL1358;
		 pALocValue1357_ALV1357:=myrec;
		END;
	FUNCTION pADyadicValue1347_ADV1347:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pADyadicValue1349_ADV1349;
		myrec^.arg2:=pALocValue1357_ALV1357;
		myrec^.fn:=pATimesDyadic1348_ATD1348;
		 pADyadicValue1347_ADV1347:=myrec;
		END;
	FUNCTION pAValueMeaning1346_AVM1346:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue1347_ADV1347;
		 pAValueMeaning1346_AVM1346:=myrec;
		END;
	FUNCTION pAAssemblypattern1360_AA1360:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'*' );
		pappendp(list,1);
		pappends(list,'+(' );
		pappendp(list,1);
		pappends(list,'*' );
		pappendp(list,2);
		pappends(list,')' );
		pAAssemblypattern1360_AA1360:=list;
		END;
	FUNCTION pAAssemblesto1359_AA1359:pprintlist;
	begin
		pAAssemblesto1359_AA1359:=pAAssemblypattern1360_AA1360;
		END;
	FUNCTION pASideeffects1369_AS1369:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1369_AS1369:=nil;
		 pASideeffects1369_AS1369:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1370_AUP1370:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1370_AUP1370:=nil;
		 pAUnconditionalPrecond1370_AUP1370:=myrec;
		END;
	FUNCTION compscaled_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		params^[1]:=patscale_;
		params^[2]:=patoffset_;
		paramcount:=4;
		meaning:=pAValueMeaning1346_AVM1346;
		matchedAssembler:=pAAssemblesto1359_AA1359;
		END;
		compscaled_:=myrec;
	END;
	FUNCTION pATypeid1375_AT1375:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ compscaled  ilcg.pattern@73a35c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1375_AT1375:=myrec;
		END;
	FUNCTION pATypeidType1374_ATT1374:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1375_AT1375;
		 pATypeidType1374_ATT1374:=myrec;
		END;
	FUNCTION pATypeid1377_AT1377:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ negcompscaled  ilcg.pattern@81fb}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1377_AT1377:=myrec;
		END;
	FUNCTION pATypeidType1376_ATT1376:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1377_AT1377;
		 pATypeidType1376_ATT1376:=myrec;
		END;
	FUNCTION pATypeid1379_AT1379:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ simplescaled  ilcg.pattern@1cb2dd1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1379_AT1379:=myrec;
		END;
	FUNCTION pATypeidType1378_ATT1378:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1379_AT1379;
		 pATypeidType1378_ATT1378:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1373_AAP1373:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 180;
		myrec^.last:= 182;
		 pAAlternativesPatterndecl1373_AAP1373:=myrec;
		END;
	FUNCTION pATypeid1383_AT1383:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1383_AT1383:=myrec;
		END;
	FUNCTION pATypeid1385_AT1385:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ offset  ilcg.pattern@b0c5a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1385_AT1385:=myrec;
		END;
	FUNCTION pAMinusDyadic1388_AMD1388:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpminus;
		 pAMinusDyadic1388_AMD1388:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc1392_AIL1392:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1392_AIL1392:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1391_AR1391:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1392_AIL1392;
		 pARefval1391_AR1391:=myrec;
		END;
	FUNCTION pADerefRhs1390_ADR1390:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1391_AR1391;
		 pADerefRhs1390_ADR1390:=myrec;
		END;
	FUNCTION pARhsValue1389_ARV1389:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1390_ADR1390;
		 pARhsValue1389_ARV1389:=myrec;
		END;
		(*! Match s *)
	FUNCTION pAIdLoc1394_AIL1394:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc1394_AIL1394:=myrec;
		END;
		(*s *)
	FUNCTION pALocValue1393_ALV1393:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1394_AIL1394;
		 pALocValue1393_ALV1393:=myrec;
		END;
	FUNCTION pADyadicValue1387_ADV1387:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue1389_ARV1389;
		myrec^.arg2:=pALocValue1393_ALV1393;
		myrec^.fn:=pAMinusDyadic1388_AMD1388;
		 pADyadicValue1387_ADV1387:=myrec;
		END;
	FUNCTION pAValueMeaning1386_AVM1386:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue1387_ADV1387;
		 pAValueMeaning1386_AVM1386:=myrec;
		END;
	FUNCTION pAAssemblypattern1396_AA1396:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'-(' );
		pappendp(list,1);
		pappends(list,')' );
		pAAssemblypattern1396_AA1396:=list;
		END;
	FUNCTION pAAssemblesto1395_AA1395:pprintlist;
	begin
		pAAssemblesto1395_AA1395:=pAAssemblypattern1396_AA1396;
		END;
	FUNCTION pASideeffects1401_AS1401:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1401_AS1401:=nil;
		 pASideeffects1401_AS1401:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1402_AUP1402:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1402_AUP1402:=nil;
		 pAUnconditionalPrecond1402_AUP1402:=myrec;
		END;
	FUNCTION baseminusoffsetf_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patoffset_;
		params^[0]:=patreg_;
		paramcount:=3;
		meaning:=pAValueMeaning1386_AVM1386;
		matchedAssembler:=pAAssemblesto1395_AA1395;
		END;
		baseminusoffsetf_:=myrec;
	END;
	FUNCTION pATypeid1406_AT1406:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1406_AT1406:=myrec;
		END;
	FUNCTION pATypeid1408_AT1408:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ offset  ilcg.pattern@b0c5a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1408_AT1408:=myrec;
		END;
	FUNCTION pAPlusDyadic1411_APD1411:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic1411_APD1411:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc1415_AIL1415:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1415_AIL1415:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1414_AR1414:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1415_AIL1415;
		 pARefval1414_AR1414:=myrec;
		END;
	FUNCTION pADerefRhs1413_ADR1413:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1414_AR1414;
		 pADerefRhs1413_ADR1413:=myrec;
		END;
	FUNCTION pARhsValue1412_ARV1412:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1413_ADR1413;
		 pARhsValue1412_ARV1412:=myrec;
		END;
		(*! Match s *)
	FUNCTION pAIdLoc1417_AIL1417:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc1417_AIL1417:=myrec;
		END;
		(*s *)
	FUNCTION pALocValue1416_ALV1416:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1417_AIL1417;
		 pALocValue1416_ALV1416:=myrec;
		END;
	FUNCTION pADyadicValue1410_ADV1410:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue1412_ARV1412;
		myrec^.arg2:=pALocValue1416_ALV1416;
		myrec^.fn:=pAPlusDyadic1411_APD1411;
		 pADyadicValue1410_ADV1410:=myrec;
		END;
	FUNCTION pAValueMeaning1409_AVM1409:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue1410_ADV1410;
		 pAValueMeaning1409_AVM1409:=myrec;
		END;
	FUNCTION pAAssemblypattern1419_AA1419:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'+' );
		pappendp(list,1);
		pAAssemblypattern1419_AA1419:=list;
		END;
	FUNCTION pAAssemblesto1418_AA1418:pprintlist;
	begin
		pAAssemblesto1418_AA1418:=pAAssemblypattern1419_AA1419;
		END;
	FUNCTION pASideeffects1423_AS1423:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1423_AS1423:=nil;
		 pASideeffects1423_AS1423:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1424_AUP1424:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1424_AUP1424:=nil;
		 pAUnconditionalPrecond1424_AUP1424:=myrec;
		END;
	FUNCTION baseplusoffsetf_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patoffset_;
		params^[0]:=patreg_;
		paramcount:=3;
		meaning:=pAValueMeaning1409_AVM1409;
		matchedAssembler:=pAAssemblesto1418_AA1418;
		END;
		baseplusoffsetf_:=myrec;
	END;
	FUNCTION pATypeid1428_AT1428:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ scaled  ilcg.pattern@8c2d23}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1428_AT1428:=myrec;
		END;
	FUNCTION pATypeid1430_AT1430:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ offset  ilcg.pattern@b0c5a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1430_AT1430:=myrec;
		END;
	FUNCTION pAPlusDyadic1433_APD1433:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic1433_APD1433:=myrec;
		END;
		(*! Match s *)
	FUNCTION pAIdLoc1435_AIL1435:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1435_AIL1435:=myrec;
		END;
		(*s *)
	FUNCTION pALocValue1434_ALV1434:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1435_AIL1435;
		 pALocValue1434_ALV1434:=myrec;
		END;
		(*! Match offs *)
	FUNCTION pAIdLoc1437_AIL1437:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc1437_AIL1437:=myrec;
		END;
		(*offs *)
	FUNCTION pALocValue1436_ALV1436:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1437_AIL1437;
		 pALocValue1436_ALV1436:=myrec;
		END;
	FUNCTION pADyadicValue1432_ADV1432:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue1434_ALV1434;
		myrec^.arg2:=pALocValue1436_ALV1436;
		myrec^.fn:=pAPlusDyadic1433_APD1433;
		 pADyadicValue1432_ADV1432:=myrec;
		END;
	FUNCTION pAValueMeaning1431_AVM1431:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue1432_ADV1432;
		 pAValueMeaning1431_AVM1431:=myrec;
		END;
	FUNCTION pAAssemblypattern1439_AA1439:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'+' );
		pappendp(list,1);
		pAAssemblypattern1439_AA1439:=list;
		END;
	FUNCTION pAAssemblesto1438_AA1438:pprintlist;
	begin
		pAAssemblesto1438_AA1438:=pAAssemblypattern1439_AA1439;
		END;
	FUNCTION pASideeffects1443_AS1443:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1443_AS1443:=nil;
		 pASideeffects1443_AS1443:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1444_AUP1444:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1444_AUP1444:=nil;
		 pAUnconditionalPrecond1444_AUP1444:=myrec;
		END;
	FUNCTION scaledIndexPlusOffsetf_IPO:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patscaled_;
		params^[1]:=patoffset_;
		paramcount:=3;
		meaning:=pAValueMeaning1431_AVM1431;
		matchedAssembler:=pAAssemblesto1438_AA1438;
		END;
		scaledIndexPlusOffsetf_IPO:=myrec;
	END;
	FUNCTION pATypeid1447_AT1447:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1447_AT1447:=myrec;
		END;
	FUNCTION pATypeid1449_AT1449:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ scaled  ilcg.pattern@8c2d23}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1449_AT1449:=myrec;
		END;
	FUNCTION pAPlusDyadic1452_APD1452:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic1452_APD1452:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc1456_AIL1456:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1456_AIL1456:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1455_AR1455:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1456_AIL1456;
		 pARefval1455_AR1455:=myrec;
		END;
	FUNCTION pADerefRhs1454_ADR1454:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1455_AR1455;
		 pADerefRhs1454_ADR1454:=myrec;
		END;
	FUNCTION pARhsValue1453_ARV1453:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1454_ADR1454;
		 pARhsValue1453_ARV1453:=myrec;
		END;
		(*! Match s *)
	FUNCTION pAIdLoc1458_AIL1458:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc1458_AIL1458:=myrec;
		END;
		(*s *)
	FUNCTION pALocValue1457_ALV1457:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1458_AIL1458;
		 pALocValue1457_ALV1457:=myrec;
		END;
	FUNCTION pADyadicValue1451_ADV1451:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue1453_ARV1453;
		myrec^.arg2:=pALocValue1457_ALV1457;
		myrec^.fn:=pAPlusDyadic1452_APD1452;
		 pADyadicValue1451_ADV1451:=myrec;
		END;
	FUNCTION pAValueMeaning1450_AVM1450:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue1451_ADV1451;
		 pAValueMeaning1450_AVM1450:=myrec;
		END;
	FUNCTION pAAssemblypattern1460_AA1460:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'+' );
		pappendp(list,1);
		pAAssemblypattern1460_AA1460:=list;
		END;
	FUNCTION pAAssemblesto1459_AA1459:pprintlist;
	begin
		pAAssemblesto1459_AA1459:=pAAssemblypattern1460_AA1460;
		END;
	FUNCTION pASideeffects1464_AS1464:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1464_AS1464:=nil;
		 pASideeffects1464_AS1464:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1465_AUP1465:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1465_AUP1465:=nil;
		 pAUnconditionalPrecond1465_AUP1465:=myrec;
		END;
	FUNCTION basePlusScaledIndexf_PSI:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		params^[1]:=patscaled_;
		paramcount:=3;
		meaning:=pAValueMeaning1450_AVM1450;
		matchedAssembler:=pAAssemblesto1459_AA1459;
		END;
		basePlusScaledIndexf_PSI:=myrec;
	END;
	FUNCTION pATypeid1468_AT1468:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1468_AT1468:=myrec;
		END;
	FUNCTION pATypeid1470_AT1470:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ scaled  ilcg.pattern@8c2d23}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1470_AT1470:=myrec;
		END;
	FUNCTION pATypeid1472_AT1472:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ offset  ilcg.pattern@b0c5a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1472_AT1472:=myrec;
		END;
	FUNCTION pATypeid1474_AT1474:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ longint  ilcg.pattern@19bf996}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1474_AT1474:=myrec;
		END;
	FUNCTION pAPlusDyadic1477_APD1477:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic1477_APD1477:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc1481_AIL1481:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1481_AIL1481:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1480_AR1480:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1481_AIL1481;
		 pARefval1480_AR1480:=myrec;
		END;
	FUNCTION pADerefRhs1479_ADR1479:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1480_AR1480;
		 pADerefRhs1479_ADR1479:=myrec;
		END;
	FUNCTION pARhsValue1478_ARV1478:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1479_ADR1479;
		 pARhsValue1478_ARV1478:=myrec;
		END;
	FUNCTION pAPlusDyadic1483_APD1483:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic1483_APD1483:=myrec;
		END;
		(*! Match s *)
	FUNCTION pAIdLoc1485_AIL1485:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc1485_AIL1485:=myrec;
		END;
		(*s *)
	FUNCTION pALocValue1484_ALV1484:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1485_AIL1485;
		 pALocValue1484_ALV1484:=myrec;
		END;
		(*! Match off *)
	FUNCTION pAIdLoc1487_AIL1487:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc1487_AIL1487:=myrec;
		END;
		(*off *)
	FUNCTION pALocValue1486_ALV1486:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1487_AIL1487;
		 pALocValue1486_ALV1486:=myrec;
		END;
	FUNCTION pADyadicValue1482_ADV1482:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue1484_ALV1484;
		myrec^.arg2:=pALocValue1486_ALV1486;
		myrec^.fn:=pAPlusDyadic1483_APD1483;
		 pADyadicValue1482_ADV1482:=myrec;
		END;
	FUNCTION pADyadicValue1476_ADV1476:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue1478_ARV1478;
		myrec^.arg2:=pADyadicValue1482_ADV1482;
		myrec^.fn:=pAPlusDyadic1477_APD1477;
		 pADyadicValue1476_ADV1476:=myrec;
		END;
	FUNCTION pAValueMeaning1475_AVM1475:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue1476_ADV1476;
		 pAValueMeaning1475_AVM1475:=myrec;
		END;
	FUNCTION pAAssemblypattern1489_AA1489:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'+' );
		pappendp(list,1);
		pappends(list,'+' );
		pappendp(list,2);
		pAAssemblypattern1489_AA1489:=list;
		END;
	FUNCTION pAAssemblesto1488_AA1488:pprintlist;
	begin
		pAAssemblesto1488_AA1488:=pAAssemblypattern1489_AA1489;
		END;
	FUNCTION pASideeffects1495_AS1495:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1495_AS1495:=nil;
		 pASideeffects1495_AS1495:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1496_AUP1496:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1496_AUP1496:=nil;
		 pAUnconditionalPrecond1496_AUP1496:=myrec;
		END;
	FUNCTION basePlusScaledIndexPlusOffsetf_PSIPO:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		params^[3]:=patlongint_;
		params^[1]:=patscaled_;
		params^[2]:=patoffset_;
		paramcount:=5;
		meaning:=pAValueMeaning1475_AVM1475;
		matchedAssembler:=pAAssemblesto1488_AA1488;
		END;
		basePlusScaledIndexPlusOffsetf_PSIPO:=myrec;
	END;
	FUNCTION pATypeid1499_AT1499:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1499_AT1499:=myrec;
		END;
	FUNCTION pATypeid1501_AT1501:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1501_AT1501:=myrec;
		END;
	FUNCTION pATypeid1503_AT1503:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ offset  ilcg.pattern@b0c5a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1503_AT1503:=myrec;
		END;
	FUNCTION pAPlusDyadic1506_APD1506:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic1506_APD1506:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc1510_AIL1510:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1510_AIL1510:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1509_AR1509:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1510_AIL1510;
		 pARefval1509_AR1509:=myrec;
		END;
	FUNCTION pADerefRhs1508_ADR1508:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1509_AR1509;
		 pADerefRhs1508_ADR1508:=myrec;
		END;
	FUNCTION pARhsValue1507_ARV1507:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1508_ADR1508;
		 pARhsValue1507_ARV1507:=myrec;
		END;
	FUNCTION pAPlusDyadic1512_APD1512:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic1512_APD1512:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc1516_AIL1516:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc1516_AIL1516:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1515_AR1515:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1516_AIL1516;
		 pARefval1515_AR1515:=myrec;
		END;
	FUNCTION pADerefRhs1514_ADR1514:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1515_AR1515;
		 pADerefRhs1514_ADR1514:=myrec;
		END;
	FUNCTION pARhsValue1513_ARV1513:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1514_ADR1514;
		 pARhsValue1513_ARV1513:=myrec;
		END;
		(*! Match off *)
	FUNCTION pAIdLoc1518_AIL1518:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc1518_AIL1518:=myrec;
		END;
		(*off *)
	FUNCTION pALocValue1517_ALV1517:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1518_AIL1518;
		 pALocValue1517_ALV1517:=myrec;
		END;
	FUNCTION pADyadicValue1511_ADV1511:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue1513_ARV1513;
		myrec^.arg2:=pALocValue1517_ALV1517;
		myrec^.fn:=pAPlusDyadic1512_APD1512;
		 pADyadicValue1511_ADV1511:=myrec;
		END;
	FUNCTION pADyadicValue1505_ADV1505:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue1507_ARV1507;
		myrec^.arg2:=pADyadicValue1511_ADV1511;
		myrec^.fn:=pAPlusDyadic1506_APD1506;
		 pADyadicValue1505_ADV1505:=myrec;
		END;
	FUNCTION pAValueMeaning1504_AVM1504:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue1505_ADV1505;
		 pAValueMeaning1504_AVM1504:=myrec;
		END;
	FUNCTION pAAssemblypattern1520_AA1520:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'+' );
		pappendp(list,1);
		pappends(list,' +' );
		pappendp(list,2);
		pAAssemblypattern1520_AA1520:=list;
		END;
	FUNCTION pAAssemblesto1519_AA1519:pprintlist;
	begin
		pAAssemblesto1519_AA1519:=pAAssemblypattern1520_AA1520;
		END;
	FUNCTION pASideeffects1526_AS1526:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1526_AS1526:=nil;
		 pASideeffects1526_AS1526:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1527_AUP1527:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1527_AUP1527:=nil;
		 pAUnconditionalPrecond1527_AUP1527:=myrec;
		END;
	FUNCTION basePlusIndexPlusOffsetf_PIPO:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patreg_;
		params^[0]:=patreg_;
		params^[2]:=patoffset_;
		paramcount:=4;
		meaning:=pAValueMeaning1504_AVM1504;
		matchedAssembler:=pAAssemblesto1519_AA1519;
		END;
		basePlusIndexPlusOffsetf_PIPO:=myrec;
	END;
	FUNCTION pATypeid1530_AT1530:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1530_AT1530:=myrec;
		END;
	FUNCTION pATypeid1532_AT1532:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1532_AT1532:=myrec;
		END;
	FUNCTION pAPlusDyadic1535_APD1535:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic1535_APD1535:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc1539_AIL1539:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1539_AIL1539:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1538_AR1538:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1539_AIL1539;
		 pARefval1538_AR1538:=myrec;
		END;
	FUNCTION pADerefRhs1537_ADR1537:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1538_AR1538;
		 pADerefRhs1537_ADR1537:=myrec;
		END;
	FUNCTION pARhsValue1536_ARV1536:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1537_ADR1537;
		 pARhsValue1536_ARV1536:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc1543_AIL1543:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc1543_AIL1543:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1542_AR1542:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1543_AIL1543;
		 pARefval1542_AR1542:=myrec;
		END;
	FUNCTION pADerefRhs1541_ADR1541:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1542_AR1542;
		 pADerefRhs1541_ADR1541:=myrec;
		END;
	FUNCTION pARhsValue1540_ARV1540:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1541_ADR1541;
		 pARhsValue1540_ARV1540:=myrec;
		END;
	FUNCTION pADyadicValue1534_ADV1534:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue1536_ARV1536;
		myrec^.arg2:=pARhsValue1540_ARV1540;
		myrec^.fn:=pAPlusDyadic1535_APD1535;
		 pADyadicValue1534_ADV1534:=myrec;
		END;
	FUNCTION pAValueMeaning1533_AVM1533:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue1534_ADV1534;
		 pAValueMeaning1533_AVM1533:=myrec;
		END;
	FUNCTION pAAssemblypattern1545_AA1545:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'+' );
		pappendp(list,1);
		pAAssemblypattern1545_AA1545:=list;
		END;
	FUNCTION pAAssemblesto1544_AA1544:pprintlist;
	begin
		pAAssemblesto1544_AA1544:=pAAssemblypattern1545_AA1545;
		END;
	FUNCTION pASideeffects1549_AS1549:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1549_AS1549:=nil;
		 pASideeffects1549_AS1549:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1550_AUP1550:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1550_AUP1550:=nil;
		 pAUnconditionalPrecond1550_AUP1550:=myrec;
		END;
	FUNCTION basePlusIndexf_PI:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patreg_;
		params^[0]:=patreg_;
		paramcount:=3;
		meaning:=pAValueMeaning1533_AVM1533;
		matchedAssembler:=pAAssemblesto1544_AA1544;
		END;
		basePlusIndexf_PI:=myrec;
	END;
	FUNCTION pATypeid1554_AT1554:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ unsigned  ilcg.pattern@fc5b01}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1554_AT1554:=myrec;
		END;
	FUNCTION pAConstRhs1557_ACR1557:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(0);;
		 pAConstRhs1557_ACR1557:=myrec;
		END;
	FUNCTION pARhsValue1556_ARV1556:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs1557_ACR1557;
		 pARhsValue1556_ARV1556:=myrec;
		END;
	FUNCTION pAValueMeaning1555_AVM1555:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue1556_ARV1556;
		 pAValueMeaning1555_AVM1555:=myrec;
		END;
	FUNCTION pAAssemblypattern1559_AA1559:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pAAssemblypattern1559_AA1559:=list;
		END;
	FUNCTION pAAssemblesto1558_AA1558:pprintlist;
	begin
		pAAssemblesto1558_AA1558:=pAAssemblypattern1559_AA1559;
		END;
	FUNCTION pASideeffects1561_AS1561:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1561_AS1561:=nil;
		 pASideeffects1561_AS1561:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1562_AUP1562:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1562_AUP1562:=nil;
		 pAUnconditionalPrecond1562_AUP1562:=myrec;
		END;
	FUNCTION directf_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patunsigned_;
		paramcount:=2;
		meaning:=pAValueMeaning1555_AVM1555;
		matchedAssembler:=pAAssemblesto1558_AA1558;
		END;
		directf_:=myrec;
	END;
	FUNCTION pATypeid1566_AT1566:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@2a2ae9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1566_AT1566:=myrec;
		END;
	FUNCTION pAConstRhs1569_ACR1569:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(0);;
		 pAConstRhs1569_ACR1569:=myrec;
		END;
	FUNCTION pARhsValue1568_ARV1568:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs1569_ACR1569;
		 pARhsValue1568_ARV1568:=myrec;
		END;
	FUNCTION pAValueMeaning1567_AVM1567:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue1568_ARV1568;
		 pAValueMeaning1567_AVM1567:=myrec;
		END;
	FUNCTION pAAssemblypattern1571_AA1571:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pAAssemblypattern1571_AA1571:=list;
		END;
	FUNCTION pAAssemblesto1570_AA1570:pprintlist;
	begin
		pAAssemblesto1570_AA1570:=pAAssemblypattern1571_AA1571;
		END;
	FUNCTION pASideeffects1573_AS1573:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1573_AS1573:=nil;
		 pASideeffects1573_AS1573:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1574_AUP1574:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1574_AUP1574:=nil;
		 pAUnconditionalPrecond1574_AUP1574:=myrec;
		END;
	FUNCTION udirectf_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patint_;
		paramcount:=2;
		meaning:=pAValueMeaning1567_AVM1567;
		matchedAssembler:=pAAssemblesto1570_AA1570;
		END;
		udirectf_:=myrec;
	END;
	FUNCTION pATypeid1579_AT1579:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ offset  ilcg.pattern@b0c5a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1579_AT1579:=myrec;
		END;
	FUNCTION pATypeidType1578_ATT1578:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1579_AT1579;
		 pATypeidType1578_ATT1578:=myrec;
		END;
	FUNCTION pATypeid1581_AT1581:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baseplusoffsetf  ilcg.pattern@d4a1d3}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1581_AT1581:=myrec;
		END;
	FUNCTION pATypeidType1580_ATT1580:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1581_AT1581;
		 pATypeidType1580_ATT1580:=myrec;
		END;
	FUNCTION pATypeid1583_AT1583:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ regindirf  ilcg.pattern@2e9c76}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1583_AT1583:=myrec;
		END;
	FUNCTION pATypeidType1582_ATT1582:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1583_AT1583;
		 pATypeidType1582_ATT1582:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1577_AAP1577:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 183;
		myrec^.last:= 185;
		 pAAlternativesPatterndecl1577_AAP1577:=myrec;
		END;
	FUNCTION pATypeid1588_AT1588:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ directf  ilcg.pattern@74ece8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1588_AT1588:=myrec;
		END;
	FUNCTION pATypeidType1587_ATT1587:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1588_AT1588;
		 pATypeidType1587_ATT1587:=myrec;
		END;
	FUNCTION pATypeid1590_AT1590:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ udirectf  ilcg.pattern@10e468f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1590_AT1590:=myrec;
		END;
	FUNCTION pATypeidType1589_ATT1589:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1590_AT1590;
		 pATypeidType1589_ATT1589:=myrec;
		END;
	FUNCTION pATypeid1592_AT1592:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ labelf  ilcg.pattern@130c132}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1592_AT1592:=myrec;
		END;
	FUNCTION pATypeidType1591_ATT1591:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1592_AT1592;
		 pATypeidType1591_ATT1591:=myrec;
		END;
	FUNCTION pATypeid1594_AT1594:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ labelconstf  ilcg.pattern@2ddc4c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1594_AT1594:=myrec;
		END;
	FUNCTION pATypeidType1593_ATT1593:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1594_AT1594;
		 pATypeidType1593_ATT1593:=myrec;
		END;
	FUNCTION pATypeid1596_AT1596:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ basePlusScaledIndexPlusOffsetf  ilcg.pattern@1216f5a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1596_AT1596:=myrec;
		END;
	FUNCTION pATypeidType1595_ATT1595:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1596_AT1596;
		 pATypeidType1595_ATT1595:=myrec;
		END;
	FUNCTION pATypeid1598_AT1598:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ scaledIndexPlusOffsetf  ilcg.pattern@1aea727}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1598_AT1598:=myrec;
		END;
	FUNCTION pATypeidType1597_ATT1597:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1598_AT1598;
		 pATypeidType1597_ATT1597:=myrec;
		END;
	FUNCTION pATypeid1600_AT1600:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ basePlusScaledIndexf  ilcg.pattern@7038b9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1600_AT1600:=myrec;
		END;
	FUNCTION pATypeidType1599_ATT1599:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1600_AT1600;
		 pATypeidType1599_ATT1599:=myrec;
		END;
	FUNCTION pATypeid1602_AT1602:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ scaledIndexPlusOffsetf  ilcg.pattern@1aea727}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1602_AT1602:=myrec;
		END;
	FUNCTION pATypeidType1601_ATT1601:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1602_AT1602;
		 pATypeidType1601_ATT1601:=myrec;
		END;
	FUNCTION pATypeid1604_AT1604:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baseplusoffsetf  ilcg.pattern@d4a1d3}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1604_AT1604:=myrec;
		END;
	FUNCTION pATypeidType1603_ATT1603:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1604_AT1604;
		 pATypeidType1603_ATT1603:=myrec;
		END;
	FUNCTION pATypeid1606_AT1606:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ basePlusIndexPlusOffsetf  ilcg.pattern@9b5c95}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1606_AT1606:=myrec;
		END;
	FUNCTION pATypeidType1605_ATT1605:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1606_AT1606;
		 pATypeidType1605_ATT1605:=myrec;
		END;
	FUNCTION pATypeid1608_AT1608:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baseminusoffsetf  ilcg.pattern@a5ba31}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1608_AT1608:=myrec;
		END;
	FUNCTION pATypeidType1607_ATT1607:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1608_AT1608;
		 pATypeidType1607_ATT1607:=myrec;
		END;
	FUNCTION pATypeid1610_AT1610:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ basePlusIndexf  ilcg.pattern@c9e870}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1610_AT1610:=myrec;
		END;
	FUNCTION pATypeidType1609_ATT1609:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1610_AT1610;
		 pATypeidType1609_ATT1609:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1586_AAP1586:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 186;
		myrec^.last:= 197;
		 pAAlternativesPatterndecl1586_AAP1586:=myrec;
		END;
	FUNCTION pATypeid1614_AT1614:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ uncasteaform  ilcg.pattern@6dd8f1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1614_AT1614:=myrec;
		END;
	FUNCTION pATypeid1616_AT1616:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ longint  ilcg.pattern@19bf996}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1616_AT1616:=myrec;
		END;
	FUNCTION pATypeid1621_AT1621:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@13ac14d}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid1621_AT1621:=myrec;
		END;
	FUNCTION pATypeidType1620_ATT1620:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1621_AT1621;
		 pATypeidType1620_ATT1620:=myrec;
		END;
		(*! Match f *)
	FUNCTION pAIdLoc1623_AIL1623:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1623_AIL1623:=myrec;
		END;
		(*f *)
	FUNCTION pALocValue1622_ALV1622:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1623_AIL1623;
		 pALocValue1622_ALV1622:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs1619_ACR1619:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType1620_ATT1620;
		myrec^.arg2:=pALocValue1622_ALV1622;
		 pACastRhs1619_ACR1619:=myrec;
		END;
	FUNCTION pARhsValue1618_ARV1618:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs1619_ACR1619;
		 pARhsValue1618_ARV1618:=myrec;
		END;
	FUNCTION pAValueMeaning1617_AVM1617:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue1618_ARV1618;
		 pAValueMeaning1617_AVM1617:=myrec;
		END;
	FUNCTION pAAssemblypattern1625_AA1625:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pAAssemblypattern1625_AA1625:=list;
		END;
	FUNCTION pAAssemblesto1624_AA1624:pprintlist;
	begin
		pAAssemblesto1624_AA1624:=pAAssemblypattern1625_AA1625;
		END;
	FUNCTION pASideeffects1627_AS1627:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1627_AS1627:=nil;
		 pASideeffects1627_AS1627:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1628_AUP1628:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1628_AUP1628:=nil;
		 pAUnconditionalPrecond1628_AUP1628:=myrec;
		END;
	FUNCTION eaform_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patlongint_;
		params^[0]:=patuncasteaform_;
		paramcount:=3;
		meaning:=pAValueMeaning1617_AVM1617;
		matchedAssembler:=pAAssemblesto1624_AA1624;
		END;
		eaform_:=myrec;
	END;
	FUNCTION pATypeid1633_AT1633:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ eaform  ilcg.pattern@811e18}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1633_AT1633:=myrec;
		END;
	FUNCTION pATypeidType1632_ATT1632:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1633_AT1633;
		 pATypeidType1632_ATT1632:=myrec;
		END;
	FUNCTION pATypeid1635_AT1635:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ regindirf  ilcg.pattern@2e9c76}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1635_AT1635:=myrec;
		END;
	FUNCTION pATypeidType1634_ATT1634:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1635_AT1635;
		 pATypeidType1634_ATT1634:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1631_AAP1631:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 198;
		myrec^.last:= 199;
		 pAAlternativesPatterndecl1631_AAP1631:=myrec;
		END;
	FUNCTION pATypeid1639_AT1639:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ addrform  ilcg.pattern@13577ca}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1639_AT1639:=myrec;
		END;
		(*! Match f *)
	FUNCTION pAIdLoc1644_AIL1644:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1644_AIL1644:=myrec;
		END;
		(*f *)
	FUNCTION pALocValue1643_ALV1643:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1644_AIL1644;
		 pALocValue1643_ALV1643:=myrec;
		END;
	FUNCTION pAMemoryLoc1642_AML1642:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pALocValue1643_ALV1643;
		 pAMemoryLoc1642_AML1642:=myrec;
		END;
		(*mem ( f ) *)
	FUNCTION pALocValue1641_ALV1641:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAMemoryLoc1642_AML1642;
		 pALocValue1641_ALV1641:=myrec;
		END;
	FUNCTION pAValueMeaning1640_AVM1640:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pALocValue1641_ALV1641;
		 pAValueMeaning1640_AVM1640:=myrec;
		END;
	FUNCTION pAAssemblypattern1646_AA1646:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'[' );
		pappendp(list,0);
		pappends(list,']' );
		pAAssemblypattern1646_AA1646:=list;
		END;
	FUNCTION pAAssemblesto1645_AA1645:pprintlist;
	begin
		pAAssemblesto1645_AA1645:=pAAssemblypattern1646_AA1646;
		END;
	FUNCTION pASideeffects1650_AS1650:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1650_AS1650:=nil;
		 pASideeffects1650_AS1650:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1651_AUP1651:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1651_AUP1651:=nil;
		 pAUnconditionalPrecond1651_AUP1651:=myrec;
		END;
	FUNCTION maddrmode_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=pataddrform_;
		paramcount:=2;
		meaning:=pAValueMeaning1640_AVM1640;
		matchedAssembler:=pAAssemblesto1645_AA1645;
		END;
		maddrmode_:=myrec;
	END;
	FUNCTION pATypeid1655_AT1655:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ riscaddr  ilcg.pattern@1117681}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1655_AT1655:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc1660_AIL1660:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1660_AIL1660:=myrec;
		END;
		(*r *)
	FUNCTION pALocValue1659_ALV1659:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1660_AIL1660;
		 pALocValue1659_ALV1659:=myrec;
		END;
	FUNCTION pAMemoryLoc1658_AML1658:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pALocValue1659_ALV1659;
		 pAMemoryLoc1658_AML1658:=myrec;
		END;
		(*mem ( r ) *)
	FUNCTION pALocValue1657_ALV1657:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAMemoryLoc1658_AML1658;
		 pALocValue1657_ALV1657:=myrec;
		END;
	FUNCTION pAValueMeaning1656_AVM1656:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pALocValue1657_ALV1657;
		 pAValueMeaning1656_AVM1656:=myrec;
		END;
	FUNCTION pAAssemblypattern1662_AA1662:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'[' );
		pappendp(list,0);
		pappends(list,']' );
		pAAssemblypattern1662_AA1662:=list;
		END;
	FUNCTION pAAssemblesto1661_AA1661:pprintlist;
	begin
		pAAssemblesto1661_AA1661:=pAAssemblypattern1662_AA1662;
		END;
	FUNCTION pASideeffects1666_AS1666:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1666_AS1666:=nil;
		 pASideeffects1666_AS1666:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1667_AUP1667:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1667_AUP1667:=nil;
		 pAUnconditionalPrecond1667_AUP1667:=myrec;
		END;
	FUNCTION memrisc_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patriscaddr_;
		paramcount:=2;
		meaning:=pAValueMeaning1656_AVM1656;
		matchedAssembler:=pAAssemblesto1661_AA1661;
		END;
		memrisc_:=myrec;
	END;
	FUNCTION pATypeid1672_AT1672:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1672_AT1672:=myrec;
		END;
	FUNCTION pATypeidType1671_ATT1671:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1672_AT1672;
		 pATypeidType1671_ATT1671:=myrec;
		END;
	FUNCTION pATypeid1674_AT1674:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ru  ilcg.pattern@1672313}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1674_AT1674:=myrec;
		END;
	FUNCTION pATypeidType1673_ATT1673:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1674_AT1674;
		 pATypeidType1673_ATT1673:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1670_AAP1670:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 200;
		myrec^.last:= 201;
		 pAAlternativesPatterndecl1670_AAP1670:=myrec;
		END;
	FUNCTION pATypeid1678_AT1678:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ signed  ilcg.pattern@15e0163}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1678_AT1678:=myrec;
		END;
	FUNCTION pAConstRhs1681_ACR1681:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(0);;
		 pAConstRhs1681_ACR1681:=myrec;
		END;
	FUNCTION pARhsValue1680_ARV1680:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs1681_ACR1681;
		 pARhsValue1680_ARV1680:=myrec;
		END;
	FUNCTION pAValueMeaning1679_AVM1679:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue1680_ARV1680;
		 pAValueMeaning1679_AVM1679:=myrec;
		END;
	FUNCTION pAAssemblypattern1683_AA1683:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pAAssemblypattern1683_AA1683:=list;
		END;
	FUNCTION pAAssemblesto1682_AA1682:pprintlist;
	begin
		pAAssemblesto1682_AA1682:=pAAssemblypattern1683_AA1683;
		END;
	FUNCTION pASideeffects1685_AS1685:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1685_AS1685:=nil;
		 pASideeffects1685_AS1685:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1686_AUP1686:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1686_AUP1686:=nil;
		 pAUnconditionalPrecond1686_AUP1686:=myrec;
		END;
	FUNCTION immediate_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patsigned_;
		paramcount:=2;
		meaning:=pAValueMeaning1679_AVM1679;
		matchedAssembler:=pAAssemblesto1682_AA1682;
		END;
		immediate_:=myrec;
	END;
	FUNCTION pATypeid1690_AT1690:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@2a2ae9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1690_AT1690:=myrec;
		END;
	FUNCTION pAConstRhs1693_ACR1693:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(0);;
		 pAConstRhs1693_ACR1693:=myrec;
		END;
	FUNCTION pARhsValue1692_ARV1692:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs1693_ACR1693;
		 pARhsValue1692_ARV1692:=myrec;
		END;
	FUNCTION pAValueMeaning1691_AVM1691:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue1692_ARV1692;
		 pAValueMeaning1691_AVM1691:=myrec;
		END;
	FUNCTION pAAssemblypattern1695_AA1695:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pAAssemblypattern1695_AA1695:=list;
		END;
	FUNCTION pAAssemblesto1694_AA1694:pprintlist;
	begin
		pAAssemblesto1694_AA1694:=pAAssemblypattern1695_AA1695;
		END;
	FUNCTION pASideeffects1697_AS1697:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1697_AS1697:=nil;
		 pASideeffects1697_AS1697:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1698_AUP1698:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1698_AUP1698:=nil;
		 pAUnconditionalPrecond1698_AUP1698:=myrec;
		END;
	FUNCTION intimmediate_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patint_;
		paramcount:=2;
		meaning:=pAValueMeaning1691_AVM1691;
		matchedAssembler:=pAAssemblesto1694_AA1694;
		END;
		intimmediate_:=myrec;
	END;
	FUNCTION pATypeid1702_AT1702:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ unsigned  ilcg.pattern@fc5b01}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1702_AT1702:=myrec;
		END;
	FUNCTION pAConstRhs1705_ACR1705:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(0);;
		 pAConstRhs1705_ACR1705:=myrec;
		END;
	FUNCTION pARhsValue1704_ARV1704:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs1705_ACR1705;
		 pARhsValue1704_ARV1704:=myrec;
		END;
	FUNCTION pAValueMeaning1703_AVM1703:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue1704_ARV1704;
		 pAValueMeaning1703_AVM1703:=myrec;
		END;
	FUNCTION pAAssemblypattern1707_AA1707:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pAAssemblypattern1707_AA1707:=list;
		END;
	FUNCTION pAAssemblesto1706_AA1706:pprintlist;
	begin
		pAAssemblesto1706_AA1706:=pAAssemblypattern1707_AA1707;
		END;
	FUNCTION pASideeffects1709_AS1709:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1709_AS1709:=nil;
		 pASideeffects1709_AS1709:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1710_AUP1710:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1710_AUP1710:=nil;
		 pAUnconditionalPrecond1710_AUP1710:=myrec;
		END;
	FUNCTION uimmediate_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patunsigned_;
		paramcount:=2;
		meaning:=pAValueMeaning1703_AVM1703;
		matchedAssembler:=pAAssemblesto1706_AA1706;
		END;
		uimmediate_:=myrec;
	END;
	FUNCTION pATypeid1715_AT1715:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ labelf  ilcg.pattern@130c132}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1715_AT1715:=myrec;
		END;
	FUNCTION pATypeidType1714_ATT1714:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1715_AT1715;
		 pATypeidType1714_ATT1714:=myrec;
		END;
	FUNCTION pATypeid1717_AT1717:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1717_AT1717:=myrec;
		END;
	FUNCTION pATypeidType1716_ATT1716:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1717_AT1717;
		 pATypeidType1716_ATT1716:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1713_AAP1713:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 202;
		myrec^.last:= 203;
		 pAAlternativesPatterndecl1713_AAP1713:=myrec;
		END;
	FUNCTION pATypeid1722_AT1722:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1722_AT1722:=myrec;
		END;
	FUNCTION pATypeidType1721_ATT1721:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1722_AT1722;
		 pATypeidType1721_ATT1721:=myrec;
		END;
	FUNCTION pATypeid1724_AT1724:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ anyreg  ilcg.pattern@10a4a32}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1724_AT1724:=myrec;
		END;
	FUNCTION pATypeidType1723_ATT1723:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1724_AT1724;
		 pATypeidType1723_ATT1723:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1720_AAP1720:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 204;
		myrec^.last:= 205;
		 pAAlternativesPatterndecl1720_AAP1720:=myrec;
		END;
	FUNCTION pATypeid1729_AT1729:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1729_AT1729:=myrec;
		END;
	FUNCTION pATypeidType1728_ATT1728:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1729_AT1729;
		 pATypeidType1728_ATT1728:=myrec;
		END;
	FUNCTION pATypeid1731_AT1731:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ uwreg  ilcg.pattern@1bb03ee}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1731_AT1731:=myrec;
		END;
	FUNCTION pATypeidType1730_ATT1730:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1731_AT1731;
		 pATypeidType1730_ATT1730:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1727_AAP1727:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 206;
		myrec^.last:= 207;
		 pAAlternativesPatterndecl1727_AAP1727:=myrec;
		END;
	FUNCTION pATypeid1736_AT1736:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1736_AT1736:=myrec;
		END;
	FUNCTION pATypeidType1735_ATT1735:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1736_AT1736;
		 pATypeidType1735_ATT1735:=myrec;
		END;
	FUNCTION pATypeid1738_AT1738:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ureg  ilcg.pattern@453dd5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1738_AT1738:=myrec;
		END;
	FUNCTION pATypeidType1737_ATT1737:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1738_AT1738;
		 pATypeidType1737_ATT1737:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1734_AAP1734:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 208;
		myrec^.last:= 209;
		 pAAlternativesPatterndecl1734_AAP1734:=myrec;
		END;
	FUNCTION pATypeid1743_AT1743:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1743_AT1743:=myrec;
		END;
	FUNCTION pATypeidType1742_ATT1742:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1743_AT1743;
		 pATypeidType1742_ATT1742:=myrec;
		END;
	FUNCTION pATypeid1745_AT1745:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1745_AT1745:=myrec;
		END;
	FUNCTION pATypeidType1744_ATT1744:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1745_AT1745;
		 pATypeidType1744_ATT1744:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1741_AAP1741:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 210;
		myrec^.last:= 211;
		 pAAlternativesPatterndecl1741_AAP1741:=myrec;
		END;
	FUNCTION pATypeid1750_AT1750:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1750_AT1750:=myrec;
		END;
	FUNCTION pATypeidType1749_ATT1749:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1750_AT1750;
		 pATypeidType1749_ATT1749:=myrec;
		END;
	FUNCTION pATypeid1752_AT1752:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1752_AT1752:=myrec;
		END;
	FUNCTION pATypeidType1751_ATT1751:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1752_AT1752;
		 pATypeidType1751_ATT1751:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1748_AAP1748:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 212;
		myrec^.last:= 213;
		 pAAlternativesPatterndecl1748_AAP1748:=myrec;
		END;
	FUNCTION pATypeid1757_AT1757:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1757_AT1757:=myrec;
		END;
	FUNCTION pATypeidType1756_ATT1756:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1757_AT1757;
		 pATypeidType1756_ATT1756:=myrec;
		END;
	FUNCTION pATypeid1759_AT1759:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ru  ilcg.pattern@1672313}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1759_AT1759:=myrec;
		END;
	FUNCTION pATypeidType1758_ATT1758:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1759_AT1759;
		 pATypeidType1758_ATT1758:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1755_AAP1755:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 214;
		myrec^.last:= 215;
		 pAAlternativesPatterndecl1755_AAP1755:=myrec;
		END;
	FUNCTION pATypeid1763_AT1763:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ shiftcountreg  ilcg.pattern@1f95673}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1763_AT1763:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc1768_AIL1768:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1768_AIL1768:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1767_AR1767:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1768_AIL1768;
		 pARefval1767_AR1767:=myrec;
		END;
	FUNCTION pADerefRhs1766_ADR1766:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1767_AR1767;
		 pADerefRhs1766_ADR1766:=myrec;
		END;
	FUNCTION pARhsValue1765_ARV1765:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1766_ADR1766;
		 pARhsValue1765_ARV1765:=myrec;
		END;
	FUNCTION pAValueMeaning1764_AVM1764:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue1765_ARV1765;
		 pAValueMeaning1764_AVM1764:=myrec;
		END;
	FUNCTION pAAssemblypattern1770_AA1770:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cl' );
		pAAssemblypattern1770_AA1770:=list;
		END;
	FUNCTION pAAssemblesto1769_AA1769:pprintlist;
	begin
		pAAssemblesto1769_AA1769:=pAAssemblypattern1770_AA1770;
		END;
	FUNCTION pASideeffects1772_AS1772:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1772_AS1772:=nil;
		 pASideeffects1772_AS1772:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1773_AUP1773:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1773_AUP1773:=nil;
		 pAUnconditionalPrecond1773_AUP1773:=myrec;
		END;
	FUNCTION regshift_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patshiftcountreg_;
		paramcount:=2;
		meaning:=pAValueMeaning1764_AVM1764;
		matchedAssembler:=pAAssemblesto1769_AA1769;
		END;
		regshift_:=myrec;
	END;
	FUNCTION pATypeid1778_AT1778:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ immediate  ilcg.pattern@b1406b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1778_AT1778:=myrec;
		END;
	FUNCTION pATypeidType1777_ATT1777:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1778_AT1778;
		 pATypeidType1777_ATT1777:=myrec;
		END;
	FUNCTION pATypeid1780_AT1780:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ regshift  ilcg.pattern@1ec0130}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1780_AT1780:=myrec;
		END;
	FUNCTION pATypeidType1779_ATT1779:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1780_AT1780;
		 pATypeidType1779_ATT1779:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1776_AAP1776:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 216;
		myrec^.last:= 217;
		 pAAlternativesPatterndecl1776_AAP1776:=myrec;
		END;
	FUNCTION pATypeid1784_AT1784:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ addrmode  ilcg.pattern@17aaeec}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1784_AT1784:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc1789_AIL1789:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1789_AIL1789:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1788_AR1788:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1789_AIL1789;
		 pARefval1788_AR1788:=myrec;
		END;
	FUNCTION pADerefRhs1787_ADR1787:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1788_AR1788;
		 pADerefRhs1787_ADR1787:=myrec;
		END;
	FUNCTION pARhsValue1786_ARV1786:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1787_ADR1787;
		 pARhsValue1786_ARV1786:=myrec;
		END;
	FUNCTION pAValueMeaning1785_AVM1785:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue1786_ARV1786;
		 pAValueMeaning1785_AVM1785:=myrec;
		END;
	FUNCTION pAAssemblypattern1791_AA1791:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pAAssemblypattern1791_AA1791:=list;
		END;
	FUNCTION pAAssemblesto1790_AA1790:pprintlist;
	begin
		pAAssemblesto1790_AA1790:=pAAssemblypattern1791_AA1791;
		END;
	FUNCTION pASideeffects1793_AS1793:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1793_AS1793:=nil;
		 pASideeffects1793_AS1793:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1794_AUP1794:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1794_AUP1794:=nil;
		 pAUnconditionalPrecond1794_AUP1794:=myrec;
		END;
	FUNCTION regaddrop_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=pataddrmode_;
		paramcount:=2;
		meaning:=pAValueMeaning1785_AVM1785;
		matchedAssembler:=pAAssemblesto1790_AA1790;
		END;
		regaddrop_:=myrec;
	END;
	FUNCTION pATypeid1798_AT1798:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ uwaddrmode  ilcg.pattern@1bd523d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1798_AT1798:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc1803_AIL1803:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1803_AIL1803:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1802_AR1802:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1803_AIL1803;
		 pARefval1802_AR1802:=myrec;
		END;
	FUNCTION pADerefRhs1801_ADR1801:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1802_AR1802;
		 pADerefRhs1801_ADR1801:=myrec;
		END;
	FUNCTION pARhsValue1800_ARV1800:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1801_ADR1801;
		 pARhsValue1800_ARV1800:=myrec;
		END;
	FUNCTION pAValueMeaning1799_AVM1799:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue1800_ARV1800;
		 pAValueMeaning1799_AVM1799:=myrec;
		END;
	FUNCTION pAAssemblypattern1805_AA1805:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pAAssemblypattern1805_AA1805:=list;
		END;
	FUNCTION pAAssemblesto1804_AA1804:pprintlist;
	begin
		pAAssemblesto1804_AA1804:=pAAssemblypattern1805_AA1805;
		END;
	FUNCTION pASideeffects1807_AS1807:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1807_AS1807:=nil;
		 pASideeffects1807_AS1807:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1808_AUP1808:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1808_AUP1808:=nil;
		 pAUnconditionalPrecond1808_AUP1808:=myrec;
		END;
	FUNCTION uwregaddrop_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patuwaddrmode_;
		paramcount:=2;
		meaning:=pAValueMeaning1799_AVM1799;
		matchedAssembler:=pAAssemblesto1804_AA1804;
		END;
		uwregaddrop_:=myrec;
	END;
	FUNCTION pATypeid1813_AT1813:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ intimmediate  ilcg.pattern@18ee2ee}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1813_AT1813:=myrec;
		END;
	FUNCTION pATypeidType1812_ATT1812:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1813_AT1813;
		 pATypeidType1812_ATT1812:=myrec;
		END;
	FUNCTION pATypeid1815_AT1815:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1815_AT1815:=myrec;
		END;
	FUNCTION pATypeidType1814_ATT1814:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1815_AT1815;
		 pATypeidType1814_ATT1814:=myrec;
		END;
	FUNCTION pATypeid1817_AT1817:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ regaddrop  ilcg.pattern@1b01949}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1817_AT1817:=myrec;
		END;
	FUNCTION pATypeidType1816_ATT1816:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1817_AT1817;
		 pATypeidType1816_ATT1816:=myrec;
		END;
	FUNCTION pATypeid1819_AT1819:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ru  ilcg.pattern@1672313}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1819_AT1819:=myrec;
		END;
	FUNCTION pATypeidType1818_ATT1818:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1819_AT1819;
		 pATypeidType1818_ATT1818:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1811_AAP1811:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 218;
		myrec^.last:= 221;
		 pAAlternativesPatterndecl1811_AAP1811:=myrec;
		END;
	FUNCTION pATypeid1824_AT1824:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ uimmediate  ilcg.pattern@125ee71}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1824_AT1824:=myrec;
		END;
	FUNCTION pATypeidType1823_ATT1823:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1824_AT1824;
		 pATypeidType1823_ATT1823:=myrec;
		END;
	FUNCTION pATypeid1826_AT1826:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ uwregaddrop  ilcg.pattern@1450337}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1826_AT1826:=myrec;
		END;
	FUNCTION pATypeidType1825_ATT1825:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1826_AT1826;
		 pATypeidType1825_ATT1825:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1822_AAP1822:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 222;
		myrec^.last:= 223;
		 pAAlternativesPatterndecl1822_AAP1822:=myrec;
		END;
	FUNCTION pATypeid1829_AT1829:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1829_AT1829:=myrec;
		END;
	FUNCTION pASigned1838_AS1838:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned1838_AS1838:=myrec;
		END;
	FUNCTION pASignedTformat1837_AST1837:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned1838_AS1838;
		 pASignedTformat1837_AST1837:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1836_ATP1836:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype1836_ATP1836:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1835_APT1835:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType1835_APT1835:=myrec;
		END;
	FUNCTION pAReference1834_AR1834:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType1835_APT1835;
		 pAReference1834_AR1834:=myrec;
		END;
	FUNCTION pAReftypeType1833_ART1833:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference1834_AR1834;
		 pAReftypeType1833_ART1833:=myrec;
		END;
	FUNCTION pASigned1845_AS1845:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned1845_AS1845:=myrec;
		END;
	FUNCTION pASignedTformat1844_AST1844:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned1845_AS1845;
		 pASignedTformat1844_AST1844:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1843_ATP1843:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype1843_ATP1843:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1842_APT1842:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType1842_APT1842:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc1847_AIL1847:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc1847_AIL1847:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue1846_ALV1846:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1847_AIL1847;
		 pALocValue1846_ALV1846:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastpopRhs1841_ACR1841:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType1842_APT1842;
		myrec^.arg2:=pALocValue1846_ALV1846;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs1841_ACR1841:=myrec;
		END;
	FUNCTION pARhsValue1840_ARV1840:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs1841_ACR1841;
		 pARhsValue1840_ARV1840:=myrec;
		END;
	FUNCTION pAMemoryLoc1839_AML1839:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pARhsValue1840_ARV1840;
		 pAMemoryLoc1839_AML1839:=myrec;
		END;
		(*! try to cast to type: ref int32*)
	FUNCTION pARefcastRefval1832_ARR1832:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType1833_ART1833;
		(*class ilcg.node.AMemoryLoc*)
		myrec^.arg2:=pAMemoryLoc1839_AML1839;
		 pARefcastRefval1832_ARR1832:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc1851_AIL1851:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1851_AIL1851:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1850_AR1850:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1851_AIL1851;
		 pARefval1850_AR1850:=myrec;
		END;
	FUNCTION pADerefRhs1849_ADR1849:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1850_AR1850;
		 pADerefRhs1849_ADR1849:=myrec;
		END;
	FUNCTION pARhsValue1848_ARV1848:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1849_ADR1849;
		 pARhsValue1848_ARV1848:=myrec;
		END;
	FUNCTION pAAssign1831_AA1831:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue1848_ARV1848;
		myrec^.dest:=pARefcastRefval1832_ARR1832;
		 pAAssign1831_AA1831:=myrec;
		END;
	FUNCTION pAAssignMeaning1830_AAM1830:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign1831_AA1831;
		 pAAssignMeaning1830_AAM1830:=myrec;
		END;
	FUNCTION pAAssemblypattern1853_AA1853:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'xchg DWORD[esp],' );
		pappendp(list,0);
		pappends(list,'\n  pop DWORD[' );
		pappendp(list,0);
		pappends(list,']\n   ' );
		pAAssemblypattern1853_AA1853:=list;
		END;
	FUNCTION pAAssemblesto1852_AA1852:pprintlist;
	begin
		pAAssemblesto1852_AA1852:=pAAssemblypattern1853_AA1853;
		END;
	FUNCTION pASideeffects1859_AS1859:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1859_AS1859:=nil;
		 pASideeffects1859_AS1859:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1860_AUP1860:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1860_AUP1860:=nil;
		 pAUnconditionalPrecond1860_AUP1860:=myrec;
		END;
	FUNCTION STACKSTORE_STACKSTORE:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		paramcount:=2;
		meaning:=pAAssignMeaning1830_AAM1830;
		matchedAssembler:=pAAssemblesto1852_AA1852;
		END;
		STACKSTORE_STACKSTORE:=myrec;
	END;
	FUNCTION pATypeid1863_AT1863:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ wreg  ilcg.pattern@15004dd}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1863_AT1863:=myrec;
		END;
	FUNCTION pAHalfwordFormat1871_AHF1871:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fhalfword;
		 pAHalfwordFormat1871_AHF1871:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype1870_AFP1870:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fhalfword ;
		 pAFormatPredeclaredtype1870_AFP1870:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1869_APT1869:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fhalfword ;
		 pAPredeclaredtypeType1869_APT1869:=myrec;
		END;
	FUNCTION pAReference1868_AR1868:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType1869_APT1869;
		 pAReference1868_AR1868:=myrec;
		END;
	FUNCTION pAReftypeType1867_ART1867:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference1868_AR1868;
		 pAReftypeType1867_ART1867:=myrec;
		END;
	FUNCTION pASigned1878_AS1878:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned1878_AS1878:=myrec;
		END;
	FUNCTION pASignedTformat1877_AST1877:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned1878_AS1878;
		 pASignedTformat1877_AST1877:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1876_ATP1876:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype1876_ATP1876:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1875_APT1875:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType1875_APT1875:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc1880_AIL1880:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc1880_AIL1880:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue1879_ALV1879:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1880_AIL1880;
		 pALocValue1879_ALV1879:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastpopRhs1874_ACR1874:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType1875_APT1875;
		myrec^.arg2:=pALocValue1879_ALV1879;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs1874_ACR1874:=myrec;
		END;
	FUNCTION pARhsValue1873_ARV1873:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs1874_ACR1874;
		 pARhsValue1873_ARV1873:=myrec;
		END;
	FUNCTION pAMemoryLoc1872_AML1872:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pARhsValue1873_ARV1873;
		 pAMemoryLoc1872_AML1872:=myrec;
		END;
		(*! try to cast to type: ref halfword*)
	FUNCTION pARefcastRefval1866_ARR1866:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType1867_ART1867;
		(*class ilcg.node.AMemoryLoc*)
		myrec^.arg2:=pAMemoryLoc1872_AML1872;
		 pARefcastRefval1866_ARR1866:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc1884_AIL1884:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1884_AIL1884:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1883_AR1883:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1884_AIL1884;
		 pARefval1883_AR1883:=myrec;
		END;
	FUNCTION pADerefRhs1882_ADR1882:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1883_AR1883;
		 pADerefRhs1882_ADR1882:=myrec;
		END;
	FUNCTION pARhsValue1881_ARV1881:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1882_ADR1882;
		 pARhsValue1881_ARV1881:=myrec;
		END;
	FUNCTION pAAssign1865_AA1865:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue1881_ARV1881;
		myrec^.dest:=pARefcastRefval1866_ARR1866;
		 pAAssign1865_AA1865:=myrec;
		END;
	FUNCTION pAAssignMeaning1864_AAM1864:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign1865_AA1865;
		 pAAssignMeaning1864_AAM1864:=myrec;
		END;
	FUNCTION pAAssemblypattern1886_AA1886:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'xchg DWORD[esp],esi\n  mov word[esi],' );
		pappendp(list,0);
		pappends(list,'\n  pop esi' );
		pAAssemblypattern1886_AA1886:=list;
		END;
	FUNCTION pAAssemblesto1885_AA1885:pprintlist;
	begin
		pAAssemblesto1885_AA1885:=pAAssemblypattern1886_AA1886;
		END;
	FUNCTION pASideeffects1890_AS1890:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1890_AS1890:=nil;
		 pASideeffects1890_AS1890:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1891_AUP1891:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1891_AUP1891:=nil;
		 pAUnconditionalPrecond1891_AUP1891:=myrec;
		END;
	FUNCTION STACKWSTORE_STACKWSTORE:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patwreg_;
		paramcount:=2;
		meaning:=pAAssignMeaning1864_AAM1864;
		matchedAssembler:=pAAssemblesto1885_AA1885;
		END;
		STACKWSTORE_STACKWSTORE:=myrec;
	END;
	FUNCTION pATypeid1894_AT1894:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1894_AT1894:=myrec;
		END;
	FUNCTION pAOctetFormat1902_AOF1902:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat1902_AOF1902:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype1901_AFP1901:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype1901_AFP1901:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1900_APT1900:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAPredeclaredtypeType1900_APT1900:=myrec;
		END;
	FUNCTION pAReference1899_AR1899:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType1900_APT1900;
		 pAReference1899_AR1899:=myrec;
		END;
	FUNCTION pAReftypeType1898_ART1898:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference1899_AR1899;
		 pAReftypeType1898_ART1898:=myrec;
		END;
	FUNCTION pASigned1909_AS1909:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned1909_AS1909:=myrec;
		END;
	FUNCTION pASignedTformat1908_AST1908:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned1909_AS1909;
		 pASignedTformat1908_AST1908:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1907_ATP1907:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype1907_ATP1907:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1906_APT1906:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType1906_APT1906:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc1911_AIL1911:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc1911_AIL1911:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue1910_ALV1910:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1911_AIL1911;
		 pALocValue1910_ALV1910:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastpopRhs1905_ACR1905:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType1906_APT1906;
		myrec^.arg2:=pALocValue1910_ALV1910;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs1905_ACR1905:=myrec;
		END;
	FUNCTION pARhsValue1904_ARV1904:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs1905_ACR1905;
		 pARhsValue1904_ARV1904:=myrec;
		END;
	FUNCTION pAMemoryLoc1903_AML1903:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pARhsValue1904_ARV1904;
		 pAMemoryLoc1903_AML1903:=myrec;
		END;
		(*! try to cast to type: ref octet*)
	FUNCTION pARefcastRefval1897_ARR1897:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType1898_ART1898;
		(*class ilcg.node.AMemoryLoc*)
		myrec^.arg2:=pAMemoryLoc1903_AML1903;
		 pARefcastRefval1897_ARR1897:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc1915_AIL1915:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1915_AIL1915:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1914_AR1914:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1915_AIL1915;
		 pARefval1914_AR1914:=myrec;
		END;
	FUNCTION pADerefRhs1913_ADR1913:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1914_AR1914;
		 pADerefRhs1913_ADR1913:=myrec;
		END;
	FUNCTION pARhsValue1912_ARV1912:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1913_ADR1913;
		 pARhsValue1912_ARV1912:=myrec;
		END;
	FUNCTION pAAssign1896_AA1896:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue1912_ARV1912;
		myrec^.dest:=pARefcastRefval1897_ARR1897;
		 pAAssign1896_AA1896:=myrec;
		END;
	FUNCTION pAAssignMeaning1895_AAM1895:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign1896_AA1896;
		 pAAssignMeaning1895_AAM1895:=myrec;
		END;
	FUNCTION pAAssemblypattern1917_AA1917:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'xchg DWORD[esp],esi\n  mov BYTE[esi],' );
		pappendp(list,0);
		pappends(list,'\n  pop esi' );
		pAAssemblypattern1917_AA1917:=list;
		END;
	FUNCTION pAAssemblesto1916_AA1916:pprintlist;
	begin
		pAAssemblesto1916_AA1916:=pAAssemblypattern1917_AA1917;
		END;
	FUNCTION pASideeffects1921_AS1921:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1921_AS1921:=nil;
		 pASideeffects1921_AS1921:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1922_AUP1922:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1922_AUP1922:=nil;
		 pAUnconditionalPrecond1922_AUP1922:=myrec;
		END;
	FUNCTION STACKBSTORE_STACKBSTORE:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patbreg_;
		paramcount:=2;
		meaning:=pAAssignMeaning1895_AAM1895;
		matchedAssembler:=pAAssemblesto1916_AA1916;
		END;
		STACKBSTORE_STACKBSTORE:=myrec;
	END;
	FUNCTION pATypeid1925_AT1925:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ nonmultoperator  ilcg.pattern@752144}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1925_AT1925:=myrec;
		END;
	FUNCTION pATypeid1927_AT1927:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ offset  ilcg.pattern@b0c5a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1927_AT1927:=myrec;
		END;
	FUNCTION pAPushDyadic1930_APD1930:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic1930_APD1930:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc1932_AIL1932:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc1932_AIL1932:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue1931_ALV1931:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1932_AIL1932;
		 pALocValue1931_ALV1931:=myrec;
		END;
	FUNCTION pASigned1938_AS1938:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned1938_AS1938:=myrec;
		END;
	FUNCTION pASignedTformat1937_AST1937:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned1938_AS1938;
		 pASignedTformat1937_AST1937:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1936_ATP1936:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype1936_ATP1936:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1935_APT1935:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType1935_APT1935:=myrec;
		END;
	FUNCTION pAIdentifierDyadic1940_AID1940:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic1940_AID1940:=myrec;
		END;
	FUNCTION pASigned1946_AS1946:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned1946_AS1946:=myrec;
		END;
	FUNCTION pASignedTformat1945_AST1945:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned1946_AS1946;
		 pASignedTformat1945_AST1945:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1944_ATP1944:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype1944_ATP1944:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1943_APT1943:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType1943_APT1943:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc1948_AIL1948:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc1948_AIL1948:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue1947_ALV1947:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1948_AIL1948;
		 pALocValue1947_ALV1947:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastpopRhs1942_ACR1942:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType1943_APT1943;
		myrec^.arg2:=pALocValue1947_ALV1947;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs1942_ACR1942:=myrec;
		END;
	FUNCTION pARhsValue1941_ARV1941:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs1942_ACR1942;
		 pARhsValue1941_ARV1941:=myrec;
		END;
		(*! Match s *)
	FUNCTION pAIdLoc1950_AIL1950:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc1950_AIL1950:=myrec;
		END;
		(*s *)
	FUNCTION pALocValue1949_ALV1949:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1950_AIL1950;
		 pALocValue1949_ALV1949:=myrec;
		END;
	FUNCTION pADyadicValue1939_ADV1939:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue1941_ARV1941;
		myrec^.arg2:=pALocValue1949_ALV1949;
		myrec^.fn:=pAIdentifierDyadic1940_AID1940;
		 pADyadicValue1939_ADV1939:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs1934_ACR1934:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType1935_APT1935;
		myrec^.arg2:=pADyadicValue1939_ADV1939;
		 pACastRhs1934_ACR1934:=myrec;
		END;
	FUNCTION pARhsValue1933_ARV1933:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs1934_ACR1934;
		 pARhsValue1933_ARV1933:=myrec;
		END;
	FUNCTION pADyadicValue1929_ADV1929:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue1931_ALV1931;
		myrec^.arg2:=pARhsValue1933_ARV1933;
		myrec^.fn:=pAPushDyadic1930_APD1930;
		 pADyadicValue1929_ADV1929:=myrec;
		END;
	FUNCTION pAValueMeaning1928_AVM1928:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue1929_ADV1929;
		 pAValueMeaning1928_AVM1928:=myrec;
		END;
	FUNCTION pAAssemblypattern1952_AA1952:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'  DWORD[esp] ,' );
		pappendp(list,1);
		pAAssemblypattern1952_AA1952:=list;
		END;
	FUNCTION pAAssemblesto1951_AA1951:pprintlist;
	begin
		pAAssemblesto1951_AA1951:=pAAssemblypattern1952_AA1952;
		END;
	FUNCTION pASideeffects1956_AS1956:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1956_AS1956:=nil;
		 pASideeffects1956_AS1956:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1957_AUP1957:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1957_AUP1957:=nil;
		 pAUnconditionalPrecond1957_AUP1957:=myrec;
		END;
	FUNCTION SMLIT_SMLIT:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patoffset_;
		params^[0]:=patnonmultoperator_;
		paramcount:=3;
		meaning:=pAValueMeaning1928_AVM1928;
		matchedAssembler:=pAAssemblesto1951_AA1951;
		END;
		SMLIT_SMLIT:=myrec;
	END;
	FUNCTION pATypeid1960_AT1960:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ nonmultoperator  ilcg.pattern@752144}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1960_AT1960:=myrec;
		END;
	FUNCTION pATypeid1962_AT1962:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ offset  ilcg.pattern@b0c5a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1962_AT1962:=myrec;
		END;
	FUNCTION pAPushDyadic1965_APD1965:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic1965_APD1965:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc1967_AIL1967:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc1967_AIL1967:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue1966_ALV1966:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1967_AIL1967;
		 pALocValue1966_ALV1966:=myrec;
		END;
	FUNCTION pASigned1973_AS1973:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned1973_AS1973:=myrec;
		END;
	FUNCTION pASignedTformat1972_AST1972:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned1973_AS1973;
		 pASignedTformat1972_AST1972:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1971_ATP1971:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype1971_ATP1971:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1970_APT1970:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType1970_APT1970:=myrec;
		END;
	FUNCTION pATimesDyadic1975_ATD1975:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcptimes;
		 pATimesDyadic1975_ATD1975:=myrec;
		END;
	FUNCTION pASigned1981_AS1981:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned1981_AS1981:=myrec;
		END;
	FUNCTION pASignedTformat1980_AST1980:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned1981_AS1981;
		 pASignedTformat1980_AST1980:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1979_ATP1979:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype1979_ATP1979:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1978_APT1978:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType1978_APT1978:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc1983_AIL1983:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc1983_AIL1983:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue1982_ALV1982:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1983_AIL1983;
		 pALocValue1982_ALV1982:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastpopRhs1977_ACR1977:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType1978_APT1978;
		myrec^.arg2:=pALocValue1982_ALV1982;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs1977_ACR1977:=myrec;
		END;
	FUNCTION pARhsValue1976_ARV1976:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs1977_ACR1977;
		 pARhsValue1976_ARV1976:=myrec;
		END;
		(*! Match s *)
	FUNCTION pAIdLoc1985_AIL1985:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc1985_AIL1985:=myrec;
		END;
		(*s *)
	FUNCTION pALocValue1984_ALV1984:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1985_AIL1985;
		 pALocValue1984_ALV1984:=myrec;
		END;
	FUNCTION pADyadicValue1974_ADV1974:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue1976_ARV1976;
		myrec^.arg2:=pALocValue1984_ALV1984;
		myrec^.fn:=pATimesDyadic1975_ATD1975;
		 pADyadicValue1974_ADV1974:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs1969_ACR1969:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType1970_APT1970;
		myrec^.arg2:=pADyadicValue1974_ADV1974;
		 pACastRhs1969_ACR1969:=myrec;
		END;
	FUNCTION pARhsValue1968_ARV1968:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs1969_ACR1969;
		 pARhsValue1968_ARV1968:=myrec;
		END;
	FUNCTION pADyadicValue1964_ADV1964:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue1966_ALV1966;
		myrec^.arg2:=pARhsValue1968_ARV1968;
		myrec^.fn:=pAPushDyadic1965_APD1965;
		 pADyadicValue1964_ADV1964:=myrec;
		END;
	FUNCTION pAValueMeaning1963_AVM1963:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue1964_ADV1964;
		 pAValueMeaning1963_AVM1963:=myrec;
		END;
	FUNCTION pAAssemblypattern1987_AA1987:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'xchg eax,DWORD[esp]\n imul eax ,' );
		pappendp(list,1);
		pappends(list,'\n xchg eax,DWORD[esp]' );
		pAAssemblypattern1987_AA1987:=list;
		END;
	FUNCTION pAAssemblesto1986_AA1986:pprintlist;
	begin
		pAAssemblesto1986_AA1986:=pAAssemblypattern1987_AA1987;
		END;
	FUNCTION pASideeffects1991_AS1991:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1991_AS1991:=nil;
		 pASideeffects1991_AS1991:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1992_AUP1992:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1992_AUP1992:=nil;
		 pAUnconditionalPrecond1992_AUP1992:=myrec;
		END;
	FUNCTION SMULIT_SMULIT:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patoffset_;
		params^[0]:=patnonmultoperator_;
		paramcount:=3;
		meaning:=pAValueMeaning1963_AVM1963;
		matchedAssembler:=pAAssemblesto1986_AA1986;
		END;
		SMULIT_SMULIT:=myrec;
	END;
	FUNCTION pATypeid1995_AT1995:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ saddoperator  ilcg.pattern@15b555}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1995_AT1995:=myrec;
		END;
	FUNCTION pAPushDyadic1998_APD1998:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic1998_APD1998:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2000_AIL2000:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2000_AIL2000:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue1999_ALV1999:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2000_AIL2000;
		 pALocValue1999_ALV1999:=myrec;
		END;
	FUNCTION pATypeid2004_AT2004:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ longint  ilcg.pattern@19bf996}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2004_AT2004:=myrec;
		END;
	FUNCTION pATypeidType2003_ATT2003:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2004_AT2004;
		 pATypeidType2003_ATT2003:=myrec;
		END;
	FUNCTION pAPlusDyadic2006_APD2006:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic2006_APD2006:=myrec;
		END;
	FUNCTION pATypeid2010_AT2010:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ longint  ilcg.pattern@19bf996}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2010_AT2010:=myrec;
		END;
	FUNCTION pATypeidType2009_ATT2009:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2010_AT2010;
		 pATypeidType2009_ATT2009:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2012_AIL2012:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2012_AIL2012:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2011_ALV2011:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2012_AIL2012;
		 pALocValue2011_ALV2011:=myrec;
		END;
		(*! try to cast to type: longint*)
	FUNCTION pACastpopRhs2008_ACR2008:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType2009_ATT2009;
		myrec^.arg2:=pALocValue2011_ALV2011;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs2008_ACR2008:=myrec;
		END;
	FUNCTION pARhsValue2007_ARV2007:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs2008_ACR2008;
		 pARhsValue2007_ARV2007:=myrec;
		END;
	FUNCTION pATypeid2016_AT2016:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ longint  ilcg.pattern@19bf996}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2016_AT2016:=myrec;
		END;
	FUNCTION pATypeidType2015_ATT2015:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2016_AT2016;
		 pATypeidType2015_ATT2015:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2018_AIL2018:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2018_AIL2018:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2017_ALV2017:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2018_AIL2018;
		 pALocValue2017_ALV2017:=myrec;
		END;
		(*! try to cast to type: longint*)
	FUNCTION pACastpopRhs2014_ACR2014:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType2015_ATT2015;
		myrec^.arg2:=pALocValue2017_ALV2017;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs2014_ACR2014:=myrec;
		END;
	FUNCTION pARhsValue2013_ARV2013:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs2014_ACR2014;
		 pARhsValue2013_ARV2013:=myrec;
		END;
	FUNCTION pADyadicValue2005_ADV2005:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue2007_ARV2007;
		myrec^.arg2:=pARhsValue2013_ARV2013;
		myrec^.fn:=pAPlusDyadic2006_APD2006;
		 pADyadicValue2005_ADV2005:=myrec;
		END;
		(*! try to cast to type: longint*)
	FUNCTION pACastRhs2002_ACR2002:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType2003_ATT2003;
		myrec^.arg2:=pADyadicValue2005_ADV2005;
		 pACastRhs2002_ACR2002:=myrec;
		END;
	FUNCTION pARhsValue2001_ARV2001:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2002_ACR2002;
		 pARhsValue2001_ARV2001:=myrec;
		END;
	FUNCTION pADyadicValue1997_ADV1997:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue1999_ALV1999;
		myrec^.arg2:=pARhsValue2001_ARV2001;
		myrec^.fn:=pAPushDyadic1998_APD1998;
		 pADyadicValue1997_ADV1997:=myrec;
		END;
	FUNCTION pAValueMeaning1996_AVM1996:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue1997_ADV1997;
		 pAValueMeaning1996_AVM1996:=myrec;
		END;
	FUNCTION pAAssemblypattern2020_AA2020:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'xchg eax,DWORD[esp]\n add DWORD[esp+4],eax\n pop eax' );
		pAAssemblypattern2020_AA2020:=list;
		END;
	FUNCTION pAAssemblesto2019_AA2019:pprintlist;
	begin
		pAAssemblesto2019_AA2019:=pAAssemblypattern2020_AA2020;
		END;
	FUNCTION pASideeffects2022_AS2022:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2022_AS2022:=nil;
		 pASideeffects2022_AS2022:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2023_AUP2023:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2023_AUP2023:=nil;
		 pAUnconditionalPrecond2023_AUP2023:=myrec;
		END;
	FUNCTION SADD_SADD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patsaddoperator_;
		paramcount:=2;
		meaning:=pAValueMeaning1996_AVM1996;
		matchedAssembler:=pAAssemblesto2019_AA2019;
		END;
		SADD_SADD:=myrec;
	END;
	FUNCTION pATypeid2026_AT2026:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ saddoperator  ilcg.pattern@15b555}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2026_AT2026:=myrec;
		END;
	FUNCTION pAPushDyadic2029_APD2029:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic2029_APD2029:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2031_AIL2031:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2031_AIL2031:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2030_ALV2030:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2031_AIL2031;
		 pALocValue2030_ALV2030:=myrec;
		END;
	FUNCTION pATypeid2035_AT2035:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ longint  ilcg.pattern@19bf996}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2035_AT2035:=myrec;
		END;
	FUNCTION pATypeidType2034_ATT2034:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2035_AT2035;
		 pATypeidType2034_ATT2034:=myrec;
		END;
	FUNCTION pAIdentifierDyadic2037_AID2037:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic2037_AID2037:=myrec;
		END;
	FUNCTION pATypeid2041_AT2041:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ longint  ilcg.pattern@19bf996}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2041_AT2041:=myrec;
		END;
	FUNCTION pATypeidType2040_ATT2040:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2041_AT2041;
		 pATypeidType2040_ATT2040:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2043_AIL2043:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2043_AIL2043:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2042_ALV2042:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2043_AIL2043;
		 pALocValue2042_ALV2042:=myrec;
		END;
		(*! try to cast to type: longint*)
	FUNCTION pACastpopRhs2039_ACR2039:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType2040_ATT2040;
		myrec^.arg2:=pALocValue2042_ALV2042;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs2039_ACR2039:=myrec;
		END;
	FUNCTION pARhsValue2038_ARV2038:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs2039_ACR2039;
		 pARhsValue2038_ARV2038:=myrec;
		END;
	FUNCTION pATypeid2047_AT2047:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ longint  ilcg.pattern@19bf996}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2047_AT2047:=myrec;
		END;
	FUNCTION pATypeidType2046_ATT2046:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2047_AT2047;
		 pATypeidType2046_ATT2046:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2049_AIL2049:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2049_AIL2049:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2048_ALV2048:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2049_AIL2049;
		 pALocValue2048_ALV2048:=myrec;
		END;
		(*! try to cast to type: longint*)
	FUNCTION pACastpopRhs2045_ACR2045:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType2046_ATT2046;
		myrec^.arg2:=pALocValue2048_ALV2048;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs2045_ACR2045:=myrec;
		END;
	FUNCTION pARhsValue2044_ARV2044:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs2045_ACR2045;
		 pARhsValue2044_ARV2044:=myrec;
		END;
	FUNCTION pADyadicValue2036_ADV2036:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue2038_ARV2038;
		myrec^.arg2:=pARhsValue2044_ARV2044;
		myrec^.fn:=pAIdentifierDyadic2037_AID2037;
		 pADyadicValue2036_ADV2036:=myrec;
		END;
		(*! try to cast to type: longint*)
	FUNCTION pACastRhs2033_ACR2033:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType2034_ATT2034;
		myrec^.arg2:=pADyadicValue2036_ADV2036;
		 pACastRhs2033_ACR2033:=myrec;
		END;
	FUNCTION pARhsValue2032_ARV2032:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2033_ACR2033;
		 pARhsValue2032_ARV2032:=myrec;
		END;
	FUNCTION pADyadicValue2028_ADV2028:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue2030_ALV2030;
		myrec^.arg2:=pARhsValue2032_ARV2032;
		myrec^.fn:=pAPushDyadic2029_APD2029;
		 pADyadicValue2028_ADV2028:=myrec;
		END;
	FUNCTION pAValueMeaning2027_AVM2027:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue2028_ADV2028;
		 pAValueMeaning2027_AVM2027:=myrec;
		END;
	FUNCTION pAAssemblypattern2051_AA2051:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'xchg eax,DWORD[esp]\n ' );
		pappendp(list,0);
		pappends(list,' eax,DWORD[esp+4]\n mov DWORD[esp+4],eax\n pop eax' );
		pAAssemblypattern2051_AA2051:=list;
		END;
	FUNCTION pAAssemblesto2050_AA2050:pprintlist;
	begin
		pAAssemblesto2050_AA2050:=pAAssemblypattern2051_AA2051;
		END;
	FUNCTION pASideeffects2055_AS2055:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2055_AS2055:=nil;
		 pASideeffects2055_AS2055:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2056_AUP2056:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2056_AUP2056:=nil;
		 pAUnconditionalPrecond2056_AUP2056:=myrec;
		END;
	FUNCTION SOP_SOP:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patsaddoperator_;
		paramcount:=2;
		meaning:=pAValueMeaning2027_AVM2027;
		matchedAssembler:=pAAssemblesto2050_AA2050;
		END;
		SOP_SOP:=myrec;
	END;
	FUNCTION pATypeid2059_AT2059:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ nonmultoperator  ilcg.pattern@752144}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2059_AT2059:=myrec;
		END;
	FUNCTION pATypeid2061_AT2061:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2061_AT2061:=myrec;
		END;
	FUNCTION pAPushDyadic2064_APD2064:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic2064_APD2064:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2066_AIL2066:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2066_AIL2066:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2065_ALV2065:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2066_AIL2066;
		 pALocValue2065_ALV2065:=myrec;
		END;
	FUNCTION pASigned2072_AS2072:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned2072_AS2072:=myrec;
		END;
	FUNCTION pASignedTformat2071_AST2071:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned2072_AS2072;
		 pASignedTformat2071_AST2071:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype2070_ATP2070:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype2070_ATP2070:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2069_APT2069:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType2069_APT2069:=myrec;
		END;
	FUNCTION pAIdentifierDyadic2074_AID2074:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic2074_AID2074:=myrec;
		END;
	FUNCTION pATypeid2078_AT2078:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ longint  ilcg.pattern@19bf996}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2078_AT2078:=myrec;
		END;
	FUNCTION pATypeidType2077_ATT2077:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2078_AT2078;
		 pATypeidType2077_ATT2077:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2080_AIL2080:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2080_AIL2080:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2079_ALV2079:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2080_AIL2080;
		 pALocValue2079_ALV2079:=myrec;
		END;
		(*! try to cast to type: longint*)
	FUNCTION pACastpopRhs2076_ACR2076:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType2077_ATT2077;
		myrec^.arg2:=pALocValue2079_ALV2079;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs2076_ACR2076:=myrec;
		END;
	FUNCTION pARhsValue2075_ARV2075:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs2076_ACR2076;
		 pARhsValue2075_ARV2075:=myrec;
		END;
	FUNCTION pATypeid2084_AT2084:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ longint  ilcg.pattern@19bf996}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2084_AT2084:=myrec;
		END;
	FUNCTION pATypeidType2083_ATT2083:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2084_AT2084;
		 pATypeidType2083_ATT2083:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc2088_AIL2088:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc2088_AIL2088:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2087_AR2087:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2088_AIL2088;
		 pARefval2087_AR2087:=myrec;
		END;
	FUNCTION pADerefRhs2086_ADR2086:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2087_AR2087;
		 pADerefRhs2086_ADR2086:=myrec;
		END;
	FUNCTION pARhsValue2085_ARV2085:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2086_ADR2086;
		 pARhsValue2085_ARV2085:=myrec;
		END;
		(*! try to cast to type: longint*)
	FUNCTION pACastRhs2082_ACR2082:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType2083_ATT2083;
		myrec^.arg2:=pARhsValue2085_ARV2085;
		 pACastRhs2082_ACR2082:=myrec;
		END;
	FUNCTION pARhsValue2081_ARV2081:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2082_ACR2082;
		 pARhsValue2081_ARV2081:=myrec;
		END;
	FUNCTION pADyadicValue2073_ADV2073:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue2075_ARV2075;
		myrec^.arg2:=pARhsValue2081_ARV2081;
		myrec^.fn:=pAIdentifierDyadic2074_AID2074;
		 pADyadicValue2073_ADV2073:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs2068_ACR2068:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2069_APT2069;
		myrec^.arg2:=pADyadicValue2073_ADV2073;
		 pACastRhs2068_ACR2068:=myrec;
		END;
	FUNCTION pARhsValue2067_ARV2067:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2068_ACR2068;
		 pARhsValue2067_ARV2067:=myrec;
		END;
	FUNCTION pADyadicValue2063_ADV2063:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue2065_ALV2065;
		myrec^.arg2:=pARhsValue2067_ARV2067;
		myrec^.fn:=pAPushDyadic2064_APD2064;
		 pADyadicValue2063_ADV2063:=myrec;
		END;
	FUNCTION pAValueMeaning2062_AVM2062:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue2063_ADV2063;
		 pAValueMeaning2062_AVM2062:=myrec;
		END;
	FUNCTION pAAssemblypattern2090_AA2090:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'  DWORD[esp] ,' );
		pappendp(list,1);
		pAAssemblypattern2090_AA2090:=list;
		END;
	FUNCTION pAAssemblesto2089_AA2089:pprintlist;
	begin
		pAAssemblesto2089_AA2089:=pAAssemblypattern2090_AA2090;
		END;
	FUNCTION pASideeffects2094_AS2094:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2094_AS2094:=nil;
		 pASideeffects2094_AS2094:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2095_AUP2095:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2095_AUP2095:=nil;
		 pAUnconditionalPrecond2095_AUP2095:=myrec;
		END;
	FUNCTION SMR_SMR:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patreg_;
		params^[0]:=patnonmultoperator_;
		paramcount:=3;
		meaning:=pAValueMeaning2062_AVM2062;
		matchedAssembler:=pAAssemblesto2089_AA2089;
		END;
		SMR_SMR:=myrec;
	END;
	FUNCTION pATypeid2098_AT2098:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ shiftop  ilcg.pattern@47c130}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2098_AT2098:=myrec;
		END;
	FUNCTION pATypeid2100_AT2100:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ shiftcountreg  ilcg.pattern@1f95673}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2100_AT2100:=myrec;
		END;
	FUNCTION pAPushDyadic2103_APD2103:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic2103_APD2103:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2105_AIL2105:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2105_AIL2105:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2104_ALV2104:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2105_AIL2105;
		 pALocValue2104_ALV2104:=myrec;
		END;
	FUNCTION pAIdentifierDyadic2107_AID2107:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic2107_AID2107:=myrec;
		END;
	FUNCTION pASigned2113_AS2113:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned2113_AS2113:=myrec;
		END;
	FUNCTION pASignedTformat2112_AST2112:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned2113_AS2113;
		 pASignedTformat2112_AST2112:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype2111_ATP2111:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype2111_ATP2111:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2110_APT2110:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType2110_APT2110:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2115_AIL2115:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2115_AIL2115:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2114_ALV2114:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2115_AIL2115;
		 pALocValue2114_ALV2114:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastpopRhs2109_ACR2109:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2110_APT2110;
		myrec^.arg2:=pALocValue2114_ALV2114;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs2109_ACR2109:=myrec;
		END;
	FUNCTION pARhsValue2108_ARV2108:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs2109_ACR2109;
		 pARhsValue2108_ARV2108:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc2119_AIL2119:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc2119_AIL2119:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2118_AR2118:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2119_AIL2119;
		 pARefval2118_AR2118:=myrec;
		END;
	FUNCTION pADerefRhs2117_ADR2117:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2118_AR2118;
		 pADerefRhs2117_ADR2117:=myrec;
		END;
	FUNCTION pARhsValue2116_ARV2116:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2117_ADR2117;
		 pARhsValue2116_ARV2116:=myrec;
		END;
	FUNCTION pADyadicValue2106_ADV2106:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue2108_ARV2108;
		myrec^.arg2:=pARhsValue2116_ARV2116;
		myrec^.fn:=pAIdentifierDyadic2107_AID2107;
		 pADyadicValue2106_ADV2106:=myrec;
		END;
	FUNCTION pADyadicValue2102_ADV2102:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue2104_ALV2104;
		myrec^.arg2:=pADyadicValue2106_ADV2106;
		myrec^.fn:=pAPushDyadic2103_APD2103;
		 pADyadicValue2102_ADV2102:=myrec;
		END;
	FUNCTION pAValueMeaning2101_AVM2101:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue2102_ADV2102;
		 pAValueMeaning2101_AVM2101:=myrec;
		END;
	FUNCTION pAAssemblypattern2121_AA2121:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'xchg eax, [esp]\n' );
		pappends(list,'sh' );
		pappendp(list,0);
		pappends(list,'  eax ,cl' );
		pappends(list,'\n xchg eax,[esp]' );
		pAAssemblypattern2121_AA2121:=list;
		END;
	FUNCTION pAAssemblesto2120_AA2120:pprintlist;
	begin
		pAAssemblesto2120_AA2120:=pAAssemblypattern2121_AA2121;
		END;
	FUNCTION pASideeffects2127_AS2127:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2127_AS2127:=nil;
		 pASideeffects2127_AS2127:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2128_AUP2128:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2128_AUP2128:=nil;
		 pAUnconditionalPrecond2128_AUP2128:=myrec;
		END;
	FUNCTION SMRSHIFT_SMRSHIFT:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patshiftcountreg_;
		params^[0]:=patshiftop_;
		paramcount:=3;
		meaning:=pAValueMeaning2101_AVM2101;
		matchedAssembler:=pAAssemblesto2120_AA2120;
		END;
		SMRSHIFT_SMRSHIFT:=myrec;
	END;
	FUNCTION pATypeid2131_AT2131:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ nonmultoperator  ilcg.pattern@752144}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2131_AT2131:=myrec;
		END;
	FUNCTION pATypeid2133_AT2133:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2133_AT2133:=myrec;
		END;
	FUNCTION pAPushDyadic2136_APD2136:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic2136_APD2136:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2138_AIL2138:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2138_AIL2138:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2137_ALV2137:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2138_AIL2138;
		 pALocValue2137_ALV2137:=myrec;
		END;
	FUNCTION pAOctetFormat2143_AOF2143:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat2143_AOF2143:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype2142_AFP2142:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype2142_AFP2142:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2141_APT2141:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAPredeclaredtypeType2141_APT2141:=myrec;
		END;
	FUNCTION pAIdentifierDyadic2145_AID2145:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic2145_AID2145:=myrec;
		END;
	FUNCTION pAInt8Signed2151_AI8S2151:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed2151_AI8S2151:=myrec;
		END;
	FUNCTION pASignedTformat2150_AST2150:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed2151_AI8S2151;
		 pASignedTformat2150_AST2150:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype2149_ATP2149:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype2149_ATP2149:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2148_APT2148:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType2148_APT2148:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2153_AIL2153:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2153_AIL2153:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2152_ALV2152:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2153_AIL2153;
		 pALocValue2152_ALV2152:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastpopRhs2147_ACR2147:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2148_APT2148;
		myrec^.arg2:=pALocValue2152_ALV2152;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs2147_ACR2147:=myrec;
		END;
	FUNCTION pARhsValue2146_ARV2146:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs2147_ACR2147;
		 pARhsValue2146_ARV2146:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc2157_AIL2157:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc2157_AIL2157:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2156_AR2156:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2157_AIL2157;
		 pARefval2156_AR2156:=myrec;
		END;
	FUNCTION pADerefRhs2155_ADR2155:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2156_AR2156;
		 pADerefRhs2155_ADR2155:=myrec;
		END;
	FUNCTION pARhsValue2154_ARV2154:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2155_ADR2155;
		 pARhsValue2154_ARV2154:=myrec;
		END;
	FUNCTION pADyadicValue2144_ADV2144:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue2146_ARV2146;
		myrec^.arg2:=pARhsValue2154_ARV2154;
		myrec^.fn:=pAIdentifierDyadic2145_AID2145;
		 pADyadicValue2144_ADV2144:=myrec;
		END;
		(*! try to cast to type: octet*)
	FUNCTION pACastRhs2140_ACR2140:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2141_APT2141;
		myrec^.arg2:=pADyadicValue2144_ADV2144;
		 pACastRhs2140_ACR2140:=myrec;
		END;
	FUNCTION pARhsValue2139_ARV2139:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2140_ACR2140;
		 pARhsValue2139_ARV2139:=myrec;
		END;
	FUNCTION pADyadicValue2135_ADV2135:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue2137_ALV2137;
		myrec^.arg2:=pARhsValue2139_ARV2139;
		myrec^.fn:=pAPushDyadic2136_APD2136;
		 pADyadicValue2135_ADV2135:=myrec;
		END;
	FUNCTION pAValueMeaning2134_AVM2134:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue2135_ADV2135;
		 pAValueMeaning2134_AVM2134:=myrec;
		END;
	FUNCTION pAAssemblypattern2159_AA2159:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'  byte[esp] ,' );
		pappendp(list,1);
		pAAssemblypattern2159_AA2159:=list;
		END;
	FUNCTION pAAssemblesto2158_AA2158:pprintlist;
	begin
		pAAssemblesto2158_AA2158:=pAAssemblypattern2159_AA2159;
		END;
	FUNCTION pASideeffects2163_AS2163:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2163_AS2163:=nil;
		 pASideeffects2163_AS2163:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2164_AUP2164:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2164_AUP2164:=nil;
		 pAUnconditionalPrecond2164_AUP2164:=myrec;
		END;
	FUNCTION BSMR_BSMR:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbreg_;
		params^[0]:=patnonmultoperator_;
		paramcount:=3;
		meaning:=pAValueMeaning2134_AVM2134;
		matchedAssembler:=pAAssemblesto2158_AA2158;
		END;
		BSMR_BSMR:=myrec;
	END;
	FUNCTION pATypeid2167_AT2167:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2167_AT2167:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc2171_AIL2171:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2171_AIL2171:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2170_AR2170:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2171_AIL2171;
		 pARefval2170_AR2170:=myrec;
		END;
	FUNCTION pASigned2177_AS2177:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned2177_AS2177:=myrec;
		END;
	FUNCTION pASignedTformat2176_AST2176:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned2177_AS2177;
		 pASignedTformat2176_AST2176:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype2175_ATP2175:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype2175_ATP2175:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2174_APT2174:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType2174_APT2174:=myrec;
		END;
	FUNCTION pAPlusDyadic2179_APD2179:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic2179_APD2179:=myrec;
		END;
	FUNCTION pATypeid2183_AT2183:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ longint  ilcg.pattern@19bf996}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2183_AT2183:=myrec;
		END;
	FUNCTION pATypeidType2182_ATT2182:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2183_AT2183;
		 pATypeidType2182_ATT2182:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2185_AIL2185:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2185_AIL2185:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2184_ALV2184:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2185_AIL2185;
		 pALocValue2184_ALV2184:=myrec;
		END;
		(*! try to cast to type: longint*)
	FUNCTION pACastpopRhs2181_ACR2181:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType2182_ATT2182;
		myrec^.arg2:=pALocValue2184_ALV2184;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs2181_ACR2181:=myrec;
		END;
	FUNCTION pARhsValue2180_ARV2180:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs2181_ACR2181;
		 pARhsValue2180_ARV2180:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc2189_AIL2189:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2189_AIL2189:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2188_AR2188:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2189_AIL2189;
		 pARefval2188_AR2188:=myrec;
		END;
	FUNCTION pADerefRhs2187_ADR2187:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2188_AR2188;
		 pADerefRhs2187_ADR2187:=myrec;
		END;
	FUNCTION pARhsValue2186_ARV2186:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2187_ADR2187;
		 pARhsValue2186_ARV2186:=myrec;
		END;
	FUNCTION pADyadicValue2178_ADV2178:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue2180_ARV2180;
		myrec^.arg2:=pARhsValue2186_ARV2186;
		myrec^.fn:=pAPlusDyadic2179_APD2179;
		 pADyadicValue2178_ADV2178:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs2173_ACR2173:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2174_APT2174;
		myrec^.arg2:=pADyadicValue2178_ADV2178;
		 pACastRhs2173_ACR2173:=myrec;
		END;
	FUNCTION pARhsValue2172_ARV2172:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2173_ACR2173;
		 pARhsValue2172_ARV2172:=myrec;
		END;
	FUNCTION pAAssign2169_AA2169:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue2172_ARV2172;
		myrec^.dest:=pARefval2170_AR2170;
		 pAAssign2169_AA2169:=myrec;
		END;
	FUNCTION pAAssignMeaning2168_AAM2168:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2169_AA2169;
		 pAAssignMeaning2168_AAM2168:=myrec;
		END;
	FUNCTION pAAssemblypattern2191_AA2191:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'add ' );
		pappendp(list,0);
		pappends(list,',DWORD[esp] \n add esp,4' );
		pAAssemblypattern2191_AA2191:=list;
		END;
	FUNCTION pAAssemblesto2190_AA2190:pprintlist;
	begin
		pAAssemblesto2190_AA2190:=pAAssemblypattern2191_AA2191;
		END;
	FUNCTION pASideeffects2195_AS2195:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2195_AS2195:=nil;
		 pASideeffects2195_AS2195:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2196_AUP2196:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2196_AUP2196:=nil;
		 pAUnconditionalPrecond2196_AUP2196:=myrec;
		END;
	FUNCTION SMRADD_SMRADD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		paramcount:=2;
		meaning:=pAAssignMeaning2168_AAM2168;
		matchedAssembler:=pAAssemblesto2190_AA2190;
		END;
		SMRADD_SMRADD:=myrec;
	END;
	FUNCTION pATypeid2199_AT2199:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ nonmultoperator  ilcg.pattern@752144}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2199_AT2199:=myrec;
		END;
	FUNCTION pATypeid2201_AT2201:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2201_AT2201:=myrec;
		END;
	FUNCTION pAPushDyadic2206_APD2206:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic2206_APD2206:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2208_AIL2208:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2208_AIL2208:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2207_ALV2207:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2208_AIL2208;
		 pALocValue2207_ALV2207:=myrec;
		END;
	FUNCTION pATypeid2214_AT2214:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@1d7e4d6}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid2214_AT2214:=myrec;
		END;
	FUNCTION pATypeidType2213_ATT2213:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2214_AT2214;
		 pATypeidType2213_ATT2213:=myrec;
		END;
	FUNCTION pAReference2212_AR2212:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType2213_ATT2213;
		 pAReference2212_AR2212:=myrec;
		END;
	FUNCTION pAReftypeType2211_ART2211:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference2212_AR2212;
		 pAReftypeType2211_ART2211:=myrec;
		END;
	FUNCTION pAIdentifierDyadic2216_AID2216:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic2216_AID2216:=myrec;
		END;
	FUNCTION pATypeid2220_AT2220:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ longint  ilcg.pattern@19bf996}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2220_AT2220:=myrec;
		END;
	FUNCTION pATypeidType2219_ATT2219:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2220_AT2220;
		 pATypeidType2219_ATT2219:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2222_AIL2222:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2222_AIL2222:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2221_ALV2221:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2222_AIL2222;
		 pALocValue2221_ALV2221:=myrec;
		END;
		(*! try to cast to type: longint*)
	FUNCTION pACastpopRhs2218_ACR2218:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType2219_ATT2219;
		myrec^.arg2:=pALocValue2221_ALV2221;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs2218_ACR2218:=myrec;
		END;
	FUNCTION pARhsValue2217_ARV2217:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs2218_ACR2218;
		 pARhsValue2217_ARV2217:=myrec;
		END;
	FUNCTION pATypeid2226_AT2226:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ longint  ilcg.pattern@19bf996}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2226_AT2226:=myrec;
		END;
	FUNCTION pATypeidType2225_ATT2225:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2226_AT2226;
		 pATypeidType2225_ATT2225:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc2230_AIL2230:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc2230_AIL2230:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2229_AR2229:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2230_AIL2230;
		 pARefval2229_AR2229:=myrec;
		END;
	FUNCTION pADerefRhs2228_ADR2228:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2229_AR2229;
		 pADerefRhs2228_ADR2228:=myrec;
		END;
	FUNCTION pARhsValue2227_ARV2227:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2228_ADR2228;
		 pARhsValue2227_ARV2227:=myrec;
		END;
		(*! try to cast to type: longint*)
	FUNCTION pACastRhs2224_ACR2224:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType2225_ATT2225;
		myrec^.arg2:=pARhsValue2227_ARV2227;
		 pACastRhs2224_ACR2224:=myrec;
		END;
	FUNCTION pARhsValue2223_ARV2223:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2224_ACR2224;
		 pARhsValue2223_ARV2223:=myrec;
		END;
	FUNCTION pADyadicValue2215_ADV2215:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue2217_ARV2217;
		myrec^.arg2:=pARhsValue2223_ARV2223;
		myrec^.fn:=pAIdentifierDyadic2216_AID2216;
		 pADyadicValue2215_ADV2215:=myrec;
		END;
		(*! try to cast to type: ref t*)
	FUNCTION pACastRhs2210_ACR2210:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType2211_ART2211;
		myrec^.arg2:=pADyadicValue2215_ADV2215;
		 pACastRhs2210_ACR2210:=myrec;
		END;
	FUNCTION pARhsValue2209_ARV2209:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2210_ACR2210;
		 pARhsValue2209_ARV2209:=myrec;
		END;
	FUNCTION pADyadicValue2205_ADV2205:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue2207_ALV2207;
		myrec^.arg2:=pARhsValue2209_ARV2209;
		myrec^.fn:=pAPushDyadic2206_APD2206;
		 pADyadicValue2205_ADV2205:=myrec;
		END;
	FUNCTION pAValueMeaning2204_AVM2204:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue2205_ADV2205;
		 pAValueMeaning2204_AVM2204:=myrec;
		END;
	FUNCTION pAAssemblypattern2232_AA2232:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'  DWORD[esp] ,' );
		pappendp(list,1);
		pAAssemblypattern2232_AA2232:=list;
		END;
	FUNCTION pAAssemblesto2231_AA2231:pprintlist;
	begin
		pAAssemblesto2231_AA2231:=pAAssemblypattern2232_AA2232;
		END;
	FUNCTION pASideeffects2236_AS2236:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2236_AS2236:=nil;
		 pASideeffects2236_AS2236:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2237_AUP2237:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2237_AUP2237:=nil;
		 pAUnconditionalPrecond2237_AUP2237:=myrec;
		END;
	FUNCTION SMRP_SMRP:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patreg_;
		params^[2]:=typeparam;
		params^[0]:=patnonmultoperator_;
		paramcount:=4;
		meaning:=pAValueMeaning2204_AVM2204;
		matchedAssembler:=pAAssemblesto2231_AA2231;
		END;
		SMRP_SMRP:=myrec;
	END;
	FUNCTION pATypeid2240_AT2240:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ dpushreg  ilcg.pattern@16cdbb8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2240_AT2240:=myrec;
		END;
	FUNCTION pAPushDyadic2243_APD2243:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic2243_APD2243:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2245_AIL2245:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2245_AIL2245:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2244_ALV2244:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2245_AIL2245;
		 pALocValue2244_ALV2244:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc2249_AIL2249:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2249_AIL2249:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2248_AR2248:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2249_AIL2249;
		 pARefval2248_AR2248:=myrec;
		END;
	FUNCTION pADerefRhs2247_ADR2247:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2248_AR2248;
		 pADerefRhs2247_ADR2247:=myrec;
		END;
	FUNCTION pARhsValue2246_ARV2246:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2247_ADR2247;
		 pARhsValue2246_ARV2246:=myrec;
		END;
	FUNCTION pADyadicValue2242_ADV2242:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue2244_ALV2244;
		myrec^.arg2:=pARhsValue2246_ARV2246;
		myrec^.fn:=pAPushDyadic2243_APD2243;
		 pADyadicValue2242_ADV2242:=myrec;
		END;
	FUNCTION pAValueMeaning2241_AVM2241:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue2242_ADV2242;
		 pAValueMeaning2241_AVM2241:=myrec;
		END;
	FUNCTION pAAssemblypattern2251_AA2251:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'push ' );
		pappendp(list,0);
		pAAssemblypattern2251_AA2251:=list;
		END;
	FUNCTION pAAssemblesto2250_AA2250:pprintlist;
	begin
		pAAssemblesto2250_AA2250:=pAAssemblypattern2251_AA2251;
		END;
	FUNCTION pASideeffects2254_AS2254:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2254_AS2254:=nil;
		 pASideeffects2254_AS2254:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2255_AUP2255:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2255_AUP2255:=nil;
		 pAUnconditionalPrecond2255_AUP2255:=myrec;
		END;
	FUNCTION RPUSH_RPUSH:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patdpushreg_;
		paramcount:=2;
		meaning:=pAValueMeaning2241_AVM2241;
		matchedAssembler:=pAAssemblesto2250_AA2250;
		END;
		RPUSH_RPUSH:=myrec;
	END;
	FUNCTION pATypeid2258_AT2258:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ureg  ilcg.pattern@453dd5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2258_AT2258:=myrec;
		END;
	FUNCTION pATypeid2260_AT2260:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ integer64  ilcg.pattern@1c68e73}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2260_AT2260:=myrec;
		END;
	FUNCTION pAPushDyadic2263_APD2263:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic2263_APD2263:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2265_AIL2265:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2265_AIL2265:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2264_ALV2264:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2265_AIL2265;
		 pALocValue2264_ALV2264:=myrec;
		END;
	FUNCTION pATypeid2269_AT2269:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@93c5e7}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid2269_AT2269:=myrec;
		END;
	FUNCTION pATypeidType2268_ATT2268:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2269_AT2269;
		 pATypeidType2268_ATT2268:=myrec;
		END;
	FUNCTION pAExtendMonadic2271_AEM2271:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpEXTEND;
		 pAExtendMonadic2271_AEM2271:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc2275_AIL2275:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2275_AIL2275:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2274_AR2274:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2275_AIL2275;
		 pARefval2274_AR2274:=myrec;
		END;
	FUNCTION pADerefRhs2273_ADR2273:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2274_AR2274;
		 pADerefRhs2273_ADR2273:=myrec;
		END;
	FUNCTION pARhsValue2272_ARV2272:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2273_ADR2273;
		 pARhsValue2272_ARV2272:=myrec;
		END;
	FUNCTION pAMonadicValue2270_AMV2270:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue2272_ARV2272;
		myrec^.fn:=pAExtendMonadic2271_AEM2271;
		 pAMonadicValue2270_AMV2270:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs2267_ACR2267:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType2268_ATT2268;
		myrec^.arg2:=pAMonadicValue2270_AMV2270;
		 pACastRhs2267_ACR2267:=myrec;
		END;
	FUNCTION pARhsValue2266_ARV2266:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2267_ACR2267;
		 pARhsValue2266_ARV2266:=myrec;
		END;
	FUNCTION pADyadicValue2262_ADV2262:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue2264_ALV2264;
		myrec^.arg2:=pARhsValue2266_ARV2266;
		myrec^.fn:=pAPushDyadic2263_APD2263;
		 pADyadicValue2262_ADV2262:=myrec;
		END;
	FUNCTION pAValueMeaning2261_AVM2261:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue2262_ADV2262;
		 pAValueMeaning2261_AVM2261:=myrec;
		END;
	FUNCTION pAAssemblypattern2277_AA2277:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,' push dword 0 ; extend ' );
		pappendp(list,0);
		pappends(list,' to 64' );
		pappends(list,'\n push ' );
		pappendp(list,0);
		pAAssemblypattern2277_AA2277:=list;
		END;
	FUNCTION pAAssemblesto2276_AA2276:pprintlist;
	begin
		pAAssemblesto2276_AA2276:=pAAssemblypattern2277_AA2277;
		END;
	FUNCTION pASideeffects2283_AS2283:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2283_AS2283:=nil;
		 pASideeffects2283_AS2283:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2284_AUP2284:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2284_AUP2284:=nil;
		 pAUnconditionalPrecond2284_AUP2284:=myrec;
		END;
	FUNCTION RPUSHE_RPUSHE:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patinteger64_64;
		params^[0]:=patureg_;
		paramcount:=3;
		meaning:=pAValueMeaning2261_AVM2261;
		matchedAssembler:=pAAssemblesto2276_AA2276;
		END;
		RPUSHE_RPUSHE:=myrec;
	END;
	FUNCTION pATypeid2289_AT2289:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ eadxu  ilcg.pattern@37e21f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2289_AT2289:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc2293_AIL2293:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc2293_AIL2293:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2292_AR2292:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2293_AIL2293;
		 pARefval2292_AR2292:=myrec;
		END;
	FUNCTION pAUint64Unsigned2299_AU64U2299:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint64;
		 pAUint64Unsigned2299_AU64U2299:=myrec;
		END;
	FUNCTION pAUnsignedTformat2298_AUT2298:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint64Unsigned2299_AU64U2299;
		 pAUnsignedTformat2298_AUT2298:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype2297_ATP2297:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint64 ;
		 pATformatPredeclaredtype2297_ATP2297:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2296_APT2296:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint64 ;
		 pAPredeclaredtypeType2296_APT2296:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2301_AIL2301:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2301_AIL2301:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2300_ALV2300:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2301_AIL2301;
		 pALocValue2300_ALV2300:=myrec;
		END;
		(*! try to cast to type: uint64*)
	FUNCTION pACastpopRhs2295_ACR2295:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2296_APT2296;
		myrec^.arg2:=pALocValue2300_ALV2300;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs2295_ACR2295:=myrec;
		END;
	FUNCTION pARhsValue2294_ARV2294:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs2295_ACR2295;
		 pARhsValue2294_ARV2294:=myrec;
		END;
	FUNCTION pAAssign2291_AA2291:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue2294_ARV2294;
		myrec^.dest:=pARefval2292_AR2292;
		 pAAssign2291_AA2291:=myrec;
		END;
	FUNCTION pAAssignMeaning2290_AAM2290:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2291_AA2291;
		 pAAssignMeaning2290_AAM2290:=myrec;
		END;
	FUNCTION pAAssemblypattern2303_AA2303:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'pop eax\n pop edx' );
		pAAssemblypattern2303_AA2303:=list;
		END;
	FUNCTION pAAssemblesto2302_AA2302:pprintlist;
	begin
		pAAssemblesto2302_AA2302:=pAAssemblypattern2303_AA2303;
		END;
	FUNCTION pASideeffects2305_AS2305:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2305_AS2305:=nil;
		 pASideeffects2305_AS2305:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2306_AUP2306:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2306_AUP2306:=nil;
		 pAUnconditionalPrecond2306_AUP2306:=myrec;
		END;
	FUNCTION POPEADXu_POPEADX:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		params^[1]:=pateadxu_;
		paramcount:=3;
		meaning:=pAAssignMeaning2290_AAM2290;
		matchedAssembler:=pAAssemblesto2302_AA2302;
		END;
		POPEADXu_POPEADX:=myrec;
	END;
	FUNCTION pATypeid2309_AT2309:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ eadxu  ilcg.pattern@37e21f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2309_AT2309:=myrec;
		END;
	FUNCTION pATypeid2311_AT2311:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ destreg  ilcg.pattern@250cce}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2311_AT2311:=myrec;
		END;
	FUNCTION pAUint64Unsigned2320_AU64U2320:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint64;
		 pAUint64Unsigned2320_AU64U2320:=myrec;
		END;
	FUNCTION pAUnsignedTformat2319_AUT2319:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint64Unsigned2320_AU64U2320;
		 pAUnsignedTformat2319_AUT2319:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype2318_ATP2318:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint64 ;
		 pATformatPredeclaredtype2318_ATP2318:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2317_APT2317:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint64 ;
		 pAPredeclaredtypeType2317_APT2317:=myrec;
		END;
	FUNCTION pAReference2316_AR2316:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType2317_APT2317;
		 pAReference2316_AR2316:=myrec;
		END;
	FUNCTION pAReftypeType2315_ART2315:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference2316_AR2316;
		 pAReftypeType2315_ART2315:=myrec;
		END;
		(*! Match d *)
	FUNCTION pAIdLoc2325_AIL2325:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc2325_AIL2325:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2324_AR2324:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2325_AIL2325;
		 pARefval2324_AR2324:=myrec;
		END;
	FUNCTION pADerefRhs2323_ADR2323:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2324_AR2324;
		 pADerefRhs2323_ADR2323:=myrec;
		END;
	FUNCTION pARhsValue2322_ARV2322:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2323_ADR2323;
		 pARhsValue2322_ARV2322:=myrec;
		END;
	FUNCTION pAMemoryLoc2321_AML2321:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pARhsValue2322_ARV2322;
		 pAMemoryLoc2321_AML2321:=myrec;
		END;
		(*! try to cast to type: ref uint64*)
	FUNCTION pARefcastRefval2314_ARR2314:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType2315_ART2315;
		(*class ilcg.node.AMemoryLoc*)
		myrec^.arg2:=pAMemoryLoc2321_AML2321;
		 pARefcastRefval2314_ARR2314:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc2329_AIL2329:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2329_AIL2329:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2328_AR2328:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2329_AIL2329;
		 pARefval2328_AR2328:=myrec;
		END;
	FUNCTION pADerefRhs2327_ADR2327:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2328_AR2328;
		 pADerefRhs2327_ADR2327:=myrec;
		END;
	FUNCTION pARhsValue2326_ARV2326:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2327_ADR2327;
		 pARhsValue2326_ARV2326:=myrec;
		END;
	FUNCTION pAAssign2313_AA2313:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue2326_ARV2326;
		myrec^.dest:=pARefcastRefval2314_ARR2314;
		 pAAssign2313_AA2313:=myrec;
		END;
	FUNCTION pAAssignMeaning2312_AAM2312:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2313_AA2313;
		 pAAssignMeaning2312_AAM2312:=myrec;
		END;
	FUNCTION pAAssemblypattern2331_AA2331:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'mov eax,[' );
		pappendp(list,1);
		pappends(list,']\n mov edx,[' );
		pappendp(list,1);
		pappends(list,'+4]' );
		pAAssemblypattern2331_AA2331:=list;
		END;
	FUNCTION pAAssemblesto2330_AA2330:pprintlist;
	begin
		pAAssemblesto2330_AA2330:=pAAssemblypattern2331_AA2331;
		END;
	FUNCTION pASideeffects2337_AS2337:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2337_AS2337:=nil;
		 pASideeffects2337_AS2337:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2338_AUP2338:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2338_AUP2338:=nil;
		 pAUnconditionalPrecond2338_AUP2338:=myrec;
		END;
	FUNCTION STOREAXDu_STOREAXD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=pateadxu_;
		params^[1]:=patdestreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning2312_AAM2312;
		matchedAssembler:=pAAssemblesto2330_AA2330;
		END;
		STOREAXDu_STOREAXD:=myrec;
	END;
	FUNCTION pATypeid2341_AT2341:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ dpushreg  ilcg.pattern@16cdbb8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2341_AT2341:=myrec;
		END;
	FUNCTION pATypeid2350_AT2350:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@154e38b}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid2350_AT2350:=myrec;
		END;
	FUNCTION pATypeidType2349_ATT2349:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2350_AT2350;
		 pATypeidType2349_ATT2349:=myrec;
		END;
	FUNCTION pAReference2348_AR2348:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType2349_ATT2349;
		 pAReference2348_AR2348:=myrec;
		END;
	FUNCTION pAReftypeType2347_ART2347:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference2348_AR2348;
		 pAReftypeType2347_ART2347:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc2351_AIL2351:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2351_AIL2351:=myrec;
		END;
		(*! try to cast to type: ref t*)
	FUNCTION pARefcastRefval2346_ARR2346:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType2347_ART2347;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc2351_AIL2351;
		 pARefcastRefval2346_ARR2346:=myrec;
		END;
	FUNCTION pATypeid2355_AT2355:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@154e38b}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid2355_AT2355:=myrec;
		END;
	FUNCTION pATypeidType2354_ATT2354:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2355_AT2355;
		 pATypeidType2354_ATT2354:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2357_AIL2357:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2357_AIL2357:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2356_ALV2356:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2357_AIL2357;
		 pALocValue2356_ALV2356:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastpopRhs2353_ACR2353:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType2354_ATT2354;
		myrec^.arg2:=pALocValue2356_ALV2356;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
                pACastpopRhs2353_ACR2353:=myrec;
		END;
	FUNCTION pARhsValue2352_ARV2352:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs2353_ACR2353;
		 pARhsValue2352_ARV2352:=myrec;
		END;
	FUNCTION pAAssign2345_AA2345:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue2352_ARV2352;
		myrec^.dest:=pARefcastRefval2346_ARR2346;
		 pAAssign2345_AA2345:=myrec;
		END;
	FUNCTION pAAssignMeaning2344_AAM2344:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2345_AA2345;
		 pAAssignMeaning2344_AAM2344:=myrec;
		END;
	FUNCTION pAAssemblypattern2359_AA2359:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'pop  ' );
		pappendp(list,0);
		pAAssemblypattern2359_AA2359:=list;
		END;
	FUNCTION pAAssemblesto2358_AA2358:pprintlist;
	begin
		pAAssemblesto2358_AA2358:=pAAssemblypattern2359_AA2359;
		END;
	FUNCTION pASideeffects2362_AS2362:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2362_AS2362:=nil;
		 pASideeffects2362_AS2362:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2363_AUP2363:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2363_AUP2363:=nil;
		 pAUnconditionalPrecond2363_AUP2363:=myrec;
		END;
	FUNCTION RPOP_RPOP:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=typeparam;
		params^[0]:=patdpushreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning2344_AAM2344;
		matchedAssembler:=pAAssemblesto2358_AA2358;
		END;
		RPOP_RPOP:=myrec;
	END;
	FUNCTION pATypeid2366_AT2366:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bureg  ilcg.pattern@130b13c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2366_AT2366:=myrec;
		END;
	FUNCTION pAPushDyadic2369_APD2369:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic2369_APD2369:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2371_AIL2371:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2371_AIL2371:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2370_ALV2370:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2371_AIL2371;
		 pALocValue2370_ALV2370:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc2375_AIL2375:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2375_AIL2375:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2374_AR2374:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2375_AIL2375;
		 pARefval2374_AR2374:=myrec;
		END;
	FUNCTION pADerefRhs2373_ADR2373:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2374_AR2374;
		 pADerefRhs2373_ADR2373:=myrec;
		END;
	FUNCTION pARhsValue2372_ARV2372:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2373_ADR2373;
		 pARhsValue2372_ARV2372:=myrec;
		END;
	FUNCTION pADyadicValue2368_ADV2368:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue2370_ALV2370;
		myrec^.arg2:=pARhsValue2372_ARV2372;
		myrec^.fn:=pAPushDyadic2369_APD2369;
		 pADyadicValue2368_ADV2368:=myrec;
		END;
	FUNCTION pAValueMeaning2367_AVM2367:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue2368_ADV2368;
		 pAValueMeaning2367_AVM2367:=myrec;
		END;
	FUNCTION pAAssemblypattern2377_AA2377:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'push dword 0\n mov BYTE[esp],' );
		pappendp(list,0);
		pAAssemblypattern2377_AA2377:=list;
		END;
	FUNCTION pAAssemblesto2376_AA2376:pprintlist;
	begin
		pAAssemblesto2376_AA2376:=pAAssemblypattern2377_AA2377;
		END;
	FUNCTION pASideeffects2380_AS2380:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2380_AS2380:=nil;
		 pASideeffects2380_AS2380:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2381_AUP2381:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2381_AUP2381:=nil;
		 pAUnconditionalPrecond2381_AUP2381:=myrec;
		END;
	FUNCTION BPUSH_BPUSH:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patbureg_;
		paramcount:=2;
		meaning:=pAValueMeaning2367_AVM2367;
		matchedAssembler:=pAAssemblesto2376_AA2376;
		END;
		BPUSH_BPUSH:=myrec;
	END;
	FUNCTION pATypeid2384_AT2384:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baddrmode  ilcg.pattern@a14fed}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2384_AT2384:=myrec;
		END;
	FUNCTION pAPushDyadic2387_APD2387:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic2387_APD2387:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2389_AIL2389:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2389_AIL2389:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2388_ALV2388:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2389_AIL2389;
		 pALocValue2388_ALV2388:=myrec;
		END;
	FUNCTION pAInt8Signed2395_AI8S2395:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed2395_AI8S2395:=myrec;
		END;
	FUNCTION pASignedTformat2394_AST2394:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed2395_AI8S2395;
		 pASignedTformat2394_AST2394:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype2393_ATP2393:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype2393_ATP2393:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2392_APT2392:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType2392_APT2392:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc2399_AIL2399:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2399_AIL2399:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2398_AR2398:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2399_AIL2399;
		 pARefval2398_AR2398:=myrec;
		END;
	FUNCTION pADerefRhs2397_ADR2397:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2398_AR2398;
		 pADerefRhs2397_ADR2397:=myrec;
		END;
	FUNCTION pARhsValue2396_ARV2396:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2397_ADR2397;
		 pARhsValue2396_ARV2396:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs2391_ACR2391:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2392_APT2392;
		myrec^.arg2:=pARhsValue2396_ARV2396;
		 pACastRhs2391_ACR2391:=myrec;
		END;
	FUNCTION pARhsValue2390_ARV2390:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2391_ACR2391;
		 pARhsValue2390_ARV2390:=myrec;
		END;
	FUNCTION pADyadicValue2386_ADV2386:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue2388_ALV2388;
		myrec^.arg2:=pARhsValue2390_ARV2390;
		myrec^.fn:=pAPushDyadic2387_APD2387;
		 pADyadicValue2386_ADV2386:=myrec;
		END;
	FUNCTION pAValueMeaning2385_AVM2385:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue2386_ADV2386;
		 pAValueMeaning2385_AVM2385:=myrec;
		END;
	FUNCTION pAAssemblypattern2401_AA2401:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'push esi\n movsx esi,' );
		pappendp(list,0);
		pappends(list,'\n xchg esi,[esp]' );
		pAAssemblypattern2401_AA2401:=list;
		END;
	FUNCTION pAAssemblesto2400_AA2400:pprintlist;
	begin
		pAAssemblesto2400_AA2400:=pAAssemblypattern2401_AA2401;
		END;
	FUNCTION pASideeffects2405_AS2405:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2405_AS2405:=nil;
		 pASideeffects2405_AS2405:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2406_AUP2406:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2406_AUP2406:=nil;
		 pAUnconditionalPrecond2406_AUP2406:=myrec;
		END;
	FUNCTION BSPUSH_BSPUSH:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patbaddrmode_;
		paramcount:=2;
		meaning:=pAValueMeaning2385_AVM2385;
		matchedAssembler:=pAAssemblesto2400_AA2400;
		END;
		BSPUSH_BSPUSH:=myrec;
	END;
	FUNCTION pATypeid2409_AT2409:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bireg  ilcg.pattern@ef7d74}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2409_AT2409:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc2413_AIL2413:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2413_AIL2413:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2412_AR2412:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2413_AIL2413;
		 pARefval2412_AR2412:=myrec;
		END;
	FUNCTION pAOctetFormat2418_AOF2418:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat2418_AOF2418:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype2417_AFP2417:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype2417_AFP2417:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2416_APT2416:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAPredeclaredtypeType2416_APT2416:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2420_AIL2420:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2420_AIL2420:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2419_ALV2419:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2420_AIL2420;
		 pALocValue2419_ALV2419:=myrec;
		END;
		(*! try to cast to type: octet*)
	FUNCTION pACastpopRhs2415_ACR2415:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2416_APT2416;
		myrec^.arg2:=pALocValue2419_ALV2419;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs2415_ACR2415:=myrec;
		END;
	FUNCTION pARhsValue2414_ARV2414:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs2415_ACR2415;
		 pARhsValue2414_ARV2414:=myrec;
		END;
	FUNCTION pAAssign2411_AA2411:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue2414_ARV2414;
		myrec^.dest:=pARefval2412_AR2412;
		 pAAssign2411_AA2411:=myrec;
		END;
	FUNCTION pAAssignMeaning2410_AAM2410:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2411_AA2411;
		 pAAssignMeaning2410_AAM2410:=myrec;
		END;
	FUNCTION pAAssemblypattern2422_AA2422:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'mov  ' );
		pappendp(list,0);
		pappends(list,',BYTE[esp]\n add esp,4' );
		pAAssemblypattern2422_AA2422:=list;
		END;
	FUNCTION pAAssemblesto2421_AA2421:pprintlist;
	begin
		pAAssemblesto2421_AA2421:=pAAssemblypattern2422_AA2422;
		END;
	FUNCTION pASideeffects2426_AS2426:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2426_AS2426:=nil;
		 pASideeffects2426_AS2426:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2427_AUP2427:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2427_AUP2427:=nil;
		 pAUnconditionalPrecond2427_AUP2427:=myrec;
		END;
	FUNCTION BSPOP_BSPOP:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patbireg_;
		paramcount:=2;
		meaning:=pAAssignMeaning2410_AAM2410;
		matchedAssembler:=pAAssemblesto2421_AA2421;
		END;
		BSPOP_BSPOP:=myrec;
	END;
	FUNCTION pATypeid2430_AT2430:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bureg  ilcg.pattern@130b13c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2430_AT2430:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc2434_AIL2434:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2434_AIL2434:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2433_AR2433:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2434_AIL2434;
		 pARefval2433_AR2433:=myrec;
		END;
	FUNCTION pAOctetFormat2439_AOF2439:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat2439_AOF2439:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype2438_AFP2438:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype2438_AFP2438:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2437_APT2437:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAPredeclaredtypeType2437_APT2437:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2441_AIL2441:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2441_AIL2441:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2440_ALV2440:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2441_AIL2441;
		 pALocValue2440_ALV2440:=myrec;
		END;
		(*! try to cast to type: octet*)
	FUNCTION pACastpopRhs2436_ACR2436:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2437_APT2437;
		myrec^.arg2:=pALocValue2440_ALV2440;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs2436_ACR2436:=myrec;
		END;
	FUNCTION pARhsValue2435_ARV2435:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs2436_ACR2436;
		 pARhsValue2435_ARV2435:=myrec;
		END;
	FUNCTION pAAssign2432_AA2432:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue2435_ARV2435;
		myrec^.dest:=pARefval2433_AR2433;
		 pAAssign2432_AA2432:=myrec;
		END;
	FUNCTION pAAssignMeaning2431_AAM2431:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2432_AA2432;
		 pAAssignMeaning2431_AAM2431:=myrec;
		END;
	FUNCTION pAAssemblypattern2443_AA2443:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'mov  ' );
		pappendp(list,0);
		pappends(list,',BYTE[esp]\n add esp,4' );
		pAAssemblypattern2443_AA2443:=list;
		END;
	FUNCTION pAAssemblesto2442_AA2442:pprintlist;
	begin
		pAAssemblesto2442_AA2442:=pAAssemblypattern2443_AA2443;
		END;
	FUNCTION pASideeffects2447_AS2447:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2447_AS2447:=nil;
		 pASideeffects2447_AS2447:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2448_AUP2448:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2448_AUP2448:=nil;
		 pAUnconditionalPrecond2448_AUP2448:=myrec;
		END;
	FUNCTION BPOP_BPOP:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patbureg_;
		paramcount:=2;
		meaning:=pAAssignMeaning2431_AAM2431;
		matchedAssembler:=pAAssemblesto2442_AA2442;
		END;
		BPOP_BPOP:=myrec;
	END;
	FUNCTION pATypeid2451_AT2451:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ addrmode  ilcg.pattern@17aaeec}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2451_AT2451:=myrec;
		END;
	FUNCTION pATypeid2464_AT2464:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@160e8a2}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid2464_AT2464:=myrec;
		END;
	FUNCTION pATypeidType2463_ATT2463:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2464_AT2464;
		 pATypeidType2463_ATT2463:=myrec;
		END;
	FUNCTION pAReference2462_AR2462:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType2463_ATT2463;
		 pAReference2462_AR2462:=myrec;
		END;
	FUNCTION pAReftypeType2461_ART2461:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference2462_AR2462;
		 pAReftypeType2461_ART2461:=myrec;
		END;
	FUNCTION pAReference2460_AR2460:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAReftypeType2461_ART2461;
		 pAReference2460_AR2460:=myrec;
		END;
	FUNCTION pAReftypeType2459_ART2459:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference2460_AR2460;
		 pAReftypeType2459_ART2459:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc2465_AIL2465:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2465_AIL2465:=myrec;
		END;
		(*! try to cast to type: ref ref t*)
	FUNCTION pARefcastRefval2458_ARR2458:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType2459_ART2459;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc2465_AIL2465;
		 pARefcastRefval2458_ARR2458:=myrec;
		END;
	FUNCTION pATypeid2471_AT2471:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t2  ilcg.Param@1fa157c}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid2471_AT2471:=myrec;
		END;
	FUNCTION pATypeidType2470_ATT2470:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2471_AT2471;
		 pATypeidType2470_ATT2470:=myrec;
		END;
	FUNCTION pAReference2469_AR2469:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType2470_ATT2470;
		 pAReference2469_AR2469:=myrec;
		END;
	FUNCTION pAReftypeType2468_ART2468:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference2469_AR2469;
		 pAReftypeType2468_ART2468:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2473_AIL2473:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2473_AIL2473:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2472_ALV2472:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2473_AIL2473;
		 pALocValue2472_ALV2472:=myrec;
		END;
		(*! try to cast to type: ref t2*)
	FUNCTION pACastpopRhs2467_ACR2467:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType2468_ART2468;
		myrec^.arg2:=pALocValue2472_ALV2472;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs2467_ACR2467:=myrec;
		END;
	FUNCTION pARhsValue2466_ARV2466:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs2467_ACR2467;
		 pARhsValue2466_ARV2466:=myrec;
		END;
	FUNCTION pAAssign2457_AA2457:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue2466_ARV2466;
		myrec^.dest:=pARefcastRefval2458_ARR2458;
		 pAAssign2457_AA2457:=myrec;
		END;
	FUNCTION pAAssignMeaning2456_AAM2456:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2457_AA2457;
		 pAAssignMeaning2456_AAM2456:=myrec;
		END;
	FUNCTION pAAssemblypattern2475_AA2475:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'pop DWORD ' );
		pappendp(list,0);
		pAAssemblypattern2475_AA2475:=list;
		END;
	FUNCTION pAAssemblesto2474_AA2474:pprintlist;
	begin
		pAAssemblesto2474_AA2474:=pAAssemblypattern2475_AA2475;
		END;
	FUNCTION pASideeffects2478_AS2478:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2478_AS2478:=nil;
		 pASideeffects2478_AS2478:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2479_AUP2479:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2479_AUP2479:=nil;
		 pAUnconditionalPrecond2479_AUP2479:=myrec;
		END;
	FUNCTION REFPOP_REFPOP:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=typeparam;
		params^[2]:=typeparam;
		params^[0]:=pataddrmode_;
		paramcount:=4;
		meaning:=pAAssignMeaning2456_AAM2456;
		matchedAssembler:=pAAssemblesto2474_AA2474;
		END;
		REFPOP_REFPOP:=myrec;
	END;
	FUNCTION pATypeid2482_AT2482:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ addrmode  ilcg.pattern@17aaeec}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2482_AT2482:=myrec;
		END;
	FUNCTION pATypeid2493_AT2493:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@1cd2d49}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid2493_AT2493:=myrec;
		END;
	FUNCTION pATypeidType2492_ATT2492:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2493_AT2493;
		 pATypeidType2492_ATT2492:=myrec;
		END;
	FUNCTION pAReference2491_AR2491:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType2492_ATT2492;
		 pAReference2491_AR2491:=myrec;
		END;
	FUNCTION pAReftypeType2490_ART2490:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference2491_AR2491;
		 pAReftypeType2490_ART2490:=myrec;
		END;
	FUNCTION pAReference2489_AR2489:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAReftypeType2490_ART2490;
		 pAReference2489_AR2489:=myrec;
		END;
	FUNCTION pAReftypeType2488_ART2488:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference2489_AR2489;
		 pAReftypeType2488_ART2488:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc2494_AIL2494:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2494_AIL2494:=myrec;
		END;
		(*! try to cast to type: ref ref t*)
	FUNCTION pARefcastRefval2487_ARR2487:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType2488_ART2488;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc2494_AIL2494;
		 pARefcastRefval2487_ARR2487:=myrec;
		END;
	FUNCTION pAWordFormat2499_AWF2499:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword;
		 pAWordFormat2499_AWF2499:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype2498_AFP2498:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAFormatPredeclaredtype2498_AFP2498:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2497_APT2497:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAPredeclaredtypeType2497_APT2497:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2501_AIL2501:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2501_AIL2501:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2500_ALV2500:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2501_AIL2501;
		 pALocValue2500_ALV2500:=myrec;
		END;
		(*! try to cast to type: word*)
	FUNCTION pACastpopRhs2496_ACR2496:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2497_APT2497;
		myrec^.arg2:=pALocValue2500_ALV2500;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs2496_ACR2496:=myrec;
		END;
	FUNCTION pARhsValue2495_ARV2495:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs2496_ACR2496;
		 pARhsValue2495_ARV2495:=myrec;
		END;
	FUNCTION pAAssign2486_AA2486:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue2495_ARV2495;
		myrec^.dest:=pARefcastRefval2487_ARR2487;
		 pAAssign2486_AA2486:=myrec;
		END;
	FUNCTION pAAssignMeaning2485_AAM2485:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2486_AA2486;
		 pAAssignMeaning2485_AAM2485:=myrec;
		END;
	FUNCTION pAAssemblypattern2503_AA2503:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'pop DWORD ' );
		pappendp(list,0);
		pAAssemblypattern2503_AA2503:=list;
		END;
	FUNCTION pAAssemblesto2502_AA2502:pprintlist;
	begin
		pAAssemblesto2502_AA2502:=pAAssemblypattern2503_AA2503;
		END;
	FUNCTION pASideeffects2506_AS2506:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2506_AS2506:=nil;
		 pASideeffects2506_AS2506:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2507_AUP2507:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2507_AUP2507:=nil;
		 pAUnconditionalPrecond2507_AUP2507:=myrec;
		END;
	FUNCTION WPOP_WPOP:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=typeparam;
		params^[0]:=pataddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning2485_AAM2485;
		matchedAssembler:=pAAssemblesto2502_AA2502;
		END;
		WPOP_WPOP:=myrec;
	END;
	FUNCTION pATypeid2510_AT2510:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2510_AT2510:=myrec;
		END;
	FUNCTION pASigned2519_AS2519:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned2519_AS2519:=myrec;
		END;
	FUNCTION pASignedTformat2518_AST2518:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned2519_AS2519;
		 pASignedTformat2518_AST2518:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype2517_ATP2517:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype2517_ATP2517:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2516_APT2516:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType2516_APT2516:=myrec;
		END;
	FUNCTION pAReference2515_AR2515:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType2516_APT2516;
		 pAReference2515_AR2515:=myrec;
		END;
	FUNCTION pAReftypeType2514_ART2514:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference2515_AR2515;
		 pAReftypeType2514_ART2514:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc2520_AIL2520:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2520_AIL2520:=myrec;
		END;
		(*! try to cast to type: ref int32*)
	FUNCTION pARefcastRefval2513_ARR2513:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType2514_ART2514;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc2520_AIL2520;
		 pARefcastRefval2513_ARR2513:=myrec;
		END;
	FUNCTION pASigned2526_AS2526:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned2526_AS2526:=myrec;
		END;
	FUNCTION pASignedTformat2525_AST2525:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned2526_AS2526;
		 pASignedTformat2525_AST2525:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype2524_ATP2524:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype2524_ATP2524:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2523_APT2523:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType2523_APT2523:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2528_AIL2528:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2528_AIL2528:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2527_ALV2527:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2528_AIL2528;
		 pALocValue2527_ALV2527:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastpopRhs2522_ACR2522:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2523_APT2523;
		myrec^.arg2:=pALocValue2527_ALV2527;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs2522_ACR2522:=myrec;
		END;
	FUNCTION pARhsValue2521_ARV2521:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs2522_ACR2522;
		 pARhsValue2521_ARV2521:=myrec;
		END;
	FUNCTION pAAssign2512_AA2512:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue2521_ARV2521;
		myrec^.dest:=pARefcastRefval2513_ARR2513;
		 pAAssign2512_AA2512:=myrec;
		END;
	FUNCTION pAAssignMeaning2511_AAM2511:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2512_AA2512;
		 pAAssignMeaning2511_AAM2511:=myrec;
		END;
	FUNCTION pAAssemblypattern2530_AA2530:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'pop DWORD ' );
		pappendp(list,0);
		pAAssemblypattern2530_AA2530:=list;
		END;
	FUNCTION pAAssemblesto2529_AA2529:pprintlist;
	begin
		pAAssemblesto2529_AA2529:=pAAssemblypattern2530_AA2530;
		END;
	FUNCTION pASideeffects2533_AS2533:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2533_AS2533:=nil;
		 pASideeffects2533_AS2533:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2534_AUP2534:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2534_AUP2534:=nil;
		 pAUnconditionalPrecond2534_AUP2534:=myrec;
		END;
	FUNCTION MEMPOP_MEMPOP:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmaddrmode_;
		paramcount:=2;
		meaning:=pAAssignMeaning2511_AAM2511;
		matchedAssembler:=pAAssemblesto2529_AA2529;
		END;
		MEMPOP_MEMPOP:=myrec;
	END;
	FUNCTION pATypeid2537_AT2537:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ offset  ilcg.pattern@b0c5a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2537_AT2537:=myrec;
		END;
	FUNCTION pAPushDyadic2540_APD2540:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic2540_APD2540:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2542_AIL2542:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2542_AIL2542:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2541_ALV2541:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2542_AIL2542;
		 pALocValue2541_ALV2541:=myrec;
		END;
		(*! Match s *)
	FUNCTION pAIdLoc2544_AIL2544:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2544_AIL2544:=myrec;
		END;
		(*s *)
	FUNCTION pALocValue2543_ALV2543:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2544_AIL2544;
		 pALocValue2543_ALV2543:=myrec;
		END;
	FUNCTION pADyadicValue2539_ADV2539:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue2541_ALV2541;
		myrec^.arg2:=pALocValue2543_ALV2543;
		myrec^.fn:=pAPushDyadic2540_APD2540;
		 pADyadicValue2539_ADV2539:=myrec;
		END;
	FUNCTION pAValueMeaning2538_AVM2538:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue2539_ADV2539;
		 pAValueMeaning2538_AVM2538:=myrec;
		END;
	FUNCTION pAAssemblypattern2546_AA2546:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'push DWORD ' );
		pappendp(list,0);
		pAAssemblypattern2546_AA2546:=list;
		END;
	FUNCTION pAAssemblesto2545_AA2545:pprintlist;
	begin
		pAAssemblesto2545_AA2545:=pAAssemblypattern2546_AA2546;
		END;
	FUNCTION pASideeffects2549_AS2549:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2549_AS2549:=nil;
		 pASideeffects2549_AS2549:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2550_AUP2550:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2550_AUP2550:=nil;
		 pAUnconditionalPrecond2550_AUP2550:=myrec;
		END;
	FUNCTION LITPUSH_LITPUSH:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patoffset_;
		paramcount:=2;
		meaning:=pAValueMeaning2538_AVM2538;
		matchedAssembler:=pAAssemblesto2545_AA2545;
		END;
		LITPUSH_LITPUSH:=myrec;
	END;
	FUNCTION pATypeid2553_AT2553:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2553_AT2553:=myrec;
		END;
	FUNCTION pAPushDyadic2556_APD2556:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic2556_APD2556:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2558_AIL2558:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2558_AIL2558:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2557_ALV2557:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2558_AIL2558;
		 pALocValue2557_ALV2557:=myrec;
		END;
	FUNCTION pAWordFormat2563_AWF2563:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword;
		 pAWordFormat2563_AWF2563:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype2562_AFP2562:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAFormatPredeclaredtype2562_AFP2562:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2561_APT2561:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAPredeclaredtypeType2561_APT2561:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc2567_AIL2567:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2567_AIL2567:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2566_AR2566:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2567_AIL2567;
		 pARefval2566_AR2566:=myrec;
		END;
	FUNCTION pADerefRhs2565_ADR2565:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2566_AR2566;
		 pADerefRhs2565_ADR2565:=myrec;
		END;
	FUNCTION pARhsValue2564_ARV2564:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2565_ADR2565;
		 pARhsValue2564_ARV2564:=myrec;
		END;
		(*! try to cast to type: word*)
	FUNCTION pACastRhs2560_ACR2560:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2561_APT2561;
		myrec^.arg2:=pARhsValue2564_ARV2564;
		 pACastRhs2560_ACR2560:=myrec;
		END;
	FUNCTION pARhsValue2559_ARV2559:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2560_ACR2560;
		 pARhsValue2559_ARV2559:=myrec;
		END;
	FUNCTION pADyadicValue2555_ADV2555:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue2557_ALV2557;
		myrec^.arg2:=pARhsValue2559_ARV2559;
		myrec^.fn:=pAPushDyadic2556_APD2556;
		 pADyadicValue2555_ADV2555:=myrec;
		END;
	FUNCTION pAValueMeaning2554_AVM2554:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue2555_ADV2555;
		 pAValueMeaning2554_AVM2554:=myrec;
		END;
	FUNCTION pAAssemblypattern2569_AA2569:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'push DWORD ' );
		pappendp(list,0);
		pAAssemblypattern2569_AA2569:=list;
		END;
	FUNCTION pAAssemblesto2568_AA2568:pprintlist;
	begin
		pAAssemblesto2568_AA2568:=pAAssemblypattern2569_AA2569;
		END;
	FUNCTION pASideeffects2572_AS2572:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2572_AS2572:=nil;
		 pASideeffects2572_AS2572:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2573_AUP2573:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2573_AUP2573:=nil;
		 pAUnconditionalPrecond2573_AUP2573:=myrec;
		END;
	FUNCTION MEMPUSH_MEMPUSH:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmaddrmode_;
		paramcount:=2;
		meaning:=pAValueMeaning2554_AVM2554;
		matchedAssembler:=pAAssemblesto2568_AA2568;
		END;
		MEMPUSH_MEMPUSH:=myrec;
	END;
	FUNCTION pATypeid2576_AT2576:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ eaform  ilcg.pattern@811e18}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2576_AT2576:=myrec;
		END;
	FUNCTION pAPushDyadic2579_APD2579:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic2579_APD2579:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2581_AIL2581:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2581_AIL2581:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2580_ALV2580:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2581_AIL2581;
		 pALocValue2580_ALV2580:=myrec;
		END;
	FUNCTION pADoublewordFormat2586_ADF2586:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdword;
		 pADoublewordFormat2586_ADF2586:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype2585_AFP2585:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAFormatPredeclaredtype2585_AFP2585:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2584_APT2584:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAPredeclaredtypeType2584_APT2584:=myrec;
		END;
	FUNCTION pADoublewordFormat2594_ADF2594:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdword;
		 pADoublewordFormat2594_ADF2594:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype2593_AFP2593:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAFormatPredeclaredtype2593_AFP2593:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2592_APT2592:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAPredeclaredtypeType2592_APT2592:=myrec;
		END;
	FUNCTION pAReference2591_AR2591:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType2592_APT2592;
		 pAReference2591_AR2591:=myrec;
		END;
	FUNCTION pAReftypeType2590_ART2590:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference2591_AR2591;
		 pAReftypeType2590_ART2590:=myrec;
		END;
		(*! Match ea *)
	FUNCTION pAIdLoc2597_AIL2597:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2597_AIL2597:=myrec;
		END;
		(*ea *)
	FUNCTION pALocValue2596_ALV2596:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2597_AIL2597;
		 pALocValue2596_ALV2596:=myrec;
		END;
	FUNCTION pAMemoryLoc2595_AML2595:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pALocValue2596_ALV2596;
		 pAMemoryLoc2595_AML2595:=myrec;
		END;
		(*! try to cast to type: ref doubleword*)
	FUNCTION pARefcastRefval2589_ARR2589:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType2590_ART2590;
		(*class ilcg.node.AMemoryLoc*)
		myrec^.arg2:=pAMemoryLoc2595_AML2595;
		 pARefcastRefval2589_ARR2589:=myrec;
		END;
	FUNCTION pADerefRhs2588_ADR2588:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval2589_ARR2589;
		 pADerefRhs2588_ADR2588:=myrec;
		END;
	FUNCTION pARhsValue2587_ARV2587:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2588_ADR2588;
		 pARhsValue2587_ARV2587:=myrec;
		END;
		(*! try to cast to type: doubleword*)
	FUNCTION pACastRhs2583_ACR2583:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2584_APT2584;
		myrec^.arg2:=pARhsValue2587_ARV2587;
		 pACastRhs2583_ACR2583:=myrec;
		END;
	FUNCTION pARhsValue2582_ARV2582:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2583_ACR2583;
		 pARhsValue2582_ARV2582:=myrec;
		END;
	FUNCTION pADyadicValue2578_ADV2578:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue2580_ALV2580;
		myrec^.arg2:=pARhsValue2582_ARV2582;
		myrec^.fn:=pAPushDyadic2579_APD2579;
		 pADyadicValue2578_ADV2578:=myrec;
		END;
	FUNCTION pAValueMeaning2577_AVM2577:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue2578_ADV2578;
		 pAValueMeaning2577_AVM2577:=myrec;
		END;
	FUNCTION pAAssemblypattern2599_AA2599:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'push DWORD[' );
		pappendp(list,0);
		pappends(list,'+4]\n push DWORD[' );
		pappendp(list,0);
		pappends(list,']' );
		pAAssemblypattern2599_AA2599:=list;
		END;
	FUNCTION pAAssemblesto2598_AA2598:pprintlist;
	begin
		pAAssemblesto2598_AA2598:=pAAssemblypattern2599_AA2599;
		END;
	FUNCTION pASideeffects2605_AS2605:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2605_AS2605:=nil;
		 pASideeffects2605_AS2605:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2606_AUP2606:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2606_AUP2606:=nil;
		 pAUnconditionalPrecond2606_AUP2606:=myrec;
		END;
	FUNCTION DMEMPUSH_DMEMPUSH:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=pateaform_;
		paramcount:=2;
		meaning:=pAValueMeaning2577_AVM2577;
		matchedAssembler:=pAAssemblesto2598_AA2598;
		END;
		DMEMPUSH_DMEMPUSH:=myrec;
	END;
	FUNCTION pATypeid2609_AT2609:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ word32  ilcg.pattern@226649}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2609_AT2609:=myrec;
		END;
	FUNCTION pAPushDyadic2612_APD2612:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic2612_APD2612:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2614_AIL2614:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2614_AIL2614:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2613_ALV2613:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2614_AIL2614;
		 pALocValue2613_ALV2613:=myrec;
		END;
	FUNCTION pATypeid2621_AT2621:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@1a5ee7c}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid2621_AT2621:=myrec;
		END;
	FUNCTION pATypeidType2620_ATT2620:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2621_AT2621;
		 pATypeidType2620_ATT2620:=myrec;
		END;
	FUNCTION pAReference2619_AR2619:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType2620_ATT2620;
		 pAReference2619_AR2619:=myrec;
		END;
	FUNCTION pAReftypeType2618_ART2618:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference2619_AR2619;
		 pAReftypeType2618_ART2618:=myrec;
		END;
	FUNCTION pASigned2628_AS2628:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned2628_AS2628:=myrec;
		END;
	FUNCTION pASignedTformat2627_AST2627:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned2628_AS2628;
		 pASignedTformat2627_AST2627:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype2626_ATP2626:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype2626_ATP2626:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2625_APT2625:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType2625_APT2625:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2630_AIL2630:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2630_AIL2630:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2629_ALV2629:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2630_AIL2630;
		 pALocValue2629_ALV2629:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastpopRhs2624_ACR2624:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2625_APT2625;
		myrec^.arg2:=pALocValue2629_ALV2629;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs2624_ACR2624:=myrec;
		END;
	FUNCTION pARhsValue2623_ARV2623:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs2624_ACR2624;
		 pARhsValue2623_ARV2623:=myrec;
		END;
	FUNCTION pAMemoryLoc2622_AML2622:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pARhsValue2623_ARV2623;
		 pAMemoryLoc2622_AML2622:=myrec;
		END;
		(*! try to cast to type: ref t*)
	FUNCTION pARefcastRefval2617_ARR2617:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType2618_ART2618;
		(*class ilcg.node.AMemoryLoc*)
		myrec^.arg2:=pAMemoryLoc2622_AML2622;
		 pARefcastRefval2617_ARR2617:=myrec;
		END;
	FUNCTION pADerefRhs2616_ADR2616:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval2617_ARR2617;
		 pADerefRhs2616_ADR2616:=myrec;
		END;
	FUNCTION pARhsValue2615_ARV2615:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2616_ADR2616;
		 pARhsValue2615_ARV2615:=myrec;
		END;
	FUNCTION pADyadicValue2611_ADV2611:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue2613_ALV2613;
		myrec^.arg2:=pARhsValue2615_ARV2615;
		myrec^.fn:=pAPushDyadic2612_APD2612;
		 pADyadicValue2611_ADV2611:=myrec;
		END;
	FUNCTION pAValueMeaning2610_AVM2610:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue2611_ADV2611;
		 pAValueMeaning2610_AVM2610:=myrec;
		END;
	FUNCTION pAAssemblypattern2632_AA2632:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'xchg DWORD[esp],eax\n  mov eax,DWORD[eax]\n  xchg DWORD[esp],eax' );
		pAAssemblypattern2632_AA2632:=list;
		END;
	FUNCTION pAAssemblesto2631_AA2631:pprintlist;
	begin
		pAAssemblesto2631_AA2631:=pAAssemblypattern2632_AA2632;
		END;
	FUNCTION pASideeffects2634_AS2634:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2634_AS2634:=nil;
		 pASideeffects2634_AS2634:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2635_AUP2635:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2635_AUP2635:=nil;
		 pAUnconditionalPrecond2635_AUP2635:=myrec;
		END;
	FUNCTION STACKLOAD_STACKLOAD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patword32_32;
		paramcount:=2;
		meaning:=pAValueMeaning2610_AVM2610;
		matchedAssembler:=pAAssemblesto2631_AA2631;
		END;
		STACKLOAD_STACKLOAD:=myrec;
	END;
	FUNCTION pATypeid2638_AT2638:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2638_AT2638:=myrec;
		END;
	FUNCTION pAPushDyadic2643_APD2643:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic2643_APD2643:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2645_AIL2645:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2645_AIL2645:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2644_ALV2644:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2645_AIL2645;
		 pALocValue2644_ALV2644:=myrec;
		END;
	FUNCTION pATypeid2651_AT2651:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@1d0bc85}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid2651_AT2651:=myrec;
		END;
	FUNCTION pATypeidType2650_ATT2650:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2651_AT2651;
		 pATypeidType2650_ATT2650:=myrec;
		END;
	FUNCTION pAReference2649_AR2649:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType2650_ATT2650;
		 pAReference2649_AR2649:=myrec;
		END;
	FUNCTION pAReftypeType2648_ART2648:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference2649_AR2649;
		 pAReftypeType2648_ART2648:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc2655_AIL2655:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2655_AIL2655:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2654_AR2654:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2655_AIL2655;
		 pARefval2654_AR2654:=myrec;
		END;
	FUNCTION pADerefRhs2653_ADR2653:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2654_AR2654;
		 pADerefRhs2653_ADR2653:=myrec;
		END;
	FUNCTION pARhsValue2652_ARV2652:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2653_ADR2653;
		 pARhsValue2652_ARV2652:=myrec;
		END;
		(*! try to cast to type: ref t*)
	FUNCTION pACastRhs2647_ACR2647:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType2648_ART2648;
		myrec^.arg2:=pARhsValue2652_ARV2652;
		 pACastRhs2647_ACR2647:=myrec;
		END;
	FUNCTION pARhsValue2646_ARV2646:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2647_ACR2647;
		 pARhsValue2646_ARV2646:=myrec;
		END;
	FUNCTION pADyadicValue2642_ADV2642:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue2644_ALV2644;
		myrec^.arg2:=pARhsValue2646_ARV2646;
		myrec^.fn:=pAPushDyadic2643_APD2643;
		 pADyadicValue2642_ADV2642:=myrec;
		END;
	FUNCTION pAValueMeaning2641_AVM2641:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue2642_ADV2642;
		 pAValueMeaning2641_AVM2641:=myrec;
		END;
	FUNCTION pAAssemblypattern2657_AA2657:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'push DWORD ' );
		pappendp(list,0);
		pAAssemblypattern2657_AA2657:=list;
		END;
	FUNCTION pAAssemblesto2656_AA2656:pprintlist;
	begin
		pAAssemblesto2656_AA2656:=pAAssemblypattern2657_AA2657;
		END;
	FUNCTION pASideeffects2660_AS2660:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2660_AS2660:=nil;
		 pASideeffects2660_AS2660:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2661_AUP2661:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2661_AUP2661:=nil;
		 pAUnconditionalPrecond2661_AUP2661:=myrec;
		END;
	FUNCTION REFPUSH_REFPUSH:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmaddrmode_;
		params^[1]:=typeparam;
		paramcount:=3;
		meaning:=pAValueMeaning2641_AVM2641;
		matchedAssembler:=pAAssemblesto2656_AA2656;
		END;
		REFPUSH_REFPUSH:=myrec;
	END;
	FUNCTION pATypeid2664_AT2664:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@2a2ae9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2664_AT2664:=myrec;
		END;
	FUNCTION pAPushDyadic2667_APD2667:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic2667_APD2667:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2669_AIL2669:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2669_AIL2669:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2668_ALV2668:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2669_AIL2669;
		 pALocValue2668_ALV2668:=myrec;
		END;
	FUNCTION pATypeid2673_AT2673:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@d557c2}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid2673_AT2673:=myrec;
		END;
	FUNCTION pATypeidType2672_ATT2672:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2673_AT2673;
		 pATypeidType2672_ATT2672:=myrec;
		END;
	FUNCTION pASigned2683_AS2683:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned2683_AS2683:=myrec;
		END;
	FUNCTION pASignedTformat2682_AST2682:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned2683_AS2683;
		 pASignedTformat2682_AST2682:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype2681_ATP2681:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype2681_ATP2681:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2680_APT2680:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType2680_APT2680:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2685_AIL2685:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2685_AIL2685:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2684_ALV2684:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2685_AIL2685;
		 pALocValue2684_ALV2684:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastpopRhs2679_ACR2679:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2680_APT2680;
		myrec^.arg2:=pALocValue2684_ALV2684;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs2679_ACR2679:=myrec;
		END;
	FUNCTION pARhsValue2678_ARV2678:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs2679_ACR2679;
		 pARhsValue2678_ARV2678:=myrec;
		END;
	FUNCTION pAMemoryLoc2677_AML2677:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pARhsValue2678_ARV2678;
		 pAMemoryLoc2677_AML2677:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2676_AR2676:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAMemoryLoc2677_AML2677;
		 pARefval2676_AR2676:=myrec;
		END;
	FUNCTION pADerefRhs2675_ADR2675:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2676_AR2676;
		 pADerefRhs2675_ADR2675:=myrec;
		END;
	FUNCTION pARhsValue2674_ARV2674:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2675_ADR2675;
		 pARhsValue2674_ARV2674:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs2671_ACR2671:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType2672_ATT2672;
		myrec^.arg2:=pARhsValue2674_ARV2674;
		 pACastRhs2671_ACR2671:=myrec;
		END;
	FUNCTION pARhsValue2670_ARV2670:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2671_ACR2671;
		 pARhsValue2670_ARV2670:=myrec;
		END;
	FUNCTION pADyadicValue2666_ADV2666:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue2668_ALV2668;
		myrec^.arg2:=pARhsValue2670_ARV2670;
		myrec^.fn:=pAPushDyadic2667_APD2667;
		 pADyadicValue2666_ADV2666:=myrec;
		END;
	FUNCTION pAValueMeaning2665_AVM2665:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue2666_ADV2666;
		 pAValueMeaning2665_AVM2665:=myrec;
		END;
	FUNCTION pAAssemblypattern2687_AA2687:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'xchg esi,[esp]\n mov esi,dword[esi]\n  xchg esi,[esp]' );
		pAAssemblypattern2687_AA2687:=list;
		END;
	FUNCTION pAAssemblesto2686_AA2686:pprintlist;
	begin
		pAAssemblesto2686_AA2686:=pAAssemblypattern2687_AA2687;
		END;
	FUNCTION pASideeffects2689_AS2689:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2689_AS2689:=nil;
		 pASideeffects2689_AS2689:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2690_AUP2690:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2690_AUP2690:=nil;
		 pAUnconditionalPrecond2690_AUP2690:=myrec;
		END;
	FUNCTION SDEREF_SDEREF:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patint_;
		paramcount:=2;
		meaning:=pAValueMeaning2665_AVM2665;
		matchedAssembler:=pAAssemblesto2686_AA2686;
		END;
		SDEREF_SDEREF:=myrec;
	END;
	FUNCTION pATypeid2693_AT2693:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@2a2ae9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2693_AT2693:=myrec;
		END;
	FUNCTION pAPushDyadic2696_APD2696:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic2696_APD2696:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2698_AIL2698:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2698_AIL2698:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2697_ALV2697:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2698_AIL2698;
		 pALocValue2697_ALV2697:=myrec;
		END;
	FUNCTION pADoublewordFormat2703_ADF2703:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdword;
		 pADoublewordFormat2703_ADF2703:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype2702_AFP2702:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAFormatPredeclaredtype2702_AFP2702:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2701_APT2701:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAPredeclaredtypeType2701_APT2701:=myrec;
		END;
	FUNCTION pASigned2713_AS2713:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned2713_AS2713:=myrec;
		END;
	FUNCTION pASignedTformat2712_AST2712:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned2713_AS2713;
		 pASignedTformat2712_AST2712:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype2711_ATP2711:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype2711_ATP2711:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2710_APT2710:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType2710_APT2710:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc2715_AIL2715:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2715_AIL2715:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue2714_ALV2714:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2715_AIL2715;
		 pALocValue2714_ALV2714:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastpopRhs2709_ACR2709:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2710_APT2710;
		myrec^.arg2:=pALocValue2714_ALV2714;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs2709_ACR2709:=myrec;
		END;
	FUNCTION pARhsValue2708_ARV2708:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs2709_ACR2709;
		 pARhsValue2708_ARV2708:=myrec;
		END;
	FUNCTION pAMemoryLoc2707_AML2707:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pARhsValue2708_ARV2708;
		 pAMemoryLoc2707_AML2707:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2706_AR2706:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAMemoryLoc2707_AML2707;
		 pARefval2706_AR2706:=myrec;
		END;
	FUNCTION pADerefRhs2705_ADR2705:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2706_AR2706;
		 pADerefRhs2705_ADR2705:=myrec;
		END;
	FUNCTION pARhsValue2704_ARV2704:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2705_ADR2705;
		 pARhsValue2704_ARV2704:=myrec;
		END;
		(*! try to cast to type: doubleword*)
	FUNCTION pACastRhs2700_ACR2700:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2701_APT2701;
		myrec^.arg2:=pARhsValue2704_ARV2704;
		 pACastRhs2700_ACR2700:=myrec;
		END;
	FUNCTION pARhsValue2699_ARV2699:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2700_ACR2700;
		 pARhsValue2699_ARV2699:=myrec;
		END;
	FUNCTION pADyadicValue2695_ADV2695:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue2697_ALV2697;
		myrec^.arg2:=pARhsValue2699_ARV2699;
		myrec^.fn:=pAPushDyadic2696_APD2696;
		 pADyadicValue2695_ADV2695:=myrec;
		END;
	FUNCTION pAValueMeaning2694_AVM2694:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue2695_ADV2695;
		 pAValueMeaning2694_AVM2694:=myrec;
		END;
	FUNCTION pAAssemblypattern2717_AA2717:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'xchg esi,[esp]\n push dword[esi]\n mov esi,dword[esi+4]\n  xchg esi,[esp+4]' );
		pAAssemblypattern2717_AA2717:=list;
		END;
	FUNCTION pAAssemblesto2716_AA2716:pprintlist;
	begin
		pAAssemblesto2716_AA2716:=pAAssemblypattern2717_AA2717;
		END;
	FUNCTION pASideeffects2719_AS2719:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2719_AS2719:=nil;
		 pASideeffects2719_AS2719:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2720_AUP2720:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2720_AUP2720:=nil;
		 pAUnconditionalPrecond2720_AUP2720:=myrec;
		END;
	FUNCTION SDEREFDOUBLEWORD_SDEREFDOUBLEWORD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patint_;
		paramcount:=2;
		meaning:=pAValueMeaning2694_AVM2694;
		matchedAssembler:=pAAssemblesto2716_AA2716;
		END;
		SDEREFDOUBLEWORD_SDEREFDOUBLEWORD:=myrec;
	END;
	FUNCTION pATypeid2723_AT2723:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2723_AT2723:=myrec;
		END;
	FUNCTION pATypeid2725_AT2725:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2725_AT2725:=myrec;
		END;
	FUNCTION pATypeid2727_AT2727:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ addrmode  ilcg.pattern@17aaeec}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2727_AT2727:=myrec;
		END;
	FUNCTION pATypeid2729_AT2729:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ wordupto32  ilcg.pattern@1ba4806}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2729_AT2729:=myrec;
		END;
	FUNCTION pATypeid2736_AT2736:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@1e5ebbf}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid2736_AT2736:=myrec;
		END;
	FUNCTION pATypeidType2735_ATT2735:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2736_AT2736;
		 pATypeidType2735_ATT2735:=myrec;
		END;
	FUNCTION pAReference2734_AR2734:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType2735_ATT2735;
		 pAReference2734_AR2734:=myrec;
		END;
	FUNCTION pAReftypeType2733_ART2733:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference2734_AR2734;
		 pAReftypeType2733_ART2733:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc2737_AIL2737:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2737_AIL2737:=myrec;
		END;
		(*! try to cast to type: ref t*)
	FUNCTION pARefcastRefval2732_ARR2732:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType2733_ART2733;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc2737_AIL2737;
		 pARefcastRefval2732_ARR2732:=myrec;
		END;
	FUNCTION pAOrDyadic2739_AOD2739:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpor;
		 pAOrDyadic2739_AOD2739:=myrec;
		END;
	FUNCTION pAAndDyadic2741_AAD2741:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpand;
		 pAAndDyadic2741_AAD2741:=myrec;
		END;
	FUNCTION pATypeid2745_AT2745:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@1e5ebbf}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid2745_AT2745:=myrec;
		END;
	FUNCTION pATypeidType2744_ATT2744:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2745_AT2745;
		 pATypeidType2744_ATT2744:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc2749_AIL2749:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2749_AIL2749:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2748_AR2748:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2749_AIL2749;
		 pARefval2748_AR2748:=myrec;
		END;
	FUNCTION pADerefRhs2747_ADR2747:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2748_AR2748;
		 pADerefRhs2747_ADR2747:=myrec;
		END;
	FUNCTION pARhsValue2746_ARV2746:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2747_ADR2747;
		 pARhsValue2746_ARV2746:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs2743_ACR2743:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType2744_ATT2744;
		myrec^.arg2:=pARhsValue2746_ARV2746;
		 pACastRhs2743_ACR2743:=myrec;
		END;
	FUNCTION pARhsValue2742_ARV2742:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2743_ACR2743;
		 pARhsValue2742_ARV2742:=myrec;
		END;
	FUNCTION pATypeid2753_AT2753:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@1e5ebbf}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid2753_AT2753:=myrec;
		END;
	FUNCTION pATypeidType2752_ATT2752:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2753_AT2753;
		 pATypeidType2752_ATT2752:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc2757_AIL2757:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc2757_AIL2757:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2756_AR2756:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2757_AIL2757;
		 pARefval2756_AR2756:=myrec;
		END;
	FUNCTION pADerefRhs2755_ADR2755:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2756_AR2756;
		 pADerefRhs2755_ADR2755:=myrec;
		END;
	FUNCTION pARhsValue2754_ARV2754:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2755_ADR2755;
		 pARhsValue2754_ARV2754:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs2751_ACR2751:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType2752_ATT2752;
		myrec^.arg2:=pARhsValue2754_ARV2754;
		 pACastRhs2751_ACR2751:=myrec;
		END;
	FUNCTION pARhsValue2750_ARV2750:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2751_ACR2751;
		 pARhsValue2750_ARV2750:=myrec;
		END;
	FUNCTION pADyadicValue2740_ADV2740:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue2742_ARV2742;
		myrec^.arg2:=pARhsValue2750_ARV2750;
		myrec^.fn:=pAAndDyadic2741_AAD2741;
		 pADyadicValue2740_ADV2740:=myrec;
		END;
	FUNCTION pAAndDyadic2759_AAD2759:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpand;
		 pAAndDyadic2759_AAD2759:=myrec;
		END;
	FUNCTION pATypeid2763_AT2763:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@1e5ebbf}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid2763_AT2763:=myrec;
		END;
	FUNCTION pATypeidType2762_ATT2762:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2763_AT2763;
		 pATypeidType2762_ATT2762:=myrec;
		END;
		(*! Match r3 *)
	FUNCTION pAIdLoc2767_AIL2767:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc2767_AIL2767:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2766_AR2766:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2767_AIL2767;
		 pARefval2766_AR2766:=myrec;
		END;
	FUNCTION pADerefRhs2765_ADR2765:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2766_AR2766;
		 pADerefRhs2765_ADR2765:=myrec;
		END;
	FUNCTION pARhsValue2764_ARV2764:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2765_ADR2765;
		 pARhsValue2764_ARV2764:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs2761_ACR2761:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType2762_ATT2762;
		myrec^.arg2:=pARhsValue2764_ARV2764;
		 pACastRhs2761_ACR2761:=myrec;
		END;
	FUNCTION pARhsValue2760_ARV2760:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2761_ACR2761;
		 pARhsValue2760_ARV2760:=myrec;
		END;
	FUNCTION pANotMonadic2769_ANM2769:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpNOT;
		 pANotMonadic2769_ANM2769:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc2773_AIL2773:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc2773_AIL2773:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2772_AR2772:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2773_AIL2773;
		 pARefval2772_AR2772:=myrec;
		END;
	FUNCTION pADerefRhs2771_ADR2771:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2772_AR2772;
		 pADerefRhs2771_ADR2771:=myrec;
		END;
	FUNCTION pARhsValue2770_ARV2770:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2771_ADR2771;
		 pARhsValue2770_ARV2770:=myrec;
		END;
	FUNCTION pAMonadicValue2768_AMV2768:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue2770_ARV2770;
		myrec^.fn:=pANotMonadic2769_ANM2769;
		 pAMonadicValue2768_AMV2768:=myrec;
		END;
	FUNCTION pADyadicValue2758_ADV2758:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue2760_ARV2760;
		myrec^.arg2:=pAMonadicValue2768_AMV2768;
		myrec^.fn:=pAAndDyadic2759_AAD2759;
		 pADyadicValue2758_ADV2758:=myrec;
		END;
	FUNCTION pADyadicValue2738_ADV2738:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pADyadicValue2740_ADV2740;
		myrec^.arg2:=pADyadicValue2758_ADV2758;
		myrec^.fn:=pAOrDyadic2739_AOD2739;
		 pADyadicValue2738_ADV2738:=myrec;
		END;
	FUNCTION pAAssign2731_AA2731:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue2738_ADV2738;
		myrec^.dest:=pARefcastRefval2732_ARR2732;
		 pAAssign2731_AA2731:=myrec;
		END;
	FUNCTION pAAssignMeaning2730_AAM2730:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2731_AA2731;
		 pAAssignMeaning2730_AAM2730:=myrec;
		END;
	FUNCTION pAAssemblypattern2775_AA2775:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'and ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pappends(list,'\n' );
		pappends(list,'not ' );
		pappendp(list,1);
		pappends(list,'\n' );
		pappends(list,'and ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,3);
		pappends(list,' ' );
		pappendp(list,2);
		pappends(list,'\n' );
		pappends(list,'or ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern2775_AA2775:=list;
		END;
	FUNCTION pAAssemblesto2774_AA2774:pprintlist;
	begin
		pAAssemblesto2774_AA2774:=pAAssemblypattern2775_AA2775;
		END;
	FUNCTION pASideeffects2795_AS2795:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2795_AS2795:=nil;
		 pASideeffects2795_AS2795:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2796_AUP2796:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2796_AUP2796:=nil;
		 pAUnconditionalPrecond2796_AUP2796:=myrec;
		END;
	FUNCTION SELECT_SELECT:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=pataddrmode_;
		params^[1]:=patreg_;
		params^[0]:=patreg_;
		params^[3]:=patwordupto32_32;
		paramcount:=5;
		meaning:=pAAssignMeaning2730_AAM2730;
		matchedAssembler:=pAAssemblesto2774_AA2774;
		END;
		SELECT_SELECT:=myrec;
	END;
	FUNCTION pATypeid2799_AT2799:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2799_AT2799:=myrec;
		END;
	FUNCTION pATypeid2801_AT2801:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2801_AT2801:=myrec;
		END;
	FUNCTION pATypeid2803_AT2803:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ word32  ilcg.pattern@226649}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2803_AT2803:=myrec;
		END;
	FUNCTION pATypeid2810_AT2810:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@36428}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid2810_AT2810:=myrec;
		END;
	FUNCTION pATypeidType2809_ATT2809:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2810_AT2810;
		 pATypeidType2809_ATT2809:=myrec;
		END;
	FUNCTION pAReference2808_AR2808:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType2809_ATT2809;
		 pAReference2808_AR2808:=myrec;
		END;
	FUNCTION pAReftypeType2807_ART2807:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference2808_AR2808;
		 pAReftypeType2807_ART2807:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc2811_AIL2811:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc2811_AIL2811:=myrec;
		END;
		(*! try to cast to type: ref t*)
	FUNCTION pARefcastRefval2806_ARR2806:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType2807_ART2807;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc2811_AIL2811;
		 pARefcastRefval2806_ARR2806:=myrec;
		END;
	FUNCTION pATypeid2815_AT2815:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@36428}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid2815_AT2815:=myrec;
		END;
	FUNCTION pATypeidType2814_ATT2814:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2815_AT2815;
		 pATypeidType2814_ATT2814:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc2819_AIL2819:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2819_AIL2819:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2818_AR2818:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2819_AIL2819;
		 pARefval2818_AR2818:=myrec;
		END;
	FUNCTION pADerefRhs2817_ADR2817:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2818_AR2818;
		 pADerefRhs2817_ADR2817:=myrec;
		END;
	FUNCTION pARhsValue2816_ARV2816:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2817_ADR2817;
		 pARhsValue2816_ARV2816:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs2813_ACR2813:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType2814_ATT2814;
		myrec^.arg2:=pARhsValue2816_ARV2816;
		 pACastRhs2813_ACR2813:=myrec;
		END;
	FUNCTION pARhsValue2812_ARV2812:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2813_ACR2813;
		 pARhsValue2812_ARV2812:=myrec;
		END;
	FUNCTION pAAssign2805_AA2805:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue2812_ARV2812;
		myrec^.dest:=pARefcastRefval2806_ARR2806;
		 pAAssign2805_AA2805:=myrec;
		END;
	FUNCTION pAAssignMeaning2804_AAM2804:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2805_AA2805;
		 pAAssignMeaning2804_AAM2804:=myrec;
		END;
	FUNCTION pAAssemblypattern2821_AA2821:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'mov ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,2);
		pappends(list,' ' );
		pappendp(list,0);
		pAAssemblypattern2821_AA2821:=list;
		END;
	FUNCTION pAAssemblesto2820_AA2820:pprintlist;
	begin
		pAAssemblesto2820_AA2820:=pAAssemblypattern2821_AA2821;
		END;
	FUNCTION pASideeffects2828_AS2828:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2828_AS2828:=nil;
		 pASideeffects2828_AS2828:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2829_AUP2829:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2829_AUP2829:=nil;
		 pAUnconditionalPrecond2829_AUP2829:=myrec;
		END;
	FUNCTION LOAD_LOAD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patreg_;
		params^[2]:=patword32_32;
		params^[0]:=patmaddrmode_;
		paramcount:=4;
		meaning:=pAAssignMeaning2804_AAM2804;
		matchedAssembler:=pAAssemblesto2820_AA2820;
		END;
		LOAD_LOAD:=myrec;
	END;
	FUNCTION pATypeid2832_AT2832:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2832_AT2832:=myrec;
		END;
	FUNCTION pATypeid2834_AT2834:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ wreg  ilcg.pattern@15004dd}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2834_AT2834:=myrec;
		END;
	FUNCTION pATypeid2836_AT2836:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ word16  ilcg.pattern@10a4d7c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2836_AT2836:=myrec;
		END;
	FUNCTION pATypeid2843_AT2843:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@174f6ef}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid2843_AT2843:=myrec;
		END;
	FUNCTION pATypeidType2842_ATT2842:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2843_AT2843;
		 pATypeidType2842_ATT2842:=myrec;
		END;
	FUNCTION pAReference2841_AR2841:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType2842_ATT2842;
		 pAReference2841_AR2841:=myrec;
		END;
	FUNCTION pAReftypeType2840_ART2840:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference2841_AR2841;
		 pAReftypeType2840_ART2840:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc2844_AIL2844:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc2844_AIL2844:=myrec;
		END;
		(*! try to cast to type: ref t*)
	FUNCTION pARefcastRefval2839_ARR2839:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType2840_ART2840;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc2844_AIL2844;
		 pARefcastRefval2839_ARR2839:=myrec;
		END;
	FUNCTION pATypeid2848_AT2848:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@174f6ef}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid2848_AT2848:=myrec;
		END;
	FUNCTION pATypeidType2847_ATT2847:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2848_AT2848;
		 pATypeidType2847_ATT2847:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc2852_AIL2852:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2852_AIL2852:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2851_AR2851:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2852_AIL2852;
		 pARefval2851_AR2851:=myrec;
		END;
	FUNCTION pADerefRhs2850_ADR2850:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2851_AR2851;
		 pADerefRhs2850_ADR2850:=myrec;
		END;
	FUNCTION pARhsValue2849_ARV2849:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2850_ADR2850;
		 pARhsValue2849_ARV2849:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs2846_ACR2846:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType2847_ATT2847;
		myrec^.arg2:=pARhsValue2849_ARV2849;
		 pACastRhs2846_ACR2846:=myrec;
		END;
	FUNCTION pARhsValue2845_ARV2845:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2846_ACR2846;
		 pARhsValue2845_ARV2845:=myrec;
		END;
	FUNCTION pAAssign2838_AA2838:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue2845_ARV2845;
		myrec^.dest:=pARefcastRefval2839_ARR2839;
		 pAAssign2838_AA2838:=myrec;
		END;
	FUNCTION pAAssignMeaning2837_AAM2837:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2838_AA2838;
		 pAAssignMeaning2837_AAM2837:=myrec;
		END;
	FUNCTION pAAssemblypattern2854_AA2854:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'mov ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,2);
		pappends(list,' ' );
		pappendp(list,0);
		pAAssemblypattern2854_AA2854:=list;
		END;
	FUNCTION pAAssemblesto2853_AA2853:pprintlist;
	begin
		pAAssemblesto2853_AA2853:=pAAssemblypattern2854_AA2854;
		END;
	FUNCTION pASideeffects2861_AS2861:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2861_AS2861:=nil;
		 pASideeffects2861_AS2861:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2862_AUP2862:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2862_AUP2862:=nil;
		 pAUnconditionalPrecond2862_AUP2862:=myrec;
		END;
	FUNCTION LOADW_LOADW:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patwreg_;
		params^[2]:=patword16_16;
		params^[0]:=patmaddrmode_;
		paramcount:=4;
		meaning:=pAAssignMeaning2837_AAM2837;
		matchedAssembler:=pAAssemblesto2853_AA2853;
		END;
		LOADW_LOADW:=myrec;
	END;
	FUNCTION pATypeid2865_AT2865:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2865_AT2865:=myrec;
		END;
	FUNCTION pATypeid2867_AT2867:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2867_AT2867:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc2871_AIL2871:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc2871_AIL2871:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2870_AR2870:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2871_AIL2871;
		 pARefval2870_AR2870:=myrec;
		END;
	FUNCTION pAOctetFormat2876_AOF2876:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat2876_AOF2876:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype2875_AFP2875:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype2875_AFP2875:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2874_APT2874:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAPredeclaredtypeType2874_APT2874:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc2880_AIL2880:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2880_AIL2880:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2879_AR2879:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2880_AIL2880;
		 pARefval2879_AR2879:=myrec;
		END;
	FUNCTION pADerefRhs2878_ADR2878:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2879_AR2879;
		 pADerefRhs2878_ADR2878:=myrec;
		END;
	FUNCTION pARhsValue2877_ARV2877:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2878_ADR2878;
		 pARhsValue2877_ARV2877:=myrec;
		END;
		(*! try to cast to type: octet*)
	FUNCTION pACastRhs2873_ACR2873:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2874_APT2874;
		myrec^.arg2:=pARhsValue2877_ARV2877;
		 pACastRhs2873_ACR2873:=myrec;
		END;
	FUNCTION pARhsValue2872_ARV2872:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2873_ACR2873;
		 pARhsValue2872_ARV2872:=myrec;
		END;
	FUNCTION pAAssign2869_AA2869:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue2872_ARV2872;
		myrec^.dest:=pARefval2870_AR2870;
		 pAAssign2869_AA2869:=myrec;
		END;
	FUNCTION pAAssignMeaning2868_AAM2868:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2869_AA2869;
		 pAAssignMeaning2868_AAM2868:=myrec;
		END;
	FUNCTION pAAssemblypattern2882_AA2882:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'mov ' );
		pappendp(list,1);
		pappends(list,',' );
		pappends(list,'byte ' );
		pappendp(list,0);
		pAAssemblypattern2882_AA2882:=list;
		END;
	FUNCTION pAAssemblesto2881_AA2881:pprintlist;
	begin
		pAAssemblesto2881_AA2881:=pAAssemblypattern2882_AA2882;
		END;
	FUNCTION pASideeffects2888_AS2888:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2888_AS2888:=nil;
		 pASideeffects2888_AS2888:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2889_AUP2889:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2889_AUP2889:=nil;
		 pAUnconditionalPrecond2889_AUP2889:=myrec;
		END;
	FUNCTION LOADB_LOADB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbreg_;
		params^[0]:=patmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning2868_AAM2868;
		matchedAssembler:=pAAssemblesto2881_AA2881;
		END;
		LOADB_LOADB:=myrec;
	END;
	FUNCTION pATypeid2892_AT2892:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2892_AT2892:=myrec;
		END;
	FUNCTION pATypeid2894_AT2894:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baddrmode  ilcg.pattern@a14fed}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2894_AT2894:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc2898_AIL2898:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2898_AIL2898:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2897_AR2897:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2898_AIL2898;
		 pARefval2897_AR2897:=myrec;
		END;
	FUNCTION pAExtendMonadic2900_AEM2900:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpEXTEND;
		 pAExtendMonadic2900_AEM2900:=myrec;
		END;
	FUNCTION pAUint8Unsigned2906_AU8U2906:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned2906_AU8U2906:=myrec;
		END;
	FUNCTION pAUnsignedTformat2905_AUT2905:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned2906_AU8U2906;
		 pAUnsignedTformat2905_AUT2905:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype2904_ATP2904:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype2904_ATP2904:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2903_APT2903:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType2903_APT2903:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc2910_AIL2910:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc2910_AIL2910:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2909_AR2909:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2910_AIL2910;
		 pARefval2909_AR2909:=myrec;
		END;
	FUNCTION pADerefRhs2908_ADR2908:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2909_AR2909;
		 pADerefRhs2908_ADR2908:=myrec;
		END;
	FUNCTION pARhsValue2907_ARV2907:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2908_ADR2908;
		 pARhsValue2907_ARV2907:=myrec;
		END;
		(*! try to cast to type: uint8*)
	FUNCTION pACastRhs2902_ACR2902:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2903_APT2903;
		myrec^.arg2:=pARhsValue2907_ARV2907;
		 pACastRhs2902_ACR2902:=myrec;
		END;
	FUNCTION pARhsValue2901_ARV2901:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2902_ACR2902;
		 pARhsValue2901_ARV2901:=myrec;
		END;
	FUNCTION pAMonadicValue2899_AMV2899:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue2901_ARV2901;
		myrec^.fn:=pAExtendMonadic2900_AEM2900;
		 pAMonadicValue2899_AMV2899:=myrec;
		END;
	FUNCTION pAAssign2896_AA2896:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pAMonadicValue2899_AMV2899;
		myrec^.dest:=pARefval2897_AR2897;
		 pAAssign2896_AA2896:=myrec;
		END;
	FUNCTION pAAssignMeaning2895_AAM2895:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2896_AA2896;
		 pAAssignMeaning2895_AAM2895:=myrec;
		END;
	FUNCTION pAAssemblypattern2912_AA2912:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movzx ' );
		pappendp(list,0);
		pappends(list,', BYTE  ' );
		pappendp(list,1);
		pAAssemblypattern2912_AA2912:=list;
		END;
	FUNCTION pAAssemblesto2911_AA2911:pprintlist;
	begin
		pAAssemblesto2911_AA2911:=pAAssemblypattern2912_AA2912;
		END;
	FUNCTION pASideeffects2917_AS2917:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2917_AS2917:=nil;
		 pASideeffects2917_AS2917:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2918_AUP2918:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2918_AUP2918:=nil;
		 pAUnconditionalPrecond2918_AUP2918:=myrec;
		END;
	FUNCTION MOVZXB_MOVZXB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		params^[1]:=patbaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning2895_AAM2895;
		matchedAssembler:=pAAssemblesto2911_AA2911;
		END;
		MOVZXB_MOVZXB:=myrec;
	END;
	FUNCTION pATypeid2921_AT2921:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2921_AT2921:=myrec;
		END;
	FUNCTION pATypeid2923_AT2923:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baddrmode  ilcg.pattern@a14fed}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2923_AT2923:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc2927_AIL2927:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2927_AIL2927:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2926_AR2926:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2927_AIL2927;
		 pARefval2926_AR2926:=myrec;
		END;
	FUNCTION pAExtendMonadic2929_AEM2929:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpEXTEND;
		 pAExtendMonadic2929_AEM2929:=myrec;
		END;
	FUNCTION pAUint8Unsigned2935_AU8U2935:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned2935_AU8U2935:=myrec;
		END;
	FUNCTION pAUnsignedTformat2934_AUT2934:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned2935_AU8U2935;
		 pAUnsignedTformat2934_AUT2934:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype2933_ATP2933:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype2933_ATP2933:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2932_APT2932:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType2932_APT2932:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc2939_AIL2939:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc2939_AIL2939:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2938_AR2938:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2939_AIL2939;
		 pARefval2938_AR2938:=myrec;
		END;
	FUNCTION pADerefRhs2937_ADR2937:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2938_AR2938;
		 pADerefRhs2937_ADR2937:=myrec;
		END;
	FUNCTION pARhsValue2936_ARV2936:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2937_ADR2937;
		 pARhsValue2936_ARV2936:=myrec;
		END;
		(*! try to cast to type: uint8*)
	FUNCTION pACastRhs2931_ACR2931:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2932_APT2932;
		myrec^.arg2:=pARhsValue2936_ARV2936;
		 pACastRhs2931_ACR2931:=myrec;
		END;
	FUNCTION pARhsValue2930_ARV2930:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2931_ACR2931;
		 pARhsValue2930_ARV2930:=myrec;
		END;
	FUNCTION pAMonadicValue2928_AMV2928:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue2930_ARV2930;
		myrec^.fn:=pAExtendMonadic2929_AEM2929;
		 pAMonadicValue2928_AMV2928:=myrec;
		END;
	FUNCTION pAAssign2925_AA2925:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pAMonadicValue2928_AMV2928;
		myrec^.dest:=pARefval2926_AR2926;
		 pAAssign2925_AA2925:=myrec;
		END;
	FUNCTION pAAssignMeaning2924_AAM2924:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2925_AA2925;
		 pAAssignMeaning2924_AAM2924:=myrec;
		END;
	FUNCTION pAAssemblypattern2941_AA2941:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movzx ' );
		pappendp(list,0);
		pappends(list,', BYTE  ' );
		pappendp(list,1);
		pAAssemblypattern2941_AA2941:=list;
		END;
	FUNCTION pAAssemblesto2940_AA2940:pprintlist;
	begin
		pAAssemblesto2940_AA2940:=pAAssemblypattern2941_AA2941;
		END;
	FUNCTION pASideeffects2946_AS2946:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2946_AS2946:=nil;
		 pASideeffects2946_AS2946:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2947_AUP2947:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2947_AUP2947:=nil;
		 pAUnconditionalPrecond2947_AUP2947:=myrec;
		END;
	FUNCTION MOVZXB2_MOVZXB2:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		params^[1]:=patbaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning2924_AAM2924;
		matchedAssembler:=pAAssemblesto2940_AA2940;
		END;
		MOVZXB2_MOVZXB2:=myrec;
	END;
	FUNCTION pATypeid2950_AT2950:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2950_AT2950:=myrec;
		END;
	FUNCTION pATypeid2952_AT2952:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baddrmode  ilcg.pattern@a14fed}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2952_AT2952:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc2956_AIL2956:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2956_AIL2956:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2955_AR2955:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2956_AIL2956;
		 pARefval2955_AR2955:=myrec;
		END;
	FUNCTION pASigned2962_AS2962:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned2962_AS2962:=myrec;
		END;
	FUNCTION pASignedTformat2961_AST2961:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned2962_AS2962;
		 pASignedTformat2961_AST2961:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype2960_ATP2960:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype2960_ATP2960:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2959_APT2959:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType2959_APT2959:=myrec;
		END;
	FUNCTION pAExtendMonadic2964_AEM2964:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpEXTEND;
		 pAExtendMonadic2964_AEM2964:=myrec;
		END;
	FUNCTION pAInt8Signed2970_AI8S2970:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed2970_AI8S2970:=myrec;
		END;
	FUNCTION pASignedTformat2969_AST2969:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed2970_AI8S2970;
		 pASignedTformat2969_AST2969:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype2968_ATP2968:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype2968_ATP2968:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2967_APT2967:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType2967_APT2967:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc2974_AIL2974:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc2974_AIL2974:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2973_AR2973:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2974_AIL2974;
		 pARefval2973_AR2973:=myrec;
		END;
	FUNCTION pADerefRhs2972_ADR2972:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2973_AR2973;
		 pADerefRhs2972_ADR2972:=myrec;
		END;
	FUNCTION pARhsValue2971_ARV2971:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2972_ADR2972;
		 pARhsValue2971_ARV2971:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs2966_ACR2966:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2967_APT2967;
		myrec^.arg2:=pARhsValue2971_ARV2971;
		 pACastRhs2966_ACR2966:=myrec;
		END;
	FUNCTION pARhsValue2965_ARV2965:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2966_ACR2966;
		 pARhsValue2965_ARV2965:=myrec;
		END;
	FUNCTION pAMonadicValue2963_AMV2963:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue2965_ARV2965;
		myrec^.fn:=pAExtendMonadic2964_AEM2964;
		 pAMonadicValue2963_AMV2963:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs2958_ACR2958:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2959_APT2959;
		myrec^.arg2:=pAMonadicValue2963_AMV2963;
		 pACastRhs2958_ACR2958:=myrec;
		END;
	FUNCTION pARhsValue2957_ARV2957:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2958_ACR2958;
		 pARhsValue2957_ARV2957:=myrec;
		END;
	FUNCTION pAAssign2954_AA2954:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue2957_ARV2957;
		myrec^.dest:=pARefval2955_AR2955;
		 pAAssign2954_AA2954:=myrec;
		END;
	FUNCTION pAAssignMeaning2953_AAM2953:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2954_AA2954;
		 pAAssignMeaning2953_AAM2953:=myrec;
		END;
	FUNCTION pAAssemblypattern2976_AA2976:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movsx ' );
		pappendp(list,0);
		pappends(list,',BYTE   ' );
		pappendp(list,1);
		pAAssemblypattern2976_AA2976:=list;
		END;
	FUNCTION pAAssemblesto2975_AA2975:pprintlist;
	begin
		pAAssemblesto2975_AA2975:=pAAssemblypattern2976_AA2976;
		END;
	FUNCTION pASideeffects2981_AS2981:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2981_AS2981:=nil;
		 pASideeffects2981_AS2981:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2982_AUP2982:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2982_AUP2982:=nil;
		 pAUnconditionalPrecond2982_AUP2982:=myrec;
		END;
	FUNCTION MOVSXB_MOVSXB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		params^[1]:=patbaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning2953_AAM2953;
		matchedAssembler:=pAAssemblesto2975_AA2975;
		END;
		MOVSXB_MOVSXB:=myrec;
	END;
	FUNCTION pATypeid2985_AT2985:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ uwreg  ilcg.pattern@1bb03ee}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2985_AT2985:=myrec;
		END;
	FUNCTION pATypeid2987_AT2987:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baddrmode  ilcg.pattern@a14fed}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2987_AT2987:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc2991_AIL2991:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2991_AIL2991:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2990_AR2990:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2991_AIL2991;
		 pARefval2990_AR2990:=myrec;
		END;
	FUNCTION pAExtendMonadic2993_AEM2993:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpEXTEND;
		 pAExtendMonadic2993_AEM2993:=myrec;
		END;
	FUNCTION pAUint8Unsigned2999_AU8U2999:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned2999_AU8U2999:=myrec;
		END;
	FUNCTION pAUnsignedTformat2998_AUT2998:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned2999_AU8U2999;
		 pAUnsignedTformat2998_AUT2998:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype2997_ATP2997:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype2997_ATP2997:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2996_APT2996:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType2996_APT2996:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc3003_AIL3003:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3003_AIL3003:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3002_AR3002:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3003_AIL3003;
		 pARefval3002_AR3002:=myrec;
		END;
	FUNCTION pADerefRhs3001_ADR3001:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3002_AR3002;
		 pADerefRhs3001_ADR3001:=myrec;
		END;
	FUNCTION pARhsValue3000_ARV3000:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3001_ADR3001;
		 pARhsValue3000_ARV3000:=myrec;
		END;
		(*! try to cast to type: uint8*)
	FUNCTION pACastRhs2995_ACR2995:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2996_APT2996;
		myrec^.arg2:=pARhsValue3000_ARV3000;
		 pACastRhs2995_ACR2995:=myrec;
		END;
	FUNCTION pARhsValue2994_ARV2994:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2995_ACR2995;
		 pARhsValue2994_ARV2994:=myrec;
		END;
	FUNCTION pAMonadicValue2992_AMV2992:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue2994_ARV2994;
		myrec^.fn:=pAExtendMonadic2993_AEM2993;
		 pAMonadicValue2992_AMV2992:=myrec;
		END;
	FUNCTION pAAssign2989_AA2989:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pAMonadicValue2992_AMV2992;
		myrec^.dest:=pARefval2990_AR2990;
		 pAAssign2989_AA2989:=myrec;
		END;
	FUNCTION pAAssignMeaning2988_AAM2988:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2989_AA2989;
		 pAAssignMeaning2988_AAM2988:=myrec;
		END;
	FUNCTION pAAssemblypattern3005_AA3005:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movzx ' );
		pappendp(list,0);
		pappends(list,',   ' );
		pappendp(list,1);
		pAAssemblypattern3005_AA3005:=list;
		END;
	FUNCTION pAAssemblesto3004_AA3004:pprintlist;
	begin
		pAAssemblesto3004_AA3004:=pAAssemblypattern3005_AA3005;
		END;
	FUNCTION pASideeffects3010_AS3010:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3010_AS3010:=nil;
		 pASideeffects3010_AS3010:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3011_AUP3011:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3011_AUP3011:=nil;
		 pAUnconditionalPrecond3011_AUP3011:=myrec;
		END;
	FUNCTION MOVZXBW_MOVZXBW:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patuwreg_;
		params^[1]:=patbaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning2988_AAM2988;
		matchedAssembler:=pAAssemblesto3004_AA3004;
		END;
		MOVZXBW_MOVZXBW:=myrec;
	END;
	FUNCTION pATypeid3014_AT3014:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ swreg  ilcg.pattern@15023d2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3014_AT3014:=myrec;
		END;
	FUNCTION pATypeid3016_AT3016:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baddrmode  ilcg.pattern@a14fed}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3016_AT3016:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc3020_AIL3020:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3020_AIL3020:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3019_AR3019:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3020_AIL3020;
		 pARefval3019_AR3019:=myrec;
		END;
	FUNCTION pAExtendMonadic3022_AEM3022:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpEXTEND;
		 pAExtendMonadic3022_AEM3022:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc3026_AIL3026:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3026_AIL3026:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3025_AR3025:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3026_AIL3026;
		 pARefval3025_AR3025:=myrec;
		END;
	FUNCTION pADerefRhs3024_ADR3024:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3025_AR3025;
		 pADerefRhs3024_ADR3024:=myrec;
		END;
	FUNCTION pARhsValue3023_ARV3023:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3024_ADR3024;
		 pARhsValue3023_ARV3023:=myrec;
		END;
	FUNCTION pAMonadicValue3021_AMV3021:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue3023_ARV3023;
		myrec^.fn:=pAExtendMonadic3022_AEM3022;
		 pAMonadicValue3021_AMV3021:=myrec;
		END;
	FUNCTION pAAssign3018_AA3018:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pAMonadicValue3021_AMV3021;
		myrec^.dest:=pARefval3019_AR3019;
		 pAAssign3018_AA3018:=myrec;
		END;
	FUNCTION pAAssignMeaning3017_AAM3017:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3018_AA3018;
		 pAAssignMeaning3017_AAM3017:=myrec;
		END;
	FUNCTION pAAssemblypattern3028_AA3028:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movsx ' );
		pappendp(list,0);
		pappends(list,',   ' );
		pappendp(list,1);
		pAAssemblypattern3028_AA3028:=list;
		END;
	FUNCTION pAAssemblesto3027_AA3027:pprintlist;
	begin
		pAAssemblesto3027_AA3027:=pAAssemblypattern3028_AA3028;
		END;
	FUNCTION pASideeffects3033_AS3033:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3033_AS3033:=nil;
		 pASideeffects3033_AS3033:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3034_AUP3034:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3034_AUP3034:=nil;
		 pAUnconditionalPrecond3034_AUP3034:=myrec;
		END;
	FUNCTION MOVSXBW_MOVSXBW:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patswreg_;
		params^[1]:=patbaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning3017_AAM3017;
		matchedAssembler:=pAAssemblesto3027_AA3027;
		END;
		MOVSXBW_MOVSXBW:=myrec;
	END;
	FUNCTION pATypeid3037_AT3037:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3037_AT3037:=myrec;
		END;
	FUNCTION pATypeid3039_AT3039:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ uwaddrmode  ilcg.pattern@1bd523d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3039_AT3039:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc3043_AIL3043:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3043_AIL3043:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3042_AR3042:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3043_AIL3043;
		 pARefval3042_AR3042:=myrec;
		END;
	FUNCTION pAExtendMonadic3045_AEM3045:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpEXTEND;
		 pAExtendMonadic3045_AEM3045:=myrec;
		END;
	FUNCTION pAUint16Unsigned3051_AU16U3051:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16;
		 pAUint16Unsigned3051_AU16U3051:=myrec;
		END;
	FUNCTION pAUnsignedTformat3050_AUT3050:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint16Unsigned3051_AU16U3051;
		 pAUnsignedTformat3050_AUT3050:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype3049_ATP3049:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pATformatPredeclaredtype3049_ATP3049:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3048_APT3048:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pAPredeclaredtypeType3048_APT3048:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc3055_AIL3055:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3055_AIL3055:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3054_AR3054:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3055_AIL3055;
		 pARefval3054_AR3054:=myrec;
		END;
	FUNCTION pADerefRhs3053_ADR3053:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3054_AR3054;
		 pADerefRhs3053_ADR3053:=myrec;
		END;
	FUNCTION pARhsValue3052_ARV3052:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3053_ADR3053;
		 pARhsValue3052_ARV3052:=myrec;
		END;
		(*! try to cast to type: uint16*)
	FUNCTION pACastRhs3047_ACR3047:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType3048_APT3048;
		myrec^.arg2:=pARhsValue3052_ARV3052;
		 pACastRhs3047_ACR3047:=myrec;
		END;
	FUNCTION pARhsValue3046_ARV3046:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3047_ACR3047;
		 pARhsValue3046_ARV3046:=myrec;
		END;
	FUNCTION pAMonadicValue3044_AMV3044:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue3046_ARV3046;
		myrec^.fn:=pAExtendMonadic3045_AEM3045;
		 pAMonadicValue3044_AMV3044:=myrec;
		END;
	FUNCTION pAAssign3041_AA3041:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pAMonadicValue3044_AMV3044;
		myrec^.dest:=pARefval3042_AR3042;
		 pAAssign3041_AA3041:=myrec;
		END;
	FUNCTION pAAssignMeaning3040_AAM3040:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3041_AA3041;
		 pAAssignMeaning3040_AAM3040:=myrec;
		END;
	FUNCTION pAAssemblypattern3057_AA3057:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movzx ' );
		pappendp(list,0);
		pappends(list,', word  ' );
		pappendp(list,1);
		pAAssemblypattern3057_AA3057:=list;
		END;
	FUNCTION pAAssemblesto3056_AA3056:pprintlist;
	begin
		pAAssemblesto3056_AA3056:=pAAssemblypattern3057_AA3057;
		END;
	FUNCTION pASideeffects3062_AS3062:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3062_AS3062:=nil;
		 pASideeffects3062_AS3062:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3063_AUP3063:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3063_AUP3063:=nil;
		 pAUnconditionalPrecond3063_AUP3063:=myrec;
		END;
	FUNCTION MOVZXW_MOVZXW:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		params^[1]:=patuwaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning3040_AAM3040;
		matchedAssembler:=pAAssemblesto3056_AA3056;
		END;
		MOVZXW_MOVZXW:=myrec;
	END;
	FUNCTION pATypeid3066_AT3066:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3066_AT3066:=myrec;
		END;
	FUNCTION pATypeid3068_AT3068:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ wreg  ilcg.pattern@15004dd}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3068_AT3068:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc3072_AIL3072:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3072_AIL3072:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3071_AR3071:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3072_AIL3072;
		 pARefval3071_AR3071:=myrec;
		END;
	FUNCTION pASigned3078_AS3078:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned3078_AS3078:=myrec;
		END;
	FUNCTION pASignedTformat3077_AST3077:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned3078_AS3078;
		 pASignedTformat3077_AST3077:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype3076_ATP3076:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype3076_ATP3076:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3075_APT3075:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType3075_APT3075:=myrec;
		END;
	FUNCTION pAExtendMonadic3080_AEM3080:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpEXTEND;
		 pAExtendMonadic3080_AEM3080:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc3084_AIL3084:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3084_AIL3084:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3083_AR3083:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3084_AIL3084;
		 pARefval3083_AR3083:=myrec;
		END;
	FUNCTION pADerefRhs3082_ADR3082:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3083_AR3083;
		 pADerefRhs3082_ADR3082:=myrec;
		END;
	FUNCTION pARhsValue3081_ARV3081:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3082_ADR3082;
		 pARhsValue3081_ARV3081:=myrec;
		END;
	FUNCTION pAMonadicValue3079_AMV3079:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue3081_ARV3081;
		myrec^.fn:=pAExtendMonadic3080_AEM3080;
		 pAMonadicValue3079_AMV3079:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs3074_ACR3074:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType3075_APT3075;
		myrec^.arg2:=pAMonadicValue3079_AMV3079;
		 pACastRhs3074_ACR3074:=myrec;
		END;
	FUNCTION pARhsValue3073_ARV3073:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3074_ACR3074;
		 pARhsValue3073_ARV3073:=myrec;
		END;
	FUNCTION pAAssign3070_AA3070:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue3073_ARV3073;
		myrec^.dest:=pARefval3071_AR3071;
		 pAAssign3070_AA3070:=myrec;
		END;
	FUNCTION pAAssignMeaning3069_AAM3069:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3070_AA3070;
		 pAAssignMeaning3069_AAM3069:=myrec;
		END;
	FUNCTION pAAssemblypattern3086_AA3086:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movsx ' );
		pappendp(list,0);
		pappends(list,',   ' );
		pappendp(list,1);
		pAAssemblypattern3086_AA3086:=list;
		END;
	FUNCTION pAAssemblesto3085_AA3085:pprintlist;
	begin
		pAAssemblesto3085_AA3085:=pAAssemblypattern3086_AA3086;
		END;
	FUNCTION pASideeffects3091_AS3091:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3091_AS3091:=nil;
		 pASideeffects3091_AS3091:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3092_AUP3092:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3092_AUP3092:=nil;
		 pAUnconditionalPrecond3092_AUP3092:=myrec;
		END;
	FUNCTION MOVSXW_MOVSXW:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		params^[1]:=patwreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning3069_AAM3069;
		matchedAssembler:=pAAssemblesto3085_AA3085;
		END;
		MOVSXW_MOVSXW:=myrec;
	END;
	FUNCTION pATypeid3095_AT3095:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3095_AT3095:=myrec;
		END;
	FUNCTION pATypeid3097_AT3097:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3097_AT3097:=myrec;
		END;
		(*! Match b *)
	FUNCTION pAIdLoc3101_AIL3101:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3101_AIL3101:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3100_AR3100:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3101_AIL3101;
		 pARefval3100_AR3100:=myrec;
		END;
	FUNCTION pAOctetFormat3106_AOF3106:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat3106_AOF3106:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype3105_AFP3105:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype3105_AFP3105:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3104_APT3104:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAPredeclaredtypeType3104_APT3104:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc3110_AIL3110:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3110_AIL3110:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3109_AR3109:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3110_AIL3110;
		 pARefval3109_AR3109:=myrec;
		END;
	FUNCTION pADerefRhs3108_ADR3108:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3109_AR3109;
		 pADerefRhs3108_ADR3108:=myrec;
		END;
	FUNCTION pARhsValue3107_ARV3107:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3108_ADR3108;
		 pARhsValue3107_ARV3107:=myrec;
		END;
		(*! try to cast to type: octet*)
	FUNCTION pACastRhs3103_ACR3103:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType3104_APT3104;
		myrec^.arg2:=pARhsValue3107_ARV3107;
		 pACastRhs3103_ACR3103:=myrec;
		END;
	FUNCTION pARhsValue3102_ARV3102:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3103_ACR3103;
		 pARhsValue3102_ARV3102:=myrec;
		END;
	FUNCTION pAAssign3099_AA3099:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue3102_ARV3102;
		myrec^.dest:=pARefval3100_AR3100;
		 pAAssign3099_AA3099:=myrec;
		END;
	FUNCTION pAAssignMeaning3098_AAM3098:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3099_AA3099;
		 pAAssignMeaning3098_AAM3098:=myrec;
		END;
	FUNCTION pAAssemblypattern3112_AA3112:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'push ' );
		pappendp(list,0);
		pappends(list,'\nmov ' );
		pappendp(list,1);
		pappends(list,',BYTE[esp]\nadd esp,4 ' );
		pAAssemblypattern3112_AA3112:=list;
		END;
	FUNCTION pAAssemblesto3111_AA3111:pprintlist;
	begin
		pAAssemblesto3111_AA3111:=pAAssemblypattern3112_AA3112;
		END;
	FUNCTION pASideeffects3118_AS3118:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3118_AS3118:=nil;
		 pASideeffects3118_AS3118:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3119_AUP3119:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3119_AUP3119:=nil;
		 pAUnconditionalPrecond3119_AUP3119:=myrec;
		END;
	FUNCTION ToBYTE_TBYTE:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbreg_;
		params^[0]:=patreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning3098_AAM3098;
		matchedAssembler:=pAAssemblesto3111_AA3111;
		END;
		ToBYTE_TBYTE:=myrec;
	END;
	FUNCTION pATypeid3122_AT3122:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baddrmode  ilcg.pattern@a14fed}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3122_AT3122:=myrec;
		END;
	FUNCTION pATypeid3124_AT3124:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3124_AT3124:=myrec;
		END;
	FUNCTION pAOctetFormat3132_AOF3132:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat3132_AOF3132:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype3131_AFP3131:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype3131_AFP3131:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3130_APT3130:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAPredeclaredtypeType3130_APT3130:=myrec;
		END;
	FUNCTION pAReference3129_AR3129:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType3130_APT3130;
		 pAReference3129_AR3129:=myrec;
		END;
	FUNCTION pAReftypeType3128_ART3128:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference3129_AR3129;
		 pAReftypeType3128_ART3128:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc3133_AIL3133:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3133_AIL3133:=myrec;
		END;
		(*! try to cast to type: ref octet*)
	FUNCTION pARefcastRefval3127_ARR3127:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType3128_ART3128;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc3133_AIL3133;
		 pARefcastRefval3127_ARR3127:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc3137_AIL3137:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3137_AIL3137:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3136_AR3136:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3137_AIL3137;
		 pARefval3136_AR3136:=myrec;
		END;
	FUNCTION pADerefRhs3135_ADR3135:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3136_AR3136;
		 pADerefRhs3135_ADR3135:=myrec;
		END;
	FUNCTION pARhsValue3134_ARV3134:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3135_ADR3135;
		 pARhsValue3134_ARV3134:=myrec;
		END;
	FUNCTION pAAssign3126_AA3126:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue3134_ARV3134;
		myrec^.dest:=pARefcastRefval3127_ARR3127;
		 pAAssign3126_AA3126:=myrec;
		END;
	FUNCTION pAAssignMeaning3125_AAM3125:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3126_AA3126;
		 pAAssignMeaning3125_AAM3125:=myrec;
		END;
	FUNCTION pAAssemblypattern3139_AA3139:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'mov BYTE ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern3139_AA3139:=list;
		END;
	FUNCTION pAAssemblesto3138_AA3138:pprintlist;
	begin
		pAAssemblesto3138_AA3138:=pAAssemblypattern3139_AA3139;
		END;
	FUNCTION pASideeffects3144_AS3144:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3144_AS3144:=nil;
		 pASideeffects3144_AS3144:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3145_AUP3145:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3145_AUP3145:=nil;
		 pAUnconditionalPrecond3145_AUP3145:=myrec;
		END;
	FUNCTION STOREBR_STOREBR:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbreg_;
		params^[0]:=patbaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning3125_AAM3125;
		matchedAssembler:=pAAssemblesto3138_AA3138;
		END;
		STOREBR_STOREBR:=myrec;
	END;
	FUNCTION pATypeid3148_AT3148:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3148_AT3148:=myrec;
		END;
	FUNCTION pATypeid3150_AT3150:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3150_AT3150:=myrec;
		END;
	FUNCTION pATypeid3152_AT3152:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ word32  ilcg.pattern@226649}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3152_AT3152:=myrec;
		END;
	FUNCTION pATypeid3159_AT3159:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@1ef48fb}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid3159_AT3159:=myrec;
		END;
	FUNCTION pATypeidType3158_ATT3158:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3159_AT3159;
		 pATypeidType3158_ATT3158:=myrec;
		END;
	FUNCTION pAReference3157_AR3157:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType3158_ATT3158;
		 pAReference3157_AR3157:=myrec;
		END;
	FUNCTION pAReftypeType3156_ART3156:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference3157_AR3157;
		 pAReftypeType3156_ART3156:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc3160_AIL3160:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3160_AIL3160:=myrec;
		END;
		(*! try to cast to type: ref t*)
	FUNCTION pARefcastRefval3155_ARR3155:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType3156_ART3156;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc3160_AIL3160;
		 pARefcastRefval3155_ARR3155:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc3164_AIL3164:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3164_AIL3164:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3163_AR3163:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3164_AIL3164;
		 pARefval3163_AR3163:=myrec;
		END;
	FUNCTION pADerefRhs3162_ADR3162:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3163_AR3163;
		 pADerefRhs3162_ADR3162:=myrec;
		END;
	FUNCTION pARhsValue3161_ARV3161:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3162_ADR3162;
		 pARhsValue3161_ARV3161:=myrec;
		END;
	FUNCTION pAAssign3154_AA3154:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue3161_ARV3161;
		myrec^.dest:=pARefcastRefval3155_ARR3155;
		 pAAssign3154_AA3154:=myrec;
		END;
	FUNCTION pAAssignMeaning3153_AAM3153:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3154_AA3154;
		 pAAssignMeaning3153_AAM3153:=myrec;
		END;
	FUNCTION pAAssemblypattern3166_AA3166:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'mov ' );
		pappendp(list,2);
		pappends(list,' ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern3166_AA3166:=list;
		END;
	FUNCTION pAAssemblesto3165_AA3165:pprintlist;
	begin
		pAAssemblesto3165_AA3165:=pAAssemblypattern3166_AA3166;
		END;
	FUNCTION pASideeffects3173_AS3173:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3173_AS3173:=nil;
		 pASideeffects3173_AS3173:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3174_AUP3174:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3174_AUP3174:=nil;
		 pAUnconditionalPrecond3174_AUP3174:=myrec;
		END;
	FUNCTION STORER_STORER:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patreg_;
		params^[2]:=patword32_32;
		params^[0]:=patmaddrmode_;
		paramcount:=4;
		meaning:=pAAssignMeaning3153_AAM3153;
		matchedAssembler:=pAAssemblesto3165_AA3165;
		END;
		STORER_STORER:=myrec;
	END;
	FUNCTION pATypeid3177_AT3177:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3177_AT3177:=myrec;
		END;
	FUNCTION pATypeid3179_AT3179:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ wreg  ilcg.pattern@15004dd}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3179_AT3179:=myrec;
		END;
	FUNCTION pATypeid3181_AT3181:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ word16  ilcg.pattern@10a4d7c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3181_AT3181:=myrec;
		END;
	FUNCTION pATypeid3188_AT3188:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@585f2a}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid3188_AT3188:=myrec;
		END;
	FUNCTION pATypeidType3187_ATT3187:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3188_AT3188;
		 pATypeidType3187_ATT3187:=myrec;
		END;
	FUNCTION pAReference3186_AR3186:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType3187_ATT3187;
		 pAReference3186_AR3186:=myrec;
		END;
	FUNCTION pAReftypeType3185_ART3185:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference3186_AR3186;
		 pAReftypeType3185_ART3185:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc3189_AIL3189:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3189_AIL3189:=myrec;
		END;
		(*! try to cast to type: ref t*)
	FUNCTION pARefcastRefval3184_ARR3184:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType3185_ART3185;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc3189_AIL3189;
		 pARefcastRefval3184_ARR3184:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc3193_AIL3193:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3193_AIL3193:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3192_AR3192:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3193_AIL3193;
		 pARefval3192_AR3192:=myrec;
		END;
	FUNCTION pADerefRhs3191_ADR3191:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3192_AR3192;
		 pADerefRhs3191_ADR3191:=myrec;
		END;
	FUNCTION pARhsValue3190_ARV3190:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3191_ADR3191;
		 pARhsValue3190_ARV3190:=myrec;
		END;
	FUNCTION pAAssign3183_AA3183:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue3190_ARV3190;
		myrec^.dest:=pARefcastRefval3184_ARR3184;
		 pAAssign3183_AA3183:=myrec;
		END;
	FUNCTION pAAssignMeaning3182_AAM3182:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3183_AA3183;
		 pAAssignMeaning3182_AAM3182:=myrec;
		END;
	FUNCTION pAAssemblypattern3195_AA3195:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'mov ' );
		pappendp(list,2);
		pappends(list,' ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern3195_AA3195:=list;
		END;
	FUNCTION pAAssemblesto3194_AA3194:pprintlist;
	begin
		pAAssemblesto3194_AA3194:=pAAssemblypattern3195_AA3195;
		END;
	FUNCTION pASideeffects3202_AS3202:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3202_AS3202:=nil;
		 pASideeffects3202_AS3202:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3203_AUP3203:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3203_AUP3203:=nil;
		 pAUnconditionalPrecond3203_AUP3203:=myrec;
		END;
	FUNCTION STOREWR_STOREWR:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patwreg_;
		params^[2]:=patword16_16;
		params^[0]:=patmaddrmode_;
		paramcount:=4;
		meaning:=pAAssignMeaning3182_AAM3182;
		matchedAssembler:=pAAssemblesto3194_AA3194;
		END;
		STOREWR_STOREWR:=myrec;
	END;
	FUNCTION pATypeid3206_AT3206:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3206_AT3206:=myrec;
		END;
	FUNCTION pATypeid3215_AT3215:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@14b84ad}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid3215_AT3215:=myrec;
		END;
	FUNCTION pATypeidType3214_ATT3214:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3215_AT3215;
		 pATypeidType3214_ATT3214:=myrec;
		END;
	FUNCTION pAReference3213_AR3213:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType3214_ATT3214;
		 pAReference3213_AR3213:=myrec;
		END;
	FUNCTION pAReftypeType3212_ART3212:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference3213_AR3213;
		 pAReftypeType3212_ART3212:=myrec;
		END;
		(*! Match r3 *)
	FUNCTION pAIdLoc3216_AIL3216:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3216_AIL3216:=myrec;
		END;
		(*! try to cast to type: ref t*)
	FUNCTION pARefcastRefval3211_ARR3211:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType3212_ART3212;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc3216_AIL3216;
		 pARefcastRefval3211_ARR3211:=myrec;
		END;
	FUNCTION pATypeid3223_AT3223:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@14b84ad}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid3223_AT3223:=myrec;
		END;
	FUNCTION pATypeidType3222_ATT3222:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3223_AT3223;
		 pATypeidType3222_ATT3222:=myrec;
		END;
	FUNCTION pAReference3221_AR3221:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType3222_ATT3222;
		 pAReference3221_AR3221:=myrec;
		END;
	FUNCTION pAReftypeType3220_ART3220:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference3221_AR3221;
		 pAReftypeType3220_ART3220:=myrec;
		END;
		(*! Match r3 *)
	FUNCTION pAIdLoc3224_AIL3224:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3224_AIL3224:=myrec;
		END;
		(*! try to cast to type: ref t*)
	FUNCTION pARefcastRefval3219_ARR3219:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType3220_ART3220;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc3224_AIL3224;
		 pARefcastRefval3219_ARR3219:=myrec;
		END;
	FUNCTION pADerefRhs3218_ADR3218:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval3219_ARR3219;
		 pADerefRhs3218_ADR3218:=myrec;
		END;
	FUNCTION pARhsValue3217_ARV3217:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3218_ADR3218;
		 pARhsValue3217_ARV3217:=myrec;
		END;
	FUNCTION pAAssign3210_AA3210:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue3217_ARV3217;
		myrec^.dest:=pARefcastRefval3211_ARR3211;
		 pAAssign3210_AA3210:=myrec;
		END;
	FUNCTION pAAssignMeaning3209_AAM3209:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3210_AA3210;
		 pAAssignMeaning3209_AAM3209:=myrec;
		END;
	FUNCTION pAAssemblypattern3226_AA3226:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,';nulmov ' );
		pappendp(list,0);
		pappendp(list,0);
		pAAssemblypattern3226_AA3226:=list;
		END;
	FUNCTION pAAssemblesto3225_AA3225:pprintlist;
	begin
		pAAssemblesto3225_AA3225:=pAAssemblypattern3226_AA3226;
		END;
	FUNCTION pASideeffects3230_AS3230:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3230_AS3230:=nil;
		 pASideeffects3230_AS3230:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3231_AUP3231:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3231_AUP3231:=nil;
		 pAUnconditionalPrecond3231_AUP3231:=myrec;
		END;
	FUNCTION NULMOV_NULMOV:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		params^[1]:=typeparam;
		paramcount:=3;
		meaning:=pAAssignMeaning3209_AAM3209;
		matchedAssembler:=pAAssemblesto3225_AA3225;
		END;
		NULMOV_NULMOV:=myrec;
	END;
	FUNCTION pATypeid3234_AT3234:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ addrmode  ilcg.pattern@17aaeec}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3234_AT3234:=myrec;
		END;
	FUNCTION pATypeid3238_AT3238:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@2a2ae9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3238_AT3238:=myrec;
		END;
	FUNCTION pATypeid3245_AT3245:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@16e588e}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid3245_AT3245:=myrec;
		END;
	FUNCTION pATypeidType3244_ATT3244:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3245_AT3245;
		 pATypeidType3244_ATT3244:=myrec;
		END;
	FUNCTION pAReference3243_AR3243:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType3244_ATT3244;
		 pAReference3243_AR3243:=myrec;
		END;
	FUNCTION pAReftypeType3242_ART3242:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference3243_AR3243;
		 pAReftypeType3242_ART3242:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc3246_AIL3246:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3246_AIL3246:=myrec;
		END;
		(*! try to cast to type: ref t*)
	FUNCTION pARefcastRefval3241_ARR3241:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType3242_ART3242;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc3246_AIL3246;
		 pARefcastRefval3241_ARR3241:=myrec;
		END;
	FUNCTION pATypeid3250_AT3250:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@16e588e}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid3250_AT3250:=myrec;
		END;
	FUNCTION pATypeidType3249_ATT3249:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3250_AT3250;
		 pATypeidType3249_ATT3249:=myrec;
		END;
	FUNCTION pAConstRhs3252_ACR3252:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(2);;
		 pAConstRhs3252_ACR3252:=myrec;
		END;
	FUNCTION pARhsValue3251_ARV3251:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs3252_ACR3252;
		 pARhsValue3251_ARV3251:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs3248_ACR3248:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType3249_ATT3249;
		myrec^.arg2:=pARhsValue3251_ARV3251;
		 pACastRhs3248_ACR3248:=myrec;
		END;
	FUNCTION pARhsValue3247_ARV3247:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3248_ACR3248;
		 pARhsValue3247_ARV3247:=myrec;
		END;
	FUNCTION pAAssign3240_AA3240:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue3247_ARV3247;
		myrec^.dest:=pARefcastRefval3241_ARR3241;
		 pAAssign3240_AA3240:=myrec;
		END;
	FUNCTION pAAssignMeaning3239_AAM3239:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3240_AA3240;
		 pAAssignMeaning3239_AAM3239:=myrec;
		END;
	FUNCTION pAAssemblypattern3254_AA3254:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'mov ' );
		pappendp(list,1);
		pappends(list,' ' );
		pappendp(list,0);
		pappends(list,',' );
		pappends(list,' ' );
		pappendp(list,2);
		pAAssemblypattern3254_AA3254:=list;
		END;
	FUNCTION pAAssemblesto3253_AA3253:pprintlist;
	begin
		pAAssemblesto3253_AA3253:=pAAssemblypattern3254_AA3254;
		END;
	FUNCTION pASideeffects3262_AS3262:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3262_AS3262:=nil;
		 pASideeffects3262_AS3262:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3263_AUP3263:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3263_AUP3263:=nil;
		 pAUnconditionalPrecond3263_AUP3263:=myrec;
		END;
	FUNCTION STORELIT_STORELIT:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=typeparam;
		params^[2]:=patint_;
		params^[0]:=pataddrmode_;
		paramcount:=4;
		meaning:=pAAssignMeaning3239_AAM3239;
		matchedAssembler:=pAAssemblesto3253_AA3253;
		END;
		STORELIT_STORELIT:=myrec;
	END;
	FUNCTION pATypeid3266_AT3266:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3266_AT3266:=myrec;
		END;
	FUNCTION pATypeid3270_AT3270:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@2a2ae9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3270_AT3270:=myrec;
		END;
	FUNCTION pATypeid3277_AT3277:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@5c2445}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid3277_AT3277:=myrec;
		END;
	FUNCTION pATypeidType3276_ATT3276:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3277_AT3277;
		 pATypeidType3276_ATT3276:=myrec;
		END;
	FUNCTION pAReference3275_AR3275:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType3276_ATT3276;
		 pAReference3275_AR3275:=myrec;
		END;
	FUNCTION pAReftypeType3274_ART3274:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference3275_AR3275;
		 pAReftypeType3274_ART3274:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc3278_AIL3278:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3278_AIL3278:=myrec;
		END;
		(*! try to cast to type: ref t*)
	FUNCTION pARefcastRefval3273_ARR3273:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType3274_ART3274;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc3278_AIL3278;
		 pARefcastRefval3273_ARR3273:=myrec;
		END;
	FUNCTION pATypeid3282_AT3282:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@5c2445}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid3282_AT3282:=myrec;
		END;
	FUNCTION pATypeidType3281_ATT3281:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3282_AT3282;
		 pATypeidType3281_ATT3281:=myrec;
		END;
	FUNCTION pAOptionalsign3286_AO3286:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign3286_AO3286:=nil;
		 pAOptionalsign3286_AO3286:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber3285_AIN3285:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=0 ;
		 pAIntegerNumber3285_AIN3285:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs3284_ANR3284:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber3285_AIN3285;
		 pANumberRhs3284_ANR3284:=myrec;
		END;
	FUNCTION pARhsValue3283_ARV3283:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs3284_ANR3284;
		 pARhsValue3283_ARV3283:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs3280_ACR3280:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType3281_ATT3281;
		myrec^.arg2:=pARhsValue3283_ARV3283;
		 pACastRhs3280_ACR3280:=myrec;
		END;
	FUNCTION pARhsValue3279_ARV3279:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3280_ACR3280;
		 pARhsValue3279_ARV3279:=myrec;
		END;
	FUNCTION pAAssign3272_AA3272:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue3279_ARV3279;
		myrec^.dest:=pARefcastRefval3273_ARR3273;
		 pAAssign3272_AA3272:=myrec;
		END;
	FUNCTION pAAssignMeaning3271_AAM3271:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3272_AA3272;
		 pAAssignMeaning3271_AAM3271:=myrec;
		END;
	FUNCTION pAAssemblypattern3288_AA3288:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'xor ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,0);
		pAAssemblypattern3288_AA3288:=list;
		END;
	FUNCTION pAAssemblesto3287_AA3287:pprintlist;
	begin
		pAAssemblesto3287_AA3287:=pAAssemblypattern3288_AA3288;
		END;
	FUNCTION pASideeffects3293_AS3293:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3293_AS3293:=nil;
		 pASideeffects3293_AS3293:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3294_AUP3294:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3294_AUP3294:=nil;
		 pAUnconditionalPrecond3294_AUP3294:=myrec;
		END;
	FUNCTION CLEARREG_CLEARREG:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=typeparam;
		params^[2]:=patint_;
		params^[0]:=patreg_;
		paramcount:=4;
		meaning:=pAAssignMeaning3271_AAM3271;
		matchedAssembler:=pAAssemblesto3287_AA3287;
		END;
		CLEARREG_CLEARREG:=myrec;
	END;
	FUNCTION pATypeid3297_AT3297:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ nonmultoperator  ilcg.pattern@752144}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3297_AT3297:=myrec;
		END;
	FUNCTION pATypeid3299_AT3299:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ addrmode  ilcg.pattern@17aaeec}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3299_AT3299:=myrec;
		END;
	FUNCTION pATypeid3303_AT3303:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ offset  ilcg.pattern@b0c5a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3303_AT3303:=myrec;
		END;
	FUNCTION pATypeid3310_AT3310:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@6d98}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid3310_AT3310:=myrec;
		END;
	FUNCTION pATypeidType3309_ATT3309:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3310_AT3310;
		 pATypeidType3309_ATT3309:=myrec;
		END;
	FUNCTION pAReference3308_AR3308:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType3309_ATT3309;
		 pAReference3308_AR3308:=myrec;
		END;
	FUNCTION pAReftypeType3307_ART3307:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference3308_AR3308;
		 pAReftypeType3307_ART3307:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc3311_AIL3311:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3311_AIL3311:=myrec;
		END;
		(*! try to cast to type: ref t*)
	FUNCTION pARefcastRefval3306_ARR3306:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType3307_ART3307;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc3311_AIL3311;
		 pARefcastRefval3306_ARR3306:=myrec;
		END;
	FUNCTION pAIdentifierDyadic3313_AID3313:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic3313_AID3313:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc3317_AIL3317:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3317_AIL3317:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3316_AR3316:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3317_AIL3317;
		 pARefval3316_AR3316:=myrec;
		END;
	FUNCTION pADerefRhs3315_ADR3315:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3316_AR3316;
		 pADerefRhs3315_ADR3315:=myrec;
		END;
	FUNCTION pARhsValue3314_ARV3314:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3315_ADR3315;
		 pARhsValue3314_ARV3314:=myrec;
		END;
	FUNCTION pATypeid3321_AT3321:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@6d98}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid3321_AT3321:=myrec;
		END;
	FUNCTION pATypeidType3320_ATT3320:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3321_AT3321;
		 pATypeidType3320_ATT3320:=myrec;
		END;
		(*! Match sm *)
	FUNCTION pAIdLoc3323_AIL3323:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(3);
		 pAIdLoc3323_AIL3323:=myrec;
		END;
		(*sm *)
	FUNCTION pALocValue3322_ALV3322:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3323_AIL3323;
		 pALocValue3322_ALV3322:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs3319_ACR3319:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType3320_ATT3320;
		myrec^.arg2:=pALocValue3322_ALV3322;
		 pACastRhs3319_ACR3319:=myrec;
		END;
	FUNCTION pARhsValue3318_ARV3318:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3319_ACR3319;
		 pARhsValue3318_ARV3318:=myrec;
		END;
	FUNCTION pADyadicValue3312_ADV3312:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3314_ARV3314;
		myrec^.arg2:=pARhsValue3318_ARV3318;
		myrec^.fn:=pAIdentifierDyadic3313_AID3313;
		 pADyadicValue3312_ADV3312:=myrec;
		END;
	FUNCTION pAAssign3305_AA3305:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue3312_ADV3312;
		myrec^.dest:=pARefcastRefval3306_ARR3306;
		 pAAssign3305_AA3305:=myrec;
		END;
	FUNCTION pAAssignMeaning3304_AAM3304:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3305_AA3305;
		 pAAssignMeaning3304_AAM3304:=myrec;
		END;
	FUNCTION pAAssemblypattern3325_AA3325:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'  ' );
		pappendp(list,2);
		pappends(list,' ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,3);
		pAAssemblypattern3325_AA3325:=list;
		END;
	FUNCTION pAAssemblesto3324_AA3324:pprintlist;
	begin
		pAAssemblesto3324_AA3324:=pAAssemblypattern3325_AA3325;
		END;
	FUNCTION pASideeffects3333_AS3333:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3333_AS3333:=nil;
		 pASideeffects3333_AS3333:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3334_AUP3334:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3334_AUP3334:=nil;
		 pAUnconditionalPrecond3334_AUP3334:=myrec;
		END;
	FUNCTION RMLIT_RMLIT:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=typeparam;
		params^[1]:=pataddrmode_;
		params^[3]:=patoffset_;
		params^[0]:=patnonmultoperator_;
		paramcount:=5;
		meaning:=pAAssignMeaning3304_AAM3304;
		matchedAssembler:=pAAssemblesto3324_AA3324;
		END;
		RMLIT_RMLIT:=myrec;
	END;
	FUNCTION pATypeid3337_AT3337:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ nonmultoperator  ilcg.pattern@752144}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3337_AT3337:=myrec;
		END;
	FUNCTION pATypeid3339_AT3339:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3339_AT3339:=myrec;
		END;
	FUNCTION pATypeid3343_AT3343:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ offset  ilcg.pattern@b0c5a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3343_AT3343:=myrec;
		END;
	FUNCTION pATypeid3350_AT3350:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@102abdb}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid3350_AT3350:=myrec;
		END;
	FUNCTION pATypeidType3349_ATT3349:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3350_AT3350;
		 pATypeidType3349_ATT3349:=myrec;
		END;
	FUNCTION pAReference3348_AR3348:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType3349_ATT3349;
		 pAReference3348_AR3348:=myrec;
		END;
	FUNCTION pAReftypeType3347_ART3347:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference3348_AR3348;
		 pAReftypeType3347_ART3347:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc3351_AIL3351:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3351_AIL3351:=myrec;
		END;
		(*! try to cast to type: ref t*)
	FUNCTION pARefcastRefval3346_ARR3346:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType3347_ART3347;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc3351_AIL3351;
		 pARefcastRefval3346_ARR3346:=myrec;
		END;
	FUNCTION pAIdentifierDyadic3353_AID3353:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic3353_AID3353:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc3357_AIL3357:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3357_AIL3357:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3356_AR3356:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3357_AIL3357;
		 pARefval3356_AR3356:=myrec;
		END;
	FUNCTION pADerefRhs3355_ADR3355:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3356_AR3356;
		 pADerefRhs3355_ADR3355:=myrec;
		END;
	FUNCTION pARhsValue3354_ARV3354:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3355_ADR3355;
		 pARhsValue3354_ARV3354:=myrec;
		END;
	FUNCTION pATypeid3361_AT3361:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@102abdb}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid3361_AT3361:=myrec;
		END;
	FUNCTION pATypeidType3360_ATT3360:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3361_AT3361;
		 pATypeidType3360_ATT3360:=myrec;
		END;
		(*! Match sm *)
	FUNCTION pAIdLoc3363_AIL3363:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(3);
		 pAIdLoc3363_AIL3363:=myrec;
		END;
		(*sm *)
	FUNCTION pALocValue3362_ALV3362:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3363_AIL3363;
		 pALocValue3362_ALV3362:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs3359_ACR3359:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType3360_ATT3360;
		myrec^.arg2:=pALocValue3362_ALV3362;
		 pACastRhs3359_ACR3359:=myrec;
		END;
	FUNCTION pARhsValue3358_ARV3358:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3359_ACR3359;
		 pARhsValue3358_ARV3358:=myrec;
		END;
	FUNCTION pADyadicValue3352_ADV3352:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3354_ARV3354;
		myrec^.arg2:=pARhsValue3358_ARV3358;
		myrec^.fn:=pAIdentifierDyadic3353_AID3353;
		 pADyadicValue3352_ADV3352:=myrec;
		END;
	FUNCTION pAAssign3345_AA3345:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue3352_ADV3352;
		myrec^.dest:=pARefcastRefval3346_ARR3346;
		 pAAssign3345_AA3345:=myrec;
		END;
	FUNCTION pAAssignMeaning3344_AAM3344:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3345_AA3345;
		 pAAssignMeaning3344_AAM3344:=myrec;
		END;
	FUNCTION pAAssemblypattern3365_AA3365:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'  ' );
		pappendp(list,2);
		pappends(list,' ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,3);
		pAAssemblypattern3365_AA3365:=list;
		END;
	FUNCTION pAAssemblesto3364_AA3364:pprintlist;
	begin
		pAAssemblesto3364_AA3364:=pAAssemblypattern3365_AA3365;
		END;
	FUNCTION pASideeffects3373_AS3373:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3373_AS3373:=nil;
		 pASideeffects3373_AS3373:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3374_AUP3374:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3374_AUP3374:=nil;
		 pAUnconditionalPrecond3374_AUP3374:=myrec;
		END;
	FUNCTION MLIT_MLIT:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=typeparam;
		params^[1]:=patmaddrmode_;
		params^[3]:=patoffset_;
		params^[0]:=patnonmultoperator_;
		paramcount:=5;
		meaning:=pAAssignMeaning3344_AAM3344;
		matchedAssembler:=pAAssemblesto3364_AA3364;
		END;
		MLIT_MLIT:=myrec;
	END;
	FUNCTION pATypeid3377_AT3377:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ addrmode  ilcg.pattern@17aaeec}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3377_AT3377:=myrec;
		END;
	FUNCTION pATypeid3379_AT3379:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@2a2ae9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3379_AT3379:=myrec;
		END;
	FUNCTION pATypeid3386_AT3386:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@340c9c}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid3386_AT3386:=myrec;
		END;
	FUNCTION pATypeidType3385_ATT3385:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3386_AT3386;
		 pATypeidType3385_ATT3385:=myrec;
		END;
	FUNCTION pAReference3384_AR3384:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType3385_ATT3385;
		 pAReference3384_AR3384:=myrec;
		END;
	FUNCTION pAReftypeType3383_ART3383:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference3384_AR3384;
		 pAReftypeType3383_ART3383:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc3387_AIL3387:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3387_AIL3387:=myrec;
		END;
		(*! try to cast to type: ref t*)
	FUNCTION pARefcastRefval3382_ARR3382:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType3383_ART3383;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc3387_AIL3387;
		 pARefcastRefval3382_ARR3382:=myrec;
		END;
	FUNCTION pAPlusDyadic3389_APD3389:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic3389_APD3389:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc3393_AIL3393:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3393_AIL3393:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3392_AR3392:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3393_AIL3393;
		 pARefval3392_AR3392:=myrec;
		END;
	FUNCTION pADerefRhs3391_ADR3391:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3392_AR3392;
		 pADerefRhs3391_ADR3391:=myrec;
		END;
	FUNCTION pARhsValue3390_ARV3390:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3391_ADR3391;
		 pARhsValue3390_ARV3390:=myrec;
		END;
	FUNCTION pAOptionalsign3397_AO3397:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign3397_AO3397:=nil;
		 pAOptionalsign3397_AO3397:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber3396_AIN3396:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=1 ;
		 pAIntegerNumber3396_AIN3396:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs3395_ANR3395:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber3396_AIN3396;
		 pANumberRhs3395_ANR3395:=myrec;
		END;
	FUNCTION pARhsValue3394_ARV3394:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs3395_ANR3395;
		 pARhsValue3394_ARV3394:=myrec;
		END;
	FUNCTION pADyadicValue3388_ADV3388:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3390_ARV3390;
		myrec^.arg2:=pARhsValue3394_ARV3394;
		myrec^.fn:=pAPlusDyadic3389_APD3389;
		 pADyadicValue3388_ADV3388:=myrec;
		END;
	FUNCTION pAAssign3381_AA3381:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue3388_ADV3388;
		myrec^.dest:=pARefcastRefval3382_ARR3382;
		 pAAssign3381_AA3381:=myrec;
		END;
	FUNCTION pAAssignMeaning3380_AAM3380:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3381_AA3381;
		 pAAssignMeaning3380_AAM3380:=myrec;
		END;
	FUNCTION pAAssemblypattern3399_AA3399:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'inc ' );
		pappendp(list,1);
		pappends(list,' ' );
		pappendp(list,0);
		pAAssemblypattern3399_AA3399:=list;
		END;
	FUNCTION pAAssemblesto3398_AA3398:pprintlist;
	begin
		pAAssemblesto3398_AA3398:=pAAssemblypattern3399_AA3399;
		END;
	FUNCTION pASideeffects3404_AS3404:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3404_AS3404:=nil;
		 pASideeffects3404_AS3404:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3405_AUP3405:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3405_AUP3405:=nil;
		 pAUnconditionalPrecond3405_AUP3405:=myrec;
		END;
	FUNCTION INC_INC:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patint_;
		params^[0]:=pataddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning3380_AAM3380;
		matchedAssembler:=pAAssemblesto3398_AA3398;
		END;
		INC_INC:=myrec;
	END;
	FUNCTION pATypeid3408_AT3408:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ addrmode  ilcg.pattern@17aaeec}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3408_AT3408:=myrec;
		END;
	FUNCTION pATypeid3410_AT3410:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@2a2ae9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3410_AT3410:=myrec;
		END;
	FUNCTION pATypeid3417_AT3417:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@1c9076d}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid3417_AT3417:=myrec;
		END;
	FUNCTION pATypeidType3416_ATT3416:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3417_AT3417;
		 pATypeidType3416_ATT3416:=myrec;
		END;
	FUNCTION pAReference3415_AR3415:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType3416_ATT3416;
		 pAReference3415_AR3415:=myrec;
		END;
	FUNCTION pAReftypeType3414_ART3414:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference3415_AR3415;
		 pAReftypeType3414_ART3414:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc3418_AIL3418:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3418_AIL3418:=myrec;
		END;
		(*! try to cast to type: ref t*)
	FUNCTION pARefcastRefval3413_ARR3413:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType3414_ART3414;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc3418_AIL3418;
		 pARefcastRefval3413_ARR3413:=myrec;
		END;
	FUNCTION pAMinusDyadic3420_AMD3420:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpminus;
		 pAMinusDyadic3420_AMD3420:=myrec;
		END;
	FUNCTION pATypeid3424_AT3424:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@1c9076d}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid3424_AT3424:=myrec;
		END;
	FUNCTION pATypeidType3423_ATT3423:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3424_AT3424;
		 pATypeidType3423_ATT3423:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc3428_AIL3428:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3428_AIL3428:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3427_AR3427:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3428_AIL3428;
		 pARefval3427_AR3427:=myrec;
		END;
	FUNCTION pADerefRhs3426_ADR3426:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3427_AR3427;
		 pADerefRhs3426_ADR3426:=myrec;
		END;
	FUNCTION pARhsValue3425_ARV3425:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3426_ADR3426;
		 pARhsValue3425_ARV3425:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs3422_ACR3422:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType3423_ATT3423;
		myrec^.arg2:=pARhsValue3425_ARV3425;
		 pACastRhs3422_ACR3422:=myrec;
		END;
	FUNCTION pARhsValue3421_ARV3421:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3422_ACR3422;
		 pARhsValue3421_ARV3421:=myrec;
		END;
	FUNCTION pAOptionalsign3432_AO3432:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign3432_AO3432:=nil;
		 pAOptionalsign3432_AO3432:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber3431_AIN3431:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=1 ;
		 pAIntegerNumber3431_AIN3431:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs3430_ANR3430:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber3431_AIN3431;
		 pANumberRhs3430_ANR3430:=myrec;
		END;
	FUNCTION pARhsValue3429_ARV3429:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs3430_ANR3430;
		 pARhsValue3429_ARV3429:=myrec;
		END;
	FUNCTION pADyadicValue3419_ADV3419:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3421_ARV3421;
		myrec^.arg2:=pARhsValue3429_ARV3429;
		myrec^.fn:=pAMinusDyadic3420_AMD3420;
		 pADyadicValue3419_ADV3419:=myrec;
		END;
	FUNCTION pAAssign3412_AA3412:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue3419_ADV3419;
		myrec^.dest:=pARefcastRefval3413_ARR3413;
		 pAAssign3412_AA3412:=myrec;
		END;
	FUNCTION pAAssignMeaning3411_AAM3411:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3412_AA3412;
		 pAAssignMeaning3411_AAM3411:=myrec;
		END;
	FUNCTION pAAssemblypattern3434_AA3434:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'dec ' );
		pappendp(list,1);
		pappends(list,' ' );
		pappendp(list,0);
		pAAssemblypattern3434_AA3434:=list;
		END;
	FUNCTION pAAssemblesto3433_AA3433:pprintlist;
	begin
		pAAssemblesto3433_AA3433:=pAAssemblypattern3434_AA3434;
		END;
	FUNCTION pASideeffects3439_AS3439:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3439_AS3439:=nil;
		 pASideeffects3439_AS3439:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3440_AUP3440:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3440_AUP3440:=nil;
		 pAUnconditionalPrecond3440_AUP3440:=myrec;
		END;
	FUNCTION DEC_DEC:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patint_;
		params^[0]:=pataddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning3411_AAM3411;
		matchedAssembler:=pAAssemblesto3433_AA3433;
		END;
		DEC_DEC:=myrec;
	END;
	FUNCTION pATypeid3443_AT3443:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ shiftop  ilcg.pattern@47c130}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3443_AT3443:=myrec;
		END;
	FUNCTION pATypeid3445_AT3445:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ shiftcount  ilcg.pattern@1a5ba75}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3445_AT3445:=myrec;
		END;
	FUNCTION pATypeid3447_AT3447:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ anyreg  ilcg.pattern@10a4a32}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3447_AT3447:=myrec;
		END;
	FUNCTION pATypeid3456_AT3456:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@bcbc}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid3456_AT3456:=myrec;
		END;
	FUNCTION pATypeidType3455_ATT3455:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3456_AT3456;
		 pATypeidType3455_ATT3455:=myrec;
		END;
	FUNCTION pAReference3454_AR3454:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType3455_ATT3455;
		 pAReference3454_AR3454:=myrec;
		END;
	FUNCTION pAReftypeType3453_ART3453:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference3454_AR3454;
		 pAReftypeType3453_ART3453:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc3457_AIL3457:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc3457_AIL3457:=myrec;
		END;
		(*! try to cast to type: ref t*)
	FUNCTION pARefcastRefval3452_ARR3452:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType3453_ART3453;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc3457_AIL3457;
		 pARefcastRefval3452_ARR3452:=myrec;
		END;
	FUNCTION pAIdentifierDyadic3459_AID3459:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic3459_AID3459:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc3463_AIL3463:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc3463_AIL3463:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3462_AR3462:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3463_AIL3463;
		 pARefval3462_AR3462:=myrec;
		END;
	FUNCTION pADerefRhs3461_ADR3461:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3462_AR3462;
		 pADerefRhs3461_ADR3461:=myrec;
		END;
	FUNCTION pARhsValue3460_ARV3460:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3461_ADR3461;
		 pARhsValue3460_ARV3460:=myrec;
		END;
		(*! Match s *)
	FUNCTION pAIdLoc3465_AIL3465:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3465_AIL3465:=myrec;
		END;
		(*s *)
	FUNCTION pALocValue3464_ALV3464:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3465_AIL3465;
		 pALocValue3464_ALV3464:=myrec;
		END;
	FUNCTION pADyadicValue3458_ADV3458:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3460_ARV3460;
		myrec^.arg2:=pALocValue3464_ALV3464;
		myrec^.fn:=pAIdentifierDyadic3459_AID3459;
		 pADyadicValue3458_ADV3458:=myrec;
		END;
	FUNCTION pAAssign3451_AA3451:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue3458_ADV3458;
		myrec^.dest:=pARefcastRefval3452_ARR3452;
		 pAAssign3451_AA3451:=myrec;
		END;
	FUNCTION pAAssignMeaning3450_AAM3450:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3451_AA3451;
		 pAAssignMeaning3450_AAM3450:=myrec;
		END;
	FUNCTION pAAssemblypattern3467_AA3467:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'sh' );
		pappendp(list,0);
		pappends(list,' ' );
		pappendp(list,2);
		pappends(list,', ' );
		pappendp(list,1);
		pAAssemblypattern3467_AA3467:=list;
		END;
	FUNCTION pAAssemblesto3466_AA3466:pprintlist;
	begin
		pAAssemblesto3466_AA3466:=pAAssemblypattern3467_AA3467;
		END;
	FUNCTION pASideeffects3474_AS3474:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3474_AS3474:=nil;
		 pASideeffects3474_AS3474:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3475_AUP3475:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3475_AUP3475:=nil;
		 pAUnconditionalPrecond3475_AUP3475:=myrec;
		END;
	FUNCTION SHIFT_SHIFT:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[3]:=typeparam;
		params^[1]:=patshiftcount_;
		params^[2]:=patanyreg_;
		params^[0]:=patshiftop_;
		paramcount:=5;
		meaning:=pAAssignMeaning3450_AAM3450;
		matchedAssembler:=pAAssemblesto3466_AA3466;
		END;
		SHIFT_SHIFT:=myrec;
	END;
	FUNCTION pATypeid3478_AT3478:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ nonmultoperator  ilcg.pattern@752144}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3478_AT3478:=myrec;
		END;
	FUNCTION pATypeid3480_AT3480:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3480_AT3480:=myrec;
		END;
	FUNCTION pATypeid3482_AT3482:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ anyreg  ilcg.pattern@10a4a32}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3482_AT3482:=myrec;
		END;
	FUNCTION pATypeid3484_AT3484:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ wordupto32  ilcg.pattern@1ba4806}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3484_AT3484:=myrec;
		END;
	FUNCTION pATypeid3491_AT3491:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@43fb68}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid3491_AT3491:=myrec;
		END;
	FUNCTION pATypeidType3490_ATT3490:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3491_AT3491;
		 pATypeidType3490_ATT3490:=myrec;
		END;
	FUNCTION pAReference3489_AR3489:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType3490_ATT3490;
		 pAReference3489_AR3489:=myrec;
		END;
	FUNCTION pAReftypeType3488_ART3488:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference3489_AR3489;
		 pAReftypeType3488_ART3488:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc3492_AIL3492:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3492_AIL3492:=myrec;
		END;
		(*! try to cast to type: ref t*)
	FUNCTION pARefcastRefval3487_ARR3487:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType3488_ART3488;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc3492_AIL3492;
		 pARefcastRefval3487_ARR3487:=myrec;
		END;
	FUNCTION pAIdentifierDyadic3494_AID3494:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic3494_AID3494:=myrec;
		END;
	FUNCTION pATypeid3498_AT3498:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@43fb68}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid3498_AT3498:=myrec;
		END;
	FUNCTION pATypeidType3497_ATT3497:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3498_AT3498;
		 pATypeidType3497_ATT3497:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc3502_AIL3502:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3502_AIL3502:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3501_AR3501:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3502_AIL3502;
		 pARefval3501_AR3501:=myrec;
		END;
	FUNCTION pADerefRhs3500_ADR3500:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3501_AR3501;
		 pADerefRhs3500_ADR3500:=myrec;
		END;
	FUNCTION pARhsValue3499_ARV3499:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3500_ADR3500;
		 pARhsValue3499_ARV3499:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs3496_ACR3496:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType3497_ATT3497;
		myrec^.arg2:=pARhsValue3499_ARV3499;
		 pACastRhs3496_ACR3496:=myrec;
		END;
	FUNCTION pARhsValue3495_ARV3495:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3496_ACR3496;
		 pARhsValue3495_ARV3495:=myrec;
		END;
	FUNCTION pATypeid3506_AT3506:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@43fb68}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid3506_AT3506:=myrec;
		END;
	FUNCTION pATypeidType3505_ATT3505:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3506_AT3506;
		 pATypeidType3505_ATT3505:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc3510_AIL3510:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc3510_AIL3510:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3509_AR3509:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3510_AIL3510;
		 pARefval3509_AR3509:=myrec;
		END;
	FUNCTION pADerefRhs3508_ADR3508:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3509_AR3509;
		 pADerefRhs3508_ADR3508:=myrec;
		END;
	FUNCTION pARhsValue3507_ARV3507:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3508_ADR3508;
		 pARhsValue3507_ARV3507:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs3504_ACR3504:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType3505_ATT3505;
		myrec^.arg2:=pARhsValue3507_ARV3507;
		 pACastRhs3504_ACR3504:=myrec;
		END;
	FUNCTION pARhsValue3503_ARV3503:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3504_ACR3504;
		 pARhsValue3503_ARV3503:=myrec;
		END;
	FUNCTION pADyadicValue3493_ADV3493:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3495_ARV3495;
		myrec^.arg2:=pARhsValue3503_ARV3503;
		myrec^.fn:=pAIdentifierDyadic3494_AID3494;
		 pADyadicValue3493_ADV3493:=myrec;
		END;
	FUNCTION pAAssign3486_AA3486:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue3493_ADV3493;
		myrec^.dest:=pARefcastRefval3487_ARR3487;
		 pAAssign3486_AA3486:=myrec;
		END;
	FUNCTION pAAssignMeaning3485_AAM3485:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3486_AA3486;
		 pAAssignMeaning3485_AAM3485:=myrec;
		END;
	FUNCTION pAAssemblypattern3512_AA3512:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'  ' );
		pappendp(list,3);
		pappends(list,' ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,2);
		pAAssemblypattern3512_AA3512:=list;
		END;
	FUNCTION pAAssemblesto3511_AA3511:pprintlist;
	begin
		pAAssemblesto3511_AA3511:=pAAssemblypattern3512_AA3512;
		END;
	FUNCTION pASideeffects3520_AS3520:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3520_AS3520:=nil;
		 pASideeffects3520_AS3520:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3521_AUP3521:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3521_AUP3521:=nil;
		 pAUnconditionalPrecond3521_AUP3521:=myrec;
		END;
	FUNCTION RMR_RMR:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patanyreg_;
		params^[3]:=patwordupto32_32;
		params^[1]:=patmaddrmode_;
		params^[0]:=patnonmultoperator_;
		paramcount:=5;
		meaning:=pAAssignMeaning3485_AAM3485;
		matchedAssembler:=pAAssemblesto3511_AA3511;
		END;
		RMR_RMR:=myrec;
	END;
	FUNCTION pATypeid3524_AT3524:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ nonmultoperator  ilcg.pattern@752144}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3524_AT3524:=myrec;
		END;
	FUNCTION pATypeid3526_AT3526:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3526_AT3526:=myrec;
		END;
	FUNCTION pATypeid3528_AT3528:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ anyreg  ilcg.pattern@10a4a32}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3528_AT3528:=myrec;
		END;
	FUNCTION pATypeid3530_AT3530:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ wordupto32  ilcg.pattern@1ba4806}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3530_AT3530:=myrec;
		END;
	FUNCTION pATypeid3537_AT3537:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@c0267a}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid3537_AT3537:=myrec;
		END;
	FUNCTION pATypeidType3536_ATT3536:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3537_AT3537;
		 pATypeidType3536_ATT3536:=myrec;
		END;
	FUNCTION pAReference3535_AR3535:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType3536_ATT3536;
		 pAReference3535_AR3535:=myrec;
		END;
	FUNCTION pAReftypeType3534_ART3534:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference3535_AR3535;
		 pAReftypeType3534_ART3534:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc3538_AIL3538:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3538_AIL3538:=myrec;
		END;
		(*! try to cast to type: ref t*)
	FUNCTION pARefcastRefval3533_ARR3533:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType3534_ART3534;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc3538_AIL3538;
		 pARefcastRefval3533_ARR3533:=myrec;
		END;
	FUNCTION pAPlusDyadic3540_APD3540:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic3540_APD3540:=myrec;
		END;
	FUNCTION pATypeid3544_AT3544:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@c0267a}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid3544_AT3544:=myrec;
		END;
	FUNCTION pATypeidType3543_ATT3543:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3544_AT3544;
		 pATypeidType3543_ATT3543:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc3548_AIL3548:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3548_AIL3548:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3547_AR3547:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3548_AIL3548;
		 pARefval3547_AR3547:=myrec;
		END;
	FUNCTION pADerefRhs3546_ADR3546:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3547_AR3547;
		 pADerefRhs3546_ADR3546:=myrec;
		END;
	FUNCTION pARhsValue3545_ARV3545:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3546_ADR3546;
		 pARhsValue3545_ARV3545:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs3542_ACR3542:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType3543_ATT3543;
		myrec^.arg2:=pARhsValue3545_ARV3545;
		 pACastRhs3542_ACR3542:=myrec;
		END;
	FUNCTION pARhsValue3541_ARV3541:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3542_ACR3542;
		 pARhsValue3541_ARV3541:=myrec;
		END;
	FUNCTION pATypeid3552_AT3552:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@c0267a}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid3552_AT3552:=myrec;
		END;
	FUNCTION pATypeidType3551_ATT3551:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3552_AT3552;
		 pATypeidType3551_ATT3551:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc3556_AIL3556:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc3556_AIL3556:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3555_AR3555:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3556_AIL3556;
		 pARefval3555_AR3555:=myrec;
		END;
	FUNCTION pADerefRhs3554_ADR3554:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3555_AR3555;
		 pADerefRhs3554_ADR3554:=myrec;
		END;
	FUNCTION pARhsValue3553_ARV3553:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3554_ADR3554;
		 pARhsValue3553_ARV3553:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs3550_ACR3550:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType3551_ATT3551;
		myrec^.arg2:=pARhsValue3553_ARV3553;
		 pACastRhs3550_ACR3550:=myrec;
		END;
	FUNCTION pARhsValue3549_ARV3549:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3550_ACR3550;
		 pARhsValue3549_ARV3549:=myrec;
		END;
	FUNCTION pADyadicValue3539_ADV3539:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3541_ARV3541;
		myrec^.arg2:=pARhsValue3549_ARV3549;
		myrec^.fn:=pAPlusDyadic3540_APD3540;
		 pADyadicValue3539_ADV3539:=myrec;
		END;
	FUNCTION pAAssign3532_AA3532:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue3539_ADV3539;
		myrec^.dest:=pARefcastRefval3533_ARR3533;
		 pAAssign3532_AA3532:=myrec;
		END;
	FUNCTION pAAssignMeaning3531_AAM3531:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3532_AA3532;
		 pAAssignMeaning3531_AAM3531:=myrec;
		END;
	FUNCTION pAAssemblypattern3558_AA3558:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'add  ' );
		pappendp(list,3);
		pappends(list,' ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,2);
		pAAssemblypattern3558_AA3558:=list;
		END;
	FUNCTION pAAssemblesto3557_AA3557:pprintlist;
	begin
		pAAssemblesto3557_AA3557:=pAAssemblypattern3558_AA3558;
		END;
	FUNCTION pASideeffects3565_AS3565:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3565_AS3565:=nil;
		 pASideeffects3565_AS3565:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3566_AUP3566:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3566_AUP3566:=nil;
		 pAUnconditionalPrecond3566_AUP3566:=myrec;
		END;
	FUNCTION ADDRMR_ADDRMR:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patanyreg_;
		params^[3]:=patwordupto32_32;
		params^[1]:=patmaddrmode_;
		params^[0]:=patnonmultoperator_;
		paramcount:=5;
		meaning:=pAAssignMeaning3531_AAM3531;
		matchedAssembler:=pAAssemblesto3557_AA3557;
		END;
		ADDRMR_ADDRMR:=myrec;
	END;
	FUNCTION pATypeid3569_AT3569:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ nonmultoperator  ilcg.pattern@752144}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3569_AT3569:=myrec;
		END;
	FUNCTION pATypeid3571_AT3571:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ addrmode  ilcg.pattern@17aaeec}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3571_AT3571:=myrec;
		END;
	FUNCTION pATypeid3573_AT3573:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3573_AT3573:=myrec;
		END;
	FUNCTION pATypeid3575_AT3575:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ byte  ilcg.pattern@1537060}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3575_AT3575:=myrec;
		END;
	FUNCTION pATypeid3582_AT3582:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@19a12ee}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid3582_AT3582:=myrec;
		END;
	FUNCTION pATypeidType3581_ATT3581:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3582_AT3582;
		 pATypeidType3581_ATT3581:=myrec;
		END;
	FUNCTION pAReference3580_AR3580:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType3581_ATT3581;
		 pAReference3580_AR3580:=myrec;
		END;
	FUNCTION pAReftypeType3579_ART3579:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference3580_AR3580;
		 pAReftypeType3579_ART3579:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc3583_AIL3583:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3583_AIL3583:=myrec;
		END;
		(*! try to cast to type: ref t*)
	FUNCTION pARefcastRefval3578_ARR3578:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType3579_ART3579;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc3583_AIL3583;
		 pARefcastRefval3578_ARR3578:=myrec;
		END;
	FUNCTION pAIdentifierDyadic3585_AID3585:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic3585_AID3585:=myrec;
		END;
	FUNCTION pATypeid3589_AT3589:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@19a12ee}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid3589_AT3589:=myrec;
		END;
	FUNCTION pATypeidType3588_ATT3588:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3589_AT3589;
		 pATypeidType3588_ATT3588:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc3593_AIL3593:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3593_AIL3593:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3592_AR3592:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3593_AIL3593;
		 pARefval3592_AR3592:=myrec;
		END;
	FUNCTION pADerefRhs3591_ADR3591:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3592_AR3592;
		 pADerefRhs3591_ADR3591:=myrec;
		END;
	FUNCTION pARhsValue3590_ARV3590:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3591_ADR3591;
		 pARhsValue3590_ARV3590:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs3587_ACR3587:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType3588_ATT3588;
		myrec^.arg2:=pARhsValue3590_ARV3590;
		 pACastRhs3587_ACR3587:=myrec;
		END;
	FUNCTION pARhsValue3586_ARV3586:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3587_ACR3587;
		 pARhsValue3586_ARV3586:=myrec;
		END;
	FUNCTION pATypeid3597_AT3597:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@19a12ee}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid3597_AT3597:=myrec;
		END;
	FUNCTION pATypeidType3596_ATT3596:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3597_AT3597;
		 pATypeidType3596_ATT3596:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc3601_AIL3601:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc3601_AIL3601:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3600_AR3600:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3601_AIL3601;
		 pARefval3600_AR3600:=myrec;
		END;
	FUNCTION pADerefRhs3599_ADR3599:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3600_AR3600;
		 pADerefRhs3599_ADR3599:=myrec;
		END;
	FUNCTION pARhsValue3598_ARV3598:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3599_ADR3599;
		 pARhsValue3598_ARV3598:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs3595_ACR3595:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType3596_ATT3596;
		myrec^.arg2:=pARhsValue3598_ARV3598;
		 pACastRhs3595_ACR3595:=myrec;
		END;
	FUNCTION pARhsValue3594_ARV3594:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3595_ACR3595;
		 pARhsValue3594_ARV3594:=myrec;
		END;
	FUNCTION pADyadicValue3584_ADV3584:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3586_ARV3586;
		myrec^.arg2:=pARhsValue3594_ARV3594;
		myrec^.fn:=pAIdentifierDyadic3585_AID3585;
		 pADyadicValue3584_ADV3584:=myrec;
		END;
	FUNCTION pAAssign3577_AA3577:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue3584_ADV3584;
		myrec^.dest:=pARefcastRefval3578_ARR3578;
		 pAAssign3577_AA3577:=myrec;
		END;
	FUNCTION pAAssignMeaning3576_AAM3576:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3577_AA3577;
		 pAAssignMeaning3576_AAM3576:=myrec;
		END;
	FUNCTION pAAssemblypattern3603_AA3603:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'  ' );
		pappendp(list,3);
		pappends(list,' ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,2);
		pAAssemblypattern3603_AA3603:=list;
		END;
	FUNCTION pAAssemblesto3602_AA3602:pprintlist;
	begin
		pAAssemblesto3602_AA3602:=pAAssemblypattern3603_AA3603;
		END;
	FUNCTION pASideeffects3611_AS3611:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3611_AS3611:=nil;
		 pASideeffects3611_AS3611:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3612_AUP3612:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3612_AUP3612:=nil;
		 pAUnconditionalPrecond3612_AUP3612:=myrec;
		END;
	FUNCTION RMRB_RMRB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patbreg_;
		params^[3]:=patbyte_;
		params^[1]:=pataddrmode_;
		params^[0]:=patnonmultoperator_;
		paramcount:=5;
		meaning:=pAAssignMeaning3576_AAM3576;
		matchedAssembler:=pAAssemblesto3602_AA3602;
		END;
		RMRB_RMRB:=myrec;
	END;
	FUNCTION pATypeid3615_AT3615:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3615_AT3615:=myrec;
		END;
	FUNCTION pATypeid3617_AT3617:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ byte  ilcg.pattern@1537060}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3617_AT3617:=myrec;
		END;
	FUNCTION pATypeid3624_AT3624:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@17d7c01}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid3624_AT3624:=myrec;
		END;
	FUNCTION pATypeidType3623_ATT3623:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3624_AT3624;
		 pATypeidType3623_ATT3623:=myrec;
		END;
	FUNCTION pAReference3622_AR3622:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType3623_ATT3623;
		 pAReference3622_AR3622:=myrec;
		END;
	FUNCTION pAReftypeType3621_ART3621:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference3622_AR3622;
		 pAReftypeType3621_ART3621:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc3625_AIL3625:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3625_AIL3625:=myrec;
		END;
		(*! try to cast to type: ref t*)
	FUNCTION pARefcastRefval3620_ARR3620:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType3621_ART3621;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc3625_AIL3625;
		 pARefcastRefval3620_ARR3620:=myrec;
		END;
	FUNCTION pATypeid3629_AT3629:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@17d7c01}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid3629_AT3629:=myrec;
		END;
	FUNCTION pATypeidType3628_ATT3628:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3629_AT3629;
		 pATypeidType3628_ATT3628:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc3633_AIL3633:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3633_AIL3633:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3632_AR3632:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3633_AIL3633;
		 pARefval3632_AR3632:=myrec;
		END;
	FUNCTION pADerefRhs3631_ADR3631:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3632_AR3632;
		 pADerefRhs3631_ADR3631:=myrec;
		END;
	FUNCTION pARhsValue3630_ARV3630:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3631_ADR3631;
		 pARhsValue3630_ARV3630:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs3627_ACR3627:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType3628_ATT3628;
		myrec^.arg2:=pARhsValue3630_ARV3630;
		 pACastRhs3627_ACR3627:=myrec;
		END;
	FUNCTION pARhsValue3626_ARV3626:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3627_ACR3627;
		 pARhsValue3626_ARV3626:=myrec;
		END;
	FUNCTION pAAssign3619_AA3619:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue3626_ARV3626;
		myrec^.dest:=pARefcastRefval3620_ARR3620;
		 pAAssign3619_AA3619:=myrec;
		END;
	FUNCTION pAAssignMeaning3618_AAM3618:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3619_AA3619;
		 pAAssignMeaning3618_AAM3618:=myrec;
		END;
	FUNCTION pAAssemblypattern3635_AA3635:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'; nulbas' );
		pAAssemblypattern3635_AA3635:=list;
		END;
	FUNCTION pAAssemblesto3634_AA3634:pprintlist;
	begin
		pAAssemblesto3634_AA3634:=pAAssemblypattern3635_AA3635;
		END;
	FUNCTION pASideeffects3637_AS3637:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3637_AS3637:=nil;
		 pASideeffects3637_AS3637:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3638_AUP3638:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3638_AUP3638:=nil;
		 pAUnconditionalPrecond3638_AUP3638:=myrec;
		END;
	FUNCTION nulbass_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patbreg_;
		params^[1]:=patbyte_;
		paramcount:=3;
		meaning:=pAAssignMeaning3618_AAM3618;
		matchedAssembler:=pAAssemblesto3634_AA3634;
		END;
		nulbass_:=myrec;
	END;
	FUNCTION pATypeid3641_AT3641:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ addrmode  ilcg.pattern@17aaeec}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3641_AT3641:=myrec;
		END;
	FUNCTION pATypeid3643_AT3643:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3643_AT3643:=myrec;
		END;
	FUNCTION pATypeid3645_AT3645:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3645_AT3645:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc3649_AIL3649:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc3649_AIL3649:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3648_AR3648:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3649_AIL3649;
		 pARefval3648_AR3648:=myrec;
		END;
	FUNCTION pASatplusDyadic3651_ASD3651:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpsatplus;
		 pASatplusDyadic3651_ASD3651:=myrec;
		END;
	FUNCTION pAUint8Unsigned3657_AU8U3657:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned3657_AU8U3657:=myrec;
		END;
	FUNCTION pAUnsignedTformat3656_AUT3656:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned3657_AU8U3657;
		 pAUnsignedTformat3656_AUT3656:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype3655_ATP3655:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype3655_ATP3655:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3654_APT3654:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType3654_APT3654:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc3661_AIL3661:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc3661_AIL3661:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3660_AR3660:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3661_AIL3661;
		 pARefval3660_AR3660:=myrec;
		END;
	FUNCTION pADerefRhs3659_ADR3659:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3660_AR3660;
		 pADerefRhs3659_ADR3659:=myrec;
		END;
	FUNCTION pARhsValue3658_ARV3658:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3659_ADR3659;
		 pARhsValue3658_ARV3658:=myrec;
		END;
		(*! try to cast to type: uint8*)
	FUNCTION pACastRhs3653_ACR3653:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType3654_APT3654;
		myrec^.arg2:=pARhsValue3658_ARV3658;
		 pACastRhs3653_ACR3653:=myrec;
		END;
	FUNCTION pARhsValue3652_ARV3652:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3653_ACR3653;
		 pARhsValue3652_ARV3652:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc3665_AIL3665:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3665_AIL3665:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3664_AR3664:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3665_AIL3665;
		 pARefval3664_AR3664:=myrec;
		END;
	FUNCTION pADerefRhs3663_ADR3663:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3664_AR3664;
		 pADerefRhs3663_ADR3663:=myrec;
		END;
	FUNCTION pARhsValue3662_ARV3662:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3663_ADR3663;
		 pARhsValue3662_ARV3662:=myrec;
		END;
	FUNCTION pADyadicValue3650_ADV3650:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3652_ARV3652;
		myrec^.arg2:=pARhsValue3662_ARV3662;
		myrec^.fn:=pASatplusDyadic3651_ASD3651;
		 pADyadicValue3650_ADV3650:=myrec;
		END;
	FUNCTION pAAssign3647_AA3647:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue3650_ADV3650;
		myrec^.dest:=pARefval3648_AR3648;
		 pAAssign3647_AA3647:=myrec;
		END;
	FUNCTION pAAssignMeaning3646_AAM3646:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3647_AA3647;
		 pAAssignMeaning3646_AAM3646:=myrec;
		END;
	FUNCTION pAAssemblypattern3667_AA3667:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'add  ' );
		pappendp(list,2);
		pappends(list,',' );
		pappendp(list,1);
		pappends(list,'\n jnc $+4\n mov ' );
		pappendp(list,2);
		pappends(list,',255\n nop\n nop' );
		pAAssemblypattern3667_AA3667:=list;
		END;
	FUNCTION pAAssemblesto3666_AA3666:pprintlist;
	begin
		pAAssemblesto3666_AA3666:=pAAssemblypattern3667_AA3667;
		END;
	FUNCTION pASideeffects3675_AS3675:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3675_AS3675:=nil;
		 pASideeffects3675_AS3675:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3676_AUP3676:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3676_AUP3676:=nil;
		 pAUnconditionalPrecond3676_AUP3676:=myrec;
		END;
	FUNCTION ADDUSB_ADDUSB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbreg_;
		params^[0]:=pataddrmode_;
		params^[2]:=patbreg_;
		paramcount:=4;
		meaning:=pAAssignMeaning3646_AAM3646;
		matchedAssembler:=pAAssemblesto3666_AA3666;
		END;
		ADDUSB_ADDUSB:=myrec;
	END;
	FUNCTION pATypeid3679_AT3679:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3679_AT3679:=myrec;
		END;
	FUNCTION pATypeid3681_AT3681:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3681_AT3681:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc3685_AIL3685:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3685_AIL3685:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3684_AR3684:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3685_AIL3685;
		 pARefval3684_AR3684:=myrec;
		END;
	FUNCTION pASatminusDyadic3687_ASD3687:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpsatminus;
		 pASatminusDyadic3687_ASD3687:=myrec;
		END;
	FUNCTION pAUint8Unsigned3693_AU8U3693:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned3693_AU8U3693:=myrec;
		END;
	FUNCTION pAUnsignedTformat3692_AUT3692:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned3693_AU8U3693;
		 pAUnsignedTformat3692_AUT3692:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype3691_ATP3691:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype3691_ATP3691:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3690_APT3690:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType3690_APT3690:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc3697_AIL3697:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3697_AIL3697:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3696_AR3696:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3697_AIL3697;
		 pARefval3696_AR3696:=myrec;
		END;
	FUNCTION pADerefRhs3695_ADR3695:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3696_AR3696;
		 pADerefRhs3695_ADR3695:=myrec;
		END;
	FUNCTION pARhsValue3694_ARV3694:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3695_ADR3695;
		 pARhsValue3694_ARV3694:=myrec;
		END;
		(*! try to cast to type: uint8*)
	FUNCTION pACastRhs3689_ACR3689:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType3690_APT3690;
		myrec^.arg2:=pARhsValue3694_ARV3694;
		 pACastRhs3689_ACR3689:=myrec;
		END;
	FUNCTION pARhsValue3688_ARV3688:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3689_ACR3689;
		 pARhsValue3688_ARV3688:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc3701_AIL3701:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3701_AIL3701:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3700_AR3700:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3701_AIL3701;
		 pARefval3700_AR3700:=myrec;
		END;
	FUNCTION pADerefRhs3699_ADR3699:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3700_AR3700;
		 pADerefRhs3699_ADR3699:=myrec;
		END;
	FUNCTION pARhsValue3698_ARV3698:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3699_ADR3699;
		 pARhsValue3698_ARV3698:=myrec;
		END;
	FUNCTION pADyadicValue3686_ADV3686:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3688_ARV3688;
		myrec^.arg2:=pARhsValue3698_ARV3698;
		myrec^.fn:=pASatminusDyadic3687_ASD3687;
		 pADyadicValue3686_ADV3686:=myrec;
		END;
	FUNCTION pAAssign3683_AA3683:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue3686_ADV3686;
		myrec^.dest:=pARefval3684_AR3684;
		 pAAssign3683_AA3683:=myrec;
		END;
	FUNCTION pAAssignMeaning3682_AAM3682:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3683_AA3683;
		 pAAssignMeaning3682_AAM3682:=myrec;
		END;
	FUNCTION pAAssemblypattern3703_AA3703:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'sub  ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,0);
		pappends(list,'\n jnc $+4\n mov ' );
		pappendp(list,1);
		pappends(list,',0\n nop\n nop' );
		pAAssemblypattern3703_AA3703:=list;
		END;
	FUNCTION pAAssemblesto3702_AA3702:pprintlist;
	begin
		pAAssemblesto3702_AA3702:=pAAssemblypattern3703_AA3703;
		END;
	FUNCTION pASideeffects3711_AS3711:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3711_AS3711:=nil;
		 pASideeffects3711_AS3711:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3712_AUP3712:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3712_AUP3712:=nil;
		 pAUnconditionalPrecond3712_AUP3712:=myrec;
		END;
	FUNCTION SUBUSB_SUBUSB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patbreg_;
		params^[1]:=patbreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning3682_AAM3682;
		matchedAssembler:=pAAssemblesto3702_AA3702;
		END;
		SUBUSB_SUBUSB:=myrec;
	END;
	FUNCTION pATypeid3715_AT3715:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3715_AT3715:=myrec;
		END;
	FUNCTION pATypeid3717_AT3717:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3717_AT3717:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc3721_AIL3721:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3721_AIL3721:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3720_AR3720:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3721_AIL3721;
		 pARefval3720_AR3720:=myrec;
		END;
	FUNCTION pAInt8Signed3727_AI8S3727:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed3727_AI8S3727:=myrec;
		END;
	FUNCTION pASignedTformat3726_AST3726:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed3727_AI8S3727;
		 pASignedTformat3726_AST3726:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype3725_ATP3725:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype3725_ATP3725:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3724_APT3724:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType3724_APT3724:=myrec;
		END;
	FUNCTION pASatplusDyadic3729_ASD3729:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpsatplus;
		 pASatplusDyadic3729_ASD3729:=myrec;
		END;
	FUNCTION pAInt8Signed3735_AI8S3735:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed3735_AI8S3735:=myrec;
		END;
	FUNCTION pASignedTformat3734_AST3734:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed3735_AI8S3735;
		 pASignedTformat3734_AST3734:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype3733_ATP3733:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype3733_ATP3733:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3732_APT3732:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType3732_APT3732:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc3739_AIL3739:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3739_AIL3739:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3738_AR3738:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3739_AIL3739;
		 pARefval3738_AR3738:=myrec;
		END;
	FUNCTION pADerefRhs3737_ADR3737:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3738_AR3738;
		 pADerefRhs3737_ADR3737:=myrec;
		END;
	FUNCTION pARhsValue3736_ARV3736:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3737_ADR3737;
		 pARhsValue3736_ARV3736:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs3731_ACR3731:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType3732_APT3732;
		myrec^.arg2:=pARhsValue3736_ARV3736;
		 pACastRhs3731_ACR3731:=myrec;
		END;
	FUNCTION pARhsValue3730_ARV3730:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3731_ACR3731;
		 pARhsValue3730_ARV3730:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc3743_AIL3743:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3743_AIL3743:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3742_AR3742:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3743_AIL3743;
		 pARefval3742_AR3742:=myrec;
		END;
	FUNCTION pADerefRhs3741_ADR3741:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3742_AR3742;
		 pADerefRhs3741_ADR3741:=myrec;
		END;
	FUNCTION pARhsValue3740_ARV3740:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3741_ADR3741;
		 pARhsValue3740_ARV3740:=myrec;
		END;
	FUNCTION pADyadicValue3728_ADV3728:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3730_ARV3730;
		myrec^.arg2:=pARhsValue3740_ARV3740;
		myrec^.fn:=pASatplusDyadic3729_ASD3729;
		 pADyadicValue3728_ADV3728:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs3723_ACR3723:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType3724_APT3724;
		myrec^.arg2:=pADyadicValue3728_ADV3728;
		 pACastRhs3723_ACR3723:=myrec;
		END;
	FUNCTION pARhsValue3722_ARV3722:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3723_ACR3723;
		 pARhsValue3722_ARV3722:=myrec;
		END;
	FUNCTION pAAssign3719_AA3719:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue3722_ARV3722;
		myrec^.dest:=pARefval3720_AR3720;
		 pAAssign3719_AA3719:=myrec;
		END;
	FUNCTION pAAssignMeaning3718_AAM3718:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3719_AA3719;
		 pAAssignMeaning3718_AAM3718:=myrec;
		END;
	FUNCTION pAAssemblypattern3745_AA3745:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'add  ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,0);
		pappends(list,'\n jno $+10\n jg $+6\n mov ' );
		pappendp(list,1);
		pappends(list,' ,-128 \n jng $+4\n mov ' );
		pappendp(list,1);
		pappends(list,',127\n ' );
		pAAssemblypattern3745_AA3745:=list;
		END;
	FUNCTION pAAssemblesto3744_AA3744:pprintlist;
	begin
		pAAssemblesto3744_AA3744:=pAAssemblypattern3745_AA3745;
		END;
	FUNCTION pASideeffects3755_AS3755:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3755_AS3755:=nil;
		 pASideeffects3755_AS3755:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3756_AUP3756:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3756_AUP3756:=nil;
		 pAUnconditionalPrecond3756_AUP3756:=myrec;
		END;
	FUNCTION ADDSSB_ADDSSB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patbreg_;
		params^[1]:=patbreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning3718_AAM3718;
		matchedAssembler:=pAAssemblesto3744_AA3744;
		END;
		ADDSSB_ADDSSB:=myrec;
	END;
	FUNCTION pATypeid3759_AT3759:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3759_AT3759:=myrec;
		END;
	FUNCTION pATypeid3761_AT3761:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bnonacc  ilcg.pattern@fe9ad1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3761_AT3761:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc3765_AIL3765:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3765_AIL3765:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3764_AR3764:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3765_AIL3765;
		 pARefval3764_AR3764:=myrec;
		END;
	FUNCTION pASatmultDyadic3767_ASD3767:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpsatmult;
		 pASatmultDyadic3767_ASD3767:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc3771_AIL3771:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3771_AIL3771:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3770_AR3770:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3771_AIL3771;
		 pARefval3770_AR3770:=myrec;
		END;
	FUNCTION pADerefRhs3769_ADR3769:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3770_AR3770;
		 pADerefRhs3769_ADR3769:=myrec;
		END;
	FUNCTION pARhsValue3768_ARV3768:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3769_ADR3769;
		 pARhsValue3768_ARV3768:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc3775_AIL3775:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3775_AIL3775:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3774_AR3774:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3775_AIL3775;
		 pARefval3774_AR3774:=myrec;
		END;
	FUNCTION pADerefRhs3773_ADR3773:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3774_AR3774;
		 pADerefRhs3773_ADR3773:=myrec;
		END;
	FUNCTION pARhsValue3772_ARV3772:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3773_ADR3773;
		 pARhsValue3772_ARV3772:=myrec;
		END;
	FUNCTION pADyadicValue3766_ADV3766:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3768_ARV3768;
		myrec^.arg2:=pARhsValue3772_ARV3772;
		myrec^.fn:=pASatmultDyadic3767_ASD3767;
		 pADyadicValue3766_ADV3766:=myrec;
		END;
	FUNCTION pAAssign3763_AA3763:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue3766_ADV3766;
		myrec^.dest:=pARefval3764_AR3764;
		 pAAssign3763_AA3763:=myrec;
		END;
	FUNCTION pAAssignMeaning3762_AAM3762:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3763_AA3763;
		 pAAssignMeaning3762_AAM3762:=myrec;
		END;
	FUNCTION pAAssemblypattern3777_AA3777:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'push ax\n mov al,' );
		pappendp(list,0);
		pappends(list,'\n imul  ' );
		pappendp(list,1);
		pappends(list,'\n shr ax,7\n mov ' );
		pappendp(list,1);
		pappends(list,',al\n pop ax' );
		pAAssemblypattern3777_AA3777:=list;
		END;
	FUNCTION pAAssemblesto3776_AA3776:pprintlist;
	begin
		pAAssemblesto3776_AA3776:=pAAssemblypattern3777_AA3777;
		END;
	FUNCTION pASideeffects3785_AS3785:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3785_AS3785:=nil;
		 pASideeffects3785_AS3785:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3786_AUP3786:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3786_AUP3786:=nil;
		 pAUnconditionalPrecond3786_AUP3786:=myrec;
		END;
	FUNCTION MULTSSB_MULTSSB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbnonacc_;
		params^[0]:=patbreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning3762_AAM3762;
		matchedAssembler:=pAAssemblesto3776_AA3776;
		END;
		MULTSSB_MULTSSB:=myrec;
	END;
	FUNCTION pATypeid3789_AT3789:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bacc  ilcg.pattern@933cba}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3789_AT3789:=myrec;
		END;
	FUNCTION pATypeid3791_AT3791:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bnonacc  ilcg.pattern@fe9ad1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3791_AT3791:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc3795_AIL3795:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3795_AIL3795:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3794_AR3794:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3795_AIL3795;
		 pARefval3794_AR3794:=myrec;
		END;
	FUNCTION pASatmultDyadic3797_ASD3797:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpsatmult;
		 pASatmultDyadic3797_ASD3797:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc3801_AIL3801:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3801_AIL3801:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3800_AR3800:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3801_AIL3801;
		 pARefval3800_AR3800:=myrec;
		END;
	FUNCTION pADerefRhs3799_ADR3799:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3800_AR3800;
		 pADerefRhs3799_ADR3799:=myrec;
		END;
	FUNCTION pARhsValue3798_ARV3798:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3799_ADR3799;
		 pARhsValue3798_ARV3798:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc3805_AIL3805:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3805_AIL3805:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3804_AR3804:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3805_AIL3805;
		 pARefval3804_AR3804:=myrec;
		END;
	FUNCTION pADerefRhs3803_ADR3803:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3804_AR3804;
		 pADerefRhs3803_ADR3803:=myrec;
		END;
	FUNCTION pARhsValue3802_ARV3802:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3803_ADR3803;
		 pARhsValue3802_ARV3802:=myrec;
		END;
	FUNCTION pADyadicValue3796_ADV3796:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3798_ARV3798;
		myrec^.arg2:=pARhsValue3802_ARV3802;
		myrec^.fn:=pASatmultDyadic3797_ASD3797;
		 pADyadicValue3796_ADV3796:=myrec;
		END;
	FUNCTION pAAssign3793_AA3793:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue3796_ADV3796;
		myrec^.dest:=pARefval3794_AR3794;
		 pAAssign3793_AA3793:=myrec;
		END;
	FUNCTION pAAssignMeaning3792_AAM3792:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3793_AA3793;
		 pAAssignMeaning3792_AAM3792:=myrec;
		END;
	FUNCTION pAAssemblypattern3807_AA3807:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'imul  ' );
		pappendp(list,1);
		pappends(list,'\n shr ax,7' );
		pAAssemblypattern3807_AA3807:=list;
		END;
	FUNCTION pAAssemblesto3806_AA3806:pprintlist;
	begin
		pAAssemblesto3806_AA3806:=pAAssemblypattern3807_AA3807;
		END;
	FUNCTION pASideeffects3811_AS3811:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3811_AS3811:=nil;
		 pASideeffects3811_AS3811:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3812_AUP3812:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3812_AUP3812:=nil;
		 pAUnconditionalPrecond3812_AUP3812:=myrec;
		END;
	FUNCTION MULTSSBAL_MULTSSBAL:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbnonacc_;
		params^[0]:=patbacc_;
		paramcount:=3;
		meaning:=pAAssignMeaning3792_AAM3792;
		matchedAssembler:=pAAssemblesto3806_AA3806;
		END;
		MULTSSBAL_MULTSSBAL:=myrec;
	END;
	FUNCTION pATypeid3815_AT3815:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ addrmode  ilcg.pattern@17aaeec}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3815_AT3815:=myrec;
		END;
	FUNCTION pATypeid3817_AT3817:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3817_AT3817:=myrec;
		END;
	FUNCTION pATypeid3819_AT3819:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3819_AT3819:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc3823_AIL3823:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc3823_AIL3823:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3822_AR3822:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3823_AIL3823;
		 pARefval3822_AR3822:=myrec;
		END;
	FUNCTION pAInt8Signed3829_AI8S3829:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed3829_AI8S3829:=myrec;
		END;
	FUNCTION pASignedTformat3828_AST3828:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed3829_AI8S3829;
		 pASignedTformat3828_AST3828:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype3827_ATP3827:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype3827_ATP3827:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3826_APT3826:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType3826_APT3826:=myrec;
		END;
	FUNCTION pASatminusDyadic3831_ASD3831:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpsatminus;
		 pASatminusDyadic3831_ASD3831:=myrec;
		END;
	FUNCTION pAInt8Signed3837_AI8S3837:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed3837_AI8S3837:=myrec;
		END;
	FUNCTION pASignedTformat3836_AST3836:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed3837_AI8S3837;
		 pASignedTformat3836_AST3836:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype3835_ATP3835:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype3835_ATP3835:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3834_APT3834:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType3834_APT3834:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc3841_AIL3841:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc3841_AIL3841:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3840_AR3840:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3841_AIL3841;
		 pARefval3840_AR3840:=myrec;
		END;
	FUNCTION pADerefRhs3839_ADR3839:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3840_AR3840;
		 pADerefRhs3839_ADR3839:=myrec;
		END;
	FUNCTION pARhsValue3838_ARV3838:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3839_ADR3839;
		 pARhsValue3838_ARV3838:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs3833_ACR3833:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType3834_APT3834;
		myrec^.arg2:=pARhsValue3838_ARV3838;
		 pACastRhs3833_ACR3833:=myrec;
		END;
	FUNCTION pARhsValue3832_ARV3832:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3833_ACR3833;
		 pARhsValue3832_ARV3832:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc3845_AIL3845:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3845_AIL3845:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3844_AR3844:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3845_AIL3845;
		 pARefval3844_AR3844:=myrec;
		END;
	FUNCTION pADerefRhs3843_ADR3843:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3844_AR3844;
		 pADerefRhs3843_ADR3843:=myrec;
		END;
	FUNCTION pARhsValue3842_ARV3842:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3843_ADR3843;
		 pARhsValue3842_ARV3842:=myrec;
		END;
	FUNCTION pADyadicValue3830_ADV3830:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3832_ARV3832;
		myrec^.arg2:=pARhsValue3842_ARV3842;
		myrec^.fn:=pASatminusDyadic3831_ASD3831;
		 pADyadicValue3830_ADV3830:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs3825_ACR3825:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType3826_APT3826;
		myrec^.arg2:=pADyadicValue3830_ADV3830;
		 pACastRhs3825_ACR3825:=myrec;
		END;
	FUNCTION pARhsValue3824_ARV3824:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3825_ACR3825;
		 pARhsValue3824_ARV3824:=myrec;
		END;
	FUNCTION pAAssign3821_AA3821:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue3824_ARV3824;
		myrec^.dest:=pARefval3822_AR3822;
		 pAAssign3821_AA3821:=myrec;
		END;
	FUNCTION pAAssignMeaning3820_AAM3820:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3821_AA3821;
		 pAAssignMeaning3820_AAM3820:=myrec;
		END;
	FUNCTION pAAssemblypattern3847_AA3847:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'sub  ' );
		pappendp(list,2);
		pappends(list,',' );
		pappendp(list,1);
		pappends(list,'\n jno $+10\n jg $+6\n mov ' );
		pappendp(list,2);
		pappends(list,' ,-128 \n jng $+4\n mov ' );
		pappendp(list,2);
		pappends(list,',127\n nop\n nop' );
		pAAssemblypattern3847_AA3847:=list;
		END;
	FUNCTION pAAssemblesto3846_AA3846:pprintlist;
	begin
		pAAssemblesto3846_AA3846:=pAAssemblypattern3847_AA3847;
		END;
	FUNCTION pASideeffects3857_AS3857:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3857_AS3857:=nil;
		 pASideeffects3857_AS3857:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3858_AUP3858:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3858_AUP3858:=nil;
		 pAUnconditionalPrecond3858_AUP3858:=myrec;
		END;
	FUNCTION SUBSSB_SUBSSB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbreg_;
		params^[0]:=pataddrmode_;
		params^[2]:=patbreg_;
		paramcount:=4;
		meaning:=pAAssignMeaning3820_AAM3820;
		matchedAssembler:=pAAssemblesto3846_AA3846;
		END;
		SUBSSB_SUBSSB:=myrec;
	END;
	FUNCTION pATypeid3861_AT3861:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3861_AT3861:=myrec;
		END;
	FUNCTION pATypeid3863_AT3863:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3863_AT3863:=myrec;
		END;
	FUNCTION pAUint8Unsigned3872_AU8U3872:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned3872_AU8U3872:=myrec;
		END;
	FUNCTION pAUnsignedTformat3871_AUT3871:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned3872_AU8U3872;
		 pAUnsignedTformat3871_AUT3871:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype3870_ATP3870:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype3870_ATP3870:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3869_APT3869:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType3869_APT3869:=myrec;
		END;
	FUNCTION pAReference3868_AR3868:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType3869_APT3869;
		 pAReference3868_AR3868:=myrec;
		END;
	FUNCTION pAReftypeType3867_ART3867:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference3868_AR3868;
		 pAReftypeType3867_ART3867:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc3873_AIL3873:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3873_AIL3873:=myrec;
		END;
		(*! try to cast to type: ref uint8*)
	FUNCTION pARefcastRefval3866_ARR3866:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType3867_ART3867;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc3873_AIL3873;
		 pARefcastRefval3866_ARR3866:=myrec;
		END;
	FUNCTION pAMaxDyadic3875_AMD3875:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpmax;
		 pAMaxDyadic3875_AMD3875:=myrec;
		END;
	FUNCTION pAUint8Unsigned3881_AU8U3881:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned3881_AU8U3881:=myrec;
		END;
	FUNCTION pAUnsignedTformat3880_AUT3880:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned3881_AU8U3881;
		 pAUnsignedTformat3880_AUT3880:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype3879_ATP3879:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype3879_ATP3879:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3878_APT3878:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType3878_APT3878:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc3885_AIL3885:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3885_AIL3885:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3884_AR3884:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3885_AIL3885;
		 pARefval3884_AR3884:=myrec;
		END;
	FUNCTION pADerefRhs3883_ADR3883:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3884_AR3884;
		 pADerefRhs3883_ADR3883:=myrec;
		END;
	FUNCTION pARhsValue3882_ARV3882:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3883_ADR3883;
		 pARhsValue3882_ARV3882:=myrec;
		END;
		(*! try to cast to type: uint8*)
	FUNCTION pACastRhs3877_ACR3877:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType3878_APT3878;
		myrec^.arg2:=pARhsValue3882_ARV3882;
		 pACastRhs3877_ACR3877:=myrec;
		END;
	FUNCTION pARhsValue3876_ARV3876:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3877_ACR3877;
		 pARhsValue3876_ARV3876:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc3889_AIL3889:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3889_AIL3889:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3888_AR3888:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3889_AIL3889;
		 pARefval3888_AR3888:=myrec;
		END;
	FUNCTION pADerefRhs3887_ADR3887:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3888_AR3888;
		 pADerefRhs3887_ADR3887:=myrec;
		END;
	FUNCTION pARhsValue3886_ARV3886:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3887_ADR3887;
		 pARhsValue3886_ARV3886:=myrec;
		END;
	FUNCTION pADyadicValue3874_ADV3874:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3876_ARV3876;
		myrec^.arg2:=pARhsValue3886_ARV3886;
		myrec^.fn:=pAMaxDyadic3875_AMD3875;
		 pADyadicValue3874_ADV3874:=myrec;
		END;
	FUNCTION pAAssign3865_AA3865:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue3874_ADV3874;
		myrec^.dest:=pARefcastRefval3866_ARR3866;
		 pAAssign3865_AA3865:=myrec;
		END;
	FUNCTION pAAssignMeaning3864_AAM3864:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3865_AA3865;
		 pAAssignMeaning3864_AAM3864:=myrec;
		END;
	FUNCTION pAAssemblypattern3891_AA3891:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cmp ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pappends(list,'\n ja $+4\n mov ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern3891_AA3891:=list;
		END;
	FUNCTION pAAssemblesto3890_AA3890:pprintlist;
	begin
		pAAssemblesto3890_AA3890:=pAAssemblypattern3891_AA3891;
		END;
	FUNCTION pASideeffects3900_AS3900:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3900_AS3900:=nil;
		 pASideeffects3900_AS3900:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3901_AUP3901:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3901_AUP3901:=nil;
		 pAUnconditionalPrecond3901_AUP3901:=myrec;
		END;
	FUNCTION UINT8MAX_UINT8MAX:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbreg_;
		params^[0]:=patbreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning3864_AAM3864;
		matchedAssembler:=pAAssemblesto3890_AA3890;
		END;
		UINT8MAX_UINT8MAX:=myrec;
	END;
	FUNCTION pATypeid3904_AT3904:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3904_AT3904:=myrec;
		END;
	FUNCTION pATypeid3906_AT3906:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3906_AT3906:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc3910_AIL3910:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3910_AIL3910:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3909_AR3909:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3910_AIL3910;
		 pARefval3909_AR3909:=myrec;
		END;
	FUNCTION pAMaxDyadic3912_AMD3912:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpmax;
		 pAMaxDyadic3912_AMD3912:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc3916_AIL3916:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3916_AIL3916:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3915_AR3915:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3916_AIL3916;
		 pARefval3915_AR3915:=myrec;
		END;
	FUNCTION pADerefRhs3914_ADR3914:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3915_AR3915;
		 pADerefRhs3914_ADR3914:=myrec;
		END;
	FUNCTION pARhsValue3913_ARV3913:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3914_ADR3914;
		 pARhsValue3913_ARV3913:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc3920_AIL3920:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3920_AIL3920:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3919_AR3919:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3920_AIL3920;
		 pARefval3919_AR3919:=myrec;
		END;
	FUNCTION pADerefRhs3918_ADR3918:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3919_AR3919;
		 pADerefRhs3918_ADR3918:=myrec;
		END;
	FUNCTION pARhsValue3917_ARV3917:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3918_ADR3918;
		 pARhsValue3917_ARV3917:=myrec;
		END;
	FUNCTION pADyadicValue3911_ADV3911:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3913_ARV3913;
		myrec^.arg2:=pARhsValue3917_ARV3917;
		myrec^.fn:=pAMaxDyadic3912_AMD3912;
		 pADyadicValue3911_ADV3911:=myrec;
		END;
	FUNCTION pAAssign3908_AA3908:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue3911_ADV3911;
		myrec^.dest:=pARefval3909_AR3909;
		 pAAssign3908_AA3908:=myrec;
		END;
	FUNCTION pAAssignMeaning3907_AAM3907:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3908_AA3908;
		 pAAssignMeaning3907_AAM3907:=myrec;
		END;
	FUNCTION pAAssemblypattern3922_AA3922:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cmp ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pappends(list,'\n jl $+4\n mov ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern3922_AA3922:=list;
		END;
	FUNCTION pAAssemblesto3921_AA3921:pprintlist;
	begin
		pAAssemblesto3921_AA3921:=pAAssemblypattern3922_AA3922;
		END;
	FUNCTION pASideeffects3931_AS3931:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3931_AS3931:=nil;
		 pASideeffects3931_AS3931:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3932_AUP3932:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3932_AUP3932:=nil;
		 pAUnconditionalPrecond3932_AUP3932:=myrec;
		END;
	FUNCTION INTMAX_INTMAX:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patreg_;
		params^[0]:=patreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning3907_AAM3907;
		matchedAssembler:=pAAssemblesto3921_AA3921;
		END;
		INTMAX_INTMAX:=myrec;
	END;
	FUNCTION pATypeid3935_AT3935:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3935_AT3935:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc3939_AIL3939:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3939_AIL3939:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3938_AR3938:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3939_AIL3939;
		 pARefval3938_AR3938:=myrec;
		END;
	FUNCTION pAAbsMonadic3941_AAM3941:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpABS;
		 pAAbsMonadic3941_AAM3941:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc3945_AIL3945:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3945_AIL3945:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3944_AR3944:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3945_AIL3945;
		 pARefval3944_AR3944:=myrec;
		END;
	FUNCTION pADerefRhs3943_ADR3943:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3944_AR3944;
		 pADerefRhs3943_ADR3943:=myrec;
		END;
	FUNCTION pARhsValue3942_ARV3942:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3943_ADR3943;
		 pARhsValue3942_ARV3942:=myrec;
		END;
	FUNCTION pAMonadicValue3940_AMV3940:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue3942_ARV3942;
		myrec^.fn:=pAAbsMonadic3941_AAM3941;
		 pAMonadicValue3940_AMV3940:=myrec;
		END;
	FUNCTION pAAssign3937_AA3937:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pAMonadicValue3940_AMV3940;
		myrec^.dest:=pARefval3938_AR3938;
		 pAAssign3937_AA3937:=myrec;
		END;
	FUNCTION pAAssignMeaning3936_AAM3936:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3937_AA3937;
		 pAAssignMeaning3936_AAM3936:=myrec;
		END;
	FUNCTION pAAssemblypattern3947_AA3947:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cmp ' );
		pappendp(list,0);
		pappends(list,',0\n ja $+4\n neg ' );
		pappendp(list,0);
		pAAssemblypattern3947_AA3947:=list;
		END;
	FUNCTION pAAssemblesto3946_AA3946:pprintlist;
	begin
		pAAssemblesto3946_AA3946:=pAAssemblypattern3947_AA3947;
		END;
	FUNCTION pASideeffects3952_AS3952:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3952_AS3952:=nil;
		 pASideeffects3952_AS3952:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3953_AUP3953:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3953_AUP3953:=nil;
		 pAUnconditionalPrecond3953_AUP3953:=myrec;
		END;
	FUNCTION INTABS_INTABS:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		paramcount:=2;
		meaning:=pAAssignMeaning3936_AAM3936;
		matchedAssembler:=pAAssemblesto3946_AA3946;
		END;
		INTABS_INTABS:=myrec;
	END;
	FUNCTION pATypeid3956_AT3956:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3956_AT3956:=myrec;
		END;
	FUNCTION pATypeid3958_AT3958:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3958_AT3958:=myrec;
		END;
	FUNCTION pAUint8Unsigned3967_AU8U3967:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned3967_AU8U3967:=myrec;
		END;
	FUNCTION pAUnsignedTformat3966_AUT3966:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned3967_AU8U3967;
		 pAUnsignedTformat3966_AUT3966:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype3965_ATP3965:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype3965_ATP3965:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3964_APT3964:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType3964_APT3964:=myrec;
		END;
	FUNCTION pAReference3963_AR3963:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType3964_APT3964;
		 pAReference3963_AR3963:=myrec;
		END;
	FUNCTION pAReftypeType3962_ART3962:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference3963_AR3963;
		 pAReftypeType3962_ART3962:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc3968_AIL3968:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3968_AIL3968:=myrec;
		END;
		(*! try to cast to type: ref uint8*)
	FUNCTION pARefcastRefval3961_ARR3961:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType3962_ART3962;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc3968_AIL3968;
		 pARefcastRefval3961_ARR3961:=myrec;
		END;
	FUNCTION pAMinDyadic3970_AMD3970:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpmin;
		 pAMinDyadic3970_AMD3970:=myrec;
		END;
	FUNCTION pAUint8Unsigned3976_AU8U3976:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned3976_AU8U3976:=myrec;
		END;
	FUNCTION pAUnsignedTformat3975_AUT3975:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned3976_AU8U3976;
		 pAUnsignedTformat3975_AUT3975:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype3974_ATP3974:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype3974_ATP3974:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3973_APT3973:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType3973_APT3973:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc3980_AIL3980:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3980_AIL3980:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3979_AR3979:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3980_AIL3980;
		 pARefval3979_AR3979:=myrec;
		END;
	FUNCTION pADerefRhs3978_ADR3978:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3979_AR3979;
		 pADerefRhs3978_ADR3978:=myrec;
		END;
	FUNCTION pARhsValue3977_ARV3977:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3978_ADR3978;
		 pARhsValue3977_ARV3977:=myrec;
		END;
		(*! try to cast to type: uint8*)
	FUNCTION pACastRhs3972_ACR3972:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType3973_APT3973;
		myrec^.arg2:=pARhsValue3977_ARV3977;
		 pACastRhs3972_ACR3972:=myrec;
		END;
	FUNCTION pARhsValue3971_ARV3971:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3972_ACR3972;
		 pARhsValue3971_ARV3971:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc3984_AIL3984:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3984_AIL3984:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3983_AR3983:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3984_AIL3984;
		 pARefval3983_AR3983:=myrec;
		END;
	FUNCTION pADerefRhs3982_ADR3982:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3983_AR3983;
		 pADerefRhs3982_ADR3982:=myrec;
		END;
	FUNCTION pARhsValue3981_ARV3981:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3982_ADR3982;
		 pARhsValue3981_ARV3981:=myrec;
		END;
	FUNCTION pADyadicValue3969_ADV3969:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3971_ARV3971;
		myrec^.arg2:=pARhsValue3981_ARV3981;
		myrec^.fn:=pAMinDyadic3970_AMD3970;
		 pADyadicValue3969_ADV3969:=myrec;
		END;
	FUNCTION pAAssign3960_AA3960:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue3969_ADV3969;
		myrec^.dest:=pARefcastRefval3961_ARR3961;
		 pAAssign3960_AA3960:=myrec;
		END;
	FUNCTION pAAssignMeaning3959_AAM3959:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3960_AA3960;
		 pAAssignMeaning3959_AAM3959:=myrec;
		END;
	FUNCTION pAAssemblypattern3986_AA3986:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cmp ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pappends(list,'\n jna $+4\n mov ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern3986_AA3986:=list;
		END;
	FUNCTION pAAssemblesto3985_AA3985:pprintlist;
	begin
		pAAssemblesto3985_AA3985:=pAAssemblypattern3986_AA3986;
		END;
	FUNCTION pASideeffects3995_AS3995:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3995_AS3995:=nil;
		 pASideeffects3995_AS3995:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3996_AUP3996:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3996_AUP3996:=nil;
		 pAUnconditionalPrecond3996_AUP3996:=myrec;
		END;
	FUNCTION UINT8MIN_UINT8MIN:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbreg_;
		params^[0]:=patbreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning3959_AAM3959;
		matchedAssembler:=pAAssemblesto3985_AA3985;
		END;
		UINT8MIN_UINT8MIN:=myrec;
	END;
	FUNCTION pATypeid3999_AT3999:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3999_AT3999:=myrec;
		END;
	FUNCTION pATypeid4001_AT4001:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4001_AT4001:=myrec;
		END;
	FUNCTION pAInt8Signed4010_AI8S4010:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed4010_AI8S4010:=myrec;
		END;
	FUNCTION pASignedTformat4009_AST4009:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed4010_AI8S4010;
		 pASignedTformat4009_AST4009:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4008_ATP4008:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype4008_ATP4008:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4007_APT4007:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType4007_APT4007:=myrec;
		END;
	FUNCTION pAReference4006_AR4006:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType4007_APT4007;
		 pAReference4006_AR4006:=myrec;
		END;
	FUNCTION pAReftypeType4005_ART4005:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference4006_AR4006;
		 pAReftypeType4005_ART4005:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc4011_AIL4011:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4011_AIL4011:=myrec;
		END;
		(*! try to cast to type: ref int8*)
	FUNCTION pARefcastRefval4004_ARR4004:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType4005_ART4005;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc4011_AIL4011;
		 pARefcastRefval4004_ARR4004:=myrec;
		END;
	FUNCTION pAMaxDyadic4013_AMD4013:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpmax;
		 pAMaxDyadic4013_AMD4013:=myrec;
		END;
	FUNCTION pAInt8Signed4019_AI8S4019:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed4019_AI8S4019:=myrec;
		END;
	FUNCTION pASignedTformat4018_AST4018:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed4019_AI8S4019;
		 pASignedTformat4018_AST4018:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4017_ATP4017:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype4017_ATP4017:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4016_APT4016:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType4016_APT4016:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc4023_AIL4023:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4023_AIL4023:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4022_AR4022:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4023_AIL4023;
		 pARefval4022_AR4022:=myrec;
		END;
	FUNCTION pADerefRhs4021_ADR4021:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4022_AR4022;
		 pADerefRhs4021_ADR4021:=myrec;
		END;
	FUNCTION pARhsValue4020_ARV4020:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4021_ADR4021;
		 pARhsValue4020_ARV4020:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs4015_ACR4015:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType4016_APT4016;
		myrec^.arg2:=pARhsValue4020_ARV4020;
		 pACastRhs4015_ACR4015:=myrec;
		END;
	FUNCTION pARhsValue4014_ARV4014:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4015_ACR4015;
		 pARhsValue4014_ARV4014:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc4027_AIL4027:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4027_AIL4027:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4026_AR4026:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4027_AIL4027;
		 pARefval4026_AR4026:=myrec;
		END;
	FUNCTION pADerefRhs4025_ADR4025:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4026_AR4026;
		 pADerefRhs4025_ADR4025:=myrec;
		END;
	FUNCTION pARhsValue4024_ARV4024:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4025_ADR4025;
		 pARhsValue4024_ARV4024:=myrec;
		END;
	FUNCTION pADyadicValue4012_ADV4012:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4014_ARV4014;
		myrec^.arg2:=pARhsValue4024_ARV4024;
		myrec^.fn:=pAMaxDyadic4013_AMD4013;
		 pADyadicValue4012_ADV4012:=myrec;
		END;
	FUNCTION pAAssign4003_AA4003:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue4012_ADV4012;
		myrec^.dest:=pARefcastRefval4004_ARR4004;
		 pAAssign4003_AA4003:=myrec;
		END;
	FUNCTION pAAssignMeaning4002_AAM4002:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4003_AA4003;
		 pAAssignMeaning4002_AAM4002:=myrec;
		END;
	FUNCTION pAAssemblypattern4029_AA4029:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cmp ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pappends(list,'\n jg $+4\n mov ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern4029_AA4029:=list;
		END;
	FUNCTION pAAssemblesto4028_AA4028:pprintlist;
	begin
		pAAssemblesto4028_AA4028:=pAAssemblypattern4029_AA4029;
		END;
	FUNCTION pASideeffects4038_AS4038:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4038_AS4038:=nil;
		 pASideeffects4038_AS4038:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4039_AUP4039:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4039_AUP4039:=nil;
		 pAUnconditionalPrecond4039_AUP4039:=myrec;
		END;
	FUNCTION INT8MAX_INT8MAX:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbreg_;
		params^[0]:=patbreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning4002_AAM4002;
		matchedAssembler:=pAAssemblesto4028_AA4028;
		END;
		INT8MAX_INT8MAX:=myrec;
	END;
	FUNCTION pATypeid4042_AT4042:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4042_AT4042:=myrec;
		END;
	FUNCTION pATypeid4044_AT4044:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4044_AT4044:=myrec;
		END;
	FUNCTION pAInt8Signed4053_AI8S4053:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed4053_AI8S4053:=myrec;
		END;
	FUNCTION pASignedTformat4052_AST4052:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed4053_AI8S4053;
		 pASignedTformat4052_AST4052:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4051_ATP4051:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype4051_ATP4051:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4050_APT4050:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType4050_APT4050:=myrec;
		END;
	FUNCTION pAReference4049_AR4049:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType4050_APT4050;
		 pAReference4049_AR4049:=myrec;
		END;
	FUNCTION pAReftypeType4048_ART4048:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference4049_AR4049;
		 pAReftypeType4048_ART4048:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc4054_AIL4054:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4054_AIL4054:=myrec;
		END;
		(*! try to cast to type: ref int8*)
	FUNCTION pARefcastRefval4047_ARR4047:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType4048_ART4048;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc4054_AIL4054;
		 pARefcastRefval4047_ARR4047:=myrec;
		END;
	FUNCTION pAMinDyadic4056_AMD4056:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpmin;
		 pAMinDyadic4056_AMD4056:=myrec;
		END;
	FUNCTION pAInt8Signed4062_AI8S4062:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed4062_AI8S4062:=myrec;
		END;
	FUNCTION pASignedTformat4061_AST4061:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed4062_AI8S4062;
		 pASignedTformat4061_AST4061:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4060_ATP4060:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype4060_ATP4060:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4059_APT4059:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType4059_APT4059:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc4066_AIL4066:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4066_AIL4066:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4065_AR4065:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4066_AIL4066;
		 pARefval4065_AR4065:=myrec;
		END;
	FUNCTION pADerefRhs4064_ADR4064:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4065_AR4065;
		 pADerefRhs4064_ADR4064:=myrec;
		END;
	FUNCTION pARhsValue4063_ARV4063:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4064_ADR4064;
		 pARhsValue4063_ARV4063:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs4058_ACR4058:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType4059_APT4059;
		myrec^.arg2:=pARhsValue4063_ARV4063;
		 pACastRhs4058_ACR4058:=myrec;
		END;
	FUNCTION pARhsValue4057_ARV4057:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4058_ACR4058;
		 pARhsValue4057_ARV4057:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc4070_AIL4070:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4070_AIL4070:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4069_AR4069:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4070_AIL4070;
		 pARefval4069_AR4069:=myrec;
		END;
	FUNCTION pADerefRhs4068_ADR4068:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4069_AR4069;
		 pADerefRhs4068_ADR4068:=myrec;
		END;
	FUNCTION pARhsValue4067_ARV4067:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4068_ADR4068;
		 pARhsValue4067_ARV4067:=myrec;
		END;
	FUNCTION pADyadicValue4055_ADV4055:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4057_ARV4057;
		myrec^.arg2:=pARhsValue4067_ARV4067;
		myrec^.fn:=pAMinDyadic4056_AMD4056;
		 pADyadicValue4055_ADV4055:=myrec;
		END;
	FUNCTION pAAssign4046_AA4046:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue4055_ADV4055;
		myrec^.dest:=pARefcastRefval4047_ARR4047;
		 pAAssign4046_AA4046:=myrec;
		END;
	FUNCTION pAAssignMeaning4045_AAM4045:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4046_AA4046;
		 pAAssignMeaning4045_AAM4045:=myrec;
		END;
	FUNCTION pAAssemblypattern4072_AA4072:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cmp ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pappends(list,'\n jl $+4\n mov ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern4072_AA4072:=list;
		END;
	FUNCTION pAAssemblesto4071_AA4071:pprintlist;
	begin
		pAAssemblesto4071_AA4071:=pAAssemblypattern4072_AA4072;
		END;
	FUNCTION pASideeffects4081_AS4081:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4081_AS4081:=nil;
		 pASideeffects4081_AS4081:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4082_AUP4082:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4082_AUP4082:=nil;
		 pAUnconditionalPrecond4082_AUP4082:=myrec;
		END;
	FUNCTION INT8MIN_INT8MIN:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbreg_;
		params^[0]:=patbreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning4045_AAM4045;
		matchedAssembler:=pAAssemblesto4071_AA4071;
		END;
		INT8MIN_INT8MIN:=myrec;
	END;
	FUNCTION pATypeid4085_AT4085:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4085_AT4085:=myrec;
		END;
	FUNCTION pATypeid4087_AT4087:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ eaform  ilcg.pattern@811e18}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4087_AT4087:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc4091_AIL4091:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4091_AIL4091:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4090_AR4090:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4091_AIL4091;
		 pARefval4090_AR4090:=myrec;
		END;
		(*! Match ea *)
	FUNCTION pAIdLoc4093_AIL4093:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4093_AIL4093:=myrec;
		END;
		(*ea *)
	FUNCTION pALocValue4092_ALV4092:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4093_AIL4093;
		 pALocValue4092_ALV4092:=myrec;
		END;
	FUNCTION pAAssign4089_AA4089:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pALocValue4092_ALV4092;
		myrec^.dest:=pARefval4090_AR4090;
		 pAAssign4089_AA4089:=myrec;
		END;
	FUNCTION pAAssignMeaning4088_AAM4088:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4089_AA4089;
		 pAAssignMeaning4088_AAM4088:=myrec;
		END;
	FUNCTION pAAssemblypattern4095_AA4095:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'lea ' );
		pappendp(list,0);
		pappends(list,',[' );
		pappendp(list,1);
		pappends(list,']' );
		pAAssemblypattern4095_AA4095:=list;
		END;
	FUNCTION pAAssemblesto4094_AA4094:pprintlist;
	begin
		pAAssemblesto4094_AA4094:=pAAssemblypattern4095_AA4095;
		END;
	FUNCTION pASideeffects4101_AS4101:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4101_AS4101:=nil;
		 pASideeffects4101_AS4101:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4102_AUP4102:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4102_AUP4102:=nil;
		 pAUnconditionalPrecond4102_AUP4102:=myrec;
		END;
	FUNCTION LEA_LEA:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		params^[1]:=pateaform_;
		paramcount:=3;
		meaning:=pAAssignMeaning4088_AAM4088;
		matchedAssembler:=pAAssemblesto4094_AA4094;
		END;
		LEA_LEA:=myrec;
	END;
	FUNCTION pATypeid4105_AT4105:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ addrmode  ilcg.pattern@17aaeec}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4105_AT4105:=myrec;
		END;
	FUNCTION pATypeid4114_AT4114:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@5e5f92}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid4114_AT4114:=myrec;
		END;
	FUNCTION pATypeidType4113_ATT4113:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4114_AT4114;
		 pATypeidType4113_ATT4113:=myrec;
		END;
	FUNCTION pAReference4112_AR4112:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType4113_ATT4113;
		 pAReference4112_AR4112:=myrec;
		END;
	FUNCTION pAReftypeType4111_ART4111:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference4112_AR4112;
		 pAReftypeType4111_ART4111:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc4115_AIL4115:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4115_AIL4115:=myrec;
		END;
		(*! try to cast to type: ref t*)
	FUNCTION pARefcastRefval4110_ARR4110:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType4111_ART4111;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc4115_AIL4115;
		 pARefcastRefval4110_ARR4110:=myrec;
		END;
	FUNCTION pANotMonadic4117_ANM4117:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpNOT;
		 pANotMonadic4117_ANM4117:=myrec;
		END;
	FUNCTION pATypeid4121_AT4121:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@5e5f92}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid4121_AT4121:=myrec;
		END;
	FUNCTION pATypeidType4120_ATT4120:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4121_AT4121;
		 pATypeidType4120_ATT4120:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc4125_AIL4125:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4125_AIL4125:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4124_AR4124:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4125_AIL4125;
		 pARefval4124_AR4124:=myrec;
		END;
	FUNCTION pADerefRhs4123_ADR4123:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4124_AR4124;
		 pADerefRhs4123_ADR4123:=myrec;
		END;
	FUNCTION pARhsValue4122_ARV4122:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4123_ADR4123;
		 pARhsValue4122_ARV4122:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs4119_ACR4119:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4120_ATT4120;
		myrec^.arg2:=pARhsValue4122_ARV4122;
		 pACastRhs4119_ACR4119:=myrec;
		END;
	FUNCTION pARhsValue4118_ARV4118:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4119_ACR4119;
		 pARhsValue4118_ARV4118:=myrec;
		END;
	FUNCTION pAMonadicValue4116_AMV4116:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue4118_ARV4118;
		myrec^.fn:=pANotMonadic4117_ANM4117;
		 pAMonadicValue4116_AMV4116:=myrec;
		END;
	FUNCTION pAAssign4109_AA4109:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pAMonadicValue4116_AMV4116;
		myrec^.dest:=pARefcastRefval4110_ARR4110;
		 pAAssign4109_AA4109:=myrec;
		END;
	FUNCTION pAAssignMeaning4108_AAM4108:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4109_AA4109;
		 pAAssignMeaning4108_AAM4108:=myrec;
		END;
	FUNCTION pAAssemblypattern4127_AA4127:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'not ' );
		pappendp(list,1);
		pappends(list,' ' );
		pappendp(list,0);
		pAAssemblypattern4127_AA4127:=list;
		END;
	FUNCTION pAAssemblesto4126_AA4126:pprintlist;
	begin
		pAAssemblesto4126_AA4126:=pAAssemblypattern4127_AA4127;
		END;
	FUNCTION pASideeffects4132_AS4132:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4132_AS4132:=nil;
		 pASideeffects4132_AS4132:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4133_AUP4133:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4133_AUP4133:=nil;
		 pAUnconditionalPrecond4133_AUP4133:=myrec;
		END;
	FUNCTION NOTOP_NOTOP:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=typeparam;
		params^[0]:=pataddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning4108_AAM4108;
		matchedAssembler:=pAAssemblesto4126_AA4126;
		END;
		NOTOP_NOTOP:=myrec;
	END;
	FUNCTION pATypeid4136_AT4136:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ anyreg  ilcg.pattern@10a4a32}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4136_AT4136:=myrec;
		END;
	FUNCTION pATypeid4145_AT4145:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@1e48d65}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid4145_AT4145:=myrec;
		END;
	FUNCTION pATypeidType4144_ATT4144:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4145_AT4145;
		 pATypeidType4144_ATT4144:=myrec;
		END;
	FUNCTION pAReference4143_AR4143:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType4144_ATT4144;
		 pAReference4143_AR4143:=myrec;
		END;
	FUNCTION pAReftypeType4142_ART4142:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference4143_AR4143;
		 pAReftypeType4142_ART4142:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc4146_AIL4146:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4146_AIL4146:=myrec;
		END;
		(*! try to cast to type: ref t*)
	FUNCTION pARefcastRefval4141_ARR4141:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType4142_ART4142;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc4146_AIL4146;
		 pARefcastRefval4141_ARR4141:=myrec;
		END;
	FUNCTION pAMinusDyadic4148_AMD4148:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpminus;
		 pAMinusDyadic4148_AMD4148:=myrec;
		END;
	FUNCTION pATypeid4152_AT4152:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@1e48d65}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid4152_AT4152:=myrec;
		END;
	FUNCTION pATypeidType4151_ATT4151:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4152_AT4152;
		 pATypeidType4151_ATT4151:=myrec;
		END;
	FUNCTION pAOptionalsign4156_AO4156:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign4156_AO4156:=nil;
		 pAOptionalsign4156_AO4156:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber4155_AIN4155:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=0 ;
		 pAIntegerNumber4155_AIN4155:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs4154_ANR4154:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber4155_AIN4155;
		 pANumberRhs4154_ANR4154:=myrec;
		END;
	FUNCTION pARhsValue4153_ARV4153:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs4154_ANR4154;
		 pARhsValue4153_ARV4153:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs4150_ACR4150:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4151_ATT4151;
		myrec^.arg2:=pARhsValue4153_ARV4153;
		 pACastRhs4150_ACR4150:=myrec;
		END;
	FUNCTION pARhsValue4149_ARV4149:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4150_ACR4150;
		 pARhsValue4149_ARV4149:=myrec;
		END;
	FUNCTION pATypeid4160_AT4160:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@1e48d65}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid4160_AT4160:=myrec;
		END;
	FUNCTION pATypeidType4159_ATT4159:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4160_AT4160;
		 pATypeidType4159_ATT4159:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc4164_AIL4164:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4164_AIL4164:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4163_AR4163:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4164_AIL4164;
		 pARefval4163_AR4163:=myrec;
		END;
	FUNCTION pADerefRhs4162_ADR4162:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4163_AR4163;
		 pADerefRhs4162_ADR4162:=myrec;
		END;
	FUNCTION pARhsValue4161_ARV4161:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4162_ADR4162;
		 pARhsValue4161_ARV4161:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs4158_ACR4158:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4159_ATT4159;
		myrec^.arg2:=pARhsValue4161_ARV4161;
		 pACastRhs4158_ACR4158:=myrec;
		END;
	FUNCTION pARhsValue4157_ARV4157:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4158_ACR4158;
		 pARhsValue4157_ARV4157:=myrec;
		END;
	FUNCTION pADyadicValue4147_ADV4147:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4149_ARV4149;
		myrec^.arg2:=pARhsValue4157_ARV4157;
		myrec^.fn:=pAMinusDyadic4148_AMD4148;
		 pADyadicValue4147_ADV4147:=myrec;
		END;
	FUNCTION pAAssign4140_AA4140:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue4147_ADV4147;
		myrec^.dest:=pARefcastRefval4141_ARR4141;
		 pAAssign4140_AA4140:=myrec;
		END;
	FUNCTION pAAssignMeaning4139_AAM4139:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4140_AA4140;
		 pAAssignMeaning4139_AAM4139:=myrec;
		END;
	FUNCTION pAAssemblypattern4166_AA4166:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'neg ' );
		pappends(list,' ' );
		pappendp(list,0);
		pAAssemblypattern4166_AA4166:=list;
		END;
	FUNCTION pAAssemblesto4165_AA4165:pprintlist;
	begin
		pAAssemblesto4165_AA4165:=pAAssemblypattern4166_AA4166;
		END;
	FUNCTION pASideeffects4170_AS4170:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4170_AS4170:=nil;
		 pASideeffects4170_AS4170:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4171_AUP4171:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4171_AUP4171:=nil;
		 pAUnconditionalPrecond4171_AUP4171:=myrec;
		END;
	FUNCTION Negate_N:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patanyreg_;
		params^[1]:=typeparam;
		paramcount:=3;
		meaning:=pAAssignMeaning4139_AAM4139;
		matchedAssembler:=pAAssemblesto4165_AA4165;
		END;
		Negate_N:=myrec;
	END;
	FUNCTION pATypeid4174_AT4174:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ anyreg  ilcg.pattern@10a4a32}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4174_AT4174:=myrec;
		END;
	FUNCTION pATypeid4183_AT4183:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@511a6e}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid4183_AT4183:=myrec;
		END;
	FUNCTION pATypeidType4182_ATT4182:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4183_AT4183;
		 pATypeidType4182_ATT4182:=myrec;
		END;
	FUNCTION pAReference4181_AR4181:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType4182_ATT4182;
		 pAReference4181_AR4181:=myrec;
		END;
	FUNCTION pAReftypeType4180_ART4180:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference4181_AR4181;
		 pAReftypeType4180_ART4180:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc4184_AIL4184:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4184_AIL4184:=myrec;
		END;
		(*! try to cast to type: ref t*)
	FUNCTION pARefcastRefval4179_ARR4179:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType4180_ART4180;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc4184_AIL4184;
		 pARefcastRefval4179_ARR4179:=myrec;
		END;
	FUNCTION pATimesDyadic4186_ATD4186:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcptimes;
		 pATimesDyadic4186_ATD4186:=myrec;
		END;
	FUNCTION pATypeid4190_AT4190:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@511a6e}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid4190_AT4190:=myrec;
		END;
	FUNCTION pATypeidType4189_ATT4189:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4190_AT4190;
		 pATypeidType4189_ATT4189:=myrec;
		END;
	FUNCTION pAMinusOptionalsign4194_AMO4194:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAMinusOptionalsign4194_AMO4194:=nil;
		 pAMinusOptionalsign4194_AMO4194:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber4193_AIN4193:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=- 1 ;
		 pAIntegerNumber4193_AIN4193:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs4192_ANR4192:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber4193_AIN4193;
		 pANumberRhs4192_ANR4192:=myrec;
		END;
	FUNCTION pARhsValue4191_ARV4191:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs4192_ANR4192;
		 pARhsValue4191_ARV4191:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs4188_ACR4188:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4189_ATT4189;
		myrec^.arg2:=pARhsValue4191_ARV4191;
		 pACastRhs4188_ACR4188:=myrec;
		END;
	FUNCTION pARhsValue4187_ARV4187:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4188_ACR4188;
		 pARhsValue4187_ARV4187:=myrec;
		END;
	FUNCTION pATypeid4198_AT4198:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@511a6e}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid4198_AT4198:=myrec;
		END;
	FUNCTION pATypeidType4197_ATT4197:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4198_AT4198;
		 pATypeidType4197_ATT4197:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc4202_AIL4202:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4202_AIL4202:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4201_AR4201:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4202_AIL4202;
		 pARefval4201_AR4201:=myrec;
		END;
	FUNCTION pADerefRhs4200_ADR4200:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4201_AR4201;
		 pADerefRhs4200_ADR4200:=myrec;
		END;
	FUNCTION pARhsValue4199_ARV4199:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4200_ADR4200;
		 pARhsValue4199_ARV4199:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs4196_ACR4196:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4197_ATT4197;
		myrec^.arg2:=pARhsValue4199_ARV4199;
		 pACastRhs4196_ACR4196:=myrec;
		END;
	FUNCTION pARhsValue4195_ARV4195:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4196_ACR4196;
		 pARhsValue4195_ARV4195:=myrec;
		END;
	FUNCTION pADyadicValue4185_ADV4185:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4187_ARV4187;
		myrec^.arg2:=pARhsValue4195_ARV4195;
		myrec^.fn:=pATimesDyadic4186_ATD4186;
		 pADyadicValue4185_ADV4185:=myrec;
		END;
	FUNCTION pAAssign4178_AA4178:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue4185_ADV4185;
		myrec^.dest:=pARefcastRefval4179_ARR4179;
		 pAAssign4178_AA4178:=myrec;
		END;
	FUNCTION pAAssignMeaning4177_AAM4177:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4178_AA4178;
		 pAAssignMeaning4177_AAM4177:=myrec;
		END;
	FUNCTION pAAssemblypattern4204_AA4204:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'neg ' );
		pappends(list,' ' );
		pappendp(list,0);
		pAAssemblypattern4204_AA4204:=list;
		END;
	FUNCTION pAAssemblesto4203_AA4203:pprintlist;
	begin
		pAAssemblesto4203_AA4203:=pAAssemblypattern4204_AA4204;
		END;
	FUNCTION pASideeffects4208_AS4208:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4208_AS4208:=nil;
		 pASideeffects4208_AS4208:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4209_AUP4209:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4209_AUP4209:=nil;
		 pAUnconditionalPrecond4209_AUP4209:=myrec;
		END;
	FUNCTION MNegate_MN:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patanyreg_;
		params^[1]:=typeparam;
		paramcount:=3;
		meaning:=pAAssignMeaning4177_AAM4177;
		matchedAssembler:=pAAssemblesto4203_AA4203;
		END;
		MNegate_MN:=myrec;
	END;
	FUNCTION pATypeid4212_AT4212:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ operator  ilcg.pattern@d76d1e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4212_AT4212:=myrec;
		END;
	FUNCTION pATypeid4214_AT4214:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ pushreg  ilcg.pattern@139d369}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4214_AT4214:=myrec;
		END;
	FUNCTION pATypeid4218_AT4218:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ signed  ilcg.pattern@15e0163}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4218_AT4218:=myrec;
		END;
		(*! Match r0 *)
	FUNCTION pAIdLoc4222_AIL4222:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4222_AIL4222:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4221_AR4221:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4222_AIL4222;
		 pARefval4221_AR4221:=myrec;
		END;
	FUNCTION pAIdentifierDyadic4224_AID4224:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic4224_AID4224:=myrec;
		END;
		(*! Match r0 *)
	FUNCTION pAIdLoc4228_AIL4228:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4228_AIL4228:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4227_AR4227:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4228_AIL4228;
		 pARefval4227_AR4227:=myrec;
		END;
	FUNCTION pADerefRhs4226_ADR4226:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4227_AR4227;
		 pADerefRhs4226_ADR4226:=myrec;
		END;
	FUNCTION pARhsValue4225_ARV4225:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4226_ADR4226;
		 pARhsValue4225_ARV4225:=myrec;
		END;
	FUNCTION pAConstRhs4230_ACR4230:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(3);;
		 pAConstRhs4230_ACR4230:=myrec;
		END;
	FUNCTION pARhsValue4229_ARV4229:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs4230_ACR4230;
		 pARhsValue4229_ARV4229:=myrec;
		END;
	FUNCTION pADyadicValue4223_ADV4223:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4225_ARV4225;
		myrec^.arg2:=pARhsValue4229_ARV4229;
		myrec^.fn:=pAIdentifierDyadic4224_AID4224;
		 pADyadicValue4223_ADV4223:=myrec;
		END;
	FUNCTION pAAssign4220_AA4220:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue4223_ADV4223;
		myrec^.dest:=pARefval4221_AR4221;
		 pAAssign4220_AA4220:=myrec;
		END;
	FUNCTION pAAssignMeaning4219_AAM4219:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4220_AA4220;
		 pAAssignMeaning4219_AAM4219:=myrec;
		END;
	FUNCTION pAAssemblypattern4232_AA4232:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'  ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,3);
		pAAssemblypattern4232_AA4232:=list;
		END;
	FUNCTION pAAssemblesto4231_AA4231:pprintlist;
	begin
		pAAssemblesto4231_AA4231:=pAAssemblypattern4232_AA4232;
		END;
	FUNCTION pASideeffects4238_AS4238:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4238_AS4238:=nil;
		 pASideeffects4238_AS4238:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4239_AUP4239:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4239_AUP4239:=nil;
		 pAUnconditionalPrecond4239_AUP4239:=myrec;
		END;
	FUNCTION RLIT_RLIT:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patpushreg_;
		params^[2]:=typeparam;
		params^[3]:=patsigned_;
		params^[0]:=patoperator_;
		paramcount:=5;
		meaning:=pAAssignMeaning4219_AAM4219;
		matchedAssembler:=pAAssemblesto4231_AA4231;
		END;
		RLIT_RLIT:=myrec;
	END;
	FUNCTION pATypeid4242_AT4242:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ operator  ilcg.pattern@d76d1e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4242_AT4242:=myrec;
		END;
	FUNCTION pATypeid4244_AT4244:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ indexreg  ilcg.pattern@1dc6a9d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4244_AT4244:=myrec;
		END;
	FUNCTION pATypeid4246_AT4246:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ indexreg  ilcg.pattern@1dc6a9d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4246_AT4246:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc4250_AIL4250:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4250_AIL4250:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4249_AR4249:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4250_AIL4250;
		 pARefval4249_AR4249:=myrec;
		END;
	FUNCTION pASigned4256_AS4256:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned4256_AS4256:=myrec;
		END;
	FUNCTION pASignedTformat4255_AST4255:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned4256_AS4256;
		 pASignedTformat4255_AST4255:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4254_ATP4254:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype4254_ATP4254:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4253_APT4253:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType4253_APT4253:=myrec;
		END;
	FUNCTION pAIdentifierDyadic4258_AID4258:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic4258_AID4258:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc4262_AIL4262:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4262_AIL4262:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4261_AR4261:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4262_AIL4262;
		 pARefval4261_AR4261:=myrec;
		END;
	FUNCTION pADerefRhs4260_ADR4260:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4261_AR4261;
		 pADerefRhs4260_ADR4260:=myrec;
		END;
	FUNCTION pARhsValue4259_ARV4259:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4260_ADR4260;
		 pARhsValue4259_ARV4259:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc4266_AIL4266:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc4266_AIL4266:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4265_AR4265:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4266_AIL4266;
		 pARefval4265_AR4265:=myrec;
		END;
	FUNCTION pADerefRhs4264_ADR4264:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4265_AR4265;
		 pADerefRhs4264_ADR4264:=myrec;
		END;
	FUNCTION pARhsValue4263_ARV4263:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4264_ADR4264;
		 pARhsValue4263_ARV4263:=myrec;
		END;
	FUNCTION pADyadicValue4257_ADV4257:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4259_ARV4259;
		myrec^.arg2:=pARhsValue4263_ARV4263;
		myrec^.fn:=pAIdentifierDyadic4258_AID4258;
		 pADyadicValue4257_ADV4257:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs4252_ACR4252:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType4253_APT4253;
		myrec^.arg2:=pADyadicValue4257_ADV4257;
		 pACastRhs4252_ACR4252:=myrec;
		END;
	FUNCTION pARhsValue4251_ARV4251:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4252_ACR4252;
		 pARhsValue4251_ARV4251:=myrec;
		END;
	FUNCTION pAAssign4248_AA4248:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue4251_ARV4251;
		myrec^.dest:=pARefval4249_AR4249;
		 pAAssign4248_AA4248:=myrec;
		END;
	FUNCTION pAAssignMeaning4247_AAM4247:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4248_AA4248;
		 pAAssignMeaning4247_AAM4247:=myrec;
		END;
	FUNCTION pAAssemblypattern4268_AA4268:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,' ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,2);
		pappends(list,';RRD' );
		pAAssemblypattern4268_AA4268:=list;
		END;
	FUNCTION pAAssemblesto4267_AA4267:pprintlist;
	begin
		pAAssemblesto4267_AA4267:=pAAssemblypattern4268_AA4268;
		END;
	FUNCTION pASideeffects4275_AS4275:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4275_AS4275:=nil;
		 pASideeffects4275_AS4275:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4276_AUP4276:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4276_AUP4276:=nil;
		 pAUnconditionalPrecond4276_AUP4276:=myrec;
		END;
	FUNCTION RRD_RRD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patindexreg_;
		params^[1]:=patindexreg_;
		params^[0]:=patoperator_;
		paramcount:=4;
		meaning:=pAAssignMeaning4247_AAM4247;
		matchedAssembler:=pAAssemblesto4267_AA4267;
		END;
		RRD_RRD:=myrec;
	END;
	FUNCTION pATypeid4279_AT4279:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ nonmultoperator  ilcg.pattern@752144}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4279_AT4279:=myrec;
		END;
	FUNCTION pATypeid4281_AT4281:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ anyreg  ilcg.pattern@10a4a32}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4281_AT4281:=myrec;
		END;
	FUNCTION pATypeid4283_AT4283:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ anyreg  ilcg.pattern@10a4a32}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4283_AT4283:=myrec;
		END;
	FUNCTION pATypeid4285_AT4285:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@2a2ae9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4285_AT4285:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc4289_AIL4289:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4289_AIL4289:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4288_AR4288:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4289_AIL4289;
		 pARefval4288_AR4288:=myrec;
		END;
	FUNCTION pATypeid4293_AT4293:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@7b6617}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid4293_AT4293:=myrec;
		END;
	FUNCTION pATypeidType4292_ATT4292:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4293_AT4293;
		 pATypeidType4292_ATT4292:=myrec;
		END;
	FUNCTION pAIdentifierDyadic4295_AID4295:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic4295_AID4295:=myrec;
		END;
	FUNCTION pATypeid4299_AT4299:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@7b6617}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid4299_AT4299:=myrec;
		END;
	FUNCTION pATypeidType4298_ATT4298:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4299_AT4299;
		 pATypeidType4298_ATT4298:=myrec;
		END;
	FUNCTION pATypeid4306_AT4306:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@7b6617}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid4306_AT4306:=myrec;
		END;
	FUNCTION pATypeidType4305_ATT4305:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4306_AT4306;
		 pATypeidType4305_ATT4305:=myrec;
		END;
	FUNCTION pAReference4304_AR4304:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType4305_ATT4305;
		 pAReference4304_AR4304:=myrec;
		END;
	FUNCTION pAReftypeType4303_ART4303:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference4304_AR4304;
		 pAReftypeType4303_ART4303:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc4307_AIL4307:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4307_AIL4307:=myrec;
		END;
		(*! try to cast to type: ref t*)
	FUNCTION pARefcastRefval4302_ARR4302:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType4303_ART4303;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc4307_AIL4307;
		 pARefcastRefval4302_ARR4302:=myrec;
		END;
	FUNCTION pADerefRhs4301_ADR4301:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval4302_ARR4302;
		 pADerefRhs4301_ADR4301:=myrec;
		END;
	FUNCTION pARhsValue4300_ARV4300:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4301_ADR4301;
		 pARhsValue4300_ARV4300:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs4297_ACR4297:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4298_ATT4298;
		myrec^.arg2:=pARhsValue4300_ARV4300;
		 pACastRhs4297_ACR4297:=myrec;
		END;
	FUNCTION pARhsValue4296_ARV4296:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4297_ACR4297;
		 pARhsValue4296_ARV4296:=myrec;
		END;
	FUNCTION pATypeid4311_AT4311:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@7b6617}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid4311_AT4311:=myrec;
		END;
	FUNCTION pATypeidType4310_ATT4310:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4311_AT4311;
		 pATypeidType4310_ATT4310:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc4315_AIL4315:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc4315_AIL4315:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4314_AR4314:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4315_AIL4315;
		 pARefval4314_AR4314:=myrec;
		END;
	FUNCTION pADerefRhs4313_ADR4313:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4314_AR4314;
		 pADerefRhs4313_ADR4313:=myrec;
		END;
	FUNCTION pARhsValue4312_ARV4312:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4313_ADR4313;
		 pARhsValue4312_ARV4312:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs4309_ACR4309:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4310_ATT4310;
		myrec^.arg2:=pARhsValue4312_ARV4312;
		 pACastRhs4309_ACR4309:=myrec;
		END;
	FUNCTION pARhsValue4308_ARV4308:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4309_ACR4309;
		 pARhsValue4308_ARV4308:=myrec;
		END;
	FUNCTION pADyadicValue4294_ADV4294:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4296_ARV4296;
		myrec^.arg2:=pARhsValue4308_ARV4308;
		myrec^.fn:=pAIdentifierDyadic4295_AID4295;
		 pADyadicValue4294_ADV4294:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs4291_ACR4291:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4292_ATT4292;
		myrec^.arg2:=pADyadicValue4294_ADV4294;
		 pACastRhs4291_ACR4291:=myrec;
		END;
	FUNCTION pARhsValue4290_ARV4290:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4291_ACR4291;
		 pARhsValue4290_ARV4290:=myrec;
		END;
	FUNCTION pAAssign4287_AA4287:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue4290_ARV4290;
		myrec^.dest:=pARefval4288_AR4288;
		 pAAssign4287_AA4287:=myrec;
		END;
	FUNCTION pAAssignMeaning4286_AAM4286:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4287_AA4287;
		 pAAssignMeaning4286_AAM4286:=myrec;
		END;
	FUNCTION pAAssemblypattern4317_AA4317:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,' ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,2);
		pappends(list,';RR' );
		pAAssemblypattern4317_AA4317:=list;
		END;
	FUNCTION pAAssemblesto4316_AA4316:pprintlist;
	begin
		pAAssemblesto4316_AA4316:=pAAssemblypattern4317_AA4317;
		END;
	FUNCTION pASideeffects4324_AS4324:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4324_AS4324:=nil;
		 pASideeffects4324_AS4324:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4325_AUP4325:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4325_AUP4325:=nil;
		 pAUnconditionalPrecond4325_AUP4325:=myrec;
		END;
	FUNCTION RR_RR:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patanyreg_;
		params^[1]:=patanyreg_;
		params^[3]:=patint_;
		params^[0]:=patnonmultoperator_;
		paramcount:=5;
		meaning:=pAAssignMeaning4286_AAM4286;
		matchedAssembler:=pAAssemblesto4316_AA4316;
		END;
		RR_RR:=myrec;
	END;
	FUNCTION pATypeid4328_AT4328:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ anyreg  ilcg.pattern@10a4a32}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4328_AT4328:=myrec;
		END;
	FUNCTION pATypeid4330_AT4330:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4330_AT4330:=myrec;
		END;
	FUNCTION pATypeid4332_AT4332:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@2a2ae9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4332_AT4332:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc4336_AIL4336:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4336_AIL4336:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4335_AR4335:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4336_AIL4336;
		 pARefval4335_AR4335:=myrec;
		END;
	FUNCTION pATypeid4340_AT4340:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@fe861}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid4340_AT4340:=myrec;
		END;
	FUNCTION pATypeidType4339_ATT4339:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4340_AT4340;
		 pATypeidType4339_ATT4339:=myrec;
		END;
	FUNCTION pAPlusDyadic4342_APD4342:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic4342_APD4342:=myrec;
		END;
	FUNCTION pATypeid4346_AT4346:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@fe861}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid4346_AT4346:=myrec;
		END;
	FUNCTION pATypeidType4345_ATT4345:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4346_AT4346;
		 pATypeidType4345_ATT4345:=myrec;
		END;
	FUNCTION pATypeid4353_AT4353:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@fe861}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid4353_AT4353:=myrec;
		END;
	FUNCTION pATypeidType4352_ATT4352:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4353_AT4353;
		 pATypeidType4352_ATT4352:=myrec;
		END;
	FUNCTION pAReference4351_AR4351:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType4352_ATT4352;
		 pAReference4351_AR4351:=myrec;
		END;
	FUNCTION pAReftypeType4350_ART4350:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference4351_AR4351;
		 pAReftypeType4350_ART4350:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc4354_AIL4354:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4354_AIL4354:=myrec;
		END;
		(*! try to cast to type: ref t*)
	FUNCTION pARefcastRefval4349_ARR4349:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType4350_ART4350;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc4354_AIL4354;
		 pARefcastRefval4349_ARR4349:=myrec;
		END;
	FUNCTION pADerefRhs4348_ADR4348:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval4349_ARR4349;
		 pADerefRhs4348_ADR4348:=myrec;
		END;
	FUNCTION pARhsValue4347_ARV4347:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4348_ADR4348;
		 pARhsValue4347_ARV4347:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs4344_ACR4344:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4345_ATT4345;
		myrec^.arg2:=pARhsValue4347_ARV4347;
		 pACastRhs4344_ACR4344:=myrec;
		END;
	FUNCTION pARhsValue4343_ARV4343:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4344_ACR4344;
		 pARhsValue4343_ARV4343:=myrec;
		END;
	FUNCTION pATypeid4358_AT4358:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@fe861}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid4358_AT4358:=myrec;
		END;
	FUNCTION pATypeidType4357_ATT4357:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4358_AT4358;
		 pATypeidType4357_ATT4357:=myrec;
		END;
	FUNCTION pATypeid4365_AT4365:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@fe861}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid4365_AT4365:=myrec;
		END;
	FUNCTION pATypeidType4364_ATT4364:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4365_AT4365;
		 pATypeidType4364_ATT4364:=myrec;
		END;
	FUNCTION pAReference4363_AR4363:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType4364_ATT4364;
		 pAReference4363_AR4363:=myrec;
		END;
	FUNCTION pAReftypeType4362_ART4362:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference4363_AR4363;
		 pAReftypeType4362_ART4362:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc4366_AIL4366:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4366_AIL4366:=myrec;
		END;
		(*! try to cast to type: ref t*)
	FUNCTION pARefcastRefval4361_ARR4361:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType4362_ART4362;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc4366_AIL4366;
		 pARefcastRefval4361_ARR4361:=myrec;
		END;
	FUNCTION pADerefRhs4360_ADR4360:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval4361_ARR4361;
		 pADerefRhs4360_ADR4360:=myrec;
		END;
	FUNCTION pARhsValue4359_ARV4359:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4360_ADR4360;
		 pARhsValue4359_ARV4359:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs4356_ACR4356:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4357_ATT4357;
		myrec^.arg2:=pARhsValue4359_ARV4359;
		 pACastRhs4356_ACR4356:=myrec;
		END;
	FUNCTION pARhsValue4355_ARV4355:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4356_ACR4356;
		 pARhsValue4355_ARV4355:=myrec;
		END;
	FUNCTION pADyadicValue4341_ADV4341:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4343_ARV4343;
		myrec^.arg2:=pARhsValue4355_ARV4355;
		myrec^.fn:=pAPlusDyadic4342_APD4342;
		 pADyadicValue4341_ADV4341:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs4338_ACR4338:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4339_ATT4339;
		myrec^.arg2:=pADyadicValue4341_ADV4341;
		 pACastRhs4338_ACR4338:=myrec;
		END;
	FUNCTION pARhsValue4337_ARV4337:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4338_ACR4338;
		 pARhsValue4337_ARV4337:=myrec;
		END;
	FUNCTION pAAssign4334_AA4334:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue4337_ARV4337;
		myrec^.dest:=pARefval4335_AR4335;
		 pAAssign4334_AA4334:=myrec;
		END;
	FUNCTION pAAssignMeaning4333_AAM4333:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4334_AA4334;
		 pAAssignMeaning4333_AAM4333:=myrec;
		END;
	FUNCTION pAAssemblypattern4368_AA4368:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'add ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern4368_AA4368:=list;
		END;
	FUNCTION pAAssemblesto4367_AA4367:pprintlist;
	begin
		pAAssemblesto4367_AA4367:=pAAssemblypattern4368_AA4368;
		END;
	FUNCTION pASideeffects4373_AS4373:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4373_AS4373:=nil;
		 pASideeffects4373_AS4373:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4374_AUP4374:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4374_AUP4374:=nil;
		 pAUnconditionalPrecond4374_AUP4374:=myrec;
		END;
	FUNCTION RRPLUS_RRPLUS:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patmaddrmode_;
		params^[0]:=patanyreg_;
		params^[2]:=patint_;
		paramcount:=4;
		meaning:=pAAssignMeaning4333_AAM4333;
		matchedAssembler:=pAAssemblesto4367_AA4367;
		END;
		RRPLUS_RRPLUS:=myrec;
	END;
	FUNCTION pATypeid4377_AT4377:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ operator  ilcg.pattern@d76d1e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4377_AT4377:=myrec;
		END;
	FUNCTION pATypeid4379_AT4379:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ pushreg  ilcg.pattern@139d369}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4379_AT4379:=myrec;
		END;
	FUNCTION pATypeid4381_AT4381:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4381_AT4381:=myrec;
		END;
	FUNCTION pATypeid4383_AT4383:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@2a2ae9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4383_AT4383:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc4387_AIL4387:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4387_AIL4387:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4386_AR4386:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4387_AIL4387;
		 pARefval4386_AR4386:=myrec;
		END;
	FUNCTION pATypeid4391_AT4391:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@312737}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid4391_AT4391:=myrec;
		END;
	FUNCTION pATypeidType4390_ATT4390:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4391_AT4391;
		 pATypeidType4390_ATT4390:=myrec;
		END;
	FUNCTION pAIdentifierDyadic4393_AID4393:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic4393_AID4393:=myrec;
		END;
	FUNCTION pATypeid4397_AT4397:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@312737}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid4397_AT4397:=myrec;
		END;
	FUNCTION pATypeidType4396_ATT4396:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4397_AT4397;
		 pATypeidType4396_ATT4396:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc4401_AIL4401:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4401_AIL4401:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4400_AR4400:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4401_AIL4401;
		 pARefval4400_AR4400:=myrec;
		END;
	FUNCTION pADerefRhs4399_ADR4399:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4400_AR4400;
		 pADerefRhs4399_ADR4399:=myrec;
		END;
	FUNCTION pARhsValue4398_ARV4398:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4399_ADR4399;
		 pARhsValue4398_ARV4398:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs4395_ACR4395:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4396_ATT4396;
		myrec^.arg2:=pARhsValue4398_ARV4398;
		 pACastRhs4395_ACR4395:=myrec;
		END;
	FUNCTION pARhsValue4394_ARV4394:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4395_ACR4395;
		 pARhsValue4394_ARV4394:=myrec;
		END;
	FUNCTION pATypeid4405_AT4405:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@312737}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid4405_AT4405:=myrec;
		END;
	FUNCTION pATypeidType4404_ATT4404:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4405_AT4405;
		 pATypeidType4404_ATT4404:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc4409_AIL4409:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc4409_AIL4409:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4408_AR4408:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4409_AIL4409;
		 pARefval4408_AR4408:=myrec;
		END;
	FUNCTION pADerefRhs4407_ADR4407:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4408_AR4408;
		 pADerefRhs4407_ADR4407:=myrec;
		END;
	FUNCTION pARhsValue4406_ARV4406:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4407_ADR4407;
		 pARhsValue4406_ARV4406:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs4403_ACR4403:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4404_ATT4404;
		myrec^.arg2:=pARhsValue4406_ARV4406;
		 pACastRhs4403_ACR4403:=myrec;
		END;
	FUNCTION pARhsValue4402_ARV4402:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4403_ACR4403;
		 pARhsValue4402_ARV4402:=myrec;
		END;
	FUNCTION pADyadicValue4392_ADV4392:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4394_ARV4394;
		myrec^.arg2:=pARhsValue4402_ARV4402;
		myrec^.fn:=pAIdentifierDyadic4393_AID4393;
		 pADyadicValue4392_ADV4392:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs4389_ACR4389:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4390_ATT4390;
		myrec^.arg2:=pADyadicValue4392_ADV4392;
		 pACastRhs4389_ACR4389:=myrec;
		END;
	FUNCTION pARhsValue4388_ARV4388:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4389_ACR4389;
		 pARhsValue4388_ARV4388:=myrec;
		END;
	FUNCTION pAAssign4385_AA4385:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue4388_ARV4388;
		myrec^.dest:=pARefval4386_AR4386;
		 pAAssign4385_AA4385:=myrec;
		END;
	FUNCTION pAAssignMeaning4384_AAM4384:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4385_AA4385;
		 pAAssignMeaning4384_AAM4384:=myrec;
		END;
	FUNCTION pAAssemblypattern4411_AA4411:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,' ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,2);
		pAAssemblypattern4411_AA4411:=list;
		END;
	FUNCTION pAAssemblesto4410_AA4410:pprintlist;
	begin
		pAAssemblesto4410_AA4410:=pAAssemblypattern4411_AA4411;
		END;
	FUNCTION pASideeffects4417_AS4417:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4417_AS4417:=nil;
		 pASideeffects4417_AS4417:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4418_AUP4418:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4418_AUP4418:=nil;
		 pAUnconditionalPrecond4418_AUP4418:=myrec;
		END;
	FUNCTION RRM_RRM:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patpushreg_;
		params^[3]:=patint_;
		params^[2]:=patmaddrmode_;
		params^[0]:=patoperator_;
		paramcount:=5;
		meaning:=pAAssignMeaning4384_AAM4384;
		matchedAssembler:=pAAssemblesto4410_AA4410;
		END;
		RRM_RRM:=myrec;
	END;
	FUNCTION pATypeid4423_AT4423:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ DH  ilcg.RegDetails@66998f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4423_AT4423:=myrec;
		END;
	FUNCTION pATypeidType4422_ATT4422:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4423_AT4423;
		 pATypeidType4422_ATT4422:=myrec;
		END;
	FUNCTION pATypeid4425_AT4425:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ DL  ilcg.RegDetails@904f75}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4425_AT4425:=myrec;
		END;
	FUNCTION pATypeidType4424_ATT4424:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4425_AT4425;
		 pATypeidType4424_ATT4424:=myrec;
		END;
	FUNCTION pATypeid4427_AT4427:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BH  ilcg.RegDetails@193d2f2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4427_AT4427:=myrec;
		END;
	FUNCTION pATypeidType4426_ATT4426:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4427_AT4427;
		 pATypeidType4426_ATT4426:=myrec;
		END;
	FUNCTION pATypeid4429_AT4429:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BL  ilcg.RegDetails@1e2bda7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4429_AT4429:=myrec;
		END;
	FUNCTION pATypeidType4428_ATT4428:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4429_AT4429;
		 pATypeidType4428_ATT4428:=myrec;
		END;
	FUNCTION pATypeid4431_AT4431:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ CH  ilcg.RegDetails@8bfdea}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4431_AT4431:=myrec;
		END;
	FUNCTION pATypeidType4430_ATT4430:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4431_AT4431;
		 pATypeidType4430_ATT4430:=myrec;
		END;
	FUNCTION pATypeid4433_AT4433:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ CL  ilcg.RegDetails@17e6064}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4433_AT4433:=myrec;
		END;
	FUNCTION pATypeidType4432_ATT4432:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4433_AT4433;
		 pATypeidType4432_ATT4432:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl4421_AAP4421:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 224;
		myrec^.last:= 229;
		 pAAlternativesPatterndecl4421_AAP4421:=myrec;
		END;
	FUNCTION pATypeid4438_AT4438:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ AL  ilcg.RegDetails@1ee2ea8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4438_AT4438:=myrec;
		END;
	FUNCTION pATypeidType4437_ATT4437:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4438_AT4438;
		 pATypeidType4437_ATT4437:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl4436_AAP4436:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 230;
		myrec^.last:= 230;
		 pAAlternativesPatterndecl4436_AAP4436:=myrec;
		END;
	FUNCTION pATypeid4443_AT4443:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4443_AT4443:=myrec;
		END;
	FUNCTION pATypeidType4442_ATT4442:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4443_AT4443;
		 pATypeidType4442_ATT4442:=myrec;
		END;
	FUNCTION pATypeid4445_AT4445:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baccreg  ilcg.pattern@24bef5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4445_AT4445:=myrec;
		END;
	FUNCTION pATypeidType4444_ATT4444:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4445_AT4445;
		 pATypeidType4444_ATT4444:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl4441_AAP4441:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 231;
		myrec^.last:= 232;
		 pAAlternativesPatterndecl4441_AAP4441:=myrec;
		END;
	FUNCTION pATypeid4450_AT4450:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4450_AT4450:=myrec;
		END;
	FUNCTION pATypeidType4449_ATT4449:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4450_AT4450;
		 pATypeidType4449_ATT4449:=myrec;
		END;
	FUNCTION pATypeid4452_AT4452:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bnonacreg  ilcg.pattern@15d63da}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4452_AT4452:=myrec;
		END;
	FUNCTION pATypeidType4451_ATT4451:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4452_AT4452;
		 pATypeidType4451_ATT4451:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl4448_AAP4448:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 233;
		myrec^.last:= 234;
		 pAAlternativesPatterndecl4448_AAP4448:=myrec;
		END;
	FUNCTION pATypeid4455_AT4455:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baccreg  ilcg.pattern@24bef5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4455_AT4455:=myrec;
		END;
	FUNCTION pATypeid4457_AT4457:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bnonacregmode  ilcg.pattern@1ec264c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4457_AT4457:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc4461_AIL4461:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4461_AIL4461:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4460_AR4460:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4461_AIL4461;
		 pARefval4460_AR4460:=myrec;
		END;
	FUNCTION pADivideDyadic4463_ADD4463:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpdivide;
		 pADivideDyadic4463_ADD4463:=myrec;
		END;
	FUNCTION pAInt8Signed4469_AI8S4469:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed4469_AI8S4469:=myrec;
		END;
	FUNCTION pASignedTformat4468_AST4468:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed4469_AI8S4469;
		 pASignedTformat4468_AST4468:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4467_ATP4467:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype4467_ATP4467:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4466_APT4466:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType4466_APT4466:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc4473_AIL4473:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4473_AIL4473:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4472_AR4472:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4473_AIL4473;
		 pARefval4472_AR4472:=myrec;
		END;
	FUNCTION pADerefRhs4471_ADR4471:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4472_AR4472;
		 pADerefRhs4471_ADR4471:=myrec;
		END;
	FUNCTION pARhsValue4470_ARV4470:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4471_ADR4471;
		 pARhsValue4470_ARV4470:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs4465_ACR4465:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType4466_APT4466;
		myrec^.arg2:=pARhsValue4470_ARV4470;
		 pACastRhs4465_ACR4465:=myrec;
		END;
	FUNCTION pARhsValue4464_ARV4464:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4465_ACR4465;
		 pARhsValue4464_ARV4464:=myrec;
		END;
	FUNCTION pAInt8Signed4479_AI8S4479:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed4479_AI8S4479:=myrec;
		END;
	FUNCTION pASignedTformat4478_AST4478:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed4479_AI8S4479;
		 pASignedTformat4478_AST4478:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4477_ATP4477:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype4477_ATP4477:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4476_APT4476:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType4476_APT4476:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc4483_AIL4483:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4483_AIL4483:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4482_AR4482:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4483_AIL4483;
		 pARefval4482_AR4482:=myrec;
		END;
	FUNCTION pADerefRhs4481_ADR4481:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4482_AR4482;
		 pADerefRhs4481_ADR4481:=myrec;
		END;
	FUNCTION pARhsValue4480_ARV4480:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4481_ADR4481;
		 pARhsValue4480_ARV4480:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs4475_ACR4475:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType4476_APT4476;
		myrec^.arg2:=pARhsValue4480_ARV4480;
		 pACastRhs4475_ACR4475:=myrec;
		END;
	FUNCTION pARhsValue4474_ARV4474:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4475_ACR4475;
		 pARhsValue4474_ARV4474:=myrec;
		END;
	FUNCTION pADyadicValue4462_ADV4462:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4464_ARV4464;
		myrec^.arg2:=pARhsValue4474_ARV4474;
		myrec^.fn:=pADivideDyadic4463_ADD4463;
		 pADyadicValue4462_ADV4462:=myrec;
		END;
	FUNCTION pAAssign4459_AA4459:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue4462_ADV4462;
		myrec^.dest:=pARefval4460_AR4460;
		 pAAssign4459_AA4459:=myrec;
		END;
	FUNCTION pAAssignMeaning4458_AAM4458:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4459_AA4459;
		 pAAssignMeaning4458_AAM4458:=myrec;
		END;
	FUNCTION pAAssemblypattern4485_AA4485:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,' movsx ax,' );
		pappendp(list,0);
		pappends(list,'\n idiv BYTE ' );
		pappendp(list,1);
		pAAssemblypattern4485_AA4485:=list;
		END;
	FUNCTION pAAssemblesto4484_AA4484:pprintlist;
	begin
		pAAssemblesto4484_AA4484:=pAAssemblypattern4485_AA4485;
		END;
	FUNCTION pASideeffects4490_AS4490:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4490_AS4490:=nil;
		 pASideeffects4490_AS4490:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4491_AUP4491:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4491_AUP4491:=nil;
		 pAUnconditionalPrecond4491_AUP4491:=myrec;
		END;
	FUNCTION fastBIDIV_BIDIV:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbnonacregmode_;
		params^[0]:=patbaccreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning4458_AAM4458;
		matchedAssembler:=pAAssemblesto4484_AA4484;
		END;
		fastBIDIV_BIDIV:=myrec;
	END;
	FUNCTION pATypeid4494_AT4494:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baccreg  ilcg.pattern@24bef5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4494_AT4494:=myrec;
		END;
	FUNCTION pATypeid4496_AT4496:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bnonacregmode  ilcg.pattern@1ec264c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4496_AT4496:=myrec;
		END;
	FUNCTION pATypeid4498_AT4498:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baccregmode  ilcg.pattern@a4911d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4498_AT4498:=myrec;
		END;
		(*! Match r3 *)
	FUNCTION pAIdLoc4502_AIL4502:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc4502_AIL4502:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4501_AR4501:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4502_AIL4502;
		 pARefval4501_AR4501:=myrec;
		END;
	FUNCTION pADivideDyadic4504_ADD4504:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpdivide;
		 pADivideDyadic4504_ADD4504:=myrec;
		END;
	FUNCTION pAInt8Signed4510_AI8S4510:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed4510_AI8S4510:=myrec;
		END;
	FUNCTION pASignedTformat4509_AST4509:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed4510_AI8S4510;
		 pASignedTformat4509_AST4509:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4508_ATP4508:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype4508_ATP4508:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4507_APT4507:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType4507_APT4507:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc4514_AIL4514:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4514_AIL4514:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4513_AR4513:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4514_AIL4514;
		 pARefval4513_AR4513:=myrec;
		END;
	FUNCTION pADerefRhs4512_ADR4512:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4513_AR4513;
		 pADerefRhs4512_ADR4512:=myrec;
		END;
	FUNCTION pARhsValue4511_ARV4511:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4512_ADR4512;
		 pARhsValue4511_ARV4511:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs4506_ACR4506:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType4507_APT4507;
		myrec^.arg2:=pARhsValue4511_ARV4511;
		 pACastRhs4506_ACR4506:=myrec;
		END;
	FUNCTION pARhsValue4505_ARV4505:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4506_ACR4506;
		 pARhsValue4505_ARV4505:=myrec;
		END;
	FUNCTION pAInt8Signed4520_AI8S4520:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed4520_AI8S4520:=myrec;
		END;
	FUNCTION pASignedTformat4519_AST4519:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed4520_AI8S4520;
		 pASignedTformat4519_AST4519:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4518_ATP4518:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype4518_ATP4518:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4517_APT4517:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType4517_APT4517:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc4524_AIL4524:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4524_AIL4524:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4523_AR4523:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4524_AIL4524;
		 pARefval4523_AR4523:=myrec;
		END;
	FUNCTION pADerefRhs4522_ADR4522:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4523_AR4523;
		 pADerefRhs4522_ADR4522:=myrec;
		END;
	FUNCTION pARhsValue4521_ARV4521:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4522_ADR4522;
		 pARhsValue4521_ARV4521:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs4516_ACR4516:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType4517_APT4517;
		myrec^.arg2:=pARhsValue4521_ARV4521;
		 pACastRhs4516_ACR4516:=myrec;
		END;
	FUNCTION pARhsValue4515_ARV4515:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4516_ACR4516;
		 pARhsValue4515_ARV4515:=myrec;
		END;
	FUNCTION pADyadicValue4503_ADV4503:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4505_ARV4505;
		myrec^.arg2:=pARhsValue4515_ARV4515;
		myrec^.fn:=pADivideDyadic4504_ADD4504;
		 pADyadicValue4503_ADV4503:=myrec;
		END;
	FUNCTION pAAssign4500_AA4500:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue4503_ADV4503;
		myrec^.dest:=pARefval4501_AR4501;
		 pAAssign4500_AA4500:=myrec;
		END;
	FUNCTION pAAssignMeaning4499_AAM4499:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4500_AA4500;
		 pAAssignMeaning4499_AAM4499:=myrec;
		END;
	FUNCTION pAAssemblypattern4526_AA4526:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,' movsx ax,' );
		pappendp(list,0);
		pappends(list,'\n idiv BYTE ' );
		pappendp(list,1);
		pappends(list,'\n mov BYTE ' );
		pappendp(list,2);
		pappends(list,',al' );
		pAAssemblypattern4526_AA4526:=list;
		END;
	FUNCTION pAAssemblesto4525_AA4525:pprintlist;
	begin
		pAAssemblesto4525_AA4525:=pAAssemblypattern4526_AA4526;
		END;
	FUNCTION pASideeffects4534_AS4534:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4534_AS4534:=nil;
		 pASideeffects4534_AS4534:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4535_AUP4535:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4535_AUP4535:=nil;
		 pAUnconditionalPrecond4535_AUP4535:=myrec;
		END;
	FUNCTION BIDIV_BIDIV:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patbaccregmode_;
		params^[1]:=patbnonacregmode_;
		params^[0]:=patbaccreg_;
		paramcount:=4;
		meaning:=pAAssignMeaning4499_AAM4499;
		matchedAssembler:=pAAssemblesto4525_AA4525;
		END;
		BIDIV_BIDIV:=myrec;
	END;
	FUNCTION pATypeid4538_AT4538:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baccreg  ilcg.pattern@24bef5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4538_AT4538:=myrec;
		END;
	FUNCTION pATypeid4540_AT4540:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bnonacreg  ilcg.pattern@15d63da}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4540_AT4540:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc4544_AIL4544:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4544_AIL4544:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4543_AR4543:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4544_AIL4544;
		 pARefval4543_AR4543:=myrec;
		END;
	FUNCTION pATimesDyadic4546_ATD4546:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcptimes;
		 pATimesDyadic4546_ATD4546:=myrec;
		END;
	FUNCTION pAInt8Signed4552_AI8S4552:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed4552_AI8S4552:=myrec;
		END;
	FUNCTION pASignedTformat4551_AST4551:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed4552_AI8S4552;
		 pASignedTformat4551_AST4551:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4550_ATP4550:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype4550_ATP4550:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4549_APT4549:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType4549_APT4549:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc4556_AIL4556:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4556_AIL4556:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4555_AR4555:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4556_AIL4556;
		 pARefval4555_AR4555:=myrec;
		END;
	FUNCTION pADerefRhs4554_ADR4554:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4555_AR4555;
		 pADerefRhs4554_ADR4554:=myrec;
		END;
	FUNCTION pARhsValue4553_ARV4553:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4554_ADR4554;
		 pARhsValue4553_ARV4553:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs4548_ACR4548:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType4549_APT4549;
		myrec^.arg2:=pARhsValue4553_ARV4553;
		 pACastRhs4548_ACR4548:=myrec;
		END;
	FUNCTION pARhsValue4547_ARV4547:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4548_ACR4548;
		 pARhsValue4547_ARV4547:=myrec;
		END;
	FUNCTION pAInt8Signed4562_AI8S4562:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed4562_AI8S4562:=myrec;
		END;
	FUNCTION pASignedTformat4561_AST4561:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed4562_AI8S4562;
		 pASignedTformat4561_AST4561:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4560_ATP4560:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype4560_ATP4560:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4559_APT4559:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType4559_APT4559:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc4566_AIL4566:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4566_AIL4566:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4565_AR4565:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4566_AIL4566;
		 pARefval4565_AR4565:=myrec;
		END;
	FUNCTION pADerefRhs4564_ADR4564:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4565_AR4565;
		 pADerefRhs4564_ADR4564:=myrec;
		END;
	FUNCTION pARhsValue4563_ARV4563:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4564_ADR4564;
		 pARhsValue4563_ARV4563:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs4558_ACR4558:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType4559_APT4559;
		myrec^.arg2:=pARhsValue4563_ARV4563;
		 pACastRhs4558_ACR4558:=myrec;
		END;
	FUNCTION pARhsValue4557_ARV4557:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4558_ACR4558;
		 pARhsValue4557_ARV4557:=myrec;
		END;
	FUNCTION pADyadicValue4545_ADV4545:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4547_ARV4547;
		myrec^.arg2:=pARhsValue4557_ARV4557;
		myrec^.fn:=pATimesDyadic4546_ATD4546;
		 pADyadicValue4545_ADV4545:=myrec;
		END;
	FUNCTION pAAssign4542_AA4542:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue4545_ADV4545;
		myrec^.dest:=pARefval4543_AR4543;
		 pAAssign4542_AA4542:=myrec;
		END;
	FUNCTION pAAssignMeaning4541_AAM4541:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4542_AA4542;
		 pAAssignMeaning4541_AAM4541:=myrec;
		END;
	FUNCTION pAAssemblypattern4568_AA4568:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'imul BYTE ' );
		pappendp(list,1);
		pappends(list,'\n mov BYTE ' );
		pappendp(list,1);
		pappends(list,',al' );
		pAAssemblypattern4568_AA4568:=list;
		END;
	FUNCTION pAAssemblesto4567_AA4567:pprintlist;
	begin
		pAAssemblesto4567_AA4567:=pAAssemblypattern4568_AA4568;
		END;
	FUNCTION pASideeffects4574_AS4574:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4574_AS4574:=nil;
		 pASideeffects4574_AS4574:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4575_AUP4575:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4575_AUP4575:=nil;
		 pAUnconditionalPrecond4575_AUP4575:=myrec;
		END;
	FUNCTION BIMUL_BIMUL:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbnonacreg_;
		params^[0]:=patbaccreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning4541_AAM4541;
		matchedAssembler:=pAAssemblesto4567_AA4567;
		END;
		BIMUL_BIMUL:=myrec;
	END;
	FUNCTION pATypeid4578_AT4578:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ acc  ilcg.pattern@fde0d5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4578_AT4578:=myrec;
		END;
	FUNCTION pATypeid4580_AT4580:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ dacc  ilcg.pattern@f64f64}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4580_AT4580:=myrec;
		END;
	FUNCTION pASigned4589_AS4589:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned4589_AS4589:=myrec;
		END;
	FUNCTION pASignedTformat4588_AST4588:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned4589_AS4589;
		 pASignedTformat4588_AST4588:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4587_ATP4587:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype4587_ATP4587:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4586_APT4586:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType4586_APT4586:=myrec;
		END;
	FUNCTION pAReference4585_AR4585:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType4586_APT4586;
		 pAReference4585_AR4585:=myrec;
		END;
	FUNCTION pAReftypeType4584_ART4584:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference4585_AR4585;
		 pAReftypeType4584_ART4584:=myrec;
		END;
		(*! Match a *)
	FUNCTION pAIdLoc4590_AIL4590:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4590_AIL4590:=myrec;
		END;
		(*! try to cast to type: ref int32*)
	FUNCTION pARefcastRefval4583_ARR4583:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType4584_ART4584;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc4590_AIL4590;
		 pARefcastRefval4583_ARR4583:=myrec;
		END;
	FUNCTION pATimesDyadic4592_ATD4592:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcptimes;
		 pATimesDyadic4592_ATD4592:=myrec;
		END;
	FUNCTION pASigned4598_AS4598:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned4598_AS4598:=myrec;
		END;
	FUNCTION pASignedTformat4597_AST4597:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned4598_AS4598;
		 pASignedTformat4597_AST4597:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4596_ATP4596:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype4596_ATP4596:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4595_APT4595:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType4595_APT4595:=myrec;
		END;
		(*! Match a *)
	FUNCTION pAIdLoc4602_AIL4602:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4602_AIL4602:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4601_AR4601:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4602_AIL4602;
		 pARefval4601_AR4601:=myrec;
		END;
	FUNCTION pADerefRhs4600_ADR4600:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4601_AR4601;
		 pADerefRhs4600_ADR4600:=myrec;
		END;
	FUNCTION pARhsValue4599_ARV4599:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4600_ADR4600;
		 pARhsValue4599_ARV4599:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs4594_ACR4594:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType4595_APT4595;
		myrec^.arg2:=pARhsValue4599_ARV4599;
		 pACastRhs4594_ACR4594:=myrec;
		END;
	FUNCTION pARhsValue4593_ARV4593:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4594_ACR4594;
		 pARhsValue4593_ARV4593:=myrec;
		END;
		(*! Match d *)
	FUNCTION pAIdLoc4606_AIL4606:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4606_AIL4606:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4605_AR4605:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4606_AIL4606;
		 pARefval4605_AR4605:=myrec;
		END;
	FUNCTION pADerefRhs4604_ADR4604:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4605_AR4605;
		 pADerefRhs4604_ADR4604:=myrec;
		END;
	FUNCTION pARhsValue4603_ARV4603:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4604_ADR4604;
		 pARhsValue4603_ARV4603:=myrec;
		END;
	FUNCTION pADyadicValue4591_ADV4591:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4593_ARV4593;
		myrec^.arg2:=pARhsValue4603_ARV4603;
		myrec^.fn:=pATimesDyadic4592_ATD4592;
		 pADyadicValue4591_ADV4591:=myrec;
		END;
	FUNCTION pAAssign4582_AA4582:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue4591_ADV4591;
		myrec^.dest:=pARefcastRefval4583_ARR4583;
		 pAAssign4582_AA4582:=myrec;
		END;
	FUNCTION pAAssignMeaning4581_AAM4581:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4582_AA4582;
		 pAAssignMeaning4581_AAM4581:=myrec;
		END;
	FUNCTION pAAssemblypattern4608_AA4608:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'imul edx' );
		pAAssemblypattern4608_AA4608:=list;
		END;
	FUNCTION pAAssemblesto4607_AA4607:pprintlist;
	begin
		pAAssemblesto4607_AA4607:=pAAssemblypattern4608_AA4608;
		END;
	FUNCTION pASideeffects4610_AS4610:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4610_AS4610:=nil;
		 pASideeffects4610_AS4610:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4611_AUP4611:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4611_AUP4611:=nil;
		 pAUnconditionalPrecond4611_AUP4611:=myrec;
		END;
	FUNCTION fastIMUL_IMUL:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patacc_;
		params^[1]:=patdacc_;
		paramcount:=3;
		meaning:=pAAssignMeaning4581_AAM4581;
		matchedAssembler:=pAAssemblesto4607_AA4607;
		END;
		fastIMUL_IMUL:=myrec;
	END;
	FUNCTION pATypeid4614_AT4614:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ qacc  ilcg.pattern@42bb13}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4614_AT4614:=myrec;
		END;
	FUNCTION pATypeid4616_AT4616:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ acc  ilcg.pattern@fde0d5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4616_AT4616:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc4620_AIL4620:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4620_AIL4620:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4619_AR4619:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4620_AIL4620;
		 pARefval4619_AR4619:=myrec;
		END;
	FUNCTION pAExtendMonadic4622_AEM4622:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpEXTEND;
		 pAExtendMonadic4622_AEM4622:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc4626_AIL4626:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4626_AIL4626:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4625_AR4625:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4626_AIL4626;
		 pARefval4625_AR4625:=myrec;
		END;
	FUNCTION pADerefRhs4624_ADR4624:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4625_AR4625;
		 pADerefRhs4624_ADR4624:=myrec;
		END;
	FUNCTION pARhsValue4623_ARV4623:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4624_ADR4624;
		 pARhsValue4623_ARV4623:=myrec;
		END;
	FUNCTION pAMonadicValue4621_AMV4621:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue4623_ARV4623;
		myrec^.fn:=pAExtendMonadic4622_AEM4622;
		 pAMonadicValue4621_AMV4621:=myrec;
		END;
	FUNCTION pAAssign4618_AA4618:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pAMonadicValue4621_AMV4621;
		myrec^.dest:=pARefval4619_AR4619;
		 pAAssign4618_AA4618:=myrec;
		END;
	FUNCTION pAAssignMeaning4617_AAM4617:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4618_AA4618;
		 pAAssignMeaning4617_AAM4617:=myrec;
		END;
	FUNCTION pAAssemblypattern4628_AA4628:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cdq' );
		pAAssemblypattern4628_AA4628:=list;
		END;
	FUNCTION pAAssemblesto4627_AA4627:pprintlist;
	begin
		pAAssemblesto4627_AA4627:=pAAssemblypattern4628_AA4628;
		END;
	FUNCTION pASideeffects4630_AS4630:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4630_AS4630:=nil;
		 pASideeffects4630_AS4630:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4631_AUP4631:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4631_AUP4631:=nil;
		 pAUnconditionalPrecond4631_AUP4631:=myrec;
		END;
	FUNCTION CDQ_CDQ:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patacc_;
		params^[0]:=patqacc_;
		paramcount:=3;
		meaning:=pAAssignMeaning4617_AAM4617;
		matchedAssembler:=pAAssemblesto4627_AA4627;
		END;
		CDQ_CDQ:=myrec;
	END;
	FUNCTION pATypeid4634_AT4634:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ acc  ilcg.pattern@fde0d5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4634_AT4634:=myrec;
		END;
	FUNCTION pATypeid4636_AT4636:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ qacc  ilcg.pattern@42bb13}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4636_AT4636:=myrec;
		END;
	FUNCTION pATypeid4638_AT4638:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ indexreg  ilcg.pattern@1dc6a9d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4638_AT4638:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc4642_AIL4642:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4642_AIL4642:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4641_AR4641:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4642_AIL4642;
		 pARefval4641_AR4641:=myrec;
		END;
	FUNCTION pADivideDyadic4644_ADD4644:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpdivide;
		 pADivideDyadic4644_ADD4644:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc4648_AIL4648:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4648_AIL4648:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4647_AR4647:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4648_AIL4648;
		 pARefval4647_AR4647:=myrec;
		END;
	FUNCTION pADerefRhs4646_ADR4646:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4647_AR4647;
		 pADerefRhs4646_ADR4646:=myrec;
		END;
	FUNCTION pARhsValue4645_ARV4645:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4646_ADR4646;
		 pARhsValue4645_ARV4645:=myrec;
		END;
		(*! Match r3 *)
	FUNCTION pAIdLoc4652_AIL4652:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc4652_AIL4652:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4651_AR4651:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4652_AIL4652;
		 pARefval4651_AR4651:=myrec;
		END;
	FUNCTION pADerefRhs4650_ADR4650:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4651_AR4651;
		 pADerefRhs4650_ADR4650:=myrec;
		END;
	FUNCTION pARhsValue4649_ARV4649:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4650_ADR4650;
		 pARhsValue4649_ARV4649:=myrec;
		END;
	FUNCTION pADyadicValue4643_ADV4643:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4645_ARV4645;
		myrec^.arg2:=pARhsValue4649_ARV4649;
		myrec^.fn:=pADivideDyadic4644_ADD4644;
		 pADyadicValue4643_ADV4643:=myrec;
		END;
	FUNCTION pAAssign4640_AA4640:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue4643_ADV4643;
		myrec^.dest:=pARefval4641_AR4641;
		 pAAssign4640_AA4640:=myrec;
		END;
	FUNCTION pAAssignMeaning4639_AAM4639:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4640_AA4640;
		 pAAssignMeaning4639_AAM4639:=myrec;
		END;
	FUNCTION pAAssemblypattern4654_AA4654:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'idiv ' );
		pappendp(list,2);
		pAAssemblypattern4654_AA4654:=list;
		END;
	FUNCTION pAAssemblesto4653_AA4653:pprintlist;
	begin
		pAAssemblesto4653_AA4653:=pAAssemblypattern4654_AA4654;
		END;
	FUNCTION pASideeffects4657_AS4657:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4657_AS4657:=nil;
		 pASideeffects4657_AS4657:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4658_AUP4658:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4658_AUP4658:=nil;
		 pAUnconditionalPrecond4658_AUP4658:=myrec;
		END;
	FUNCTION IDIV_IDIV:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patindexreg_;
		params^[1]:=patqacc_;
		params^[0]:=patacc_;
		paramcount:=4;
		meaning:=pAAssignMeaning4639_AAM4639;
		matchedAssembler:=pAAssemblesto4653_AA4653;
		END;
		IDIV_IDIV:=myrec;
	END;
	FUNCTION pATypeid4661_AT4661:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ indexreg  ilcg.pattern@1dc6a9d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4661_AT4661:=myrec;
		END;
	FUNCTION pATypeid4663_AT4663:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ qacc  ilcg.pattern@42bb13}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4663_AT4663:=myrec;
		END;
	FUNCTION pATypeid4665_AT4665:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ indexreg  ilcg.pattern@1dc6a9d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4665_AT4665:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc4669_AIL4669:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4669_AIL4669:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4668_AR4668:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4669_AIL4669;
		 pARefval4668_AR4668:=myrec;
		END;
	FUNCTION pADivideDyadic4671_ADD4671:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpdivide;
		 pADivideDyadic4671_ADD4671:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc4675_AIL4675:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4675_AIL4675:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4674_AR4674:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4675_AIL4675;
		 pARefval4674_AR4674:=myrec;
		END;
	FUNCTION pADerefRhs4673_ADR4673:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4674_AR4674;
		 pADerefRhs4673_ADR4673:=myrec;
		END;
	FUNCTION pARhsValue4672_ARV4672:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4673_ADR4673;
		 pARhsValue4672_ARV4672:=myrec;
		END;
		(*! Match r3 *)
	FUNCTION pAIdLoc4679_AIL4679:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc4679_AIL4679:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4678_AR4678:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4679_AIL4679;
		 pARefval4678_AR4678:=myrec;
		END;
	FUNCTION pADerefRhs4677_ADR4677:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4678_AR4678;
		 pADerefRhs4677_ADR4677:=myrec;
		END;
	FUNCTION pARhsValue4676_ARV4676:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4677_ADR4677;
		 pARhsValue4676_ARV4676:=myrec;
		END;
	FUNCTION pADyadicValue4670_ADV4670:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4672_ARV4672;
		myrec^.arg2:=pARhsValue4676_ARV4676;
		myrec^.fn:=pADivideDyadic4671_ADD4671;
		 pADyadicValue4670_ADV4670:=myrec;
		END;
	FUNCTION pAAssign4667_AA4667:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue4670_ADV4670;
		myrec^.dest:=pARefval4668_AR4668;
		 pAAssign4667_AA4667:=myrec;
		END;
	FUNCTION pAAssignMeaning4666_AAM4666:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4667_AA4667;
		 pAAssignMeaning4666_AAM4666:=myrec;
		END;
	FUNCTION pAAssemblypattern4681_AA4681:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'idiv ' );
		pappendp(list,2);
		pappends(list,'\n mov ' );
		pappendp(list,0);
		pappends(list,',eax' );
		pAAssemblypattern4681_AA4681:=list;
		END;
	FUNCTION pAAssemblesto4680_AA4680:pprintlist;
	begin
		pAAssemblesto4680_AA4680:=pAAssemblypattern4681_AA4681;
		END;
	FUNCTION pASideeffects4687_AS4687:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4687_AS4687:=nil;
		 pASideeffects4687_AS4687:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4688_AUP4688:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4688_AUP4688:=nil;
		 pAUnconditionalPrecond4688_AUP4688:=myrec;
		END;
	FUNCTION RIDIV_RIDIV:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patindexreg_;
		params^[1]:=patqacc_;
		params^[0]:=patindexreg_;
		paramcount:=4;
		meaning:=pAAssignMeaning4666_AAM4666;
		matchedAssembler:=pAAssemblesto4680_AA4680;
		END;
		RIDIV_RIDIV:=myrec;
	END;
	FUNCTION pATypeid4691_AT4691:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ acc  ilcg.pattern@fde0d5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4691_AT4691:=myrec;
		END;
	FUNCTION pATypeid4693_AT4693:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ modreg  ilcg.pattern@a6fed5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4693_AT4693:=myrec;
		END;
	FUNCTION pAPushDyadic4696_APD4696:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic4696_APD4696:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc4698_AIL4698:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc4698_AIL4698:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue4697_ALV4697:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4698_AIL4698;
		 pALocValue4697_ALV4697:=myrec;
		END;
	FUNCTION pADivideDyadic4700_ADD4700:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpdivide;
		 pADivideDyadic4700_ADD4700:=myrec;
		END;
	FUNCTION pASigned4706_AS4706:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned4706_AS4706:=myrec;
		END;
	FUNCTION pASignedTformat4705_AST4705:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned4706_AS4706;
		 pASignedTformat4705_AST4705:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4704_ATP4704:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype4704_ATP4704:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4703_APT4703:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType4703_APT4703:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc4710_AIL4710:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4710_AIL4710:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4709_AR4709:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4710_AIL4710;
		 pARefval4709_AR4709:=myrec;
		END;
	FUNCTION pADerefRhs4708_ADR4708:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4709_AR4709;
		 pADerefRhs4708_ADR4708:=myrec;
		END;
	FUNCTION pARhsValue4707_ARV4707:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4708_ADR4708;
		 pARhsValue4707_ARV4707:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs4702_ACR4702:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType4703_APT4703;
		myrec^.arg2:=pARhsValue4707_ARV4707;
		 pACastRhs4702_ACR4702:=myrec;
		END;
	FUNCTION pARhsValue4701_ARV4701:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4702_ACR4702;
		 pARhsValue4701_ARV4701:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc4714_AIL4714:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4714_AIL4714:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4713_AR4713:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4714_AIL4714;
		 pARefval4713_AR4713:=myrec;
		END;
	FUNCTION pADerefRhs4712_ADR4712:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4713_AR4713;
		 pADerefRhs4712_ADR4712:=myrec;
		END;
	FUNCTION pARhsValue4711_ARV4711:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4712_ADR4712;
		 pARhsValue4711_ARV4711:=myrec;
		END;
	FUNCTION pADyadicValue4699_ADV4699:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4701_ARV4701;
		myrec^.arg2:=pARhsValue4711_ARV4711;
		myrec^.fn:=pADivideDyadic4700_ADD4700;
		 pADyadicValue4699_ADV4699:=myrec;
		END;
	FUNCTION pADyadicValue4695_ADV4695:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue4697_ALV4697;
		myrec^.arg2:=pADyadicValue4699_ADV4699;
		myrec^.fn:=pAPushDyadic4696_APD4696;
		 pADyadicValue4695_ADV4695:=myrec;
		END;
	FUNCTION pAValueMeaning4694_AVM4694:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue4695_ADV4695;
		 pAValueMeaning4694_AVM4694:=myrec;
		END;
	FUNCTION pAAssemblypattern4716_AA4716:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'push edx\n cdq\n idiv   ' );
		pappendp(list,1);
		pappends(list,'\n xchg eax,DWORD[esp]\n xchg eax,edx' );
		pAAssemblypattern4716_AA4716:=list;
		END;
	FUNCTION pAAssemblesto4715_AA4715:pprintlist;
	begin
		pAAssemblesto4715_AA4715:=pAAssemblypattern4716_AA4716;
		END;
	FUNCTION pASideeffects4720_AS4720:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4720_AS4720:=nil;
		 pASideeffects4720_AS4720:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4721_AUP4721:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4721_AUP4721:=nil;
		 pAUnconditionalPrecond4721_AUP4721:=myrec;
		END;
	FUNCTION SIDIV_SIDIV:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patmodreg_;
		params^[0]:=patacc_;
		paramcount:=3;
		meaning:=pAValueMeaning4694_AVM4694;
		matchedAssembler:=pAAssemblesto4715_AA4715;
		END;
		SIDIV_SIDIV:=myrec;
	END;
	FUNCTION pATypeid4724_AT4724:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ acc  ilcg.pattern@fde0d5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4724_AT4724:=myrec;
		END;
	FUNCTION pATypeid4726_AT4726:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ modreg  ilcg.pattern@a6fed5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4726_AT4726:=myrec;
		END;
	FUNCTION pAPushDyadic4729_APD4729:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic4729_APD4729:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc4731_AIL4731:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc4731_AIL4731:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue4730_ALV4730:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4731_AIL4731;
		 pALocValue4730_ALV4730:=myrec;
		END;
	FUNCTION pADivideDyadic4733_ADD4733:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpdivide;
		 pADivideDyadic4733_ADD4733:=myrec;
		END;
	FUNCTION pAUnsigned4739_AU4739:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32;
		 pAUnsigned4739_AU4739:=myrec;
		END;
	FUNCTION pAUnsignedTformat4738_AUT4738:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUnsigned4739_AU4739;
		 pAUnsignedTformat4738_AUT4738:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4737_ATP4737:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pATformatPredeclaredtype4737_ATP4737:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4736_APT4736:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pAPredeclaredtypeType4736_APT4736:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc4743_AIL4743:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4743_AIL4743:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4742_AR4742:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4743_AIL4743;
		 pARefval4742_AR4742:=myrec;
		END;
	FUNCTION pADerefRhs4741_ADR4741:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4742_AR4742;
		 pADerefRhs4741_ADR4741:=myrec;
		END;
	FUNCTION pARhsValue4740_ARV4740:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4741_ADR4741;
		 pARhsValue4740_ARV4740:=myrec;
		END;
		(*! try to cast to type: uint32*)
	FUNCTION pACastRhs4735_ACR4735:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType4736_APT4736;
		myrec^.arg2:=pARhsValue4740_ARV4740;
		 pACastRhs4735_ACR4735:=myrec;
		END;
	FUNCTION pARhsValue4734_ARV4734:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4735_ACR4735;
		 pARhsValue4734_ARV4734:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc4747_AIL4747:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4747_AIL4747:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4746_AR4746:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4747_AIL4747;
		 pARefval4746_AR4746:=myrec;
		END;
	FUNCTION pADerefRhs4745_ADR4745:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4746_AR4746;
		 pADerefRhs4745_ADR4745:=myrec;
		END;
	FUNCTION pARhsValue4744_ARV4744:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4745_ADR4745;
		 pARhsValue4744_ARV4744:=myrec;
		END;
	FUNCTION pADyadicValue4732_ADV4732:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4734_ARV4734;
		myrec^.arg2:=pARhsValue4744_ARV4744;
		myrec^.fn:=pADivideDyadic4733_ADD4733;
		 pADyadicValue4732_ADV4732:=myrec;
		END;
	FUNCTION pADyadicValue4728_ADV4728:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue4730_ALV4730;
		myrec^.arg2:=pADyadicValue4732_ADV4732;
		myrec^.fn:=pAPushDyadic4729_APD4729;
		 pADyadicValue4728_ADV4728:=myrec;
		END;
	FUNCTION pAValueMeaning4727_AVM4727:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue4728_ADV4728;
		 pAValueMeaning4727_AVM4727:=myrec;
		END;
	FUNCTION pAAssemblypattern4749_AA4749:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'push edx\n xor edx,edx\n div   ' );
		pappendp(list,1);
		pappends(list,'\n xchg eax,DWORD[esp]\n xchg eax,edx' );
		pAAssemblypattern4749_AA4749:=list;
		END;
	FUNCTION pAAssemblesto4748_AA4748:pprintlist;
	begin
		pAAssemblesto4748_AA4748:=pAAssemblypattern4749_AA4749;
		END;
	FUNCTION pASideeffects4753_AS4753:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4753_AS4753:=nil;
		 pASideeffects4753_AS4753:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4754_AUP4754:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4754_AUP4754:=nil;
		 pAUnconditionalPrecond4754_AUP4754:=myrec;
		END;
	FUNCTION UDIV_UDIV:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patmodreg_;
		params^[0]:=patacc_;
		paramcount:=3;
		meaning:=pAValueMeaning4727_AVM4727;
		matchedAssembler:=pAAssemblesto4748_AA4748;
		END;
		UDIV_UDIV:=myrec;
	END;
	FUNCTION pATypeid4757_AT4757:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ pushreg  ilcg.pattern@139d369}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4757_AT4757:=myrec;
		END;
	FUNCTION pATypeid4759_AT4759:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ addrmode  ilcg.pattern@17aaeec}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4759_AT4759:=myrec;
		END;
	FUNCTION pATypeid4761_AT4761:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ signed  ilcg.pattern@15e0163}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4761_AT4761:=myrec;
		END;
	FUNCTION pASigned4770_AS4770:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned4770_AS4770:=myrec;
		END;
	FUNCTION pASignedTformat4769_AST4769:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned4770_AS4770;
		 pASignedTformat4769_AST4769:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4768_ATP4768:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype4768_ATP4768:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4767_APT4767:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType4767_APT4767:=myrec;
		END;
	FUNCTION pAReference4766_AR4766:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType4767_APT4767;
		 pAReference4766_AR4766:=myrec;
		END;
	FUNCTION pAReftypeType4765_ART4765:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference4766_AR4766;
		 pAReftypeType4765_ART4765:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc4771_AIL4771:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4771_AIL4771:=myrec;
		END;
		(*! try to cast to type: ref int32*)
	FUNCTION pARefcastRefval4764_ARR4764:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType4765_ART4765;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc4771_AIL4771;
		 pARefcastRefval4764_ARR4764:=myrec;
		END;
	FUNCTION pATimesDyadic4773_ATD4773:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcptimes;
		 pATimesDyadic4773_ATD4773:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc4777_AIL4777:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4777_AIL4777:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4776_AR4776:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4777_AIL4777;
		 pARefval4776_AR4776:=myrec;
		END;
	FUNCTION pADerefRhs4775_ADR4775:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4776_AR4776;
		 pADerefRhs4775_ADR4775:=myrec;
		END;
	FUNCTION pARhsValue4774_ARV4774:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4775_ADR4775;
		 pARhsValue4774_ARV4774:=myrec;
		END;
	FUNCTION pAConstRhs4779_ACR4779:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(2);;
		 pAConstRhs4779_ACR4779:=myrec;
		END;
	FUNCTION pARhsValue4778_ARV4778:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs4779_ACR4779;
		 pARhsValue4778_ARV4778:=myrec;
		END;
	FUNCTION pADyadicValue4772_ADV4772:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4774_ARV4774;
		myrec^.arg2:=pARhsValue4778_ARV4778;
		myrec^.fn:=pATimesDyadic4773_ATD4773;
		 pADyadicValue4772_ADV4772:=myrec;
		END;
	FUNCTION pAAssign4763_AA4763:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue4772_ADV4772;
		myrec^.dest:=pARefcastRefval4764_ARR4764;
		 pAAssign4763_AA4763:=myrec;
		END;
	FUNCTION pAAssignMeaning4762_AAM4762:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4763_AA4763;
		 pAAssignMeaning4762_AAM4762:=myrec;
		END;
	FUNCTION pAAssemblypattern4781_AA4781:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'imul ' );
		pappendp(list,0);
		pappends(list,',DWORD ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,2);
		pAAssemblypattern4781_AA4781:=list;
		END;
	FUNCTION pAAssemblesto4780_AA4780:pprintlist;
	begin
		pAAssemblesto4780_AA4780:=pAAssemblypattern4781_AA4781;
		END;
	FUNCTION pASideeffects4788_AS4788:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4788_AS4788:=nil;
		 pASideeffects4788_AS4788:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4789_AUP4789:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4789_AUP4789:=nil;
		 pAUnconditionalPrecond4789_AUP4789:=myrec;
		END;
	FUNCTION IMULLIT_IMULLIT:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patpushreg_;
		params^[2]:=patsigned_;
		params^[1]:=pataddrmode_;
		paramcount:=4;
		meaning:=pAAssignMeaning4762_AAM4762;
		matchedAssembler:=pAAssemblesto4780_AA4780;
		END;
		IMULLIT_IMULLIT:=myrec;
	END;
	FUNCTION pATypeid4792_AT4792:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ acc  ilcg.pattern@fde0d5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4792_AT4792:=myrec;
		END;
	FUNCTION pATypeid4794_AT4794:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ modreg  ilcg.pattern@a6fed5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4794_AT4794:=myrec;
		END;
	FUNCTION pAPushDyadic4797_APD4797:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic4797_APD4797:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc4799_AIL4799:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc4799_AIL4799:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue4798_ALV4798:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4799_AIL4799;
		 pALocValue4798_ALV4798:=myrec;
		END;
	FUNCTION pARemainderDyadic4801_ARD4801:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpremainder;
		 pARemainderDyadic4801_ARD4801:=myrec;
		END;
	FUNCTION pASigned4807_AS4807:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned4807_AS4807:=myrec;
		END;
	FUNCTION pASignedTformat4806_AST4806:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned4807_AS4807;
		 pASignedTformat4806_AST4806:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4805_ATP4805:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype4805_ATP4805:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4804_APT4804:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType4804_APT4804:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc4811_AIL4811:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4811_AIL4811:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4810_AR4810:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4811_AIL4811;
		 pARefval4810_AR4810:=myrec;
		END;
	FUNCTION pADerefRhs4809_ADR4809:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4810_AR4810;
		 pADerefRhs4809_ADR4809:=myrec;
		END;
	FUNCTION pARhsValue4808_ARV4808:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4809_ADR4809;
		 pARhsValue4808_ARV4808:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs4803_ACR4803:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType4804_APT4804;
		myrec^.arg2:=pARhsValue4808_ARV4808;
		 pACastRhs4803_ACR4803:=myrec;
		END;
	FUNCTION pARhsValue4802_ARV4802:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4803_ACR4803;
		 pARhsValue4802_ARV4802:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc4815_AIL4815:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4815_AIL4815:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4814_AR4814:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4815_AIL4815;
		 pARefval4814_AR4814:=myrec;
		END;
	FUNCTION pADerefRhs4813_ADR4813:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4814_AR4814;
		 pADerefRhs4813_ADR4813:=myrec;
		END;
	FUNCTION pARhsValue4812_ARV4812:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4813_ADR4813;
		 pARhsValue4812_ARV4812:=myrec;
		END;
	FUNCTION pADyadicValue4800_ADV4800:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4802_ARV4802;
		myrec^.arg2:=pARhsValue4812_ARV4812;
		myrec^.fn:=pARemainderDyadic4801_ARD4801;
		 pADyadicValue4800_ADV4800:=myrec;
		END;
	FUNCTION pADyadicValue4796_ADV4796:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue4798_ALV4798;
		myrec^.arg2:=pADyadicValue4800_ADV4800;
		myrec^.fn:=pAPushDyadic4797_APD4797;
		 pADyadicValue4796_ADV4796:=myrec;
		END;
	FUNCTION pAValueMeaning4795_AVM4795:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue4796_ADV4796;
		 pAValueMeaning4795_AVM4795:=myrec;
		END;
	FUNCTION pAAssemblypattern4817_AA4817:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'push edx\n cdq\n idiv   ' );
		pappendp(list,1);
		pappends(list,'\n xchg edx,DWORD[esp]' );
		pAAssemblypattern4817_AA4817:=list;
		END;
	FUNCTION pAAssemblesto4816_AA4816:pprintlist;
	begin
		pAAssemblesto4816_AA4816:=pAAssemblypattern4817_AA4817;
		END;
	FUNCTION pASideeffects4821_AS4821:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4821_AS4821:=nil;
		 pASideeffects4821_AS4821:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4822_AUP4822:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4822_AUP4822:=nil;
		 pAUnconditionalPrecond4822_AUP4822:=myrec;
		END;
	FUNCTION IMOD_IMOD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patmodreg_;
		params^[0]:=patacc_;
		paramcount:=3;
		meaning:=pAValueMeaning4795_AVM4795;
		matchedAssembler:=pAAssemblesto4816_AA4816;
		END;
		IMOD_IMOD:=myrec;
	END;
	FUNCTION pATypeid4825_AT4825:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ acc  ilcg.pattern@fde0d5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4825_AT4825:=myrec;
		END;
	FUNCTION pATypeid4827_AT4827:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ modreg  ilcg.pattern@a6fed5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4827_AT4827:=myrec;
		END;
	FUNCTION pAPushDyadic4830_APD4830:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic4830_APD4830:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc4832_AIL4832:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc4832_AIL4832:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue4831_ALV4831:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4832_AIL4832;
		 pALocValue4831_ALV4831:=myrec;
		END;
	FUNCTION pARemainderDyadic4834_ARD4834:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpremainder;
		 pARemainderDyadic4834_ARD4834:=myrec;
		END;
	FUNCTION pAUnsigned4840_AU4840:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32;
		 pAUnsigned4840_AU4840:=myrec;
		END;
	FUNCTION pAUnsignedTformat4839_AUT4839:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUnsigned4840_AU4840;
		 pAUnsignedTformat4839_AUT4839:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4838_ATP4838:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pATformatPredeclaredtype4838_ATP4838:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4837_APT4837:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pAPredeclaredtypeType4837_APT4837:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc4844_AIL4844:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4844_AIL4844:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4843_AR4843:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4844_AIL4844;
		 pARefval4843_AR4843:=myrec;
		END;
	FUNCTION pADerefRhs4842_ADR4842:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4843_AR4843;
		 pADerefRhs4842_ADR4842:=myrec;
		END;
	FUNCTION pARhsValue4841_ARV4841:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4842_ADR4842;
		 pARhsValue4841_ARV4841:=myrec;
		END;
		(*! try to cast to type: uint32*)
	FUNCTION pACastRhs4836_ACR4836:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType4837_APT4837;
		myrec^.arg2:=pARhsValue4841_ARV4841;
		 pACastRhs4836_ACR4836:=myrec;
		END;
	FUNCTION pARhsValue4835_ARV4835:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4836_ACR4836;
		 pARhsValue4835_ARV4835:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc4848_AIL4848:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4848_AIL4848:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4847_AR4847:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4848_AIL4848;
		 pARefval4847_AR4847:=myrec;
		END;
	FUNCTION pADerefRhs4846_ADR4846:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4847_AR4847;
		 pADerefRhs4846_ADR4846:=myrec;
		END;
	FUNCTION pARhsValue4845_ARV4845:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4846_ADR4846;
		 pARhsValue4845_ARV4845:=myrec;
		END;
	FUNCTION pADyadicValue4833_ADV4833:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4835_ARV4835;
		myrec^.arg2:=pARhsValue4845_ARV4845;
		myrec^.fn:=pARemainderDyadic4834_ARD4834;
		 pADyadicValue4833_ADV4833:=myrec;
		END;
	FUNCTION pADyadicValue4829_ADV4829:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue4831_ALV4831;
		myrec^.arg2:=pADyadicValue4833_ADV4833;
		myrec^.fn:=pAPushDyadic4830_APD4830;
		 pADyadicValue4829_ADV4829:=myrec;
		END;
	FUNCTION pAValueMeaning4828_AVM4828:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue4829_ADV4829;
		 pAValueMeaning4828_AVM4828:=myrec;
		END;
	FUNCTION pAAssemblypattern4850_AA4850:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'push edx\n xor edx,edx\n div   ' );
		pappendp(list,1);
		pappends(list,'\n xchg edx,DWORD[esp]' );
		pAAssemblypattern4850_AA4850:=list;
		END;
	FUNCTION pAAssemblesto4849_AA4849:pprintlist;
	begin
		pAAssemblesto4849_AA4849:=pAAssemblypattern4850_AA4850;
		END;
	FUNCTION pASideeffects4854_AS4854:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4854_AS4854:=nil;
		 pASideeffects4854_AS4854:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4855_AUP4855:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4855_AUP4855:=nil;
		 pAUnconditionalPrecond4855_AUP4855:=myrec;
		END;
	FUNCTION UMOD_UMOD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patmodreg_;
		params^[0]:=patacc_;
		paramcount:=3;
		meaning:=pAValueMeaning4828_AVM4828;
		matchedAssembler:=pAAssemblesto4849_AA4849;
		END;
		UMOD_UMOD:=myrec;
	END;
	FUNCTION pATypeid4858_AT4858:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baccreg  ilcg.pattern@24bef5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4858_AT4858:=myrec;
		END;
	FUNCTION pATypeid4860_AT4860:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bnonacreg  ilcg.pattern@15d63da}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4860_AT4860:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc4864_AIL4864:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4864_AIL4864:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4863_AR4863:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4864_AIL4864;
		 pARefval4863_AR4863:=myrec;
		END;
	FUNCTION pARemainderDyadic4866_ARD4866:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpremainder;
		 pARemainderDyadic4866_ARD4866:=myrec;
		END;
	FUNCTION pAInt8Signed4872_AI8S4872:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed4872_AI8S4872:=myrec;
		END;
	FUNCTION pASignedTformat4871_AST4871:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed4872_AI8S4872;
		 pASignedTformat4871_AST4871:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4870_ATP4870:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype4870_ATP4870:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4869_APT4869:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType4869_APT4869:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc4876_AIL4876:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4876_AIL4876:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4875_AR4875:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4876_AIL4876;
		 pARefval4875_AR4875:=myrec;
		END;
	FUNCTION pADerefRhs4874_ADR4874:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4875_AR4875;
		 pADerefRhs4874_ADR4874:=myrec;
		END;
	FUNCTION pARhsValue4873_ARV4873:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4874_ADR4874;
		 pARhsValue4873_ARV4873:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs4868_ACR4868:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType4869_APT4869;
		myrec^.arg2:=pARhsValue4873_ARV4873;
		 pACastRhs4868_ACR4868:=myrec;
		END;
	FUNCTION pARhsValue4867_ARV4867:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4868_ACR4868;
		 pARhsValue4867_ARV4867:=myrec;
		END;
	FUNCTION pAInt8Signed4882_AI8S4882:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed4882_AI8S4882:=myrec;
		END;
	FUNCTION pASignedTformat4881_AST4881:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed4882_AI8S4882;
		 pASignedTformat4881_AST4881:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4880_ATP4880:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype4880_ATP4880:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4879_APT4879:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType4879_APT4879:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc4886_AIL4886:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4886_AIL4886:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4885_AR4885:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4886_AIL4886;
		 pARefval4885_AR4885:=myrec;
		END;
	FUNCTION pADerefRhs4884_ADR4884:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4885_AR4885;
		 pADerefRhs4884_ADR4884:=myrec;
		END;
	FUNCTION pARhsValue4883_ARV4883:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4884_ADR4884;
		 pARhsValue4883_ARV4883:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs4878_ACR4878:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType4879_APT4879;
		myrec^.arg2:=pARhsValue4883_ARV4883;
		 pACastRhs4878_ACR4878:=myrec;
		END;
	FUNCTION pARhsValue4877_ARV4877:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4878_ACR4878;
		 pARhsValue4877_ARV4877:=myrec;
		END;
	FUNCTION pADyadicValue4865_ADV4865:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4867_ARV4867;
		myrec^.arg2:=pARhsValue4877_ARV4877;
		myrec^.fn:=pARemainderDyadic4866_ARD4866;
		 pADyadicValue4865_ADV4865:=myrec;
		END;
	FUNCTION pAAssign4862_AA4862:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue4865_ADV4865;
		myrec^.dest:=pARefval4863_AR4863;
		 pAAssign4862_AA4862:=myrec;
		END;
	FUNCTION pAAssignMeaning4861_AAM4861:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4862_AA4862;
		 pAAssignMeaning4861_AAM4861:=myrec;
		END;
	FUNCTION pAAssemblypattern4888_AA4888:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,' movsx ax,' );
		pappendp(list,0);
		pappends(list,'\n idiv ' );
		pappendp(list,1);
		pappends(list,'\n mov ' );
		pappendp(list,1);
		pappends(list,',ah' );
		pAAssemblypattern4888_AA4888:=list;
		END;
	FUNCTION pAAssemblesto4887_AA4887:pprintlist;
	begin
		pAAssemblesto4887_AA4887:=pAAssemblypattern4888_AA4888;
		END;
	FUNCTION pASideeffects4896_AS4896:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4896_AS4896:=nil;
		 pASideeffects4896_AS4896:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4897_AUP4897:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4897_AUP4897:=nil;
		 pAUnconditionalPrecond4897_AUP4897:=myrec;
		END;
	FUNCTION BIMOD_BIMOD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbnonacreg_;
		params^[0]:=patbaccreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning4861_AAM4861;
		matchedAssembler:=pAAssemblesto4887_AA4887;
		END;
		BIMOD_BIMOD:=myrec;
	END;
	FUNCTION pATypeid4900_AT4900:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4900_AT4900:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc4904_AIL4904:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4904_AIL4904:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4903_AR4903:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4904_AIL4904;
		 pARefval4903_AR4903:=myrec;
		END;
	FUNCTION pARemainderDyadic4906_ARD4906:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpremainder;
		 pARemainderDyadic4906_ARD4906:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc4910_AIL4910:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4910_AIL4910:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4909_AR4909:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4910_AIL4910;
		 pARefval4909_AR4909:=myrec;
		END;
	FUNCTION pADerefRhs4908_ADR4908:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4909_AR4909;
		 pADerefRhs4908_ADR4908:=myrec;
		END;
	FUNCTION pARhsValue4907_ARV4907:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4908_ADR4908;
		 pARhsValue4907_ARV4907:=myrec;
		END;
	FUNCTION pAOptionalsign4914_AO4914:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign4914_AO4914:=nil;
		 pAOptionalsign4914_AO4914:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber4913_AIN4913:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber4913_AIN4913:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs4912_ANR4912:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber4913_AIN4913;
		 pANumberRhs4912_ANR4912:=myrec;
		END;
	FUNCTION pARhsValue4911_ARV4911:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs4912_ANR4912;
		 pARhsValue4911_ARV4911:=myrec;
		END;
	FUNCTION pADyadicValue4905_ADV4905:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4907_ARV4907;
		myrec^.arg2:=pARhsValue4911_ARV4911;
		myrec^.fn:=pARemainderDyadic4906_ARD4906;
		 pADyadicValue4905_ADV4905:=myrec;
		END;
	FUNCTION pAAssign4902_AA4902:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue4905_ADV4905;
		myrec^.dest:=pARefval4903_AR4903;
		 pAAssign4902_AA4902:=myrec;
		END;
	FUNCTION pAAssignMeaning4901_AAM4901:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4902_AA4902;
		 pAAssignMeaning4901_AAM4901:=myrec;
		END;
	FUNCTION pAAssemblypattern4916_AA4916:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'and ' );
		pappendp(list,0);
		pappends(list,',1' );
		pAAssemblypattern4916_AA4916:=list;
		END;
	FUNCTION pAAssemblesto4915_AA4915:pprintlist;
	begin
		pAAssemblesto4915_AA4915:=pAAssemblypattern4916_AA4916;
		END;
	FUNCTION pASideeffects4920_AS4920:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4920_AS4920:=nil;
		 pASideeffects4920_AS4920:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4921_AUP4921:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4921_AUP4921:=nil;
		 pAUnconditionalPrecond4921_AUP4921:=myrec;
		END;
	FUNCTION MOD2_MOD2:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		paramcount:=2;
		meaning:=pAAssignMeaning4901_AAM4901;
		matchedAssembler:=pAAssemblesto4915_AA4915;
		END;
		MOD2_MOD2:=myrec;
	END;
	FUNCTION pATypeid4924_AT4924:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4924_AT4924:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc4928_AIL4928:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4928_AIL4928:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4927_AR4927:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4928_AIL4928;
		 pARefval4927_AR4927:=myrec;
		END;
	FUNCTION pARemainderDyadic4930_ARD4930:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpremainder;
		 pARemainderDyadic4930_ARD4930:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc4934_AIL4934:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4934_AIL4934:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4933_AR4933:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4934_AIL4934;
		 pARefval4933_AR4933:=myrec;
		END;
	FUNCTION pADerefRhs4932_ADR4932:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4933_AR4933;
		 pADerefRhs4932_ADR4932:=myrec;
		END;
	FUNCTION pARhsValue4931_ARV4931:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4932_ADR4932;
		 pARhsValue4931_ARV4931:=myrec;
		END;
	FUNCTION pAOptionalsign4938_AO4938:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign4938_AO4938:=nil;
		 pAOptionalsign4938_AO4938:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber4937_AIN4937:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber4937_AIN4937:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs4936_ANR4936:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber4937_AIN4937;
		 pANumberRhs4936_ANR4936:=myrec;
		END;
	FUNCTION pARhsValue4935_ARV4935:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs4936_ANR4936;
		 pARhsValue4935_ARV4935:=myrec;
		END;
	FUNCTION pADyadicValue4929_ADV4929:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4931_ARV4931;
		myrec^.arg2:=pARhsValue4935_ARV4935;
		myrec^.fn:=pARemainderDyadic4930_ARD4930;
		 pADyadicValue4929_ADV4929:=myrec;
		END;
	FUNCTION pAAssign4926_AA4926:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue4929_ADV4929;
		myrec^.dest:=pARefval4927_AR4927;
		 pAAssign4926_AA4926:=myrec;
		END;
	FUNCTION pAAssignMeaning4925_AAM4925:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4926_AA4926;
		 pAAssignMeaning4925_AAM4925:=myrec;
		END;
	FUNCTION pAAssemblypattern4940_AA4940:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'and ' );
		pappendp(list,0);
		pappends(list,',3' );
		pAAssemblypattern4940_AA4940:=list;
		END;
	FUNCTION pAAssemblesto4939_AA4939:pprintlist;
	begin
		pAAssemblesto4939_AA4939:=pAAssemblypattern4940_AA4940;
		END;
	FUNCTION pASideeffects4944_AS4944:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4944_AS4944:=nil;
		 pASideeffects4944_AS4944:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4945_AUP4945:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4945_AUP4945:=nil;
		 pAUnconditionalPrecond4945_AUP4945:=myrec;
		END;
	FUNCTION MOD4_MOD4:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		paramcount:=2;
		meaning:=pAAssignMeaning4925_AAM4925;
		matchedAssembler:=pAAssemblesto4939_AA4939;
		END;
		MOD4_MOD4:=myrec;
	END;
	FUNCTION pATypeid4948_AT4948:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4948_AT4948:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc4952_AIL4952:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4952_AIL4952:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4951_AR4951:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4952_AIL4952;
		 pARefval4951_AR4951:=myrec;
		END;
	FUNCTION pARemainderDyadic4954_ARD4954:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpremainder;
		 pARemainderDyadic4954_ARD4954:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc4958_AIL4958:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4958_AIL4958:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4957_AR4957:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4958_AIL4958;
		 pARefval4957_AR4957:=myrec;
		END;
	FUNCTION pADerefRhs4956_ADR4956:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4957_AR4957;
		 pADerefRhs4956_ADR4956:=myrec;
		END;
	FUNCTION pARhsValue4955_ARV4955:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4956_ADR4956;
		 pARhsValue4955_ARV4955:=myrec;
		END;
	FUNCTION pAOptionalsign4962_AO4962:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign4962_AO4962:=nil;
		 pAOptionalsign4962_AO4962:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber4961_AIN4961:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber4961_AIN4961:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs4960_ANR4960:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber4961_AIN4961;
		 pANumberRhs4960_ANR4960:=myrec;
		END;
	FUNCTION pARhsValue4959_ARV4959:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs4960_ANR4960;
		 pARhsValue4959_ARV4959:=myrec;
		END;
	FUNCTION pADyadicValue4953_ADV4953:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4955_ARV4955;
		myrec^.arg2:=pARhsValue4959_ARV4959;
		myrec^.fn:=pARemainderDyadic4954_ARD4954;
		 pADyadicValue4953_ADV4953:=myrec;
		END;
	FUNCTION pAAssign4950_AA4950:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue4953_ADV4953;
		myrec^.dest:=pARefval4951_AR4951;
		 pAAssign4950_AA4950:=myrec;
		END;
	FUNCTION pAAssignMeaning4949_AAM4949:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4950_AA4950;
		 pAAssignMeaning4949_AAM4949:=myrec;
		END;
	FUNCTION pAAssemblypattern4964_AA4964:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'and ' );
		pappendp(list,0);
		pappends(list,',7' );
		pAAssemblypattern4964_AA4964:=list;
		END;
	FUNCTION pAAssemblesto4963_AA4963:pprintlist;
	begin
		pAAssemblesto4963_AA4963:=pAAssemblypattern4964_AA4964;
		END;
	FUNCTION pASideeffects4968_AS4968:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4968_AS4968:=nil;
		 pASideeffects4968_AS4968:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4969_AUP4969:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4969_AUP4969:=nil;
		 pAUnconditionalPrecond4969_AUP4969:=myrec;
		END;
	FUNCTION MOD8_MOD8:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		paramcount:=2;
		meaning:=pAAssignMeaning4949_AAM4949;
		matchedAssembler:=pAAssemblesto4963_AA4963;
		END;
		MOD8_MOD8:=myrec;
	END;
	FUNCTION pATypeid4972_AT4972:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ureg  ilcg.pattern@453dd5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4972_AT4972:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc4976_AIL4976:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4976_AIL4976:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4975_AR4975:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4976_AIL4976;
		 pARefval4975_AR4975:=myrec;
		END;
	FUNCTION pADivideDyadic4978_ADD4978:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpdivide;
		 pADivideDyadic4978_ADD4978:=myrec;
		END;
	FUNCTION pAUnsigned4984_AU4984:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32;
		 pAUnsigned4984_AU4984:=myrec;
		END;
	FUNCTION pAUnsignedTformat4983_AUT4983:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUnsigned4984_AU4984;
		 pAUnsignedTformat4983_AUT4983:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4982_ATP4982:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pATformatPredeclaredtype4982_ATP4982:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4981_APT4981:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pAPredeclaredtypeType4981_APT4981:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc4988_AIL4988:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4988_AIL4988:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4987_AR4987:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4988_AIL4988;
		 pARefval4987_AR4987:=myrec;
		END;
	FUNCTION pADerefRhs4986_ADR4986:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4987_AR4987;
		 pADerefRhs4986_ADR4986:=myrec;
		END;
	FUNCTION pARhsValue4985_ARV4985:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4986_ADR4986;
		 pARhsValue4985_ARV4985:=myrec;
		END;
		(*! try to cast to type: uint32*)
	FUNCTION pACastRhs4980_ACR4980:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType4981_APT4981;
		myrec^.arg2:=pARhsValue4985_ARV4985;
		 pACastRhs4980_ACR4980:=myrec;
		END;
	FUNCTION pARhsValue4979_ARV4979:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4980_ACR4980;
		 pARhsValue4979_ARV4979:=myrec;
		END;
	FUNCTION pAOptionalsign4992_AO4992:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign4992_AO4992:=nil;
		 pAOptionalsign4992_AO4992:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber4991_AIN4991:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber4991_AIN4991:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs4990_ANR4990:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber4991_AIN4991;
		 pANumberRhs4990_ANR4990:=myrec;
		END;
	FUNCTION pARhsValue4989_ARV4989:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs4990_ANR4990;
		 pARhsValue4989_ARV4989:=myrec;
		END;
	FUNCTION pADyadicValue4977_ADV4977:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4979_ARV4979;
		myrec^.arg2:=pARhsValue4989_ARV4989;
		myrec^.fn:=pADivideDyadic4978_ADD4978;
		 pADyadicValue4977_ADV4977:=myrec;
		END;
	FUNCTION pAAssign4974_AA4974:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue4977_ADV4977;
		myrec^.dest:=pARefval4975_AR4975;
		 pAAssign4974_AA4974:=myrec;
		END;
	FUNCTION pAAssignMeaning4973_AAM4973:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4974_AA4974;
		 pAAssignMeaning4973_AAM4973:=myrec;
		END;
	FUNCTION pAAssemblypattern4994_AA4994:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'shr ' );
		pappendp(list,0);
		pappends(list,',3' );
		pAAssemblypattern4994_AA4994:=list;
		END;
	FUNCTION pAAssemblesto4993_AA4993:pprintlist;
	begin
		pAAssemblesto4993_AA4993:=pAAssemblypattern4994_AA4994;
		END;
	FUNCTION pASideeffects4998_AS4998:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4998_AS4998:=nil;
		 pASideeffects4998_AS4998:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4999_AUP4999:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4999_AUP4999:=nil;
		 pAUnconditionalPrecond4999_AUP4999:=myrec;
		END;
	FUNCTION DIV8_DIV8:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patureg_;
		paramcount:=2;
		meaning:=pAAssignMeaning4973_AAM4973;
		matchedAssembler:=pAAssemblesto4993_AA4993;
		END;
		DIV8_DIV8:=myrec;
	END;
	FUNCTION pATypeid5002_AT5002:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5002_AT5002:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc5006_AIL5006:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5006_AIL5006:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5005_AR5005:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5006_AIL5006;
		 pARefval5005_AR5005:=myrec;
		END;
	FUNCTION pARemainderDyadic5008_ARD5008:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpremainder;
		 pARemainderDyadic5008_ARD5008:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc5012_AIL5012:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5012_AIL5012:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5011_AR5011:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5012_AIL5012;
		 pARefval5011_AR5011:=myrec;
		END;
	FUNCTION pADerefRhs5010_ADR5010:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5011_AR5011;
		 pADerefRhs5010_ADR5010:=myrec;
		END;
	FUNCTION pARhsValue5009_ARV5009:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5010_ADR5010;
		 pARhsValue5009_ARV5009:=myrec;
		END;
	FUNCTION pAOptionalsign5016_AO5016:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign5016_AO5016:=nil;
		 pAOptionalsign5016_AO5016:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber5015_AIN5015:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=16 ;
		 pAIntegerNumber5015_AIN5015:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs5014_ANR5014:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber5015_AIN5015;
		 pANumberRhs5014_ANR5014:=myrec;
		END;
	FUNCTION pARhsValue5013_ARV5013:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs5014_ANR5014;
		 pARhsValue5013_ARV5013:=myrec;
		END;
	FUNCTION pADyadicValue5007_ADV5007:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5009_ARV5009;
		myrec^.arg2:=pARhsValue5013_ARV5013;
		myrec^.fn:=pARemainderDyadic5008_ARD5008;
		 pADyadicValue5007_ADV5007:=myrec;
		END;
	FUNCTION pAAssign5004_AA5004:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue5007_ADV5007;
		myrec^.dest:=pARefval5005_AR5005;
		 pAAssign5004_AA5004:=myrec;
		END;
	FUNCTION pAAssignMeaning5003_AAM5003:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign5004_AA5004;
		 pAAssignMeaning5003_AAM5003:=myrec;
		END;
	FUNCTION pAAssemblypattern5018_AA5018:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'and ' );
		pappendp(list,0);
		pappends(list,',15' );
		pAAssemblypattern5018_AA5018:=list;
		END;
	FUNCTION pAAssemblesto5017_AA5017:pprintlist;
	begin
		pAAssemblesto5017_AA5017:=pAAssemblypattern5018_AA5018;
		END;
	FUNCTION pASideeffects5022_AS5022:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5022_AS5022:=nil;
		 pASideeffects5022_AS5022:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5023_AUP5023:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5023_AUP5023:=nil;
		 pAUnconditionalPrecond5023_AUP5023:=myrec;
		END;
	FUNCTION MOD16_MOD16:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		paramcount:=2;
		meaning:=pAAssignMeaning5003_AAM5003;
		matchedAssembler:=pAAssemblesto5017_AA5017;
		END;
		MOD16_MOD16:=myrec;
	END;
		(*! Match l *)
	FUNCTION pAIdLoc5029_AIL5029:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5029_AIL5029:=myrec;
		END;
		(*l *)
	FUNCTION pALocValue5028_ALV5028:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5029_AIL5029;
		 pALocValue5028_ALV5028:=myrec;
		END;
	FUNCTION pAValueMeaning5027_AVM5027:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pALocValue5028_ALV5028;
		 pAValueMeaning5027_AVM5027:=myrec;
		END;
	FUNCTION pAAssemblypattern5031_AA5031:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,':' );
		pAAssemblypattern5031_AA5031:=list;
		END;
	FUNCTION pAAssemblesto5030_AA5030:pprintlist;
	begin
		pAAssemblesto5030_AA5030:=pAAssemblypattern5031_AA5031;
		END;
	FUNCTION pASideeffects5034_AS5034:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5034_AS5034:=nil;
		 pASideeffects5034_AS5034:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5035_AUP5035:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5035_AUP5035:=nil;
		 pAUnconditionalPrecond5035_AUP5035:=myrec;
		END;
	FUNCTION PLANT_PLANT:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patlabel;
		paramcount:=2;
		meaning:=pAValueMeaning5027_AVM5027;
		matchedAssembler:=pAAssemblesto5030_AA5030;
		END;
		PLANT_PLANT:=myrec;
	END;
	FUNCTION pATypeid5038_AT5038:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ double  ilcg.pattern@6bcef1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5038_AT5038:=myrec;
		END;
	FUNCTION pATypeid5045_AT5045:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@132ece7}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid5045_AT5045:=myrec;
		END;
	FUNCTION pATypeidType5044_ATT5044:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5045_AT5045;
		 pATypeidType5044_ATT5044:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc5047_AIL5047:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5047_AIL5047:=myrec;
		END;
		(*r *)
	FUNCTION pALocValue5046_ALV5046:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5047_AIL5047;
		 pALocValue5046_ALV5046:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5043_ACR5043:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5044_ATT5044;
		myrec^.arg2:=pALocValue5046_ALV5046;
		 pACastRhs5043_ACR5043:=myrec;
		END;
	FUNCTION pARhsValue5042_ARV5042:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5043_ACR5043;
		 pARhsValue5042_ARV5042:=myrec;
		END;
	FUNCTION pALocMeaning5041_ALM5041:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=location;
		myrec^.locvalue:=pARhsValue5042_ARV5042;
		 pALocMeaning5041_ALM5041:=myrec;
		END;
	FUNCTION pAAssemblypattern5049_AA5049:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'dq ' );
		pappendp(list,0);
		pAAssemblypattern5049_AA5049:=list;
		END;
	FUNCTION pAAssemblesto5048_AA5048:pprintlist;
	begin
		pAAssemblesto5048_AA5048:=pAAssemblypattern5049_AA5049;
		END;
	FUNCTION pASideeffects5052_AS5052:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5052_AS5052:=nil;
		 pASideeffects5052_AS5052:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5053_AUP5053:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5053_AUP5053:=nil;
		 pAUnconditionalPrecond5053_AUP5053:=myrec;
		END;
	FUNCTION PLANTRCONST_PLANTRCONST:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=typeparam;
		params^[0]:=patdouble_;
		paramcount:=3;
		meaning:=pALocMeaning5041_ALM5041;
		matchedAssembler:=pAAssemblesto5048_AA5048;
		END;
		PLANTRCONST_PLANTRCONST:=myrec;
	END;
	FUNCTION pATypeid5056_AT5056:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ longint  ilcg.pattern@19bf996}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5056_AT5056:=myrec;
		END;
	FUNCTION pATypeid5063_AT5063:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@89848d}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid5063_AT5063:=myrec;
		END;
	FUNCTION pATypeidType5062_ATT5062:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5063_AT5063;
		 pATypeidType5062_ATT5062:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc5065_AIL5065:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5065_AIL5065:=myrec;
		END;
		(*r *)
	FUNCTION pALocValue5064_ALV5064:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5065_AIL5065;
		 pALocValue5064_ALV5064:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5061_ACR5061:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5062_ATT5062;
		myrec^.arg2:=pALocValue5064_ALV5064;
		 pACastRhs5061_ACR5061:=myrec;
		END;
	FUNCTION pARhsValue5060_ARV5060:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5061_ACR5061;
		 pARhsValue5060_ARV5060:=myrec;
		END;
	FUNCTION pALocMeaning5059_ALM5059:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=location;
		myrec^.locvalue:=pARhsValue5060_ARV5060;
		 pALocMeaning5059_ALM5059:=myrec;
		END;
	FUNCTION pAAssemblypattern5067_AA5067:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'dd ' );
		pappendp(list,0);
		pAAssemblypattern5067_AA5067:=list;
		END;
	FUNCTION pAAssemblesto5066_AA5066:pprintlist;
	begin
		pAAssemblesto5066_AA5066:=pAAssemblypattern5067_AA5067;
		END;
	FUNCTION pASideeffects5070_AS5070:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5070_AS5070:=nil;
		 pASideeffects5070_AS5070:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5071_AUP5071:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5071_AUP5071:=nil;
		 pAUnconditionalPrecond5071_AUP5071:=myrec;
		END;
	FUNCTION PLANTICONST_PLANTICONST:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=typeparam;
		params^[0]:=patlongint_;
		paramcount:=3;
		meaning:=pALocMeaning5059_ALM5059;
		matchedAssembler:=pAAssemblesto5066_AA5066;
		END;
		PLANTICONST_PLANTICONST:=myrec;
	END;
	FUNCTION pATypeid5074_AT5074:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ float  ilcg.pattern@19d0cf0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5074_AT5074:=myrec;
		END;
	FUNCTION pATypeid5081_AT5081:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@11f5ff9}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid5081_AT5081:=myrec;
		END;
	FUNCTION pATypeidType5080_ATT5080:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5081_AT5081;
		 pATypeidType5080_ATT5080:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc5083_AIL5083:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5083_AIL5083:=myrec;
		END;
		(*r *)
	FUNCTION pALocValue5082_ALV5082:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5083_AIL5083;
		 pALocValue5082_ALV5082:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5079_ACR5079:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5080_ATT5080;
		myrec^.arg2:=pALocValue5082_ALV5082;
		 pACastRhs5079_ACR5079:=myrec;
		END;
	FUNCTION pARhsValue5078_ARV5078:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5079_ACR5079;
		 pARhsValue5078_ARV5078:=myrec;
		END;
	FUNCTION pALocMeaning5077_ALM5077:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=location;
		myrec^.locvalue:=pARhsValue5078_ARV5078;
		 pALocMeaning5077_ALM5077:=myrec;
		END;
	FUNCTION pAAssemblypattern5085_AA5085:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'dd ' );
		pappendp(list,0);
		pAAssemblypattern5085_AA5085:=list;
		END;
	FUNCTION pAAssemblesto5084_AA5084:pprintlist;
	begin
		pAAssemblesto5084_AA5084:=pAAssemblypattern5085_AA5085;
		END;
	FUNCTION pASideeffects5088_AS5088:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5088_AS5088:=nil;
		 pASideeffects5088_AS5088:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5089_AUP5089:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5089_AUP5089:=nil;
		 pAUnconditionalPrecond5089_AUP5089:=myrec;
		END;
	FUNCTION PLANTSCONST_PLANTSCONST:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=typeparam;
		params^[0]:=patfloat_;
		paramcount:=3;
		meaning:=pALocMeaning5077_ALM5077;
		matchedAssembler:=pAAssemblesto5084_AA5084;
		END;
		PLANTSCONST_PLANTSCONST:=myrec;
	END;
	FUNCTION pATypeid5092_AT5092:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ byte  ilcg.pattern@1537060}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5092_AT5092:=myrec;
		END;
	FUNCTION pATypeid5099_AT5099:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@1626c6d}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid5099_AT5099:=myrec;
		END;
	FUNCTION pATypeidType5098_ATT5098:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5099_AT5099;
		 pATypeidType5098_ATT5098:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc5101_AIL5101:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5101_AIL5101:=myrec;
		END;
		(*r *)
	FUNCTION pALocValue5100_ALV5100:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5101_AIL5101;
		 pALocValue5100_ALV5100:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5097_ACR5097:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5098_ATT5098;
		myrec^.arg2:=pALocValue5100_ALV5100;
		 pACastRhs5097_ACR5097:=myrec;
		END;
	FUNCTION pARhsValue5096_ARV5096:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5097_ACR5097;
		 pARhsValue5096_ARV5096:=myrec;
		END;
	FUNCTION pALocMeaning5095_ALM5095:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=location;
		myrec^.locvalue:=pARhsValue5096_ARV5096;
		 pALocMeaning5095_ALM5095:=myrec;
		END;
	FUNCTION pAAssemblypattern5103_AA5103:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'db ' );
		pappendp(list,0);
		pAAssemblypattern5103_AA5103:=list;
		END;
	FUNCTION pAAssemblesto5102_AA5102:pprintlist;
	begin
		pAAssemblesto5102_AA5102:=pAAssemblypattern5103_AA5103;
		END;
	FUNCTION pASideeffects5106_AS5106:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5106_AS5106:=nil;
		 pASideeffects5106_AS5106:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5107_AUP5107:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5107_AUP5107:=nil;
		 pAUnconditionalPrecond5107_AUP5107:=myrec;
		END;
	FUNCTION PLANTBCONST_PLANTBCONST:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=typeparam;
		params^[0]:=patbyte_;
		paramcount:=3;
		meaning:=pALocMeaning5095_ALM5095;
		matchedAssembler:=pAAssemblesto5102_AA5102;
		END;
		PLANTBCONST_PLANTBCONST:=myrec;
	END;
	FUNCTION pATypeid5110_AT5110:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ word16  ilcg.pattern@10a4d7c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5110_AT5110:=myrec;
		END;
	FUNCTION pATypeid5117_AT5117:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@e34094}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid5117_AT5117:=myrec;
		END;
	FUNCTION pATypeidType5116_ATT5116:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5117_AT5117;
		 pATypeidType5116_ATT5116:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc5119_AIL5119:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5119_AIL5119:=myrec;
		END;
		(*r *)
	FUNCTION pALocValue5118_ALV5118:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5119_AIL5119;
		 pALocValue5118_ALV5118:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5115_ACR5115:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5116_ATT5116;
		myrec^.arg2:=pALocValue5118_ALV5118;
		 pACastRhs5115_ACR5115:=myrec;
		END;
	FUNCTION pARhsValue5114_ARV5114:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5115_ACR5115;
		 pARhsValue5114_ARV5114:=myrec;
		END;
	FUNCTION pALocMeaning5113_ALM5113:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=location;
		myrec^.locvalue:=pARhsValue5114_ARV5114;
		 pALocMeaning5113_ALM5113:=myrec;
		END;
	FUNCTION pAAssemblypattern5121_AA5121:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'dw ' );
		pappendp(list,0);
		pAAssemblypattern5121_AA5121:=list;
		END;
	FUNCTION pAAssemblesto5120_AA5120:pprintlist;
	begin
		pAAssemblesto5120_AA5120:=pAAssemblypattern5121_AA5121;
		END;
	FUNCTION pASideeffects5124_AS5124:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5124_AS5124:=nil;
		 pASideeffects5124_AS5124:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5125_AUP5125:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5125_AUP5125:=nil;
		 pAUnconditionalPrecond5125_AUP5125:=myrec;
		END;
	FUNCTION PLANTWCONST_PLANTWCONST:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=typeparam;
		params^[0]:=patword16_16;
		paramcount:=3;
		meaning:=pALocMeaning5113_ALM5113;
		matchedAssembler:=pAAssemblesto5120_AA5120;
		END;
		PLANTWCONST_PLANTWCONST:=myrec;
	END;
	FUNCTION pATypeid5128_AT5128:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@2a2ae9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5128_AT5128:=myrec;
		END;
		(*! Match i *)
	FUNCTION pAIdLoc5131_AIL5131:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5131_AIL5131:=myrec;
		END;
		(*i *)
	FUNCTION pALocValue5130_ALV5130:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5131_AIL5131;
		 pALocValue5130_ALV5130:=myrec;
		END;
	FUNCTION pAFailMeaning5129_AFM5129:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=failure;
		myrec^.arg:=pALocValue5130_ALV5130;
		 pAFailMeaning5129_AFM5129:=myrec;
		END;
	FUNCTION pAAssemblypattern5133_AA5133:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'int ' );
		pappendp(list,0);
		pAAssemblypattern5133_AA5133:=list;
		END;
	FUNCTION pAAssemblesto5132_AA5132:pprintlist;
	begin
		pAAssemblesto5132_AA5132:=pAAssemblypattern5133_AA5133;
		END;
	FUNCTION pASideeffects5136_AS5136:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5136_AS5136:=nil;
		 pASideeffects5136_AS5136:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5137_AUP5137:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5137_AUP5137:=nil;
		 pAUnconditionalPrecond5137_AUP5137:=myrec;
		END;
	FUNCTION FAIL_FAIL:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patint_;
		paramcount:=2;
		meaning:=pAFailMeaning5129_AFM5129;
		matchedAssembler:=pAAssemblesto5132_AA5132;
		END;
		FAIL_FAIL:=myrec;
	END;
	FUNCTION pATypeid5140_AT5140:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ jumpmode  ilcg.pattern@12b2f7f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5140_AT5140:=myrec;
		END;
		(*! Match l *)
	FUNCTION pAIdLoc5143_AIL5143:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5143_AIL5143:=myrec;
		END;
		(*l *)
	FUNCTION pALocValue5142_ALV5142:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5143_AIL5143;
		 pALocValue5142_ALV5142:=myrec;
		END;
	FUNCTION pAGotoMeaning5141_AGM5141:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=gotonode;
		myrec^.dest:=pALocValue5142_ALV5142;
		 pAGotoMeaning5141_AGM5141:=myrec;
		END;
	FUNCTION pAAssemblypattern5145_AA5145:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'jmp ' );
		pappendp(list,0);
		pAAssemblypattern5145_AA5145:=list;
		END;
	FUNCTION pAAssemblesto5144_AA5144:pprintlist;
	begin
		pAAssemblesto5144_AA5144:=pAAssemblypattern5145_AA5145;
		END;
	FUNCTION pASideeffects5148_AS5148:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5148_AS5148:=nil;
		 pASideeffects5148_AS5148:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5149_AUP5149:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5149_AUP5149:=nil;
		 pAUnconditionalPrecond5149_AUP5149:=myrec;
		END;
	FUNCTION GOTO_GOTO:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patjumpmode_;
		paramcount:=2;
		meaning:=pAGotoMeaning5141_AGM5141;
		matchedAssembler:=pAAssemblesto5144_AA5144;
		END;
		GOTO_GOTO:=myrec;
	END;
	FUNCTION pATypeid5154_AT5154:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ addrmode  ilcg.pattern@17aaeec}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5154_AT5154:=myrec;
		END;
	FUNCTION pATypeid5156_AT5156:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ signed  ilcg.pattern@15e0163}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5156_AT5156:=myrec;
		END;
	FUNCTION pATypeid5158_AT5158:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ condition  ilcg.pattern@a9aa83}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5158_AT5158:=myrec;
		END;
	FUNCTION pATypeid5160_AT5160:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ signed  ilcg.pattern@15e0163}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5160_AT5160:=myrec;
		END;
	FUNCTION pATypeid5162_AT5162:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@2a2ae9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5162_AT5162:=myrec;
		END;
	FUNCTION pATypeid5167_AT5167:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ b  ilcg.Param@939ec3}
		myrec^.tag:=param;
		myrec^.index:= 5;
		 pATypeid5167_AT5167:=myrec;
		END;
	FUNCTION pATypeidType5166_ATT5166:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5167_AT5167;
		 pATypeidType5166_ATT5166:=myrec;
		END;
	FUNCTION pAIdentifierDyadic5169_AID5169:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(3);
		 pAIdentifierDyadic5169_AID5169:=myrec;
		END;
	FUNCTION pATypeid5173_AT5173:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@d4694f}
		myrec^.tag:=param;
		myrec^.index:= 4;
		 pATypeid5173_AT5173:=myrec;
		END;
	FUNCTION pATypeidType5172_ATT5172:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5173_AT5173;
		 pATypeidType5172_ATT5172:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc5177_AIL5177:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5177_AIL5177:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5176_AR5176:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5177_AIL5177;
		 pARefval5176_AR5176:=myrec;
		END;
	FUNCTION pADerefRhs5175_ADR5175:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5176_AR5176;
		 pADerefRhs5175_ADR5175:=myrec;
		END;
	FUNCTION pARhsValue5174_ARV5174:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5175_ADR5175;
		 pARhsValue5174_ARV5174:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5171_ACR5171:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5172_ATT5172;
		myrec^.arg2:=pARhsValue5174_ARV5174;
		 pACastRhs5171_ACR5171:=myrec;
		END;
	FUNCTION pARhsValue5170_ARV5170:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5171_ACR5171;
		 pARhsValue5170_ARV5170:=myrec;
		END;
	FUNCTION pAConstRhs5179_ACR5179:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(2);;
		 pAConstRhs5179_ACR5179:=myrec;
		END;
	FUNCTION pARhsValue5178_ARV5178:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs5179_ACR5179;
		 pARhsValue5178_ARV5178:=myrec;
		END;
	FUNCTION pADyadicValue5168_ADV5168:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5170_ARV5170;
		myrec^.arg2:=pARhsValue5178_ARV5178;
		myrec^.fn:=pAIdentifierDyadic5169_AID5169;
		 pADyadicValue5168_ADV5168:=myrec;
		END;
		(*! try to cast to type: b*)
	FUNCTION pACastRhs5165_ACR5165:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5166_ATT5166;
		myrec^.arg2:=pADyadicValue5168_ADV5168;
		 pACastRhs5165_ACR5165:=myrec;
		END;
	FUNCTION pARhsValue5164_ARV5164:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5165_ACR5165;
		 pARhsValue5164_ARV5164:=myrec;
		END;
		(*! Match l *)
	FUNCTION pAIdLoc5182_AIL5182:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5182_AIL5182:=myrec;
		END;
		(*l *)
	FUNCTION pALocValue5181_ALV5181:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5182_AIL5182;
		 pALocValue5181_ALV5181:=myrec;
		END;
	FUNCTION pAGotoMeaning5180_AGM5180:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=gotonode;
		myrec^.dest:=pALocValue5181_ALV5181;
		 pAGotoMeaning5180_AGM5180:=myrec;
		END;
	FUNCTION pAIfMeaning5163_AIM5163:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pARhsValue5164_ARV5164;
		myrec^.action:=pAGotoMeaning5180_AGM5180;
		 pAIfMeaning5163_AIM5163:=myrec;
		END;
	FUNCTION pAAssemblypattern5184_AA5184:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,' cmp ' );
		pappendp(list,4);
		pappends(list,' ' );
		pappendp(list,1);
		pappends(list,',  ' );
		pappendp(list,2);
		pappends(list,'\n j' );
		pappendp(list,3);
		pappends(list,' near  ' );
		pappendp(list,0);
		pAAssemblypattern5184_AA5184:=list;
		END;
	FUNCTION pAAssemblesto5183_AA5183:pprintlist;
	begin
		pAAssemblesto5183_AA5183:=pAAssemblypattern5184_AA5184;
		END;
	FUNCTION pASideeffects5195_AS5195:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5195_AS5195:=nil;
		 pASideeffects5195_AS5195:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5196_AUP5196:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5196_AUP5196:=nil;
		 pAUnconditionalPrecond5196_AUP5196:=myrec;
		END;
	FUNCTION IFLITGOTO_IFLITGOTO:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[5]:=patint_;
		params^[2]:=patsigned_;
		params^[0]:=patlabel;
		params^[1]:=pataddrmode_;
		params^[4]:=patsigned_;
		params^[3]:=patcondition_;
		paramcount:=7;
		meaning:=pAIfMeaning5163_AIM5163;
		matchedAssembler:=pAAssemblesto5183_AA5183;
		END;
		IFLITGOTO_IFLITGOTO:=myrec;
	END;
	FUNCTION pATypeid5201_AT5201:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ addrmode  ilcg.pattern@17aaeec}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5201_AT5201:=myrec;
		END;
	FUNCTION pATypeid5203_AT5203:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ unsigned  ilcg.pattern@fc5b01}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5203_AT5203:=myrec;
		END;
	FUNCTION pATypeid5205_AT5205:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ unsignedcondition  ilcg.pattern@174e78a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5205_AT5205:=myrec;
		END;
	FUNCTION pATypeid5207_AT5207:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ unsigned  ilcg.pattern@fc5b01}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5207_AT5207:=myrec;
		END;
	FUNCTION pATypeid5209_AT5209:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@2a2ae9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5209_AT5209:=myrec;
		END;
	FUNCTION pATypeid5214_AT5214:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ b  ilcg.Param@fa0bf4}
		myrec^.tag:=param;
		myrec^.index:= 5;
		 pATypeid5214_AT5214:=myrec;
		END;
	FUNCTION pATypeidType5213_ATT5213:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5214_AT5214;
		 pATypeidType5213_ATT5213:=myrec;
		END;
	FUNCTION pAIdentifierDyadic5216_AID5216:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(3);
		 pAIdentifierDyadic5216_AID5216:=myrec;
		END;
	FUNCTION pATypeid5220_AT5220:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@13ccea}
		myrec^.tag:=param;
		myrec^.index:= 4;
		 pATypeid5220_AT5220:=myrec;
		END;
	FUNCTION pATypeidType5219_ATT5219:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5220_AT5220;
		 pATypeidType5219_ATT5219:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc5224_AIL5224:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5224_AIL5224:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5223_AR5223:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5224_AIL5224;
		 pARefval5223_AR5223:=myrec;
		END;
	FUNCTION pADerefRhs5222_ADR5222:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5223_AR5223;
		 pADerefRhs5222_ADR5222:=myrec;
		END;
	FUNCTION pARhsValue5221_ARV5221:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5222_ADR5222;
		 pARhsValue5221_ARV5221:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5218_ACR5218:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5219_ATT5219;
		myrec^.arg2:=pARhsValue5221_ARV5221;
		 pACastRhs5218_ACR5218:=myrec;
		END;
	FUNCTION pARhsValue5217_ARV5217:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5218_ACR5218;
		 pARhsValue5217_ARV5217:=myrec;
		END;
	FUNCTION pATypeid5228_AT5228:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@13ccea}
		myrec^.tag:=param;
		myrec^.index:= 4;
		 pATypeid5228_AT5228:=myrec;
		END;
	FUNCTION pATypeidType5227_ATT5227:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5228_AT5228;
		 pATypeidType5227_ATT5227:=myrec;
		END;
	FUNCTION pAConstRhs5230_ACR5230:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(2);;
		 pAConstRhs5230_ACR5230:=myrec;
		END;
	FUNCTION pARhsValue5229_ARV5229:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs5230_ACR5230;
		 pARhsValue5229_ARV5229:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5226_ACR5226:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5227_ATT5227;
		myrec^.arg2:=pARhsValue5229_ARV5229;
		 pACastRhs5226_ACR5226:=myrec;
		END;
	FUNCTION pARhsValue5225_ARV5225:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5226_ACR5226;
		 pARhsValue5225_ARV5225:=myrec;
		END;
	FUNCTION pADyadicValue5215_ADV5215:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5217_ARV5217;
		myrec^.arg2:=pARhsValue5225_ARV5225;
		myrec^.fn:=pAIdentifierDyadic5216_AID5216;
		 pADyadicValue5215_ADV5215:=myrec;
		END;
		(*! try to cast to type: b*)
	FUNCTION pACastRhs5212_ACR5212:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5213_ATT5213;
		myrec^.arg2:=pADyadicValue5215_ADV5215;
		 pACastRhs5212_ACR5212:=myrec;
		END;
	FUNCTION pARhsValue5211_ARV5211:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5212_ACR5212;
		 pARhsValue5211_ARV5211:=myrec;
		END;
		(*! Match l *)
	FUNCTION pAIdLoc5233_AIL5233:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5233_AIL5233:=myrec;
		END;
		(*l *)
	FUNCTION pALocValue5232_ALV5232:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5233_AIL5233;
		 pALocValue5232_ALV5232:=myrec;
		END;
	FUNCTION pAGotoMeaning5231_AGM5231:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=gotonode;
		myrec^.dest:=pALocValue5232_ALV5232;
		 pAGotoMeaning5231_AGM5231:=myrec;
		END;
	FUNCTION pAIfMeaning5210_AIM5210:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pARhsValue5211_ARV5211;
		myrec^.action:=pAGotoMeaning5231_AGM5231;
		 pAIfMeaning5210_AIM5210:=myrec;
		END;
	FUNCTION pAAssemblypattern5235_AA5235:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,' cmp ' );
		pappendp(list,4);
		pappends(list,' ' );
		pappendp(list,1);
		pappends(list,',  ' );
		pappendp(list,2);
		pappends(list,'\n j' );
		pappendp(list,3);
		pappends(list,' near  ' );
		pappendp(list,0);
		pAAssemblypattern5235_AA5235:=list;
		END;
	FUNCTION pAAssemblesto5234_AA5234:pprintlist;
	begin
		pAAssemblesto5234_AA5234:=pAAssemblypattern5235_AA5235;
		END;
	FUNCTION pASideeffects5246_AS5246:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5246_AS5246:=nil;
		 pASideeffects5246_AS5246:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5247_AUP5247:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5247_AUP5247:=nil;
		 pAUnconditionalPrecond5247_AUP5247:=myrec;
		END;
	FUNCTION IFULITGOTO_IFULITGOTO:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[5]:=patint_;
		params^[2]:=patunsigned_;
		params^[0]:=patlabel;
		params^[1]:=pataddrmode_;
		params^[4]:=patunsigned_;
		params^[3]:=patunsignedcondition_;
		paramcount:=7;
		meaning:=pAIfMeaning5210_AIM5210;
		matchedAssembler:=pAAssemblesto5234_AA5234;
		END;
		IFULITGOTO_IFULITGOTO:=myrec;
	END;
	FUNCTION pATypeid5252_AT5252:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baddrmode  ilcg.pattern@a14fed}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5252_AT5252:=myrec;
		END;
	FUNCTION pATypeid5254_AT5254:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ signed  ilcg.pattern@15e0163}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5254_AT5254:=myrec;
		END;
	FUNCTION pATypeid5256_AT5256:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ condition  ilcg.pattern@a9aa83}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5256_AT5256:=myrec;
		END;
	FUNCTION pATypeid5258_AT5258:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ signed  ilcg.pattern@15e0163}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5258_AT5258:=myrec;
		END;
	FUNCTION pAIdentifierDyadic5261_AID5261:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(3);
		 pAIdentifierDyadic5261_AID5261:=myrec;
		END;
	FUNCTION pATypeid5265_AT5265:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@150dcd3}
		myrec^.tag:=param;
		myrec^.index:= 4;
		 pATypeid5265_AT5265:=myrec;
		END;
	FUNCTION pATypeidType5264_ATT5264:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5265_AT5265;
		 pATypeidType5264_ATT5264:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc5269_AIL5269:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5269_AIL5269:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5268_AR5268:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5269_AIL5269;
		 pARefval5268_AR5268:=myrec;
		END;
	FUNCTION pADerefRhs5267_ADR5267:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5268_AR5268;
		 pADerefRhs5267_ADR5267:=myrec;
		END;
	FUNCTION pARhsValue5266_ARV5266:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5267_ADR5267;
		 pARhsValue5266_ARV5266:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5263_ACR5263:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5264_ATT5264;
		myrec^.arg2:=pARhsValue5266_ARV5266;
		 pACastRhs5263_ACR5263:=myrec;
		END;
	FUNCTION pARhsValue5262_ARV5262:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5263_ACR5263;
		 pARhsValue5262_ARV5262:=myrec;
		END;
	FUNCTION pAConstRhs5271_ACR5271:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(2);;
		 pAConstRhs5271_ACR5271:=myrec;
		END;
	FUNCTION pARhsValue5270_ARV5270:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs5271_ACR5271;
		 pARhsValue5270_ARV5270:=myrec;
		END;
	FUNCTION pADyadicValue5260_ADV5260:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5262_ARV5262;
		myrec^.arg2:=pARhsValue5270_ARV5270;
		myrec^.fn:=pAIdentifierDyadic5261_AID5261;
		 pADyadicValue5260_ADV5260:=myrec;
		END;
		(*! Match l *)
	FUNCTION pAIdLoc5274_AIL5274:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5274_AIL5274:=myrec;
		END;
		(*l *)
	FUNCTION pALocValue5273_ALV5273:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5274_AIL5274;
		 pALocValue5273_ALV5273:=myrec;
		END;
	FUNCTION pAGotoMeaning5272_AGM5272:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=gotonode;
		myrec^.dest:=pALocValue5273_ALV5273;
		 pAGotoMeaning5272_AGM5272:=myrec;
		END;
	FUNCTION pAIfMeaning5259_AIM5259:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pADyadicValue5260_ADV5260;
		myrec^.action:=pAGotoMeaning5272_AGM5272;
		 pAIfMeaning5259_AIM5259:=myrec;
		END;
	FUNCTION pAAssemblypattern5276_AA5276:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,' cmp ' );
		pappendp(list,4);
		pappends(list,' ' );
		pappendp(list,1);
		pappends(list,',  ' );
		pappendp(list,4);
		pappendp(list,2);
		pappends(list,'\n j' );
		pappendp(list,3);
		pappends(list,' near  ' );
		pappendp(list,0);
		pAAssemblypattern5276_AA5276:=list;
		END;
	FUNCTION pAAssemblesto5275_AA5275:pprintlist;
	begin
		pAAssemblesto5275_AA5275:=pAAssemblypattern5276_AA5276;
		END;
	FUNCTION pASideeffects5288_AS5288:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5288_AS5288:=nil;
		 pASideeffects5288_AS5288:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5289_AUP5289:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5289_AUP5289:=nil;
		 pAUnconditionalPrecond5289_AUP5289:=myrec;
		END;
	FUNCTION BIFLITGOTO_BIFLITGOTO:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patlabel;
		params^[2]:=patsigned_;
		params^[1]:=patbaddrmode_;
		params^[4]:=patsigned_;
		params^[3]:=patcondition_;
		paramcount:=6;
		meaning:=pAIfMeaning5259_AIM5259;
		matchedAssembler:=pAAssemblesto5275_AA5275;
		END;
		BIFLITGOTO_BIFLITGOTO:=myrec;
	END;
	FUNCTION pATypeid5294_AT5294:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bireg  ilcg.pattern@ef7d74}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5294_AT5294:=myrec;
		END;
	FUNCTION pATypeid5296_AT5296:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ regaddrimmediate  ilcg.pattern@4c8b84}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5296_AT5296:=myrec;
		END;
	FUNCTION pATypeid5298_AT5298:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ condition  ilcg.pattern@a9aa83}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5298_AT5298:=myrec;
		END;
	FUNCTION pATypeid5300_AT5300:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ signed  ilcg.pattern@15e0163}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5300_AT5300:=myrec;
		END;
	FUNCTION pATypeid5302_AT5302:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@2a2ae9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5302_AT5302:=myrec;
		END;
	FUNCTION pAInt8Signed5309_AI8S5309:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed5309_AI8S5309:=myrec;
		END;
	FUNCTION pASignedTformat5308_AST5308:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed5309_AI8S5309;
		 pASignedTformat5308_AST5308:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5307_ATP5307:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype5307_ATP5307:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5306_APT5306:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType5306_APT5306:=myrec;
		END;
	FUNCTION pAIdentifierDyadic5311_AID5311:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(3);
		 pAIdentifierDyadic5311_AID5311:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc5315_AIL5315:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5315_AIL5315:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5314_AR5314:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5315_AIL5315;
		 pARefval5314_AR5314:=myrec;
		END;
	FUNCTION pADerefRhs5313_ADR5313:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5314_AR5314;
		 pADerefRhs5313_ADR5313:=myrec;
		END;
	FUNCTION pARhsValue5312_ARV5312:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5313_ADR5313;
		 pARhsValue5312_ARV5312:=myrec;
		END;
	FUNCTION pAInt8Signed5321_AI8S5321:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed5321_AI8S5321:=myrec;
		END;
	FUNCTION pASignedTformat5320_AST5320:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed5321_AI8S5321;
		 pASignedTformat5320_AST5320:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5319_ATP5319:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype5319_ATP5319:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5318_APT5318:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType5318_APT5318:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc5323_AIL5323:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc5323_AIL5323:=myrec;
		END;
		(*r2 *)
	FUNCTION pALocValue5322_ALV5322:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5323_AIL5323;
		 pALocValue5322_ALV5322:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs5317_ACR5317:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType5318_APT5318;
		myrec^.arg2:=pALocValue5322_ALV5322;
		 pACastRhs5317_ACR5317:=myrec;
		END;
	FUNCTION pARhsValue5316_ARV5316:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5317_ACR5317;
		 pARhsValue5316_ARV5316:=myrec;
		END;
	FUNCTION pADyadicValue5310_ADV5310:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5312_ARV5312;
		myrec^.arg2:=pARhsValue5316_ARV5316;
		myrec^.fn:=pAIdentifierDyadic5311_AID5311;
		 pADyadicValue5310_ADV5310:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs5305_ACR5305:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType5306_APT5306;
		myrec^.arg2:=pADyadicValue5310_ADV5310;
		 pACastRhs5305_ACR5305:=myrec;
		END;
	FUNCTION pARhsValue5304_ARV5304:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5305_ACR5305;
		 pARhsValue5304_ARV5304:=myrec;
		END;
		(*! Match l *)
	FUNCTION pAIdLoc5326_AIL5326:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5326_AIL5326:=myrec;
		END;
		(*l *)
	FUNCTION pALocValue5325_ALV5325:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5326_AIL5326;
		 pALocValue5325_ALV5325:=myrec;
		END;
	FUNCTION pAGotoMeaning5324_AGM5324:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=gotonode;
		myrec^.dest:=pALocValue5325_ALV5325;
		 pAGotoMeaning5324_AGM5324:=myrec;
		END;
	FUNCTION pAIfMeaning5303_AIM5303:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pARhsValue5304_ARV5304;
		myrec^.action:=pAGotoMeaning5324_AGM5324;
		 pAIfMeaning5303_AIM5303:=myrec;
		END;
	FUNCTION pAAssemblypattern5328_AA5328:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cmp ' );
		pappendp(list,1);
		pappends(list,',byte' );
		pappends(list,'  ' );
		pappendp(list,2);
		pappends(list,'\n j' );
		pappendp(list,3);
		pappends(list,' near  ' );
		pappendp(list,0);
		pAAssemblypattern5328_AA5328:=list;
		END;
	FUNCTION pAAssemblesto5327_AA5327:pprintlist;
	begin
		pAAssemblesto5327_AA5327:=pAAssemblypattern5328_AA5328;
		END;
	FUNCTION pASideeffects5338_AS5338:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5338_AS5338:=nil;
		 pASideeffects5338_AS5338:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5339_AUP5339:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5339_AUP5339:=nil;
		 pAUnconditionalPrecond5339_AUP5339:=myrec;
		END;
	FUNCTION IFGOTOB_IFGOTOB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[5]:=patint_;
		params^[2]:=patregaddrimmediate_;
		params^[0]:=patlabel;
		params^[1]:=patbireg_;
		params^[4]:=patsigned_;
		params^[3]:=patcondition_;
		paramcount:=7;
		meaning:=pAIfMeaning5303_AIM5303;
		matchedAssembler:=pAAssemblesto5327_AA5327;
		END;
		IFGOTOB_IFGOTOB:=myrec;
	END;
	FUNCTION pATypeid5344_AT5344:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ wreg  ilcg.pattern@15004dd}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5344_AT5344:=myrec;
		END;
	FUNCTION pATypeid5346_AT5346:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ regaddrimmediate  ilcg.pattern@4c8b84}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5346_AT5346:=myrec;
		END;
	FUNCTION pATypeid5348_AT5348:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ condition  ilcg.pattern@a9aa83}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5348_AT5348:=myrec;
		END;
	FUNCTION pATypeid5350_AT5350:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ signed  ilcg.pattern@15e0163}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5350_AT5350:=myrec;
		END;
	FUNCTION pATypeid5352_AT5352:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@2a2ae9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5352_AT5352:=myrec;
		END;
	FUNCTION pAInt8Signed5359_AI8S5359:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed5359_AI8S5359:=myrec;
		END;
	FUNCTION pASignedTformat5358_AST5358:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed5359_AI8S5359;
		 pASignedTformat5358_AST5358:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5357_ATP5357:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype5357_ATP5357:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5356_APT5356:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType5356_APT5356:=myrec;
		END;
	FUNCTION pAIdentifierDyadic5361_AID5361:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(3);
		 pAIdentifierDyadic5361_AID5361:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc5365_AIL5365:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5365_AIL5365:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5364_AR5364:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5365_AIL5365;
		 pARefval5364_AR5364:=myrec;
		END;
	FUNCTION pADerefRhs5363_ADR5363:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5364_AR5364;
		 pADerefRhs5363_ADR5363:=myrec;
		END;
	FUNCTION pARhsValue5362_ARV5362:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5363_ADR5363;
		 pARhsValue5362_ARV5362:=myrec;
		END;
	FUNCTION pAInt16Signed5371_AI16S5371:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed5371_AI16S5371:=myrec;
		END;
	FUNCTION pASignedTformat5370_AST5370:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed5371_AI16S5371;
		 pASignedTformat5370_AST5370:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5369_ATP5369:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype5369_ATP5369:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5368_APT5368:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pAPredeclaredtypeType5368_APT5368:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc5373_AIL5373:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc5373_AIL5373:=myrec;
		END;
		(*r2 *)
	FUNCTION pALocValue5372_ALV5372:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5373_AIL5373;
		 pALocValue5372_ALV5372:=myrec;
		END;
		(*! try to cast to type: int16*)
	FUNCTION pACastRhs5367_ACR5367:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType5368_APT5368;
		myrec^.arg2:=pALocValue5372_ALV5372;
		 pACastRhs5367_ACR5367:=myrec;
		END;
	FUNCTION pARhsValue5366_ARV5366:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5367_ACR5367;
		 pARhsValue5366_ARV5366:=myrec;
		END;
	FUNCTION pADyadicValue5360_ADV5360:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5362_ARV5362;
		myrec^.arg2:=pARhsValue5366_ARV5366;
		myrec^.fn:=pAIdentifierDyadic5361_AID5361;
		 pADyadicValue5360_ADV5360:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs5355_ACR5355:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType5356_APT5356;
		myrec^.arg2:=pADyadicValue5360_ADV5360;
		 pACastRhs5355_ACR5355:=myrec;
		END;
	FUNCTION pARhsValue5354_ARV5354:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5355_ACR5355;
		 pARhsValue5354_ARV5354:=myrec;
		END;
		(*! Match l *)
	FUNCTION pAIdLoc5376_AIL5376:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5376_AIL5376:=myrec;
		END;
		(*l *)
	FUNCTION pALocValue5375_ALV5375:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5376_AIL5376;
		 pALocValue5375_ALV5375:=myrec;
		END;
	FUNCTION pAGotoMeaning5374_AGM5374:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=gotonode;
		myrec^.dest:=pALocValue5375_ALV5375;
		 pAGotoMeaning5374_AGM5374:=myrec;
		END;
	FUNCTION pAIfMeaning5353_AIM5353:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pARhsValue5354_ARV5354;
		myrec^.action:=pAGotoMeaning5374_AGM5374;
		 pAIfMeaning5353_AIM5353:=myrec;
		END;
	FUNCTION pAAssemblypattern5378_AA5378:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cmp ' );
		pappendp(list,1);
		pappends(list,',word' );
		pappends(list,'  ' );
		pappendp(list,2);
		pappends(list,'\n j' );
		pappendp(list,3);
		pappends(list,' near  ' );
		pappendp(list,0);
		pAAssemblypattern5378_AA5378:=list;
		END;
	FUNCTION pAAssemblesto5377_AA5377:pprintlist;
	begin
		pAAssemblesto5377_AA5377:=pAAssemblypattern5378_AA5378;
		END;
	FUNCTION pASideeffects5388_AS5388:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5388_AS5388:=nil;
		 pASideeffects5388_AS5388:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5389_AUP5389:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5389_AUP5389:=nil;
		 pAUnconditionalPrecond5389_AUP5389:=myrec;
		END;
	FUNCTION IFGOTOW_IFGOTOW:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[5]:=patint_;
		params^[2]:=patregaddrimmediate_;
		params^[0]:=patlabel;
		params^[1]:=patwreg_;
		params^[4]:=patsigned_;
		params^[3]:=patcondition_;
		paramcount:=7;
		meaning:=pAIfMeaning5353_AIM5353;
		matchedAssembler:=pAAssemblesto5377_AA5377;
		END;
		IFGOTOW_IFGOTOW:=myrec;
	END;
	FUNCTION pATypeid5394_AT5394:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ireg  ilcg.pattern@84f665}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5394_AT5394:=myrec;
		END;
	FUNCTION pATypeid5396_AT5396:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ regaddrimmediate  ilcg.pattern@4c8b84}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5396_AT5396:=myrec;
		END;
	FUNCTION pATypeid5398_AT5398:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ condition  ilcg.pattern@a9aa83}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5398_AT5398:=myrec;
		END;
	FUNCTION pATypeid5400_AT5400:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ signed  ilcg.pattern@15e0163}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5400_AT5400:=myrec;
		END;
	FUNCTION pATypeid5402_AT5402:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@2a2ae9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5402_AT5402:=myrec;
		END;
	FUNCTION pAInt8Signed5409_AI8S5409:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed5409_AI8S5409:=myrec;
		END;
	FUNCTION pASignedTformat5408_AST5408:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed5409_AI8S5409;
		 pASignedTformat5408_AST5408:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5407_ATP5407:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype5407_ATP5407:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5406_APT5406:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType5406_APT5406:=myrec;
		END;
	FUNCTION pAIdentifierDyadic5411_AID5411:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(3);
		 pAIdentifierDyadic5411_AID5411:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc5415_AIL5415:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5415_AIL5415:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5414_AR5414:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5415_AIL5415;
		 pARefval5414_AR5414:=myrec;
		END;
	FUNCTION pADerefRhs5413_ADR5413:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5414_AR5414;
		 pADerefRhs5413_ADR5413:=myrec;
		END;
	FUNCTION pARhsValue5412_ARV5412:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5413_ADR5413;
		 pARhsValue5412_ARV5412:=myrec;
		END;
	FUNCTION pASigned5421_AS5421:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned5421_AS5421:=myrec;
		END;
	FUNCTION pASignedTformat5420_AST5420:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned5421_AS5421;
		 pASignedTformat5420_AST5420:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5419_ATP5419:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype5419_ATP5419:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5418_APT5418:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType5418_APT5418:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc5423_AIL5423:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc5423_AIL5423:=myrec;
		END;
		(*r2 *)
	FUNCTION pALocValue5422_ALV5422:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5423_AIL5423;
		 pALocValue5422_ALV5422:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs5417_ACR5417:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType5418_APT5418;
		myrec^.arg2:=pALocValue5422_ALV5422;
		 pACastRhs5417_ACR5417:=myrec;
		END;
	FUNCTION pARhsValue5416_ARV5416:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5417_ACR5417;
		 pARhsValue5416_ARV5416:=myrec;
		END;
	FUNCTION pADyadicValue5410_ADV5410:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5412_ARV5412;
		myrec^.arg2:=pARhsValue5416_ARV5416;
		myrec^.fn:=pAIdentifierDyadic5411_AID5411;
		 pADyadicValue5410_ADV5410:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs5405_ACR5405:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType5406_APT5406;
		myrec^.arg2:=pADyadicValue5410_ADV5410;
		 pACastRhs5405_ACR5405:=myrec;
		END;
	FUNCTION pARhsValue5404_ARV5404:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5405_ACR5405;
		 pARhsValue5404_ARV5404:=myrec;
		END;
		(*! Match l *)
	FUNCTION pAIdLoc5426_AIL5426:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5426_AIL5426:=myrec;
		END;
		(*l *)
	FUNCTION pALocValue5425_ALV5425:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5426_AIL5426;
		 pALocValue5425_ALV5425:=myrec;
		END;
	FUNCTION pAGotoMeaning5424_AGM5424:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=gotonode;
		myrec^.dest:=pALocValue5425_ALV5425;
		 pAGotoMeaning5424_AGM5424:=myrec;
		END;
	FUNCTION pAIfMeaning5403_AIM5403:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pARhsValue5404_ARV5404;
		myrec^.action:=pAGotoMeaning5424_AGM5424;
		 pAIfMeaning5403_AIM5403:=myrec;
		END;
	FUNCTION pAAssemblypattern5428_AA5428:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cmp ' );
		pappendp(list,1);
		pappends(list,',dword' );
		pappends(list,'  ' );
		pappendp(list,2);
		pappends(list,'\n j' );
		pappendp(list,3);
		pappends(list,' near  ' );
		pappendp(list,0);
		pAAssemblypattern5428_AA5428:=list;
		END;
	FUNCTION pAAssemblesto5427_AA5427:pprintlist;
	begin
		pAAssemblesto5427_AA5427:=pAAssemblypattern5428_AA5428;
		END;
	FUNCTION pASideeffects5438_AS5438:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5438_AS5438:=nil;
		 pASideeffects5438_AS5438:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5439_AUP5439:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5439_AUP5439:=nil;
		 pAUnconditionalPrecond5439_AUP5439:=myrec;
		END;
	FUNCTION IFGOTO_IFGOTO:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[5]:=patint_;
		params^[2]:=patregaddrimmediate_;
		params^[0]:=patlabel;
		params^[1]:=patireg_;
		params^[4]:=patsigned_;
		params^[3]:=patcondition_;
		paramcount:=7;
		meaning:=pAIfMeaning5403_AIM5403;
		matchedAssembler:=pAAssemblesto5427_AA5427;
		END;
		IFGOTO_IFGOTO:=myrec;
	END;
	FUNCTION pATypeid5444_AT5444:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ureg  ilcg.pattern@453dd5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5444_AT5444:=myrec;
		END;
	FUNCTION pATypeid5446_AT5446:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ureg  ilcg.pattern@453dd5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5446_AT5446:=myrec;
		END;
	FUNCTION pATypeid5448_AT5448:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ unsignedcondition  ilcg.pattern@174e78a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5448_AT5448:=myrec;
		END;
	FUNCTION pATypeid5450_AT5450:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ signed  ilcg.pattern@15e0163}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5450_AT5450:=myrec;
		END;
	FUNCTION pATypeid5452_AT5452:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@2a2ae9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5452_AT5452:=myrec;
		END;
	FUNCTION pAInt8Signed5459_AI8S5459:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed5459_AI8S5459:=myrec;
		END;
	FUNCTION pASignedTformat5458_AST5458:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed5459_AI8S5459;
		 pASignedTformat5458_AST5458:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5457_ATP5457:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype5457_ATP5457:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5456_APT5456:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType5456_APT5456:=myrec;
		END;
	FUNCTION pAIdentifierDyadic5461_AID5461:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(3);
		 pAIdentifierDyadic5461_AID5461:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc5465_AIL5465:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5465_AIL5465:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5464_AR5464:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5465_AIL5465;
		 pARefval5464_AR5464:=myrec;
		END;
	FUNCTION pADerefRhs5463_ADR5463:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5464_AR5464;
		 pADerefRhs5463_ADR5463:=myrec;
		END;
	FUNCTION pARhsValue5462_ARV5462:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5463_ADR5463;
		 pARhsValue5462_ARV5462:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc5469_AIL5469:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc5469_AIL5469:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5468_AR5468:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5469_AIL5469;
		 pARefval5468_AR5468:=myrec;
		END;
	FUNCTION pADerefRhs5467_ADR5467:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5468_AR5468;
		 pADerefRhs5467_ADR5467:=myrec;
		END;
	FUNCTION pARhsValue5466_ARV5466:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5467_ADR5467;
		 pARhsValue5466_ARV5466:=myrec;
		END;
	FUNCTION pADyadicValue5460_ADV5460:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5462_ARV5462;
		myrec^.arg2:=pARhsValue5466_ARV5466;
		myrec^.fn:=pAIdentifierDyadic5461_AID5461;
		 pADyadicValue5460_ADV5460:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs5455_ACR5455:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType5456_APT5456;
		myrec^.arg2:=pADyadicValue5460_ADV5460;
		 pACastRhs5455_ACR5455:=myrec;
		END;
	FUNCTION pARhsValue5454_ARV5454:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5455_ACR5455;
		 pARhsValue5454_ARV5454:=myrec;
		END;
		(*! Match l *)
	FUNCTION pAIdLoc5472_AIL5472:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5472_AIL5472:=myrec;
		END;
		(*l *)
	FUNCTION pALocValue5471_ALV5471:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5472_AIL5472;
		 pALocValue5471_ALV5471:=myrec;
		END;
	FUNCTION pAGotoMeaning5470_AGM5470:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=gotonode;
		myrec^.dest:=pALocValue5471_ALV5471;
		 pAGotoMeaning5470_AGM5470:=myrec;
		END;
	FUNCTION pAIfMeaning5453_AIM5453:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pARhsValue5454_ARV5454;
		myrec^.action:=pAGotoMeaning5470_AGM5470;
		 pAIfMeaning5453_AIM5453:=myrec;
		END;
	FUNCTION pAAssemblypattern5474_AA5474:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cmp ' );
		pappendp(list,1);
		pappends(list,',dword' );
		pappends(list,'  ' );
		pappendp(list,2);
		pappends(list,'\n j' );
		pappendp(list,3);
		pappends(list,' near  ' );
		pappendp(list,0);
		pAAssemblypattern5474_AA5474:=list;
		END;
	FUNCTION pAAssemblesto5473_AA5473:pprintlist;
	begin
		pAAssemblesto5473_AA5473:=pAAssemblypattern5474_AA5474;
		END;
	FUNCTION pASideeffects5484_AS5484:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5484_AS5484:=nil;
		 pASideeffects5484_AS5484:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5485_AUP5485:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5485_AUP5485:=nil;
		 pAUnconditionalPrecond5485_AUP5485:=myrec;
		END;
	FUNCTION IFUGOTO_IFUGOTO:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[5]:=patint_;
		params^[2]:=patureg_;
		params^[0]:=patlabel;
		params^[1]:=patureg_;
		params^[4]:=patsigned_;
		params^[3]:=patunsignedcondition_;
		paramcount:=7;
		meaning:=pAIfMeaning5453_AIM5453;
		matchedAssembler:=pAAssemblesto5473_AA5473;
		END;
		IFUGOTO_IFUGOTO:=myrec;
	END;
	FUNCTION pATypeid5488_AT5488:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ signedreg  ilcg.pattern@8f6d64}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5488_AT5488:=myrec;
		END;
	FUNCTION pATypeid5490_AT5490:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ regaddrimmediate  ilcg.pattern@4c8b84}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5490_AT5490:=myrec;
		END;
	FUNCTION pATypeid5492_AT5492:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ condition  ilcg.pattern@a9aa83}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5492_AT5492:=myrec;
		END;
	FUNCTION pATypeid5496_AT5496:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5496_AT5496:=myrec;
		END;
	FUNCTION pATypeid5498_AT5498:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5498_AT5498:=myrec;
		END;
	FUNCTION pATypeid5505_AT5505:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t2  ilcg.Param@1ae3050}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid5505_AT5505:=myrec;
		END;
	FUNCTION pATypeidType5504_ATT5504:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5505_AT5505;
		 pATypeidType5504_ATT5504:=myrec;
		END;
	FUNCTION pAIdentifierDyadic5507_AID5507:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdentifierDyadic5507_AID5507:=myrec;
		END;
	FUNCTION pATypeid5511_AT5511:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@3bfb66}
		myrec^.tag:=param;
		myrec^.index:= 6;
		 pATypeid5511_AT5511:=myrec;
		END;
	FUNCTION pATypeidType5510_ATT5510:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5511_AT5511;
		 pATypeidType5510_ATT5510:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc5515_AIL5515:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5515_AIL5515:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5514_AR5514:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5515_AIL5515;
		 pARefval5514_AR5514:=myrec;
		END;
	FUNCTION pADerefRhs5513_ADR5513:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5514_AR5514;
		 pADerefRhs5513_ADR5513:=myrec;
		END;
	FUNCTION pARhsValue5512_ARV5512:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5513_ADR5513;
		 pARhsValue5512_ARV5512:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5509_ACR5509:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5510_ATT5510;
		myrec^.arg2:=pARhsValue5512_ARV5512;
		 pACastRhs5509_ACR5509:=myrec;
		END;
	FUNCTION pARhsValue5508_ARV5508:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5509_ACR5509;
		 pARhsValue5508_ARV5508:=myrec;
		END;
	FUNCTION pATypeid5519_AT5519:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@3bfb66}
		myrec^.tag:=param;
		myrec^.index:= 6;
		 pATypeid5519_AT5519:=myrec;
		END;
	FUNCTION pATypeidType5518_ATT5518:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5519_AT5519;
		 pATypeidType5518_ATT5518:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc5521_AIL5521:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5521_AIL5521:=myrec;
		END;
		(*r2 *)
	FUNCTION pALocValue5520_ALV5520:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5521_AIL5521;
		 pALocValue5520_ALV5520:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5517_ACR5517:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5518_ATT5518;
		myrec^.arg2:=pALocValue5520_ALV5520;
		 pACastRhs5517_ACR5517:=myrec;
		END;
	FUNCTION pARhsValue5516_ARV5516:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5517_ACR5517;
		 pARhsValue5516_ARV5516:=myrec;
		END;
	FUNCTION pADyadicValue5506_ADV5506:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5508_ARV5508;
		myrec^.arg2:=pARhsValue5516_ARV5516;
		myrec^.fn:=pAIdentifierDyadic5507_AID5507;
		 pADyadicValue5506_ADV5506:=myrec;
		END;
		(*! try to cast to type: t2*)
	FUNCTION pACastRhs5503_ACR5503:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5504_ATT5504;
		myrec^.arg2:=pADyadicValue5506_ADV5506;
		 pACastRhs5503_ACR5503:=myrec;
		END;
	FUNCTION pARhsValue5502_ARV5502:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5503_ACR5503;
		 pARhsValue5502_ARV5502:=myrec;
		END;
	FUNCTION pATypeid5528_AT5528:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@3bfb66}
		myrec^.tag:=param;
		myrec^.index:= 6;
		 pATypeid5528_AT5528:=myrec;
		END;
	FUNCTION pATypeidType5527_ATT5527:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5528_AT5528;
		 pATypeidType5527_ATT5527:=myrec;
		END;
	FUNCTION pAReference5526_AR5526:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType5527_ATT5527;
		 pAReference5526_AR5526:=myrec;
		END;
	FUNCTION pAReftypeType5525_ART5525:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference5526_AR5526;
		 pAReftypeType5525_ART5525:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc5529_AIL5529:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(5);
		 pAIdLoc5529_AIL5529:=myrec;
		END;
		(*! try to cast to type: ref t*)
	FUNCTION pARefcastRefval5524_ARR5524:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType5525_ART5525;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc5529_AIL5529;
		 pARefcastRefval5524_ARR5524:=myrec;
		END;
	FUNCTION pATypeid5533_AT5533:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@3bfb66}
		myrec^.tag:=param;
		myrec^.index:= 6;
		 pATypeid5533_AT5533:=myrec;
		END;
	FUNCTION pATypeidType5532_ATT5532:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5533_AT5533;
		 pATypeidType5532_ATT5532:=myrec;
		END;
		(*! Match r3 *)
	FUNCTION pAIdLoc5537_AIL5537:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(4);
		 pAIdLoc5537_AIL5537:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5536_AR5536:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5537_AIL5537;
		 pARefval5536_AR5536:=myrec;
		END;
	FUNCTION pADerefRhs5535_ADR5535:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5536_AR5536;
		 pADerefRhs5535_ADR5535:=myrec;
		END;
	FUNCTION pARhsValue5534_ARV5534:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5535_ADR5535;
		 pARhsValue5534_ARV5534:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5531_ACR5531:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5532_ATT5532;
		myrec^.arg2:=pARhsValue5534_ARV5534;
		 pACastRhs5531_ACR5531:=myrec;
		END;
	FUNCTION pARhsValue5530_ARV5530:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5531_ACR5531;
		 pARhsValue5530_ARV5530:=myrec;
		END;
	FUNCTION pAAssign5523_AA5523:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue5530_ARV5530;
		myrec^.dest:=pARefcastRefval5524_ARR5524;
		 pAAssign5523_AA5523:=myrec;
		END;
	FUNCTION pAAssignMeaning5522_AAM5522:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign5523_AA5523;
		 pAAssignMeaning5522_AAM5522:=myrec;
		END;
	FUNCTION pAIfMeaning5501_AIM5501:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pARhsValue5502_ARV5502;
		myrec^.action:=pAAssignMeaning5522_AAM5522;
		 pAIfMeaning5501_AIM5501:=myrec;
		END;
	FUNCTION pAAssemblypattern5539_AA5539:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cmp ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,6);
		pappends(list,'  ' );
		pappendp(list,1);
		pappends(list,'\n mov ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,6);
		pappendp(list,5);
		pappends(list,'\n cmov' );
		pappendp(list,2);
		pappends(list,' ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,4);
		pappends(list,'\n mov ' );
		pappendp(list,6);
		pappendp(list,5);
		pappends(list,',' );
		pappendp(list,0);
		pAAssemblypattern5539_AA5539:=list;
		END;
	FUNCTION pAAssemblesto5538_AA5538:pprintlist;
	begin
		pAAssemblesto5538_AA5538:=pAAssemblypattern5539_AA5539;
		END;
	FUNCTION pASideeffects5562_AS5562:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5562_AS5562:=nil;
		 pASideeffects5562_AS5562:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5563_AUP5563:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5563_AUP5563:=nil;
		 pAUnconditionalPrecond5563_AUP5563:=myrec;
		END;
	FUNCTION IFASSp6_IFASS6:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[4]:=patmaddrmode_;
		params^[1]:=patregaddrimmediate_;
		params^[0]:=patsignedreg_;
		params^[6]:=typeparam;
		params^[3]:=typeparam;
		params^[5]:=patmaddrmode_;
		params^[2]:=patcondition_;
		paramcount:=8;
		meaning:=pAIfMeaning5501_AIM5501;
		matchedAssembler:=pAAssemblesto5538_AA5538;
		END;
		IFASSp6_IFASS6:=myrec;
	END;
	FUNCTION pATypeid5566_AT5566:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ signedreg  ilcg.pattern@8f6d64}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5566_AT5566:=myrec;
		END;
	FUNCTION pATypeid5568_AT5568:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ acc  ilcg.pattern@fde0d5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5568_AT5568:=myrec;
		END;
	FUNCTION pATypeid5570_AT5570:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5570_AT5570:=myrec;
		END;
	FUNCTION pATypeid5574_AT5574:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ equals  ilcg.pattern@15bd8f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5574_AT5574:=myrec;
		END;
	FUNCTION pATypeid5581_AT5581:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t2  ilcg.Param@1ac9683}
		myrec^.tag:=param;
		myrec^.index:= 5;
		 pATypeid5581_AT5581:=myrec;
		END;
	FUNCTION pATypeidType5580_ATT5580:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5581_AT5581;
		 pATypeidType5580_ATT5580:=myrec;
		END;
	FUNCTION pAIdentifierDyadic5583_AID5583:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(4);
		 pAIdentifierDyadic5583_AID5583:=myrec;
		END;
	FUNCTION pATypeid5587_AT5587:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@1b277f0}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid5587_AT5587:=myrec;
		END;
	FUNCTION pATypeidType5586_ATT5586:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5587_AT5587;
		 pATypeidType5586_ATT5586:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc5591_AIL5591:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc5591_AIL5591:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5590_AR5590:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5591_AIL5591;
		 pARefval5590_AR5590:=myrec;
		END;
	FUNCTION pADerefRhs5589_ADR5589:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5590_AR5590;
		 pADerefRhs5589_ADR5589:=myrec;
		END;
	FUNCTION pARhsValue5588_ARV5588:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5589_ADR5589;
		 pARhsValue5588_ARV5588:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5585_ACR5585:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5586_ATT5586;
		myrec^.arg2:=pARhsValue5588_ARV5588;
		 pACastRhs5585_ACR5585:=myrec;
		END;
	FUNCTION pARhsValue5584_ARV5584:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5585_ACR5585;
		 pARhsValue5584_ARV5584:=myrec;
		END;
	FUNCTION pATypeid5595_AT5595:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@1b277f0}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid5595_AT5595:=myrec;
		END;
	FUNCTION pATypeidType5594_ATT5594:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5595_AT5595;
		 pATypeidType5594_ATT5594:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc5597_AIL5597:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5597_AIL5597:=myrec;
		END;
		(*r2 *)
	FUNCTION pALocValue5596_ALV5596:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5597_AIL5597;
		 pALocValue5596_ALV5596:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5593_ACR5593:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5594_ATT5594;
		myrec^.arg2:=pALocValue5596_ALV5596;
		 pACastRhs5593_ACR5593:=myrec;
		END;
	FUNCTION pARhsValue5592_ARV5592:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5593_ACR5593;
		 pARhsValue5592_ARV5592:=myrec;
		END;
	FUNCTION pADyadicValue5582_ADV5582:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5584_ARV5584;
		myrec^.arg2:=pARhsValue5592_ARV5592;
		myrec^.fn:=pAIdentifierDyadic5583_AID5583;
		 pADyadicValue5582_ADV5582:=myrec;
		END;
		(*! try to cast to type: t2*)
	FUNCTION pACastRhs5579_ACR5579:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5580_ATT5580;
		myrec^.arg2:=pADyadicValue5582_ADV5582;
		 pACastRhs5579_ACR5579:=myrec;
		END;
	FUNCTION pARhsValue5578_ARV5578:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5579_ACR5579;
		 pARhsValue5578_ARV5578:=myrec;
		END;
	FUNCTION pATypeid5604_AT5604:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@1b277f0}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid5604_AT5604:=myrec;
		END;
	FUNCTION pATypeidType5603_ATT5603:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5604_AT5604;
		 pATypeidType5603_ATT5603:=myrec;
		END;
	FUNCTION pAReference5602_AR5602:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType5603_ATT5603;
		 pAReference5602_AR5602:=myrec;
		END;
	FUNCTION pAReftypeType5601_ART5601:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference5602_AR5602;
		 pAReftypeType5601_ART5601:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc5605_AIL5605:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc5605_AIL5605:=myrec;
		END;
		(*! try to cast to type: ref t*)
	FUNCTION pARefcastRefval5600_ARR5600:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType5601_ART5601;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc5605_AIL5605;
		 pARefcastRefval5600_ARR5600:=myrec;
		END;
	FUNCTION pATypeid5609_AT5609:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@1b277f0}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid5609_AT5609:=myrec;
		END;
	FUNCTION pATypeidType5608_ATT5608:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5609_AT5609;
		 pATypeidType5608_ATT5608:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc5613_AIL5613:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5613_AIL5613:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5612_AR5612:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5613_AIL5613;
		 pARefval5612_AR5612:=myrec;
		END;
	FUNCTION pADerefRhs5611_ADR5611:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5612_AR5612;
		 pADerefRhs5611_ADR5611:=myrec;
		END;
	FUNCTION pARhsValue5610_ARV5610:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5611_ADR5611;
		 pARhsValue5610_ARV5610:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5607_ACR5607:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5608_ATT5608;
		myrec^.arg2:=pARhsValue5610_ARV5610;
		 pACastRhs5607_ACR5607:=myrec;
		END;
	FUNCTION pARhsValue5606_ARV5606:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5607_ACR5607;
		 pARhsValue5606_ARV5606:=myrec;
		END;
	FUNCTION pAAssign5599_AA5599:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue5606_ARV5606;
		myrec^.dest:=pARefcastRefval5600_ARR5600;
		 pAAssign5599_AA5599:=myrec;
		END;
	FUNCTION pAAssignMeaning5598_AAM5598:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign5599_AA5599;
		 pAAssignMeaning5598_AAM5598:=myrec;
		END;
	FUNCTION pAIfMeaning5577_AIM5577:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pARhsValue5578_ARV5578;
		myrec^.action:=pAAssignMeaning5598_AAM5598;
		 pAIfMeaning5577_AIM5577:=myrec;
		END;
	FUNCTION pAAssemblypattern5615_AA5615:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cmpxchg ' );
		pappendp(list,3);
		pappendp(list,2);
		pappends(list,',' );
		pappends(list,'  ' );
		pappendp(list,0);
		pAAssemblypattern5615_AA5615:=list;
		END;
	FUNCTION pAAssemblesto5614_AA5614:pprintlist;
	begin
		pAAssemblesto5614_AA5614:=pAAssemblypattern5615_AA5615;
		END;
	FUNCTION pASideeffects5622_AS5622:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5622_AS5622:=nil;
		 pASideeffects5622_AS5622:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5623_AUP5623:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5623_AUP5623:=nil;
		 pAUnconditionalPrecond5623_AUP5623:=myrec;
		END;
	FUNCTION IFASS_IFASS:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patacc_;
		params^[0]:=patsignedreg_;
		params^[3]:=typeparam;
		params^[5]:=typeparam;
		params^[2]:=patmaddrmode_;
		params^[4]:=patequals_;
		paramcount:=7;
		meaning:=pAIfMeaning5577_AIM5577;
		matchedAssembler:=pAAssemblesto5614_AA5614;
		END;
		IFASS_IFASS:=myrec;
	END;
	FUNCTION pATypeid5626_AT5626:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ condition  ilcg.pattern@a9aa83}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5626_AT5626:=myrec;
		END;
	FUNCTION pATypeid5628_AT5628:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5628_AT5628:=myrec;
		END;
	FUNCTION pATypeid5630_AT5630:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5630_AT5630:=myrec;
		END;
	FUNCTION pATypeid5632_AT5632:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5632_AT5632:=myrec;
		END;
	FUNCTION pATypeid5634_AT5634:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ signed  ilcg.pattern@15e0163}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5634_AT5634:=myrec;
		END;
	FUNCTION pATypeid5636_AT5636:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ byte  ilcg.pattern@1537060}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5636_AT5636:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc5640_AIL5640:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(3);
		 pAIdLoc5640_AIL5640:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5639_AR5639:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5640_AIL5640;
		 pARefval5639_AR5639:=myrec;
		END;
	FUNCTION pATypeid5644_AT5644:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ b  ilcg.Param@165f5a4}
		myrec^.tag:=param;
		myrec^.index:= 5;
		 pATypeid5644_AT5644:=myrec;
		END;
	FUNCTION pATypeidType5643_ATT5643:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5644_AT5644;
		 pATypeidType5643_ATT5643:=myrec;
		END;
	FUNCTION pAIdentifierDyadic5646_AID5646:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic5646_AID5646:=myrec;
		END;
	FUNCTION pASigned5652_AS5652:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned5652_AS5652:=myrec;
		END;
	FUNCTION pASignedTformat5651_AST5651:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned5652_AS5652;
		 pASignedTformat5651_AST5651:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5650_ATP5650:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype5650_ATP5650:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5649_APT5649:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType5649_APT5649:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc5656_AIL5656:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5656_AIL5656:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5655_AR5655:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5656_AIL5656;
		 pARefval5655_AR5655:=myrec;
		END;
	FUNCTION pADerefRhs5654_ADR5654:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5655_AR5655;
		 pADerefRhs5654_ADR5654:=myrec;
		END;
	FUNCTION pARhsValue5653_ARV5653:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5654_ADR5654;
		 pARhsValue5653_ARV5653:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs5648_ACR5648:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType5649_APT5649;
		myrec^.arg2:=pARhsValue5653_ARV5653;
		 pACastRhs5648_ACR5648:=myrec;
		END;
	FUNCTION pARhsValue5647_ARV5647:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5648_ACR5648;
		 pARhsValue5647_ARV5647:=myrec;
		END;
	FUNCTION pATypeid5660_AT5660:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@16ad447}
		myrec^.tag:=param;
		myrec^.index:= 4;
		 pATypeid5660_AT5660:=myrec;
		END;
	FUNCTION pATypeidType5659_ATT5659:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5660_AT5660;
		 pATypeidType5659_ATT5659:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc5662_AIL5662:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc5662_AIL5662:=myrec;
		END;
		(*rm *)
	FUNCTION pALocValue5661_ALV5661:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5662_AIL5662;
		 pALocValue5661_ALV5661:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5658_ACR5658:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5659_ATT5659;
		myrec^.arg2:=pALocValue5661_ALV5661;
		 pACastRhs5658_ACR5658:=myrec;
		END;
	FUNCTION pARhsValue5657_ARV5657:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5658_ACR5658;
		 pARhsValue5657_ARV5657:=myrec;
		END;
	FUNCTION pADyadicValue5645_ADV5645:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5647_ARV5647;
		myrec^.arg2:=pARhsValue5657_ARV5657;
		myrec^.fn:=pAIdentifierDyadic5646_AID5646;
		 pADyadicValue5645_ADV5645:=myrec;
		END;
		(*! try to cast to type: b*)
	FUNCTION pACastRhs5642_ACR5642:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5643_ATT5643;
		myrec^.arg2:=pADyadicValue5645_ADV5645;
		 pACastRhs5642_ACR5642:=myrec;
		END;
	FUNCTION pARhsValue5641_ARV5641:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5642_ACR5642;
		 pARhsValue5641_ARV5641:=myrec;
		END;
	FUNCTION pAAssign5638_AA5638:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue5641_ARV5641;
		myrec^.dest:=pARefval5639_AR5639;
		 pAAssign5638_AA5638:=myrec;
		END;
	FUNCTION pAAssignMeaning5637_AAM5637:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign5638_AA5638;
		 pAAssignMeaning5637_AAM5637:=myrec;
		END;
	FUNCTION pAAssemblypattern5664_AA5664:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cmp ' );
		pappendp(list,1);
		pappends(list,',' );
		pappends(list,' ' );
		pappendp(list,2);
		pappends(list,'\n set' );
		pappendp(list,0);
		pappends(list,' ' );
		pappendp(list,3);
		pappends(list,'\n sub ' );
		pappendp(list,3);
		pappends(list,',1\n not ' );
		pappendp(list,3);
		pAAssemblypattern5664_AA5664:=list;
		END;
	FUNCTION pAAssemblesto5663_AA5663:pprintlist;
	begin
		pAAssemblesto5663_AA5663:=pAAssemblypattern5664_AA5664;
		END;
	FUNCTION pASideeffects5678_AS5678:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5678_AS5678:=nil;
		 pASideeffects5678_AS5678:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5679_AUP5679:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5679_AUP5679:=nil;
		 pAUnconditionalPrecond5679_AUP5679:=myrec;
		END;
	FUNCTION SET_SET:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[5]:=patbyte_;
		params^[1]:=patreg_;
		params^[4]:=patsigned_;
		params^[3]:=patbreg_;
		params^[2]:=patreg_;
		params^[0]:=patcondition_;
		paramcount:=7;
		meaning:=pAAssignMeaning5637_AAM5637;
		matchedAssembler:=pAAssemblesto5663_AA5663;
		END;
		SET_SET:=myrec;
	END;
	FUNCTION pATypeid5682_AT5682:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ unsignedcondition  ilcg.pattern@174e78a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5682_AT5682:=myrec;
		END;
	FUNCTION pATypeid5684_AT5684:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ureg  ilcg.pattern@453dd5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5684_AT5684:=myrec;
		END;
	FUNCTION pATypeid5686_AT5686:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ureg  ilcg.pattern@453dd5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5686_AT5686:=myrec;
		END;
	FUNCTION pATypeid5688_AT5688:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5688_AT5688:=myrec;
		END;
	FUNCTION pATypeid5690_AT5690:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ unsigned  ilcg.pattern@fc5b01}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5690_AT5690:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc5694_AIL5694:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(3);
		 pAIdLoc5694_AIL5694:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5693_AR5693:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5694_AIL5694;
		 pARefval5693_AR5693:=myrec;
		END;
	FUNCTION pAIdentifierDyadic5696_AID5696:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic5696_AID5696:=myrec;
		END;
	FUNCTION pATypeid5700_AT5700:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@29626a}
		myrec^.tag:=param;
		myrec^.index:= 4;
		 pATypeid5700_AT5700:=myrec;
		END;
	FUNCTION pATypeidType5699_ATT5699:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5700_AT5700;
		 pATypeidType5699_ATT5699:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc5704_AIL5704:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5704_AIL5704:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5703_AR5703:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5704_AIL5704;
		 pARefval5703_AR5703:=myrec;
		END;
	FUNCTION pADerefRhs5702_ADR5702:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5703_AR5703;
		 pADerefRhs5702_ADR5702:=myrec;
		END;
	FUNCTION pARhsValue5701_ARV5701:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5702_ADR5702;
		 pARhsValue5701_ARV5701:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5698_ACR5698:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5699_ATT5699;
		myrec^.arg2:=pARhsValue5701_ARV5701;
		 pACastRhs5698_ACR5698:=myrec;
		END;
	FUNCTION pARhsValue5697_ARV5697:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5698_ACR5698;
		 pARhsValue5697_ARV5697:=myrec;
		END;
	FUNCTION pATypeid5708_AT5708:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@29626a}
		myrec^.tag:=param;
		myrec^.index:= 4;
		 pATypeid5708_AT5708:=myrec;
		END;
	FUNCTION pATypeidType5707_ATT5707:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5708_AT5708;
		 pATypeidType5707_ATT5707:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc5710_AIL5710:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc5710_AIL5710:=myrec;
		END;
		(*rm *)
	FUNCTION pALocValue5709_ALV5709:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5710_AIL5710;
		 pALocValue5709_ALV5709:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5706_ACR5706:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5707_ATT5707;
		myrec^.arg2:=pALocValue5709_ALV5709;
		 pACastRhs5706_ACR5706:=myrec;
		END;
	FUNCTION pARhsValue5705_ARV5705:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5706_ACR5706;
		 pARhsValue5705_ARV5705:=myrec;
		END;
	FUNCTION pADyadicValue5695_ADV5695:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5697_ARV5697;
		myrec^.arg2:=pARhsValue5705_ARV5705;
		myrec^.fn:=pAIdentifierDyadic5696_AID5696;
		 pADyadicValue5695_ADV5695:=myrec;
		END;
	FUNCTION pAAssign5692_AA5692:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue5695_ADV5695;
		myrec^.dest:=pARefval5693_AR5693;
		 pAAssign5692_AA5692:=myrec;
		END;
	FUNCTION pAAssignMeaning5691_AAM5691:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign5692_AA5692;
		 pAAssignMeaning5691_AAM5691:=myrec;
		END;
	FUNCTION pAAssemblypattern5712_AA5712:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cmp ' );
		pappendp(list,1);
		pappends(list,',' );
		pappends(list,' ' );
		pappendp(list,2);
		pappends(list,'\n set' );
		pappendp(list,0);
		pappends(list,' ' );
		pappendp(list,3);
		pappends(list,'\n sub ' );
		pappendp(list,3);
		pappends(list,',1\n not ' );
		pappendp(list,3);
		pAAssemblypattern5712_AA5712:=list;
		END;
	FUNCTION pAAssemblesto5711_AA5711:pprintlist;
	begin
		pAAssemblesto5711_AA5711:=pAAssemblypattern5712_AA5712;
		END;
	FUNCTION pASideeffects5726_AS5726:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5726_AS5726:=nil;
		 pASideeffects5726_AS5726:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5727_AUP5727:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5727_AUP5727:=nil;
		 pAUnconditionalPrecond5727_AUP5727:=myrec;
		END;
	FUNCTION SETU_SETU:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patureg_;
		params^[4]:=patunsigned_;
		params^[3]:=patbreg_;
		params^[2]:=patureg_;
		params^[0]:=patunsignedcondition_;
		paramcount:=6;
		meaning:=pAAssignMeaning5691_AAM5691;
		matchedAssembler:=pAAssemblesto5711_AA5711;
		END;
		SETU_SETU:=myrec;
	END;
	FUNCTION pATypeid5730_AT5730:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ condition  ilcg.pattern@a9aa83}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5730_AT5730:=myrec;
		END;
	FUNCTION pATypeid5732_AT5732:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ wreg  ilcg.pattern@15004dd}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5732_AT5732:=myrec;
		END;
	FUNCTION pATypeid5734_AT5734:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ wreg  ilcg.pattern@15004dd}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5734_AT5734:=myrec;
		END;
	FUNCTION pATypeid5736_AT5736:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5736_AT5736:=myrec;
		END;
	FUNCTION pATypeid5738_AT5738:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ signed  ilcg.pattern@15e0163}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5738_AT5738:=myrec;
		END;
	FUNCTION pATypeid5740_AT5740:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ byte  ilcg.pattern@1537060}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5740_AT5740:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc5744_AIL5744:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(3);
		 pAIdLoc5744_AIL5744:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5743_AR5743:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5744_AIL5744;
		 pARefval5743_AR5743:=myrec;
		END;
	FUNCTION pATypeid5748_AT5748:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ b  ilcg.Param@a50395}
		myrec^.tag:=param;
		myrec^.index:= 5;
		 pATypeid5748_AT5748:=myrec;
		END;
	FUNCTION pATypeidType5747_ATT5747:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5748_AT5748;
		 pATypeidType5747_ATT5747:=myrec;
		END;
	FUNCTION pAIdentifierDyadic5750_AID5750:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic5750_AID5750:=myrec;
		END;
	FUNCTION pAInt16Signed5756_AI16S5756:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed5756_AI16S5756:=myrec;
		END;
	FUNCTION pASignedTformat5755_AST5755:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed5756_AI16S5756;
		 pASignedTformat5755_AST5755:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5754_ATP5754:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype5754_ATP5754:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5753_APT5753:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pAPredeclaredtypeType5753_APT5753:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc5760_AIL5760:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5760_AIL5760:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5759_AR5759:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5760_AIL5760;
		 pARefval5759_AR5759:=myrec;
		END;
	FUNCTION pADerefRhs5758_ADR5758:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5759_AR5759;
		 pADerefRhs5758_ADR5758:=myrec;
		END;
	FUNCTION pARhsValue5757_ARV5757:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5758_ADR5758;
		 pARhsValue5757_ARV5757:=myrec;
		END;
		(*! try to cast to type: int16*)
	FUNCTION pACastRhs5752_ACR5752:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType5753_APT5753;
		myrec^.arg2:=pARhsValue5757_ARV5757;
		 pACastRhs5752_ACR5752:=myrec;
		END;
	FUNCTION pARhsValue5751_ARV5751:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5752_ACR5752;
		 pARhsValue5751_ARV5751:=myrec;
		END;
	FUNCTION pAInt16Signed5766_AI16S5766:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed5766_AI16S5766:=myrec;
		END;
	FUNCTION pASignedTformat5765_AST5765:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed5766_AI16S5766;
		 pASignedTformat5765_AST5765:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5764_ATP5764:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype5764_ATP5764:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5763_APT5763:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pAPredeclaredtypeType5763_APT5763:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc5768_AIL5768:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc5768_AIL5768:=myrec;
		END;
		(*rm *)
	FUNCTION pALocValue5767_ALV5767:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5768_AIL5768;
		 pALocValue5767_ALV5767:=myrec;
		END;
		(*! try to cast to type: int16*)
	FUNCTION pACastRhs5762_ACR5762:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType5763_APT5763;
		myrec^.arg2:=pALocValue5767_ALV5767;
		 pACastRhs5762_ACR5762:=myrec;
		END;
	FUNCTION pARhsValue5761_ARV5761:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5762_ACR5762;
		 pARhsValue5761_ARV5761:=myrec;
		END;
	FUNCTION pADyadicValue5749_ADV5749:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5751_ARV5751;
		myrec^.arg2:=pARhsValue5761_ARV5761;
		myrec^.fn:=pAIdentifierDyadic5750_AID5750;
		 pADyadicValue5749_ADV5749:=myrec;
		END;
		(*! try to cast to type: b*)
	FUNCTION pACastRhs5746_ACR5746:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5747_ATT5747;
		myrec^.arg2:=pADyadicValue5749_ADV5749;
		 pACastRhs5746_ACR5746:=myrec;
		END;
	FUNCTION pARhsValue5745_ARV5745:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5746_ACR5746;
		 pARhsValue5745_ARV5745:=myrec;
		END;
	FUNCTION pAAssign5742_AA5742:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue5745_ARV5745;
		myrec^.dest:=pARefval5743_AR5743;
		 pAAssign5742_AA5742:=myrec;
		END;
	FUNCTION pAAssignMeaning5741_AAM5741:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign5742_AA5742;
		 pAAssignMeaning5741_AAM5741:=myrec;
		END;
	FUNCTION pAAssemblypattern5770_AA5770:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cmp ' );
		pappendp(list,1);
		pappends(list,',' );
		pappends(list,' ' );
		pappendp(list,2);
		pappends(list,'\n set' );
		pappendp(list,0);
		pappends(list,' ' );
		pappendp(list,3);
		pappends(list,'\n sub ' );
		pappendp(list,3);
		pappends(list,',1\n not ' );
		pappendp(list,3);
		pAAssemblypattern5770_AA5770:=list;
		END;
	FUNCTION pAAssemblesto5769_AA5769:pprintlist;
	begin
		pAAssemblesto5769_AA5769:=pAAssemblypattern5770_AA5770;
		END;
	FUNCTION pASideeffects5784_AS5784:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5784_AS5784:=nil;
		 pASideeffects5784_AS5784:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5785_AUP5785:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5785_AUP5785:=nil;
		 pAUnconditionalPrecond5785_AUP5785:=myrec;
		END;
	FUNCTION SETW_SETW:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[5]:=patbyte_;
		params^[1]:=patwreg_;
		params^[4]:=patsigned_;
		params^[3]:=patbreg_;
		params^[2]:=patwreg_;
		params^[0]:=patcondition_;
		paramcount:=7;
		meaning:=pAAssignMeaning5741_AAM5741;
		matchedAssembler:=pAAssemblesto5769_AA5769;
		END;
		SETW_SETW:=myrec;
	END;
	FUNCTION pATypeid5788_AT5788:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ unsignedcondition  ilcg.pattern@174e78a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5788_AT5788:=myrec;
		END;
	FUNCTION pATypeid5790_AT5790:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ uwreg  ilcg.pattern@1bb03ee}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5790_AT5790:=myrec;
		END;
	FUNCTION pATypeid5792_AT5792:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ uwregaddrimmediate  ilcg.pattern@e0f945}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5792_AT5792:=myrec;
		END;
	FUNCTION pATypeid5794_AT5794:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5794_AT5794:=myrec;
		END;
	FUNCTION pATypeid5796_AT5796:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ unsigned  ilcg.pattern@fc5b01}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5796_AT5796:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc5800_AIL5800:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(3);
		 pAIdLoc5800_AIL5800:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5799_AR5799:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5800_AIL5800;
		 pARefval5799_AR5799:=myrec;
		END;
	FUNCTION pAIdentifierDyadic5802_AID5802:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic5802_AID5802:=myrec;
		END;
	FUNCTION pATypeid5806_AT5806:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@1a59727}
		myrec^.tag:=param;
		myrec^.index:= 4;
		 pATypeid5806_AT5806:=myrec;
		END;
	FUNCTION pATypeidType5805_ATT5805:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5806_AT5806;
		 pATypeidType5805_ATT5805:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc5810_AIL5810:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5810_AIL5810:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5809_AR5809:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5810_AIL5810;
		 pARefval5809_AR5809:=myrec;
		END;
	FUNCTION pADerefRhs5808_ADR5808:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5809_AR5809;
		 pADerefRhs5808_ADR5808:=myrec;
		END;
	FUNCTION pARhsValue5807_ARV5807:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5808_ADR5808;
		 pARhsValue5807_ARV5807:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5804_ACR5804:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5805_ATT5805;
		myrec^.arg2:=pARhsValue5807_ARV5807;
		 pACastRhs5804_ACR5804:=myrec;
		END;
	FUNCTION pARhsValue5803_ARV5803:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5804_ACR5804;
		 pARhsValue5803_ARV5803:=myrec;
		END;
	FUNCTION pAUint16Unsigned5816_AU16U5816:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16;
		 pAUint16Unsigned5816_AU16U5816:=myrec;
		END;
	FUNCTION pAUnsignedTformat5815_AUT5815:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint16Unsigned5816_AU16U5816;
		 pAUnsignedTformat5815_AUT5815:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5814_ATP5814:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pATformatPredeclaredtype5814_ATP5814:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5813_APT5813:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pAPredeclaredtypeType5813_APT5813:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc5818_AIL5818:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc5818_AIL5818:=myrec;
		END;
		(*rm *)
	FUNCTION pALocValue5817_ALV5817:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5818_AIL5818;
		 pALocValue5817_ALV5817:=myrec;
		END;
		(*! try to cast to type: uint16*)
	FUNCTION pACastRhs5812_ACR5812:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType5813_APT5813;
		myrec^.arg2:=pALocValue5817_ALV5817;
		 pACastRhs5812_ACR5812:=myrec;
		END;
	FUNCTION pARhsValue5811_ARV5811:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5812_ACR5812;
		 pARhsValue5811_ARV5811:=myrec;
		END;
	FUNCTION pADyadicValue5801_ADV5801:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5803_ARV5803;
		myrec^.arg2:=pARhsValue5811_ARV5811;
		myrec^.fn:=pAIdentifierDyadic5802_AID5802;
		 pADyadicValue5801_ADV5801:=myrec;
		END;
	FUNCTION pAAssign5798_AA5798:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue5801_ADV5801;
		myrec^.dest:=pARefval5799_AR5799;
		 pAAssign5798_AA5798:=myrec;
		END;
	FUNCTION pAAssignMeaning5797_AAM5797:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign5798_AA5798;
		 pAAssignMeaning5797_AAM5797:=myrec;
		END;
	FUNCTION pAAssemblypattern5820_AA5820:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cmp ' );
		pappendp(list,1);
		pappends(list,',' );
		pappends(list,' ' );
		pappendp(list,2);
		pappends(list,'\n set' );
		pappendp(list,0);
		pappends(list,' ' );
		pappendp(list,3);
		pappends(list,'\n sub ' );
		pappendp(list,3);
		pappends(list,',1\n not ' );
		pappendp(list,3);
		pAAssemblypattern5820_AA5820:=list;
		END;
	FUNCTION pAAssemblesto5819_AA5819:pprintlist;
	begin
		pAAssemblesto5819_AA5819:=pAAssemblypattern5820_AA5820;
		END;
	FUNCTION pASideeffects5834_AS5834:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5834_AS5834:=nil;
		 pASideeffects5834_AS5834:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5835_AUP5835:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5835_AUP5835:=nil;
		 pAUnconditionalPrecond5835_AUP5835:=myrec;
		END;
	FUNCTION SETUW_SETUW:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patuwreg_;
		params^[4]:=patunsigned_;
		params^[3]:=patbreg_;
		params^[2]:=patuwregaddrimmediate_;
		params^[0]:=patunsignedcondition_;
		paramcount:=6;
		meaning:=pAAssignMeaning5797_AAM5797;
		matchedAssembler:=pAAssemblesto5819_AA5819;
		END;
		SETUW_SETUW:=myrec;
	END;
	FUNCTION pATypeid5838_AT5838:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ condition  ilcg.pattern@a9aa83}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5838_AT5838:=myrec;
		END;
	FUNCTION pATypeid5840_AT5840:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bireg  ilcg.pattern@ef7d74}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5840_AT5840:=myrec;
		END;
	FUNCTION pATypeid5842_AT5842:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bireg  ilcg.pattern@ef7d74}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5842_AT5842:=myrec;
		END;
	FUNCTION pATypeid5844_AT5844:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5844_AT5844:=myrec;
		END;
	FUNCTION pATypeid5846_AT5846:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ signed  ilcg.pattern@15e0163}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5846_AT5846:=myrec;
		END;
	FUNCTION pATypeid5848_AT5848:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ byte  ilcg.pattern@1537060}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5848_AT5848:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc5852_AIL5852:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(3);
		 pAIdLoc5852_AIL5852:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5851_AR5851:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5852_AIL5852;
		 pARefval5851_AR5851:=myrec;
		END;
	FUNCTION pATypeid5856_AT5856:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ b  ilcg.Param@16e3762}
		myrec^.tag:=param;
		myrec^.index:= 5;
		 pATypeid5856_AT5856:=myrec;
		END;
	FUNCTION pATypeidType5855_ATT5855:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5856_AT5856;
		 pATypeidType5855_ATT5855:=myrec;
		END;
	FUNCTION pAIdentifierDyadic5858_AID5858:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic5858_AID5858:=myrec;
		END;
	FUNCTION pATypeid5862_AT5862:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@13ca972}
		myrec^.tag:=param;
		myrec^.index:= 4;
		 pATypeid5862_AT5862:=myrec;
		END;
	FUNCTION pATypeidType5861_ATT5861:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5862_AT5862;
		 pATypeidType5861_ATT5861:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc5866_AIL5866:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5866_AIL5866:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5865_AR5865:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5866_AIL5866;
		 pARefval5865_AR5865:=myrec;
		END;
	FUNCTION pADerefRhs5864_ADR5864:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5865_AR5865;
		 pADerefRhs5864_ADR5864:=myrec;
		END;
	FUNCTION pARhsValue5863_ARV5863:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5864_ADR5864;
		 pARhsValue5863_ARV5863:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5860_ACR5860:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5861_ATT5861;
		myrec^.arg2:=pARhsValue5863_ARV5863;
		 pACastRhs5860_ACR5860:=myrec;
		END;
	FUNCTION pARhsValue5859_ARV5859:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5860_ACR5860;
		 pARhsValue5859_ARV5859:=myrec;
		END;
	FUNCTION pAInt8Signed5872_AI8S5872:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed5872_AI8S5872:=myrec;
		END;
	FUNCTION pASignedTformat5871_AST5871:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed5872_AI8S5872;
		 pASignedTformat5871_AST5871:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5870_ATP5870:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype5870_ATP5870:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5869_APT5869:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType5869_APT5869:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc5874_AIL5874:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc5874_AIL5874:=myrec;
		END;
		(*rm *)
	FUNCTION pALocValue5873_ALV5873:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5874_AIL5874;
		 pALocValue5873_ALV5873:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs5868_ACR5868:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType5869_APT5869;
		myrec^.arg2:=pALocValue5873_ALV5873;
		 pACastRhs5868_ACR5868:=myrec;
		END;
	FUNCTION pARhsValue5867_ARV5867:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5868_ACR5868;
		 pARhsValue5867_ARV5867:=myrec;
		END;
	FUNCTION pADyadicValue5857_ADV5857:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5859_ARV5859;
		myrec^.arg2:=pARhsValue5867_ARV5867;
		myrec^.fn:=pAIdentifierDyadic5858_AID5858;
		 pADyadicValue5857_ADV5857:=myrec;
		END;
		(*! try to cast to type: b*)
	FUNCTION pACastRhs5854_ACR5854:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5855_ATT5855;
		myrec^.arg2:=pADyadicValue5857_ADV5857;
		 pACastRhs5854_ACR5854:=myrec;
		END;
	FUNCTION pARhsValue5853_ARV5853:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5854_ACR5854;
		 pARhsValue5853_ARV5853:=myrec;
		END;
	FUNCTION pAAssign5850_AA5850:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue5853_ARV5853;
		myrec^.dest:=pARefval5851_AR5851;
		 pAAssign5850_AA5850:=myrec;
		END;
	FUNCTION pAAssignMeaning5849_AAM5849:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign5850_AA5850;
		 pAAssignMeaning5849_AAM5849:=myrec;
		END;
	FUNCTION pAAssemblypattern5876_AA5876:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cmp ' );
		pappendp(list,1);
		pappends(list,',' );
		pappends(list,' ' );
		pappendp(list,2);
		pappends(list,'\n set' );
		pappendp(list,0);
		pappends(list,' ' );
		pappendp(list,3);
		pappends(list,'\n sub ' );
		pappendp(list,3);
		pappends(list,',1\n not ' );
		pappendp(list,3);
		pAAssemblypattern5876_AA5876:=list;
		END;
	FUNCTION pAAssemblesto5875_AA5875:pprintlist;
	begin
		pAAssemblesto5875_AA5875:=pAAssemblypattern5876_AA5876;
		END;
	FUNCTION pASideeffects5890_AS5890:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5890_AS5890:=nil;
		 pASideeffects5890_AS5890:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5891_AUP5891:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5891_AUP5891:=nil;
		 pAUnconditionalPrecond5891_AUP5891:=myrec;
		END;
	FUNCTION SETB_SETB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[5]:=patbyte_;
		params^[1]:=patbireg_;
		params^[4]:=patsigned_;
		params^[3]:=patbreg_;
		params^[2]:=patbireg_;
		params^[0]:=patcondition_;
		paramcount:=7;
		meaning:=pAAssignMeaning5849_AAM5849;
		matchedAssembler:=pAAssemblesto5875_AA5875;
		END;
		SETB_SETB:=myrec;
	END;
	FUNCTION pATypeid5894_AT5894:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ unsignedcondition  ilcg.pattern@174e78a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5894_AT5894:=myrec;
		END;
	FUNCTION pATypeid5896_AT5896:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bureg  ilcg.pattern@130b13c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5896_AT5896:=myrec;
		END;
	FUNCTION pATypeid5898_AT5898:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bureg  ilcg.pattern@130b13c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5898_AT5898:=myrec;
		END;
	FUNCTION pATypeid5900_AT5900:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5900_AT5900:=myrec;
		END;
	FUNCTION pATypeid5902_AT5902:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ unsigned  ilcg.pattern@fc5b01}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5902_AT5902:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc5906_AIL5906:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(3);
		 pAIdLoc5906_AIL5906:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5905_AR5905:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5906_AIL5906;
		 pARefval5905_AR5905:=myrec;
		END;
	FUNCTION pAIdentifierDyadic5908_AID5908:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic5908_AID5908:=myrec;
		END;
	FUNCTION pATypeid5912_AT5912:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@15decc0}
		myrec^.tag:=param;
		myrec^.index:= 4;
		 pATypeid5912_AT5912:=myrec;
		END;
	FUNCTION pATypeidType5911_ATT5911:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5912_AT5912;
		 pATypeidType5911_ATT5911:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc5916_AIL5916:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5916_AIL5916:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5915_AR5915:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5916_AIL5916;
		 pARefval5915_AR5915:=myrec;
		END;
	FUNCTION pADerefRhs5914_ADR5914:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5915_AR5915;
		 pADerefRhs5914_ADR5914:=myrec;
		END;
	FUNCTION pARhsValue5913_ARV5913:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5914_ADR5914;
		 pARhsValue5913_ARV5913:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5910_ACR5910:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5911_ATT5911;
		myrec^.arg2:=pARhsValue5913_ARV5913;
		 pACastRhs5910_ACR5910:=myrec;
		END;
	FUNCTION pARhsValue5909_ARV5909:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5910_ACR5910;
		 pARhsValue5909_ARV5909:=myrec;
		END;
	FUNCTION pAInt8Signed5922_AI8S5922:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed5922_AI8S5922:=myrec;
		END;
	FUNCTION pASignedTformat5921_AST5921:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed5922_AI8S5922;
		 pASignedTformat5921_AST5921:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5920_ATP5920:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype5920_ATP5920:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5919_APT5919:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType5919_APT5919:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc5924_AIL5924:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc5924_AIL5924:=myrec;
		END;
		(*rm *)
	FUNCTION pALocValue5923_ALV5923:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5924_AIL5924;
		 pALocValue5923_ALV5923:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs5918_ACR5918:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType5919_APT5919;
		myrec^.arg2:=pALocValue5923_ALV5923;
		 pACastRhs5918_ACR5918:=myrec;
		END;
	FUNCTION pARhsValue5917_ARV5917:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5918_ACR5918;
		 pARhsValue5917_ARV5917:=myrec;
		END;
	FUNCTION pADyadicValue5907_ADV5907:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5909_ARV5909;
		myrec^.arg2:=pARhsValue5917_ARV5917;
		myrec^.fn:=pAIdentifierDyadic5908_AID5908;
		 pADyadicValue5907_ADV5907:=myrec;
		END;
	FUNCTION pAAssign5904_AA5904:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue5907_ADV5907;
		myrec^.dest:=pARefval5905_AR5905;
		 pAAssign5904_AA5904:=myrec;
		END;
	FUNCTION pAAssignMeaning5903_AAM5903:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign5904_AA5904;
		 pAAssignMeaning5903_AAM5903:=myrec;
		END;
	FUNCTION pAAssemblypattern5926_AA5926:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cmp ' );
		pappendp(list,1);
		pappends(list,',' );
		pappends(list,' ' );
		pappendp(list,2);
		pappends(list,'\n set' );
		pappendp(list,0);
		pappends(list,' ' );
		pappendp(list,3);
		pappends(list,'\n sub ' );
		pappendp(list,3);
		pappends(list,',1\n not ' );
		pappendp(list,3);
		pAAssemblypattern5926_AA5926:=list;
		END;
	FUNCTION pAAssemblesto5925_AA5925:pprintlist;
	begin
		pAAssemblesto5925_AA5925:=pAAssemblypattern5926_AA5926;
		END;
	FUNCTION pASideeffects5940_AS5940:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5940_AS5940:=nil;
		 pASideeffects5940_AS5940:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5941_AUP5941:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5941_AUP5941:=nil;
		 pAUnconditionalPrecond5941_AUP5941:=myrec;
		END;
	FUNCTION SETUB_SETUB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbureg_;
		params^[4]:=patunsigned_;
		params^[3]:=patbreg_;
		params^[2]:=patbureg_;
		params^[0]:=patunsignedcondition_;
		paramcount:=6;
		meaning:=pAAssignMeaning5903_AAM5903;
		matchedAssembler:=pAAssemblesto5925_AA5925;
		END;
		SETUB_SETUB:=myrec;
	END;
	FUNCTION pATypeid5944_AT5944:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ eqcondition  ilcg.pattern@1aa9b4d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5944_AT5944:=myrec;
		END;
	FUNCTION pATypeid5946_AT5946:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5946_AT5946:=myrec;
		END;
	FUNCTION pATypeid5948_AT5948:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ regaddrimmediate  ilcg.pattern@4c8b84}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5948_AT5948:=myrec;
		END;
	FUNCTION pATypeid5950_AT5950:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5950_AT5950:=myrec;
		END;
	FUNCTION pATypeid5952_AT5952:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ oplen  ilcg.pattern@1d6f84a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5952_AT5952:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc5956_AIL5956:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(3);
		 pAIdLoc5956_AIL5956:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5955_AR5955:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5956_AIL5956;
		 pARefval5955_AR5955:=myrec;
		END;
	FUNCTION pAIdentifierDyadic5958_AID5958:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic5958_AID5958:=myrec;
		END;
	FUNCTION pATypeid5962_AT5962:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@17e72d1}
		myrec^.tag:=param;
		myrec^.index:= 4;
		 pATypeid5962_AT5962:=myrec;
		END;
	FUNCTION pATypeidType5961_ATT5961:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5962_AT5962;
		 pATypeidType5961_ATT5961:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc5966_AIL5966:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5966_AIL5966:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5965_AR5965:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5966_AIL5966;
		 pARefval5965_AR5965:=myrec;
		END;
	FUNCTION pADerefRhs5964_ADR5964:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5965_AR5965;
		 pADerefRhs5964_ADR5964:=myrec;
		END;
	FUNCTION pARhsValue5963_ARV5963:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5964_ADR5964;
		 pARhsValue5963_ARV5963:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5960_ACR5960:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5961_ATT5961;
		myrec^.arg2:=pARhsValue5963_ARV5963;
		 pACastRhs5960_ACR5960:=myrec;
		END;
	FUNCTION pARhsValue5959_ARV5959:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5960_ACR5960;
		 pARhsValue5959_ARV5959:=myrec;
		END;
	FUNCTION pATypeid5970_AT5970:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@17e72d1}
		myrec^.tag:=param;
		myrec^.index:= 4;
		 pATypeid5970_AT5970:=myrec;
		END;
	FUNCTION pATypeidType5969_ATT5969:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5970_AT5970;
		 pATypeidType5969_ATT5969:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc5972_AIL5972:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc5972_AIL5972:=myrec;
		END;
		(*rm *)
	FUNCTION pALocValue5971_ALV5971:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5972_AIL5972;
		 pALocValue5971_ALV5971:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5968_ACR5968:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5969_ATT5969;
		myrec^.arg2:=pALocValue5971_ALV5971;
		 pACastRhs5968_ACR5968:=myrec;
		END;
	FUNCTION pARhsValue5967_ARV5967:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5968_ACR5968;
		 pARhsValue5967_ARV5967:=myrec;
		END;
	FUNCTION pADyadicValue5957_ADV5957:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5959_ARV5959;
		myrec^.arg2:=pARhsValue5967_ARV5967;
		myrec^.fn:=pAIdentifierDyadic5958_AID5958;
		 pADyadicValue5957_ADV5957:=myrec;
		END;
	FUNCTION pAAssign5954_AA5954:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue5957_ADV5957;
		myrec^.dest:=pARefval5955_AR5955;
		 pAAssign5954_AA5954:=myrec;
		END;
	FUNCTION pAAssignMeaning5953_AAM5953:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign5954_AA5954;
		 pAAssignMeaning5953_AAM5953:=myrec;
		END;
	FUNCTION pAAssemblypattern5974_AA5974:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cmp ' );
		pappendp(list,1);
		pappends(list,',' );
		pappends(list,' ' );
		pappendp(list,2);
		pappends(list,'\n set' );
		pappendp(list,0);
		pappends(list,' ' );
		pappendp(list,3);
		pappends(list,'\n sub ' );
		pappendp(list,3);
		pappends(list,',1\n not ' );
		pappendp(list,3);
		pAAssemblypattern5974_AA5974:=list;
		END;
	FUNCTION pAAssemblesto5973_AA5973:pprintlist;
	begin
		pAAssemblesto5973_AA5973:=pAAssemblypattern5974_AA5974;
		END;
	FUNCTION pASideeffects5988_AS5988:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5988_AS5988:=nil;
		 pASideeffects5988_AS5988:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5989_AUP5989:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5989_AUP5989:=nil;
		 pAUnconditionalPrecond5989_AUP5989:=myrec;
		END;
	FUNCTION SETeq_SET:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patreg_;
		params^[4]:=patoplen_;
		params^[3]:=patbreg_;
		params^[2]:=patregaddrimmediate_;
		params^[0]:=pateqcondition_;
		paramcount:=6;
		meaning:=pAAssignMeaning5953_AAM5953;
		matchedAssembler:=pAAssemblesto5973_AA5973;
		END;
		SETeq_SET:=myrec;
	END;
	FUNCTION pATypeid5994_AT5994:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5994_AT5994:=myrec;
		END;
	FUNCTION pAInt8Signed6001_AI8S6001:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed6001_AI8S6001:=myrec;
		END;
	FUNCTION pASignedTformat6000_AST6000:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed6001_AI8S6001;
		 pASignedTformat6000_AST6000:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5999_ATP5999:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype5999_ATP5999:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5998_APT5998:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType5998_APT5998:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc6005_AIL6005:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc6005_AIL6005:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6004_AR6004:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6005_AIL6005;
		 pARefval6004_AR6004:=myrec;
		END;
	FUNCTION pADerefRhs6003_ADR6003:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6004_AR6004;
		 pADerefRhs6003_ADR6003:=myrec;
		END;
	FUNCTION pARhsValue6002_ARV6002:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6003_ADR6003;
		 pARhsValue6002_ARV6002:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs5997_ACR5997:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType5998_APT5998;
		myrec^.arg2:=pARhsValue6002_ARV6002;
		 pACastRhs5997_ACR5997:=myrec;
		END;
	FUNCTION pARhsValue5996_ARV5996:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5997_ACR5997;
		 pARhsValue5996_ARV5996:=myrec;
		END;
		(*! Match l *)
	FUNCTION pAIdLoc6008_AIL6008:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6008_AIL6008:=myrec;
		END;
		(*l *)
	FUNCTION pALocValue6007_ALV6007:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6008_AIL6008;
		 pALocValue6007_ALV6007:=myrec;
		END;
	FUNCTION pAGotoMeaning6006_AGM6006:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=gotonode;
		myrec^.dest:=pALocValue6007_ALV6007;
		 pAGotoMeaning6006_AGM6006:=myrec;
		END;
	FUNCTION pAIfMeaning5995_AIM5995:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pARhsValue5996_ARV5996;
		myrec^.action:=pAGotoMeaning6006_AGM6006;
		 pAIfMeaning5995_AIM5995:=myrec;
		END;
	FUNCTION pAAssemblypattern6010_AA6010:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'test ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,1);
		pappends(list,'\n jnz near ' );
		pappendp(list,0);
		pAAssemblypattern6010_AA6010:=list;
		END;
	FUNCTION pAAssemblesto6009_AA6009:pprintlist;
	begin
		pAAssemblesto6009_AA6009:=pAAssemblypattern6010_AA6010;
		END;
	FUNCTION pASideeffects6017_AS6017:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6017_AS6017:=nil;
		 pASideeffects6017_AS6017:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6018_AUP6018:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6018_AUP6018:=nil;
		 pAUnconditionalPrecond6018_AUP6018:=myrec;
		END;
	FUNCTION IFBOOL_IFBOOL:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patlabel;
		params^[1]:=patbreg_;
		paramcount:=3;
		meaning:=pAIfMeaning5995_AIM5995;
		matchedAssembler:=pAAssemblesto6009_AA6009;
		END;
		IFBOOL_IFBOOL:=myrec;
	END;
	FUNCTION pATypeid6021_AT6021:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6021_AT6021:=myrec;
		END;
	FUNCTION pATypeid6023_AT6023:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@2a2ae9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6023_AT6023:=myrec;
		END;
	FUNCTION pATypeid6025_AT6025:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@2a2ae9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6025_AT6025:=myrec;
		END;
	FUNCTION pAOrDyadic6028_AOD6028:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpor;
		 pAOrDyadic6028_AOD6028:=myrec;
		END;
	FUNCTION pALtDyadic6030_ALD6030:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcplt;
		 pALtDyadic6030_ALD6030:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc6034_AIL6034:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6034_AIL6034:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6033_AR6033:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6034_AIL6034;
		 pARefval6033_AR6033:=myrec;
		END;
	FUNCTION pADerefRhs6032_ADR6032:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6033_AR6033;
		 pADerefRhs6032_ADR6032:=myrec;
		END;
	FUNCTION pARhsValue6031_ARV6031:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6032_ADR6032;
		 pARhsValue6031_ARV6031:=myrec;
		END;
	FUNCTION pAConstRhs6036_ACR6036:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(1);;
		 pAConstRhs6036_ACR6036:=myrec;
		END;
	FUNCTION pARhsValue6035_ARV6035:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs6036_ACR6036;
		 pARhsValue6035_ARV6035:=myrec;
		END;
	FUNCTION pADyadicValue6029_ADV6029:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue6031_ARV6031;
		myrec^.arg2:=pARhsValue6035_ARV6035;
		myrec^.fn:=pALtDyadic6030_ALD6030;
		 pADyadicValue6029_ADV6029:=myrec;
		END;
	FUNCTION pAGtDyadic6038_AGD6038:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpgt;
		 pAGtDyadic6038_AGD6038:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc6042_AIL6042:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6042_AIL6042:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6041_AR6041:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6042_AIL6042;
		 pARefval6041_AR6041:=myrec;
		END;
	FUNCTION pADerefRhs6040_ADR6040:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6041_AR6041;
		 pADerefRhs6040_ADR6040:=myrec;
		END;
	FUNCTION pARhsValue6039_ARV6039:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6040_ADR6040;
		 pARhsValue6039_ARV6039:=myrec;
		END;
	FUNCTION pAConstRhs6044_ACR6044:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(2);;
		 pAConstRhs6044_ACR6044:=myrec;
		END;
	FUNCTION pARhsValue6043_ARV6043:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs6044_ACR6044;
		 pARhsValue6043_ARV6043:=myrec;
		END;
	FUNCTION pADyadicValue6037_ADV6037:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue6039_ARV6039;
		myrec^.arg2:=pARhsValue6043_ARV6043;
		myrec^.fn:=pAGtDyadic6038_AGD6038;
		 pADyadicValue6037_ADV6037:=myrec;
		END;
	FUNCTION pADyadicValue6027_ADV6027:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pADyadicValue6029_ADV6029;
		myrec^.arg2:=pADyadicValue6037_ADV6037;
		myrec^.fn:=pAOrDyadic6028_AOD6028;
		 pADyadicValue6027_ADV6027:=myrec;
		END;
	FUNCTION pAOptionalsign6049_AO6049:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign6049_AO6049:=nil;
		 pAOptionalsign6049_AO6049:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber6048_AIN6048:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=5 ;
		 pAIntegerNumber6048_AIN6048:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs6047_ANR6047:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber6048_AIN6048;
		 pANumberRhs6047_ANR6047:=myrec;
		END;
	FUNCTION pARhsValue6046_ARV6046:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs6047_ANR6047;
		 pARhsValue6046_ARV6046:=myrec;
		END;
	FUNCTION pAFailMeaning6045_AFM6045:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=failure;
		myrec^.arg:=pARhsValue6046_ARV6046;
		 pAFailMeaning6045_AFM6045:=myrec;
		END;
	FUNCTION pAIfMeaning6026_AIM6026:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pADyadicValue6027_ADV6027;
		myrec^.action:=pAFailMeaning6045_AFM6045;
		 pAIfMeaning6026_AIM6026:=myrec;
		END;
	FUNCTION pAAssemblypattern6051_AA6051:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'boundc ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,2);
		pAAssemblypattern6051_AA6051:=list;
		END;
	FUNCTION pAAssemblesto6050_AA6050:pprintlist;
	begin
		pAAssemblesto6050_AA6050:=pAAssemblypattern6051_AA6051;
		END;
	FUNCTION pASideeffects6058_AS6058:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6058_AS6058:=nil;
		 pASideeffects6058_AS6058:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6059_AUP6059:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6059_AUP6059:=nil;
		 pAUnconditionalPrecond6059_AUP6059:=myrec;
		END;
	FUNCTION BOUNDC_BOUNDC:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		params^[1]:=patint_;
		params^[2]:=patint_;
		paramcount:=4;
		meaning:=pAIfMeaning6026_AIM6026;
		matchedAssembler:=pAAssemblesto6050_AA6050;
		END;
		BOUNDC_BOUNDC:=myrec;
	END;
	FUNCTION pATypeid6062_AT6062:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6062_AT6062:=myrec;
		END;
	FUNCTION pATypeid6064_AT6064:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6064_AT6064:=myrec;
		END;
	FUNCTION pAOrDyadic6067_AOD6067:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpor;
		 pAOrDyadic6067_AOD6067:=myrec;
		END;
	FUNCTION pALtDyadic6069_ALD6069:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcplt;
		 pALtDyadic6069_ALD6069:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc6073_AIL6073:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc6073_AIL6073:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6072_AR6072:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6073_AIL6073;
		 pARefval6072_AR6072:=myrec;
		END;
	FUNCTION pADerefRhs6071_ADR6071:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6072_AR6072;
		 pADerefRhs6071_ADR6071:=myrec;
		END;
	FUNCTION pARhsValue6070_ARV6070:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6071_ADR6071;
		 pARhsValue6070_ARV6070:=myrec;
		END;
	FUNCTION pASigned6082_AS6082:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned6082_AS6082:=myrec;
		END;
	FUNCTION pASignedTformat6081_AST6081:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned6082_AS6082;
		 pASignedTformat6081_AST6081:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6080_ATP6080:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype6080_ATP6080:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6079_APT6079:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType6079_APT6079:=myrec;
		END;
	FUNCTION pAReference6078_AR6078:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType6079_APT6079;
		 pAReference6078_AR6078:=myrec;
		END;
	FUNCTION pAReftypeType6077_ART6077:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference6078_AR6078;
		 pAReftypeType6077_ART6077:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc6087_AIL6087:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6087_AIL6087:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6086_AR6086:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6087_AIL6087;
		 pARefval6086_AR6086:=myrec;
		END;
	FUNCTION pADerefRhs6085_ADR6085:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6086_AR6086;
		 pADerefRhs6085_ADR6085:=myrec;
		END;
	FUNCTION pARhsValue6084_ARV6084:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6085_ADR6085;
		 pARhsValue6084_ARV6084:=myrec;
		END;
	FUNCTION pAMemoryLoc6083_AML6083:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pARhsValue6084_ARV6084;
		 pAMemoryLoc6083_AML6083:=myrec;
		END;
		(*! try to cast to type: ref int32*)
	FUNCTION pARefcastRefval6076_ARR6076:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType6077_ART6077;
		(*class ilcg.node.AMemoryLoc*)
		myrec^.arg2:=pAMemoryLoc6083_AML6083;
		 pARefcastRefval6076_ARR6076:=myrec;
		END;
	FUNCTION pADerefRhs6075_ADR6075:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval6076_ARR6076;
		 pADerefRhs6075_ADR6075:=myrec;
		END;
	FUNCTION pARhsValue6074_ARV6074:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6075_ADR6075;
		 pARhsValue6074_ARV6074:=myrec;
		END;
	FUNCTION pADyadicValue6068_ADV6068:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue6070_ARV6070;
		myrec^.arg2:=pARhsValue6074_ARV6074;
		myrec^.fn:=pALtDyadic6069_ALD6069;
		 pADyadicValue6068_ADV6068:=myrec;
		END;
	FUNCTION pAGtDyadic6089_AGD6089:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpgt;
		 pAGtDyadic6089_AGD6089:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc6093_AIL6093:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc6093_AIL6093:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6092_AR6092:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6093_AIL6093;
		 pARefval6092_AR6092:=myrec;
		END;
	FUNCTION pADerefRhs6091_ADR6091:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6092_AR6092;
		 pADerefRhs6091_ADR6091:=myrec;
		END;
	FUNCTION pARhsValue6090_ARV6090:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6091_ADR6091;
		 pARhsValue6090_ARV6090:=myrec;
		END;
	FUNCTION pASigned6102_AS6102:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned6102_AS6102:=myrec;
		END;
	FUNCTION pASignedTformat6101_AST6101:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned6102_AS6102;
		 pASignedTformat6101_AST6101:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6100_ATP6100:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype6100_ATP6100:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6099_APT6099:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType6099_APT6099:=myrec;
		END;
	FUNCTION pAReference6098_AR6098:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType6099_APT6099;
		 pAReference6098_AR6098:=myrec;
		END;
	FUNCTION pAReftypeType6097_ART6097:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference6098_AR6098;
		 pAReftypeType6097_ART6097:=myrec;
		END;
	FUNCTION pAPlusDyadic6105_APD6105:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic6105_APD6105:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc6109_AIL6109:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6109_AIL6109:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6108_AR6108:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6109_AIL6109;
		 pARefval6108_AR6108:=myrec;
		END;
	FUNCTION pADerefRhs6107_ADR6107:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6108_AR6108;
		 pADerefRhs6107_ADR6107:=myrec;
		END;
	FUNCTION pARhsValue6106_ARV6106:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6107_ADR6107;
		 pARhsValue6106_ARV6106:=myrec;
		END;
	FUNCTION pAOptionalsign6113_AO6113:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign6113_AO6113:=nil;
		 pAOptionalsign6113_AO6113:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber6112_AIN6112:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber6112_AIN6112:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs6111_ANR6111:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber6112_AIN6112;
		 pANumberRhs6111_ANR6111:=myrec;
		END;
	FUNCTION pARhsValue6110_ARV6110:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs6111_ANR6111;
		 pARhsValue6110_ARV6110:=myrec;
		END;
	FUNCTION pADyadicValue6104_ADV6104:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue6106_ARV6106;
		myrec^.arg2:=pARhsValue6110_ARV6110;
		myrec^.fn:=pAPlusDyadic6105_APD6105;
		 pADyadicValue6104_ADV6104:=myrec;
		END;
	FUNCTION pAMemoryLoc6103_AML6103:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pADyadicValue6104_ADV6104;
		 pAMemoryLoc6103_AML6103:=myrec;
		END;
		(*! try to cast to type: ref int32*)
	FUNCTION pARefcastRefval6096_ARR6096:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType6097_ART6097;
		(*class ilcg.node.AMemoryLoc*)
		myrec^.arg2:=pAMemoryLoc6103_AML6103;
		 pARefcastRefval6096_ARR6096:=myrec;
		END;
	FUNCTION pADerefRhs6095_ADR6095:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval6096_ARR6096;
		 pADerefRhs6095_ADR6095:=myrec;
		END;
	FUNCTION pARhsValue6094_ARV6094:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6095_ADR6095;
		 pARhsValue6094_ARV6094:=myrec;
		END;
	FUNCTION pADyadicValue6088_ADV6088:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue6090_ARV6090;
		myrec^.arg2:=pARhsValue6094_ARV6094;
		myrec^.fn:=pAGtDyadic6089_AGD6089;
		 pADyadicValue6088_ADV6088:=myrec;
		END;
	FUNCTION pADyadicValue6066_ADV6066:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pADyadicValue6068_ADV6068;
		myrec^.arg2:=pADyadicValue6088_ADV6088;
		myrec^.fn:=pAOrDyadic6067_AOD6067;
		 pADyadicValue6066_ADV6066:=myrec;
		END;
	FUNCTION pAOptionalsign6118_AO6118:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign6118_AO6118:=nil;
		 pAOptionalsign6118_AO6118:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber6117_AIN6117:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=5 ;
		 pAIntegerNumber6117_AIN6117:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs6116_ANR6116:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber6117_AIN6117;
		 pANumberRhs6116_ANR6116:=myrec;
		END;
	FUNCTION pARhsValue6115_ARV6115:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs6116_ANR6116;
		 pARhsValue6115_ARV6115:=myrec;
		END;
	FUNCTION pAFailMeaning6114_AFM6114:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=failure;
		myrec^.arg:=pARhsValue6115_ARV6115;
		 pAFailMeaning6114_AFM6114:=myrec;
		END;
	FUNCTION pAIfMeaning6065_AIM6065:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pADyadicValue6066_ADV6066;
		myrec^.action:=pAFailMeaning6114_AFM6114;
		 pAIfMeaning6065_AIM6065:=myrec;
		END;
	FUNCTION pAAssemblypattern6120_AA6120:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'bound ' );
		pappendp(list,1);
		pappends(list,',[' );
		pappendp(list,0);
		pappends(list,']' );
		pAAssemblypattern6120_AA6120:=list;
		END;
	FUNCTION pAAssemblesto6119_AA6119:pprintlist;
	begin
		pAAssemblesto6119_AA6119:=pAAssemblypattern6120_AA6120;
		END;
	FUNCTION pASideeffects6126_AS6126:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6126_AS6126:=nil;
		 pASideeffects6126_AS6126:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6127_AUP6127:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6127_AUP6127:=nil;
		 pAUnconditionalPrecond6127_AUP6127:=myrec;
		END;
	FUNCTION BOUND0_BOUND0:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patreg_;
		params^[0]:=patreg_;
		paramcount:=3;
		meaning:=pAIfMeaning6065_AIM6065;
		matchedAssembler:=pAAssemblesto6119_AA6119;
		END;
		BOUND0_BOUND0:=myrec;
	END;
	FUNCTION pATypeid6130_AT6130:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6130_AT6130:=myrec;
		END;
	FUNCTION pATypeid6132_AT6132:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6132_AT6132:=myrec;
		END;
	FUNCTION pAOrDyadic6135_AOD6135:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpor;
		 pAOrDyadic6135_AOD6135:=myrec;
		END;
	FUNCTION pALtDyadic6137_ALD6137:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcplt;
		 pALtDyadic6137_ALD6137:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc6141_AIL6141:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc6141_AIL6141:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6140_AR6140:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6141_AIL6141;
		 pARefval6140_AR6140:=myrec;
		END;
	FUNCTION pADerefRhs6139_ADR6139:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6140_AR6140;
		 pADerefRhs6139_ADR6139:=myrec;
		END;
	FUNCTION pARhsValue6138_ARV6138:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6139_ADR6139;
		 pARhsValue6138_ARV6138:=myrec;
		END;
	FUNCTION pASigned6150_AS6150:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned6150_AS6150:=myrec;
		END;
	FUNCTION pASignedTformat6149_AST6149:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned6150_AS6150;
		 pASignedTformat6149_AST6149:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6148_ATP6148:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype6148_ATP6148:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6147_APT6147:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType6147_APT6147:=myrec;
		END;
	FUNCTION pAReference6146_AR6146:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType6147_APT6147;
		 pAReference6146_AR6146:=myrec;
		END;
	FUNCTION pAReftypeType6145_ART6145:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference6146_AR6146;
		 pAReftypeType6145_ART6145:=myrec;
		END;
	FUNCTION pAPlusDyadic6153_APD6153:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic6153_APD6153:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc6157_AIL6157:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6157_AIL6157:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6156_AR6156:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6157_AIL6157;
		 pARefval6156_AR6156:=myrec;
		END;
	FUNCTION pADerefRhs6155_ADR6155:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6156_AR6156;
		 pADerefRhs6155_ADR6155:=myrec;
		END;
	FUNCTION pARhsValue6154_ARV6154:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6155_ADR6155;
		 pARhsValue6154_ARV6154:=myrec;
		END;
	FUNCTION pAOptionalsign6161_AO6161:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign6161_AO6161:=nil;
		 pAOptionalsign6161_AO6161:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber6160_AIN6160:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber6160_AIN6160:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs6159_ANR6159:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber6160_AIN6160;
		 pANumberRhs6159_ANR6159:=myrec;
		END;
	FUNCTION pARhsValue6158_ARV6158:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs6159_ANR6159;
		 pARhsValue6158_ARV6158:=myrec;
		END;
	FUNCTION pADyadicValue6152_ADV6152:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue6154_ARV6154;
		myrec^.arg2:=pARhsValue6158_ARV6158;
		myrec^.fn:=pAPlusDyadic6153_APD6153;
		 pADyadicValue6152_ADV6152:=myrec;
		END;
	FUNCTION pAMemoryLoc6151_AML6151:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pADyadicValue6152_ADV6152;
		 pAMemoryLoc6151_AML6151:=myrec;
		END;
		(*! try to cast to type: ref int32*)
	FUNCTION pARefcastRefval6144_ARR6144:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType6145_ART6145;
		(*class ilcg.node.AMemoryLoc*)
		myrec^.arg2:=pAMemoryLoc6151_AML6151;
		 pARefcastRefval6144_ARR6144:=myrec;
		END;
	FUNCTION pADerefRhs6143_ADR6143:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval6144_ARR6144;
		 pADerefRhs6143_ADR6143:=myrec;
		END;
	FUNCTION pARhsValue6142_ARV6142:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6143_ADR6143;
		 pARhsValue6142_ARV6142:=myrec;
		END;
	FUNCTION pADyadicValue6136_ADV6136:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue6138_ARV6138;
		myrec^.arg2:=pARhsValue6142_ARV6142;
		myrec^.fn:=pALtDyadic6137_ALD6137;
		 pADyadicValue6136_ADV6136:=myrec;
		END;
	FUNCTION pAGtDyadic6163_AGD6163:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpgt;
		 pAGtDyadic6163_AGD6163:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc6167_AIL6167:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc6167_AIL6167:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6166_AR6166:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6167_AIL6167;
		 pARefval6166_AR6166:=myrec;
		END;
	FUNCTION pADerefRhs6165_ADR6165:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6166_AR6166;
		 pADerefRhs6165_ADR6165:=myrec;
		END;
	FUNCTION pARhsValue6164_ARV6164:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6165_ADR6165;
		 pARhsValue6164_ARV6164:=myrec;
		END;
	FUNCTION pASigned6176_AS6176:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned6176_AS6176:=myrec;
		END;
	FUNCTION pASignedTformat6175_AST6175:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned6176_AS6176;
		 pASignedTformat6175_AST6175:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6174_ATP6174:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype6174_ATP6174:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6173_APT6173:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType6173_APT6173:=myrec;
		END;
	FUNCTION pAReference6172_AR6172:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType6173_APT6173;
		 pAReference6172_AR6172:=myrec;
		END;
	FUNCTION pAReftypeType6171_ART6171:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference6172_AR6172;
		 pAReftypeType6171_ART6171:=myrec;
		END;
	FUNCTION pAPlusDyadic6179_APD6179:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic6179_APD6179:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc6183_AIL6183:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6183_AIL6183:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6182_AR6182:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6183_AIL6183;
		 pARefval6182_AR6182:=myrec;
		END;
	FUNCTION pADerefRhs6181_ADR6181:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6182_AR6182;
		 pADerefRhs6181_ADR6181:=myrec;
		END;
	FUNCTION pARhsValue6180_ARV6180:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6181_ADR6181;
		 pARhsValue6180_ARV6180:=myrec;
		END;
	FUNCTION pAOptionalsign6187_AO6187:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign6187_AO6187:=nil;
		 pAOptionalsign6187_AO6187:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber6186_AIN6186:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber6186_AIN6186:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs6185_ANR6185:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber6186_AIN6186;
		 pANumberRhs6185_ANR6185:=myrec;
		END;
	FUNCTION pARhsValue6184_ARV6184:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs6185_ANR6185;
		 pARhsValue6184_ARV6184:=myrec;
		END;
	FUNCTION pADyadicValue6178_ADV6178:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue6180_ARV6180;
		myrec^.arg2:=pARhsValue6184_ARV6184;
		myrec^.fn:=pAPlusDyadic6179_APD6179;
		 pADyadicValue6178_ADV6178:=myrec;
		END;
	FUNCTION pAMemoryLoc6177_AML6177:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pADyadicValue6178_ADV6178;
		 pAMemoryLoc6177_AML6177:=myrec;
		END;
		(*! try to cast to type: ref int32*)
	FUNCTION pARefcastRefval6170_ARR6170:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType6171_ART6171;
		(*class ilcg.node.AMemoryLoc*)
		myrec^.arg2:=pAMemoryLoc6177_AML6177;
		 pARefcastRefval6170_ARR6170:=myrec;
		END;
	FUNCTION pADerefRhs6169_ADR6169:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval6170_ARR6170;
		 pADerefRhs6169_ADR6169:=myrec;
		END;
	FUNCTION pARhsValue6168_ARV6168:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6169_ADR6169;
		 pARhsValue6168_ARV6168:=myrec;
		END;
	FUNCTION pADyadicValue6162_ADV6162:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue6164_ARV6164;
		myrec^.arg2:=pARhsValue6168_ARV6168;
		myrec^.fn:=pAGtDyadic6163_AGD6163;
		 pADyadicValue6162_ADV6162:=myrec;
		END;
	FUNCTION pADyadicValue6134_ADV6134:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pADyadicValue6136_ADV6136;
		myrec^.arg2:=pADyadicValue6162_ADV6162;
		myrec^.fn:=pAOrDyadic6135_AOD6135;
		 pADyadicValue6134_ADV6134:=myrec;
		END;
	FUNCTION pAOptionalsign6192_AO6192:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign6192_AO6192:=nil;
		 pAOptionalsign6192_AO6192:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber6191_AIN6191:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=5 ;
		 pAIntegerNumber6191_AIN6191:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs6190_ANR6190:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber6191_AIN6191;
		 pANumberRhs6190_ANR6190:=myrec;
		END;
	FUNCTION pARhsValue6189_ARV6189:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs6190_ANR6190;
		 pARhsValue6189_ARV6189:=myrec;
		END;
	FUNCTION pAFailMeaning6188_AFM6188:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=failure;
		myrec^.arg:=pARhsValue6189_ARV6189;
		 pAFailMeaning6188_AFM6188:=myrec;
		END;
	FUNCTION pAIfMeaning6133_AIM6133:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pADyadicValue6134_ADV6134;
		myrec^.action:=pAFailMeaning6188_AFM6188;
		 pAIfMeaning6133_AIM6133:=myrec;
		END;
	FUNCTION pAAssemblypattern6194_AA6194:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'bound ' );
		pappendp(list,1);
		pappends(list,',[' );
		pappendp(list,0);
		pappends(list,'+4]' );
		pAAssemblypattern6194_AA6194:=list;
		END;
	FUNCTION pAAssemblesto6193_AA6193:pprintlist;
	begin
		pAAssemblesto6193_AA6193:=pAAssemblypattern6194_AA6194;
		END;
	FUNCTION pASideeffects6200_AS6200:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6200_AS6200:=nil;
		 pASideeffects6200_AS6200:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6201_AUP6201:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6201_AUP6201:=nil;
		 pAUnconditionalPrecond6201_AUP6201:=myrec;
		END;
	FUNCTION BOUND4_BOUND4:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patreg_;
		params^[0]:=patreg_;
		paramcount:=3;
		meaning:=pAIfMeaning6133_AIM6133;
		matchedAssembler:=pAAssemblesto6193_AA6193;
		END;
		BOUND4_BOUND4:=myrec;
	END;
	FUNCTION pATypeid6204_AT6204:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6204_AT6204:=myrec;
		END;
	FUNCTION pATypeid6206_AT6206:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6206_AT6206:=myrec;
		END;
	FUNCTION pAOrDyadic6209_AOD6209:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpor;
		 pAOrDyadic6209_AOD6209:=myrec;
		END;
	FUNCTION pALtDyadic6211_ALD6211:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcplt;
		 pALtDyadic6211_ALD6211:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc6215_AIL6215:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc6215_AIL6215:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6214_AR6214:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6215_AIL6215;
		 pARefval6214_AR6214:=myrec;
		END;
	FUNCTION pADerefRhs6213_ADR6213:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6214_AR6214;
		 pADerefRhs6213_ADR6213:=myrec;
		END;
	FUNCTION pARhsValue6212_ARV6212:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6213_ADR6213;
		 pARhsValue6212_ARV6212:=myrec;
		END;
	FUNCTION pASigned6224_AS6224:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned6224_AS6224:=myrec;
		END;
	FUNCTION pASignedTformat6223_AST6223:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned6224_AS6224;
		 pASignedTformat6223_AST6223:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6222_ATP6222:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype6222_ATP6222:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6221_APT6221:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType6221_APT6221:=myrec;
		END;
	FUNCTION pAReference6220_AR6220:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType6221_APT6221;
		 pAReference6220_AR6220:=myrec;
		END;
	FUNCTION pAReftypeType6219_ART6219:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference6220_AR6220;
		 pAReftypeType6219_ART6219:=myrec;
		END;
	FUNCTION pAPlusDyadic6227_APD6227:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic6227_APD6227:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc6231_AIL6231:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6231_AIL6231:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6230_AR6230:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6231_AIL6231;
		 pARefval6230_AR6230:=myrec;
		END;
	FUNCTION pADerefRhs6229_ADR6229:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6230_AR6230;
		 pADerefRhs6229_ADR6229:=myrec;
		END;
	FUNCTION pARhsValue6228_ARV6228:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6229_ADR6229;
		 pARhsValue6228_ARV6228:=myrec;
		END;
	FUNCTION pAOptionalsign6235_AO6235:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign6235_AO6235:=nil;
		 pAOptionalsign6235_AO6235:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber6234_AIN6234:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=16 ;
		 pAIntegerNumber6234_AIN6234:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs6233_ANR6233:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber6234_AIN6234;
		 pANumberRhs6233_ANR6233:=myrec;
		END;
	FUNCTION pARhsValue6232_ARV6232:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs6233_ANR6233;
		 pARhsValue6232_ARV6232:=myrec;
		END;
	FUNCTION pADyadicValue6226_ADV6226:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue6228_ARV6228;
		myrec^.arg2:=pARhsValue6232_ARV6232;
		myrec^.fn:=pAPlusDyadic6227_APD6227;
		 pADyadicValue6226_ADV6226:=myrec;
		END;
	FUNCTION pAMemoryLoc6225_AML6225:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pADyadicValue6226_ADV6226;
		 pAMemoryLoc6225_AML6225:=myrec;
		END;
		(*! try to cast to type: ref int32*)
	FUNCTION pARefcastRefval6218_ARR6218:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType6219_ART6219;
		(*class ilcg.node.AMemoryLoc*)
		myrec^.arg2:=pAMemoryLoc6225_AML6225;
		 pARefcastRefval6218_ARR6218:=myrec;
		END;
	FUNCTION pADerefRhs6217_ADR6217:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval6218_ARR6218;
		 pADerefRhs6217_ADR6217:=myrec;
		END;
	FUNCTION pARhsValue6216_ARV6216:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6217_ADR6217;
		 pARhsValue6216_ARV6216:=myrec;
		END;
	FUNCTION pADyadicValue6210_ADV6210:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue6212_ARV6212;
		myrec^.arg2:=pARhsValue6216_ARV6216;
		myrec^.fn:=pALtDyadic6211_ALD6211;
		 pADyadicValue6210_ADV6210:=myrec;
		END;
	FUNCTION pAGtDyadic6237_AGD6237:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpgt;
		 pAGtDyadic6237_AGD6237:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc6241_AIL6241:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc6241_AIL6241:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6240_AR6240:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6241_AIL6241;
		 pARefval6240_AR6240:=myrec;
		END;
	FUNCTION pADerefRhs6239_ADR6239:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6240_AR6240;
		 pADerefRhs6239_ADR6239:=myrec;
		END;
	FUNCTION pARhsValue6238_ARV6238:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6239_ADR6239;
		 pARhsValue6238_ARV6238:=myrec;
		END;
	FUNCTION pASigned6250_AS6250:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned6250_AS6250:=myrec;
		END;
	FUNCTION pASignedTformat6249_AST6249:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned6250_AS6250;
		 pASignedTformat6249_AST6249:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6248_ATP6248:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype6248_ATP6248:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6247_APT6247:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType6247_APT6247:=myrec;
		END;
	FUNCTION pAReference6246_AR6246:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType6247_APT6247;
		 pAReference6246_AR6246:=myrec;
		END;
	FUNCTION pAReftypeType6245_ART6245:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference6246_AR6246;
		 pAReftypeType6245_ART6245:=myrec;
		END;
	FUNCTION pAPlusDyadic6253_APD6253:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic6253_APD6253:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc6257_AIL6257:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6257_AIL6257:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6256_AR6256:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6257_AIL6257;
		 pARefval6256_AR6256:=myrec;
		END;
	FUNCTION pADerefRhs6255_ADR6255:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6256_AR6256;
		 pADerefRhs6255_ADR6255:=myrec;
		END;
	FUNCTION pARhsValue6254_ARV6254:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6255_ADR6255;
		 pARhsValue6254_ARV6254:=myrec;
		END;
	FUNCTION pAOptionalsign6261_AO6261:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign6261_AO6261:=nil;
		 pAOptionalsign6261_AO6261:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber6260_AIN6260:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=20 ;
		 pAIntegerNumber6260_AIN6260:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs6259_ANR6259:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber6260_AIN6260;
		 pANumberRhs6259_ANR6259:=myrec;
		END;
	FUNCTION pARhsValue6258_ARV6258:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs6259_ANR6259;
		 pARhsValue6258_ARV6258:=myrec;
		END;
	FUNCTION pADyadicValue6252_ADV6252:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue6254_ARV6254;
		myrec^.arg2:=pARhsValue6258_ARV6258;
		myrec^.fn:=pAPlusDyadic6253_APD6253;
		 pADyadicValue6252_ADV6252:=myrec;
		END;
	FUNCTION pAMemoryLoc6251_AML6251:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pADyadicValue6252_ADV6252;
		 pAMemoryLoc6251_AML6251:=myrec;
		END;
		(*! try to cast to type: ref int32*)
	FUNCTION pARefcastRefval6244_ARR6244:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType6245_ART6245;
		(*class ilcg.node.AMemoryLoc*)
		myrec^.arg2:=pAMemoryLoc6251_AML6251;
		 pARefcastRefval6244_ARR6244:=myrec;
		END;
	FUNCTION pADerefRhs6243_ADR6243:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval6244_ARR6244;
		 pADerefRhs6243_ADR6243:=myrec;
		END;
	FUNCTION pARhsValue6242_ARV6242:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6243_ADR6243;
		 pARhsValue6242_ARV6242:=myrec;
		END;
	FUNCTION pADyadicValue6236_ADV6236:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue6238_ARV6238;
		myrec^.arg2:=pARhsValue6242_ARV6242;
		myrec^.fn:=pAGtDyadic6237_AGD6237;
		 pADyadicValue6236_ADV6236:=myrec;
		END;
	FUNCTION pADyadicValue6208_ADV6208:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pADyadicValue6210_ADV6210;
		myrec^.arg2:=pADyadicValue6236_ADV6236;
		myrec^.fn:=pAOrDyadic6209_AOD6209;
		 pADyadicValue6208_ADV6208:=myrec;
		END;
	FUNCTION pAOptionalsign6266_AO6266:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign6266_AO6266:=nil;
		 pAOptionalsign6266_AO6266:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber6265_AIN6265:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=5 ;
		 pAIntegerNumber6265_AIN6265:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs6264_ANR6264:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber6265_AIN6265;
		 pANumberRhs6264_ANR6264:=myrec;
		END;
	FUNCTION pARhsValue6263_ARV6263:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs6264_ANR6264;
		 pARhsValue6263_ARV6263:=myrec;
		END;
	FUNCTION pAFailMeaning6262_AFM6262:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=failure;
		myrec^.arg:=pARhsValue6263_ARV6263;
		 pAFailMeaning6262_AFM6262:=myrec;
		END;
	FUNCTION pAIfMeaning6207_AIM6207:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pADyadicValue6208_ADV6208;
		myrec^.action:=pAFailMeaning6262_AFM6262;
		 pAIfMeaning6207_AIM6207:=myrec;
		END;
	FUNCTION pAAssemblypattern6268_AA6268:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'bound ' );
		pappendp(list,1);
		pappends(list,',[' );
		pappendp(list,0);
		pappends(list,'+16]' );
		pAAssemblypattern6268_AA6268:=list;
		END;
	FUNCTION pAAssemblesto6267_AA6267:pprintlist;
	begin
		pAAssemblesto6267_AA6267:=pAAssemblypattern6268_AA6268;
		END;
	FUNCTION pASideeffects6274_AS6274:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6274_AS6274:=nil;
		 pASideeffects6274_AS6274:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6275_AUP6275:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6275_AUP6275:=nil;
		 pAUnconditionalPrecond6275_AUP6275:=myrec;
		END;
	FUNCTION BOUND16_BOUND16:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patreg_;
		params^[0]:=patreg_;
		paramcount:=3;
		meaning:=pAIfMeaning6207_AIM6207;
		matchedAssembler:=pAAssemblesto6267_AA6267;
		END;
		BOUND16_BOUND16:=myrec;
	END;
	FUNCTION pATypeid6278_AT6278:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6278_AT6278:=myrec;
		END;
	FUNCTION pATypeid6280_AT6280:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6280_AT6280:=myrec;
		END;
	FUNCTION pAInt8Signed6289_AI8S6289:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed6289_AI8S6289:=myrec;
		END;
	FUNCTION pASignedTformat6288_AST6288:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed6289_AI8S6289;
		 pASignedTformat6288_AST6288:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6287_ATP6287:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype6287_ATP6287:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6286_APT6286:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType6286_APT6286:=myrec;
		END;
	FUNCTION pAAndDyadic6291_AAD6291:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpand;
		 pAAndDyadic6291_AAD6291:=myrec;
		END;
	FUNCTION pAUint8Unsigned6297_AU8U6297:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned6297_AU8U6297:=myrec;
		END;
	FUNCTION pAUnsignedTformat6296_AUT6296:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned6297_AU8U6297;
		 pAUnsignedTformat6296_AUT6296:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6295_ATP6295:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype6295_ATP6295:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6294_APT6294:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType6294_APT6294:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc6303_AIL6303:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6303_AIL6303:=myrec;
		END;
		(*r1 *)
	FUNCTION pALocValue6302_ALV6302:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6303_AIL6303;
		 pALocValue6302_ALV6302:=myrec;
		END;
	FUNCTION pAMemoryLoc6301_AML6301:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pALocValue6302_ALV6302;
		 pAMemoryLoc6301_AML6301:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6300_AR6300:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAMemoryLoc6301_AML6301;
		 pARefval6300_AR6300:=myrec;
		END;
	FUNCTION pADerefRhs6299_ADR6299:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6300_AR6300;
		 pADerefRhs6299_ADR6299:=myrec;
		END;
	FUNCTION pARhsValue6298_ARV6298:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6299_ADR6299;
		 pARhsValue6298_ARV6298:=myrec;
		END;
		(*! try to cast to type: uint8*)
	FUNCTION pACastRhs6293_ACR6293:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType6294_APT6294;
		myrec^.arg2:=pARhsValue6298_ARV6298;
		 pACastRhs6293_ACR6293:=myrec;
		END;
	FUNCTION pARhsValue6292_ARV6292:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6293_ACR6293;
		 pARhsValue6292_ARV6292:=myrec;
		END;
	FUNCTION pAShlDyadic6305_ASD6305:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpshl;
		 pAShlDyadic6305_ASD6305:=myrec;
		END;
	FUNCTION pAUint8Unsigned6311_AU8U6311:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned6311_AU8U6311:=myrec;
		END;
	FUNCTION pAUnsignedTformat6310_AUT6310:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned6311_AU8U6311;
		 pAUnsignedTformat6310_AUT6310:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6309_ATP6309:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype6309_ATP6309:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6308_APT6308:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType6308_APT6308:=myrec;
		END;
	FUNCTION pAOptionalsign6315_AO6315:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign6315_AO6315:=nil;
		 pAOptionalsign6315_AO6315:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber6314_AIN6314:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=1 ;
		 pAIntegerNumber6314_AIN6314:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs6313_ANR6313:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber6314_AIN6314;
		 pANumberRhs6313_ANR6313:=myrec;
		END;
	FUNCTION pARhsValue6312_ARV6312:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs6313_ANR6313;
		 pARhsValue6312_ARV6312:=myrec;
		END;
		(*! try to cast to type: uint8*)
	FUNCTION pACastRhs6307_ACR6307:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType6308_APT6308;
		myrec^.arg2:=pARhsValue6312_ARV6312;
		 pACastRhs6307_ACR6307:=myrec;
		END;
	FUNCTION pARhsValue6306_ARV6306:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6307_ACR6307;
		 pARhsValue6306_ARV6306:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc6319_AIL6319:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc6319_AIL6319:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6318_AR6318:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6319_AIL6319;
		 pARefval6318_AR6318:=myrec;
		END;
	FUNCTION pADerefRhs6317_ADR6317:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6318_AR6318;
		 pADerefRhs6317_ADR6317:=myrec;
		END;
	FUNCTION pARhsValue6316_ARV6316:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6317_ADR6317;
		 pARhsValue6316_ARV6316:=myrec;
		END;
	FUNCTION pADyadicValue6304_ADV6304:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue6306_ARV6306;
		myrec^.arg2:=pARhsValue6316_ARV6316;
		myrec^.fn:=pAShlDyadic6305_ASD6305;
		 pADyadicValue6304_ADV6304:=myrec;
		END;
	FUNCTION pADyadicValue6290_ADV6290:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue6292_ARV6292;
		myrec^.arg2:=pADyadicValue6304_ADV6304;
		myrec^.fn:=pAAndDyadic6291_AAD6291;
		 pADyadicValue6290_ADV6290:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs6285_ACR6285:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType6286_APT6286;
		myrec^.arg2:=pADyadicValue6290_ADV6290;
		 pACastRhs6285_ACR6285:=myrec;
		END;
	FUNCTION pARhsValue6284_ARV6284:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6285_ACR6285;
		 pARhsValue6284_ARV6284:=myrec;
		END;
		(*! Match l *)
	FUNCTION pAIdLoc6322_AIL6322:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc6322_AIL6322:=myrec;
		END;
		(*l *)
	FUNCTION pALocValue6321_ALV6321:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6322_AIL6322;
		 pALocValue6321_ALV6321:=myrec;
		END;
	FUNCTION pAGotoMeaning6320_AGM6320:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=gotonode;
		myrec^.dest:=pALocValue6321_ALV6321;
		 pAGotoMeaning6320_AGM6320:=myrec;
		END;
	FUNCTION pAIfMeaning6283_AIM6283:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pARhsValue6284_ARV6284;
		myrec^.action:=pAGotoMeaning6320_AGM6320;
		 pAIfMeaning6283_AIM6283:=myrec;
		END;
	FUNCTION pAAssemblypattern6324_AA6324:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'bt  [' );
		pappendp(list,0);
		pappends(list,'],' );
		pappendp(list,1);
		pappends(list,'\n jc ' );
		pappendp(list,2);
		pAAssemblypattern6324_AA6324:=list;
		END;
	FUNCTION pAAssemblesto6323_AA6323:pprintlist;
	begin
		pAAssemblesto6323_AA6323:=pAAssemblypattern6324_AA6324;
		END;
	FUNCTION pASideeffects6331_AS6331:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6331_AS6331:=nil;
		 pASideeffects6331_AS6331:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6332_AUP6332:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6332_AUP6332:=nil;
		 pAUnconditionalPrecond6332_AUP6332:=myrec;
		END;
	FUNCTION IFIN_IFIN:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patlabel;
		params^[1]:=patreg_;
		params^[0]:=patreg_;
		paramcount:=4;
		meaning:=pAIfMeaning6283_AIM6283;
		matchedAssembler:=pAAssemblesto6323_AA6323;
		END;
		IFIN_IFIN:=myrec;
	END;
	FUNCTION pATypeid6335_AT6335:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6335_AT6335:=myrec;
		END;
	FUNCTION pATypeid6337_AT6337:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6337_AT6337:=myrec;
		END;
	FUNCTION pATypeid6339_AT6339:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6339_AT6339:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc6345_AIL6345:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc6345_AIL6345:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6344_AR6344:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6345_AIL6345;
		 pARefval6344_AR6344:=myrec;
		END;
	FUNCTION pANeDyadic6347_AND6347:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANeDyadic6347_AND6347:=nil;
		 pANeDyadic6347_AND6347:=myrec;
		END;
	FUNCTION pAAndDyadic6349_AAD6349:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpand;
		 pAAndDyadic6349_AAD6349:=myrec;
		END;
	FUNCTION pATypeid6353_AT6353:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@5da364}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid6353_AT6353:=myrec;
		END;
	FUNCTION pATypeidType6352_ATT6352:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6353_AT6353;
		 pATypeidType6352_ATT6352:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc6359_AIL6359:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6359_AIL6359:=myrec;
		END;
		(*r1 *)
	FUNCTION pALocValue6358_ALV6358:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6359_AIL6359;
		 pALocValue6358_ALV6358:=myrec;
		END;
	FUNCTION pAMemoryLoc6357_AML6357:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pALocValue6358_ALV6358;
		 pAMemoryLoc6357_AML6357:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6356_AR6356:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAMemoryLoc6357_AML6357;
		 pARefval6356_AR6356:=myrec;
		END;
	FUNCTION pADerefRhs6355_ADR6355:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6356_AR6356;
		 pADerefRhs6355_ADR6355:=myrec;
		END;
	FUNCTION pARhsValue6354_ARV6354:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6355_ADR6355;
		 pARhsValue6354_ARV6354:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs6351_ACR6351:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType6352_ATT6352;
		myrec^.arg2:=pARhsValue6354_ARV6354;
		 pACastRhs6351_ACR6351:=myrec;
		END;
	FUNCTION pARhsValue6350_ARV6350:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6351_ACR6351;
		 pARhsValue6350_ARV6350:=myrec;
		END;
	FUNCTION pATypeid6363_AT6363:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@5da364}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid6363_AT6363:=myrec;
		END;
	FUNCTION pATypeidType6362_ATT6362:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6363_AT6363;
		 pATypeidType6362_ATT6362:=myrec;
		END;
	FUNCTION pAShlDyadic6365_ASD6365:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpshl;
		 pAShlDyadic6365_ASD6365:=myrec;
		END;
	FUNCTION pAOptionalsign6369_AO6369:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign6369_AO6369:=nil;
		 pAOptionalsign6369_AO6369:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber6368_AIN6368:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=1 ;
		 pAIntegerNumber6368_AIN6368:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs6367_ANR6367:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber6368_AIN6368;
		 pANumberRhs6367_ANR6367:=myrec;
		END;
	FUNCTION pARhsValue6366_ARV6366:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs6367_ANR6367;
		 pARhsValue6366_ARV6366:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc6373_AIL6373:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc6373_AIL6373:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6372_AR6372:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6373_AIL6373;
		 pARefval6372_AR6372:=myrec;
		END;
	FUNCTION pADerefRhs6371_ADR6371:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6372_AR6372;
		 pADerefRhs6371_ADR6371:=myrec;
		END;
	FUNCTION pARhsValue6370_ARV6370:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6371_ADR6371;
		 pARhsValue6370_ARV6370:=myrec;
		END;
	FUNCTION pADyadicValue6364_ADV6364:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue6366_ARV6366;
		myrec^.arg2:=pARhsValue6370_ARV6370;
		myrec^.fn:=pAShlDyadic6365_ASD6365;
		 pADyadicValue6364_ADV6364:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs6361_ACR6361:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType6362_ATT6362;
		myrec^.arg2:=pADyadicValue6364_ADV6364;
		 pACastRhs6361_ACR6361:=myrec;
		END;
	FUNCTION pARhsValue6360_ARV6360:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6361_ACR6361;
		 pARhsValue6360_ARV6360:=myrec;
		END;
	FUNCTION pADyadicValue6348_ADV6348:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue6350_ARV6350;
		myrec^.arg2:=pARhsValue6360_ARV6360;
		myrec^.fn:=pAAndDyadic6349_AAD6349;
		 pADyadicValue6348_ADV6348:=myrec;
		END;
	FUNCTION pAOptionalsign6377_AO6377:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign6377_AO6377:=nil;
		 pAOptionalsign6377_AO6377:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber6376_AIN6376:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=0 ;
		 pAIntegerNumber6376_AIN6376:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs6375_ANR6375:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber6376_AIN6376;
		 pANumberRhs6375_ANR6375:=myrec;
		END;
	FUNCTION pARhsValue6374_ARV6374:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs6375_ANR6375;
		 pARhsValue6374_ARV6374:=myrec;
		END;
	FUNCTION pADyadicValue6346_ADV6346:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pADyadicValue6348_ADV6348;
		myrec^.arg2:=pARhsValue6374_ARV6374;
		myrec^.fn:=pANeDyadic6347_AND6347;
		 pADyadicValue6346_ADV6346:=myrec;
		END;
	FUNCTION pAAssign6343_AA6343:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue6346_ADV6346;
		myrec^.dest:=pARefval6344_AR6344;
		 pAAssign6343_AA6343:=myrec;
		END;
	FUNCTION pAAssignMeaning6342_AAM6342:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign6343_AA6343;
		 pAAssignMeaning6342_AAM6342:=myrec;
		END;
	FUNCTION pAAssemblypattern6379_AA6379:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'bt  [' );
		pappendp(list,0);
		pappends(list,'],' );
		pappendp(list,1);
		pappends(list,'\n setc ' );
		pappendp(list,2);
		pappends(list,'\n not ' );
		pappendp(list,2);
		pappends(list,'\n inc ' );
		pappendp(list,2);
		pAAssemblypattern6379_AA6379:=list;
		END;
	FUNCTION pAAssemblesto6378_AA6378:pprintlist;
	begin
		pAAssemblesto6378_AA6378:=pAAssemblypattern6379_AA6379;
		END;
	FUNCTION pASideeffects6390_AS6390:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6390_AS6390:=nil;
		 pASideeffects6390_AS6390:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6391_AUP6391:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6391_AUP6391:=nil;
		 pAUnconditionalPrecond6391_AUP6391:=myrec;
		END;
	FUNCTION TESTIN_TESTIN:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patreg_;
		params^[0]:=patreg_;
		params^[3]:=typeparam;
		params^[2]:=patbreg_;
		paramcount:=5;
		meaning:=pAAssignMeaning6342_AAM6342;
		matchedAssembler:=pAAssemblesto6378_AA6378;
		END;
		TESTIN_TESTIN:=myrec;
	END;
	FUNCTION pATypeid6394_AT6394:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6394_AT6394:=myrec;
		END;
	FUNCTION pATypeid6396_AT6396:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6396_AT6396:=myrec;
		END;
	FUNCTION pAUint8Unsigned6405_AU8U6405:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned6405_AU8U6405:=myrec;
		END;
	FUNCTION pAUnsignedTformat6404_AUT6404:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned6405_AU8U6405;
		 pAUnsignedTformat6404_AUT6404:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6403_ATP6403:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype6403_ATP6403:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6402_APT6402:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType6402_APT6402:=myrec;
		END;
	FUNCTION pAReference6401_AR6401:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType6402_APT6402;
		 pAReference6401_AR6401:=myrec;
		END;
	FUNCTION pAReftypeType6400_ART6400:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference6401_AR6401;
		 pAReftypeType6400_ART6400:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc6408_AIL6408:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6408_AIL6408:=myrec;
		END;
		(*r1 *)
	FUNCTION pALocValue6407_ALV6407:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6408_AIL6408;
		 pALocValue6407_ALV6407:=myrec;
		END;
	FUNCTION pAMemoryLoc6406_AML6406:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pALocValue6407_ALV6407;
		 pAMemoryLoc6406_AML6406:=myrec;
		END;
		(*! try to cast to type: ref uint8*)
	FUNCTION pARefcastRefval6399_ARR6399:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType6400_ART6400;
		(*class ilcg.node.AMemoryLoc*)
		myrec^.arg2:=pAMemoryLoc6406_AML6406;
		 pARefcastRefval6399_ARR6399:=myrec;
		END;
	FUNCTION pAOrDyadic6410_AOD6410:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpor;
		 pAOrDyadic6410_AOD6410:=myrec;
		END;
	FUNCTION pAUint8Unsigned6416_AU8U6416:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned6416_AU8U6416:=myrec;
		END;
	FUNCTION pAUnsignedTformat6415_AUT6415:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned6416_AU8U6416;
		 pAUnsignedTformat6415_AUT6415:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6414_ATP6414:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype6414_ATP6414:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6413_APT6413:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType6413_APT6413:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc6422_AIL6422:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6422_AIL6422:=myrec;
		END;
		(*r1 *)
	FUNCTION pALocValue6421_ALV6421:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6422_AIL6422;
		 pALocValue6421_ALV6421:=myrec;
		END;
	FUNCTION pAMemoryLoc6420_AML6420:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pALocValue6421_ALV6421;
		 pAMemoryLoc6420_AML6420:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6419_AR6419:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAMemoryLoc6420_AML6420;
		 pARefval6419_AR6419:=myrec;
		END;
	FUNCTION pADerefRhs6418_ADR6418:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6419_AR6419;
		 pADerefRhs6418_ADR6418:=myrec;
		END;
	FUNCTION pARhsValue6417_ARV6417:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6418_ADR6418;
		 pARhsValue6417_ARV6417:=myrec;
		END;
		(*! try to cast to type: uint8*)
	FUNCTION pACastRhs6412_ACR6412:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType6413_APT6413;
		myrec^.arg2:=pARhsValue6417_ARV6417;
		 pACastRhs6412_ACR6412:=myrec;
		END;
	FUNCTION pARhsValue6411_ARV6411:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6412_ACR6412;
		 pARhsValue6411_ARV6411:=myrec;
		END;
	FUNCTION pAShlDyadic6424_ASD6424:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpshl;
		 pAShlDyadic6424_ASD6424:=myrec;
		END;
	FUNCTION pAUint8Unsigned6430_AU8U6430:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned6430_AU8U6430:=myrec;
		END;
	FUNCTION pAUnsignedTformat6429_AUT6429:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned6430_AU8U6430;
		 pAUnsignedTformat6429_AUT6429:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6428_ATP6428:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype6428_ATP6428:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6427_APT6427:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType6427_APT6427:=myrec;
		END;
	FUNCTION pAOptionalsign6434_AO6434:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign6434_AO6434:=nil;
		 pAOptionalsign6434_AO6434:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber6433_AIN6433:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=1 ;
		 pAIntegerNumber6433_AIN6433:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs6432_ANR6432:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber6433_AIN6433;
		 pANumberRhs6432_ANR6432:=myrec;
		END;
	FUNCTION pARhsValue6431_ARV6431:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs6432_ANR6432;
		 pARhsValue6431_ARV6431:=myrec;
		END;
		(*! try to cast to type: uint8*)
	FUNCTION pACastRhs6426_ACR6426:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType6427_APT6427;
		myrec^.arg2:=pARhsValue6431_ARV6431;
		 pACastRhs6426_ACR6426:=myrec;
		END;
	FUNCTION pARhsValue6425_ARV6425:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6426_ACR6426;
		 pARhsValue6425_ARV6425:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc6438_AIL6438:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc6438_AIL6438:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6437_AR6437:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6438_AIL6438;
		 pARefval6437_AR6437:=myrec;
		END;
	FUNCTION pADerefRhs6436_ADR6436:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6437_AR6437;
		 pADerefRhs6436_ADR6436:=myrec;
		END;
	FUNCTION pARhsValue6435_ARV6435:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6436_ADR6436;
		 pARhsValue6435_ARV6435:=myrec;
		END;
	FUNCTION pADyadicValue6423_ADV6423:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue6425_ARV6425;
		myrec^.arg2:=pARhsValue6435_ARV6435;
		myrec^.fn:=pAShlDyadic6424_ASD6424;
		 pADyadicValue6423_ADV6423:=myrec;
		END;
	FUNCTION pADyadicValue6409_ADV6409:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue6411_ARV6411;
		myrec^.arg2:=pADyadicValue6423_ADV6423;
		myrec^.fn:=pAOrDyadic6410_AOD6410;
		 pADyadicValue6409_ADV6409:=myrec;
		END;
	FUNCTION pAAssign6398_AA6398:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue6409_ADV6409;
		myrec^.dest:=pARefcastRefval6399_ARR6399;
		 pAAssign6398_AA6398:=myrec;
		END;
	FUNCTION pAAssignMeaning6397_AAM6397:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign6398_AA6398;
		 pAAssignMeaning6397_AAM6397:=myrec;
		END;
	FUNCTION pAAssemblypattern6440_AA6440:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'bts [' );
		pappendp(list,0);
		pappends(list,'],' );
		pappendp(list,1);
		pAAssemblypattern6440_AA6440:=list;
		END;
	FUNCTION pAAssemblesto6439_AA6439:pprintlist;
	begin
		pAAssemblesto6439_AA6439:=pAAssemblypattern6440_AA6440;
		END;
	FUNCTION pASideeffects6445_AS6445:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6445_AS6445:=nil;
		 pASideeffects6445_AS6445:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6446_AUP6446:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6446_AUP6446:=nil;
		 pAUnconditionalPrecond6446_AUP6446:=myrec;
		END;
	FUNCTION BTS_BTS:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patreg_;
		params^[0]:=patreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning6397_AAM6397;
		matchedAssembler:=pAAssemblesto6439_AA6439;
		END;
		BTS_BTS:=myrec;
	END;
	FUNCTION pATypeid6449_AT6449:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ countreg  ilcg.pattern@11c0f9c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6449_AT6449:=myrec;
		END;
	FUNCTION pATypeid6451_AT6451:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6451_AT6451:=myrec;
		END;
	FUNCTION pATypeid6453_AT6453:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ sourcereg  ilcg.pattern@1c6a7fc}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6453_AT6453:=myrec;
		END;
	FUNCTION pATypeid6455_AT6455:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ destreg  ilcg.pattern@250cce}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6455_AT6455:=myrec;
		END;
	FUNCTION pASigned6463_AS6463:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned6463_AS6463:=myrec;
		END;
	FUNCTION pASignedTformat6462_AST6462:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned6463_AS6463;
		 pASignedTformat6462_AST6462:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6461_ATP6461:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype6461_ATP6461:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6460_APT6460:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType6460_APT6460:=myrec;
		END;
	FUNCTION pAReference6459_AR6459:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType6460_APT6460;
		 pAReference6459_AR6459:=myrec;
		END;
	FUNCTION pAReftypeType6458_ART6458:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference6459_AR6459;
		 pAReftypeType6458_ART6458:=myrec;
		END;
		(*! Match m1 *)
	FUNCTION pAIdLoc6464_AIL6464:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc6464_AIL6464:=myrec;
		END;
		(*! try to cast to type: ref int32*)
	FUNCTION pARefcastRefval6457_ARR6457:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType6458_ART6458;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc6464_AIL6464;
		 pARefcastRefval6457_ARR6457:=myrec;
		END;
	FUNCTION pAOptionalsign6468_AO6468:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign6468_AO6468:=nil;
		 pAOptionalsign6468_AO6468:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber6467_AIN6467:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=0 ;
		 pAIntegerNumber6467_AIN6467:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs6466_ANR6466:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber6467_AIN6467;
		 pANumberRhs6466_ANR6466:=myrec;
		END;
	FUNCTION pARhsValue6465_ARV6465:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs6466_ANR6466;
		 pARhsValue6465_ARV6465:=myrec;
		END;
		(*! Match s *)
	FUNCTION pAIdLoc6472_AIL6472:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6472_AIL6472:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6471_AR6471:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6472_AIL6472;
		 pARefval6471_AR6471:=myrec;
		END;
	FUNCTION pADerefRhs6470_ADR6470:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6471_AR6471;
		 pADerefRhs6470_ADR6470:=myrec;
		END;
	FUNCTION pARhsValue6469_ARV6469:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6470_ADR6470;
		 pARhsValue6469_ARV6469:=myrec;
		END;
	FUNCTION pAOptionalsign6476_AO6476:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign6476_AO6476:=nil;
		 pAOptionalsign6476_AO6476:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber6475_AIN6475:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=1 ;
		 pAIntegerNumber6475_AIN6475:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs6474_ANR6474:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber6475_AIN6475;
		 pANumberRhs6474_ANR6474:=myrec;
		END;
	FUNCTION pARhsValue6473_ARV6473:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs6474_ANR6474;
		 pARhsValue6473_ARV6473:=myrec;
		END;
	FUNCTION pASigned6485_AS6485:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned6485_AS6485:=myrec;
		END;
	FUNCTION pASignedTformat6484_AST6484:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned6485_AS6485;
		 pASignedTformat6484_AST6484:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6483_ATP6483:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype6483_ATP6483:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6482_APT6482:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType6482_APT6482:=myrec;
		END;
	FUNCTION pAReference6481_AR6481:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType6482_APT6482;
		 pAReference6481_AR6481:=myrec;
		END;
	FUNCTION pAReftypeType6480_ART6480:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference6481_AR6481;
		 pAReftypeType6480_ART6480:=myrec;
		END;
	FUNCTION pAPlusDyadic6488_APD6488:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic6488_APD6488:=myrec;
		END;
		(*! Match di *)
	FUNCTION pAIdLoc6492_AIL6492:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(3);
		 pAIdLoc6492_AIL6492:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6491_AR6491:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6492_AIL6492;
		 pARefval6491_AR6491:=myrec;
		END;
	FUNCTION pADerefRhs6490_ADR6490:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6491_AR6491;
		 pADerefRhs6490_ADR6490:=myrec;
		END;
	FUNCTION pARhsValue6489_ARV6489:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6490_ADR6490;
		 pARhsValue6489_ARV6489:=myrec;
		END;
	FUNCTION pATimesDyadic6494_ATD6494:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcptimes;
		 pATimesDyadic6494_ATD6494:=myrec;
		END;
	FUNCTION pASigned6503_AS6503:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned6503_AS6503:=myrec;
		END;
	FUNCTION pASignedTformat6502_AST6502:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned6503_AS6503;
		 pASignedTformat6502_AST6502:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6501_ATP6501:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype6501_ATP6501:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6500_APT6500:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType6500_APT6500:=myrec;
		END;
	FUNCTION pAReference6499_AR6499:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType6500_APT6500;
		 pAReference6499_AR6499:=myrec;
		END;
	FUNCTION pAReftypeType6498_ART6498:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference6499_AR6499;
		 pAReftypeType6498_ART6498:=myrec;
		END;
		(*! Match m1 *)
	FUNCTION pAIdLoc6504_AIL6504:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc6504_AIL6504:=myrec;
		END;
		(*! try to cast to type: ref int32*)
	FUNCTION pARefcastRefval6497_ARR6497:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType6498_ART6498;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc6504_AIL6504;
		 pARefcastRefval6497_ARR6497:=myrec;
		END;
	FUNCTION pADerefRhs6496_ADR6496:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval6497_ARR6497;
		 pADerefRhs6496_ADR6496:=myrec;
		END;
	FUNCTION pARhsValue6495_ARV6495:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6496_ADR6496;
		 pARhsValue6495_ARV6495:=myrec;
		END;
	FUNCTION pAOptionalsign6508_AO6508:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign6508_AO6508:=nil;
		 pAOptionalsign6508_AO6508:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber6507_AIN6507:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber6507_AIN6507:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs6506_ANR6506:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber6507_AIN6507;
		 pANumberRhs6506_ANR6506:=myrec;
		END;
	FUNCTION pARhsValue6505_ARV6505:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs6506_ANR6506;
		 pARhsValue6505_ARV6505:=myrec;
		END;
	FUNCTION pADyadicValue6493_ADV6493:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue6495_ARV6495;
		myrec^.arg2:=pARhsValue6505_ARV6505;
		myrec^.fn:=pATimesDyadic6494_ATD6494;
		 pADyadicValue6493_ADV6493:=myrec;
		END;
	FUNCTION pADyadicValue6487_ADV6487:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue6489_ARV6489;
		myrec^.arg2:=pADyadicValue6493_ADV6493;
		myrec^.fn:=pAPlusDyadic6488_APD6488;
		 pADyadicValue6487_ADV6487:=myrec;
		END;
	FUNCTION pAMemoryLoc6486_AML6486:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pADyadicValue6487_ADV6487;
		 pAMemoryLoc6486_AML6486:=myrec;
		END;
		(*! try to cast to type: ref int32*)
	FUNCTION pARefcastRefval6479_ARR6479:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType6480_ART6480;
		(*class ilcg.node.AMemoryLoc*)
		myrec^.arg2:=pAMemoryLoc6486_AML6486;
		 pARefcastRefval6479_ARR6479:=myrec;
		END;
	FUNCTION pASigned6517_AS6517:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned6517_AS6517:=myrec;
		END;
	FUNCTION pASignedTformat6516_AST6516:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned6517_AS6517;
		 pASignedTformat6516_AST6516:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6515_ATP6515:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype6515_ATP6515:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6514_APT6514:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType6514_APT6514:=myrec;
		END;
	FUNCTION pAReference6513_AR6513:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType6514_APT6514;
		 pAReference6513_AR6513:=myrec;
		END;
	FUNCTION pAReftypeType6512_ART6512:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference6513_AR6513;
		 pAReftypeType6512_ART6512:=myrec;
		END;
	FUNCTION pAPlusDyadic6520_APD6520:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic6520_APD6520:=myrec;
		END;
		(*! Match si *)
	FUNCTION pAIdLoc6524_AIL6524:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc6524_AIL6524:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6523_AR6523:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6524_AIL6524;
		 pARefval6523_AR6523:=myrec;
		END;
	FUNCTION pADerefRhs6522_ADR6522:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6523_AR6523;
		 pADerefRhs6522_ADR6522:=myrec;
		END;
	FUNCTION pARhsValue6521_ARV6521:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6522_ADR6522;
		 pARhsValue6521_ARV6521:=myrec;
		END;
	FUNCTION pATimesDyadic6526_ATD6526:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcptimes;
		 pATimesDyadic6526_ATD6526:=myrec;
		END;
	FUNCTION pASigned6535_AS6535:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned6535_AS6535:=myrec;
		END;
	FUNCTION pASignedTformat6534_AST6534:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned6535_AS6535;
		 pASignedTformat6534_AST6534:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6533_ATP6533:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype6533_ATP6533:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6532_APT6532:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType6532_APT6532:=myrec;
		END;
	FUNCTION pAReference6531_AR6531:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType6532_APT6532;
		 pAReference6531_AR6531:=myrec;
		END;
	FUNCTION pAReftypeType6530_ART6530:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference6531_AR6531;
		 pAReftypeType6530_ART6530:=myrec;
		END;
		(*! Match m1 *)
	FUNCTION pAIdLoc6536_AIL6536:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc6536_AIL6536:=myrec;
		END;
		(*! try to cast to type: ref int32*)
	FUNCTION pARefcastRefval6529_ARR6529:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType6530_ART6530;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc6536_AIL6536;
		 pARefcastRefval6529_ARR6529:=myrec;
		END;
	FUNCTION pADerefRhs6528_ADR6528:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval6529_ARR6529;
		 pADerefRhs6528_ADR6528:=myrec;
		END;
	FUNCTION pARhsValue6527_ARV6527:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6528_ADR6528;
		 pARhsValue6527_ARV6527:=myrec;
		END;
	FUNCTION pAOptionalsign6540_AO6540:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign6540_AO6540:=nil;
		 pAOptionalsign6540_AO6540:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber6539_AIN6539:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber6539_AIN6539:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs6538_ANR6538:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber6539_AIN6539;
		 pANumberRhs6538_ANR6538:=myrec;
		END;
	FUNCTION pARhsValue6537_ARV6537:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs6538_ANR6538;
		 pARhsValue6537_ARV6537:=myrec;
		END;
	FUNCTION pADyadicValue6525_ADV6525:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue6527_ARV6527;
		myrec^.arg2:=pARhsValue6537_ARV6537;
		myrec^.fn:=pATimesDyadic6526_ATD6526;
		 pADyadicValue6525_ADV6525:=myrec;
		END;
	FUNCTION pADyadicValue6519_ADV6519:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue6521_ARV6521;
		myrec^.arg2:=pADyadicValue6525_ADV6525;
		myrec^.fn:=pAPlusDyadic6520_APD6520;
		 pADyadicValue6519_ADV6519:=myrec;
		END;
	FUNCTION pAMemoryLoc6518_AML6518:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pADyadicValue6519_ADV6519;
		 pAMemoryLoc6518_AML6518:=myrec;
		END;
		(*! try to cast to type: ref int32*)
	FUNCTION pARefcastRefval6511_ARR6511:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType6512_ART6512;
		(*class ilcg.node.AMemoryLoc*)
		myrec^.arg2:=pAMemoryLoc6518_AML6518;
		 pARefcastRefval6511_ARR6511:=myrec;
		END;
	FUNCTION pADerefRhs6510_ADR6510:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval6511_ARR6511;
		 pADerefRhs6510_ADR6510:=myrec;
		END;
	FUNCTION pARhsValue6509_ARV6509:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6510_ADR6510;
		 pARhsValue6509_ARV6509:=myrec;
		END;
	FUNCTION pAAssign6478_AA6478:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue6509_ARV6509;
		myrec^.dest:=pARefcastRefval6479_ARR6479;
		 pAAssign6478_AA6478:=myrec;
		END;
	FUNCTION pAAssignMeaning6477_AAM6477:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign6478_AA6478;
		 pAAssignMeaning6477_AAM6477:=myrec;
		END;
	FUNCTION pAForMeaning6456_AFM6456:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=forloop;
		myrec^.indexvar:=pARefcastRefval6457_ARR6457;
		myrec^.start:=pARhsValue6465_ARV6465;
		myrec^.stop:=pARhsValue6469_ARV6469;
		myrec^.incr:=pARhsValue6473_ARV6473;
		myrec^.action:=pAAssignMeaning6477_AAM6477;
		 pAForMeaning6456_AFM6456:=myrec;
		END;
	FUNCTION pAAssemblypattern6542_AA6542:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,' inc ecx\n rep movsd' );
		pAAssemblypattern6542_AA6542:=list;
		END;
	FUNCTION pAAssemblesto6541_AA6541:pprintlist;
	begin
		pAAssemblesto6541_AA6541:=pAAssemblypattern6542_AA6542;
		END;
	FUNCTION pASideeffects6544_AS6544:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6544_AS6544:=nil;
		 pASideeffects6544_AS6544:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6545_AUP6545:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6545_AUP6545:=nil;
		 pAUnconditionalPrecond6545_AUP6545:=myrec;
		END;
	FUNCTION REPMOVSD_REPMOVSD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patsourcereg_;
		params^[1]:=patmaddrmode_;
		params^[0]:=patcountreg_;
		params^[3]:=patdestreg_;
		paramcount:=5;
		meaning:=pAForMeaning6456_AFM6456;
		matchedAssembler:=pAAssemblesto6541_AA6541;
		END;
		REPMOVSD_REPMOVSD:=myrec;
	END;
	FUNCTION pATypeid6548_AT6548:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ countreg  ilcg.pattern@11c0f9c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6548_AT6548:=myrec;
		END;
	FUNCTION pATypeid6550_AT6550:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6550_AT6550:=myrec;
		END;
	FUNCTION pATypeid6552_AT6552:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ sourcereg  ilcg.pattern@1c6a7fc}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6552_AT6552:=myrec;
		END;
	FUNCTION pATypeid6554_AT6554:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ destreg  ilcg.pattern@250cce}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6554_AT6554:=myrec;
		END;
	FUNCTION pASigned6562_AS6562:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned6562_AS6562:=myrec;
		END;
	FUNCTION pASignedTformat6561_AST6561:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned6562_AS6562;
		 pASignedTformat6561_AST6561:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6560_ATP6560:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype6560_ATP6560:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6559_APT6559:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType6559_APT6559:=myrec;
		END;
	FUNCTION pAReference6558_AR6558:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType6559_APT6559;
		 pAReference6558_AR6558:=myrec;
		END;
	FUNCTION pAReftypeType6557_ART6557:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference6558_AR6558;
		 pAReftypeType6557_ART6557:=myrec;
		END;
		(*! Match m1 *)
	FUNCTION pAIdLoc6563_AIL6563:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc6563_AIL6563:=myrec;
		END;
		(*! try to cast to type: ref int32*)
	FUNCTION pARefcastRefval6556_ARR6556:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType6557_ART6557;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc6563_AIL6563;
		 pARefcastRefval6556_ARR6556:=myrec;
		END;
	FUNCTION pAOptionalsign6567_AO6567:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign6567_AO6567:=nil;
		 pAOptionalsign6567_AO6567:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber6566_AIN6566:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=0 ;
		 pAIntegerNumber6566_AIN6566:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs6565_ANR6565:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber6566_AIN6566;
		 pANumberRhs6565_ANR6565:=myrec;
		END;
	FUNCTION pARhsValue6564_ARV6564:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs6565_ANR6565;
		 pARhsValue6564_ARV6564:=myrec;
		END;
		(*! Match s *)
	FUNCTION pAIdLoc6571_AIL6571:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6571_AIL6571:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6570_AR6570:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6571_AIL6571;
		 pARefval6570_AR6570:=myrec;
		END;
	FUNCTION pADerefRhs6569_ADR6569:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6570_AR6570;
		 pADerefRhs6569_ADR6569:=myrec;
		END;
	FUNCTION pARhsValue6568_ARV6568:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6569_ADR6569;
		 pARhsValue6568_ARV6568:=myrec;
		END;
	FUNCTION pAOptionalsign6575_AO6575:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign6575_AO6575:=nil;
		 pAOptionalsign6575_AO6575:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber6574_AIN6574:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=1 ;
		 pAIntegerNumber6574_AIN6574:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs6573_ANR6573:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber6574_AIN6574;
		 pANumberRhs6573_ANR6573:=myrec;
		END;
	FUNCTION pARhsValue6572_ARV6572:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs6573_ANR6573;
		 pARhsValue6572_ARV6572:=myrec;
		END;
	FUNCTION pAOctetFormat6583_AOF6583:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat6583_AOF6583:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype6582_AFP6582:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype6582_AFP6582:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6581_APT6581:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAPredeclaredtypeType6581_APT6581:=myrec;
		END;
	FUNCTION pAReference6580_AR6580:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType6581_APT6581;
		 pAReference6580_AR6580:=myrec;
		END;
	FUNCTION pAReftypeType6579_ART6579:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference6580_AR6580;
		 pAReftypeType6579_ART6579:=myrec;
		END;
	FUNCTION pAPlusDyadic6586_APD6586:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic6586_APD6586:=myrec;
		END;
		(*! Match di *)
	FUNCTION pAIdLoc6590_AIL6590:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(3);
		 pAIdLoc6590_AIL6590:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6589_AR6589:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6590_AIL6590;
		 pARefval6589_AR6589:=myrec;
		END;
	FUNCTION pADerefRhs6588_ADR6588:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6589_AR6589;
		 pADerefRhs6588_ADR6588:=myrec;
		END;
	FUNCTION pARhsValue6587_ARV6587:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6588_ADR6588;
		 pARhsValue6587_ARV6587:=myrec;
		END;
	FUNCTION pASigned6599_AS6599:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned6599_AS6599:=myrec;
		END;
	FUNCTION pASignedTformat6598_AST6598:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned6599_AS6599;
		 pASignedTformat6598_AST6598:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6597_ATP6597:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype6597_ATP6597:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6596_APT6596:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType6596_APT6596:=myrec;
		END;
	FUNCTION pAReference6595_AR6595:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType6596_APT6596;
		 pAReference6595_AR6595:=myrec;
		END;
	FUNCTION pAReftypeType6594_ART6594:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference6595_AR6595;
		 pAReftypeType6594_ART6594:=myrec;
		END;
		(*! Match m1 *)
	FUNCTION pAIdLoc6600_AIL6600:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc6600_AIL6600:=myrec;
		END;
		(*! try to cast to type: ref int32*)
	FUNCTION pARefcastRefval6593_ARR6593:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType6594_ART6594;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc6600_AIL6600;
		 pARefcastRefval6593_ARR6593:=myrec;
		END;
	FUNCTION pADerefRhs6592_ADR6592:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval6593_ARR6593;
		 pADerefRhs6592_ADR6592:=myrec;
		END;
	FUNCTION pARhsValue6591_ARV6591:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6592_ADR6592;
		 pARhsValue6591_ARV6591:=myrec;
		END;
	FUNCTION pADyadicValue6585_ADV6585:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue6587_ARV6587;
		myrec^.arg2:=pARhsValue6591_ARV6591;
		myrec^.fn:=pAPlusDyadic6586_APD6586;
		 pADyadicValue6585_ADV6585:=myrec;
		END;
	FUNCTION pAMemoryLoc6584_AML6584:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pADyadicValue6585_ADV6585;
		 pAMemoryLoc6584_AML6584:=myrec;
		END;
		(*! try to cast to type: ref octet*)
	FUNCTION pARefcastRefval6578_ARR6578:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType6579_ART6579;
		(*class ilcg.node.AMemoryLoc*)
		myrec^.arg2:=pAMemoryLoc6584_AML6584;
		 pARefcastRefval6578_ARR6578:=myrec;
		END;
	FUNCTION pAOctetFormat6608_AOF6608:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat6608_AOF6608:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype6607_AFP6607:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype6607_AFP6607:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6606_APT6606:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAPredeclaredtypeType6606_APT6606:=myrec;
		END;
	FUNCTION pAReference6605_AR6605:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType6606_APT6606;
		 pAReference6605_AR6605:=myrec;
		END;
	FUNCTION pAReftypeType6604_ART6604:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference6605_AR6605;
		 pAReftypeType6604_ART6604:=myrec;
		END;
	FUNCTION pAPlusDyadic6611_APD6611:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic6611_APD6611:=myrec;
		END;
		(*! Match si *)
	FUNCTION pAIdLoc6615_AIL6615:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc6615_AIL6615:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6614_AR6614:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6615_AIL6615;
		 pARefval6614_AR6614:=myrec;
		END;
	FUNCTION pADerefRhs6613_ADR6613:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6614_AR6614;
		 pADerefRhs6613_ADR6613:=myrec;
		END;
	FUNCTION pARhsValue6612_ARV6612:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6613_ADR6613;
		 pARhsValue6612_ARV6612:=myrec;
		END;
	FUNCTION pASigned6624_AS6624:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned6624_AS6624:=myrec;
		END;
	FUNCTION pASignedTformat6623_AST6623:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned6624_AS6624;
		 pASignedTformat6623_AST6623:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6622_ATP6622:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype6622_ATP6622:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6621_APT6621:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType6621_APT6621:=myrec;
		END;
	FUNCTION pAReference6620_AR6620:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType6621_APT6621;
		 pAReference6620_AR6620:=myrec;
		END;
	FUNCTION pAReftypeType6619_ART6619:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference6620_AR6620;
		 pAReftypeType6619_ART6619:=myrec;
		END;
		(*! Match m1 *)
	FUNCTION pAIdLoc6625_AIL6625:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc6625_AIL6625:=myrec;
		END;
		(*! try to cast to type: ref int32*)
	FUNCTION pARefcastRefval6618_ARR6618:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType6619_ART6619;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc6625_AIL6625;
		 pARefcastRefval6618_ARR6618:=myrec;
		END;
	FUNCTION pADerefRhs6617_ADR6617:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval6618_ARR6618;
		 pADerefRhs6617_ADR6617:=myrec;
		END;
	FUNCTION pARhsValue6616_ARV6616:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6617_ADR6617;
		 pARhsValue6616_ARV6616:=myrec;
		END;
	FUNCTION pADyadicValue6610_ADV6610:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue6612_ARV6612;
		myrec^.arg2:=pARhsValue6616_ARV6616;
		myrec^.fn:=pAPlusDyadic6611_APD6611;
		 pADyadicValue6610_ADV6610:=myrec;
		END;
	FUNCTION pAMemoryLoc6609_AML6609:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pADyadicValue6610_ADV6610;
		 pAMemoryLoc6609_AML6609:=myrec;
		END;
		(*! try to cast to type: ref octet*)
	FUNCTION pARefcastRefval6603_ARR6603:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType6604_ART6604;
		(*class ilcg.node.AMemoryLoc*)
		myrec^.arg2:=pAMemoryLoc6609_AML6609;
		 pARefcastRefval6603_ARR6603:=myrec;
		END;
	FUNCTION pADerefRhs6602_ADR6602:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval6603_ARR6603;
		 pADerefRhs6602_ADR6602:=myrec;
		END;
	FUNCTION pARhsValue6601_ARV6601:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6602_ADR6602;
		 pARhsValue6601_ARV6601:=myrec;
		END;
	FUNCTION pAAssign6577_AA6577:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue6601_ARV6601;
		myrec^.dest:=pARefcastRefval6578_ARR6578;
		 pAAssign6577_AA6577:=myrec;
		END;
	FUNCTION pAAssignMeaning6576_AAM6576:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign6577_AA6577;
		 pAAssignMeaning6576_AAM6576:=myrec;
		END;
	FUNCTION pAForMeaning6555_AFM6555:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=forloop;
		myrec^.indexvar:=pARefcastRefval6556_ARR6556;
		myrec^.start:=pARhsValue6564_ARV6564;
		myrec^.stop:=pARhsValue6568_ARV6568;
		myrec^.incr:=pARhsValue6572_ARV6572;
		myrec^.action:=pAAssignMeaning6576_AAM6576;
		 pAForMeaning6555_AFM6555:=myrec;
		END;
	FUNCTION pAAssemblypattern6627_AA6627:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,' inc ecx\n rep movsb' );
		pAAssemblypattern6627_AA6627:=list;
		END;
	FUNCTION pAAssemblesto6626_AA6626:pprintlist;
	begin
		pAAssemblesto6626_AA6626:=pAAssemblypattern6627_AA6627;
		END;
	FUNCTION pASideeffects6629_AS6629:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6629_AS6629:=nil;
		 pASideeffects6629_AS6629:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6630_AUP6630:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6630_AUP6630:=nil;
		 pAUnconditionalPrecond6630_AUP6630:=myrec;
		END;
	FUNCTION REPMOVSB_REPMOVSB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patsourcereg_;
		params^[1]:=patmaddrmode_;
		params^[0]:=patcountreg_;
		params^[3]:=patdestreg_;
		paramcount:=5;
		meaning:=pAForMeaning6555_AFM6555;
		matchedAssembler:=pAAssemblesto6626_AA6626;
		END;
		REPMOVSB_REPMOVSB:=myrec;
	END;
	FUNCTION pAUnreservedReservation6634_AUR6634:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation6634_AUR6634:=nil;
		 pAUnreservedReservation6634_AUR6634:=myrec;
		END;
	FUNCTION pAOptionalsign6637_AO6637:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign6637_AO6637:=nil;
		 pAOptionalsign6637_AO6637:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber6636_AIN6636:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber6636_AIN6636:=myrec;
		END;
	FUNCTION pAStackAggregate6635_ASA6635:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAStackAggregate6635_ASA6635:=nil;
		 pAStackAggregate6635_ASA6635:=myrec;
		END;
	FUNCTION pAIeee63Tformat6640_AI63T6640:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat6640_AI63T6640:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6639_ATP6639:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype6639_ATP6639:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6638_APT6638:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType6638_APT6638:=myrec;
		END;
	FUNCTION pAIeee32Tformat6646_AI32T6646:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat6646_AI32T6646:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6645_ATP6645:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype6645_ATP6645:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6644_APT6644:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType6644_APT6644:=myrec;
		END;
	FUNCTION pAIeee63Tformat6649_AI63T6649:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat6649_AI63T6649:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6648_ATP6648:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype6648_ATP6648:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6647_APT6647:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType6647_APT6647:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl6643_AAP6643:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 235;
		myrec^.last:= 236;
		 pAAlternativesPatterndecl6643_AAP6643:=myrec;
		END;
	FUNCTION pATypeid6654_AT6654:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ anyreal  ilcg.pattern@3e25d3}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6654_AT6654:=myrec;
		END;
	FUNCTION pATypeidType6653_ATT6653:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6654_AT6654;
		 pATypeidType6653_ATT6653:=myrec;
		END;
	FUNCTION pAInt64Signed6658_AI64S6658:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64;
		 pAInt64Signed6658_AI64S6658:=myrec;
		END;
	FUNCTION pASignedTformat6657_AST6657:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt64Signed6658_AI64S6658;
		 pASignedTformat6657_AST6657:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6656_ATP6656:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64 ;
		 pATformatPredeclaredtype6656_ATP6656:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6655_APT6655:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64 ;
		 pAPredeclaredtypeType6655_APT6655:=myrec;
		END;
	FUNCTION pASigned6662_AS6662:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned6662_AS6662:=myrec;
		END;
	FUNCTION pASignedTformat6661_AST6661:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned6662_AS6662;
		 pASignedTformat6661_AST6661:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6660_ATP6660:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype6660_ATP6660:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6659_APT6659:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType6659_APT6659:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl6652_AAP6652:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 237;
		myrec^.last:= 239;
		 pAAlternativesPatterndecl6652_AAP6652:=myrec;
		END;
	FUNCTION pASigned6669_AS6669:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned6669_AS6669:=myrec;
		END;
	FUNCTION pASignedTformat6668_AST6668:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned6669_AS6669;
		 pASignedTformat6668_AST6668:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6667_ATP6667:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype6667_ATP6667:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6666_APT6666:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType6666_APT6666:=myrec;
		END;
	FUNCTION pAInt16Signed6673_AI16S6673:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed6673_AI16S6673:=myrec;
		END;
	FUNCTION pASignedTformat6672_AST6672:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed6673_AI16S6673;
		 pASignedTformat6672_AST6672:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6671_ATP6671:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype6671_ATP6671:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6670_APT6670:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pAPredeclaredtypeType6670_APT6670:=myrec;
		END;
	FUNCTION pAInt64Signed6677_AI64S6677:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64;
		 pAInt64Signed6677_AI64S6677:=myrec;
		END;
	FUNCTION pASignedTformat6676_AST6676:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt64Signed6677_AI64S6677;
		 pASignedTformat6676_AST6676:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6675_ATP6675:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64 ;
		 pATformatPredeclaredtype6675_ATP6675:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6674_APT6674:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64 ;
		 pAPredeclaredtypeType6674_APT6674:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl6665_AAP6665:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 240;
		myrec^.last:= 242;
		 pAAlternativesPatterndecl6665_AAP6665:=myrec;
		END;
	FUNCTION pARemainderOperator6685_ARO6685:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pARemainderOperator6685_ARO6685:=nil;
		 pARemainderOperator6685_ARO6685:=myrec;
		END;
	FUNCTION pATypeid6690_AT6690:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ add  ilcg.Operation@11fb68f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6690_AT6690:=myrec;
		END;
	FUNCTION pATypeidType6689_ATT6689:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6690_AT6690;
		 pATypeidType6689_ATT6689:=myrec;
		END;
	FUNCTION pATypeid6692_AT6692:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ sub  ilcg.Operation@24d517}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6692_AT6692:=myrec;
		END;
	FUNCTION pATypeidType6691_ATT6691:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6692_AT6692;
		 pATypeidType6691_ATT6691:=myrec;
		END;
	FUNCTION pATypeid6694_AT6694:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mul  ilcg.Operation@e589bd}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6694_AT6694:=myrec;
		END;
	FUNCTION pATypeidType6693_ATT6693:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6694_AT6694;
		 pATypeidType6693_ATT6693:=myrec;
		END;
	FUNCTION pATypeid6696_AT6696:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fdiv  ilcg.Operation@79e4c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6696_AT6696:=myrec;
		END;
	FUNCTION pATypeidType6695_ATT6695:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6696_AT6696;
		 pATypeidType6695_ATT6695:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl6688_AAP6688:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 243;
		myrec^.last:= 246;
		 pAAlternativesPatterndecl6688_AAP6688:=myrec;
		END;
	FUNCTION pATypeid6702_AT6702:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fpuint  ilcg.pattern@8aaed5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6702_AT6702:=myrec;
		END;
	FUNCTION pATypeid6707_AT6707:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ i  ilcg.Param@c9dee3}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid6707_AT6707:=myrec;
		END;
	FUNCTION pATypeidType6706_ATT6706:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6707_AT6707;
		 pATypeidType6706_ATT6706:=myrec;
		END;
	FUNCTION pARoundMonadic6709_ARM6709:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpROUND;
		 pARoundMonadic6709_ARM6709:=myrec;
		END;
	FUNCTION pATypeid6713_AT6713:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@ced1ac}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid6713_AT6713:=myrec;
		END;
	FUNCTION pATypeidType6712_ATT6712:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6713_AT6713;
		 pATypeidType6712_ATT6712:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc6715_AIL6715:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6715_AIL6715:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue6714_ALV6714:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6715_AIL6715;
		 pALocValue6714_ALV6714:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastpopRhs6711_ACR6711:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType6712_ATT6712;
		myrec^.arg2:=pALocValue6714_ALV6714;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs6711_ACR6711:=myrec;
		END;
	FUNCTION pARhsValue6710_ARV6710:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs6711_ACR6711;
		 pARhsValue6710_ARV6710:=myrec;
		END;
	FUNCTION pAMonadicValue6708_AMV6708:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue6710_ARV6710;
		myrec^.fn:=pARoundMonadic6709_ARM6709;
		 pAMonadicValue6708_AMV6708:=myrec;
		END;
		(*! try to cast to type: i*)
	FUNCTION pACastRhs6705_ACR6705:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType6706_ATT6706;
		myrec^.arg2:=pAMonadicValue6708_AMV6708;
		 pACastRhs6705_ACR6705:=myrec;
		END;
	FUNCTION pARhsValue6704_ARV6704:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6705_ACR6705;
		 pARhsValue6704_ARV6704:=myrec;
		END;
	FUNCTION pAValueMeaning6703_AVM6703:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue6704_ARV6704;
		 pAValueMeaning6703_AVM6703:=myrec;
		END;
	FUNCTION pAAssemblypattern6717_AA6717:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'frndint' );
		pAAssemblypattern6717_AA6717:=list;
		END;
	FUNCTION pAAssemblesto6716_AA6716:pprintlist;
	begin
		pAAssemblesto6716_AA6716:=pAAssemblypattern6717_AA6717;
		END;
	FUNCTION pASideeffects6719_AS6719:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6719_AS6719:=nil;
		 pASideeffects6719_AS6719:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6720_AUP6720:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6720_AUP6720:=nil;
		 pAUnconditionalPrecond6720_AUP6720:=myrec;
		END;
	FUNCTION fround_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patfpuint_;
		params^[0]:=typeparam;
		paramcount:=3;
		meaning:=pAValueMeaning6703_AVM6703;
		matchedAssembler:=pAAssemblesto6716_AA6716;
		END;
		fround_:=myrec;
	END;
	FUNCTION pATypeid6729_AT6729:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@6bf80b}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid6729_AT6729:=myrec;
		END;
	FUNCTION pATypeidType6728_ATT6728:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6729_AT6729;
		 pATypeidType6728_ATT6728:=myrec;
		END;
	FUNCTION pASqrtMonadic6731_ASM6731:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpSQRT;
		 pASqrtMonadic6731_ASM6731:=myrec;
		END;
	FUNCTION pATypeid6735_AT6735:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@6bf80b}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid6735_AT6735:=myrec;
		END;
	FUNCTION pATypeidType6734_ATT6734:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6735_AT6735;
		 pATypeidType6734_ATT6734:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc6737_AIL6737:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6737_AIL6737:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue6736_ALV6736:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6737_AIL6737;
		 pALocValue6736_ALV6736:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastpopRhs6733_ACR6733:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType6734_ATT6734;
		myrec^.arg2:=pALocValue6736_ALV6736;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs6733_ACR6733:=myrec;
		END;
	FUNCTION pARhsValue6732_ARV6732:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs6733_ACR6733;
		 pARhsValue6732_ARV6732:=myrec;
		END;
	FUNCTION pAMonadicValue6730_AMV6730:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue6732_ARV6732;
		myrec^.fn:=pASqrtMonadic6731_ASM6731;
		 pAMonadicValue6730_AMV6730:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs6727_ACR6727:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType6728_ATT6728;
		myrec^.arg2:=pAMonadicValue6730_AMV6730;
		 pACastRhs6727_ACR6727:=myrec;
		END;
	FUNCTION pARhsValue6726_ARV6726:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6727_ACR6727;
		 pARhsValue6726_ARV6726:=myrec;
		END;
	FUNCTION pAValueMeaning6725_AVM6725:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue6726_ARV6726;
		 pAValueMeaning6725_AVM6725:=myrec;
		END;
	FUNCTION pAAssemblypattern6739_AA6739:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fsqrt' );
		pAAssemblypattern6739_AA6739:=list;
		END;
	FUNCTION pAAssemblesto6738_AA6738:pprintlist;
	begin
		pAAssemblesto6738_AA6738:=pAAssemblypattern6739_AA6739;
		END;
	FUNCTION pASideeffects6741_AS6741:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6741_AS6741:=nil;
		 pASideeffects6741_AS6741:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6742_AUP6742:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6742_AUP6742:=nil;
		 pAUnconditionalPrecond6742_AUP6742:=myrec;
		END;
	FUNCTION fsqrt_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning6725_AVM6725;
		matchedAssembler:=pAAssemblesto6738_AA6738;
		END;
		fsqrt_:=myrec;
	END;
	FUNCTION pATypeid6751_AT6751:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@1fac352}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid6751_AT6751:=myrec;
		END;
	FUNCTION pATypeidType6750_ATT6750:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6751_AT6751;
		 pATypeidType6750_ATT6750:=myrec;
		END;
	FUNCTION pASinMonadic6753_ASM6753:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpSIN;
		 pASinMonadic6753_ASM6753:=myrec;
		END;
	FUNCTION pATypeid6757_AT6757:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@1fac352}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid6757_AT6757:=myrec;
		END;
	FUNCTION pATypeidType6756_ATT6756:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6757_AT6757;
		 pATypeidType6756_ATT6756:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc6759_AIL6759:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6759_AIL6759:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue6758_ALV6758:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6759_AIL6759;
		 pALocValue6758_ALV6758:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastpopRhs6755_ACR6755:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType6756_ATT6756;
		myrec^.arg2:=pALocValue6758_ALV6758;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs6755_ACR6755:=myrec;
		END;
	FUNCTION pARhsValue6754_ARV6754:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs6755_ACR6755;
		 pARhsValue6754_ARV6754:=myrec;
		END;
	FUNCTION pAMonadicValue6752_AMV6752:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue6754_ARV6754;
		myrec^.fn:=pASinMonadic6753_ASM6753;
		 pAMonadicValue6752_AMV6752:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs6749_ACR6749:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType6750_ATT6750;
		myrec^.arg2:=pAMonadicValue6752_AMV6752;
		 pACastRhs6749_ACR6749:=myrec;
		END;
	FUNCTION pARhsValue6748_ARV6748:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6749_ACR6749;
		 pARhsValue6748_ARV6748:=myrec;
		END;
	FUNCTION pAValueMeaning6747_AVM6747:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue6748_ARV6748;
		 pAValueMeaning6747_AVM6747:=myrec;
		END;
	FUNCTION pAAssemblypattern6761_AA6761:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fsin' );
		pAAssemblypattern6761_AA6761:=list;
		END;
	FUNCTION pAAssemblesto6760_AA6760:pprintlist;
	begin
		pAAssemblesto6760_AA6760:=pAAssemblypattern6761_AA6761;
		END;
	FUNCTION pASideeffects6763_AS6763:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6763_AS6763:=nil;
		 pASideeffects6763_AS6763:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6764_AUP6764:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6764_AUP6764:=nil;
		 pAUnconditionalPrecond6764_AUP6764:=myrec;
		END;
	FUNCTION fsin_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning6747_AVM6747;
		matchedAssembler:=pAAssemblesto6760_AA6760;
		END;
		fsin_:=myrec;
	END;
	FUNCTION pATypeid6773_AT6773:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@15789a5}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid6773_AT6773:=myrec;
		END;
	FUNCTION pATypeidType6772_ATT6772:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6773_AT6773;
		 pATypeidType6772_ATT6772:=myrec;
		END;
	FUNCTION pACosMonadic6775_ACM6775:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpCOS;
		 pACosMonadic6775_ACM6775:=myrec;
		END;
	FUNCTION pATypeid6779_AT6779:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@15789a5}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid6779_AT6779:=myrec;
		END;
	FUNCTION pATypeidType6778_ATT6778:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6779_AT6779;
		 pATypeidType6778_ATT6778:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc6781_AIL6781:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6781_AIL6781:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue6780_ALV6780:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6781_AIL6781;
		 pALocValue6780_ALV6780:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastpopRhs6777_ACR6777:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType6778_ATT6778;
		myrec^.arg2:=pALocValue6780_ALV6780;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs6777_ACR6777:=myrec;
		END;
	FUNCTION pARhsValue6776_ARV6776:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs6777_ACR6777;
		 pARhsValue6776_ARV6776:=myrec;
		END;
	FUNCTION pAMonadicValue6774_AMV6774:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue6776_ARV6776;
		myrec^.fn:=pACosMonadic6775_ACM6775;
		 pAMonadicValue6774_AMV6774:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs6771_ACR6771:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType6772_ATT6772;
		myrec^.arg2:=pAMonadicValue6774_AMV6774;
		 pACastRhs6771_ACR6771:=myrec;
		END;
	FUNCTION pARhsValue6770_ARV6770:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6771_ACR6771;
		 pARhsValue6770_ARV6770:=myrec;
		END;
	FUNCTION pAValueMeaning6769_AVM6769:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue6770_ARV6770;
		 pAValueMeaning6769_AVM6769:=myrec;
		END;
	FUNCTION pAAssemblypattern6783_AA6783:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fcos' );
		pAAssemblypattern6783_AA6783:=list;
		END;
	FUNCTION pAAssemblesto6782_AA6782:pprintlist;
	begin
		pAAssemblesto6782_AA6782:=pAAssemblypattern6783_AA6783;
		END;
	FUNCTION pASideeffects6785_AS6785:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6785_AS6785:=nil;
		 pASideeffects6785_AS6785:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6786_AUP6786:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6786_AUP6786:=nil;
		 pAUnconditionalPrecond6786_AUP6786:=myrec;
		END;
	FUNCTION fcos_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning6769_AVM6769;
		matchedAssembler:=pAAssemblesto6782_AA6782;
		END;
		fcos_:=myrec;
	END;
	FUNCTION pAInt64Signed6797_AI64S6797:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64;
		 pAInt64Signed6797_AI64S6797:=myrec;
		END;
	FUNCTION pASignedTformat6796_AST6796:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt64Signed6797_AI64S6797;
		 pASignedTformat6796_AST6796:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6795_ATP6795:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64 ;
		 pATformatPredeclaredtype6795_ATP6795:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6794_APT6794:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64 ;
		 pAPredeclaredtypeType6794_APT6794:=myrec;
		END;
	FUNCTION pAExtendMonadic6799_AEM6799:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpEXTEND;
		 pAExtendMonadic6799_AEM6799:=myrec;
		END;
	FUNCTION pASigned6805_AS6805:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned6805_AS6805:=myrec;
		END;
	FUNCTION pASignedTformat6804_AST6804:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned6805_AS6805;
		 pASignedTformat6804_AST6804:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6803_ATP6803:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype6803_ATP6803:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6802_APT6802:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType6802_APT6802:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc6807_AIL6807:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6807_AIL6807:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue6806_ALV6806:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6807_AIL6807;
		 pALocValue6806_ALV6806:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastpopRhs6801_ACR6801:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType6802_APT6802;
		myrec^.arg2:=pALocValue6806_ALV6806;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs6801_ACR6801:=myrec;
		END;
	FUNCTION pARhsValue6800_ARV6800:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs6801_ACR6801;
		 pARhsValue6800_ARV6800:=myrec;
		END;
	FUNCTION pAMonadicValue6798_AMV6798:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue6800_ARV6800;
		myrec^.fn:=pAExtendMonadic6799_AEM6799;
		 pAMonadicValue6798_AMV6798:=myrec;
		END;
		(*! try to cast to type: int64*)
	FUNCTION pACastRhs6793_ACR6793:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType6794_APT6794;
		myrec^.arg2:=pAMonadicValue6798_AMV6798;
		 pACastRhs6793_ACR6793:=myrec;
		END;
	FUNCTION pARhsValue6792_ARV6792:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6793_ACR6793;
		 pARhsValue6792_ARV6792:=myrec;
		END;
	FUNCTION pAValueMeaning6791_AVM6791:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue6792_ARV6792;
		 pAValueMeaning6791_AVM6791:=myrec;
		END;
	FUNCTION pAAssemblypattern6809_AA6809:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'; fextend ' );
		pAAssemblypattern6809_AA6809:=list;
		END;
	FUNCTION pAAssemblesto6808_AA6808:pprintlist;
	begin
		pAAssemblesto6808_AA6808:=pAAssemblypattern6809_AA6809;
		END;
	FUNCTION pASideeffects6811_AS6811:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6811_AS6811:=nil;
		 pASideeffects6811_AS6811:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6812_AUP6812:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6812_AUP6812:=nil;
		 pAUnconditionalPrecond6812_AUP6812:=myrec;
		END;
	FUNCTION fextend_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning6791_AVM6791;
		matchedAssembler:=pAAssemblesto6808_AA6808;
		END;
		fextend_:=myrec;
	END;
	FUNCTION pATypeid6821_AT6821:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@1716286}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid6821_AT6821:=myrec;
		END;
	FUNCTION pATypeidType6820_ATT6820:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6821_AT6821;
		 pATypeidType6820_ATT6820:=myrec;
		END;
	FUNCTION pALnMonadic6823_ALM6823:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpLN;
		 pALnMonadic6823_ALM6823:=myrec;
		END;
	FUNCTION pATypeid6827_AT6827:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@1716286}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid6827_AT6827:=myrec;
		END;
	FUNCTION pATypeidType6826_ATT6826:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6827_AT6827;
		 pATypeidType6826_ATT6826:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc6829_AIL6829:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6829_AIL6829:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue6828_ALV6828:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6829_AIL6829;
		 pALocValue6828_ALV6828:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastpopRhs6825_ACR6825:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType6826_ATT6826;
		myrec^.arg2:=pALocValue6828_ALV6828;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs6825_ACR6825:=myrec;
		END;
	FUNCTION pARhsValue6824_ARV6824:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs6825_ACR6825;
		 pARhsValue6824_ARV6824:=myrec;
		END;
	FUNCTION pAMonadicValue6822_AMV6822:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue6824_ARV6824;
		myrec^.fn:=pALnMonadic6823_ALM6823;
		 pAMonadicValue6822_AMV6822:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs6819_ACR6819:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType6820_ATT6820;
		myrec^.arg2:=pAMonadicValue6822_AMV6822;
		 pACastRhs6819_ACR6819:=myrec;
		END;
	FUNCTION pARhsValue6818_ARV6818:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6819_ACR6819;
		 pARhsValue6818_ARV6818:=myrec;
		END;
	FUNCTION pAValueMeaning6817_AVM6817:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue6818_ARV6818;
		 pAValueMeaning6817_AVM6817:=myrec;
		END;
	FUNCTION pAAssemblypattern6831_AA6831:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fldln2\n fxch\n fyl2x' );
		pAAssemblypattern6831_AA6831:=list;
		END;
	FUNCTION pAAssemblesto6830_AA6830:pprintlist;
	begin
		pAAssemblesto6830_AA6830:=pAAssemblypattern6831_AA6831;
		END;
	FUNCTION pASideeffects6833_AS6833:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6833_AS6833:=nil;
		 pASideeffects6833_AS6833:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6834_AUP6834:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6834_AUP6834:=nil;
		 pAUnconditionalPrecond6834_AUP6834:=myrec;
		END;
	FUNCTION fln_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning6817_AVM6817;
		matchedAssembler:=pAAssemblesto6830_AA6830;
		END;
		fln_:=myrec;
	END;
	FUNCTION pATypeid6843_AT6843:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@c74b55}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid6843_AT6843:=myrec;
		END;
	FUNCTION pATypeidType6842_ATT6842:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6843_AT6843;
		 pATypeidType6842_ATT6842:=myrec;
		END;
	FUNCTION pATanMonadic6845_ATM6845:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpTAN;
		 pATanMonadic6845_ATM6845:=myrec;
		END;
	FUNCTION pATypeid6849_AT6849:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@c74b55}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid6849_AT6849:=myrec;
		END;
	FUNCTION pATypeidType6848_ATT6848:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6849_AT6849;
		 pATypeidType6848_ATT6848:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc6851_AIL6851:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6851_AIL6851:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue6850_ALV6850:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6851_AIL6851;
		 pALocValue6850_ALV6850:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastpopRhs6847_ACR6847:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType6848_ATT6848;
		myrec^.arg2:=pALocValue6850_ALV6850;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs6847_ACR6847:=myrec;
		END;
	FUNCTION pARhsValue6846_ARV6846:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs6847_ACR6847;
		 pARhsValue6846_ARV6846:=myrec;
		END;
	FUNCTION pAMonadicValue6844_AMV6844:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue6846_ARV6846;
		myrec^.fn:=pATanMonadic6845_ATM6845;
		 pAMonadicValue6844_AMV6844:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs6841_ACR6841:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType6842_ATT6842;
		myrec^.arg2:=pAMonadicValue6844_AMV6844;
		 pACastRhs6841_ACR6841:=myrec;
		END;
	FUNCTION pARhsValue6840_ARV6840:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6841_ACR6841;
		 pARhsValue6840_ARV6840:=myrec;
		END;
	FUNCTION pAValueMeaning6839_AVM6839:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue6840_ARV6840;
		 pAValueMeaning6839_AVM6839:=myrec;
		END;
	FUNCTION pAAssemblypattern6853_AA6853:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fptan' );
		pAAssemblypattern6853_AA6853:=list;
		END;
	FUNCTION pAAssemblesto6852_AA6852:pprintlist;
	begin
		pAAssemblesto6852_AA6852:=pAAssemblypattern6853_AA6853;
		END;
	FUNCTION pASideeffects6855_AS6855:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6855_AS6855:=nil;
		 pASideeffects6855_AS6855:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6856_AUP6856:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6856_AUP6856:=nil;
		 pAUnconditionalPrecond6856_AUP6856:=myrec;
		END;
	FUNCTION fptan_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning6839_AVM6839;
		matchedAssembler:=pAAssemblesto6852_AA6852;
		END;
		fptan_:=myrec;
	END;
	FUNCTION pATypeid6865_AT6865:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@d2ad3c}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid6865_AT6865:=myrec;
		END;
	FUNCTION pATypeidType6864_ATT6864:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6865_AT6865;
		 pATypeidType6864_ATT6864:=myrec;
		END;
	FUNCTION pAAbsMonadic6867_AAM6867:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpABS;
		 pAAbsMonadic6867_AAM6867:=myrec;
		END;
	FUNCTION pATypeid6871_AT6871:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@d2ad3c}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid6871_AT6871:=myrec;
		END;
	FUNCTION pATypeidType6870_ATT6870:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6871_AT6871;
		 pATypeidType6870_ATT6870:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc6873_AIL6873:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6873_AIL6873:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue6872_ALV6872:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6873_AIL6873;
		 pALocValue6872_ALV6872:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastpopRhs6869_ACR6869:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType6870_ATT6870;
		myrec^.arg2:=pALocValue6872_ALV6872;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs6869_ACR6869:=myrec;
		END;
	FUNCTION pARhsValue6868_ARV6868:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs6869_ACR6869;
		 pARhsValue6868_ARV6868:=myrec;
		END;
	FUNCTION pAMonadicValue6866_AMV6866:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue6868_ARV6868;
		myrec^.fn:=pAAbsMonadic6867_AAM6867;
		 pAMonadicValue6866_AMV6866:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs6863_ACR6863:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType6864_ATT6864;
		myrec^.arg2:=pAMonadicValue6866_AMV6866;
		 pACastRhs6863_ACR6863:=myrec;
		END;
	FUNCTION pARhsValue6862_ARV6862:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6863_ACR6863;
		 pARhsValue6862_ARV6862:=myrec;
		END;
	FUNCTION pAValueMeaning6861_AVM6861:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue6862_ARV6862;
		 pAValueMeaning6861_AVM6861:=myrec;
		END;
	FUNCTION pAAssemblypattern6875_AA6875:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fabs' );
		pAAssemblypattern6875_AA6875:=list;
		END;
	FUNCTION pAAssemblesto6874_AA6874:pprintlist;
	begin
		pAAssemblesto6874_AA6874:=pAAssemblypattern6875_AA6875;
		END;
	FUNCTION pASideeffects6877_AS6877:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6877_AS6877:=nil;
		 pASideeffects6877_AS6877:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6878_AUP6878:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6878_AUP6878:=nil;
		 pAUnconditionalPrecond6878_AUP6878:=myrec;
		END;
	FUNCTION fabs_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning6861_AVM6861;
		matchedAssembler:=pAAssemblesto6874_AA6874;
		END;
		fabs_:=myrec;
	END;
	FUNCTION pATypeid6883_AT6883:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fround  ilcg.pattern@c85a33}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6883_AT6883:=myrec;
		END;
	FUNCTION pATypeidType6882_ATT6882:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6883_AT6883;
		 pATypeidType6882_ATT6882:=myrec;
		END;
	FUNCTION pATypeid6885_AT6885:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fsqrt  ilcg.pattern@1e26d9b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6885_AT6885:=myrec;
		END;
	FUNCTION pATypeidType6884_ATT6884:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6885_AT6885;
		 pATypeidType6884_ATT6884:=myrec;
		END;
	FUNCTION pATypeid6887_AT6887:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fsin  ilcg.pattern@779f5e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6887_AT6887:=myrec;
		END;
	FUNCTION pATypeidType6886_ATT6886:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6887_AT6887;
		 pATypeidType6886_ATT6886:=myrec;
		END;
	FUNCTION pATypeid6889_AT6889:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fcos  ilcg.pattern@d8dc2e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6889_AT6889:=myrec;
		END;
	FUNCTION pATypeidType6888_ATT6888:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6889_AT6889;
		 pATypeidType6888_ATT6888:=myrec;
		END;
	FUNCTION pATypeid6891_AT6891:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fptan  ilcg.pattern@2bd9d7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6891_AT6891:=myrec;
		END;
	FUNCTION pATypeidType6890_ATT6890:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6891_AT6891;
		 pATypeidType6890_ATT6890:=myrec;
		END;
	FUNCTION pATypeid6893_AT6893:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fln  ilcg.pattern@1826b5c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6893_AT6893:=myrec;
		END;
	FUNCTION pATypeidType6892_ATT6892:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6893_AT6893;
		 pATypeidType6892_ATT6892:=myrec;
		END;
	FUNCTION pATypeid6895_AT6895:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fabs  ilcg.pattern@f85fd3}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6895_AT6895:=myrec;
		END;
	FUNCTION pATypeidType6894_ATT6894:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6895_AT6895;
		 pATypeidType6894_ATT6894:=myrec;
		END;
	FUNCTION pATypeid6897_AT6897:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fextend  ilcg.pattern@b07848}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6897_AT6897:=myrec;
		END;
	FUNCTION pATypeidType6896_ATT6896:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6897_AT6897;
		 pATypeidType6896_ATT6896:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl6881_AAP6881:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 247;
		myrec^.last:= 254;
		 pAAlternativesPatterndecl6881_AAP6881:=myrec;
		END;
	FUNCTION pATypeid6900_AT6900:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6900_AT6900:=myrec;
		END;
	FUNCTION pATypeid6902_AT6902:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baddrmode  ilcg.pattern@a14fed}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6902_AT6902:=myrec;
		END;
		(*! Match b1 *)
	FUNCTION pAIdLoc6906_AIL6906:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6906_AIL6906:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6905_AR6905:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6906_AIL6906;
		 pARefval6905_AR6905:=myrec;
		END;
	FUNCTION pADivideDyadic6908_ADD6908:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpdivide;
		 pADivideDyadic6908_ADD6908:=myrec;
		END;
		(*! Match b1 *)
	FUNCTION pAIdLoc6912_AIL6912:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6912_AIL6912:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6911_AR6911:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6912_AIL6912;
		 pARefval6911_AR6911:=myrec;
		END;
	FUNCTION pADerefRhs6910_ADR6910:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6911_AR6911;
		 pADerefRhs6910_ADR6910:=myrec;
		END;
	FUNCTION pARhsValue6909_ARV6909:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6910_ADR6910;
		 pARhsValue6909_ARV6909:=myrec;
		END;
		(*! Match b2 *)
	FUNCTION pAIdLoc6916_AIL6916:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc6916_AIL6916:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6915_AR6915:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6916_AIL6916;
		 pARefval6915_AR6915:=myrec;
		END;
	FUNCTION pADerefRhs6914_ADR6914:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6915_AR6915;
		 pADerefRhs6914_ADR6914:=myrec;
		END;
	FUNCTION pARhsValue6913_ARV6913:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6914_ADR6914;
		 pARhsValue6913_ARV6913:=myrec;
		END;
	FUNCTION pADyadicValue6907_ADV6907:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue6909_ARV6909;
		myrec^.arg2:=pARhsValue6913_ARV6913;
		myrec^.fn:=pADivideDyadic6908_ADD6908;
		 pADyadicValue6907_ADV6907:=myrec;
		END;
	FUNCTION pAAssign6904_AA6904:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue6907_ADV6907;
		myrec^.dest:=pARefval6905_AR6905;
		 pAAssign6904_AA6904:=myrec;
		END;
	FUNCTION pAAssignMeaning6903_AAM6903:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign6904_AA6904;
		 pAAssignMeaning6903_AAM6903:=myrec;
		END;
	FUNCTION pAAssemblypattern6918_AA6918:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'bytediv ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern6918_AA6918:=list;
		END;
	FUNCTION pAAssemblesto6917_AA6917:pprintlist;
	begin
		pAAssemblesto6917_AA6917:=pAAssemblypattern6918_AA6918;
		END;
	FUNCTION pASideeffects6923_AS6923:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6923_AS6923:=nil;
		 pASideeffects6923_AS6923:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6924_AUP6924:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6924_AUP6924:=nil;
		 pAUnconditionalPrecond6924_AUP6924:=myrec;
		END;
	FUNCTION RDIVB_RDIVB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbaddrmode_;
		params^[0]:=patbreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning6903_AAM6903;
		matchedAssembler:=pAAssemblesto6917_AA6917;
		END;
		RDIVB_RDIVB:=myrec;
	END;
	FUNCTION pATypeid6927_AT6927:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6927_AT6927:=myrec;
		END;
	FUNCTION pATypeid6929_AT6929:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baddrmode  ilcg.pattern@a14fed}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6929_AT6929:=myrec;
		END;
		(*! Match b1 *)
	FUNCTION pAIdLoc6933_AIL6933:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6933_AIL6933:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6932_AR6932:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6933_AIL6933;
		 pARefval6932_AR6932:=myrec;
		END;
	FUNCTION pATimesDyadic6935_ATD6935:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcptimes;
		 pATimesDyadic6935_ATD6935:=myrec;
		END;
		(*! Match b1 *)
	FUNCTION pAIdLoc6939_AIL6939:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6939_AIL6939:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6938_AR6938:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6939_AIL6939;
		 pARefval6938_AR6938:=myrec;
		END;
	FUNCTION pADerefRhs6937_ADR6937:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6938_AR6938;
		 pADerefRhs6937_ADR6937:=myrec;
		END;
	FUNCTION pARhsValue6936_ARV6936:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6937_ADR6937;
		 pARhsValue6936_ARV6936:=myrec;
		END;
		(*! Match b2 *)
	FUNCTION pAIdLoc6943_AIL6943:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc6943_AIL6943:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6942_AR6942:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6943_AIL6943;
		 pARefval6942_AR6942:=myrec;
		END;
	FUNCTION pADerefRhs6941_ADR6941:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6942_AR6942;
		 pADerefRhs6941_ADR6941:=myrec;
		END;
	FUNCTION pARhsValue6940_ARV6940:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6941_ADR6941;
		 pARhsValue6940_ARV6940:=myrec;
		END;
	FUNCTION pADyadicValue6934_ADV6934:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue6936_ARV6936;
		myrec^.arg2:=pARhsValue6940_ARV6940;
		myrec^.fn:=pATimesDyadic6935_ATD6935;
		 pADyadicValue6934_ADV6934:=myrec;
		END;
	FUNCTION pAAssign6931_AA6931:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue6934_ADV6934;
		myrec^.dest:=pARefval6932_AR6932;
		 pAAssign6931_AA6931:=myrec;
		END;
	FUNCTION pAAssignMeaning6930_AAM6930:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign6931_AA6931;
		 pAAssignMeaning6930_AAM6930:=myrec;
		END;
	FUNCTION pAAssemblypattern6945_AA6945:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'bytemult ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern6945_AA6945:=list;
		END;
	FUNCTION pAAssemblesto6944_AA6944:pprintlist;
	begin
		pAAssemblesto6944_AA6944:=pAAssemblypattern6945_AA6945;
		END;
	FUNCTION pASideeffects6950_AS6950:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6950_AS6950:=nil;
		 pASideeffects6950_AS6950:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6951_AUP6951:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6951_AUP6951:=nil;
		 pAUnconditionalPrecond6951_AUP6951:=myrec;
		END;
	FUNCTION RMULTB_RMULTB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbaddrmode_;
		params^[0]:=patbreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning6930_AAM6930;
		matchedAssembler:=pAAssemblesto6944_AA6944;
		END;
		RMULTB_RMULTB:=myrec;
	END;
	FUNCTION pATypeid6954_AT6954:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6954_AT6954:=myrec;
		END;
		(*! Match b1 *)
	FUNCTION pAIdLoc6958_AIL6958:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6958_AIL6958:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6957_AR6957:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6958_AIL6958;
		 pARefval6957_AR6957:=myrec;
		END;
	FUNCTION pAInt8Signed6964_AI8S6964:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed6964_AI8S6964:=myrec;
		END;
	FUNCTION pASignedTformat6963_AST6963:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed6964_AI8S6964;
		 pASignedTformat6963_AST6963:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6962_ATP6962:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype6962_ATP6962:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6961_APT6961:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType6961_APT6961:=myrec;
		END;
	FUNCTION pASigned6970_AS6970:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned6970_AS6970:=myrec;
		END;
	FUNCTION pASignedTformat6969_AST6969:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned6970_AS6970;
		 pASignedTformat6969_AST6969:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6968_ATP6968:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype6968_ATP6968:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6967_APT6967:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType6967_APT6967:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc6972_AIL6972:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6972_AIL6972:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue6971_ALV6971:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6972_AIL6972;
		 pALocValue6971_ALV6971:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastpopRhs6966_ACR6966:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType6967_APT6967;
		myrec^.arg2:=pALocValue6971_ALV6971;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs6966_ACR6966:=myrec;
		END;
	FUNCTION pARhsValue6965_ARV6965:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs6966_ACR6966;
		 pARhsValue6965_ARV6965:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs6960_ACR6960:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType6961_APT6961;
		myrec^.arg2:=pARhsValue6965_ARV6965;
		 pACastRhs6960_ACR6960:=myrec;
		END;
	FUNCTION pARhsValue6959_ARV6959:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6960_ACR6960;
		 pARhsValue6959_ARV6959:=myrec;
		END;
	FUNCTION pAAssign6956_AA6956:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue6959_ARV6959;
		myrec^.dest:=pARefval6957_AR6957;
		 pAAssign6956_AA6956:=myrec;
		END;
	FUNCTION pAAssignMeaning6955_AAM6955:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign6956_AA6956;
		 pAAssignMeaning6955_AAM6955:=myrec;
		END;
	FUNCTION pAAssemblypattern6974_AA6974:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fistb ' );
		pappendp(list,0);
		pAAssemblypattern6974_AA6974:=list;
		END;
	FUNCTION pAAssemblesto6973_AA6973:pprintlist;
	begin
		pAAssemblesto6973_AA6973:=pAAssemblypattern6974_AA6974;
		END;
	FUNCTION pASideeffects6977_AS6977:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6977_AS6977:=nil;
		 pASideeffects6977_AS6977:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6978_AUP6978:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6978_AUP6978:=nil;
		 pAUnconditionalPrecond6978_AUP6978:=myrec;
		END;
	FUNCTION FISTB_FISTB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patbreg_;
		paramcount:=2;
		meaning:=pAAssignMeaning6955_AAM6955;
		matchedAssembler:=pAAssemblesto6973_AA6973;
		END;
		FISTB_FISTB:=myrec;
	END;
	FUNCTION pATypeid6981_AT6981:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baddrmode  ilcg.pattern@a14fed}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6981_AT6981:=myrec;
		END;
	FUNCTION pAPushDyadic6984_APD6984:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic6984_APD6984:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc6986_AIL6986:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6986_AIL6986:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue6985_ALV6985:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6986_AIL6986;
		 pALocValue6985_ALV6985:=myrec;
		END;
	FUNCTION pAInt8Signed6992_AI8S6992:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed6992_AI8S6992:=myrec;
		END;
	FUNCTION pASignedTformat6991_AST6991:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed6992_AI8S6992;
		 pASignedTformat6991_AST6991:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6990_ATP6990:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype6990_ATP6990:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6989_APT6989:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType6989_APT6989:=myrec;
		END;
		(*! Match b2 *)
	FUNCTION pAIdLoc6996_AIL6996:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6996_AIL6996:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6995_AR6995:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6996_AIL6996;
		 pARefval6995_AR6995:=myrec;
		END;
	FUNCTION pADerefRhs6994_ADR6994:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6995_AR6995;
		 pADerefRhs6994_ADR6994:=myrec;
		END;
	FUNCTION pARhsValue6993_ARV6993:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6994_ADR6994;
		 pARhsValue6993_ARV6993:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs6988_ACR6988:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType6989_APT6989;
		myrec^.arg2:=pARhsValue6993_ARV6993;
		 pACastRhs6988_ACR6988:=myrec;
		END;
	FUNCTION pARhsValue6987_ARV6987:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6988_ACR6988;
		 pARhsValue6987_ARV6987:=myrec;
		END;
	FUNCTION pADyadicValue6983_ADV6983:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue6985_ALV6985;
		myrec^.arg2:=pARhsValue6987_ARV6987;
		myrec^.fn:=pAPushDyadic6984_APD6984;
		 pADyadicValue6983_ADV6983:=myrec;
		END;
	FUNCTION pAValueMeaning6982_AVM6982:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue6983_ADV6983;
		 pAValueMeaning6982_AVM6982:=myrec;
		END;
	FUNCTION pAAssemblypattern6998_AA6998:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fildb ' );
		pappendp(list,0);
		pAAssemblypattern6998_AA6998:=list;
		END;
	FUNCTION pAAssemblesto6997_AA6997:pprintlist;
	begin
		pAAssemblesto6997_AA6997:=pAAssemblypattern6998_AA6998;
		END;
	FUNCTION pASideeffects7001_AS7001:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7001_AS7001:=nil;
		 pASideeffects7001_AS7001:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7002_AUP7002:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7002_AUP7002:=nil;
		 pAUnconditionalPrecond7002_AUP7002:=myrec;
		END;
	FUNCTION FILDB_FILDB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patbaddrmode_;
		paramcount:=2;
		meaning:=pAValueMeaning6982_AVM6982;
		matchedAssembler:=pAAssemblesto6997_AA6997;
		END;
		FILDB_FILDB:=myrec;
	END;
	FUNCTION pATypeid7005_AT7005:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7005_AT7005:=myrec;
		END;
	FUNCTION pAPushDyadic7008_APD7008:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic7008_APD7008:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7010_AIL7010:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7010_AIL7010:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7009_ALV7009:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7010_AIL7010;
		 pALocValue7009_ALV7009:=myrec;
		END;
	FUNCTION pASigned7016_AS7016:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned7016_AS7016:=myrec;
		END;
	FUNCTION pASignedTformat7015_AST7015:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned7016_AS7016;
		 pASignedTformat7015_AST7015:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7014_ATP7014:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype7014_ATP7014:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7013_APT7013:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType7013_APT7013:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc7020_AIL7020:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc7020_AIL7020:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval7019_AR7019:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7020_AIL7020;
		 pARefval7019_AR7019:=myrec;
		END;
	FUNCTION pADerefRhs7018_ADR7018:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval7019_AR7019;
		 pADerefRhs7018_ADR7018:=myrec;
		END;
	FUNCTION pARhsValue7017_ARV7017:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs7018_ADR7018;
		 pARhsValue7017_ARV7017:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs7012_ACR7012:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType7013_APT7013;
		myrec^.arg2:=pARhsValue7017_ARV7017;
		 pACastRhs7012_ACR7012:=myrec;
		END;
	FUNCTION pARhsValue7011_ARV7011:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7012_ACR7012;
		 pARhsValue7011_ARV7011:=myrec;
		END;
	FUNCTION pADyadicValue7007_ADV7007:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue7009_ALV7009;
		myrec^.arg2:=pARhsValue7011_ARV7011;
		myrec^.fn:=pAPushDyadic7008_APD7008;
		 pADyadicValue7007_ADV7007:=myrec;
		END;
	FUNCTION pAValueMeaning7006_AVM7006:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue7007_ADV7007;
		 pAValueMeaning7006_AVM7006:=myrec;
		END;
	FUNCTION pAAssemblypattern7022_AA7022:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'mov dword[fttemp], ' );
		pappendp(list,0);
		pappends(list,'\n fild dword[fttemp]; fildr' );
		pAAssemblypattern7022_AA7022:=list;
		END;
	FUNCTION pAAssemblesto7021_AA7021:pprintlist;
	begin
		pAAssemblesto7021_AA7021:=pAAssemblypattern7022_AA7022;
		END;
	FUNCTION pASideeffects7026_AS7026:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7026_AS7026:=nil;
		 pASideeffects7026_AS7026:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7027_AUP7027:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7027_AUP7027:=nil;
		 pAUnconditionalPrecond7027_AUP7027:=myrec;
		END;
	FUNCTION FILDR_FILDR:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		paramcount:=2;
		meaning:=pAValueMeaning7006_AVM7006;
		matchedAssembler:=pAAssemblesto7021_AA7021;
		END;
		FILDR_FILDR:=myrec;
	END;
	FUNCTION pATypeid7030_AT7030:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7030_AT7030:=myrec;
		END;
	FUNCTION pAIeee63Tformat7038_AI63T7038:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat7038_AI63T7038:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7037_ATP7037:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype7037_ATP7037:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7036_APT7036:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType7036_APT7036:=myrec;
		END;
	FUNCTION pAReference7035_AR7035:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType7036_APT7036;
		 pAReference7035_AR7035:=myrec;
		END;
	FUNCTION pAReftypeType7034_ART7034:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference7035_AR7035;
		 pAReftypeType7034_ART7034:=myrec;
		END;
		(*! Match a *)
	FUNCTION pAIdLoc7039_AIL7039:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc7039_AIL7039:=myrec;
		END;
		(*! try to cast to type: ref ieee64*)
	FUNCTION pARefcastRefval7033_ARR7033:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType7034_ART7034;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc7039_AIL7039;
		 pARefcastRefval7033_ARR7033:=myrec;
		END;
	FUNCTION pAIeee63Tformat7044_AI63T7044:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat7044_AI63T7044:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7043_ATP7043:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype7043_ATP7043:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7042_APT7042:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType7042_APT7042:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7046_AIL7046:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7046_AIL7046:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7045_ALV7045:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7046_AIL7046;
		 pALocValue7045_ALV7045:=myrec;
		END;
		(*! try to cast to type: ieee64*)
	FUNCTION pACastpopRhs7041_ACR7041:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType7042_APT7042;
		myrec^.arg2:=pALocValue7045_ALV7045;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs7041_ACR7041:=myrec;
		END;
	FUNCTION pARhsValue7040_ARV7040:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs7041_ACR7041;
		 pARhsValue7040_ARV7040:=myrec;
		END;
	FUNCTION pAAssign7032_AA7032:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue7040_ARV7040;
		myrec^.dest:=pARefcastRefval7033_ARR7033;
		 pAAssign7032_AA7032:=myrec;
		END;
	FUNCTION pAAssignMeaning7031_AAM7031:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign7032_AA7032;
		 pAAssignMeaning7031_AAM7031:=myrec;
		END;
	FUNCTION pAAssemblypattern7048_AA7048:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fstp qword ' );
		pappendp(list,0);
		pAAssemblypattern7048_AA7048:=list;
		END;
	FUNCTION pAAssemblesto7047_AA7047:pprintlist;
	begin
		pAAssemblesto7047_AA7047:=pAAssemblypattern7048_AA7048;
		END;
	FUNCTION pASideeffects7051_AS7051:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7051_AS7051:=nil;
		 pASideeffects7051_AS7051:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7052_AUP7052:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7052_AUP7052:=nil;
		 pAUnconditionalPrecond7052_AUP7052:=myrec;
		END;
	FUNCTION FSTR_FSTR:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmaddrmode_;
		paramcount:=2;
		meaning:=pAAssignMeaning7031_AAM7031;
		matchedAssembler:=pAAssemblesto7047_AA7047;
		END;
		FSTR_FSTR:=myrec;
	END;
	FUNCTION pATypeid7055_AT7055:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7055_AT7055:=myrec;
		END;
	FUNCTION pAIeee32Tformat7063_AI32T7063:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat7063_AI32T7063:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7062_ATP7062:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype7062_ATP7062:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7061_APT7061:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType7061_APT7061:=myrec;
		END;
	FUNCTION pAReference7060_AR7060:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType7061_APT7061;
		 pAReference7060_AR7060:=myrec;
		END;
	FUNCTION pAReftypeType7059_ART7059:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference7060_AR7060;
		 pAReftypeType7059_ART7059:=myrec;
		END;
		(*! Match a *)
	FUNCTION pAIdLoc7064_AIL7064:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc7064_AIL7064:=myrec;
		END;
		(*! try to cast to type: ref ieee32*)
	FUNCTION pARefcastRefval7058_ARR7058:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType7059_ART7059;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc7064_AIL7064;
		 pARefcastRefval7058_ARR7058:=myrec;
		END;
	FUNCTION pAIeee32Tformat7069_AI32T7069:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat7069_AI32T7069:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7068_ATP7068:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype7068_ATP7068:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7067_APT7067:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType7067_APT7067:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7071_AIL7071:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7071_AIL7071:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7070_ALV7070:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7071_AIL7071;
		 pALocValue7070_ALV7070:=myrec;
		END;
		(*! try to cast to type: ieee32*)
	FUNCTION pACastpopRhs7066_ACR7066:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType7067_APT7067;
		myrec^.arg2:=pALocValue7070_ALV7070;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs7066_ACR7066:=myrec;
		END;
	FUNCTION pARhsValue7065_ARV7065:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs7066_ACR7066;
		 pARhsValue7065_ARV7065:=myrec;
		END;
	FUNCTION pAAssign7057_AA7057:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue7065_ARV7065;
		myrec^.dest:=pARefcastRefval7058_ARR7058;
		 pAAssign7057_AA7057:=myrec;
		END;
	FUNCTION pAAssignMeaning7056_AAM7056:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign7057_AA7057;
		 pAAssignMeaning7056_AAM7056:=myrec;
		END;
	FUNCTION pAAssemblypattern7073_AA7073:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fstp dword ' );
		pappendp(list,0);
		pAAssemblypattern7073_AA7073:=list;
		END;
	FUNCTION pAAssemblesto7072_AA7072:pprintlist;
	begin
		pAAssemblesto7072_AA7072:=pAAssemblypattern7073_AA7073;
		END;
	FUNCTION pASideeffects7076_AS7076:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7076_AS7076:=nil;
		 pASideeffects7076_AS7076:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7077_AUP7077:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7077_AUP7077:=nil;
		 pAUnconditionalPrecond7077_AUP7077:=myrec;
		END;
	FUNCTION FSTRF_FSTRF:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmaddrmode_;
		paramcount:=2;
		meaning:=pAAssignMeaning7056_AAM7056;
		matchedAssembler:=pAAssemblesto7072_AA7072;
		END;
		FSTRF_FSTRF:=myrec;
	END;
	FUNCTION pATypeid7080_AT7080:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ anyreal  ilcg.pattern@3e25d3}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7080_AT7080:=myrec;
		END;
	FUNCTION pATypeid7082_AT7082:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ hiint  ilcg.pattern@a69ae7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7082_AT7082:=myrec;
		END;
	FUNCTION pAPushDyadic7085_APD7085:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic7085_APD7085:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7087_AIL7087:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7087_AIL7087:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7086_ALV7086:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7087_AIL7087;
		 pALocValue7086_ALV7086:=myrec;
		END;
	FUNCTION pATypeid7091_AT7091:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@135dd72}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid7091_AT7091:=myrec;
		END;
	FUNCTION pATypeidType7090_ATT7090:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7091_AT7091;
		 pATypeidType7090_ATT7090:=myrec;
		END;
	FUNCTION pAFloatMonadic7093_AFM7093:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpFLOAT;
		 pAFloatMonadic7093_AFM7093:=myrec;
		END;
	FUNCTION pATypeid7097_AT7097:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t2  ilcg.Param@1a29120}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid7097_AT7097:=myrec;
		END;
	FUNCTION pATypeidType7096_ATT7096:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7097_AT7097;
		 pATypeidType7096_ATT7096:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc7099_AIL7099:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc7099_AIL7099:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue7098_ALV7098:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7099_AIL7099;
		 pALocValue7098_ALV7098:=myrec;
		END;
		(*! try to cast to type: t2*)
	FUNCTION pACastpopRhs7095_ACR7095:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType7096_ATT7096;
		myrec^.arg2:=pALocValue7098_ALV7098;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs7095_ACR7095:=myrec;
		END;
	FUNCTION pARhsValue7094_ARV7094:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs7095_ACR7095;
		 pARhsValue7094_ARV7094:=myrec;
		END;
	FUNCTION pAMonadicValue7092_AMV7092:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue7094_ARV7094;
		myrec^.fn:=pAFloatMonadic7093_AFM7093;
		 pAMonadicValue7092_AMV7092:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs7089_ACR7089:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType7090_ATT7090;
		myrec^.arg2:=pAMonadicValue7092_AMV7092;
		 pACastRhs7089_ACR7089:=myrec;
		END;
	FUNCTION pARhsValue7088_ARV7088:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7089_ACR7089;
		 pARhsValue7088_ARV7088:=myrec;
		END;
	FUNCTION pADyadicValue7084_ADV7084:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue7086_ALV7086;
		myrec^.arg2:=pARhsValue7088_ARV7088;
		myrec^.fn:=pAPushDyadic7085_APD7085;
		 pADyadicValue7084_ADV7084:=myrec;
		END;
	FUNCTION pAValueMeaning7083_AVM7083:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue7084_ADV7084;
		 pAValueMeaning7083_AVM7083:=myrec;
		END;
	FUNCTION pAAssemblypattern7101_AA7101:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fild dword [esp]\n add esp,4' );
		pAAssemblypattern7101_AA7101:=list;
		END;
	FUNCTION pAAssemblesto7100_AA7100:pprintlist;
	begin
		pAAssemblesto7100_AA7100:=pAAssemblypattern7101_AA7101;
		END;
	FUNCTION pASideeffects7103_AS7103:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7103_AS7103:=nil;
		 pASideeffects7103_AS7103:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7104_AUP7104:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7104_AUP7104:=nil;
		 pAUnconditionalPrecond7104_AUP7104:=myrec;
		END;
	FUNCTION FLOATMS_FLOATMS:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patanyreal_;
		params^[1]:=pathiint_;
		paramcount:=3;
		meaning:=pAValueMeaning7083_AVM7083;
		matchedAssembler:=pAAssemblesto7100_AA7100;
		END;
		FLOATMS_FLOATMS:=myrec;
	END;
	FUNCTION pAPushDyadic7110_APD7110:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic7110_APD7110:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7112_AIL7112:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7112_AIL7112:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7111_ALV7111:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7112_AIL7112;
		 pALocValue7111_ALV7111:=myrec;
		END;
	FUNCTION pAInt64Signed7118_AI64S7118:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64;
		 pAInt64Signed7118_AI64S7118:=myrec;
		END;
	FUNCTION pASignedTformat7117_AST7117:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt64Signed7118_AI64S7118;
		 pASignedTformat7117_AST7117:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7116_ATP7116:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64 ;
		 pATformatPredeclaredtype7116_ATP7116:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7115_APT7115:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64 ;
		 pAPredeclaredtypeType7115_APT7115:=myrec;
		END;
	FUNCTION pAExtendMonadic7120_AEM7120:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpEXTEND;
		 pAExtendMonadic7120_AEM7120:=myrec;
		END;
	FUNCTION pASigned7126_AS7126:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned7126_AS7126:=myrec;
		END;
	FUNCTION pASignedTformat7125_AST7125:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned7126_AS7126;
		 pASignedTformat7125_AST7125:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7124_ATP7124:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype7124_ATP7124:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7123_APT7123:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType7123_APT7123:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc7128_AIL7128:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc7128_AIL7128:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue7127_ALV7127:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7128_AIL7128;
		 pALocValue7127_ALV7127:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastpopRhs7122_ACR7122:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType7123_APT7123;
		myrec^.arg2:=pALocValue7127_ALV7127;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs7122_ACR7122:=myrec;
		END;
	FUNCTION pARhsValue7121_ARV7121:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs7122_ACR7122;
		 pARhsValue7121_ARV7121:=myrec;
		END;
	FUNCTION pAMonadicValue7119_AMV7119:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue7121_ARV7121;
		myrec^.fn:=pAExtendMonadic7120_AEM7120;
		 pAMonadicValue7119_AMV7119:=myrec;
		END;
		(*! try to cast to type: int64*)
	FUNCTION pACastRhs7114_ACR7114:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType7115_APT7115;
		myrec^.arg2:=pAMonadicValue7119_AMV7119;
		 pACastRhs7114_ACR7114:=myrec;
		END;
	FUNCTION pARhsValue7113_ARV7113:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7114_ACR7114;
		 pARhsValue7113_ARV7113:=myrec;
		END;
	FUNCTION pADyadicValue7109_ADV7109:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue7111_ALV7111;
		myrec^.arg2:=pARhsValue7113_ARV7113;
		myrec^.fn:=pAPushDyadic7110_APD7110;
		 pADyadicValue7109_ADV7109:=myrec;
		END;
	FUNCTION pAValueMeaning7108_AVM7108:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue7109_ADV7109;
		 pAValueMeaning7108_AVM7108:=myrec;
		END;
	FUNCTION pAAssemblypattern7130_AA7130:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fild dword [esp]\n add esp,4' );
		pAAssemblypattern7130_AA7130:=list;
		END;
	FUNCTION pAAssemblesto7129_AA7129:pprintlist;
	begin
		pAAssemblesto7129_AA7129:=pAAssemblypattern7130_AA7130;
		END;
	FUNCTION pASideeffects7132_AS7132:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7132_AS7132:=nil;
		 pASideeffects7132_AS7132:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7133_AUP7133:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7133_AUP7133:=nil;
		 pAUnconditionalPrecond7133_AUP7133:=myrec;
		END;
	FUNCTION EXTENDMS_EXTENDMS:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning7108_AVM7108;
		matchedAssembler:=pAAssemblesto7129_AA7129;
		END;
		EXTENDMS_EXTENDMS:=myrec;
	END;
	FUNCTION pAPushDyadic7139_APD7139:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic7139_APD7139:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7141_AIL7141:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7141_AIL7141:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7140_ALV7140:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7141_AIL7141;
		 pALocValue7140_ALV7140:=myrec;
		END;
	FUNCTION pAIeee63Tformat7146_AI63T7146:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat7146_AI63T7146:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7145_ATP7145:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype7145_ATP7145:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7144_APT7144:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType7144_APT7144:=myrec;
		END;
	FUNCTION pAExtendMonadic7148_AEM7148:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpEXTEND;
		 pAExtendMonadic7148_AEM7148:=myrec;
		END;
	FUNCTION pATypeid7152_AT7152:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@173a94f}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid7152_AT7152:=myrec;
		END;
	FUNCTION pATypeidType7151_ATT7151:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7152_AT7152;
		 pATypeidType7151_ATT7151:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7154_AIL7154:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7154_AIL7154:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7153_ALV7153:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7154_AIL7154;
		 pALocValue7153_ALV7153:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastpopRhs7150_ACR7150:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType7151_ATT7151;
		myrec^.arg2:=pALocValue7153_ALV7153;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs7150_ACR7150:=myrec;
		END;
	FUNCTION pARhsValue7149_ARV7149:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs7150_ACR7150;
		 pARhsValue7149_ARV7149:=myrec;
		END;
	FUNCTION pAMonadicValue7147_AMV7147:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue7149_ARV7149;
		myrec^.fn:=pAExtendMonadic7148_AEM7148;
		 pAMonadicValue7147_AMV7147:=myrec;
		END;
		(*! try to cast to type: ieee64*)
	FUNCTION pACastRhs7143_ACR7143:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType7144_APT7144;
		myrec^.arg2:=pAMonadicValue7147_AMV7147;
		 pACastRhs7143_ACR7143:=myrec;
		END;
	FUNCTION pARhsValue7142_ARV7142:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7143_ACR7143;
		 pARhsValue7142_ARV7142:=myrec;
		END;
	FUNCTION pADyadicValue7138_ADV7138:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue7140_ALV7140;
		myrec^.arg2:=pARhsValue7142_ARV7142;
		myrec^.fn:=pAPushDyadic7139_APD7139;
		 pADyadicValue7138_ADV7138:=myrec;
		END;
	FUNCTION pAValueMeaning7137_AVM7137:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue7138_ADV7138;
		 pAValueMeaning7137_AVM7137:=myrec;
		END;
	FUNCTION pAAssemblypattern7156_AA7156:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'; extend fpu stack' );
		pAAssemblypattern7156_AA7156:=list;
		END;
	FUNCTION pAAssemblesto7155_AA7155:pprintlist;
	begin
		pAAssemblesto7155_AA7155:=pAAssemblypattern7156_AA7156;
		END;
	FUNCTION pASideeffects7158_AS7158:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7158_AS7158:=nil;
		 pASideeffects7158_AS7158:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7159_AUP7159:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7159_AUP7159:=nil;
		 pAUnconditionalPrecond7159_AUP7159:=myrec;
		END;
	FUNCTION EXTENDANY_EXTENDANY:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning7137_AVM7137;
		matchedAssembler:=pAAssemblesto7155_AA7155;
		END;
		EXTENDANY_EXTENDANY:=myrec;
	END;
	FUNCTION pAPushDyadic7165_APD7165:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic7165_APD7165:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7167_AIL7167:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7167_AIL7167:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7166_ALV7166:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7167_AIL7167;
		 pALocValue7166_ALV7166:=myrec;
		END;
	FUNCTION pAIeee32Tformat7172_AI32T7172:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat7172_AI32T7172:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7171_ATP7171:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype7171_ATP7171:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7170_APT7170:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType7170_APT7170:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc7174_AIL7174:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc7174_AIL7174:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue7173_ALV7173:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7174_AIL7174;
		 pALocValue7173_ALV7173:=myrec;
		END;
		(*! try to cast to type: ieee32*)
	FUNCTION pACastpopRhs7169_ACR7169:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType7170_APT7170;
		myrec^.arg2:=pALocValue7173_ALV7173;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs7169_ACR7169:=myrec;
		END;
	FUNCTION pARhsValue7168_ARV7168:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs7169_ACR7169;
		 pARhsValue7168_ARV7168:=myrec;
		END;
	FUNCTION pADyadicValue7164_ADV7164:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue7166_ALV7166;
		myrec^.arg2:=pARhsValue7168_ARV7168;
		myrec^.fn:=pAPushDyadic7165_APD7165;
		 pADyadicValue7164_ADV7164:=myrec;
		END;
	FUNCTION pAValueMeaning7163_AVM7163:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue7164_ADV7164;
		 pAValueMeaning7163_AVM7163:=myrec;
		END;
	FUNCTION pAAssemblypattern7176_AA7176:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,' fld dword [esp]\n add esp,4' );
		pAAssemblypattern7176_AA7176:=list;
		END;
	FUNCTION pAAssemblesto7175_AA7175:pprintlist;
	begin
		pAAssemblesto7175_AA7175:=pAAssemblypattern7176_AA7176;
		END;
	FUNCTION pASideeffects7178_AS7178:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7178_AS7178:=nil;
		 pASideeffects7178_AS7178:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7179_AUP7179:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7179_AUP7179:=nil;
		 pAUnconditionalPrecond7179_AUP7179:=myrec;
		END;
	FUNCTION FPOPMS_FPOPMS:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning7163_AVM7163;
		matchedAssembler:=pAAssemblesto7175_AA7175;
		END;
		FPOPMS_FPOPMS:=myrec;
	END;
	FUNCTION pAPushDyadic7185_APD7185:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic7185_APD7185:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7187_AIL7187:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7187_AIL7187:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7186_ALV7186:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7187_AIL7187;
		 pALocValue7186_ALV7186:=myrec;
		END;
	FUNCTION pAInt64Signed7193_AI64S7193:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64;
		 pAInt64Signed7193_AI64S7193:=myrec;
		END;
	FUNCTION pASignedTformat7192_AST7192:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt64Signed7193_AI64S7193;
		 pASignedTformat7192_AST7192:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7191_ATP7191:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64 ;
		 pATformatPredeclaredtype7191_ATP7191:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7190_APT7190:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64 ;
		 pAPredeclaredtypeType7190_APT7190:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc7195_AIL7195:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc7195_AIL7195:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue7194_ALV7194:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7195_AIL7195;
		 pALocValue7194_ALV7194:=myrec;
		END;
		(*! try to cast to type: int64*)
	FUNCTION pACastpopRhs7189_ACR7189:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType7190_APT7190;
		myrec^.arg2:=pALocValue7194_ALV7194;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs7189_ACR7189:=myrec;
		END;
	FUNCTION pARhsValue7188_ARV7188:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs7189_ACR7189;
		 pARhsValue7188_ARV7188:=myrec;
		END;
	FUNCTION pADyadicValue7184_ADV7184:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue7186_ALV7186;
		myrec^.arg2:=pARhsValue7188_ARV7188;
		myrec^.fn:=pAPushDyadic7185_APD7185;
		 pADyadicValue7184_ADV7184:=myrec;
		END;
	FUNCTION pAValueMeaning7183_AVM7183:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue7184_ADV7184;
		 pAValueMeaning7183_AVM7183:=myrec;
		END;
	FUNCTION pAAssemblypattern7197_AA7197:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fild qword [esp]\n add esp,8' );
		pAAssemblypattern7197_AA7197:=list;
		END;
	FUNCTION pAAssemblesto7196_AA7196:pprintlist;
	begin
		pAAssemblesto7196_AA7196:=pAAssemblypattern7197_AA7197;
		END;
	FUNCTION pASideeffects7199_AS7199:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7199_AS7199:=nil;
		 pASideeffects7199_AS7199:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7200_AUP7200:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7200_AUP7200:=nil;
		 pAUnconditionalPrecond7200_AUP7200:=myrec;
		END;
	FUNCTION FPOPMSI64_FPOPMSI64:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning7183_AVM7183;
		matchedAssembler:=pAAssemblesto7196_AA7196;
		END;
		FPOPMSI64_FPOPMSI64:=myrec;
	END;
	FUNCTION pAPushDyadic7206_APD7206:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic7206_APD7206:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7208_AIL7208:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7208_AIL7208:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7207_ALV7207:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7208_AIL7208;
		 pALocValue7207_ALV7207:=myrec;
		END;
	FUNCTION pAIeee63Tformat7213_AI63T7213:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat7213_AI63T7213:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7212_ATP7212:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype7212_ATP7212:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7211_APT7211:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType7211_APT7211:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc7215_AIL7215:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc7215_AIL7215:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue7214_ALV7214:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7215_AIL7215;
		 pALocValue7214_ALV7214:=myrec;
		END;
		(*! try to cast to type: ieee64*)
	FUNCTION pACastpopRhs7210_ACR7210:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType7211_APT7211;
		myrec^.arg2:=pALocValue7214_ALV7214;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs7210_ACR7210:=myrec;
		END;
	FUNCTION pARhsValue7209_ARV7209:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs7210_ACR7210;
		 pARhsValue7209_ARV7209:=myrec;
		END;
	FUNCTION pADyadicValue7205_ADV7205:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue7207_ALV7207;
		myrec^.arg2:=pARhsValue7209_ARV7209;
		myrec^.fn:=pAPushDyadic7206_APD7206;
		 pADyadicValue7205_ADV7205:=myrec;
		END;
	FUNCTION pAValueMeaning7204_AVM7204:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue7205_ADV7205;
		 pAValueMeaning7204_AVM7204:=myrec;
		END;
	FUNCTION pAAssemblypattern7217_AA7217:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fld qword [esp]\n add esp,8' );
		pAAssemblypattern7217_AA7217:=list;
		END;
	FUNCTION pAAssemblesto7216_AA7216:pprintlist;
	begin
		pAAssemblesto7216_AA7216:=pAAssemblypattern7217_AA7217;
		END;
	FUNCTION pASideeffects7219_AS7219:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7219_AS7219:=nil;
		 pASideeffects7219_AS7219:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7220_AUP7220:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7220_AUP7220:=nil;
		 pAUnconditionalPrecond7220_AUP7220:=myrec;
		END;
	FUNCTION DPOPMS_DPOPMS:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning7204_AVM7204;
		matchedAssembler:=pAAssemblesto7216_AA7216;
		END;
		DPOPMS_DPOPMS:=myrec;
	END;
	FUNCTION pAPushDyadic7226_APD7226:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic7226_APD7226:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc7228_AIL7228:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc7228_AIL7228:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue7227_ALV7227:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7228_AIL7228;
		 pALocValue7227_ALV7227:=myrec;
		END;
	FUNCTION pAIeee63Tformat7233_AI63T7233:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat7233_AI63T7233:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7232_ATP7232:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype7232_ATP7232:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7231_APT7231:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType7231_APT7231:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7235_AIL7235:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7235_AIL7235:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7234_ALV7234:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7235_AIL7235;
		 pALocValue7234_ALV7234:=myrec;
		END;
		(*! try to cast to type: ieee64*)
	FUNCTION pACastpopRhs7230_ACR7230:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType7231_APT7231;
		myrec^.arg2:=pALocValue7234_ALV7234;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs7230_ACR7230:=myrec;
		END;
	FUNCTION pARhsValue7229_ARV7229:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs7230_ACR7230;
		 pARhsValue7229_ARV7229:=myrec;
		END;
	FUNCTION pADyadicValue7225_ADV7225:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue7227_ALV7227;
		myrec^.arg2:=pARhsValue7229_ARV7229;
		myrec^.fn:=pAPushDyadic7226_APD7226;
		 pADyadicValue7225_ADV7225:=myrec;
		END;
	FUNCTION pAValueMeaning7224_AVM7224:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue7225_ADV7225;
		 pAValueMeaning7224_AVM7224:=myrec;
		END;
	FUNCTION pAAssemblypattern7237_AA7237:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'sub esp,8\n fstp qword [esp]' );
		pAAssemblypattern7237_AA7237:=list;
		END;
	FUNCTION pAAssemblesto7236_AA7236:pprintlist;
	begin
		pAAssemblesto7236_AA7236:=pAAssemblypattern7237_AA7237;
		END;
	FUNCTION pASideeffects7239_AS7239:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7239_AS7239:=nil;
		 pASideeffects7239_AS7239:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7240_AUP7240:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7240_AUP7240:=nil;
		 pAUnconditionalPrecond7240_AUP7240:=myrec;
		END;
	FUNCTION FPUSHD_FPUSHD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning7224_AVM7224;
		matchedAssembler:=pAAssemblesto7236_AA7236;
		END;
		FPUSHD_FPUSHD:=myrec;
	END;
	FUNCTION pAPushDyadic7246_APD7246:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic7246_APD7246:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc7248_AIL7248:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc7248_AIL7248:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue7247_ALV7247:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7248_AIL7248;
		 pALocValue7247_ALV7247:=myrec;
		END;
	FUNCTION pAIeee32Tformat7253_AI32T7253:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat7253_AI32T7253:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7252_ATP7252:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype7252_ATP7252:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7251_APT7251:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType7251_APT7251:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7255_AIL7255:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7255_AIL7255:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7254_ALV7254:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7255_AIL7255;
		 pALocValue7254_ALV7254:=myrec;
		END;
		(*! try to cast to type: ieee32*)
	FUNCTION pACastpopRhs7250_ACR7250:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType7251_APT7251;
		myrec^.arg2:=pALocValue7254_ALV7254;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs7250_ACR7250:=myrec;
		END;
	FUNCTION pARhsValue7249_ARV7249:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs7250_ACR7250;
		 pARhsValue7249_ARV7249:=myrec;
		END;
	FUNCTION pADyadicValue7245_ADV7245:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue7247_ALV7247;
		myrec^.arg2:=pARhsValue7249_ARV7249;
		myrec^.fn:=pAPushDyadic7246_APD7246;
		 pADyadicValue7245_ADV7245:=myrec;
		END;
	FUNCTION pAValueMeaning7244_AVM7244:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue7245_ADV7245;
		 pAValueMeaning7244_AVM7244:=myrec;
		END;
	FUNCTION pAAssemblypattern7257_AA7257:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'sub esp,4\n fstp dword [esp]' );
		pAAssemblypattern7257_AA7257:=list;
		END;
	FUNCTION pAAssemblesto7256_AA7256:pprintlist;
	begin
		pAAssemblesto7256_AA7256:=pAAssemblypattern7257_AA7257;
		END;
	FUNCTION pASideeffects7259_AS7259:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7259_AS7259:=nil;
		 pASideeffects7259_AS7259:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7260_AUP7260:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7260_AUP7260:=nil;
		 pAUnconditionalPrecond7260_AUP7260:=myrec;
		END;
	FUNCTION FPUSHF_FPUSHF:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning7244_AVM7244;
		matchedAssembler:=pAAssemblesto7256_AA7256;
		END;
		FPUSHF_FPUSHF:=myrec;
	END;
	FUNCTION pATypeid7263_AT7263:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ wmemdummy  ilcg.pattern@8e0e1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7263_AT7263:=myrec;
		END;
	FUNCTION pATypeid7265_AT7265:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ hiint  ilcg.pattern@a69ae7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7265_AT7265:=myrec;
		END;
	FUNCTION pATypeid7272_AT7272:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ i  ilcg.Param@a7b68a}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid7272_AT7272:=myrec;
		END;
	FUNCTION pATypeidType7271_ATT7271:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7272_AT7272;
		 pATypeidType7271_ATT7271:=myrec;
		END;
	FUNCTION pAReference7270_AR7270:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType7271_ATT7271;
		 pAReference7270_AR7270:=myrec;
		END;
	FUNCTION pAReftypeType7269_ART7269:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference7270_AR7270;
		 pAReftypeType7269_ART7269:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc7273_AIL7273:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc7273_AIL7273:=myrec;
		END;
		(*! try to cast to type: ref i*)
	FUNCTION pARefcastRefval7268_ARR7268:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType7269_ART7269;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc7273_AIL7273;
		 pARefcastRefval7268_ARR7268:=myrec;
		END;
	FUNCTION pATypeid7277_AT7277:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ i  ilcg.Param@a7b68a}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid7277_AT7277:=myrec;
		END;
	FUNCTION pATypeidType7276_ATT7276:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7277_AT7277;
		 pATypeidType7276_ATT7276:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7279_AIL7279:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7279_AIL7279:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7278_ALV7278:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7279_AIL7279;
		 pALocValue7278_ALV7278:=myrec;
		END;
		(*! try to cast to type: i*)
	FUNCTION pACastpopRhs7275_ACR7275:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType7276_ATT7276;
		myrec^.arg2:=pALocValue7278_ALV7278;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs7275_ACR7275:=myrec;
		END;
	FUNCTION pARhsValue7274_ARV7274:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs7275_ACR7275;
		 pARhsValue7274_ARV7274:=myrec;
		END;
	FUNCTION pAAssign7267_AA7267:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue7274_ARV7274;
		myrec^.dest:=pARefcastRefval7268_ARR7268;
		 pAAssign7267_AA7267:=myrec;
		END;
	FUNCTION pAAssignMeaning7266_AAM7266:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign7267_AA7267;
		 pAAssignMeaning7266_AAM7266:=myrec;
		END;
	FUNCTION pAAssemblypattern7281_AA7281:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fistp ' );
		pappendp(list,1);
		pappends(list,' ' );
		pappendp(list,0);
		pAAssemblypattern7281_AA7281:=list;
		END;
	FUNCTION pAAssemblesto7280_AA7280:pprintlist;
	begin
		pAAssemblesto7280_AA7280:=pAAssemblypattern7281_AA7281;
		END;
	FUNCTION pASideeffects7286_AS7286:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7286_AS7286:=nil;
		 pASideeffects7286_AS7286:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7287_AUP7287:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7287_AUP7287:=nil;
		 pAUnconditionalPrecond7287_AUP7287:=myrec;
		END;
	FUNCTION FISTR_FISTR:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patwmemdummy_;
		params^[1]:=pathiint_;
		paramcount:=3;
		meaning:=pAAssignMeaning7266_AAM7266;
		matchedAssembler:=pAAssemblesto7280_AA7280;
		END;
		FISTR_FISTR:=myrec;
	END;
	FUNCTION pAPushDyadic7293_APD7293:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic7293_APD7293:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc7295_AIL7295:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc7295_AIL7295:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue7294_ALV7294:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7295_AIL7295;
		 pALocValue7294_ALV7294:=myrec;
		END;
	FUNCTION pASigned7301_AS7301:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned7301_AS7301:=myrec;
		END;
	FUNCTION pASignedTformat7300_AST7300:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned7301_AS7301;
		 pASignedTformat7300_AST7300:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7299_ATP7299:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype7299_ATP7299:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7298_APT7298:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType7298_APT7298:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7303_AIL7303:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7303_AIL7303:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7302_ALV7302:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7303_AIL7303;
		 pALocValue7302_ALV7302:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastpopRhs7297_ACR7297:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType7298_APT7298;
		myrec^.arg2:=pALocValue7302_ALV7302;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs7297_ACR7297:=myrec;
		END;
	FUNCTION pARhsValue7296_ARV7296:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs7297_ACR7297;
		 pARhsValue7296_ARV7296:=myrec;
		END;
	FUNCTION pADyadicValue7292_ADV7292:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue7294_ALV7294;
		myrec^.arg2:=pARhsValue7296_ARV7296;
		myrec^.fn:=pAPushDyadic7293_APD7293;
		 pADyadicValue7292_ADV7292:=myrec;
		END;
	FUNCTION pAValueMeaning7291_AVM7291:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue7292_ADV7292;
		 pAValueMeaning7291_AVM7291:=myrec;
		END;
	FUNCTION pAAssemblypattern7305_AA7305:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'sub esp,4\n fistp dword [esp]' );
		pAAssemblypattern7305_AA7305:=list;
		END;
	FUNCTION pAAssemblesto7304_AA7304:pprintlist;
	begin
		pAAssemblesto7304_AA7304:=pAAssemblypattern7305_AA7305;
		END;
	FUNCTION pASideeffects7307_AS7307:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7307_AS7307:=nil;
		 pASideeffects7307_AS7307:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7308_AUP7308:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7308_AUP7308:=nil;
		 pAUnconditionalPrecond7308_AUP7308:=myrec;
		END;
	FUNCTION FPUSHI_FPUSHI:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning7291_AVM7291;
		matchedAssembler:=pAAssemblesto7304_AA7304;
		END;
		FPUSHI_FPUSHI:=myrec;
	END;
	FUNCTION pATypeid7311_AT7311:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7311_AT7311:=myrec;
		END;
	FUNCTION pAPushDyadic7314_APD7314:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic7314_APD7314:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7316_AIL7316:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7316_AIL7316:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7315_ALV7315:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7316_AIL7316;
		 pALocValue7315_ALV7315:=myrec;
		END;
	FUNCTION pAIeee63Tformat7324_AI63T7324:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat7324_AI63T7324:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7323_ATP7323:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype7323_ATP7323:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7322_APT7322:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType7322_APT7322:=myrec;
		END;
	FUNCTION pAReference7321_AR7321:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType7322_APT7322;
		 pAReference7321_AR7321:=myrec;
		END;
	FUNCTION pAReftypeType7320_ART7320:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference7321_AR7321;
		 pAReftypeType7320_ART7320:=myrec;
		END;
		(*! Match a *)
	FUNCTION pAIdLoc7325_AIL7325:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc7325_AIL7325:=myrec;
		END;
		(*! try to cast to type: ref ieee64*)
	FUNCTION pARefcastRefval7319_ARR7319:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType7320_ART7320;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc7325_AIL7325;
		 pARefcastRefval7319_ARR7319:=myrec;
		END;
	FUNCTION pADerefRhs7318_ADR7318:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval7319_ARR7319;
		 pADerefRhs7318_ADR7318:=myrec;
		END;
	FUNCTION pARhsValue7317_ARV7317:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs7318_ADR7318;
		 pARhsValue7317_ARV7317:=myrec;
		END;
	FUNCTION pADyadicValue7313_ADV7313:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue7315_ALV7315;
		myrec^.arg2:=pARhsValue7317_ARV7317;
		myrec^.fn:=pAPushDyadic7314_APD7314;
		 pADyadicValue7313_ADV7313:=myrec;
		END;
	FUNCTION pAValueMeaning7312_AVM7312:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue7313_ADV7313;
		 pAValueMeaning7312_AVM7312:=myrec;
		END;
	FUNCTION pAAssemblypattern7327_AA7327:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fld qword ' );
		pappendp(list,0);
		pAAssemblypattern7327_AA7327:=list;
		END;
	FUNCTION pAAssemblesto7326_AA7326:pprintlist;
	begin
		pAAssemblesto7326_AA7326:=pAAssemblypattern7327_AA7327;
		END;
	FUNCTION pASideeffects7330_AS7330:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7330_AS7330:=nil;
		 pASideeffects7330_AS7330:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7331_AUP7331:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7331_AUP7331:=nil;
		 pAUnconditionalPrecond7331_AUP7331:=myrec;
		END;
	FUNCTION FLD_FLD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmaddrmode_;
		paramcount:=2;
		meaning:=pAValueMeaning7312_AVM7312;
		matchedAssembler:=pAAssemblesto7326_AA7326;
		END;
		FLD_FLD:=myrec;
	END;
	FUNCTION pATypeid7334_AT7334:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7334_AT7334:=myrec;
		END;
	FUNCTION pAPushDyadic7337_APD7337:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic7337_APD7337:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7339_AIL7339:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7339_AIL7339:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7338_ALV7338:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7339_AIL7339;
		 pALocValue7338_ALV7338:=myrec;
		END;
	FUNCTION pAIeee32Tformat7347_AI32T7347:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat7347_AI32T7347:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7346_ATP7346:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype7346_ATP7346:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7345_APT7345:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType7345_APT7345:=myrec;
		END;
	FUNCTION pAReference7344_AR7344:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType7345_APT7345;
		 pAReference7344_AR7344:=myrec;
		END;
	FUNCTION pAReftypeType7343_ART7343:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference7344_AR7344;
		 pAReftypeType7343_ART7343:=myrec;
		END;
		(*! Match a *)
	FUNCTION pAIdLoc7348_AIL7348:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc7348_AIL7348:=myrec;
		END;
		(*! try to cast to type: ref ieee32*)
	FUNCTION pARefcastRefval7342_ARR7342:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType7343_ART7343;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc7348_AIL7348;
		 pARefcastRefval7342_ARR7342:=myrec;
		END;
	FUNCTION pADerefRhs7341_ADR7341:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval7342_ARR7342;
		 pADerefRhs7341_ADR7341:=myrec;
		END;
	FUNCTION pARhsValue7340_ARV7340:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs7341_ADR7341;
		 pARhsValue7340_ARV7340:=myrec;
		END;
	FUNCTION pADyadicValue7336_ADV7336:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue7338_ALV7338;
		myrec^.arg2:=pARhsValue7340_ARV7340;
		myrec^.fn:=pAPushDyadic7337_APD7337;
		 pADyadicValue7336_ADV7336:=myrec;
		END;
	FUNCTION pAValueMeaning7335_AVM7335:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue7336_ADV7336;
		 pAValueMeaning7335_AVM7335:=myrec;
		END;
	FUNCTION pAAssemblypattern7350_AA7350:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fld dword ' );
		pappendp(list,0);
		pAAssemblypattern7350_AA7350:=list;
		END;
	FUNCTION pAAssemblesto7349_AA7349:pprintlist;
	begin
		pAAssemblesto7349_AA7349:=pAAssemblypattern7350_AA7350;
		END;
	FUNCTION pASideeffects7353_AS7353:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7353_AS7353:=nil;
		 pASideeffects7353_AS7353:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7354_AUP7354:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7354_AUP7354:=nil;
		 pAUnconditionalPrecond7354_AUP7354:=myrec;
		END;
	FUNCTION FLDF_FLDF:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmaddrmode_;
		paramcount:=2;
		meaning:=pAValueMeaning7335_AVM7335;
		matchedAssembler:=pAAssemblesto7349_AA7349;
		END;
		FLDF_FLDF:=myrec;
	END;
	FUNCTION pATypeid7357_AT7357:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ wmemdummy  ilcg.pattern@8e0e1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7357_AT7357:=myrec;
		END;
	FUNCTION pATypeid7359_AT7359:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ real  ilcg.pattern@2cb5c6}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7359_AT7359:=myrec;
		END;
	FUNCTION pATypeid7361_AT7361:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ hiint  ilcg.pattern@a69ae7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7361_AT7361:=myrec;
		END;
	FUNCTION pAPushDyadic7364_APD7364:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic7364_APD7364:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7366_AIL7366:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7366_AIL7366:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7365_ALV7365:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7366_AIL7366;
		 pALocValue7365_ALV7365:=myrec;
		END;
	FUNCTION pATypeid7373_AT7373:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ i  ilcg.Param@12faeca}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid7373_AT7373:=myrec;
		END;
	FUNCTION pATypeidType7372_ATT7372:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7373_AT7373;
		 pATypeidType7372_ATT7372:=myrec;
		END;
	FUNCTION pAReference7371_AR7371:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType7372_ATT7372;
		 pAReference7371_AR7371:=myrec;
		END;
	FUNCTION pAReftypeType7370_ART7370:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference7371_AR7371;
		 pAReftypeType7370_ART7370:=myrec;
		END;
		(*! Match a *)
	FUNCTION pAIdLoc7374_AIL7374:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc7374_AIL7374:=myrec;
		END;
		(*! try to cast to type: ref i*)
	FUNCTION pARefcastRefval7369_ARR7369:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType7370_ART7370;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc7374_AIL7374;
		 pARefcastRefval7369_ARR7369:=myrec;
		END;
	FUNCTION pADerefRhs7368_ADR7368:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval7369_ARR7369;
		 pADerefRhs7368_ADR7368:=myrec;
		END;
	FUNCTION pARhsValue7367_ARV7367:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs7368_ADR7368;
		 pARhsValue7367_ARV7367:=myrec;
		END;
	FUNCTION pADyadicValue7363_ADV7363:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue7365_ALV7365;
		myrec^.arg2:=pARhsValue7367_ARV7367;
		myrec^.fn:=pAPushDyadic7364_APD7364;
		 pADyadicValue7363_ADV7363:=myrec;
		END;
	FUNCTION pAValueMeaning7362_AVM7362:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue7363_ADV7363;
		 pAValueMeaning7362_AVM7362:=myrec;
		END;
	FUNCTION pAAssemblypattern7376_AA7376:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fild ' );
		pappendp(list,2);
		pappends(list,' ' );
		pappendp(list,0);
		pappends(list,'; fild' );
		pAAssemblypattern7376_AA7376:=list;
		END;
	FUNCTION pAAssemblesto7375_AA7375:pprintlist;
	begin
		pAAssemblesto7375_AA7375:=pAAssemblypattern7376_AA7376;
		END;
	FUNCTION pASideeffects7382_AS7382:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7382_AS7382:=nil;
		 pASideeffects7382_AS7382:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7383_AUP7383:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7383_AUP7383:=nil;
		 pAUnconditionalPrecond7383_AUP7383:=myrec;
		END;
	FUNCTION FILD_FILD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patwmemdummy_;
		params^[2]:=pathiint_;
		params^[1]:=patreal_;
		paramcount:=4;
		meaning:=pAValueMeaning7362_AVM7362;
		matchedAssembler:=pAAssemblesto7375_AA7375;
		END;
		FILD_FILD:=myrec;
	END;
	FUNCTION pATypeid7386_AT7386:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7386_AT7386:=myrec;
		END;
	FUNCTION pATypeid7388_AT7388:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ real  ilcg.pattern@2cb5c6}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7388_AT7388:=myrec;
		END;
	FUNCTION pATypeid7390_AT7390:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ hiint  ilcg.pattern@a69ae7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7390_AT7390:=myrec;
		END;
	FUNCTION pAPushDyadic7393_APD7393:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic7393_APD7393:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7395_AIL7395:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7395_AIL7395:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7394_ALV7394:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7395_AIL7395;
		 pALocValue7394_ALV7394:=myrec;
		END;
	FUNCTION pAFloatMonadic7397_AFM7397:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpFLOAT;
		 pAFloatMonadic7397_AFM7397:=myrec;
		END;
	FUNCTION pATypeid7401_AT7401:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ i  ilcg.Param@ebe538}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid7401_AT7401:=myrec;
		END;
	FUNCTION pATypeidType7400_ATT7400:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7401_AT7401;
		 pATypeidType7400_ATT7400:=myrec;
		END;
		(*! Match a *)
	FUNCTION pAIdLoc7405_AIL7405:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc7405_AIL7405:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval7404_AR7404:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7405_AIL7405;
		 pARefval7404_AR7404:=myrec;
		END;
	FUNCTION pADerefRhs7403_ADR7403:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval7404_AR7404;
		 pADerefRhs7403_ADR7403:=myrec;
		END;
	FUNCTION pARhsValue7402_ARV7402:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs7403_ADR7403;
		 pARhsValue7402_ARV7402:=myrec;
		END;
		(*! try to cast to type: i*)
	FUNCTION pACastRhs7399_ACR7399:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType7400_ATT7400;
		myrec^.arg2:=pARhsValue7402_ARV7402;
		 pACastRhs7399_ACR7399:=myrec;
		END;
	FUNCTION pARhsValue7398_ARV7398:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7399_ACR7399;
		 pARhsValue7398_ARV7398:=myrec;
		END;
	FUNCTION pAMonadicValue7396_AMV7396:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue7398_ARV7398;
		myrec^.fn:=pAFloatMonadic7397_AFM7397;
		 pAMonadicValue7396_AMV7396:=myrec;
		END;
	FUNCTION pADyadicValue7392_ADV7392:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue7394_ALV7394;
		myrec^.arg2:=pAMonadicValue7396_AMV7396;
		myrec^.fn:=pAPushDyadic7393_APD7393;
		 pADyadicValue7392_ADV7392:=myrec;
		END;
	FUNCTION pAValueMeaning7391_AVM7391:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue7392_ADV7392;
		 pAValueMeaning7391_AVM7391:=myrec;
		END;
	FUNCTION pAAssemblypattern7407_AA7407:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fild ' );
		pappendp(list,2);
		pappends(list,' ' );
		pappendp(list,0);
		pappends(list,'; fildf' );
		pAAssemblypattern7407_AA7407:=list;
		END;
	FUNCTION pAAssemblesto7406_AA7406:pprintlist;
	begin
		pAAssemblesto7406_AA7406:=pAAssemblypattern7407_AA7407;
		END;
	FUNCTION pASideeffects7413_AS7413:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7413_AS7413:=nil;
		 pASideeffects7413_AS7413:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7414_AUP7414:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7414_AUP7414:=nil;
		 pAUnconditionalPrecond7414_AUP7414:=myrec;
		END;
	FUNCTION FILDF_FILDF:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmaddrmode_;
		params^[2]:=pathiint_;
		params^[1]:=patreal_;
		paramcount:=4;
		meaning:=pAValueMeaning7391_AVM7391;
		matchedAssembler:=pAAssemblesto7406_AA7406;
		END;
		FILDF_FILDF:=myrec;
	END;
	FUNCTION pATypeid7417_AT7417:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7417_AT7417:=myrec;
		END;
	FUNCTION pATypeid7419_AT7419:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ anyreal  ilcg.pattern@3e25d3}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7419_AT7419:=myrec;
		END;
	FUNCTION pAPushDyadic7422_APD7422:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic7422_APD7422:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7424_AIL7424:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7424_AIL7424:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7423_ALV7423:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7424_AIL7424;
		 pALocValue7423_ALV7423:=myrec;
		END;
	FUNCTION pATypeid7428_AT7428:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@111badc}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid7428_AT7428:=myrec;
		END;
	FUNCTION pATypeidType7427_ATT7427:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7428_AT7428;
		 pATypeidType7427_ATT7427:=myrec;
		END;
	FUNCTION pAFloatMonadic7430_AFM7430:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpFLOAT;
		 pAFloatMonadic7430_AFM7430:=myrec;
		END;
	FUNCTION pASigned7436_AS7436:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned7436_AS7436:=myrec;
		END;
	FUNCTION pASignedTformat7435_AST7435:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned7436_AS7436;
		 pASignedTformat7435_AST7435:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7434_ATP7434:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype7434_ATP7434:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7433_APT7433:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType7433_APT7433:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc7440_AIL7440:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc7440_AIL7440:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval7439_AR7439:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7440_AIL7440;
		 pARefval7439_AR7439:=myrec;
		END;
	FUNCTION pADerefRhs7438_ADR7438:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval7439_AR7439;
		 pADerefRhs7438_ADR7438:=myrec;
		END;
	FUNCTION pARhsValue7437_ARV7437:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs7438_ADR7438;
		 pARhsValue7437_ARV7437:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs7432_ACR7432:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType7433_APT7433;
		myrec^.arg2:=pARhsValue7437_ARV7437;
		 pACastRhs7432_ACR7432:=myrec;
		END;
	FUNCTION pARhsValue7431_ARV7431:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7432_ACR7432;
		 pARhsValue7431_ARV7431:=myrec;
		END;
	FUNCTION pAMonadicValue7429_AMV7429:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue7431_ARV7431;
		myrec^.fn:=pAFloatMonadic7430_AFM7430;
		 pAMonadicValue7429_AMV7429:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs7426_ACR7426:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType7427_ATT7427;
		myrec^.arg2:=pAMonadicValue7429_AMV7429;
		 pACastRhs7426_ACR7426:=myrec;
		END;
	FUNCTION pARhsValue7425_ARV7425:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7426_ACR7426;
		 pARhsValue7425_ARV7425:=myrec;
		END;
	FUNCTION pADyadicValue7421_ADV7421:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue7423_ALV7423;
		myrec^.arg2:=pARhsValue7425_ARV7425;
		myrec^.fn:=pAPushDyadic7422_APD7422;
		 pADyadicValue7421_ADV7421:=myrec;
		END;
	FUNCTION pAValueMeaning7420_AVM7420:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue7421_ADV7421;
		 pAValueMeaning7420_AVM7420:=myrec;
		END;
	FUNCTION pAAssemblypattern7442_AA7442:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'mov dword[fttemp], ' );
		pappendp(list,0);
		pappends(list,'\n fild dword[fttemp];floatdr' );
		pAAssemblypattern7442_AA7442:=list;
		END;
	FUNCTION pAAssemblesto7441_AA7441:pprintlist;
	begin
		pAAssemblesto7441_AA7441:=pAAssemblypattern7442_AA7442;
		END;
	FUNCTION pASideeffects7446_AS7446:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7446_AS7446:=nil;
		 pASideeffects7446_AS7446:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7447_AUP7447:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7447_AUP7447:=nil;
		 pAUnconditionalPrecond7447_AUP7447:=myrec;
		END;
	FUNCTION FLOATLDR_FLOATLDR:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patanyreal_;
		params^[0]:=patreg_;
		paramcount:=3;
		meaning:=pAValueMeaning7420_AVM7420;
		matchedAssembler:=pAAssemblesto7441_AA7441;
		END;
		FLOATLDR_FLOATLDR:=myrec;
	END;
	FUNCTION pATypeid7450_AT7450:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ real  ilcg.pattern@2cb5c6}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7450_AT7450:=myrec;
		END;
	FUNCTION pAPushDyadic7453_APD7453:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic7453_APD7453:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7455_AIL7455:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7455_AIL7455:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7454_ALV7454:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7455_AIL7455;
		 pALocValue7454_ALV7454:=myrec;
		END;
	FUNCTION pASigned7461_AS7461:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned7461_AS7461:=myrec;
		END;
	FUNCTION pASignedTformat7460_AST7460:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned7461_AS7461;
		 pASignedTformat7460_AST7460:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7459_ATP7459:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype7459_ATP7459:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7458_APT7458:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType7458_APT7458:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc7463_AIL7463:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc7463_AIL7463:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue7462_ALV7462:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7463_AIL7463;
		 pALocValue7462_ALV7462:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastpopRhs7457_ACR7457:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType7458_APT7458;
		myrec^.arg2:=pALocValue7462_ALV7462;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs7457_ACR7457:=myrec;
		END;
	FUNCTION pARhsValue7456_ARV7456:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs7457_ACR7457;
		 pARhsValue7456_ARV7456:=myrec;
		END;
	FUNCTION pADyadicValue7452_ADV7452:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue7454_ALV7454;
		myrec^.arg2:=pARhsValue7456_ARV7456;
		myrec^.fn:=pAPushDyadic7453_APD7453;
		 pADyadicValue7452_ADV7452:=myrec;
		END;
	FUNCTION pAValueMeaning7451_AVM7451:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue7452_ADV7452;
		 pAValueMeaning7451_AVM7451:=myrec;
		END;
	FUNCTION pAAssemblypattern7465_AA7465:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fild dword[esp]\n add esp,4' );
		pAAssemblypattern7465_AA7465:=list;
		END;
	FUNCTION pAAssemblesto7464_AA7464:pprintlist;
	begin
		pAAssemblesto7464_AA7464:=pAAssemblypattern7465_AA7465;
		END;
	FUNCTION pASideeffects7467_AS7467:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7467_AS7467:=nil;
		 pASideeffects7467_AS7467:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7468_AUP7468:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7468_AUP7468:=nil;
		 pAUnconditionalPrecond7468_AUP7468:=myrec;
		END;
	FUNCTION FILDIP_FILDIP:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreal_;
		paramcount:=2;
		meaning:=pAValueMeaning7451_AVM7451;
		matchedAssembler:=pAAssemblesto7464_AA7464;
		END;
		FILDIP_FILDIP:=myrec;
	END;
	FUNCTION pALtOperator7472_ALO7472:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pALtOperator7472_ALO7472:=nil;
		 pALtOperator7472_ALO7472:=myrec;
		END;
	FUNCTION pAGtOperator7476_AGO7476:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAGtOperator7476_AGO7476:=nil;
		 pAGtOperator7476_AGO7476:=myrec;
		END;
	FUNCTION pAEqOperator7480_AEO7480:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAEqOperator7480_AEO7480:=nil;
		 pAEqOperator7480_AEO7480:=myrec;
		END;
	FUNCTION pALeOperator7484_ALO7484:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pALeOperator7484_ALO7484:=nil;
		 pALeOperator7484_ALO7484:=myrec;
		END;
	FUNCTION pAGeOperator7488_AGO7488:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAGeOperator7488_AGO7488:=nil;
		 pAGeOperator7488_AGO7488:=myrec;
		END;
	FUNCTION pANeOperator7492_ANO7492:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANeOperator7492_ANO7492:=nil;
		 pANeOperator7492_ANO7492:=myrec;
		END;
	FUNCTION pATypeid7497_AT7497:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fne  ilcg.Operation@1aee513}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7497_AT7497:=myrec;
		END;
	FUNCTION pATypeidType7496_ATT7496:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7497_AT7497;
		 pATypeidType7496_ATT7496:=myrec;
		END;
	FUNCTION pATypeid7499_AT7499:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fge  ilcg.Operation@18c2354}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7499_AT7499:=myrec;
		END;
	FUNCTION pATypeidType7498_ATT7498:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7499_AT7499;
		 pATypeidType7498_ATT7498:=myrec;
		END;
	FUNCTION pATypeid7501_AT7501:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fle  ilcg.Operation@1d5d048}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7501_AT7501:=myrec;
		END;
	FUNCTION pATypeidType7500_ATT7500:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7501_AT7501;
		 pATypeidType7500_ATT7500:=myrec;
		END;
	FUNCTION pATypeid7503_AT7503:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ feq  ilcg.Operation@1158bbe}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7503_AT7503:=myrec;
		END;
	FUNCTION pATypeidType7502_ATT7502:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7503_AT7503;
		 pATypeidType7502_ATT7502:=myrec;
		END;
	FUNCTION pATypeid7505_AT7505:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fgt  ilcg.Operation@1f42679}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7505_AT7505:=myrec;
		END;
	FUNCTION pATypeidType7504_ATT7504:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7505_AT7505;
		 pATypeidType7504_ATT7504:=myrec;
		END;
	FUNCTION pATypeid7507_AT7507:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ flt  ilcg.Operation@5c0f8f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7507_AT7507:=myrec;
		END;
	FUNCTION pATypeidType7506_ATT7506:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7507_AT7507;
		 pATypeidType7506_ATT7506:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl7495_AAP7495:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 255;
		myrec^.last:= 260;
		 pAAlternativesPatterndecl7495_AAP7495:=myrec;
		END;
	FUNCTION pAIeee32Tformat7513_AI32T7513:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat7513_AI32T7513:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7512_ATP7512:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype7512_ATP7512:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7511_APT7511:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType7511_APT7511:=myrec;
		END;
	FUNCTION pAIeee63Tformat7516_AI63T7516:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat7516_AI63T7516:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7515_ATP7515:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype7515_ATP7515:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7514_APT7514:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType7514_APT7514:=myrec;
		END;
	FUNCTION pASigned7520_AS7520:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned7520_AS7520:=myrec;
		END;
	FUNCTION pASignedTformat7519_AST7519:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned7520_AS7520;
		 pASignedTformat7519_AST7519:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7518_ATP7518:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype7518_ATP7518:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7517_APT7517:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType7517_APT7517:=myrec;
		END;
	FUNCTION pAInt64Signed7524_AI64S7524:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64;
		 pAInt64Signed7524_AI64S7524:=myrec;
		END;
	FUNCTION pASignedTformat7523_AST7523:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt64Signed7524_AI64S7524;
		 pASignedTformat7523_AST7523:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7522_ATP7522:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64 ;
		 pATformatPredeclaredtype7522_ATP7522:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7521_APT7521:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64 ;
		 pAPredeclaredtypeType7521_APT7521:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl7510_AAP7510:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 261;
		myrec^.last:= 264;
		 pAAlternativesPatterndecl7510_AAP7510:=myrec;
		END;
	FUNCTION pATypeid7529_AT7529:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7529_AT7529:=myrec;
		END;
	FUNCTION pATypeid7531_AT7531:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fcondition  ilcg.pattern@945d2d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7531_AT7531:=myrec;
		END;
	FUNCTION pATypeid7533_AT7533:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@2a2ae9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7533_AT7533:=myrec;
		END;
	FUNCTION pATypeid7535_AT7535:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fpuval  ilcg.pattern@192b987}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7535_AT7535:=myrec;
		END;
	FUNCTION pATypeid7540_AT7540:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@721e92}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid7540_AT7540:=myrec;
		END;
	FUNCTION pATypeidType7539_ATT7539:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7540_AT7540;
		 pATypeidType7539_ATT7539:=myrec;
		END;
	FUNCTION pAIdentifierDyadic7542_AID7542:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdentifierDyadic7542_AID7542:=myrec;
		END;
	FUNCTION pATypeid7546_AT7546:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t2  ilcg.Param@363bce}
		myrec^.tag:=param;
		myrec^.index:= 4;
		 pATypeid7546_AT7546:=myrec;
		END;
	FUNCTION pATypeidType7545_ATT7545:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7546_AT7546;
		 pATypeidType7545_ATT7545:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7548_AIL7548:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7548_AIL7548:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7547_ALV7547:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7548_AIL7548;
		 pALocValue7547_ALV7547:=myrec;
		END;
		(*! try to cast to type: t2*)
	FUNCTION pACastpopRhs7544_ACR7544:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType7545_ATT7545;
		myrec^.arg2:=pALocValue7547_ALV7547;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs7544_ACR7544:=myrec;
		END;
	FUNCTION pARhsValue7543_ARV7543:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs7544_ACR7544;
		 pARhsValue7543_ARV7543:=myrec;
		END;
	FUNCTION pATypeid7552_AT7552:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t2  ilcg.Param@363bce}
		myrec^.tag:=param;
		myrec^.index:= 4;
		 pATypeid7552_AT7552:=myrec;
		END;
	FUNCTION pATypeidType7551_ATT7551:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7552_AT7552;
		 pATypeidType7551_ATT7551:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7554_AIL7554:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7554_AIL7554:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7553_ALV7553:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7554_AIL7554;
		 pALocValue7553_ALV7553:=myrec;
		END;
		(*! try to cast to type: t2*)
	FUNCTION pACastpopRhs7550_ACR7550:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType7551_ATT7551;
		myrec^.arg2:=pALocValue7553_ALV7553;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs7550_ACR7550:=myrec;
		END;
	FUNCTION pARhsValue7549_ARV7549:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs7550_ACR7550;
		 pARhsValue7549_ARV7549:=myrec;
		END;
	FUNCTION pADyadicValue7541_ADV7541:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue7543_ARV7543;
		myrec^.arg2:=pARhsValue7549_ARV7549;
		myrec^.fn:=pAIdentifierDyadic7542_AID7542;
		 pADyadicValue7541_ADV7541:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs7538_ACR7538:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType7539_ATT7539;
		myrec^.arg2:=pADyadicValue7541_ADV7541;
		 pACastRhs7538_ACR7538:=myrec;
		END;
	FUNCTION pARhsValue7537_ARV7537:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7538_ACR7538;
		 pARhsValue7537_ARV7537:=myrec;
		END;
		(*! Match l *)
	FUNCTION pAIdLoc7557_AIL7557:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc7557_AIL7557:=myrec;
		END;
		(*l *)
	FUNCTION pALocValue7556_ALV7556:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7557_AIL7557;
		 pALocValue7556_ALV7556:=myrec;
		END;
	FUNCTION pAGotoMeaning7555_AGM7555:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=gotonode;
		myrec^.dest:=pALocValue7556_ALV7556;
		 pAGotoMeaning7555_AGM7555:=myrec;
		END;
	FUNCTION pAIfMeaning7536_AIM7536:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pARhsValue7537_ARV7537;
		myrec^.action:=pAGotoMeaning7555_AGM7555;
		 pAIfMeaning7536_AIM7536:=myrec;
		END;
	FUNCTION pAAssemblypattern7559_AA7559:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fcomip st0,st1 \n  fincstp\n j' );
		pappendp(list,2);
		pappends(list,' near  ' );
		pappendp(list,0);
		pAAssemblypattern7559_AA7559:=list;
		END;
	FUNCTION pAAssemblesto7558_AA7558:pprintlist;
	begin
		pAAssemblesto7558_AA7558:=pAAssemblypattern7559_AA7559;
		END;
	FUNCTION pASideeffects7564_AS7564:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7564_AS7564:=nil;
		 pASideeffects7564_AS7564:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7565_AUP7565:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7565_AUP7565:=nil;
		 pAUnconditionalPrecond7565_AUP7565:=myrec;
		END;
	FUNCTION p6FIFGOTO_6FIFGOTO:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patmaddrmode_;
		params^[0]:=patlabel;
		params^[3]:=patint_;
		params^[4]:=patfpuval_;
		params^[2]:=patfcondition_;
		paramcount:=6;
		meaning:=pAIfMeaning7536_AIM7536;
		matchedAssembler:=pAAssemblesto7558_AA7558;
		END;
		p6FIFGOTO_6FIFGOTO:=myrec;
	END;
	FUNCTION pATypeid7570_AT7570:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7570_AT7570:=myrec;
		END;
	FUNCTION pATypeid7572_AT7572:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fcondition  ilcg.pattern@945d2d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7572_AT7572:=myrec;
		END;
	FUNCTION pATypeid7574_AT7574:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@2a2ae9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7574_AT7574:=myrec;
		END;
	FUNCTION pATypeid7576_AT7576:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fpuval  ilcg.pattern@192b987}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7576_AT7576:=myrec;
		END;
	FUNCTION pATypeid7581_AT7581:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@1fed1f3}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid7581_AT7581:=myrec;
		END;
	FUNCTION pATypeidType7580_ATT7580:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7581_AT7581;
		 pATypeidType7580_ATT7580:=myrec;
		END;
	FUNCTION pAIdentifierDyadic7583_AID7583:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdentifierDyadic7583_AID7583:=myrec;
		END;
	FUNCTION pATypeid7587_AT7587:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t2  ilcg.Param@317b1d}
		myrec^.tag:=param;
		myrec^.index:= 4;
		 pATypeid7587_AT7587:=myrec;
		END;
	FUNCTION pATypeidType7586_ATT7586:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7587_AT7587;
		 pATypeidType7586_ATT7586:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7589_AIL7589:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7589_AIL7589:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7588_ALV7588:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7589_AIL7589;
		 pALocValue7588_ALV7588:=myrec;
		END;
		(*! try to cast to type: t2*)
	FUNCTION pACastpopRhs7585_ACR7585:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType7586_ATT7586;
		myrec^.arg2:=pALocValue7588_ALV7588;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs7585_ACR7585:=myrec;
		END;
	FUNCTION pARhsValue7584_ARV7584:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs7585_ACR7585;
		 pARhsValue7584_ARV7584:=myrec;
		END;
	FUNCTION pAIeee32Tformat7597_AI32T7597:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat7597_AI32T7597:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7596_ATP7596:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype7596_ATP7596:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7595_APT7595:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType7595_APT7595:=myrec;
		END;
	FUNCTION pAReference7594_AR7594:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType7595_APT7595;
		 pAReference7594_AR7594:=myrec;
		END;
	FUNCTION pAReftypeType7593_ART7593:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference7594_AR7594;
		 pAReftypeType7593_ART7593:=myrec;
		END;
		(*! Match a *)
	FUNCTION pAIdLoc7598_AIL7598:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc7598_AIL7598:=myrec;
		END;
		(*! try to cast to type: ref ieee32*)
	FUNCTION pARefcastRefval7592_ARR7592:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType7593_ART7593;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc7598_AIL7598;
		 pARefcastRefval7592_ARR7592:=myrec;
		END;
	FUNCTION pADerefRhs7591_ADR7591:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval7592_ARR7592;
		 pADerefRhs7591_ADR7591:=myrec;
		END;
	FUNCTION pARhsValue7590_ARV7590:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs7591_ADR7591;
		 pARhsValue7590_ARV7590:=myrec;
		END;
	FUNCTION pADyadicValue7582_ADV7582:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue7584_ARV7584;
		myrec^.arg2:=pARhsValue7590_ARV7590;
		myrec^.fn:=pAIdentifierDyadic7583_AID7583;
		 pADyadicValue7582_ADV7582:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs7579_ACR7579:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType7580_ATT7580;
		myrec^.arg2:=pADyadicValue7582_ADV7582;
		 pACastRhs7579_ACR7579:=myrec;
		END;
	FUNCTION pARhsValue7578_ARV7578:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7579_ACR7579;
		 pARhsValue7578_ARV7578:=myrec;
		END;
		(*! Match l *)
	FUNCTION pAIdLoc7601_AIL7601:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc7601_AIL7601:=myrec;
		END;
		(*l *)
	FUNCTION pALocValue7600_ALV7600:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7601_AIL7601;
		 pALocValue7600_ALV7600:=myrec;
		END;
	FUNCTION pAGotoMeaning7599_AGM7599:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=gotonode;
		myrec^.dest:=pALocValue7600_ALV7600;
		 pAGotoMeaning7599_AGM7599:=myrec;
		END;
	FUNCTION pAIfMeaning7577_AIM7577:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pARhsValue7578_ARV7578;
		myrec^.action:=pAGotoMeaning7599_AGM7599;
		 pAIfMeaning7577_AIM7577:=myrec;
		END;
	FUNCTION pAAssemblypattern7603_AA7603:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fcomp dword ' );
		pappendp(list,1);
		pappends(list,' \npush ax\n fstsw ax\n sahf\n pop ax\n j' );
		pappendp(list,2);
		pappends(list,' near  ' );
		pappendp(list,0);
		pAAssemblypattern7603_AA7603:=list;
		END;
	FUNCTION pAAssemblesto7602_AA7602:pprintlist;
	begin
		pAAssemblesto7602_AA7602:=pAAssemblypattern7603_AA7603;
		END;
	FUNCTION pASideeffects7610_AS7610:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7610_AS7610:=nil;
		 pASideeffects7610_AS7610:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7611_AUP7611:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7611_AUP7611:=nil;
		 pAUnconditionalPrecond7611_AUP7611:=myrec;
		END;
	FUNCTION FIFGOTO_FIFGOTO:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patmaddrmode_;
		params^[0]:=patlabel;
		params^[3]:=patint_;
		params^[4]:=patfpuval_;
		params^[2]:=patfcondition_;
		paramcount:=6;
		meaning:=pAIfMeaning7577_AIM7577;
		matchedAssembler:=pAAssemblesto7602_AA7602;
		END;
		FIFGOTO_FIFGOTO:=myrec;
	END;
	FUNCTION pATypeid7616_AT7616:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fcondition  ilcg.pattern@945d2d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7616_AT7616:=myrec;
		END;
	FUNCTION pATypeid7618_AT7618:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@2a2ae9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7618_AT7618:=myrec;
		END;
	FUNCTION pATypeid7620_AT7620:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fpuval  ilcg.pattern@192b987}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7620_AT7620:=myrec;
		END;
	FUNCTION pATypeid7625_AT7625:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@1e8dd92}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid7625_AT7625:=myrec;
		END;
	FUNCTION pATypeidType7624_ATT7624:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7625_AT7625;
		 pATypeidType7624_ATT7624:=myrec;
		END;
	FUNCTION pAIdentifierDyadic7627_AID7627:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdentifierDyadic7627_AID7627:=myrec;
		END;
	FUNCTION pATypeid7631_AT7631:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t2  ilcg.Param@f824b7}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid7631_AT7631:=myrec;
		END;
	FUNCTION pATypeidType7630_ATT7630:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7631_AT7631;
		 pATypeidType7630_ATT7630:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7633_AIL7633:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7633_AIL7633:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7632_ALV7632:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7633_AIL7633;
		 pALocValue7632_ALV7632:=myrec;
		END;
		(*! try to cast to type: t2*)
	FUNCTION pACastpopRhs7629_ACR7629:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType7630_ATT7630;
		myrec^.arg2:=pALocValue7632_ALV7632;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs7629_ACR7629:=myrec;
		END;
	FUNCTION pARhsValue7628_ARV7628:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs7629_ACR7629;
		 pARhsValue7628_ARV7628:=myrec;
		END;
	FUNCTION pATypeid7637_AT7637:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t2  ilcg.Param@f824b7}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid7637_AT7637:=myrec;
		END;
	FUNCTION pATypeidType7636_ATT7636:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7637_AT7637;
		 pATypeidType7636_ATT7636:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7639_AIL7639:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7639_AIL7639:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7638_ALV7638:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7639_AIL7639;
		 pALocValue7638_ALV7638:=myrec;
		END;
		(*! try to cast to type: t2*)
	FUNCTION pACastpopRhs7635_ACR7635:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType7636_ATT7636;
		myrec^.arg2:=pALocValue7638_ALV7638;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs7635_ACR7635:=myrec;
		END;
	FUNCTION pARhsValue7634_ARV7634:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs7635_ACR7635;
		 pARhsValue7634_ARV7634:=myrec;
		END;
	FUNCTION pADyadicValue7626_ADV7626:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue7628_ARV7628;
		myrec^.arg2:=pARhsValue7634_ARV7634;
		myrec^.fn:=pAIdentifierDyadic7627_AID7627;
		 pADyadicValue7626_ADV7626:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs7623_ACR7623:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType7624_ATT7624;
		myrec^.arg2:=pADyadicValue7626_ADV7626;
		 pACastRhs7623_ACR7623:=myrec;
		END;
	FUNCTION pARhsValue7622_ARV7622:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7623_ACR7623;
		 pARhsValue7622_ARV7622:=myrec;
		END;
		(*! Match l *)
	FUNCTION pAIdLoc7642_AIL7642:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc7642_AIL7642:=myrec;
		END;
		(*l *)
	FUNCTION pALocValue7641_ALV7641:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7642_AIL7642;
		 pALocValue7641_ALV7641:=myrec;
		END;
	FUNCTION pAGotoMeaning7640_AGM7640:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=gotonode;
		myrec^.dest:=pALocValue7641_ALV7641;
		 pAGotoMeaning7640_AGM7640:=myrec;
		END;
	FUNCTION pAIfMeaning7621_AIM7621:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pARhsValue7622_ARV7622;
		myrec^.action:=pAGotoMeaning7640_AGM7640;
		 pAIfMeaning7621_AIM7621:=myrec;
		END;
	FUNCTION pAAssemblypattern7644_AA7644:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fxch\n fcompp \npush ax  \n fstsw ax\n sahf\n pop ax\n j' );
		pappendp(list,1);
		pappends(list,' near ' );
		pappendp(list,0);
		pAAssemblypattern7644_AA7644:=list;
		END;
	FUNCTION pAAssemblesto7643_AA7643:pprintlist;
	begin
		pAAssemblesto7643_AA7643:=pAAssemblypattern7644_AA7644;
		END;
	FUNCTION pASideeffects7649_AS7649:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7649_AS7649:=nil;
		 pASideeffects7649_AS7649:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7650_AUP7650:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7650_AUP7650:=nil;
		 pAUnconditionalPrecond7650_AUP7650:=myrec;
		END;
	FUNCTION FIFGOTOgeneral_FIFGOTO:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patlabel;
		params^[2]:=patint_;
		params^[3]:=patfpuval_;
		params^[1]:=patfcondition_;
		paramcount:=5;
		meaning:=pAIfMeaning7621_AIM7621;
		matchedAssembler:=pAAssemblesto7643_AA7643;
		END;
		FIFGOTOgeneral_FIFGOTO:=myrec;
	END;
	FUNCTION pATypeid7653_AT7653:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fcondition  ilcg.pattern@945d2d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7653_AT7653:=myrec;
		END;
	FUNCTION pATypeid7655_AT7655:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7655_AT7655:=myrec;
		END;
	FUNCTION pATypeid7657_AT7657:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fpuval  ilcg.pattern@192b987}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7657_AT7657:=myrec;
		END;
	FUNCTION pAInt8Signed7666_AI8S7666:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed7666_AI8S7666:=myrec;
		END;
	FUNCTION pASignedTformat7665_AST7665:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed7666_AI8S7666;
		 pASignedTformat7665_AST7665:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7664_ATP7664:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype7664_ATP7664:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7663_APT7663:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType7663_APT7663:=myrec;
		END;
	FUNCTION pAReference7662_AR7662:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType7663_APT7663;
		 pAReference7662_AR7662:=myrec;
		END;
	FUNCTION pAReftypeType7661_ART7661:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference7662_AR7662;
		 pAReftypeType7661_ART7661:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc7667_AIL7667:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc7667_AIL7667:=myrec;
		END;
		(*! try to cast to type: ref int8*)
	FUNCTION pARefcastRefval7660_ARR7660:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType7661_ART7661;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc7667_AIL7667;
		 pARefcastRefval7660_ARR7660:=myrec;
		END;
	FUNCTION pAInt8Signed7673_AI8S7673:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed7673_AI8S7673:=myrec;
		END;
	FUNCTION pASignedTformat7672_AST7672:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed7673_AI8S7673;
		 pASignedTformat7672_AST7672:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7671_ATP7671:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype7671_ATP7671:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7670_APT7670:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType7670_APT7670:=myrec;
		END;
	FUNCTION pAIdentifierDyadic7675_AID7675:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic7675_AID7675:=myrec;
		END;
	FUNCTION pATypeid7679_AT7679:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t2  ilcg.Param@a71c9a}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid7679_AT7679:=myrec;
		END;
	FUNCTION pATypeidType7678_ATT7678:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7679_AT7679;
		 pATypeidType7678_ATT7678:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7681_AIL7681:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7681_AIL7681:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7680_ALV7680:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7681_AIL7681;
		 pALocValue7680_ALV7680:=myrec;
		END;
		(*! try to cast to type: t2*)
	FUNCTION pACastpopRhs7677_ACR7677:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType7678_ATT7678;
		myrec^.arg2:=pALocValue7680_ALV7680;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs7677_ACR7677:=myrec;
		END;
	FUNCTION pARhsValue7676_ARV7676:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs7677_ACR7677;
		 pARhsValue7676_ARV7676:=myrec;
		END;
	FUNCTION pATypeid7685_AT7685:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t2  ilcg.Param@a71c9a}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid7685_AT7685:=myrec;
		END;
	FUNCTION pATypeidType7684_ATT7684:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7685_AT7685;
		 pATypeidType7684_ATT7684:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7687_AIL7687:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7687_AIL7687:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7686_ALV7686:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7687_AIL7687;
		 pALocValue7686_ALV7686:=myrec;
		END;
		(*! try to cast to type: t2*)
	FUNCTION pACastpopRhs7683_ACR7683:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType7684_ATT7684;
		myrec^.arg2:=pALocValue7686_ALV7686;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs7683_ACR7683:=myrec;
		END;
	FUNCTION pARhsValue7682_ARV7682:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs7683_ACR7683;
		 pARhsValue7682_ARV7682:=myrec;
		END;
	FUNCTION pADyadicValue7674_ADV7674:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue7676_ARV7676;
		myrec^.arg2:=pARhsValue7682_ARV7682;
		myrec^.fn:=pAIdentifierDyadic7675_AID7675;
		 pADyadicValue7674_ADV7674:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs7669_ACR7669:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType7670_APT7670;
		myrec^.arg2:=pADyadicValue7674_ADV7674;
		 pACastRhs7669_ACR7669:=myrec;
		END;
	FUNCTION pARhsValue7668_ARV7668:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7669_ACR7669;
		 pARhsValue7668_ARV7668:=myrec;
		END;
	FUNCTION pAAssign7659_AA7659:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue7668_ARV7668;
		myrec^.dest:=pARefcastRefval7660_ARR7660;
		 pAAssign7659_AA7659:=myrec;
		END;
	FUNCTION pAAssignMeaning7658_AAM7658:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign7659_AA7659;
		 pAAssignMeaning7658_AAM7658:=myrec;
		END;
	FUNCTION pAAssemblypattern7689_AA7689:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fxch\n fcompp\n push ax\n fstsw ax\n sahf\n pop ax\n set' );
		pappendp(list,0);
		pappends(list,' ' );
		pappendp(list,1);
		pappends(list,'\nnot ' );
		pappendp(list,1);
		pappends(list,'\n inc ' );
		pappendp(list,1);
		pAAssemblypattern7689_AA7689:=list;
		END;
	FUNCTION pAAssemblesto7688_AA7688:pprintlist;
	begin
		pAAssemblesto7688_AA7688:=pAAssemblypattern7689_AA7689;
		END;
	FUNCTION pASideeffects7698_AS7698:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7698_AS7698:=nil;
		 pASideeffects7698_AS7698:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7699_AUP7699:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7699_AUP7699:=nil;
		 pAUnconditionalPrecond7699_AUP7699:=myrec;
		END;
	FUNCTION FSET_FSET:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patfpuval_;
		params^[1]:=patbreg_;
		params^[0]:=patfcondition_;
		paramcount:=4;
		meaning:=pAAssignMeaning7658_AAM7658;
		matchedAssembler:=pAAssemblesto7688_AA7688;
		END;
		FSET_FSET:=myrec;
	END;
	FUNCTION pATypeid7702_AT7702:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fmoperator  ilcg.pattern@d6a9a4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7702_AT7702:=myrec;
		END;
	FUNCTION pAPushDyadic7705_APD7705:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic7705_APD7705:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7707_AIL7707:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7707_AIL7707:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7706_ALV7706:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7707_AIL7707;
		 pALocValue7706_ALV7706:=myrec;
		END;
		(*! Match op *)
	FUNCTION pAIdLoc7709_AIL7709:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc7709_AIL7709:=myrec;
		END;
		(*op *)
	FUNCTION pALocValue7708_ALV7708:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7709_AIL7709;
		 pALocValue7708_ALV7708:=myrec;
		END;
	FUNCTION pADyadicValue7704_ADV7704:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue7706_ALV7706;
		myrec^.arg2:=pALocValue7708_ALV7708;
		myrec^.fn:=pAPushDyadic7705_APD7705;
		 pADyadicValue7704_ADV7704:=myrec;
		END;
	FUNCTION pAValueMeaning7703_AVM7703:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue7704_ADV7704;
		 pAValueMeaning7703_AVM7703:=myrec;
		END;
	FUNCTION pAAssemblypattern7711_AA7711:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pAAssemblypattern7711_AA7711:=list;
		END;
	FUNCTION pAAssemblesto7710_AA7710:pprintlist;
	begin
		pAAssemblesto7710_AA7710:=pAAssemblypattern7711_AA7711;
		END;
	FUNCTION pASideeffects7713_AS7713:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7713_AS7713:=nil;
		 pASideeffects7713_AS7713:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7714_AUP7714:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7714_AUP7714:=nil;
		 pAUnconditionalPrecond7714_AUP7714:=myrec;
		END;
	FUNCTION FMOP_FMOP:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patfmoperator_;
		paramcount:=2;
		meaning:=pAValueMeaning7703_AVM7703;
		matchedAssembler:=pAAssemblesto7710_AA7710;
		END;
		FMOP_FMOP:=myrec;
	END;
	FUNCTION pATypeid7717_AT7717:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ real  ilcg.pattern@2cb5c6}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7717_AT7717:=myrec;
		END;
	FUNCTION pAPushDyadic7720_APD7720:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic7720_APD7720:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7722_AIL7722:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7722_AIL7722:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7721_ALV7721:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7722_AIL7722;
		 pALocValue7721_ALV7721:=myrec;
		END;
	FUNCTION pATypeid7726_AT7726:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@a075e6}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid7726_AT7726:=myrec;
		END;
	FUNCTION pATypeidType7725_ATT7725:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7726_AT7726;
		 pATypeidType7725_ATT7725:=myrec;
		END;
	FUNCTION pAMinusDyadic7728_AMD7728:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpminus;
		 pAMinusDyadic7728_AMD7728:=myrec;
		END;
	FUNCTION pATypeid7732_AT7732:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@a075e6}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid7732_AT7732:=myrec;
		END;
	FUNCTION pATypeidType7731_ATT7731:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7732_AT7732;
		 pATypeidType7731_ATT7731:=myrec;
		END;
	FUNCTION pAOptionalsign7736_AO7736:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7736_AO7736:=nil;
		 pAOptionalsign7736_AO7736:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7735_AIN7735:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=0 ;
		 pAIntegerNumber7735_AIN7735:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs7734_ANR7734:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber7735_AIN7735;
		 pANumberRhs7734_ANR7734:=myrec;
		END;
	FUNCTION pARhsValue7733_ARV7733:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs7734_ANR7734;
		 pARhsValue7733_ARV7733:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs7730_ACR7730:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType7731_ATT7731;
		myrec^.arg2:=pARhsValue7733_ARV7733;
		 pACastRhs7730_ACR7730:=myrec;
		END;
	FUNCTION pARhsValue7729_ARV7729:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7730_ACR7730;
		 pARhsValue7729_ARV7729:=myrec;
		END;
	FUNCTION pATypeid7740_AT7740:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@a075e6}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid7740_AT7740:=myrec;
		END;
	FUNCTION pATypeidType7739_ATT7739:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7740_AT7740;
		 pATypeidType7739_ATT7739:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7742_AIL7742:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7742_AIL7742:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7741_ALV7741:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7742_AIL7742;
		 pALocValue7741_ALV7741:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastpopRhs7738_ACR7738:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType7739_ATT7739;
		myrec^.arg2:=pALocValue7741_ALV7741;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs7738_ACR7738:=myrec;
		END;
	FUNCTION pARhsValue7737_ARV7737:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs7738_ACR7738;
		 pARhsValue7737_ARV7737:=myrec;
		END;
	FUNCTION pADyadicValue7727_ADV7727:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue7729_ARV7729;
		myrec^.arg2:=pARhsValue7737_ARV7737;
		myrec^.fn:=pAMinusDyadic7728_AMD7728;
		 pADyadicValue7727_ADV7727:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs7724_ACR7724:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType7725_ATT7725;
		myrec^.arg2:=pADyadicValue7727_ADV7727;
		 pACastRhs7724_ACR7724:=myrec;
		END;
	FUNCTION pARhsValue7723_ARV7723:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7724_ACR7724;
		 pARhsValue7723_ARV7723:=myrec;
		END;
	FUNCTION pADyadicValue7719_ADV7719:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue7721_ALV7721;
		myrec^.arg2:=pARhsValue7723_ARV7723;
		myrec^.fn:=pAPushDyadic7720_APD7720;
		 pADyadicValue7719_ADV7719:=myrec;
		END;
	FUNCTION pAValueMeaning7718_AVM7718:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue7719_ADV7719;
		 pAValueMeaning7718_AVM7718:=myrec;
		END;
	FUNCTION pAAssemblypattern7744_AA7744:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fchs' );
		pAAssemblypattern7744_AA7744:=list;
		END;
	FUNCTION pAAssemblesto7743_AA7743:pprintlist;
	begin
		pAAssemblesto7743_AA7743:=pAAssemblypattern7744_AA7744;
		END;
	FUNCTION pASideeffects7746_AS7746:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7746_AS7746:=nil;
		 pASideeffects7746_AS7746:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7747_AUP7747:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7747_AUP7747:=nil;
		 pAUnconditionalPrecond7747_AUP7747:=myrec;
		END;
	FUNCTION FCHS_FCHS:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreal_;
		paramcount:=2;
		meaning:=pAValueMeaning7718_AVM7718;
		matchedAssembler:=pAAssemblesto7743_AA7743;
		END;
		FCHS_FCHS:=myrec;
	END;
	FUNCTION pATypeid7750_AT7750:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ float  ilcg.pattern@19d0cf0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7750_AT7750:=myrec;
		END;
	FUNCTION pAPushDyadic7753_APD7753:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic7753_APD7753:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7755_AIL7755:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7755_AIL7755:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7754_ALV7754:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7755_AIL7755;
		 pALocValue7754_ALV7754:=myrec;
		END;
	FUNCTION pAConstRhs7757_ACR7757:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(0);;
		 pAConstRhs7757_ACR7757:=myrec;
		END;
	FUNCTION pARhsValue7756_ARV7756:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs7757_ACR7757;
		 pARhsValue7756_ARV7756:=myrec;
		END;
	FUNCTION pADyadicValue7752_ADV7752:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue7754_ALV7754;
		myrec^.arg2:=pARhsValue7756_ARV7756;
		myrec^.fn:=pAPushDyadic7753_APD7753;
		 pADyadicValue7752_ADV7752:=myrec;
		END;
	FUNCTION pAValueMeaning7751_AVM7751:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue7752_ADV7752;
		 pAValueMeaning7751_AVM7751:=myrec;
		END;
	FUNCTION pAAssemblypattern7759_AA7759:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'floadlit ' );
		pappendp(list,0);
		pAAssemblypattern7759_AA7759:=list;
		END;
	FUNCTION pAAssemblesto7758_AA7758:pprintlist;
	begin
		pAAssemblesto7758_AA7758:=pAAssemblypattern7759_AA7759;
		END;
	FUNCTION pASideeffects7762_AS7762:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7762_AS7762:=nil;
		 pASideeffects7762_AS7762:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7763_AUP7763:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7763_AUP7763:=nil;
		 pAUnconditionalPrecond7763_AUP7763:=myrec;
		END;
	FUNCTION FLOADLIT_FLOADLIT:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patfloat_;
		paramcount:=2;
		meaning:=pAValueMeaning7751_AVM7751;
		matchedAssembler:=pAAssemblesto7758_AA7758;
		END;
		FLOADLIT_FLOADLIT:=myrec;
	END;
	FUNCTION pATypeid7766_AT7766:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ real  ilcg.pattern@2cb5c6}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7766_AT7766:=myrec;
		END;
	FUNCTION pATypeid7768_AT7768:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ anyreal  ilcg.pattern@3e25d3}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7768_AT7768:=myrec;
		END;
	FUNCTION pAPushDyadic7771_APD7771:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic7771_APD7771:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7773_AIL7773:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7773_AIL7773:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7772_ALV7772:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7773_AIL7773;
		 pALocValue7772_ALV7772:=myrec;
		END;
	FUNCTION pATypeid7777_AT7777:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@156b7c1}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid7777_AT7777:=myrec;
		END;
	FUNCTION pATypeidType7776_ATT7776:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7777_AT7777;
		 pATypeidType7776_ATT7776:=myrec;
		END;
	FUNCTION pAConstRhs7779_ACR7779:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(0);;
		 pAConstRhs7779_ACR7779:=myrec;
		END;
	FUNCTION pARhsValue7778_ARV7778:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs7779_ACR7779;
		 pARhsValue7778_ARV7778:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs7775_ACR7775:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType7776_ATT7776;
		myrec^.arg2:=pARhsValue7778_ARV7778;
		 pACastRhs7775_ACR7775:=myrec;
		END;
	FUNCTION pARhsValue7774_ARV7774:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7775_ACR7775;
		 pARhsValue7774_ARV7774:=myrec;
		END;
	FUNCTION pADyadicValue7770_ADV7770:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue7772_ALV7772;
		myrec^.arg2:=pARhsValue7774_ARV7774;
		myrec^.fn:=pAPushDyadic7771_APD7771;
		 pADyadicValue7770_ADV7770:=myrec;
		END;
	FUNCTION pAValueMeaning7769_AVM7769:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue7770_ADV7770;
		 pAValueMeaning7769_AVM7769:=myrec;
		END;
	FUNCTION pAAssemblypattern7781_AA7781:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'floadlit ' );
		pappendp(list,0);
		pAAssemblypattern7781_AA7781:=list;
		END;
	FUNCTION pAAssemblesto7780_AA7780:pprintlist;
	begin
		pAAssemblesto7780_AA7780:=pAAssemblypattern7781_AA7781;
		END;
	FUNCTION pASideeffects7784_AS7784:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7784_AS7784:=nil;
		 pASideeffects7784_AS7784:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7785_AUP7785:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7785_AUP7785:=nil;
		 pAUnconditionalPrecond7785_AUP7785:=myrec;
		END;
	FUNCTION FLOADDLIT_FLOADDLIT:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patanyreal_;
		params^[0]:=patreal_;
		paramcount:=3;
		meaning:=pAValueMeaning7769_AVM7769;
		matchedAssembler:=pAAssemblesto7780_AA7780;
		END;
		FLOADDLIT_FLOADDLIT:=myrec;
	END;
	FUNCTION pATypeid7788_AT7788:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ hiint  ilcg.pattern@a69ae7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7788_AT7788:=myrec;
		END;
	FUNCTION pATypeid7790_AT7790:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fputype  ilcg.pattern@15e3abb}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7790_AT7790:=myrec;
		END;
	FUNCTION pAPushDyadic7793_APD7793:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic7793_APD7793:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7795_AIL7795:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7795_AIL7795:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7794_ALV7794:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7795_AIL7795;
		 pALocValue7794_ALV7794:=myrec;
		END;
	FUNCTION pATypeid7799_AT7799:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@7544a6}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid7799_AT7799:=myrec;
		END;
	FUNCTION pATypeidType7798_ATT7798:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7799_AT7799;
		 pATypeidType7798_ATT7798:=myrec;
		END;
	FUNCTION pAConstRhs7801_ACR7801:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(0);;
		 pAConstRhs7801_ACR7801:=myrec;
		END;
	FUNCTION pARhsValue7800_ARV7800:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs7801_ACR7801;
		 pARhsValue7800_ARV7800:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs7797_ACR7797:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType7798_ATT7798;
		myrec^.arg2:=pARhsValue7800_ARV7800;
		 pACastRhs7797_ACR7797:=myrec;
		END;
	FUNCTION pARhsValue7796_ARV7796:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7797_ACR7797;
		 pARhsValue7796_ARV7796:=myrec;
		END;
	FUNCTION pADyadicValue7792_ADV7792:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue7794_ALV7794;
		myrec^.arg2:=pARhsValue7796_ARV7796;
		myrec^.fn:=pAPushDyadic7793_APD7793;
		 pADyadicValue7792_ADV7792:=myrec;
		END;
	FUNCTION pAValueMeaning7791_AVM7791:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue7792_ADV7792;
		 pAValueMeaning7791_AVM7791:=myrec;
		END;
	FUNCTION pAAssemblypattern7803_AA7803:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'filoadlit ' );
		pappendp(list,0);
		pAAssemblypattern7803_AA7803:=list;
		END;
	FUNCTION pAAssemblesto7802_AA7802:pprintlist;
	begin
		pAAssemblesto7802_AA7802:=pAAssemblypattern7803_AA7803;
		END;
	FUNCTION pASideeffects7806_AS7806:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7806_AS7806:=nil;
		 pASideeffects7806_AS7806:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7807_AUP7807:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7807_AUP7807:=nil;
		 pAUnconditionalPrecond7807_AUP7807:=myrec;
		END;
	FUNCTION FILOADLIT_FILOADLIT:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patfputype_;
		params^[0]:=pathiint_;
		paramcount:=3;
		meaning:=pAValueMeaning7791_AVM7791;
		matchedAssembler:=pAAssemblesto7802_AA7802;
		END;
		FILOADLIT_FILOADLIT:=myrec;
	END;
	FUNCTION pATypeid7810_AT7810:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7810_AT7810:=myrec;
		END;
	FUNCTION pATypeid7812_AT7812:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ foperator  ilcg.pattern@45ce28}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7812_AT7812:=myrec;
		END;
	FUNCTION pAPushDyadic7815_APD7815:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic7815_APD7815:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7817_AIL7817:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7817_AIL7817:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7816_ALV7816:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7817_AIL7817;
		 pALocValue7816_ALV7816:=myrec;
		END;
	FUNCTION pAIdentifierDyadic7819_AID7819:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdentifierDyadic7819_AID7819:=myrec;
		END;
	FUNCTION pAIeee63Tformat7824_AI63T7824:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat7824_AI63T7824:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7823_ATP7823:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype7823_ATP7823:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7822_APT7822:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType7822_APT7822:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7826_AIL7826:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7826_AIL7826:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7825_ALV7825:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7826_AIL7826;
		 pALocValue7825_ALV7825:=myrec;
		END;
		(*! try to cast to type: ieee64*)
	FUNCTION pACastpopRhs7821_ACR7821:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType7822_APT7822;
		myrec^.arg2:=pALocValue7825_ALV7825;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs7821_ACR7821:=myrec;
		END;
	FUNCTION pARhsValue7820_ARV7820:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs7821_ACR7821;
		 pARhsValue7820_ARV7820:=myrec;
		END;
	FUNCTION pAIeee63Tformat7834_AI63T7834:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat7834_AI63T7834:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7833_ATP7833:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype7833_ATP7833:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7832_APT7832:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType7832_APT7832:=myrec;
		END;
	FUNCTION pAReference7831_AR7831:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType7832_APT7832;
		 pAReference7831_AR7831:=myrec;
		END;
	FUNCTION pAReftypeType7830_ART7830:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference7831_AR7831;
		 pAReftypeType7830_ART7830:=myrec;
		END;
		(*! Match a *)
	FUNCTION pAIdLoc7835_AIL7835:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc7835_AIL7835:=myrec;
		END;
		(*! try to cast to type: ref ieee64*)
	FUNCTION pARefcastRefval7829_ARR7829:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType7830_ART7830;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc7835_AIL7835;
		 pARefcastRefval7829_ARR7829:=myrec;
		END;
	FUNCTION pADerefRhs7828_ADR7828:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval7829_ARR7829;
		 pADerefRhs7828_ADR7828:=myrec;
		END;
	FUNCTION pARhsValue7827_ARV7827:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs7828_ADR7828;
		 pARhsValue7827_ARV7827:=myrec;
		END;
	FUNCTION pADyadicValue7818_ADV7818:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue7820_ARV7820;
		myrec^.arg2:=pARhsValue7827_ARV7827;
		myrec^.fn:=pAIdentifierDyadic7819_AID7819;
		 pADyadicValue7818_ADV7818:=myrec;
		END;
	FUNCTION pADyadicValue7814_ADV7814:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue7816_ALV7816;
		myrec^.arg2:=pADyadicValue7818_ADV7818;
		myrec^.fn:=pAPushDyadic7815_APD7815;
		 pADyadicValue7814_ADV7814:=myrec;
		END;
	FUNCTION pAValueMeaning7813_AVM7813:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue7814_ADV7814;
		 pAValueMeaning7813_AVM7813:=myrec;
		END;
	FUNCTION pAAssemblypattern7837_AA7837:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'f' );
		pappendp(list,1);
		pappends(list,'  qword  ' );
		pappendp(list,0);
		pAAssemblypattern7837_AA7837:=list;
		END;
	FUNCTION pAAssemblesto7836_AA7836:pprintlist;
	begin
		pAAssemblesto7836_AA7836:=pAAssemblypattern7837_AA7837;
		END;
	FUNCTION pASideeffects7842_AS7842:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7842_AS7842:=nil;
		 pASideeffects7842_AS7842:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7843_AUP7843:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7843_AUP7843:=nil;
		 pAUnconditionalPrecond7843_AUP7843:=myrec;
		END;
	FUNCTION FOP_FOP:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmaddrmode_;
		params^[1]:=patfoperator_;
		paramcount:=3;
		meaning:=pAValueMeaning7813_AVM7813;
		matchedAssembler:=pAAssemblesto7836_AA7836;
		END;
		FOP_FOP:=myrec;
	END;
	FUNCTION pATypeid7846_AT7846:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7846_AT7846:=myrec;
		END;
	FUNCTION pATypeid7848_AT7848:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ foperator  ilcg.pattern@45ce28}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7848_AT7848:=myrec;
		END;
	FUNCTION pATypeid7850_AT7850:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ real  ilcg.pattern@2cb5c6}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7850_AT7850:=myrec;
		END;
	FUNCTION pAPushDyadic7853_APD7853:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic7853_APD7853:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7855_AIL7855:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7855_AIL7855:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7854_ALV7854:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7855_AIL7855;
		 pALocValue7854_ALV7854:=myrec;
		END;
	FUNCTION pATypeid7859_AT7859:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@10a08e}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid7859_AT7859:=myrec;
		END;
	FUNCTION pATypeidType7858_ATT7858:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7859_AT7859;
		 pATypeidType7858_ATT7858:=myrec;
		END;
	FUNCTION pAIdentifierDyadic7861_AID7861:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdentifierDyadic7861_AID7861:=myrec;
		END;
	FUNCTION pATypeid7865_AT7865:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@10a08e}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid7865_AT7865:=myrec;
		END;
	FUNCTION pATypeidType7864_ATT7864:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7865_AT7865;
		 pATypeidType7864_ATT7864:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7867_AIL7867:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7867_AIL7867:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7866_ALV7866:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7867_AIL7867;
		 pALocValue7866_ALV7866:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastpopRhs7863_ACR7863:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType7864_ATT7864;
		myrec^.arg2:=pALocValue7866_ALV7866;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs7863_ACR7863:=myrec;
		END;
	FUNCTION pARhsValue7862_ARV7862:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs7863_ACR7863;
		 pARhsValue7862_ARV7862:=myrec;
		END;
	FUNCTION pATypeid7871_AT7871:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@10a08e}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid7871_AT7871:=myrec;
		END;
	FUNCTION pATypeidType7870_ATT7870:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7871_AT7871;
		 pATypeidType7870_ATT7870:=myrec;
		END;
	FUNCTION pATypeid7878_AT7878:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@10a08e}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid7878_AT7878:=myrec;
		END;
	FUNCTION pATypeidType7877_ATT7877:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7878_AT7878;
		 pATypeidType7877_ATT7877:=myrec;
		END;
	FUNCTION pAReference7876_AR7876:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType7877_ATT7877;
		 pAReference7876_AR7876:=myrec;
		END;
	FUNCTION pAReftypeType7875_ART7875:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference7876_AR7876;
		 pAReftypeType7875_ART7875:=myrec;
		END;
		(*! Match a *)
	FUNCTION pAIdLoc7879_AIL7879:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc7879_AIL7879:=myrec;
		END;
		(*! try to cast to type: ref t*)
	FUNCTION pARefcastRefval7874_ARR7874:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType7875_ART7875;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc7879_AIL7879;
		 pARefcastRefval7874_ARR7874:=myrec;
		END;
	FUNCTION pADerefRhs7873_ADR7873:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval7874_ARR7874;
		 pADerefRhs7873_ADR7873:=myrec;
		END;
	FUNCTION pARhsValue7872_ARV7872:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs7873_ADR7873;
		 pARhsValue7872_ARV7872:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs7869_ACR7869:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType7870_ATT7870;
		myrec^.arg2:=pARhsValue7872_ARV7872;
		 pACastRhs7869_ACR7869:=myrec;
		END;
	FUNCTION pARhsValue7868_ARV7868:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7869_ACR7869;
		 pARhsValue7868_ARV7868:=myrec;
		END;
	FUNCTION pADyadicValue7860_ADV7860:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue7862_ARV7862;
		myrec^.arg2:=pARhsValue7868_ARV7868;
		myrec^.fn:=pAIdentifierDyadic7861_AID7861;
		 pADyadicValue7860_ADV7860:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs7857_ACR7857:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType7858_ATT7858;
		myrec^.arg2:=pADyadicValue7860_ADV7860;
		 pACastRhs7857_ACR7857:=myrec;
		END;
	FUNCTION pARhsValue7856_ARV7856:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7857_ACR7857;
		 pARhsValue7856_ARV7856:=myrec;
		END;
	FUNCTION pADyadicValue7852_ADV7852:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue7854_ALV7854;
		myrec^.arg2:=pARhsValue7856_ARV7856;
		myrec^.fn:=pAPushDyadic7853_APD7853;
		 pADyadicValue7852_ADV7852:=myrec;
		END;
	FUNCTION pAValueMeaning7851_AVM7851:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue7852_ADV7852;
		 pAValueMeaning7851_AVM7851:=myrec;
		END;
	FUNCTION pAAssemblypattern7881_AA7881:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'f' );
		pappendp(list,1);
		pappends(list,' ' );
		pappendp(list,2);
		pappends(list,' ' );
		pappendp(list,0);
		pAAssemblypattern7881_AA7881:=list;
		END;
	FUNCTION pAAssemblesto7880_AA7880:pprintlist;
	begin
		pAAssemblesto7880_AA7880:=pAAssemblypattern7881_AA7881;
		END;
	FUNCTION pASideeffects7888_AS7888:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7888_AS7888:=nil;
		 pASideeffects7888_AS7888:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7889_AUP7889:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7889_AUP7889:=nil;
		 pAUnconditionalPrecond7889_AUP7889:=myrec;
		END;
	FUNCTION FOPF_FOPF:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmaddrmode_;
		params^[2]:=patreal_;
		params^[1]:=patfoperator_;
		paramcount:=4;
		meaning:=pAValueMeaning7851_AVM7851;
		matchedAssembler:=pAAssemblesto7880_AA7880;
		END;
		FOPF_FOPF:=myrec;
	END;
	FUNCTION pATypeid7892_AT7892:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7892_AT7892:=myrec;
		END;
	FUNCTION pATypeid7894_AT7894:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ foperator  ilcg.pattern@45ce28}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7894_AT7894:=myrec;
		END;
	FUNCTION pATypeid7896_AT7896:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fputype  ilcg.pattern@15e3abb}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7896_AT7896:=myrec;
		END;
	FUNCTION pAPushDyadic7899_APD7899:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic7899_APD7899:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7901_AIL7901:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7901_AIL7901:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7900_ALV7900:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7901_AIL7901;
		 pALocValue7900_ALV7900:=myrec;
		END;
	FUNCTION pAIdentifierDyadic7903_AID7903:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdentifierDyadic7903_AID7903:=myrec;
		END;
	FUNCTION pATypeid7907_AT7907:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@5d8897}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid7907_AT7907:=myrec;
		END;
	FUNCTION pATypeidType7906_ATT7906:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7907_AT7907;
		 pATypeidType7906_ATT7906:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7909_AIL7909:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7909_AIL7909:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7908_ALV7908:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7909_AIL7909;
		 pALocValue7908_ALV7908:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastpopRhs7905_ACR7905:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType7906_ATT7906;
		myrec^.arg2:=pALocValue7908_ALV7908;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs7905_ACR7905:=myrec;
		END;
	FUNCTION pARhsValue7904_ARV7904:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs7905_ACR7905;
		 pARhsValue7904_ARV7904:=myrec;
		END;
	FUNCTION pAFloatMonadic7911_AFM7911:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpFLOAT;
		 pAFloatMonadic7911_AFM7911:=myrec;
		END;
		(*! Match a *)
	FUNCTION pAIdLoc7915_AIL7915:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc7915_AIL7915:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval7914_AR7914:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7915_AIL7915;
		 pARefval7914_AR7914:=myrec;
		END;
	FUNCTION pADerefRhs7913_ADR7913:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval7914_AR7914;
		 pADerefRhs7913_ADR7913:=myrec;
		END;
	FUNCTION pARhsValue7912_ARV7912:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs7913_ADR7913;
		 pARhsValue7912_ARV7912:=myrec;
		END;
	FUNCTION pAMonadicValue7910_AMV7910:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue7912_ARV7912;
		myrec^.fn:=pAFloatMonadic7911_AFM7911;
		 pAMonadicValue7910_AMV7910:=myrec;
		END;
	FUNCTION pADyadicValue7902_ADV7902:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue7904_ARV7904;
		myrec^.arg2:=pAMonadicValue7910_AMV7910;
		myrec^.fn:=pAIdentifierDyadic7903_AID7903;
		 pADyadicValue7902_ADV7902:=myrec;
		END;
	FUNCTION pADyadicValue7898_ADV7898:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue7900_ALV7900;
		myrec^.arg2:=pADyadicValue7902_ADV7902;
		myrec^.fn:=pAPushDyadic7899_APD7899;
		 pADyadicValue7898_ADV7898:=myrec;
		END;
	FUNCTION pAValueMeaning7897_AVM7897:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue7898_ADV7898;
		 pAValueMeaning7897_AVM7897:=myrec;
		END;
	FUNCTION pAAssemblypattern7917_AA7917:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fi' );
		pappendp(list,1);
		pappends(list,'  dword  ' );
		pappendp(list,0);
		pAAssemblypattern7917_AA7917:=list;
		END;
	FUNCTION pAAssemblesto7916_AA7916:pprintlist;
	begin
		pAAssemblesto7916_AA7916:=pAAssemblypattern7917_AA7917;
		END;
	FUNCTION pASideeffects7922_AS7922:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7922_AS7922:=nil;
		 pASideeffects7922_AS7922:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7923_AUP7923:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7923_AUP7923:=nil;
		 pAUnconditionalPrecond7923_AUP7923:=myrec;
		END;
	FUNCTION FOPI_FOPI:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmaddrmode_;
		params^[2]:=patfputype_;
		params^[1]:=patfoperator_;
		paramcount:=4;
		meaning:=pAValueMeaning7897_AVM7897;
		matchedAssembler:=pAAssemblesto7916_AA7916;
		END;
		FOPI_FOPI:=myrec;
	END;
	FUNCTION pATypeid7926_AT7926:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7926_AT7926:=myrec;
		END;
	FUNCTION pATypeid7928_AT7928:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ foperator  ilcg.pattern@45ce28}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7928_AT7928:=myrec;
		END;
	FUNCTION pATypeid7930_AT7930:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fputype  ilcg.pattern@15e3abb}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7930_AT7930:=myrec;
		END;
	FUNCTION pAPushDyadic7933_APD7933:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic7933_APD7933:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7935_AIL7935:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7935_AIL7935:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7934_ALV7934:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7935_AIL7935;
		 pALocValue7934_ALV7934:=myrec;
		END;
	FUNCTION pAIdentifierDyadic7937_AID7937:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdentifierDyadic7937_AID7937:=myrec;
		END;
	FUNCTION pATypeid7941_AT7941:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@7895d8}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid7941_AT7941:=myrec;
		END;
	FUNCTION pATypeidType7940_ATT7940:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7941_AT7941;
		 pATypeidType7940_ATT7940:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7943_AIL7943:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7943_AIL7943:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7942_ALV7942:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7943_AIL7943;
		 pALocValue7942_ALV7942:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastpopRhs7939_ACR7939:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType7940_ATT7940;
		myrec^.arg2:=pALocValue7942_ALV7942;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs7939_ACR7939:=myrec;
		END;
	FUNCTION pARhsValue7938_ARV7938:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs7939_ACR7939;
		 pARhsValue7938_ARV7938:=myrec;
		END;
		(*! Match a *)
	FUNCTION pAIdLoc7947_AIL7947:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc7947_AIL7947:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval7946_AR7946:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7947_AIL7947;
		 pARefval7946_AR7946:=myrec;
		END;
	FUNCTION pADerefRhs7945_ADR7945:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval7946_AR7946;
		 pADerefRhs7945_ADR7945:=myrec;
		END;
	FUNCTION pARhsValue7944_ARV7944:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs7945_ADR7945;
		 pARhsValue7944_ARV7944:=myrec;
		END;
	FUNCTION pADyadicValue7936_ADV7936:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue7938_ARV7938;
		myrec^.arg2:=pARhsValue7944_ARV7944;
		myrec^.fn:=pAIdentifierDyadic7937_AID7937;
		 pADyadicValue7936_ADV7936:=myrec;
		END;
	FUNCTION pADyadicValue7932_ADV7932:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue7934_ALV7934;
		myrec^.arg2:=pADyadicValue7936_ADV7936;
		myrec^.fn:=pAPushDyadic7933_APD7933;
		 pADyadicValue7932_ADV7932:=myrec;
		END;
	FUNCTION pAValueMeaning7931_AVM7931:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue7932_ADV7932;
		 pAValueMeaning7931_AVM7931:=myrec;
		END;
	FUNCTION pAAssemblypattern7949_AA7949:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fi' );
		pappendp(list,1);
		pappends(list,'  dword  ' );
		pappendp(list,0);
		pAAssemblypattern7949_AA7949:=list;
		END;
	FUNCTION pAAssemblesto7948_AA7948:pprintlist;
	begin
		pAAssemblesto7948_AA7948:=pAAssemblypattern7949_AA7949;
		END;
	FUNCTION pASideeffects7954_AS7954:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7954_AS7954:=nil;
		 pASideeffects7954_AS7954:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7955_AUP7955:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7955_AUP7955:=nil;
		 pAUnconditionalPrecond7955_AUP7955:=myrec;
		END;
	FUNCTION FOPII_FOPII:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmaddrmode_;
		params^[2]:=patfputype_;
		params^[1]:=patfoperator_;
		paramcount:=4;
		meaning:=pAValueMeaning7931_AVM7931;
		matchedAssembler:=pAAssemblesto7948_AA7948;
		END;
		FOPII_FOPII:=myrec;
	END;
	FUNCTION pATypeid7958_AT7958:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ foperator  ilcg.pattern@45ce28}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7958_AT7958:=myrec;
		END;
	FUNCTION pATypeid7960_AT7960:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fputype  ilcg.pattern@15e3abb}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7960_AT7960:=myrec;
		END;
	FUNCTION pAPushDyadic7963_APD7963:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic7963_APD7963:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7965_AIL7965:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7965_AIL7965:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7964_ALV7964:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7965_AIL7965;
		 pALocValue7964_ALV7964:=myrec;
		END;
	FUNCTION pATypeid7969_AT7969:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@158d74b}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid7969_AT7969:=myrec;
		END;
	FUNCTION pATypeidType7968_ATT7968:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7969_AT7969;
		 pATypeidType7968_ATT7968:=myrec;
		END;
	FUNCTION pAIdentifierDyadic7971_AID7971:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic7971_AID7971:=myrec;
		END;
	FUNCTION pATypeid7975_AT7975:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@158d74b}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid7975_AT7975:=myrec;
		END;
	FUNCTION pATypeidType7974_ATT7974:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7975_AT7975;
		 pATypeidType7974_ATT7974:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7977_AIL7977:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7977_AIL7977:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7976_ALV7976:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7977_AIL7977;
		 pALocValue7976_ALV7976:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastpopRhs7973_ACR7973:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType7974_ATT7974;
		myrec^.arg2:=pALocValue7976_ALV7976;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs7973_ACR7973:=myrec;
		END;
	FUNCTION pARhsValue7972_ARV7972:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs7973_ACR7973;
		 pARhsValue7972_ARV7972:=myrec;
		END;
	FUNCTION pATypeid7981_AT7981:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@158d74b}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid7981_AT7981:=myrec;
		END;
	FUNCTION pATypeidType7980_ATT7980:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7981_AT7981;
		 pATypeidType7980_ATT7980:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc7983_AIL7983:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7983_AIL7983:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue7982_ALV7982:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7983_AIL7983;
		 pALocValue7982_ALV7982:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastpopRhs7979_ACR7979:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType7980_ATT7980;
		myrec^.arg2:=pALocValue7982_ALV7982;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs7979_ACR7979:=myrec;
		END;
	FUNCTION pARhsValue7978_ARV7978:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs7979_ACR7979;
		 pARhsValue7978_ARV7978:=myrec;
		END;
	FUNCTION pADyadicValue7970_ADV7970:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue7972_ARV7972;
		myrec^.arg2:=pARhsValue7978_ARV7978;
		myrec^.fn:=pAIdentifierDyadic7971_AID7971;
		 pADyadicValue7970_ADV7970:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs7967_ACR7967:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType7968_ATT7968;
		myrec^.arg2:=pADyadicValue7970_ADV7970;
		 pACastRhs7967_ACR7967:=myrec;
		END;
	FUNCTION pARhsValue7966_ARV7966:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7967_ACR7967;
		 pARhsValue7966_ARV7966:=myrec;
		END;
	FUNCTION pADyadicValue7962_ADV7962:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue7964_ALV7964;
		myrec^.arg2:=pARhsValue7966_ARV7966;
		myrec^.fn:=pAPushDyadic7963_APD7963;
		 pADyadicValue7962_ADV7962:=myrec;
		END;
	FUNCTION pAValueMeaning7961_AVM7961:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue7962_ADV7962;
		 pAValueMeaning7961_AVM7961:=myrec;
		END;
	FUNCTION pAAssemblypattern7985_AA7985:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'f' );
		pappendp(list,0);
		pappends(list,'p' );
		pappends(list,' st1' );
		pAAssemblypattern7985_AA7985:=list;
		END;
	FUNCTION pAAssemblesto7984_AA7984:pprintlist;
	begin
		pAAssemblesto7984_AA7984:=pAAssemblypattern7985_AA7985;
		END;
	FUNCTION pASideeffects7990_AS7990:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7990_AS7990:=nil;
		 pASideeffects7990_AS7990:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7991_AUP7991:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7991_AUP7991:=nil;
		 pAUnconditionalPrecond7991_AUP7991:=myrec;
		END;
	FUNCTION ReversePolishFOP_RPFOP:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patfputype_;
		params^[0]:=patfoperator_;
		paramcount:=3;
		meaning:=pAValueMeaning7961_AVM7961;
		matchedAssembler:=pAAssemblesto7984_AA7984;
		END;
		ReversePolishFOP_RPFOP:=myrec;
	END;
	FUNCTION pATypeid7994_AT7994:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7994_AT7994:=myrec;
		END;
	FUNCTION pAPushDyadic7999_APD7999:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic7999_APD7999:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc8001_AIL8001:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc8001_AIL8001:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue8000_ALV8000:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8001_AIL8001;
		 pALocValue8000_ALV8000:=myrec;
		END;
	FUNCTION pAMaxDyadic8003_AMD8003:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpmax;
		 pAMaxDyadic8003_AMD8003:=myrec;
		END;
	FUNCTION pATypeid8007_AT8007:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@192db17}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid8007_AT8007:=myrec;
		END;
	FUNCTION pATypeidType8006_ATT8006:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8007_AT8007;
		 pATypeidType8006_ATT8006:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc8009_AIL8009:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc8009_AIL8009:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue8008_ALV8008:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8009_AIL8009;
		 pALocValue8008_ALV8008:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastpopRhs8005_ACR8005:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType8006_ATT8006;
		myrec^.arg2:=pALocValue8008_ALV8008;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs8005_ACR8005:=myrec;
		END;
	FUNCTION pARhsValue8004_ARV8004:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs8005_ACR8005;
		 pARhsValue8004_ARV8004:=myrec;
		END;
	FUNCTION pATypeid8013_AT8013:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@192db17}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid8013_AT8013:=myrec;
		END;
	FUNCTION pATypeidType8012_ATT8012:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8013_AT8013;
		 pATypeidType8012_ATT8012:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc8015_AIL8015:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc8015_AIL8015:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue8014_ALV8014:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8015_AIL8015;
		 pALocValue8014_ALV8014:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastpopRhs8011_ACR8011:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType8012_ATT8012;
		myrec^.arg2:=pALocValue8014_ALV8014;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs8011_ACR8011:=myrec;
		END;
	FUNCTION pARhsValue8010_ARV8010:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs8011_ACR8011;
		 pARhsValue8010_ARV8010:=myrec;
		END;
	FUNCTION pADyadicValue8002_ADV8002:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue8004_ARV8004;
		myrec^.arg2:=pARhsValue8010_ARV8010;
		myrec^.fn:=pAMaxDyadic8003_AMD8003;
		 pADyadicValue8002_ADV8002:=myrec;
		END;
	FUNCTION pADyadicValue7998_ADV7998:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue8000_ALV8000;
		myrec^.arg2:=pADyadicValue8002_ADV8002;
		myrec^.fn:=pAPushDyadic7999_APD7999;
		 pADyadicValue7998_ADV7998:=myrec;
		END;
	FUNCTION pAValueMeaning7997_AVM7997:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue7998_ADV7998;
		 pAValueMeaning7997_AVM7997:=myrec;
		END;
	FUNCTION pAAssemblypattern8017_AA8017:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fcomi st0,st1\n fcmovb st0,st1 \nfstp st1' );
		pAAssemblypattern8017_AA8017:=list;
		END;
	FUNCTION pAAssemblesto8016_AA8016:pprintlist;
	begin
		pAAssemblesto8016_AA8016:=pAAssemblypattern8017_AA8017;
		END;
	FUNCTION pASideeffects8019_AS8019:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects8019_AS8019:=nil;
		 pASideeffects8019_AS8019:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond8020_AUP8020:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond8020_AUP8020:=nil;
		 pAUnconditionalPrecond8020_AUP8020:=myrec;
		END;
	FUNCTION FMAXp6_FMAX6:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmaddrmode_;
		params^[1]:=typeparam;
		paramcount:=3;
		meaning:=pAValueMeaning7997_AVM7997;
		matchedAssembler:=pAAssemblesto8016_AA8016;
		END;
		FMAXp6_FMAX6:=myrec;
	END;
	FUNCTION pATypeid8023_AT8023:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8023_AT8023:=myrec;
		END;
	FUNCTION pATypeid8025_AT8025:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8025_AT8025:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc8029_AIL8029:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8029_AIL8029:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8028_AR8028:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8029_AIL8029;
		 pARefval8028_AR8028:=myrec;
		END;
	FUNCTION pASigned8035_AS8035:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned8035_AS8035:=myrec;
		END;
	FUNCTION pASignedTformat8034_AST8034:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned8035_AS8035;
		 pASignedTformat8034_AST8034:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8033_ATP8033:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype8033_ATP8033:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType8032_APT8032:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType8032_APT8032:=myrec;
		END;
	FUNCTION pAMaxDyadic8037_AMD8037:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpmax;
		 pAMaxDyadic8037_AMD8037:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc8041_AIL8041:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8041_AIL8041:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8040_AR8040:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8041_AIL8041;
		 pARefval8040_AR8040:=myrec;
		END;
	FUNCTION pADerefRhs8039_ADR8039:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8040_AR8040;
		 pADerefRhs8039_ADR8039:=myrec;
		END;
	FUNCTION pARhsValue8038_ARV8038:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8039_ADR8039;
		 pARhsValue8038_ARV8038:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc8045_AIL8045:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc8045_AIL8045:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8044_AR8044:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8045_AIL8045;
		 pARefval8044_AR8044:=myrec;
		END;
	FUNCTION pADerefRhs8043_ADR8043:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8044_AR8044;
		 pADerefRhs8043_ADR8043:=myrec;
		END;
	FUNCTION pARhsValue8042_ARV8042:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8043_ADR8043;
		 pARhsValue8042_ARV8042:=myrec;
		END;
	FUNCTION pADyadicValue8036_ADV8036:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue8038_ARV8038;
		myrec^.arg2:=pARhsValue8042_ARV8042;
		myrec^.fn:=pAMaxDyadic8037_AMD8037;
		 pADyadicValue8036_ADV8036:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs8031_ACR8031:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType8032_APT8032;
		myrec^.arg2:=pADyadicValue8036_ADV8036;
		 pACastRhs8031_ACR8031:=myrec;
		END;
	FUNCTION pARhsValue8030_ARV8030:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8031_ACR8031;
		 pARhsValue8030_ARV8030:=myrec;
		END;
	FUNCTION pAAssign8027_AA8027:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue8030_ARV8030;
		myrec^.dest:=pARefval8028_AR8028;
		 pAAssign8027_AA8027:=myrec;
		END;
	FUNCTION pAAssignMeaning8026_AAM8026:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign8027_AA8027;
		 pAAssignMeaning8026_AAM8026:=myrec;
		END;
	FUNCTION pAAssemblypattern8047_AA8047:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cmp ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pappends(list,'\ncmovb ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern8047_AA8047:=list;
		END;
	FUNCTION pAAssemblesto8046_AA8046:pprintlist;
	begin
		pAAssemblesto8046_AA8046:=pAAssemblypattern8047_AA8047;
		END;
	FUNCTION pASideeffects8056_AS8056:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects8056_AS8056:=nil;
		 pASideeffects8056_AS8056:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond8057_AUP8057:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond8057_AUP8057:=nil;
		 pAUnconditionalPrecond8057_AUP8057:=myrec;
		END;
	FUNCTION MAXp6_MAX6:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patreg_;
		params^[0]:=patreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning8026_AAM8026;
		matchedAssembler:=pAAssemblesto8046_AA8046;
		END;
		MAXp6_MAX6:=myrec;
	END;
	FUNCTION pATypeid8060_AT8060:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8060_AT8060:=myrec;
		END;
	FUNCTION pATypeid8062_AT8062:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8062_AT8062:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc8066_AIL8066:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8066_AIL8066:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8065_AR8065:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8066_AIL8066;
		 pARefval8065_AR8065:=myrec;
		END;
	FUNCTION pASigned8072_AS8072:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned8072_AS8072:=myrec;
		END;
	FUNCTION pASignedTformat8071_AST8071:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned8072_AS8072;
		 pASignedTformat8071_AST8071:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8070_ATP8070:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype8070_ATP8070:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType8069_APT8069:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType8069_APT8069:=myrec;
		END;
	FUNCTION pAMinDyadic8074_AMD8074:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpmin;
		 pAMinDyadic8074_AMD8074:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc8078_AIL8078:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8078_AIL8078:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8077_AR8077:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8078_AIL8078;
		 pARefval8077_AR8077:=myrec;
		END;
	FUNCTION pADerefRhs8076_ADR8076:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8077_AR8077;
		 pADerefRhs8076_ADR8076:=myrec;
		END;
	FUNCTION pARhsValue8075_ARV8075:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8076_ADR8076;
		 pARhsValue8075_ARV8075:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc8082_AIL8082:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc8082_AIL8082:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8081_AR8081:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8082_AIL8082;
		 pARefval8081_AR8081:=myrec;
		END;
	FUNCTION pADerefRhs8080_ADR8080:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8081_AR8081;
		 pADerefRhs8080_ADR8080:=myrec;
		END;
	FUNCTION pARhsValue8079_ARV8079:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8080_ADR8080;
		 pARhsValue8079_ARV8079:=myrec;
		END;
	FUNCTION pADyadicValue8073_ADV8073:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue8075_ARV8075;
		myrec^.arg2:=pARhsValue8079_ARV8079;
		myrec^.fn:=pAMinDyadic8074_AMD8074;
		 pADyadicValue8073_ADV8073:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs8068_ACR8068:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType8069_APT8069;
		myrec^.arg2:=pADyadicValue8073_ADV8073;
		 pACastRhs8068_ACR8068:=myrec;
		END;
	FUNCTION pARhsValue8067_ARV8067:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8068_ACR8068;
		 pARhsValue8067_ARV8067:=myrec;
		END;
	FUNCTION pAAssign8064_AA8064:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue8067_ARV8067;
		myrec^.dest:=pARefval8065_AR8065;
		 pAAssign8064_AA8064:=myrec;
		END;
	FUNCTION pAAssignMeaning8063_AAM8063:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign8064_AA8064;
		 pAAssignMeaning8063_AAM8063:=myrec;
		END;
	FUNCTION pAAssemblypattern8084_AA8084:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cmp ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,0);
		pappends(list,'\ncmovb ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern8084_AA8084:=list;
		END;
	FUNCTION pAAssemblesto8083_AA8083:pprintlist;
	begin
		pAAssemblesto8083_AA8083:=pAAssemblypattern8084_AA8084;
		END;
	FUNCTION pASideeffects8093_AS8093:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects8093_AS8093:=nil;
		 pASideeffects8093_AS8093:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond8094_AUP8094:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond8094_AUP8094:=nil;
		 pAUnconditionalPrecond8094_AUP8094:=myrec;
		END;
	FUNCTION MINp6_MIN6:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patreg_;
		params^[0]:=patreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning8063_AAM8063;
		matchedAssembler:=pAAssemblesto8083_AA8083;
		END;
		MINp6_MIN6:=myrec;
	END;
	FUNCTION pATypeid8097_AT8097:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8097_AT8097:=myrec;
		END;
	FUNCTION pAPushDyadic8102_APD8102:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic8102_APD8102:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc8104_AIL8104:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc8104_AIL8104:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue8103_ALV8103:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8104_AIL8104;
		 pALocValue8103_ALV8103:=myrec;
		END;
	FUNCTION pAMinDyadic8106_AMD8106:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpmin;
		 pAMinDyadic8106_AMD8106:=myrec;
		END;
	FUNCTION pATypeid8110_AT8110:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@111cab5}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid8110_AT8110:=myrec;
		END;
	FUNCTION pATypeidType8109_ATT8109:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8110_AT8110;
		 pATypeidType8109_ATT8109:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc8112_AIL8112:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc8112_AIL8112:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue8111_ALV8111:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8112_AIL8112;
		 pALocValue8111_ALV8111:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastpopRhs8108_ACR8108:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType8109_ATT8109;
		myrec^.arg2:=pALocValue8111_ALV8111;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs8108_ACR8108:=myrec;
		END;
	FUNCTION pARhsValue8107_ARV8107:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs8108_ACR8108;
		 pARhsValue8107_ARV8107:=myrec;
		END;
	FUNCTION pATypeid8116_AT8116:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@111cab5}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid8116_AT8116:=myrec;
		END;
	FUNCTION pATypeidType8115_ATT8115:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8116_AT8116;
		 pATypeidType8115_ATT8115:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc8118_AIL8118:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc8118_AIL8118:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue8117_ALV8117:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8118_AIL8118;
		 pALocValue8117_ALV8117:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastpopRhs8114_ACR8114:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType8115_ATT8115;
		myrec^.arg2:=pALocValue8117_ALV8117;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs8114_ACR8114:=myrec;
		END;
	FUNCTION pARhsValue8113_ARV8113:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs8114_ACR8114;
		 pARhsValue8113_ARV8113:=myrec;
		END;
	FUNCTION pADyadicValue8105_ADV8105:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue8107_ARV8107;
		myrec^.arg2:=pARhsValue8113_ARV8113;
		myrec^.fn:=pAMinDyadic8106_AMD8106;
		 pADyadicValue8105_ADV8105:=myrec;
		END;
	FUNCTION pADyadicValue8101_ADV8101:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue8103_ALV8103;
		myrec^.arg2:=pADyadicValue8105_ADV8105;
		myrec^.fn:=pAPushDyadic8102_APD8102;
		 pADyadicValue8101_ADV8101:=myrec;
		END;
	FUNCTION pAValueMeaning8100_AVM8100:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue8101_ADV8101;
		 pAValueMeaning8100_AVM8100:=myrec;
		END;
	FUNCTION pAAssemblypattern8120_AA8120:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fcomi st0,st1\n fcmovnb st0,st1 \nfstp st1' );
		pAAssemblypattern8120_AA8120:=list;
		END;
	FUNCTION pAAssemblesto8119_AA8119:pprintlist;
	begin
		pAAssemblesto8119_AA8119:=pAAssemblypattern8120_AA8120;
		END;
	FUNCTION pASideeffects8122_AS8122:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects8122_AS8122:=nil;
		 pASideeffects8122_AS8122:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond8123_AUP8123:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond8123_AUP8123:=nil;
		 pAUnconditionalPrecond8123_AUP8123:=myrec;
		END;
	FUNCTION FMINp6_FMIN6:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmaddrmode_;
		params^[1]:=typeparam;
		paramcount:=3;
		meaning:=pAValueMeaning8100_AVM8100;
		matchedAssembler:=pAAssemblesto8119_AA8119;
		END;
		FMINp6_FMIN6:=myrec;
	END;
	FUNCTION pATypeid8126_AT8126:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8126_AT8126:=myrec;
		END;
	FUNCTION pATypeid8128_AT8128:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fputype  ilcg.pattern@15e3abb}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8128_AT8128:=myrec;
		END;
	FUNCTION pAPushDyadic8131_APD8131:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic8131_APD8131:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc8133_AIL8133:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc8133_AIL8133:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue8132_ALV8132:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8133_AIL8133;
		 pALocValue8132_ALV8132:=myrec;
		END;
	FUNCTION pATypeid8137_AT8137:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@737611}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid8137_AT8137:=myrec;
		END;
	FUNCTION pATypeidType8136_ATT8136:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8137_AT8137;
		 pATypeidType8136_ATT8136:=myrec;
		END;
	FUNCTION pAMaxDyadic8139_AMD8139:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpmax;
		 pAMaxDyadic8139_AMD8139:=myrec;
		END;
	FUNCTION pATypeid8143_AT8143:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@737611}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid8143_AT8143:=myrec;
		END;
	FUNCTION pATypeidType8142_ATT8142:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8143_AT8143;
		 pATypeidType8142_ATT8142:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc8145_AIL8145:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc8145_AIL8145:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue8144_ALV8144:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8145_AIL8145;
		 pALocValue8144_ALV8144:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastpopRhs8141_ACR8141:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType8142_ATT8142;
		myrec^.arg2:=pALocValue8144_ALV8144;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs8141_ACR8141:=myrec;
		END;
	FUNCTION pARhsValue8140_ARV8140:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs8141_ACR8141;
		 pARhsValue8140_ARV8140:=myrec;
		END;
	FUNCTION pATypeid8149_AT8149:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@737611}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid8149_AT8149:=myrec;
		END;
	FUNCTION pATypeidType8148_ATT8148:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8149_AT8149;
		 pATypeidType8148_ATT8148:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc8151_AIL8151:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc8151_AIL8151:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue8150_ALV8150:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8151_AIL8151;
		 pALocValue8150_ALV8150:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastpopRhs8147_ACR8147:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType8148_ATT8148;
		myrec^.arg2:=pALocValue8150_ALV8150;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs8147_ACR8147:=myrec;
		END;
	FUNCTION pARhsValue8146_ARV8146:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs8147_ACR8147;
		 pARhsValue8146_ARV8146:=myrec;
		END;
	FUNCTION pADyadicValue8138_ADV8138:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue8140_ARV8140;
		myrec^.arg2:=pARhsValue8146_ARV8146;
		myrec^.fn:=pAMaxDyadic8139_AMD8139;
		 pADyadicValue8138_ADV8138:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs8135_ACR8135:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType8136_ATT8136;
		myrec^.arg2:=pADyadicValue8138_ADV8138;
		 pACastRhs8135_ACR8135:=myrec;
		END;
	FUNCTION pARhsValue8134_ARV8134:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8135_ACR8135;
		 pARhsValue8134_ARV8134:=myrec;
		END;
	FUNCTION pADyadicValue8130_ADV8130:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue8132_ALV8132;
		myrec^.arg2:=pARhsValue8134_ARV8134;
		myrec^.fn:=pAPushDyadic8131_APD8131;
		 pADyadicValue8130_ADV8130:=myrec;
		END;
	FUNCTION pAValueMeaning8129_AVM8129:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue8130_ADV8130;
		 pAValueMeaning8129_AVM8129:=myrec;
		END;
	FUNCTION pAAssemblypattern8153_AA8153:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fcom st0,st1  \npush ax\n fstsw ax\n sahf\n pop ax\n jnb $+4 \n fxch \nfstp st1' );
		pAAssemblypattern8153_AA8153:=list;
		END;
	FUNCTION pAAssemblesto8152_AA8152:pprintlist;
	begin
		pAAssemblesto8152_AA8152:=pAAssemblypattern8153_AA8153;
		END;
	FUNCTION pASideeffects8155_AS8155:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects8155_AS8155:=nil;
		 pASideeffects8155_AS8155:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond8156_AUP8156:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond8156_AUP8156:=nil;
		 pAUnconditionalPrecond8156_AUP8156:=myrec;
		END;
	FUNCTION FMAX_FMAX:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmaddrmode_;
		params^[1]:=patfputype_;
		paramcount:=3;
		meaning:=pAValueMeaning8129_AVM8129;
		matchedAssembler:=pAAssemblesto8152_AA8152;
		END;
		FMAX_FMAX:=myrec;
	END;
	FUNCTION pATypeid8159_AT8159:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8159_AT8159:=myrec;
		END;
	FUNCTION pATypeid8161_AT8161:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fputype  ilcg.pattern@15e3abb}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8161_AT8161:=myrec;
		END;
	FUNCTION pAPushDyadic8164_APD8164:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic8164_APD8164:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc8166_AIL8166:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc8166_AIL8166:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue8165_ALV8165:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8166_AIL8166;
		 pALocValue8165_ALV8165:=myrec;
		END;
	FUNCTION pATypeid8170_AT8170:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@a10ea2}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid8170_AT8170:=myrec;
		END;
	FUNCTION pATypeidType8169_ATT8169:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8170_AT8170;
		 pATypeidType8169_ATT8169:=myrec;
		END;
	FUNCTION pAMinDyadic8172_AMD8172:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpmin;
		 pAMinDyadic8172_AMD8172:=myrec;
		END;
	FUNCTION pATypeid8176_AT8176:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@a10ea2}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid8176_AT8176:=myrec;
		END;
	FUNCTION pATypeidType8175_ATT8175:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8176_AT8176;
		 pATypeidType8175_ATT8175:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc8178_AIL8178:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc8178_AIL8178:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue8177_ALV8177:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8178_AIL8178;
		 pALocValue8177_ALV8177:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastpopRhs8174_ACR8174:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType8175_ATT8175;
		myrec^.arg2:=pALocValue8177_ALV8177;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs8174_ACR8174:=myrec;
		END;
	FUNCTION pARhsValue8173_ARV8173:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs8174_ACR8174;
		 pARhsValue8173_ARV8173:=myrec;
		END;
	FUNCTION pATypeid8182_AT8182:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@a10ea2}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid8182_AT8182:=myrec;
		END;
	FUNCTION pATypeidType8181_ATT8181:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8182_AT8182;
		 pATypeidType8181_ATT8181:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc8184_AIL8184:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc8184_AIL8184:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue8183_ALV8183:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8184_AIL8184;
		 pALocValue8183_ALV8183:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastpopRhs8180_ACR8180:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType8181_ATT8181;
		myrec^.arg2:=pALocValue8183_ALV8183;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs8180_ACR8180:=myrec;
		END;
	FUNCTION pARhsValue8179_ARV8179:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs8180_ACR8180;
		 pARhsValue8179_ARV8179:=myrec;
		END;
	FUNCTION pADyadicValue8171_ADV8171:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue8173_ARV8173;
		myrec^.arg2:=pARhsValue8179_ARV8179;
		myrec^.fn:=pAMinDyadic8172_AMD8172;
		 pADyadicValue8171_ADV8171:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs8168_ACR8168:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType8169_ATT8169;
		myrec^.arg2:=pADyadicValue8171_ADV8171;
		 pACastRhs8168_ACR8168:=myrec;
		END;
	FUNCTION pARhsValue8167_ARV8167:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8168_ACR8168;
		 pARhsValue8167_ARV8167:=myrec;
		END;
	FUNCTION pADyadicValue8163_ADV8163:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue8165_ALV8165;
		myrec^.arg2:=pARhsValue8167_ARV8167;
		myrec^.fn:=pAPushDyadic8164_APD8164;
		 pADyadicValue8163_ADV8163:=myrec;
		END;
	FUNCTION pAValueMeaning8162_AVM8162:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue8163_ADV8163;
		 pAValueMeaning8162_AVM8162:=myrec;
		END;
	FUNCTION pAAssemblypattern8186_AA8186:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fcom st0,st1  \n push ax\n fstsw ax\n sahf\n pop ax\n jb $+4 \n fxch \nfstp st1' );
		pAAssemblypattern8186_AA8186:=list;
		END;
	FUNCTION pAAssemblesto8185_AA8185:pprintlist;
	begin
		pAAssemblesto8185_AA8185:=pAAssemblypattern8186_AA8186;
		END;
	FUNCTION pASideeffects8188_AS8188:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects8188_AS8188:=nil;
		 pASideeffects8188_AS8188:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond8189_AUP8189:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond8189_AUP8189:=nil;
		 pAUnconditionalPrecond8189_AUP8189:=myrec;
		END;
	FUNCTION FMIN_FMIN:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmaddrmode_;
		params^[1]:=patfputype_;
		paramcount:=3;
		meaning:=pAValueMeaning8162_AVM8162;
		matchedAssembler:=pAAssemblesto8185_AA8185;
		END;
		FMIN_FMIN:=myrec;
	END;
	FUNCTION pATypeid8192_AT8192:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fputype  ilcg.pattern@15e3abb}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8192_AT8192:=myrec;
		END;
	FUNCTION pAPushDyadic8195_APD8195:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic8195_APD8195:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc8197_AIL8197:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc8197_AIL8197:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue8196_ALV8196:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8197_AIL8197;
		 pALocValue8196_ALV8196:=myrec;
		END;
	FUNCTION pATypeid8201_AT8201:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@135fd95}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid8201_AT8201:=myrec;
		END;
	FUNCTION pATypeidType8200_ATT8200:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8201_AT8201;
		 pATypeidType8200_ATT8200:=myrec;
		END;
	FUNCTION pARemainderDyadic8203_ARD8203:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpremainder;
		 pARemainderDyadic8203_ARD8203:=myrec;
		END;
	FUNCTION pATypeid8207_AT8207:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@135fd95}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid8207_AT8207:=myrec;
		END;
	FUNCTION pATypeidType8206_ATT8206:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8207_AT8207;
		 pATypeidType8206_ATT8206:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc8209_AIL8209:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc8209_AIL8209:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue8208_ALV8208:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8209_AIL8209;
		 pALocValue8208_ALV8208:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastpopRhs8205_ACR8205:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType8206_ATT8206;
		myrec^.arg2:=pALocValue8208_ALV8208;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs8205_ACR8205:=myrec;
		END;
	FUNCTION pARhsValue8204_ARV8204:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs8205_ACR8205;
		 pARhsValue8204_ARV8204:=myrec;
		END;
	FUNCTION pATypeid8213_AT8213:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@135fd95}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid8213_AT8213:=myrec;
		END;
	FUNCTION pATypeidType8212_ATT8212:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8213_AT8213;
		 pATypeidType8212_ATT8212:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc8215_AIL8215:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc8215_AIL8215:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue8214_ALV8214:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8215_AIL8215;
		 pALocValue8214_ALV8214:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastpopRhs8211_ACR8211:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType8212_ATT8212;
		myrec^.arg2:=pALocValue8214_ALV8214;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs8211_ACR8211:=myrec;
		END;
	FUNCTION pARhsValue8210_ARV8210:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs8211_ACR8211;
		 pARhsValue8210_ARV8210:=myrec;
		END;
	FUNCTION pADyadicValue8202_ADV8202:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue8204_ARV8204;
		myrec^.arg2:=pARhsValue8210_ARV8210;
		myrec^.fn:=pARemainderDyadic8203_ARD8203;
		 pADyadicValue8202_ADV8202:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs8199_ACR8199:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType8200_ATT8200;
		myrec^.arg2:=pADyadicValue8202_ADV8202;
		 pACastRhs8199_ACR8199:=myrec;
		END;
	FUNCTION pARhsValue8198_ARV8198:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8199_ACR8199;
		 pARhsValue8198_ARV8198:=myrec;
		END;
	FUNCTION pADyadicValue8194_ADV8194:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue8196_ALV8196;
		myrec^.arg2:=pARhsValue8198_ARV8198;
		myrec^.fn:=pAPushDyadic8195_APD8195;
		 pADyadicValue8194_ADV8194:=myrec;
		END;
	FUNCTION pAValueMeaning8193_AVM8193:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue8194_ADV8194;
		 pAValueMeaning8193_AVM8193:=myrec;
		END;
	FUNCTION pAAssemblypattern8217_AA8217:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fprem1' );
		pAAssemblypattern8217_AA8217:=list;
		END;
	FUNCTION pAAssemblesto8216_AA8216:pprintlist;
	begin
		pAAssemblesto8216_AA8216:=pAAssemblypattern8217_AA8217;
		END;
	FUNCTION pASideeffects8219_AS8219:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects8219_AS8219:=nil;
		 pASideeffects8219_AS8219:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond8220_AUP8220:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond8220_AUP8220:=nil;
		 pAUnconditionalPrecond8220_AUP8220:=myrec;
		END;
	FUNCTION FPREM_FPREM:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patfputype_;
		paramcount:=2;
		meaning:=pAValueMeaning8193_AVM8193;
		matchedAssembler:=pAAssemblesto8216_AA8216;
		END;
		FPREM_FPREM:=myrec;
	END;
	FUNCTION pATypeid8223_AT8223:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@2a2ae9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8223_AT8223:=myrec;
		END;
	FUNCTION pAPushDyadic8226_APD8226:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic8226_APD8226:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc8228_AIL8228:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc8228_AIL8228:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue8227_ALV8227:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8228_AIL8228;
		 pALocValue8227_ALV8227:=myrec;
		END;
	FUNCTION pATypeid8232_AT8232:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@8044a2}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid8232_AT8232:=myrec;
		END;
	FUNCTION pATypeidType8231_ATT8231:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8232_AT8232;
		 pATypeidType8231_ATT8231:=myrec;
		END;
	FUNCTION pARemainderDyadic8234_ARD8234:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpremainder;
		 pARemainderDyadic8234_ARD8234:=myrec;
		END;
	FUNCTION pATypeid8238_AT8238:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@8044a2}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid8238_AT8238:=myrec;
		END;
	FUNCTION pATypeidType8237_ATT8237:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8238_AT8238;
		 pATypeidType8237_ATT8237:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc8240_AIL8240:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc8240_AIL8240:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue8239_ALV8239:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8240_AIL8240;
		 pALocValue8239_ALV8239:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastpopRhs8236_ACR8236:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType8237_ATT8237;
		myrec^.arg2:=pALocValue8239_ALV8239;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs8236_ACR8236:=myrec;
		END;
	FUNCTION pARhsValue8235_ARV8235:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs8236_ACR8236;
		 pARhsValue8235_ARV8235:=myrec;
		END;
	FUNCTION pATypeid8244_AT8244:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@8044a2}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid8244_AT8244:=myrec;
		END;
	FUNCTION pATypeidType8243_ATT8243:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8244_AT8244;
		 pATypeidType8243_ATT8243:=myrec;
		END;
		(*! Match ST *)
	FUNCTION pAIdLoc8246_AIL8246:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc8246_AIL8246:=myrec;
		END;
		(*ST *)
	FUNCTION pALocValue8245_ALV8245:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8246_AIL8246;
		 pALocValue8245_ALV8245:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastpopRhs8242_ACR8242:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType8243_ATT8243;
		myrec^.arg2:=pALocValue8245_ALV8245;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs8242_ACR8242:=myrec;
		END;
	FUNCTION pARhsValue8241_ARV8241:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs8242_ACR8242;
		 pARhsValue8241_ARV8241:=myrec;
		END;
	FUNCTION pADyadicValue8233_ADV8233:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue8235_ARV8235;
		myrec^.arg2:=pARhsValue8241_ARV8241;
		myrec^.fn:=pARemainderDyadic8234_ARD8234;
		 pADyadicValue8233_ADV8233:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs8230_ACR8230:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType8231_ATT8231;
		myrec^.arg2:=pADyadicValue8233_ADV8233;
		 pACastRhs8230_ACR8230:=myrec;
		END;
	FUNCTION pARhsValue8229_ARV8229:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8230_ACR8230;
		 pARhsValue8229_ARV8229:=myrec;
		END;
	FUNCTION pADyadicValue8225_ADV8225:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue8227_ALV8227;
		myrec^.arg2:=pARhsValue8229_ARV8229;
		myrec^.fn:=pAPushDyadic8226_APD8226;
		 pADyadicValue8225_ADV8225:=myrec;
		END;
	FUNCTION pAValueMeaning8224_AVM8224:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue8225_ADV8225;
		 pAValueMeaning8224_AVM8224:=myrec;
		END;
	FUNCTION pAAssemblypattern8248_AA8248:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fprem1' );
		pAAssemblypattern8248_AA8248:=list;
		END;
	FUNCTION pAAssemblesto8247_AA8247:pprintlist;
	begin
		pAAssemblesto8247_AA8247:=pAAssemblypattern8248_AA8248;
		END;
	FUNCTION pASideeffects8250_AS8250:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects8250_AS8250:=nil;
		 pASideeffects8250_AS8250:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond8251_AUP8251:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond8251_AUP8251:=nil;
		 pAUnconditionalPrecond8251_AUP8251:=myrec;
		END;
	FUNCTION FPREMu_FPREM:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patint_;
		paramcount:=2;
		meaning:=pAValueMeaning8224_AVM8224;
		matchedAssembler:=pAAssemblesto8247_AA8247;
		END;
		FPREMu_FPREM:=myrec;
	END;
	FUNCTION pAUnreservedReservation8255_AUR8255:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation8255_AUR8255:=nil;
		 pAUnreservedReservation8255_AUR8255:=myrec;
		END;
	FUNCTION pANonAggregate8256_ANA8256:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8256_ANA8256:=nil;
		 pANonAggregate8256_ANA8256:=myrec;
		END;
	FUNCTION pADoublewordFormat8259_ADF8259:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdword;
		 pADoublewordFormat8259_ADF8259:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype8258_AFP8258:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAFormatPredeclaredtype8258_AFP8258:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType8257_APT8257:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAPredeclaredtypeType8257_APT8257:=myrec;
		END;
	FUNCTION pAUnreservedReservation8263_AUR8263:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation8263_AUR8263:=nil;
		 pAUnreservedReservation8263_AUR8263:=myrec;
		END;
	FUNCTION pANonAggregate8264_ANA8264:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8264_ANA8264:=nil;
		 pANonAggregate8264_ANA8264:=myrec;
		END;
	FUNCTION pADoublewordFormat8267_ADF8267:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdword;
		 pADoublewordFormat8267_ADF8267:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype8266_AFP8266:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAFormatPredeclaredtype8266_AFP8266:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType8265_APT8265:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAPredeclaredtypeType8265_APT8265:=myrec;
		END;
	FUNCTION pAUnreservedReservation8271_AUR8271:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation8271_AUR8271:=nil;
		 pAUnreservedReservation8271_AUR8271:=myrec;
		END;
	FUNCTION pANonAggregate8272_ANA8272:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8272_ANA8272:=nil;
		 pANonAggregate8272_ANA8272:=myrec;
		END;
	FUNCTION pADoublewordFormat8275_ADF8275:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdword;
		 pADoublewordFormat8275_ADF8275:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype8274_AFP8274:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAFormatPredeclaredtype8274_AFP8274:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType8273_APT8273:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAPredeclaredtypeType8273_APT8273:=myrec;
		END;
	FUNCTION pAUnreservedReservation8279_AUR8279:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation8279_AUR8279:=nil;
		 pAUnreservedReservation8279_AUR8279:=myrec;
		END;
	FUNCTION pANonAggregate8280_ANA8280:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8280_ANA8280:=nil;
		 pANonAggregate8280_ANA8280:=myrec;
		END;
	FUNCTION pADoublewordFormat8283_ADF8283:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdword;
		 pADoublewordFormat8283_ADF8283:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype8282_AFP8282:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAFormatPredeclaredtype8282_AFP8282:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType8281_APT8281:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAPredeclaredtypeType8281_APT8281:=myrec;
		END;
	FUNCTION pAUnreservedReservation8287_AUR8287:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation8287_AUR8287:=nil;
		 pAUnreservedReservation8287_AUR8287:=myrec;
		END;
	FUNCTION pANonAggregate8288_ANA8288:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8288_ANA8288:=nil;
		 pANonAggregate8288_ANA8288:=myrec;
		END;
	FUNCTION pADoublewordFormat8291_ADF8291:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdword;
		 pADoublewordFormat8291_ADF8291:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype8290_AFP8290:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAFormatPredeclaredtype8290_AFP8290:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType8289_APT8289:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAPredeclaredtypeType8289_APT8289:=myrec;
		END;
	FUNCTION pANonAggregate8295_ANA8295:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8295_ANA8295:=nil;
		 pANonAggregate8295_ANA8295:=myrec;
		END;
	FUNCTION pAUint64Unsigned8299_AU64U8299:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint64;
		 pAUint64Unsigned8299_AU64U8299:=myrec;
		END;
	FUNCTION pAUnsignedTformat8298_AUT8298:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint64Unsigned8299_AU64U8299;
		 pAUnsignedTformat8298_AUT8298:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8297_ATP8297:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint64 ;
		 pATformatPredeclaredtype8297_ATP8297:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType8296_APT8296:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint64 ;
		 pAPredeclaredtypeType8296_APT8296:=myrec;
		END;
	FUNCTION pANonAggregate8303_ANA8303:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8303_ANA8303:=nil;
		 pANonAggregate8303_ANA8303:=myrec;
		END;
	FUNCTION pAInt64Signed8307_AI64S8307:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64;
		 pAInt64Signed8307_AI64S8307:=myrec;
		END;
	FUNCTION pASignedTformat8306_AST8306:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt64Signed8307_AI64S8307;
		 pASignedTformat8306_AST8306:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8305_ATP8305:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64 ;
		 pATformatPredeclaredtype8305_ATP8305:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType8304_APT8304:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64 ;
		 pAPredeclaredtypeType8304_APT8304:=myrec;
		END;
	FUNCTION pAReservedReservation8311_ARR8311:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAReservedReservation8311_ARR8311:=nil;
		 pAReservedReservation8311_ARR8311:=myrec;
		END;
	FUNCTION pANonAggregate8312_ANA8312:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8312_ANA8312:=nil;
		 pANonAggregate8312_ANA8312:=myrec;
		END;
	FUNCTION pADoublewordFormat8315_ADF8315:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdword;
		 pADoublewordFormat8315_ADF8315:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype8314_AFP8314:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAFormatPredeclaredtype8314_AFP8314:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType8313_APT8313:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAPredeclaredtypeType8313_APT8313:=myrec;
		END;
	FUNCTION pAReservedReservation8319_ARR8319:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAReservedReservation8319_ARR8319:=nil;
		 pAReservedReservation8319_ARR8319:=myrec;
		END;
	FUNCTION pANonAggregate8320_ANA8320:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8320_ANA8320:=nil;
		 pANonAggregate8320_ANA8320:=myrec;
		END;
	FUNCTION pADoublewordFormat8323_ADF8323:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdword;
		 pADoublewordFormat8323_ADF8323:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype8322_AFP8322:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAFormatPredeclaredtype8322_AFP8322:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType8321_APT8321:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAPredeclaredtypeType8321_APT8321:=myrec;
		END;
	FUNCTION pAReservedReservation8327_ARR8327:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAReservedReservation8327_ARR8327:=nil;
		 pAReservedReservation8327_ARR8327:=myrec;
		END;
	FUNCTION pANonAggregate8328_ANA8328:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8328_ANA8328:=nil;
		 pANonAggregate8328_ANA8328:=myrec;
		END;
	FUNCTION pADoublewordFormat8331_ADF8331:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdword;
		 pADoublewordFormat8331_ADF8331:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype8330_AFP8330:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAFormatPredeclaredtype8330_AFP8330:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType8329_APT8329:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAPredeclaredtypeType8329_APT8329:=myrec;
		END;
	FUNCTION pANonAggregate8335_ANA8335:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8335_ANA8335:=nil;
		 pANonAggregate8335_ANA8335:=myrec;
		END;
	FUNCTION pAWordFormat8338_AWF8338:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword;
		 pAWordFormat8338_AWF8338:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype8337_AFP8337:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAFormatPredeclaredtype8337_AFP8337:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType8336_APT8336:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAPredeclaredtypeType8336_APT8336:=myrec;
		END;
	FUNCTION pANonAggregate8342_ANA8342:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8342_ANA8342:=nil;
		 pANonAggregate8342_ANA8342:=myrec;
		END;
	FUNCTION pAWordFormat8345_AWF8345:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword;
		 pAWordFormat8345_AWF8345:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype8344_AFP8344:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAFormatPredeclaredtype8344_AFP8344:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType8343_APT8343:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAPredeclaredtypeType8343_APT8343:=myrec;
		END;
	FUNCTION pANonAggregate8349_ANA8349:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8349_ANA8349:=nil;
		 pANonAggregate8349_ANA8349:=myrec;
		END;
	FUNCTION pAWordFormat8352_AWF8352:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword;
		 pAWordFormat8352_AWF8352:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype8351_AFP8351:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAFormatPredeclaredtype8351_AFP8351:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType8350_APT8350:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAPredeclaredtypeType8350_APT8350:=myrec;
		END;
	FUNCTION pANonAggregate8356_ANA8356:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8356_ANA8356:=nil;
		 pANonAggregate8356_ANA8356:=myrec;
		END;
	FUNCTION pAWordFormat8359_AWF8359:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword;
		 pAWordFormat8359_AWF8359:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype8358_AFP8358:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAFormatPredeclaredtype8358_AFP8358:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType8357_APT8357:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAPredeclaredtypeType8357_APT8357:=myrec;
		END;
	FUNCTION pANonAggregate8363_ANA8363:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8363_ANA8363:=nil;
		 pANonAggregate8363_ANA8363:=myrec;
		END;
	FUNCTION pAWordFormat8366_AWF8366:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword;
		 pAWordFormat8366_AWF8366:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype8365_AFP8365:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAFormatPredeclaredtype8365_AFP8365:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType8364_APT8364:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAPredeclaredtypeType8364_APT8364:=myrec;
		END;
	FUNCTION pANonAggregate8370_ANA8370:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8370_ANA8370:=nil;
		 pANonAggregate8370_ANA8370:=myrec;
		END;
	FUNCTION pAWordFormat8373_AWF8373:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword;
		 pAWordFormat8373_AWF8373:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype8372_AFP8372:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAFormatPredeclaredtype8372_AFP8372:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType8371_APT8371:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAPredeclaredtypeType8371_APT8371:=myrec;
		END;
	FUNCTION pANonAggregate8377_ANA8377:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8377_ANA8377:=nil;
		 pANonAggregate8377_ANA8377:=myrec;
		END;
	FUNCTION pAWordFormat8380_AWF8380:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword;
		 pAWordFormat8380_AWF8380:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype8379_AFP8379:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAFormatPredeclaredtype8379_AFP8379:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType8378_APT8378:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAPredeclaredtypeType8378_APT8378:=myrec;
		END;
	FUNCTION pANonAggregate8384_ANA8384:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8384_ANA8384:=nil;
		 pANonAggregate8384_ANA8384:=myrec;
		END;
	FUNCTION pAWordFormat8387_AWF8387:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword;
		 pAWordFormat8387_AWF8387:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype8386_AFP8386:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAFormatPredeclaredtype8386_AFP8386:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType8385_APT8385:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAPredeclaredtypeType8385_APT8385:=myrec;
		END;
	FUNCTION pANonAggregate8391_ANA8391:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8391_ANA8391:=nil;
		 pANonAggregate8391_ANA8391:=myrec;
		END;
	FUNCTION pAInt16Signed8396_AI16S8396:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed8396_AI16S8396:=myrec;
		END;
	FUNCTION pASignedTformat8395_AST8395:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed8396_AI16S8396;
		 pASignedTformat8395_AST8395:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8394_ATP8394:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype8394_ATP8394:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8393_APT8393:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8393_APT8393:=nil;
		 pAPredeclaredtypeTypeprim8393_APT8393:=myrec;
		END;
	FUNCTION pAOptionalsign8399_AO8399:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8399_AO8399:=nil;
		 pAOptionalsign8399_AO8399:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8398_AIN8398:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber8398_AIN8398:=myrec;
		END;
	FUNCTION pAArray8397_AA8397:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8397_AA8397:=nil;
		 pAArray8397_AA8397:=myrec;
		END;
	FUNCTION pAArrayType8392_AAT8392:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType8392_AAT8392:=myrec;
		END;
	FUNCTION pANonAggregate8403_ANA8403:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8403_ANA8403:=nil;
		 pANonAggregate8403_ANA8403:=myrec;
		END;
	FUNCTION pAInt16Signed8408_AI16S8408:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed8408_AI16S8408:=myrec;
		END;
	FUNCTION pASignedTformat8407_AST8407:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed8408_AI16S8408;
		 pASignedTformat8407_AST8407:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8406_ATP8406:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype8406_ATP8406:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8405_APT8405:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8405_APT8405:=nil;
		 pAPredeclaredtypeTypeprim8405_APT8405:=myrec;
		END;
	FUNCTION pAOptionalsign8411_AO8411:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8411_AO8411:=nil;
		 pAOptionalsign8411_AO8411:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8410_AIN8410:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber8410_AIN8410:=myrec;
		END;
	FUNCTION pAArray8409_AA8409:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8409_AA8409:=nil;
		 pAArray8409_AA8409:=myrec;
		END;
	FUNCTION pAArrayType8404_AAT8404:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType8404_AAT8404:=myrec;
		END;
	FUNCTION pANonAggregate8415_ANA8415:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8415_ANA8415:=nil;
		 pANonAggregate8415_ANA8415:=myrec;
		END;
	FUNCTION pAInt16Signed8420_AI16S8420:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed8420_AI16S8420:=myrec;
		END;
	FUNCTION pASignedTformat8419_AST8419:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed8420_AI16S8420;
		 pASignedTformat8419_AST8419:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8418_ATP8418:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype8418_ATP8418:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8417_APT8417:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8417_APT8417:=nil;
		 pAPredeclaredtypeTypeprim8417_APT8417:=myrec;
		END;
	FUNCTION pAOptionalsign8423_AO8423:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8423_AO8423:=nil;
		 pAOptionalsign8423_AO8423:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8422_AIN8422:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber8422_AIN8422:=myrec;
		END;
	FUNCTION pAArray8421_AA8421:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8421_AA8421:=nil;
		 pAArray8421_AA8421:=myrec;
		END;
	FUNCTION pAArrayType8416_AAT8416:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType8416_AAT8416:=myrec;
		END;
	FUNCTION pANonAggregate8427_ANA8427:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8427_ANA8427:=nil;
		 pANonAggregate8427_ANA8427:=myrec;
		END;
	FUNCTION pAInt16Signed8432_AI16S8432:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed8432_AI16S8432:=myrec;
		END;
	FUNCTION pASignedTformat8431_AST8431:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed8432_AI16S8432;
		 pASignedTformat8431_AST8431:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8430_ATP8430:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype8430_ATP8430:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8429_APT8429:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8429_APT8429:=nil;
		 pAPredeclaredtypeTypeprim8429_APT8429:=myrec;
		END;
	FUNCTION pAOptionalsign8435_AO8435:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8435_AO8435:=nil;
		 pAOptionalsign8435_AO8435:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8434_AIN8434:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber8434_AIN8434:=myrec;
		END;
	FUNCTION pAArray8433_AA8433:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8433_AA8433:=nil;
		 pAArray8433_AA8433:=myrec;
		END;
	FUNCTION pAArrayType8428_AAT8428:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType8428_AAT8428:=myrec;
		END;
	FUNCTION pANonAggregate8439_ANA8439:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8439_ANA8439:=nil;
		 pANonAggregate8439_ANA8439:=myrec;
		END;
	FUNCTION pAInt16Signed8444_AI16S8444:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed8444_AI16S8444:=myrec;
		END;
	FUNCTION pASignedTformat8443_AST8443:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed8444_AI16S8444;
		 pASignedTformat8443_AST8443:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8442_ATP8442:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype8442_ATP8442:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8441_APT8441:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8441_APT8441:=nil;
		 pAPredeclaredtypeTypeprim8441_APT8441:=myrec;
		END;
	FUNCTION pAOptionalsign8447_AO8447:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8447_AO8447:=nil;
		 pAOptionalsign8447_AO8447:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8446_AIN8446:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber8446_AIN8446:=myrec;
		END;
	FUNCTION pAArray8445_AA8445:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8445_AA8445:=nil;
		 pAArray8445_AA8445:=myrec;
		END;
	FUNCTION pAArrayType8440_AAT8440:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType8440_AAT8440:=myrec;
		END;
	FUNCTION pANonAggregate8451_ANA8451:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8451_ANA8451:=nil;
		 pANonAggregate8451_ANA8451:=myrec;
		END;
	FUNCTION pAInt16Signed8456_AI16S8456:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed8456_AI16S8456:=myrec;
		END;
	FUNCTION pASignedTformat8455_AST8455:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed8456_AI16S8456;
		 pASignedTformat8455_AST8455:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8454_ATP8454:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype8454_ATP8454:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8453_APT8453:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8453_APT8453:=nil;
		 pAPredeclaredtypeTypeprim8453_APT8453:=myrec;
		END;
	FUNCTION pAOptionalsign8459_AO8459:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8459_AO8459:=nil;
		 pAOptionalsign8459_AO8459:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8458_AIN8458:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber8458_AIN8458:=myrec;
		END;
	FUNCTION pAArray8457_AA8457:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8457_AA8457:=nil;
		 pAArray8457_AA8457:=myrec;
		END;
	FUNCTION pAArrayType8452_AAT8452:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType8452_AAT8452:=myrec;
		END;
	FUNCTION pANonAggregate8463_ANA8463:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8463_ANA8463:=nil;
		 pANonAggregate8463_ANA8463:=myrec;
		END;
	FUNCTION pASigned8468_AS8468:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned8468_AS8468:=myrec;
		END;
	FUNCTION pASignedTformat8467_AST8467:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned8468_AS8468;
		 pASignedTformat8467_AST8467:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8466_ATP8466:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype8466_ATP8466:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8465_APT8465:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8465_APT8465:=nil;
		 pAPredeclaredtypeTypeprim8465_APT8465:=myrec;
		END;
	FUNCTION pAOptionalsign8471_AO8471:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8471_AO8471:=nil;
		 pAOptionalsign8471_AO8471:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8470_AIN8470:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber8470_AIN8470:=myrec;
		END;
	FUNCTION pAArray8469_AA8469:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8469_AA8469:=nil;
		 pAArray8469_AA8469:=myrec;
		END;
	FUNCTION pAArrayType8464_AAT8464:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,2 );
		 pAArrayType8464_AAT8464:=myrec;
		END;
	FUNCTION pANonAggregate8475_ANA8475:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8475_ANA8475:=nil;
		 pANonAggregate8475_ANA8475:=myrec;
		END;
	FUNCTION pASigned8480_AS8480:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned8480_AS8480:=myrec;
		END;
	FUNCTION pASignedTformat8479_AST8479:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned8480_AS8480;
		 pASignedTformat8479_AST8479:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8478_ATP8478:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype8478_ATP8478:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8477_APT8477:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8477_APT8477:=nil;
		 pAPredeclaredtypeTypeprim8477_APT8477:=myrec;
		END;
	FUNCTION pAOptionalsign8483_AO8483:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8483_AO8483:=nil;
		 pAOptionalsign8483_AO8483:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8482_AIN8482:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber8482_AIN8482:=myrec;
		END;
	FUNCTION pAArray8481_AA8481:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8481_AA8481:=nil;
		 pAArray8481_AA8481:=myrec;
		END;
	FUNCTION pAArrayType8476_AAT8476:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,2 );
		 pAArrayType8476_AAT8476:=myrec;
		END;
	FUNCTION pANonAggregate8487_ANA8487:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8487_ANA8487:=nil;
		 pANonAggregate8487_ANA8487:=myrec;
		END;
	FUNCTION pASigned8492_AS8492:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned8492_AS8492:=myrec;
		END;
	FUNCTION pASignedTformat8491_AST8491:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned8492_AS8492;
		 pASignedTformat8491_AST8491:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8490_ATP8490:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype8490_ATP8490:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8489_APT8489:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8489_APT8489:=nil;
		 pAPredeclaredtypeTypeprim8489_APT8489:=myrec;
		END;
	FUNCTION pAOptionalsign8495_AO8495:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8495_AO8495:=nil;
		 pAOptionalsign8495_AO8495:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8494_AIN8494:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber8494_AIN8494:=myrec;
		END;
	FUNCTION pAArray8493_AA8493:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8493_AA8493:=nil;
		 pAArray8493_AA8493:=myrec;
		END;
	FUNCTION pAArrayType8488_AAT8488:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,2 );
		 pAArrayType8488_AAT8488:=myrec;
		END;
	FUNCTION pANonAggregate8499_ANA8499:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8499_ANA8499:=nil;
		 pANonAggregate8499_ANA8499:=myrec;
		END;
	FUNCTION pASigned8504_AS8504:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned8504_AS8504:=myrec;
		END;
	FUNCTION pASignedTformat8503_AST8503:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned8504_AS8504;
		 pASignedTformat8503_AST8503:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8502_ATP8502:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype8502_ATP8502:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8501_APT8501:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8501_APT8501:=nil;
		 pAPredeclaredtypeTypeprim8501_APT8501:=myrec;
		END;
	FUNCTION pAOptionalsign8507_AO8507:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8507_AO8507:=nil;
		 pAOptionalsign8507_AO8507:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8506_AIN8506:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber8506_AIN8506:=myrec;
		END;
	FUNCTION pAArray8505_AA8505:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8505_AA8505:=nil;
		 pAArray8505_AA8505:=myrec;
		END;
	FUNCTION pAArrayType8500_AAT8500:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,2 );
		 pAArrayType8500_AAT8500:=myrec;
		END;
	FUNCTION pANonAggregate8511_ANA8511:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8511_ANA8511:=nil;
		 pANonAggregate8511_ANA8511:=myrec;
		END;
	FUNCTION pASigned8516_AS8516:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned8516_AS8516:=myrec;
		END;
	FUNCTION pASignedTformat8515_AST8515:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned8516_AS8516;
		 pASignedTformat8515_AST8515:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8514_ATP8514:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype8514_ATP8514:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8513_APT8513:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8513_APT8513:=nil;
		 pAPredeclaredtypeTypeprim8513_APT8513:=myrec;
		END;
	FUNCTION pAOptionalsign8519_AO8519:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8519_AO8519:=nil;
		 pAOptionalsign8519_AO8519:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8518_AIN8518:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber8518_AIN8518:=myrec;
		END;
	FUNCTION pAArray8517_AA8517:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8517_AA8517:=nil;
		 pAArray8517_AA8517:=myrec;
		END;
	FUNCTION pAArrayType8512_AAT8512:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,2 );
		 pAArrayType8512_AAT8512:=myrec;
		END;
	FUNCTION pANonAggregate8523_ANA8523:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8523_ANA8523:=nil;
		 pANonAggregate8523_ANA8523:=myrec;
		END;
	FUNCTION pASigned8528_AS8528:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned8528_AS8528:=myrec;
		END;
	FUNCTION pASignedTformat8527_AST8527:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned8528_AS8528;
		 pASignedTformat8527_AST8527:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8526_ATP8526:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype8526_ATP8526:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8525_APT8525:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8525_APT8525:=nil;
		 pAPredeclaredtypeTypeprim8525_APT8525:=myrec;
		END;
	FUNCTION pAOptionalsign8531_AO8531:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8531_AO8531:=nil;
		 pAOptionalsign8531_AO8531:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8530_AIN8530:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber8530_AIN8530:=myrec;
		END;
	FUNCTION pAArray8529_AA8529:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8529_AA8529:=nil;
		 pAArray8529_AA8529:=myrec;
		END;
	FUNCTION pAArrayType8524_AAT8524:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,2 );
		 pAArrayType8524_AAT8524:=myrec;
		END;
	FUNCTION pANonAggregate8535_ANA8535:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8535_ANA8535:=nil;
		 pANonAggregate8535_ANA8535:=myrec;
		END;
	FUNCTION pAInt8Signed8540_AI8S8540:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed8540_AI8S8540:=myrec;
		END;
	FUNCTION pASignedTformat8539_AST8539:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed8540_AI8S8540;
		 pASignedTformat8539_AST8539:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8538_ATP8538:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype8538_ATP8538:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8537_APT8537:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8537_APT8537:=nil;
		 pAPredeclaredtypeTypeprim8537_APT8537:=myrec;
		END;
	FUNCTION pAOptionalsign8543_AO8543:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8543_AO8543:=nil;
		 pAOptionalsign8543_AO8543:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8542_AIN8542:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8542_AIN8542:=myrec;
		END;
	FUNCTION pAArray8541_AA8541:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8541_AA8541:=nil;
		 pAArray8541_AA8541:=myrec;
		END;
	FUNCTION pAArrayType8536_AAT8536:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType8536_AAT8536:=myrec;
		END;
	FUNCTION pANonAggregate8547_ANA8547:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8547_ANA8547:=nil;
		 pANonAggregate8547_ANA8547:=myrec;
		END;
	FUNCTION pAInt8Signed8552_AI8S8552:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed8552_AI8S8552:=myrec;
		END;
	FUNCTION pASignedTformat8551_AST8551:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed8552_AI8S8552;
		 pASignedTformat8551_AST8551:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8550_ATP8550:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype8550_ATP8550:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8549_APT8549:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8549_APT8549:=nil;
		 pAPredeclaredtypeTypeprim8549_APT8549:=myrec;
		END;
	FUNCTION pAOptionalsign8555_AO8555:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8555_AO8555:=nil;
		 pAOptionalsign8555_AO8555:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8554_AIN8554:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8554_AIN8554:=myrec;
		END;
	FUNCTION pAArray8553_AA8553:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8553_AA8553:=nil;
		 pAArray8553_AA8553:=myrec;
		END;
	FUNCTION pAArrayType8548_AAT8548:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType8548_AAT8548:=myrec;
		END;
	FUNCTION pANonAggregate8559_ANA8559:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8559_ANA8559:=nil;
		 pANonAggregate8559_ANA8559:=myrec;
		END;
	FUNCTION pAInt8Signed8564_AI8S8564:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed8564_AI8S8564:=myrec;
		END;
	FUNCTION pASignedTformat8563_AST8563:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed8564_AI8S8564;
		 pASignedTformat8563_AST8563:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8562_ATP8562:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype8562_ATP8562:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8561_APT8561:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8561_APT8561:=nil;
		 pAPredeclaredtypeTypeprim8561_APT8561:=myrec;
		END;
	FUNCTION pAOptionalsign8567_AO8567:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8567_AO8567:=nil;
		 pAOptionalsign8567_AO8567:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8566_AIN8566:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8566_AIN8566:=myrec;
		END;
	FUNCTION pAArray8565_AA8565:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8565_AA8565:=nil;
		 pAArray8565_AA8565:=myrec;
		END;
	FUNCTION pAArrayType8560_AAT8560:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType8560_AAT8560:=myrec;
		END;
	FUNCTION pANonAggregate8571_ANA8571:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8571_ANA8571:=nil;
		 pANonAggregate8571_ANA8571:=myrec;
		END;
	FUNCTION pAInt8Signed8576_AI8S8576:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed8576_AI8S8576:=myrec;
		END;
	FUNCTION pASignedTformat8575_AST8575:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed8576_AI8S8576;
		 pASignedTformat8575_AST8575:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8574_ATP8574:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype8574_ATP8574:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8573_APT8573:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8573_APT8573:=nil;
		 pAPredeclaredtypeTypeprim8573_APT8573:=myrec;
		END;
	FUNCTION pAOptionalsign8579_AO8579:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8579_AO8579:=nil;
		 pAOptionalsign8579_AO8579:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8578_AIN8578:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8578_AIN8578:=myrec;
		END;
	FUNCTION pAArray8577_AA8577:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8577_AA8577:=nil;
		 pAArray8577_AA8577:=myrec;
		END;
	FUNCTION pAArrayType8572_AAT8572:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType8572_AAT8572:=myrec;
		END;
	FUNCTION pANonAggregate8583_ANA8583:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8583_ANA8583:=nil;
		 pANonAggregate8583_ANA8583:=myrec;
		END;
	FUNCTION pAInt8Signed8588_AI8S8588:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed8588_AI8S8588:=myrec;
		END;
	FUNCTION pASignedTformat8587_AST8587:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed8588_AI8S8588;
		 pASignedTformat8587_AST8587:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8586_ATP8586:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype8586_ATP8586:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8585_APT8585:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8585_APT8585:=nil;
		 pAPredeclaredtypeTypeprim8585_APT8585:=myrec;
		END;
	FUNCTION pAOptionalsign8591_AO8591:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8591_AO8591:=nil;
		 pAOptionalsign8591_AO8591:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8590_AIN8590:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8590_AIN8590:=myrec;
		END;
	FUNCTION pAArray8589_AA8589:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8589_AA8589:=nil;
		 pAArray8589_AA8589:=myrec;
		END;
	FUNCTION pAArrayType8584_AAT8584:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType8584_AAT8584:=myrec;
		END;
	FUNCTION pANonAggregate8595_ANA8595:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate8595_ANA8595:=nil;
		 pANonAggregate8595_ANA8595:=myrec;
		END;
	FUNCTION pAInt8Signed8600_AI8S8600:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed8600_AI8S8600:=myrec;
		END;
	FUNCTION pASignedTformat8599_AST8599:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed8600_AI8S8600;
		 pASignedTformat8599_AST8599:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8598_ATP8598:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype8598_ATP8598:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8597_APT8597:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8597_APT8597:=nil;
		 pAPredeclaredtypeTypeprim8597_APT8597:=myrec;
		END;
	FUNCTION pAOptionalsign8603_AO8603:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8603_AO8603:=nil;
		 pAOptionalsign8603_AO8603:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8602_AIN8602:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8602_AIN8602:=myrec;
		END;
	FUNCTION pAArray8601_AA8601:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8601_AA8601:=nil;
		 pAArray8601_AA8601:=myrec;
		END;
	FUNCTION pAArrayType8596_AAT8596:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType8596_AAT8596:=myrec;
		END;
	FUNCTION pATypeid8608_AT8608:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM48  ilcg.RegDetails@1aefd7b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8608_AT8608:=myrec;
		END;
	FUNCTION pATypeidType8607_ATT8607:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8608_AT8608;
		 pATypeidType8607_ATT8607:=myrec;
		END;
	FUNCTION pATypeid8610_AT8610:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM38  ilcg.RegDetails@76e112}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8610_AT8610:=myrec;
		END;
	FUNCTION pATypeidType8609_ATT8609:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8610_AT8610;
		 pATypeidType8609_ATT8609:=myrec;
		END;
	FUNCTION pATypeid8612_AT8612:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM58  ilcg.RegDetails@57240e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8612_AT8612:=myrec;
		END;
	FUNCTION pATypeidType8611_ATT8611:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8612_AT8612;
		 pATypeidType8611_ATT8611:=myrec;
		END;
	FUNCTION pATypeid8614_AT8614:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM08  ilcg.RegDetails@507aaf}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8614_AT8614:=myrec;
		END;
	FUNCTION pATypeidType8613_ATT8613:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8614_AT8614;
		 pATypeidType8613_ATT8613:=myrec;
		END;
	FUNCTION pATypeid8616_AT8616:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM18  ilcg.RegDetails@1238fa5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8616_AT8616:=myrec;
		END;
	FUNCTION pATypeidType8615_ATT8615:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8616_AT8616;
		 pATypeidType8615_ATT8615:=myrec;
		END;
	FUNCTION pATypeid8618_AT8618:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM28  ilcg.RegDetails@1a5fdb9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8618_AT8618:=myrec;
		END;
	FUNCTION pATypeidType8617_ATT8617:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8618_AT8618;
		 pATypeidType8617_ATT8617:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl8606_AAP8606:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 265;
		myrec^.last:= 270;
		 pAAlternativesPatterndecl8606_AAP8606:=myrec;
		END;
	FUNCTION pATypeid8623_AT8623:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM432  ilcg.RegDetails@f2baac}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8623_AT8623:=myrec;
		END;
	FUNCTION pATypeidType8622_ATT8622:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8623_AT8623;
		 pATypeidType8622_ATT8622:=myrec;
		END;
	FUNCTION pATypeid8625_AT8625:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM332  ilcg.RegDetails@5b3858}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8625_AT8625:=myrec;
		END;
	FUNCTION pATypeidType8624_ATT8624:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8625_AT8625;
		 pATypeidType8624_ATT8624:=myrec;
		END;
	FUNCTION pATypeid8627_AT8627:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM532  ilcg.RegDetails@fa6175}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8627_AT8627:=myrec;
		END;
	FUNCTION pATypeidType8626_ATT8626:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8627_AT8627;
		 pATypeidType8626_ATT8626:=myrec;
		END;
	FUNCTION pATypeid8629_AT8629:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM032  ilcg.RegDetails@341b90}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8629_AT8629:=myrec;
		END;
	FUNCTION pATypeidType8628_ATT8628:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8629_AT8629;
		 pATypeidType8628_ATT8628:=myrec;
		END;
	FUNCTION pATypeid8631_AT8631:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM132  ilcg.RegDetails@1efaa51}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8631_AT8631:=myrec;
		END;
	FUNCTION pATypeidType8630_ATT8630:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8631_AT8631;
		 pATypeidType8630_ATT8630:=myrec;
		END;
	FUNCTION pATypeid8633_AT8633:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM232  ilcg.RegDetails@1bb112d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8633_AT8633:=myrec;
		END;
	FUNCTION pATypeidType8632_ATT8632:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8633_AT8633;
		 pATypeidType8632_ATT8632:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl8621_AAP8621:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 271;
		myrec^.last:= 276;
		 pAAlternativesPatterndecl8621_AAP8621:=myrec;
		END;
	FUNCTION pATypeid8638_AT8638:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM416  ilcg.RegDetails@2924cc}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8638_AT8638:=myrec;
		END;
	FUNCTION pATypeidType8637_ATT8637:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8638_AT8638;
		 pATypeidType8637_ATT8637:=myrec;
		END;
	FUNCTION pATypeid8640_AT8640:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM316  ilcg.RegDetails@b4855e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8640_AT8640:=myrec;
		END;
	FUNCTION pATypeidType8639_ATT8639:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8640_AT8640;
		 pATypeidType8639_ATT8639:=myrec;
		END;
	FUNCTION pATypeid8642_AT8642:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM516  ilcg.RegDetails@6cf97c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8642_AT8642:=myrec;
		END;
	FUNCTION pATypeidType8641_ATT8641:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8642_AT8642;
		 pATypeidType8641_ATT8641:=myrec;
		END;
	FUNCTION pATypeid8644_AT8644:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM016  ilcg.RegDetails@14b3a9e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8644_AT8644:=myrec;
		END;
	FUNCTION pATypeidType8643_ATT8643:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8644_AT8644;
		 pATypeidType8643_ATT8643:=myrec;
		END;
	FUNCTION pATypeid8646_AT8646:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM116  ilcg.RegDetails@1b993d6}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8646_AT8646:=myrec;
		END;
	FUNCTION pATypeidType8645_ATT8645:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8646_AT8646;
		 pATypeidType8645_ATT8645:=myrec;
		END;
	FUNCTION pATypeid8648_AT8648:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM216  ilcg.RegDetails@131444}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8648_AT8648:=myrec;
		END;
	FUNCTION pATypeidType8647_ATT8647:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8648_AT8648;
		 pATypeidType8647_ATT8647:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl8636_AAP8636:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 277;
		myrec^.last:= 282;
		 pAAlternativesPatterndecl8636_AAP8636:=myrec;
		END;
	FUNCTION pATypeid8653_AT8653:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM1  ilcg.RegDetails@12c20d9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8653_AT8653:=myrec;
		END;
	FUNCTION pATypeidType8652_ATT8652:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8653_AT8653;
		 pATypeidType8652_ATT8652:=myrec;
		END;
	FUNCTION pATypeid8655_AT8655:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM3  ilcg.RegDetails@11c227e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8655_AT8655:=myrec;
		END;
	FUNCTION pATypeidType8654_ATT8654:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8655_AT8655;
		 pATypeidType8654_ATT8654:=myrec;
		END;
	FUNCTION pATypeid8657_AT8657:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM4  ilcg.RegDetails@502a39}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8657_AT8657:=myrec;
		END;
	FUNCTION pATypeidType8656_ATT8656:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8657_AT8657;
		 pATypeidType8656_ATT8656:=myrec;
		END;
	FUNCTION pATypeid8659_AT8659:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM5  ilcg.RegDetails@170196d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8659_AT8659:=myrec;
		END;
	FUNCTION pATypeidType8658_ATT8658:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8659_AT8659;
		 pATypeidType8658_ATT8658:=myrec;
		END;
	FUNCTION pATypeid8661_AT8661:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM2  ilcg.RegDetails@13e5d15}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8661_AT8661:=myrec;
		END;
	FUNCTION pATypeidType8660_ATT8660:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8661_AT8661;
		 pATypeidType8660_ATT8660:=myrec;
		END;
	FUNCTION pATypeid8663_AT8663:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM0  ilcg.RegDetails@15a9173}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8663_AT8663:=myrec;
		END;
	FUNCTION pATypeidType8662_ATT8662:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8663_AT8663;
		 pATypeidType8662_ATT8662:=myrec;
		END;
	FUNCTION pATypeid8665_AT8665:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM7  ilcg.RegDetails@c04fd1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8665_AT8665:=myrec;
		END;
	FUNCTION pATypeidType8664_ATT8664:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8665_AT8665;
		 pATypeidType8664_ATT8664:=myrec;
		END;
	FUNCTION pATypeid8667_AT8667:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM6  ilcg.RegDetails@307ae3}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8667_AT8667:=myrec;
		END;
	FUNCTION pATypeidType8666_ATT8666:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8667_AT8667;
		 pATypeidType8666_ATT8666:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl8651_AAP8651:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 283;
		myrec^.last:= 290;
		 pAAlternativesPatterndecl8651_AAP8651:=myrec;
		END;
	FUNCTION pATypeid8672_AT8672:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM1L  ilcg.RegDetails@647edd}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8672_AT8672:=myrec;
		END;
	FUNCTION pATypeidType8671_ATT8671:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8672_AT8672;
		 pATypeidType8671_ATT8671:=myrec;
		END;
	FUNCTION pATypeid8674_AT8674:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM3L  ilcg.RegDetails@174f6ce}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8674_AT8674:=myrec;
		END;
	FUNCTION pATypeidType8673_ATT8673:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8674_AT8674;
		 pATypeidType8673_ATT8673:=myrec;
		END;
	FUNCTION pATypeid8676_AT8676:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM4L  ilcg.RegDetails@1e1c66a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8676_AT8676:=myrec;
		END;
	FUNCTION pATypeidType8675_ATT8675:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8676_AT8676;
		 pATypeidType8675_ATT8675:=myrec;
		END;
	FUNCTION pATypeid8678_AT8678:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM2L  ilcg.RegDetails@e26ffd}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8678_AT8678:=myrec;
		END;
	FUNCTION pATypeidType8677_ATT8677:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8678_AT8678;
		 pATypeidType8677_ATT8677:=myrec;
		END;
	FUNCTION pATypeid8680_AT8680:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM0L  ilcg.RegDetails@3ec403}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8680_AT8680:=myrec;
		END;
	FUNCTION pATypeidType8679_ATT8679:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8680_AT8680;
		 pATypeidType8679_ATT8679:=myrec;
		END;
	FUNCTION pATypeid8682_AT8682:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM5L  ilcg.RegDetails@169a85d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8682_AT8682:=myrec;
		END;
	FUNCTION pATypeidType8681_ATT8681:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8682_AT8682;
		 pATypeidType8681_ATT8681:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl8670_AAP8670:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 291;
		myrec^.last:= 296;
		 pAAlternativesPatterndecl8670_AAP8670:=myrec;
		END;
	FUNCTION pATypeid8687_AT8687:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM1U  ilcg.RegDetails@4d45c6}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8687_AT8687:=myrec;
		END;
	FUNCTION pATypeidType8686_ATT8686:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8687_AT8687;
		 pATypeidType8686_ATT8686:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl8685_AAP8685:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 297;
		myrec^.last:= 297;
		 pAAlternativesPatterndecl8685_AAP8685:=myrec;
		END;
	FUNCTION pATypeid8692_AT8692:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM1I  ilcg.RegDetails@1439bd9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8692_AT8692:=myrec;
		END;
	FUNCTION pATypeidType8691_ATT8691:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8692_AT8692;
		 pATypeidType8691_ATT8691:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl8690_AAP8690:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 298;
		myrec^.last:= 298;
		 pAAlternativesPatterndecl8690_AAP8690:=myrec;
		END;
	FUNCTION pATypeid8697_AT8697:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM1LI  ilcg.RegDetails@17a6bd}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8697_AT8697:=myrec;
		END;
	FUNCTION pATypeidType8696_ATT8696:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8697_AT8697;
		 pATypeidType8696_ATT8696:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl8695_AAP8695:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 299;
		myrec^.last:= 299;
		 pAAlternativesPatterndecl8695_AAP8695:=myrec;
		END;
	FUNCTION pATypeid8702_AT8702:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM1LU  ilcg.RegDetails@18e754c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8702_AT8702:=myrec;
		END;
	FUNCTION pATypeidType8701_ATT8701:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8702_AT8702;
		 pATypeidType8701_ATT8701:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl8700_AAP8700:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 300;
		myrec^.last:= 300;
		 pAAlternativesPatterndecl8700_AAP8700:=myrec;
		END;
	FUNCTION pATypeid8707_AT8707:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ lmreg  ilcg.pattern@b581}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8707_AT8707:=myrec;
		END;
	FUNCTION pATypeidType8706_ATT8706:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8707_AT8707;
		 pATypeidType8706_ATT8706:=myrec;
		END;
	FUNCTION pATypeid8709_AT8709:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ulmreg  ilcg.pattern@16a8423}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8709_AT8709:=myrec;
		END;
	FUNCTION pATypeidType8708_ATT8708:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8709_AT8709;
		 pATypeidType8708_ATT8708:=myrec;
		END;
	FUNCTION pATypeid8711_AT8711:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ilmreg  ilcg.pattern@18a04cb}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8711_AT8711:=myrec;
		END;
	FUNCTION pATypeidType8710_ATT8710:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8711_AT8711;
		 pATypeidType8710_ATT8710:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl8705_AAP8705:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 301;
		myrec^.last:= 303;
		 pAAlternativesPatterndecl8705_AAP8705:=myrec;
		END;
	FUNCTION pATypeid8716_AT8716:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im2reg  ilcg.pattern@18374c9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8716_AT8716:=myrec;
		END;
	FUNCTION pATypeidType8715_ATT8715:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8716_AT8716;
		 pATypeidType8715_ATT8715:=myrec;
		END;
	FUNCTION pATypeid8718_AT8718:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ untypedmreg  ilcg.pattern@585fa9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8718_AT8718:=myrec;
		END;
	FUNCTION pATypeidType8717_ATT8717:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8718_AT8718;
		 pATypeidType8717_ATT8717:=myrec;
		END;
	FUNCTION pATypeid8720_AT8720:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ umreg  ilcg.pattern@26aee}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8720_AT8720:=myrec;
		END;
	FUNCTION pATypeidType8719_ATT8719:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8720_AT8720;
		 pATypeidType8719_ATT8719:=myrec;
		END;
	FUNCTION pATypeid8722_AT8722:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im4reg  ilcg.pattern@9c7650}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8722_AT8722:=myrec;
		END;
	FUNCTION pATypeidType8721_ATT8721:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8722_AT8722;
		 pATypeidType8721_ATT8721:=myrec;
		END;
	FUNCTION pATypeid8724_AT8724:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im8reg  ilcg.pattern@1977d63}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8724_AT8724:=myrec;
		END;
	FUNCTION pATypeidType8723_ATT8723:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8724_AT8724;
		 pATypeidType8723_ATT8723:=myrec;
		END;
	FUNCTION pATypeid8726_AT8726:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ iMreg  ilcg.pattern@1b1ebe5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8726_AT8726:=myrec;
		END;
	FUNCTION pATypeidType8725_ATT8725:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8726_AT8726;
		 pATypeidType8725_ATT8725:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl8714_AAP8714:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 304;
		myrec^.last:= 309;
		 pAAlternativesPatterndecl8714_AAP8714:=myrec;
		END;
	FUNCTION pATypeid8731_AT8731:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ memrisc  ilcg.pattern@df98c4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8731_AT8731:=myrec;
		END;
	FUNCTION pATypeidType8730_ATT8730:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8731_AT8731;
		 pATypeidType8730_ATT8730:=myrec;
		END;
	FUNCTION pATypeid8733_AT8733:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8733_AT8733:=myrec;
		END;
	FUNCTION pATypeidType8732_ATT8732:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid8733_AT8733;
		 pATypeidType8732_ATT8732:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl8729_AAP8729:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 310;
		myrec^.last:= 311;
		 pAAlternativesPatterndecl8729_AAP8729:=myrec;
		END;
	FUNCTION pATypeid8736_AT8736:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im4reg  ilcg.pattern@9c7650}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8736_AT8736:=myrec;
		END;
	FUNCTION pATypeid8738_AT8738:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im4reg  ilcg.pattern@9c7650}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8738_AT8738:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc8742_AIL8742:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8742_AIL8742:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8741_AR8741:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8742_AIL8742;
		 pARefval8741_AR8741:=myrec;
		END;
	FUNCTION pATimesDyadic8744_ATD8744:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcptimes;
		 pATimesDyadic8744_ATD8744:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc8748_AIL8748:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8748_AIL8748:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8747_AR8747:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8748_AIL8748;
		 pARefval8747_AR8747:=myrec;
		END;
	FUNCTION pADerefRhs8746_ADR8746:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8747_AR8747;
		 pADerefRhs8746_ADR8746:=myrec;
		END;
	FUNCTION pARhsValue8745_ARV8745:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8746_ADR8746;
		 pARhsValue8745_ARV8745:=myrec;
		END;
		(*! Match ma *)
	FUNCTION pAIdLoc8752_AIL8752:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc8752_AIL8752:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8751_AR8751:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8752_AIL8752;
		 pARefval8751_AR8751:=myrec;
		END;
	FUNCTION pADerefRhs8750_ADR8750:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8751_AR8751;
		 pADerefRhs8750_ADR8750:=myrec;
		END;
	FUNCTION pARhsValue8749_ARV8749:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8750_ADR8750;
		 pARhsValue8749_ARV8749:=myrec;
		END;
	FUNCTION pADyadicValue8743_ADV8743:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue8745_ARV8745;
		myrec^.arg2:=pARhsValue8749_ARV8749;
		myrec^.fn:=pATimesDyadic8744_ATD8744;
		 pADyadicValue8743_ADV8743:=myrec;
		END;
	FUNCTION pAAssign8740_AA8740:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue8743_ADV8743;
		myrec^.dest:=pARefval8741_AR8741;
		 pAAssign8740_AA8740:=myrec;
		END;
	FUNCTION pAAssignMeaning8739_AAM8739:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign8740_AA8740;
		 pAAssignMeaning8739_AAM8739:=myrec;
		END;
	FUNCTION pAAssemblypattern8754_AA8754:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'pmullw ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern8754_AA8754:=list;
		END;
	FUNCTION pAAssemblesto8753_AA8753:pprintlist;
	begin
		pAAssemblesto8753_AA8753:=pAAssemblypattern8754_AA8754;
		END;
	FUNCTION pASideeffects8759_AS8759:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects8759_AS8759:=nil;
		 pASideeffects8759_AS8759:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond8760_AUP8760:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond8760_AUP8760:=nil;
		 pAUnconditionalPrecond8760_AUP8760:=myrec;
		END;
	FUNCTION PMULLW_PMULLW:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patim4reg_4;
		params^[1]:=patim4reg_4;
		paramcount:=3;
		meaning:=pAAssignMeaning8739_AAM8739;
		matchedAssembler:=pAAssemblesto8753_AA8753;
		END;
		PMULLW_PMULLW:=myrec;
	END;
	FUNCTION pATypeid8763_AT8763:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im8reg  ilcg.pattern@1977d63}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8763_AT8763:=myrec;
		END;
	FUNCTION pATypeid8765_AT8765:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8765_AT8765:=myrec;
		END;
	FUNCTION pATypeid8767_AT8767:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@18adce0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8767_AT8767:=myrec;
		END;
		(*! Match m1 *)
	FUNCTION pAIdLoc8771_AIL8771:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8771_AIL8771:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8770_AR8770:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8771_AIL8771;
		 pARefval8770_AR8770:=myrec;
		END;
	FUNCTION pAInt8Signed8778_AI8S8778:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed8778_AI8S8778:=myrec;
		END;
	FUNCTION pASignedTformat8777_AST8777:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed8778_AI8S8778;
		 pASignedTformat8777_AST8777:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8776_ATP8776:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype8776_ATP8776:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8775_APT8775:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8775_APT8775:=nil;
		 pAPredeclaredtypeTypeprim8775_APT8775:=myrec;
		END;
	FUNCTION pAOptionalsign8781_AO8781:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8781_AO8781:=nil;
		 pAOptionalsign8781_AO8781:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8780_AIN8780:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8780_AIN8780:=myrec;
		END;
	FUNCTION pAArray8779_AA8779:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8779_AA8779:=nil;
		 pAArray8779_AA8779:=myrec;
		END;
	FUNCTION pAArrayType8774_AAT8774:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType8774_AAT8774:=myrec;
		END;
	FUNCTION pASatmultDyadic8783_ASD8783:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpsatmult;
		 pASatmultDyadic8783_ASD8783:=myrec;
		END;
	FUNCTION pAInt8Signed8790_AI8S8790:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed8790_AI8S8790:=myrec;
		END;
	FUNCTION pASignedTformat8789_AST8789:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed8790_AI8S8790;
		 pASignedTformat8789_AST8789:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8788_ATP8788:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype8788_ATP8788:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8787_APT8787:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8787_APT8787:=nil;
		 pAPredeclaredtypeTypeprim8787_APT8787:=myrec;
		END;
	FUNCTION pAOptionalsign8793_AO8793:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8793_AO8793:=nil;
		 pAOptionalsign8793_AO8793:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8792_AIN8792:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8792_AIN8792:=myrec;
		END;
	FUNCTION pAArray8791_AA8791:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8791_AA8791:=nil;
		 pAArray8791_AA8791:=myrec;
		END;
	FUNCTION pAArrayType8786_AAT8786:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType8786_AAT8786:=myrec;
		END;
		(*! Match m1 *)
	FUNCTION pAIdLoc8797_AIL8797:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8797_AIL8797:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8796_AR8796:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8797_AIL8797;
		 pARefval8796_AR8796:=myrec;
		END;
	FUNCTION pADerefRhs8795_ADR8795:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8796_AR8796;
		 pADerefRhs8795_ADR8795:=myrec;
		END;
	FUNCTION pARhsValue8794_ARV8794:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8795_ADR8795;
		 pARhsValue8794_ARV8794:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs8785_ACR8785:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8786_AAT8786;
		myrec^.arg2:=pARhsValue8794_ARV8794;
		 pACastRhs8785_ACR8785:=myrec;
		END;
	FUNCTION pARhsValue8784_ARV8784:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8785_ACR8785;
		 pARhsValue8784_ARV8784:=myrec;
		END;
	FUNCTION pAInt8Signed8804_AI8S8804:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed8804_AI8S8804:=myrec;
		END;
	FUNCTION pASignedTformat8803_AST8803:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed8804_AI8S8804;
		 pASignedTformat8803_AST8803:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8802_ATP8802:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype8802_ATP8802:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8801_APT8801:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8801_APT8801:=nil;
		 pAPredeclaredtypeTypeprim8801_APT8801:=myrec;
		END;
	FUNCTION pAOptionalsign8807_AO8807:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8807_AO8807:=nil;
		 pAOptionalsign8807_AO8807:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8806_AIN8806:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8806_AIN8806:=myrec;
		END;
	FUNCTION pAArray8805_AA8805:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8805_AA8805:=nil;
		 pAArray8805_AA8805:=myrec;
		END;
	FUNCTION pAArrayType8800_AAT8800:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType8800_AAT8800:=myrec;
		END;
		(*! Match ma *)
	FUNCTION pAIdLoc8811_AIL8811:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc8811_AIL8811:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8810_AR8810:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8811_AIL8811;
		 pARefval8810_AR8810:=myrec;
		END;
	FUNCTION pADerefRhs8809_ADR8809:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8810_AR8810;
		 pADerefRhs8809_ADR8809:=myrec;
		END;
	FUNCTION pARhsValue8808_ARV8808:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8809_ADR8809;
		 pARhsValue8808_ARV8808:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs8799_ACR8799:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8800_AAT8800;
		myrec^.arg2:=pARhsValue8808_ARV8808;
		 pACastRhs8799_ACR8799:=myrec;
		END;
	FUNCTION pARhsValue8798_ARV8798:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8799_ACR8799;
		 pARhsValue8798_ARV8798:=myrec;
		END;
	FUNCTION pADyadicValue8782_ADV8782:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue8784_ARV8784;
		myrec^.arg2:=pARhsValue8798_ARV8798;
		myrec^.fn:=pASatmultDyadic8783_ASD8783;
		 pADyadicValue8782_ADV8782:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs8773_ACR8773:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8774_AAT8774;
		myrec^.arg2:=pADyadicValue8782_ADV8782;
		 pACastRhs8773_ACR8773:=myrec;
		END;
	FUNCTION pARhsValue8772_ARV8772:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8773_ACR8773;
		 pARhsValue8772_ARV8772:=myrec;
		END;
	FUNCTION pAAssign8769_AA8769:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue8772_ARV8772;
		myrec^.dest:=pARefval8770_AR8770;
		 pAAssign8769_AA8769:=myrec;
		END;
	FUNCTION pAAssignMeaning8768_AAM8768:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign8769_AA8769;
		 pAAssignMeaning8768_AAM8768:=myrec;
		END;
	FUNCTION pAAssemblypattern8813_AA8813:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'pxor MM7,MM7' );
		pappends(list,'\n pxor MM5,MM5' );
		pappends(list,'\n punpckhbw MM7,' );
		pappendp(list,2);
		pappends(list,'\n pxor MM6,MM6' );
		pappends(list,'\n punpckhbw MM6,' );
		pappendp(list,0);
		pappends(list,'\n punpcklbw MM5,' );
		pappendp(list,2);
		pappends(list,'\n pmulhw MM7,MM6' );
		pappends(list,'\n psraw MM7,7' );
		pappends(list,'\n pxor MM6,MM6' );
		pappends(list,'\n punpcklbw MM6,' );
		pappendp(list,0);
		pappends(list,'\n pmulhw MM5,MM6' );
		pappends(list,'\n psraw MM5,7' );
		pappends(list,'\n packsswb MM5,MM7' );
		pappends(list,'\n movq ' );
		pappendp(list,0);
		pappends(list,',MM5' );
		pAAssemblypattern8813_AA8813:=list;
		END;
	FUNCTION pAAssemblesto8812_AA8812:pprintlist;
	begin
		pAAssemblesto8812_AA8812:=pAAssemblypattern8813_AA8813;
		END;
	FUNCTION pASideeffects8834_AS8834:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects8834_AS8834:=nil;
		 pASideeffects8834_AS8834:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond8835_AUP8835:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond8835_AUP8835:=nil;
		 pAUnconditionalPrecond8835_AUP8835:=myrec;
		END;
	FUNCTION PMULLSSB_PMULLSSB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patmreg_;
		params^[0]:=patim8reg_8;
		params^[2]:=patmrmaddrmode_;
		paramcount:=4;
		meaning:=pAAssignMeaning8768_AAM8768;
		matchedAssembler:=pAAssemblesto8812_AA8812;
		END;
		PMULLSSB_PMULLSSB:=myrec;
	END;
	FUNCTION pATypeid8838_AT8838:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8838_AT8838:=myrec;
		END;
	FUNCTION pAPushDyadic8841_APD8841:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic8841_APD8841:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc8843_AIL8843:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc8843_AIL8843:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue8842_ALV8842:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8843_AIL8843;
		 pALocValue8842_ALV8842:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc8845_AIL8845:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8845_AIL8845:=myrec;
		END;
		(*m *)
	FUNCTION pALocValue8844_ALV8844:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8845_AIL8845;
		 pALocValue8844_ALV8844:=myrec;
		END;
	FUNCTION pADyadicValue8840_ADV8840:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue8842_ALV8842;
		myrec^.arg2:=pALocValue8844_ALV8844;
		myrec^.fn:=pAPushDyadic8841_APD8841;
		 pADyadicValue8840_ADV8840:=myrec;
		END;
	FUNCTION pAValueMeaning8839_AVM8839:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue8840_ADV8840;
		 pAValueMeaning8839_AVM8839:=myrec;
		END;
	FUNCTION pAAssemblypattern8847_AA8847:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'sub esp,8\n movq [esp],' );
		pappendp(list,0);
		pAAssemblypattern8847_AA8847:=list;
		END;
	FUNCTION pAAssemblesto8846_AA8846:pprintlist;
	begin
		pAAssemblesto8846_AA8846:=pAAssemblypattern8847_AA8847;
		END;
	FUNCTION pASideeffects8850_AS8850:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects8850_AS8850:=nil;
		 pASideeffects8850_AS8850:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond8851_AUP8851:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond8851_AUP8851:=nil;
		 pAUnconditionalPrecond8851_AUP8851:=myrec;
		END;
	FUNCTION MMXPUSH_MMXPUSH:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		paramcount:=2;
		meaning:=pAValueMeaning8839_AVM8839;
		matchedAssembler:=pAAssemblesto8846_AA8846;
		END;
		MMXPUSH_MMXPUSH:=myrec;
	END;
	FUNCTION pATypeid8854_AT8854:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8854_AT8854:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc8858_AIL8858:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8858_AIL8858:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8857_AR8857:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8858_AIL8858;
		 pARefval8857_AR8857:=myrec;
		END;
	FUNCTION pADoublewordFormat8863_ADF8863:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdword;
		 pADoublewordFormat8863_ADF8863:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype8862_AFP8862:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAFormatPredeclaredtype8862_AFP8862:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType8861_APT8861:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAPredeclaredtypeType8861_APT8861:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc8865_AIL8865:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc8865_AIL8865:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue8864_ALV8864:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8865_AIL8865;
		 pALocValue8864_ALV8864:=myrec;
		END;
		(*! try to cast to type: doubleword*)
	FUNCTION pACastpopRhs8860_ACR8860:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType8861_APT8861;
		myrec^.arg2:=pALocValue8864_ALV8864;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs8860_ACR8860:=myrec;
		END;
	FUNCTION pARhsValue8859_ARV8859:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs8860_ACR8860;
		 pARhsValue8859_ARV8859:=myrec;
		END;
	FUNCTION pAAssign8856_AA8856:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue8859_ARV8859;
		myrec^.dest:=pARefval8857_AR8857;
		 pAAssign8856_AA8856:=myrec;
		END;
	FUNCTION pAAssignMeaning8855_AAM8855:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign8856_AA8856;
		 pAAssignMeaning8855_AAM8855:=myrec;
		END;
	FUNCTION pAAssemblypattern8867_AA8867:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movq ' );
		pappendp(list,0);
		pappends(list,',[esp]\n add esp,8' );
		pAAssemblypattern8867_AA8867:=list;
		END;
	FUNCTION pAAssemblesto8866_AA8866:pprintlist;
	begin
		pAAssemblesto8866_AA8866:=pAAssemblypattern8867_AA8867;
		END;
	FUNCTION pASideeffects8871_AS8871:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects8871_AS8871:=nil;
		 pASideeffects8871_AS8871:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond8872_AUP8872:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond8872_AUP8872:=nil;
		 pAUnconditionalPrecond8872_AUP8872:=myrec;
		END;
	FUNCTION MMXPOP_MMXPOP:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		paramcount:=2;
		meaning:=pAAssignMeaning8855_AAM8855;
		matchedAssembler:=pAAssemblesto8866_AA8866;
		END;
		MMXPOP_MMXPOP:=myrec;
	END;
	FUNCTION pATypeid8875_AT8875:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8875_AT8875:=myrec;
		END;
	FUNCTION pATypeid8877_AT8877:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@18adce0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8877_AT8877:=myrec;
		END;
	FUNCTION pASigned8887_AS8887:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned8887_AS8887:=myrec;
		END;
	FUNCTION pASignedTformat8886_AST8886:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned8887_AS8887;
		 pASignedTformat8886_AST8886:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8885_ATP8885:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype8885_ATP8885:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8884_APT8884:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8884_APT8884:=nil;
		 pAPredeclaredtypeTypeprim8884_APT8884:=myrec;
		END;
	FUNCTION pAOptionalsign8890_AO8890:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8890_AO8890:=nil;
		 pAOptionalsign8890_AO8890:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8889_AIN8889:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber8889_AIN8889:=myrec;
		END;
	FUNCTION pAArray8888_AA8888:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8888_AA8888:=nil;
		 pAArray8888_AA8888:=myrec;
		END;
	FUNCTION pAArrayType8883_AAT8883:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,2 );
		 pAArrayType8883_AAT8883:=myrec;
		END;
	FUNCTION pAReference8882_AR8882:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType8883_AAT8883;
		 pAReference8882_AR8882:=myrec;
		END;
	FUNCTION pAReftypeType8881_ART8881:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference8882_AR8882;
		 pAReftypeType8881_ART8881:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc8891_AIL8891:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8891_AIL8891:=myrec;
		END;
		(*! try to cast to type: ref int32 vector ( 2 )*)
	FUNCTION pARefcastRefval8880_ARR8880:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType8881_ART8881;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc8891_AIL8891;
		 pARefcastRefval8880_ARR8880:=myrec;
		END;
	FUNCTION pASigned8898_AS8898:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned8898_AS8898:=myrec;
		END;
	FUNCTION pASignedTformat8897_AST8897:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned8898_AS8898;
		 pASignedTformat8897_AST8897:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8896_ATP8896:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype8896_ATP8896:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8895_APT8895:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8895_APT8895:=nil;
		 pAPredeclaredtypeTypeprim8895_APT8895:=myrec;
		END;
	FUNCTION pAOptionalsign8901_AO8901:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8901_AO8901:=nil;
		 pAOptionalsign8901_AO8901:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8900_AIN8900:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber8900_AIN8900:=myrec;
		END;
	FUNCTION pAArray8899_AA8899:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8899_AA8899:=nil;
		 pAArray8899_AA8899:=myrec;
		END;
	FUNCTION pAArrayType8894_AAT8894:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,2 );
		 pAArrayType8894_AAT8894:=myrec;
		END;
	FUNCTION pAPlusDyadic8903_APD8903:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic8903_APD8903:=myrec;
		END;
	FUNCTION pASigned8910_AS8910:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned8910_AS8910:=myrec;
		END;
	FUNCTION pASignedTformat8909_AST8909:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned8910_AS8910;
		 pASignedTformat8909_AST8909:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8908_ATP8908:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype8908_ATP8908:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8907_APT8907:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8907_APT8907:=nil;
		 pAPredeclaredtypeTypeprim8907_APT8907:=myrec;
		END;
	FUNCTION pAOptionalsign8913_AO8913:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8913_AO8913:=nil;
		 pAOptionalsign8913_AO8913:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8912_AIN8912:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber8912_AIN8912:=myrec;
		END;
	FUNCTION pAArray8911_AA8911:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8911_AA8911:=nil;
		 pAArray8911_AA8911:=myrec;
		END;
	FUNCTION pAArrayType8906_AAT8906:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,2 );
		 pAArrayType8906_AAT8906:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc8917_AIL8917:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8917_AIL8917:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8916_AR8916:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8917_AIL8917;
		 pARefval8916_AR8916:=myrec;
		END;
	FUNCTION pADerefRhs8915_ADR8915:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8916_AR8916;
		 pADerefRhs8915_ADR8915:=myrec;
		END;
	FUNCTION pARhsValue8914_ARV8914:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8915_ADR8915;
		 pARhsValue8914_ARV8914:=myrec;
		END;
		(*! try to cast to type: int32 vector ( 2 )*)
	FUNCTION pACastRhs8905_ACR8905:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8906_AAT8906;
		myrec^.arg2:=pARhsValue8914_ARV8914;
		 pACastRhs8905_ACR8905:=myrec;
		END;
	FUNCTION pARhsValue8904_ARV8904:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8905_ACR8905;
		 pARhsValue8904_ARV8904:=myrec;
		END;
	FUNCTION pASigned8924_AS8924:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned8924_AS8924:=myrec;
		END;
	FUNCTION pASignedTformat8923_AST8923:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned8924_AS8924;
		 pASignedTformat8923_AST8923:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8922_ATP8922:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype8922_ATP8922:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8921_APT8921:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8921_APT8921:=nil;
		 pAPredeclaredtypeTypeprim8921_APT8921:=myrec;
		END;
	FUNCTION pAOptionalsign8927_AO8927:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8927_AO8927:=nil;
		 pAOptionalsign8927_AO8927:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8926_AIN8926:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber8926_AIN8926:=myrec;
		END;
	FUNCTION pAArray8925_AA8925:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8925_AA8925:=nil;
		 pAArray8925_AA8925:=myrec;
		END;
	FUNCTION pAArrayType8920_AAT8920:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,2 );
		 pAArrayType8920_AAT8920:=myrec;
		END;
		(*! Match ma *)
	FUNCTION pAIdLoc8931_AIL8931:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc8931_AIL8931:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8930_AR8930:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8931_AIL8931;
		 pARefval8930_AR8930:=myrec;
		END;
	FUNCTION pADerefRhs8929_ADR8929:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8930_AR8930;
		 pADerefRhs8929_ADR8929:=myrec;
		END;
	FUNCTION pARhsValue8928_ARV8928:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8929_ADR8929;
		 pARhsValue8928_ARV8928:=myrec;
		END;
		(*! try to cast to type: int32 vector ( 2 )*)
	FUNCTION pACastRhs8919_ACR8919:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8920_AAT8920;
		myrec^.arg2:=pARhsValue8928_ARV8928;
		 pACastRhs8919_ACR8919:=myrec;
		END;
	FUNCTION pARhsValue8918_ARV8918:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8919_ACR8919;
		 pARhsValue8918_ARV8918:=myrec;
		END;
	FUNCTION pADyadicValue8902_ADV8902:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue8904_ARV8904;
		myrec^.arg2:=pARhsValue8918_ARV8918;
		myrec^.fn:=pAPlusDyadic8903_APD8903;
		 pADyadicValue8902_ADV8902:=myrec;
		END;
		(*! try to cast to type: int32 vector ( 2 )*)
	FUNCTION pACastRhs8893_ACR8893:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8894_AAT8894;
		myrec^.arg2:=pADyadicValue8902_ADV8902;
		 pACastRhs8893_ACR8893:=myrec;
		END;
	FUNCTION pARhsValue8892_ARV8892:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8893_ACR8893;
		 pARhsValue8892_ARV8892:=myrec;
		END;
	FUNCTION pAAssign8879_AA8879:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue8892_ARV8892;
		myrec^.dest:=pARefcastRefval8880_ARR8880;
		 pAAssign8879_AA8879:=myrec;
		END;
	FUNCTION pAAssignMeaning8878_AAM8878:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign8879_AA8879;
		 pAAssignMeaning8878_AAM8878:=myrec;
		END;
	FUNCTION pAAssemblypattern8933_AA8933:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'paddd ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern8933_AA8933:=list;
		END;
	FUNCTION pAAssemblesto8932_AA8932:pprintlist;
	begin
		pAAssemblesto8932_AA8932:=pAAssemblypattern8933_AA8933;
		END;
	FUNCTION pASideeffects8938_AS8938:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects8938_AS8938:=nil;
		 pASideeffects8938_AS8938:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond8939_AUP8939:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond8939_AUP8939:=nil;
		 pAUnconditionalPrecond8939_AUP8939:=myrec;
		END;
	FUNCTION PADDD_PADDD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		params^[1]:=patmrmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning8878_AAM8878;
		matchedAssembler:=pAAssemblesto8932_AA8932;
		END;
		PADDD_PADDD:=myrec;
	END;
	FUNCTION pATypeid8942_AT8942:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im4reg  ilcg.pattern@9c7650}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8942_AT8942:=myrec;
		END;
	FUNCTION pATypeid8944_AT8944:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@18adce0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8944_AT8944:=myrec;
		END;
	FUNCTION pAInt16Signed8954_AI16S8954:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed8954_AI16S8954:=myrec;
		END;
	FUNCTION pASignedTformat8953_AST8953:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed8954_AI16S8954;
		 pASignedTformat8953_AST8953:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8952_ATP8952:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype8952_ATP8952:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8951_APT8951:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8951_APT8951:=nil;
		 pAPredeclaredtypeTypeprim8951_APT8951:=myrec;
		END;
	FUNCTION pAOptionalsign8957_AO8957:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8957_AO8957:=nil;
		 pAOptionalsign8957_AO8957:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8956_AIN8956:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber8956_AIN8956:=myrec;
		END;
	FUNCTION pAArray8955_AA8955:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8955_AA8955:=nil;
		 pAArray8955_AA8955:=myrec;
		END;
	FUNCTION pAArrayType8950_AAT8950:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType8950_AAT8950:=myrec;
		END;
	FUNCTION pAReference8949_AR8949:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType8950_AAT8950;
		 pAReference8949_AR8949:=myrec;
		END;
	FUNCTION pAReftypeType8948_ART8948:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference8949_AR8949;
		 pAReftypeType8948_ART8948:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc8958_AIL8958:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8958_AIL8958:=myrec;
		END;
		(*! try to cast to type: ref int16 vector ( 4 )*)
	FUNCTION pARefcastRefval8947_ARR8947:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType8948_ART8948;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc8958_AIL8958;
		 pARefcastRefval8947_ARR8947:=myrec;
		END;
	FUNCTION pAInt16Signed8965_AI16S8965:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed8965_AI16S8965:=myrec;
		END;
	FUNCTION pASignedTformat8964_AST8964:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed8965_AI16S8965;
		 pASignedTformat8964_AST8964:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8963_ATP8963:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype8963_ATP8963:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8962_APT8962:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8962_APT8962:=nil;
		 pAPredeclaredtypeTypeprim8962_APT8962:=myrec;
		END;
	FUNCTION pAOptionalsign8968_AO8968:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8968_AO8968:=nil;
		 pAOptionalsign8968_AO8968:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8967_AIN8967:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber8967_AIN8967:=myrec;
		END;
	FUNCTION pAArray8966_AA8966:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8966_AA8966:=nil;
		 pAArray8966_AA8966:=myrec;
		END;
	FUNCTION pAArrayType8961_AAT8961:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType8961_AAT8961:=myrec;
		END;
	FUNCTION pAPlusDyadic8970_APD8970:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic8970_APD8970:=myrec;
		END;
	FUNCTION pAInt16Signed8977_AI16S8977:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed8977_AI16S8977:=myrec;
		END;
	FUNCTION pASignedTformat8976_AST8976:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed8977_AI16S8977;
		 pASignedTformat8976_AST8976:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8975_ATP8975:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype8975_ATP8975:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8974_APT8974:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8974_APT8974:=nil;
		 pAPredeclaredtypeTypeprim8974_APT8974:=myrec;
		END;
	FUNCTION pAOptionalsign8980_AO8980:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8980_AO8980:=nil;
		 pAOptionalsign8980_AO8980:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8979_AIN8979:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber8979_AIN8979:=myrec;
		END;
	FUNCTION pAArray8978_AA8978:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8978_AA8978:=nil;
		 pAArray8978_AA8978:=myrec;
		END;
	FUNCTION pAArrayType8973_AAT8973:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType8973_AAT8973:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc8984_AIL8984:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8984_AIL8984:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8983_AR8983:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8984_AIL8984;
		 pARefval8983_AR8983:=myrec;
		END;
	FUNCTION pADerefRhs8982_ADR8982:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8983_AR8983;
		 pADerefRhs8982_ADR8982:=myrec;
		END;
	FUNCTION pARhsValue8981_ARV8981:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8982_ADR8982;
		 pARhsValue8981_ARV8981:=myrec;
		END;
		(*! try to cast to type: int16 vector ( 4 )*)
	FUNCTION pACastRhs8972_ACR8972:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8973_AAT8973;
		myrec^.arg2:=pARhsValue8981_ARV8981;
		 pACastRhs8972_ACR8972:=myrec;
		END;
	FUNCTION pARhsValue8971_ARV8971:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8972_ACR8972;
		 pARhsValue8971_ARV8971:=myrec;
		END;
	FUNCTION pAInt16Signed8991_AI16S8991:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed8991_AI16S8991:=myrec;
		END;
	FUNCTION pASignedTformat8990_AST8990:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed8991_AI16S8991;
		 pASignedTformat8990_AST8990:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8989_ATP8989:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype8989_ATP8989:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8988_APT8988:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8988_APT8988:=nil;
		 pAPredeclaredtypeTypeprim8988_APT8988:=myrec;
		END;
	FUNCTION pAOptionalsign8994_AO8994:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8994_AO8994:=nil;
		 pAOptionalsign8994_AO8994:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8993_AIN8993:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber8993_AIN8993:=myrec;
		END;
	FUNCTION pAArray8992_AA8992:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8992_AA8992:=nil;
		 pAArray8992_AA8992:=myrec;
		END;
	FUNCTION pAArrayType8987_AAT8987:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType8987_AAT8987:=myrec;
		END;
		(*! Match ma *)
	FUNCTION pAIdLoc8998_AIL8998:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc8998_AIL8998:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8997_AR8997:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8998_AIL8998;
		 pARefval8997_AR8997:=myrec;
		END;
	FUNCTION pADerefRhs8996_ADR8996:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8997_AR8997;
		 pADerefRhs8996_ADR8996:=myrec;
		END;
	FUNCTION pARhsValue8995_ARV8995:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8996_ADR8996;
		 pARhsValue8995_ARV8995:=myrec;
		END;
		(*! try to cast to type: int16 vector ( 4 )*)
	FUNCTION pACastRhs8986_ACR8986:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8987_AAT8987;
		myrec^.arg2:=pARhsValue8995_ARV8995;
		 pACastRhs8986_ACR8986:=myrec;
		END;
	FUNCTION pARhsValue8985_ARV8985:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8986_ACR8986;
		 pARhsValue8985_ARV8985:=myrec;
		END;
	FUNCTION pADyadicValue8969_ADV8969:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue8971_ARV8971;
		myrec^.arg2:=pARhsValue8985_ARV8985;
		myrec^.fn:=pAPlusDyadic8970_APD8970;
		 pADyadicValue8969_ADV8969:=myrec;
		END;
		(*! try to cast to type: int16 vector ( 4 )*)
	FUNCTION pACastRhs8960_ACR8960:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8961_AAT8961;
		myrec^.arg2:=pADyadicValue8969_ADV8969;
		 pACastRhs8960_ACR8960:=myrec;
		END;
	FUNCTION pARhsValue8959_ARV8959:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8960_ACR8960;
		 pARhsValue8959_ARV8959:=myrec;
		END;
	FUNCTION pAAssign8946_AA8946:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue8959_ARV8959;
		myrec^.dest:=pARefcastRefval8947_ARR8947;
		 pAAssign8946_AA8946:=myrec;
		END;
	FUNCTION pAAssignMeaning8945_AAM8945:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign8946_AA8946;
		 pAAssignMeaning8945_AAM8945:=myrec;
		END;
	FUNCTION pAAssemblypattern9000_AA9000:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'paddw ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern9000_AA9000:=list;
		END;
	FUNCTION pAAssemblesto8999_AA8999:pprintlist;
	begin
		pAAssemblesto8999_AA8999:=pAAssemblypattern9000_AA9000;
		END;
	FUNCTION pASideeffects9005_AS9005:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects9005_AS9005:=nil;
		 pASideeffects9005_AS9005:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond9006_AUP9006:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond9006_AUP9006:=nil;
		 pAUnconditionalPrecond9006_AUP9006:=myrec;
		END;
	FUNCTION PADDW_PADDW:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patim4reg_4;
		params^[1]:=patmrmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning8945_AAM8945;
		matchedAssembler:=pAAssemblesto8999_AA8999;
		END;
		PADDW_PADDW:=myrec;
	END;
	FUNCTION pATypeid9009_AT9009:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im8reg  ilcg.pattern@1977d63}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9009_AT9009:=myrec;
		END;
	FUNCTION pATypeid9011_AT9011:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@18adce0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9011_AT9011:=myrec;
		END;
	FUNCTION pAInt8Signed9021_AI8S9021:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed9021_AI8S9021:=myrec;
		END;
	FUNCTION pASignedTformat9020_AST9020:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed9021_AI8S9021;
		 pASignedTformat9020_AST9020:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9019_ATP9019:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype9019_ATP9019:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9018_APT9018:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9018_APT9018:=nil;
		 pAPredeclaredtypeTypeprim9018_APT9018:=myrec;
		END;
	FUNCTION pAOptionalsign9024_AO9024:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9024_AO9024:=nil;
		 pAOptionalsign9024_AO9024:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9023_AIN9023:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9023_AIN9023:=myrec;
		END;
	FUNCTION pAArray9022_AA9022:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9022_AA9022:=nil;
		 pAArray9022_AA9022:=myrec;
		END;
	FUNCTION pAArrayType9017_AAT9017:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType9017_AAT9017:=myrec;
		END;
	FUNCTION pAReference9016_AR9016:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType9017_AAT9017;
		 pAReference9016_AR9016:=myrec;
		END;
	FUNCTION pAReftypeType9015_ART9015:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference9016_AR9016;
		 pAReftypeType9015_ART9015:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc9025_AIL9025:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9025_AIL9025:=myrec;
		END;
		(*! try to cast to type: ref int8 vector ( 8 )*)
	FUNCTION pARefcastRefval9014_ARR9014:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType9015_ART9015;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc9025_AIL9025;
		 pARefcastRefval9014_ARR9014:=myrec;
		END;
	FUNCTION pAInt8Signed9032_AI8S9032:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed9032_AI8S9032:=myrec;
		END;
	FUNCTION pASignedTformat9031_AST9031:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed9032_AI8S9032;
		 pASignedTformat9031_AST9031:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9030_ATP9030:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype9030_ATP9030:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9029_APT9029:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9029_APT9029:=nil;
		 pAPredeclaredtypeTypeprim9029_APT9029:=myrec;
		END;
	FUNCTION pAOptionalsign9035_AO9035:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9035_AO9035:=nil;
		 pAOptionalsign9035_AO9035:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9034_AIN9034:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9034_AIN9034:=myrec;
		END;
	FUNCTION pAArray9033_AA9033:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9033_AA9033:=nil;
		 pAArray9033_AA9033:=myrec;
		END;
	FUNCTION pAArrayType9028_AAT9028:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType9028_AAT9028:=myrec;
		END;
	FUNCTION pAPlusDyadic9037_APD9037:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic9037_APD9037:=myrec;
		END;
	FUNCTION pAInt8Signed9044_AI8S9044:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed9044_AI8S9044:=myrec;
		END;
	FUNCTION pASignedTformat9043_AST9043:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed9044_AI8S9044;
		 pASignedTformat9043_AST9043:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9042_ATP9042:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype9042_ATP9042:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9041_APT9041:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9041_APT9041:=nil;
		 pAPredeclaredtypeTypeprim9041_APT9041:=myrec;
		END;
	FUNCTION pAOptionalsign9047_AO9047:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9047_AO9047:=nil;
		 pAOptionalsign9047_AO9047:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9046_AIN9046:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9046_AIN9046:=myrec;
		END;
	FUNCTION pAArray9045_AA9045:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9045_AA9045:=nil;
		 pAArray9045_AA9045:=myrec;
		END;
	FUNCTION pAArrayType9040_AAT9040:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType9040_AAT9040:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc9051_AIL9051:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9051_AIL9051:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9050_AR9050:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9051_AIL9051;
		 pARefval9050_AR9050:=myrec;
		END;
	FUNCTION pADerefRhs9049_ADR9049:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9050_AR9050;
		 pADerefRhs9049_ADR9049:=myrec;
		END;
	FUNCTION pARhsValue9048_ARV9048:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9049_ADR9049;
		 pARhsValue9048_ARV9048:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs9039_ACR9039:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9040_AAT9040;
		myrec^.arg2:=pARhsValue9048_ARV9048;
		 pACastRhs9039_ACR9039:=myrec;
		END;
	FUNCTION pARhsValue9038_ARV9038:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9039_ACR9039;
		 pARhsValue9038_ARV9038:=myrec;
		END;
	FUNCTION pAInt8Signed9058_AI8S9058:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed9058_AI8S9058:=myrec;
		END;
	FUNCTION pASignedTformat9057_AST9057:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed9058_AI8S9058;
		 pASignedTformat9057_AST9057:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9056_ATP9056:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype9056_ATP9056:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9055_APT9055:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9055_APT9055:=nil;
		 pAPredeclaredtypeTypeprim9055_APT9055:=myrec;
		END;
	FUNCTION pAOptionalsign9061_AO9061:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9061_AO9061:=nil;
		 pAOptionalsign9061_AO9061:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9060_AIN9060:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9060_AIN9060:=myrec;
		END;
	FUNCTION pAArray9059_AA9059:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9059_AA9059:=nil;
		 pAArray9059_AA9059:=myrec;
		END;
	FUNCTION pAArrayType9054_AAT9054:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType9054_AAT9054:=myrec;
		END;
		(*! Match ma *)
	FUNCTION pAIdLoc9065_AIL9065:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc9065_AIL9065:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9064_AR9064:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9065_AIL9065;
		 pARefval9064_AR9064:=myrec;
		END;
	FUNCTION pADerefRhs9063_ADR9063:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9064_AR9064;
		 pADerefRhs9063_ADR9063:=myrec;
		END;
	FUNCTION pARhsValue9062_ARV9062:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9063_ADR9063;
		 pARhsValue9062_ARV9062:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs9053_ACR9053:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9054_AAT9054;
		myrec^.arg2:=pARhsValue9062_ARV9062;
		 pACastRhs9053_ACR9053:=myrec;
		END;
	FUNCTION pARhsValue9052_ARV9052:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9053_ACR9053;
		 pARhsValue9052_ARV9052:=myrec;
		END;
	FUNCTION pADyadicValue9036_ADV9036:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue9038_ARV9038;
		myrec^.arg2:=pARhsValue9052_ARV9052;
		myrec^.fn:=pAPlusDyadic9037_APD9037;
		 pADyadicValue9036_ADV9036:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs9027_ACR9027:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9028_AAT9028;
		myrec^.arg2:=pADyadicValue9036_ADV9036;
		 pACastRhs9027_ACR9027:=myrec;
		END;
	FUNCTION pARhsValue9026_ARV9026:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9027_ACR9027;
		 pARhsValue9026_ARV9026:=myrec;
		END;
	FUNCTION pAAssign9013_AA9013:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue9026_ARV9026;
		myrec^.dest:=pARefcastRefval9014_ARR9014;
		 pAAssign9013_AA9013:=myrec;
		END;
	FUNCTION pAAssignMeaning9012_AAM9012:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign9013_AA9013;
		 pAAssignMeaning9012_AAM9012:=myrec;
		END;
	FUNCTION pAAssemblypattern9067_AA9067:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'paddb ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern9067_AA9067:=list;
		END;
	FUNCTION pAAssemblesto9066_AA9066:pprintlist;
	begin
		pAAssemblesto9066_AA9066:=pAAssemblypattern9067_AA9067;
		END;
	FUNCTION pASideeffects9072_AS9072:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects9072_AS9072:=nil;
		 pASideeffects9072_AS9072:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond9073_AUP9073:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond9073_AUP9073:=nil;
		 pAUnconditionalPrecond9073_AUP9073:=myrec;
		END;
	FUNCTION PADDB_PADDB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patim8reg_8;
		params^[1]:=patmrmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning9012_AAM9012;
		matchedAssembler:=pAAssemblesto9066_AA9066;
		END;
		PADDB_PADDB:=myrec;
	END;
	FUNCTION pAEqOperator9077_AEO9077:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAEqOperator9077_AEO9077:=nil;
		 pAEqOperator9077_AEO9077:=myrec;
		END;
	FUNCTION pAGtOperator9081_AGO9081:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAGtOperator9081_AGO9081:=nil;
		 pAGtOperator9081_AGO9081:=myrec;
		END;
	FUNCTION pATypeid9086_AT9086:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ meq  ilcg.Operation@17469af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9086_AT9086:=myrec;
		END;
	FUNCTION pATypeidType9085_ATT9085:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9086_AT9086;
		 pATypeidType9085_ATT9085:=myrec;
		END;
	FUNCTION pATypeid9088_AT9088:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mgt  ilcg.Operation@109fbf}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9088_AT9088:=myrec;
		END;
	FUNCTION pATypeidType9087_ATT9087:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9088_AT9088;
		 pATypeidType9087_ATT9087:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl9084_AAP9084:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 312;
		myrec^.last:= 313;
		 pAAlternativesPatterndecl9084_AAP9084:=myrec;
		END;
	FUNCTION pATypeid9091_AT9091:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9091_AT9091:=myrec;
		END;
	FUNCTION pATypeid9093_AT9093:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@18adce0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9093_AT9093:=myrec;
		END;
	FUNCTION pATypeid9095_AT9095:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mcondition  ilcg.pattern@141038c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9095_AT9095:=myrec;
		END;
	FUNCTION pAOctetFormat9104_AOF9104:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat9104_AOF9104:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype9103_AFP9103:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype9103_AFP9103:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9102_APT9102:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9102_APT9102:=nil;
		 pAPredeclaredtypeTypeprim9102_APT9102:=myrec;
		END;
	FUNCTION pAOptionalsign9107_AO9107:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9107_AO9107:=nil;
		 pAOptionalsign9107_AO9107:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9106_AIN9106:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9106_AIN9106:=myrec;
		END;
	FUNCTION pAArray9105_AA9105:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9105_AA9105:=nil;
		 pAArray9105_AA9105:=myrec;
		END;
	FUNCTION pAArrayType9101_AAT9101:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(foctet ,8 );
		 pAArrayType9101_AAT9101:=myrec;
		END;
	FUNCTION pAReference9100_AR9100:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType9101_AAT9101;
		 pAReference9100_AR9100:=myrec;
		END;
	FUNCTION pAReftypeType9099_ART9099:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference9100_AR9100;
		 pAReftypeType9099_ART9099:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc9108_AIL9108:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9108_AIL9108:=myrec;
		END;
		(*! try to cast to type: ref octet vector ( 8 )*)
	FUNCTION pARefcastRefval9098_ARR9098:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType9099_ART9099;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc9108_AIL9108;
		 pARefcastRefval9098_ARR9098:=myrec;
		END;
	FUNCTION pAOctetFormat9114_AOF9114:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat9114_AOF9114:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype9113_AFP9113:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype9113_AFP9113:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9112_APT9112:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9112_APT9112:=nil;
		 pAPredeclaredtypeTypeprim9112_APT9112:=myrec;
		END;
	FUNCTION pAOptionalsign9117_AO9117:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9117_AO9117:=nil;
		 pAOptionalsign9117_AO9117:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9116_AIN9116:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9116_AIN9116:=myrec;
		END;
	FUNCTION pAArray9115_AA9115:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9115_AA9115:=nil;
		 pAArray9115_AA9115:=myrec;
		END;
	FUNCTION pAArrayType9111_AAT9111:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(foctet ,8 );
		 pAArrayType9111_AAT9111:=myrec;
		END;
	FUNCTION pAIdentifierDyadic9119_AID9119:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdentifierDyadic9119_AID9119:=myrec;
		END;
	FUNCTION pAOctetFormat9125_AOF9125:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat9125_AOF9125:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype9124_AFP9124:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype9124_AFP9124:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9123_APT9123:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9123_APT9123:=nil;
		 pAPredeclaredtypeTypeprim9123_APT9123:=myrec;
		END;
	FUNCTION pAOptionalsign9128_AO9128:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9128_AO9128:=nil;
		 pAOptionalsign9128_AO9128:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9127_AIN9127:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9127_AIN9127:=myrec;
		END;
	FUNCTION pAArray9126_AA9126:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9126_AA9126:=nil;
		 pAArray9126_AA9126:=myrec;
		END;
	FUNCTION pAArrayType9122_AAT9122:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(foctet ,8 );
		 pAArrayType9122_AAT9122:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc9132_AIL9132:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9132_AIL9132:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9131_AR9131:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9132_AIL9132;
		 pARefval9131_AR9131:=myrec;
		END;
	FUNCTION pADerefRhs9130_ADR9130:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9131_AR9131;
		 pADerefRhs9130_ADR9130:=myrec;
		END;
	FUNCTION pARhsValue9129_ARV9129:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9130_ADR9130;
		 pARhsValue9129_ARV9129:=myrec;
		END;
		(*! try to cast to type: octet vector ( 8 )*)
	FUNCTION pACastRhs9121_ACR9121:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9122_AAT9122;
		myrec^.arg2:=pARhsValue9129_ARV9129;
		 pACastRhs9121_ACR9121:=myrec;
		END;
	FUNCTION pARhsValue9120_ARV9120:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9121_ACR9121;
		 pARhsValue9120_ARV9120:=myrec;
		END;
	FUNCTION pAOctetFormat9138_AOF9138:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat9138_AOF9138:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype9137_AFP9137:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype9137_AFP9137:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9136_APT9136:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9136_APT9136:=nil;
		 pAPredeclaredtypeTypeprim9136_APT9136:=myrec;
		END;
	FUNCTION pAOptionalsign9141_AO9141:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9141_AO9141:=nil;
		 pAOptionalsign9141_AO9141:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9140_AIN9140:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9140_AIN9140:=myrec;
		END;
	FUNCTION pAArray9139_AA9139:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9139_AA9139:=nil;
		 pAArray9139_AA9139:=myrec;
		END;
	FUNCTION pAArrayType9135_AAT9135:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(foctet ,8 );
		 pAArrayType9135_AAT9135:=myrec;
		END;
		(*! Match ma *)
	FUNCTION pAIdLoc9145_AIL9145:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc9145_AIL9145:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9144_AR9144:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9145_AIL9145;
		 pARefval9144_AR9144:=myrec;
		END;
	FUNCTION pADerefRhs9143_ADR9143:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9144_AR9144;
		 pADerefRhs9143_ADR9143:=myrec;
		END;
	FUNCTION pARhsValue9142_ARV9142:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9143_ADR9143;
		 pARhsValue9142_ARV9142:=myrec;
		END;
		(*! try to cast to type: octet vector ( 8 )*)
	FUNCTION pACastRhs9134_ACR9134:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9135_AAT9135;
		myrec^.arg2:=pARhsValue9142_ARV9142;
		 pACastRhs9134_ACR9134:=myrec;
		END;
	FUNCTION pARhsValue9133_ARV9133:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9134_ACR9134;
		 pARhsValue9133_ARV9133:=myrec;
		END;
	FUNCTION pADyadicValue9118_ADV9118:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue9120_ARV9120;
		myrec^.arg2:=pARhsValue9133_ARV9133;
		myrec^.fn:=pAIdentifierDyadic9119_AID9119;
		 pADyadicValue9118_ADV9118:=myrec;
		END;
		(*! try to cast to type: octet vector ( 8 )*)
	FUNCTION pACastRhs9110_ACR9110:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9111_AAT9111;
		myrec^.arg2:=pADyadicValue9118_ADV9118;
		 pACastRhs9110_ACR9110:=myrec;
		END;
	FUNCTION pARhsValue9109_ARV9109:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9110_ACR9110;
		 pARhsValue9109_ARV9109:=myrec;
		END;
	FUNCTION pAAssign9097_AA9097:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue9109_ARV9109;
		myrec^.dest:=pARefcastRefval9098_ARR9098;
		 pAAssign9097_AA9097:=myrec;
		END;
	FUNCTION pAAssignMeaning9096_AAM9096:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign9097_AA9097;
		 pAAssignMeaning9096_AAM9096:=myrec;
		END;
	FUNCTION pAAssemblypattern9147_AA9147:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'pcmp' );
		pappendp(list,2);
		pappends(list,'b ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern9147_AA9147:=list;
		END;
	FUNCTION pAAssemblesto9146_AA9146:pprintlist;
	begin
		pAAssemblesto9146_AA9146:=pAAssemblypattern9147_AA9147;
		END;
	FUNCTION pASideeffects9154_AS9154:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects9154_AS9154:=nil;
		 pASideeffects9154_AS9154:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond9155_AUP9155:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond9155_AUP9155:=nil;
		 pAUnconditionalPrecond9155_AUP9155:=myrec;
		END;
	FUNCTION CMPPB_CMPPB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		params^[2]:=patmcondition_;
		params^[1]:=patmrmaddrmode_;
		paramcount:=4;
		meaning:=pAAssignMeaning9096_AAM9096;
		matchedAssembler:=pAAssemblesto9146_AA9146;
		END;
		CMPPB_CMPPB:=myrec;
	END;
	FUNCTION pATypeid9158_AT9158:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9158_AT9158:=myrec;
		END;
	FUNCTION pATypeid9160_AT9160:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@18adce0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9160_AT9160:=myrec;
		END;
	FUNCTION pATypeid9162_AT9162:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mcondition  ilcg.pattern@141038c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9162_AT9162:=myrec;
		END;
	FUNCTION pAOctetFormat9171_AOF9171:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat9171_AOF9171:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype9170_AFP9170:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype9170_AFP9170:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9169_APT9169:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9169_APT9169:=nil;
		 pAPredeclaredtypeTypeprim9169_APT9169:=myrec;
		END;
	FUNCTION pAOptionalsign9174_AO9174:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9174_AO9174:=nil;
		 pAOptionalsign9174_AO9174:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9173_AIN9173:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9173_AIN9173:=myrec;
		END;
	FUNCTION pAArray9172_AA9172:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9172_AA9172:=nil;
		 pAArray9172_AA9172:=myrec;
		END;
	FUNCTION pAArrayType9168_AAT9168:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(foctet ,8 );
		 pAArrayType9168_AAT9168:=myrec;
		END;
	FUNCTION pAReference9167_AR9167:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType9168_AAT9168;
		 pAReference9167_AR9167:=myrec;
		END;
	FUNCTION pAReftypeType9166_ART9166:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference9167_AR9167;
		 pAReftypeType9166_ART9166:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc9175_AIL9175:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9175_AIL9175:=myrec;
		END;
		(*! try to cast to type: ref octet vector ( 8 )*)
	FUNCTION pARefcastRefval9165_ARR9165:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType9166_ART9166;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc9175_AIL9175;
		 pARefcastRefval9165_ARR9165:=myrec;
		END;
	FUNCTION pAOctetFormat9181_AOF9181:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat9181_AOF9181:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype9180_AFP9180:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype9180_AFP9180:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9179_APT9179:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9179_APT9179:=nil;
		 pAPredeclaredtypeTypeprim9179_APT9179:=myrec;
		END;
	FUNCTION pAOptionalsign9184_AO9184:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9184_AO9184:=nil;
		 pAOptionalsign9184_AO9184:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9183_AIN9183:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9183_AIN9183:=myrec;
		END;
	FUNCTION pAArray9182_AA9182:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9182_AA9182:=nil;
		 pAArray9182_AA9182:=myrec;
		END;
	FUNCTION pAArrayType9178_AAT9178:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(foctet ,8 );
		 pAArrayType9178_AAT9178:=myrec;
		END;
	FUNCTION pALtDyadic9186_ALD9186:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcplt;
		 pALtDyadic9186_ALD9186:=myrec;
		END;
	FUNCTION pAOctetFormat9192_AOF9192:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat9192_AOF9192:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype9191_AFP9191:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype9191_AFP9191:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9190_APT9190:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9190_APT9190:=nil;
		 pAPredeclaredtypeTypeprim9190_APT9190:=myrec;
		END;
	FUNCTION pAOptionalsign9195_AO9195:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9195_AO9195:=nil;
		 pAOptionalsign9195_AO9195:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9194_AIN9194:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9194_AIN9194:=myrec;
		END;
	FUNCTION pAArray9193_AA9193:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9193_AA9193:=nil;
		 pAArray9193_AA9193:=myrec;
		END;
	FUNCTION pAArrayType9189_AAT9189:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(foctet ,8 );
		 pAArrayType9189_AAT9189:=myrec;
		END;
		(*! Match ma *)
	FUNCTION pAIdLoc9199_AIL9199:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc9199_AIL9199:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9198_AR9198:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9199_AIL9199;
		 pARefval9198_AR9198:=myrec;
		END;
	FUNCTION pADerefRhs9197_ADR9197:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9198_AR9198;
		 pADerefRhs9197_ADR9197:=myrec;
		END;
	FUNCTION pARhsValue9196_ARV9196:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9197_ADR9197;
		 pARhsValue9196_ARV9196:=myrec;
		END;
		(*! try to cast to type: octet vector ( 8 )*)
	FUNCTION pACastRhs9188_ACR9188:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9189_AAT9189;
		myrec^.arg2:=pARhsValue9196_ARV9196;
		 pACastRhs9188_ACR9188:=myrec;
		END;
	FUNCTION pARhsValue9187_ARV9187:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9188_ACR9188;
		 pARhsValue9187_ARV9187:=myrec;
		END;
	FUNCTION pAOctetFormat9205_AOF9205:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat9205_AOF9205:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype9204_AFP9204:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype9204_AFP9204:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9203_APT9203:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9203_APT9203:=nil;
		 pAPredeclaredtypeTypeprim9203_APT9203:=myrec;
		END;
	FUNCTION pAOptionalsign9208_AO9208:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9208_AO9208:=nil;
		 pAOptionalsign9208_AO9208:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9207_AIN9207:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9207_AIN9207:=myrec;
		END;
	FUNCTION pAArray9206_AA9206:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9206_AA9206:=nil;
		 pAArray9206_AA9206:=myrec;
		END;
	FUNCTION pAArrayType9202_AAT9202:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(foctet ,8 );
		 pAArrayType9202_AAT9202:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc9212_AIL9212:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9212_AIL9212:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9211_AR9211:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9212_AIL9212;
		 pARefval9211_AR9211:=myrec;
		END;
	FUNCTION pADerefRhs9210_ADR9210:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9211_AR9211;
		 pADerefRhs9210_ADR9210:=myrec;
		END;
	FUNCTION pARhsValue9209_ARV9209:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9210_ADR9210;
		 pARhsValue9209_ARV9209:=myrec;
		END;
		(*! try to cast to type: octet vector ( 8 )*)
	FUNCTION pACastRhs9201_ACR9201:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9202_AAT9202;
		myrec^.arg2:=pARhsValue9209_ARV9209;
		 pACastRhs9201_ACR9201:=myrec;
		END;
	FUNCTION pARhsValue9200_ARV9200:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9201_ACR9201;
		 pARhsValue9200_ARV9200:=myrec;
		END;
	FUNCTION pADyadicValue9185_ADV9185:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue9187_ARV9187;
		myrec^.arg2:=pARhsValue9200_ARV9200;
		myrec^.fn:=pALtDyadic9186_ALD9186;
		 pADyadicValue9185_ADV9185:=myrec;
		END;
		(*! try to cast to type: octet vector ( 8 )*)
	FUNCTION pACastRhs9177_ACR9177:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9178_AAT9178;
		myrec^.arg2:=pADyadicValue9185_ADV9185;
		 pACastRhs9177_ACR9177:=myrec;
		END;
	FUNCTION pARhsValue9176_ARV9176:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9177_ACR9177;
		 pARhsValue9176_ARV9176:=myrec;
		END;
	FUNCTION pAAssign9164_AA9164:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue9176_ARV9176;
		myrec^.dest:=pARefcastRefval9165_ARR9165;
		 pAAssign9164_AA9164:=myrec;
		END;
	FUNCTION pAAssignMeaning9163_AAM9163:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign9164_AA9164;
		 pAAssignMeaning9163_AAM9163:=myrec;
		END;
	FUNCTION pAAssemblypattern9214_AA9214:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'pcmpgtb ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern9214_AA9214:=list;
		END;
	FUNCTION pAAssemblesto9213_AA9213:pprintlist;
	begin
		pAAssemblesto9213_AA9213:=pAAssemblypattern9214_AA9214;
		END;
	FUNCTION pASideeffects9219_AS9219:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects9219_AS9219:=nil;
		 pASideeffects9219_AS9219:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond9220_AUP9220:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond9220_AUP9220:=nil;
		 pAUnconditionalPrecond9220_AUP9220:=myrec;
		END;
	FUNCTION CMPPBR_CMPPBR:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		params^[2]:=patmcondition_;
		params^[1]:=patmrmaddrmode_;
		paramcount:=4;
		meaning:=pAAssignMeaning9163_AAM9163;
		matchedAssembler:=pAAssemblesto9213_AA9213;
		END;
		CMPPBR_CMPPBR:=myrec;
	END;
	FUNCTION pATypeid9223_AT9223:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im4reg  ilcg.pattern@9c7650}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9223_AT9223:=myrec;
		END;
	FUNCTION pATypeid9225_AT9225:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im4reg  ilcg.pattern@9c7650}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9225_AT9225:=myrec;
		END;
	FUNCTION pATypeid9227_AT9227:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mcondition  ilcg.pattern@141038c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9227_AT9227:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc9231_AIL9231:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9231_AIL9231:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9230_AR9230:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9231_AIL9231;
		 pARefval9230_AR9230:=myrec;
		END;
	FUNCTION pAExtendMonadic9233_AEM9233:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpEXTEND;
		 pAExtendMonadic9233_AEM9233:=myrec;
		END;
	FUNCTION pAInt8Signed9240_AI8S9240:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed9240_AI8S9240:=myrec;
		END;
	FUNCTION pASignedTformat9239_AST9239:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed9240_AI8S9240;
		 pASignedTformat9239_AST9239:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9238_ATP9238:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype9238_ATP9238:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9237_APT9237:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9237_APT9237:=nil;
		 pAPredeclaredtypeTypeprim9237_APT9237:=myrec;
		END;
	FUNCTION pAOptionalsign9243_AO9243:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9243_AO9243:=nil;
		 pAOptionalsign9243_AO9243:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9242_AIN9242:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber9242_AIN9242:=myrec;
		END;
	FUNCTION pAArray9241_AA9241:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9241_AA9241:=nil;
		 pAArray9241_AA9241:=myrec;
		END;
	FUNCTION pAArrayType9236_AAT9236:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,4 );
		 pAArrayType9236_AAT9236:=myrec;
		END;
	FUNCTION pAIdentifierDyadic9245_AID9245:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdentifierDyadic9245_AID9245:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc9249_AIL9249:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9249_AIL9249:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9248_AR9248:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9249_AIL9249;
		 pARefval9248_AR9248:=myrec;
		END;
	FUNCTION pADerefRhs9247_ADR9247:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9248_AR9248;
		 pADerefRhs9247_ADR9247:=myrec;
		END;
	FUNCTION pARhsValue9246_ARV9246:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9247_ADR9247;
		 pARhsValue9246_ARV9246:=myrec;
		END;
		(*! Match ma *)
	FUNCTION pAIdLoc9253_AIL9253:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc9253_AIL9253:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9252_AR9252:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9253_AIL9253;
		 pARefval9252_AR9252:=myrec;
		END;
	FUNCTION pADerefRhs9251_ADR9251:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9252_AR9252;
		 pADerefRhs9251_ADR9251:=myrec;
		END;
	FUNCTION pARhsValue9250_ARV9250:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9251_ADR9251;
		 pARhsValue9250_ARV9250:=myrec;
		END;
	FUNCTION pADyadicValue9244_ADV9244:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue9246_ARV9246;
		myrec^.arg2:=pARhsValue9250_ARV9250;
		myrec^.fn:=pAIdentifierDyadic9245_AID9245;
		 pADyadicValue9244_ADV9244:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 4 )*)
	FUNCTION pACastRhs9235_ACR9235:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9236_AAT9236;
		myrec^.arg2:=pADyadicValue9244_ADV9244;
		 pACastRhs9235_ACR9235:=myrec;
		END;
	FUNCTION pARhsValue9234_ARV9234:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9235_ACR9235;
		 pARhsValue9234_ARV9234:=myrec;
		END;
	FUNCTION pAMonadicValue9232_AMV9232:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue9234_ARV9234;
		myrec^.fn:=pAExtendMonadic9233_AEM9233;
		 pAMonadicValue9232_AMV9232:=myrec;
		END;
	FUNCTION pAAssign9229_AA9229:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pAMonadicValue9232_AMV9232;
		myrec^.dest:=pARefval9230_AR9230;
		 pAAssign9229_AA9229:=myrec;
		END;
	FUNCTION pAAssignMeaning9228_AAM9228:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign9229_AA9229;
		 pAAssignMeaning9228_AAM9228:=myrec;
		END;
	FUNCTION pAAssemblypattern9255_AA9255:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'pcmp' );
		pappendp(list,2);
		pappends(list,'w ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern9255_AA9255:=list;
		END;
	FUNCTION pAAssemblesto9254_AA9254:pprintlist;
	begin
		pAAssemblesto9254_AA9254:=pAAssemblypattern9255_AA9255;
		END;
	FUNCTION pASideeffects9262_AS9262:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects9262_AS9262:=nil;
		 pASideeffects9262_AS9262:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond9263_AUP9263:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond9263_AUP9263:=nil;
		 pAUnconditionalPrecond9263_AUP9263:=myrec;
		END;
	FUNCTION CMPPW_CMPPW:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patim4reg_4;
		params^[2]:=patmcondition_;
		params^[1]:=patim4reg_4;
		paramcount:=4;
		meaning:=pAAssignMeaning9228_AAM9228;
		matchedAssembler:=pAAssemblesto9254_AA9254;
		END;
		CMPPW_CMPPW:=myrec;
	END;
	FUNCTION pATypeid9266_AT9266:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im4reg  ilcg.pattern@9c7650}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9266_AT9266:=myrec;
		END;
	FUNCTION pATypeid9268_AT9268:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im4reg  ilcg.pattern@9c7650}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9268_AT9268:=myrec;
		END;
	FUNCTION pATypeid9270_AT9270:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mcondition  ilcg.pattern@141038c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9270_AT9270:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc9274_AIL9274:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9274_AIL9274:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9273_AR9273:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9274_AIL9274;
		 pARefval9273_AR9273:=myrec;
		END;
	FUNCTION pAExtendMonadic9276_AEM9276:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpEXTEND;
		 pAExtendMonadic9276_AEM9276:=myrec;
		END;
	FUNCTION pAInt8Signed9283_AI8S9283:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed9283_AI8S9283:=myrec;
		END;
	FUNCTION pASignedTformat9282_AST9282:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed9283_AI8S9283;
		 pASignedTformat9282_AST9282:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9281_ATP9281:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype9281_ATP9281:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9280_APT9280:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9280_APT9280:=nil;
		 pAPredeclaredtypeTypeprim9280_APT9280:=myrec;
		END;
	FUNCTION pAOptionalsign9286_AO9286:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9286_AO9286:=nil;
		 pAOptionalsign9286_AO9286:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9285_AIN9285:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber9285_AIN9285:=myrec;
		END;
	FUNCTION pAArray9284_AA9284:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9284_AA9284:=nil;
		 pAArray9284_AA9284:=myrec;
		END;
	FUNCTION pAArrayType9279_AAT9279:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,4 );
		 pAArrayType9279_AAT9279:=myrec;
		END;
	FUNCTION pALtDyadic9288_ALD9288:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcplt;
		 pALtDyadic9288_ALD9288:=myrec;
		END;
		(*! Match ma *)
	FUNCTION pAIdLoc9292_AIL9292:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc9292_AIL9292:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9291_AR9291:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9292_AIL9292;
		 pARefval9291_AR9291:=myrec;
		END;
	FUNCTION pADerefRhs9290_ADR9290:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9291_AR9291;
		 pADerefRhs9290_ADR9290:=myrec;
		END;
	FUNCTION pARhsValue9289_ARV9289:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9290_ADR9290;
		 pARhsValue9289_ARV9289:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc9296_AIL9296:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9296_AIL9296:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9295_AR9295:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9296_AIL9296;
		 pARefval9295_AR9295:=myrec;
		END;
	FUNCTION pADerefRhs9294_ADR9294:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9295_AR9295;
		 pADerefRhs9294_ADR9294:=myrec;
		END;
	FUNCTION pARhsValue9293_ARV9293:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9294_ADR9294;
		 pARhsValue9293_ARV9293:=myrec;
		END;
	FUNCTION pADyadicValue9287_ADV9287:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue9289_ARV9289;
		myrec^.arg2:=pARhsValue9293_ARV9293;
		myrec^.fn:=pALtDyadic9288_ALD9288;
		 pADyadicValue9287_ADV9287:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 4 )*)
	FUNCTION pACastRhs9278_ACR9278:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9279_AAT9279;
		myrec^.arg2:=pADyadicValue9287_ADV9287;
		 pACastRhs9278_ACR9278:=myrec;
		END;
	FUNCTION pARhsValue9277_ARV9277:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9278_ACR9278;
		 pARhsValue9277_ARV9277:=myrec;
		END;
	FUNCTION pAMonadicValue9275_AMV9275:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue9277_ARV9277;
		myrec^.fn:=pAExtendMonadic9276_AEM9276;
		 pAMonadicValue9275_AMV9275:=myrec;
		END;
	FUNCTION pAAssign9272_AA9272:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pAMonadicValue9275_AMV9275;
		myrec^.dest:=pARefval9273_AR9273;
		 pAAssign9272_AA9272:=myrec;
		END;
	FUNCTION pAAssignMeaning9271_AAM9271:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign9272_AA9272;
		 pAAssignMeaning9271_AAM9271:=myrec;
		END;
	FUNCTION pAAssemblypattern9298_AA9298:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'pcmpgtw ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern9298_AA9298:=list;
		END;
	FUNCTION pAAssemblesto9297_AA9297:pprintlist;
	begin
		pAAssemblesto9297_AA9297:=pAAssemblypattern9298_AA9298;
		END;
	FUNCTION pASideeffects9303_AS9303:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects9303_AS9303:=nil;
		 pASideeffects9303_AS9303:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond9304_AUP9304:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond9304_AUP9304:=nil;
		 pAUnconditionalPrecond9304_AUP9304:=myrec;
		END;
	FUNCTION CMPPWR_CMPPWR:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patim4reg_4;
		params^[2]:=patmcondition_;
		params^[1]:=patim4reg_4;
		paramcount:=4;
		meaning:=pAAssignMeaning9271_AAM9271;
		matchedAssembler:=pAAssemblesto9297_AA9297;
		END;
		CMPPWR_CMPPWR:=myrec;
	END;
	FUNCTION pATypeid9307_AT9307:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im2reg  ilcg.pattern@18374c9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9307_AT9307:=myrec;
		END;
	FUNCTION pATypeid9309_AT9309:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im2reg  ilcg.pattern@18374c9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9309_AT9309:=myrec;
		END;
	FUNCTION pATypeid9311_AT9311:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mcondition  ilcg.pattern@141038c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9311_AT9311:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc9315_AIL9315:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9315_AIL9315:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9314_AR9314:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9315_AIL9315;
		 pARefval9314_AR9314:=myrec;
		END;
	FUNCTION pAExtendMonadic9317_AEM9317:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpEXTEND;
		 pAExtendMonadic9317_AEM9317:=myrec;
		END;
	FUNCTION pAInt8Signed9324_AI8S9324:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed9324_AI8S9324:=myrec;
		END;
	FUNCTION pASignedTformat9323_AST9323:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed9324_AI8S9324;
		 pASignedTformat9323_AST9323:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9322_ATP9322:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype9322_ATP9322:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9321_APT9321:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9321_APT9321:=nil;
		 pAPredeclaredtypeTypeprim9321_APT9321:=myrec;
		END;
	FUNCTION pAOptionalsign9327_AO9327:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9327_AO9327:=nil;
		 pAOptionalsign9327_AO9327:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9326_AIN9326:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber9326_AIN9326:=myrec;
		END;
	FUNCTION pAArray9325_AA9325:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9325_AA9325:=nil;
		 pAArray9325_AA9325:=myrec;
		END;
	FUNCTION pAArrayType9320_AAT9320:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,2 );
		 pAArrayType9320_AAT9320:=myrec;
		END;
	FUNCTION pAIdentifierDyadic9329_AID9329:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdentifierDyadic9329_AID9329:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc9333_AIL9333:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9333_AIL9333:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9332_AR9332:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9333_AIL9333;
		 pARefval9332_AR9332:=myrec;
		END;
	FUNCTION pADerefRhs9331_ADR9331:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9332_AR9332;
		 pADerefRhs9331_ADR9331:=myrec;
		END;
	FUNCTION pARhsValue9330_ARV9330:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9331_ADR9331;
		 pARhsValue9330_ARV9330:=myrec;
		END;
		(*! Match ma *)
	FUNCTION pAIdLoc9337_AIL9337:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc9337_AIL9337:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9336_AR9336:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9337_AIL9337;
		 pARefval9336_AR9336:=myrec;
		END;
	FUNCTION pADerefRhs9335_ADR9335:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9336_AR9336;
		 pADerefRhs9335_ADR9335:=myrec;
		END;
	FUNCTION pARhsValue9334_ARV9334:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9335_ADR9335;
		 pARhsValue9334_ARV9334:=myrec;
		END;
	FUNCTION pADyadicValue9328_ADV9328:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue9330_ARV9330;
		myrec^.arg2:=pARhsValue9334_ARV9334;
		myrec^.fn:=pAIdentifierDyadic9329_AID9329;
		 pADyadicValue9328_ADV9328:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 2 )*)
	FUNCTION pACastRhs9319_ACR9319:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9320_AAT9320;
		myrec^.arg2:=pADyadicValue9328_ADV9328;
		 pACastRhs9319_ACR9319:=myrec;
		END;
	FUNCTION pARhsValue9318_ARV9318:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9319_ACR9319;
		 pARhsValue9318_ARV9318:=myrec;
		END;
	FUNCTION pAMonadicValue9316_AMV9316:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue9318_ARV9318;
		myrec^.fn:=pAExtendMonadic9317_AEM9317;
		 pAMonadicValue9316_AMV9316:=myrec;
		END;
	FUNCTION pAAssign9313_AA9313:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pAMonadicValue9316_AMV9316;
		myrec^.dest:=pARefval9314_AR9314;
		 pAAssign9313_AA9313:=myrec;
		END;
	FUNCTION pAAssignMeaning9312_AAM9312:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign9313_AA9313;
		 pAAssignMeaning9312_AAM9312:=myrec;
		END;
	FUNCTION pAAssemblypattern9339_AA9339:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'pcmp' );
		pappendp(list,2);
		pappends(list,'d ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern9339_AA9339:=list;
		END;
	FUNCTION pAAssemblesto9338_AA9338:pprintlist;
	begin
		pAAssemblesto9338_AA9338:=pAAssemblypattern9339_AA9339;
		END;
	FUNCTION pASideeffects9346_AS9346:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects9346_AS9346:=nil;
		 pASideeffects9346_AS9346:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond9347_AUP9347:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond9347_AUP9347:=nil;
		 pAUnconditionalPrecond9347_AUP9347:=myrec;
		END;
	FUNCTION CMPPD_CMPPD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patim2reg_2;
		params^[2]:=patmcondition_;
		params^[1]:=patim2reg_2;
		paramcount:=4;
		meaning:=pAAssignMeaning9312_AAM9312;
		matchedAssembler:=pAAssemblesto9338_AA9338;
		END;
		CMPPD_CMPPD:=myrec;
	END;
	FUNCTION pATypeid9350_AT9350:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im2reg  ilcg.pattern@18374c9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9350_AT9350:=myrec;
		END;
	FUNCTION pATypeid9352_AT9352:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im2reg  ilcg.pattern@18374c9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9352_AT9352:=myrec;
		END;
	FUNCTION pATypeid9354_AT9354:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mcondition  ilcg.pattern@141038c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9354_AT9354:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc9358_AIL9358:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9358_AIL9358:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9357_AR9357:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9358_AIL9358;
		 pARefval9357_AR9357:=myrec;
		END;
	FUNCTION pAExtendMonadic9360_AEM9360:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpEXTEND;
		 pAExtendMonadic9360_AEM9360:=myrec;
		END;
	FUNCTION pAInt8Signed9367_AI8S9367:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed9367_AI8S9367:=myrec;
		END;
	FUNCTION pASignedTformat9366_AST9366:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed9367_AI8S9367;
		 pASignedTformat9366_AST9366:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9365_ATP9365:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype9365_ATP9365:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9364_APT9364:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9364_APT9364:=nil;
		 pAPredeclaredtypeTypeprim9364_APT9364:=myrec;
		END;
	FUNCTION pAOptionalsign9370_AO9370:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9370_AO9370:=nil;
		 pAOptionalsign9370_AO9370:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9369_AIN9369:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber9369_AIN9369:=myrec;
		END;
	FUNCTION pAArray9368_AA9368:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9368_AA9368:=nil;
		 pAArray9368_AA9368:=myrec;
		END;
	FUNCTION pAArrayType9363_AAT9363:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,2 );
		 pAArrayType9363_AAT9363:=myrec;
		END;
	FUNCTION pALtDyadic9372_ALD9372:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcplt;
		 pALtDyadic9372_ALD9372:=myrec;
		END;
		(*! Match ma *)
	FUNCTION pAIdLoc9376_AIL9376:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc9376_AIL9376:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9375_AR9375:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9376_AIL9376;
		 pARefval9375_AR9375:=myrec;
		END;
	FUNCTION pADerefRhs9374_ADR9374:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9375_AR9375;
		 pADerefRhs9374_ADR9374:=myrec;
		END;
	FUNCTION pARhsValue9373_ARV9373:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9374_ADR9374;
		 pARhsValue9373_ARV9373:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc9380_AIL9380:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9380_AIL9380:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9379_AR9379:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9380_AIL9380;
		 pARefval9379_AR9379:=myrec;
		END;
	FUNCTION pADerefRhs9378_ADR9378:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9379_AR9379;
		 pADerefRhs9378_ADR9378:=myrec;
		END;
	FUNCTION pARhsValue9377_ARV9377:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9378_ADR9378;
		 pARhsValue9377_ARV9377:=myrec;
		END;
	FUNCTION pADyadicValue9371_ADV9371:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue9373_ARV9373;
		myrec^.arg2:=pARhsValue9377_ARV9377;
		myrec^.fn:=pALtDyadic9372_ALD9372;
		 pADyadicValue9371_ADV9371:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 2 )*)
	FUNCTION pACastRhs9362_ACR9362:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9363_AAT9363;
		myrec^.arg2:=pADyadicValue9371_ADV9371;
		 pACastRhs9362_ACR9362:=myrec;
		END;
	FUNCTION pARhsValue9361_ARV9361:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9362_ACR9362;
		 pARhsValue9361_ARV9361:=myrec;
		END;
	FUNCTION pAMonadicValue9359_AMV9359:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue9361_ARV9361;
		myrec^.fn:=pAExtendMonadic9360_AEM9360;
		 pAMonadicValue9359_AMV9359:=myrec;
		END;
	FUNCTION pAAssign9356_AA9356:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pAMonadicValue9359_AMV9359;
		myrec^.dest:=pARefval9357_AR9357;
		 pAAssign9356_AA9356:=myrec;
		END;
	FUNCTION pAAssignMeaning9355_AAM9355:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign9356_AA9356;
		 pAAssignMeaning9355_AAM9355:=myrec;
		END;
	FUNCTION pAAssemblypattern9382_AA9382:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'pcmpgtd ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern9382_AA9382:=list;
		END;
	FUNCTION pAAssemblesto9381_AA9381:pprintlist;
	begin
		pAAssemblesto9381_AA9381:=pAAssemblypattern9382_AA9382;
		END;
	FUNCTION pASideeffects9387_AS9387:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects9387_AS9387:=nil;
		 pASideeffects9387_AS9387:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond9388_AUP9388:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond9388_AUP9388:=nil;
		 pAUnconditionalPrecond9388_AUP9388:=myrec;
		END;
	FUNCTION CMPPDR_CMPPDR:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patim2reg_2;
		params^[2]:=patmcondition_;
		params^[1]:=patim2reg_2;
		paramcount:=4;
		meaning:=pAAssignMeaning9355_AAM9355;
		matchedAssembler:=pAAssemblesto9381_AA9381;
		END;
		CMPPDR_CMPPDR:=myrec;
	END;
	FUNCTION pATypeid9391_AT9391:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9391_AT9391:=myrec;
		END;
	FUNCTION pATypeid9393_AT9393:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@18adce0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9393_AT9393:=myrec;
		END;
	FUNCTION pAUint8Unsigned9403_AU8U9403:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned9403_AU8U9403:=myrec;
		END;
	FUNCTION pAUnsignedTformat9402_AUT9402:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned9403_AU8U9403;
		 pAUnsignedTformat9402_AUT9402:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9401_ATP9401:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype9401_ATP9401:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9400_APT9400:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9400_APT9400:=nil;
		 pAPredeclaredtypeTypeprim9400_APT9400:=myrec;
		END;
	FUNCTION pAOptionalsign9406_AO9406:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9406_AO9406:=nil;
		 pAOptionalsign9406_AO9406:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9405_AIN9405:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9405_AIN9405:=myrec;
		END;
	FUNCTION pAArray9404_AA9404:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9404_AA9404:=nil;
		 pAArray9404_AA9404:=myrec;
		END;
	FUNCTION pAArrayType9399_AAT9399:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType9399_AAT9399:=myrec;
		END;
	FUNCTION pAReference9398_AR9398:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType9399_AAT9399;
		 pAReference9398_AR9398:=myrec;
		END;
	FUNCTION pAReftypeType9397_ART9397:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference9398_AR9398;
		 pAReftypeType9397_ART9397:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc9407_AIL9407:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9407_AIL9407:=myrec;
		END;
		(*! try to cast to type: ref uint8 vector ( 8 )*)
	FUNCTION pARefcastRefval9396_ARR9396:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType9397_ART9397;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc9407_AIL9407;
		 pARefcastRefval9396_ARR9396:=myrec;
		END;
	FUNCTION pAUint8Unsigned9414_AU8U9414:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned9414_AU8U9414:=myrec;
		END;
	FUNCTION pAUnsignedTformat9413_AUT9413:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned9414_AU8U9414;
		 pAUnsignedTformat9413_AUT9413:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9412_ATP9412:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype9412_ATP9412:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9411_APT9411:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9411_APT9411:=nil;
		 pAPredeclaredtypeTypeprim9411_APT9411:=myrec;
		END;
	FUNCTION pAOptionalsign9417_AO9417:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9417_AO9417:=nil;
		 pAOptionalsign9417_AO9417:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9416_AIN9416:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9416_AIN9416:=myrec;
		END;
	FUNCTION pAArray9415_AA9415:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9415_AA9415:=nil;
		 pAArray9415_AA9415:=myrec;
		END;
	FUNCTION pAArrayType9410_AAT9410:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType9410_AAT9410:=myrec;
		END;
	FUNCTION pAPlusDyadic9419_APD9419:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic9419_APD9419:=myrec;
		END;
	FUNCTION pAUint8Unsigned9426_AU8U9426:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned9426_AU8U9426:=myrec;
		END;
	FUNCTION pAUnsignedTformat9425_AUT9425:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned9426_AU8U9426;
		 pAUnsignedTformat9425_AUT9425:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9424_ATP9424:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype9424_ATP9424:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9423_APT9423:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9423_APT9423:=nil;
		 pAPredeclaredtypeTypeprim9423_APT9423:=myrec;
		END;
	FUNCTION pAOptionalsign9429_AO9429:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9429_AO9429:=nil;
		 pAOptionalsign9429_AO9429:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9428_AIN9428:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9428_AIN9428:=myrec;
		END;
	FUNCTION pAArray9427_AA9427:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9427_AA9427:=nil;
		 pAArray9427_AA9427:=myrec;
		END;
	FUNCTION pAArrayType9422_AAT9422:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType9422_AAT9422:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc9433_AIL9433:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9433_AIL9433:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9432_AR9432:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9433_AIL9433;
		 pARefval9432_AR9432:=myrec;
		END;
	FUNCTION pADerefRhs9431_ADR9431:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9432_AR9432;
		 pADerefRhs9431_ADR9431:=myrec;
		END;
	FUNCTION pARhsValue9430_ARV9430:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9431_ADR9431;
		 pARhsValue9430_ARV9430:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs9421_ACR9421:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9422_AAT9422;
		myrec^.arg2:=pARhsValue9430_ARV9430;
		 pACastRhs9421_ACR9421:=myrec;
		END;
	FUNCTION pARhsValue9420_ARV9420:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9421_ACR9421;
		 pARhsValue9420_ARV9420:=myrec;
		END;
	FUNCTION pAUint8Unsigned9440_AU8U9440:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned9440_AU8U9440:=myrec;
		END;
	FUNCTION pAUnsignedTformat9439_AUT9439:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned9440_AU8U9440;
		 pAUnsignedTformat9439_AUT9439:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9438_ATP9438:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype9438_ATP9438:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9437_APT9437:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9437_APT9437:=nil;
		 pAPredeclaredtypeTypeprim9437_APT9437:=myrec;
		END;
	FUNCTION pAOptionalsign9443_AO9443:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9443_AO9443:=nil;
		 pAOptionalsign9443_AO9443:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9442_AIN9442:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9442_AIN9442:=myrec;
		END;
	FUNCTION pAArray9441_AA9441:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9441_AA9441:=nil;
		 pAArray9441_AA9441:=myrec;
		END;
	FUNCTION pAArrayType9436_AAT9436:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType9436_AAT9436:=myrec;
		END;
		(*! Match ma *)
	FUNCTION pAIdLoc9447_AIL9447:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc9447_AIL9447:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9446_AR9446:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9447_AIL9447;
		 pARefval9446_AR9446:=myrec;
		END;
	FUNCTION pADerefRhs9445_ADR9445:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9446_AR9446;
		 pADerefRhs9445_ADR9445:=myrec;
		END;
	FUNCTION pARhsValue9444_ARV9444:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9445_ADR9445;
		 pARhsValue9444_ARV9444:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs9435_ACR9435:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9436_AAT9436;
		myrec^.arg2:=pARhsValue9444_ARV9444;
		 pACastRhs9435_ACR9435:=myrec;
		END;
	FUNCTION pARhsValue9434_ARV9434:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9435_ACR9435;
		 pARhsValue9434_ARV9434:=myrec;
		END;
	FUNCTION pADyadicValue9418_ADV9418:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue9420_ARV9420;
		myrec^.arg2:=pARhsValue9434_ARV9434;
		myrec^.fn:=pAPlusDyadic9419_APD9419;
		 pADyadicValue9418_ADV9418:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs9409_ACR9409:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9410_AAT9410;
		myrec^.arg2:=pADyadicValue9418_ADV9418;
		 pACastRhs9409_ACR9409:=myrec;
		END;
	FUNCTION pARhsValue9408_ARV9408:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9409_ACR9409;
		 pARhsValue9408_ARV9408:=myrec;
		END;
	FUNCTION pAAssign9395_AA9395:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue9408_ARV9408;
		myrec^.dest:=pARefcastRefval9396_ARR9396;
		 pAAssign9395_AA9395:=myrec;
		END;
	FUNCTION pAAssignMeaning9394_AAM9394:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign9395_AA9395;
		 pAAssignMeaning9394_AAM9394:=myrec;
		END;
	FUNCTION pAAssemblypattern9449_AA9449:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'paddb ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern9449_AA9449:=list;
		END;
	FUNCTION pAAssemblesto9448_AA9448:pprintlist;
	begin
		pAAssemblesto9448_AA9448:=pAAssemblypattern9449_AA9449;
		END;
	FUNCTION pASideeffects9454_AS9454:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects9454_AS9454:=nil;
		 pASideeffects9454_AS9454:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond9455_AUP9455:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond9455_AUP9455:=nil;
		 pAUnconditionalPrecond9455_AUP9455:=myrec;
		END;
	FUNCTION PADDUB_PADDUB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		params^[1]:=patmrmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning9394_AAM9394;
		matchedAssembler:=pAAssemblesto9448_AA9448;
		END;
		PADDUB_PADDUB:=myrec;
	END;
	FUNCTION pATypeid9458_AT9458:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im8reg  ilcg.pattern@1977d63}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9458_AT9458:=myrec;
		END;
	FUNCTION pATypeid9460_AT9460:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@18adce0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9460_AT9460:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc9464_AIL9464:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9464_AIL9464:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9463_AR9463:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9464_AIL9464;
		 pARefval9463_AR9463:=myrec;
		END;
	FUNCTION pAInt8Signed9471_AI8S9471:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed9471_AI8S9471:=myrec;
		END;
	FUNCTION pASignedTformat9470_AST9470:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed9471_AI8S9471;
		 pASignedTformat9470_AST9470:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9469_ATP9469:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype9469_ATP9469:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9468_APT9468:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9468_APT9468:=nil;
		 pAPredeclaredtypeTypeprim9468_APT9468:=myrec;
		END;
	FUNCTION pAOptionalsign9474_AO9474:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9474_AO9474:=nil;
		 pAOptionalsign9474_AO9474:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9473_AIN9473:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9473_AIN9473:=myrec;
		END;
	FUNCTION pAArray9472_AA9472:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9472_AA9472:=nil;
		 pAArray9472_AA9472:=myrec;
		END;
	FUNCTION pAArrayType9467_AAT9467:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType9467_AAT9467:=myrec;
		END;
	FUNCTION pASatplusDyadic9476_ASD9476:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpsatplus;
		 pASatplusDyadic9476_ASD9476:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc9480_AIL9480:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9480_AIL9480:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9479_AR9479:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9480_AIL9480;
		 pARefval9479_AR9479:=myrec;
		END;
	FUNCTION pADerefRhs9478_ADR9478:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9479_AR9479;
		 pADerefRhs9478_ADR9478:=myrec;
		END;
	FUNCTION pARhsValue9477_ARV9477:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9478_ADR9478;
		 pARhsValue9477_ARV9477:=myrec;
		END;
	FUNCTION pAInt8Signed9487_AI8S9487:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed9487_AI8S9487:=myrec;
		END;
	FUNCTION pASignedTformat9486_AST9486:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed9487_AI8S9487;
		 pASignedTformat9486_AST9486:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9485_ATP9485:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype9485_ATP9485:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9484_APT9484:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9484_APT9484:=nil;
		 pAPredeclaredtypeTypeprim9484_APT9484:=myrec;
		END;
	FUNCTION pAOptionalsign9490_AO9490:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9490_AO9490:=nil;
		 pAOptionalsign9490_AO9490:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9489_AIN9489:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9489_AIN9489:=myrec;
		END;
	FUNCTION pAArray9488_AA9488:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9488_AA9488:=nil;
		 pAArray9488_AA9488:=myrec;
		END;
	FUNCTION pAArrayType9483_AAT9483:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType9483_AAT9483:=myrec;
		END;
		(*! Match ma *)
	FUNCTION pAIdLoc9494_AIL9494:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc9494_AIL9494:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9493_AR9493:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9494_AIL9494;
		 pARefval9493_AR9493:=myrec;
		END;
	FUNCTION pADerefRhs9492_ADR9492:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9493_AR9493;
		 pADerefRhs9492_ADR9492:=myrec;
		END;
	FUNCTION pARhsValue9491_ARV9491:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9492_ADR9492;
		 pARhsValue9491_ARV9491:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs9482_ACR9482:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9483_AAT9483;
		myrec^.arg2:=pARhsValue9491_ARV9491;
		 pACastRhs9482_ACR9482:=myrec;
		END;
	FUNCTION pARhsValue9481_ARV9481:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9482_ACR9482;
		 pARhsValue9481_ARV9481:=myrec;
		END;
	FUNCTION pADyadicValue9475_ADV9475:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue9477_ARV9477;
		myrec^.arg2:=pARhsValue9481_ARV9481;
		myrec^.fn:=pASatplusDyadic9476_ASD9476;
		 pADyadicValue9475_ADV9475:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs9466_ACR9466:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9467_AAT9467;
		myrec^.arg2:=pADyadicValue9475_ADV9475;
		 pACastRhs9466_ACR9466:=myrec;
		END;
	FUNCTION pARhsValue9465_ARV9465:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9466_ACR9466;
		 pARhsValue9465_ARV9465:=myrec;
		END;
	FUNCTION pAAssign9462_AA9462:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue9465_ARV9465;
		myrec^.dest:=pARefval9463_AR9463;
		 pAAssign9462_AA9462:=myrec;
		END;
	FUNCTION pAAssignMeaning9461_AAM9461:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign9462_AA9462;
		 pAAssignMeaning9461_AAM9461:=myrec;
		END;
	FUNCTION pAAssemblypattern9496_AA9496:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'paddsb ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern9496_AA9496:=list;
		END;
	FUNCTION pAAssemblesto9495_AA9495:pprintlist;
	begin
		pAAssemblesto9495_AA9495:=pAAssemblypattern9496_AA9496;
		END;
	FUNCTION pASideeffects9501_AS9501:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects9501_AS9501:=nil;
		 pASideeffects9501_AS9501:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond9502_AUP9502:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond9502_AUP9502:=nil;
		 pAUnconditionalPrecond9502_AUP9502:=myrec;
		END;
	FUNCTION PADDSB_PADDSB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patim8reg_8;
		params^[1]:=patmrmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning9461_AAM9461;
		matchedAssembler:=pAAssemblesto9495_AA9495;
		END;
		PADDSB_PADDSB:=myrec;
	END;
	FUNCTION pATypeid9505_AT9505:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im8reg  ilcg.pattern@1977d63}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9505_AT9505:=myrec;
		END;
	FUNCTION pATypeid9507_AT9507:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im8reg  ilcg.pattern@1977d63}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9507_AT9507:=myrec;
		END;
	FUNCTION pATypeid9509_AT9509:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@18adce0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9509_AT9509:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc9513_AIL9513:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9513_AIL9513:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9512_AR9512:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9513_AIL9513;
		 pARefval9512_AR9512:=myrec;
		END;
	FUNCTION pAInt8Signed9520_AI8S9520:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed9520_AI8S9520:=myrec;
		END;
	FUNCTION pASignedTformat9519_AST9519:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed9520_AI8S9520;
		 pASignedTformat9519_AST9519:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9518_ATP9518:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype9518_ATP9518:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9517_APT9517:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9517_APT9517:=nil;
		 pAPredeclaredtypeTypeprim9517_APT9517:=myrec;
		END;
	FUNCTION pAOptionalsign9523_AO9523:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9523_AO9523:=nil;
		 pAOptionalsign9523_AO9523:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9522_AIN9522:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9522_AIN9522:=myrec;
		END;
	FUNCTION pAArray9521_AA9521:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9521_AA9521:=nil;
		 pAArray9521_AA9521:=myrec;
		END;
	FUNCTION pAArrayType9516_AAT9516:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType9516_AAT9516:=myrec;
		END;
	FUNCTION pASatplusDyadic9525_ASD9525:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpsatplus;
		 pASatplusDyadic9525_ASD9525:=myrec;
		END;
		(*! Match m2 *)
	FUNCTION pAIdLoc9529_AIL9529:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc9529_AIL9529:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9528_AR9528:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9529_AIL9529;
		 pARefval9528_AR9528:=myrec;
		END;
	FUNCTION pADerefRhs9527_ADR9527:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9528_AR9528;
		 pADerefRhs9527_ADR9527:=myrec;
		END;
	FUNCTION pARhsValue9526_ARV9526:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9527_ADR9527;
		 pARhsValue9526_ARV9526:=myrec;
		END;
	FUNCTION pAInt8Signed9536_AI8S9536:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed9536_AI8S9536:=myrec;
		END;
	FUNCTION pASignedTformat9535_AST9535:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed9536_AI8S9536;
		 pASignedTformat9535_AST9535:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9534_ATP9534:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype9534_ATP9534:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9533_APT9533:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9533_APT9533:=nil;
		 pAPredeclaredtypeTypeprim9533_APT9533:=myrec;
		END;
	FUNCTION pAOptionalsign9539_AO9539:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9539_AO9539:=nil;
		 pAOptionalsign9539_AO9539:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9538_AIN9538:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9538_AIN9538:=myrec;
		END;
	FUNCTION pAArray9537_AA9537:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9537_AA9537:=nil;
		 pAArray9537_AA9537:=myrec;
		END;
	FUNCTION pAArrayType9532_AAT9532:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType9532_AAT9532:=myrec;
		END;
		(*! Match ma *)
	FUNCTION pAIdLoc9543_AIL9543:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc9543_AIL9543:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9542_AR9542:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9543_AIL9543;
		 pARefval9542_AR9542:=myrec;
		END;
	FUNCTION pADerefRhs9541_ADR9541:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9542_AR9542;
		 pADerefRhs9541_ADR9541:=myrec;
		END;
	FUNCTION pARhsValue9540_ARV9540:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9541_ADR9541;
		 pARhsValue9540_ARV9540:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs9531_ACR9531:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9532_AAT9532;
		myrec^.arg2:=pARhsValue9540_ARV9540;
		 pACastRhs9531_ACR9531:=myrec;
		END;
	FUNCTION pARhsValue9530_ARV9530:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9531_ACR9531;
		 pARhsValue9530_ARV9530:=myrec;
		END;
	FUNCTION pADyadicValue9524_ADV9524:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue9526_ARV9526;
		myrec^.arg2:=pARhsValue9530_ARV9530;
		myrec^.fn:=pASatplusDyadic9525_ASD9525;
		 pADyadicValue9524_ADV9524:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs9515_ACR9515:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9516_AAT9516;
		myrec^.arg2:=pADyadicValue9524_ADV9524;
		 pACastRhs9515_ACR9515:=myrec;
		END;
	FUNCTION pARhsValue9514_ARV9514:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9515_ACR9515;
		 pARhsValue9514_ARV9514:=myrec;
		END;
	FUNCTION pAAssign9511_AA9511:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue9514_ARV9514;
		myrec^.dest:=pARefval9512_AR9512;
		 pAAssign9511_AA9511:=myrec;
		END;
	FUNCTION pAAssignMeaning9510_AAM9510:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign9511_AA9511;
		 pAAssignMeaning9510_AAM9510:=myrec;
		END;
	FUNCTION pAAssemblypattern9545_AA9545:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movq ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pappends(list,'\n paddsb ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,2);
		pAAssemblypattern9545_AA9545:=list;
		END;
	FUNCTION pAAssemblesto9544_AA9544:pprintlist;
	begin
		pAAssemblesto9544_AA9544:=pAAssemblypattern9545_AA9545;
		END;
	FUNCTION pASideeffects9554_AS9554:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects9554_AS9554:=nil;
		 pASideeffects9554_AS9554:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond9555_AUP9555:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond9555_AUP9555:=nil;
		 pAUnconditionalPrecond9555_AUP9555:=myrec;
		END;
	FUNCTION PADDSB3_PADDSB3:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patim8reg_8;
		params^[1]:=patim8reg_8;
		params^[2]:=patmrmaddrmode_;
		paramcount:=4;
		meaning:=pAAssignMeaning9510_AAM9510;
		matchedAssembler:=pAAssemblesto9544_AA9544;
		END;
		PADDSB3_PADDSB3:=myrec;
	END;
	FUNCTION pATypeid9558_AT9558:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9558_AT9558:=myrec;
		END;
	FUNCTION pATypeid9560_AT9560:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@18adce0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9560_AT9560:=myrec;
		END;
	FUNCTION pAUint8Unsigned9570_AU8U9570:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned9570_AU8U9570:=myrec;
		END;
	FUNCTION pAUnsignedTformat9569_AUT9569:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned9570_AU8U9570;
		 pAUnsignedTformat9569_AUT9569:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9568_ATP9568:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype9568_ATP9568:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9567_APT9567:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9567_APT9567:=nil;
		 pAPredeclaredtypeTypeprim9567_APT9567:=myrec;
		END;
	FUNCTION pAOptionalsign9573_AO9573:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9573_AO9573:=nil;
		 pAOptionalsign9573_AO9573:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9572_AIN9572:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9572_AIN9572:=myrec;
		END;
	FUNCTION pAArray9571_AA9571:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9571_AA9571:=nil;
		 pAArray9571_AA9571:=myrec;
		END;
	FUNCTION pAArrayType9566_AAT9566:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType9566_AAT9566:=myrec;
		END;
	FUNCTION pAReference9565_AR9565:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType9566_AAT9566;
		 pAReference9565_AR9565:=myrec;
		END;
	FUNCTION pAReftypeType9564_ART9564:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference9565_AR9565;
		 pAReftypeType9564_ART9564:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc9574_AIL9574:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9574_AIL9574:=myrec;
		END;
		(*! try to cast to type: ref uint8 vector ( 8 )*)
	FUNCTION pARefcastRefval9563_ARR9563:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType9564_ART9564;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc9574_AIL9574;
		 pARefcastRefval9563_ARR9563:=myrec;
		END;
	FUNCTION pAUint8Unsigned9581_AU8U9581:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned9581_AU8U9581:=myrec;
		END;
	FUNCTION pAUnsignedTformat9580_AUT9580:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned9581_AU8U9581;
		 pAUnsignedTformat9580_AUT9580:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9579_ATP9579:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype9579_ATP9579:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9578_APT9578:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9578_APT9578:=nil;
		 pAPredeclaredtypeTypeprim9578_APT9578:=myrec;
		END;
	FUNCTION pAOptionalsign9584_AO9584:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9584_AO9584:=nil;
		 pAOptionalsign9584_AO9584:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9583_AIN9583:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9583_AIN9583:=myrec;
		END;
	FUNCTION pAArray9582_AA9582:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9582_AA9582:=nil;
		 pAArray9582_AA9582:=myrec;
		END;
	FUNCTION pAArrayType9577_AAT9577:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType9577_AAT9577:=myrec;
		END;
	FUNCTION pASatplusDyadic9586_ASD9586:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpsatplus;
		 pASatplusDyadic9586_ASD9586:=myrec;
		END;
	FUNCTION pAUint8Unsigned9593_AU8U9593:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned9593_AU8U9593:=myrec;
		END;
	FUNCTION pAUnsignedTformat9592_AUT9592:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned9593_AU8U9593;
		 pAUnsignedTformat9592_AUT9592:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9591_ATP9591:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype9591_ATP9591:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9590_APT9590:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9590_APT9590:=nil;
		 pAPredeclaredtypeTypeprim9590_APT9590:=myrec;
		END;
	FUNCTION pAOptionalsign9596_AO9596:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9596_AO9596:=nil;
		 pAOptionalsign9596_AO9596:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9595_AIN9595:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9595_AIN9595:=myrec;
		END;
	FUNCTION pAArray9594_AA9594:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9594_AA9594:=nil;
		 pAArray9594_AA9594:=myrec;
		END;
	FUNCTION pAArrayType9589_AAT9589:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType9589_AAT9589:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc9600_AIL9600:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9600_AIL9600:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9599_AR9599:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9600_AIL9600;
		 pARefval9599_AR9599:=myrec;
		END;
	FUNCTION pADerefRhs9598_ADR9598:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9599_AR9599;
		 pADerefRhs9598_ADR9598:=myrec;
		END;
	FUNCTION pARhsValue9597_ARV9597:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9598_ADR9598;
		 pARhsValue9597_ARV9597:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs9588_ACR9588:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9589_AAT9589;
		myrec^.arg2:=pARhsValue9597_ARV9597;
		 pACastRhs9588_ACR9588:=myrec;
		END;
	FUNCTION pARhsValue9587_ARV9587:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9588_ACR9588;
		 pARhsValue9587_ARV9587:=myrec;
		END;
	FUNCTION pAUint8Unsigned9607_AU8U9607:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned9607_AU8U9607:=myrec;
		END;
	FUNCTION pAUnsignedTformat9606_AUT9606:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned9607_AU8U9607;
		 pAUnsignedTformat9606_AUT9606:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9605_ATP9605:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype9605_ATP9605:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9604_APT9604:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9604_APT9604:=nil;
		 pAPredeclaredtypeTypeprim9604_APT9604:=myrec;
		END;
	FUNCTION pAOptionalsign9610_AO9610:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9610_AO9610:=nil;
		 pAOptionalsign9610_AO9610:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9609_AIN9609:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9609_AIN9609:=myrec;
		END;
	FUNCTION pAArray9608_AA9608:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9608_AA9608:=nil;
		 pAArray9608_AA9608:=myrec;
		END;
	FUNCTION pAArrayType9603_AAT9603:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType9603_AAT9603:=myrec;
		END;
		(*! Match ma *)
	FUNCTION pAIdLoc9614_AIL9614:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc9614_AIL9614:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9613_AR9613:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9614_AIL9614;
		 pARefval9613_AR9613:=myrec;
		END;
	FUNCTION pADerefRhs9612_ADR9612:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9613_AR9613;
		 pADerefRhs9612_ADR9612:=myrec;
		END;
	FUNCTION pARhsValue9611_ARV9611:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9612_ADR9612;
		 pARhsValue9611_ARV9611:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs9602_ACR9602:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9603_AAT9603;
		myrec^.arg2:=pARhsValue9611_ARV9611;
		 pACastRhs9602_ACR9602:=myrec;
		END;
	FUNCTION pARhsValue9601_ARV9601:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9602_ACR9602;
		 pARhsValue9601_ARV9601:=myrec;
		END;
	FUNCTION pADyadicValue9585_ADV9585:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue9587_ARV9587;
		myrec^.arg2:=pARhsValue9601_ARV9601;
		myrec^.fn:=pASatplusDyadic9586_ASD9586;
		 pADyadicValue9585_ADV9585:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs9576_ACR9576:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9577_AAT9577;
		myrec^.arg2:=pADyadicValue9585_ADV9585;
		 pACastRhs9576_ACR9576:=myrec;
		END;
	FUNCTION pARhsValue9575_ARV9575:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9576_ACR9576;
		 pARhsValue9575_ARV9575:=myrec;
		END;
	FUNCTION pAAssign9562_AA9562:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue9575_ARV9575;
		myrec^.dest:=pARefcastRefval9563_ARR9563;
		 pAAssign9562_AA9562:=myrec;
		END;
	FUNCTION pAAssignMeaning9561_AAM9561:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign9562_AA9562;
		 pAAssignMeaning9561_AAM9561:=myrec;
		END;
	FUNCTION pAAssemblypattern9616_AA9616:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'paddusb ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern9616_AA9616:=list;
		END;
	FUNCTION pAAssemblesto9615_AA9615:pprintlist;
	begin
		pAAssemblesto9615_AA9615:=pAAssemblypattern9616_AA9616;
		END;
	FUNCTION pASideeffects9621_AS9621:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects9621_AS9621:=nil;
		 pASideeffects9621_AS9621:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond9622_AUP9622:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond9622_AUP9622:=nil;
		 pAUnconditionalPrecond9622_AUP9622:=myrec;
		END;
	FUNCTION PADDUSB_PADDUSB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		params^[1]:=patmrmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning9561_AAM9561;
		matchedAssembler:=pAAssemblesto9615_AA9615;
		END;
		PADDUSB_PADDUSB:=myrec;
	END;
	FUNCTION pATypeid9625_AT9625:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9625_AT9625:=myrec;
		END;
	FUNCTION pAUint8Unsigned9635_AU8U9635:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned9635_AU8U9635:=myrec;
		END;
	FUNCTION pAUnsignedTformat9634_AUT9634:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned9635_AU8U9635;
		 pAUnsignedTformat9634_AUT9634:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9633_ATP9633:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype9633_ATP9633:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9632_APT9632:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9632_APT9632:=nil;
		 pAPredeclaredtypeTypeprim9632_APT9632:=myrec;
		END;
	FUNCTION pAOptionalsign9638_AO9638:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9638_AO9638:=nil;
		 pAOptionalsign9638_AO9638:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9637_AIN9637:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9637_AIN9637:=myrec;
		END;
	FUNCTION pAArray9636_AA9636:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9636_AA9636:=nil;
		 pAArray9636_AA9636:=myrec;
		END;
	FUNCTION pAArrayType9631_AAT9631:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType9631_AAT9631:=myrec;
		END;
	FUNCTION pAReference9630_AR9630:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType9631_AAT9631;
		 pAReference9630_AR9630:=myrec;
		END;
	FUNCTION pAReftypeType9629_ART9629:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference9630_AR9630;
		 pAReftypeType9629_ART9629:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc9639_AIL9639:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9639_AIL9639:=myrec;
		END;
		(*! try to cast to type: ref uint8 vector ( 8 )*)
	FUNCTION pARefcastRefval9628_ARR9628:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType9629_ART9629;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc9639_AIL9639;
		 pARefcastRefval9628_ARR9628:=myrec;
		END;
	FUNCTION pAUint8Unsigned9646_AU8U9646:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned9646_AU8U9646:=myrec;
		END;
	FUNCTION pAUnsignedTformat9645_AUT9645:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned9646_AU8U9646;
		 pAUnsignedTformat9645_AUT9645:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9644_ATP9644:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype9644_ATP9644:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9643_APT9643:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9643_APT9643:=nil;
		 pAPredeclaredtypeTypeprim9643_APT9643:=myrec;
		END;
	FUNCTION pAOptionalsign9649_AO9649:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9649_AO9649:=nil;
		 pAOptionalsign9649_AO9649:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9648_AIN9648:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9648_AIN9648:=myrec;
		END;
	FUNCTION pAArray9647_AA9647:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9647_AA9647:=nil;
		 pAArray9647_AA9647:=myrec;
		END;
	FUNCTION pAArrayType9642_AAT9642:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType9642_AAT9642:=myrec;
		END;
	FUNCTION pASatplusDyadic9651_ASD9651:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpsatplus;
		 pASatplusDyadic9651_ASD9651:=myrec;
		END;
	FUNCTION pAUint8Unsigned9658_AU8U9658:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned9658_AU8U9658:=myrec;
		END;
	FUNCTION pAUnsignedTformat9657_AUT9657:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned9658_AU8U9658;
		 pAUnsignedTformat9657_AUT9657:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9656_ATP9656:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype9656_ATP9656:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9655_APT9655:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9655_APT9655:=nil;
		 pAPredeclaredtypeTypeprim9655_APT9655:=myrec;
		END;
	FUNCTION pAOptionalsign9661_AO9661:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9661_AO9661:=nil;
		 pAOptionalsign9661_AO9661:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9660_AIN9660:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9660_AIN9660:=myrec;
		END;
	FUNCTION pAArray9659_AA9659:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9659_AA9659:=nil;
		 pAArray9659_AA9659:=myrec;
		END;
	FUNCTION pAArrayType9654_AAT9654:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType9654_AAT9654:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc9663_AIL9663:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc9663_AIL9663:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue9662_ALV9662:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9663_AIL9663;
		 pALocValue9662_ALV9662:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastpopRhs9653_ACR9653:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9654_AAT9654;
		myrec^.arg2:=pALocValue9662_ALV9662;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs9653_ACR9653:=myrec;
		END;
	FUNCTION pARhsValue9652_ARV9652:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs9653_ACR9653;
		 pARhsValue9652_ARV9652:=myrec;
		END;
	FUNCTION pAUint8Unsigned9670_AU8U9670:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned9670_AU8U9670:=myrec;
		END;
	FUNCTION pAUnsignedTformat9669_AUT9669:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned9670_AU8U9670;
		 pAUnsignedTformat9669_AUT9669:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9668_ATP9668:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype9668_ATP9668:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9667_APT9667:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9667_APT9667:=nil;
		 pAPredeclaredtypeTypeprim9667_APT9667:=myrec;
		END;
	FUNCTION pAOptionalsign9673_AO9673:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9673_AO9673:=nil;
		 pAOptionalsign9673_AO9673:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9672_AIN9672:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9672_AIN9672:=myrec;
		END;
	FUNCTION pAArray9671_AA9671:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9671_AA9671:=nil;
		 pAArray9671_AA9671:=myrec;
		END;
	FUNCTION pAArrayType9666_AAT9666:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType9666_AAT9666:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc9675_AIL9675:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc9675_AIL9675:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue9674_ALV9674:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9675_AIL9675;
		 pALocValue9674_ALV9674:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastpopRhs9665_ACR9665:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9666_AAT9666;
		myrec^.arg2:=pALocValue9674_ALV9674;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs9665_ACR9665:=myrec;
		END;
	FUNCTION pARhsValue9664_ARV9664:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs9665_ACR9665;
		 pARhsValue9664_ARV9664:=myrec;
		END;
	FUNCTION pADyadicValue9650_ADV9650:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue9652_ARV9652;
		myrec^.arg2:=pARhsValue9664_ARV9664;
		myrec^.fn:=pASatplusDyadic9651_ASD9651;
		 pADyadicValue9650_ADV9650:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs9641_ACR9641:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9642_AAT9642;
		myrec^.arg2:=pADyadicValue9650_ADV9650;
		 pACastRhs9641_ACR9641:=myrec;
		END;
	FUNCTION pARhsValue9640_ARV9640:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9641_ACR9641;
		 pARhsValue9640_ARV9640:=myrec;
		END;
	FUNCTION pAAssign9627_AA9627:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue9640_ARV9640;
		myrec^.dest:=pARefcastRefval9628_ARR9628;
		 pAAssign9627_AA9627:=myrec;
		END;
	FUNCTION pAAssignMeaning9626_AAM9626:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign9627_AA9627;
		 pAAssignMeaning9626_AAM9626:=myrec;
		END;
	FUNCTION pAAssemblypattern9677_AA9677:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movq ' );
		pappendp(list,0);
		pappends(list,',[esp]\n paddusb ' );
		pappendp(list,0);
		pappends(list,',[esp+8]\n add esp,16' );
		pAAssemblypattern9677_AA9677:=list;
		END;
	FUNCTION pAAssemblesto9676_AA9676:pprintlist;
	begin
		pAAssemblesto9676_AA9676:=pAAssemblypattern9677_AA9677;
		END;
	FUNCTION pASideeffects9683_AS9683:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects9683_AS9683:=nil;
		 pASideeffects9683_AS9683:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond9684_AUP9684:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond9684_AUP9684:=nil;
		 pAUnconditionalPrecond9684_AUP9684:=myrec;
		END;
	FUNCTION SPADDUSB_SPADDUSB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		paramcount:=2;
		meaning:=pAAssignMeaning9626_AAM9626;
		matchedAssembler:=pAAssemblesto9676_AA9676;
		END;
		SPADDUSB_SPADDUSB:=myrec;
	END;
	FUNCTION pATypeid9687_AT9687:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9687_AT9687:=myrec;
		END;
	FUNCTION pAUint8Unsigned9697_AU8U9697:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned9697_AU8U9697:=myrec;
		END;
	FUNCTION pAUnsignedTformat9696_AUT9696:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned9697_AU8U9697;
		 pAUnsignedTformat9696_AUT9696:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9695_ATP9695:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype9695_ATP9695:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9694_APT9694:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9694_APT9694:=nil;
		 pAPredeclaredtypeTypeprim9694_APT9694:=myrec;
		END;
	FUNCTION pAOptionalsign9700_AO9700:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9700_AO9700:=nil;
		 pAOptionalsign9700_AO9700:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9699_AIN9699:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9699_AIN9699:=myrec;
		END;
	FUNCTION pAArray9698_AA9698:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9698_AA9698:=nil;
		 pAArray9698_AA9698:=myrec;
		END;
	FUNCTION pAArrayType9693_AAT9693:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType9693_AAT9693:=myrec;
		END;
	FUNCTION pAReference9692_AR9692:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType9693_AAT9693;
		 pAReference9692_AR9692:=myrec;
		END;
	FUNCTION pAReftypeType9691_ART9691:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference9692_AR9692;
		 pAReftypeType9691_ART9691:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc9701_AIL9701:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9701_AIL9701:=myrec;
		END;
		(*! try to cast to type: ref uint8 vector ( 8 )*)
	FUNCTION pARefcastRefval9690_ARR9690:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType9691_ART9691;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc9701_AIL9701;
		 pARefcastRefval9690_ARR9690:=myrec;
		END;
	FUNCTION pAUint8Unsigned9708_AU8U9708:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned9708_AU8U9708:=myrec;
		END;
	FUNCTION pAUnsignedTformat9707_AUT9707:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned9708_AU8U9708;
		 pAUnsignedTformat9707_AUT9707:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9706_ATP9706:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype9706_ATP9706:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9705_APT9705:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9705_APT9705:=nil;
		 pAPredeclaredtypeTypeprim9705_APT9705:=myrec;
		END;
	FUNCTION pAOptionalsign9711_AO9711:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9711_AO9711:=nil;
		 pAOptionalsign9711_AO9711:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9710_AIN9710:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9710_AIN9710:=myrec;
		END;
	FUNCTION pAArray9709_AA9709:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9709_AA9709:=nil;
		 pAArray9709_AA9709:=myrec;
		END;
	FUNCTION pAArrayType9704_AAT9704:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType9704_AAT9704:=myrec;
		END;
	FUNCTION pAPlusDyadic9713_APD9713:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic9713_APD9713:=myrec;
		END;
	FUNCTION pAUint8Unsigned9720_AU8U9720:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned9720_AU8U9720:=myrec;
		END;
	FUNCTION pAUnsignedTformat9719_AUT9719:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned9720_AU8U9720;
		 pAUnsignedTformat9719_AUT9719:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9718_ATP9718:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype9718_ATP9718:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9717_APT9717:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9717_APT9717:=nil;
		 pAPredeclaredtypeTypeprim9717_APT9717:=myrec;
		END;
	FUNCTION pAOptionalsign9723_AO9723:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9723_AO9723:=nil;
		 pAOptionalsign9723_AO9723:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9722_AIN9722:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9722_AIN9722:=myrec;
		END;
	FUNCTION pAArray9721_AA9721:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9721_AA9721:=nil;
		 pAArray9721_AA9721:=myrec;
		END;
	FUNCTION pAArrayType9716_AAT9716:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType9716_AAT9716:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc9725_AIL9725:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc9725_AIL9725:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue9724_ALV9724:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9725_AIL9725;
		 pALocValue9724_ALV9724:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastpopRhs9715_ACR9715:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9716_AAT9716;
		myrec^.arg2:=pALocValue9724_ALV9724;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs9715_ACR9715:=myrec;
		END;
	FUNCTION pARhsValue9714_ARV9714:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs9715_ACR9715;
		 pARhsValue9714_ARV9714:=myrec;
		END;
	FUNCTION pAUint8Unsigned9732_AU8U9732:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned9732_AU8U9732:=myrec;
		END;
	FUNCTION pAUnsignedTformat9731_AUT9731:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned9732_AU8U9732;
		 pAUnsignedTformat9731_AUT9731:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9730_ATP9730:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype9730_ATP9730:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9729_APT9729:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9729_APT9729:=nil;
		 pAPredeclaredtypeTypeprim9729_APT9729:=myrec;
		END;
	FUNCTION pAOptionalsign9735_AO9735:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9735_AO9735:=nil;
		 pAOptionalsign9735_AO9735:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9734_AIN9734:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9734_AIN9734:=myrec;
		END;
	FUNCTION pAArray9733_AA9733:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9733_AA9733:=nil;
		 pAArray9733_AA9733:=myrec;
		END;
	FUNCTION pAArrayType9728_AAT9728:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType9728_AAT9728:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc9737_AIL9737:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc9737_AIL9737:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue9736_ALV9736:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9737_AIL9737;
		 pALocValue9736_ALV9736:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastpopRhs9727_ACR9727:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9728_AAT9728;
		myrec^.arg2:=pALocValue9736_ALV9736;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs9727_ACR9727:=myrec;
		END;
	FUNCTION pARhsValue9726_ARV9726:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs9727_ACR9727;
		 pARhsValue9726_ARV9726:=myrec;
		END;
	FUNCTION pADyadicValue9712_ADV9712:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue9714_ARV9714;
		myrec^.arg2:=pARhsValue9726_ARV9726;
		myrec^.fn:=pAPlusDyadic9713_APD9713;
		 pADyadicValue9712_ADV9712:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs9703_ACR9703:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9704_AAT9704;
		myrec^.arg2:=pADyadicValue9712_ADV9712;
		 pACastRhs9703_ACR9703:=myrec;
		END;
	FUNCTION pARhsValue9702_ARV9702:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9703_ACR9703;
		 pARhsValue9702_ARV9702:=myrec;
		END;
	FUNCTION pAAssign9689_AA9689:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue9702_ARV9702;
		myrec^.dest:=pARefcastRefval9690_ARR9690;
		 pAAssign9689_AA9689:=myrec;
		END;
	FUNCTION pAAssignMeaning9688_AAM9688:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign9689_AA9689;
		 pAAssignMeaning9688_AAM9688:=myrec;
		END;
	FUNCTION pAAssemblypattern9739_AA9739:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movq ' );
		pappendp(list,0);
		pappends(list,',[esp]\n paddb ' );
		pappendp(list,0);
		pappends(list,',[esp+8]\n add esp,16' );
		pAAssemblypattern9739_AA9739:=list;
		END;
	FUNCTION pAAssemblesto9738_AA9738:pprintlist;
	begin
		pAAssemblesto9738_AA9738:=pAAssemblypattern9739_AA9739;
		END;
	FUNCTION pASideeffects9745_AS9745:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects9745_AS9745:=nil;
		 pASideeffects9745_AS9745:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond9746_AUP9746:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond9746_AUP9746:=nil;
		 pAUnconditionalPrecond9746_AUP9746:=myrec;
		END;
	FUNCTION SPADDUB_SPADDUB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		paramcount:=2;
		meaning:=pAAssignMeaning9688_AAM9688;
		matchedAssembler:=pAAssemblesto9738_AA9738;
		END;
		SPADDUB_SPADDUB:=myrec;
	END;
	FUNCTION pATypeid9749_AT9749:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im8reg  ilcg.pattern@1977d63}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9749_AT9749:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc9753_AIL9753:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9753_AIL9753:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9752_AR9752:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9753_AIL9753;
		 pARefval9752_AR9752:=myrec;
		END;
	FUNCTION pAInt8Signed9760_AI8S9760:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed9760_AI8S9760:=myrec;
		END;
	FUNCTION pASignedTformat9759_AST9759:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed9760_AI8S9760;
		 pASignedTformat9759_AST9759:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9758_ATP9758:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype9758_ATP9758:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9757_APT9757:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9757_APT9757:=nil;
		 pAPredeclaredtypeTypeprim9757_APT9757:=myrec;
		END;
	FUNCTION pAOptionalsign9763_AO9763:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9763_AO9763:=nil;
		 pAOptionalsign9763_AO9763:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9762_AIN9762:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9762_AIN9762:=myrec;
		END;
	FUNCTION pAArray9761_AA9761:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9761_AA9761:=nil;
		 pAArray9761_AA9761:=myrec;
		END;
	FUNCTION pAArrayType9756_AAT9756:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType9756_AAT9756:=myrec;
		END;
	FUNCTION pASatplusDyadic9765_ASD9765:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpsatplus;
		 pASatplusDyadic9765_ASD9765:=myrec;
		END;
	FUNCTION pAInt8Signed9772_AI8S9772:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed9772_AI8S9772:=myrec;
		END;
	FUNCTION pASignedTformat9771_AST9771:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed9772_AI8S9772;
		 pASignedTformat9771_AST9771:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9770_ATP9770:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype9770_ATP9770:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9769_APT9769:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9769_APT9769:=nil;
		 pAPredeclaredtypeTypeprim9769_APT9769:=myrec;
		END;
	FUNCTION pAOptionalsign9775_AO9775:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9775_AO9775:=nil;
		 pAOptionalsign9775_AO9775:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9774_AIN9774:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9774_AIN9774:=myrec;
		END;
	FUNCTION pAArray9773_AA9773:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9773_AA9773:=nil;
		 pAArray9773_AA9773:=myrec;
		END;
	FUNCTION pAArrayType9768_AAT9768:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType9768_AAT9768:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc9777_AIL9777:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc9777_AIL9777:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue9776_ALV9776:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9777_AIL9777;
		 pALocValue9776_ALV9776:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastpopRhs9767_ACR9767:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9768_AAT9768;
		myrec^.arg2:=pALocValue9776_ALV9776;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs9767_ACR9767:=myrec;
		END;
	FUNCTION pARhsValue9766_ARV9766:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs9767_ACR9767;
		 pARhsValue9766_ARV9766:=myrec;
		END;
	FUNCTION pAInt8Signed9784_AI8S9784:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed9784_AI8S9784:=myrec;
		END;
	FUNCTION pASignedTformat9783_AST9783:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed9784_AI8S9784;
		 pASignedTformat9783_AST9783:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9782_ATP9782:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype9782_ATP9782:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9781_APT9781:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9781_APT9781:=nil;
		 pAPredeclaredtypeTypeprim9781_APT9781:=myrec;
		END;
	FUNCTION pAOptionalsign9787_AO9787:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9787_AO9787:=nil;
		 pAOptionalsign9787_AO9787:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9786_AIN9786:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9786_AIN9786:=myrec;
		END;
	FUNCTION pAArray9785_AA9785:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9785_AA9785:=nil;
		 pAArray9785_AA9785:=myrec;
		END;
	FUNCTION pAArrayType9780_AAT9780:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType9780_AAT9780:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc9789_AIL9789:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc9789_AIL9789:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue9788_ALV9788:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9789_AIL9789;
		 pALocValue9788_ALV9788:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastpopRhs9779_ACR9779:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9780_AAT9780;
		myrec^.arg2:=pALocValue9788_ALV9788;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs9779_ACR9779:=myrec;
		END;
	FUNCTION pARhsValue9778_ARV9778:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs9779_ACR9779;
		 pARhsValue9778_ARV9778:=myrec;
		END;
	FUNCTION pADyadicValue9764_ADV9764:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue9766_ARV9766;
		myrec^.arg2:=pARhsValue9778_ARV9778;
		myrec^.fn:=pASatplusDyadic9765_ASD9765;
		 pADyadicValue9764_ADV9764:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs9755_ACR9755:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9756_AAT9756;
		myrec^.arg2:=pADyadicValue9764_ADV9764;
		 pACastRhs9755_ACR9755:=myrec;
		END;
	FUNCTION pARhsValue9754_ARV9754:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9755_ACR9755;
		 pARhsValue9754_ARV9754:=myrec;
		END;
	FUNCTION pAAssign9751_AA9751:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue9754_ARV9754;
		myrec^.dest:=pARefval9752_AR9752;
		 pAAssign9751_AA9751:=myrec;
		END;
	FUNCTION pAAssignMeaning9750_AAM9750:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign9751_AA9751;
		 pAAssignMeaning9750_AAM9750:=myrec;
		END;
	FUNCTION pAAssemblypattern9791_AA9791:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movq ' );
		pappendp(list,0);
		pappends(list,',[esp]\n paddsb ' );
		pappendp(list,0);
		pappends(list,',[esp+8]\n add esp,16' );
		pAAssemblypattern9791_AA9791:=list;
		END;
	FUNCTION pAAssemblesto9790_AA9790:pprintlist;
	begin
		pAAssemblesto9790_AA9790:=pAAssemblypattern9791_AA9791;
		END;
	FUNCTION pASideeffects9797_AS9797:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects9797_AS9797:=nil;
		 pASideeffects9797_AS9797:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond9798_AUP9798:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond9798_AUP9798:=nil;
		 pAUnconditionalPrecond9798_AUP9798:=myrec;
		END;
	FUNCTION SPADDSB_SPADDSB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patim8reg_8;
		paramcount:=2;
		meaning:=pAAssignMeaning9750_AAM9750;
		matchedAssembler:=pAAssemblesto9790_AA9790;
		END;
		SPADDSB_SPADDSB:=myrec;
	END;
	FUNCTION pATypeid9801_AT9801:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9801_AT9801:=myrec;
		END;
	FUNCTION pASigned9811_AS9811:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned9811_AS9811:=myrec;
		END;
	FUNCTION pASignedTformat9810_AST9810:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned9811_AS9811;
		 pASignedTformat9810_AST9810:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9809_ATP9809:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype9809_ATP9809:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9808_APT9808:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9808_APT9808:=nil;
		 pAPredeclaredtypeTypeprim9808_APT9808:=myrec;
		END;
	FUNCTION pAOptionalsign9814_AO9814:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9814_AO9814:=nil;
		 pAOptionalsign9814_AO9814:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9813_AIN9813:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber9813_AIN9813:=myrec;
		END;
	FUNCTION pAArray9812_AA9812:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9812_AA9812:=nil;
		 pAArray9812_AA9812:=myrec;
		END;
	FUNCTION pAArrayType9807_AAT9807:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,2 );
		 pAArrayType9807_AAT9807:=myrec;
		END;
	FUNCTION pAReference9806_AR9806:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType9807_AAT9807;
		 pAReference9806_AR9806:=myrec;
		END;
	FUNCTION pAReftypeType9805_ART9805:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference9806_AR9806;
		 pAReftypeType9805_ART9805:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc9815_AIL9815:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9815_AIL9815:=myrec;
		END;
		(*! try to cast to type: ref int32 vector ( 2 )*)
	FUNCTION pARefcastRefval9804_ARR9804:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType9805_ART9805;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc9815_AIL9815;
		 pARefcastRefval9804_ARR9804:=myrec;
		END;
	FUNCTION pASigned9822_AS9822:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned9822_AS9822:=myrec;
		END;
	FUNCTION pASignedTformat9821_AST9821:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned9822_AS9822;
		 pASignedTformat9821_AST9821:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9820_ATP9820:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype9820_ATP9820:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9819_APT9819:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9819_APT9819:=nil;
		 pAPredeclaredtypeTypeprim9819_APT9819:=myrec;
		END;
	FUNCTION pAOptionalsign9825_AO9825:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9825_AO9825:=nil;
		 pAOptionalsign9825_AO9825:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9824_AIN9824:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber9824_AIN9824:=myrec;
		END;
	FUNCTION pAArray9823_AA9823:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9823_AA9823:=nil;
		 pAArray9823_AA9823:=myrec;
		END;
	FUNCTION pAArrayType9818_AAT9818:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,2 );
		 pAArrayType9818_AAT9818:=myrec;
		END;
	FUNCTION pAMinusDyadic9827_AMD9827:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpminus;
		 pAMinusDyadic9827_AMD9827:=myrec;
		END;
	FUNCTION pASigned9834_AS9834:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned9834_AS9834:=myrec;
		END;
	FUNCTION pASignedTformat9833_AST9833:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned9834_AS9834;
		 pASignedTformat9833_AST9833:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9832_ATP9832:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype9832_ATP9832:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9831_APT9831:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9831_APT9831:=nil;
		 pAPredeclaredtypeTypeprim9831_APT9831:=myrec;
		END;
	FUNCTION pAOptionalsign9837_AO9837:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9837_AO9837:=nil;
		 pAOptionalsign9837_AO9837:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9836_AIN9836:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber9836_AIN9836:=myrec;
		END;
	FUNCTION pAArray9835_AA9835:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9835_AA9835:=nil;
		 pAArray9835_AA9835:=myrec;
		END;
	FUNCTION pAArrayType9830_AAT9830:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,2 );
		 pAArrayType9830_AAT9830:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc9841_AIL9841:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9841_AIL9841:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9840_AR9840:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9841_AIL9841;
		 pARefval9840_AR9840:=myrec;
		END;
	FUNCTION pADerefRhs9839_ADR9839:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9840_AR9840;
		 pADerefRhs9839_ADR9839:=myrec;
		END;
	FUNCTION pARhsValue9838_ARV9838:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9839_ADR9839;
		 pARhsValue9838_ARV9838:=myrec;
		END;
		(*! try to cast to type: int32 vector ( 2 )*)
	FUNCTION pACastRhs9829_ACR9829:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9830_AAT9830;
		myrec^.arg2:=pARhsValue9838_ARV9838;
		 pACastRhs9829_ACR9829:=myrec;
		END;
	FUNCTION pARhsValue9828_ARV9828:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9829_ACR9829;
		 pARhsValue9828_ARV9828:=myrec;
		END;
	FUNCTION pASigned9848_AS9848:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned9848_AS9848:=myrec;
		END;
	FUNCTION pASignedTformat9847_AST9847:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned9848_AS9848;
		 pASignedTformat9847_AST9847:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9846_ATP9846:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype9846_ATP9846:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9845_APT9845:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9845_APT9845:=nil;
		 pAPredeclaredtypeTypeprim9845_APT9845:=myrec;
		END;
	FUNCTION pAOptionalsign9851_AO9851:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9851_AO9851:=nil;
		 pAOptionalsign9851_AO9851:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9850_AIN9850:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber9850_AIN9850:=myrec;
		END;
	FUNCTION pAArray9849_AA9849:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9849_AA9849:=nil;
		 pAArray9849_AA9849:=myrec;
		END;
	FUNCTION pAArrayType9844_AAT9844:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,2 );
		 pAArrayType9844_AAT9844:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc9853_AIL9853:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc9853_AIL9853:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue9852_ALV9852:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9853_AIL9853;
		 pALocValue9852_ALV9852:=myrec;
		END;
		(*! try to cast to type: int32 vector ( 2 )*)
	FUNCTION pACastpopRhs9843_ACR9843:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9844_AAT9844;
		myrec^.arg2:=pALocValue9852_ALV9852;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs9843_ACR9843:=myrec;
		END;
	FUNCTION pARhsValue9842_ARV9842:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs9843_ACR9843;
		 pARhsValue9842_ARV9842:=myrec;
		END;
	FUNCTION pADyadicValue9826_ADV9826:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue9828_ARV9828;
		myrec^.arg2:=pARhsValue9842_ARV9842;
		myrec^.fn:=pAMinusDyadic9827_AMD9827;
		 pADyadicValue9826_ADV9826:=myrec;
		END;
		(*! try to cast to type: int32 vector ( 2 )*)
	FUNCTION pACastRhs9817_ACR9817:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9818_AAT9818;
		myrec^.arg2:=pADyadicValue9826_ADV9826;
		 pACastRhs9817_ACR9817:=myrec;
		END;
	FUNCTION pARhsValue9816_ARV9816:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9817_ACR9817;
		 pARhsValue9816_ARV9816:=myrec;
		END;
	FUNCTION pAAssign9803_AA9803:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue9816_ARV9816;
		myrec^.dest:=pARefcastRefval9804_ARR9804;
		 pAAssign9803_AA9803:=myrec;
		END;
	FUNCTION pAAssignMeaning9802_AAM9802:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign9803_AA9803;
		 pAAssignMeaning9802_AAM9802:=myrec;
		END;
	FUNCTION pAAssemblypattern9855_AA9855:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'psubd ' );
		pappendp(list,0);
		pappends(list,',[esp]\n add esp,8' );
		pAAssemblypattern9855_AA9855:=list;
		END;
	FUNCTION pAAssemblesto9854_AA9854:pprintlist;
	begin
		pAAssemblesto9854_AA9854:=pAAssemblypattern9855_AA9855;
		END;
	FUNCTION pASideeffects9859_AS9859:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects9859_AS9859:=nil;
		 pASideeffects9859_AS9859:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond9860_AUP9860:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond9860_AUP9860:=nil;
		 pAUnconditionalPrecond9860_AUP9860:=myrec;
		END;
	FUNCTION SPSUBD_SPSUBD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		paramcount:=2;
		meaning:=pAAssignMeaning9802_AAM9802;
		matchedAssembler:=pAAssemblesto9854_AA9854;
		END;
		SPSUBD_SPSUBD:=myrec;
	END;
	FUNCTION pATypeid9863_AT9863:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im4reg  ilcg.pattern@9c7650}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9863_AT9863:=myrec;
		END;
	FUNCTION pATypeid9865_AT9865:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@18adce0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9865_AT9865:=myrec;
		END;
	FUNCTION pAInt16Signed9875_AI16S9875:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed9875_AI16S9875:=myrec;
		END;
	FUNCTION pASignedTformat9874_AST9874:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed9875_AI16S9875;
		 pASignedTformat9874_AST9874:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9873_ATP9873:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype9873_ATP9873:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9872_APT9872:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9872_APT9872:=nil;
		 pAPredeclaredtypeTypeprim9872_APT9872:=myrec;
		END;
	FUNCTION pAOptionalsign9878_AO9878:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9878_AO9878:=nil;
		 pAOptionalsign9878_AO9878:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9877_AIN9877:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber9877_AIN9877:=myrec;
		END;
	FUNCTION pAArray9876_AA9876:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9876_AA9876:=nil;
		 pAArray9876_AA9876:=myrec;
		END;
	FUNCTION pAArrayType9871_AAT9871:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType9871_AAT9871:=myrec;
		END;
	FUNCTION pAReference9870_AR9870:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType9871_AAT9871;
		 pAReference9870_AR9870:=myrec;
		END;
	FUNCTION pAReftypeType9869_ART9869:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference9870_AR9870;
		 pAReftypeType9869_ART9869:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc9879_AIL9879:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9879_AIL9879:=myrec;
		END;
		(*! try to cast to type: ref int16 vector ( 4 )*)
	FUNCTION pARefcastRefval9868_ARR9868:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType9869_ART9869;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc9879_AIL9879;
		 pARefcastRefval9868_ARR9868:=myrec;
		END;
	FUNCTION pAInt16Signed9886_AI16S9886:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed9886_AI16S9886:=myrec;
		END;
	FUNCTION pASignedTformat9885_AST9885:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed9886_AI16S9886;
		 pASignedTformat9885_AST9885:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9884_ATP9884:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype9884_ATP9884:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9883_APT9883:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9883_APT9883:=nil;
		 pAPredeclaredtypeTypeprim9883_APT9883:=myrec;
		END;
	FUNCTION pAOptionalsign9889_AO9889:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9889_AO9889:=nil;
		 pAOptionalsign9889_AO9889:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9888_AIN9888:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber9888_AIN9888:=myrec;
		END;
	FUNCTION pAArray9887_AA9887:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9887_AA9887:=nil;
		 pAArray9887_AA9887:=myrec;
		END;
	FUNCTION pAArrayType9882_AAT9882:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType9882_AAT9882:=myrec;
		END;
	FUNCTION pAMinusDyadic9891_AMD9891:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpminus;
		 pAMinusDyadic9891_AMD9891:=myrec;
		END;
	FUNCTION pAInt16Signed9898_AI16S9898:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed9898_AI16S9898:=myrec;
		END;
	FUNCTION pASignedTformat9897_AST9897:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed9898_AI16S9898;
		 pASignedTformat9897_AST9897:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9896_ATP9896:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype9896_ATP9896:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9895_APT9895:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9895_APT9895:=nil;
		 pAPredeclaredtypeTypeprim9895_APT9895:=myrec;
		END;
	FUNCTION pAOptionalsign9901_AO9901:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9901_AO9901:=nil;
		 pAOptionalsign9901_AO9901:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9900_AIN9900:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber9900_AIN9900:=myrec;
		END;
	FUNCTION pAArray9899_AA9899:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9899_AA9899:=nil;
		 pAArray9899_AA9899:=myrec;
		END;
	FUNCTION pAArrayType9894_AAT9894:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType9894_AAT9894:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc9905_AIL9905:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9905_AIL9905:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9904_AR9904:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9905_AIL9905;
		 pARefval9904_AR9904:=myrec;
		END;
	FUNCTION pADerefRhs9903_ADR9903:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9904_AR9904;
		 pADerefRhs9903_ADR9903:=myrec;
		END;
	FUNCTION pARhsValue9902_ARV9902:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9903_ADR9903;
		 pARhsValue9902_ARV9902:=myrec;
		END;
		(*! try to cast to type: int16 vector ( 4 )*)
	FUNCTION pACastRhs9893_ACR9893:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9894_AAT9894;
		myrec^.arg2:=pARhsValue9902_ARV9902;
		 pACastRhs9893_ACR9893:=myrec;
		END;
	FUNCTION pARhsValue9892_ARV9892:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9893_ACR9893;
		 pARhsValue9892_ARV9892:=myrec;
		END;
	FUNCTION pAInt16Signed9912_AI16S9912:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed9912_AI16S9912:=myrec;
		END;
	FUNCTION pASignedTformat9911_AST9911:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed9912_AI16S9912;
		 pASignedTformat9911_AST9911:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9910_ATP9910:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype9910_ATP9910:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9909_APT9909:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9909_APT9909:=nil;
		 pAPredeclaredtypeTypeprim9909_APT9909:=myrec;
		END;
	FUNCTION pAOptionalsign9915_AO9915:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9915_AO9915:=nil;
		 pAOptionalsign9915_AO9915:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9914_AIN9914:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber9914_AIN9914:=myrec;
		END;
	FUNCTION pAArray9913_AA9913:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9913_AA9913:=nil;
		 pAArray9913_AA9913:=myrec;
		END;
	FUNCTION pAArrayType9908_AAT9908:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType9908_AAT9908:=myrec;
		END;
		(*! Match ma *)
	FUNCTION pAIdLoc9919_AIL9919:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc9919_AIL9919:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9918_AR9918:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9919_AIL9919;
		 pARefval9918_AR9918:=myrec;
		END;
	FUNCTION pADerefRhs9917_ADR9917:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9918_AR9918;
		 pADerefRhs9917_ADR9917:=myrec;
		END;
	FUNCTION pARhsValue9916_ARV9916:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9917_ADR9917;
		 pARhsValue9916_ARV9916:=myrec;
		END;
		(*! try to cast to type: int16 vector ( 4 )*)
	FUNCTION pACastRhs9907_ACR9907:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9908_AAT9908;
		myrec^.arg2:=pARhsValue9916_ARV9916;
		 pACastRhs9907_ACR9907:=myrec;
		END;
	FUNCTION pARhsValue9906_ARV9906:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9907_ACR9907;
		 pARhsValue9906_ARV9906:=myrec;
		END;
	FUNCTION pADyadicValue9890_ADV9890:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue9892_ARV9892;
		myrec^.arg2:=pARhsValue9906_ARV9906;
		myrec^.fn:=pAMinusDyadic9891_AMD9891;
		 pADyadicValue9890_ADV9890:=myrec;
		END;
		(*! try to cast to type: int16 vector ( 4 )*)
	FUNCTION pACastRhs9881_ACR9881:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9882_AAT9882;
		myrec^.arg2:=pADyadicValue9890_ADV9890;
		 pACastRhs9881_ACR9881:=myrec;
		END;
	FUNCTION pARhsValue9880_ARV9880:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9881_ACR9881;
		 pARhsValue9880_ARV9880:=myrec;
		END;
	FUNCTION pAAssign9867_AA9867:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue9880_ARV9880;
		myrec^.dest:=pARefcastRefval9868_ARR9868;
		 pAAssign9867_AA9867:=myrec;
		END;
	FUNCTION pAAssignMeaning9866_AAM9866:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign9867_AA9867;
		 pAAssignMeaning9866_AAM9866:=myrec;
		END;
	FUNCTION pAAssemblypattern9921_AA9921:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'psubw ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern9921_AA9921:=list;
		END;
	FUNCTION pAAssemblesto9920_AA9920:pprintlist;
	begin
		pAAssemblesto9920_AA9920:=pAAssemblypattern9921_AA9921;
		END;
	FUNCTION pASideeffects9926_AS9926:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects9926_AS9926:=nil;
		 pASideeffects9926_AS9926:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond9927_AUP9927:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond9927_AUP9927:=nil;
		 pAUnconditionalPrecond9927_AUP9927:=myrec;
		END;
	FUNCTION PSUBW_PSUBW:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patim4reg_4;
		params^[1]:=patmrmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning9866_AAM9866;
		matchedAssembler:=pAAssemblesto9920_AA9920;
		END;
		PSUBW_PSUBW:=myrec;
	END;
	FUNCTION pATypeid9930_AT9930:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im8reg  ilcg.pattern@1977d63}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9930_AT9930:=myrec;
		END;
	FUNCTION pATypeid9932_AT9932:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@18adce0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9932_AT9932:=myrec;
		END;
	FUNCTION pAInt8Signed9942_AI8S9942:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed9942_AI8S9942:=myrec;
		END;
	FUNCTION pASignedTformat9941_AST9941:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed9942_AI8S9942;
		 pASignedTformat9941_AST9941:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9940_ATP9940:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype9940_ATP9940:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9939_APT9939:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9939_APT9939:=nil;
		 pAPredeclaredtypeTypeprim9939_APT9939:=myrec;
		END;
	FUNCTION pAOptionalsign9945_AO9945:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9945_AO9945:=nil;
		 pAOptionalsign9945_AO9945:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9944_AIN9944:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9944_AIN9944:=myrec;
		END;
	FUNCTION pAArray9943_AA9943:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9943_AA9943:=nil;
		 pAArray9943_AA9943:=myrec;
		END;
	FUNCTION pAArrayType9938_AAT9938:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType9938_AAT9938:=myrec;
		END;
	FUNCTION pAReference9937_AR9937:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType9938_AAT9938;
		 pAReference9937_AR9937:=myrec;
		END;
	FUNCTION pAReftypeType9936_ART9936:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference9937_AR9937;
		 pAReftypeType9936_ART9936:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc9946_AIL9946:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9946_AIL9946:=myrec;
		END;
		(*! try to cast to type: ref int8 vector ( 8 )*)
	FUNCTION pARefcastRefval9935_ARR9935:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType9936_ART9936;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc9946_AIL9946;
		 pARefcastRefval9935_ARR9935:=myrec;
		END;
	FUNCTION pAInt8Signed9953_AI8S9953:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed9953_AI8S9953:=myrec;
		END;
	FUNCTION pASignedTformat9952_AST9952:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed9953_AI8S9953;
		 pASignedTformat9952_AST9952:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9951_ATP9951:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype9951_ATP9951:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9950_APT9950:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9950_APT9950:=nil;
		 pAPredeclaredtypeTypeprim9950_APT9950:=myrec;
		END;
	FUNCTION pAOptionalsign9956_AO9956:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9956_AO9956:=nil;
		 pAOptionalsign9956_AO9956:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9955_AIN9955:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9955_AIN9955:=myrec;
		END;
	FUNCTION pAArray9954_AA9954:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9954_AA9954:=nil;
		 pAArray9954_AA9954:=myrec;
		END;
	FUNCTION pAArrayType9949_AAT9949:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType9949_AAT9949:=myrec;
		END;
	FUNCTION pAMinusDyadic9958_AMD9958:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpminus;
		 pAMinusDyadic9958_AMD9958:=myrec;
		END;
	FUNCTION pAInt8Signed9965_AI8S9965:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed9965_AI8S9965:=myrec;
		END;
	FUNCTION pASignedTformat9964_AST9964:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed9965_AI8S9965;
		 pASignedTformat9964_AST9964:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9963_ATP9963:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype9963_ATP9963:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9962_APT9962:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9962_APT9962:=nil;
		 pAPredeclaredtypeTypeprim9962_APT9962:=myrec;
		END;
	FUNCTION pAOptionalsign9968_AO9968:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9968_AO9968:=nil;
		 pAOptionalsign9968_AO9968:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9967_AIN9967:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9967_AIN9967:=myrec;
		END;
	FUNCTION pAArray9966_AA9966:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9966_AA9966:=nil;
		 pAArray9966_AA9966:=myrec;
		END;
	FUNCTION pAArrayType9961_AAT9961:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType9961_AAT9961:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc9972_AIL9972:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9972_AIL9972:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9971_AR9971:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9972_AIL9972;
		 pARefval9971_AR9971:=myrec;
		END;
	FUNCTION pADerefRhs9970_ADR9970:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9971_AR9971;
		 pADerefRhs9970_ADR9970:=myrec;
		END;
	FUNCTION pARhsValue9969_ARV9969:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9970_ADR9970;
		 pARhsValue9969_ARV9969:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs9960_ACR9960:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9961_AAT9961;
		myrec^.arg2:=pARhsValue9969_ARV9969;
		 pACastRhs9960_ACR9960:=myrec;
		END;
	FUNCTION pARhsValue9959_ARV9959:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9960_ACR9960;
		 pARhsValue9959_ARV9959:=myrec;
		END;
	FUNCTION pAInt8Signed9979_AI8S9979:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed9979_AI8S9979:=myrec;
		END;
	FUNCTION pASignedTformat9978_AST9978:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed9979_AI8S9979;
		 pASignedTformat9978_AST9978:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9977_ATP9977:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype9977_ATP9977:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9976_APT9976:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9976_APT9976:=nil;
		 pAPredeclaredtypeTypeprim9976_APT9976:=myrec;
		END;
	FUNCTION pAOptionalsign9982_AO9982:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9982_AO9982:=nil;
		 pAOptionalsign9982_AO9982:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9981_AIN9981:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9981_AIN9981:=myrec;
		END;
	FUNCTION pAArray9980_AA9980:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9980_AA9980:=nil;
		 pAArray9980_AA9980:=myrec;
		END;
	FUNCTION pAArrayType9975_AAT9975:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType9975_AAT9975:=myrec;
		END;
		(*! Match ma *)
	FUNCTION pAIdLoc9986_AIL9986:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc9986_AIL9986:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9985_AR9985:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9986_AIL9986;
		 pARefval9985_AR9985:=myrec;
		END;
	FUNCTION pADerefRhs9984_ADR9984:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9985_AR9985;
		 pADerefRhs9984_ADR9984:=myrec;
		END;
	FUNCTION pARhsValue9983_ARV9983:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9984_ADR9984;
		 pARhsValue9983_ARV9983:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs9974_ACR9974:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9975_AAT9975;
		myrec^.arg2:=pARhsValue9983_ARV9983;
		 pACastRhs9974_ACR9974:=myrec;
		END;
	FUNCTION pARhsValue9973_ARV9973:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9974_ACR9974;
		 pARhsValue9973_ARV9973:=myrec;
		END;
	FUNCTION pADyadicValue9957_ADV9957:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue9959_ARV9959;
		myrec^.arg2:=pARhsValue9973_ARV9973;
		myrec^.fn:=pAMinusDyadic9958_AMD9958;
		 pADyadicValue9957_ADV9957:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs9948_ACR9948:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType9949_AAT9949;
		myrec^.arg2:=pADyadicValue9957_ADV9957;
		 pACastRhs9948_ACR9948:=myrec;
		END;
	FUNCTION pARhsValue9947_ARV9947:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9948_ACR9948;
		 pARhsValue9947_ARV9947:=myrec;
		END;
	FUNCTION pAAssign9934_AA9934:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue9947_ARV9947;
		myrec^.dest:=pARefcastRefval9935_ARR9935;
		 pAAssign9934_AA9934:=myrec;
		END;
	FUNCTION pAAssignMeaning9933_AAM9933:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign9934_AA9934;
		 pAAssignMeaning9933_AAM9933:=myrec;
		END;
	FUNCTION pAAssemblypattern9988_AA9988:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'psubb ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern9988_AA9988:=list;
		END;
	FUNCTION pAAssemblesto9987_AA9987:pprintlist;
	begin
		pAAssemblesto9987_AA9987:=pAAssemblypattern9988_AA9988;
		END;
	FUNCTION pASideeffects9993_AS9993:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects9993_AS9993:=nil;
		 pASideeffects9993_AS9993:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond9994_AUP9994:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond9994_AUP9994:=nil;
		 pAUnconditionalPrecond9994_AUP9994:=myrec;
		END;
	FUNCTION PSUBB_PSUBB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patim8reg_8;
		params^[1]:=patmrmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning9933_AAM9933;
		matchedAssembler:=pAAssemblesto9987_AA9987;
		END;
		PSUBB_PSUBB:=myrec;
	END;
	FUNCTION pATypeid9997_AT9997:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9997_AT9997:=myrec;
		END;
	FUNCTION pATypeid9999_AT9999:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@18adce0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9999_AT9999:=myrec;
		END;
	FUNCTION pAUint8Unsigned10009_AU8U10009:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned10009_AU8U10009:=myrec;
		END;
	FUNCTION pAUnsignedTformat10008_AUT10008:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned10009_AU8U10009;
		 pAUnsignedTformat10008_AUT10008:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10007_ATP10007:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype10007_ATP10007:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim10006_APT10006:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim10006_APT10006:=nil;
		 pAPredeclaredtypeTypeprim10006_APT10006:=myrec;
		END;
	FUNCTION pAOptionalsign10012_AO10012:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign10012_AO10012:=nil;
		 pAOptionalsign10012_AO10012:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber10011_AIN10011:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber10011_AIN10011:=myrec;
		END;
	FUNCTION pAArray10010_AA10010:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray10010_AA10010:=nil;
		 pAArray10010_AA10010:=myrec;
		END;
	FUNCTION pAArrayType10005_AAT10005:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType10005_AAT10005:=myrec;
		END;
	FUNCTION pAReference10004_AR10004:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType10005_AAT10005;
		 pAReference10004_AR10004:=myrec;
		END;
	FUNCTION pAReftypeType10003_ART10003:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference10004_AR10004;
		 pAReftypeType10003_ART10003:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc10013_AIL10013:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc10013_AIL10013:=myrec;
		END;
		(*! try to cast to type: ref uint8 vector ( 8 )*)
	FUNCTION pARefcastRefval10002_ARR10002:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType10003_ART10003;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc10013_AIL10013;
		 pARefcastRefval10002_ARR10002:=myrec;
		END;
	FUNCTION pAUint8Unsigned10020_AU8U10020:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned10020_AU8U10020:=myrec;
		END;
	FUNCTION pAUnsignedTformat10019_AUT10019:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned10020_AU8U10020;
		 pAUnsignedTformat10019_AUT10019:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10018_ATP10018:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype10018_ATP10018:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim10017_APT10017:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim10017_APT10017:=nil;
		 pAPredeclaredtypeTypeprim10017_APT10017:=myrec;
		END;
	FUNCTION pAOptionalsign10023_AO10023:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign10023_AO10023:=nil;
		 pAOptionalsign10023_AO10023:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber10022_AIN10022:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber10022_AIN10022:=myrec;
		END;
	FUNCTION pAArray10021_AA10021:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray10021_AA10021:=nil;
		 pAArray10021_AA10021:=myrec;
		END;
	FUNCTION pAArrayType10016_AAT10016:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType10016_AAT10016:=myrec;
		END;
	FUNCTION pAMinusDyadic10025_AMD10025:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpminus;
		 pAMinusDyadic10025_AMD10025:=myrec;
		END;
	FUNCTION pAUint8Unsigned10032_AU8U10032:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned10032_AU8U10032:=myrec;
		END;
	FUNCTION pAUnsignedTformat10031_AUT10031:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned10032_AU8U10032;
		 pAUnsignedTformat10031_AUT10031:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10030_ATP10030:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype10030_ATP10030:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim10029_APT10029:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim10029_APT10029:=nil;
		 pAPredeclaredtypeTypeprim10029_APT10029:=myrec;
		END;
	FUNCTION pAOptionalsign10035_AO10035:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign10035_AO10035:=nil;
		 pAOptionalsign10035_AO10035:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber10034_AIN10034:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber10034_AIN10034:=myrec;
		END;
	FUNCTION pAArray10033_AA10033:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray10033_AA10033:=nil;
		 pAArray10033_AA10033:=myrec;
		END;
	FUNCTION pAArrayType10028_AAT10028:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType10028_AAT10028:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc10039_AIL10039:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc10039_AIL10039:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval10038_AR10038:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10039_AIL10039;
		 pARefval10038_AR10038:=myrec;
		END;
	FUNCTION pADerefRhs10037_ADR10037:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval10038_AR10038;
		 pADerefRhs10037_ADR10037:=myrec;
		END;
	FUNCTION pARhsValue10036_ARV10036:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs10037_ADR10037;
		 pARhsValue10036_ARV10036:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs10027_ACR10027:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType10028_AAT10028;
		myrec^.arg2:=pARhsValue10036_ARV10036;
		 pACastRhs10027_ACR10027:=myrec;
		END;
	FUNCTION pARhsValue10026_ARV10026:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs10027_ACR10027;
		 pARhsValue10026_ARV10026:=myrec;
		END;
	FUNCTION pAUint8Unsigned10046_AU8U10046:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned10046_AU8U10046:=myrec;
		END;
	FUNCTION pAUnsignedTformat10045_AUT10045:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned10046_AU8U10046;
		 pAUnsignedTformat10045_AUT10045:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10044_ATP10044:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype10044_ATP10044:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim10043_APT10043:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim10043_APT10043:=nil;
		 pAPredeclaredtypeTypeprim10043_APT10043:=myrec;
		END;
	FUNCTION pAOptionalsign10049_AO10049:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign10049_AO10049:=nil;
		 pAOptionalsign10049_AO10049:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber10048_AIN10048:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber10048_AIN10048:=myrec;
		END;
	FUNCTION pAArray10047_AA10047:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray10047_AA10047:=nil;
		 pAArray10047_AA10047:=myrec;
		END;
	FUNCTION pAArrayType10042_AAT10042:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType10042_AAT10042:=myrec;
		END;
		(*! Match ma *)
	FUNCTION pAIdLoc10053_AIL10053:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc10053_AIL10053:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval10052_AR10052:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10053_AIL10053;
		 pARefval10052_AR10052:=myrec;
		END;
	FUNCTION pADerefRhs10051_ADR10051:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval10052_AR10052;
		 pADerefRhs10051_ADR10051:=myrec;
		END;
	FUNCTION pARhsValue10050_ARV10050:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs10051_ADR10051;
		 pARhsValue10050_ARV10050:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs10041_ACR10041:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType10042_AAT10042;
		myrec^.arg2:=pARhsValue10050_ARV10050;
		 pACastRhs10041_ACR10041:=myrec;
		END;
	FUNCTION pARhsValue10040_ARV10040:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs10041_ACR10041;
		 pARhsValue10040_ARV10040:=myrec;
		END;
	FUNCTION pADyadicValue10024_ADV10024:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue10026_ARV10026;
		myrec^.arg2:=pARhsValue10040_ARV10040;
		myrec^.fn:=pAMinusDyadic10025_AMD10025;
		 pADyadicValue10024_ADV10024:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs10015_ACR10015:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType10016_AAT10016;
		myrec^.arg2:=pADyadicValue10024_ADV10024;
		 pACastRhs10015_ACR10015:=myrec;
		END;
	FUNCTION pARhsValue10014_ARV10014:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs10015_ACR10015;
		 pARhsValue10014_ARV10014:=myrec;
		END;
	FUNCTION pAAssign10001_AA10001:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue10014_ARV10014;
		myrec^.dest:=pARefcastRefval10002_ARR10002;
		 pAAssign10001_AA10001:=myrec;
		END;
	FUNCTION pAAssignMeaning10000_AAM10000:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign10001_AA10001;
		 pAAssignMeaning10000_AAM10000:=myrec;
		END;
	FUNCTION pAAssemblypattern10055_AA10055:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'psubb ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern10055_AA10055:=list;
		END;
	FUNCTION pAAssemblesto10054_AA10054:pprintlist;
	begin
		pAAssemblesto10054_AA10054:=pAAssemblypattern10055_AA10055;
		END;
	FUNCTION pASideeffects10060_AS10060:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects10060_AS10060:=nil;
		 pASideeffects10060_AS10060:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond10061_AUP10061:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond10061_AUP10061:=nil;
		 pAUnconditionalPrecond10061_AUP10061:=myrec;
		END;
	FUNCTION PSUBUB_PSUBUB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		params^[1]:=patmrmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning10000_AAM10000;
		matchedAssembler:=pAAssemblesto10054_AA10054;
		END;
		PSUBUB_PSUBUB:=myrec;
	END;
	FUNCTION pATypeid10064_AT10064:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im8reg  ilcg.pattern@1977d63}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10064_AT10064:=myrec;
		END;
	FUNCTION pATypeid10066_AT10066:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@18adce0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10066_AT10066:=myrec;
		END;
	FUNCTION pAInt8Signed10076_AI8S10076:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed10076_AI8S10076:=myrec;
		END;
	FUNCTION pASignedTformat10075_AST10075:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed10076_AI8S10076;
		 pASignedTformat10075_AST10075:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10074_ATP10074:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype10074_ATP10074:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim10073_APT10073:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim10073_APT10073:=nil;
		 pAPredeclaredtypeTypeprim10073_APT10073:=myrec;
		END;
	FUNCTION pAOptionalsign10079_AO10079:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign10079_AO10079:=nil;
		 pAOptionalsign10079_AO10079:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber10078_AIN10078:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber10078_AIN10078:=myrec;
		END;
	FUNCTION pAArray10077_AA10077:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray10077_AA10077:=nil;
		 pAArray10077_AA10077:=myrec;
		END;
	FUNCTION pAArrayType10072_AAT10072:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType10072_AAT10072:=myrec;
		END;
	FUNCTION pAReference10071_AR10071:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType10072_AAT10072;
		 pAReference10071_AR10071:=myrec;
		END;
	FUNCTION pAReftypeType10070_ART10070:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference10071_AR10071;
		 pAReftypeType10070_ART10070:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc10080_AIL10080:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc10080_AIL10080:=myrec;
		END;
		(*! try to cast to type: ref int8 vector ( 8 )*)
	FUNCTION pARefcastRefval10069_ARR10069:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType10070_ART10070;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc10080_AIL10080;
		 pARefcastRefval10069_ARR10069:=myrec;
		END;
	FUNCTION pAInt8Signed10087_AI8S10087:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed10087_AI8S10087:=myrec;
		END;
	FUNCTION pASignedTformat10086_AST10086:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed10087_AI8S10087;
		 pASignedTformat10086_AST10086:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10085_ATP10085:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype10085_ATP10085:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim10084_APT10084:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim10084_APT10084:=nil;
		 pAPredeclaredtypeTypeprim10084_APT10084:=myrec;
		END;
	FUNCTION pAOptionalsign10090_AO10090:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign10090_AO10090:=nil;
		 pAOptionalsign10090_AO10090:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber10089_AIN10089:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber10089_AIN10089:=myrec;
		END;
	FUNCTION pAArray10088_AA10088:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray10088_AA10088:=nil;
		 pAArray10088_AA10088:=myrec;
		END;
	FUNCTION pAArrayType10083_AAT10083:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType10083_AAT10083:=myrec;
		END;
	FUNCTION pASatminusDyadic10092_ASD10092:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpsatminus;
		 pASatminusDyadic10092_ASD10092:=myrec;
		END;
	FUNCTION pAInt8Signed10099_AI8S10099:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed10099_AI8S10099:=myrec;
		END;
	FUNCTION pASignedTformat10098_AST10098:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed10099_AI8S10099;
		 pASignedTformat10098_AST10098:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10097_ATP10097:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype10097_ATP10097:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim10096_APT10096:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim10096_APT10096:=nil;
		 pAPredeclaredtypeTypeprim10096_APT10096:=myrec;
		END;
	FUNCTION pAOptionalsign10102_AO10102:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign10102_AO10102:=nil;
		 pAOptionalsign10102_AO10102:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber10101_AIN10101:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber10101_AIN10101:=myrec;
		END;
	FUNCTION pAArray10100_AA10100:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray10100_AA10100:=nil;
		 pAArray10100_AA10100:=myrec;
		END;
	FUNCTION pAArrayType10095_AAT10095:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType10095_AAT10095:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc10106_AIL10106:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc10106_AIL10106:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval10105_AR10105:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10106_AIL10106;
		 pARefval10105_AR10105:=myrec;
		END;
	FUNCTION pADerefRhs10104_ADR10104:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval10105_AR10105;
		 pADerefRhs10104_ADR10104:=myrec;
		END;
	FUNCTION pARhsValue10103_ARV10103:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs10104_ADR10104;
		 pARhsValue10103_ARV10103:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs10094_ACR10094:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType10095_AAT10095;
		myrec^.arg2:=pARhsValue10103_ARV10103;
		 pACastRhs10094_ACR10094:=myrec;
		END;
	FUNCTION pARhsValue10093_ARV10093:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs10094_ACR10094;
		 pARhsValue10093_ARV10093:=myrec;
		END;
	FUNCTION pAInt8Signed10113_AI8S10113:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed10113_AI8S10113:=myrec;
		END;
	FUNCTION pASignedTformat10112_AST10112:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed10113_AI8S10113;
		 pASignedTformat10112_AST10112:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10111_ATP10111:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype10111_ATP10111:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim10110_APT10110:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim10110_APT10110:=nil;
		 pAPredeclaredtypeTypeprim10110_APT10110:=myrec;
		END;
	FUNCTION pAOptionalsign10116_AO10116:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign10116_AO10116:=nil;
		 pAOptionalsign10116_AO10116:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber10115_AIN10115:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber10115_AIN10115:=myrec;
		END;
	FUNCTION pAArray10114_AA10114:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray10114_AA10114:=nil;
		 pAArray10114_AA10114:=myrec;
		END;
	FUNCTION pAArrayType10109_AAT10109:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType10109_AAT10109:=myrec;
		END;
		(*! Match ma *)
	FUNCTION pAIdLoc10120_AIL10120:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc10120_AIL10120:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval10119_AR10119:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10120_AIL10120;
		 pARefval10119_AR10119:=myrec;
		END;
	FUNCTION pADerefRhs10118_ADR10118:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval10119_AR10119;
		 pADerefRhs10118_ADR10118:=myrec;
		END;
	FUNCTION pARhsValue10117_ARV10117:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs10118_ADR10118;
		 pARhsValue10117_ARV10117:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs10108_ACR10108:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType10109_AAT10109;
		myrec^.arg2:=pARhsValue10117_ARV10117;
		 pACastRhs10108_ACR10108:=myrec;
		END;
	FUNCTION pARhsValue10107_ARV10107:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs10108_ACR10108;
		 pARhsValue10107_ARV10107:=myrec;
		END;
	FUNCTION pADyadicValue10091_ADV10091:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue10093_ARV10093;
		myrec^.arg2:=pARhsValue10107_ARV10107;
		myrec^.fn:=pASatminusDyadic10092_ASD10092;
		 pADyadicValue10091_ADV10091:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs10082_ACR10082:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType10083_AAT10083;
		myrec^.arg2:=pADyadicValue10091_ADV10091;
		 pACastRhs10082_ACR10082:=myrec;
		END;
	FUNCTION pARhsValue10081_ARV10081:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs10082_ACR10082;
		 pARhsValue10081_ARV10081:=myrec;
		END;
	FUNCTION pAAssign10068_AA10068:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue10081_ARV10081;
		myrec^.dest:=pARefcastRefval10069_ARR10069;
		 pAAssign10068_AA10068:=myrec;
		END;
	FUNCTION pAAssignMeaning10067_AAM10067:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign10068_AA10068;
		 pAAssignMeaning10067_AAM10067:=myrec;
		END;
	FUNCTION pAAssemblypattern10122_AA10122:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'psubsb ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern10122_AA10122:=list;
		END;
	FUNCTION pAAssemblesto10121_AA10121:pprintlist;
	begin
		pAAssemblesto10121_AA10121:=pAAssemblypattern10122_AA10122;
		END;
	FUNCTION pASideeffects10127_AS10127:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects10127_AS10127:=nil;
		 pASideeffects10127_AS10127:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond10128_AUP10128:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond10128_AUP10128:=nil;
		 pAUnconditionalPrecond10128_AUP10128:=myrec;
		END;
	FUNCTION PSUBSB_PSUBSB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patim8reg_8;
		params^[1]:=patmrmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning10067_AAM10067;
		matchedAssembler:=pAAssemblesto10121_AA10121;
		END;
		PSUBSB_PSUBSB:=myrec;
	END;
	FUNCTION pATypeid10131_AT10131:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10131_AT10131:=myrec;
		END;
	FUNCTION pATypeid10133_AT10133:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@18adce0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10133_AT10133:=myrec;
		END;
	FUNCTION pAUint8Unsigned10143_AU8U10143:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned10143_AU8U10143:=myrec;
		END;
	FUNCTION pAUnsignedTformat10142_AUT10142:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned10143_AU8U10143;
		 pAUnsignedTformat10142_AUT10142:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10141_ATP10141:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype10141_ATP10141:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim10140_APT10140:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim10140_APT10140:=nil;
		 pAPredeclaredtypeTypeprim10140_APT10140:=myrec;
		END;
	FUNCTION pAOptionalsign10146_AO10146:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign10146_AO10146:=nil;
		 pAOptionalsign10146_AO10146:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber10145_AIN10145:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber10145_AIN10145:=myrec;
		END;
	FUNCTION pAArray10144_AA10144:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray10144_AA10144:=nil;
		 pAArray10144_AA10144:=myrec;
		END;
	FUNCTION pAArrayType10139_AAT10139:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType10139_AAT10139:=myrec;
		END;
	FUNCTION pAReference10138_AR10138:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType10139_AAT10139;
		 pAReference10138_AR10138:=myrec;
		END;
	FUNCTION pAReftypeType10137_ART10137:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference10138_AR10138;
		 pAReftypeType10137_ART10137:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc10147_AIL10147:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc10147_AIL10147:=myrec;
		END;
		(*! try to cast to type: ref uint8 vector ( 8 )*)
	FUNCTION pARefcastRefval10136_ARR10136:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType10137_ART10137;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc10147_AIL10147;
		 pARefcastRefval10136_ARR10136:=myrec;
		END;
	FUNCTION pAUint8Unsigned10154_AU8U10154:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned10154_AU8U10154:=myrec;
		END;
	FUNCTION pAUnsignedTformat10153_AUT10153:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned10154_AU8U10154;
		 pAUnsignedTformat10153_AUT10153:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10152_ATP10152:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype10152_ATP10152:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim10151_APT10151:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim10151_APT10151:=nil;
		 pAPredeclaredtypeTypeprim10151_APT10151:=myrec;
		END;
	FUNCTION pAOptionalsign10157_AO10157:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign10157_AO10157:=nil;
		 pAOptionalsign10157_AO10157:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber10156_AIN10156:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber10156_AIN10156:=myrec;
		END;
	FUNCTION pAArray10155_AA10155:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray10155_AA10155:=nil;
		 pAArray10155_AA10155:=myrec;
		END;
	FUNCTION pAArrayType10150_AAT10150:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType10150_AAT10150:=myrec;
		END;
	FUNCTION pASatminusDyadic10159_ASD10159:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpsatminus;
		 pASatminusDyadic10159_ASD10159:=myrec;
		END;
	FUNCTION pAUint8Unsigned10166_AU8U10166:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned10166_AU8U10166:=myrec;
		END;
	FUNCTION pAUnsignedTformat10165_AUT10165:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned10166_AU8U10166;
		 pAUnsignedTformat10165_AUT10165:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10164_ATP10164:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype10164_ATP10164:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim10163_APT10163:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim10163_APT10163:=nil;
		 pAPredeclaredtypeTypeprim10163_APT10163:=myrec;
		END;
	FUNCTION pAOptionalsign10169_AO10169:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign10169_AO10169:=nil;
		 pAOptionalsign10169_AO10169:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber10168_AIN10168:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber10168_AIN10168:=myrec;
		END;
	FUNCTION pAArray10167_AA10167:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray10167_AA10167:=nil;
		 pAArray10167_AA10167:=myrec;
		END;
	FUNCTION pAArrayType10162_AAT10162:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType10162_AAT10162:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc10173_AIL10173:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc10173_AIL10173:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval10172_AR10172:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10173_AIL10173;
		 pARefval10172_AR10172:=myrec;
		END;
	FUNCTION pADerefRhs10171_ADR10171:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval10172_AR10172;
		 pADerefRhs10171_ADR10171:=myrec;
		END;
	FUNCTION pARhsValue10170_ARV10170:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs10171_ADR10171;
		 pARhsValue10170_ARV10170:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs10161_ACR10161:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType10162_AAT10162;
		myrec^.arg2:=pARhsValue10170_ARV10170;
		 pACastRhs10161_ACR10161:=myrec;
		END;
	FUNCTION pARhsValue10160_ARV10160:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs10161_ACR10161;
		 pARhsValue10160_ARV10160:=myrec;
		END;
	FUNCTION pAUint8Unsigned10180_AU8U10180:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned10180_AU8U10180:=myrec;
		END;
	FUNCTION pAUnsignedTformat10179_AUT10179:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned10180_AU8U10180;
		 pAUnsignedTformat10179_AUT10179:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10178_ATP10178:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype10178_ATP10178:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim10177_APT10177:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim10177_APT10177:=nil;
		 pAPredeclaredtypeTypeprim10177_APT10177:=myrec;
		END;
	FUNCTION pAOptionalsign10183_AO10183:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign10183_AO10183:=nil;
		 pAOptionalsign10183_AO10183:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber10182_AIN10182:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber10182_AIN10182:=myrec;
		END;
	FUNCTION pAArray10181_AA10181:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray10181_AA10181:=nil;
		 pAArray10181_AA10181:=myrec;
		END;
	FUNCTION pAArrayType10176_AAT10176:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType10176_AAT10176:=myrec;
		END;
		(*! Match ma *)
	FUNCTION pAIdLoc10187_AIL10187:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc10187_AIL10187:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval10186_AR10186:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10187_AIL10187;
		 pARefval10186_AR10186:=myrec;
		END;
	FUNCTION pADerefRhs10185_ADR10185:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval10186_AR10186;
		 pADerefRhs10185_ADR10185:=myrec;
		END;
	FUNCTION pARhsValue10184_ARV10184:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs10185_ADR10185;
		 pARhsValue10184_ARV10184:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs10175_ACR10175:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType10176_AAT10176;
		myrec^.arg2:=pARhsValue10184_ARV10184;
		 pACastRhs10175_ACR10175:=myrec;
		END;
	FUNCTION pARhsValue10174_ARV10174:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs10175_ACR10175;
		 pARhsValue10174_ARV10174:=myrec;
		END;
	FUNCTION pADyadicValue10158_ADV10158:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue10160_ARV10160;
		myrec^.arg2:=pARhsValue10174_ARV10174;
		myrec^.fn:=pASatminusDyadic10159_ASD10159;
		 pADyadicValue10158_ADV10158:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs10149_ACR10149:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType10150_AAT10150;
		myrec^.arg2:=pADyadicValue10158_ADV10158;
		 pACastRhs10149_ACR10149:=myrec;
		END;
	FUNCTION pARhsValue10148_ARV10148:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs10149_ACR10149;
		 pARhsValue10148_ARV10148:=myrec;
		END;
	FUNCTION pAAssign10135_AA10135:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue10148_ARV10148;
		myrec^.dest:=pARefcastRefval10136_ARR10136;
		 pAAssign10135_AA10135:=myrec;
		END;
	FUNCTION pAAssignMeaning10134_AAM10134:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign10135_AA10135;
		 pAAssignMeaning10134_AAM10134:=myrec;
		END;
	FUNCTION pAAssemblypattern10189_AA10189:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'psubusb ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern10189_AA10189:=list;
		END;
	FUNCTION pAAssemblesto10188_AA10188:pprintlist;
	begin
		pAAssemblesto10188_AA10188:=pAAssemblypattern10189_AA10189;
		END;
	FUNCTION pASideeffects10194_AS10194:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects10194_AS10194:=nil;
		 pASideeffects10194_AS10194:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond10195_AUP10195:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond10195_AUP10195:=nil;
		 pAUnconditionalPrecond10195_AUP10195:=myrec;
		END;
	FUNCTION PSUBUSB_PSUBUSB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		params^[1]:=patmrmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning10134_AAM10134;
		matchedAssembler:=pAAssemblesto10188_AA10188;
		END;
		PSUBUSB_PSUBUSB:=myrec;
	END;
	FUNCTION pATypeid10198_AT10198:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10198_AT10198:=myrec;
		END;
	FUNCTION pATypeid10200_AT10200:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@18adce0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10200_AT10200:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc10204_AIL10204:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc10204_AIL10204:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval10203_AR10203:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10204_AIL10204;
		 pARefval10203_AR10203:=myrec;
		END;
	FUNCTION pAAndDyadic10206_AAD10206:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpand;
		 pAAndDyadic10206_AAD10206:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc10210_AIL10210:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc10210_AIL10210:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval10209_AR10209:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10210_AIL10210;
		 pARefval10209_AR10209:=myrec;
		END;
	FUNCTION pADerefRhs10208_ADR10208:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval10209_AR10209;
		 pADerefRhs10208_ADR10208:=myrec;
		END;
	FUNCTION pARhsValue10207_ARV10207:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs10208_ADR10208;
		 pARhsValue10207_ARV10207:=myrec;
		END;
		(*! Match ma *)
	FUNCTION pAIdLoc10214_AIL10214:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc10214_AIL10214:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval10213_AR10213:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10214_AIL10214;
		 pARefval10213_AR10213:=myrec;
		END;
	FUNCTION pADerefRhs10212_ADR10212:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval10213_AR10213;
		 pADerefRhs10212_ADR10212:=myrec;
		END;
	FUNCTION pARhsValue10211_ARV10211:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs10212_ADR10212;
		 pARhsValue10211_ARV10211:=myrec;
		END;
	FUNCTION pADyadicValue10205_ADV10205:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue10207_ARV10207;
		myrec^.arg2:=pARhsValue10211_ARV10211;
		myrec^.fn:=pAAndDyadic10206_AAD10206;
		 pADyadicValue10205_ADV10205:=myrec;
		END;
	FUNCTION pAAssign10202_AA10202:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue10205_ADV10205;
		myrec^.dest:=pARefval10203_AR10203;
		 pAAssign10202_AA10202:=myrec;
		END;
	FUNCTION pAAssignMeaning10201_AAM10201:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign10202_AA10202;
		 pAAssignMeaning10201_AAM10201:=myrec;
		END;
	FUNCTION pAAssemblypattern10216_AA10216:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'pand ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern10216_AA10216:=list;
		END;
	FUNCTION pAAssemblesto10215_AA10215:pprintlist;
	begin
		pAAssemblesto10215_AA10215:=pAAssemblypattern10216_AA10216;
		END;
	FUNCTION pASideeffects10221_AS10221:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects10221_AS10221:=nil;
		 pASideeffects10221_AS10221:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond10222_AUP10222:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond10222_AUP10222:=nil;
		 pAUnconditionalPrecond10222_AUP10222:=myrec;
		END;
	FUNCTION PAND_PAND:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		params^[1]:=patmrmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning10201_AAM10201;
		matchedAssembler:=pAAssemblesto10215_AA10215;
		END;
		PAND_PAND:=myrec;
	END;
	FUNCTION pATypeid10225_AT10225:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10225_AT10225:=myrec;
		END;
	FUNCTION pATypeid10227_AT10227:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@18adce0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10227_AT10227:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc10231_AIL10231:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc10231_AIL10231:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval10230_AR10230:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10231_AIL10231;
		 pARefval10230_AR10230:=myrec;
		END;
	FUNCTION pAAndDyadic10233_AAD10233:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpand;
		 pAAndDyadic10233_AAD10233:=myrec;
		END;
		(*! Match ma *)
	FUNCTION pAIdLoc10237_AIL10237:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc10237_AIL10237:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval10236_AR10236:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10237_AIL10237;
		 pARefval10236_AR10236:=myrec;
		END;
	FUNCTION pADerefRhs10235_ADR10235:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval10236_AR10236;
		 pADerefRhs10235_ADR10235:=myrec;
		END;
	FUNCTION pARhsValue10234_ARV10234:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs10235_ADR10235;
		 pARhsValue10234_ARV10234:=myrec;
		END;
	FUNCTION pANotMonadic10239_ANM10239:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpNOT;
		 pANotMonadic10239_ANM10239:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc10243_AIL10243:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc10243_AIL10243:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval10242_AR10242:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10243_AIL10243;
		 pARefval10242_AR10242:=myrec;
		END;
	FUNCTION pADerefRhs10241_ADR10241:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval10242_AR10242;
		 pADerefRhs10241_ADR10241:=myrec;
		END;
	FUNCTION pARhsValue10240_ARV10240:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs10241_ADR10241;
		 pARhsValue10240_ARV10240:=myrec;
		END;
	FUNCTION pAMonadicValue10238_AMV10238:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue10240_ARV10240;
		myrec^.fn:=pANotMonadic10239_ANM10239;
		 pAMonadicValue10238_AMV10238:=myrec;
		END;
	FUNCTION pADyadicValue10232_ADV10232:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue10234_ARV10234;
		myrec^.arg2:=pAMonadicValue10238_AMV10238;
		myrec^.fn:=pAAndDyadic10233_AAD10233;
		 pADyadicValue10232_ADV10232:=myrec;
		END;
	FUNCTION pAAssign10229_AA10229:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue10232_ADV10232;
		myrec^.dest:=pARefval10230_AR10230;
		 pAAssign10229_AA10229:=myrec;
		END;
	FUNCTION pAAssignMeaning10228_AAM10228:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign10229_AA10229;
		 pAAssignMeaning10228_AAM10228:=myrec;
		END;
	FUNCTION pAAssemblypattern10245_AA10245:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'pandn ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern10245_AA10245:=list;
		END;
	FUNCTION pAAssemblesto10244_AA10244:pprintlist;
	begin
		pAAssemblesto10244_AA10244:=pAAssemblypattern10245_AA10245;
		END;
	FUNCTION pASideeffects10250_AS10250:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects10250_AS10250:=nil;
		 pASideeffects10250_AS10250:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond10251_AUP10251:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond10251_AUP10251:=nil;
		 pAUnconditionalPrecond10251_AUP10251:=myrec;
		END;
	FUNCTION PANDN_PANDN:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		params^[1]:=patmrmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning10228_AAM10228;
		matchedAssembler:=pAAssemblesto10244_AA10244;
		END;
		PANDN_PANDN:=myrec;
	END;
	FUNCTION pATypeid10254_AT10254:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10254_AT10254:=myrec;
		END;
	FUNCTION pATypeid10256_AT10256:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@18adce0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10256_AT10256:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc10260_AIL10260:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc10260_AIL10260:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval10259_AR10259:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10260_AIL10260;
		 pARefval10259_AR10259:=myrec;
		END;
	FUNCTION pAOrDyadic10262_AOD10262:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpor;
		 pAOrDyadic10262_AOD10262:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc10266_AIL10266:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc10266_AIL10266:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval10265_AR10265:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10266_AIL10266;
		 pARefval10265_AR10265:=myrec;
		END;
	FUNCTION pADerefRhs10264_ADR10264:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval10265_AR10265;
		 pADerefRhs10264_ADR10264:=myrec;
		END;
	FUNCTION pARhsValue10263_ARV10263:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs10264_ADR10264;
		 pARhsValue10263_ARV10263:=myrec;
		END;
		(*! Match ma *)
	FUNCTION pAIdLoc10270_AIL10270:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc10270_AIL10270:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval10269_AR10269:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10270_AIL10270;
		 pARefval10269_AR10269:=myrec;
		END;
	FUNCTION pADerefRhs10268_ADR10268:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval10269_AR10269;
		 pADerefRhs10268_ADR10268:=myrec;
		END;
	FUNCTION pARhsValue10267_ARV10267:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs10268_ADR10268;
		 pARhsValue10267_ARV10267:=myrec;
		END;
	FUNCTION pADyadicValue10261_ADV10261:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue10263_ARV10263;
		myrec^.arg2:=pARhsValue10267_ARV10267;
		myrec^.fn:=pAOrDyadic10262_AOD10262;
		 pADyadicValue10261_ADV10261:=myrec;
		END;
	FUNCTION pAAssign10258_AA10258:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue10261_ADV10261;
		myrec^.dest:=pARefval10259_AR10259;
		 pAAssign10258_AA10258:=myrec;
		END;
	FUNCTION pAAssignMeaning10257_AAM10257:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign10258_AA10258;
		 pAAssignMeaning10257_AAM10257:=myrec;
		END;
	FUNCTION pAAssemblypattern10272_AA10272:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'por ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern10272_AA10272:=list;
		END;
	FUNCTION pAAssemblesto10271_AA10271:pprintlist;
	begin
		pAAssemblesto10271_AA10271:=pAAssemblypattern10272_AA10272;
		END;
	FUNCTION pASideeffects10277_AS10277:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects10277_AS10277:=nil;
		 pASideeffects10277_AS10277:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond10278_AUP10278:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond10278_AUP10278:=nil;
		 pAUnconditionalPrecond10278_AUP10278:=myrec;
		END;
	FUNCTION POR_POR:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		params^[1]:=patmrmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning10257_AAM10257;
		matchedAssembler:=pAAssemblesto10271_AA10271;
		END;
		POR_POR:=myrec;
	END;
	FUNCTION pATypeid10281_AT10281:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ waddrmode  ilcg.pattern@1d40c4e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10281_AT10281:=myrec;
		END;
	FUNCTION pATypeid10283_AT10283:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ wmreg  ilcg.pattern@c610af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10283_AT10283:=myrec;
		END;
	FUNCTION pAWordFormat10291_AWF10291:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword;
		 pAWordFormat10291_AWF10291:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype10290_AFP10290:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAFormatPredeclaredtype10290_AFP10290:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType10289_APT10289:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAPredeclaredtypeType10289_APT10289:=myrec;
		END;
	FUNCTION pAReference10288_AR10288:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType10289_APT10289;
		 pAReference10288_AR10288:=myrec;
		END;
	FUNCTION pAReftypeType10287_ART10287:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference10288_AR10288;
		 pAReftypeType10287_ART10287:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc10292_AIL10292:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc10292_AIL10292:=myrec;
		END;
		(*! try to cast to type: ref word*)
	FUNCTION pARefcastRefval10286_ARR10286:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType10287_ART10287;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc10292_AIL10292;
		 pARefcastRefval10286_ARR10286:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc10296_AIL10296:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc10296_AIL10296:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval10295_AR10295:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10296_AIL10296;
		 pARefval10295_AR10295:=myrec;
		END;
	FUNCTION pADerefRhs10294_ADR10294:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval10295_AR10295;
		 pADerefRhs10294_ADR10294:=myrec;
		END;
	FUNCTION pARhsValue10293_ARV10293:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs10294_ADR10294;
		 pARhsValue10293_ARV10293:=myrec;
		END;
	FUNCTION pAAssign10285_AA10285:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue10293_ARV10293;
		myrec^.dest:=pARefcastRefval10286_ARR10286;
		 pAAssign10285_AA10285:=myrec;
		END;
	FUNCTION pAAssignMeaning10284_AAM10284:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign10285_AA10285;
		 pAAssignMeaning10284_AAM10284:=myrec;
		END;
	FUNCTION pAAssemblypattern10298_AA10298:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movd ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern10298_AA10298:=list;
		END;
	FUNCTION pAAssemblesto10297_AA10297:pprintlist;
	begin
		pAAssemblesto10297_AA10297:=pAAssemblypattern10298_AA10298;
		END;
	FUNCTION pASideeffects10303_AS10303:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects10303_AS10303:=nil;
		 pASideeffects10303_AS10303:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond10304_AUP10304:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond10304_AUP10304:=nil;
		 pAUnconditionalPrecond10304_AUP10304:=myrec;
		END;
	FUNCTION MOVDS_MOVDS:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patwmreg_;
		params^[0]:=patwaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning10284_AAM10284;
		matchedAssembler:=pAAssemblesto10297_AA10297;
		END;
		MOVDS_MOVDS:=myrec;
	END;
	FUNCTION pATypeid10307_AT10307:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ waddrmode  ilcg.pattern@1d40c4e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10307_AT10307:=myrec;
		END;
	FUNCTION pATypeid10309_AT10309:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ wmreg  ilcg.pattern@c610af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10309_AT10309:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc10313_AIL10313:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc10313_AIL10313:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval10312_AR10312:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10313_AIL10313;
		 pARefval10312_AR10312:=myrec;
		END;
	FUNCTION pAWordFormat10318_AWF10318:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword;
		 pAWordFormat10318_AWF10318:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype10317_AFP10317:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAFormatPredeclaredtype10317_AFP10317:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType10316_APT10316:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAPredeclaredtypeType10316_APT10316:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc10322_AIL10322:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc10322_AIL10322:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval10321_AR10321:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10322_AIL10322;
		 pARefval10321_AR10321:=myrec;
		END;
	FUNCTION pADerefRhs10320_ADR10320:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval10321_AR10321;
		 pADerefRhs10320_ADR10320:=myrec;
		END;
	FUNCTION pARhsValue10319_ARV10319:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs10320_ADR10320;
		 pARhsValue10319_ARV10319:=myrec;
		END;
		(*! try to cast to type: word*)
	FUNCTION pACastRhs10315_ACR10315:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType10316_APT10316;
		myrec^.arg2:=pARhsValue10319_ARV10319;
		 pACastRhs10315_ACR10315:=myrec;
		END;
	FUNCTION pARhsValue10314_ARV10314:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs10315_ACR10315;
		 pARhsValue10314_ARV10314:=myrec;
		END;
	FUNCTION pAAssign10311_AA10311:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue10314_ARV10314;
		myrec^.dest:=pARefval10312_AR10312;
		 pAAssign10311_AA10311:=myrec;
		END;
	FUNCTION pAAssignMeaning10310_AAM10310:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign10311_AA10311;
		 pAAssignMeaning10310_AAM10310:=myrec;
		END;
	FUNCTION pAAssemblypattern10324_AA10324:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movd ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,0);
		pAAssemblypattern10324_AA10324:=list;
		END;
	FUNCTION pAAssemblesto10323_AA10323:pprintlist;
	begin
		pAAssemblesto10323_AA10323:=pAAssemblypattern10324_AA10324;
		END;
	FUNCTION pASideeffects10329_AS10329:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects10329_AS10329:=nil;
		 pASideeffects10329_AS10329:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond10330_AUP10330:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond10330_AUP10330:=nil;
		 pAUnconditionalPrecond10330_AUP10330:=myrec;
		END;
	FUNCTION MOVDL_MOVDL:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patwmreg_;
		params^[0]:=patwaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning10310_AAM10310;
		matchedAssembler:=pAAssemblesto10323_AA10323;
		END;
		MOVDL_MOVDL:=myrec;
	END;
	FUNCTION pATypeid10333_AT10333:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ memrisc  ilcg.pattern@df98c4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10333_AT10333:=myrec;
		END;
	FUNCTION pATypeid10335_AT10335:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10335_AT10335:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc10339_AIL10339:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc10339_AIL10339:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval10338_AR10338:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10339_AIL10339;
		 pARefval10338_AR10338:=myrec;
		END;
	FUNCTION pAUint8Unsigned10346_AU8U10346:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned10346_AU8U10346:=myrec;
		END;
	FUNCTION pAUnsignedTformat10345_AUT10345:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned10346_AU8U10346;
		 pAUnsignedTformat10345_AUT10345:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10344_ATP10344:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype10344_ATP10344:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim10343_APT10343:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim10343_APT10343:=nil;
		 pAPredeclaredtypeTypeprim10343_APT10343:=myrec;
		END;
	FUNCTION pAOptionalsign10349_AO10349:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign10349_AO10349:=nil;
		 pAOptionalsign10349_AO10349:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber10348_AIN10348:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber10348_AIN10348:=myrec;
		END;
	FUNCTION pAArray10347_AA10347:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray10347_AA10347:=nil;
		 pAArray10347_AA10347:=myrec;
		END;
	FUNCTION pAArrayType10342_AAT10342:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType10342_AAT10342:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc10353_AIL10353:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc10353_AIL10353:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval10352_AR10352:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10353_AIL10353;
		 pARefval10352_AR10352:=myrec;
		END;
	FUNCTION pADerefRhs10351_ADR10351:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval10352_AR10352;
		 pADerefRhs10351_ADR10351:=myrec;
		END;
	FUNCTION pARhsValue10350_ARV10350:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs10351_ADR10351;
		 pARhsValue10350_ARV10350:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs10341_ACR10341:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType10342_AAT10342;
		myrec^.arg2:=pARhsValue10350_ARV10350;
		 pACastRhs10341_ACR10341:=myrec;
		END;
	FUNCTION pARhsValue10340_ARV10340:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs10341_ACR10341;
		 pARhsValue10340_ARV10340:=myrec;
		END;
	FUNCTION pAAssign10337_AA10337:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue10340_ARV10340;
		myrec^.dest:=pARefval10338_AR10338;
		 pAAssign10337_AA10337:=myrec;
		END;
	FUNCTION pAAssignMeaning10336_AAM10336:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign10337_AA10337;
		 pAAssignMeaning10336_AAM10336:=myrec;
		END;
	FUNCTION pAAssemblypattern10355_AA10355:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movq ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,0);
		pAAssemblypattern10355_AA10355:=list;
		END;
	FUNCTION pAAssemblesto10354_AA10354:pprintlist;
	begin
		pAAssemblesto10354_AA10354:=pAAssemblypattern10355_AA10355;
		END;
	FUNCTION pASideeffects10360_AS10360:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects10360_AS10360:=nil;
		 pASideeffects10360_AS10360:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond10361_AUP10361:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond10361_AUP10361:=nil;
		 pAUnconditionalPrecond10361_AUP10361:=myrec;
		END;
	FUNCTION MOVOCTUINTL_MOVOCTUINTL:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patmreg_;
		params^[0]:=patmemrisc_;
		paramcount:=3;
		meaning:=pAAssignMeaning10336_AAM10336;
		matchedAssembler:=pAAssemblesto10354_AA10354;
		END;
		MOVOCTUINTL_MOVOCTUINTL:=myrec;
	END;
	FUNCTION pATypeid10364_AT10364:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ memrisc  ilcg.pattern@df98c4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10364_AT10364:=myrec;
		END;
	FUNCTION pATypeid10366_AT10366:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10366_AT10366:=myrec;
		END;
	FUNCTION pADoublewordFormat10374_ADF10374:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdword;
		 pADoublewordFormat10374_ADF10374:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype10373_AFP10373:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAFormatPredeclaredtype10373_AFP10373:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType10372_APT10372:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAPredeclaredtypeType10372_APT10372:=myrec;
		END;
	FUNCTION pAReference10371_AR10371:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType10372_APT10372;
		 pAReference10371_AR10371:=myrec;
		END;
	FUNCTION pAReftypeType10370_ART10370:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference10371_AR10371;
		 pAReftypeType10370_ART10370:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc10375_AIL10375:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc10375_AIL10375:=myrec;
		END;
		(*! try to cast to type: ref doubleword*)
	FUNCTION pARefcastRefval10369_ARR10369:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType10370_ART10370;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc10375_AIL10375;
		 pARefcastRefval10369_ARR10369:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc10379_AIL10379:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc10379_AIL10379:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval10378_AR10378:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10379_AIL10379;
		 pARefval10378_AR10378:=myrec;
		END;
	FUNCTION pADerefRhs10377_ADR10377:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval10378_AR10378;
		 pADerefRhs10377_ADR10377:=myrec;
		END;
	FUNCTION pARhsValue10376_ARV10376:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs10377_ADR10377;
		 pARhsValue10376_ARV10376:=myrec;
		END;
	FUNCTION pAAssign10368_AA10368:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue10376_ARV10376;
		myrec^.dest:=pARefcastRefval10369_ARR10369;
		 pAAssign10368_AA10368:=myrec;
		END;
	FUNCTION pAAssignMeaning10367_AAM10367:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign10368_AA10368;
		 pAAssignMeaning10367_AAM10367:=myrec;
		END;
	FUNCTION pAAssemblypattern10381_AA10381:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movq ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern10381_AA10381:=list;
		END;
	FUNCTION pAAssemblesto10380_AA10380:pprintlist;
	begin
		pAAssemblesto10380_AA10380:=pAAssemblypattern10381_AA10381;
		END;
	FUNCTION pASideeffects10386_AS10386:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects10386_AS10386:=nil;
		 pASideeffects10386_AS10386:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond10387_AUP10387:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond10387_AUP10387:=nil;
		 pAUnconditionalPrecond10387_AUP10387:=myrec;
		END;
	FUNCTION MOVQS_MOVQS:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patmreg_;
		params^[0]:=patmemrisc_;
		paramcount:=3;
		meaning:=pAAssignMeaning10367_AAM10367;
		matchedAssembler:=pAAssemblesto10380_AA10380;
		END;
		MOVQS_MOVQS:=myrec;
	END;
	FUNCTION pATypeid10390_AT10390:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10390_AT10390:=myrec;
		END;
	FUNCTION pATypeid10392_AT10392:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10392_AT10392:=myrec;
		END;
	FUNCTION pADoublewordFormat10400_ADF10400:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdword;
		 pADoublewordFormat10400_ADF10400:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype10399_AFP10399:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAFormatPredeclaredtype10399_AFP10399:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType10398_APT10398:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAPredeclaredtypeType10398_APT10398:=myrec;
		END;
	FUNCTION pAReference10397_AR10397:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType10398_APT10398;
		 pAReference10397_AR10397:=myrec;
		END;
	FUNCTION pAReftypeType10396_ART10396:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference10397_AR10397;
		 pAReftypeType10396_ART10396:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc10401_AIL10401:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc10401_AIL10401:=myrec;
		END;
		(*! try to cast to type: ref doubleword*)
	FUNCTION pARefcastRefval10395_ARR10395:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType10396_ART10396;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc10401_AIL10401;
		 pARefcastRefval10395_ARR10395:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc10405_AIL10405:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc10405_AIL10405:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval10404_AR10404:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10405_AIL10405;
		 pARefval10404_AR10404:=myrec;
		END;
	FUNCTION pADerefRhs10403_ADR10403:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval10404_AR10404;
		 pADerefRhs10403_ADR10403:=myrec;
		END;
	FUNCTION pARhsValue10402_ARV10402:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs10403_ADR10403;
		 pARhsValue10402_ARV10402:=myrec;
		END;
	FUNCTION pAAssign10394_AA10394:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue10402_ARV10402;
		myrec^.dest:=pARefcastRefval10395_ARR10395;
		 pAAssign10394_AA10394:=myrec;
		END;
	FUNCTION pAAssignMeaning10393_AAM10393:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign10394_AA10394;
		 pAAssignMeaning10393_AAM10393:=myrec;
		END;
	FUNCTION pAAssemblypattern10407_AA10407:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movq ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern10407_AA10407:=list;
		END;
	FUNCTION pAAssemblesto10406_AA10406:pprintlist;
	begin
		pAAssemblesto10406_AA10406:=pAAssemblypattern10407_AA10407;
		END;
	FUNCTION pASideeffects10412_AS10412:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects10412_AS10412:=nil;
		 pASideeffects10412_AS10412:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond10413_AUP10413:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond10413_AUP10413:=nil;
		 pAUnconditionalPrecond10413_AUP10413:=myrec;
		END;
	FUNCTION MOVQR_MOVQR:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patmreg_;
		params^[0]:=patmreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning10393_AAM10393;
		matchedAssembler:=pAAssemblesto10406_AA10406;
		END;
		MOVQR_MOVQR:=myrec;
	END;
	FUNCTION pATypeid10416_AT10416:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10416_AT10416:=myrec;
		END;
	FUNCTION pATypeid10418_AT10418:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10418_AT10418:=myrec;
		END;
	FUNCTION pAUint8Unsigned10428_AU8U10428:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned10428_AU8U10428:=myrec;
		END;
	FUNCTION pAUnsignedTformat10427_AUT10427:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned10428_AU8U10428;
		 pAUnsignedTformat10427_AUT10427:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10426_ATP10426:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype10426_ATP10426:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim10425_APT10425:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim10425_APT10425:=nil;
		 pAPredeclaredtypeTypeprim10425_APT10425:=myrec;
		END;
	FUNCTION pAOptionalsign10431_AO10431:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign10431_AO10431:=nil;
		 pAOptionalsign10431_AO10431:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber10430_AIN10430:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber10430_AIN10430:=myrec;
		END;
	FUNCTION pAArray10429_AA10429:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray10429_AA10429:=nil;
		 pAArray10429_AA10429:=myrec;
		END;
	FUNCTION pAArrayType10424_AAT10424:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType10424_AAT10424:=myrec;
		END;
	FUNCTION pAReference10423_AR10423:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType10424_AAT10424;
		 pAReference10423_AR10423:=myrec;
		END;
	FUNCTION pAReftypeType10422_ART10422:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference10423_AR10423;
		 pAReftypeType10422_ART10422:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc10432_AIL10432:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc10432_AIL10432:=myrec;
		END;
		(*! try to cast to type: ref uint8 vector ( 8 )*)
	FUNCTION pARefcastRefval10421_ARR10421:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType10422_ART10422;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc10432_AIL10432;
		 pARefcastRefval10421_ARR10421:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc10436_AIL10436:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc10436_AIL10436:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval10435_AR10435:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10436_AIL10436;
		 pARefval10435_AR10435:=myrec;
		END;
	FUNCTION pADerefRhs10434_ADR10434:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval10435_AR10435;
		 pADerefRhs10434_ADR10434:=myrec;
		END;
	FUNCTION pARhsValue10433_ARV10433:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs10434_ADR10434;
		 pARhsValue10433_ARV10433:=myrec;
		END;
	FUNCTION pAAssign10420_AA10420:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue10433_ARV10433;
		myrec^.dest:=pARefcastRefval10421_ARR10421;
		 pAAssign10420_AA10420:=myrec;
		END;
	FUNCTION pAAssignMeaning10419_AAM10419:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign10420_AA10420;
		 pAAssignMeaning10419_AAM10419:=myrec;
		END;
	FUNCTION pAAssemblypattern10438_AA10438:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movq ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern10438_AA10438:=list;
		END;
	FUNCTION pAAssemblesto10437_AA10437:pprintlist;
	begin
		pAAssemblesto10437_AA10437:=pAAssemblypattern10438_AA10438;
		END;
	FUNCTION pASideeffects10443_AS10443:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects10443_AS10443:=nil;
		 pASideeffects10443_AS10443:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond10444_AUP10444:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond10444_AUP10444:=nil;
		 pAUnconditionalPrecond10444_AUP10444:=myrec;
		END;
	FUNCTION MOVOCTUINTS_MOVOCTUINTS:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patmreg_;
		params^[0]:=patmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning10419_AAM10419;
		matchedAssembler:=pAAssemblesto10437_AA10437;
		END;
		MOVOCTUINTS_MOVOCTUINTS:=myrec;
	END;
	FUNCTION pATypeid10447_AT10447:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ memrisc  ilcg.pattern@df98c4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10447_AT10447:=myrec;
		END;
	FUNCTION pATypeid10449_AT10449:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10449_AT10449:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc10453_AIL10453:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc10453_AIL10453:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval10452_AR10452:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10453_AIL10453;
		 pARefval10452_AR10452:=myrec;
		END;
	FUNCTION pADoublewordFormat10458_ADF10458:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdword;
		 pADoublewordFormat10458_ADF10458:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype10457_AFP10457:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAFormatPredeclaredtype10457_AFP10457:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType10456_APT10456:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAPredeclaredtypeType10456_APT10456:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc10462_AIL10462:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc10462_AIL10462:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval10461_AR10461:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10462_AIL10462;
		 pARefval10461_AR10461:=myrec;
		END;
	FUNCTION pADerefRhs10460_ADR10460:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval10461_AR10461;
		 pADerefRhs10460_ADR10460:=myrec;
		END;
	FUNCTION pARhsValue10459_ARV10459:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs10460_ADR10460;
		 pARhsValue10459_ARV10459:=myrec;
		END;
		(*! try to cast to type: doubleword*)
	FUNCTION pACastRhs10455_ACR10455:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType10456_APT10456;
		myrec^.arg2:=pARhsValue10459_ARV10459;
		 pACastRhs10455_ACR10455:=myrec;
		END;
	FUNCTION pARhsValue10454_ARV10454:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs10455_ACR10455;
		 pARhsValue10454_ARV10454:=myrec;
		END;
	FUNCTION pAAssign10451_AA10451:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue10454_ARV10454;
		myrec^.dest:=pARefval10452_AR10452;
		 pAAssign10451_AA10451:=myrec;
		END;
	FUNCTION pAAssignMeaning10450_AAM10450:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign10451_AA10451;
		 pAAssignMeaning10450_AAM10450:=myrec;
		END;
	FUNCTION pAAssemblypattern10464_AA10464:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movq ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,0);
		pAAssemblypattern10464_AA10464:=list;
		END;
	FUNCTION pAAssemblesto10463_AA10463:pprintlist;
	begin
		pAAssemblesto10463_AA10463:=pAAssemblypattern10464_AA10464;
		END;
	FUNCTION pASideeffects10469_AS10469:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects10469_AS10469:=nil;
		 pASideeffects10469_AS10469:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond10470_AUP10470:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond10470_AUP10470:=nil;
		 pAUnconditionalPrecond10470_AUP10470:=myrec;
		END;
	FUNCTION MOVQL_MOVQL:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patmreg_;
		params^[0]:=patmemrisc_;
		paramcount:=3;
		meaning:=pAAssignMeaning10450_AAM10450;
		matchedAssembler:=pAAssemblesto10463_AA10463;
		END;
		MOVQL_MOVQL:=myrec;
	END;
	FUNCTION pATypeid10473_AT10473:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im8reg  ilcg.pattern@1977d63}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10473_AT10473:=myrec;
		END;
	FUNCTION pATypeid10475_AT10475:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im8reg  ilcg.pattern@1977d63}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10475_AT10475:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc10479_AIL10479:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc10479_AIL10479:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval10478_AR10478:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10479_AIL10479;
		 pARefval10478_AR10478:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc10483_AIL10483:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc10483_AIL10483:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval10482_AR10482:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10483_AIL10483;
		 pARefval10482_AR10482:=myrec;
		END;
	FUNCTION pADerefRhs10481_ADR10481:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval10482_AR10482;
		 pADerefRhs10481_ADR10481:=myrec;
		END;
	FUNCTION pARhsValue10480_ARV10480:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs10481_ADR10481;
		 pARhsValue10480_ARV10480:=myrec;
		END;
	FUNCTION pAAssign10477_AA10477:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue10480_ARV10480;
		myrec^.dest:=pARefval10478_AR10478;
		 pAAssign10477_AA10477:=myrec;
		END;
	FUNCTION pAAssignMeaning10476_AAM10476:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign10477_AA10477;
		 pAAssignMeaning10476_AAM10476:=myrec;
		END;
	FUNCTION pAAssemblypattern10485_AA10485:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movq ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,0);
		pAAssemblypattern10485_AA10485:=list;
		END;
	FUNCTION pAAssemblesto10484_AA10484:pprintlist;
	begin
		pAAssemblesto10484_AA10484:=pAAssemblypattern10485_AA10485;
		END;
	FUNCTION pASideeffects10490_AS10490:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects10490_AS10490:=nil;
		 pASideeffects10490_AS10490:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond10491_AUP10491:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond10491_AUP10491:=nil;
		 pAUnconditionalPrecond10491_AUP10491:=myrec;
		END;
	FUNCTION MOVQLR_MOVQLR:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patim8reg_8;
		params^[0]:=patim8reg_8;
		paramcount:=3;
		meaning:=pAAssignMeaning10476_AAM10476;
		matchedAssembler:=pAAssemblesto10484_AA10484;
		END;
		MOVQLR_MOVQLR:=myrec;
	END;
	FUNCTION pATypeid10494_AT10494:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10494_AT10494:=myrec;
		END;
	FUNCTION pATypeid10496_AT10496:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10496_AT10496:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc10500_AIL10500:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc10500_AIL10500:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval10499_AR10499:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10500_AIL10500;
		 pARefval10499_AR10499:=myrec;
		END;
	FUNCTION pAReplicateDyadic10502_ARD10502:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcprep;
		 pAReplicateDyadic10502_ARD10502:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc10506_AIL10506:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc10506_AIL10506:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval10505_AR10505:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10506_AIL10506;
		 pARefval10505_AR10505:=myrec;
		END;
	FUNCTION pADerefRhs10504_ADR10504:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval10505_AR10505;
		 pADerefRhs10504_ADR10504:=myrec;
		END;
	FUNCTION pARhsValue10503_ARV10503:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs10504_ADR10504;
		 pARhsValue10503_ARV10503:=myrec;
		END;
	FUNCTION pAOptionalsign10510_AO10510:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign10510_AO10510:=nil;
		 pAOptionalsign10510_AO10510:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber10509_AIN10509:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber10509_AIN10509:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs10508_ANR10508:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber10509_AIN10509;
		 pANumberRhs10508_ANR10508:=myrec;
		END;
	FUNCTION pARhsValue10507_ARV10507:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs10508_ANR10508;
		 pARhsValue10507_ARV10507:=myrec;
		END;
	FUNCTION pADyadicValue10501_ADV10501:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue10503_ARV10503;
		myrec^.arg2:=pARhsValue10507_ARV10507;
		myrec^.fn:=pAReplicateDyadic10502_ARD10502;
		 pADyadicValue10501_ADV10501:=myrec;
		END;
	FUNCTION pAAssign10498_AA10498:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue10501_ADV10501;
		myrec^.dest:=pARefval10499_AR10499;
		 pAAssign10498_AA10498:=myrec;
		END;
	FUNCTION pAAssignMeaning10497_AAM10497:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign10498_AA10498;
		 pAAssignMeaning10497_AAM10497:=myrec;
		END;
	FUNCTION pAAssemblypattern10512_AA10512:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'push ' );
		pappendp(list,1);
		pappends(list,'\n push ' );
		pappendp(list,1);
		pappends(list,'\n movq ' );
		pappendp(list,0);
		pappends(list,',[esp]\n add esp,8' );
		pAAssemblypattern10512_AA10512:=list;
		END;
	FUNCTION pAAssemblesto10511_AA10511:pprintlist;
	begin
		pAAssemblesto10511_AA10511:=pAAssemblypattern10512_AA10512;
		END;
	FUNCTION pASideeffects10520_AS10520:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects10520_AS10520:=nil;
		 pASideeffects10520_AS10520:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond10521_AUP10521:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond10521_AUP10521:=nil;
		 pAUnconditionalPrecond10521_AUP10521:=myrec;
		END;
	FUNCTION REP2_REP2:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		params^[1]:=patreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning10497_AAM10497;
		matchedAssembler:=pAAssemblesto10511_AA10511;
		END;
		REP2_REP2:=myrec;
	END;
	FUNCTION pATypeid10524_AT10524:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10524_AT10524:=myrec;
		END;
	FUNCTION pATypeid10526_AT10526:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ wreg  ilcg.pattern@15004dd}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10526_AT10526:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc10530_AIL10530:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc10530_AIL10530:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval10529_AR10529:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10530_AIL10530;
		 pARefval10529_AR10529:=myrec;
		END;
	FUNCTION pAReplicateDyadic10532_ARD10532:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcprep;
		 pAReplicateDyadic10532_ARD10532:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc10536_AIL10536:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc10536_AIL10536:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval10535_AR10535:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10536_AIL10536;
		 pARefval10535_AR10535:=myrec;
		END;
	FUNCTION pADerefRhs10534_ADR10534:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval10535_AR10535;
		 pADerefRhs10534_ADR10534:=myrec;
		END;
	FUNCTION pARhsValue10533_ARV10533:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs10534_ADR10534;
		 pARhsValue10533_ARV10533:=myrec;
		END;
	FUNCTION pAOptionalsign10540_AO10540:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign10540_AO10540:=nil;
		 pAOptionalsign10540_AO10540:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber10539_AIN10539:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber10539_AIN10539:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs10538_ANR10538:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber10539_AIN10539;
		 pANumberRhs10538_ANR10538:=myrec;
		END;
	FUNCTION pARhsValue10537_ARV10537:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs10538_ANR10538;
		 pARhsValue10537_ARV10537:=myrec;
		END;
	FUNCTION pADyadicValue10531_ADV10531:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue10533_ARV10533;
		myrec^.arg2:=pARhsValue10537_ARV10537;
		myrec^.fn:=pAReplicateDyadic10532_ARD10532;
		 pADyadicValue10531_ADV10531:=myrec;
		END;
	FUNCTION pAAssign10528_AA10528:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue10531_ADV10531;
		myrec^.dest:=pARefval10529_AR10529;
		 pAAssign10528_AA10528:=myrec;
		END;
	FUNCTION pAAssignMeaning10527_AAM10527:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign10528_AA10528;
		 pAAssignMeaning10527_AAM10527:=myrec;
		END;
	FUNCTION pAAssemblypattern10542_AA10542:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'push ' );
		pappendp(list,1);
		pappends(list,'\n push ' );
		pappendp(list,1);
		pappends(list,'\n push ' );
		pappendp(list,1);
		pappends(list,'\n push ' );
		pappendp(list,1);
		pappends(list,'\n movq ' );
		pappendp(list,0);
		pappends(list,',[esp]\n add esp,8' );
		pAAssemblypattern10542_AA10542:=list;
		END;
	FUNCTION pAAssemblesto10541_AA10541:pprintlist;
	begin
		pAAssemblesto10541_AA10541:=pAAssemblypattern10542_AA10542;
		END;
	FUNCTION pASideeffects10554_AS10554:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects10554_AS10554:=nil;
		 pASideeffects10554_AS10554:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond10555_AUP10555:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond10555_AUP10555:=nil;
		 pAUnconditionalPrecond10555_AUP10555:=myrec;
		END;
	FUNCTION REP4_REP4:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		params^[1]:=patwreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning10527_AAM10527;
		matchedAssembler:=pAAssemblesto10541_AA10541;
		END;
		REP4_REP4:=myrec;
	END;
	FUNCTION pATypeid10558_AT10558:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10558_AT10558:=myrec;
		END;
	FUNCTION pATypeid10560_AT10560:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10560_AT10560:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc10564_AIL10564:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc10564_AIL10564:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval10563_AR10563:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10564_AIL10564;
		 pARefval10563_AR10563:=myrec;
		END;
	FUNCTION pAReplicateDyadic10566_ARD10566:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcprep;
		 pAReplicateDyadic10566_ARD10566:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc10570_AIL10570:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc10570_AIL10570:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval10569_AR10569:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10570_AIL10570;
		 pARefval10569_AR10569:=myrec;
		END;
	FUNCTION pADerefRhs10568_ADR10568:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval10569_AR10569;
		 pADerefRhs10568_ADR10568:=myrec;
		END;
	FUNCTION pARhsValue10567_ARV10567:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs10568_ADR10568;
		 pARhsValue10567_ARV10567:=myrec;
		END;
	FUNCTION pAOptionalsign10574_AO10574:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign10574_AO10574:=nil;
		 pAOptionalsign10574_AO10574:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber10573_AIN10573:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber10573_AIN10573:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs10572_ANR10572:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber10573_AIN10573;
		 pANumberRhs10572_ANR10572:=myrec;
		END;
	FUNCTION pARhsValue10571_ARV10571:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs10572_ANR10572;
		 pARhsValue10571_ARV10571:=myrec;
		END;
	FUNCTION pADyadicValue10565_ADV10565:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue10567_ARV10567;
		myrec^.arg2:=pARhsValue10571_ARV10571;
		myrec^.fn:=pAReplicateDyadic10566_ARD10566;
		 pADyadicValue10565_ADV10565:=myrec;
		END;
	FUNCTION pAAssign10562_AA10562:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue10565_ADV10565;
		myrec^.dest:=pARefval10563_AR10563;
		 pAAssign10562_AA10562:=myrec;
		END;
	FUNCTION pAAssignMeaning10561_AAM10561:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign10562_AA10562;
		 pAAssignMeaning10561_AAM10561:=myrec;
		END;
	FUNCTION pAAssemblypattern10576_AA10576:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'sub esp,2\n mov [esp], ' );
		pappendp(list,1);
		pappends(list,'\n mov [esp+1], ' );
		pappendp(list,1);
		pappends(list,'\n xchg [esp],ax\npush ax\npush ax\n push ax\nxchg [esp+6],ax\n movq ' );
		pappendp(list,0);
		pappends(list,',[esp]\n add esp,8' );
		pAAssemblypattern10576_AA10576:=list;
		END;
	FUNCTION pAAssemblesto10575_AA10575:pprintlist;
	begin
		pAAssemblesto10575_AA10575:=pAAssemblypattern10576_AA10576;
		END;
	FUNCTION pASideeffects10584_AS10584:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects10584_AS10584:=nil;
		 pASideeffects10584_AS10584:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond10585_AUP10585:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond10585_AUP10585:=nil;
		 pAUnconditionalPrecond10585_AUP10585:=myrec;
		END;
	FUNCTION REP8_REP8:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		params^[1]:=patbreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning10561_AAM10561;
		matchedAssembler:=pAAssemblesto10575_AA10575;
		END;
		REP8_REP8:=myrec;
	END;
	FUNCTION pATypeid10588_AT10588:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10588_AT10588:=myrec;
		END;
	FUNCTION pATypeid10590_AT10590:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10590_AT10590:=myrec;
		END;
	FUNCTION pAInt16Signed10600_AI16S10600:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed10600_AI16S10600:=myrec;
		END;
	FUNCTION pASignedTformat10599_AST10599:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed10600_AI16S10600;
		 pASignedTformat10599_AST10599:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10598_ATP10598:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype10598_ATP10598:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim10597_APT10597:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim10597_APT10597:=nil;
		 pAPredeclaredtypeTypeprim10597_APT10597:=myrec;
		END;
	FUNCTION pAOptionalsign10603_AO10603:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign10603_AO10603:=nil;
		 pAOptionalsign10603_AO10603:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber10602_AIN10602:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber10602_AIN10602:=myrec;
		END;
	FUNCTION pAArray10601_AA10601:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray10601_AA10601:=nil;
		 pAArray10601_AA10601:=myrec;
		END;
	FUNCTION pAArrayType10596_AAT10596:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType10596_AAT10596:=myrec;
		END;
	FUNCTION pAReference10595_AR10595:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType10596_AAT10596;
		 pAReference10595_AR10595:=myrec;
		END;
	FUNCTION pAReftypeType10594_ART10594:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference10595_AR10595;
		 pAReftypeType10594_ART10594:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc10604_AIL10604:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc10604_AIL10604:=myrec;
		END;
		(*! try to cast to type: ref int16 vector ( 4 )*)
	FUNCTION pARefcastRefval10593_ARR10593:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType10594_ART10594;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc10604_AIL10604;
		 pARefcastRefval10593_ARR10593:=myrec;
		END;
	FUNCTION pASigned10614_AS10614:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned10614_AS10614:=myrec;
		END;
	FUNCTION pASignedTformat10613_AST10613:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned10614_AS10614;
		 pASignedTformat10613_AST10613:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10612_ATP10612:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype10612_ATP10612:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim10611_APT10611:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim10611_APT10611:=nil;
		 pAPredeclaredtypeTypeprim10611_APT10611:=myrec;
		END;
	FUNCTION pAOptionalsign10617_AO10617:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign10617_AO10617:=nil;
		 pAOptionalsign10617_AO10617:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber10616_AIN10616:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber10616_AIN10616:=myrec;
		END;
	FUNCTION pAArray10615_AA10615:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray10615_AA10615:=nil;
		 pAArray10615_AA10615:=myrec;
		END;
	FUNCTION pAArrayType10610_AAT10610:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,4 );
		 pAArrayType10610_AAT10610:=myrec;
		END;
	FUNCTION pAReference10609_AR10609:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType10610_AAT10610;
		 pAReference10609_AR10609:=myrec;
		END;
	FUNCTION pAReftypeType10608_ART10608:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference10609_AR10609;
		 pAReftypeType10608_ART10608:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc10620_AIL10620:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc10620_AIL10620:=myrec;
		END;
		(*r *)
	FUNCTION pALocValue10619_ALV10619:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10620_AIL10620;
		 pALocValue10619_ALV10619:=myrec;
		END;
	FUNCTION pAMemoryLoc10618_AML10618:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pALocValue10619_ALV10619;
		 pAMemoryLoc10618_AML10618:=myrec;
		END;
		(*! try to cast to type: ref int32 vector ( 4 )*)
	FUNCTION pARefcastRefval10607_ARR10607:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType10608_ART10608;
		(*class ilcg.node.AMemoryLoc*)
		myrec^.arg2:=pAMemoryLoc10618_AML10618;
		 pARefcastRefval10607_ARR10607:=myrec;
		END;
	FUNCTION pADerefRhs10606_ADR10606:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval10607_ARR10607;
		 pADerefRhs10606_ADR10606:=myrec;
		END;
	FUNCTION pARhsValue10605_ARV10605:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs10606_ADR10606;
		 pARhsValue10605_ARV10605:=myrec;
		END;
	FUNCTION pAAssign10592_AA10592:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue10605_ARV10605;
		myrec^.dest:=pARefcastRefval10593_ARR10593;
		 pAAssign10592_AA10592:=myrec;
		END;
	FUNCTION pAAssignMeaning10591_AAM10591:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign10592_AA10592;
		 pAAssignMeaning10591_AAM10591:=myrec;
		END;
	FUNCTION pAAssemblypattern10622_AA10622:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movq ' );
		pappendp(list,1);
		pappends(list,',[' );
		pappendp(list,0);
		pappends(list,']\n packssdw ' );
		pappendp(list,1);
		pappends(list,',[' );
		pappendp(list,0);
		pappends(list,'+8]' );
		pAAssemblypattern10622_AA10622:=list;
		END;
	FUNCTION pAAssemblesto10621_AA10621:pprintlist;
	begin
		pAAssemblesto10621_AA10621:=pAAssemblypattern10622_AA10622;
		END;
	FUNCTION pASideeffects10632_AS10632:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects10632_AS10632:=nil;
		 pASideeffects10632_AS10632:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond10633_AUP10633:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond10633_AUP10633:=nil;
		 pAUnconditionalPrecond10633_AUP10633:=myrec;
		END;
	FUNCTION PACKSSDW_PACKSSDW:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patmreg_;
		params^[0]:=patreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning10591_AAM10591;
		matchedAssembler:=pAAssemblesto10621_AA10621;
		END;
		PACKSSDW_PACKSSDW:=myrec;
	END;
	FUNCTION pATypeid10636_AT10636:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10636_AT10636:=myrec;
		END;
	FUNCTION pATypeid10638_AT10638:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im8reg  ilcg.pattern@1977d63}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10638_AT10638:=myrec;
		END;
	FUNCTION pAInt8Signed10648_AI8S10648:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed10648_AI8S10648:=myrec;
		END;
	FUNCTION pASignedTformat10647_AST10647:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed10648_AI8S10648;
		 pASignedTformat10647_AST10647:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10646_ATP10646:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype10646_ATP10646:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim10645_APT10645:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim10645_APT10645:=nil;
		 pAPredeclaredtypeTypeprim10645_APT10645:=myrec;
		END;
	FUNCTION pAOptionalsign10651_AO10651:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign10651_AO10651:=nil;
		 pAOptionalsign10651_AO10651:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber10650_AIN10650:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber10650_AIN10650:=myrec;
		END;
	FUNCTION pAArray10649_AA10649:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray10649_AA10649:=nil;
		 pAArray10649_AA10649:=myrec;
		END;
	FUNCTION pAArrayType10644_AAT10644:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType10644_AAT10644:=myrec;
		END;
	FUNCTION pAReference10643_AR10643:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType10644_AAT10644;
		 pAReference10643_AR10643:=myrec;
		END;
	FUNCTION pAReftypeType10642_ART10642:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference10643_AR10643;
		 pAReftypeType10642_ART10642:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc10652_AIL10652:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc10652_AIL10652:=myrec;
		END;
		(*! try to cast to type: ref int8 vector ( 8 )*)
	FUNCTION pARefcastRefval10641_ARR10641:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType10642_ART10642;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc10652_AIL10652;
		 pARefcastRefval10641_ARR10641:=myrec;
		END;
	FUNCTION pAInt16Signed10662_AI16S10662:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed10662_AI16S10662:=myrec;
		END;
	FUNCTION pASignedTformat10661_AST10661:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed10662_AI16S10662;
		 pASignedTformat10661_AST10661:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10660_ATP10660:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype10660_ATP10660:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim10659_APT10659:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim10659_APT10659:=nil;
		 pAPredeclaredtypeTypeprim10659_APT10659:=myrec;
		END;
	FUNCTION pAOptionalsign10665_AO10665:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign10665_AO10665:=nil;
		 pAOptionalsign10665_AO10665:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber10664_AIN10664:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber10664_AIN10664:=myrec;
		END;
	FUNCTION pAArray10663_AA10663:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray10663_AA10663:=nil;
		 pAArray10663_AA10663:=myrec;
		END;
	FUNCTION pAArrayType10658_AAT10658:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,8 );
		 pAArrayType10658_AAT10658:=myrec;
		END;
	FUNCTION pAReference10657_AR10657:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType10658_AAT10658;
		 pAReference10657_AR10657:=myrec;
		END;
	FUNCTION pAReftypeType10656_ART10656:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference10657_AR10657;
		 pAReftypeType10656_ART10656:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc10668_AIL10668:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc10668_AIL10668:=myrec;
		END;
		(*r *)
	FUNCTION pALocValue10667_ALV10667:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10668_AIL10668;
		 pALocValue10667_ALV10667:=myrec;
		END;
	FUNCTION pAMemoryLoc10666_AML10666:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pALocValue10667_ALV10667;
		 pAMemoryLoc10666_AML10666:=myrec;
		END;
		(*! try to cast to type: ref int16 vector ( 8 )*)
	FUNCTION pARefcastRefval10655_ARR10655:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType10656_ART10656;
		(*class ilcg.node.AMemoryLoc*)
		myrec^.arg2:=pAMemoryLoc10666_AML10666;
		 pARefcastRefval10655_ARR10655:=myrec;
		END;
	FUNCTION pADerefRhs10654_ADR10654:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval10655_ARR10655;
		 pADerefRhs10654_ADR10654:=myrec;
		END;
	FUNCTION pARhsValue10653_ARV10653:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs10654_ADR10654;
		 pARhsValue10653_ARV10653:=myrec;
		END;
	FUNCTION pAAssign10640_AA10640:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue10653_ARV10653;
		myrec^.dest:=pARefcastRefval10641_ARR10641;
		 pAAssign10640_AA10640:=myrec;
		END;
	FUNCTION pAAssignMeaning10639_AAM10639:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign10640_AA10640;
		 pAAssignMeaning10639_AAM10639:=myrec;
		END;
	FUNCTION pAAssemblypattern10670_AA10670:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movq ' );
		pappendp(list,1);
		pappends(list,',[' );
		pappendp(list,0);
		pappends(list,']\n packsswb ' );
		pappendp(list,1);
		pappends(list,',[' );
		pappendp(list,0);
		pappends(list,'+8]' );
		pAAssemblypattern10670_AA10670:=list;
		END;
	FUNCTION pAAssemblesto10669_AA10669:pprintlist;
	begin
		pAAssemblesto10669_AA10669:=pAAssemblypattern10670_AA10670;
		END;
	FUNCTION pASideeffects10680_AS10680:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects10680_AS10680:=nil;
		 pASideeffects10680_AS10680:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond10681_AUP10681:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond10681_AUP10681:=nil;
		 pAUnconditionalPrecond10681_AUP10681:=myrec;
		END;
	FUNCTION PACKSSWB_PACKSSWB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patim8reg_8;
		params^[0]:=patreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning10639_AAM10639;
		matchedAssembler:=pAAssemblesto10669_AA10669;
		END;
		PACKSSWB_PACKSSWB:=myrec;
	END;
	FUNCTION pATypeid10684_AT10684:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10684_AT10684:=myrec;
		END;
	FUNCTION pATypeid10686_AT10686:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid10686_AT10686:=myrec;
		END;
	FUNCTION pAUint8Unsigned10696_AU8U10696:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned10696_AU8U10696:=myrec;
		END;
	FUNCTION pAUnsignedTformat10695_AUT10695:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned10696_AU8U10696;
		 pAUnsignedTformat10695_AUT10695:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10694_ATP10694:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype10694_ATP10694:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim10693_APT10693:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim10693_APT10693:=nil;
		 pAPredeclaredtypeTypeprim10693_APT10693:=myrec;
		END;
	FUNCTION pAOptionalsign10699_AO10699:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign10699_AO10699:=nil;
		 pAOptionalsign10699_AO10699:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber10698_AIN10698:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber10698_AIN10698:=myrec;
		END;
	FUNCTION pAArray10697_AA10697:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray10697_AA10697:=nil;
		 pAArray10697_AA10697:=myrec;
		END;
	FUNCTION pAArrayType10692_AAT10692:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType10692_AAT10692:=myrec;
		END;
	FUNCTION pAReference10691_AR10691:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType10692_AAT10692;
		 pAReference10691_AR10691:=myrec;
		END;
	FUNCTION pAReftypeType10690_ART10690:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference10691_AR10691;
		 pAReftypeType10690_ART10690:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc10700_AIL10700:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc10700_AIL10700:=myrec;
		END;
		(*! try to cast to type: ref uint8 vector ( 8 )*)
	FUNCTION pARefcastRefval10689_ARR10689:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType10690_ART10690;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc10700_AIL10700;
		 pARefcastRefval10689_ARR10689:=myrec;
		END;
	FUNCTION pAInt16Signed10710_AI16S10710:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed10710_AI16S10710:=myrec;
		END;
	FUNCTION pASignedTformat10709_AST10709:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed10710_AI16S10710;
		 pASignedTformat10709_AST10709:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10708_ATP10708:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype10708_ATP10708:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim10707_APT10707:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim10707_APT10707:=nil;
		 pAPredeclaredtypeTypeprim10707_APT10707:=myrec;
		END;
	FUNCTION pAOptionalsign10713_AO10713:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign10713_AO10713:=nil;
		 pAOptionalsign10713_AO10713:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber10712_AIN10712:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber10712_AIN10712:=myrec;
		END;
	FUNCTION pAArray10711_AA10711:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray10711_AA10711:=nil;
		 pAArray10711_AA10711:=myrec;
		END;
	FUNCTION pAArrayType10706_AAT10706:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,8 );
		 pAArrayType10706_AAT10706:=myrec;
		END;
	FUNCTION pAReference10705_AR10705:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType10706_AAT10706;
		 pAReference10705_AR10705:=myrec;
		END;
	FUNCTION pAReftypeType10704_ART10704:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference10705_AR10705;
		 pAReftypeType10704_ART10704:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc10716_AIL10716:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc10716_AIL10716:=myrec;
		END;
		(*r *)
	FUNCTION pALocValue10715_ALV10715:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc10716_AIL10716;
		 pALocValue10715_ALV10715:=myrec;
		END;
	FUNCTION pAMemoryLoc10714_AML10714:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pALocValue10715_ALV10715;
		 pAMemoryLoc10714_AML10714:=myrec;
		END;
		(*! try to cast to type: ref int16 vector ( 8 )*)
	FUNCTION pARefcastRefval10703_ARR10703:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType10704_ART10704;
		(*class ilcg.node.AMemoryLoc*)
		myrec^.arg2:=pAMemoryLoc10714_AML10714;
		 pARefcastRefval10703_ARR10703:=myrec;
		END;
	FUNCTION pADerefRhs10702_ADR10702:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval10703_ARR10703;
		 pADerefRhs10702_ADR10702:=myrec;
		END;
	FUNCTION pARhsValue10701_ARV10701:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs10702_ADR10702;
		 pARhsValue10701_ARV10701:=myrec;
		END;
	FUNCTION pAAssign10688_AA10688:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue10701_ARV10701;
		myrec^.dest:=pARefcastRefval10689_ARR10689;
		 pAAssign10688_AA10688:=myrec;
		END;
	FUNCTION pAAssignMeaning10687_AAM10687:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign10688_AA10688;
		 pAAssignMeaning10687_AAM10687:=myrec;
		END;
	FUNCTION pAAssemblypattern10718_AA10718:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movq ' );
		pappendp(list,1);
		pappends(list,',[' );
		pappendp(list,0);
		pappends(list,']\n packuswb ' );
		pappendp(list,1);
		pappends(list,',[' );
		pappendp(list,0);
		pappends(list,'+8]' );
		pAAssemblypattern10718_AA10718:=list;
		END;
	FUNCTION pAAssemblesto10717_AA10717:pprintlist;
	begin
		pAAssemblesto10717_AA10717:=pAAssemblypattern10718_AA10718;
		END;
	FUNCTION pASideeffects10728_AS10728:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects10728_AS10728:=nil;
		 pASideeffects10728_AS10728:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond10729_AUP10729:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond10729_AUP10729:=nil;
		 pAUnconditionalPrecond10729_AUP10729:=myrec;
		END;
	FUNCTION PACKUSWB_PACKUSWB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patmreg_;
		params^[0]:=patreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning10687_AAM10687;
		matchedAssembler:=pAAssemblesto10717_AA10717;
		END;
		PACKUSWB_PACKUSWB:=myrec;
	END;
	FUNCTION pAUnreservedReservation10733_AUR10733:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation10733_AUR10733:=nil;
		 pAUnreservedReservation10733_AUR10733:=myrec;
		END;
	FUNCTION pANonAggregate10734_ANA10734:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate10734_ANA10734:=nil;
		 pANonAggregate10734_ANA10734:=myrec;
		END;
	FUNCTION pAQuadwordFormat10737_AQF10737:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fqword;
		 pAQuadwordFormat10737_AQF10737:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype10736_AFP10736:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fquadword ;
		 pAFormatPredeclaredtype10736_AFP10736:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType10735_APT10735:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fquadword ;
		 pAPredeclaredtypeType10735_APT10735:=myrec;
		END;
	FUNCTION pANonAggregate10741_ANA10741:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate10741_ANA10741:=nil;
		 pANonAggregate10741_ANA10741:=myrec;
		END;
	FUNCTION pAIeee32Tformat10744_AI32T10744:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat10744_AI32T10744:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10743_ATP10743:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype10743_ATP10743:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType10742_APT10742:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType10742_APT10742:=myrec;
		END;
	FUNCTION pANonAggregate10748_ANA10748:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate10748_ANA10748:=nil;
		 pANonAggregate10748_ANA10748:=myrec;
		END;
	FUNCTION pAIeee63Tformat10751_AI63T10751:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat10751_AI63T10751:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10750_ATP10750:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype10750_ATP10750:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType10749_APT10749:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType10749_APT10749:=myrec;
		END;
	FUNCTION pANonAggregate10755_ANA10755:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate10755_ANA10755:=nil;
		 pANonAggregate10755_ANA10755:=myrec;
		END;
	FUNCTION pAIeee32Tformat10759_AI32T10759:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat10759_AI32T10759:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10758_ATP10758:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype10758_ATP10758:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim10757_APT10757:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim10757_APT10757:=nil;
		 pAPredeclaredtypeTypeprim10757_APT10757:=myrec;
		END;
	FUNCTION pAOptionalsign10762_AO10762:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign10762_AO10762:=nil;
		 pAOptionalsign10762_AO10762:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber10761_AIN10761:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber10761_AIN10761:=myrec;
		END;
	FUNCTION pAArray10760_AA10760:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray10760_AA10760:=nil;
		 pAArray10760_AA10760:=myrec;
		END;
	FUNCTION pAArrayType10756_AAT10756:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fieee32 ,4 );
		 pAArrayType10756_AAT10756:=myrec;
		END;
	FUNCTION pANonAggregate10766_ANA10766:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate10766_ANA10766:=nil;
		 pANonAggregate10766_ANA10766:=myrec;
		END;
	FUNCTION pAIeee63Tformat10770_AI63T10770:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat10770_AI63T10770:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10769_ATP10769:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype10769_ATP10769:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim10768_APT10768:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim10768_APT10768:=nil;
		 pAPredeclaredtypeTypeprim10768_APT10768:=myrec;
		END;
	FUNCTION pAOptionalsign10773_AO10773:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign10773_AO10773:=nil;
		 pAOptionalsign10773_AO10773:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber10772_AIN10772:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber10772_AIN10772:=myrec;
		END;
	FUNCTION pAArray10771_AA10771:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray10771_AA10771:=nil;
		 pAArray10771_AA10771:=myrec;
		END;
	FUNCTION pAArrayType10767_AAT10767:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fieee64 ,2 );
		 pAArrayType10767_AAT10767:=myrec;
		END;
	FUNCTION pAUnreservedReservation10777_AUR10777:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation10777_AUR10777:=nil;
		 pAUnreservedReservation10777_AUR10777:=myrec;
		END;
	FUNCTION pANonAggregate10778_ANA10778:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate10778_ANA10778:=nil;
		 pANonAggregate10778_ANA10778:=myrec;
		END;
	FUNCTION pAQuadwordFormat10781_AQF10781:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fqword;
		 pAQuadwordFormat10781_AQF10781:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype10780_AFP10780:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fquadword ;
		 pAFormatPredeclaredtype10780_AFP10780:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType10779_APT10779:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fquadword ;
		 pAPredeclaredtypeType10779_APT10779:=myrec;
		END;
	FUNCTION pANonAggregate10785_ANA10785:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate10785_ANA10785:=nil;
		 pANonAggregate10785_ANA10785:=myrec;
		END;
	FUNCTION pAIeee32Tformat10788_AI32T10788:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat10788_AI32T10788:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10787_ATP10787:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype10787_ATP10787:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType10786_APT10786:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType10786_APT10786:=myrec;
		END;
	FUNCTION pANonAggregate10792_ANA10792:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate10792_ANA10792:=nil;
		 pANonAggregate10792_ANA10792:=myrec;
		END;
	FUNCTION pAIeee63Tformat10795_AI63T10795:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat10795_AI63T10795:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10794_ATP10794:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype10794_ATP10794:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType10793_APT10793:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType10793_APT10793:=myrec;
		END;
	FUNCTION pANonAggregate10799_ANA10799:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate10799_ANA10799:=nil;
		 pANonAggregate10799_ANA10799:=myrec;
		END;
	FUNCTION pAIeee32Tformat10803_AI32T10803:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat10803_AI32T10803:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10802_ATP10802:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype10802_ATP10802:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim10801_APT10801:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim10801_APT10801:=nil;
		 pAPredeclaredtypeTypeprim10801_APT10801:=myrec;
		END;
	FUNCTION pAOptionalsign10806_AO10806:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign10806_AO10806:=nil;
		 pAOptionalsign10806_AO10806:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber10805_AIN10805:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber10805_AIN10805:=myrec;
		END;
	FUNCTION pAArray10804_AA10804:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray10804_AA10804:=nil;
		 pAArray10804_AA10804:=myrec;
		END;
	FUNCTION pAArrayType10800_AAT10800:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fieee32 ,4 );
		 pAArrayType10800_AAT10800:=myrec;
		END;
	FUNCTION pANonAggregate10810_ANA10810:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate10810_ANA10810:=nil;
		 pANonAggregate10810_ANA10810:=myrec;
		END;
	FUNCTION pAIeee63Tformat10814_AI63T10814:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat10814_AI63T10814:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10813_ATP10813:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype10813_ATP10813:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim10812_APT10812:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim10812_APT10812:=nil;
		 pAPredeclaredtypeTypeprim10812_APT10812:=myrec;
		END;
	FUNCTION pAOptionalsign10817_AO10817:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign10817_AO10817:=nil;
		 pAOptionalsign10817_AO10817:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber10816_AIN10816:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber10816_AIN10816:=myrec;
		END;
	FUNCTION pAArray10815_AA10815:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray10815_AA10815:=nil;
		 pAArray10815_AA10815:=myrec;
		END;
	FUNCTION pAArrayType10811_AAT10811:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fieee64 ,2 );
		 pAArrayType10811_AAT10811:=myrec;
		END;
	FUNCTION pAUnreservedReservation10821_AUR10821:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation10821_AUR10821:=nil;
		 pAUnreservedReservation10821_AUR10821:=myrec;
		END;
	FUNCTION pANonAggregate10822_ANA10822:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate10822_ANA10822:=nil;
		 pANonAggregate10822_ANA10822:=myrec;
		END;
	FUNCTION pAQuadwordFormat10825_AQF10825:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fqword;
		 pAQuadwordFormat10825_AQF10825:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype10824_AFP10824:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fquadword ;
		 pAFormatPredeclaredtype10824_AFP10824:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType10823_APT10823:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fquadword ;
		 pAPredeclaredtypeType10823_APT10823:=myrec;
		END;
	FUNCTION pANonAggregate10829_ANA10829:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate10829_ANA10829:=nil;
		 pANonAggregate10829_ANA10829:=myrec;
		END;
	FUNCTION pAIeee32Tformat10832_AI32T10832:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat10832_AI32T10832:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10831_ATP10831:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype10831_ATP10831:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType10830_APT10830:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType10830_APT10830:=myrec;
		END;
	FUNCTION pANonAggregate10836_ANA10836:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate10836_ANA10836:=nil;
		 pANonAggregate10836_ANA10836:=myrec;
		END;
	FUNCTION pAIeee63Tformat10839_AI63T10839:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat10839_AI63T10839:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10838_ATP10838:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype10838_ATP10838:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType10837_APT10837:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType10837_APT10837:=myrec;
		END;
	FUNCTION pANonAggregate10843_ANA10843:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate10843_ANA10843:=nil;
		 pANonAggregate10843_ANA10843:=myrec;
		END;
	FUNCTION pAIeee32Tformat10847_AI32T10847:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat10847_AI32T10847:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10846_ATP10846:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype10846_ATP10846:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim10845_APT10845:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim10845_APT10845:=nil;
		 pAPredeclaredtypeTypeprim10845_APT10845:=myrec;
		END;
	FUNCTION pAOptionalsign10850_AO10850:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign10850_AO10850:=nil;
		 pAOptionalsign10850_AO10850:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber10849_AIN10849:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber10849_AIN10849:=myrec;
		END;
	FUNCTION pAArray10848_AA10848:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray10848_AA10848:=nil;
		 pAArray10848_AA10848:=myrec;
		END;
	FUNCTION pAArrayType10844_AAT10844:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fieee32 ,4 );
		 pAArrayType10844_AAT10844:=myrec;
		END;
	FUNCTION pANonAggregate10854_ANA10854:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate10854_ANA10854:=nil;
		 pANonAggregate10854_ANA10854:=myrec;
		END;
	FUNCTION pAIeee63Tformat10858_AI63T10858:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat10858_AI63T10858:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10857_ATP10857:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype10857_ATP10857:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim10856_APT10856:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim10856_APT10856:=nil;
		 pAPredeclaredtypeTypeprim10856_APT10856:=myrec;
		END;
	FUNCTION pAOptionalsign10861_AO10861:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign10861_AO10861:=nil;
		 pAOptionalsign10861_AO10861:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber10860_AIN10860:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber10860_AIN10860:=myrec;
		END;
	FUNCTION pAArray10859_AA10859:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray10859_AA10859:=nil;
		 pAArray10859_AA10859:=myrec;
		END;
	FUNCTION pAArrayType10855_AAT10855:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fieee64 ,2 );
		 pAArrayType10855_AAT10855:=myrec;
		END;
	FUNCTION pAUnreservedReservation10865_AUR10865:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation10865_AUR10865:=nil;
		 pAUnreservedReservation10865_AUR10865:=myrec;
		END;
	FUNCTION pANonAggregate10866_ANA10866:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate10866_ANA10866:=nil;
		 pANonAggregate10866_ANA10866:=myrec;
		END;
	FUNCTION pAQuadwordFormat10869_AQF10869:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fqword;
		 pAQuadwordFormat10869_AQF10869:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype10868_AFP10868:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fquadword ;
		 pAFormatPredeclaredtype10868_AFP10868:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType10867_APT10867:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fquadword ;
		 pAPredeclaredtypeType10867_APT10867:=myrec;
		END;
	FUNCTION pANonAggregate10873_ANA10873:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate10873_ANA10873:=nil;
		 pANonAggregate10873_ANA10873:=myrec;
		END;
	FUNCTION pAIeee32Tformat10876_AI32T10876:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat10876_AI32T10876:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10875_ATP10875:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype10875_ATP10875:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType10874_APT10874:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType10874_APT10874:=myrec;
		END;
	FUNCTION pANonAggregate10880_ANA10880:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate10880_ANA10880:=nil;
		 pANonAggregate10880_ANA10880:=myrec;
		END;
	FUNCTION pAIeee63Tformat10883_AI63T10883:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat10883_AI63T10883:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10882_ATP10882:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype10882_ATP10882:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType10881_APT10881:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType10881_APT10881:=myrec;
		END;
	FUNCTION pANonAggregate10887_ANA10887:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate10887_ANA10887:=nil;
		 pANonAggregate10887_ANA10887:=myrec;
		END;
	FUNCTION pAIeee32Tformat10891_AI32T10891:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat10891_AI32T10891:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10890_ATP10890:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype10890_ATP10890:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim10889_APT10889:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim10889_APT10889:=nil;
		 pAPredeclaredtypeTypeprim10889_APT10889:=myrec;
		END;
	FUNCTION pAOptionalsign10894_AO10894:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign10894_AO10894:=nil;
		 pAOptionalsign10894_AO10894:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber10893_AIN10893:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber10893_AIN10893:=myrec;
		END;
	FUNCTION pAArray10892_AA10892:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray10892_AA10892:=nil;
		 pAArray10892_AA10892:=myrec;
		END;
	FUNCTION pAArrayType10888_AAT10888:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fieee32 ,4 );
		 pAArrayType10888_AAT10888:=myrec;
		END;
	FUNCTION pANonAggregate10898_ANA10898:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate10898_ANA10898:=nil;
		 pANonAggregate10898_ANA10898:=myrec;
		END;
	FUNCTION pAIeee63Tformat10902_AI63T10902:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat10902_AI63T10902:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10901_ATP10901:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype10901_ATP10901:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim10900_APT10900:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim10900_APT10900:=nil;
		 pAPredeclaredtypeTypeprim10900_APT10900:=myrec;
		END;
	FUNCTION pAOptionalsign10905_AO10905:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign10905_AO10905:=nil;
		 pAOptionalsign10905_AO10905:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber10904_AIN10904:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber10904_AIN10904:=myrec;
		END;
	FUNCTION pAArray10903_AA10903:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray10903_AA10903:=nil;
		 pAArray10903_AA10903:=myrec;
		END;
	FUNCTION pAArrayType10899_AAT10899:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fieee64 ,2 );
		 pAArrayType10899_AAT10899:=myrec;
		END;
	FUNCTION pAUnreservedReservation10909_AUR10909:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation10909_AUR10909:=nil;
		 pAUnreservedReservation10909_AUR10909:=myrec;
		END;
	FUNCTION pANonAggregate10910_ANA10910:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate10910_ANA10910:=nil;
		 pANonAggregate10910_ANA10910:=myrec;
		END;
	FUNCTION pAQuadwordFormat10913_AQF10913:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fqword;
		 pAQuadwordFormat10913_AQF10913:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype10912_AFP10912:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fquadword ;
		 pAFormatPredeclaredtype10912_AFP10912:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType10911_APT10911:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fquadword ;
		 pAPredeclaredtypeType10911_APT10911:=myrec;
		END;
	FUNCTION pANonAggregate10917_ANA10917:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate10917_ANA10917:=nil;
		 pANonAggregate10917_ANA10917:=myrec;
		END;
	FUNCTION pAIeee32Tformat10920_AI32T10920:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat10920_AI32T10920:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10919_ATP10919:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype10919_ATP10919:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType10918_APT10918:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType10918_APT10918:=myrec;
		END;
	FUNCTION pANonAggregate10924_ANA10924:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate10924_ANA10924:=nil;
		 pANonAggregate10924_ANA10924:=myrec;
		END;
	FUNCTION pAIeee63Tformat10927_AI63T10927:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat10927_AI63T10927:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10926_ATP10926:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype10926_ATP10926:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType10925_APT10925:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType10925_APT10925:=myrec;
		END;
	FUNCTION pAUnreservedReservation10931_AUR10931:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation10931_AUR10931:=nil;
		 pAUnreservedReservation10931_AUR10931:=myrec;
		END;
	FUNCTION pANonAggregate10932_ANA10932:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate10932_ANA10932:=nil;
		 pANonAggregate10932_ANA10932:=myrec;
		END;
	FUNCTION pAQuadwordFormat10935_AQF10935:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fqword;
		 pAQuadwordFormat10935_AQF10935:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype10934_AFP10934:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fquadword ;
		 pAFormatPredeclaredtype10934_AFP10934:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType10933_APT10933:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fquadword ;
		 pAPredeclaredtypeType10933_APT10933:=myrec;
		END;
	FUNCTION pANonAggregate10939_ANA10939:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate10939_ANA10939:=nil;
		 pANonAggregate10939_ANA10939:=myrec;
		END;
	FUNCTION pAIeee32Tformat10942_AI32T10942:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat10942_AI32T10942:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10941_ATP10941:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype10941_ATP10941:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType10940_APT10940:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType10940_APT10940:=myrec;
		END;
	FUNCTION pANonAggregate10946_ANA10946:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate10946_ANA10946:=nil;
		 pANonAggregate10946_ANA10946:=myrec;
		END;
	FUNCTION pAIeee63Tformat10949_AI63T10949:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat10949_AI63T10949:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10948_ATP10948:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype10948_ATP10948:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType10947_APT10947:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType10947_APT10947:=myrec;
		END;
	FUNCTION pAUnreservedReservation10953_AUR10953:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation10953_AUR10953:=nil;
		 pAUnreservedReservation10953_AUR10953:=myrec;
		END;
	FUNCTION pANonAggregate10954_ANA10954:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate10954_ANA10954:=nil;
		 pANonAggregate10954_ANA10954:=myrec;
		END;
	FUNCTION pAQuadwordFormat10957_AQF10957:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fqword;
		 pAQuadwordFormat10957_AQF10957:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype10956_AFP10956:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fquadword ;
		 pAFormatPredeclaredtype10956_AFP10956:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType10955_APT10955:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fquadword ;
		 pAPredeclaredtypeType10955_APT10955:=myrec;
		END;
	FUNCTION pANonAggregate10961_ANA10961:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate10961_ANA10961:=nil;
		 pANonAggregate10961_ANA10961:=myrec;
		END;
	FUNCTION pAIeee32Tformat10964_AI32T10964:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat10964_AI32T10964:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10963_ATP10963:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype10963_ATP10963:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType10962_APT10962:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType10962_APT10962:=myrec;
		END;
	FUNCTION pANonAggregate10968_ANA10968:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate10968_ANA10968:=nil;
		 pANonAggregate10968_ANA10968:=myrec;
		END;
	FUNCTION pAIeee63Tformat10971_AI63T10971:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat10971_AI63T10971:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10970_ATP10970:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype10970_ATP10970:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType10969_APT10969:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType10969_APT10969:=myrec;
		END;
	FUNCTION pAUnreservedReservation10975_AUR10975:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation10975_AUR10975:=nil;
		 pAUnreservedReservation10975_AUR10975:=myrec;
		END;
	FUNCTION pANonAggregate10976_ANA10976:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate10976_ANA10976:=nil;
		 pANonAggregate10976_ANA10976:=myrec;
		END;
	FUNCTION pAQuadwordFormat10979_AQF10979:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fqword;
		 pAQuadwordFormat10979_AQF10979:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype10978_AFP10978:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fquadword ;
		 pAFormatPredeclaredtype10978_AFP10978:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType10977_APT10977:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fquadword ;
		 pAPredeclaredtypeType10977_APT10977:=myrec;
		END;
	FUNCTION pANonAggregate10983_ANA10983:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate10983_ANA10983:=nil;
		 pANonAggregate10983_ANA10983:=myrec;
		END;
	FUNCTION pAIeee32Tformat10986_AI32T10986:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat10986_AI32T10986:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10985_ATP10985:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype10985_ATP10985:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType10984_APT10984:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType10984_APT10984:=myrec;
		END;
	FUNCTION pANonAggregate10990_ANA10990:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate10990_ANA10990:=nil;
		 pANonAggregate10990_ANA10990:=myrec;
		END;
	FUNCTION pAIeee63Tformat10993_AI63T10993:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat10993_AI63T10993:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype10992_ATP10992:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype10992_ATP10992:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType10991_APT10991:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType10991_APT10991:=myrec;
		END;
	FUNCTION pANonAggregate10997_ANA10997:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate10997_ANA10997:=nil;
		 pANonAggregate10997_ANA10997:=myrec;
		END;
	FUNCTION pASigned11002_AS11002:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned11002_AS11002:=myrec;
		END;
	FUNCTION pASignedTformat11001_AST11001:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned11002_AS11002;
		 pASignedTformat11001_AST11001:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11000_ATP11000:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype11000_ATP11000:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim10999_APT10999:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim10999_APT10999:=nil;
		 pAPredeclaredtypeTypeprim10999_APT10999:=myrec;
		END;
	FUNCTION pAOptionalsign11005_AO11005:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign11005_AO11005:=nil;
		 pAOptionalsign11005_AO11005:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber11004_AIN11004:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber11004_AIN11004:=myrec;
		END;
	FUNCTION pAArray11003_AA11003:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray11003_AA11003:=nil;
		 pAArray11003_AA11003:=myrec;
		END;
	FUNCTION pAArrayType10998_AAT10998:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,4 );
		 pAArrayType10998_AAT10998:=myrec;
		END;
	FUNCTION pANonAggregate11009_ANA11009:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate11009_ANA11009:=nil;
		 pANonAggregate11009_ANA11009:=myrec;
		END;
	FUNCTION pASigned11014_AS11014:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned11014_AS11014:=myrec;
		END;
	FUNCTION pASignedTformat11013_AST11013:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned11014_AS11014;
		 pASignedTformat11013_AST11013:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11012_ATP11012:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype11012_ATP11012:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim11011_APT11011:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim11011_APT11011:=nil;
		 pAPredeclaredtypeTypeprim11011_APT11011:=myrec;
		END;
	FUNCTION pAOptionalsign11017_AO11017:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign11017_AO11017:=nil;
		 pAOptionalsign11017_AO11017:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber11016_AIN11016:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber11016_AIN11016:=myrec;
		END;
	FUNCTION pAArray11015_AA11015:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray11015_AA11015:=nil;
		 pAArray11015_AA11015:=myrec;
		END;
	FUNCTION pAArrayType11010_AAT11010:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,4 );
		 pAArrayType11010_AAT11010:=myrec;
		END;
	FUNCTION pANonAggregate11021_ANA11021:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate11021_ANA11021:=nil;
		 pANonAggregate11021_ANA11021:=myrec;
		END;
	FUNCTION pASigned11026_AS11026:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned11026_AS11026:=myrec;
		END;
	FUNCTION pASignedTformat11025_AST11025:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned11026_AS11026;
		 pASignedTformat11025_AST11025:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11024_ATP11024:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype11024_ATP11024:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim11023_APT11023:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim11023_APT11023:=nil;
		 pAPredeclaredtypeTypeprim11023_APT11023:=myrec;
		END;
	FUNCTION pAOptionalsign11029_AO11029:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign11029_AO11029:=nil;
		 pAOptionalsign11029_AO11029:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber11028_AIN11028:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber11028_AIN11028:=myrec;
		END;
	FUNCTION pAArray11027_AA11027:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray11027_AA11027:=nil;
		 pAArray11027_AA11027:=myrec;
		END;
	FUNCTION pAArrayType11022_AAT11022:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,4 );
		 pAArrayType11022_AAT11022:=myrec;
		END;
	FUNCTION pANonAggregate11033_ANA11033:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate11033_ANA11033:=nil;
		 pANonAggregate11033_ANA11033:=myrec;
		END;
	FUNCTION pASigned11038_AS11038:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned11038_AS11038:=myrec;
		END;
	FUNCTION pASignedTformat11037_AST11037:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned11038_AS11038;
		 pASignedTformat11037_AST11037:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11036_ATP11036:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype11036_ATP11036:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim11035_APT11035:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim11035_APT11035:=nil;
		 pAPredeclaredtypeTypeprim11035_APT11035:=myrec;
		END;
	FUNCTION pAOptionalsign11041_AO11041:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign11041_AO11041:=nil;
		 pAOptionalsign11041_AO11041:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber11040_AIN11040:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber11040_AIN11040:=myrec;
		END;
	FUNCTION pAArray11039_AA11039:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray11039_AA11039:=nil;
		 pAArray11039_AA11039:=myrec;
		END;
	FUNCTION pAArrayType11034_AAT11034:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,4 );
		 pAArrayType11034_AAT11034:=myrec;
		END;
	FUNCTION pANonAggregate11045_ANA11045:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate11045_ANA11045:=nil;
		 pANonAggregate11045_ANA11045:=myrec;
		END;
	FUNCTION pASigned11049_AS11049:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned11049_AS11049:=myrec;
		END;
	FUNCTION pASignedTformat11048_AST11048:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned11049_AS11049;
		 pASignedTformat11048_AST11048:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11047_ATP11047:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype11047_ATP11047:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType11046_APT11046:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType11046_APT11046:=myrec;
		END;
	FUNCTION pANonAggregate11053_ANA11053:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate11053_ANA11053:=nil;
		 pANonAggregate11053_ANA11053:=myrec;
		END;
	FUNCTION pASigned11057_AS11057:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned11057_AS11057:=myrec;
		END;
	FUNCTION pASignedTformat11056_AST11056:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned11057_AS11057;
		 pASignedTformat11056_AST11056:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11055_ATP11055:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype11055_ATP11055:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType11054_APT11054:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType11054_APT11054:=myrec;
		END;
	FUNCTION pANonAggregate11061_ANA11061:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate11061_ANA11061:=nil;
		 pANonAggregate11061_ANA11061:=myrec;
		END;
	FUNCTION pASigned11065_AS11065:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned11065_AS11065:=myrec;
		END;
	FUNCTION pASignedTformat11064_AST11064:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned11065_AS11065;
		 pASignedTformat11064_AST11064:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11063_ATP11063:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype11063_ATP11063:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType11062_APT11062:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType11062_APT11062:=myrec;
		END;
	FUNCTION pANonAggregate11069_ANA11069:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate11069_ANA11069:=nil;
		 pANonAggregate11069_ANA11069:=myrec;
		END;
	FUNCTION pASigned11073_AS11073:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned11073_AS11073:=myrec;
		END;
	FUNCTION pASignedTformat11072_AST11072:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned11073_AS11073;
		 pASignedTformat11072_AST11072:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11071_ATP11071:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype11071_ATP11071:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType11070_APT11070:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType11070_APT11070:=myrec;
		END;
	FUNCTION pANonAggregate11077_ANA11077:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate11077_ANA11077:=nil;
		 pANonAggregate11077_ANA11077:=myrec;
		END;
	FUNCTION pASigned11081_AS11081:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned11081_AS11081:=myrec;
		END;
	FUNCTION pASignedTformat11080_AST11080:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned11081_AS11081;
		 pASignedTformat11080_AST11080:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11079_ATP11079:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype11079_ATP11079:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType11078_APT11078:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType11078_APT11078:=myrec;
		END;
	FUNCTION pANonAggregate11085_ANA11085:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate11085_ANA11085:=nil;
		 pANonAggregate11085_ANA11085:=myrec;
		END;
	FUNCTION pASigned11089_AS11089:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned11089_AS11089:=myrec;
		END;
	FUNCTION pASignedTformat11088_AST11088:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned11089_AS11089;
		 pASignedTformat11088_AST11088:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11087_ATP11087:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype11087_ATP11087:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType11086_APT11086:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType11086_APT11086:=myrec;
		END;
	FUNCTION pANonAggregate11093_ANA11093:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate11093_ANA11093:=nil;
		 pANonAggregate11093_ANA11093:=myrec;
		END;
	FUNCTION pASigned11097_AS11097:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned11097_AS11097:=myrec;
		END;
	FUNCTION pASignedTformat11096_AST11096:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned11097_AS11097;
		 pASignedTformat11096_AST11096:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11095_ATP11095:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype11095_ATP11095:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType11094_APT11094:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType11094_APT11094:=myrec;
		END;
	FUNCTION pANonAggregate11101_ANA11101:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate11101_ANA11101:=nil;
		 pANonAggregate11101_ANA11101:=myrec;
		END;
	FUNCTION pASigned11105_AS11105:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned11105_AS11105:=myrec;
		END;
	FUNCTION pASignedTformat11104_AST11104:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned11105_AS11105;
		 pASignedTformat11104_AST11104:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11103_ATP11103:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype11103_ATP11103:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType11102_APT11102:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType11102_APT11102:=myrec;
		END;
	FUNCTION pANonAggregate11109_ANA11109:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate11109_ANA11109:=nil;
		 pANonAggregate11109_ANA11109:=myrec;
		END;
	FUNCTION pASigned11113_AS11113:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned11113_AS11113:=myrec;
		END;
	FUNCTION pASignedTformat11112_AST11112:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned11113_AS11113;
		 pASignedTformat11112_AST11112:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11111_ATP11111:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype11111_ATP11111:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType11110_APT11110:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType11110_APT11110:=myrec;
		END;
	FUNCTION pANonAggregate11117_ANA11117:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate11117_ANA11117:=nil;
		 pANonAggregate11117_ANA11117:=myrec;
		END;
	FUNCTION pASigned11121_AS11121:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned11121_AS11121:=myrec;
		END;
	FUNCTION pASignedTformat11120_AST11120:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned11121_AS11121;
		 pASignedTformat11120_AST11120:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11119_ATP11119:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype11119_ATP11119:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType11118_APT11118:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType11118_APT11118:=myrec;
		END;
	FUNCTION pANonAggregate11125_ANA11125:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate11125_ANA11125:=nil;
		 pANonAggregate11125_ANA11125:=myrec;
		END;
	FUNCTION pASigned11129_AS11129:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned11129_AS11129:=myrec;
		END;
	FUNCTION pASignedTformat11128_AST11128:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned11129_AS11129;
		 pASignedTformat11128_AST11128:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11127_ATP11127:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype11127_ATP11127:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType11126_APT11126:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType11126_APT11126:=myrec;
		END;
	FUNCTION pANonAggregate11133_ANA11133:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate11133_ANA11133:=nil;
		 pANonAggregate11133_ANA11133:=myrec;
		END;
	FUNCTION pASigned11137_AS11137:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned11137_AS11137:=myrec;
		END;
	FUNCTION pASignedTformat11136_AST11136:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned11137_AS11137;
		 pASignedTformat11136_AST11136:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11135_ATP11135:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype11135_ATP11135:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType11134_APT11134:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType11134_APT11134:=myrec;
		END;
	FUNCTION pANonAggregate11141_ANA11141:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate11141_ANA11141:=nil;
		 pANonAggregate11141_ANA11141:=myrec;
		END;
	FUNCTION pASigned11145_AS11145:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned11145_AS11145:=myrec;
		END;
	FUNCTION pASignedTformat11144_AST11144:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned11145_AS11145;
		 pASignedTformat11144_AST11144:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11143_ATP11143:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype11143_ATP11143:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType11142_APT11142:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType11142_APT11142:=myrec;
		END;
	FUNCTION pANonAggregate11149_ANA11149:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate11149_ANA11149:=nil;
		 pANonAggregate11149_ANA11149:=myrec;
		END;
	FUNCTION pASigned11153_AS11153:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned11153_AS11153:=myrec;
		END;
	FUNCTION pASignedTformat11152_AST11152:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned11153_AS11153;
		 pASignedTformat11152_AST11152:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11151_ATP11151:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype11151_ATP11151:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType11150_APT11150:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType11150_APT11150:=myrec;
		END;
	FUNCTION pANonAggregate11157_ANA11157:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate11157_ANA11157:=nil;
		 pANonAggregate11157_ANA11157:=myrec;
		END;
	FUNCTION pASigned11161_AS11161:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned11161_AS11161:=myrec;
		END;
	FUNCTION pASignedTformat11160_AST11160:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned11161_AS11161;
		 pASignedTformat11160_AST11160:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11159_ATP11159:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype11159_ATP11159:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType11158_APT11158:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType11158_APT11158:=myrec;
		END;
	FUNCTION pANonAggregate11165_ANA11165:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate11165_ANA11165:=nil;
		 pANonAggregate11165_ANA11165:=myrec;
		END;
	FUNCTION pASigned11169_AS11169:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned11169_AS11169:=myrec;
		END;
	FUNCTION pASignedTformat11168_AST11168:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned11169_AS11169;
		 pASignedTformat11168_AST11168:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11167_ATP11167:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype11167_ATP11167:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType11166_APT11166:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType11166_APT11166:=myrec;
		END;
	FUNCTION pATypeid11174_AT11174:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM1  ilcg.RegDetails@19b60bb}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11174_AT11174:=myrec;
		END;
	FUNCTION pATypeidType11173_ATT11173:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11174_AT11174;
		 pATypeidType11173_ATT11173:=myrec;
		END;
	FUNCTION pATypeid11176_AT11176:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM3  ilcg.RegDetails@8c241a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11176_AT11176:=myrec;
		END;
	FUNCTION pATypeidType11175_ATT11175:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11176_AT11176;
		 pATypeidType11175_ATT11175:=myrec;
		END;
	FUNCTION pATypeid11178_AT11178:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM4  ilcg.RegDetails@734770}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11178_AT11178:=myrec;
		END;
	FUNCTION pATypeidType11177_ATT11177:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11178_AT11178;
		 pATypeidType11177_ATT11177:=myrec;
		END;
	FUNCTION pATypeid11180_AT11180:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM5  ilcg.RegDetails@b8e2c7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11180_AT11180:=myrec;
		END;
	FUNCTION pATypeidType11179_ATT11179:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11180_AT11180;
		 pATypeidType11179_ATT11179:=myrec;
		END;
	FUNCTION pATypeid11182_AT11182:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM6  ilcg.RegDetails@14435e5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11182_AT11182:=myrec;
		END;
	FUNCTION pATypeidType11181_ATT11181:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11182_AT11182;
		 pATypeidType11181_ATT11181:=myrec;
		END;
	FUNCTION pATypeid11184_AT11184:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM2  ilcg.RegDetails@144c134}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11184_AT11184:=myrec;
		END;
	FUNCTION pATypeidType11183_ATT11183:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11184_AT11184;
		 pATypeidType11183_ATT11183:=myrec;
		END;
	FUNCTION pATypeid11186_AT11186:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM0  ilcg.RegDetails@199abd1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11186_AT11186:=myrec;
		END;
	FUNCTION pATypeidType11185_ATT11185:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11186_AT11186;
		 pATypeidType11185_ATT11185:=myrec;
		END;
	FUNCTION pATypeid11188_AT11188:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM7  ilcg.RegDetails@9ff881}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11188_AT11188:=myrec;
		END;
	FUNCTION pATypeidType11187_ATT11187:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11188_AT11188;
		 pATypeidType11187_ATT11187:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl11172_AAP11172:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 314;
		myrec^.last:= 321;
		 pAAlternativesPatterndecl11172_AAP11172:=myrec;
		END;
	FUNCTION pATypeid11193_AT11193:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM00  ilcg.RegDetails@470524}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11193_AT11193:=myrec;
		END;
	FUNCTION pATypeidType11192_ATT11192:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11193_AT11193;
		 pATypeidType11192_ATT11192:=myrec;
		END;
	FUNCTION pATypeid11195_AT11195:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM10  ilcg.RegDetails@1722d01}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11195_AT11195:=myrec;
		END;
	FUNCTION pATypeidType11194_ATT11194:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11195_AT11195;
		 pATypeidType11194_ATT11194:=myrec;
		END;
	FUNCTION pATypeid11197_AT11197:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM20  ilcg.RegDetails@578b06}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11197_AT11197:=myrec;
		END;
	FUNCTION pATypeidType11196_ATT11196:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11197_AT11197;
		 pATypeidType11196_ATT11196:=myrec;
		END;
	FUNCTION pATypeid11199_AT11199:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM30  ilcg.RegDetails@1fdb2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11199_AT11199:=myrec;
		END;
	FUNCTION pATypeidType11198_ATT11198:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11199_AT11199;
		 pATypeidType11198_ATT11198:=myrec;
		END;
	FUNCTION pATypeid11201_AT11201:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM70  ilcg.RegDetails@9235c2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11201_AT11201:=myrec;
		END;
	FUNCTION pATypeidType11200_ATT11200:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11201_AT11201;
		 pATypeidType11200_ATT11200:=myrec;
		END;
	FUNCTION pATypeid11203_AT11203:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM60  ilcg.RegDetails@7abf31}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11203_AT11203:=myrec;
		END;
	FUNCTION pATypeidType11202_ATT11202:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11203_AT11203;
		 pATypeidType11202_ATT11202:=myrec;
		END;
	FUNCTION pATypeid11205_AT11205:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM50  ilcg.RegDetails@f036de}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11205_AT11205:=myrec;
		END;
	FUNCTION pATypeidType11204_ATT11204:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11205_AT11205;
		 pATypeidType11204_ATT11204:=myrec;
		END;
	FUNCTION pATypeid11207_AT11207:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM40  ilcg.RegDetails@1b66659}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11207_AT11207:=myrec;
		END;
	FUNCTION pATypeidType11206_ATT11206:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11207_AT11207;
		 pATypeidType11206_ATT11206:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl11191_AAP11191:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 322;
		myrec^.last:= 329;
		 pAAlternativesPatterndecl11191_AAP11191:=myrec;
		END;
	FUNCTION pATypeid11212_AT11212:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ iXMM00  ilcg.RegDetails@1b47cc2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11212_AT11212:=myrec;
		END;
	FUNCTION pATypeidType11211_ATT11211:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11212_AT11212;
		 pATypeidType11211_ATT11211:=myrec;
		END;
	FUNCTION pATypeid11214_AT11214:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ iXMM10  ilcg.RegDetails@c3507d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11214_AT11214:=myrec;
		END;
	FUNCTION pATypeidType11213_ATT11213:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11214_AT11214;
		 pATypeidType11213_ATT11213:=myrec;
		END;
	FUNCTION pATypeid11216_AT11216:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ iXMM20  ilcg.RegDetails@fed938}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11216_AT11216:=myrec;
		END;
	FUNCTION pATypeidType11215_ATT11215:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11216_AT11216;
		 pATypeidType11215_ATT11215:=myrec;
		END;
	FUNCTION pATypeid11218_AT11218:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ iXMM30  ilcg.RegDetails@de299f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11218_AT11218:=myrec;
		END;
	FUNCTION pATypeidType11217_ATT11217:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11218_AT11218;
		 pATypeidType11217_ATT11217:=myrec;
		END;
	FUNCTION pATypeid11220_AT11220:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ iXMM70  ilcg.RegDetails@1b114ee}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11220_AT11220:=myrec;
		END;
	FUNCTION pATypeidType11219_ATT11219:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11220_AT11220;
		 pATypeidType11219_ATT11219:=myrec;
		END;
	FUNCTION pATypeid11222_AT11222:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ iXMM60  ilcg.RegDetails@223c66}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11222_AT11222:=myrec;
		END;
	FUNCTION pATypeidType11221_ATT11221:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11222_AT11222;
		 pATypeidType11221_ATT11221:=myrec;
		END;
	FUNCTION pATypeid11224_AT11224:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ iXMM50  ilcg.RegDetails@4e62cc}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11224_AT11224:=myrec;
		END;
	FUNCTION pATypeidType11223_ATT11223:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11224_AT11224;
		 pATypeidType11223_ATT11223:=myrec;
		END;
	FUNCTION pATypeid11226_AT11226:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ iXMM40  ilcg.RegDetails@b5cd8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11226_AT11226:=myrec;
		END;
	FUNCTION pATypeidType11225_ATT11225:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11226_AT11226;
		 pATypeidType11225_ATT11225:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl11210_AAP11210:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 330;
		myrec^.last:= 337;
		 pAAlternativesPatterndecl11210_AAP11210:=myrec;
		END;
	FUNCTION pATypeid11231_AT11231:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM0I324  ilcg.RegDetails@a8be43}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11231_AT11231:=myrec;
		END;
	FUNCTION pATypeidType11230_ATT11230:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11231_AT11231;
		 pATypeidType11230_ATT11230:=myrec;
		END;
	FUNCTION pATypeid11233_AT11233:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM3I324  ilcg.RegDetails@171dc60}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11233_AT11233:=myrec;
		END;
	FUNCTION pATypeidType11232_ATT11232:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11233_AT11233;
		 pATypeidType11232_ATT11232:=myrec;
		END;
	FUNCTION pATypeid11235_AT11235:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM2I324  ilcg.RegDetails@472d86}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11235_AT11235:=myrec;
		END;
	FUNCTION pATypeidType11234_ATT11234:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11235_AT11235;
		 pATypeidType11234_ATT11234:=myrec;
		END;
	FUNCTION pATypeid11237_AT11237:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM1I324  ilcg.RegDetails@38202}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11237_AT11237:=myrec;
		END;
	FUNCTION pATypeidType11236_ATT11236:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11237_AT11237;
		 pATypeidType11236_ATT11236:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl11229_AAP11229:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 338;
		myrec^.last:= 341;
		 pAAlternativesPatterndecl11229_AAP11229:=myrec;
		END;
	FUNCTION pATypeid11242_AT11242:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM1I324  ilcg.RegDetails@38202}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11242_AT11242:=myrec;
		END;
	FUNCTION pATypeidType11241_ATT11241:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11242_AT11242;
		 pATypeidType11241_ATT11241:=myrec;
		END;
	FUNCTION pATypeid11244_AT11244:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM2I324  ilcg.RegDetails@472d86}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11244_AT11244:=myrec;
		END;
	FUNCTION pATypeidType11243_ATT11243:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11244_AT11244;
		 pATypeidType11243_ATT11243:=myrec;
		END;
	FUNCTION pATypeid11246_AT11246:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM0I324  ilcg.RegDetails@a8be43}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11246_AT11246:=myrec;
		END;
	FUNCTION pATypeidType11245_ATT11245:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11246_AT11246;
		 pATypeidType11245_ATT11245:=myrec;
		END;
	FUNCTION pATypeid11248_AT11248:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM3I324  ilcg.RegDetails@171dc60}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11248_AT11248:=myrec;
		END;
	FUNCTION pATypeidType11247_ATT11247:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11248_AT11248;
		 pATypeidType11247_ATT11247:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl11240_AAP11240:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 342;
		myrec^.last:= 345;
		 pAAlternativesPatterndecl11240_AAP11240:=myrec;
		END;
	FUNCTION pATypeid11253_AT11253:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ iMM00  ilcg.RegDetails@c4bca9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11253_AT11253:=myrec;
		END;
	FUNCTION pATypeidType11252_ATT11252:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11253_AT11253;
		 pATypeidType11252_ATT11252:=myrec;
		END;
	FUNCTION pATypeid11255_AT11255:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ iMM10  ilcg.RegDetails@99e8f8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11255_AT11255:=myrec;
		END;
	FUNCTION pATypeidType11254_ATT11254:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11255_AT11255;
		 pATypeidType11254_ATT11254:=myrec;
		END;
	FUNCTION pATypeid11257_AT11257:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ iMM20  ilcg.RegDetails@1ee33f3}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11257_AT11257:=myrec;
		END;
	FUNCTION pATypeidType11256_ATT11256:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11257_AT11257;
		 pATypeidType11256_ATT11256:=myrec;
		END;
	FUNCTION pATypeid11259_AT11259:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ iMM30  ilcg.RegDetails@29a451}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11259_AT11259:=myrec;
		END;
	FUNCTION pATypeidType11258_ATT11258:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11259_AT11259;
		 pATypeidType11258_ATT11258:=myrec;
		END;
	FUNCTION pATypeid11261_AT11261:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ iMM70  ilcg.RegDetails@175705e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11261_AT11261:=myrec;
		END;
	FUNCTION pATypeidType11260_ATT11260:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11261_AT11261;
		 pATypeidType11260_ATT11260:=myrec;
		END;
	FUNCTION pATypeid11263_AT11263:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ iMM60  ilcg.RegDetails@196b73e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11263_AT11263:=myrec;
		END;
	FUNCTION pATypeidType11262_ATT11262:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11263_AT11263;
		 pATypeidType11262_ATT11262:=myrec;
		END;
	FUNCTION pATypeid11265_AT11265:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ iMM50  ilcg.RegDetails@197f538}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11265_AT11265:=myrec;
		END;
	FUNCTION pATypeidType11264_ATT11264:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11265_AT11265;
		 pATypeidType11264_ATT11264:=myrec;
		END;
	FUNCTION pATypeid11267_AT11267:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ iMM40  ilcg.RegDetails@178efd5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11267_AT11267:=myrec;
		END;
	FUNCTION pATypeidType11266_ATT11266:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11267_AT11267;
		 pATypeidType11266_ATT11266:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl11251_AAP11251:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 346;
		myrec^.last:= 353;
		 pAAlternativesPatterndecl11251_AAP11251:=myrec;
		END;
	FUNCTION pATypeid11272_AT11272:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM0R64  ilcg.RegDetails@18b91cb}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11272_AT11272:=myrec;
		END;
	FUNCTION pATypeidType11271_ATT11271:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11272_AT11272;
		 pATypeidType11271_ATT11271:=myrec;
		END;
	FUNCTION pATypeid11274_AT11274:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM1R64  ilcg.RegDetails@135ea8e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11274_AT11274:=myrec;
		END;
	FUNCTION pATypeidType11273_ATT11273:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11274_AT11274;
		 pATypeidType11273_ATT11273:=myrec;
		END;
	FUNCTION pATypeid11276_AT11276:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM2R64  ilcg.RegDetails@dafcf2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11276_AT11276:=myrec;
		END;
	FUNCTION pATypeidType11275_ATT11275:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11276_AT11276;
		 pATypeidType11275_ATT11275:=myrec;
		END;
	FUNCTION pATypeid11278_AT11278:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM3R64  ilcg.RegDetails@6a21b2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11278_AT11278:=myrec;
		END;
	FUNCTION pATypeidType11277_ATT11277:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11278_AT11278;
		 pATypeidType11277_ATT11277:=myrec;
		END;
	FUNCTION pATypeid11280_AT11280:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM4R64  ilcg.RegDetails@3991a7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11280_AT11280:=myrec;
		END;
	FUNCTION pATypeidType11279_ATT11279:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11280_AT11280;
		 pATypeidType11279_ATT11279:=myrec;
		END;
	FUNCTION pATypeid11282_AT11282:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM5R64  ilcg.RegDetails@7fc8a0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11282_AT11282:=myrec;
		END;
	FUNCTION pATypeidType11281_ATT11281:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11282_AT11282;
		 pATypeidType11281_ATT11281:=myrec;
		END;
	FUNCTION pATypeid11284_AT11284:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM6R64  ilcg.RegDetails@5b644b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11284_AT11284:=myrec;
		END;
	FUNCTION pATypeidType11283_ATT11283:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11284_AT11284;
		 pATypeidType11283_ATT11283:=myrec;
		END;
	FUNCTION pATypeid11286_AT11286:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM7R64  ilcg.RegDetails@1cdae24}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11286_AT11286:=myrec;
		END;
	FUNCTION pATypeidType11285_ATT11285:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11286_AT11286;
		 pATypeidType11285_ATT11285:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl11270_AAP11270:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 354;
		myrec^.last:= 361;
		 pAAlternativesPatterndecl11270_AAP11270:=myrec;
		END;
	FUNCTION pATypeid11291_AT11291:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM3R324  ilcg.RegDetails@eae613}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11291_AT11291:=myrec;
		END;
	FUNCTION pATypeidType11290_ATT11290:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11291_AT11291;
		 pATypeidType11290_ATT11290:=myrec;
		END;
	FUNCTION pATypeid11293_AT11293:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM2R324  ilcg.RegDetails@98fef9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11293_AT11293:=myrec;
		END;
	FUNCTION pATypeidType11292_ATT11292:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11293_AT11293;
		 pATypeidType11292_ATT11292:=myrec;
		END;
	FUNCTION pATypeid11295_AT11295:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM1R324  ilcg.RegDetails@9b5b2f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11295_AT11295:=myrec;
		END;
	FUNCTION pATypeidType11294_ATT11294:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11295_AT11295;
		 pATypeidType11294_ATT11294:=myrec;
		END;
	FUNCTION pATypeid11297_AT11297:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM0R324  ilcg.RegDetails@750e30}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11297_AT11297:=myrec;
		END;
	FUNCTION pATypeidType11296_ATT11296:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11297_AT11297;
		 pATypeidType11296_ATT11296:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl11289_AAP11289:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 362;
		myrec^.last:= 365;
		 pAAlternativesPatterndecl11289_AAP11289:=myrec;
		END;
	FUNCTION pATypeid11302_AT11302:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM3R642  ilcg.RegDetails@c50443}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11302_AT11302:=myrec;
		END;
	FUNCTION pATypeidType11301_ATT11301:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11302_AT11302;
		 pATypeidType11301_ATT11301:=myrec;
		END;
	FUNCTION pATypeid11304_AT11304:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM2R642  ilcg.RegDetails@196a21e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11304_AT11304:=myrec;
		END;
	FUNCTION pATypeidType11303_ATT11303:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11304_AT11304;
		 pATypeidType11303_ATT11303:=myrec;
		END;
	FUNCTION pATypeid11306_AT11306:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM1R642  ilcg.RegDetails@ebe108}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11306_AT11306:=myrec;
		END;
	FUNCTION pATypeidType11305_ATT11305:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11306_AT11306;
		 pATypeidType11305_ATT11305:=myrec;
		END;
	FUNCTION pATypeid11308_AT11308:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XMM0R642  ilcg.RegDetails@15ad7f4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11308_AT11308:=myrec;
		END;
	FUNCTION pATypeidType11307_ATT11307:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11308_AT11308;
		 pATypeidType11307_ATT11307:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl11300_AAP11300:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 366;
		myrec^.last:= 369;
		 pAAlternativesPatterndecl11300_AAP11300:=myrec;
		END;
	FUNCTION pATypeid11313_AT11313:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmregi324  ilcg.pattern@1f3305e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11313_AT11313:=myrec;
		END;
	FUNCTION pATypeidType11312_ATT11312:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11313_AT11313;
		 pATypeidType11312_ATT11312:=myrec;
		END;
	FUNCTION pATypeid11315_AT11315:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ uxmreg  ilcg.pattern@1768615}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11315_AT11315:=myrec;
		END;
	FUNCTION pATypeidType11314_ATT11314:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11315_AT11315;
		 pATypeidType11314_ATT11314:=myrec;
		END;
	FUNCTION pATypeid11317_AT11317:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ psxmreg  ilcg.pattern@1f0a29b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11317_AT11317:=myrec;
		END;
	FUNCTION pATypeidType11316_ATT11316:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11317_AT11317;
		 pATypeidType11316_ATT11316:=myrec;
		END;
	FUNCTION pATypeid11319_AT11319:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ pdxmreg  ilcg.pattern@1935d6}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11319_AT11319:=myrec;
		END;
	FUNCTION pATypeidType11318_ATT11318:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11319_AT11319;
		 pATypeidType11318_ATT11318:=myrec;
		END;
	FUNCTION pATypeid11321_AT11321:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ revxmregi324  ilcg.pattern@2b8ddb}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11321_AT11321:=myrec;
		END;
	FUNCTION pATypeidType11320_ATT11320:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11321_AT11321;
		 pATypeidType11320_ATT11320:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl11311_AAP11311:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 370;
		myrec^.last:= 374;
		 pAAlternativesPatterndecl11311_AAP11311:=myrec;
		END;
	FUNCTION pATypeid11326_AT11326:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ixmreg  ilcg.pattern@1311a3e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11326_AT11326:=myrec;
		END;
	FUNCTION pATypeidType11325_ATT11325:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11326_AT11326;
		 pATypeidType11325_ATT11325:=myrec;
		END;
	FUNCTION pATypeid11328_AT11328:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ imreg  ilcg.pattern@1f7b6e1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11328_AT11328:=myrec;
		END;
	FUNCTION pATypeidType11327_ATT11327:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11328_AT11328;
		 pATypeidType11327_ATT11327:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl11324_AAP11324:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 375;
		myrec^.last:= 376;
		 pAAlternativesPatterndecl11324_AAP11324:=myrec;
		END;
	FUNCTION pATypeid11333_AT11333:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ lowintreg  ilcg.pattern@11bb202}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11333_AT11333:=myrec;
		END;
	FUNCTION pATypeidType11332_ATT11332:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11333_AT11333;
		 pATypeidType11332_ATT11332:=myrec;
		END;
	FUNCTION pATypeid11335_AT11335:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ sxmreg  ilcg.pattern@1d021b9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11335_AT11335:=myrec;
		END;
	FUNCTION pATypeidType11334_ATT11334:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11335_AT11335;
		 pATypeidType11334_ATT11334:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl11331_AAP11331:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 377;
		myrec^.last:= 378;
		 pAAlternativesPatterndecl11331_AAP11331:=myrec;
		END;
	FUNCTION pATypeid11340_AT11340:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11340_AT11340:=myrec;
		END;
	FUNCTION pATypeidType11339_ATT11339:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11340_AT11340;
		 pATypeidType11339_ATT11339:=myrec;
		END;
	FUNCTION pATypeid11342_AT11342:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmmr64  ilcg.pattern@f2818d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11342_AT11342:=myrec;
		END;
	FUNCTION pATypeidType11341_ATT11341:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11342_AT11342;
		 pATypeidType11341_ATT11341:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl11338_AAP11338:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 379;
		myrec^.last:= 380;
		 pAAlternativesPatterndecl11338_AAP11338:=myrec;
		END;
	FUNCTION pATypeid11347_AT11347:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11347_AT11347:=myrec;
		END;
	FUNCTION pATypeidType11346_ATT11346:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11347_AT11347;
		 pATypeidType11346_ATT11346:=myrec;
		END;
	FUNCTION pATypeid11349_AT11349:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmreg  ilcg.pattern@1d0f57e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11349_AT11349:=myrec;
		END;
	FUNCTION pATypeidType11348_ATT11348:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11349_AT11349;
		 pATypeidType11348_ATT11348:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl11345_AAP11345:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 381;
		myrec^.last:= 382;
		 pAAlternativesPatterndecl11345_AAP11345:=myrec;
		END;
	FUNCTION pATypeid11354_AT11354:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11354_AT11354:=myrec;
		END;
	FUNCTION pATypeidType11353_ATT11353:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11354_AT11354;
		 pATypeidType11353_ATT11353:=myrec;
		END;
	FUNCTION pATypeid11356_AT11356:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ sxmreg  ilcg.pattern@1d021b9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11356_AT11356:=myrec;
		END;
	FUNCTION pATypeidType11355_ATT11355:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11356_AT11356;
		 pATypeidType11355_ATT11355:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl11352_AAP11352:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 383;
		myrec^.last:= 384;
		 pAAlternativesPatterndecl11352_AAP11352:=myrec;
		END;
	FUNCTION pATypeid11361_AT11361:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11361_AT11361:=myrec;
		END;
	FUNCTION pATypeidType11360_ATT11360:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11361_AT11361;
		 pATypeidType11360_ATT11360:=myrec;
		END;
	FUNCTION pATypeid11363_AT11363:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11363_AT11363:=myrec;
		END;
	FUNCTION pATypeidType11362_ATT11362:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11363_AT11363;
		 pATypeidType11362_ATT11362:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl11359_AAP11359:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 385;
		myrec^.last:= 386;
		 pAAlternativesPatterndecl11359_AAP11359:=myrec;
		END;
	FUNCTION pAMinOperator11371_AMO11371:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAMinOperator11371_AMO11371:=nil;
		 pAMinOperator11371_AMO11371:=myrec;
		END;
	FUNCTION pAMaxOperator11375_AMO11375:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAMaxOperator11375_AMO11375:=nil;
		 pAMaxOperator11375_AMO11375:=myrec;
		END;
	FUNCTION pAAndOperator11379_AAO11379:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAAndOperator11379_AAO11379:=nil;
		 pAAndOperator11379_AAO11379:=myrec;
		END;
	FUNCTION pAOrOperator11383_AOO11383:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOrOperator11383_AOO11383:=nil;
		 pAOrOperator11383_AOO11383:=myrec;
		END;
	FUNCTION pATypeid11388_AT11388:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ add  ilcg.Operation@11fb68f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11388_AT11388:=myrec;
		END;
	FUNCTION pATypeidType11387_ATT11387:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11388_AT11388;
		 pATypeidType11387_ATT11387:=myrec;
		END;
	FUNCTION pATypeid11390_AT11390:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mul  ilcg.Operation@e589bd}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11390_AT11390:=myrec;
		END;
	FUNCTION pATypeidType11389_ATT11389:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11390_AT11390;
		 pATypeidType11389_ATT11389:=myrec;
		END;
	FUNCTION pATypeid11392_AT11392:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ sdiv  ilcg.Operation@176bfaa}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11392_AT11392:=myrec;
		END;
	FUNCTION pATypeidType11391_ATT11391:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11392_AT11392;
		 pATypeidType11391_ATT11391:=myrec;
		END;
	FUNCTION pATypeid11394_AT11394:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ sub  ilcg.Operation@24d517}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11394_AT11394:=myrec;
		END;
	FUNCTION pATypeidType11393_ATT11393:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11394_AT11394;
		 pATypeidType11393_ATT11393:=myrec;
		END;
	FUNCTION pATypeid11396_AT11396:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ min  ilcg.Operation@1a181b4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11396_AT11396:=myrec;
		END;
	FUNCTION pATypeidType11395_ATT11395:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11396_AT11396;
		 pATypeidType11395_ATT11395:=myrec;
		END;
	FUNCTION pATypeid11398_AT11398:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ max  ilcg.Operation@9f8c02}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11398_AT11398:=myrec;
		END;
	FUNCTION pATypeidType11397_ATT11397:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11398_AT11398;
		 pATypeidType11397_ATT11397:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl11386_AAP11386:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 387;
		myrec^.last:= 392;
		 pAAlternativesPatterndecl11386_AAP11386:=myrec;
		END;
	FUNCTION pATypeid11403_AT11403:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ min  ilcg.Operation@1a181b4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11403_AT11403:=myrec;
		END;
	FUNCTION pATypeidType11402_ATT11402:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11403_AT11403;
		 pATypeidType11402_ATT11402:=myrec;
		END;
	FUNCTION pATypeid11405_AT11405:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ max  ilcg.Operation@9f8c02}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11405_AT11405:=myrec;
		END;
	FUNCTION pATypeidType11404_ATT11404:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11405_AT11405;
		 pATypeidType11404_ATT11404:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl11401_AAP11401:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 393;
		myrec^.last:= 394;
		 pAAlternativesPatterndecl11401_AAP11401:=myrec;
		END;
	FUNCTION pATypeid11410_AT11410:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ por  ilcg.Operation@3a3001}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11410_AT11410:=myrec;
		END;
	FUNCTION pATypeidType11409_ATT11409:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11410_AT11410;
		 pATypeidType11409_ATT11409:=myrec;
		END;
	FUNCTION pATypeid11412_AT11412:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ pand  ilcg.Operation@afba5d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11412_AT11412:=myrec;
		END;
	FUNCTION pATypeidType11411_ATT11411:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11412_AT11412;
		 pATypeidType11411_ATT11411:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl11408_AAP11408:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 395;
		myrec^.last:= 396;
		 pAAlternativesPatterndecl11408_AAP11408:=myrec;
		END;
	FUNCTION pATypeid11417_AT11417:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ coperator  ilcg.pattern@5144d5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11417_AT11417:=myrec;
		END;
	FUNCTION pATypeidType11416_ATT11416:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11417_AT11417;
		 pATypeidType11416_ATT11416:=myrec;
		END;
	FUNCTION pATypeid11419_AT11419:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ nonmultoperator  ilcg.pattern@752144}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11419_AT11419:=myrec;
		END;
	FUNCTION pATypeidType11418_ATT11418:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11419_AT11419;
		 pATypeidType11418_ATT11418:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl11415_AAP11415:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 397;
		myrec^.last:= 398;
		 pAAlternativesPatterndecl11415_AAP11415:=myrec;
		END;
	FUNCTION pATypeid11422_AT11422:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmreg  ilcg.pattern@1d0f57e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11422_AT11422:=myrec;
		END;
	FUNCTION pATypeid11424_AT11424:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmreg  ilcg.pattern@1d0f57e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11424_AT11424:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc11428_AIL11428:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc11428_AIL11428:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval11427_AR11427:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc11428_AIL11428;
		 pARefval11427_AR11427:=myrec;
		END;
	FUNCTION pAAndDyadic11430_AAD11430:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpand;
		 pAAndDyadic11430_AAD11430:=myrec;
		END;
	FUNCTION pANotMonadic11432_ANM11432:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpNOT;
		 pANotMonadic11432_ANM11432:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc11436_AIL11436:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc11436_AIL11436:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval11435_AR11435:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc11436_AIL11436;
		 pARefval11435_AR11435:=myrec;
		END;
	FUNCTION pADerefRhs11434_ADR11434:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval11435_AR11435;
		 pADerefRhs11434_ADR11434:=myrec;
		END;
	FUNCTION pARhsValue11433_ARV11433:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs11434_ADR11434;
		 pARhsValue11433_ARV11433:=myrec;
		END;
	FUNCTION pAMonadicValue11431_AMV11431:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue11433_ARV11433;
		myrec^.fn:=pANotMonadic11432_ANM11432;
		 pAMonadicValue11431_AMV11431:=myrec;
		END;
		(*! Match ma *)
	FUNCTION pAIdLoc11440_AIL11440:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc11440_AIL11440:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval11439_AR11439:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc11440_AIL11440;
		 pARefval11439_AR11439:=myrec;
		END;
	FUNCTION pADerefRhs11438_ADR11438:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval11439_AR11439;
		 pADerefRhs11438_ADR11438:=myrec;
		END;
	FUNCTION pARhsValue11437_ARV11437:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs11438_ADR11438;
		 pARhsValue11437_ARV11437:=myrec;
		END;
	FUNCTION pADyadicValue11429_ADV11429:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pAMonadicValue11431_AMV11431;
		myrec^.arg2:=pARhsValue11437_ARV11437;
		myrec^.fn:=pAAndDyadic11430_AAD11430;
		 pADyadicValue11429_ADV11429:=myrec;
		END;
	FUNCTION pAAssign11426_AA11426:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue11429_ADV11429;
		myrec^.dest:=pARefval11427_AR11427;
		 pAAssign11426_AA11426:=myrec;
		END;
	FUNCTION pAAssignMeaning11425_AAM11425:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign11426_AA11426;
		 pAAssignMeaning11425_AAM11425:=myrec;
		END;
	FUNCTION pAAssemblypattern11442_AA11442:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'pandn ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern11442_AA11442:=list;
		END;
	FUNCTION pAAssemblesto11441_AA11441:pprintlist;
	begin
		pAAssemblesto11441_AA11441:=pAAssemblypattern11442_AA11442;
		END;
	FUNCTION pASideeffects11447_AS11447:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects11447_AS11447:=nil;
		 pASideeffects11447_AS11447:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond11448_AUP11448:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond11448_AUP11448:=nil;
		 pAUnconditionalPrecond11448_AUP11448:=myrec;
		END;
	FUNCTION XPANDN_XPANDN:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patxmreg_;
		params^[1]:=patxmreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning11425_AAM11425;
		matchedAssembler:=pAAssemblesto11441_AA11441;
		END;
		XPANDN_XPANDN:=myrec;
	END;
	FUNCTION pATypeid11451_AT11451:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ soperator  ilcg.pattern@51a9e4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11451_AT11451:=myrec;
		END;
	FUNCTION pATypeid11453_AT11453:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmmr64m  ilcg.pattern@7c5965}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11453_AT11453:=myrec;
		END;
	FUNCTION pATypeid11455_AT11455:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmmr64  ilcg.pattern@f2818d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11455_AT11455:=myrec;
		END;
	FUNCTION pAIeee63Tformat11463_AI63T11463:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat11463_AI63T11463:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11462_ATP11462:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype11462_ATP11462:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType11461_APT11461:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType11461_APT11461:=myrec;
		END;
	FUNCTION pAReference11460_AR11460:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType11461_APT11461;
		 pAReference11460_AR11460:=myrec;
		END;
	FUNCTION pAReftypeType11459_ART11459:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference11460_AR11460;
		 pAReftypeType11459_ART11459:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc11464_AIL11464:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc11464_AIL11464:=myrec;
		END;
		(*! try to cast to type: ref ieee64*)
	FUNCTION pARefcastRefval11458_ARR11458:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType11459_ART11459;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc11464_AIL11464;
		 pARefcastRefval11458_ARR11458:=myrec;
		END;
	FUNCTION pAIdentifierDyadic11466_AID11466:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic11466_AID11466:=myrec;
		END;
	FUNCTION pAIeee63Tformat11471_AI63T11471:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat11471_AI63T11471:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11470_ATP11470:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype11470_ATP11470:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType11469_APT11469:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType11469_APT11469:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc11475_AIL11475:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc11475_AIL11475:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval11474_AR11474:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc11475_AIL11475;
		 pARefval11474_AR11474:=myrec;
		END;
	FUNCTION pADerefRhs11473_ADR11473:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval11474_AR11474;
		 pADerefRhs11473_ADR11473:=myrec;
		END;
	FUNCTION pARhsValue11472_ARV11472:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs11473_ADR11473;
		 pARhsValue11472_ARV11472:=myrec;
		END;
		(*! try to cast to type: ieee64*)
	FUNCTION pACastRhs11468_ACR11468:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType11469_APT11469;
		myrec^.arg2:=pARhsValue11472_ARV11472;
		 pACastRhs11468_ACR11468:=myrec;
		END;
	FUNCTION pARhsValue11467_ARV11467:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs11468_ACR11468;
		 pARhsValue11467_ARV11467:=myrec;
		END;
	FUNCTION pAIeee63Tformat11480_AI63T11480:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat11480_AI63T11480:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11479_ATP11479:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype11479_ATP11479:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType11478_APT11478:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType11478_APT11478:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc11484_AIL11484:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc11484_AIL11484:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval11483_AR11483:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc11484_AIL11484;
		 pARefval11483_AR11483:=myrec;
		END;
	FUNCTION pADerefRhs11482_ADR11482:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval11483_AR11483;
		 pADerefRhs11482_ADR11482:=myrec;
		END;
	FUNCTION pARhsValue11481_ARV11481:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs11482_ADR11482;
		 pARhsValue11481_ARV11481:=myrec;
		END;
		(*! try to cast to type: ieee64*)
	FUNCTION pACastRhs11477_ACR11477:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType11478_APT11478;
		myrec^.arg2:=pARhsValue11481_ARV11481;
		 pACastRhs11477_ACR11477:=myrec;
		END;
	FUNCTION pARhsValue11476_ARV11476:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs11477_ACR11477;
		 pARhsValue11476_ARV11476:=myrec;
		END;
	FUNCTION pADyadicValue11465_ADV11465:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue11467_ARV11467;
		myrec^.arg2:=pARhsValue11476_ARV11476;
		myrec^.fn:=pAIdentifierDyadic11466_AID11466;
		 pADyadicValue11465_ADV11465:=myrec;
		END;
	FUNCTION pAAssign11457_AA11457:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue11465_ADV11465;
		myrec^.dest:=pARefcastRefval11458_ARR11458;
		 pAAssign11457_AA11457:=myrec;
		END;
	FUNCTION pAAssignMeaning11456_AAM11456:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign11457_AA11457;
		 pAAssignMeaning11456_AAM11456:=myrec;
		END;
	FUNCTION pAAssemblypattern11486_AA11486:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'sd  ' );
		pappendp(list,2);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern11486_AA11486:=list;
		END;
	FUNCTION pAAssemblesto11485_AA11485:pprintlist;
	begin
		pAAssemblesto11485_AA11485:=pAAssemblypattern11486_AA11486;
		END;
	FUNCTION pASideeffects11492_AS11492:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects11492_AS11492:=nil;
		 pASideeffects11492_AS11492:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond11493_AUP11493:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond11493_AUP11493:=nil;
		 pAUnconditionalPrecond11493_AUP11493:=myrec;
		END;
	FUNCTION OPSD_OPSD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patxmmr64_64;
		params^[1]:=patxmmr64m_64;
		params^[0]:=patsoperator_;
		paramcount:=4;
		meaning:=pAAssignMeaning11456_AAM11456;
		matchedAssembler:=pAAssemblesto11485_AA11485;
		END;
		OPSD_OPSD:=myrec;
	END;
	FUNCTION pATypeid11496_AT11496:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ soperator  ilcg.pattern@51a9e4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11496_AT11496:=myrec;
		END;
	FUNCTION pATypeid11498_AT11498:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ smaddrmode  ilcg.pattern@a61373}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11498_AT11498:=myrec;
		END;
	FUNCTION pATypeid11500_AT11500:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ sxmreg  ilcg.pattern@1d021b9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11500_AT11500:=myrec;
		END;
	FUNCTION pAIeee32Tformat11508_AI32T11508:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat11508_AI32T11508:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11507_ATP11507:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype11507_ATP11507:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType11506_APT11506:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType11506_APT11506:=myrec;
		END;
	FUNCTION pAReference11505_AR11505:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType11506_APT11506;
		 pAReference11505_AR11505:=myrec;
		END;
	FUNCTION pAReftypeType11504_ART11504:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference11505_AR11505;
		 pAReftypeType11504_ART11504:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc11509_AIL11509:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc11509_AIL11509:=myrec;
		END;
		(*! try to cast to type: ref ieee32*)
	FUNCTION pARefcastRefval11503_ARR11503:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType11504_ART11504;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc11509_AIL11509;
		 pARefcastRefval11503_ARR11503:=myrec;
		END;
	FUNCTION pAIdentifierDyadic11511_AID11511:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic11511_AID11511:=myrec;
		END;
	FUNCTION pAIeee32Tformat11516_AI32T11516:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat11516_AI32T11516:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11515_ATP11515:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype11515_ATP11515:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType11514_APT11514:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType11514_APT11514:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc11520_AIL11520:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc11520_AIL11520:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval11519_AR11519:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc11520_AIL11520;
		 pARefval11519_AR11519:=myrec;
		END;
	FUNCTION pADerefRhs11518_ADR11518:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval11519_AR11519;
		 pADerefRhs11518_ADR11518:=myrec;
		END;
	FUNCTION pARhsValue11517_ARV11517:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs11518_ADR11518;
		 pARhsValue11517_ARV11517:=myrec;
		END;
		(*! try to cast to type: ieee32*)
	FUNCTION pACastRhs11513_ACR11513:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType11514_APT11514;
		myrec^.arg2:=pARhsValue11517_ARV11517;
		 pACastRhs11513_ACR11513:=myrec;
		END;
	FUNCTION pARhsValue11512_ARV11512:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs11513_ACR11513;
		 pARhsValue11512_ARV11512:=myrec;
		END;
	FUNCTION pAIeee32Tformat11525_AI32T11525:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat11525_AI32T11525:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11524_ATP11524:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype11524_ATP11524:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType11523_APT11523:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType11523_APT11523:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc11529_AIL11529:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc11529_AIL11529:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval11528_AR11528:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc11529_AIL11529;
		 pARefval11528_AR11528:=myrec;
		END;
	FUNCTION pADerefRhs11527_ADR11527:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval11528_AR11528;
		 pADerefRhs11527_ADR11527:=myrec;
		END;
	FUNCTION pARhsValue11526_ARV11526:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs11527_ADR11527;
		 pARhsValue11526_ARV11526:=myrec;
		END;
		(*! try to cast to type: ieee32*)
	FUNCTION pACastRhs11522_ACR11522:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType11523_APT11523;
		myrec^.arg2:=pARhsValue11526_ARV11526;
		 pACastRhs11522_ACR11522:=myrec;
		END;
	FUNCTION pARhsValue11521_ARV11521:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs11522_ACR11522;
		 pARhsValue11521_ARV11521:=myrec;
		END;
	FUNCTION pADyadicValue11510_ADV11510:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue11512_ARV11512;
		myrec^.arg2:=pARhsValue11521_ARV11521;
		myrec^.fn:=pAIdentifierDyadic11511_AID11511;
		 pADyadicValue11510_ADV11510:=myrec;
		END;
	FUNCTION pAAssign11502_AA11502:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue11510_ADV11510;
		myrec^.dest:=pARefcastRefval11503_ARR11503;
		 pAAssign11502_AA11502:=myrec;
		END;
	FUNCTION pAAssignMeaning11501_AAM11501:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign11502_AA11502;
		 pAAssignMeaning11501_AAM11501:=myrec;
		END;
	FUNCTION pAAssemblypattern11531_AA11531:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'ss  ' );
		pappendp(list,2);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern11531_AA11531:=list;
		END;
	FUNCTION pAAssemblesto11530_AA11530:pprintlist;
	begin
		pAAssemblesto11530_AA11530:=pAAssemblypattern11531_AA11531;
		END;
	FUNCTION pASideeffects11537_AS11537:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects11537_AS11537:=nil;
		 pASideeffects11537_AS11537:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond11538_AUP11538:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond11538_AUP11538:=nil;
		 pAUnconditionalPrecond11538_AUP11538:=myrec;
		END;
	FUNCTION OPSS_OPSS:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patsxmreg_;
		params^[1]:=patsmaddrmode_;
		params^[0]:=patsoperator_;
		paramcount:=4;
		meaning:=pAAssignMeaning11501_AAM11501;
		matchedAssembler:=pAAssemblesto11530_AA11530;
		END;
		OPSS_OPSS:=myrec;
	END;
	FUNCTION pATypeid11541_AT11541:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ smaddrmode  ilcg.pattern@a61373}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11541_AT11541:=myrec;
		END;
	FUNCTION pATypeid11543_AT11543:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ sxmreg  ilcg.pattern@1d021b9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11543_AT11543:=myrec;
		END;
	FUNCTION pAIeee32Tformat11551_AI32T11551:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat11551_AI32T11551:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11550_ATP11550:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype11550_ATP11550:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType11549_APT11549:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType11549_APT11549:=myrec;
		END;
	FUNCTION pAReference11548_AR11548:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType11549_APT11549;
		 pAReference11548_AR11548:=myrec;
		END;
	FUNCTION pAReftypeType11547_ART11547:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference11548_AR11548;
		 pAReftypeType11547_ART11547:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc11552_AIL11552:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc11552_AIL11552:=myrec;
		END;
		(*! try to cast to type: ref ieee32*)
	FUNCTION pARefcastRefval11546_ARR11546:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType11547_ART11547;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc11552_AIL11552;
		 pARefcastRefval11546_ARR11546:=myrec;
		END;
	FUNCTION pAPlusDyadic11554_APD11554:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic11554_APD11554:=myrec;
		END;
	FUNCTION pAIeee32Tformat11559_AI32T11559:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat11559_AI32T11559:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11558_ATP11558:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype11558_ATP11558:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType11557_APT11557:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType11557_APT11557:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc11563_AIL11563:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc11563_AIL11563:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval11562_AR11562:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc11563_AIL11563;
		 pARefval11562_AR11562:=myrec;
		END;
	FUNCTION pADerefRhs11561_ADR11561:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval11562_AR11562;
		 pADerefRhs11561_ADR11561:=myrec;
		END;
	FUNCTION pARhsValue11560_ARV11560:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs11561_ADR11561;
		 pARhsValue11560_ARV11560:=myrec;
		END;
		(*! try to cast to type: ieee32*)
	FUNCTION pACastRhs11556_ACR11556:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType11557_APT11557;
		myrec^.arg2:=pARhsValue11560_ARV11560;
		 pACastRhs11556_ACR11556:=myrec;
		END;
	FUNCTION pARhsValue11555_ARV11555:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs11556_ACR11556;
		 pARhsValue11555_ARV11555:=myrec;
		END;
	FUNCTION pAIeee32Tformat11568_AI32T11568:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat11568_AI32T11568:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11567_ATP11567:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype11567_ATP11567:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType11566_APT11566:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType11566_APT11566:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc11572_AIL11572:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc11572_AIL11572:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval11571_AR11571:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc11572_AIL11572;
		 pARefval11571_AR11571:=myrec;
		END;
	FUNCTION pADerefRhs11570_ADR11570:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval11571_AR11571;
		 pADerefRhs11570_ADR11570:=myrec;
		END;
	FUNCTION pARhsValue11569_ARV11569:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs11570_ADR11570;
		 pARhsValue11569_ARV11569:=myrec;
		END;
		(*! try to cast to type: ieee32*)
	FUNCTION pACastRhs11565_ACR11565:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType11566_APT11566;
		myrec^.arg2:=pARhsValue11569_ARV11569;
		 pACastRhs11565_ACR11565:=myrec;
		END;
	FUNCTION pARhsValue11564_ARV11564:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs11565_ACR11565;
		 pARhsValue11564_ARV11564:=myrec;
		END;
	FUNCTION pADyadicValue11553_ADV11553:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue11555_ARV11555;
		myrec^.arg2:=pARhsValue11564_ARV11564;
		myrec^.fn:=pAPlusDyadic11554_APD11554;
		 pADyadicValue11553_ADV11553:=myrec;
		END;
	FUNCTION pAAssign11545_AA11545:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue11553_ADV11553;
		myrec^.dest:=pARefcastRefval11546_ARR11546;
		 pAAssign11545_AA11545:=myrec;
		END;
	FUNCTION pAAssignMeaning11544_AAM11544:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign11545_AA11545;
		 pAAssignMeaning11544_AAM11544:=myrec;
		END;
	FUNCTION pAAssemblypattern11574_AA11574:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'addss  ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,0);
		pAAssemblypattern11574_AA11574:=list;
		END;
	FUNCTION pAAssemblesto11573_AA11573:pprintlist;
	begin
		pAAssemblesto11573_AA11573:=pAAssemblypattern11574_AA11574;
		END;
	FUNCTION pASideeffects11579_AS11579:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects11579_AS11579:=nil;
		 pASideeffects11579_AS11579:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond11580_AUP11580:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond11580_AUP11580:=nil;
		 pAUnconditionalPrecond11580_AUP11580:=myrec;
		END;
	FUNCTION ADDSS_ADDSS:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patsxmreg_;
		params^[0]:=patsmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning11544_AAM11544;
		matchedAssembler:=pAAssemblesto11573_AA11573;
		END;
		ADDSS_ADDSS:=myrec;
	END;
	FUNCTION pATypeid11583_AT11583:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ soperator  ilcg.pattern@51a9e4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11583_AT11583:=myrec;
		END;
	FUNCTION pATypeid11585_AT11585:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmreg  ilcg.pattern@1d0f57e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11585_AT11585:=myrec;
		END;
	FUNCTION pATypeid11587_AT11587:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmreg  ilcg.pattern@1d0f57e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11587_AT11587:=myrec;
		END;
	FUNCTION pAIeee32Tformat11596_AI32T11596:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat11596_AI32T11596:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11595_ATP11595:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype11595_ATP11595:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim11594_APT11594:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim11594_APT11594:=nil;
		 pAPredeclaredtypeTypeprim11594_APT11594:=myrec;
		END;
	FUNCTION pAOptionalsign11599_AO11599:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign11599_AO11599:=nil;
		 pAOptionalsign11599_AO11599:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber11598_AIN11598:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber11598_AIN11598:=myrec;
		END;
	FUNCTION pAArray11597_AA11597:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray11597_AA11597:=nil;
		 pAArray11597_AA11597:=myrec;
		END;
	FUNCTION pAArrayType11593_AAT11593:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fieee32 ,4 );
		 pAArrayType11593_AAT11593:=myrec;
		END;
	FUNCTION pAReference11592_AR11592:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType11593_AAT11593;
		 pAReference11592_AR11592:=myrec;
		END;
	FUNCTION pAReftypeType11591_ART11591:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference11592_AR11592;
		 pAReftypeType11591_ART11591:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc11600_AIL11600:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc11600_AIL11600:=myrec;
		END;
		(*! try to cast to type: ref ieee32 vector ( 4 )*)
	FUNCTION pARefcastRefval11590_ARR11590:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType11591_ART11591;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc11600_AIL11600;
		 pARefcastRefval11590_ARR11590:=myrec;
		END;
	FUNCTION pAIdentifierDyadic11602_AID11602:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic11602_AID11602:=myrec;
		END;
	FUNCTION pAIeee32Tformat11608_AI32T11608:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat11608_AI32T11608:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11607_ATP11607:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype11607_ATP11607:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim11606_APT11606:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim11606_APT11606:=nil;
		 pAPredeclaredtypeTypeprim11606_APT11606:=myrec;
		END;
	FUNCTION pAOptionalsign11611_AO11611:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign11611_AO11611:=nil;
		 pAOptionalsign11611_AO11611:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber11610_AIN11610:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber11610_AIN11610:=myrec;
		END;
	FUNCTION pAArray11609_AA11609:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray11609_AA11609:=nil;
		 pAArray11609_AA11609:=myrec;
		END;
	FUNCTION pAArrayType11605_AAT11605:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fieee32 ,4 );
		 pAArrayType11605_AAT11605:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc11615_AIL11615:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc11615_AIL11615:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval11614_AR11614:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc11615_AIL11615;
		 pARefval11614_AR11614:=myrec;
		END;
	FUNCTION pADerefRhs11613_ADR11613:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval11614_AR11614;
		 pADerefRhs11613_ADR11613:=myrec;
		END;
	FUNCTION pARhsValue11612_ARV11612:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs11613_ADR11613;
		 pARhsValue11612_ARV11612:=myrec;
		END;
		(*! try to cast to type: ieee32 vector ( 4 )*)
	FUNCTION pACastRhs11604_ACR11604:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType11605_AAT11605;
		myrec^.arg2:=pARhsValue11612_ARV11612;
		 pACastRhs11604_ACR11604:=myrec;
		END;
	FUNCTION pARhsValue11603_ARV11603:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs11604_ACR11604;
		 pARhsValue11603_ARV11603:=myrec;
		END;
	FUNCTION pAIeee32Tformat11621_AI32T11621:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat11621_AI32T11621:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11620_ATP11620:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype11620_ATP11620:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim11619_APT11619:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim11619_APT11619:=nil;
		 pAPredeclaredtypeTypeprim11619_APT11619:=myrec;
		END;
	FUNCTION pAOptionalsign11624_AO11624:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign11624_AO11624:=nil;
		 pAOptionalsign11624_AO11624:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber11623_AIN11623:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber11623_AIN11623:=myrec;
		END;
	FUNCTION pAArray11622_AA11622:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray11622_AA11622:=nil;
		 pAArray11622_AA11622:=myrec;
		END;
	FUNCTION pAArrayType11618_AAT11618:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fieee32 ,4 );
		 pAArrayType11618_AAT11618:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc11628_AIL11628:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc11628_AIL11628:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval11627_AR11627:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc11628_AIL11628;
		 pARefval11627_AR11627:=myrec;
		END;
	FUNCTION pADerefRhs11626_ADR11626:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval11627_AR11627;
		 pADerefRhs11626_ADR11626:=myrec;
		END;
	FUNCTION pARhsValue11625_ARV11625:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs11626_ADR11626;
		 pARhsValue11625_ARV11625:=myrec;
		END;
		(*! try to cast to type: ieee32 vector ( 4 )*)
	FUNCTION pACastRhs11617_ACR11617:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType11618_AAT11618;
		myrec^.arg2:=pARhsValue11625_ARV11625;
		 pACastRhs11617_ACR11617:=myrec;
		END;
	FUNCTION pARhsValue11616_ARV11616:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs11617_ACR11617;
		 pARhsValue11616_ARV11616:=myrec;
		END;
	FUNCTION pADyadicValue11601_ADV11601:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue11603_ARV11603;
		myrec^.arg2:=pARhsValue11616_ARV11616;
		myrec^.fn:=pAIdentifierDyadic11602_AID11602;
		 pADyadicValue11601_ADV11601:=myrec;
		END;
	FUNCTION pAAssign11589_AA11589:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue11601_ADV11601;
		myrec^.dest:=pARefcastRefval11590_ARR11590;
		 pAAssign11589_AA11589:=myrec;
		END;
	FUNCTION pAAssignMeaning11588_AAM11588:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign11589_AA11589;
		 pAAssignMeaning11588_AAM11588:=myrec;
		END;
	FUNCTION pAAssemblypattern11630_AA11630:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'ps  ' );
		pappendp(list,2);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern11630_AA11630:=list;
		END;
	FUNCTION pAAssemblesto11629_AA11629:pprintlist;
	begin
		pAAssemblesto11629_AA11629:=pAAssemblypattern11630_AA11630;
		END;
	FUNCTION pASideeffects11636_AS11636:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects11636_AS11636:=nil;
		 pASideeffects11636_AS11636:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond11637_AUP11637:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond11637_AUP11637:=nil;
		 pAUnconditionalPrecond11637_AUP11637:=myrec;
		END;
	FUNCTION OPPS_OPPS:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patxmreg_;
		params^[1]:=patxmreg_;
		params^[0]:=patsoperator_;
		paramcount:=4;
		meaning:=pAAssignMeaning11588_AAM11588;
		matchedAssembler:=pAAssemblesto11629_AA11629;
		END;
		OPPS_OPPS:=myrec;
	END;
	FUNCTION pALtOperator11641_ALO11641:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pALtOperator11641_ALO11641:=nil;
		 pALtOperator11641_ALO11641:=myrec;
		END;
	FUNCTION pALeOperator11645_ALO11645:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pALeOperator11645_ALO11645:=nil;
		 pALeOperator11645_ALO11645:=myrec;
		END;
	FUNCTION pAEqOperator11649_AEO11649:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAEqOperator11649_AEO11649:=nil;
		 pAEqOperator11649_AEO11649:=myrec;
		END;
	FUNCTION pATypeid11654_AT11654:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ slt  ilcg.Operation@1aec43}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11654_AT11654:=myrec;
		END;
	FUNCTION pATypeidType11653_ATT11653:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11654_AT11654;
		 pATypeidType11653_ATT11653:=myrec;
		END;
	FUNCTION pATypeid11656_AT11656:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ sle  ilcg.Operation@34d2ab}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11656_AT11656:=myrec;
		END;
	FUNCTION pATypeidType11655_ATT11655:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11656_AT11656;
		 pATypeidType11655_ATT11655:=myrec;
		END;
	FUNCTION pATypeid11658_AT11658:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ seq  ilcg.Operation@17f493}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11658_AT11658:=myrec;
		END;
	FUNCTION pATypeidType11657_ATT11657:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid11658_AT11658;
		 pATypeidType11657_ATT11657:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl11652_AAP11652:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 399;
		myrec^.last:= 401;
		 pAAlternativesPatterndecl11652_AAP11652:=myrec;
		END;
	FUNCTION pATypeid11661_AT11661:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ scmp  ilcg.pattern@1f90a55}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11661_AT11661:=myrec;
		END;
	FUNCTION pATypeid11663_AT11663:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmreg  ilcg.pattern@1d0f57e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11663_AT11663:=myrec;
		END;
	FUNCTION pATypeid11665_AT11665:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmreg  ilcg.pattern@1d0f57e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11665_AT11665:=myrec;
		END;
	FUNCTION pASigned11675_AS11675:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned11675_AS11675:=myrec;
		END;
	FUNCTION pASignedTformat11674_AST11674:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned11675_AS11675;
		 pASignedTformat11674_AST11674:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11673_ATP11673:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype11673_ATP11673:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim11672_APT11672:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim11672_APT11672:=nil;
		 pAPredeclaredtypeTypeprim11672_APT11672:=myrec;
		END;
	FUNCTION pAOptionalsign11678_AO11678:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign11678_AO11678:=nil;
		 pAOptionalsign11678_AO11678:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber11677_AIN11677:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber11677_AIN11677:=myrec;
		END;
	FUNCTION pAArray11676_AA11676:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray11676_AA11676:=nil;
		 pAArray11676_AA11676:=myrec;
		END;
	FUNCTION pAArrayType11671_AAT11671:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,4 );
		 pAArrayType11671_AAT11671:=myrec;
		END;
	FUNCTION pAReference11670_AR11670:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType11671_AAT11671;
		 pAReference11670_AR11670:=myrec;
		END;
	FUNCTION pAReftypeType11669_ART11669:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference11670_AR11670;
		 pAReftypeType11669_ART11669:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc11679_AIL11679:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc11679_AIL11679:=myrec;
		END;
		(*! try to cast to type: ref int32 vector ( 4 )*)
	FUNCTION pARefcastRefval11668_ARR11668:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType11669_ART11669;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc11679_AIL11679;
		 pARefcastRefval11668_ARR11668:=myrec;
		END;
	FUNCTION pAExtendMonadic11681_AEM11681:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpEXTEND;
		 pAExtendMonadic11681_AEM11681:=myrec;
		END;
	FUNCTION pAIdentifierDyadic11683_AID11683:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic11683_AID11683:=myrec;
		END;
	FUNCTION pAIeee32Tformat11689_AI32T11689:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat11689_AI32T11689:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11688_ATP11688:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype11688_ATP11688:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim11687_APT11687:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim11687_APT11687:=nil;
		 pAPredeclaredtypeTypeprim11687_APT11687:=myrec;
		END;
	FUNCTION pAOptionalsign11692_AO11692:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign11692_AO11692:=nil;
		 pAOptionalsign11692_AO11692:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber11691_AIN11691:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber11691_AIN11691:=myrec;
		END;
	FUNCTION pAArray11690_AA11690:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray11690_AA11690:=nil;
		 pAArray11690_AA11690:=myrec;
		END;
	FUNCTION pAArrayType11686_AAT11686:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fieee32 ,4 );
		 pAArrayType11686_AAT11686:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc11696_AIL11696:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc11696_AIL11696:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval11695_AR11695:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc11696_AIL11696;
		 pARefval11695_AR11695:=myrec;
		END;
	FUNCTION pADerefRhs11694_ADR11694:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval11695_AR11695;
		 pADerefRhs11694_ADR11694:=myrec;
		END;
	FUNCTION pARhsValue11693_ARV11693:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs11694_ADR11694;
		 pARhsValue11693_ARV11693:=myrec;
		END;
		(*! try to cast to type: ieee32 vector ( 4 )*)
	FUNCTION pACastRhs11685_ACR11685:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType11686_AAT11686;
		myrec^.arg2:=pARhsValue11693_ARV11693;
		 pACastRhs11685_ACR11685:=myrec;
		END;
	FUNCTION pARhsValue11684_ARV11684:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs11685_ACR11685;
		 pARhsValue11684_ARV11684:=myrec;
		END;
	FUNCTION pAIeee32Tformat11702_AI32T11702:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat11702_AI32T11702:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11701_ATP11701:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype11701_ATP11701:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim11700_APT11700:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim11700_APT11700:=nil;
		 pAPredeclaredtypeTypeprim11700_APT11700:=myrec;
		END;
	FUNCTION pAOptionalsign11705_AO11705:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign11705_AO11705:=nil;
		 pAOptionalsign11705_AO11705:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber11704_AIN11704:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber11704_AIN11704:=myrec;
		END;
	FUNCTION pAArray11703_AA11703:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray11703_AA11703:=nil;
		 pAArray11703_AA11703:=myrec;
		END;
	FUNCTION pAArrayType11699_AAT11699:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fieee32 ,4 );
		 pAArrayType11699_AAT11699:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc11709_AIL11709:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc11709_AIL11709:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval11708_AR11708:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc11709_AIL11709;
		 pARefval11708_AR11708:=myrec;
		END;
	FUNCTION pADerefRhs11707_ADR11707:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval11708_AR11708;
		 pADerefRhs11707_ADR11707:=myrec;
		END;
	FUNCTION pARhsValue11706_ARV11706:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs11707_ADR11707;
		 pARhsValue11706_ARV11706:=myrec;
		END;
		(*! try to cast to type: ieee32 vector ( 4 )*)
	FUNCTION pACastRhs11698_ACR11698:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType11699_AAT11699;
		myrec^.arg2:=pARhsValue11706_ARV11706;
		 pACastRhs11698_ACR11698:=myrec;
		END;
	FUNCTION pARhsValue11697_ARV11697:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs11698_ACR11698;
		 pARhsValue11697_ARV11697:=myrec;
		END;
	FUNCTION pADyadicValue11682_ADV11682:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue11684_ARV11684;
		myrec^.arg2:=pARhsValue11697_ARV11697;
		myrec^.fn:=pAIdentifierDyadic11683_AID11683;
		 pADyadicValue11682_ADV11682:=myrec;
		END;
	FUNCTION pAMonadicValue11680_AMV11680:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pADyadicValue11682_ADV11682;
		myrec^.fn:=pAExtendMonadic11681_AEM11681;
		 pAMonadicValue11680_AMV11680:=myrec;
		END;
	FUNCTION pAAssign11667_AA11667:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pAMonadicValue11680_AMV11680;
		myrec^.dest:=pARefcastRefval11668_ARR11668;
		 pAAssign11667_AA11667:=myrec;
		END;
	FUNCTION pAAssignMeaning11666_AAM11666:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign11667_AA11667;
		 pAAssignMeaning11666_AAM11666:=myrec;
		END;
	FUNCTION pAAssemblypattern11711_AA11711:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'ps  ' );
		pappendp(list,2);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern11711_AA11711:=list;
		END;
	FUNCTION pAAssemblesto11710_AA11710:pprintlist;
	begin
		pAAssemblesto11710_AA11710:=pAAssemblypattern11711_AA11711;
		END;
	FUNCTION pASideeffects11717_AS11717:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects11717_AS11717:=nil;
		 pASideeffects11717_AS11717:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond11718_AUP11718:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond11718_AUP11718:=nil;
		 pAUnconditionalPrecond11718_AUP11718:=myrec;
		END;
	FUNCTION CMPPS_CMPPS:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patxmreg_;
		params^[1]:=patxmreg_;
		params^[0]:=patscmp_;
		paramcount:=4;
		meaning:=pAAssignMeaning11666_AAM11666;
		matchedAssembler:=pAAssemblesto11710_AA11710;
		END;
		CMPPS_CMPPS:=myrec;
	END;
	FUNCTION pATypeid11721_AT11721:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ soperator  ilcg.pattern@51a9e4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11721_AT11721:=myrec;
		END;
	FUNCTION pATypeid11723_AT11723:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmreg  ilcg.pattern@1d0f57e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11723_AT11723:=myrec;
		END;
	FUNCTION pATypeid11725_AT11725:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmreg  ilcg.pattern@1d0f57e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11725_AT11725:=myrec;
		END;
	FUNCTION pAIeee63Tformat11734_AI63T11734:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat11734_AI63T11734:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11733_ATP11733:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype11733_ATP11733:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim11732_APT11732:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim11732_APT11732:=nil;
		 pAPredeclaredtypeTypeprim11732_APT11732:=myrec;
		END;
	FUNCTION pAOptionalsign11737_AO11737:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign11737_AO11737:=nil;
		 pAOptionalsign11737_AO11737:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber11736_AIN11736:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber11736_AIN11736:=myrec;
		END;
	FUNCTION pAArray11735_AA11735:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray11735_AA11735:=nil;
		 pAArray11735_AA11735:=myrec;
		END;
	FUNCTION pAArrayType11731_AAT11731:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fieee64 ,2 );
		 pAArrayType11731_AAT11731:=myrec;
		END;
	FUNCTION pAReference11730_AR11730:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType11731_AAT11731;
		 pAReference11730_AR11730:=myrec;
		END;
	FUNCTION pAReftypeType11729_ART11729:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference11730_AR11730;
		 pAReftypeType11729_ART11729:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc11738_AIL11738:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc11738_AIL11738:=myrec;
		END;
		(*! try to cast to type: ref ieee64 vector ( 2 )*)
	FUNCTION pARefcastRefval11728_ARR11728:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType11729_ART11729;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc11738_AIL11738;
		 pARefcastRefval11728_ARR11728:=myrec;
		END;
	FUNCTION pAIdentifierDyadic11740_AID11740:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic11740_AID11740:=myrec;
		END;
	FUNCTION pAIeee63Tformat11746_AI63T11746:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat11746_AI63T11746:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11745_ATP11745:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype11745_ATP11745:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim11744_APT11744:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim11744_APT11744:=nil;
		 pAPredeclaredtypeTypeprim11744_APT11744:=myrec;
		END;
	FUNCTION pAOptionalsign11749_AO11749:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign11749_AO11749:=nil;
		 pAOptionalsign11749_AO11749:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber11748_AIN11748:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber11748_AIN11748:=myrec;
		END;
	FUNCTION pAArray11747_AA11747:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray11747_AA11747:=nil;
		 pAArray11747_AA11747:=myrec;
		END;
	FUNCTION pAArrayType11743_AAT11743:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fieee64 ,2 );
		 pAArrayType11743_AAT11743:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc11753_AIL11753:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc11753_AIL11753:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval11752_AR11752:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc11753_AIL11753;
		 pARefval11752_AR11752:=myrec;
		END;
	FUNCTION pADerefRhs11751_ADR11751:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval11752_AR11752;
		 pADerefRhs11751_ADR11751:=myrec;
		END;
	FUNCTION pARhsValue11750_ARV11750:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs11751_ADR11751;
		 pARhsValue11750_ARV11750:=myrec;
		END;
		(*! try to cast to type: ieee64 vector ( 2 )*)
	FUNCTION pACastRhs11742_ACR11742:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType11743_AAT11743;
		myrec^.arg2:=pARhsValue11750_ARV11750;
		 pACastRhs11742_ACR11742:=myrec;
		END;
	FUNCTION pARhsValue11741_ARV11741:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs11742_ACR11742;
		 pARhsValue11741_ARV11741:=myrec;
		END;
	FUNCTION pAIeee63Tformat11759_AI63T11759:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat11759_AI63T11759:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11758_ATP11758:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype11758_ATP11758:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim11757_APT11757:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim11757_APT11757:=nil;
		 pAPredeclaredtypeTypeprim11757_APT11757:=myrec;
		END;
	FUNCTION pAOptionalsign11762_AO11762:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign11762_AO11762:=nil;
		 pAOptionalsign11762_AO11762:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber11761_AIN11761:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber11761_AIN11761:=myrec;
		END;
	FUNCTION pAArray11760_AA11760:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray11760_AA11760:=nil;
		 pAArray11760_AA11760:=myrec;
		END;
	FUNCTION pAArrayType11756_AAT11756:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fieee64 ,2 );
		 pAArrayType11756_AAT11756:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc11766_AIL11766:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc11766_AIL11766:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval11765_AR11765:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc11766_AIL11766;
		 pARefval11765_AR11765:=myrec;
		END;
	FUNCTION pADerefRhs11764_ADR11764:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval11765_AR11765;
		 pADerefRhs11764_ADR11764:=myrec;
		END;
	FUNCTION pARhsValue11763_ARV11763:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs11764_ADR11764;
		 pARhsValue11763_ARV11763:=myrec;
		END;
		(*! try to cast to type: ieee64 vector ( 2 )*)
	FUNCTION pACastRhs11755_ACR11755:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType11756_AAT11756;
		myrec^.arg2:=pARhsValue11763_ARV11763;
		 pACastRhs11755_ACR11755:=myrec;
		END;
	FUNCTION pARhsValue11754_ARV11754:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs11755_ACR11755;
		 pARhsValue11754_ARV11754:=myrec;
		END;
	FUNCTION pADyadicValue11739_ADV11739:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue11741_ARV11741;
		myrec^.arg2:=pARhsValue11754_ARV11754;
		myrec^.fn:=pAIdentifierDyadic11740_AID11740;
		 pADyadicValue11739_ADV11739:=myrec;
		END;
	FUNCTION pAAssign11727_AA11727:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue11739_ADV11739;
		myrec^.dest:=pARefcastRefval11728_ARR11728;
		 pAAssign11727_AA11727:=myrec;
		END;
	FUNCTION pAAssignMeaning11726_AAM11726:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign11727_AA11727;
		 pAAssignMeaning11726_AAM11726:=myrec;
		END;
	FUNCTION pAAssemblypattern11768_AA11768:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'pd  ' );
		pappendp(list,2);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern11768_AA11768:=list;
		END;
	FUNCTION pAAssemblesto11767_AA11767:pprintlist;
	begin
		pAAssemblesto11767_AA11767:=pAAssemblypattern11768_AA11768;
		END;
	FUNCTION pASideeffects11774_AS11774:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects11774_AS11774:=nil;
		 pASideeffects11774_AS11774:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond11775_AUP11775:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond11775_AUP11775:=nil;
		 pAUnconditionalPrecond11775_AUP11775:=myrec;
		END;
	FUNCTION OPPD_OPPD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patxmreg_;
		params^[1]:=patxmreg_;
		params^[0]:=patsoperator_;
		paramcount:=4;
		meaning:=pAAssignMeaning11726_AAM11726;
		matchedAssembler:=pAAssemblesto11767_AA11767;
		END;
		OPPD_OPPD:=myrec;
	END;
	FUNCTION pATypeid11778_AT11778:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ nonmultoperator  ilcg.pattern@752144}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11778_AT11778:=myrec;
		END;
	FUNCTION pATypeid11780_AT11780:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11780_AT11780:=myrec;
		END;
	FUNCTION pATypeid11782_AT11782:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11782_AT11782:=myrec;
		END;
	FUNCTION pAInt8Signed11792_AI8S11792:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed11792_AI8S11792:=myrec;
		END;
	FUNCTION pASignedTformat11791_AST11791:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed11792_AI8S11792;
		 pASignedTformat11791_AST11791:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11790_ATP11790:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype11790_ATP11790:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim11789_APT11789:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim11789_APT11789:=nil;
		 pAPredeclaredtypeTypeprim11789_APT11789:=myrec;
		END;
	FUNCTION pAOptionalsign11795_AO11795:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign11795_AO11795:=nil;
		 pAOptionalsign11795_AO11795:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber11794_AIN11794:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber11794_AIN11794:=myrec;
		END;
	FUNCTION pAArray11793_AA11793:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray11793_AA11793:=nil;
		 pAArray11793_AA11793:=myrec;
		END;
	FUNCTION pAArrayType11788_AAT11788:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType11788_AAT11788:=myrec;
		END;
	FUNCTION pAReference11787_AR11787:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType11788_AAT11788;
		 pAReference11787_AR11787:=myrec;
		END;
	FUNCTION pAReftypeType11786_ART11786:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference11787_AR11787;
		 pAReftypeType11786_ART11786:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc11796_AIL11796:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc11796_AIL11796:=myrec;
		END;
		(*! try to cast to type: ref int8 vector ( 8 )*)
	FUNCTION pARefcastRefval11785_ARR11785:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType11786_ART11786;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc11796_AIL11796;
		 pARefcastRefval11785_ARR11785:=myrec;
		END;
	FUNCTION pAIdentifierDyadic11798_AID11798:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic11798_AID11798:=myrec;
		END;
	FUNCTION pAInt8Signed11805_AI8S11805:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed11805_AI8S11805:=myrec;
		END;
	FUNCTION pASignedTformat11804_AST11804:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed11805_AI8S11805;
		 pASignedTformat11804_AST11804:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11803_ATP11803:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype11803_ATP11803:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim11802_APT11802:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim11802_APT11802:=nil;
		 pAPredeclaredtypeTypeprim11802_APT11802:=myrec;
		END;
	FUNCTION pAOptionalsign11808_AO11808:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign11808_AO11808:=nil;
		 pAOptionalsign11808_AO11808:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber11807_AIN11807:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber11807_AIN11807:=myrec;
		END;
	FUNCTION pAArray11806_AA11806:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray11806_AA11806:=nil;
		 pAArray11806_AA11806:=myrec;
		END;
	FUNCTION pAArrayType11801_AAT11801:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType11801_AAT11801:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc11812_AIL11812:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc11812_AIL11812:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval11811_AR11811:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc11812_AIL11812;
		 pARefval11811_AR11811:=myrec;
		END;
	FUNCTION pADerefRhs11810_ADR11810:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval11811_AR11811;
		 pADerefRhs11810_ADR11810:=myrec;
		END;
	FUNCTION pARhsValue11809_ARV11809:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs11810_ADR11810;
		 pARhsValue11809_ARV11809:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs11800_ACR11800:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType11801_AAT11801;
		myrec^.arg2:=pARhsValue11809_ARV11809;
		 pACastRhs11800_ACR11800:=myrec;
		END;
	FUNCTION pARhsValue11799_ARV11799:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs11800_ACR11800;
		 pARhsValue11799_ARV11799:=myrec;
		END;
	FUNCTION pAInt8Signed11819_AI8S11819:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed11819_AI8S11819:=myrec;
		END;
	FUNCTION pASignedTformat11818_AST11818:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed11819_AI8S11819;
		 pASignedTformat11818_AST11818:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11817_ATP11817:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype11817_ATP11817:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim11816_APT11816:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim11816_APT11816:=nil;
		 pAPredeclaredtypeTypeprim11816_APT11816:=myrec;
		END;
	FUNCTION pAOptionalsign11822_AO11822:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign11822_AO11822:=nil;
		 pAOptionalsign11822_AO11822:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber11821_AIN11821:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber11821_AIN11821:=myrec;
		END;
	FUNCTION pAArray11820_AA11820:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray11820_AA11820:=nil;
		 pAArray11820_AA11820:=myrec;
		END;
	FUNCTION pAArrayType11815_AAT11815:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType11815_AAT11815:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc11826_AIL11826:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc11826_AIL11826:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval11825_AR11825:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc11826_AIL11826;
		 pARefval11825_AR11825:=myrec;
		END;
	FUNCTION pADerefRhs11824_ADR11824:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval11825_AR11825;
		 pADerefRhs11824_ADR11824:=myrec;
		END;
	FUNCTION pARhsValue11823_ARV11823:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs11824_ADR11824;
		 pARhsValue11823_ARV11823:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs11814_ACR11814:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType11815_AAT11815;
		myrec^.arg2:=pARhsValue11823_ARV11823;
		 pACastRhs11814_ACR11814:=myrec;
		END;
	FUNCTION pARhsValue11813_ARV11813:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs11814_ACR11814;
		 pARhsValue11813_ARV11813:=myrec;
		END;
	FUNCTION pADyadicValue11797_ADV11797:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue11799_ARV11799;
		myrec^.arg2:=pARhsValue11813_ARV11813;
		myrec^.fn:=pAIdentifierDyadic11798_AID11798;
		 pADyadicValue11797_ADV11797:=myrec;
		END;
	FUNCTION pAAssign11784_AA11784:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue11797_ADV11797;
		myrec^.dest:=pARefcastRefval11785_ARR11785;
		 pAAssign11784_AA11784:=myrec;
		END;
	FUNCTION pAAssignMeaning11783_AAM11783:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign11784_AA11784;
		 pAAssignMeaning11783_AAM11783:=myrec;
		END;
	FUNCTION pAAssemblypattern11828_AA11828:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'p' );
		pappendp(list,0);
		pappends(list,'b  ' );
		pappendp(list,2);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern11828_AA11828:=list;
		END;
	FUNCTION pAAssemblesto11827_AA11827:pprintlist;
	begin
		pAAssemblesto11827_AA11827:=pAAssemblypattern11828_AA11828;
		END;
	FUNCTION pASideeffects11835_AS11835:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects11835_AS11835:=nil;
		 pASideeffects11835_AS11835:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond11836_AUP11836:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond11836_AUP11836:=nil;
		 pAUnconditionalPrecond11836_AUP11836:=myrec;
		END;
	FUNCTION OPPI8m_OPPI8:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patmreg_;
		params^[1]:=patmreg_;
		params^[0]:=patnonmultoperator_;
		paramcount:=4;
		meaning:=pAAssignMeaning11783_AAM11783;
		matchedAssembler:=pAAssemblesto11827_AA11827;
		END;
		OPPI8m_OPPI8:=myrec;
	END;
	FUNCTION pATypeid11839_AT11839:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ nonmultoperator  ilcg.pattern@752144}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11839_AT11839:=myrec;
		END;
	FUNCTION pATypeid11841_AT11841:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11841_AT11841:=myrec;
		END;
	FUNCTION pATypeid11843_AT11843:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11843_AT11843:=myrec;
		END;
	FUNCTION pAInt16Signed11853_AI16S11853:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed11853_AI16S11853:=myrec;
		END;
	FUNCTION pASignedTformat11852_AST11852:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed11853_AI16S11853;
		 pASignedTformat11852_AST11852:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11851_ATP11851:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype11851_ATP11851:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim11850_APT11850:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim11850_APT11850:=nil;
		 pAPredeclaredtypeTypeprim11850_APT11850:=myrec;
		END;
	FUNCTION pAOptionalsign11856_AO11856:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign11856_AO11856:=nil;
		 pAOptionalsign11856_AO11856:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber11855_AIN11855:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber11855_AIN11855:=myrec;
		END;
	FUNCTION pAArray11854_AA11854:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray11854_AA11854:=nil;
		 pAArray11854_AA11854:=myrec;
		END;
	FUNCTION pAArrayType11849_AAT11849:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType11849_AAT11849:=myrec;
		END;
	FUNCTION pAReference11848_AR11848:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType11849_AAT11849;
		 pAReference11848_AR11848:=myrec;
		END;
	FUNCTION pAReftypeType11847_ART11847:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference11848_AR11848;
		 pAReftypeType11847_ART11847:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc11857_AIL11857:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc11857_AIL11857:=myrec;
		END;
		(*! try to cast to type: ref int16 vector ( 4 )*)
	FUNCTION pARefcastRefval11846_ARR11846:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType11847_ART11847;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc11857_AIL11857;
		 pARefcastRefval11846_ARR11846:=myrec;
		END;
	FUNCTION pAIdentifierDyadic11859_AID11859:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic11859_AID11859:=myrec;
		END;
	FUNCTION pAInt16Signed11866_AI16S11866:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed11866_AI16S11866:=myrec;
		END;
	FUNCTION pASignedTformat11865_AST11865:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed11866_AI16S11866;
		 pASignedTformat11865_AST11865:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11864_ATP11864:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype11864_ATP11864:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim11863_APT11863:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim11863_APT11863:=nil;
		 pAPredeclaredtypeTypeprim11863_APT11863:=myrec;
		END;
	FUNCTION pAOptionalsign11869_AO11869:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign11869_AO11869:=nil;
		 pAOptionalsign11869_AO11869:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber11868_AIN11868:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber11868_AIN11868:=myrec;
		END;
	FUNCTION pAArray11867_AA11867:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray11867_AA11867:=nil;
		 pAArray11867_AA11867:=myrec;
		END;
	FUNCTION pAArrayType11862_AAT11862:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType11862_AAT11862:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc11873_AIL11873:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc11873_AIL11873:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval11872_AR11872:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc11873_AIL11873;
		 pARefval11872_AR11872:=myrec;
		END;
	FUNCTION pADerefRhs11871_ADR11871:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval11872_AR11872;
		 pADerefRhs11871_ADR11871:=myrec;
		END;
	FUNCTION pARhsValue11870_ARV11870:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs11871_ADR11871;
		 pARhsValue11870_ARV11870:=myrec;
		END;
		(*! try to cast to type: int16 vector ( 4 )*)
	FUNCTION pACastRhs11861_ACR11861:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType11862_AAT11862;
		myrec^.arg2:=pARhsValue11870_ARV11870;
		 pACastRhs11861_ACR11861:=myrec;
		END;
	FUNCTION pARhsValue11860_ARV11860:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs11861_ACR11861;
		 pARhsValue11860_ARV11860:=myrec;
		END;
	FUNCTION pAInt16Signed11880_AI16S11880:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed11880_AI16S11880:=myrec;
		END;
	FUNCTION pASignedTformat11879_AST11879:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed11880_AI16S11880;
		 pASignedTformat11879_AST11879:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11878_ATP11878:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype11878_ATP11878:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim11877_APT11877:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim11877_APT11877:=nil;
		 pAPredeclaredtypeTypeprim11877_APT11877:=myrec;
		END;
	FUNCTION pAOptionalsign11883_AO11883:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign11883_AO11883:=nil;
		 pAOptionalsign11883_AO11883:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber11882_AIN11882:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber11882_AIN11882:=myrec;
		END;
	FUNCTION pAArray11881_AA11881:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray11881_AA11881:=nil;
		 pAArray11881_AA11881:=myrec;
		END;
	FUNCTION pAArrayType11876_AAT11876:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType11876_AAT11876:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc11887_AIL11887:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc11887_AIL11887:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval11886_AR11886:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc11887_AIL11887;
		 pARefval11886_AR11886:=myrec;
		END;
	FUNCTION pADerefRhs11885_ADR11885:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval11886_AR11886;
		 pADerefRhs11885_ADR11885:=myrec;
		END;
	FUNCTION pARhsValue11884_ARV11884:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs11885_ADR11885;
		 pARhsValue11884_ARV11884:=myrec;
		END;
		(*! try to cast to type: int16 vector ( 4 )*)
	FUNCTION pACastRhs11875_ACR11875:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType11876_AAT11876;
		myrec^.arg2:=pARhsValue11884_ARV11884;
		 pACastRhs11875_ACR11875:=myrec;
		END;
	FUNCTION pARhsValue11874_ARV11874:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs11875_ACR11875;
		 pARhsValue11874_ARV11874:=myrec;
		END;
	FUNCTION pADyadicValue11858_ADV11858:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue11860_ARV11860;
		myrec^.arg2:=pARhsValue11874_ARV11874;
		myrec^.fn:=pAIdentifierDyadic11859_AID11859;
		 pADyadicValue11858_ADV11858:=myrec;
		END;
	FUNCTION pAAssign11845_AA11845:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue11858_ADV11858;
		myrec^.dest:=pARefcastRefval11846_ARR11846;
		 pAAssign11845_AA11845:=myrec;
		END;
	FUNCTION pAAssignMeaning11844_AAM11844:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign11845_AA11845;
		 pAAssignMeaning11844_AAM11844:=myrec;
		END;
	FUNCTION pAAssemblypattern11889_AA11889:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'p' );
		pappendp(list,0);
		pappends(list,'w  ' );
		pappendp(list,2);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern11889_AA11889:=list;
		END;
	FUNCTION pAAssemblesto11888_AA11888:pprintlist;
	begin
		pAAssemblesto11888_AA11888:=pAAssemblypattern11889_AA11889;
		END;
	FUNCTION pASideeffects11896_AS11896:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects11896_AS11896:=nil;
		 pASideeffects11896_AS11896:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond11897_AUP11897:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond11897_AUP11897:=nil;
		 pAUnconditionalPrecond11897_AUP11897:=myrec;
		END;
	FUNCTION OPPI16m_OPPI16:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patmreg_;
		params^[1]:=patmreg_;
		params^[0]:=patnonmultoperator_;
		paramcount:=4;
		meaning:=pAAssignMeaning11844_AAM11844;
		matchedAssembler:=pAAssemblesto11888_AA11888;
		END;
		OPPI16m_OPPI16:=myrec;
	END;
	FUNCTION pATypeid11900_AT11900:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmregi324  ilcg.pattern@1f3305e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11900_AT11900:=myrec;
		END;
	FUNCTION pATypeid11902_AT11902:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmregi324  ilcg.pattern@1f3305e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11902_AT11902:=myrec;
		END;
	FUNCTION pATypeid11904_AT11904:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mcondition  ilcg.pattern@141038c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11904_AT11904:=myrec;
		END;
	FUNCTION pASigned11914_AS11914:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned11914_AS11914:=myrec;
		END;
	FUNCTION pASignedTformat11913_AST11913:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned11914_AS11914;
		 pASignedTformat11913_AST11913:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11912_ATP11912:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype11912_ATP11912:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim11911_APT11911:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim11911_APT11911:=nil;
		 pAPredeclaredtypeTypeprim11911_APT11911:=myrec;
		END;
	FUNCTION pAOptionalsign11917_AO11917:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign11917_AO11917:=nil;
		 pAOptionalsign11917_AO11917:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber11916_AIN11916:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber11916_AIN11916:=myrec;
		END;
	FUNCTION pAArray11915_AA11915:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray11915_AA11915:=nil;
		 pAArray11915_AA11915:=myrec;
		END;
	FUNCTION pAArrayType11910_AAT11910:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,4 );
		 pAArrayType11910_AAT11910:=myrec;
		END;
	FUNCTION pAReference11909_AR11909:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType11910_AAT11910;
		 pAReference11909_AR11909:=myrec;
		END;
	FUNCTION pAReftypeType11908_ART11908:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference11909_AR11909;
		 pAReftypeType11908_ART11908:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc11918_AIL11918:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc11918_AIL11918:=myrec;
		END;
		(*! try to cast to type: ref int32 vector ( 4 )*)
	FUNCTION pARefcastRefval11907_ARR11907:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType11908_ART11908;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc11918_AIL11918;
		 pARefcastRefval11907_ARR11907:=myrec;
		END;
	FUNCTION pAExtendMonadic11920_AEM11920:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpEXTEND;
		 pAExtendMonadic11920_AEM11920:=myrec;
		END;
	FUNCTION pAInt8Signed11927_AI8S11927:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed11927_AI8S11927:=myrec;
		END;
	FUNCTION pASignedTformat11926_AST11926:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed11927_AI8S11927;
		 pASignedTformat11926_AST11926:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11925_ATP11925:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype11925_ATP11925:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim11924_APT11924:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim11924_APT11924:=nil;
		 pAPredeclaredtypeTypeprim11924_APT11924:=myrec;
		END;
	FUNCTION pAOptionalsign11930_AO11930:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign11930_AO11930:=nil;
		 pAOptionalsign11930_AO11930:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber11929_AIN11929:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber11929_AIN11929:=myrec;
		END;
	FUNCTION pAArray11928_AA11928:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray11928_AA11928:=nil;
		 pAArray11928_AA11928:=myrec;
		END;
	FUNCTION pAArrayType11923_AAT11923:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,4 );
		 pAArrayType11923_AAT11923:=myrec;
		END;
	FUNCTION pAIdentifierDyadic11932_AID11932:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdentifierDyadic11932_AID11932:=myrec;
		END;
	FUNCTION pASigned11939_AS11939:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned11939_AS11939:=myrec;
		END;
	FUNCTION pASignedTformat11938_AST11938:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned11939_AS11939;
		 pASignedTformat11938_AST11938:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11937_ATP11937:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype11937_ATP11937:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim11936_APT11936:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim11936_APT11936:=nil;
		 pAPredeclaredtypeTypeprim11936_APT11936:=myrec;
		END;
	FUNCTION pAOptionalsign11942_AO11942:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign11942_AO11942:=nil;
		 pAOptionalsign11942_AO11942:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber11941_AIN11941:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber11941_AIN11941:=myrec;
		END;
	FUNCTION pAArray11940_AA11940:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray11940_AA11940:=nil;
		 pAArray11940_AA11940:=myrec;
		END;
	FUNCTION pAArrayType11935_AAT11935:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,4 );
		 pAArrayType11935_AAT11935:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc11946_AIL11946:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc11946_AIL11946:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval11945_AR11945:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc11946_AIL11946;
		 pARefval11945_AR11945:=myrec;
		END;
	FUNCTION pADerefRhs11944_ADR11944:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval11945_AR11945;
		 pADerefRhs11944_ADR11944:=myrec;
		END;
	FUNCTION pARhsValue11943_ARV11943:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs11944_ADR11944;
		 pARhsValue11943_ARV11943:=myrec;
		END;
		(*! try to cast to type: int32 vector ( 4 )*)
	FUNCTION pACastRhs11934_ACR11934:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType11935_AAT11935;
		myrec^.arg2:=pARhsValue11943_ARV11943;
		 pACastRhs11934_ACR11934:=myrec;
		END;
	FUNCTION pARhsValue11933_ARV11933:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs11934_ACR11934;
		 pARhsValue11933_ARV11933:=myrec;
		END;
	FUNCTION pASigned11953_AS11953:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned11953_AS11953:=myrec;
		END;
	FUNCTION pASignedTformat11952_AST11952:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned11953_AS11953;
		 pASignedTformat11952_AST11952:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11951_ATP11951:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype11951_ATP11951:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim11950_APT11950:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim11950_APT11950:=nil;
		 pAPredeclaredtypeTypeprim11950_APT11950:=myrec;
		END;
	FUNCTION pAOptionalsign11956_AO11956:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign11956_AO11956:=nil;
		 pAOptionalsign11956_AO11956:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber11955_AIN11955:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber11955_AIN11955:=myrec;
		END;
	FUNCTION pAArray11954_AA11954:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray11954_AA11954:=nil;
		 pAArray11954_AA11954:=myrec;
		END;
	FUNCTION pAArrayType11949_AAT11949:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,4 );
		 pAArrayType11949_AAT11949:=myrec;
		END;
		(*! Match ma *)
	FUNCTION pAIdLoc11960_AIL11960:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc11960_AIL11960:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval11959_AR11959:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc11960_AIL11960;
		 pARefval11959_AR11959:=myrec;
		END;
	FUNCTION pADerefRhs11958_ADR11958:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval11959_AR11959;
		 pADerefRhs11958_ADR11958:=myrec;
		END;
	FUNCTION pARhsValue11957_ARV11957:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs11958_ADR11958;
		 pARhsValue11957_ARV11957:=myrec;
		END;
		(*! try to cast to type: int32 vector ( 4 )*)
	FUNCTION pACastRhs11948_ACR11948:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType11949_AAT11949;
		myrec^.arg2:=pARhsValue11957_ARV11957;
		 pACastRhs11948_ACR11948:=myrec;
		END;
	FUNCTION pARhsValue11947_ARV11947:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs11948_ACR11948;
		 pARhsValue11947_ARV11947:=myrec;
		END;
	FUNCTION pADyadicValue11931_ADV11931:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue11933_ARV11933;
		myrec^.arg2:=pARhsValue11947_ARV11947;
		myrec^.fn:=pAIdentifierDyadic11932_AID11932;
		 pADyadicValue11931_ADV11931:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 4 )*)
	FUNCTION pACastRhs11922_ACR11922:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType11923_AAT11923;
		myrec^.arg2:=pADyadicValue11931_ADV11931;
		 pACastRhs11922_ACR11922:=myrec;
		END;
	FUNCTION pARhsValue11921_ARV11921:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs11922_ACR11922;
		 pARhsValue11921_ARV11921:=myrec;
		END;
	FUNCTION pAMonadicValue11919_AMV11919:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue11921_ARV11921;
		myrec^.fn:=pAExtendMonadic11920_AEM11920;
		 pAMonadicValue11919_AMV11919:=myrec;
		END;
	FUNCTION pAAssign11906_AA11906:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pAMonadicValue11919_AMV11919;
		myrec^.dest:=pARefcastRefval11907_ARR11907;
		 pAAssign11906_AA11906:=myrec;
		END;
	FUNCTION pAAssignMeaning11905_AAM11905:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign11906_AA11906;
		 pAAssignMeaning11905_AAM11905:=myrec;
		END;
	FUNCTION pAAssemblypattern11962_AA11962:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'pcmp' );
		pappendp(list,2);
		pappends(list,'d ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern11962_AA11962:=list;
		END;
	FUNCTION pAAssemblesto11961_AA11961:pprintlist;
	begin
		pAAssemblesto11961_AA11961:=pAAssemblypattern11962_AA11962;
		END;
	FUNCTION pASideeffects11969_AS11969:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects11969_AS11969:=nil;
		 pASideeffects11969_AS11969:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond11970_AUP11970:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond11970_AUP11970:=nil;
		 pAUnconditionalPrecond11970_AUP11970:=myrec;
		END;
	FUNCTION XCMPPD_XCMPPD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patxmregi324_324;
		params^[2]:=patmcondition_;
		params^[1]:=patxmregi324_324;
		paramcount:=4;
		meaning:=pAAssignMeaning11905_AAM11905;
		matchedAssembler:=pAAssemblesto11961_AA11961;
		END;
		XCMPPD_XCMPPD:=myrec;
	END;
	FUNCTION pATypeid11973_AT11973:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmreg  ilcg.pattern@1d0f57e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11973_AT11973:=myrec;
		END;
	FUNCTION pATypeid11975_AT11975:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmreg  ilcg.pattern@1d0f57e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11975_AT11975:=myrec;
		END;
	FUNCTION pATypeid11977_AT11977:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mcondition  ilcg.pattern@141038c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid11977_AT11977:=myrec;
		END;
	FUNCTION pASigned11987_AS11987:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned11987_AS11987:=myrec;
		END;
	FUNCTION pASignedTformat11986_AST11986:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned11987_AS11987;
		 pASignedTformat11986_AST11986:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11985_ATP11985:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype11985_ATP11985:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim11984_APT11984:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim11984_APT11984:=nil;
		 pAPredeclaredtypeTypeprim11984_APT11984:=myrec;
		END;
	FUNCTION pAOptionalsign11990_AO11990:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign11990_AO11990:=nil;
		 pAOptionalsign11990_AO11990:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber11989_AIN11989:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber11989_AIN11989:=myrec;
		END;
	FUNCTION pAArray11988_AA11988:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray11988_AA11988:=nil;
		 pAArray11988_AA11988:=myrec;
		END;
	FUNCTION pAArrayType11983_AAT11983:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,4 );
		 pAArrayType11983_AAT11983:=myrec;
		END;
	FUNCTION pAReference11982_AR11982:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType11983_AAT11983;
		 pAReference11982_AR11982:=myrec;
		END;
	FUNCTION pAReftypeType11981_ART11981:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference11982_AR11982;
		 pAReftypeType11981_ART11981:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc11991_AIL11991:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc11991_AIL11991:=myrec;
		END;
		(*! try to cast to type: ref int32 vector ( 4 )*)
	FUNCTION pARefcastRefval11980_ARR11980:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType11981_ART11981;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc11991_AIL11991;
		 pARefcastRefval11980_ARR11980:=myrec;
		END;
	FUNCTION pASigned11998_AS11998:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned11998_AS11998:=myrec;
		END;
	FUNCTION pASignedTformat11997_AST11997:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned11998_AS11998;
		 pASignedTformat11997_AST11997:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype11996_ATP11996:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype11996_ATP11996:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim11995_APT11995:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim11995_APT11995:=nil;
		 pAPredeclaredtypeTypeprim11995_APT11995:=myrec;
		END;
	FUNCTION pAOptionalsign12001_AO12001:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12001_AO12001:=nil;
		 pAOptionalsign12001_AO12001:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12000_AIN12000:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber12000_AIN12000:=myrec;
		END;
	FUNCTION pAArray11999_AA11999:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray11999_AA11999:=nil;
		 pAArray11999_AA11999:=myrec;
		END;
	FUNCTION pAArrayType11994_AAT11994:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,4 );
		 pAArrayType11994_AAT11994:=myrec;
		END;
	FUNCTION pAExtendMonadic12003_AEM12003:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpEXTEND;
		 pAExtendMonadic12003_AEM12003:=myrec;
		END;
	FUNCTION pAInt8Signed12010_AI8S12010:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed12010_AI8S12010:=myrec;
		END;
	FUNCTION pASignedTformat12009_AST12009:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed12010_AI8S12010;
		 pASignedTformat12009_AST12009:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12008_ATP12008:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype12008_ATP12008:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12007_APT12007:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12007_APT12007:=nil;
		 pAPredeclaredtypeTypeprim12007_APT12007:=myrec;
		END;
	FUNCTION pAOptionalsign12013_AO12013:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12013_AO12013:=nil;
		 pAOptionalsign12013_AO12013:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12012_AIN12012:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber12012_AIN12012:=myrec;
		END;
	FUNCTION pAArray12011_AA12011:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12011_AA12011:=nil;
		 pAArray12011_AA12011:=myrec;
		END;
	FUNCTION pAArrayType12006_AAT12006:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,4 );
		 pAArrayType12006_AAT12006:=myrec;
		END;
	FUNCTION pALtDyadic12015_ALD12015:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcplt;
		 pALtDyadic12015_ALD12015:=myrec;
		END;
	FUNCTION pASigned12022_AS12022:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned12022_AS12022:=myrec;
		END;
	FUNCTION pASignedTformat12021_AST12021:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned12022_AS12022;
		 pASignedTformat12021_AST12021:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12020_ATP12020:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype12020_ATP12020:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12019_APT12019:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12019_APT12019:=nil;
		 pAPredeclaredtypeTypeprim12019_APT12019:=myrec;
		END;
	FUNCTION pAOptionalsign12025_AO12025:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12025_AO12025:=nil;
		 pAOptionalsign12025_AO12025:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12024_AIN12024:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber12024_AIN12024:=myrec;
		END;
	FUNCTION pAArray12023_AA12023:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12023_AA12023:=nil;
		 pAArray12023_AA12023:=myrec;
		END;
	FUNCTION pAArrayType12018_AAT12018:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,4 );
		 pAArrayType12018_AAT12018:=myrec;
		END;
		(*! Match ma *)
	FUNCTION pAIdLoc12029_AIL12029:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc12029_AIL12029:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12028_AR12028:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12029_AIL12029;
		 pARefval12028_AR12028:=myrec;
		END;
	FUNCTION pADerefRhs12027_ADR12027:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval12028_AR12028;
		 pADerefRhs12027_ADR12027:=myrec;
		END;
	FUNCTION pARhsValue12026_ARV12026:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs12027_ADR12027;
		 pARhsValue12026_ARV12026:=myrec;
		END;
		(*! try to cast to type: int32 vector ( 4 )*)
	FUNCTION pACastRhs12017_ACR12017:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType12018_AAT12018;
		myrec^.arg2:=pARhsValue12026_ARV12026;
		 pACastRhs12017_ACR12017:=myrec;
		END;
	FUNCTION pARhsValue12016_ARV12016:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs12017_ACR12017;
		 pARhsValue12016_ARV12016:=myrec;
		END;
	FUNCTION pASigned12036_AS12036:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned12036_AS12036:=myrec;
		END;
	FUNCTION pASignedTformat12035_AST12035:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned12036_AS12036;
		 pASignedTformat12035_AST12035:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12034_ATP12034:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype12034_ATP12034:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12033_APT12033:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12033_APT12033:=nil;
		 pAPredeclaredtypeTypeprim12033_APT12033:=myrec;
		END;
	FUNCTION pAOptionalsign12039_AO12039:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12039_AO12039:=nil;
		 pAOptionalsign12039_AO12039:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12038_AIN12038:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber12038_AIN12038:=myrec;
		END;
	FUNCTION pAArray12037_AA12037:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12037_AA12037:=nil;
		 pAArray12037_AA12037:=myrec;
		END;
	FUNCTION pAArrayType12032_AAT12032:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,4 );
		 pAArrayType12032_AAT12032:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc12043_AIL12043:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc12043_AIL12043:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12042_AR12042:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12043_AIL12043;
		 pARefval12042_AR12042:=myrec;
		END;
	FUNCTION pADerefRhs12041_ADR12041:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval12042_AR12042;
		 pADerefRhs12041_ADR12041:=myrec;
		END;
	FUNCTION pARhsValue12040_ARV12040:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs12041_ADR12041;
		 pARhsValue12040_ARV12040:=myrec;
		END;
		(*! try to cast to type: int32 vector ( 4 )*)
	FUNCTION pACastRhs12031_ACR12031:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType12032_AAT12032;
		myrec^.arg2:=pARhsValue12040_ARV12040;
		 pACastRhs12031_ACR12031:=myrec;
		END;
	FUNCTION pARhsValue12030_ARV12030:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs12031_ACR12031;
		 pARhsValue12030_ARV12030:=myrec;
		END;
	FUNCTION pADyadicValue12014_ADV12014:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue12016_ARV12016;
		myrec^.arg2:=pARhsValue12030_ARV12030;
		myrec^.fn:=pALtDyadic12015_ALD12015;
		 pADyadicValue12014_ADV12014:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 4 )*)
	FUNCTION pACastRhs12005_ACR12005:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType12006_AAT12006;
		myrec^.arg2:=pADyadicValue12014_ADV12014;
		 pACastRhs12005_ACR12005:=myrec;
		END;
	FUNCTION pARhsValue12004_ARV12004:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs12005_ACR12005;
		 pARhsValue12004_ARV12004:=myrec;
		END;
	FUNCTION pAMonadicValue12002_AMV12002:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue12004_ARV12004;
		myrec^.fn:=pAExtendMonadic12003_AEM12003;
		 pAMonadicValue12002_AMV12002:=myrec;
		END;
		(*! try to cast to type: int32 vector ( 4 )*)
	FUNCTION pACastRhs11993_ACR11993:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType11994_AAT11994;
		myrec^.arg2:=pAMonadicValue12002_AMV12002;
		 pACastRhs11993_ACR11993:=myrec;
		END;
	FUNCTION pARhsValue11992_ARV11992:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs11993_ACR11993;
		 pARhsValue11992_ARV11992:=myrec;
		END;
	FUNCTION pAAssign11979_AA11979:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue11992_ARV11992;
		myrec^.dest:=pARefcastRefval11980_ARR11980;
		 pAAssign11979_AA11979:=myrec;
		END;
	FUNCTION pAAssignMeaning11978_AAM11978:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign11979_AA11979;
		 pAAssignMeaning11978_AAM11978:=myrec;
		END;
	FUNCTION pAAssemblypattern12045_AA12045:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'pcmpgtd ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern12045_AA12045:=list;
		END;
	FUNCTION pAAssemblesto12044_AA12044:pprintlist;
	begin
		pAAssemblesto12044_AA12044:=pAAssemblypattern12045_AA12045;
		END;
	FUNCTION pASideeffects12050_AS12050:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects12050_AS12050:=nil;
		 pASideeffects12050_AS12050:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond12051_AUP12051:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond12051_AUP12051:=nil;
		 pAUnconditionalPrecond12051_AUP12051:=myrec;
		END;
	FUNCTION XCMPPDR_XCMPPDR:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patxmreg_;
		params^[2]:=patmcondition_;
		params^[1]:=patxmreg_;
		paramcount:=4;
		meaning:=pAAssignMeaning11978_AAM11978;
		matchedAssembler:=pAAssemblesto12044_AA12044;
		END;
		XCMPPDR_XCMPPDR:=myrec;
	END;
	FUNCTION pATypeid12054_AT12054:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ coperator  ilcg.pattern@5144d5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12054_AT12054:=myrec;
		END;
	FUNCTION pATypeid12056_AT12056:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12056_AT12056:=myrec;
		END;
	FUNCTION pATypeid12058_AT12058:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12058_AT12058:=myrec;
		END;
	FUNCTION pAInt8Signed12068_AI8S12068:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed12068_AI8S12068:=myrec;
		END;
	FUNCTION pASignedTformat12067_AST12067:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed12068_AI8S12068;
		 pASignedTformat12067_AST12067:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12066_ATP12066:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype12066_ATP12066:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12065_APT12065:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12065_APT12065:=nil;
		 pAPredeclaredtypeTypeprim12065_APT12065:=myrec;
		END;
	FUNCTION pAOptionalsign12071_AO12071:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12071_AO12071:=nil;
		 pAOptionalsign12071_AO12071:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12070_AIN12070:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber12070_AIN12070:=myrec;
		END;
	FUNCTION pAArray12069_AA12069:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12069_AA12069:=nil;
		 pAArray12069_AA12069:=myrec;
		END;
	FUNCTION pAArrayType12064_AAT12064:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType12064_AAT12064:=myrec;
		END;
	FUNCTION pAReference12063_AR12063:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType12064_AAT12064;
		 pAReference12063_AR12063:=myrec;
		END;
	FUNCTION pAReftypeType12062_ART12062:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference12063_AR12063;
		 pAReftypeType12062_ART12062:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc12072_AIL12072:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc12072_AIL12072:=myrec;
		END;
		(*! try to cast to type: ref int8 vector ( 8 )*)
	FUNCTION pARefcastRefval12061_ARR12061:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType12062_ART12062;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc12072_AIL12072;
		 pARefcastRefval12061_ARR12061:=myrec;
		END;
	FUNCTION pAIdentifierDyadic12074_AID12074:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic12074_AID12074:=myrec;
		END;
	FUNCTION pAInt8Signed12081_AI8S12081:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed12081_AI8S12081:=myrec;
		END;
	FUNCTION pASignedTformat12080_AST12080:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed12081_AI8S12081;
		 pASignedTformat12080_AST12080:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12079_ATP12079:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype12079_ATP12079:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12078_APT12078:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12078_APT12078:=nil;
		 pAPredeclaredtypeTypeprim12078_APT12078:=myrec;
		END;
	FUNCTION pAOptionalsign12084_AO12084:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12084_AO12084:=nil;
		 pAOptionalsign12084_AO12084:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12083_AIN12083:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber12083_AIN12083:=myrec;
		END;
	FUNCTION pAArray12082_AA12082:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12082_AA12082:=nil;
		 pAArray12082_AA12082:=myrec;
		END;
	FUNCTION pAArrayType12077_AAT12077:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType12077_AAT12077:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc12088_AIL12088:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc12088_AIL12088:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12087_AR12087:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12088_AIL12088;
		 pARefval12087_AR12087:=myrec;
		END;
	FUNCTION pADerefRhs12086_ADR12086:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval12087_AR12087;
		 pADerefRhs12086_ADR12086:=myrec;
		END;
	FUNCTION pARhsValue12085_ARV12085:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs12086_ADR12086;
		 pARhsValue12085_ARV12085:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs12076_ACR12076:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType12077_AAT12077;
		myrec^.arg2:=pARhsValue12085_ARV12085;
		 pACastRhs12076_ACR12076:=myrec;
		END;
	FUNCTION pARhsValue12075_ARV12075:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs12076_ACR12076;
		 pARhsValue12075_ARV12075:=myrec;
		END;
	FUNCTION pAInt8Signed12095_AI8S12095:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed12095_AI8S12095:=myrec;
		END;
	FUNCTION pASignedTformat12094_AST12094:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed12095_AI8S12095;
		 pASignedTformat12094_AST12094:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12093_ATP12093:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype12093_ATP12093:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12092_APT12092:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12092_APT12092:=nil;
		 pAPredeclaredtypeTypeprim12092_APT12092:=myrec;
		END;
	FUNCTION pAOptionalsign12098_AO12098:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12098_AO12098:=nil;
		 pAOptionalsign12098_AO12098:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12097_AIN12097:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber12097_AIN12097:=myrec;
		END;
	FUNCTION pAArray12096_AA12096:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12096_AA12096:=nil;
		 pAArray12096_AA12096:=myrec;
		END;
	FUNCTION pAArrayType12091_AAT12091:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType12091_AAT12091:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc12102_AIL12102:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc12102_AIL12102:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12101_AR12101:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12102_AIL12102;
		 pARefval12101_AR12101:=myrec;
		END;
	FUNCTION pADerefRhs12100_ADR12100:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval12101_AR12101;
		 pADerefRhs12100_ADR12100:=myrec;
		END;
	FUNCTION pARhsValue12099_ARV12099:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs12100_ADR12100;
		 pARhsValue12099_ARV12099:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs12090_ACR12090:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType12091_AAT12091;
		myrec^.arg2:=pARhsValue12099_ARV12099;
		 pACastRhs12090_ACR12090:=myrec;
		END;
	FUNCTION pARhsValue12089_ARV12089:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs12090_ACR12090;
		 pARhsValue12089_ARV12089:=myrec;
		END;
	FUNCTION pADyadicValue12073_ADV12073:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue12075_ARV12075;
		myrec^.arg2:=pARhsValue12089_ARV12089;
		myrec^.fn:=pAIdentifierDyadic12074_AID12074;
		 pADyadicValue12073_ADV12073:=myrec;
		END;
	FUNCTION pAAssign12060_AA12060:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue12073_ADV12073;
		myrec^.dest:=pARefcastRefval12061_ARR12061;
		 pAAssign12060_AA12060:=myrec;
		END;
	FUNCTION pAAssignMeaning12059_AAM12059:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign12060_AA12060;
		 pAAssignMeaning12059_AAM12059:=myrec;
		END;
	FUNCTION pAAssemblypattern12104_AA12104:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'p' );
		pappendp(list,0);
		pappends(list,'sb  ' );
		pappendp(list,2);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern12104_AA12104:=list;
		END;
	FUNCTION pAAssemblesto12103_AA12103:pprintlist;
	begin
		pAAssemblesto12103_AA12103:=pAAssemblypattern12104_AA12104;
		END;
	FUNCTION pASideeffects12111_AS12111:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects12111_AS12111:=nil;
		 pASideeffects12111_AS12111:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond12112_AUP12112:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond12112_AUP12112:=nil;
		 pAUnconditionalPrecond12112_AUP12112:=myrec;
		END;
	FUNCTION OPPI8msc_OPPI8:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patmreg_;
		params^[1]:=patmreg_;
		params^[0]:=patcoperator_;
		paramcount:=4;
		meaning:=pAAssignMeaning12059_AAM12059;
		matchedAssembler:=pAAssemblesto12103_AA12103;
		END;
		OPPI8msc_OPPI8:=myrec;
	END;
	FUNCTION pATypeid12115_AT12115:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ coperator  ilcg.pattern@5144d5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12115_AT12115:=myrec;
		END;
	FUNCTION pATypeid12117_AT12117:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12117_AT12117:=myrec;
		END;
	FUNCTION pATypeid12119_AT12119:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12119_AT12119:=myrec;
		END;
	FUNCTION pAInt16Signed12129_AI16S12129:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed12129_AI16S12129:=myrec;
		END;
	FUNCTION pASignedTformat12128_AST12128:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed12129_AI16S12129;
		 pASignedTformat12128_AST12128:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12127_ATP12127:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype12127_ATP12127:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12126_APT12126:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12126_APT12126:=nil;
		 pAPredeclaredtypeTypeprim12126_APT12126:=myrec;
		END;
	FUNCTION pAOptionalsign12132_AO12132:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12132_AO12132:=nil;
		 pAOptionalsign12132_AO12132:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12131_AIN12131:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber12131_AIN12131:=myrec;
		END;
	FUNCTION pAArray12130_AA12130:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12130_AA12130:=nil;
		 pAArray12130_AA12130:=myrec;
		END;
	FUNCTION pAArrayType12125_AAT12125:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType12125_AAT12125:=myrec;
		END;
	FUNCTION pAReference12124_AR12124:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType12125_AAT12125;
		 pAReference12124_AR12124:=myrec;
		END;
	FUNCTION pAReftypeType12123_ART12123:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference12124_AR12124;
		 pAReftypeType12123_ART12123:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc12133_AIL12133:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc12133_AIL12133:=myrec;
		END;
		(*! try to cast to type: ref int16 vector ( 4 )*)
	FUNCTION pARefcastRefval12122_ARR12122:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType12123_ART12123;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc12133_AIL12133;
		 pARefcastRefval12122_ARR12122:=myrec;
		END;
	FUNCTION pAIdentifierDyadic12135_AID12135:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic12135_AID12135:=myrec;
		END;
	FUNCTION pAInt16Signed12142_AI16S12142:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed12142_AI16S12142:=myrec;
		END;
	FUNCTION pASignedTformat12141_AST12141:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed12142_AI16S12142;
		 pASignedTformat12141_AST12141:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12140_ATP12140:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype12140_ATP12140:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12139_APT12139:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12139_APT12139:=nil;
		 pAPredeclaredtypeTypeprim12139_APT12139:=myrec;
		END;
	FUNCTION pAOptionalsign12145_AO12145:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12145_AO12145:=nil;
		 pAOptionalsign12145_AO12145:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12144_AIN12144:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber12144_AIN12144:=myrec;
		END;
	FUNCTION pAArray12143_AA12143:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12143_AA12143:=nil;
		 pAArray12143_AA12143:=myrec;
		END;
	FUNCTION pAArrayType12138_AAT12138:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType12138_AAT12138:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc12149_AIL12149:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc12149_AIL12149:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12148_AR12148:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12149_AIL12149;
		 pARefval12148_AR12148:=myrec;
		END;
	FUNCTION pADerefRhs12147_ADR12147:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval12148_AR12148;
		 pADerefRhs12147_ADR12147:=myrec;
		END;
	FUNCTION pARhsValue12146_ARV12146:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs12147_ADR12147;
		 pARhsValue12146_ARV12146:=myrec;
		END;
		(*! try to cast to type: int16 vector ( 4 )*)
	FUNCTION pACastRhs12137_ACR12137:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType12138_AAT12138;
		myrec^.arg2:=pARhsValue12146_ARV12146;
		 pACastRhs12137_ACR12137:=myrec;
		END;
	FUNCTION pARhsValue12136_ARV12136:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs12137_ACR12137;
		 pARhsValue12136_ARV12136:=myrec;
		END;
	FUNCTION pAInt16Signed12156_AI16S12156:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed12156_AI16S12156:=myrec;
		END;
	FUNCTION pASignedTformat12155_AST12155:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed12156_AI16S12156;
		 pASignedTformat12155_AST12155:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12154_ATP12154:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype12154_ATP12154:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12153_APT12153:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12153_APT12153:=nil;
		 pAPredeclaredtypeTypeprim12153_APT12153:=myrec;
		END;
	FUNCTION pAOptionalsign12159_AO12159:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12159_AO12159:=nil;
		 pAOptionalsign12159_AO12159:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12158_AIN12158:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber12158_AIN12158:=myrec;
		END;
	FUNCTION pAArray12157_AA12157:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12157_AA12157:=nil;
		 pAArray12157_AA12157:=myrec;
		END;
	FUNCTION pAArrayType12152_AAT12152:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType12152_AAT12152:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc12163_AIL12163:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc12163_AIL12163:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12162_AR12162:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12163_AIL12163;
		 pARefval12162_AR12162:=myrec;
		END;
	FUNCTION pADerefRhs12161_ADR12161:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval12162_AR12162;
		 pADerefRhs12161_ADR12161:=myrec;
		END;
	FUNCTION pARhsValue12160_ARV12160:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs12161_ADR12161;
		 pARhsValue12160_ARV12160:=myrec;
		END;
		(*! try to cast to type: int16 vector ( 4 )*)
	FUNCTION pACastRhs12151_ACR12151:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType12152_AAT12152;
		myrec^.arg2:=pARhsValue12160_ARV12160;
		 pACastRhs12151_ACR12151:=myrec;
		END;
	FUNCTION pARhsValue12150_ARV12150:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs12151_ACR12151;
		 pARhsValue12150_ARV12150:=myrec;
		END;
	FUNCTION pADyadicValue12134_ADV12134:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue12136_ARV12136;
		myrec^.arg2:=pARhsValue12150_ARV12150;
		myrec^.fn:=pAIdentifierDyadic12135_AID12135;
		 pADyadicValue12134_ADV12134:=myrec;
		END;
	FUNCTION pAAssign12121_AA12121:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue12134_ADV12134;
		myrec^.dest:=pARefcastRefval12122_ARR12122;
		 pAAssign12121_AA12121:=myrec;
		END;
	FUNCTION pAAssignMeaning12120_AAM12120:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign12121_AA12121;
		 pAAssignMeaning12120_AAM12120:=myrec;
		END;
	FUNCTION pAAssemblypattern12165_AA12165:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'p' );
		pappendp(list,0);
		pappends(list,'sw  ' );
		pappendp(list,2);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern12165_AA12165:=list;
		END;
	FUNCTION pAAssemblesto12164_AA12164:pprintlist;
	begin
		pAAssemblesto12164_AA12164:=pAAssemblypattern12165_AA12165;
		END;
	FUNCTION pASideeffects12172_AS12172:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects12172_AS12172:=nil;
		 pASideeffects12172_AS12172:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond12173_AUP12173:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond12173_AUP12173:=nil;
		 pAUnconditionalPrecond12173_AUP12173:=myrec;
		END;
	FUNCTION OPPI16msc_OPPI16:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patmreg_;
		params^[1]:=patmreg_;
		params^[0]:=patcoperator_;
		paramcount:=4;
		meaning:=pAAssignMeaning12120_AAM12120;
		matchedAssembler:=pAAssemblesto12164_AA12164;
		END;
		OPPI16msc_OPPI16:=myrec;
	END;
	FUNCTION pATypeid12176_AT12176:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ coperator  ilcg.pattern@5144d5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12176_AT12176:=myrec;
		END;
	FUNCTION pATypeid12178_AT12178:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12178_AT12178:=myrec;
		END;
	FUNCTION pATypeid12180_AT12180:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12180_AT12180:=myrec;
		END;
	FUNCTION pAUint8Unsigned12190_AU8U12190:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned12190_AU8U12190:=myrec;
		END;
	FUNCTION pAUnsignedTformat12189_AUT12189:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned12190_AU8U12190;
		 pAUnsignedTformat12189_AUT12189:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12188_ATP12188:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype12188_ATP12188:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12187_APT12187:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12187_APT12187:=nil;
		 pAPredeclaredtypeTypeprim12187_APT12187:=myrec;
		END;
	FUNCTION pAOptionalsign12193_AO12193:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12193_AO12193:=nil;
		 pAOptionalsign12193_AO12193:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12192_AIN12192:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber12192_AIN12192:=myrec;
		END;
	FUNCTION pAArray12191_AA12191:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12191_AA12191:=nil;
		 pAArray12191_AA12191:=myrec;
		END;
	FUNCTION pAArrayType12186_AAT12186:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType12186_AAT12186:=myrec;
		END;
	FUNCTION pAReference12185_AR12185:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType12186_AAT12186;
		 pAReference12185_AR12185:=myrec;
		END;
	FUNCTION pAReftypeType12184_ART12184:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference12185_AR12185;
		 pAReftypeType12184_ART12184:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc12194_AIL12194:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc12194_AIL12194:=myrec;
		END;
		(*! try to cast to type: ref uint8 vector ( 8 )*)
	FUNCTION pARefcastRefval12183_ARR12183:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType12184_ART12184;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc12194_AIL12194;
		 pARefcastRefval12183_ARR12183:=myrec;
		END;
	FUNCTION pAIdentifierDyadic12196_AID12196:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic12196_AID12196:=myrec;
		END;
	FUNCTION pAUint8Unsigned12203_AU8U12203:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned12203_AU8U12203:=myrec;
		END;
	FUNCTION pAUnsignedTformat12202_AUT12202:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned12203_AU8U12203;
		 pAUnsignedTformat12202_AUT12202:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12201_ATP12201:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype12201_ATP12201:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12200_APT12200:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12200_APT12200:=nil;
		 pAPredeclaredtypeTypeprim12200_APT12200:=myrec;
		END;
	FUNCTION pAOptionalsign12206_AO12206:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12206_AO12206:=nil;
		 pAOptionalsign12206_AO12206:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12205_AIN12205:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber12205_AIN12205:=myrec;
		END;
	FUNCTION pAArray12204_AA12204:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12204_AA12204:=nil;
		 pAArray12204_AA12204:=myrec;
		END;
	FUNCTION pAArrayType12199_AAT12199:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType12199_AAT12199:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc12210_AIL12210:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc12210_AIL12210:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12209_AR12209:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12210_AIL12210;
		 pARefval12209_AR12209:=myrec;
		END;
	FUNCTION pADerefRhs12208_ADR12208:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval12209_AR12209;
		 pADerefRhs12208_ADR12208:=myrec;
		END;
	FUNCTION pARhsValue12207_ARV12207:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs12208_ADR12208;
		 pARhsValue12207_ARV12207:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs12198_ACR12198:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType12199_AAT12199;
		myrec^.arg2:=pARhsValue12207_ARV12207;
		 pACastRhs12198_ACR12198:=myrec;
		END;
	FUNCTION pARhsValue12197_ARV12197:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs12198_ACR12198;
		 pARhsValue12197_ARV12197:=myrec;
		END;
	FUNCTION pAUint8Unsigned12217_AU8U12217:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned12217_AU8U12217:=myrec;
		END;
	FUNCTION pAUnsignedTformat12216_AUT12216:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned12217_AU8U12217;
		 pAUnsignedTformat12216_AUT12216:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12215_ATP12215:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype12215_ATP12215:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12214_APT12214:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12214_APT12214:=nil;
		 pAPredeclaredtypeTypeprim12214_APT12214:=myrec;
		END;
	FUNCTION pAOptionalsign12220_AO12220:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12220_AO12220:=nil;
		 pAOptionalsign12220_AO12220:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12219_AIN12219:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber12219_AIN12219:=myrec;
		END;
	FUNCTION pAArray12218_AA12218:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12218_AA12218:=nil;
		 pAArray12218_AA12218:=myrec;
		END;
	FUNCTION pAArrayType12213_AAT12213:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType12213_AAT12213:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc12224_AIL12224:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc12224_AIL12224:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12223_AR12223:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12224_AIL12224;
		 pARefval12223_AR12223:=myrec;
		END;
	FUNCTION pADerefRhs12222_ADR12222:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval12223_AR12223;
		 pADerefRhs12222_ADR12222:=myrec;
		END;
	FUNCTION pARhsValue12221_ARV12221:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs12222_ADR12222;
		 pARhsValue12221_ARV12221:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs12212_ACR12212:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType12213_AAT12213;
		myrec^.arg2:=pARhsValue12221_ARV12221;
		 pACastRhs12212_ACR12212:=myrec;
		END;
	FUNCTION pARhsValue12211_ARV12211:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs12212_ACR12212;
		 pARhsValue12211_ARV12211:=myrec;
		END;
	FUNCTION pADyadicValue12195_ADV12195:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue12197_ARV12197;
		myrec^.arg2:=pARhsValue12211_ARV12211;
		myrec^.fn:=pAIdentifierDyadic12196_AID12196;
		 pADyadicValue12195_ADV12195:=myrec;
		END;
	FUNCTION pAAssign12182_AA12182:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue12195_ADV12195;
		myrec^.dest:=pARefcastRefval12183_ARR12183;
		 pAAssign12182_AA12182:=myrec;
		END;
	FUNCTION pAAssignMeaning12181_AAM12181:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign12182_AA12182;
		 pAAssignMeaning12181_AAM12181:=myrec;
		END;
	FUNCTION pAAssemblypattern12226_AA12226:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'p' );
		pappendp(list,0);
		pappends(list,'ub  ' );
		pappendp(list,2);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern12226_AA12226:=list;
		END;
	FUNCTION pAAssemblesto12225_AA12225:pprintlist;
	begin
		pAAssemblesto12225_AA12225:=pAAssemblypattern12226_AA12226;
		END;
	FUNCTION pASideeffects12233_AS12233:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects12233_AS12233:=nil;
		 pASideeffects12233_AS12233:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond12234_AUP12234:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond12234_AUP12234:=nil;
		 pAUnconditionalPrecond12234_AUP12234:=myrec;
		END;
	FUNCTION OPPI8muc_OPPI8:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patmreg_;
		params^[1]:=patmreg_;
		params^[0]:=patcoperator_;
		paramcount:=4;
		meaning:=pAAssignMeaning12181_AAM12181;
		matchedAssembler:=pAAssemblesto12225_AA12225;
		END;
		OPPI8muc_OPPI8:=myrec;
	END;
	FUNCTION pATypeid12237_AT12237:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ coperator  ilcg.pattern@5144d5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12237_AT12237:=myrec;
		END;
	FUNCTION pATypeid12239_AT12239:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12239_AT12239:=myrec;
		END;
	FUNCTION pATypeid12241_AT12241:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@1b323af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12241_AT12241:=myrec;
		END;
	FUNCTION pAUint16Unsigned12251_AU16U12251:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16;
		 pAUint16Unsigned12251_AU16U12251:=myrec;
		END;
	FUNCTION pAUnsignedTformat12250_AUT12250:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint16Unsigned12251_AU16U12251;
		 pAUnsignedTformat12250_AUT12250:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12249_ATP12249:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pATformatPredeclaredtype12249_ATP12249:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12248_APT12248:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12248_APT12248:=nil;
		 pAPredeclaredtypeTypeprim12248_APT12248:=myrec;
		END;
	FUNCTION pAOptionalsign12254_AO12254:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12254_AO12254:=nil;
		 pAOptionalsign12254_AO12254:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12253_AIN12253:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber12253_AIN12253:=myrec;
		END;
	FUNCTION pAArray12252_AA12252:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12252_AA12252:=nil;
		 pAArray12252_AA12252:=myrec;
		END;
	FUNCTION pAArrayType12247_AAT12247:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint16 ,4 );
		 pAArrayType12247_AAT12247:=myrec;
		END;
	FUNCTION pAReference12246_AR12246:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType12247_AAT12247;
		 pAReference12246_AR12246:=myrec;
		END;
	FUNCTION pAReftypeType12245_ART12245:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference12246_AR12246;
		 pAReftypeType12245_ART12245:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc12255_AIL12255:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc12255_AIL12255:=myrec;
		END;
		(*! try to cast to type: ref uint16 vector ( 4 )*)
	FUNCTION pARefcastRefval12244_ARR12244:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType12245_ART12245;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc12255_AIL12255;
		 pARefcastRefval12244_ARR12244:=myrec;
		END;
	FUNCTION pAIdentifierDyadic12257_AID12257:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic12257_AID12257:=myrec;
		END;
	FUNCTION pAUint16Unsigned12264_AU16U12264:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16;
		 pAUint16Unsigned12264_AU16U12264:=myrec;
		END;
	FUNCTION pAUnsignedTformat12263_AUT12263:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint16Unsigned12264_AU16U12264;
		 pAUnsignedTformat12263_AUT12263:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12262_ATP12262:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pATformatPredeclaredtype12262_ATP12262:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12261_APT12261:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12261_APT12261:=nil;
		 pAPredeclaredtypeTypeprim12261_APT12261:=myrec;
		END;
	FUNCTION pAOptionalsign12267_AO12267:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12267_AO12267:=nil;
		 pAOptionalsign12267_AO12267:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12266_AIN12266:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber12266_AIN12266:=myrec;
		END;
	FUNCTION pAArray12265_AA12265:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12265_AA12265:=nil;
		 pAArray12265_AA12265:=myrec;
		END;
	FUNCTION pAArrayType12260_AAT12260:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint16 ,4 );
		 pAArrayType12260_AAT12260:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc12271_AIL12271:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc12271_AIL12271:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12270_AR12270:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12271_AIL12271;
		 pARefval12270_AR12270:=myrec;
		END;
	FUNCTION pADerefRhs12269_ADR12269:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval12270_AR12270;
		 pADerefRhs12269_ADR12269:=myrec;
		END;
	FUNCTION pARhsValue12268_ARV12268:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs12269_ADR12269;
		 pARhsValue12268_ARV12268:=myrec;
		END;
		(*! try to cast to type: uint16 vector ( 4 )*)
	FUNCTION pACastRhs12259_ACR12259:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType12260_AAT12260;
		myrec^.arg2:=pARhsValue12268_ARV12268;
		 pACastRhs12259_ACR12259:=myrec;
		END;
	FUNCTION pARhsValue12258_ARV12258:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs12259_ACR12259;
		 pARhsValue12258_ARV12258:=myrec;
		END;
	FUNCTION pAUint16Unsigned12278_AU16U12278:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16;
		 pAUint16Unsigned12278_AU16U12278:=myrec;
		END;
	FUNCTION pAUnsignedTformat12277_AUT12277:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint16Unsigned12278_AU16U12278;
		 pAUnsignedTformat12277_AUT12277:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12276_ATP12276:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pATformatPredeclaredtype12276_ATP12276:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12275_APT12275:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12275_APT12275:=nil;
		 pAPredeclaredtypeTypeprim12275_APT12275:=myrec;
		END;
	FUNCTION pAOptionalsign12281_AO12281:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12281_AO12281:=nil;
		 pAOptionalsign12281_AO12281:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12280_AIN12280:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber12280_AIN12280:=myrec;
		END;
	FUNCTION pAArray12279_AA12279:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12279_AA12279:=nil;
		 pAArray12279_AA12279:=myrec;
		END;
	FUNCTION pAArrayType12274_AAT12274:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint16 ,4 );
		 pAArrayType12274_AAT12274:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc12285_AIL12285:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc12285_AIL12285:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12284_AR12284:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12285_AIL12285;
		 pARefval12284_AR12284:=myrec;
		END;
	FUNCTION pADerefRhs12283_ADR12283:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval12284_AR12284;
		 pADerefRhs12283_ADR12283:=myrec;
		END;
	FUNCTION pARhsValue12282_ARV12282:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs12283_ADR12283;
		 pARhsValue12282_ARV12282:=myrec;
		END;
		(*! try to cast to type: uint16 vector ( 4 )*)
	FUNCTION pACastRhs12273_ACR12273:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType12274_AAT12274;
		myrec^.arg2:=pARhsValue12282_ARV12282;
		 pACastRhs12273_ACR12273:=myrec;
		END;
	FUNCTION pARhsValue12272_ARV12272:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs12273_ACR12273;
		 pARhsValue12272_ARV12272:=myrec;
		END;
	FUNCTION pADyadicValue12256_ADV12256:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue12258_ARV12258;
		myrec^.arg2:=pARhsValue12272_ARV12272;
		myrec^.fn:=pAIdentifierDyadic12257_AID12257;
		 pADyadicValue12256_ADV12256:=myrec;
		END;
	FUNCTION pAAssign12243_AA12243:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue12256_ADV12256;
		myrec^.dest:=pARefcastRefval12244_ARR12244;
		 pAAssign12243_AA12243:=myrec;
		END;
	FUNCTION pAAssignMeaning12242_AAM12242:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign12243_AA12243;
		 pAAssignMeaning12242_AAM12242:=myrec;
		END;
	FUNCTION pAAssemblypattern12287_AA12287:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'p' );
		pappendp(list,0);
		pappends(list,'uw  ' );
		pappendp(list,2);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern12287_AA12287:=list;
		END;
	FUNCTION pAAssemblesto12286_AA12286:pprintlist;
	begin
		pAAssemblesto12286_AA12286:=pAAssemblypattern12287_AA12287;
		END;
	FUNCTION pASideeffects12294_AS12294:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects12294_AS12294:=nil;
		 pASideeffects12294_AS12294:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond12295_AUP12295:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond12295_AUP12295:=nil;
		 pAUnconditionalPrecond12295_AUP12295:=myrec;
		END;
	FUNCTION OPPI16muc_OPPI16:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patmreg_;
		params^[1]:=patmreg_;
		params^[0]:=patcoperator_;
		paramcount:=4;
		meaning:=pAAssignMeaning12242_AAM12242;
		matchedAssembler:=pAAssemblesto12286_AA12286;
		END;
		OPPI16muc_OPPI16:=myrec;
	END;
	FUNCTION pATypeid12298_AT12298:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ nonmultoperator  ilcg.pattern@752144}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12298_AT12298:=myrec;
		END;
	FUNCTION pATypeid12300_AT12300:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmreg  ilcg.pattern@1d0f57e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12300_AT12300:=myrec;
		END;
	FUNCTION pATypeid12302_AT12302:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmreg  ilcg.pattern@1d0f57e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12302_AT12302:=myrec;
		END;
	FUNCTION pAInt8Signed12312_AI8S12312:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed12312_AI8S12312:=myrec;
		END;
	FUNCTION pASignedTformat12311_AST12311:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed12312_AI8S12312;
		 pASignedTformat12311_AST12311:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12310_ATP12310:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype12310_ATP12310:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12309_APT12309:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12309_APT12309:=nil;
		 pAPredeclaredtypeTypeprim12309_APT12309:=myrec;
		END;
	FUNCTION pAOptionalsign12315_AO12315:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12315_AO12315:=nil;
		 pAOptionalsign12315_AO12315:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12314_AIN12314:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=16 ;
		 pAIntegerNumber12314_AIN12314:=myrec;
		END;
	FUNCTION pAArray12313_AA12313:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12313_AA12313:=nil;
		 pAArray12313_AA12313:=myrec;
		END;
	FUNCTION pAArrayType12308_AAT12308:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,16 );
		 pAArrayType12308_AAT12308:=myrec;
		END;
	FUNCTION pAReference12307_AR12307:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType12308_AAT12308;
		 pAReference12307_AR12307:=myrec;
		END;
	FUNCTION pAReftypeType12306_ART12306:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference12307_AR12307;
		 pAReftypeType12306_ART12306:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc12316_AIL12316:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc12316_AIL12316:=myrec;
		END;
		(*! try to cast to type: ref int8 vector ( 16 )*)
	FUNCTION pARefcastRefval12305_ARR12305:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType12306_ART12306;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc12316_AIL12316;
		 pARefcastRefval12305_ARR12305:=myrec;
		END;
	FUNCTION pAIdentifierDyadic12318_AID12318:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic12318_AID12318:=myrec;
		END;
	FUNCTION pAInt8Signed12325_AI8S12325:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed12325_AI8S12325:=myrec;
		END;
	FUNCTION pASignedTformat12324_AST12324:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed12325_AI8S12325;
		 pASignedTformat12324_AST12324:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12323_ATP12323:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype12323_ATP12323:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12322_APT12322:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12322_APT12322:=nil;
		 pAPredeclaredtypeTypeprim12322_APT12322:=myrec;
		END;
	FUNCTION pAOptionalsign12328_AO12328:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12328_AO12328:=nil;
		 pAOptionalsign12328_AO12328:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12327_AIN12327:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=16 ;
		 pAIntegerNumber12327_AIN12327:=myrec;
		END;
	FUNCTION pAArray12326_AA12326:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12326_AA12326:=nil;
		 pAArray12326_AA12326:=myrec;
		END;
	FUNCTION pAArrayType12321_AAT12321:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,16 );
		 pAArrayType12321_AAT12321:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc12332_AIL12332:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc12332_AIL12332:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12331_AR12331:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12332_AIL12332;
		 pARefval12331_AR12331:=myrec;
		END;
	FUNCTION pADerefRhs12330_ADR12330:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval12331_AR12331;
		 pADerefRhs12330_ADR12330:=myrec;
		END;
	FUNCTION pARhsValue12329_ARV12329:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs12330_ADR12330;
		 pARhsValue12329_ARV12329:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 16 )*)
	FUNCTION pACastRhs12320_ACR12320:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType12321_AAT12321;
		myrec^.arg2:=pARhsValue12329_ARV12329;
		 pACastRhs12320_ACR12320:=myrec;
		END;
	FUNCTION pARhsValue12319_ARV12319:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs12320_ACR12320;
		 pARhsValue12319_ARV12319:=myrec;
		END;
	FUNCTION pAInt8Signed12339_AI8S12339:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed12339_AI8S12339:=myrec;
		END;
	FUNCTION pASignedTformat12338_AST12338:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed12339_AI8S12339;
		 pASignedTformat12338_AST12338:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12337_ATP12337:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype12337_ATP12337:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12336_APT12336:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12336_APT12336:=nil;
		 pAPredeclaredtypeTypeprim12336_APT12336:=myrec;
		END;
	FUNCTION pAOptionalsign12342_AO12342:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12342_AO12342:=nil;
		 pAOptionalsign12342_AO12342:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12341_AIN12341:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=16 ;
		 pAIntegerNumber12341_AIN12341:=myrec;
		END;
	FUNCTION pAArray12340_AA12340:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12340_AA12340:=nil;
		 pAArray12340_AA12340:=myrec;
		END;
	FUNCTION pAArrayType12335_AAT12335:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,16 );
		 pAArrayType12335_AAT12335:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc12346_AIL12346:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc12346_AIL12346:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12345_AR12345:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12346_AIL12346;
		 pARefval12345_AR12345:=myrec;
		END;
	FUNCTION pADerefRhs12344_ADR12344:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval12345_AR12345;
		 pADerefRhs12344_ADR12344:=myrec;
		END;
	FUNCTION pARhsValue12343_ARV12343:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs12344_ADR12344;
		 pARhsValue12343_ARV12343:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 16 )*)
	FUNCTION pACastRhs12334_ACR12334:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType12335_AAT12335;
		myrec^.arg2:=pARhsValue12343_ARV12343;
		 pACastRhs12334_ACR12334:=myrec;
		END;
	FUNCTION pARhsValue12333_ARV12333:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs12334_ACR12334;
		 pARhsValue12333_ARV12333:=myrec;
		END;
	FUNCTION pADyadicValue12317_ADV12317:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue12319_ARV12319;
		myrec^.arg2:=pARhsValue12333_ARV12333;
		myrec^.fn:=pAIdentifierDyadic12318_AID12318;
		 pADyadicValue12317_ADV12317:=myrec;
		END;
	FUNCTION pAAssign12304_AA12304:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue12317_ADV12317;
		myrec^.dest:=pARefcastRefval12305_ARR12305;
		 pAAssign12304_AA12304:=myrec;
		END;
	FUNCTION pAAssignMeaning12303_AAM12303:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign12304_AA12304;
		 pAAssignMeaning12303_AAM12303:=myrec;
		END;
	FUNCTION pAAssemblypattern12348_AA12348:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'p' );
		pappendp(list,0);
		pappends(list,'b  ' );
		pappendp(list,2);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern12348_AA12348:=list;
		END;
	FUNCTION pAAssemblesto12347_AA12347:pprintlist;
	begin
		pAAssemblesto12347_AA12347:=pAAssemblypattern12348_AA12348;
		END;
	FUNCTION pASideeffects12355_AS12355:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects12355_AS12355:=nil;
		 pASideeffects12355_AS12355:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond12356_AUP12356:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond12356_AUP12356:=nil;
		 pAUnconditionalPrecond12356_AUP12356:=myrec;
		END;
	FUNCTION OPPI8_OPPI8:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patxmreg_;
		params^[1]:=patxmreg_;
		params^[0]:=patnonmultoperator_;
		paramcount:=4;
		meaning:=pAAssignMeaning12303_AAM12303;
		matchedAssembler:=pAAssemblesto12347_AA12347;
		END;
		OPPI8_OPPI8:=myrec;
	END;
	FUNCTION pATypeid12359_AT12359:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ nonmultoperator  ilcg.pattern@752144}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12359_AT12359:=myrec;
		END;
	FUNCTION pATypeid12361_AT12361:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmreg  ilcg.pattern@1d0f57e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12361_AT12361:=myrec;
		END;
	FUNCTION pATypeid12363_AT12363:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmreg  ilcg.pattern@1d0f57e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12363_AT12363:=myrec;
		END;
	FUNCTION pAInt16Signed12373_AI16S12373:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed12373_AI16S12373:=myrec;
		END;
	FUNCTION pASignedTformat12372_AST12372:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed12373_AI16S12373;
		 pASignedTformat12372_AST12372:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12371_ATP12371:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype12371_ATP12371:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12370_APT12370:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12370_APT12370:=nil;
		 pAPredeclaredtypeTypeprim12370_APT12370:=myrec;
		END;
	FUNCTION pAOptionalsign12376_AO12376:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12376_AO12376:=nil;
		 pAOptionalsign12376_AO12376:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12375_AIN12375:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber12375_AIN12375:=myrec;
		END;
	FUNCTION pAArray12374_AA12374:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12374_AA12374:=nil;
		 pAArray12374_AA12374:=myrec;
		END;
	FUNCTION pAArrayType12369_AAT12369:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,8 );
		 pAArrayType12369_AAT12369:=myrec;
		END;
	FUNCTION pAReference12368_AR12368:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType12369_AAT12369;
		 pAReference12368_AR12368:=myrec;
		END;
	FUNCTION pAReftypeType12367_ART12367:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference12368_AR12368;
		 pAReftypeType12367_ART12367:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc12377_AIL12377:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc12377_AIL12377:=myrec;
		END;
		(*! try to cast to type: ref int16 vector ( 8 )*)
	FUNCTION pARefcastRefval12366_ARR12366:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType12367_ART12367;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc12377_AIL12377;
		 pARefcastRefval12366_ARR12366:=myrec;
		END;
	FUNCTION pAIdentifierDyadic12379_AID12379:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic12379_AID12379:=myrec;
		END;
	FUNCTION pAInt16Signed12386_AI16S12386:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed12386_AI16S12386:=myrec;
		END;
	FUNCTION pASignedTformat12385_AST12385:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed12386_AI16S12386;
		 pASignedTformat12385_AST12385:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12384_ATP12384:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype12384_ATP12384:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12383_APT12383:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12383_APT12383:=nil;
		 pAPredeclaredtypeTypeprim12383_APT12383:=myrec;
		END;
	FUNCTION pAOptionalsign12389_AO12389:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12389_AO12389:=nil;
		 pAOptionalsign12389_AO12389:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12388_AIN12388:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber12388_AIN12388:=myrec;
		END;
	FUNCTION pAArray12387_AA12387:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12387_AA12387:=nil;
		 pAArray12387_AA12387:=myrec;
		END;
	FUNCTION pAArrayType12382_AAT12382:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,8 );
		 pAArrayType12382_AAT12382:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc12393_AIL12393:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc12393_AIL12393:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12392_AR12392:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12393_AIL12393;
		 pARefval12392_AR12392:=myrec;
		END;
	FUNCTION pADerefRhs12391_ADR12391:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval12392_AR12392;
		 pADerefRhs12391_ADR12391:=myrec;
		END;
	FUNCTION pARhsValue12390_ARV12390:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs12391_ADR12391;
		 pARhsValue12390_ARV12390:=myrec;
		END;
		(*! try to cast to type: int16 vector ( 8 )*)
	FUNCTION pACastRhs12381_ACR12381:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType12382_AAT12382;
		myrec^.arg2:=pARhsValue12390_ARV12390;
		 pACastRhs12381_ACR12381:=myrec;
		END;
	FUNCTION pARhsValue12380_ARV12380:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs12381_ACR12381;
		 pARhsValue12380_ARV12380:=myrec;
		END;
	FUNCTION pAInt16Signed12400_AI16S12400:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed12400_AI16S12400:=myrec;
		END;
	FUNCTION pASignedTformat12399_AST12399:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed12400_AI16S12400;
		 pASignedTformat12399_AST12399:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12398_ATP12398:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype12398_ATP12398:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12397_APT12397:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12397_APT12397:=nil;
		 pAPredeclaredtypeTypeprim12397_APT12397:=myrec;
		END;
	FUNCTION pAOptionalsign12403_AO12403:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12403_AO12403:=nil;
		 pAOptionalsign12403_AO12403:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12402_AIN12402:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber12402_AIN12402:=myrec;
		END;
	FUNCTION pAArray12401_AA12401:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12401_AA12401:=nil;
		 pAArray12401_AA12401:=myrec;
		END;
	FUNCTION pAArrayType12396_AAT12396:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,8 );
		 pAArrayType12396_AAT12396:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc12407_AIL12407:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc12407_AIL12407:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12406_AR12406:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12407_AIL12407;
		 pARefval12406_AR12406:=myrec;
		END;
	FUNCTION pADerefRhs12405_ADR12405:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval12406_AR12406;
		 pADerefRhs12405_ADR12405:=myrec;
		END;
	FUNCTION pARhsValue12404_ARV12404:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs12405_ADR12405;
		 pARhsValue12404_ARV12404:=myrec;
		END;
		(*! try to cast to type: int16 vector ( 8 )*)
	FUNCTION pACastRhs12395_ACR12395:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType12396_AAT12396;
		myrec^.arg2:=pARhsValue12404_ARV12404;
		 pACastRhs12395_ACR12395:=myrec;
		END;
	FUNCTION pARhsValue12394_ARV12394:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs12395_ACR12395;
		 pARhsValue12394_ARV12394:=myrec;
		END;
	FUNCTION pADyadicValue12378_ADV12378:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue12380_ARV12380;
		myrec^.arg2:=pARhsValue12394_ARV12394;
		myrec^.fn:=pAIdentifierDyadic12379_AID12379;
		 pADyadicValue12378_ADV12378:=myrec;
		END;
	FUNCTION pAAssign12365_AA12365:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue12378_ADV12378;
		myrec^.dest:=pARefcastRefval12366_ARR12366;
		 pAAssign12365_AA12365:=myrec;
		END;
	FUNCTION pAAssignMeaning12364_AAM12364:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign12365_AA12365;
		 pAAssignMeaning12364_AAM12364:=myrec;
		END;
	FUNCTION pAAssemblypattern12409_AA12409:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'p' );
		pappendp(list,0);
		pappends(list,'w  ' );
		pappendp(list,2);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern12409_AA12409:=list;
		END;
	FUNCTION pAAssemblesto12408_AA12408:pprintlist;
	begin
		pAAssemblesto12408_AA12408:=pAAssemblypattern12409_AA12409;
		END;
	FUNCTION pASideeffects12416_AS12416:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects12416_AS12416:=nil;
		 pASideeffects12416_AS12416:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond12417_AUP12417:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond12417_AUP12417:=nil;
		 pAUnconditionalPrecond12417_AUP12417:=myrec;
		END;
	FUNCTION OPPI16_OPPI16:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patxmreg_;
		params^[1]:=patxmreg_;
		params^[0]:=patnonmultoperator_;
		paramcount:=4;
		meaning:=pAAssignMeaning12364_AAM12364;
		matchedAssembler:=pAAssemblesto12408_AA12408;
		END;
		OPPI16_OPPI16:=myrec;
	END;
	FUNCTION pATypeid12420_AT12420:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ smaddrmode  ilcg.pattern@a61373}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12420_AT12420:=myrec;
		END;
	FUNCTION pATypeid12422_AT12422:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmreg  ilcg.pattern@1d0f57e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12422_AT12422:=myrec;
		END;
	FUNCTION pAInt16Signed12432_AI16S12432:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed12432_AI16S12432:=myrec;
		END;
	FUNCTION pASignedTformat12431_AST12431:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed12432_AI16S12432;
		 pASignedTformat12431_AST12431:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12430_ATP12430:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype12430_ATP12430:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12429_APT12429:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12429_APT12429:=nil;
		 pAPredeclaredtypeTypeprim12429_APT12429:=myrec;
		END;
	FUNCTION pAOptionalsign12435_AO12435:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12435_AO12435:=nil;
		 pAOptionalsign12435_AO12435:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12434_AIN12434:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber12434_AIN12434:=myrec;
		END;
	FUNCTION pAArray12433_AA12433:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12433_AA12433:=nil;
		 pAArray12433_AA12433:=myrec;
		END;
	FUNCTION pAArrayType12428_AAT12428:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,8 );
		 pAArrayType12428_AAT12428:=myrec;
		END;
	FUNCTION pAReference12427_AR12427:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType12428_AAT12428;
		 pAReference12427_AR12427:=myrec;
		END;
	FUNCTION pAReftypeType12426_ART12426:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference12427_AR12427;
		 pAReftypeType12426_ART12426:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc12436_AIL12436:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc12436_AIL12436:=myrec;
		END;
		(*! try to cast to type: ref int16 vector ( 8 )*)
	FUNCTION pARefcastRefval12425_ARR12425:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType12426_ART12426;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc12436_AIL12436;
		 pARefcastRefval12425_ARR12425:=myrec;
		END;
	FUNCTION pAInt16Signed12443_AI16S12443:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed12443_AI16S12443:=myrec;
		END;
	FUNCTION pASignedTformat12442_AST12442:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed12443_AI16S12443;
		 pASignedTformat12442_AST12442:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12441_ATP12441:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype12441_ATP12441:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12440_APT12440:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12440_APT12440:=nil;
		 pAPredeclaredtypeTypeprim12440_APT12440:=myrec;
		END;
	FUNCTION pAOptionalsign12446_AO12446:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12446_AO12446:=nil;
		 pAOptionalsign12446_AO12446:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12445_AIN12445:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber12445_AIN12445:=myrec;
		END;
	FUNCTION pAArray12444_AA12444:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12444_AA12444:=nil;
		 pAArray12444_AA12444:=myrec;
		END;
	FUNCTION pAArrayType12439_AAT12439:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,8 );
		 pAArrayType12439_AAT12439:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc12450_AIL12450:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc12450_AIL12450:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12449_AR12449:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12450_AIL12450;
		 pARefval12449_AR12449:=myrec;
		END;
	FUNCTION pADerefRhs12448_ADR12448:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval12449_AR12449;
		 pADerefRhs12448_ADR12448:=myrec;
		END;
	FUNCTION pARhsValue12447_ARV12447:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs12448_ADR12448;
		 pARhsValue12447_ARV12447:=myrec;
		END;
		(*! try to cast to type: int16 vector ( 8 )*)
	FUNCTION pACastRhs12438_ACR12438:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType12439_AAT12439;
		myrec^.arg2:=pARhsValue12447_ARV12447;
		 pACastRhs12438_ACR12438:=myrec;
		END;
	FUNCTION pARhsValue12437_ARV12437:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs12438_ACR12438;
		 pARhsValue12437_ARV12437:=myrec;
		END;
	FUNCTION pAAssign12424_AA12424:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue12437_ARV12437;
		myrec^.dest:=pARefcastRefval12425_ARR12425;
		 pAAssign12424_AA12424:=myrec;
		END;
	FUNCTION pAAssignMeaning12423_AAM12423:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign12424_AA12424;
		 pAAssignMeaning12423_AAM12423:=myrec;
		END;
	FUNCTION pAAssemblypattern12452_AA12452:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movdqu  ' );
		pappendp(list,0);
		pappends(list,', ' );
		pappendp(list,1);
		pAAssemblypattern12452_AA12452:=list;
		END;
	FUNCTION pAAssemblesto12451_AA12451:pprintlist;
	begin
		pAAssemblesto12451_AA12451:=pAAssemblypattern12452_AA12452;
		END;
	FUNCTION pASideeffects12457_AS12457:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects12457_AS12457:=nil;
		 pASideeffects12457_AS12457:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond12458_AUP12458:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond12458_AUP12458:=nil;
		 pAUnconditionalPrecond12458_AUP12458:=myrec;
		END;
	FUNCTION STORUPI16_STORUPI16:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patxmreg_;
		params^[0]:=patsmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning12423_AAM12423;
		matchedAssembler:=pAAssemblesto12451_AA12451;
		END;
		STORUPI16_STORUPI16:=myrec;
	END;
	FUNCTION pATypeid12461_AT12461:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ smaddrmode  ilcg.pattern@a61373}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12461_AT12461:=myrec;
		END;
	FUNCTION pATypeid12463_AT12463:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmreg  ilcg.pattern@1d0f57e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12463_AT12463:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc12467_AIL12467:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc12467_AIL12467:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12466_AR12466:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12467_AIL12467;
		 pARefval12466_AR12466:=myrec;
		END;
	FUNCTION pAInt16Signed12474_AI16S12474:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed12474_AI16S12474:=myrec;
		END;
	FUNCTION pASignedTformat12473_AST12473:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed12474_AI16S12474;
		 pASignedTformat12473_AST12473:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12472_ATP12472:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype12472_ATP12472:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12471_APT12471:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12471_APT12471:=nil;
		 pAPredeclaredtypeTypeprim12471_APT12471:=myrec;
		END;
	FUNCTION pAOptionalsign12477_AO12477:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12477_AO12477:=nil;
		 pAOptionalsign12477_AO12477:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12476_AIN12476:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber12476_AIN12476:=myrec;
		END;
	FUNCTION pAArray12475_AA12475:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12475_AA12475:=nil;
		 pAArray12475_AA12475:=myrec;
		END;
	FUNCTION pAArrayType12470_AAT12470:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,8 );
		 pAArrayType12470_AAT12470:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc12481_AIL12481:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc12481_AIL12481:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12480_AR12480:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12481_AIL12481;
		 pARefval12480_AR12480:=myrec;
		END;
	FUNCTION pADerefRhs12479_ADR12479:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval12480_AR12480;
		 pADerefRhs12479_ADR12479:=myrec;
		END;
	FUNCTION pARhsValue12478_ARV12478:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs12479_ADR12479;
		 pARhsValue12478_ARV12478:=myrec;
		END;
		(*! try to cast to type: int16 vector ( 8 )*)
	FUNCTION pACastRhs12469_ACR12469:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType12470_AAT12470;
		myrec^.arg2:=pARhsValue12478_ARV12478;
		 pACastRhs12469_ACR12469:=myrec;
		END;
	FUNCTION pARhsValue12468_ARV12468:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs12469_ACR12469;
		 pARhsValue12468_ARV12468:=myrec;
		END;
	FUNCTION pAAssign12465_AA12465:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue12468_ARV12468;
		myrec^.dest:=pARefval12466_AR12466;
		 pAAssign12465_AA12465:=myrec;
		END;
	FUNCTION pAAssignMeaning12464_AAM12464:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign12465_AA12465;
		 pAAssignMeaning12464_AAM12464:=myrec;
		END;
	FUNCTION pAAssemblypattern12483_AA12483:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movdqu  ' );
		pappendp(list,1);
		pappends(list,', ' );
		pappendp(list,0);
		pAAssemblypattern12483_AA12483:=list;
		END;
	FUNCTION pAAssemblesto12482_AA12482:pprintlist;
	begin
		pAAssemblesto12482_AA12482:=pAAssemblypattern12483_AA12483;
		END;
	FUNCTION pASideeffects12488_AS12488:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects12488_AS12488:=nil;
		 pASideeffects12488_AS12488:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond12489_AUP12489:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond12489_AUP12489:=nil;
		 pAUnconditionalPrecond12489_AUP12489:=myrec;
		END;
	FUNCTION MOVUPI16_MOVUPI16:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patsmaddrmode_;
		params^[1]:=patxmreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning12464_AAM12464;
		matchedAssembler:=pAAssemblesto12482_AA12482;
		END;
		MOVUPI16_MOVUPI16:=myrec;
	END;
	FUNCTION pATypeid12492_AT12492:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ loperator  ilcg.pattern@11ffcc2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12492_AT12492:=myrec;
		END;
	FUNCTION pATypeid12494_AT12494:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmreg  ilcg.pattern@1d0f57e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12494_AT12494:=myrec;
		END;
	FUNCTION pATypeid12496_AT12496:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmreg  ilcg.pattern@1d0f57e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12496_AT12496:=myrec;
		END;
	FUNCTION pASigned12506_AS12506:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned12506_AS12506:=myrec;
		END;
	FUNCTION pASignedTformat12505_AST12505:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned12506_AS12506;
		 pASignedTformat12505_AST12505:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12504_ATP12504:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype12504_ATP12504:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12503_APT12503:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12503_APT12503:=nil;
		 pAPredeclaredtypeTypeprim12503_APT12503:=myrec;
		END;
	FUNCTION pAOptionalsign12509_AO12509:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12509_AO12509:=nil;
		 pAOptionalsign12509_AO12509:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12508_AIN12508:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber12508_AIN12508:=myrec;
		END;
	FUNCTION pAArray12507_AA12507:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12507_AA12507:=nil;
		 pAArray12507_AA12507:=myrec;
		END;
	FUNCTION pAArrayType12502_AAT12502:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,4 );
		 pAArrayType12502_AAT12502:=myrec;
		END;
	FUNCTION pAReference12501_AR12501:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType12502_AAT12502;
		 pAReference12501_AR12501:=myrec;
		END;
	FUNCTION pAReftypeType12500_ART12500:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference12501_AR12501;
		 pAReftypeType12500_ART12500:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc12510_AIL12510:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc12510_AIL12510:=myrec;
		END;
		(*! try to cast to type: ref int32 vector ( 4 )*)
	FUNCTION pARefcastRefval12499_ARR12499:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType12500_ART12500;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc12510_AIL12510;
		 pARefcastRefval12499_ARR12499:=myrec;
		END;
	FUNCTION pAIdentifierDyadic12512_AID12512:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic12512_AID12512:=myrec;
		END;
	FUNCTION pASigned12519_AS12519:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned12519_AS12519:=myrec;
		END;
	FUNCTION pASignedTformat12518_AST12518:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned12519_AS12519;
		 pASignedTformat12518_AST12518:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12517_ATP12517:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype12517_ATP12517:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12516_APT12516:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12516_APT12516:=nil;
		 pAPredeclaredtypeTypeprim12516_APT12516:=myrec;
		END;
	FUNCTION pAOptionalsign12522_AO12522:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12522_AO12522:=nil;
		 pAOptionalsign12522_AO12522:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12521_AIN12521:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber12521_AIN12521:=myrec;
		END;
	FUNCTION pAArray12520_AA12520:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12520_AA12520:=nil;
		 pAArray12520_AA12520:=myrec;
		END;
	FUNCTION pAArrayType12515_AAT12515:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,4 );
		 pAArrayType12515_AAT12515:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc12526_AIL12526:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc12526_AIL12526:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12525_AR12525:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12526_AIL12526;
		 pARefval12525_AR12525:=myrec;
		END;
	FUNCTION pADerefRhs12524_ADR12524:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval12525_AR12525;
		 pADerefRhs12524_ADR12524:=myrec;
		END;
	FUNCTION pARhsValue12523_ARV12523:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs12524_ADR12524;
		 pARhsValue12523_ARV12523:=myrec;
		END;
		(*! try to cast to type: int32 vector ( 4 )*)
	FUNCTION pACastRhs12514_ACR12514:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType12515_AAT12515;
		myrec^.arg2:=pARhsValue12523_ARV12523;
		 pACastRhs12514_ACR12514:=myrec;
		END;
	FUNCTION pARhsValue12513_ARV12513:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs12514_ACR12514;
		 pARhsValue12513_ARV12513:=myrec;
		END;
	FUNCTION pASigned12533_AS12533:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned12533_AS12533:=myrec;
		END;
	FUNCTION pASignedTformat12532_AST12532:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned12533_AS12533;
		 pASignedTformat12532_AST12532:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12531_ATP12531:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype12531_ATP12531:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12530_APT12530:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12530_APT12530:=nil;
		 pAPredeclaredtypeTypeprim12530_APT12530:=myrec;
		END;
	FUNCTION pAOptionalsign12536_AO12536:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12536_AO12536:=nil;
		 pAOptionalsign12536_AO12536:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12535_AIN12535:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber12535_AIN12535:=myrec;
		END;
	FUNCTION pAArray12534_AA12534:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12534_AA12534:=nil;
		 pAArray12534_AA12534:=myrec;
		END;
	FUNCTION pAArrayType12529_AAT12529:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,4 );
		 pAArrayType12529_AAT12529:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc12540_AIL12540:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc12540_AIL12540:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12539_AR12539:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12540_AIL12540;
		 pARefval12539_AR12539:=myrec;
		END;
	FUNCTION pADerefRhs12538_ADR12538:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval12539_AR12539;
		 pADerefRhs12538_ADR12538:=myrec;
		END;
	FUNCTION pARhsValue12537_ARV12537:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs12538_ADR12538;
		 pARhsValue12537_ARV12537:=myrec;
		END;
		(*! try to cast to type: int32 vector ( 4 )*)
	FUNCTION pACastRhs12528_ACR12528:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType12529_AAT12529;
		myrec^.arg2:=pARhsValue12537_ARV12537;
		 pACastRhs12528_ACR12528:=myrec;
		END;
	FUNCTION pARhsValue12527_ARV12527:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs12528_ACR12528;
		 pARhsValue12527_ARV12527:=myrec;
		END;
	FUNCTION pADyadicValue12511_ADV12511:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue12513_ARV12513;
		myrec^.arg2:=pARhsValue12527_ARV12527;
		myrec^.fn:=pAIdentifierDyadic12512_AID12512;
		 pADyadicValue12511_ADV12511:=myrec;
		END;
	FUNCTION pAAssign12498_AA12498:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue12511_ADV12511;
		myrec^.dest:=pARefcastRefval12499_ARR12499;
		 pAAssign12498_AA12498:=myrec;
		END;
	FUNCTION pAAssignMeaning12497_AAM12497:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign12498_AA12498;
		 pAAssignMeaning12497_AAM12497:=myrec;
		END;
	FUNCTION pAAssemblypattern12542_AA12542:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'ps  ' );
		pappendp(list,2);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern12542_AA12542:=list;
		END;
	FUNCTION pAAssemblesto12541_AA12541:pprintlist;
	begin
		pAAssemblesto12541_AA12541:=pAAssemblypattern12542_AA12542;
		END;
	FUNCTION pASideeffects12548_AS12548:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects12548_AS12548:=nil;
		 pASideeffects12548_AS12548:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond12549_AUP12549:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond12549_AUP12549:=nil;
		 pAUnconditionalPrecond12549_AUP12549:=myrec;
		END;
	FUNCTION OPPI32_OPPI32:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patxmreg_;
		params^[1]:=patxmreg_;
		params^[0]:=patloperator_;
		paramcount:=4;
		meaning:=pAAssignMeaning12497_AAM12497;
		matchedAssembler:=pAAssemblesto12541_AA12541;
		END;
		OPPI32_OPPI32:=myrec;
	END;
	FUNCTION pATypeid12552_AT12552:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ smoperator  ilcg.pattern@1ea0024}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12552_AT12552:=myrec;
		END;
	FUNCTION pATypeid12554_AT12554:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmregi324  ilcg.pattern@1f3305e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12554_AT12554:=myrec;
		END;
	FUNCTION pATypeid12556_AT12556:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmregi324  ilcg.pattern@1f3305e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12556_AT12556:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc12560_AIL12560:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc12560_AIL12560:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12559_AR12559:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12560_AIL12560;
		 pARefval12559_AR12559:=myrec;
		END;
	FUNCTION pAIdentifierDyadic12562_AID12562:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic12562_AID12562:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc12566_AIL12566:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc12566_AIL12566:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12565_AR12565:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12566_AIL12566;
		 pARefval12565_AR12565:=myrec;
		END;
	FUNCTION pADerefRhs12564_ADR12564:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval12565_AR12565;
		 pADerefRhs12564_ADR12564:=myrec;
		END;
	FUNCTION pARhsValue12563_ARV12563:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs12564_ADR12564;
		 pARhsValue12563_ARV12563:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc12570_AIL12570:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc12570_AIL12570:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12569_AR12569:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12570_AIL12570;
		 pARefval12569_AR12569:=myrec;
		END;
	FUNCTION pADerefRhs12568_ADR12568:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval12569_AR12569;
		 pADerefRhs12568_ADR12568:=myrec;
		END;
	FUNCTION pARhsValue12567_ARV12567:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs12568_ADR12568;
		 pARhsValue12567_ARV12567:=myrec;
		END;
	FUNCTION pADyadicValue12561_ADV12561:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue12563_ARV12563;
		myrec^.arg2:=pARhsValue12567_ARV12567;
		myrec^.fn:=pAIdentifierDyadic12562_AID12562;
		 pADyadicValue12561_ADV12561:=myrec;
		END;
	FUNCTION pAAssign12558_AA12558:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue12561_ADV12561;
		myrec^.dest:=pARefval12559_AR12559;
		 pAAssign12558_AA12558:=myrec;
		END;
	FUNCTION pAAssignMeaning12557_AAM12557:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign12558_AA12558;
		 pAAssignMeaning12557_AAM12557:=myrec;
		END;
	FUNCTION pAAssemblypattern12572_AA12572:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'p' );
		pappendp(list,0);
		pappends(list,'d  ' );
		pappendp(list,2);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern12572_AA12572:=list;
		END;
	FUNCTION pAAssemblesto12571_AA12571:pprintlist;
	begin
		pAAssemblesto12571_AA12571:=pAAssemblypattern12572_AA12572;
		END;
	FUNCTION pASideeffects12579_AS12579:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects12579_AS12579:=nil;
		 pASideeffects12579_AS12579:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond12580_AUP12580:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond12580_AUP12580:=nil;
		 pAUnconditionalPrecond12580_AUP12580:=myrec;
		END;
	FUNCTION OPPI32m_OPPI32:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patxmregi324_324;
		params^[1]:=patxmregi324_324;
		params^[0]:=patsmoperator_;
		paramcount:=4;
		meaning:=pAAssignMeaning12557_AAM12557;
		matchedAssembler:=pAAssemblesto12571_AA12571;
		END;
		OPPI32m_OPPI32:=myrec;
	END;
	FUNCTION pATypeid12583_AT12583:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ smaddrmode  ilcg.pattern@a61373}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12583_AT12583:=myrec;
		END;
	FUNCTION pATypeid12585_AT12585:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmregi324  ilcg.pattern@1f3305e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12585_AT12585:=myrec;
		END;
	FUNCTION pASigned12595_AS12595:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned12595_AS12595:=myrec;
		END;
	FUNCTION pASignedTformat12594_AST12594:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned12595_AS12595;
		 pASignedTformat12594_AST12594:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12593_ATP12593:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype12593_ATP12593:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12592_APT12592:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12592_APT12592:=nil;
		 pAPredeclaredtypeTypeprim12592_APT12592:=myrec;
		END;
	FUNCTION pAOptionalsign12598_AO12598:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12598_AO12598:=nil;
		 pAOptionalsign12598_AO12598:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12597_AIN12597:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber12597_AIN12597:=myrec;
		END;
	FUNCTION pAArray12596_AA12596:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12596_AA12596:=nil;
		 pAArray12596_AA12596:=myrec;
		END;
	FUNCTION pAArrayType12591_AAT12591:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,4 );
		 pAArrayType12591_AAT12591:=myrec;
		END;
	FUNCTION pAReference12590_AR12590:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType12591_AAT12591;
		 pAReference12590_AR12590:=myrec;
		END;
	FUNCTION pAReftypeType12589_ART12589:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference12590_AR12590;
		 pAReftypeType12589_ART12589:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc12599_AIL12599:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc12599_AIL12599:=myrec;
		END;
		(*! try to cast to type: ref int32 vector ( 4 )*)
	FUNCTION pARefcastRefval12588_ARR12588:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType12589_ART12589;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc12599_AIL12599;
		 pARefcastRefval12588_ARR12588:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc12603_AIL12603:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc12603_AIL12603:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12602_AR12602:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12603_AIL12603;
		 pARefval12602_AR12602:=myrec;
		END;
	FUNCTION pADerefRhs12601_ADR12601:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval12602_AR12602;
		 pADerefRhs12601_ADR12601:=myrec;
		END;
	FUNCTION pARhsValue12600_ARV12600:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs12601_ADR12601;
		 pARhsValue12600_ARV12600:=myrec;
		END;
	FUNCTION pAAssign12587_AA12587:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue12600_ARV12600;
		myrec^.dest:=pARefcastRefval12588_ARR12588;
		 pAAssign12587_AA12587:=myrec;
		END;
	FUNCTION pAAssignMeaning12586_AAM12586:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign12587_AA12587;
		 pAAssignMeaning12586_AAM12586:=myrec;
		END;
	FUNCTION pAAssemblypattern12605_AA12605:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movdqu  ' );
		pappendp(list,0);
		pappends(list,', ' );
		pappendp(list,1);
		pAAssemblypattern12605_AA12605:=list;
		END;
	FUNCTION pAAssemblesto12604_AA12604:pprintlist;
	begin
		pAAssemblesto12604_AA12604:=pAAssemblypattern12605_AA12605;
		END;
	FUNCTION pASideeffects12610_AS12610:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects12610_AS12610:=nil;
		 pASideeffects12610_AS12610:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond12611_AUP12611:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond12611_AUP12611:=nil;
		 pAUnconditionalPrecond12611_AUP12611:=myrec;
		END;
	FUNCTION STORUPI32_STORUPI32:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patxmregi324_324;
		params^[0]:=patsmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning12586_AAM12586;
		matchedAssembler:=pAAssemblesto12604_AA12604;
		END;
		STORUPI32_STORUPI32:=myrec;
	END;
	FUNCTION pATypeid12614_AT12614:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ lmaddrmode  ilcg.pattern@1c01b97}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12614_AT12614:=myrec;
		END;
	FUNCTION pATypeid12616_AT12616:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmreg  ilcg.pattern@1d0f57e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12616_AT12616:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc12620_AIL12620:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc12620_AIL12620:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12619_AR12619:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12620_AIL12620;
		 pARefval12619_AR12619:=myrec;
		END;
	FUNCTION pASigned12627_AS12627:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned12627_AS12627:=myrec;
		END;
	FUNCTION pASignedTformat12626_AST12626:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned12627_AS12627;
		 pASignedTformat12626_AST12626:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12625_ATP12625:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype12625_ATP12625:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12624_APT12624:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12624_APT12624:=nil;
		 pAPredeclaredtypeTypeprim12624_APT12624:=myrec;
		END;
	FUNCTION pAOptionalsign12630_AO12630:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12630_AO12630:=nil;
		 pAOptionalsign12630_AO12630:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12629_AIN12629:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber12629_AIN12629:=myrec;
		END;
	FUNCTION pAArray12628_AA12628:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12628_AA12628:=nil;
		 pAArray12628_AA12628:=myrec;
		END;
	FUNCTION pAArrayType12623_AAT12623:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,4 );
		 pAArrayType12623_AAT12623:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc12634_AIL12634:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc12634_AIL12634:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12633_AR12633:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12634_AIL12634;
		 pARefval12633_AR12633:=myrec;
		END;
	FUNCTION pADerefRhs12632_ADR12632:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval12633_AR12633;
		 pADerefRhs12632_ADR12632:=myrec;
		END;
	FUNCTION pARhsValue12631_ARV12631:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs12632_ADR12632;
		 pARhsValue12631_ARV12631:=myrec;
		END;
		(*! try to cast to type: int32 vector ( 4 )*)
	FUNCTION pACastRhs12622_ACR12622:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType12623_AAT12623;
		myrec^.arg2:=pARhsValue12631_ARV12631;
		 pACastRhs12622_ACR12622:=myrec;
		END;
	FUNCTION pARhsValue12621_ARV12621:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs12622_ACR12622;
		 pARhsValue12621_ARV12621:=myrec;
		END;
	FUNCTION pAAssign12618_AA12618:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue12621_ARV12621;
		myrec^.dest:=pARefval12619_AR12619;
		 pAAssign12618_AA12618:=myrec;
		END;
	FUNCTION pAAssignMeaning12617_AAM12617:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign12618_AA12618;
		 pAAssignMeaning12617_AAM12617:=myrec;
		END;
	FUNCTION pAAssemblypattern12636_AA12636:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movdqu  ' );
		pappendp(list,1);
		pappends(list,', ' );
		pappendp(list,0);
		pAAssemblypattern12636_AA12636:=list;
		END;
	FUNCTION pAAssemblesto12635_AA12635:pprintlist;
	begin
		pAAssemblesto12635_AA12635:=pAAssemblypattern12636_AA12636;
		END;
	FUNCTION pASideeffects12641_AS12641:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects12641_AS12641:=nil;
		 pASideeffects12641_AS12641:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond12642_AUP12642:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond12642_AUP12642:=nil;
		 pAUnconditionalPrecond12642_AUP12642:=myrec;
		END;
	FUNCTION MOVUPI32_MOVUPI32:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patlmaddrmode_;
		params^[1]:=patxmreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning12617_AAM12617;
		matchedAssembler:=pAAssemblesto12635_AA12635;
		END;
		MOVUPI32_MOVUPI32:=myrec;
	END;
	FUNCTION pATypeid12645_AT12645:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ smaddrmode  ilcg.pattern@a61373}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12645_AT12645:=myrec;
		END;
	FUNCTION pATypeid12647_AT12647:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmreg  ilcg.pattern@1d0f57e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12647_AT12647:=myrec;
		END;
	FUNCTION pAIeee63Tformat12656_AI63T12656:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat12656_AI63T12656:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12655_ATP12655:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype12655_ATP12655:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12654_APT12654:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12654_APT12654:=nil;
		 pAPredeclaredtypeTypeprim12654_APT12654:=myrec;
		END;
	FUNCTION pAOptionalsign12659_AO12659:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12659_AO12659:=nil;
		 pAOptionalsign12659_AO12659:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12658_AIN12658:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber12658_AIN12658:=myrec;
		END;
	FUNCTION pAArray12657_AA12657:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12657_AA12657:=nil;
		 pAArray12657_AA12657:=myrec;
		END;
	FUNCTION pAArrayType12653_AAT12653:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fieee64 ,2 );
		 pAArrayType12653_AAT12653:=myrec;
		END;
	FUNCTION pAReference12652_AR12652:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType12653_AAT12653;
		 pAReference12652_AR12652:=myrec;
		END;
	FUNCTION pAReftypeType12651_ART12651:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference12652_AR12652;
		 pAReftypeType12651_ART12651:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc12660_AIL12660:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc12660_AIL12660:=myrec;
		END;
		(*! try to cast to type: ref ieee64 vector ( 2 )*)
	FUNCTION pARefcastRefval12650_ARR12650:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType12651_ART12651;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc12660_AIL12660;
		 pARefcastRefval12650_ARR12650:=myrec;
		END;
	FUNCTION pAIeee63Tformat12666_AI63T12666:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat12666_AI63T12666:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12665_ATP12665:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype12665_ATP12665:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12664_APT12664:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12664_APT12664:=nil;
		 pAPredeclaredtypeTypeprim12664_APT12664:=myrec;
		END;
	FUNCTION pAOptionalsign12669_AO12669:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12669_AO12669:=nil;
		 pAOptionalsign12669_AO12669:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12668_AIN12668:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber12668_AIN12668:=myrec;
		END;
	FUNCTION pAArray12667_AA12667:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12667_AA12667:=nil;
		 pAArray12667_AA12667:=myrec;
		END;
	FUNCTION pAArrayType12663_AAT12663:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fieee64 ,2 );
		 pAArrayType12663_AAT12663:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc12673_AIL12673:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc12673_AIL12673:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12672_AR12672:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12673_AIL12673;
		 pARefval12672_AR12672:=myrec;
		END;
	FUNCTION pADerefRhs12671_ADR12671:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval12672_AR12672;
		 pADerefRhs12671_ADR12671:=myrec;
		END;
	FUNCTION pARhsValue12670_ARV12670:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs12671_ADR12671;
		 pARhsValue12670_ARV12670:=myrec;
		END;
		(*! try to cast to type: ieee64 vector ( 2 )*)
	FUNCTION pACastRhs12662_ACR12662:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType12663_AAT12663;
		myrec^.arg2:=pARhsValue12670_ARV12670;
		 pACastRhs12662_ACR12662:=myrec;
		END;
	FUNCTION pARhsValue12661_ARV12661:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs12662_ACR12662;
		 pARhsValue12661_ARV12661:=myrec;
		END;
	FUNCTION pAAssign12649_AA12649:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue12661_ARV12661;
		myrec^.dest:=pARefcastRefval12650_ARR12650;
		 pAAssign12649_AA12649:=myrec;
		END;
	FUNCTION pAAssignMeaning12648_AAM12648:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign12649_AA12649;
		 pAAssignMeaning12648_AAM12648:=myrec;
		END;
	FUNCTION pAAssemblypattern12675_AA12675:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movupd  ' );
		pappendp(list,0);
		pappends(list,', ' );
		pappendp(list,1);
		pAAssemblypattern12675_AA12675:=list;
		END;
	FUNCTION pAAssemblesto12674_AA12674:pprintlist;
	begin
		pAAssemblesto12674_AA12674:=pAAssemblypattern12675_AA12675;
		END;
	FUNCTION pASideeffects12680_AS12680:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects12680_AS12680:=nil;
		 pASideeffects12680_AS12680:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond12681_AUP12681:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond12681_AUP12681:=nil;
		 pAUnconditionalPrecond12681_AUP12681:=myrec;
		END;
	FUNCTION STORUPD_STORUPD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patxmreg_;
		params^[0]:=patsmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning12648_AAM12648;
		matchedAssembler:=pAAssemblesto12674_AA12674;
		END;
		STORUPD_STORUPD:=myrec;
	END;
	FUNCTION pATypeid12684_AT12684:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ smaddrmode  ilcg.pattern@a61373}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12684_AT12684:=myrec;
		END;
	FUNCTION pATypeid12686_AT12686:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmreg  ilcg.pattern@1d0f57e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12686_AT12686:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc12690_AIL12690:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc12690_AIL12690:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12689_AR12689:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12690_AIL12690;
		 pARefval12689_AR12689:=myrec;
		END;
	FUNCTION pAIeee63Tformat12696_AI63T12696:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat12696_AI63T12696:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12695_ATP12695:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype12695_ATP12695:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12694_APT12694:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12694_APT12694:=nil;
		 pAPredeclaredtypeTypeprim12694_APT12694:=myrec;
		END;
	FUNCTION pAOptionalsign12699_AO12699:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12699_AO12699:=nil;
		 pAOptionalsign12699_AO12699:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12698_AIN12698:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber12698_AIN12698:=myrec;
		END;
	FUNCTION pAArray12697_AA12697:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12697_AA12697:=nil;
		 pAArray12697_AA12697:=myrec;
		END;
	FUNCTION pAArrayType12693_AAT12693:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fieee64 ,2 );
		 pAArrayType12693_AAT12693:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc12703_AIL12703:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc12703_AIL12703:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12702_AR12702:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12703_AIL12703;
		 pARefval12702_AR12702:=myrec;
		END;
	FUNCTION pADerefRhs12701_ADR12701:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval12702_AR12702;
		 pADerefRhs12701_ADR12701:=myrec;
		END;
	FUNCTION pARhsValue12700_ARV12700:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs12701_ADR12701;
		 pARhsValue12700_ARV12700:=myrec;
		END;
		(*! try to cast to type: ieee64 vector ( 2 )*)
	FUNCTION pACastRhs12692_ACR12692:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType12693_AAT12693;
		myrec^.arg2:=pARhsValue12700_ARV12700;
		 pACastRhs12692_ACR12692:=myrec;
		END;
	FUNCTION pARhsValue12691_ARV12691:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs12692_ACR12692;
		 pARhsValue12691_ARV12691:=myrec;
		END;
	FUNCTION pAAssign12688_AA12688:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue12691_ARV12691;
		myrec^.dest:=pARefval12689_AR12689;
		 pAAssign12688_AA12688:=myrec;
		END;
	FUNCTION pAAssignMeaning12687_AAM12687:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign12688_AA12688;
		 pAAssignMeaning12687_AAM12687:=myrec;
		END;
	FUNCTION pAAssemblypattern12705_AA12705:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movupd  ' );
		pappendp(list,1);
		pappends(list,', ' );
		pappendp(list,0);
		pAAssemblypattern12705_AA12705:=list;
		END;
	FUNCTION pAAssemblesto12704_AA12704:pprintlist;
	begin
		pAAssemblesto12704_AA12704:=pAAssemblypattern12705_AA12705;
		END;
	FUNCTION pASideeffects12710_AS12710:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects12710_AS12710:=nil;
		 pASideeffects12710_AS12710:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond12711_AUP12711:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond12711_AUP12711:=nil;
		 pAUnconditionalPrecond12711_AUP12711:=myrec;
		END;
	FUNCTION MOVUPD_MOVUPD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patsmaddrmode_;
		params^[1]:=patxmreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning12687_AAM12687;
		matchedAssembler:=pAAssemblesto12704_AA12704;
		END;
		MOVUPD_MOVUPD:=myrec;
	END;
	FUNCTION pATypeid12714_AT12714:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ smaddrmode  ilcg.pattern@a61373}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12714_AT12714:=myrec;
		END;
	FUNCTION pATypeid12716_AT12716:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmreg  ilcg.pattern@1d0f57e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12716_AT12716:=myrec;
		END;
	FUNCTION pAIeee32Tformat12725_AI32T12725:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat12725_AI32T12725:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12724_ATP12724:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype12724_ATP12724:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12723_APT12723:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12723_APT12723:=nil;
		 pAPredeclaredtypeTypeprim12723_APT12723:=myrec;
		END;
	FUNCTION pAOptionalsign12728_AO12728:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12728_AO12728:=nil;
		 pAOptionalsign12728_AO12728:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12727_AIN12727:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber12727_AIN12727:=myrec;
		END;
	FUNCTION pAArray12726_AA12726:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12726_AA12726:=nil;
		 pAArray12726_AA12726:=myrec;
		END;
	FUNCTION pAArrayType12722_AAT12722:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fieee32 ,4 );
		 pAArrayType12722_AAT12722:=myrec;
		END;
	FUNCTION pAReference12721_AR12721:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType12722_AAT12722;
		 pAReference12721_AR12721:=myrec;
		END;
	FUNCTION pAReftypeType12720_ART12720:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference12721_AR12721;
		 pAReftypeType12720_ART12720:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc12729_AIL12729:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc12729_AIL12729:=myrec;
		END;
		(*! try to cast to type: ref ieee32 vector ( 4 )*)
	FUNCTION pARefcastRefval12719_ARR12719:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType12720_ART12720;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc12729_AIL12729;
		 pARefcastRefval12719_ARR12719:=myrec;
		END;
	FUNCTION pAIeee32Tformat12735_AI32T12735:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat12735_AI32T12735:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12734_ATP12734:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype12734_ATP12734:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12733_APT12733:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12733_APT12733:=nil;
		 pAPredeclaredtypeTypeprim12733_APT12733:=myrec;
		END;
	FUNCTION pAOptionalsign12738_AO12738:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12738_AO12738:=nil;
		 pAOptionalsign12738_AO12738:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12737_AIN12737:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber12737_AIN12737:=myrec;
		END;
	FUNCTION pAArray12736_AA12736:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12736_AA12736:=nil;
		 pAArray12736_AA12736:=myrec;
		END;
	FUNCTION pAArrayType12732_AAT12732:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fieee32 ,4 );
		 pAArrayType12732_AAT12732:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc12742_AIL12742:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc12742_AIL12742:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12741_AR12741:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12742_AIL12742;
		 pARefval12741_AR12741:=myrec;
		END;
	FUNCTION pADerefRhs12740_ADR12740:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval12741_AR12741;
		 pADerefRhs12740_ADR12740:=myrec;
		END;
	FUNCTION pARhsValue12739_ARV12739:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs12740_ADR12740;
		 pARhsValue12739_ARV12739:=myrec;
		END;
		(*! try to cast to type: ieee32 vector ( 4 )*)
	FUNCTION pACastRhs12731_ACR12731:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType12732_AAT12732;
		myrec^.arg2:=pARhsValue12739_ARV12739;
		 pACastRhs12731_ACR12731:=myrec;
		END;
	FUNCTION pARhsValue12730_ARV12730:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs12731_ACR12731;
		 pARhsValue12730_ARV12730:=myrec;
		END;
	FUNCTION pAAssign12718_AA12718:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue12730_ARV12730;
		myrec^.dest:=pARefcastRefval12719_ARR12719;
		 pAAssign12718_AA12718:=myrec;
		END;
	FUNCTION pAAssignMeaning12717_AAM12717:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign12718_AA12718;
		 pAAssignMeaning12717_AAM12717:=myrec;
		END;
	FUNCTION pAAssemblypattern12744_AA12744:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movups  ' );
		pappendp(list,0);
		pappends(list,', ' );
		pappendp(list,1);
		pAAssemblypattern12744_AA12744:=list;
		END;
	FUNCTION pAAssemblesto12743_AA12743:pprintlist;
	begin
		pAAssemblesto12743_AA12743:=pAAssemblypattern12744_AA12744;
		END;
	FUNCTION pASideeffects12749_AS12749:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects12749_AS12749:=nil;
		 pASideeffects12749_AS12749:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond12750_AUP12750:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond12750_AUP12750:=nil;
		 pAUnconditionalPrecond12750_AUP12750:=myrec;
		END;
	FUNCTION STORUPS_STORUPS:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patxmreg_;
		params^[0]:=patsmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning12717_AAM12717;
		matchedAssembler:=pAAssemblesto12743_AA12743;
		END;
		STORUPS_STORUPS:=myrec;
	END;
	FUNCTION pATypeid12753_AT12753:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmreg  ilcg.pattern@1d0f57e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12753_AT12753:=myrec;
		END;
	FUNCTION pATypeid12755_AT12755:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmreg  ilcg.pattern@1d0f57e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12755_AT12755:=myrec;
		END;
	FUNCTION pAIeee32Tformat12764_AI32T12764:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat12764_AI32T12764:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12763_ATP12763:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype12763_ATP12763:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12762_APT12762:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12762_APT12762:=nil;
		 pAPredeclaredtypeTypeprim12762_APT12762:=myrec;
		END;
	FUNCTION pAOptionalsign12767_AO12767:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12767_AO12767:=nil;
		 pAOptionalsign12767_AO12767:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12766_AIN12766:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber12766_AIN12766:=myrec;
		END;
	FUNCTION pAArray12765_AA12765:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12765_AA12765:=nil;
		 pAArray12765_AA12765:=myrec;
		END;
	FUNCTION pAArrayType12761_AAT12761:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fieee32 ,4 );
		 pAArrayType12761_AAT12761:=myrec;
		END;
	FUNCTION pAReference12760_AR12760:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType12761_AAT12761;
		 pAReference12760_AR12760:=myrec;
		END;
	FUNCTION pAReftypeType12759_ART12759:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference12760_AR12760;
		 pAReftypeType12759_ART12759:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc12768_AIL12768:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc12768_AIL12768:=myrec;
		END;
		(*! try to cast to type: ref ieee32 vector ( 4 )*)
	FUNCTION pARefcastRefval12758_ARR12758:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType12759_ART12759;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc12768_AIL12768;
		 pARefcastRefval12758_ARR12758:=myrec;
		END;
	FUNCTION pAIeee32Tformat12774_AI32T12774:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat12774_AI32T12774:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12773_ATP12773:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype12773_ATP12773:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12772_APT12772:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12772_APT12772:=nil;
		 pAPredeclaredtypeTypeprim12772_APT12772:=myrec;
		END;
	FUNCTION pAOptionalsign12777_AO12777:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12777_AO12777:=nil;
		 pAOptionalsign12777_AO12777:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12776_AIN12776:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber12776_AIN12776:=myrec;
		END;
	FUNCTION pAArray12775_AA12775:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12775_AA12775:=nil;
		 pAArray12775_AA12775:=myrec;
		END;
	FUNCTION pAArrayType12771_AAT12771:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fieee32 ,4 );
		 pAArrayType12771_AAT12771:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc12781_AIL12781:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc12781_AIL12781:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12780_AR12780:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12781_AIL12781;
		 pARefval12780_AR12780:=myrec;
		END;
	FUNCTION pADerefRhs12779_ADR12779:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval12780_AR12780;
		 pADerefRhs12779_ADR12779:=myrec;
		END;
	FUNCTION pARhsValue12778_ARV12778:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs12779_ADR12779;
		 pARhsValue12778_ARV12778:=myrec;
		END;
		(*! try to cast to type: ieee32 vector ( 4 )*)
	FUNCTION pACastRhs12770_ACR12770:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType12771_AAT12771;
		myrec^.arg2:=pARhsValue12778_ARV12778;
		 pACastRhs12770_ACR12770:=myrec;
		END;
	FUNCTION pARhsValue12769_ARV12769:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs12770_ACR12770;
		 pARhsValue12769_ARV12769:=myrec;
		END;
	FUNCTION pAAssign12757_AA12757:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue12769_ARV12769;
		myrec^.dest:=pARefcastRefval12758_ARR12758;
		 pAAssign12757_AA12757:=myrec;
		END;
	FUNCTION pAAssignMeaning12756_AAM12756:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign12757_AA12757;
		 pAAssignMeaning12756_AAM12756:=myrec;
		END;
	FUNCTION pAAssemblypattern12783_AA12783:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movaps  ' );
		pappendp(list,0);
		pappends(list,', ' );
		pappendp(list,1);
		pAAssemblypattern12783_AA12783:=list;
		END;
	FUNCTION pAAssemblesto12782_AA12782:pprintlist;
	begin
		pAAssemblesto12782_AA12782:=pAAssemblypattern12783_AA12783;
		END;
	FUNCTION pASideeffects12788_AS12788:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects12788_AS12788:=nil;
		 pASideeffects12788_AS12788:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond12789_AUP12789:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond12789_AUP12789:=nil;
		 pAUnconditionalPrecond12789_AUP12789:=myrec;
		END;
	FUNCTION MOVAPS_MOVAPS:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patxmreg_;
		params^[0]:=patxmreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning12756_AAM12756;
		matchedAssembler:=pAAssemblesto12782_AA12782;
		END;
		MOVAPS_MOVAPS:=myrec;
	END;
	FUNCTION pATypeid12792_AT12792:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ sxmreg  ilcg.pattern@1d021b9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12792_AT12792:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc12796_AIL12796:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc12796_AIL12796:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12795_AR12795:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12796_AIL12796;
		 pARefval12795_AR12795:=myrec;
		END;
	FUNCTION pASqrtMonadic12798_ASM12798:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpSQRT;
		 pASqrtMonadic12798_ASM12798:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc12802_AIL12802:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc12802_AIL12802:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12801_AR12801:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12802_AIL12802;
		 pARefval12801_AR12801:=myrec;
		END;
	FUNCTION pADerefRhs12800_ADR12800:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval12801_AR12801;
		 pADerefRhs12800_ADR12800:=myrec;
		END;
	FUNCTION pARhsValue12799_ARV12799:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs12800_ADR12800;
		 pARhsValue12799_ARV12799:=myrec;
		END;
	FUNCTION pAMonadicValue12797_AMV12797:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue12799_ARV12799;
		myrec^.fn:=pASqrtMonadic12798_ASM12798;
		 pAMonadicValue12797_AMV12797:=myrec;
		END;
	FUNCTION pAAssign12794_AA12794:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pAMonadicValue12797_AMV12797;
		myrec^.dest:=pARefval12795_AR12795;
		 pAAssign12794_AA12794:=myrec;
		END;
	FUNCTION pAAssignMeaning12793_AAM12793:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign12794_AA12794;
		 pAAssignMeaning12793_AAM12793:=myrec;
		END;
	FUNCTION pAAssemblypattern12804_AA12804:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'sqrtss ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,0);
		pAAssemblypattern12804_AA12804:=list;
		END;
	FUNCTION pAAssemblesto12803_AA12803:pprintlist;
	begin
		pAAssemblesto12803_AA12803:=pAAssemblypattern12804_AA12804;
		END;
	FUNCTION pASideeffects12809_AS12809:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects12809_AS12809:=nil;
		 pASideeffects12809_AS12809:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond12810_AUP12810:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond12810_AUP12810:=nil;
		 pAUnconditionalPrecond12810_AUP12810:=myrec;
		END;
	FUNCTION SSQRT_SSQRT:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patsxmreg_;
		paramcount:=2;
		meaning:=pAAssignMeaning12793_AAM12793;
		matchedAssembler:=pAAssemblesto12803_AA12803;
		END;
		SSQRT_SSQRT:=myrec;
	END;
	FUNCTION pATypeid12813_AT12813:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmmr64  ilcg.pattern@f2818d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12813_AT12813:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc12817_AIL12817:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc12817_AIL12817:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12816_AR12816:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12817_AIL12817;
		 pARefval12816_AR12816:=myrec;
		END;
	FUNCTION pASqrtMonadic12819_ASM12819:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpSQRT;
		 pASqrtMonadic12819_ASM12819:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc12823_AIL12823:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc12823_AIL12823:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12822_AR12822:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12823_AIL12823;
		 pARefval12822_AR12822:=myrec;
		END;
	FUNCTION pADerefRhs12821_ADR12821:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval12822_AR12822;
		 pADerefRhs12821_ADR12821:=myrec;
		END;
	FUNCTION pARhsValue12820_ARV12820:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs12821_ADR12821;
		 pARhsValue12820_ARV12820:=myrec;
		END;
	FUNCTION pAMonadicValue12818_AMV12818:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue12820_ARV12820;
		myrec^.fn:=pASqrtMonadic12819_ASM12819;
		 pAMonadicValue12818_AMV12818:=myrec;
		END;
	FUNCTION pAAssign12815_AA12815:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pAMonadicValue12818_AMV12818;
		myrec^.dest:=pARefval12816_AR12816;
		 pAAssign12815_AA12815:=myrec;
		END;
	FUNCTION pAAssignMeaning12814_AAM12814:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign12815_AA12815;
		 pAAssignMeaning12814_AAM12814:=myrec;
		END;
	FUNCTION pAAssemblypattern12825_AA12825:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'sqrtsd ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,0);
		pAAssemblypattern12825_AA12825:=list;
		END;
	FUNCTION pAAssemblesto12824_AA12824:pprintlist;
	begin
		pAAssemblesto12824_AA12824:=pAAssemblypattern12825_AA12825;
		END;
	FUNCTION pASideeffects12830_AS12830:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects12830_AS12830:=nil;
		 pASideeffects12830_AS12830:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond12831_AUP12831:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond12831_AUP12831:=nil;
		 pAUnconditionalPrecond12831_AUP12831:=myrec;
		END;
	FUNCTION SDSQRT_SDSQRT:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patxmmr64_64;
		paramcount:=2;
		meaning:=pAAssignMeaning12814_AAM12814;
		matchedAssembler:=pAAssemblesto12824_AA12824;
		END;
		SDSQRT_SDSQRT:=myrec;
	END;
	FUNCTION pATypeid12834_AT12834:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ smaddrmode  ilcg.pattern@a61373}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12834_AT12834:=myrec;
		END;
	FUNCTION pATypeid12836_AT12836:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmreg  ilcg.pattern@1d0f57e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12836_AT12836:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc12840_AIL12840:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc12840_AIL12840:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12839_AR12839:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12840_AIL12840;
		 pARefval12839_AR12839:=myrec;
		END;
	FUNCTION pAIeee32Tformat12846_AI32T12846:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat12846_AI32T12846:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12845_ATP12845:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype12845_ATP12845:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim12844_APT12844:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim12844_APT12844:=nil;
		 pAPredeclaredtypeTypeprim12844_APT12844:=myrec;
		END;
	FUNCTION pAOptionalsign12849_AO12849:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign12849_AO12849:=nil;
		 pAOptionalsign12849_AO12849:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber12848_AIN12848:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber12848_AIN12848:=myrec;
		END;
	FUNCTION pAArray12847_AA12847:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray12847_AA12847:=nil;
		 pAArray12847_AA12847:=myrec;
		END;
	FUNCTION pAArrayType12843_AAT12843:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fieee32 ,4 );
		 pAArrayType12843_AAT12843:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc12853_AIL12853:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc12853_AIL12853:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12852_AR12852:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12853_AIL12853;
		 pARefval12852_AR12852:=myrec;
		END;
	FUNCTION pADerefRhs12851_ADR12851:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval12852_AR12852;
		 pADerefRhs12851_ADR12851:=myrec;
		END;
	FUNCTION pARhsValue12850_ARV12850:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs12851_ADR12851;
		 pARhsValue12850_ARV12850:=myrec;
		END;
		(*! try to cast to type: ieee32 vector ( 4 )*)
	FUNCTION pACastRhs12842_ACR12842:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType12843_AAT12843;
		myrec^.arg2:=pARhsValue12850_ARV12850;
		 pACastRhs12842_ACR12842:=myrec;
		END;
	FUNCTION pARhsValue12841_ARV12841:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs12842_ACR12842;
		 pARhsValue12841_ARV12841:=myrec;
		END;
	FUNCTION pAAssign12838_AA12838:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue12841_ARV12841;
		myrec^.dest:=pARefval12839_AR12839;
		 pAAssign12838_AA12838:=myrec;
		END;
	FUNCTION pAAssignMeaning12837_AAM12837:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign12838_AA12838;
		 pAAssignMeaning12837_AAM12837:=myrec;
		END;
	FUNCTION pAAssemblypattern12855_AA12855:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movups  ' );
		pappendp(list,1);
		pappends(list,', ' );
		pappendp(list,0);
		pAAssemblypattern12855_AA12855:=list;
		END;
	FUNCTION pAAssemblesto12854_AA12854:pprintlist;
	begin
		pAAssemblesto12854_AA12854:=pAAssemblypattern12855_AA12855;
		END;
	FUNCTION pASideeffects12860_AS12860:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects12860_AS12860:=nil;
		 pASideeffects12860_AS12860:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond12861_AUP12861:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond12861_AUP12861:=nil;
		 pAUnconditionalPrecond12861_AUP12861:=myrec;
		END;
	FUNCTION MOVUPS_MOVUPS:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patxmreg_;
		params^[0]:=patsmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning12837_AAM12837;
		matchedAssembler:=pAAssemblesto12854_AA12854;
		END;
		MOVUPS_MOVUPS:=myrec;
	END;
	FUNCTION pATypeid12864_AT12864:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ smaddrmode  ilcg.pattern@a61373}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12864_AT12864:=myrec;
		END;
	FUNCTION pATypeid12866_AT12866:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ sxmreg  ilcg.pattern@1d021b9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12866_AT12866:=myrec;
		END;
	FUNCTION pAIeee32Tformat12874_AI32T12874:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat12874_AI32T12874:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12873_ATP12873:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype12873_ATP12873:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType12872_APT12872:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType12872_APT12872:=myrec;
		END;
	FUNCTION pAReference12871_AR12871:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType12872_APT12872;
		 pAReference12871_AR12871:=myrec;
		END;
	FUNCTION pAReftypeType12870_ART12870:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference12871_AR12871;
		 pAReftypeType12870_ART12870:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc12875_AIL12875:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc12875_AIL12875:=myrec;
		END;
		(*! try to cast to type: ref ieee32*)
	FUNCTION pARefcastRefval12869_ARR12869:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType12870_ART12870;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc12875_AIL12875;
		 pARefcastRefval12869_ARR12869:=myrec;
		END;
	FUNCTION pAIeee32Tformat12883_AI32T12883:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat12883_AI32T12883:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12882_ATP12882:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype12882_ATP12882:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType12881_APT12881:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType12881_APT12881:=myrec;
		END;
	FUNCTION pAReference12880_AR12880:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType12881_APT12881;
		 pAReference12880_AR12880:=myrec;
		END;
	FUNCTION pAReftypeType12879_ART12879:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference12880_AR12880;
		 pAReftypeType12879_ART12879:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc12884_AIL12884:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc12884_AIL12884:=myrec;
		END;
		(*! try to cast to type: ref ieee32*)
	FUNCTION pARefcastRefval12878_ARR12878:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType12879_ART12879;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc12884_AIL12884;
		 pARefcastRefval12878_ARR12878:=myrec;
		END;
	FUNCTION pADerefRhs12877_ADR12877:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval12878_ARR12878;
		 pADerefRhs12877_ADR12877:=myrec;
		END;
	FUNCTION pARhsValue12876_ARV12876:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs12877_ADR12877;
		 pARhsValue12876_ARV12876:=myrec;
		END;
	FUNCTION pAAssign12868_AA12868:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue12876_ARV12876;
		myrec^.dest:=pARefcastRefval12869_ARR12869;
		 pAAssign12868_AA12868:=myrec;
		END;
	FUNCTION pAAssignMeaning12867_AAM12867:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign12868_AA12868;
		 pAAssignMeaning12867_AAM12867:=myrec;
		END;
	FUNCTION pAAssemblypattern12886_AA12886:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movss  ' );
		pappendp(list,1);
		pappends(list,', ' );
		pappendp(list,0);
		pAAssemblypattern12886_AA12886:=list;
		END;
	FUNCTION pAAssemblesto12885_AA12885:pprintlist;
	begin
		pAAssemblesto12885_AA12885:=pAAssemblypattern12886_AA12886;
		END;
	FUNCTION pASideeffects12891_AS12891:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects12891_AS12891:=nil;
		 pASideeffects12891_AS12891:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond12892_AUP12892:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond12892_AUP12892:=nil;
		 pAUnconditionalPrecond12892_AUP12892:=myrec;
		END;
	FUNCTION MOVSS_MOVSS:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patsxmreg_;
		params^[0]:=patsmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning12867_AAM12867;
		matchedAssembler:=pAAssemblesto12885_AA12885;
		END;
		MOVSS_MOVSS:=myrec;
	END;
	FUNCTION pATypeid12895_AT12895:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmmr64m  ilcg.pattern@7c5965}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12895_AT12895:=myrec;
		END;
	FUNCTION pATypeid12897_AT12897:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmmr64  ilcg.pattern@f2818d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12897_AT12897:=myrec;
		END;
	FUNCTION pAIeee63Tformat12905_AI63T12905:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat12905_AI63T12905:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12904_ATP12904:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype12904_ATP12904:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType12903_APT12903:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType12903_APT12903:=myrec;
		END;
	FUNCTION pAReference12902_AR12902:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType12903_APT12903;
		 pAReference12902_AR12902:=myrec;
		END;
	FUNCTION pAReftypeType12901_ART12901:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference12902_AR12902;
		 pAReftypeType12901_ART12901:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc12906_AIL12906:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc12906_AIL12906:=myrec;
		END;
		(*! try to cast to type: ref ieee64*)
	FUNCTION pARefcastRefval12900_ARR12900:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType12901_ART12901;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc12906_AIL12906;
		 pARefcastRefval12900_ARR12900:=myrec;
		END;
	FUNCTION pAIeee63Tformat12911_AI63T12911:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat12911_AI63T12911:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12910_ATP12910:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype12910_ATP12910:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType12909_APT12909:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType12909_APT12909:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc12915_AIL12915:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc12915_AIL12915:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12914_AR12914:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12915_AIL12915;
		 pARefval12914_AR12914:=myrec;
		END;
	FUNCTION pADerefRhs12913_ADR12913:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval12914_AR12914;
		 pADerefRhs12913_ADR12913:=myrec;
		END;
	FUNCTION pARhsValue12912_ARV12912:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs12913_ADR12913;
		 pARhsValue12912_ARV12912:=myrec;
		END;
		(*! try to cast to type: ieee64*)
	FUNCTION pACastRhs12908_ACR12908:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType12909_APT12909;
		myrec^.arg2:=pARhsValue12912_ARV12912;
		 pACastRhs12908_ACR12908:=myrec;
		END;
	FUNCTION pARhsValue12907_ARV12907:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs12908_ACR12908;
		 pARhsValue12907_ARV12907:=myrec;
		END;
	FUNCTION pAAssign12899_AA12899:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue12907_ARV12907;
		myrec^.dest:=pARefcastRefval12900_ARR12900;
		 pAAssign12899_AA12899:=myrec;
		END;
	FUNCTION pAAssignMeaning12898_AAM12898:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign12899_AA12899;
		 pAAssignMeaning12898_AAM12898:=myrec;
		END;
	FUNCTION pAAssemblypattern12917_AA12917:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movsd  ' );
		pappendp(list,1);
		pappends(list,', ' );
		pappendp(list,0);
		pappends(list,'; MOVSD' );
		pAAssemblypattern12917_AA12917:=list;
		END;
	FUNCTION pAAssemblesto12916_AA12916:pprintlist;
	begin
		pAAssemblesto12916_AA12916:=pAAssemblypattern12917_AA12917;
		END;
	FUNCTION pASideeffects12923_AS12923:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects12923_AS12923:=nil;
		 pASideeffects12923_AS12923:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond12924_AUP12924:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond12924_AUP12924:=nil;
		 pAUnconditionalPrecond12924_AUP12924:=myrec;
		END;
	FUNCTION MOVSD_MOVSD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patxmmr64_64;
		params^[0]:=patxmmr64m_64;
		paramcount:=3;
		meaning:=pAAssignMeaning12898_AAM12898;
		matchedAssembler:=pAAssemblesto12916_AA12916;
		END;
		MOVSD_MOVSD:=myrec;
	END;
	FUNCTION pATypeid12927_AT12927:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12927_AT12927:=myrec;
		END;
	FUNCTION pATypeid12929_AT12929:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmmr64  ilcg.pattern@f2818d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12929_AT12929:=myrec;
		END;
	FUNCTION pAIeee63Tformat12937_AI63T12937:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat12937_AI63T12937:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12936_ATP12936:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype12936_ATP12936:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType12935_APT12935:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType12935_APT12935:=myrec;
		END;
	FUNCTION pAReference12934_AR12934:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType12935_APT12935;
		 pAReference12934_AR12934:=myrec;
		END;
	FUNCTION pAReftypeType12933_ART12933:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference12934_AR12934;
		 pAReftypeType12933_ART12933:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc12938_AIL12938:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc12938_AIL12938:=myrec;
		END;
		(*! try to cast to type: ref ieee64*)
	FUNCTION pARefcastRefval12932_ARR12932:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType12933_ART12933;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc12938_AIL12938;
		 pARefcastRefval12932_ARR12932:=myrec;
		END;
	FUNCTION pAIeee63Tformat12943_AI63T12943:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat12943_AI63T12943:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12942_ATP12942:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype12942_ATP12942:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType12941_APT12941:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType12941_APT12941:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc12947_AIL12947:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc12947_AIL12947:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12946_AR12946:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12947_AIL12947;
		 pARefval12946_AR12946:=myrec;
		END;
	FUNCTION pADerefRhs12945_ADR12945:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval12946_AR12946;
		 pADerefRhs12945_ADR12945:=myrec;
		END;
	FUNCTION pARhsValue12944_ARV12944:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs12945_ADR12945;
		 pARhsValue12944_ARV12944:=myrec;
		END;
		(*! try to cast to type: ieee64*)
	FUNCTION pACastRhs12940_ACR12940:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType12941_APT12941;
		myrec^.arg2:=pARhsValue12944_ARV12944;
		 pACastRhs12940_ACR12940:=myrec;
		END;
	FUNCTION pARhsValue12939_ARV12939:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs12940_ACR12940;
		 pARhsValue12939_ARV12939:=myrec;
		END;
	FUNCTION pAAssign12931_AA12931:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue12939_ARV12939;
		myrec^.dest:=pARefcastRefval12932_ARR12932;
		 pAAssign12931_AA12931:=myrec;
		END;
	FUNCTION pAAssignMeaning12930_AAM12930:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign12931_AA12931;
		 pAAssignMeaning12930_AAM12930:=myrec;
		END;
	FUNCTION pAAssemblypattern12949_AA12949:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movsd  ' );
		pappendp(list,1);
		pappends(list,', ' );
		pappendp(list,0);
		pappends(list,'; MOVSDl' );
		pAAssemblypattern12949_AA12949:=list;
		END;
	FUNCTION pAAssemblesto12948_AA12948:pprintlist;
	begin
		pAAssemblesto12948_AA12948:=pAAssemblypattern12949_AA12949;
		END;
	FUNCTION pASideeffects12955_AS12955:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects12955_AS12955:=nil;
		 pASideeffects12955_AS12955:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond12956_AUP12956:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond12956_AUP12956:=nil;
		 pAUnconditionalPrecond12956_AUP12956:=myrec;
		END;
	FUNCTION MOVSDl_MOVSD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patxmmr64_64;
		params^[0]:=patmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning12930_AAM12930;
		matchedAssembler:=pAAssemblesto12948_AA12948;
		END;
		MOVSDl_MOVSD:=myrec;
	END;
	FUNCTION pATypeid12959_AT12959:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12959_AT12959:=myrec;
		END;
	FUNCTION pATypeid12961_AT12961:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ lowreg  ilcg.pattern@945fea}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12961_AT12961:=myrec;
		END;
		(*! Match dest *)
	FUNCTION pAIdLoc12965_AIL12965:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc12965_AIL12965:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12964_AR12964:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12965_AIL12965;
		 pARefval12964_AR12964:=myrec;
		END;
		(*! Match src *)
	FUNCTION pAIdLoc12969_AIL12969:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc12969_AIL12969:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12968_AR12968:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12969_AIL12969;
		 pARefval12968_AR12968:=myrec;
		END;
	FUNCTION pADerefRhs12967_ADR12967:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval12968_AR12968;
		 pADerefRhs12967_ADR12967:=myrec;
		END;
	FUNCTION pARhsValue12966_ARV12966:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs12967_ADR12967;
		 pARhsValue12966_ARV12966:=myrec;
		END;
	FUNCTION pAAssign12963_AA12963:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue12966_ARV12966;
		myrec^.dest:=pARefval12964_AR12964;
		 pAAssign12963_AA12963:=myrec;
		END;
	FUNCTION pAAssignMeaning12962_AAM12962:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign12963_AA12963;
		 pAAssignMeaning12962_AAM12962:=myrec;
		END;
	FUNCTION pAAssemblypattern12971_AA12971:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movd ' );
		pappendp(list,1);
		pappends(list,', dword ' );
		pappendp(list,0);
		pAAssemblypattern12971_AA12971:=list;
		END;
	FUNCTION pAAssemblesto12970_AA12970:pprintlist;
	begin
		pAAssemblesto12970_AA12970:=pAAssemblypattern12971_AA12971;
		END;
	FUNCTION pASideeffects12976_AS12976:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects12976_AS12976:=nil;
		 pASideeffects12976_AS12976:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond12977_AUP12977:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond12977_AUP12977:=nil;
		 pAUnconditionalPrecond12977_AUP12977:=myrec;
		END;
	FUNCTION MOVDl_MOVD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patlowreg_;
		params^[0]:=patreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning12962_AAM12962;
		matchedAssembler:=pAAssemblesto12970_AA12970;
		END;
		MOVDl_MOVD:=myrec;
	END;
	FUNCTION pATypeid12980_AT12980:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12980_AT12980:=myrec;
		END;
	FUNCTION pATypeid12982_AT12982:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ lowreg  ilcg.pattern@945fea}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid12982_AT12982:=myrec;
		END;
		(*! Match dest *)
	FUNCTION pAIdLoc12986_AIL12986:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc12986_AIL12986:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12985_AR12985:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12986_AIL12986;
		 pARefval12985_AR12985:=myrec;
		END;
		(*! Match src *)
	FUNCTION pAIdLoc12990_AIL12990:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc12990_AIL12990:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval12989_AR12989:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc12990_AIL12990;
		 pARefval12989_AR12989:=myrec;
		END;
	FUNCTION pADerefRhs12988_ADR12988:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval12989_AR12989;
		 pADerefRhs12988_ADR12988:=myrec;
		END;
	FUNCTION pARhsValue12987_ARV12987:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs12988_ADR12988;
		 pARhsValue12987_ARV12987:=myrec;
		END;
	FUNCTION pAAssign12984_AA12984:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue12987_ARV12987;
		myrec^.dest:=pARefval12985_AR12985;
		 pAAssign12984_AA12984:=myrec;
		END;
	FUNCTION pAAssignMeaning12983_AAM12983:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign12984_AA12984;
		 pAAssignMeaning12983_AAM12983:=myrec;
		END;
	FUNCTION pAAssemblypattern12992_AA12992:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movd dword ' );
		pappendp(list,0);
		pappends(list,',  ' );
		pappendp(list,1);
		pAAssemblypattern12992_AA12992:=list;
		END;
	FUNCTION pAAssemblesto12991_AA12991:pprintlist;
	begin
		pAAssemblesto12991_AA12991:=pAAssemblypattern12992_AA12992;
		END;
	FUNCTION pASideeffects12997_AS12997:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects12997_AS12997:=nil;
		 pASideeffects12997_AS12997:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond12998_AUP12998:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond12998_AUP12998:=nil;
		 pAUnconditionalPrecond12998_AUP12998:=myrec;
		END;
	FUNCTION MOVDs_MOVD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		params^[1]:=patlowreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning12983_AAM12983;
		matchedAssembler:=pAAssemblesto12991_AA12991;
		END;
		MOVDs_MOVD:=myrec;
	END;
	FUNCTION pATypeid13001_AT13001:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ float  ilcg.pattern@19d0cf0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13001_AT13001:=myrec;
		END;
	FUNCTION pATypeid13003_AT13003:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ float  ilcg.pattern@19d0cf0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13003_AT13003:=myrec;
		END;
	FUNCTION pATypeid13005_AT13005:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ sxmreg  ilcg.pattern@1d021b9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13005_AT13005:=myrec;
		END;
	FUNCTION pAIeee32Tformat13013_AI32T13013:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat13013_AI32T13013:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype13012_ATP13012:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype13012_ATP13012:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType13011_APT13011:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType13011_APT13011:=myrec;
		END;
	FUNCTION pAReference13010_AR13010:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType13011_APT13011;
		 pAReference13010_AR13010:=myrec;
		END;
	FUNCTION pAReftypeType13009_ART13009:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference13010_AR13010;
		 pAReftypeType13009_ART13009:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc13014_AIL13014:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc13014_AIL13014:=myrec;
		END;
		(*! try to cast to type: ref ieee32*)
	FUNCTION pARefcastRefval13008_ARR13008:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType13009_ART13009;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc13014_AIL13014;
		 pARefcastRefval13008_ARR13008:=myrec;
		END;
	FUNCTION pATypeid13018_AT13018:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@178aa0f}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid13018_AT13018:=myrec;
		END;
	FUNCTION pATypeidType13017_ATT13017:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13018_AT13018;
		 pATypeidType13017_ATT13017:=myrec;
		END;
	FUNCTION pAConstRhs13020_ACR13020:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(0);;
		 pAConstRhs13020_ACR13020:=myrec;
		END;
	FUNCTION pARhsValue13019_ARV13019:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs13020_ACR13020;
		 pARhsValue13019_ARV13019:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs13016_ACR13016:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType13017_ATT13017;
		myrec^.arg2:=pARhsValue13019_ARV13019;
		 pACastRhs13016_ACR13016:=myrec;
		END;
	FUNCTION pARhsValue13015_ARV13015:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs13016_ACR13016;
		 pARhsValue13015_ARV13015:=myrec;
		END;
	FUNCTION pAAssign13007_AA13007:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue13015_ARV13015;
		myrec^.dest:=pARefcastRefval13008_ARR13008;
		 pAAssign13007_AA13007:=myrec;
		END;
	FUNCTION pAAssignMeaning13006_AAM13006:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign13007_AA13007;
		 pAAssignMeaning13006_AAM13006:=myrec;
		END;
	FUNCTION pAAssemblypattern13022_AA13022:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'xrloadlit ' );
		pappendp(list,2);
		pappends(list,',' );
		pappendp(list,0);
		pAAssemblypattern13022_AA13022:=list;
		END;
	FUNCTION pAAssemblesto13021_AA13021:pprintlist;
	begin
		pAAssemblesto13021_AA13021:=pAAssemblypattern13022_AA13022;
		END;
	FUNCTION pASideeffects13027_AS13027:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects13027_AS13027:=nil;
		 pASideeffects13027_AS13027:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond13028_AUP13028:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond13028_AUP13028:=nil;
		 pAUnconditionalPrecond13028_AUP13028:=myrec;
		END;
	FUNCTION XRLOADLIT_XRLOADLIT:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patsxmreg_;
		params^[1]:=patfloat_;
		params^[0]:=patfloat_;
		paramcount:=4;
		meaning:=pAAssignMeaning13006_AAM13006;
		matchedAssembler:=pAAssemblesto13021_AA13021;
		END;
		XRLOADLIT_XRLOADLIT:=myrec;
	END;
	FUNCTION pATypeid13031_AT13031:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ real  ilcg.pattern@2cb5c6}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13031_AT13031:=myrec;
		END;
	FUNCTION pATypeid13033_AT13033:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ real  ilcg.pattern@2cb5c6}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13033_AT13033:=myrec;
		END;
	FUNCTION pATypeid13035_AT13035:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmmr64  ilcg.pattern@f2818d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13035_AT13035:=myrec;
		END;
	FUNCTION pAIeee63Tformat13043_AI63T13043:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat13043_AI63T13043:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype13042_ATP13042:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype13042_ATP13042:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType13041_APT13041:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType13041_APT13041:=myrec;
		END;
	FUNCTION pAReference13040_AR13040:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType13041_APT13041;
		 pAReference13040_AR13040:=myrec;
		END;
	FUNCTION pAReftypeType13039_ART13039:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference13040_AR13040;
		 pAReftypeType13039_ART13039:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc13044_AIL13044:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc13044_AIL13044:=myrec;
		END;
		(*! try to cast to type: ref ieee64*)
	FUNCTION pARefcastRefval13038_ARR13038:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType13039_ART13039;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc13044_AIL13044;
		 pARefcastRefval13038_ARR13038:=myrec;
		END;
	FUNCTION pATypeid13048_AT13048:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@14be8c5}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid13048_AT13048:=myrec;
		END;
	FUNCTION pATypeidType13047_ATT13047:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13048_AT13048;
		 pATypeidType13047_ATT13047:=myrec;
		END;
	FUNCTION pAConstRhs13050_ACR13050:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(0);;
		 pAConstRhs13050_ACR13050:=myrec;
		END;
	FUNCTION pARhsValue13049_ARV13049:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs13050_ACR13050;
		 pARhsValue13049_ARV13049:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs13046_ACR13046:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType13047_ATT13047;
		myrec^.arg2:=pARhsValue13049_ARV13049;
		 pACastRhs13046_ACR13046:=myrec;
		END;
	FUNCTION pARhsValue13045_ARV13045:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs13046_ACR13046;
		 pARhsValue13045_ARV13045:=myrec;
		END;
	FUNCTION pAAssign13037_AA13037:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue13045_ARV13045;
		myrec^.dest:=pARefcastRefval13038_ARR13038;
		 pAAssign13037_AA13037:=myrec;
		END;
	FUNCTION pAAssignMeaning13036_AAM13036:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign13037_AA13037;
		 pAAssignMeaning13036_AAM13036:=myrec;
		END;
	FUNCTION pAAssemblypattern13052_AA13052:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'xrdloadlit ' );
		pappendp(list,2);
		pappends(list,',' );
		pappendp(list,0);
		pAAssemblypattern13052_AA13052:=list;
		END;
	FUNCTION pAAssemblesto13051_AA13051:pprintlist;
	begin
		pAAssemblesto13051_AA13051:=pAAssemblypattern13052_AA13052;
		END;
	FUNCTION pASideeffects13057_AS13057:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects13057_AS13057:=nil;
		 pASideeffects13057_AS13057:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond13058_AUP13058:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond13058_AUP13058:=nil;
		 pAUnconditionalPrecond13058_AUP13058:=myrec;
		END;
	FUNCTION XRDLOADLIT_XRDLOADLIT:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patxmmr64_64;
		params^[1]:=patreal_;
		params^[0]:=patreal_;
		paramcount:=4;
		meaning:=pAAssignMeaning13036_AAM13036;
		matchedAssembler:=pAAssemblesto13051_AA13051;
		END;
		XRDLOADLIT_XRDLOADLIT:=myrec;
	END;
	FUNCTION pATypeid13061_AT13061:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmmr64m  ilcg.pattern@7c5965}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13061_AT13061:=myrec;
		END;
	FUNCTION pATypeid13063_AT13063:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13063_AT13063:=myrec;
		END;
	FUNCTION pASigned13072_AS13072:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned13072_AS13072:=myrec;
		END;
	FUNCTION pASignedTformat13071_AST13071:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned13072_AS13072;
		 pASignedTformat13071_AST13071:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype13070_ATP13070:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype13070_ATP13070:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType13069_APT13069:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType13069_APT13069:=myrec;
		END;
	FUNCTION pAReference13068_AR13068:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType13069_APT13069;
		 pAReference13068_AR13068:=myrec;
		END;
	FUNCTION pAReftypeType13067_ART13067:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference13068_AR13068;
		 pAReftypeType13067_ART13067:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc13073_AIL13073:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc13073_AIL13073:=myrec;
		END;
		(*! try to cast to type: ref int32*)
	FUNCTION pARefcastRefval13066_ARR13066:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType13067_ART13067;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc13073_AIL13073;
		 pARefcastRefval13066_ARR13066:=myrec;
		END;
	FUNCTION pASigned13079_AS13079:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned13079_AS13079:=myrec;
		END;
	FUNCTION pASignedTformat13078_AST13078:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned13079_AS13079;
		 pASignedTformat13078_AST13078:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype13077_ATP13077:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype13077_ATP13077:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType13076_APT13076:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType13076_APT13076:=myrec;
		END;
	FUNCTION pARoundMonadic13081_ARM13081:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpROUND;
		 pARoundMonadic13081_ARM13081:=myrec;
		END;
	FUNCTION pAIeee63Tformat13086_AI63T13086:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat13086_AI63T13086:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype13085_ATP13085:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype13085_ATP13085:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType13084_APT13084:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType13084_APT13084:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc13090_AIL13090:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc13090_AIL13090:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval13089_AR13089:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc13090_AIL13090;
		 pARefval13089_AR13089:=myrec;
		END;
	FUNCTION pADerefRhs13088_ADR13088:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval13089_AR13089;
		 pADerefRhs13088_ADR13088:=myrec;
		END;
	FUNCTION pARhsValue13087_ARV13087:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs13088_ADR13088;
		 pARhsValue13087_ARV13087:=myrec;
		END;
		(*! try to cast to type: ieee64*)
	FUNCTION pACastRhs13083_ACR13083:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType13084_APT13084;
		myrec^.arg2:=pARhsValue13087_ARV13087;
		 pACastRhs13083_ACR13083:=myrec;
		END;
	FUNCTION pARhsValue13082_ARV13082:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs13083_ACR13083;
		 pARhsValue13082_ARV13082:=myrec;
		END;
	FUNCTION pAMonadicValue13080_AMV13080:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue13082_ARV13082;
		myrec^.fn:=pARoundMonadic13081_ARM13081;
		 pAMonadicValue13080_AMV13080:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs13075_ACR13075:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType13076_APT13076;
		myrec^.arg2:=pAMonadicValue13080_AMV13080;
		 pACastRhs13075_ACR13075:=myrec;
		END;
	FUNCTION pARhsValue13074_ARV13074:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs13075_ACR13075;
		 pARhsValue13074_ARV13074:=myrec;
		END;
	FUNCTION pAAssign13065_AA13065:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue13074_ARV13074;
		myrec^.dest:=pARefcastRefval13066_ARR13066;
		 pAAssign13065_AA13065:=myrec;
		END;
	FUNCTION pAAssignMeaning13064_AAM13064:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign13065_AA13065;
		 pAAssignMeaning13064_AAM13064:=myrec;
		END;
	FUNCTION pAAssemblypattern13092_AA13092:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cvtsd2s1  ' );
		pappendp(list,1);
		pappends(list,', ' );
		pappendp(list,0);
		pAAssemblypattern13092_AA13092:=list;
		END;
	FUNCTION pAAssemblesto13091_AA13091:pprintlist;
	begin
		pAAssemblesto13091_AA13091:=pAAssemblypattern13092_AA13092;
		END;
	FUNCTION pASideeffects13097_AS13097:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects13097_AS13097:=nil;
		 pASideeffects13097_AS13097:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond13098_AUP13098:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond13098_AUP13098:=nil;
		 pAUnconditionalPrecond13098_AUP13098:=myrec;
		END;
	FUNCTION CVTSD2SI_CVTSD2SI:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patreg_;
		params^[0]:=patxmmr64m_64;
		paramcount:=3;
		meaning:=pAAssignMeaning13064_AAM13064;
		matchedAssembler:=pAAssemblesto13091_AA13091;
		END;
		CVTSD2SI_CVTSD2SI:=myrec;
	END;
	FUNCTION pATypeid13101_AT13101:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13101_AT13101:=myrec;
		END;
	FUNCTION pATypeid13103_AT13103:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmmr64  ilcg.pattern@f2818d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13103_AT13103:=myrec;
		END;
	FUNCTION pAIeee63Tformat13111_AI63T13111:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat13111_AI63T13111:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype13110_ATP13110:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype13110_ATP13110:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType13109_APT13109:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType13109_APT13109:=myrec;
		END;
	FUNCTION pAReference13108_AR13108:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType13109_APT13109;
		 pAReference13108_AR13108:=myrec;
		END;
	FUNCTION pAReftypeType13107_ART13107:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference13108_AR13108;
		 pAReftypeType13107_ART13107:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc13112_AIL13112:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc13112_AIL13112:=myrec;
		END;
		(*! try to cast to type: ref ieee64*)
	FUNCTION pARefcastRefval13106_ARR13106:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType13107_ART13107;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc13112_AIL13112;
		 pARefcastRefval13106_ARR13106:=myrec;
		END;
	FUNCTION pAIeee63Tformat13117_AI63T13117:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat13117_AI63T13117:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype13116_ATP13116:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype13116_ATP13116:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType13115_APT13115:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType13115_APT13115:=myrec;
		END;
	FUNCTION pAFloatMonadic13119_AFM13119:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpFLOAT;
		 pAFloatMonadic13119_AFM13119:=myrec;
		END;
	FUNCTION pASigned13125_AS13125:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned13125_AS13125:=myrec;
		END;
	FUNCTION pASignedTformat13124_AST13124:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned13125_AS13125;
		 pASignedTformat13124_AST13124:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype13123_ATP13123:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype13123_ATP13123:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType13122_APT13122:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType13122_APT13122:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc13129_AIL13129:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc13129_AIL13129:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval13128_AR13128:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc13129_AIL13129;
		 pARefval13128_AR13128:=myrec;
		END;
	FUNCTION pADerefRhs13127_ADR13127:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval13128_AR13128;
		 pADerefRhs13127_ADR13127:=myrec;
		END;
	FUNCTION pARhsValue13126_ARV13126:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs13127_ADR13127;
		 pARhsValue13126_ARV13126:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs13121_ACR13121:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType13122_APT13122;
		myrec^.arg2:=pARhsValue13126_ARV13126;
		 pACastRhs13121_ACR13121:=myrec;
		END;
	FUNCTION pARhsValue13120_ARV13120:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs13121_ACR13121;
		 pARhsValue13120_ARV13120:=myrec;
		END;
	FUNCTION pAMonadicValue13118_AMV13118:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue13120_ARV13120;
		myrec^.fn:=pAFloatMonadic13119_AFM13119;
		 pAMonadicValue13118_AMV13118:=myrec;
		END;
		(*! try to cast to type: ieee64*)
	FUNCTION pACastRhs13114_ACR13114:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType13115_APT13115;
		myrec^.arg2:=pAMonadicValue13118_AMV13118;
		 pACastRhs13114_ACR13114:=myrec;
		END;
	FUNCTION pARhsValue13113_ARV13113:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs13114_ACR13114;
		 pARhsValue13113_ARV13113:=myrec;
		END;
	FUNCTION pAAssign13105_AA13105:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue13113_ARV13113;
		myrec^.dest:=pARefcastRefval13106_ARR13106;
		 pAAssign13105_AA13105:=myrec;
		END;
	FUNCTION pAAssignMeaning13104_AAM13104:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign13105_AA13105;
		 pAAssignMeaning13104_AAM13104:=myrec;
		END;
	FUNCTION pAAssemblypattern13131_AA13131:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cvtsi2sd  ' );
		pappendp(list,1);
		pappends(list,', ' );
		pappendp(list,0);
		pAAssemblypattern13131_AA13131:=list;
		END;
	FUNCTION pAAssemblesto13130_AA13130:pprintlist;
	begin
		pAAssemblesto13130_AA13130:=pAAssemblypattern13131_AA13131;
		END;
	FUNCTION pASideeffects13136_AS13136:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects13136_AS13136:=nil;
		 pASideeffects13136_AS13136:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond13137_AUP13137:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond13137_AUP13137:=nil;
		 pAUnconditionalPrecond13137_AUP13137:=myrec;
		END;
	FUNCTION CVTSI2SD_CVTSI2SD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patxmmr64_64;
		params^[0]:=patreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning13104_AAM13104;
		matchedAssembler:=pAAssemblesto13130_AA13130;
		END;
		CVTSI2SD_CVTSI2SD:=myrec;
	END;
	FUNCTION pATypeid13140_AT13140:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13140_AT13140:=myrec;
		END;
	FUNCTION pATypeid13142_AT13142:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ sxmreg  ilcg.pattern@1d021b9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13142_AT13142:=myrec;
		END;
	FUNCTION pAIeee32Tformat13150_AI32T13150:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat13150_AI32T13150:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype13149_ATP13149:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype13149_ATP13149:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType13148_APT13148:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType13148_APT13148:=myrec;
		END;
	FUNCTION pAReference13147_AR13147:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType13148_APT13148;
		 pAReference13147_AR13147:=myrec;
		END;
	FUNCTION pAReftypeType13146_ART13146:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference13147_AR13147;
		 pAReftypeType13146_ART13146:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc13151_AIL13151:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc13151_AIL13151:=myrec;
		END;
		(*! try to cast to type: ref ieee32*)
	FUNCTION pARefcastRefval13145_ARR13145:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType13146_ART13146;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc13151_AIL13151;
		 pARefcastRefval13145_ARR13145:=myrec;
		END;
	FUNCTION pAIeee32Tformat13156_AI32T13156:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat13156_AI32T13156:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype13155_ATP13155:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype13155_ATP13155:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType13154_APT13154:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType13154_APT13154:=myrec;
		END;
	FUNCTION pAFloatMonadic13158_AFM13158:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpFLOAT;
		 pAFloatMonadic13158_AFM13158:=myrec;
		END;
	FUNCTION pASigned13164_AS13164:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned13164_AS13164:=myrec;
		END;
	FUNCTION pASignedTformat13163_AST13163:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned13164_AS13164;
		 pASignedTformat13163_AST13163:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype13162_ATP13162:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype13162_ATP13162:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType13161_APT13161:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType13161_APT13161:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc13168_AIL13168:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc13168_AIL13168:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval13167_AR13167:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc13168_AIL13168;
		 pARefval13167_AR13167:=myrec;
		END;
	FUNCTION pADerefRhs13166_ADR13166:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval13167_AR13167;
		 pADerefRhs13166_ADR13166:=myrec;
		END;
	FUNCTION pARhsValue13165_ARV13165:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs13166_ADR13166;
		 pARhsValue13165_ARV13165:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs13160_ACR13160:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType13161_APT13161;
		myrec^.arg2:=pARhsValue13165_ARV13165;
		 pACastRhs13160_ACR13160:=myrec;
		END;
	FUNCTION pARhsValue13159_ARV13159:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs13160_ACR13160;
		 pARhsValue13159_ARV13159:=myrec;
		END;
	FUNCTION pAMonadicValue13157_AMV13157:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue13159_ARV13159;
		myrec^.fn:=pAFloatMonadic13158_AFM13158;
		 pAMonadicValue13157_AMV13157:=myrec;
		END;
		(*! try to cast to type: ieee32*)
	FUNCTION pACastRhs13153_ACR13153:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType13154_APT13154;
		myrec^.arg2:=pAMonadicValue13157_AMV13157;
		 pACastRhs13153_ACR13153:=myrec;
		END;
	FUNCTION pARhsValue13152_ARV13152:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs13153_ACR13153;
		 pARhsValue13152_ARV13152:=myrec;
		END;
	FUNCTION pAAssign13144_AA13144:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue13152_ARV13152;
		myrec^.dest:=pARefcastRefval13145_ARR13145;
		 pAAssign13144_AA13144:=myrec;
		END;
	FUNCTION pAAssignMeaning13143_AAM13143:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign13144_AA13144;
		 pAAssignMeaning13143_AAM13143:=myrec;
		END;
	FUNCTION pAAssemblypattern13170_AA13170:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cvtsi2ss  ' );
		pappendp(list,1);
		pappends(list,', ' );
		pappendp(list,0);
		pAAssemblypattern13170_AA13170:=list;
		END;
	FUNCTION pAAssemblesto13169_AA13169:pprintlist;
	begin
		pAAssemblesto13169_AA13169:=pAAssemblypattern13170_AA13170;
		END;
	FUNCTION pASideeffects13175_AS13175:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects13175_AS13175:=nil;
		 pASideeffects13175_AS13175:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond13176_AUP13176:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond13176_AUP13176:=nil;
		 pAUnconditionalPrecond13176_AUP13176:=myrec;
		END;
	FUNCTION CVTSI2SS_CVTSI2SS:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patsxmreg_;
		params^[0]:=patmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning13143_AAM13143;
		matchedAssembler:=pAAssemblesto13169_AA13169;
		END;
		CVTSI2SS_CVTSI2SS:=myrec;
	END;
	FUNCTION pATypeid13179_AT13179:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13179_AT13179:=myrec;
		END;
	FUNCTION pATypeid13181_AT13181:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ sxmreg  ilcg.pattern@1d021b9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13181_AT13181:=myrec;
		END;
	FUNCTION pAIeee32Tformat13189_AI32T13189:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat13189_AI32T13189:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype13188_ATP13188:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype13188_ATP13188:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType13187_APT13187:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType13187_APT13187:=myrec;
		END;
	FUNCTION pAReference13186_AR13186:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType13187_APT13187;
		 pAReference13186_AR13186:=myrec;
		END;
	FUNCTION pAReftypeType13185_ART13185:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference13186_AR13186;
		 pAReftypeType13185_ART13185:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc13190_AIL13190:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc13190_AIL13190:=myrec;
		END;
		(*! try to cast to type: ref ieee32*)
	FUNCTION pARefcastRefval13184_ARR13184:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType13185_ART13185;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc13190_AIL13190;
		 pARefcastRefval13184_ARR13184:=myrec;
		END;
	FUNCTION pAIeee32Tformat13195_AI32T13195:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat13195_AI32T13195:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype13194_ATP13194:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype13194_ATP13194:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType13193_APT13193:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType13193_APT13193:=myrec;
		END;
	FUNCTION pAFloatMonadic13197_AFM13197:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpFLOAT;
		 pAFloatMonadic13197_AFM13197:=myrec;
		END;
	FUNCTION pASigned13203_AS13203:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned13203_AS13203:=myrec;
		END;
	FUNCTION pASignedTformat13202_AST13202:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned13203_AS13203;
		 pASignedTformat13202_AST13202:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype13201_ATP13201:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype13201_ATP13201:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType13200_APT13200:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType13200_APT13200:=myrec;
		END;
		(*! Match r0 *)
	FUNCTION pAIdLoc13207_AIL13207:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc13207_AIL13207:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval13206_AR13206:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc13207_AIL13207;
		 pARefval13206_AR13206:=myrec;
		END;
	FUNCTION pADerefRhs13205_ADR13205:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval13206_AR13206;
		 pADerefRhs13205_ADR13205:=myrec;
		END;
	FUNCTION pARhsValue13204_ARV13204:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs13205_ADR13205;
		 pARhsValue13204_ARV13204:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs13199_ACR13199:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType13200_APT13200;
		myrec^.arg2:=pARhsValue13204_ARV13204;
		 pACastRhs13199_ACR13199:=myrec;
		END;
	FUNCTION pARhsValue13198_ARV13198:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs13199_ACR13199;
		 pARhsValue13198_ARV13198:=myrec;
		END;
	FUNCTION pAMonadicValue13196_AMV13196:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue13198_ARV13198;
		myrec^.fn:=pAFloatMonadic13197_AFM13197;
		 pAMonadicValue13196_AMV13196:=myrec;
		END;
		(*! try to cast to type: ieee32*)
	FUNCTION pACastRhs13192_ACR13192:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType13193_APT13193;
		myrec^.arg2:=pAMonadicValue13196_AMV13196;
		 pACastRhs13192_ACR13192:=myrec;
		END;
	FUNCTION pARhsValue13191_ARV13191:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs13192_ACR13192;
		 pARhsValue13191_ARV13191:=myrec;
		END;
	FUNCTION pAAssign13183_AA13183:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue13191_ARV13191;
		myrec^.dest:=pARefcastRefval13184_ARR13184;
		 pAAssign13183_AA13183:=myrec;
		END;
	FUNCTION pAAssignMeaning13182_AAM13182:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign13183_AA13183;
		 pAAssignMeaning13182_AAM13182:=myrec;
		END;
	FUNCTION pAAssemblypattern13209_AA13209:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cvtsi2ss  ' );
		pappendp(list,1);
		pappends(list,', ' );
		pappendp(list,0);
		pAAssemblypattern13209_AA13209:=list;
		END;
	FUNCTION pAAssemblesto13208_AA13208:pprintlist;
	begin
		pAAssemblesto13208_AA13208:=pAAssemblypattern13209_AA13209;
		END;
	FUNCTION pASideeffects13214_AS13214:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects13214_AS13214:=nil;
		 pASideeffects13214_AS13214:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond13215_AUP13215:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond13215_AUP13215:=nil;
		 pAUnconditionalPrecond13215_AUP13215:=myrec;
		END;
	FUNCTION CVTIR2SS_CVTIR2SS:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patsxmreg_;
		params^[0]:=patreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning13182_AAM13182;
		matchedAssembler:=pAAssemblesto13208_AA13208;
		END;
		CVTIR2SS_CVTIR2SS:=myrec;
	END;
	FUNCTION pATypeid13218_AT13218:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13218_AT13218:=myrec;
		END;
	FUNCTION pATypeid13220_AT13220:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ sxmreg  ilcg.pattern@1d021b9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13220_AT13220:=myrec;
		END;
	FUNCTION pAIeee32Tformat13228_AI32T13228:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat13228_AI32T13228:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype13227_ATP13227:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype13227_ATP13227:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType13226_APT13226:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType13226_APT13226:=myrec;
		END;
	FUNCTION pAReference13225_AR13225:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType13226_APT13226;
		 pAReference13225_AR13225:=myrec;
		END;
	FUNCTION pAReftypeType13224_ART13224:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference13225_AR13225;
		 pAReftypeType13224_ART13224:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc13229_AIL13229:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc13229_AIL13229:=myrec;
		END;
		(*! try to cast to type: ref ieee32*)
	FUNCTION pARefcastRefval13223_ARR13223:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType13224_ART13224;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc13229_AIL13229;
		 pARefcastRefval13223_ARR13223:=myrec;
		END;
	FUNCTION pAIeee32Tformat13234_AI32T13234:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat13234_AI32T13234:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype13233_ATP13233:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype13233_ATP13233:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType13232_APT13232:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType13232_APT13232:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc13238_AIL13238:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc13238_AIL13238:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval13237_AR13237:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc13238_AIL13238;
		 pARefval13237_AR13237:=myrec;
		END;
	FUNCTION pADerefRhs13236_ADR13236:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval13237_AR13237;
		 pADerefRhs13236_ADR13236:=myrec;
		END;
	FUNCTION pARhsValue13235_ARV13235:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs13236_ADR13236;
		 pARhsValue13235_ARV13235:=myrec;
		END;
		(*! try to cast to type: ieee32*)
	FUNCTION pACastRhs13231_ACR13231:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType13232_APT13232;
		myrec^.arg2:=pARhsValue13235_ARV13235;
		 pACastRhs13231_ACR13231:=myrec;
		END;
	FUNCTION pARhsValue13230_ARV13230:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs13231_ACR13231;
		 pARhsValue13230_ARV13230:=myrec;
		END;
	FUNCTION pAAssign13222_AA13222:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue13230_ARV13230;
		myrec^.dest:=pARefcastRefval13223_ARR13223;
		 pAAssign13222_AA13222:=myrec;
		END;
	FUNCTION pAAssignMeaning13221_AAM13221:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign13222_AA13222;
		 pAAssignMeaning13221_AAM13221:=myrec;
		END;
	FUNCTION pAAssemblypattern13240_AA13240:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movss  ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern13240_AA13240:=list;
		END;
	FUNCTION pAAssemblesto13239_AA13239:pprintlist;
	begin
		pAAssemblesto13239_AA13239:=pAAssemblypattern13240_AA13240;
		END;
	FUNCTION pASideeffects13245_AS13245:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects13245_AS13245:=nil;
		 pASideeffects13245_AS13245:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond13246_AUP13246:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond13246_AUP13246:=nil;
		 pAUnconditionalPrecond13246_AUP13246:=myrec;
		END;
	FUNCTION STORESS_STORESS:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patsxmreg_;
		params^[0]:=patmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning13221_AAM13221;
		matchedAssembler:=pAAssemblesto13239_AA13239;
		END;
		STORESS_STORESS:=myrec;
	END;
	FUNCTION pATypeid13249_AT13249:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@6d06b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13249_AT13249:=myrec;
		END;
	FUNCTION pATypeid13251_AT13251:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmmr64  ilcg.pattern@f2818d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13251_AT13251:=myrec;
		END;
	FUNCTION pAIeee63Tformat13259_AI63T13259:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat13259_AI63T13259:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype13258_ATP13258:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype13258_ATP13258:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType13257_APT13257:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType13257_APT13257:=myrec;
		END;
	FUNCTION pAReference13256_AR13256:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType13257_APT13257;
		 pAReference13256_AR13256:=myrec;
		END;
	FUNCTION pAReftypeType13255_ART13255:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference13256_AR13256;
		 pAReftypeType13255_ART13255:=myrec;
		END;
		(*! Match rm *)
	FUNCTION pAIdLoc13260_AIL13260:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc13260_AIL13260:=myrec;
		END;
		(*! try to cast to type: ref ieee64*)
	FUNCTION pARefcastRefval13254_ARR13254:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType13255_ART13255;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc13260_AIL13260;
		 pARefcastRefval13254_ARR13254:=myrec;
		END;
	FUNCTION pAIeee63Tformat13265_AI63T13265:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat13265_AI63T13265:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype13264_ATP13264:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype13264_ATP13264:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType13263_APT13263:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType13263_APT13263:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc13269_AIL13269:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc13269_AIL13269:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval13268_AR13268:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc13269_AIL13269;
		 pARefval13268_AR13268:=myrec;
		END;
	FUNCTION pADerefRhs13267_ADR13267:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval13268_AR13268;
		 pADerefRhs13267_ADR13267:=myrec;
		END;
	FUNCTION pARhsValue13266_ARV13266:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs13267_ADR13267;
		 pARhsValue13266_ARV13266:=myrec;
		END;
		(*! try to cast to type: ieee64*)
	FUNCTION pACastRhs13262_ACR13262:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType13263_APT13263;
		myrec^.arg2:=pARhsValue13266_ARV13266;
		 pACastRhs13262_ACR13262:=myrec;
		END;
	FUNCTION pARhsValue13261_ARV13261:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs13262_ACR13262;
		 pARhsValue13261_ARV13261:=myrec;
		END;
	FUNCTION pAAssign13253_AA13253:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue13261_ARV13261;
		myrec^.dest:=pARefcastRefval13254_ARR13254;
		 pAAssign13253_AA13253:=myrec;
		END;
	FUNCTION pAAssignMeaning13252_AAM13252:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign13253_AA13253;
		 pAAssignMeaning13252_AAM13252:=myrec;
		END;
	FUNCTION pAAssemblypattern13271_AA13271:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movsd  ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pappends(list,'; STORESD' );
		pAAssemblypattern13271_AA13271:=list;
		END;
	FUNCTION pAAssemblesto13270_AA13270:pprintlist;
	begin
		pAAssemblesto13270_AA13270:=pAAssemblypattern13271_AA13271;
		END;
	FUNCTION pASideeffects13277_AS13277:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects13277_AS13277:=nil;
		 pASideeffects13277_AS13277:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond13278_AUP13278:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond13278_AUP13278:=nil;
		 pAUnconditionalPrecond13278_AUP13278:=myrec;
		END;
	FUNCTION STORESD_STORESD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patxmmr64_64;
		params^[0]:=patmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning13252_AAM13252;
		matchedAssembler:=pAAssemblesto13270_AA13270;
		END;
		STORESD_STORESD:=myrec;
	END;
	FUNCTION pATypeid13281_AT13281:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ sxmreg  ilcg.pattern@1d021b9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13281_AT13281:=myrec;
		END;
	FUNCTION pAPushDyadic13284_APD13284:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic13284_APD13284:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc13286_AIL13286:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc13286_AIL13286:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue13285_ALV13285:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc13286_AIL13286;
		 pALocValue13285_ALV13285:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc13290_AIL13290:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc13290_AIL13290:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval13289_AR13289:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc13290_AIL13290;
		 pARefval13289_AR13289:=myrec;
		END;
	FUNCTION pADerefRhs13288_ADR13288:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval13289_AR13289;
		 pADerefRhs13288_ADR13288:=myrec;
		END;
	FUNCTION pARhsValue13287_ARV13287:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs13288_ADR13288;
		 pARhsValue13287_ARV13287:=myrec;
		END;
	FUNCTION pADyadicValue13283_ADV13283:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue13285_ALV13285;
		myrec^.arg2:=pARhsValue13287_ARV13287;
		myrec^.fn:=pAPushDyadic13284_APD13284;
		 pADyadicValue13283_ADV13283:=myrec;
		END;
	FUNCTION pAValueMeaning13282_AVM13282:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue13283_ADV13283;
		 pAValueMeaning13282_AVM13282:=myrec;
		END;
	FUNCTION pAAssemblypattern13292_AA13292:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'sub esp,4\n movss [esp],' );
		pappendp(list,0);
		pAAssemblypattern13292_AA13292:=list;
		END;
	FUNCTION pAAssemblesto13291_AA13291:pprintlist;
	begin
		pAAssemblesto13291_AA13291:=pAAssemblypattern13292_AA13292;
		END;
	FUNCTION pASideeffects13295_AS13295:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects13295_AS13295:=nil;
		 pASideeffects13295_AS13295:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond13296_AUP13296:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond13296_AUP13296:=nil;
		 pAUnconditionalPrecond13296_AUP13296:=myrec;
		END;
	FUNCTION SSRPUSH_SSRPUSH:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patsxmreg_;
		paramcount:=2;
		meaning:=pAValueMeaning13282_AVM13282;
		matchedAssembler:=pAAssemblesto13291_AA13291;
		END;
		SSRPUSH_SSRPUSH:=myrec;
	END;
	FUNCTION pATypeid13299_AT13299:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ sxmreg  ilcg.pattern@1d021b9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13299_AT13299:=myrec;
		END;
	FUNCTION pAIeee32Tformat13307_AI32T13307:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat13307_AI32T13307:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype13306_ATP13306:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype13306_ATP13306:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType13305_APT13305:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType13305_APT13305:=myrec;
		END;
	FUNCTION pAReference13304_AR13304:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType13305_APT13305;
		 pAReference13304_AR13304:=myrec;
		END;
	FUNCTION pAReftypeType13303_ART13303:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference13304_AR13304;
		 pAReftypeType13303_ART13303:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc13308_AIL13308:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc13308_AIL13308:=myrec;
		END;
		(*! try to cast to type: ref ieee32*)
	FUNCTION pARefcastRefval13302_ARR13302:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType13303_ART13303;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc13308_AIL13308;
		 pARefcastRefval13302_ARR13302:=myrec;
		END;
	FUNCTION pAIeee32Tformat13313_AI32T13313:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat13313_AI32T13313:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype13312_ATP13312:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype13312_ATP13312:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType13311_APT13311:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType13311_APT13311:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc13315_AIL13315:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc13315_AIL13315:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue13314_ALV13314:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc13315_AIL13315;
		 pALocValue13314_ALV13314:=myrec;
		END;
		(*! try to cast to type: ieee32*)
	FUNCTION pACastpopRhs13310_ACR13310:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType13311_APT13311;
		myrec^.arg2:=pALocValue13314_ALV13314;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs13310_ACR13310:=myrec;
		END;
	FUNCTION pARhsValue13309_ARV13309:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs13310_ACR13310;
		 pARhsValue13309_ARV13309:=myrec;
		END;
	FUNCTION pAAssign13301_AA13301:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue13309_ARV13309;
		myrec^.dest:=pARefcastRefval13302_ARR13302;
		 pAAssign13301_AA13301:=myrec;
		END;
	FUNCTION pAAssignMeaning13300_AAM13300:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign13301_AA13301;
		 pAAssignMeaning13300_AAM13300:=myrec;
		END;
	FUNCTION pAAssemblypattern13317_AA13317:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,' movss ' );
		pappendp(list,0);
		pappends(list,',[esp]\n add esp,4' );
		pAAssemblypattern13317_AA13317:=list;
		END;
	FUNCTION pAAssemblesto13316_AA13316:pprintlist;
	begin
		pAAssemblesto13316_AA13316:=pAAssemblypattern13317_AA13317;
		END;
	FUNCTION pASideeffects13321_AS13321:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects13321_AS13321:=nil;
		 pASideeffects13321_AS13321:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond13322_AUP13322:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond13322_AUP13322:=nil;
		 pAUnconditionalPrecond13322_AUP13322:=myrec;
		END;
	FUNCTION SSRPOP_SSRPOP:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patsxmreg_;
		paramcount:=2;
		meaning:=pAAssignMeaning13300_AAM13300;
		matchedAssembler:=pAAssemblesto13316_AA13316;
		END;
		SSRPOP_SSRPOP:=myrec;
	END;
	FUNCTION pATypeid13325_AT13325:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ sxmreg  ilcg.pattern@1d021b9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13325_AT13325:=myrec;
		END;
	FUNCTION pAIeee32Tformat13333_AI32T13333:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat13333_AI32T13333:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype13332_ATP13332:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype13332_ATP13332:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType13331_APT13331:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType13331_APT13331:=myrec;
		END;
	FUNCTION pAReference13330_AR13330:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType13331_APT13331;
		 pAReference13330_AR13330:=myrec;
		END;
	FUNCTION pAReftypeType13329_ART13329:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference13330_AR13330;
		 pAReftypeType13329_ART13329:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc13334_AIL13334:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc13334_AIL13334:=myrec;
		END;
		(*! try to cast to type: ref ieee32*)
	FUNCTION pARefcastRefval13328_ARR13328:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType13329_ART13329;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc13334_AIL13334;
		 pARefcastRefval13328_ARR13328:=myrec;
		END;
	FUNCTION pAIeee32Tformat13339_AI32T13339:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat13339_AI32T13339:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype13338_ATP13338:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype13338_ATP13338:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType13337_APT13337:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType13337_APT13337:=myrec;
		END;
	FUNCTION pAFloatMonadic13341_AFM13341:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpFLOAT;
		 pAFloatMonadic13341_AFM13341:=myrec;
		END;
	FUNCTION pASigned13347_AS13347:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned13347_AS13347:=myrec;
		END;
	FUNCTION pASignedTformat13346_AST13346:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned13347_AS13347;
		 pASignedTformat13346_AST13346:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype13345_ATP13345:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype13345_ATP13345:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType13344_APT13344:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType13344_APT13344:=myrec;
		END;
		(*! Match mainSTACK *)
	FUNCTION pAIdLoc13349_AIL13349:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc13349_AIL13349:=myrec;
		END;
		(*mainSTACK *)
	FUNCTION pALocValue13348_ALV13348:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc13349_AIL13349;
		 pALocValue13348_ALV13348:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastpopRhs13343_ACR13343:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType13344_APT13344;
		myrec^.arg2:=pALocValue13348_ALV13348;
		myrec^.arg2:=new_monad(ilcppop,myrec^.arg2);
		 pACastpopRhs13343_ACR13343:=myrec;
		END;
	FUNCTION pARhsValue13342_ARV13342:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastpopRhs13343_ACR13343;
		 pARhsValue13342_ARV13342:=myrec;
		END;
	FUNCTION pAMonadicValue13340_AMV13340:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue13342_ARV13342;
		myrec^.fn:=pAFloatMonadic13341_AFM13341;
		 pAMonadicValue13340_AMV13340:=myrec;
		END;
		(*! try to cast to type: ieee32*)
	FUNCTION pACastRhs13336_ACR13336:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType13337_APT13337;
		myrec^.arg2:=pAMonadicValue13340_AMV13340;
		 pACastRhs13336_ACR13336:=myrec;
		END;
	FUNCTION pARhsValue13335_ARV13335:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs13336_ACR13336;
		 pARhsValue13335_ARV13335:=myrec;
		END;
	FUNCTION pAAssign13327_AA13327:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue13335_ARV13335;
		myrec^.dest:=pARefcastRefval13328_ARR13328;
		 pAAssign13327_AA13327:=myrec;
		END;
	FUNCTION pAAssignMeaning13326_AAM13326:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign13327_AA13327;
		 pAAssignMeaning13326_AAM13326:=myrec;
		END;
	FUNCTION pAAssemblypattern13351_AA13351:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,' cvtsi2ss ' );
		pappendp(list,0);
		pappends(list,',[esp]\n add esp,4' );
		pAAssemblypattern13351_AA13351:=list;
		END;
	FUNCTION pAAssemblesto13350_AA13350:pprintlist;
	begin
		pAAssemblesto13350_AA13350:=pAAssemblypattern13351_AA13351;
		END;
	FUNCTION pASideeffects13355_AS13355:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects13355_AS13355:=nil;
		 pASideeffects13355_AS13355:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond13356_AUP13356:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond13356_AUP13356:=nil;
		 pAUnconditionalPrecond13356_AUP13356:=myrec;
		END;
	FUNCTION SSRPOPI_SSRPOPI:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patsxmreg_;
		paramcount:=2;
		meaning:=pAAssignMeaning13326_AAM13326;
		matchedAssembler:=pAAssemblesto13350_AA13350;
		END;
		SSRPOPI_SSRPOPI:=myrec;
	END;
	FUNCTION pATypeid13361_AT13361:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ sxmreg  ilcg.pattern@1d021b9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13361_AT13361:=myrec;
		END;
	FUNCTION pATypeid13363_AT13363:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ sxmreg  ilcg.pattern@1d021b9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13363_AT13363:=myrec;
		END;
	FUNCTION pATypeid13365_AT13365:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fcondition  ilcg.pattern@945d2d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13365_AT13365:=myrec;
		END;
	FUNCTION pAIdentifierDyadic13368_AID13368:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(3);
		 pAIdentifierDyadic13368_AID13368:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc13372_AIL13372:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc13372_AIL13372:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval13371_AR13371:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc13372_AIL13372;
		 pARefval13371_AR13371:=myrec;
		END;
	FUNCTION pADerefRhs13370_ADR13370:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval13371_AR13371;
		 pADerefRhs13370_ADR13370:=myrec;
		END;
	FUNCTION pARhsValue13369_ARV13369:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs13370_ADR13370;
		 pARhsValue13369_ARV13369:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc13376_AIL13376:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc13376_AIL13376:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval13375_AR13375:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc13376_AIL13376;
		 pARefval13375_AR13375:=myrec;
		END;
	FUNCTION pADerefRhs13374_ADR13374:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval13375_AR13375;
		 pADerefRhs13374_ADR13374:=myrec;
		END;
	FUNCTION pARhsValue13373_ARV13373:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs13374_ADR13374;
		 pARhsValue13373_ARV13373:=myrec;
		END;
	FUNCTION pADyadicValue13367_ADV13367:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue13369_ARV13369;
		myrec^.arg2:=pARhsValue13373_ARV13373;
		myrec^.fn:=pAIdentifierDyadic13368_AID13368;
		 pADyadicValue13367_ADV13367:=myrec;
		END;
		(*! Match l *)
	FUNCTION pAIdLoc13379_AIL13379:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc13379_AIL13379:=myrec;
		END;
		(*l *)
	FUNCTION pALocValue13378_ALV13378:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc13379_AIL13379;
		 pALocValue13378_ALV13378:=myrec;
		END;
	FUNCTION pAGotoMeaning13377_AGM13377:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=gotonode;
		myrec^.dest:=pALocValue13378_ALV13378;
		 pAGotoMeaning13377_AGM13377:=myrec;
		END;
	FUNCTION pAIfMeaning13366_AIM13366:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pADyadicValue13367_ADV13367;
		myrec^.action:=pAGotoMeaning13377_AGM13377;
		 pAIfMeaning13366_AIM13366:=myrec;
		END;
	FUNCTION pAAssemblypattern13381_AA13381:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'comiss ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,2);
		pappends(list,'\n j' );
		pappendp(list,3);
		pappends(list,' ' );
		pappendp(list,0);
		pAAssemblypattern13381_AA13381:=list;
		END;
	FUNCTION pAAssemblesto13380_AA13380:pprintlist;
	begin
		pAAssemblesto13380_AA13380:=pAAssemblypattern13381_AA13381;
		END;
	FUNCTION pASideeffects13390_AS13390:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects13390_AS13390:=nil;
		 pASideeffects13390_AS13390:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond13391_AUP13391:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond13391_AUP13391:=nil;
		 pAUnconditionalPrecond13391_AUP13391:=myrec;
		END;
	FUNCTION COMISSIFGOTO_COMISSIFGOTO:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patsxmreg_;
		params^[0]:=patlabel;
		params^[1]:=patsxmreg_;
		params^[3]:=patfcondition_;
		paramcount:=5;
		meaning:=pAIfMeaning13366_AIM13366;
		matchedAssembler:=pAAssemblesto13380_AA13380;
		END;
		COMISSIFGOTO_COMISSIFGOTO:=myrec;
	END;
	FUNCTION pATypeid13394_AT13394:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fcondition  ilcg.pattern@945d2d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13394_AT13394:=myrec;
		END;
	FUNCTION pATypeid13396_AT13396:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ sxmreg  ilcg.pattern@1d021b9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13396_AT13396:=myrec;
		END;
	FUNCTION pATypeid13398_AT13398:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ sxmreg  ilcg.pattern@1d021b9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13398_AT13398:=myrec;
		END;
	FUNCTION pATypeid13400_AT13400:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@1c4bcda}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13400_AT13400:=myrec;
		END;
	FUNCTION pAUint8Unsigned13409_AU8U13409:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned13409_AU8U13409:=myrec;
		END;
	FUNCTION pAUnsignedTformat13408_AUT13408:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned13409_AU8U13409;
		 pAUnsignedTformat13408_AUT13408:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype13407_ATP13407:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype13407_ATP13407:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType13406_APT13406:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType13406_APT13406:=myrec;
		END;
	FUNCTION pAReference13405_AR13405:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType13406_APT13406;
		 pAReference13405_AR13405:=myrec;
		END;
	FUNCTION pAReftypeType13404_ART13404:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference13405_AR13405;
		 pAReftypeType13404_ART13404:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc13410_AIL13410:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(3);
		 pAIdLoc13410_AIL13410:=myrec;
		END;
		(*! try to cast to type: ref uint8*)
	FUNCTION pARefcastRefval13403_ARR13403:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType13404_ART13404;
		(*class ilcg.node.AIdLoc*)
		myrec^.arg2:=pAIdLoc13410_AIL13410;
		 pARefcastRefval13403_ARR13403:=myrec;
		END;
	FUNCTION pAUint8Unsigned13416_AU8U13416:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned13416_AU8U13416:=myrec;
		END;
	FUNCTION pAUnsignedTformat13415_AUT13415:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned13416_AU8U13416;
		 pAUnsignedTformat13415_AUT13415:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype13414_ATP13414:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype13414_ATP13414:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType13413_APT13413:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType13413_APT13413:=myrec;
		END;
	FUNCTION pAIdentifierDyadic13418_AID13418:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic13418_AID13418:=myrec;
		END;
		(*! Match r1 *)
	FUNCTION pAIdLoc13422_AIL13422:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc13422_AIL13422:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval13421_AR13421:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc13422_AIL13422;
		 pARefval13421_AR13421:=myrec;
		END;
	FUNCTION pADerefRhs13420_ADR13420:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval13421_AR13421;
		 pADerefRhs13420_ADR13420:=myrec;
		END;
	FUNCTION pARhsValue13419_ARV13419:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs13420_ADR13420;
		 pARhsValue13419_ARV13419:=myrec;
		END;
		(*! Match r2 *)
	FUNCTION pAIdLoc13426_AIL13426:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc13426_AIL13426:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval13425_AR13425:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc13426_AIL13426;
		 pARefval13425_AR13425:=myrec;
		END;
	FUNCTION pADerefRhs13424_ADR13424:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval13425_AR13425;
		 pADerefRhs13424_ADR13424:=myrec;
		END;
	FUNCTION pARhsValue13423_ARV13423:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs13424_ADR13424;
		 pARhsValue13423_ARV13423:=myrec;
		END;
	FUNCTION pADyadicValue13417_ADV13417:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue13419_ARV13419;
		myrec^.arg2:=pARhsValue13423_ARV13423;
		myrec^.fn:=pAIdentifierDyadic13418_AID13418;
		 pADyadicValue13417_ADV13417:=myrec;
		END;
		(*! try to cast to type: uint8*)
	FUNCTION pACastRhs13412_ACR13412:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType13413_APT13413;
		myrec^.arg2:=pADyadicValue13417_ADV13417;
		 pACastRhs13412_ACR13412:=myrec;
		END;
	FUNCTION pARhsValue13411_ARV13411:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs13412_ACR13412;
		 pARhsValue13411_ARV13411:=myrec;
		END;
	FUNCTION pAAssign13402_AA13402:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue13411_ARV13411;
		myrec^.dest:=pARefcastRefval13403_ARR13403;
		 pAAssign13402_AA13402:=myrec;
		END;
	FUNCTION pAAssignMeaning13401_AAM13401:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign13402_AA13402;
		 pAAssignMeaning13401_AAM13401:=myrec;
		END;
	FUNCTION pAAssemblypattern13428_AA13428:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'comiss ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,2);
		pappends(list,'\n set' );
		pappendp(list,0);
		pappends(list,' ' );
		pappendp(list,3);
		pAAssemblypattern13428_AA13428:=list;
		END;
	FUNCTION pAAssemblesto13427_AA13427:pprintlist;
	begin
		pAAssemblesto13427_AA13427:=pAAssemblypattern13428_AA13428;
		END;
	FUNCTION pASideeffects13437_AS13437:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects13437_AS13437:=nil;
		 pASideeffects13437_AS13437:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond13438_AUP13438:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond13438_AUP13438:=nil;
		 pAUnconditionalPrecond13438_AUP13438:=myrec;
		END;
	FUNCTION COMISS_COMISS:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patsxmreg_;
		params^[1]:=patsxmreg_;
		params^[3]:=patbreg_;
		params^[0]:=patfcondition_;
		paramcount:=5;
		meaning:=pAAssignMeaning13401_AAM13401;
		matchedAssembler:=pAAssemblesto13427_AA13427;
		END;
		COMISS_COMISS:=myrec;
	END;
	FUNCTION pATypeid13441_AT13441:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xmreg  ilcg.pattern@1d0f57e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13441_AT13441:=myrec;
		END;
	FUNCTION pATypeid13443_AT13443:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@1d50fd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13443_AT13443:=myrec;
		END;
		(*! Match m *)
	FUNCTION pAIdLoc13447_AIL13447:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc13447_AIL13447:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval13446_AR13446:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc13447_AIL13447;
		 pARefval13446_AR13446:=myrec;
		END;
	FUNCTION pAReplicateDyadic13449_ARD13449:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcprep;
		 pAReplicateDyadic13449_ARD13449:=myrec;
		END;
		(*! Match r *)
	FUNCTION pAIdLoc13453_AIL13453:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc13453_AIL13453:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval13452_AR13452:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc13453_AIL13453;
		 pARefval13452_AR13452:=myrec;
		END;
	FUNCTION pADerefRhs13451_ADR13451:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval13452_AR13452;
		 pADerefRhs13451_ADR13451:=myrec;
		END;
	FUNCTION pARhsValue13450_ARV13450:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs13451_ADR13451;
		 pARhsValue13450_ARV13450:=myrec;
		END;
	FUNCTION pAOptionalsign13457_AO13457:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign13457_AO13457:=nil;
		 pAOptionalsign13457_AO13457:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber13456_AIN13456:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber13456_AIN13456:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs13455_ANR13455:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber13456_AIN13456;
		 pANumberRhs13455_ANR13455:=myrec;
		END;
	FUNCTION pARhsValue13454_ARV13454:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs13455_ANR13455;
		 pARhsValue13454_ARV13454:=myrec;
		END;
	FUNCTION pADyadicValue13448_ADV13448:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue13450_ARV13450;
		myrec^.arg2:=pARhsValue13454_ARV13454;
		myrec^.fn:=pAReplicateDyadic13449_ARD13449;
		 pADyadicValue13448_ADV13448:=myrec;
		END;
	FUNCTION pAAssign13445_AA13445:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue13448_ADV13448;
		myrec^.dest:=pARefval13446_AR13446;
		 pAAssign13445_AA13445:=myrec;
		END;
	FUNCTION pAAssignMeaning13444_AAM13444:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign13445_AA13445;
		 pAAssignMeaning13444_AAM13444:=myrec;
		END;
	FUNCTION pAAssemblypattern13459_AA13459:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'push ' );
		pappendp(list,1);
		pappends(list,'\n push ' );
		pappendp(list,1);
		pappends(list,'\n push ' );
		pappendp(list,1);
		pappends(list,'\n push ' );
		pappendp(list,1);
		pappends(list,'\n movups ' );
		pappendp(list,0);
		pappends(list,',[esp]\n add esp,16' );
		pAAssemblypattern13459_AA13459:=list;
		END;
	FUNCTION pAAssemblesto13458_AA13458:pprintlist;
	begin
		pAAssemblesto13458_AA13458:=pAAssemblypattern13459_AA13459;
		END;
	FUNCTION pASideeffects13471_AS13471:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects13471_AS13471:=nil;
		 pASideeffects13471_AS13471:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond13472_AUP13472:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond13472_AUP13472:=nil;
		 pAUnconditionalPrecond13472_AUP13472:=myrec;
		END;
	FUNCTION FREP4_FREP4:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patxmreg_;
		params^[1]:=patreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning13444_AAM13444;
		matchedAssembler:=pAAssemblesto13458_AA13458;
		END;
		FREP4_FREP4:=myrec;
	END;
	FUNCTION pATypeid13475_AT13475:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ RPUSH  ilcg.pattern@1201ad7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13475_AT13475:=myrec;
		END;
	FUNCTION pATypeidType13474_ATT13474:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13475_AT13475;
		 pATypeidType13474_ATT13474:=myrec;
		END;
	FUNCTION pATypeid13477_AT13477:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ IFLITGOTO  ilcg.pattern@16a9d0a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13477_AT13477:=myrec;
		END;
	FUNCTION pATypeidType13476_ATT13476:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13477_AT13477;
		 pATypeidType13476_ATT13476:=myrec;
		END;
	FUNCTION pATypeid13479_AT13479:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ LOADB  ilcg.pattern@1bf22b3}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13479_AT13479:=myrec;
		END;
	FUNCTION pATypeidType13478_ATT13478:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13479_AT13479;
		 pATypeidType13478_ATT13478:=myrec;
		END;
	FUNCTION pATypeid13481_AT13481:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ LOADW  ilcg.pattern@141fe06}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13481_AT13481:=myrec;
		END;
	FUNCTION pATypeidType13480_ATT13480:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13481_AT13481;
		 pATypeidType13480_ATT13480:=myrec;
		END;
	FUNCTION pATypeid13483_AT13483:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ LOAD  ilcg.pattern@d9a7a6}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13483_AT13483:=myrec;
		END;
	FUNCTION pATypeidType13482_ATT13482:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13483_AT13483;
		 pATypeidType13482_ATT13482:=myrec;
		END;
	FUNCTION pATypeid13485_AT13485:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVZXB  ilcg.pattern@4a117f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13485_AT13485:=myrec;
		END;
	FUNCTION pATypeidType13484_ATT13484:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13485_AT13485;
		 pATypeidType13484_ATT13484:=myrec;
		END;
	FUNCTION pATypeid13487_AT13487:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVSXB  ilcg.pattern@754ffd}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13487_AT13487:=myrec;
		END;
	FUNCTION pATypeidType13486_ATT13486:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13487_AT13487;
		 pATypeidType13486_ATT13486:=myrec;
		END;
	FUNCTION pATypeid13489_AT13489:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVZXW  ilcg.pattern@1ff7e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13489_AT13489:=myrec;
		END;
	FUNCTION pATypeidType13488_ATT13488:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13489_AT13489;
		 pATypeidType13488_ATT13488:=myrec;
		END;
	FUNCTION pATypeid13491_AT13491:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVSXW  ilcg.pattern@9ccd0a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13491_AT13491:=myrec;
		END;
	FUNCTION pATypeidType13490_ATT13490:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13491_AT13491;
		 pATypeidType13490_ATT13490:=myrec;
		END;
	FUNCTION pATypeid13493_AT13493:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVZXB2  ilcg.pattern@cbdef5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13493_AT13493:=myrec;
		END;
	FUNCTION pATypeidType13492_ATT13492:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13493_AT13493;
		 pATypeidType13492_ATT13492:=myrec;
		END;
	FUNCTION pATypeid13495_AT13495:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVZXBW  ilcg.pattern@1e9247a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13495_AT13495:=myrec;
		END;
	FUNCTION pATypeidType13494_ATT13494:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13495_AT13495;
		 pATypeidType13494_ATT13494:=myrec;
		END;
	FUNCTION pATypeid13497_AT13497:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVSXBW  ilcg.pattern@f2d004}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13497_AT13497:=myrec;
		END;
	FUNCTION pATypeidType13496_ATT13496:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13497_AT13497;
		 pATypeidType13496_ATT13496:=myrec;
		END;
	FUNCTION pATypeid13499_AT13499:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ CLEARREG  ilcg.pattern@51cf2d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13499_AT13499:=myrec;
		END;
	FUNCTION pATypeidType13498_ATT13498:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13499_AT13499;
		 pATypeidType13498_ATT13498:=myrec;
		END;
	FUNCTION pATypeid13501_AT13501:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ STORELIT  ilcg.pattern@f96752}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13501_AT13501:=myrec;
		END;
	FUNCTION pATypeidType13500_ATT13500:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13501_AT13501;
		 pATypeidType13500_ATT13500:=myrec;
		END;
	FUNCTION pATypeid13503_AT13503:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ LEA  ilcg.pattern@564db1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13503_AT13503:=myrec;
		END;
	FUNCTION pATypeidType13502_ATT13502:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13503_AT13503;
		 pATypeidType13502_ATT13502:=myrec;
		END;
	FUNCTION pATypeid13505_AT13505:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ INC  ilcg.pattern@118a7e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13505_AT13505:=myrec;
		END;
	FUNCTION pATypeidType13504_ATT13504:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13505_AT13505;
		 pATypeidType13504_ATT13504:=myrec;
		END;
	FUNCTION pATypeid13507_AT13507:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ TESTIN  ilcg.pattern@1c2b60e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13507_AT13507:=myrec;
		END;
	FUNCTION pATypeidType13506_ATT13506:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13507_AT13507;
		 pATypeidType13506_ATT13506:=myrec;
		END;
	FUNCTION pATypeid13509_AT13509:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SHIFT  ilcg.pattern@1cb3ec4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13509_AT13509:=myrec;
		END;
	FUNCTION pATypeidType13508_ATT13508:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13509_AT13509;
		 pATypeidType13508_ATT13508:=myrec;
		END;
	FUNCTION pATypeid13511_AT13511:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MLIT  ilcg.pattern@15db23e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13511_AT13511:=myrec;
		END;
	FUNCTION pATypeidType13510_ATT13510:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13511_AT13511;
		 pATypeidType13510_ATT13510:=myrec;
		END;
	FUNCTION pATypeid13513_AT13513:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ RMLIT  ilcg.pattern@bcc82f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13513_AT13513:=myrec;
		END;
	FUNCTION pATypeidType13512_ATT13512:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13513_AT13513;
		 pATypeidType13512_ATT13512:=myrec;
		END;
	FUNCTION pATypeid13515_AT13515:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ADDRMR  ilcg.pattern@535d84}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13515_AT13515:=myrec;
		END;
	FUNCTION pATypeidType13514_ATT13514:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13515_AT13515;
		 pATypeidType13514_ATT13514:=myrec;
		END;
	FUNCTION pATypeid13517_AT13517:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PLANTBCONST  ilcg.pattern@9df6e3}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13517_AT13517:=myrec;
		END;
	FUNCTION pATypeidType13516_ATT13516:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13517_AT13517;
		 pATypeidType13516_ATT13516:=myrec;
		END;
	FUNCTION pATypeid13519_AT13519:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PLANTWCONST  ilcg.pattern@12a54b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13519_AT13519:=myrec;
		END;
	FUNCTION pATypeidType13518_ATT13518:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13519_AT13519;
		 pATypeidType13518_ATT13518:=myrec;
		END;
	FUNCTION pATypeid13521_AT13521:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PLANTICONST  ilcg.pattern@10020bb}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13521_AT13521:=myrec;
		END;
	FUNCTION pATypeidType13520_ATT13520:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13521_AT13521;
		 pATypeidType13520_ATT13520:=myrec;
		END;
	FUNCTION pATypeid13523_AT13523:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PLANTRCONST  ilcg.pattern@17d9553}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13523_AT13523:=myrec;
		END;
	FUNCTION pATypeidType13522_ATT13522:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13523_AT13523;
		 pATypeidType13522_ATT13522:=myrec;
		END;
	FUNCTION pATypeid13525_AT13525:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PLANTSCONST  ilcg.pattern@874920}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13525_AT13525:=myrec;
		END;
	FUNCTION pATypeidType13524_ATT13524:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13525_AT13525;
		 pATypeidType13524_ATT13524:=myrec;
		END;
	FUNCTION pATypeid13527_AT13527:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ DEC  ilcg.pattern@edacd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13527_AT13527:=myrec;
		END;
	FUNCTION pATypeidType13526_ATT13526:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13527_AT13527;
		 pATypeidType13526_ATT13526:=myrec;
		END;
	FUNCTION pATypeid13529_AT13529:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ IMULLIT  ilcg.pattern@675236}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13529_AT13529:=myrec;
		END;
	FUNCTION pATypeidType13528_ATT13528:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13529_AT13529;
		 pATypeidType13528_ATT13528:=myrec;
		END;
	FUNCTION pATypeid13531_AT13531:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOD2  ilcg.pattern@1aeb46d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13531_AT13531:=myrec;
		END;
	FUNCTION pATypeidType13530_ATT13530:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13531_AT13531;
		 pATypeidType13530_ATT13530:=myrec;
		END;
	FUNCTION pATypeid13533_AT13533:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOD4  ilcg.pattern@939dc}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13533_AT13533:=myrec;
		END;
	FUNCTION pATypeidType13532_ATT13532:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13533_AT13533;
		 pATypeidType13532_ATT13532:=myrec;
		END;
	FUNCTION pATypeid13535_AT13535:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOD8  ilcg.pattern@5e67f1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13535_AT13535:=myrec;
		END;
	FUNCTION pATypeidType13534_ATT13534:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13535_AT13535;
		 pATypeidType13534_ATT13534:=myrec;
		END;
	FUNCTION pATypeid13537_AT13537:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOD16  ilcg.pattern@883540}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13537_AT13537:=myrec;
		END;
	FUNCTION pATypeidType13536_ATT13536:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13537_AT13537;
		 pATypeidType13536_ATT13536:=myrec;
		END;
	FUNCTION pATypeid13539_AT13539:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ IMOD  ilcg.pattern@14fe17}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13539_AT13539:=myrec;
		END;
	FUNCTION pATypeidType13538_ATT13538:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13539_AT13539;
		 pATypeidType13538_ATT13538:=myrec;
		END;
	FUNCTION pATypeid13541_AT13541:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ UMOD  ilcg.pattern@8690e3}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13541_AT13541:=myrec;
		END;
	FUNCTION pATypeidType13540_ATT13540:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13541_AT13541;
		 pATypeidType13540_ATT13540:=myrec;
		END;
	FUNCTION pATypeid13543_AT13543:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ INTABS  ilcg.pattern@1c4cc17}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13543_AT13543:=myrec;
		END;
	FUNCTION pATypeidType13542_ATT13542:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13543_AT13543;
		 pATypeidType13542_ATT13542:=myrec;
		END;
	FUNCTION pATypeid13545_AT13545:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ Negate  ilcg.pattern@163c85b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13545_AT13545:=myrec;
		END;
	FUNCTION pATypeidType13544_ATT13544:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13545_AT13545;
		 pATypeidType13544_ATT13544:=myrec;
		END;
	FUNCTION pATypeid13547_AT13547:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ NOTOP  ilcg.pattern@be99f8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13547_AT13547:=myrec;
		END;
	FUNCTION pATypeidType13546_ATT13546:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13547_AT13547;
		 pATypeidType13546_ATT13546:=myrec;
		END;
	FUNCTION pATypeid13549_AT13549:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MNegate  ilcg.pattern@8634b6}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13549_AT13549:=myrec;
		END;
	FUNCTION pATypeidType13548_ATT13548:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13549_AT13549;
		 pATypeidType13548_ATT13548:=myrec;
		END;
	FUNCTION pATypeid13551_AT13551:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BTS  ilcg.pattern@90d0ea}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13551_AT13551:=myrec;
		END;
	FUNCTION pATypeidType13550_ATT13550:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13551_AT13551;
		 pATypeidType13550_ATT13550:=myrec;
		END;
	FUNCTION pATypeid13553_AT13553:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ UINT8MAX  ilcg.pattern@1714c8d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13553_AT13553:=myrec;
		END;
	FUNCTION pATypeidType13552_ATT13552:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13553_AT13553;
		 pATypeidType13552_ATT13552:=myrec;
		END;
	FUNCTION pATypeid13555_AT13555:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ UINT8MIN  ilcg.pattern@1775dde}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13555_AT13555:=myrec;
		END;
	FUNCTION pATypeidType13554_ATT13554:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13555_AT13555;
		 pATypeidType13554_ATT13554:=myrec;
		END;
	FUNCTION pATypeid13557_AT13557:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ INT8MAX  ilcg.pattern@1b3cedc}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13557_AT13557:=myrec;
		END;
	FUNCTION pATypeidType13556_ATT13556:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13557_AT13557;
		 pATypeidType13556_ATT13556:=myrec;
		END;
	FUNCTION pATypeid13559_AT13559:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ INT8MIN  ilcg.pattern@1cc858}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13559_AT13559:=myrec;
		END;
	FUNCTION pATypeidType13558_ATT13558:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13559_AT13559;
		 pATypeidType13558_ATT13558:=myrec;
		END;
	FUNCTION pATypeid13561_AT13561:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SELECT  ilcg.pattern@1feb227}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13561_AT13561:=myrec;
		END;
	FUNCTION pATypeidType13560_ATT13560:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13561_AT13561;
		 pATypeidType13560_ATT13560:=myrec;
		END;
	FUNCTION pATypeid13563_AT13563:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PLANT  ilcg.pattern@12dc21d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13563_AT13563:=myrec;
		END;
	FUNCTION pATypeidType13562_ATT13562:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13563_AT13563;
		 pATypeidType13562_ATT13562:=myrec;
		END;
	FUNCTION pATypeid13565_AT13565:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ LITPUSH  ilcg.pattern@1ec2452}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13565_AT13565:=myrec;
		END;
	FUNCTION pATypeidType13564_ATT13564:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13565_AT13565;
		 pATypeidType13564_ATT13564:=myrec;
		END;
	FUNCTION pATypeid13567_AT13567:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MEMPUSH  ilcg.pattern@1321875}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13567_AT13567:=myrec;
		END;
	FUNCTION pATypeidType13566_ATT13566:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13567_AT13567;
		 pATypeidType13566_ATT13566:=myrec;
		END;
	FUNCTION pATypeid13569_AT13569:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SETUB  ilcg.pattern@1f27f74}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13569_AT13569:=myrec;
		END;
	FUNCTION pATypeidType13568_ATT13568:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13569_AT13569;
		 pATypeidType13568_ATT13568:=myrec;
		END;
	FUNCTION pATypeid13571_AT13571:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SETUW  ilcg.pattern@167de91}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13571_AT13571:=myrec;
		END;
	FUNCTION pATypeidType13570_ATT13570:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13571_AT13571;
		 pATypeidType13570_ATT13570:=myrec;
		END;
	FUNCTION pATypeid13573_AT13573:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SETB  ilcg.pattern@1d49c56}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13573_AT13573:=myrec;
		END;
	FUNCTION pATypeidType13572_ATT13572:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13573_AT13573;
		 pATypeidType13572_ATT13572:=myrec;
		END;
	FUNCTION pATypeid13575_AT13575:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SETW  ilcg.pattern@1b2797e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13575_AT13575:=myrec;
		END;
	FUNCTION pATypeidType13574_ATT13574:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13575_AT13575;
		 pATypeidType13574_ATT13574:=myrec;
		END;
	FUNCTION pATypeid13577_AT13577:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SET  ilcg.pattern@b6ba69}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13577_AT13577:=myrec;
		END;
	FUNCTION pATypeidType13576_ATT13576:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13577_AT13577;
		 pATypeidType13576_ATT13576:=myrec;
		END;
	FUNCTION pATypeid13579_AT13579:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SETU  ilcg.pattern@1bba105}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13579_AT13579:=myrec;
		END;
	FUNCTION pATypeidType13578_ATT13578:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13579_AT13579;
		 pATypeidType13578_ATT13578:=myrec;
		END;
	FUNCTION pATypeid13581_AT13581:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ IFASS  ilcg.pattern@1d0e98}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13581_AT13581:=myrec;
		END;
	FUNCTION pATypeidType13580_ATT13580:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13581_AT13581;
		 pATypeidType13580_ATT13580:=myrec;
		END;
	FUNCTION pATypeid13583_AT13583:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SETeq  ilcg.pattern@3330e2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13583_AT13583:=myrec;
		END;
	FUNCTION pATypeidType13582_ATT13582:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13583_AT13583;
		 pATypeidType13582_ATT13582:=myrec;
		END;
	FUNCTION pATypeid13585_AT13585:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ RMR  ilcg.pattern@1976a55}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13585_AT13585:=myrec;
		END;
	FUNCTION pATypeidType13584_ATT13584:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13585_AT13585;
		 pATypeidType13584_ATT13584:=myrec;
		END;
	FUNCTION pATypeid13587_AT13587:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ IFLITGOTO  ilcg.pattern@16a9d0a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13587_AT13587:=myrec;
		END;
	FUNCTION pATypeidType13586_ATT13586:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13587_AT13587;
		 pATypeidType13586_ATT13586:=myrec;
		END;
	FUNCTION pATypeid13589_AT13589:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ IFULITGOTO  ilcg.pattern@8ec3bc}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13589_AT13589:=myrec;
		END;
	FUNCTION pATypeidType13588_ATT13588:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13589_AT13589;
		 pATypeidType13588_ATT13588:=myrec;
		END;
	FUNCTION pATypeid13591_AT13591:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BIFLITGOTO  ilcg.pattern@167523a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13591_AT13591:=myrec;
		END;
	FUNCTION pATypeidType13590_ATT13590:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13591_AT13591;
		 pATypeidType13590_ATT13590:=myrec;
		END;
	FUNCTION pATypeid13593_AT13593:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ IFIN  ilcg.pattern@15ee9d9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13593_AT13593:=myrec;
		END;
	FUNCTION pATypeidType13592_ATT13592:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13593_AT13593;
		 pATypeidType13592_ATT13592:=myrec;
		END;
	FUNCTION pATypeid13595_AT13595:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ IFGOTO  ilcg.pattern@1488560}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13595_AT13595:=myrec;
		END;
	FUNCTION pATypeidType13594_ATT13594:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13595_AT13595;
		 pATypeidType13594_ATT13594:=myrec;
		END;
	FUNCTION pATypeid13597_AT13597:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ IFUGOTO  ilcg.pattern@dcda91}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13597_AT13597:=myrec;
		END;
	FUNCTION pATypeidType13596_ATT13596:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13597_AT13597;
		 pATypeidType13596_ATT13596:=myrec;
		END;
	FUNCTION pATypeid13599_AT13599:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BIMUL  ilcg.pattern@17a6a4b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13599_AT13599:=myrec;
		END;
	FUNCTION pATypeidType13598_ATT13598:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13599_AT13599;
		 pATypeidType13598_ATT13598:=myrec;
		END;
	FUNCTION pATypeid13601_AT13601:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ RLIT  ilcg.pattern@567aef}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13601_AT13601:=myrec;
		END;
	FUNCTION pATypeidType13600_ATT13600:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13601_AT13601;
		 pATypeidType13600_ATT13600:=myrec;
		END;
	FUNCTION pATypeid13603_AT13603:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ LEA  ilcg.pattern@564db1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13603_AT13603:=myrec;
		END;
	FUNCTION pATypeidType13602_ATT13602:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13603_AT13603;
		 pATypeidType13602_ATT13602:=myrec;
		END;
	FUNCTION pATypeid13605_AT13605:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ RRM  ilcg.pattern@e1fbe3}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13605_AT13605:=myrec;
		END;
	FUNCTION pATypeidType13604_ATT13604:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13605_AT13605;
		 pATypeidType13604_ATT13604:=myrec;
		END;
	FUNCTION pATypeid13607_AT13607:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fastIMUL  ilcg.pattern@f42ea0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13607_AT13607:=myrec;
		END;
	FUNCTION pATypeidType13606_ATT13606:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13607_AT13607;
		 pATypeidType13606_ATT13606:=myrec;
		END;
	FUNCTION pATypeid13609_AT13609:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ RMRB  ilcg.pattern@151b6ea}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13609_AT13609:=myrec;
		END;
	FUNCTION pATypeidType13608_ATT13608:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13609_AT13609;
		 pATypeidType13608_ATT13608:=myrec;
		END;
	FUNCTION pATypeid13611_AT13611:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ RRD  ilcg.pattern@a21ac2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13611_AT13611:=myrec;
		END;
	FUNCTION pATypeidType13610_ATT13610:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13611_AT13611;
		 pATypeidType13610_ATT13610:=myrec;
		END;
	FUNCTION pATypeid13613_AT13613:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ RR  ilcg.pattern@1420a71}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13613_AT13613:=myrec;
		END;
	FUNCTION pATypeidType13612_ATT13612:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13613_AT13613;
		 pATypeidType13612_ATT13612:=myrec;
		END;
	FUNCTION pATypeid13615_AT13615:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ DIV8  ilcg.pattern@6fa30c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13615_AT13615:=myrec;
		END;
	FUNCTION pATypeidType13614_ATT13614:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13615_AT13615;
		 pATypeidType13614_ATT13614:=myrec;
		END;
	FUNCTION pATypeid13617_AT13617:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ IDIV  ilcg.pattern@1baeec3}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13617_AT13617:=myrec;
		END;
	FUNCTION pATypeidType13616_ATT13616:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13617_AT13617;
		 pATypeidType13616_ATT13616:=myrec;
		END;
	FUNCTION pATypeid13619_AT13619:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fastBIDIV  ilcg.pattern@216f75}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13619_AT13619:=myrec;
		END;
	FUNCTION pATypeidType13618_ATT13618:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13619_AT13619;
		 pATypeidType13618_ATT13618:=myrec;
		END;
	FUNCTION pATypeid13621_AT13621:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BIDIV  ilcg.pattern@801b62}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13621_AT13621:=myrec;
		END;
	FUNCTION pATypeidType13620_ATT13620:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13621_AT13621;
		 pATypeidType13620_ATT13620:=myrec;
		END;
	FUNCTION pATypeid13623_AT13623:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ UDIV  ilcg.pattern@d32baa}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13623_AT13623:=myrec;
		END;
	FUNCTION pATypeidType13622_ATT13622:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13623_AT13623;
		 pATypeidType13622_ATT13622:=myrec;
		END;
	FUNCTION pATypeid13625_AT13625:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ CDQ  ilcg.pattern@192c07a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13625_AT13625:=myrec;
		END;
	FUNCTION pATypeidType13624_ATT13624:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13625_AT13625;
		 pATypeidType13624_ATT13624:=myrec;
		END;
	FUNCTION pATypeid13627_AT13627:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ RIDIV  ilcg.pattern@1d3f905}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13627_AT13627:=myrec;
		END;
	FUNCTION pATypeidType13626_ATT13626:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13627_AT13627;
		 pATypeidType13626_ATT13626:=myrec;
		END;
	FUNCTION pATypeid13629_AT13629:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SIDIV  ilcg.pattern@147bef}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13629_AT13629:=myrec;
		END;
	FUNCTION pATypeidType13628_ATT13628:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13629_AT13629;
		 pATypeidType13628_ATT13628:=myrec;
		END;
	FUNCTION pATypeid13631_AT13631:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ IFGOTOB  ilcg.pattern@16e8e76}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13631_AT13631:=myrec;
		END;
	FUNCTION pATypeidType13630_ATT13630:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13631_AT13631;
		 pATypeidType13630_ATT13630:=myrec;
		END;
	FUNCTION pATypeid13633_AT13633:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ IFGOTOW  ilcg.pattern@7c9492}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13633_AT13633:=myrec;
		END;
	FUNCTION pATypeidType13632_ATT13632:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13633_AT13633;
		 pATypeidType13632_ATT13632:=myrec;
		END;
	FUNCTION pATypeid13635_AT13635:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ GOTO  ilcg.pattern@1953895}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13635_AT13635:=myrec;
		END;
	FUNCTION pATypeidType13634_ATT13634:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13635_AT13635;
		 pATypeidType13634_ATT13634:=myrec;
		END;
	FUNCTION pATypeid13637_AT13637:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FAIL  ilcg.pattern@3bf22}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13637_AT13637:=myrec;
		END;
	FUNCTION pATypeidType13636_ATT13636:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13637_AT13637;
		 pATypeidType13636_ATT13636:=myrec;
		END;
	FUNCTION pATypeid13639_AT13639:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BOUND4  ilcg.pattern@6cb4c8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13639_AT13639:=myrec;
		END;
	FUNCTION pATypeidType13638_ATT13638:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13639_AT13639;
		 pATypeidType13638_ATT13638:=myrec;
		END;
	FUNCTION pATypeid13641_AT13641:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BOUND0  ilcg.pattern@a205d2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13641_AT13641:=myrec;
		END;
	FUNCTION pATypeidType13640_ATT13640:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13641_AT13641;
		 pATypeidType13640_ATT13640:=myrec;
		END;
	FUNCTION pATypeid13643_AT13643:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BOUND16  ilcg.pattern@d99967}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13643_AT13643:=myrec;
		END;
	FUNCTION pATypeidType13642_ATT13642:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13643_AT13643;
		 pATypeidType13642_ATT13642:=myrec;
		END;
	FUNCTION pATypeid13645_AT13645:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BOUNDC  ilcg.pattern@4dabd7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13645_AT13645:=myrec;
		END;
	FUNCTION pATypeidType13644_ATT13644:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13645_AT13645;
		 pATypeidType13644_ATT13644:=myrec;
		END;
	FUNCTION pATypeid13647_AT13647:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ REPMOVSB  ilcg.pattern@16020ed}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13647_AT13647:=myrec;
		END;
	FUNCTION pATypeidType13646_ATT13646:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13647_AT13647;
		 pATypeidType13646_ATT13646:=myrec;
		END;
	FUNCTION pATypeid13649_AT13649:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ REPMOVSD  ilcg.pattern@1f4a968}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13649_AT13649:=myrec;
		END;
	FUNCTION pATypeidType13648_ATT13648:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13649_AT13649;
		 pATypeidType13648_ATT13648:=myrec;
		END;
	FUNCTION pATypeid13651_AT13651:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ADDUSB  ilcg.pattern@5264dc}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13651_AT13651:=myrec;
		END;
	FUNCTION pATypeidType13650_ATT13650:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13651_AT13651;
		 pATypeidType13650_ATT13650:=myrec;
		END;
	FUNCTION pATypeid13653_AT13653:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SUBUSB  ilcg.pattern@1a751ff}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13653_AT13653:=myrec;
		END;
	FUNCTION pATypeidType13652_ATT13652:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13653_AT13653;
		 pATypeidType13652_ATT13652:=myrec;
		END;
	FUNCTION pATypeid13655_AT13655:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ADDSSB  ilcg.pattern@81526f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13655_AT13655:=myrec;
		END;
	FUNCTION pATypeidType13654_ATT13654:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13655_AT13655;
		 pATypeidType13654_ATT13654:=myrec;
		END;
	FUNCTION pATypeid13657_AT13657:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SUBSSB  ilcg.pattern@572554}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13657_AT13657:=myrec;
		END;
	FUNCTION pATypeidType13656_ATT13656:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13657_AT13657;
		 pATypeidType13656_ATT13656:=myrec;
		END;
	FUNCTION pATypeid13659_AT13659:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MULTSSB  ilcg.pattern@1970646}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13659_AT13659:=myrec;
		END;
	FUNCTION pATypeidType13658_ATT13658:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13659_AT13659;
		 pATypeidType13658_ATT13658:=myrec;
		END;
	FUNCTION pATypeid13661_AT13661:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MULTSSBAL  ilcg.pattern@10cfd02}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13661_AT13661:=myrec;
		END;
	FUNCTION pATypeidType13660_ATT13660:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13661_AT13661;
		 pATypeidType13660_ATT13660:=myrec;
		END;
	FUNCTION pATypeid13663_AT13663:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ STOREWR  ilcg.pattern@6261c9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13663_AT13663:=myrec;
		END;
	FUNCTION pATypeidType13662_ATT13662:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13663_AT13663;
		 pATypeidType13662_ATT13662:=myrec;
		END;
	FUNCTION pATypeid13665_AT13665:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ STORER  ilcg.pattern@1b69500}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13665_AT13665:=myrec;
		END;
	FUNCTION pATypeidType13664_ATT13664:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13665_AT13665;
		 pATypeidType13664_ATT13664:=myrec;
		END;
	FUNCTION pATypeid13667_AT13667:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ STOREBR  ilcg.pattern@9e7e21}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13667_AT13667:=myrec;
		END;
	FUNCTION pATypeidType13666_ATT13666:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13667_AT13667;
		 pATypeidType13666_ATT13666:=myrec;
		END;
	FUNCTION pATypeid13669_AT13669:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ RPUSH  ilcg.pattern@1201ad7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13669_AT13669:=myrec;
		END;
	FUNCTION pATypeidType13668_ATT13668:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13669_AT13669;
		 pATypeidType13668_ATT13668:=myrec;
		END;
	FUNCTION pATypeid13671_AT13671:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ REFPUSH  ilcg.pattern@ddb923}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13671_AT13671:=myrec;
		END;
	FUNCTION pATypeidType13670_ATT13670:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13671_AT13671;
		 pATypeidType13670_ATT13670:=myrec;
		END;
	FUNCTION pATypeid13673_AT13673:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ RPUSH  ilcg.pattern@1201ad7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13673_AT13673:=myrec;
		END;
	FUNCTION pATypeidType13672_ATT13672:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13673_AT13673;
		 pATypeidType13672_ATT13672:=myrec;
		END;
	FUNCTION pATypeid13675_AT13675:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SDEREF  ilcg.pattern@13a19e3}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13675_AT13675:=myrec;
		END;
	FUNCTION pATypeidType13674_ATT13674:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13675_AT13675;
		 pATypeidType13674_ATT13674:=myrec;
		END;
	FUNCTION pATypeid13677_AT13677:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SDEREFDOUBLEWORD  ilcg.pattern@1eee6b2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13677_AT13677:=myrec;
		END;
	FUNCTION pATypeidType13676_ATT13676:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13677_AT13677;
		 pATypeidType13676_ATT13676:=myrec;
		END;
	FUNCTION pATypeid13679_AT13679:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ IFBOOL  ilcg.pattern@3bfb01}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13679_AT13679:=myrec;
		END;
	FUNCTION pATypeidType13678_ATT13678:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13679_AT13679;
		 pATypeidType13678_ATT13678:=myrec;
		END;
	FUNCTION pATypeid13681_AT13681:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SMLIT  ilcg.pattern@4534b2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13681_AT13681:=myrec;
		END;
	FUNCTION pATypeidType13680_ATT13680:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13681_AT13681;
		 pATypeidType13680_ATT13680:=myrec;
		END;
	FUNCTION pATypeid13683_AT13683:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SMRP  ilcg.pattern@1d48c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13683_AT13683:=myrec;
		END;
	FUNCTION pATypeidType13682_ATT13682:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13683_AT13683;
		 pATypeidType13682_ATT13682:=myrec;
		END;
	FUNCTION pATypeid13685_AT13685:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SADD  ilcg.pattern@709cb5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13685_AT13685:=myrec;
		END;
	FUNCTION pATypeidType13684_ATT13684:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13685_AT13685;
		 pATypeidType13684_ATT13684:=myrec;
		END;
	FUNCTION pATypeid13687_AT13687:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SMULIT  ilcg.pattern@1b5abf7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13687_AT13687:=myrec;
		END;
	FUNCTION pATypeidType13686_ATT13686:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13687_AT13687;
		 pATypeidType13686_ATT13686:=myrec;
		END;
	FUNCTION pATypeid13689_AT13689:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SMRADD  ilcg.pattern@16592ec}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13689_AT13689:=myrec;
		END;
	FUNCTION pATypeidType13688_ATT13688:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13689_AT13689;
		 pATypeidType13688_ATT13688:=myrec;
		END;
	FUNCTION pATypeid13691_AT13691:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SOP  ilcg.pattern@3d55da}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13691_AT13691:=myrec;
		END;
	FUNCTION pATypeidType13690_ATT13690:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13691_AT13691;
		 pATypeidType13690_ATT13690:=myrec;
		END;
	FUNCTION pATypeid13693_AT13693:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SMR  ilcg.pattern@dfa6f0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13693_AT13693:=myrec;
		END;
	FUNCTION pATypeidType13692_ATT13692:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13693_AT13693;
		 pATypeidType13692_ATT13692:=myrec;
		END;
	FUNCTION pATypeid13695_AT13695:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BSMR  ilcg.pattern@e6ace7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13695_AT13695:=myrec;
		END;
	FUNCTION pATypeidType13694_ATT13694:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13695_AT13695;
		 pATypeidType13694_ATT13694:=myrec;
		END;
	FUNCTION pATypeid13697_AT13697:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ STACKLOAD  ilcg.pattern@1c7f150}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13697_AT13697:=myrec;
		END;
	FUNCTION pATypeidType13696_ATT13696:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13697_AT13697;
		 pATypeidType13696_ATT13696:=myrec;
		END;
	FUNCTION pATypeid13699_AT13699:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ REFPOP  ilcg.pattern@192deaf}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13699_AT13699:=myrec;
		END;
	FUNCTION pATypeidType13698_ATT13698:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13699_AT13699;
		 pATypeidType13698_ATT13698:=myrec;
		END;
	FUNCTION pATypeid13701_AT13701:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MEMPOP  ilcg.pattern@9a8d9b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13701_AT13701:=myrec;
		END;
	FUNCTION pATypeidType13700_ATT13700:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13701_AT13701;
		 pATypeidType13700_ATT13700:=myrec;
		END;
	FUNCTION pATypeid13703_AT13703:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BPOP  ilcg.pattern@67f45e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13703_AT13703:=myrec;
		END;
	FUNCTION pATypeidType13702_ATT13702:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13703_AT13703;
		 pATypeidType13702_ATT13702:=myrec;
		END;
	FUNCTION pATypeid13705_AT13705:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BSPOP  ilcg.pattern@1187658}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13705_AT13705:=myrec;
		END;
	FUNCTION pATypeidType13704_ATT13704:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13705_AT13705;
		 pATypeidType13704_ATT13704:=myrec;
		END;
	FUNCTION pATypeid13707_AT13707:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BSPUSH  ilcg.pattern@fc8157}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13707_AT13707:=myrec;
		END;
	FUNCTION pATypeidType13706_ATT13706:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13707_AT13707;
		 pATypeidType13706_ATT13706:=myrec;
		END;
	FUNCTION pATypeid13709_AT13709:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ DMEMPUSH  ilcg.pattern@1e59f7c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13709_AT13709:=myrec;
		END;
	FUNCTION pATypeidType13708_ATT13708:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13709_AT13709;
		 pATypeidType13708_ATT13708:=myrec;
		END;
	FUNCTION pATypeid13711_AT13711:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ RPUSHE  ilcg.pattern@8aa29e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13711_AT13711:=myrec;
		END;
	FUNCTION pATypeidType13710_ATT13710:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13711_AT13711;
		 pATypeidType13710_ATT13710:=myrec;
		END;
	FUNCTION pATypeid13713_AT13713:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ IMOD  ilcg.pattern@14fe17}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13713_AT13713:=myrec;
		END;
	FUNCTION pATypeidType13712_ATT13712:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13713_AT13713;
		 pATypeidType13712_ATT13712:=myrec;
		END;
	FUNCTION pATypeid13715_AT13715:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ UMOD  ilcg.pattern@8690e3}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13715_AT13715:=myrec;
		END;
	FUNCTION pATypeidType13714_ATT13714:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13715_AT13715;
		 pATypeidType13714_ATT13714:=myrec;
		END;
	FUNCTION pATypeid13717_AT13717:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BPUSH  ilcg.pattern@1ee94df}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13717_AT13717:=myrec;
		END;
	FUNCTION pATypeidType13716_ATT13716:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13717_AT13717;
		 pATypeidType13716_ATT13716:=myrec;
		END;
	FUNCTION pATypeid13719_AT13719:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ STACKSTORE  ilcg.pattern@20ba62}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13719_AT13719:=myrec;
		END;
	FUNCTION pATypeidType13718_ATT13718:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13719_AT13719;
		 pATypeidType13718_ATT13718:=myrec;
		END;
	FUNCTION pATypeid13721_AT13721:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ STACKWSTORE  ilcg.pattern@d07f45}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13721_AT13721:=myrec;
		END;
	FUNCTION pATypeidType13720_ATT13720:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13721_AT13721;
		 pATypeidType13720_ATT13720:=myrec;
		END;
	FUNCTION pATypeid13723_AT13723:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ STACKBSTORE  ilcg.pattern@1c2df08}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13723_AT13723:=myrec;
		END;
	FUNCTION pATypeidType13722_ATT13722:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13723_AT13723;
		 pATypeidType13722_ATT13722:=myrec;
		END;
	FUNCTION pATypeid13725_AT13725:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ RPOP  ilcg.pattern@2096d7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13725_AT13725:=myrec;
		END;
	FUNCTION pATypeidType13724_ATT13724:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13725_AT13725;
		 pATypeidType13724_ATT13724:=myrec;
		END;
	FUNCTION pATypeid13727_AT13727:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ToBYTE  ilcg.pattern@7e34db}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13727_AT13727:=myrec;
		END;
	FUNCTION pATypeidType13726_ATT13726:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13727_AT13727;
		 pATypeidType13726_ATT13726:=myrec;
		END;
	FUNCTION pATypeid13729_AT13729:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SMRSHIFT  ilcg.pattern@2c507f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13729_AT13729:=myrec;
		END;
	FUNCTION pATypeidType13728_ATT13728:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13729_AT13729;
		 pATypeidType13728_ATT13728:=myrec;
		END;
	FUNCTION pATypeid13731_AT13731:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ WPOP  ilcg.pattern@ebe20a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13731_AT13731:=myrec;
		END;
	FUNCTION pATypeidType13730_ATT13730:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13731_AT13731;
		 pATypeidType13730_ATT13730:=myrec;
		END;
	FUNCTION pATypeid13733_AT13733:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ POPEADXu  ilcg.pattern@322a97}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13733_AT13733:=myrec;
		END;
	FUNCTION pATypeidType13732_ATT13732:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13733_AT13733;
		 pATypeidType13732_ATT13732:=myrec;
		END;
	FUNCTION pATypeid13735_AT13735:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PADDD  ilcg.pattern@851425}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13735_AT13735:=myrec;
		END;
	FUNCTION pATypeidType13734_ATT13734:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13735_AT13735;
		 pATypeidType13734_ATT13734:=myrec;
		END;
	FUNCTION pATypeid13737_AT13737:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PADDW  ilcg.pattern@6da0da}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13737_AT13737:=myrec;
		END;
	FUNCTION pATypeidType13736_ATT13736:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13737_AT13737;
		 pATypeidType13736_ATT13736:=myrec;
		END;
	FUNCTION pATypeid13739_AT13739:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PADDB  ilcg.pattern@1bcbda5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13739_AT13739:=myrec;
		END;
	FUNCTION pATypeidType13738_ATT13738:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13739_AT13739;
		 pATypeidType13738_ATT13738:=myrec;
		END;
	FUNCTION pATypeid13741_AT13741:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PADDSB  ilcg.pattern@e40f4c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13741_AT13741:=myrec;
		END;
	FUNCTION pATypeidType13740_ATT13740:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13741_AT13741;
		 pATypeidType13740_ATT13740:=myrec;
		END;
	FUNCTION pATypeid13743_AT13743:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PADDSB3  ilcg.pattern@1f43093}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13743_AT13743:=myrec;
		END;
	FUNCTION pATypeidType13742_ATT13742:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13743_AT13743;
		 pATypeidType13742_ATT13742:=myrec;
		END;
	FUNCTION pATypeid13745_AT13745:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PADDUSB  ilcg.pattern@1300853}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13745_AT13745:=myrec;
		END;
	FUNCTION pATypeidType13744_ATT13744:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13745_AT13745;
		 pATypeidType13744_ATT13744:=myrec;
		END;
	FUNCTION pATypeid13747_AT13747:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PADDUB  ilcg.pattern@1b77816}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13747_AT13747:=myrec;
		END;
	FUNCTION pATypeidType13746_ATT13746:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13747_AT13747;
		 pATypeidType13746_ATT13746:=myrec;
		END;
	FUNCTION pATypeid13749_AT13749:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SPADDSB  ilcg.pattern@1d377a4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13749_AT13749:=myrec;
		END;
	FUNCTION pATypeidType13748_ATT13748:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13749_AT13749;
		 pATypeidType13748_ATT13748:=myrec;
		END;
	FUNCTION pATypeid13751_AT13751:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SPADDUSB  ilcg.pattern@6dbdc1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13751_AT13751:=myrec;
		END;
	FUNCTION pATypeidType13750_ATT13750:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13751_AT13751;
		 pATypeidType13750_ATT13750:=myrec;
		END;
	FUNCTION pATypeid13753_AT13753:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SPADDUB  ilcg.pattern@573206}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13753_AT13753:=myrec;
		END;
	FUNCTION pATypeidType13752_ATT13752:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13753_AT13753;
		 pATypeidType13752_ATT13752:=myrec;
		END;
	FUNCTION pATypeid13755_AT13755:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PACKSSDW  ilcg.pattern@f5c440}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13755_AT13755:=myrec;
		END;
	FUNCTION pATypeidType13754_ATT13754:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13755_AT13755;
		 pATypeidType13754_ATT13754:=myrec;
		END;
	FUNCTION pATypeid13757_AT13757:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PACKSSWB  ilcg.pattern@4307f2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13757_AT13757:=myrec;
		END;
	FUNCTION pATypeidType13756_ATT13756:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13757_AT13757;
		 pATypeidType13756_ATT13756:=myrec;
		END;
	FUNCTION pATypeid13759_AT13759:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PACKUSWB  ilcg.pattern@7b6ab0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13759_AT13759:=myrec;
		END;
	FUNCTION pATypeidType13758_ATT13758:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13759_AT13759;
		 pATypeidType13758_ATT13758:=myrec;
		END;
	FUNCTION pATypeid13761_AT13761:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ CMPPB  ilcg.pattern@1e3f69}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13761_AT13761:=myrec;
		END;
	FUNCTION pATypeidType13760_ATT13760:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13761_AT13761;
		 pATypeidType13760_ATT13760:=myrec;
		END;
	FUNCTION pATypeid13763_AT13763:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ CMPPBR  ilcg.pattern@131a3e3}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13763_AT13763:=myrec;
		END;
	FUNCTION pATypeidType13762_ATT13762:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13763_AT13763;
		 pATypeidType13762_ATT13762:=myrec;
		END;
	FUNCTION pATypeid13765_AT13765:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ CMPPD  ilcg.pattern@1f077d2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13765_AT13765:=myrec;
		END;
	FUNCTION pATypeidType13764_ATT13764:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13765_AT13765;
		 pATypeidType13764_ATT13764:=myrec;
		END;
	FUNCTION pATypeid13767_AT13767:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ CMPPDR  ilcg.pattern@fd037d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13767_AT13767:=myrec;
		END;
	FUNCTION pATypeidType13766_ATT13766:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13767_AT13767;
		 pATypeidType13766_ATT13766:=myrec;
		END;
	FUNCTION pATypeid13769_AT13769:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ CMPPW  ilcg.pattern@1dfc95e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13769_AT13769:=myrec;
		END;
	FUNCTION pATypeidType13768_ATT13768:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13769_AT13769;
		 pATypeidType13768_ATT13768:=myrec;
		END;
	FUNCTION pATypeid13771_AT13771:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ CMPPWR  ilcg.pattern@1bcf620}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13771_AT13771:=myrec;
		END;
	FUNCTION pATypeidType13770_ATT13770:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13771_AT13771;
		 pATypeidType13770_ATT13770:=myrec;
		END;
	FUNCTION pATypeid13773_AT13773:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SPSUBD  ilcg.pattern@1e28608}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13773_AT13773:=myrec;
		END;
	FUNCTION pATypeidType13772_ATT13772:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13773_AT13773;
		 pATypeidType13772_ATT13772:=myrec;
		END;
	FUNCTION pATypeid13775_AT13775:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PSUBW  ilcg.pattern@7a7686}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13775_AT13775:=myrec;
		END;
	FUNCTION pATypeidType13774_ATT13774:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13775_AT13775;
		 pATypeidType13774_ATT13774:=myrec;
		END;
	FUNCTION pATypeid13777_AT13777:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PSUBB  ilcg.pattern@37bf73}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13777_AT13777:=myrec;
		END;
	FUNCTION pATypeidType13776_ATT13776:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13777_AT13777;
		 pATypeidType13776_ATT13776:=myrec;
		END;
	FUNCTION pATypeid13779_AT13779:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PSUBSB  ilcg.pattern@5f849b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13779_AT13779:=myrec;
		END;
	FUNCTION pATypeidType13778_ATT13778:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13779_AT13779;
		 pATypeidType13778_ATT13778:=myrec;
		END;
	FUNCTION pATypeid13781_AT13781:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PSUBUSB  ilcg.pattern@16998b9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13781_AT13781:=myrec;
		END;
	FUNCTION pATypeidType13780_ATT13780:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13781_AT13781;
		 pATypeidType13780_ATT13780:=myrec;
		END;
	FUNCTION pATypeid13783_AT13783:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PSUBUB  ilcg.pattern@1c51342}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13783_AT13783:=myrec;
		END;
	FUNCTION pATypeidType13782_ATT13782:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13783_AT13783;
		 pATypeidType13782_ATT13782:=myrec;
		END;
	FUNCTION pATypeid13785_AT13785:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ POR  ilcg.pattern@553ddb}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13785_AT13785:=myrec;
		END;
	FUNCTION pATypeidType13784_ATT13784:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13785_AT13785;
		 pATypeidType13784_ATT13784:=myrec;
		END;
	FUNCTION pATypeid13787_AT13787:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PAND  ilcg.pattern@ff8f2c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13787_AT13787:=myrec;
		END;
	FUNCTION pATypeidType13786_ATT13786:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13787_AT13787;
		 pATypeidType13786_ATT13786:=myrec;
		END;
	FUNCTION pATypeid13789_AT13789:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PANDN  ilcg.pattern@15d1f6a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13789_AT13789:=myrec;
		END;
	FUNCTION pATypeidType13788_ATT13788:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13789_AT13789;
		 pATypeidType13788_ATT13788:=myrec;
		END;
	FUNCTION pATypeid13791_AT13791:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PMULLSSB  ilcg.pattern@1f67dee}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13791_AT13791:=myrec;
		END;
	FUNCTION pATypeidType13790_ATT13790:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13791_AT13791;
		 pATypeidType13790_ATT13790:=myrec;
		END;
	FUNCTION pATypeid13793_AT13793:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PMULLW  ilcg.pattern@5f2465}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13793_AT13793:=myrec;
		END;
	FUNCTION pATypeidType13792_ATT13792:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13793_AT13793;
		 pATypeidType13792_ATT13792:=myrec;
		END;
	FUNCTION pATypeid13795_AT13795:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVDS  ilcg.pattern@167d3c1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13795_AT13795:=myrec;
		END;
	FUNCTION pATypeidType13794_ATT13794:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13795_AT13795;
		 pATypeidType13794_ATT13794:=myrec;
		END;
	FUNCTION pATypeid13797_AT13797:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVDL  ilcg.pattern@786119}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13797_AT13797:=myrec;
		END;
	FUNCTION pATypeidType13796_ATT13796:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13797_AT13797;
		 pATypeidType13796_ATT13796:=myrec;
		END;
	FUNCTION pATypeid13799_AT13799:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVQS  ilcg.pattern@1ae40f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13799_AT13799:=myrec;
		END;
	FUNCTION pATypeidType13798_ATT13798:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13799_AT13799;
		 pATypeidType13798_ATT13798:=myrec;
		END;
	FUNCTION pATypeid13801_AT13801:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVQL  ilcg.pattern@15c77fb}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13801_AT13801:=myrec;
		END;
	FUNCTION pATypeidType13800_ATT13800:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13801_AT13801;
		 pATypeidType13800_ATT13800:=myrec;
		END;
	FUNCTION pATypeid13803_AT13803:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVQLR  ilcg.pattern@9bf922}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13803_AT13803:=myrec;
		END;
	FUNCTION pATypeidType13802_ATT13802:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13803_AT13803;
		 pATypeidType13802_ATT13802:=myrec;
		END;
	FUNCTION pATypeid13805_AT13805:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVOCTUINTS  ilcg.pattern@6e18b0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13805_AT13805:=myrec;
		END;
	FUNCTION pATypeidType13804_ATT13804:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13805_AT13805;
		 pATypeidType13804_ATT13804:=myrec;
		END;
	FUNCTION pATypeid13807_AT13807:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVOCTUINTL  ilcg.pattern@19061ec}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13807_AT13807:=myrec;
		END;
	FUNCTION pATypeidType13806_ATT13806:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13807_AT13807;
		 pATypeidType13806_ATT13806:=myrec;
		END;
	FUNCTION pATypeid13809_AT13809:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ REP2  ilcg.pattern@166320b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13809_AT13809:=myrec;
		END;
	FUNCTION pATypeidType13808_ATT13808:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13809_AT13809;
		 pATypeidType13808_ATT13808:=myrec;
		END;
	FUNCTION pATypeid13811_AT13811:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ REP4  ilcg.pattern@13259ca}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13811_AT13811:=myrec;
		END;
	FUNCTION pATypeidType13810_ATT13810:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13811_AT13811;
		 pATypeidType13810_ATT13810:=myrec;
		END;
	FUNCTION pATypeid13813_AT13813:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ REP8  ilcg.pattern@199ed64}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13813_AT13813:=myrec;
		END;
	FUNCTION pATypeidType13812_ATT13812:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13813_AT13813;
		 pATypeidType13812_ATT13812:=myrec;
		END;
	FUNCTION pATypeid13815_AT13815:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MMXPUSH  ilcg.pattern@2e06bd}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13815_AT13815:=myrec;
		END;
	FUNCTION pATypeidType13814_ATT13814:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13815_AT13815;
		 pATypeidType13814_ATT13814:=myrec;
		END;
	FUNCTION pATypeid13817_AT13817:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVQR  ilcg.pattern@18a7b6c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13817_AT13817:=myrec;
		END;
	FUNCTION pATypeidType13816_ATT13816:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13817_AT13817;
		 pATypeidType13816_ATT13816:=myrec;
		END;
	FUNCTION pATypeid13819_AT13819:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ADDSS  ilcg.pattern@3cc038}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13819_AT13819:=myrec;
		END;
	FUNCTION pATypeidType13818_ATT13818:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13819_AT13819;
		 pATypeidType13818_ATT13818:=myrec;
		END;
	FUNCTION pATypeid13821_AT13821:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ CVTSI2SD  ilcg.pattern@e1f6c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13821_AT13821:=myrec;
		END;
	FUNCTION pATypeidType13820_ATT13820:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13821_AT13821;
		 pATypeidType13820_ATT13820:=myrec;
		END;
	FUNCTION pATypeid13823_AT13823:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ CVTSI2SS  ilcg.pattern@651695}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13823_AT13823:=myrec;
		END;
	FUNCTION pATypeidType13822_ATT13822:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13823_AT13823;
		 pATypeidType13822_ATT13822:=myrec;
		END;
	FUNCTION pATypeid13825_AT13825:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ CVTSD2SI  ilcg.pattern@f64084}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13825_AT13825:=myrec;
		END;
	FUNCTION pATypeidType13824_ATT13824:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13825_AT13825;
		 pATypeidType13824_ATT13824:=myrec;
		END;
	FUNCTION pATypeid13827_AT13827:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ CVTIR2SS  ilcg.pattern@12b71a3}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13827_AT13827:=myrec;
		END;
	FUNCTION pATypeidType13826_ATT13826:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13827_AT13827;
		 pATypeidType13826_ATT13826:=myrec;
		END;
	FUNCTION pATypeid13829_AT13829:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XRLOADLIT  ilcg.pattern@a0ba6c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13829_AT13829:=myrec;
		END;
	FUNCTION pATypeidType13828_ATT13828:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13829_AT13829;
		 pATypeidType13828_ATT13828:=myrec;
		END;
	FUNCTION pATypeid13831_AT13831:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XRDLOADLIT  ilcg.pattern@3e65be}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13831_AT13831:=myrec;
		END;
	FUNCTION pATypeidType13830_ATT13830:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13831_AT13831;
		 pATypeidType13830_ATT13830:=myrec;
		END;
	FUNCTION pATypeid13833_AT13833:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FREP4  ilcg.pattern@152441a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13833_AT13833:=myrec;
		END;
	FUNCTION pATypeidType13832_ATT13832:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13833_AT13833;
		 pATypeidType13832_ATT13832:=myrec;
		END;
	FUNCTION pATypeid13835_AT13835:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SSQRT  ilcg.pattern@85968b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13835_AT13835:=myrec;
		END;
	FUNCTION pATypeidType13834_ATT13834:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13835_AT13835;
		 pATypeidType13834_ATT13834:=myrec;
		END;
	FUNCTION pATypeid13837_AT13837:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SDSQRT  ilcg.pattern@adb210}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13837_AT13837:=myrec;
		END;
	FUNCTION pATypeidType13836_ATT13836:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13837_AT13837;
		 pATypeidType13836_ATT13836:=myrec;
		END;
	FUNCTION pATypeid13839_AT13839:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ OPSS  ilcg.pattern@f45ec3}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13839_AT13839:=myrec;
		END;
	FUNCTION pATypeidType13838_ATT13838:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13839_AT13839;
		 pATypeidType13838_ATT13838:=myrec;
		END;
	FUNCTION pATypeid13841_AT13841:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ OPSD  ilcg.pattern@11c0dc6}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13841_AT13841:=myrec;
		END;
	FUNCTION pATypeidType13840_ATT13840:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13841_AT13841;
		 pATypeidType13840_ATT13840:=myrec;
		END;
	FUNCTION pATypeid13843_AT13843:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ OPPI32  ilcg.pattern@11a20af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13843_AT13843:=myrec;
		END;
	FUNCTION pATypeidType13842_ATT13842:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13843_AT13843;
		 pATypeidType13842_ATT13842:=myrec;
		END;
	FUNCTION pATypeid13845_AT13845:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ OPPI32m  ilcg.pattern@1f96306}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13845_AT13845:=myrec;
		END;
	FUNCTION pATypeidType13844_ATT13844:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13845_AT13845;
		 pATypeidType13844_ATT13844:=myrec;
		END;
	FUNCTION pATypeid13847_AT13847:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XPANDN  ilcg.pattern@1aa824c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13847_AT13847:=myrec;
		END;
	FUNCTION pATypeidType13846_ATT13846:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13847_AT13847;
		 pATypeidType13846_ATT13846:=myrec;
		END;
	FUNCTION pATypeid13849_AT13849:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ OPPS  ilcg.pattern@1af8592}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13849_AT13849:=myrec;
		END;
	FUNCTION pATypeidType13848_ATT13848:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13849_AT13849;
		 pATypeidType13848_ATT13848:=myrec;
		END;
	FUNCTION pATypeid13851_AT13851:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ OPPD  ilcg.pattern@1301d8d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13851_AT13851:=myrec;
		END;
	FUNCTION pATypeidType13850_ATT13850:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13851_AT13851;
		 pATypeidType13850_ATT13850:=myrec;
		END;
	FUNCTION pATypeid13853_AT13853:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ COMISSIFGOTO  ilcg.pattern@189613a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13853_AT13853:=myrec;
		END;
	FUNCTION pATypeidType13852_ATT13852:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13853_AT13853;
		 pATypeidType13852_ATT13852:=myrec;
		END;
	FUNCTION pATypeid13855_AT13855:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ COMISS  ilcg.pattern@1e87e45}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13855_AT13855:=myrec;
		END;
	FUNCTION pATypeidType13854_ATT13854:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13855_AT13855;
		 pATypeidType13854_ATT13854:=myrec;
		END;
	FUNCTION pATypeid13857_AT13857:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ OPPI8  ilcg.pattern@419710}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13857_AT13857:=myrec;
		END;
	FUNCTION pATypeidType13856_ATT13856:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13857_AT13857;
		 pATypeidType13856_ATT13856:=myrec;
		END;
	FUNCTION pATypeid13859_AT13859:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ OPPI8m  ilcg.pattern@431d9d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13859_AT13859:=myrec;
		END;
	FUNCTION pATypeidType13858_ATT13858:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13859_AT13859;
		 pATypeidType13858_ATT13858:=myrec;
		END;
	FUNCTION pATypeid13861_AT13861:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ OPPI8muc  ilcg.pattern@1552524}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13861_AT13861:=myrec;
		END;
	FUNCTION pATypeidType13860_ATT13860:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13861_AT13861;
		 pATypeidType13860_ATT13860:=myrec;
		END;
	FUNCTION pATypeid13863_AT13863:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ OPPI8msc  ilcg.pattern@1796abe}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13863_AT13863:=myrec;
		END;
	FUNCTION pATypeidType13862_ATT13862:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13863_AT13863;
		 pATypeidType13862_ATT13862:=myrec;
		END;
	FUNCTION pATypeid13865_AT13865:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ OPPI16  ilcg.pattern@ee271d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13865_AT13865:=myrec;
		END;
	FUNCTION pATypeidType13864_ATT13864:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13865_AT13865;
		 pATypeidType13864_ATT13864:=myrec;
		END;
	FUNCTION pATypeid13867_AT13867:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ OPPI16m  ilcg.pattern@8b4163}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13867_AT13867:=myrec;
		END;
	FUNCTION pATypeidType13866_ATT13866:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13867_AT13867;
		 pATypeidType13866_ATT13866:=myrec;
		END;
	FUNCTION pATypeid13869_AT13869:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ OPPI16muc  ilcg.pattern@33ca1f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13869_AT13869:=myrec;
		END;
	FUNCTION pATypeidType13868_ATT13868:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13869_AT13869;
		 pATypeidType13868_ATT13868:=myrec;
		END;
	FUNCTION pATypeid13871_AT13871:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ OPPI16msc  ilcg.pattern@5f209c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13871_AT13871:=myrec;
		END;
	FUNCTION pATypeidType13870_ATT13870:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13871_AT13871;
		 pATypeidType13870_ATT13870:=myrec;
		END;
	FUNCTION pATypeid13873_AT13873:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ STORUPS  ilcg.pattern@15d1298}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13873_AT13873:=myrec;
		END;
	FUNCTION pATypeidType13872_ATT13872:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13873_AT13873;
		 pATypeidType13872_ATT13872:=myrec;
		END;
	FUNCTION pATypeid13875_AT13875:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ STORUPI16  ilcg.pattern@b35cf0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13875_AT13875:=myrec;
		END;
	FUNCTION pATypeidType13874_ATT13874:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13875_AT13875;
		 pATypeidType13874_ATT13874:=myrec;
		END;
	FUNCTION pATypeid13877_AT13877:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ STORUPI32  ilcg.pattern@ee64f1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13877_AT13877:=myrec;
		END;
	FUNCTION pATypeidType13876_ATT13876:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13877_AT13877;
		 pATypeidType13876_ATT13876:=myrec;
		END;
	FUNCTION pATypeid13879_AT13879:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ STORUPD  ilcg.pattern@10faed3}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13879_AT13879:=myrec;
		END;
	FUNCTION pATypeidType13878_ATT13878:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13879_AT13879;
		 pATypeidType13878_ATT13878:=myrec;
		END;
	FUNCTION pATypeid13881_AT13881:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ STORESS  ilcg.pattern@c4d1a7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13881_AT13881:=myrec;
		END;
	FUNCTION pATypeidType13880_ATT13880:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13881_AT13881;
		 pATypeidType13880_ATT13880:=myrec;
		END;
	FUNCTION pATypeid13883_AT13883:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ STORESD  ilcg.pattern@13163dd}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13883_AT13883:=myrec;
		END;
	FUNCTION pATypeidType13882_ATT13882:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13883_AT13883;
		 pATypeidType13882_ATT13882:=myrec;
		END;
	FUNCTION pATypeid13885_AT13885:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVUPD  ilcg.pattern@1663cf4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13885_AT13885:=myrec;
		END;
	FUNCTION pATypeidType13884_ATT13884:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13885_AT13885;
		 pATypeidType13884_ATT13884:=myrec;
		END;
	FUNCTION pATypeid13887_AT13887:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVSS  ilcg.pattern@1419df2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13887_AT13887:=myrec;
		END;
	FUNCTION pATypeidType13886_ATT13886:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13887_AT13887;
		 pATypeidType13886_ATT13886:=myrec;
		END;
	FUNCTION pATypeid13889_AT13889:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVSDl  ilcg.pattern@1a428d5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13889_AT13889:=myrec;
		END;
	FUNCTION pATypeidType13888_ATT13888:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13889_AT13889;
		 pATypeidType13888_ATT13888:=myrec;
		END;
	FUNCTION pATypeid13891_AT13891:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVSD  ilcg.pattern@1aa48fe}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13891_AT13891:=myrec;
		END;
	FUNCTION pATypeidType13890_ATT13890:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13891_AT13891;
		 pATypeidType13890_ATT13890:=myrec;
		END;
	FUNCTION pATypeid13893_AT13893:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVUPS  ilcg.pattern@17007c4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13893_AT13893:=myrec;
		END;
	FUNCTION pATypeidType13892_ATT13892:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13893_AT13893;
		 pATypeidType13892_ATT13892:=myrec;
		END;
	FUNCTION pATypeid13895_AT13895:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVAPS  ilcg.pattern@44cd9a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13895_AT13895:=myrec;
		END;
	FUNCTION pATypeidType13894_ATT13894:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13895_AT13895;
		 pATypeidType13894_ATT13894:=myrec;
		END;
	FUNCTION pATypeid13897_AT13897:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVUPD  ilcg.pattern@1663cf4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13897_AT13897:=myrec;
		END;
	FUNCTION pATypeidType13896_ATT13896:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13897_AT13897;
		 pATypeidType13896_ATT13896:=myrec;
		END;
	FUNCTION pATypeid13899_AT13899:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVUPI16  ilcg.pattern@40b1b1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13899_AT13899:=myrec;
		END;
	FUNCTION pATypeidType13898_ATT13898:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13899_AT13899;
		 pATypeidType13898_ATT13898:=myrec;
		END;
	FUNCTION pATypeid13901_AT13901:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVUPI32  ilcg.pattern@15e7bc4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13901_AT13901:=myrec;
		END;
	FUNCTION pATypeidType13900_ATT13900:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13901_AT13901;
		 pATypeidType13900_ATT13900:=myrec;
		END;
	FUNCTION pATypeid13903_AT13903:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SSRPOPI  ilcg.pattern@b3c884}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13903_AT13903:=myrec;
		END;
	FUNCTION pATypeidType13902_ATT13902:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13903_AT13903;
		 pATypeidType13902_ATT13902:=myrec;
		END;
	FUNCTION pATypeid13905_AT13905:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SSRPOP  ilcg.pattern@5d56af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13905_AT13905:=myrec;
		END;
	FUNCTION pATypeidType13904_ATT13904:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13905_AT13905;
		 pATypeidType13904_ATT13904:=myrec;
		END;
	FUNCTION pATypeid13907_AT13907:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XCMPPD  ilcg.pattern@77da01}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13907_AT13907:=myrec;
		END;
	FUNCTION pATypeidType13906_ATT13906:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13907_AT13907;
		 pATypeidType13906_ATT13906:=myrec;
		END;
	FUNCTION pATypeid13909_AT13909:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ XCMPPDR  ilcg.pattern@1d6e77}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13909_AT13909:=myrec;
		END;
	FUNCTION pATypeidType13908_ATT13908:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13909_AT13909;
		 pATypeidType13908_ATT13908:=myrec;
		END;
	FUNCTION pATypeid13911_AT13911:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ CMPPS  ilcg.pattern@3c03e1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13911_AT13911:=myrec;
		END;
	FUNCTION pATypeidType13910_ATT13910:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13911_AT13911;
		 pATypeidType13910_ATT13910:=myrec;
		END;
	FUNCTION pATypeid13913_AT13913:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MINp6  ilcg.pattern@140b31}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13913_AT13913:=myrec;
		END;
	FUNCTION pATypeidType13912_ATT13912:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13913_AT13913;
		 pATypeidType13912_ATT13912:=myrec;
		END;
	FUNCTION pATypeid13915_AT13915:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MAXp6  ilcg.pattern@49579a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13915_AT13915:=myrec;
		END;
	FUNCTION pATypeidType13914_ATT13914:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13915_AT13915;
		 pATypeidType13914_ATT13914:=myrec;
		END;
	FUNCTION pATypeid13917_AT13917:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ IFASSp6  ilcg.pattern@1ccadea}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13917_AT13917:=myrec;
		END;
	FUNCTION pATypeidType13916_ATT13916:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13917_AT13917;
		 pATypeidType13916_ATT13916:=myrec;
		END;
	FUNCTION pATypeid13919_AT13919:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FMINp6  ilcg.pattern@1f622fa}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13919_AT13919:=myrec;
		END;
	FUNCTION pATypeidType13918_ATT13918:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13919_AT13919;
		 pATypeidType13918_ATT13918:=myrec;
		END;
	FUNCTION pATypeid13921_AT13921:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FMAXp6  ilcg.pattern@b69c85}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13921_AT13921:=myrec;
		END;
	FUNCTION pATypeidType13920_ATT13920:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13921_AT13921;
		 pATypeidType13920_ATT13920:=myrec;
		END;
	FUNCTION pATypeid13923_AT13923:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ p6FIFGOTO  ilcg.pattern@141ce14}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13923_AT13923:=myrec;
		END;
	FUNCTION pATypeidType13922_ATT13922:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13923_AT13923;
		 pATypeidType13922_ATT13922:=myrec;
		END;
	FUNCTION pATypeid13925_AT13925:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FCHS  ilcg.pattern@ab5809}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13925_AT13925:=myrec;
		END;
	FUNCTION pATypeidType13924_ATT13924:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13925_AT13925;
		 pATypeidType13924_ATT13924:=myrec;
		END;
	FUNCTION pATypeid13927_AT13927:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FOPF  ilcg.pattern@5b0676}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13927_AT13927:=myrec;
		END;
	FUNCTION pATypeidType13926_ATT13926:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13927_AT13927;
		 pATypeidType13926_ATT13926:=myrec;
		END;
	FUNCTION pATypeid13929_AT13929:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FLOADLIT  ilcg.pattern@1c4fe21}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13929_AT13929:=myrec;
		END;
	FUNCTION pATypeidType13928_ATT13928:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13929_AT13929;
		 pATypeidType13928_ATT13928:=myrec;
		END;
	FUNCTION pATypeid13931_AT13931:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FILOADLIT  ilcg.pattern@dbacbf}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13931_AT13931:=myrec;
		END;
	FUNCTION pATypeidType13930_ATT13930:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13931_AT13931;
		 pATypeidType13930_ATT13930:=myrec;
		END;
	FUNCTION pATypeid13933_AT13933:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FMAX  ilcg.pattern@10e92fe}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13933_AT13933:=myrec;
		END;
	FUNCTION pATypeidType13932_ATT13932:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13933_AT13933;
		 pATypeidType13932_ATT13932:=myrec;
		END;
	FUNCTION pATypeid13935_AT13935:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FMIN  ilcg.pattern@154ab89}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13935_AT13935:=myrec;
		END;
	FUNCTION pATypeidType13934_ATT13934:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13935_AT13935;
		 pATypeidType13934_ATT13934:=myrec;
		END;
	FUNCTION pATypeid13937_AT13937:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FLD  ilcg.pattern@51b30d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13937_AT13937:=myrec;
		END;
	FUNCTION pATypeidType13936_ATT13936:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13937_AT13937;
		 pATypeidType13936_ATT13936:=myrec;
		END;
	FUNCTION pATypeid13939_AT13939:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FLDF  ilcg.pattern@1bcb230}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13939_AT13939:=myrec;
		END;
	FUNCTION pATypeidType13938_ATT13938:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13939_AT13939;
		 pATypeidType13938_ATT13938:=myrec;
		END;
	FUNCTION pATypeid13941_AT13941:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FILDF  ilcg.pattern@130df8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13941_AT13941:=myrec;
		END;
	FUNCTION pATypeidType13940_ATT13940:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13941_AT13941;
		 pATypeidType13940_ATT13940:=myrec;
		END;
	FUNCTION pATypeid13943_AT13943:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FILD  ilcg.pattern@19c21c1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13943_AT13943:=myrec;
		END;
	FUNCTION pATypeidType13942_ATT13942:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13943_AT13943;
		 pATypeidType13942_ATT13942:=myrec;
		END;
	FUNCTION pATypeid13945_AT13945:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FLOADDLIT  ilcg.pattern@1ce859d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13945_AT13945:=myrec;
		END;
	FUNCTION pATypeidType13944_ATT13944:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13945_AT13945;
		 pATypeidType13944_ATT13944:=myrec;
		END;
	FUNCTION pATypeid13947_AT13947:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FILDB  ilcg.pattern@189ed00}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13947_AT13947:=myrec;
		END;
	FUNCTION pATypeidType13946_ATT13946:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13947_AT13947;
		 pATypeidType13946_ATT13946:=myrec;
		END;
	FUNCTION pATypeid13949_AT13949:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ReversePolishFOP  ilcg.pattern@1946cd6}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13949_AT13949:=myrec;
		END;
	FUNCTION pATypeidType13948_ATT13948:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13949_AT13949;
		 pATypeidType13948_ATT13948:=myrec;
		END;
	FUNCTION pATypeid13951_AT13951:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FMOP  ilcg.pattern@6bfafb}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13951_AT13951:=myrec;
		END;
	FUNCTION pATypeidType13950_ATT13950:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13951_AT13951;
		 pATypeidType13950_ATT13950:=myrec;
		END;
	FUNCTION pATypeid13953_AT13953:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FPREM  ilcg.pattern@42d05e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13953_AT13953:=myrec;
		END;
	FUNCTION pATypeidType13952_ATT13952:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13953_AT13953;
		 pATypeidType13952_ATT13952:=myrec;
		END;
	FUNCTION pATypeid13955_AT13955:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FOP  ilcg.pattern@12e42b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13955_AT13955:=myrec;
		END;
	FUNCTION pATypeidType13954_ATT13954:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13955_AT13955;
		 pATypeidType13954_ATT13954:=myrec;
		END;
	FUNCTION pATypeid13957_AT13957:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FOPI  ilcg.pattern@15ab619}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13957_AT13957:=myrec;
		END;
	FUNCTION pATypeidType13956_ATT13956:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13957_AT13957;
		 pATypeidType13956_ATT13956:=myrec;
		END;
	FUNCTION pATypeid13959_AT13959:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FOPII  ilcg.pattern@1b75db9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13959_AT13959:=myrec;
		END;
	FUNCTION pATypeidType13958_ATT13958:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13959_AT13959;
		 pATypeidType13958_ATT13958:=myrec;
		END;
	FUNCTION pATypeid13961_AT13961:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FPOPMSI64  ilcg.pattern@19709b1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13961_AT13961:=myrec;
		END;
	FUNCTION pATypeidType13960_ATT13960:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13961_AT13961;
		 pATypeidType13960_ATT13960:=myrec;
		END;
	FUNCTION pATypeid13963_AT13963:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ RMULTB  ilcg.pattern@1785b00}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13963_AT13963:=myrec;
		END;
	FUNCTION pATypeidType13962_ATT13962:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13963_AT13963;
		 pATypeidType13962_ATT13962:=myrec;
		END;
	FUNCTION pATypeid13965_AT13965:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FISTR  ilcg.pattern@a159bb}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13965_AT13965:=myrec;
		END;
	FUNCTION pATypeidType13964_ATT13964:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13965_AT13965;
		 pATypeidType13964_ATT13964:=myrec;
		END;
	FUNCTION pATypeid13967_AT13967:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FSTR  ilcg.pattern@1daed73}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13967_AT13967:=myrec;
		END;
	FUNCTION pATypeidType13966_ATT13966:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13967_AT13967;
		 pATypeidType13966_ATT13966:=myrec;
		END;
	FUNCTION pATypeid13969_AT13969:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FSTRF  ilcg.pattern@ae10cd}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13969_AT13969:=myrec;
		END;
	FUNCTION pATypeidType13968_ATT13968:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13969_AT13969;
		 pATypeidType13968_ATT13968:=myrec;
		END;
	FUNCTION pATypeid13971_AT13971:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FILDIP  ilcg.pattern@4bd160}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13971_AT13971:=myrec;
		END;
	FUNCTION pATypeidType13970_ATT13970:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13971_AT13971;
		 pATypeidType13970_ATT13970:=myrec;
		END;
	FUNCTION pATypeid13973_AT13973:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ EXTENDMS  ilcg.pattern@103aa37}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13973_AT13973:=myrec;
		END;
	FUNCTION pATypeidType13972_ATT13972:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13973_AT13973;
		 pATypeidType13972_ATT13972:=myrec;
		END;
	FUNCTION pATypeid13975_AT13975:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ EXTENDANY  ilcg.pattern@9a113a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13975_AT13975:=myrec;
		END;
	FUNCTION pATypeidType13974_ATT13974:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13975_AT13975;
		 pATypeidType13974_ATT13974:=myrec;
		END;
	FUNCTION pATypeid13977_AT13977:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FIFGOTO  ilcg.pattern@c7eb9d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13977_AT13977:=myrec;
		END;
	FUNCTION pATypeidType13976_ATT13976:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13977_AT13977;
		 pATypeidType13976_ATT13976:=myrec;
		END;
	FUNCTION pATypeid13979_AT13979:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FIFGOTOgeneral  ilcg.pattern@1ad3946}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13979_AT13979:=myrec;
		END;
	FUNCTION pATypeidType13978_ATT13978:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13979_AT13979;
		 pATypeidType13978_ATT13978:=myrec;
		END;
	FUNCTION pATypeid13981_AT13981:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FSET  ilcg.pattern@2e6640}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13981_AT13981:=myrec;
		END;
	FUNCTION pATypeidType13980_ATT13980:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13981_AT13981;
		 pATypeidType13980_ATT13980:=myrec;
		END;
	FUNCTION pATypeid13983_AT13983:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ DPOPMS  ilcg.pattern@1b120}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13983_AT13983:=myrec;
		END;
	FUNCTION pATypeidType13982_ATT13982:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13983_AT13983;
		 pATypeidType13982_ATT13982:=myrec;
		END;
	FUNCTION pATypeid13985_AT13985:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FLOATLDR  ilcg.pattern@5d6633}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13985_AT13985:=myrec;
		END;
	FUNCTION pATypeidType13984_ATT13984:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13985_AT13985;
		 pATypeidType13984_ATT13984:=myrec;
		END;
	FUNCTION pATypeid13987_AT13987:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FLOATMS  ilcg.pattern@a86d82}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13987_AT13987:=myrec;
		END;
	FUNCTION pATypeidType13986_ATT13986:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13987_AT13987;
		 pATypeidType13986_ATT13986:=myrec;
		END;
	FUNCTION pATypeid13989_AT13989:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FPOPMS  ilcg.pattern@c6948c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13989_AT13989:=myrec;
		END;
	FUNCTION pATypeidType13988_ATT13988:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13989_AT13989;
		 pATypeidType13988_ATT13988:=myrec;
		END;
	FUNCTION pATypeid13991_AT13991:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FILDR  ilcg.pattern@1bbf45e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13991_AT13991:=myrec;
		END;
	FUNCTION pATypeidType13990_ATT13990:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13991_AT13991;
		 pATypeidType13990_ATT13990:=myrec;
		END;
	FUNCTION pATypeid13993_AT13993:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FISTB  ilcg.pattern@2aedd3}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13993_AT13993:=myrec;
		END;
	FUNCTION pATypeidType13992_ATT13992:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13993_AT13993;
		 pATypeidType13992_ATT13992:=myrec;
		END;
	FUNCTION pATypeid13995_AT13995:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FPREMu  ilcg.pattern@1a5aa86}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13995_AT13995:=myrec;
		END;
	FUNCTION pATypeidType13994_ATT13994:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13995_AT13995;
		 pATypeidType13994_ATT13994:=myrec;
		END;
	FUNCTION pATypeid13997_AT13997:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FPUSHI  ilcg.pattern@17afc95}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13997_AT13997:=myrec;
		END;
	FUNCTION pATypeidType13996_ATT13996:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13997_AT13997;
		 pATypeidType13996_ATT13996:=myrec;
		END;
	FUNCTION pATypeid13999_AT13999:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FPUSHD  ilcg.pattern@1a7f14f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid13999_AT13999:=myrec;
		END;
	FUNCTION pATypeidType13998_ATT13998:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid13999_AT13999;
		 pATypeidType13998_ATT13998:=myrec;
		END;
	FUNCTION pATypeid14001_AT14001:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FPUSHF  ilcg.pattern@152a84b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid14001_AT14001:=myrec;
		END;
	FUNCTION pATypeidType14000_ATT14000:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid14001_AT14001;
		 pATypeidType14000_ATT14000:=myrec;
		END;
	FUNCTION pATypeid14003_AT14003:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ STOREAXDu  ilcg.pattern@149b164}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid14003_AT14003:=myrec;
		END;
	FUNCTION pATypeidType14002_ATT14002:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid14003_AT14003;
		 pATypeidType14002_ATT14002:=myrec;
		END;
	FUNCTION pATypeid14005_AT14005:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SSRPUSH  ilcg.pattern@f4a3a1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid14005_AT14005:=myrec;
		END;
	FUNCTION pATypeidType14004_ATT14004:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid14005_AT14005;
		 pATypeidType14004_ATT14004:=myrec;
		END;
	FUNCTION pATypeid14007_AT14007:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVDl  ilcg.pattern@d5408e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid14007_AT14007:=myrec;
		END;
	FUNCTION pATypeidType14006_ATT14006:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid14007_AT14007;
		 pATypeidType14006_ATT14006:=myrec;
		END;
	FUNCTION pATypeid14009_AT14009:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVDs  ilcg.pattern@c489a0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid14009_AT14009:=myrec;
		END;
	FUNCTION pATypeidType14008_ATT14008:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid14009_AT14009;
		 pATypeidType14008_ATT14008:=myrec;
		END;
	FUNCTION pATypeid14011_AT14011:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ RPUSH  ilcg.pattern@1201ad7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid14011_AT14011:=myrec;
		END;
	FUNCTION pATypeidType14010_ATT14010:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid14011_AT14011;
		 pATypeidType14010_ATT14010:=myrec;
		END;
	FUNCTION pATypeid14013_AT14013:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ RPOP  ilcg.pattern@2096d7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid14013_AT14013:=myrec;
		END;
	FUNCTION pATypeidType14012_ATT14012:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid14013_AT14013;
		 pATypeidType14012_ATT14012:=myrec;
		END;
		procedure predecp;begin

			pattype_^.meaning^.first:=402;
			pattype_^.meaning^.last:=415;
		new(patword_);
		new(patword_^.meaning);
		patword_^.meaning^.tag:=format;
		patword_^.meaning^.formatarg:=fword;
		patword_^.matchedassembler:=string2printlist('DWORD');
		alternatives[402]:=patword_;
		new(patuint32_32);
		new(patuint32_32^.meaning);
		patuint32_32^.meaning^.tag:=format;
		patuint32_32^.meaning^.formatarg:=fuint32;
		patuint32_32^.matchedassembler:=string2printlist('DWORD');
		alternatives[403]:=patuint32_32;
		new(patint32_32);
		new(patint32_32^.meaning);
		patint32_32^.meaning^.tag:=format;
		patint32_32^.meaning^.formatarg:=fint32;
		patint32_32^.matchedassembler:=string2printlist('DWORD');
		alternatives[404]:=patint32_32;
		new(patieee64_64);
		new(patieee64_64^.meaning);
		patieee64_64^.meaning^.tag:=format;
		patieee64_64^.meaning^.formatarg:=fieee64;
		patieee64_64^.matchedassembler:=string2printlist('QWORD');
		alternatives[405]:=patieee64_64;
		new(patdoubleword_);
		new(patdoubleword_^.meaning);
		patdoubleword_^.meaning^.tag:=format;
		patdoubleword_^.meaning^.formatarg:=fdoubleword;
		patdoubleword_^.matchedassembler:=string2printlist('QWORD');
		alternatives[406]:=patdoubleword_;
		new(patuint64_64);
		new(patuint64_64^.meaning);
		patuint64_64^.meaning^.tag:=format;
		patuint64_64^.meaning^.formatarg:=fuint64;
		patuint64_64^.matchedassembler:=string2printlist('QWORD');
		alternatives[407]:=patuint64_64;
		new(patint64_64);
		new(patint64_64^.meaning);
		patint64_64^.meaning^.tag:=format;
		patint64_64^.meaning^.formatarg:=fint64;
		patint64_64^.matchedassembler:=string2printlist('QWORD');
		alternatives[408]:=patint64_64;
		new(patoctet_);
		new(patoctet_^.meaning);
		patoctet_^.meaning^.tag:=format;
		patoctet_^.meaning^.formatarg:=foctet;
		patoctet_^.matchedassembler:=string2printlist('BYTE');
		alternatives[409]:=patoctet_;
		new(patuint8_8);
		new(patuint8_8^.meaning);
		patuint8_8^.meaning^.tag:=format;
		patuint8_8^.meaning^.formatarg:=fuint8;
		patuint8_8^.matchedassembler:=string2printlist('BYTE');
		alternatives[410]:=patuint8_8;
		new(patint16_16);
		new(patint16_16^.meaning);
		patint16_16^.meaning^.tag:=format;
		patint16_16^.meaning^.formatarg:=fint16;
		patint16_16^.matchedassembler:=string2printlist('WORD');
		alternatives[411]:=patint16_16;
		new(patuint16_16);
		new(patuint16_16^.meaning);
		patuint16_16^.meaning^.tag:=format;
		patuint16_16^.meaning^.formatarg:=fuint16;
		patuint16_16^.matchedassembler:=string2printlist('WORD');
		alternatives[412]:=patuint16_16;
		new(patint8_8);
		new(patint8_8^.meaning);
		patint8_8^.meaning^.tag:=format;
		patint8_8^.meaning^.formatarg:=fint8;
		patint8_8^.matchedassembler:=string2printlist('BYTE');
		alternatives[413]:=patint8_8;
		new(patieee32_32);
		new(patieee32_32^.meaning);
		patieee32_32^.meaning^.tag:=format;
		patieee32_32^.meaning^.formatarg:=fieee32;
		patieee32_32^.matchedassembler:=string2printlist('DWORD');
		alternatives[414]:=patieee32_32;
		new(pathalfword_);
		new(pathalfword_^.meaning);
		pathalfword_^.meaning^.tag:=format;
		pathalfword_^.meaning^.formatarg:=fhalfword;
		pathalfword_^.matchedassembler:=string2printlist('WORD');
		alternatives[415]:=pathalfword_;
		end;
