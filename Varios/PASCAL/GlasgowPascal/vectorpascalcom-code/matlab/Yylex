// pascal lexical analyser
package matlab;
import java.io.*;
import java.util.*;
import java_cup.runtime.*;
import matlab.sym;
import ilcg.SyntaxError;
%%
%line
%cup
%yylexthrow{
SyntaxError
%yylexthrow}
%char
%ignorecase
%unicode
%{
String yytemp="";
String yystring="";
boolean echo=false;
int column = 0;
Symbol mksym(int s)
{
	if (s == sym.CR )yymark=yychar;
	if(echo)System.out.print(yytext()+" ");
	if ( s == sym.CONSTANT){
		return new Symbol(s,yyline,col(),new Double(yytext()));
	}
	else
	if ( s == sym.STRING_LITERAL){
		return new Symbol(s,yyline,col(),strip(yytext()));
	}
	else
	if ( s == sym.IDENTIFIER){
		return new Symbol(s,yyline,col(),(yytext()));
	}
	else
	return new Symbol(s,yyline,col());
}
int yymark=0;
int col(){return yychar-yymark;}
String strip(String s){
		int len = s.length();
		if (len>=3)s=s.substring(1,s.length()-1);
		else s="";
		len=s.length();
		String newstr="";
		for(int i=0;i<len;i++)
		   if(s.charAt(i)=='\'' ){
			newstr=newstr+"'";
			i++ ;
			}
		   else newstr=newstr+s.charAt(i);
		return newstr;
	}
   
int check_type()
{
/*
* pseudo code --- this is what it should check
*
*       if (yytext == type_name)
*               return(TYPE_NAME);
*
*       return(IDENTIFIER);
*/

/*
*       it actually will only return IDENTIFIER
*/

        return(sym.IDENTIFIER);
}
 
%}
%init{


 	       

%init}




%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol
D=[0-9]
L=[a-zA-Z_]
E=[DdEe][+-]?{D}+
 
%state ST,TR
%%
"%".*$                  {  if(echo)System.out.println(yytext());;yybegin(ST); }
"!".*$                  { /*ECHO;*/ }
"...".*\n               {  /* return(CONTINUATION); */yymark=yychar; }

"break"                 {  yybegin(ST); return(mksym(sym.BREAK)); }
"clear"                 {  yybegin(ST); return mksym(sym.CLEAR); }
"else"                  {  yybegin(ST); return mksym( sym.ELSE); }
"end"                   {  yybegin(ST); return mksym( sym.END); }
"elseif"                {  yybegin(ST); return mksym( sym. ELSEIF); }
"for"                   {  yybegin(ST); return mksym( sym. FOR); }
"function"              {  yybegin(ST); return mksym( sym. FUNCTION); }
"global"                {  yybegin(ST); return mksym( sym. GLOBAL); }
"if"                    {  yybegin(ST); return mksym( sym. IF); }
"return"                {  yybegin(ST); return mksym( sym. RETURN); }
"while"                 {  yybegin(ST); return mksym( sym. WHILE); }

{L}({L}|{D})*           {  yybegin(TR);	 return mksym(sym.IDENTIFIER); }

{D}+({E})?              {  yybegin(TR); return mksym( sym. CONSTANT); }
{D}*"."{D}+({E})?       {  yybegin(TR); return mksym( sym. CONSTANT); }
{D}+"."{D}*({E})?       {  yybegin(TR); return mksym( sym. CONSTANT); }
<ST>'[^'\n]*'/'         {  yybegin(ST); yytemp=yytemp+yytext(); }
<ST>'[^'\n]*'           {  yybegin(YYINITIAL);yystring=yytemp+yytext();yytemp=""; return mksym( sym. STRING_LITERAL); }
<TR>'                   {  yybegin(TR); return mksym( sym. TRANSPOSE); }
".*"                    {  yybegin(ST); return mksym( sym. ARRAYMUL); }
".^"                    {  yybegin(ST); return mksym( sym. ARRAYPOW); }
"./"                    {  yybegin(ST); return mksym( sym. ARRAYDIV); }
\.\\                    {  yybegin(ST); return mksym( sym. ARRAYRDIV); }
".'"                    {  yybegin(TR); return mksym( sym. NCTRANSPOSE); }
"<="                    {  yybegin(ST); return mksym( sym. LE_OP); }
">="                    {  yybegin(ST); return mksym( sym. GE_OP); }
"=="                    {  yybegin(ST); return mksym( sym. EQ_OP); }
"~="                    {  yybegin(ST); return mksym( sym. NE_OP); }
"~"                     {  yybegin(ST); return mksym ( sym. TILDA); }
";"                     {  yybegin(ST); return mksym ( sym.SEMICOLON); }
","                     {  yybegin(ST); return mksym ( sym.COMMA); }
":"                     {  yybegin(ST); return mksym ( sym. COLON); }
"="                     {  yybegin(ST); return mksym ( sym.EQ); }
"("                     {  yybegin(ST); return mksym ( sym.LBRACE); }
")"                     {  yybegin(TR); return mksym ( sym.RBRACE); }
"["                     {  yybegin(ST); return mksym ( sym.BRA); }
"]"                     {  yybegin(TR); return mksym ( sym.KET); }
"&"                     {  yybegin(ST); return mksym ( sym.AMPERSAND); }
"-"                     {  yybegin(ST); return mksym ( sym.MINUS); }
"+"                     {  yybegin(ST); return mksym ( sym.PLUS); }
"*"                     {  yybegin(ST); return mksym ( sym. STAR); }
"/"                     {  yybegin(ST); return mksym ( sym. SLASH); }
\\                      {  yybegin(ST); return mksym ( sym. BACKSLASH); }
"<"                     {  yybegin(ST); return mksym ( sym. LT); }
">"                     {  yybegin(ST); return mksym ( sym. GT); }
"^"                     {  yybegin(ST); return mksym ( sym. HAT); }
"|"                     {  yybegin(ST); return mksym ( sym. VBAR); }
\x0d\x0a		{  yybegin(ST); return mksym ( sym . CR); }
<TR>\x0d\x0a		{  yybegin(ST); return mksym ( sym . CR); }
\n                      {  yybegin(ST); return mksym ( sym . CR); }
<TR>\n                  {  yybegin(ST); return mksym ( sym . CR); }
[ \t\v\f]               {  yybegin(ST); }
<TR>[ \t\v\f]           {  yybegin(ST); }
.                       {  yybegin(ST); /* ignore bad characters */ }
<TR>.                   {  yybegin(ST); /* ignore bad characters */ }

