package tinyb;
/* compiler generated by Ilcg */ 
import java.util.*;
import java.io.*;
import ilcg.tree.*;
import tinyb.analysis.*;
import tinyb.lexer.*;
import tinyb.parser.*;
import tinyb.node.*;
class tinybasic  {
public static void main(String[] arguments){
if(arguments.length <1){ System.out.println("usage:\njava tinyb.tinybasic sourcefile   ");System.exit(1); }
try{   FileReader r=    new FileReader(arguments[0]);
     PushbackReader pr =  new PushbackReader(  new BufferedReader( r), 1024)  ;
     Lexer lexer = new Lexer( pr ); 
     Parser parser = new Parser(lexer);
     tinyb.node.Node ast = parser.parse();     
     ARMCG cpu = new ARMCG();
     if(arguments.length>1){ cpu.verbose=true;  }
     ilcg.tree.Node[] trans = Translator.translate(ast,cpu);
     if(cpu.verbose){ System.out.println( trans[0].toString());}
     PrintWriter asm  = new PrintWriter(new FileOutputStream(arguments[0]+".asm"));
     cpu.setLogfile(new PrintWriter(new FileOutputStream(arguments[0]+ ".lst")));
     try{
       if(!cpu.codeGen(trans[0])) throw new Exception("codegen fails on code ");
       cpu.buf.writeln(cpu.sectionDirective()+"  .data");
       if(!cpu.codeGen(trans[1])) throw new Exception("codegen fails on data");
     } catch(Exception e){ System.out.println(e);}
     cpu.flush(asm);cpu.flushlog(); asm.close();
     cpu.assemble(arguments[0]+".asm",arguments[0]+".o" );
} catch(Exception e){ System.out.println(e);}
 }
}
