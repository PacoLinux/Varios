#LyX 1.6.2 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass book
\use_default_options true
\begin_modules
theorems-ams
\end_modules
\language english
\inputencoding auto
\font_roman times
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize 10
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 2cm
\headheight 0.5cm
\headsep 0.4cm
\footskip 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Advances In Programming Languages: proceedings of the 2009 SICSA summer
 school.
\end_layout

\begin_layout Standard
\begin_inset FloatList algorithm

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList table

\end_inset


\end_layout

\begin_layout Chapter
SIMD and Multi-core Parallelisation in an Imperative Language.
\end_layout

\begin_layout Author
Paul Cockshott, Tamerlan Tajadinov
\end_layout

\begin_layout Section
Hardware Context
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
One of the most significant trends that can be observed in the modern processor
 design is towards an increased parallelism.
 Single Instruction Multiple Data-stream (SIMD) computing has a long history
\begin_inset CommandInset citation
LatexCommand cite
key "dap,hillis"

\end_inset

, but in the 1990s, a technique that had previously only been applicable
 in large machines began to be applied to microprocessors
\begin_inset CommandInset citation
LatexCommand cite
key "tremblay1996vis,peleg1996mmx"

\end_inset

.
 Primarily aimed at graphics applications, SIMD instructions were introduced
 for the x86 in Pentium MMX processors allowing saturated arithmetic to
 be performed on up to eight 8-bit or two 32-bit integers at a time.
 The concept was further developed in SSE2 processors
\begin_inset CommandInset citation
LatexCommand cite
key "conte2000long"

\end_inset

 by allowing floating point operations to be performed on up to four single
 precision or two double precision floats at a time, while also doubling
 the number of possible integer operands.
 The IBM/Sony Cell 
\begin_inset CommandInset citation
LatexCommand cite
key "kahle2005introduction"

\end_inset

processor used in the PlayStation 3 also operates on vectors of data of
 similar size.
 Moreover, the next generation of Intel GPGPUs codenamed Larrabee also follows
 the trend by allowing up to 64 8-bit integers or 16 single precision floats
 to be operated on with a single instruction.
\end_layout

\begin_layout Standard
While traditionally an increase in the performance of a CPU used to be associate
d with an increased clock speed, this historic trend is no longer observed
 as much.
 An increase in the clock speed demands a sharp increase in the power consumptio
n and leads to a rise in the heat dissipation, thus the clock speed is limited
 by reasons of thermodynamics to presently around 3.5GHz as in case of Wolfdale
 DP generation of Xeon processors.
 This limitation is now increasingly commonly compensated for by planting
 multiple cores on a processor chip - a solution that has originated from
 high performance systems the performance of which frequently benefits from
 multiple CPUs.
 As the number of cores in a system increases, the CPU clock speed tends
 to be reduced by the processor designers, thus the 4-core Core 2 Quad processor
 operates on frequencies of up to 3.2GHz depending on the model of the chip
 compared to its single core predecessor Pentium 4 running on clock speeds
 of up to 3.8GHz several years prior.
 In mobile computing demands on reduced power consumption have retained
 CPU frequencies at much lower rates of around 1-2.5GHz and dual and even
 quad core processors are widely used.
\end_layout

\begin_layout Standard
The above developments in the topic of processor design have introduced
 further demands in compiler design.
 The majority of imperative programming languages, especially those derived
 from C, typically operate on a single element at a time, thus, for example,
 should we wish to add two vectors of integers together each pair of elements
 will be added one at a time, which is not in line with the hardware capabilitie
s allowing for arithmetic operations to be performed on multiple operands
 at a time.
 Furthermore, unless multiple threads are explicitly spawned, only one of
 the cores is likely to be utilised, leading to the reducing processor clock
 speed being the main performance indicator for applications written in
 these legacy programming languages.
 The remainder of this article discusses Vector Pascal, an imperative language
 designed to utilise the increasing capacity of modern processors through
 hardware parallelism.
\end_layout

\begin_layout Section
The Example Language
\end_layout

\begin_layout Standard
Vector Pascal
\begin_inset CommandInset citation
LatexCommand cite
key "cockshottsigplan"

\end_inset

 was developed by the computer vision group at the University of Glasgow
 as a language for high performance image processing.
 It is an extension of Pascal
\begin_inset CommandInset citation
LatexCommand cite
key "jensen1991pum,ISO90a"

\end_inset

 with array language concepts.
 Array programming languages arose from the work of Iverson.
 During the 1950s, when the latter was working as a doctoral student for
 the Nobelist Leontief on the computation of the US input output tables
 he developed Iverson's Notation, a concise and unambiguous mathematical
 notation for expressing matrix computation.
 The notation was taken up by IBM and released as the computer language
 APL
\begin_inset CommandInset citation
LatexCommand cite
key "iverson62"

\end_inset

.
 What distinguished APL from other contemporary languages was both its rather
 abstruse character set, and its ability to concisely express calculations
 over whole arrays in a single assignment statement.
 It was an untyped interpretive language.
 Pascal on the other hand is famously a strongly typed language.
 There have been many interpretive successors to APL, the most popular ones
 being Matlab
\begin_inset CommandInset citation
LatexCommand cite
key "mathworks1984matlab"

\end_inset

 and J
\begin_inset CommandInset citation
LatexCommand cite
key "Jmanual"

\end_inset

.
 Introduction of array language techniques into typed imperative languages
 started with versions of FORTRAN
\begin_inset CommandInset citation
LatexCommand cite
key "dapfortran,Ewing,brainerd1996programmer"

\end_inset

.
 A number of other compiled array languages have subsequently been developed
\begin_inset CommandInset citation
LatexCommand cite
key "Snyder,blelloch,GrelSchoPPL03"

\end_inset

.
 What has distinguished Vector Pascal from these is its particular emphasis
 on efficient targeting the parallel features embodied in commodity microprocess
ors: initially SIMD instructions, and more recently multi-core facilities.
 In what follows we describe only those extended features of the language
 that relate to parallelism.
 Extensions relating to the type system, mathematical character sets etc,
 are ignored.
\end_layout

\begin_layout Subsection
Extend array semantics
\end_layout

\begin_layout Standard
Standard Pascal allows assignment of whole arrays.
 Vector Pascal
\begin_inset CommandInset citation
LatexCommand cite
key "cockshottsigplan"

\end_inset

 extends this to allow consistent use of mixed rank expressions on the right
 hand side of an assignment.
 For example, given:
\end_layout

\begin_layout LyX-Code
r1:
\color red
array
\color inherit
[0..7] 
\color red
of real
\color inherit
;
\end_layout

\begin_layout LyX-Code
r2:
\color red
array
\color inherit
[0..7,0..7] 
\color red
of real
\end_layout

\begin_layout Standard
then we can write: 
\end_layout

\begin_layout LyX-Code

\family roman
  1.

\family default
 
\family typewriter
r1:= 1/2; 
\begin_inset Newline newline
\end_inset


\family default
 
\family roman
2.

\family default
 
\family typewriter
r2:= r1*3; 
\begin_inset Newline newline
\end_inset


\family default
 
\family roman
3.

\family default
 
\family typewriter
r1:= r1+r2[1];
\family default
 
\end_layout

\begin_layout Subsection
Equivalent loops
\begin_inset CommandInset label
LatexCommand label
name "sub:Equivalent-loops"

\end_inset


\end_layout

\begin_layout Standard
Line 1 assigns 
\family typewriter
0.5
\family default
 to each element of 
\family typewriter
r1
\family default
.
 
\end_layout

\begin_layout Standard
Line 2 assigns 
\family typewriter
1.5
\family default
 to every element of 
\family typewriter
r2
\family default
.
 
\end_layout

\begin_layout Standard
In line 3, 
\family typewriter
r1
\family default
 is incremented with the corresponding elements of row 1 of 
\family typewriter
r2
\family default
.
 
\end_layout

\begin_layout Standard
These are defined to be equivalent to the following standard Pascal loops:
 
\end_layout

\begin_layout LyX-Code

\family roman
1'.

\family default
 
\color red
for
\family typewriter
\color inherit
 
\begin_inset Formula $\iota_{0}$
\end_inset

:=0 
\family default
\color red
to
\family typewriter
\color inherit
 7 
\family default
\color red
do
\family typewriter
\color inherit
 
\end_layout

\begin_layout LyX-Code

\family typewriter
    r1[
\begin_inset Formula $\iota_{0}$
\end_inset

]:=1/2; 
\begin_inset Newline newline
\end_inset


\family roman
2'.

\family default
 
\color red
for
\family typewriter
\color inherit
 
\begin_inset Formula $\iota_{0}$
\end_inset

:=0 
\family default
\color red
to
\family typewriter
\color inherit
 7 
\family default
\color red
do
\family typewriter
\color inherit
 
\end_layout

\begin_layout LyX-Code

\family typewriter
    
\family default
\color red
for
\family typewriter
\color inherit
 
\begin_inset Formula $\iota_{1}$
\end_inset

:=0 
\family default
\color red
to
\family typewriter
\color inherit
 7 
\family default
\color red
do
\family typewriter
\color inherit
 
\end_layout

\begin_layout LyX-Code

\family typewriter
      r2[
\begin_inset Formula $\iota_{0},\iota_{1}$
\end_inset

]:=r1[
\begin_inset Formula $\iota_{1}$
\end_inset

]*3;
\family default
 
\end_layout

\begin_layout LyX-Code

\family roman
3'.

\family default
  
\color red
for
\family typewriter
\color inherit
 
\begin_inset Formula $\iota_{0}$
\end_inset

:=0 
\family default
\color red
to
\family typewriter
\color inherit
 7 
\family default
\color red
do
\family typewriter
\color inherit
 
\end_layout

\begin_layout LyX-Code

\family typewriter
    r1[
\begin_inset Formula $\iota_{0}$
\end_inset

]:=r1[
\begin_inset Formula $\iota_{0}$
\end_inset

]+r2[1,
\begin_inset Formula $\iota_{0}$
\end_inset

];
\family default
 
\end_layout

\begin_layout Standard
The compiler has to generate an implicit loop
\begin_inset Index
status collapsed

\begin_layout Plain Layout
loop
\end_layout

\end_inset

.
 In the above 
\family typewriter

\begin_inset Formula $\iota_{0},\iota_{1}$
\end_inset

,
\begin_inset Formula $t$
\end_inset


\family default
 are temporary variables created by the compiler.
 The implicit indices 
\family typewriter

\begin_inset Formula $\iota_{0},\iota_{1}$
\end_inset


\family default
 etc are accessible to a coder using the syntax 
\family typewriter
iota[0], iota[1]
\family default
 etc.
 
\end_layout

\begin_layout Subsection
Data reformatting
\end_layout

\begin_layout Standard
Given two conforming matrices a, b
\end_layout

\begin_layout Standard
the statement
\end_layout

\begin_layout LyX-Code
a:= 
\color red
trans
\color inherit
 b;
\end_layout

\begin_layout Standard
will transpose the matrix b into a.
\end_layout

\begin_layout Standard
For more general reorganisations you can permute the implicit indices thus
\end_layout

\begin_layout LyX-Code
a:=
\color red
perm
\color inherit
[1,0] b ;
\end_layout

\begin_layout LyX-Code
{ equivalent to a:= trans b }
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
z:=
\color red
perm
\color inherit
[1,2,0] y;
\end_layout

\begin_layout Standard
In the second case z and y must be 3 d arrays and the result is such that
 z[i,j,k]=y[j,k,i].
 It is clearly desirable to do this in a way which prevents the creation
 of temporary arrays.
 We will discuss below the general strategy to minimise the creation of
 temporaries.
\end_layout

\begin_layout Standard
Given 
\family typewriter
\size small
a:
\size default
\color red
array
\size small
\color inherit
[0..10,0..15] 
\size default
\color red
of
\size small
\color inherit
 t
\family default
\size default
; then 
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
a[1]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\color red
array
\size small
\color inherit
 [0..15]
\size default
\color red
 of
\size small
\color inherit
 t
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
a[1..2]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\color red
array
\size small
\color inherit
 [0..1,0..15]
\size default
\color red
 of
\size small
\color inherit
 t
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
a[][1]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\color red
array
\size small
\color inherit
[0..10,0..0] 
\size default
\color red
of
\size small
\color inherit
 t
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
a[1..2,4..6]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\color red
array
\size small
\color inherit
[0..1,0..3] 
\size default
\color red
of
\size small
\color inherit
 t
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Implicit mapping
\end_layout

\begin_layout Standard
Maps are implicitly defined on both operators and functions.
 
\end_layout

\begin_layout Standard
If 
\family typewriter
f
\family default
 is a function or unary operator mapping from type 
\begin_inset Formula $T_{1}$
\end_inset

 to type 
\begin_inset Formula $T_{2}$
\end_inset

 and 
\family typewriter
x
\family default
 : 
\family typewriter
\color red
array of
\family default
\color inherit
 
\begin_inset Formula $T_{1}$
\end_inset

 then 
\family typewriter
a:=f(x)
\family default
 assigns an array of 
\begin_inset Formula $T_{2}$
\end_inset

 such that 
\family typewriter
a[i]=f(x[i])
\family default
.
 Similarly if we have 
\family typewriter
g(p,q:
\family default

\begin_inset Formula $T_{1}$
\end_inset


\family typewriter
):
\family default
 
\begin_inset Formula $T_{2}$
\end_inset

,then 
\family typewriter
a:=g(x,y)
\family default
 for 
\family typewriter
x,y:
\color red
array of
\family default
\color inherit
 
\begin_inset Formula $T_{1}$
\end_inset

 gives 
\family typewriter
a[i]=g(x[i],y[i])
\end_layout

\begin_layout Subsection
Pixel Arithmetic
\end_layout

\begin_layout Standard
Pixels are a predefined data type, represented as 8 bit signed fixed point
 binary fractions.
 The numerical range of pixels is from -1 to +1.
 Arithmetic on pixels is inherently saturating.
 The existence of types supporting saturated arithmetic is an advantage
 in image processing.
\end_layout

\begin_layout Section
Parsing and Automatic Mapping of Operators and Functions
\begin_inset CommandInset label
LatexCommand label
name "sec:Parsing-and-Automatic"

\end_inset


\end_layout

\begin_layout Standard
Translation takes place using a modification of the classic single pass
 compiler approach used by Wirth
\begin_inset CommandInset citation
LatexCommand cite
key "jensen1991pum"

\end_inset

, and described in 
\begin_inset CommandInset citation
LatexCommand cite
key "davie1982recursive"

\end_inset

.
 In this approach a recursive recognising function is declared for each
 non-terminal in the grammar of the source language.
 On success the recognising function outputs, as a side effect, a stream
 of byte codes for a machine independent intermediate code.
 We have modified the approach in two ways in both order to parse array
 expressions and also to allow the efficient translation of the array expression
s to parallel code.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="5">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
compiler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
code generator
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tree-form
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
machine
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
pascal source
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\rightarrow$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
intermediate
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\rightarrow$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
specific
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
code
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
assembler
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Since the work of Budd
\begin_inset CommandInset citation
LatexCommand cite
key "Budd"

\end_inset

 it has been known that efficient compilation of an array language requires
 that one eliminate the formation of temporary arrays in the course of array
 expressions.
 It turns out that a simple extension of recursive descent parsing techniques
 allows this.
\end_layout

\begin_layout Standard
Consider a simplified version of the Vector Pascal grammar for assignments
 :
\end_layout

\begin_layout LyX-Code
<ass>   ::= <variable> ':=' <exp>
\end_layout

\begin_layout LyX-Code
<exp>   ::= <term><addop><term>
\end_layout

\begin_layout LyX-Code
<term>  ::= <factor><multop><factor>
\end_layout

\begin_layout LyX-Code
<factor>::= '(' <exp> ')' 
\end_layout

\begin_layout LyX-Code
        | <variable>
\end_layout

\begin_layout LyX-Code
        | <reduction> <factor>
\end_layout

\begin_layout LyX-Code
        | 'trans' <factor>
\end_layout

\begin_layout Standard
Consider the following example produced by the grammar:
\end_layout

\begin_layout LyX-Code
z:= y+ 
\backslash
+(A * B );
\end_layout

\begin_layout Standard
where 
\family typewriter
y,z
\family default
 are vectors and 
\family typewriter
A, B
\family default
 matrices.
 
\backslash
 is the reduction functional which reduces an expression by an operator.
 Thus 
\backslash
+ forms the sum along the rows of the matrix formed by the Hadamard product
 of 
\family typewriter
A
\family default
 and 
\family typewriter
B
\family default
.
 A naive compilation would generate 3 temporaries for this, a matrix for
 
\family typewriter
A*B
\family default
, a vector for the sum of 
\family typewriter
A*B
\family default
 then a final vector as a result of adding y.
\end_layout

\begin_layout Standard
A standard recursive descent parser would have functions 
\family typewriter
ass, exp, term, factor : typedescriptor
\family default
 which would read the compiler input stream, return the type of the expression
 or sub expression they recognised, and as a side-effect output a stream
 of intermediate byte-codes.
 In order to handle array expressions we modify these so that they are now
 of the form:
\end_layout

\begin_layout LyX-Code
function exp(Iotalocations:vector):IlcgTree;
\end_layout

\begin_layout Standard
Each parsing function now takes as a parameter a vector of addresses of
 memory locations to be used as loop index variables, and instead of returning
 a type, it returns a intermediate code tree.
 The assignment function inspects its first symbol - a variable and determines
 the rank of the variable.
 It then creates a vector of index locations with respect to the current
 frame pointer and passes this vector in to the call it makes on exp.
 The length of the vector of index locations is determined by the rank of
 the variable being assigned to.
 The following pseudo code explains the technique:
\end_layout

\begin_layout LyX-Code
function ass:IlcgTree;
\end_layout

\begin_layout LyX-Code
  musthave(Id_symbol);
\end_layout

\begin_layout LyX-Code
  id:=currentsymbol;r:=rankof(id);
\end_layout

\begin_layout LyX-Code
  v:= createIotaVector(r);
\end_layout

\begin_layout LyX-Code
  e:= exp(v);
\end_layout

\begin_layout LyX-Code
  dest:= locationof(id);
\end_layout

\begin_layout LyX-Code
  for i := 1 to r do
\end_layout

\begin_layout LyX-Code
    dest:= subscript(dest,v[i]);
\end_layout

\begin_layout LyX-Code
  return createnestedforloops(dest,v,e);
\end_layout

\begin_layout Standard
To understand what is produced refer back to section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Equivalent-loops"

\end_inset

.
 The exp function in turn passes the vector of index locations to its terms:
\end_layout

\begin_layout LyX-Code
function exp(Iotalocations:vector):IlcgTree;
\end_layout

\begin_layout LyX-Code
  t1:= term(Iotalocations);
\end_layout

\begin_layout LyX-Code
  if have ( addop ) then
\end_layout

\begin_layout LyX-Code
     op:=currentsymbol;
\end_layout

\begin_layout LyX-Code
     t2:=term(Iotalocations)
\end_layout

\begin_layout LyX-Code
     return dyad(t1,op,t2)
\end_layout

\begin_layout LyX-Code
  else return t1;
\end_layout

\begin_layout Standard
At the bottom level of the parse, the function to recognise a variable uses
 the index vector to reduce any array variable to a scalar.
 
\end_layout

\begin_layout LyX-Code
function variable(Iotalocations:vector):IlcgTree;
\end_layout

\begin_layout LyX-Code
  musthave(Id_symbol);
\end_layout

\begin_layout LyX-Code
  id:=currentsymbol;
\end_layout

\begin_layout LyX-Code
  r:=getrank(id);
\end_layout

\begin_layout LyX-Code
  u:=upbound(Iotalocations);
\end_layout

\begin_layout LyX-Code
  v:= locationof(id);
\end_layout

\begin_layout LyX-Code
  for i := 1 to r do
\end_layout

\begin_layout LyX-Code
    v:= subscript(v,iotalocation[i+u-r]);
\end_layout

\begin_layout LyX-Code
  return v;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
The 
\family typewriter
subscript
\family default
 function constructs and returns an intermediate code tree to perform the
 subscription of the variable by the contents of the memory location described
 by 
\family typewriter
Iotalocations
\family default
.
 The effect is that the exp function will always return intermediate code
 that will evaluate to a scalar rather than an array.
 This scalar result is then embedded in a for loop as specified in section
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Equivalent-loops"

\end_inset

.
 All intermediate array values are eliminated allowing the code generator
 to use conventional register optimisation techniques for array valued expressio
ns.
 There are a couple of special cases worth noting:
\end_layout

\begin_layout Enumerate
Reduction factors.
 On encountering a reduction functional the 
\family typewriter
factor
\family default
 function creates a new vector of indices.
 If the initial vector of 
\family typewriter
Iotalocations
\family default
 was of length n this will be of length n+1 with the last element being
 the address of a new index variable to be used in a reduction loop.
 This longer vector of indices is then passed into a recursive call of 
\family typewriter
factor
\family default
.
 The code generated for the reduction is always for a scalar operation.
 
\end_layout

\begin_layout Enumerate
Transpositions and permutations.
 These are performed on the index vector at compile time before passing
 it in to a recursive call of the 
\family typewriter
factor
\family default
 parsing function.
 There is no additional run time cost associated with the transpose operation.
\end_layout

\begin_layout Standard
The vector of index locations is similar in principle to the technique used
 in Single Assignment C 
\begin_inset CommandInset citation
LatexCommand cite
key "GrelSchoPPL03"

\end_inset

 for array de-referencing, but whereas in SAC an index vector is explicitly
 present in the indexing semantics of the language, in our case it is an
 implicit vector existing only at compile time.
 Vector Pascal allows the index vector 
\family typewriter
iota
\family default
 to be used in sub-scripted form within a factor thus
\end_layout

\begin_layout LyX-Code
p:= q[iota[0]+1]*0.5+q[iota[0]-1]*0.5;
\end_layout

\begin_layout Standard
would be legal where 
\end_layout

\begin_layout LyX-Code
p:array[1..n] of real;q: array[0..n+1] of real;
\end_layout

\begin_layout Standard
but it do not allow 
\family typewriter
iota
\family default
 to be passed as a parameter to a function, or allow it to be indexed by
 a run time expression.
 Although, in simple cases, 
\family typewriter
iota
\family default
 corresponds to a sequence of ascending adjacent addresses, and could thus
 be mapped to a conventional array, in more complex expressions involving
 matrix transpositions or reduction operations this is no longer true.
\end_layout

\begin_layout Section
Opportunities to Parallelise Array Assignments
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-Streaming-SIMD"

\end_inset

 shows the Streaming SIMD (SSE) model of processing supported by Intel and
 AMD machines.
 Data is loaded, up to 16 operands at a time into XMM registers.
 These are then operated on using up to 16 parallel ALUs in register to
 register mode.
 The results are then written to memory up to 16 operands at a time.
 Streaming is achieved by prefetching subsequent operands into cache so
 that memory fetches occur in parallel with processing.
 It is clear that this architecture is optimised for vector processing,
 both because vectors are operated on and because the prefetching mechanism
 assumes sequential organisation of operands in memory.
\end_layout

\begin_layout Standard
Using the SSE model, it is possible to achieve startling speedups on one
 dimensional array operations.
\end_layout

\begin_layout Standard
An additional level of complexity is introduced by multi-cores.
 Each one of these cores works best when running along a vector, or along
 the rows of a matrix.
 The separate cores can however independently work on different rows of
 a two dimensional array problem.
 A natural form of parallelism, suggested by the hardware architecture is
 thus to use SIMD for vector processing along rows, and to spread computations
 on different rows between cores.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename streamingsimd.eps
	width 14cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The Streaming SIMD 
\begin_inset CommandInset label
LatexCommand label
name "fig:The-Streaming-SIMD"

\end_inset

model of processing.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Transformation for SIMD Parallelism
\end_layout

\begin_layout Standard
The intermediate code generated by the parser described in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Parsing-and-Automatic"

\end_inset

 produces scalar serialised intermediate code.
 This can be run on any processor, but if the processor has vector registers
 the scalar code will be sub-optimal.
 After the parser has generated code for an assignment it queries the code
 generator to see if vector registers are available for the data type produced
 by the expression.
 If yes, then the scalar intermediate code is a candidate to be transformed
 to vectorised intermediate code.
 We will illustrate the process of translating code for array expressions
 with an ultra-simple example which adds two images together.
 When operating with 8 bit pixels one has the problem that arithmetic operations
 can wrap round.
 Thus adding two bright pixels can lead to a result that is dark.
 So one has to put in guards against this.
 The problem of adding two arrays of pixels and making sure that we never
 get any pixels wrapping round can be solved in C a shown in Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:C-code-to"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status collapsed

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
C code to add two images, along with timing on a 3Ghz Opteron.
 Compiled with gcc.
\begin_inset CommandInset label
LatexCommand label
name "alg:C-code-to"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\size footnotesize
#define LEN 6400
\end_layout

\begin_layout LyX-Code

\size footnotesize
#define CNT 100000
\end_layout

\begin_layout LyX-Code

\size footnotesize
main()
\end_layout

\begin_layout LyX-Code

\size footnotesize
{
\end_layout

\begin_layout LyX-Code

\size footnotesize
  unsigned char v1[LEN],v2[LEN],v3[LEN];
\end_layout

\begin_layout LyX-Code

\size footnotesize
  int i,j,t;
\end_layout

\begin_layout LyX-Code

\size footnotesize
 /* repeat many times for timing */
\end_layout

\begin_layout LyX-Code

\size footnotesize
  for(i=0;i<CNT;i++)
\end_layout

\begin_layout LyX-Code

\size footnotesize
     for (j=0;j<LEN;j++) [
\end_layout

\begin_layout LyX-Code

\size footnotesize
      t=v2[j]+v1[j];
\end_layout

\begin_layout LyX-Code

\size footnotesize
      if( t>255)t=255; 
\end_layout

\begin_layout LyX-Code

\size footnotesize
      v3[j]=t;
\end_layout

\begin_layout LyX-Code

\size footnotesize
     }
\end_layout

\begin_layout LyX-Code

\size footnotesize
}
\end_layout

\begin_layout LyX-Code

\size footnotesize
[wpc@maui tests]$ time C/a.out
\end_layout

\begin_layout LyX-Code

\size footnotesize
real    0m2.854s
\end_layout

\begin_layout LyX-Code

\size footnotesize
user    0m2.813s
\end_layout

\begin_layout LyX-Code

\size footnotesize
sys     0m0.004s
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Float algorithm
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Vector Pascal 
\begin_inset CommandInset label
LatexCommand label
name "alg:Vector-Pascal-code"

\end_inset

code equivalent to the C code in Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:C-code-to"

\end_inset

.
 Timing on the same machine as in Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:C-code-to"

\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\size footnotesize
\color red
program
\color inherit
 vecadd;
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color red
type
\color inherit
 byte=0..255;
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color red
var
\color inherit
 v1,v2,v3:
\color red
array
\color inherit
[0..6399]
\color red
of
\color inherit
 byte;
\end_layout

\begin_layout LyX-Code

\size footnotesize
    i:
\color red
integer
\color inherit
;
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color red
begin
\end_layout

\begin_layout LyX-Code

\size footnotesize
     
\color red
for
\color inherit
 i:= 1 
\color red
to
\color inherit
 100000 
\color red
do
\color inherit
 
\end_layout

\begin_layout LyX-Code

\size footnotesize
         v3:=v1 +: v2;
\end_layout

\begin_layout LyX-Code

\size footnotesize
        { 
\color green
+: is the saturated add operation
\color inherit
 }
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color red
end
\color inherit
.
\end_layout

\begin_layout LyX-Code

\size footnotesize
[wpc@maui tests]$ time vecadd
\end_layout

\begin_layout LyX-Code

\size footnotesize
real    0m0.094s
\end_layout

\begin_layout LyX-Code

\size footnotesize
user    0m0.091s
\end_layout

\begin_layout LyX-Code

\size footnotesize
sys     0m0.005s
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The equivalent Vector Pascal code is shown in Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Vector-Pascal-code"

\end_inset

.
 The very much improved performance comes from effective utilisation of
 the available SIMD instructions on the Opteron.
 The original statement is translated into ILCG as shown:
\end_layout

\begin_layout Paragraph*
Pascal
\end_layout

\begin_layout LyX-Code
  v3:=v1 +: v2;
\end_layout

\begin_layout Paragraph*
ILCG
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\size footnotesize
     mem(ref uint8 vector ( 6400 ),  +(PmainBase, -25600) ):=
\end_layout

\begin_layout LyX-Code

\size footnotesize
     +:(^(mem(ref uint8 vector ( 6400 ),  +(PmainBase, -12800))),
\end_layout

\begin_layout LyX-Code

\size footnotesize
        ^(mem(ref uint8 vector ( 6400 ),  +(PmainBase, -19200))))) 
\end_layout

\begin_layout Standard
Note that all operation are annotated with type information, and all variables
 are resolved to explicit address calculations in ILCG.
 Hence it is close to the machine, but it still allows expression of parallel
 operations.

\family typewriter
 
\family default
The symbol 
\family typewriter
^
\family default
 is the ILCG dereference operation, following the Pascal convention.
 Efficient translation depends on there being a close match available between
 the semantics of available machine instructions and the ILCG operations
 specified by the first level of translation.
 We specify the machine instruction-set in ILCG.
 As an example, here are some key instruction specifications taken from
 the machine specification file 
\family typewriter
\size footnotesize
gnuPentium.ilc
\family default
\size default
 which specifies the semantics of the Gnu assembler language for the Pentium:
\end_layout

\begin_layout Paragraph*
Saturated Add  Bytes
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color red
instruction pattern
\color inherit
 PADDUSB(mreg m, mrmaddrmode ma)     
\end_layout

\begin_layout LyX-Code

\size footnotesize
 
\color red
means
\color inherit
[(ref uint8 vector(8))m := 
\end_layout

\begin_layout LyX-Code

\size footnotesize
      (uint8 vector(8))+:((uint8 vector(8))^(m),
\end_layout

\begin_layout LyX-Code

\size footnotesize
                          (uint8 vector(8))^(ma))]      
\end_layout

\begin_layout LyX-Code

\size footnotesize
 
\color red
assembles
\color inherit
 ['paddusb 'ma ',' m];
\end_layout

\begin_layout Paragraph*
Vector Load and Store 
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color red
instruction pattern
\color inherit
 MOVQL(maddrmode rm, mreg m)         
\end_layout

\begin_layout LyX-Code

\size footnotesize
  
\color red
means
\color inherit
[m := (doubleword)^(rm)]   
\end_layout

\begin_layout LyX-Code

\size footnotesize
  
\color red
assembles
\color inherit
['movq ' rm ',' m'
\backslash
n prefetchnta 128+'rm];
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color red
instruction pattern
\color inherit
 MOVQS(maddrmode rm, mreg m)         
\end_layout

\begin_layout LyX-Code

\size footnotesize
  
\color red
means
\color inherit
[(ref doubleword)rm:= ^(m)]        
\end_layout

\begin_layout LyX-Code

\size footnotesize
  
\color red
assembles
\color inherit
['movq 'm ','rm];
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
We automatically build a family of optimising  code generators that translate
 from ILCG trees to linear assembly code by pattern matching.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="5">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ILCG 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Java 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Compiler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Compiler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pentium.ilc
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\rightarrow$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pentium.java
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\rightarrow$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pentium.class
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Opteron.ilc
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\rightarrow$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Opteron.java
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\rightarrow$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Opteron.class
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
To port to new machines one has to write a machine description of that CPU
 in ILCG.
 We currently have production versions for the Intel and AMD machines
\begin_inset CommandInset citation
LatexCommand cite
key "Jackson05"

\end_inset

 since the 386 plus Beta versions for the PlayStation 2
\begin_inset CommandInset citation
LatexCommand cite
key "cooper05"

\end_inset

 and PlayStation 3.
\end_layout

\begin_layout Standard
Basic array operations are broken down into strides equal to the machine
 vector length.
 Then these are then matched to machine instructions following the general
 approach of Graham 
\begin_inset CommandInset citation
LatexCommand cite
key "graham"

\end_inset

 to generate code.
\end_layout

\begin_layout Standard

\emph on
ILCG input to Opteron.class
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\size footnotesize
     mem(ref uint8 vector ( 6400 ),  +(PmainBase, -25600) ):=
\end_layout

\begin_layout LyX-Code

\size footnotesize
     +:(^(mem(ref uint8 vector ( 6400 ),  +(PmainBase, -12800))),
\end_layout

\begin_layout LyX-Code

\size footnotesize
        ^(mem(ref uint8 vector ( 6400 ),  +(PmainBase, -19200))))) 
\end_layout

\begin_layout Standard

\emph on
Assembler output by Opteron.class
\end_layout

\begin_layout LyX-Code

\size footnotesize
   leaq         0,%rdx             ; init loop counter
\end_layout

\begin_layout LyX-Code

\size footnotesize
l1:cmpq         $ 6399, %rdx
\end_layout

\begin_layout LyX-Code

\size footnotesize
   jg           l3
\end_layout

\begin_layout LyX-Code

\size footnotesize
   movq         PmainBase-12800(%rdx),%MM4
\end_layout

\begin_layout LyX-Code

\size footnotesize
   prefetchnta 128+PmainBase-12800(%rdx) ; get data 16 iterations  
\end_layout

\begin_layout LyX-Code

\size footnotesize
                                         ;  ahead into cache
\end_layout

\begin_layout LyX-Code

\size footnotesize
   paddusb     PmainBase-19200(%rdx),%MM4
\end_layout

\begin_layout LyX-Code

\size footnotesize
   movq        %MM4,PmainBase-25600(%rdx)
\end_layout

\begin_layout LyX-Code

\size footnotesize
   addq        $ 8,%rdx
\end_layout

\begin_layout LyX-Code

\size footnotesize
   jmp         l1
\end_layout

\begin_layout LyX-Code

\size footnotesize
l3:
\end_layout

\begin_layout Standard
To maintain comparability with the C example we show the code generated
 at optimisation level 0.
 The timing shown in Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Vector-Pascal-code"

\end_inset

 was obtained at optimisation level 0.
 At higher optimisation levels vectorisation is followed by loop unrolling
 and other well known techniques.
 These result considerably more opaque assembler.
\end_layout

\begin_layout Subsection
Preconditions for SIMD parallelisation
\end_layout

\begin_layout Standard
For SIMD parallelisation to be viable a number of conditions must be checked.
\end_layout

\begin_layout Enumerate
The expression on the right hand side must not contain any function calls,
 since functions return scalar results.
\end_layout

\begin_layout Enumerate
The operands in the expression must be of the same data length.
 For instance, one can not efficiently perform SIMD addition between two
 arrays if one contains 32 floating point numbers and the other contains
 64 bit floating point.
\end_layout

\begin_layout Enumerate
The least significant indices of all arrays in the expression must either
 be the same, or must differ by an additive term.
 Thus the ILCG code equivalent to 
\family typewriter
a[i,j]+b[i,j]
\family default
 is SIMD parallelisable as is 
\family typewriter
a[i,j+10]+b[i,j]
\family default
 but 
\family typewriter
a[i,j]+b[j,i]
\family default
 would not be parallelisable since in the case of 
\family typewriter
b
\family default
 we are stepping down columns as 
\family typewriter
j
\family default
 is incremented.
 Since column elements are not stored adjacently in memory, one can not
 perform a SIMD load of them.
 Nor would 
\family typewriter
a[i,j]+b[i,j*3]
\family default
 be parallelisable, again because the successive elements of 
\family typewriter
b
\family default
 being used are not adjacent.
 On the other hand 
\family typewriter
a[i,j]+c[i]
\family default
 for some column vector 
\family typewriter
c
\family default
 can be parallelised since it is usually possible to replicate a scalar
 
\family typewriter
c[i]
\family default
 across all elements of a SIMD register.
\end_layout

\begin_layout Enumerate
If the array lengths being operated on are not an integer multiple of the
 SIMD register lengths, SIMD and scalar code must be combined.
 Suppose the array length is 10 and the register length is 4.
 Then SIMD code is used to operate on the first 8 elements of the array,
 and scalar code for the remaining two elements.
 For dynamic arrays, this test has to be delayed until run time.
 In this case the 'remainder code' is performed by an optional scalar loop
 appended to the SIMD loop.
\end_layout

\begin_layout Section
Transformation for Multi-core Parallelism
\end_layout

\begin_layout Standard
SIMD vectorisation works for one dimensional data, or on the last dimension
 for arrays stored in row major order, because the hardware has to work
 on adjacent words.
 SIMD gives considerable acceleration on image data, and worthwhile acceleration
s on floating point and integer data.
 Future machines like the Larrabee will have considerably wider SIMD registers,
 increasing the benefits of SIMD code.
 But newer chips also have multiple cores.
 For these, the recent versions of the Vector Pascal compiler will parallelise
 across multiple cores if the arrays being worked on are of rank 2.
 The Pascal source code of the program remains the same independently of
 whether it is being targeted at a simple sequential machine, a SIMD machine
 or a multi-core SIMD machine.
 Targeting is done by flags passed to the compiler:
\end_layout

\begin_layout LyX-Code
vpc sub2dex -cpu486
\end_layout

\begin_layout Standard
would compile sub2dex.pas using purely sequential 32 bit instructions.
\end_layout

\begin_layout LyX-Code
vpc sub2dex -cpuOpteron
\end_layout

\begin_layout Standard
would compile the same file targeted to a 64 bit Opteron with 1 core using
 the SIMD instructions in the Opteron instructionset.
\end_layout

\begin_layout LyX-Code
vpc sub2dex -cpuOpteron -cores2
\end_layout

\begin_layout Standard
would compile the file to a 64 bit Opteron with 2 cores and SIMD instructions.
 The compiler is implemented in Java so the selection of code generators
 and compilation strategies is achieved by dynamically loading appropriate
 compiler and code generator classes.
\end_layout

\begin_layout Standard
Let us now look at the transformations required to achieve this using a
 trivial rank 2 array example in Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Example-of-combined"

\end_inset

.
 The example is not intended to be realistic or useful, only illustrative.
 We assume that the code has been compiled for a dual core Opteron.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Example of combined mult-core and SIMD parallelism.
\begin_inset CommandInset label
LatexCommand label
name "alg:Example-of-combined"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\size footnotesize
\color red
procedure
\color inherit
 sub2d;
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color red
type
\color inherit
 range=0..127; 
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color red
var
\color inherit
 x,y,z:
\color red
array
\color inherit
[range,range] 
\color red
of real
\color inherit
;
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color red
begin
\end_layout

\begin_layout LyX-Code

\size footnotesize
        x:=y-z;
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color red
end
\color inherit
;
\end_layout

\begin_layout Plain Layout
This translates into ILCG as follows when compiled for a dual core Opteron
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color red
procedure
\color inherit
(sub2d,
\end_layout

\begin_layout LyX-Code

\size footnotesize
 
\color red
procedure
\color inherit
 (label12 
\color green
...
 see Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:The-function-performing"

\end_inset


\color inherit
 )
\end_layout

\begin_layout LyX-Code

\size footnotesize
 post_job[label12,^(%rbp),1];   /* 
\color green
send to core 1
\color inherit
 */
\end_layout

\begin_layout LyX-Code

\size footnotesize
 /* Note that %rbp is the Opteron stack frame pointer */          
\end_layout

\begin_layout LyX-Code

\size footnotesize
 post_job[label12,^(%rbp),0];   /* 
\color green
send to core 0
\color inherit
 */             
\end_layout

\begin_layout LyX-Code

\size footnotesize
 wait_on_done[0];
\end_layout

\begin_layout LyX-Code

\size footnotesize
 wait_on_done[1];
\end_layout

\begin_layout LyX-Code

\size footnotesize
)
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Two threads are dispatched to process the work using a fork - rejoin paradigm.
 The run time library is built on top of pthreads
\begin_inset CommandInset citation
LatexCommand cite
key "nichols1996pthreads"

\end_inset

.
 For a two core machine, two server threads are initiated at program start
 up.
 These wait on a semaphore until post_job passes them the address of a procedure
 and a stack frame context within which the procedure is to be executed.
\end_layout

\begin_layout Standard
The statement x:=y-z  is translated into a procedure that can run as a separate
 task, the ILCG has been simplified for comprehensibility in Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:The-function-performing"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The function performing nested loops.
\begin_inset CommandInset label
LatexCommand label
name "alg:The-function-performing"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\size scriptsize
\color red
procedure
\color inherit
 (label12 /* 
\color green
internal label
\color inherit
*/ ,
\end_layout

\begin_layout LyX-Code

\size scriptsize
 
\color red
for
\color inherit
(mem(+(^(%rbp),-24)),^(mem(+(^(%rbp),16))),127  ,   
\series bold
\color blue
2
\series default
\color inherit
, 
\end_layout

\begin_layout LyX-Code

\size scriptsize
     /*
\color green
iota [0]             task number        limit  step
\color inherit
*/
\end_layout

\begin_layout LyX-Code

\size scriptsize
  
\color red
var
\color inherit
(mem(+(^(%rbp),-32))),/* iota[1] */
\end_layout

\begin_layout LyX-Code

\size scriptsize
  
\color red
for
\color inherit
(mem(+(^(%rbp),-32)), 0    ,127,     
\series bold
\color blue
4
\series default
\color inherit
 ,
\end_layout

\begin_layout LyX-Code

\size scriptsize
     /*
\color green
iota [1]            start limit  step
\color inherit
*/
\end_layout

\begin_layout LyX-Code

\size scriptsize
   mem(ref ieee32 vector ( 4 ), /* 
\color green
x[iota[0],iota[1]]
\color inherit
 */
\end_layout

\begin_layout LyX-Code

\size scriptsize
       +(+(*(^(mem(+(^(%rbp),-24))),512), 
\end_layout

\begin_layout LyX-Code

\size scriptsize
         +(*(^(mem(+(^(%rbp),-32))),  4),-131072)), 
\end_layout

\begin_layout LyX-Code

\size scriptsize
           ^(mem(+(^(%rbp),-8))))):=
\end_layout

\begin_layout LyX-Code

\size scriptsize
     -(^(mem(ref ieee32 vector ( 4 ),/* 
\color green
y[iota[0],iota[1]]
\color inherit
 */
\end_layout

\begin_layout LyX-Code

\size scriptsize
       +(+(*(^(mem(+(^(%rbp),-24))),512), 
\end_layout

\begin_layout LyX-Code

\size scriptsize
         +(*(^(mem(+(^(%rbp),-32))),  4),-196608)), 
\end_layout

\begin_layout LyX-Code

\size scriptsize
           ^(mem(+(^(%rbp),-8)))))),
\end_layout

\begin_layout LyX-Code

\size scriptsize
       ^(mem(ref ieee32 vector ( 4 ),/* 
\color green
z[iota[0],iota[1]]
\color inherit
 */
\end_layout

\begin_layout LyX-Code

\size scriptsize
         +(+(*(^(mem(+(^(%rbp), -24))),512), 
\end_layout

\begin_layout LyX-Code

\size scriptsize
           +(*(^(mem(+(^(%rbp), -32))),  4),-262144)), 
\end_layout

\begin_layout LyX-Code

\size scriptsize
             ^(mem(+(^(%rbp),-8))))))))),
\end_layout

\begin_layout LyX-Code

\size scriptsize
 )
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\size scriptsize
      
\size default
               
\end_layout

\begin_layout Standard
The basic structure of the task procedure is two nested for loops, one for
 each dimension of the arrays.
 
\end_layout

\begin_layout Standard
The outer loop or row index steps by 2 to ensure that each task will process
 every 2nd row, starting at the row given by the task number.
 Thus task 0 will process rows 0,2,4,6,...
 Task 1 will proocess rows 1,3,5,7,...
 If there are 4 cores available each task will process every 4th row, etc.
 
\end_layout

\begin_layout Standard
The inner loop, for the column indices, advances by 4 since the Opteron
 has SIMD registers capable of handling 4 floating point numbers at a time.
\end_layout

\begin_layout Section
The PURE Function Extension
\end_layout

\begin_layout Standard
We define a pure function to be such that does not have any side effects,
 i.e.
 it does not update any global, or shared, states outside of its own scope.
 If the other functions are called from the body of the function, these
 also have to be pure even if not marked as such.
 This definition of pure functions is consistent with the definition used
 in FORTRAN 95.
 Given the absence of explicit multi-threading constructs in the given language,
 the above property of pure functions implies thread safety.
 A function can be labeled as pure by prepending the keyword 
\family typewriter
pure
\family default
 in front of every declaration or definition of the function.
 This means that if, for example, a function is declared as pure in the
 interface section of the programme, it must be also declared as pure anywhere
 else in the code, e.g.
 in the subsequent definition of the function body.
 Any inconsistency in the declared purity of a function is spotted by the
 compiler and treated as a syntactic error.
\end_layout

\begin_layout LyX-Code

\series bold
pure
\series default
 
\series bold
function
\series default
 next(i : integer): integer;
\end_layout

\begin_layout LyX-Code

\series bold
begin
\end_layout

\begin_layout LyX-Code
        next := i+1;
\end_layout

\begin_layout LyX-Code

\series bold
end
\series default
;
\end_layout

\begin_layout Standard
Above function 
\emph on
next
\emph default
 operates only on the parameter passed to it, thus it is appropriate to
 declare it as pure.
 The keyword 
\emph on
pure
\emph default
 does not bare any semantic value, other than it serves as a hint to the
 compiler which may then generate multi-threaded code.
 Multi-threaded code will be generated if -cores
\emph on
n
\emph default
 flag is passed to the compiler specifying more than one core, and hence
 the number of threads, available to the programme and if the function is
 then invoked as part of an assignment statement.
\end_layout

\begin_layout Section
Task Parallelism and Block Structure
\end_layout

\begin_layout Standard
The technique of procedurising code shown in Algorithms 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Example-of-combined"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:The-function-performing"

\end_inset

 is well established when parallelising loops in Open-MP 
\begin_inset CommandInset citation
LatexCommand cite
key "dagum1998openmp"

\end_inset

.
 There are two significant differences.
 First, and least significantly, in Vector Pascal the loop is implicit rather
 than the explicit loops used in Open-MP.
 But secondly Open-MP is targeted at C and FORTRAN which are flat languages.
 Pascal is a block structured language which makes the access to variables
 by spawned tasks somewhat more complex.
 Consider Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Taylor-series-example."

\end_inset

 which illustrates the use of nested blocks in Pascal.
 This has a main program 
\family typewriter
nestpar
\family default
 and embedded within that a procedure 
\family typewriter
emap
\family default
 which takes a matrix 
\begin_inset Formula $a$
\end_inset

 as a parameter and replaces each 
\begin_inset Formula $a_{i,j}$
\end_inset

 with 
\begin_inset Formula $e^{scale.a_{i,j}}$
\end_inset

 where 
\begin_inset Formula $scale$
\end_inset

 is a global variable.
 The exponential function is approximated by a Taylor series 
\end_layout

\begin_layout Standard
\begin_inset Formula \[
e^{x}=1+\frac{1}{1!}x^{1}+\frac{1}{1!}x^{1}+\frac{1}{2!}x^{2}+\frac{1}{3!}x^{3}+...\]

\end_inset


\end_layout

\begin_layout Standard
using the function 
\family typewriter
Taylor
\family default
.
 The Taylor series is evaluated as
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\backslash
textsf{
\backslash
textit{Taylor}$
\backslash
leftarrow$  $
\backslash
sum$  (
\backslash
textit{coefs} $
\backslash
times$ 
\backslash
textit{x}$^{
\backslash
iota_{0}}$) }; }
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
where 
\begin_inset Formula $\iota_{0}=0,1,2,3...$
\end_inset

 using the line
\end_layout

\begin_layout LyX-Code
Taylor:=   
\backslash
+ (coefs * x pow iota[0]);
\end_layout

\begin_layout Standard
The coefs vector has been initialised in the main program to contain the
 inverse factorial series as required.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:Taylor-series-example."

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Taylor series example.
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\size footnotesize
program nestpar;
\end_layout

\begin_layout LyX-Code

\size footnotesize
type t = array[1..3,1..2] of real;
\end_layout

\begin_layout LyX-Code

\size footnotesize
     coef=array[0..5] of real;
\end_layout

\begin_layout LyX-Code

\size footnotesize
                { tabulate inverse factorials }
\end_layout

\begin_layout LyX-Code

\size footnotesize
const expc:coef=(1,1,1/2,1/6,1/24,1/(5*24));
\end_layout

\begin_layout LyX-Code

\size footnotesize
var scale:real;B:t;
\end_layout

\begin_layout LyX-Code

\size footnotesize
procedure emap(var a:t);
\end_layout

\begin_layout LyX-Code

\size footnotesize
  { for each a[i,j] replace with a[i,j]+exp(scale*a[i,j]) }
\end_layout

\begin_layout LyX-Code

\size footnotesize
  var coefs:coef;
\end_layout

\begin_layout LyX-Code

\size footnotesize
  pure function Taylor( x:real):real;
\end_layout

\begin_layout LyX-Code

\size footnotesize
  begin
\end_layout

\begin_layout LyX-Code

\size footnotesize
    Taylor:=   
\backslash
+ (coefs * x pow iota[0]);
\end_layout

\begin_layout LyX-Code

\size footnotesize
  end;
\end_layout

\begin_layout LyX-Code

\size footnotesize
begin
\end_layout

\begin_layout LyX-Code

\size footnotesize
   coefs:= expc;
\end_layout

\begin_layout LyX-Code

\size footnotesize
   a := Taylor(a*scale);
\end_layout

\begin_layout LyX-Code

\size footnotesize
end;
\end_layout

\begin_layout LyX-Code

\size footnotesize
begin
\end_layout

\begin_layout LyX-Code

\size footnotesize
     scale:=0.1;
\end_layout

\begin_layout LyX-Code

\size footnotesize
     B:= iota[0]*iota[1];
\end_layout

\begin_layout LyX-Code

\size footnotesize
     write(B);
\end_layout

\begin_layout LyX-Code

\size footnotesize
     emap(B);
\end_layout

\begin_layout LyX-Code

\size footnotesize
     write(B);
\end_layout

\begin_layout LyX-Code

\size footnotesize
end.
\end_layout

\begin_layout Plain Layout
Output Produced
\end_layout

\begin_layout LyX-Code

\size footnotesize
     1.00000     2.00000
\end_layout

\begin_layout LyX-Code

\size footnotesize
     2.00000     4.00000
\end_layout

\begin_layout LyX-Code

\size footnotesize
     3.00000     6.00000
\end_layout

\begin_layout LyX-Code

\size footnotesize
       
\end_layout

\begin_layout LyX-Code

\size footnotesize
     1.10517     1.22140
\end_layout

\begin_layout LyX-Code

\size footnotesize
     1.22140     1.49182
\end_layout

\begin_layout LyX-Code

\size footnotesize
     1.34986     1.82205
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename nestparstack1.eps
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Stack for nestpar in single core mode.
\begin_inset CommandInset label
LatexCommand label
name "fig:Stack-for-nestpar"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
There are a number of references from inner to outer scopes: 
\family typewriter
Taylor
\family default
 uses the vector 
\family typewriter
coefs
\family default
, and 
\family typewriter
emap
\family default
 uses the variable 
\family typewriter
scale
\family default
.
 There are three well known techniques for implementing this in normal procedura
l code: 
\begin_inset Formula $\lambda$
\end_inset

lifting, static chaining or display vectors.
 Since Intel provide direct hardware support for display vectors in the
 procedure ENTER and LEAVE instructions we have chosen to use displays.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Stack-for-nestpar"

\end_inset

 illustrates how the stack would be organised during execution of Taylor
 when the program is compiled for a single core machine.
 Observe how Taylor can access variables in the enclosing stack frames using
 the display vector.
 But if the code is to run on a dual core machine there will be not one
 but three stacks as shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-3-stacks"

\end_inset

: one for the main program and one each for the child tasks.
 The original function 
\family typewriter
emap
\family default
 will have been written to ILCG equivalent to:
\end_layout

\begin_layout LyX-Code

\size footnotesize
procedure emap(var a:t);
\end_layout

\begin_layout LyX-Code

\size footnotesize
  var coefs:coef;
\end_layout

\begin_layout LyX-Code

\size footnotesize
  pure function Taylor( x:real):real;
\end_layout

\begin_layout LyX-Code

\size footnotesize
  begin
\end_layout

\begin_layout LyX-Code

\size footnotesize
    Taylor:=   
\backslash
+ (coefs * x pow iota[0]);
\end_layout

\begin_layout LyX-Code

\size footnotesize
  end;
\end_layout

\begin_layout LyX-Code

\size footnotesize
  procedure dummy(start:int);
\end_layout

\begin_layout LyX-Code

\size footnotesize
  var iota:array[0..1] of integer;
\end_layout

\begin_layout LyX-Code

\size footnotesize
  begin
\end_layout

\begin_layout LyX-Code

\size footnotesize
    iota[0]:=start;
\end_layout

\begin_layout LyX-Code

\size footnotesize
    while iota[0]<=3 do
\end_layout

\begin_layout LyX-Code

\size footnotesize
    begin
\end_layout

\begin_layout LyX-Code

\size footnotesize
      for iota[1]:=1 to 2 do
\end_layout

\begin_layout LyX-Code

\size footnotesize
       a[iota[0],iota[1]]:=Taylor(a[iota[0],iota[1]]*scale);
\end_layout

\begin_layout LyX-Code

\size footnotesize
      iota[0]:=iota[0]+2;
\end_layout

\begin_layout LyX-Code

\size footnotesize
    end;
\end_layout

\begin_layout LyX-Code

\size footnotesize
  end;
\end_layout

\begin_layout LyX-Code

\size footnotesize
begin
\end_layout

\begin_layout LyX-Code

\size footnotesize
   coefs:= expc;
\end_layout

\begin_layout LyX-Code

\size footnotesize
   post_job(dummy,1);post_job(dummy,0);
\end_layout

\begin_layout LyX-Code

\size footnotesize
   wait_on_done(0);wait_on_done(1);
\end_layout

\begin_layout LyX-Code

\size footnotesize
end;
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename nestparstack3.eps
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The 3 stacks used by nestpar in dual core mode.
\begin_inset CommandInset label
LatexCommand label
name "fig:The-3-stacks"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The function 
\family typewriter
dummy
\family default
 has to run on a task stack and yet have access to the variable 
\family typewriter
a
\family default
 in 
\family typewriter
emap
\family default
 and 
\family typewriter
scale
\family default
 in the main program, both of which are executing on the main stack.
 It then has to call 
\family typewriter
Taylor
\family default
 in such a way as to ensure that 
\family typewriter
Taylor
\family default
 can access the global 
\family typewriter
scale
\family default
.
 Provided that the displays can be set up as shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-3-stacks"

\end_inset

, this will work, but it is impossible to set up the displays this way when
 using standard intel call conventions along with the 
\family typewriter
pthreads
\family default
 library.
 Whenever a function is executed within a thread it is allocated a new stack
 that does not contain display pointers, hence variables from containing
 scopes cannot be accessed.
\end_layout

\begin_layout Standard
In order to support sharing of the global stack amongst multiple tasks,
 we have implemented an assembly routine 
\emph on
taskexecute
\emph default
, which corresponds to the following C function signature:
\end_layout

\begin_layout LyX-Code
void taskexecute(struct threadblock *);
\end_layout

\begin_layout Standard
As can be seen, the function expects a single parameter which is a pointer
 to a structure of type 
\emph on
struct threadblock
\emph default
 defined as
\end_layout

\begin_layout LyX-Code
struct threadblock{
\end_layout

\begin_deeper
\begin_layout LyX-Code
char * savedframepointer;
\end_layout

\begin_layout LyX-Code
char * savedcodepointer;
\end_layout

\begin_layout LyX-Code
int threadnumber;
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
Above, 
\family typewriter
savedframerpointer
\family default
 is the pointer to the original stack in which the displays are already
 setup, 
\family typewriter
savedcodepointer
\family default
 is the pointer to the function that is being parallelised, and 
\family typewriter
threadnumber
\family default
 is a number in the range
\begin_inset Formula $0..n-1$
\end_inset

 for a programme running on
\begin_inset Formula $n$
\end_inset

 cores..
 The following assembly code implements 
\family typewriter
taskexecute
\family default
 on the Pentium architecture.
\end_layout

\begin_layout Standard

\emph on
Assembly code sequence required to implement the task execute
\end_layout

\begin_layout LyX-Code

\size footnotesize
.globl taskexecute
\end_layout

\begin_layout LyX-Code

\size footnotesize
taskexecute:
\end_layout

\begin_deeper
\begin_layout LyX-Code

\size footnotesize
# on entry we have a pointer in %esp to the task block
\end_layout

\begin_layout LyX-Code

\size footnotesize
# this task block has the C definition
\end_layout

\begin_layout LyX-Code

\size footnotesize
# struct threadblock{
\end_layout

\begin_layout LyX-Code

\size footnotesize
#         char * savedframepointer;
\end_layout

\begin_layout LyX-Code

\size footnotesize
#         char * savedcodepointer;
\end_layout

\begin_layout LyX-Code

\size footnotesize
#         int threadnumber;}
\end_layout

\begin_layout LyX-Code

\size footnotesize
# the first thing we do is save the framepointer on entry
\end_layout

\begin_layout LyX-Code

\size footnotesize
push %ebp
\end_layout

\begin_layout LyX-Code

\size footnotesize
# next get the address of the stored frame pointer in the task block
\end_layout

\begin_layout LyX-Code

\size footnotesize
mov 8(%esp) , %eax
\end_layout

\begin_layout LyX-Code
#we load the frame pointer into the hardware frame pointer (ebp)
\end_layout

\begin_layout LyX-Code

\size footnotesize
mov 0(%eax), %ebp
\end_layout

\begin_layout LyX-Code

\size footnotesize
# get the task number
\end_layout

\begin_layout LyX-Code

\size footnotesize
push 8(%eax) 
\end_layout

\begin_layout LyX-Code

\size footnotesize
# make the call on the task
\end_layout

\begin_layout LyX-Code

\size footnotesize
call * 4(%eax) 
\end_layout

\begin_layout LyX-Code

\size footnotesize
# unwind stack pointer
\end_layout

\begin_layout LyX-Code

\size footnotesize
add $4,%esp
\end_layout

\begin_layout LyX-Code

\size footnotesize
# restore framepointer we were called with
\end_layout

\begin_layout LyX-Code

\size footnotesize
pop %ebp
\end_layout

\begin_layout LyX-Code

\size footnotesize
ret
\end_layout

\end_deeper
\begin_layout Standard
The essence of this form of implementation is that the pthread is setup
 to execute 
\family typewriter
taskexecute
\family default
 which is passed 
\family typewriter
threadblock
\family default
 from the calling environment that contains the stack pointer used by the
 calling environment.
 
\family typewriter
taskexecute
\family default
 substitutes the stack allocated by the pthread library with the above stack
 before executing the code sequence contained in the 
\family typewriter
savedcodepointe
\family default
\emph on
r.

\emph default
 The effect of substituting the stack pointer is undone once the called
 code sequence halts to ensure a clean exit of the wrapper.
\end_layout

\begin_layout Section
Example Programs
\end_layout

\begin_layout Subsection
Image convolution
\end_layout

\begin_layout Standard
The first example we will look at is the use of a seperable convolution
 kernel to blur an image.
 Convolution of an image by a matrix of real numbers can be used to smooth
 or sharpen an image, depending on the matrix used.
 If 
\begin_inset Formula $A$
\end_inset

 is an output image, 
\begin_inset Formula $K$
\end_inset

 a convolution matrix, then if 
\begin_inset Formula $B$
\end_inset

 is the convolved image 
\begin_inset Formula \[
B_{y,x}=\sum_{i}\sum_{j}A_{y+i,x+j}K_{i,j}\]

\end_inset

 
\end_layout

\begin_layout Standard
A separable convolution kernel is a vector of real numbers that can be applied
 independently to the rows and columns of an image to provide filtering.
 It is a specialisation of the more general convolution matrix, but is algorithm
ically more efficient to implement.
 We can do a seperable convolution provided that the kernel is formed by
 the outer product of two vectors 
\series bold
a
\series default
,
\series bold
b
\series default
.
 A symmetric separable convolution can be done if 
\begin_inset Formula $\mathbf{a}=\mathbf{b}$
\end_inset

.
\end_layout

\begin_layout Standard
If 
\series bold
k
\series default
 is a symmetric separable convolution vector, then the corresponding matrix
 
\begin_inset Formula $K$
\end_inset

 is such that 
\begin_inset Formula $K_{i,j}={\bf k}_{i}{\bf k}_{j}$
\end_inset

.
 
\end_layout

\begin_layout Standard
Given a starting image 
\begin_inset Formula $A$
\end_inset

 as a two dimensional array of pixels, and a three element kernel 
\begin_inset Formula $c_{1},c_{2},c_{3}$
\end_inset

, the algorithm first forms a temporary array 
\begin_inset Formula $T$
\end_inset

 whose whose elements are the weighted sum of adjacent rows 
\begin_inset Formula $T_{y,x}=c_{1}A_{y-1,x}+c_{2}A_{y,x}+c_{3}A_{y+1,x}$
\end_inset

.
 Then in a second phase it sets the original image to be the weighted sum
 of the columns of the temporary array: 
\begin_inset Formula $A_{y,x}=c_{1}T_{y,x-1}+c_{2}T_{y,x}+c_{3}T{y,x+1}$
\end_inset

.
 
\end_layout

\begin_layout Standard
Clearly the outer edges of the image are a special case, since the convolution
 is defined over the neighbours of the pixel, and the pixels along the boundarie
s a missing one neighbour.
 A number of solutions are available for this, but for simplicity we will
 perform only vertical convolutions on the left and right edges and horizontal
 convolutions on the top and bottom lines of the image.
 A Vector Pascal routine to do this is given below.
 The source has been pretty printed in the latex format that is automatically
 generated by the compiler is listing enabled.
 An equivalent sequential C routine is given in Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:C-version-of"

\end_inset

.
 
\end_layout

\begin_layout Standard
In comparing the C and Vector Pascal, note two features which give performance
 advantages to the Vector Pascal form of the algorithm.
\end_layout

\begin_layout Enumerate
The support for fixed point 8 bit arithmetic with the pixel type.
 This allows a higher level of parallelism to be achieved since a P4 or
 AMD64 can in principle operate on 16 
\begin_inset Formula $\times$
\end_inset

8 bit numbers with a single instruction.
 Lacking these types, the C algorithm has to use 32 bit floats.
 The pixel type automatically uses saturated arithmetic.
\end_layout

\begin_layout Enumerate
The data parallel form of expression of the Vector Pascal allows more efficient
 optimisation of the code.
\end_layout

\begin_layout Subsubsection
Vector Pascal convolution algorithm
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{tabbing}
\end_layout

\end_inset

 ***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
kill
\end_layout

\end_inset

 
\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
+
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
type
\family default
\series default
 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
plane(rows,cols:
\family sans
\shape italic
integer
\family default
\shape default
 
\family sans
)=
\family default
\series bold
 array
\series default
 
\family sans
[0..
\shape italic
rows
\family default
\shape default
 
\family sans
,0..
\shape italic
cols
\family default
\shape default
 
\family sans
]
\family default
\series bold
 of
\series default
 
\family sans
\shape italic
pixel
\family default
\shape default
 
\family sans
;
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
<
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
var
\family default
\series default
 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
Let
\family default
 
\family sans
\shape italic
T
\shape default
,
\family default
 
\family sans
\shape italic
l
\family default
\shape default
 
\family sans

\begin_inset Formula $\in$
\end_inset

 ̂plane;
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
Let
\family default
 
\family sans
\shape italic
i
\family default
\shape default
 
\family sans

\begin_inset Formula $\in$
\end_inset

 integer;
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
begin
\family default
\series default
 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{tabbing}
\end_layout

\end_inset

 Allocates a temporary buffer to hold a plane, and 3 temporary buffers to
 hold the convolution co-ordinates as lines of pixels.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{tabbing}
\end_layout

\end_inset

 ***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
kill
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
+
\end_layout

\end_inset

 
\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
new
\family default
\series default
 
\family sans
\shape italic
(
\family default
\shape default
 
\family sans
\shape italic
T
\family default
\shape default
 
\family sans
,
\shape italic
im
\family default
\shape default
 
\family sans
.
\shape italic
maxrow
\family default
\shape default
 
\family sans
,
\shape italic
im
\family default
\shape default
 
\family sans
.
\shape italic
maxcol
\family default
\shape default
 
\family sans
);
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
new
\family default
\series default
 
\family sans
\shape italic
(
\family default
\shape default
 
\family sans
\shape italic
l
\family default
\shape default
 
\family sans
,3,
\shape italic
im
\family default
\shape default
 
\family sans
.
\shape italic
maxcol
\family default
\shape default
 
\family sans
);
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\shape italic
l
\shape default

\begin_inset Formula $\uparrow$
\end_inset

[0]
\begin_inset Formula $\leftarrow$
\end_inset


\family default
 
\family sans
\shape italic
c1
\family default
\shape default
; 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\shape italic
l
\shape default

\begin_inset Formula $\uparrow$
\end_inset

[1]
\begin_inset Formula $\leftarrow$
\end_inset


\family default
 
\family sans
\shape italic
c2
\family default
\shape default
; 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\shape italic
l
\shape default

\begin_inset Formula $\uparrow$
\end_inset

[2]
\begin_inset Formula $\leftarrow$
\end_inset


\family default
 
\family sans
\shape italic
c3
\family default
\shape default
; 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{tabbing}
\end_layout

\end_inset

 Perform convolution on each of the planes of the image.
 This has to be done with an explicit loop as array maps only works with
 functions not with procedures.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{tabbing}
\end_layout

\end_inset

 ***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
kill
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
+
\end_layout

\end_inset

 
\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
for
\family default
\series default
 
\family sans
\shape italic
i
\shape default

\begin_inset Formula $\leftarrow$
\end_inset

 0
\family default
 
\family sans
\series bold
to
\family default
\series default
 
\family sans
\shape italic
im.maxplane
\family default
\shape default
 
\family sans
\series bold
do
\family default
\series default
 
\family sans
\shape italic
convpar
\family default
\shape default
 
\family sans
(
\shape italic
im
\shape default

\begin_inset Formula $_{\textit{i}}$
\end_inset

,
\family default
 
\family sans
\shape italic
l
\shape default

\begin_inset Formula $\uparrow$
\end_inset

,
\family default
 
\family sans
\shape italic
T
\shape default

\begin_inset Formula $\uparrow$
\end_inset

);
\family default
 { see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:convpar"

\end_inset

}
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{tabbing}
\end_layout

\end_inset

 This sequence frees the temporary buffers used in the convolution process.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{tabbing}
\end_layout

\end_inset

 ***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
kill
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
+
\end_layout

\end_inset

 
\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
dispose
\family default
\series default
 
\family sans
\shape italic
(
\family default
\shape default
 
\family sans
\shape italic
l
\family default
\shape default
 
\family sans
);
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
dispose
\family default
\series default
 
\family sans
\shape italic
(
\family default
\shape default
 
\family sans
\shape italic
T
\family default
\shape default
 
\family sans
);
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
<
\end_layout

\end_inset

\SpecialChar \-

\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
end
\family default
\series default
 
\family sans
;
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{tabbing}
\end_layout

\end_inset

 
\end_layout

\begin_layout Subsubsection
convpar
\begin_inset CommandInset label
LatexCommand label
name "sub:convpar"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sec:blurtime/pconvpconvpar"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{tabbing}
\end_layout

\end_inset

 ***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
kill
\end_layout

\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
procedure
\family default
\series default
 
\family sans
\shape italic
convpar
\family default
\shape default
 
\family sans
\shape italic
(
\family default
\shape default
 
\family sans
\series bold
var
\family default
\series default
 
\family sans
\shape italic
p
\family default
\shape default
 
\family sans
,
\shape italic
l
\family default
\shape default
 
\family sans
,
\shape italic
T
\family default
\shape default
 
\family sans
:
\shape italic
plane
\family default
\shape default
 
\family sans
);
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{tabbing}
\end_layout

\end_inset

 This convolves a plane by applying the vertical and horizontal convolutions
 in turn.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{tabbing}
\end_layout

\end_inset

 ***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
kill
\end_layout

\end_inset

 
\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
+
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
var
\family default
\series default
 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
Let
\family default
 
\family sans
\shape italic
r
\shape default
,
\family default
 
\family sans
\shape italic
c
\family default
\shape default
 
\family sans

\begin_inset Formula $\in$
\end_inset

 integer;
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 \SpecialChar \-

\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
<
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
+
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
begin
\family default
\series default
 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{tabbing}
\end_layout

\end_inset

 This sequence performs a vertical convolution of the rows of the plane
 p and places the result in the temporary plane 
\begin_inset Formula $T$
\end_inset

.
 It uses the lines of pixels 
\family sans
l[i]
\family default
 as convolution weights.
 Use of lines of pixels rather than the floating point numbers for the kernel
 weights allows the computation to proceed 8 pixels at a time in parallel.
 The lines 
\family sans
\shape italic
T
\shape default

\begin_inset Formula $_{0}$
\end_inset


\begin_inset Formula $\leftarrow$
\end_inset


\family default
 
\family sans
\shape italic
p
\shape default

\begin_inset Formula $_{0}$
\end_inset


\family default
; and 
\family sans
\shape italic
T
\shape default

\begin_inset Formula $_{\textit{r}}$
\end_inset


\begin_inset Formula $\leftarrow$
\end_inset


\family default
 
\family sans
\shape italic
p
\shape default

\begin_inset Formula $_{\textit{r}}$
\end_inset


\family default
; deal with the top and bottom rows of the picture which are left unchanged.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{tabbing}
\end_layout

\end_inset

 ***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
kill
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
+
\end_layout

\end_inset

 
\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
\size small
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

{$r-}{disable range checks}
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\shape italic
r
\shape default

\begin_inset Formula $\leftarrow$
\end_inset


\family default
 
\family sans
\shape italic
p.rows
\family default
\shape default
; 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\shape italic
T
\shape default

\begin_inset Formula $_{1..\textit{r}-1}$
\end_inset


\begin_inset Formula $\leftarrow$
\end_inset


\family default
 
\family sans
\shape italic
p
\shape default

\begin_inset Formula $_{0..\textit{r}-2}$
\end_inset

 
\begin_inset Formula $\times$
\end_inset


\family default
 
\family sans
\shape italic
l
\shape default

\begin_inset Formula $_{0}$
\end_inset

 +
\family default
 
\family sans
\shape italic
p
\shape default

\begin_inset Formula $_{1..\textit{r}-1}$
\end_inset

 
\begin_inset Formula $\times$
\end_inset


\family default
 
\family sans
\shape italic
l
\shape default

\begin_inset Formula $_{1}$
\end_inset

 +
\family default
 
\family sans
\shape italic
p
\shape default

\begin_inset Formula $_{2..\textit{r}}$
\end_inset

 
\begin_inset Formula $\times$
\end_inset


\family default
 
\family sans
\shape italic
l
\shape default

\begin_inset Formula $_{2}$
\end_inset


\family default
; 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\shape italic
T
\shape default

\begin_inset Formula $_{0}$
\end_inset


\begin_inset Formula $\leftarrow$
\end_inset


\family default
 
\family sans
\shape italic
p
\shape default

\begin_inset Formula $_{0}$
\end_inset


\family default
; 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\shape italic
T
\shape default

\begin_inset Formula $_{\textit{r}}$
\end_inset


\begin_inset Formula $\leftarrow$
\end_inset


\family default
 
\family sans
\shape italic
p
\shape default

\begin_inset Formula $_{\textit{r}}$
\end_inset


\family default
; 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{tabbing}
\end_layout

\end_inset

 Now perform a horizontal convolution of the plane 
\begin_inset Formula $T$
\end_inset

 and place the result in p.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{tabbing}
\end_layout

\end_inset

 ***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
kill
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
+
\end_layout

\end_inset

 
\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\shape italic
c
\shape default

\begin_inset Formula $\leftarrow$
\end_inset


\family default
 
\family sans
\shape italic
p.cols
\family default
\shape default
; 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\shape italic
p
\shape default

\begin_inset Formula $_{0..\textit{r},1..\textit{c}-1}$
\end_inset


\begin_inset Formula $\leftarrow$
\end_inset


\family default
 
\family sans
\shape italic
T
\shape default

\begin_inset Formula $_{0..\textit{r},0..\textit{c}-2}$
\end_inset

 
\begin_inset Formula $\times$
\end_inset


\family default
 
\family sans
\shape italic
l
\shape default

\begin_inset Formula $_{0}$
\end_inset

 +
\family default
 
\family sans
\shape italic
T
\shape default

\begin_inset Formula $_{0..\textit{r},2..\textit{c}}$
\end_inset

 
\begin_inset Formula $\times$
\end_inset


\family default
 
\family sans
\shape italic
l
\shape default

\begin_inset Formula $_{2}$
\end_inset

 +
\family default
 
\family sans
\shape italic
T
\shape default

\begin_inset Formula $_{0..\textit{r},1..\textit{c}-1}$
\end_inset

 
\begin_inset Formula $\times$
\end_inset


\family default
 
\family sans
\shape italic
l
\shape default

\begin_inset Formula $_{1}$
\end_inset


\family default
; 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\shape italic
p
\shape default

\begin_inset Formula $_{0..\textit{r},0}$
\end_inset


\begin_inset Formula $\leftarrow$
\end_inset


\family default
 
\family sans
\shape italic
T
\shape default

\begin_inset Formula $_{0..\textit{r},0}$
\end_inset


\family default
; 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\shape italic
p
\shape default

\begin_inset Formula $_{0..\textit{r},\textit{c}}$
\end_inset


\begin_inset Formula $\leftarrow$
\end_inset


\family default
 
\family sans
\shape italic
T
\shape default

\begin_inset Formula $_{0..\textit{r},\textit{c}}$
\end_inset


\family default
; 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
\size small
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

{$r+}{enable range checks}
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
<
\end_layout

\end_inset

\SpecialChar \-

\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
end
\family default
\series default
 
\family sans
;
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{tabbing}
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status collapsed

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
C version of the convolution routine.
\begin_inset CommandInset label
LatexCommand label
name "alg:C-version-of"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
#include <stdlib.h>
\end_layout

\begin_layout LyX-Code
conv(char *im, int planes, int rows,int cols,float c1,float c2,float c3)
\end_layout

\begin_layout LyX-Code
/* C version of a convolution routine */
\end_layout

\begin_layout LyX-Code
{ 
\end_layout

\begin_layout LyX-Code
 int i,j,p,temp;
\end_layout

\begin_layout LyX-Code
 int planestep=rows*cols;
\end_layout

\begin_layout LyX-Code
 char * plane, * buffplane;
\end_layout

\begin_layout LyX-Code
 char * buff = malloc( rows*planes*cols);
\end_layout

\begin_layout LyX-Code
 for (p=0;p<planes;p++){
\end_layout

\begin_layout LyX-Code
  plane = &im[p*planestep];
\end_layout

\begin_layout LyX-Code
  buffplane= &buff[p*planestep];
\end_layout

\begin_layout LyX-Code
  /* convolve horizontally */
\end_layout

\begin_layout LyX-Code
  for(i=0;i<rows;i++){
\end_layout

\begin_layout LyX-Code
   for(j=1;j<(cols-1);j++) {
\end_layout

\begin_layout LyX-Code
    temp= plane[i*cols+j-1]*c1+plane[i*cols+j]*c2+plane[i*cols+j+1]*c3;
\end_layout

\begin_layout LyX-Code
    if (temp<0){temp=0;}
\end_layout

\begin_layout LyX-Code
    else if (temp>255) { temp=255;} ;
\end_layout

\begin_layout LyX-Code
    buffplane[i*cols+j]=temp;
\end_layout

\begin_layout LyX-Code
   }
\end_layout

\begin_layout LyX-Code
   buffplane[i*cols]=plane[i*cols];
\end_layout

\begin_layout LyX-Code
   buffplane[i*cols+cols-1]=plane[i*cols+cols-1];
\end_layout

\begin_layout LyX-Code
  }
\end_layout

\begin_layout LyX-Code
/* convolve vertically */
\end_layout

\begin_layout LyX-Code
  for(j=0;j<cols;j++) {
\end_layout

\begin_layout LyX-Code
   for(i=1;i<rows-1;i++){
\end_layout

\begin_layout LyX-Code
    temp= buffplane[(i-1)*cols+j]*c1+buffplane[i*cols+j]*c2+buffplane[(1+i)*cols
+j]*c3;
\end_layout

\begin_layout LyX-Code
    if(temp<0){temp=0;}
\end_layout

\begin_layout LyX-Code
    else if (temp>255) { temp=255;} ;
\end_layout

\begin_layout LyX-Code
    plane[i*cols+j]=temp;
\end_layout

\begin_layout LyX-Code
   }
\end_layout

\begin_layout LyX-Code
   plane[j]=buffplane[j];
\end_layout

\begin_layout LyX-Code
   plane[(rows-1)*cols+j]=buffplane[ (rows-1)*cols+j];
\end_layout

\begin_layout LyX-Code
  }
\end_layout

\begin_layout LyX-Code
 }
\end_layout

\begin_layout LyX-Code
 free(buff);
\end_layout

\begin_layout LyX-Code
}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Performance comparisons
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename boanopuffin.eps
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Comparison of perfomance gains over the sequential C implementation of the
 convolution routine on different processors and numbers of cores.
 The x-axis shows the number of cores for which the program was compiled,
 the y-axis shows the the relative speedup.
 Puffin has 4x Quad-Core AMD Opteron 8350 Processor chips running the AMD64
 instruction set with a CPU clock of 1Ghz.
 Boano has 4x Single-Core Intel Xeon CPUs at 2.80GHz running the 32 bit Intel
 P4 instructions.
 In each case the performance is normalised so that the speed of the C code
 counts as 1.
\begin_inset CommandInset label
LatexCommand label
name "fig:Comparison-of-perfomance"

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Data used to produce Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Comparison-of-perfomance"

\end_inset

.
 It gives the times in seconds to perform 30 convolutions on a 1024
\begin_inset Formula $\times$
\end_inset

1024 pixel image with 24 bits per pixel, organised as 3 distinct colour
 planes, whilst using a 3 element separable kernel.
 
\begin_inset CommandInset label
LatexCommand label
name "tab:Data-used-to"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%
                                                                  %% %%
  This is a LaTeX2e table fragment exported from Gnumeric.
        %% %%                                                          
        %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
\end_layout

\begin_layout Plain Layout


\backslash
begin{tabular}{l|r|rrrrrr}
\backslash
hline
\end_layout

\begin_layout Plain Layout

&gcc	&vpc	&	&	&
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

cores	& 1	&1  	&2  	&3  	&4 &8&16
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

	
\backslash
hline
\backslash
hline Machine
\backslash

\backslash

\backslash
hline
\end_layout

\begin_layout Plain Layout

Puffin	&5.48	&0.81	&0.39	&0.28	&0.23&0.18&0.16
\backslash

\backslash
 Boano	&23.02	&1.07	&0.63	&0.72	&0.60
\backslash

\backslash

\backslash
hline
\end_layout

\begin_layout Plain Layout


\backslash
end{tabular}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
We give examples of running the two algorithms on both 32bit and 64bit multi-cor
e machines.
 Results are summarised in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Comparison-of-perfomance"

\end_inset

 and Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Data-used-to"

\end_inset

.
 In all cases the algorithms were compiled at the optimisation level 0 for
 both compilers.
 
\end_layout

\begin_layout Standard
As would be expected the parallel version of the algorithm significantly
 out-performs the sequential version.
 However it is clear that SIMD parallelism provides a more reliable form
 of acceleration than MIMD.
 The initial speedup figures using a single core rely entirely on the use
 of SIMD instructions.
 SIMD alone gives an acceleration of over 
\begin_inset Formula $8\times$
\end_inset

 on an Opteron and 
\begin_inset Formula $21\times$
\end_inset

on a Xeon.
 The gain from MIMD is more modest and tails off after markedly after 2
 processors on Boano, and after 3 processors on Puffin.
 This result is consistent with the SIMD code, which operates on wide words,
 saturating the available memory bandwidth.
\end_layout

\begin_layout Subsection
Mandelbrot set
\end_layout

\begin_layout Standard
It is perhaps not surprising that the image convolution example gives very
 favourable results for parallel code.
 This was, after all, what Intel designed the MMX instruction set to do.
 The next case we look at is computing the Mandelbrot set.
 Strictly, this is defined as the set of complex numbers 
\begin_inset Formula $M$
\end_inset

 such that for all 
\begin_inset Formula $c\in M$
\end_inset

 the sequence 
\begin_inset Formula $z_{0}=c,z_{n+1}=z_{n}^{2}+c$
\end_inset

 does not diverge, i.e, 
\begin_inset Formula $|z_{n}|<k$
\end_inset

 for some 
\begin_inset Formula $k>1$
\end_inset

.
 
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename mandel1b.jpg
	width 12cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The Mandelbrot set image
\begin_inset CommandInset label
LatexCommand label
name "fig:The-Mandelbrot-set-iimage"

\end_inset

 produced by Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:MIMD-version-of"

\end_inset

.
 The original file produced by the algorithm is 4 megabytes in size.
 Note that since the type Pixel is a signed 8 bit number, 0 translates to
 mid grey.
 We have limited ourselves to this rather dull rendering to make the rendering
 procedure more readily understandable.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

 
\begin_inset Float algorithm
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Escape time computed by a sequential ISO-Pascal routine using complex numbers.
\begin_inset CommandInset label
LatexCommand label
name "alg:Escape-time-computed"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{tabbing}
\end_layout

\end_inset

 ***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
kill
\end_layout

\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
function
\family default
\series default
 
\family sans
\shape italic
escapebrightness
\family default
\shape default
 
\family sans
\shape italic
(
\family default
\shape default
 
\family sans
\shape italic
c
\family default
\shape default
 
\family sans
:
\family default
 
\family sans
\shape italic
complex
\family default
\shape default
 
\family sans
):
\shape italic
real
\family default
\shape default
 
\family sans
;
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
label
\family default
\series default
 
\family sans
99;
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
+
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
var
\family default
\series default
 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
Let
\family default
 
\family sans
\shape italic
z
\family default
\shape default
 
\family sans

\begin_inset Formula $\in$
\end_inset

 complex;
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
Let
\family default
 
\family sans
\shape italic
i
\family default
\shape default
 
\family sans

\begin_inset Formula $\in$
\end_inset

 integer;
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 \SpecialChar \-

\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
<
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
+
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
begin
\family default
\series default
 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\shape italic
z
\shape default

\begin_inset Formula $\leftarrow$
\end_inset

 0.0
\family default
; 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
+
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
for
\family default
\series default
 
\family sans
\shape italic
i
\shape default

\begin_inset Formula $\leftarrow$
\end_inset


\family default
 
\family sans
\shape italic
escapelimit
\family default
\shape default
 
\family sans
\series bold
downto
\family default
\series default
 
\family sans
1
\family default
 
\family sans
\series bold
do
\family default
\series default
 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
<
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
begin
\family default
\series default
 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\shape italic
z
\shape default

\begin_inset Formula $\leftarrow$
\end_inset


\family default
 
\family sans
\shape italic
z
\family default
\shape default
 
\family sans

\begin_inset Formula $\times$
\end_inset


\family default
 
\family sans
\shape italic
z
\family default
\shape default
 
\family sans
+
\family default
 
\family sans
\shape italic
c
\family default
\shape default
; 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
+
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
if
\family default
\series default
 
\family sans
\shape italic
escaped
\family default
\shape default
 
\family sans
(
\shape italic
z
\shape default
)
\family default
 
\family sans
\series bold
then
\family default
\series default
 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
<
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
begin
\family default
\series default
 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\shape italic
escapebrightness
\shape default

\begin_inset Formula $\leftarrow$
\end_inset


\family default
 
\family sans
\shape italic
i
\family default
\shape default
 
\family sans

\begin_inset Formula $\times$
\end_inset


\family default
 
\family sans
\shape italic
pixelshift
\family default
\shape default
; 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
goto
\family default
\series default
 
\family sans
99;
\family default
 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
<
\end_layout

\end_inset

\SpecialChar \-

\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
end
\family default
\series default
 
\family sans
;
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
<
\end_layout

\end_inset

\SpecialChar \-

\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
end
\family default
\series default
 
\family sans
;
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\shape italic
escapebrightness
\shape default

\begin_inset Formula $\leftarrow$
\end_inset

 0
\family default
; 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
99:
\family sans
;
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
<
\end_layout

\end_inset

\SpecialChar \-

\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
end
\family default
\series default
 
\family sans
;
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{tabbing}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{tabbing}
\end_layout

\end_inset

 ***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
kill
\end_layout

\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
procedure
\family default
\series default
 
\family sans
\shape italic
buildpic
\family default
\shape default
 
\family sans
\shape italic
(
\family default
\shape default
 
\family sans
\series bold
var
\family default
\series default
 
\family sans
\shape italic
p
\family default
\shape default
 
\family sans
:
\shape italic
picture
\family default
\shape default
 
\family sans
);
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
+
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
var
\family default
\series default
 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
Let
\family default
 
\family sans
\shape italic
x
\shape default
,
\family default
 
\family sans
\shape italic
y
\family default
\shape default
 
\family sans

\begin_inset Formula $\in$
\end_inset

 integer;
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 \SpecialChar \-

\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
<
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
+
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
begin
\family default
\series default
 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
+
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
for
\family default
\series default
 
\family sans
\shape italic
x
\shape default

\begin_inset Formula $\leftarrow$
\end_inset

 0
\family default
 
\family sans
\series bold
to
\family default
\series default
 
\family sans
\shape italic
imlim
\family default
\shape default
 
\family sans
\series bold
do
\family default
\series default
 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
+
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
for
\family default
\series default
 
\family sans
\shape italic
y
\shape default

\begin_inset Formula $\leftarrow$
\end_inset

 0
\family default
 
\family sans
\series bold
to
\family default
\series default
 
\family sans
\shape italic
imlim
\family default
\shape default
 
\family sans
\series bold
do
\family default
\series default
 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 \SpecialChar \-
\SpecialChar \-

\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\shape italic
p
\shape default

\begin_inset Formula $_{\textit{y},\textit{x}}$
\end_inset


\begin_inset Formula $\leftarrow$
\end_inset


\family default
 
\family sans
\shape italic
escapebrightness
\family default
\shape default
 
\family sans
(
\shape italic
cmplx
\family default
\shape default
 
\family sans
(
\shape italic
xorigin
\family default
\shape default
 
\family sans
+
\family default
 
\family sans
\shape italic
xstep
\family default
\shape default
 
\family sans

\begin_inset Formula $\times$
\end_inset


\family default
 
\family sans
\shape italic
x
\shape default
,
\family default
 
\family sans
\shape italic
yorigin
\family default
\shape default
 
\family sans
+
\family default
 
\family sans
\shape italic
ystep
\family default
\shape default
 
\family sans

\begin_inset Formula $\times$
\end_inset


\family default
 
\family sans
\shape italic
y
\shape default
))
\family default
; 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
<
\end_layout

\end_inset

\SpecialChar \-

\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
end
\family default
\series default
 
\family sans
;
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{tabbing}
\end_layout

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
MIMD Vector Pascal version of Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Escape-time-computed"

\end_inset

 using real arithmetic.
\begin_inset CommandInset label
LatexCommand label
name "alg:MIMD-version-of"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tabbing}
\end_layout

\end_inset

 ***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
kill
\end_layout

\end_inset

 
\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
+
\end_layout

\end_inset

 
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
<
\end_layout

\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
pure
\family default
\series default
 
\family sans
\series bold
function
\family default
\series default
 
\family sans
\shape italic
escapebrightness
\family default
\shape default
 
\family sans
(
\shape italic
cx
\shape default
,
\family default
 
\family sans
\shape italic
cy
\family default
\shape default
 
\family sans
:
\family default
 
\family sans
\shape italic
real
\shape default
) :
\family default
 
\family sans
\shape italic
real
\family default
\shape default
; 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
label
\family default
\series default
 
\family sans
99 ;
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
<
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
var
\family default
\series default
 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
Let
\family default
 
\family sans
\shape italic
xx
\shape default
,
\family default
 
\family sans
\shape italic
y
\shape default
,
\family default
 
\family sans
\shape italic
x
\shape default
,
\family default
 
\family sans
\shape italic
x2
\shape default
,
\family default
 
\family sans
\shape italic
y2
\family default
\shape default
 
\family sans

\begin_inset Formula $\in$
\end_inset

 real;
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
Let
\family default
 
\family sans
\shape italic
iteration
\family default
\shape default
 
\family sans

\begin_inset Formula $\in$
\end_inset

 integer;
\end_layout

\end_inset

 
\begin_inset Newline newline
\end_inset

 \SpecialChar \-

\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
<
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
+
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
begin
\family default
\series default
 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\shape italic
x
\shape default

\begin_inset Formula $\leftarrow$
\end_inset

 0.0
\family default
; 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\shape italic
y
\shape default

\begin_inset Formula $\leftarrow$
\end_inset

 0.0
\family default
; 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\shape italic
iteration
\shape default

\begin_inset Formula $\leftarrow$
\end_inset

 1
\family default
; 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
+
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
while
\family default
\series default
 
\family sans
\shape italic
iteration
\family default
\shape default
 
\family sans

\begin_inset Formula $<$
\end_inset


\family default
 
\family sans
\shape italic
escapelimit
\family default
\shape default
 
\family sans
\series bold
do
\family default
\series default
 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
<
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
begin
\family default
\series default
 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\shape italic
xx
\shape default

\begin_inset Formula $\leftarrow$
\end_inset

 (
\shape italic
x
\shape default
)
\begin_inset Formula $^{2}$
\end_inset

 - (
\shape italic
y
\shape default
)
\begin_inset Formula $^{2}$
\end_inset

 +
\family default
 
\family sans
\shape italic
cx
\family default
\shape default
; 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\shape italic
y
\shape default

\begin_inset Formula $\leftarrow$
\end_inset

 2.0 
\begin_inset Formula $\times$
\end_inset


\family default
 
\family sans
\shape italic
x
\family default
\shape default
 
\family sans

\begin_inset Formula $\times$
\end_inset


\family default
 
\family sans
\shape italic
y
\family default
\shape default
 
\family sans
+
\family default
 
\family sans
\shape italic
cy
\family default
\shape default
; 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\shape italic
x
\shape default

\begin_inset Formula $\leftarrow$
\end_inset


\family default
 
\family sans
\shape italic
xx
\family default
\shape default
; 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
+
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
if
\family default
\series default
 
\family sans
(((
\shape italic
x
\shape default
)
\begin_inset Formula $^{2}$
\end_inset

 + (
\shape italic
y
\shape default
)
\begin_inset Formula $^{2}$
\end_inset

) 
\begin_inset Formula $>$
\end_inset


\family default
 
\family sans
\shape italic
escapebound
\shape default
)
\family default
 
\family sans
\series bold
then
\family default
\series default
 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 \SpecialChar \-

\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
goto
\family default
\series default
 
\family sans
99;
\family default
 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\shape italic
iteration
\shape default

\begin_inset Formula $\leftarrow$
\end_inset


\family default
 
\family sans
\shape italic
iteration
\family default
\shape default
 
\family sans
+ 1
\family default
; 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
<
\end_layout

\end_inset

\SpecialChar \-

\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
end
\family default
\series default
 
\family sans
;
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
+
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
99:
\series bold
 if
\series default
 
\family sans
\shape italic
iteration
\family default
\shape default
 
\family sans

\begin_inset Formula $<$
\end_inset


\family default
 
\family sans
\shape italic
escapelimit
\family default
\series bold
\shape default
 then
\series default
 
\family sans
\shape italic
escapebrightness
\shape default

\begin_inset Formula $\leftarrow$
\end_inset


\family default
 
\family sans
\shape italic
iteration
\family default
\shape default
 
\family sans

\begin_inset Formula $\times$
\end_inset


\family default
 
\family sans
\shape italic
pixelshift
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 \SpecialChar \-

\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
<
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
else
\family default
\series default
 
\family sans
\shape italic
escapebrightness
\shape default

\begin_inset Formula $\leftarrow$
\end_inset

 0.0;
\family default
 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
<
\end_layout

\end_inset

\SpecialChar \-

\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
end
\family default
\series default
 
\family sans
;
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{tabbing}
\end_layout

\end_inset

 
\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "sec:mandelbrot1bbuildpic"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tabbing}
\end_layout

\end_inset

 ***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
kill
\end_layout

\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
procedure
\family default
\series default
 
\family sans
\shape italic
buildpic
\family default
\shape default
 
\family sans
\shape italic
(
\family default
\shape default
 
\family sans
\series bold
var
\family default
\series default
 
\family sans
\shape italic
p
\family default
\shape default
 
\family sans
:
\shape italic
picture
\family default
\shape default
 
\family sans
);
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
+
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
var
\family default
\series default
 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
Let
\family default
 
\family sans
\shape italic
x
\shape default
,
\family default
 
\family sans
\shape italic
y
\family default
\shape default
 
\family sans

\begin_inset Formula $\in$
\end_inset

 integer;
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 \SpecialChar \-

\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
<
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
+
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
begin
\family default
\series default
 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\shape italic
p
\shape default

\begin_inset Formula $\leftarrow$
\end_inset


\family default
 
\family sans
\shape italic
escapebrightness
\family default
\shape default
 
\family sans
(
\shape italic
xorigin
\family default
\shape default
 
\family sans
+
\family default
 
\family sans
\shape italic
xstep
\family default
\shape default
 
\family sans

\begin_inset Formula $\times$
\end_inset


\family default
 
\family sans

\begin_inset Formula $\iota{}_{1}$
\end_inset

,
\family default
 
\family sans
\shape italic
yorigin
\family default
\shape default
 
\family sans
+
\family default
 
\family sans
\shape italic
ystep
\family default
\shape default
 
\family sans

\begin_inset Formula $\times$
\end_inset


\family default
 
\family sans

\begin_inset Formula $\iota{}_{0}$
\end_inset

)
\family default
; 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
<
\end_layout

\end_inset

\SpecialChar \-

\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
end
\family default
\series default
 
\family sans
;
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{tabbing}
\end_layout

\end_inset

 
\end_layout

\end_inset


\begin_inset Float algorithm
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Version of the Mandelbrot
\begin_inset CommandInset label
LatexCommand label
name "alg:Version-of-the"

\end_inset

 algorithm that exploits both SIMD and MIMD parallelism.
 In this, the variables 
\family sans
\shape slanted
x, y, cx, cy, times
\family default
\shape default
 are all arrays rather than scalars.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{tabbing}
\end_layout

\end_inset

 ***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset

***
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
=
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
kill
\end_layout

\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
procedure
\family default
\series default
 
\family sans
\shape italic
buildpic
\family default
\shape default
 
\family sans
\shape italic
(
\family default
\shape default
 
\family sans
\series bold
var
\family default
\series default
 
\family sans
\shape italic
p
\family default
\shape default
 
\family sans
:
\shape italic
picture
\family default
\shape default
 
\family sans
);
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
+
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
var
\family default
\series default
 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
Let
\family default
 
\family sans
\shape italic
iteration
\family default
\shape default
 
\family sans

\begin_inset Formula $\in$
\end_inset

 integer;
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Newline newline
\end_inset

 \SpecialChar \-

\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
<
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
+
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
begin
\family default
\series default
 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\shape italic
x
\shape default

\begin_inset Formula $\leftarrow$
\end_inset

 0.0
\family default
; 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\shape italic
y
\shape default

\begin_inset Formula $\leftarrow$
\end_inset

 0.0
\family default
; 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\shape italic
cx
\shape default

\begin_inset Formula $\leftarrow$
\end_inset


\family default
 
\family sans
\shape italic
xorigin
\family default
\shape default
 
\family sans
+
\family default
 
\family sans
\shape italic
xstep
\family default
\shape default
 
\family sans

\begin_inset Formula $\times$
\end_inset


\family default
 
\family sans
\shape italic
iota
\shape default

\begin_inset Formula $_{1}$
\end_inset


\family default
; 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\shape italic
cy
\shape default

\begin_inset Formula $\leftarrow$
\end_inset


\family default
 
\family sans
\shape italic
yorigin
\family default
\shape default
 
\family sans
+
\family default
 
\family sans
\shape italic
ystep
\family default
\shape default
 
\family sans

\begin_inset Formula $\times$
\end_inset


\family default
 
\family sans
\shape italic
iota
\shape default

\begin_inset Formula $_{0}$
\end_inset


\family default
; 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\shape italic
times
\shape default

\begin_inset Formula $\leftarrow$
\end_inset

 0
\family default
; 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
+
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
for
\family default
\series default
 
\family sans
\shape italic
iteration
\shape default

\begin_inset Formula $\leftarrow$
\end_inset

 1
\family default
 
\family sans
\series bold
to
\family default
\series default
 
\family sans
\shape italic
escapelimit
\family default
\shape default
 
\family sans
\series bold
do
\family default
\series default
 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
<
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
begin
\family default
\series default
 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\shape italic
xx
\shape default

\begin_inset Formula $\leftarrow$
\end_inset


\family default
 
\family sans
\shape italic
x
\family default
\shape default
 
\family sans

\begin_inset Formula $\times$
\end_inset


\family default
 
\family sans
\shape italic
x
\family default
\shape default
 
\family sans
-
\family default
 
\family sans
\shape italic
y
\family default
\shape default
 
\family sans

\begin_inset Formula $\times$
\end_inset


\family default
 
\family sans
\shape italic
y
\family default
\shape default
 
\family sans
+
\family default
 
\family sans
\shape italic
cx
\family default
\shape default
; 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\shape italic
y
\shape default

\begin_inset Formula $\leftarrow$
\end_inset

 2.0 
\begin_inset Formula $\times$
\end_inset


\family default
 
\family sans
\shape italic
x
\family default
\shape default
 
\family sans

\begin_inset Formula $\times$
\end_inset


\family default
 
\family sans
\shape italic
y
\family default
\shape default
 
\family sans
+
\family default
 
\family sans
\shape italic
cy
\family default
\shape default
; 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\shape italic
x
\shape default

\begin_inset Formula $\leftarrow$
\end_inset


\family default
 
\family sans
\shape italic
xx
\family default
\shape default
; 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
+
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\shape italic
times
\family default
\shape default
 
\family sans

\begin_inset Formula $\leftarrow$
\end_inset


\family default
 
\family sans
\series bold
if
\family default
\series default
 
\family sans
\shape italic
times
\family default
\shape default
 
\family sans
=0
\family default
 
\family sans
\series bold
then
\family default
\series default
 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
+
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
if
\family default
\series default
 
\family sans
(
\shape italic
x
\family default
\shape default
 
\family sans

\begin_inset Formula $\times$
\end_inset


\family default
 
\family sans
\shape italic
x
\family default
\shape default
 
\family sans
+
\family default
 
\family sans
\shape italic
y
\family default
\shape default
 
\family sans

\begin_inset Formula $\times$
\end_inset


\family default
 
\family sans
\shape italic
y
\family default
\shape default
 
\family sans

\begin_inset Formula $>$
\end_inset


\family default
 
\family sans
\shape italic
escapebound
\shape default
)
\family default
 
\family sans
\series bold
then
\family default
\series default
 
\family sans
\shape italic
iteration
\family default
\shape default
 
\family sans
\series bold
else
\family default
\series default
 
\family sans
0
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 \SpecialChar \-

\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
<
\end_layout

\end_inset


\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
else
\family default
\series default
 
\family sans
\shape italic
times
\shape default
;
\family default
 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
<
\end_layout

\end_inset

\SpecialChar \-

\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
<
\end_layout

\end_inset

\SpecialChar \-

\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
end
\family default
\series default
 
\family sans
;
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Newline newline
\end_inset

 
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\shape italic
p
\shape default

\begin_inset Formula $\leftarrow$
\end_inset


\family default
 
\family sans
\shape italic
times
\family default
\shape default
 
\family sans

\begin_inset Formula $\times$
\end_inset


\family default
 
\family sans
\shape italic
pixelshift
\family default
\shape default
; 
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
<
\end_layout

\end_inset

\SpecialChar \-

\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 1
width "14cm"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family sans
\series bold
end
\family default
\series default
 
\family sans
;
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{tabbing}
\end_layout

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To generate a pretty picture like Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-Mandelbrot-set-iimage"

\end_inset

, one typically plots the complex plane and for each pixel position one
 computes the number of iterations it takes for the formula to diverge.
 The divergence time is then used to define the colour or brightness of
 a pixel.
 The problem is potentially highly parallel, since the divergence time of
 each point is independent of all other points.
 On closer examination though we find that the sort of parallelism is not
 one readily amenable to SIMD evaluation.
 To understand this look at Algorithms 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Escape-time-computed"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:MIMD-version-of"

\end_inset

.
 
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Escape-time-computed"

\end_inset

 is a simple sequential algorithm which is directly based on the definition
 of the Mandelbrot set.
 The core of the algorithm is the function 
\family sans
\shape italic
escapebrightness
\family default
\shape default
 which for the complex number given by 
\family sans
\shape italic
c
\family default
\shape default
 will compute the number of iterations required for divergence to occur.
 The picture is then built up by the procedure 
\family sans
\shape italic
buildpic
\family default
\shape default
 which uses nested loops to call for the complex number corresponding to
 each pixel position.
 This algorithm ran in 378 seconds to compute the set to a resolution of
 2048 pixels square.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Timings in seconds for Mandelbrot algorithms computing the Mandelbrot set
 at 2048
\begin_inset Formula $\times$
\end_inset

2048 resolution on the quad Intel Xeon processor Boano.
\begin_inset CommandInset label
LatexCommand label
name "tab:Timings-for-Mandelbrot"

\end_inset

 Pascal algorithms as numbered in the chapter.
 The Fortran95 version is almost the same as Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:MIMD-version-of"

\end_inset

 apart from superficial language differences.
 It is compiled with an research Fortran95 compiler written by Paul Keir
 at the University of Glasgow.
 The C version is mandelbrot-1.c written by Michael Ashley, University of
 New South Wales.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="6">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Algorithm
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Escape-time-computed"

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:MIMD-version-of"

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Version-of-the"

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fortran95
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Cores
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
378
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10.3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
187
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10.7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10.2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5.6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5.8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
91
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
82
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
We then try and speed this up in Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:MIMD-version-of"

\end_inset

 by applying two transformations.
\end_layout

\begin_layout Enumerate
We replaced the use of complex numbers by reals.
 This can be expected to accelerate things as complex arithmetic is implemented
 with calls to a library.
 This is an inelegant but effective accelerator.
 Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Timings-for-Mandelbrot"

\end_inset

 shows an acceleration from 378 seconds to 10.3 
\end_layout

\begin_layout Enumerate
We replaced the sequential loops in
\family sans
\shape italic
 buildpic
\family default
\shape default
 with an implicit map.
 This will allow parallelism provided that we have qualified
\family sans
\shape italic
 escapebrightness
\family default
\shape default
 as a pure function.
 This allows the algorithm to be accelerated by a further factor of about
 3 when when compiled for 4 cores.
 
\end_layout

\begin_layout Standard
Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Timings-for-Mandelbrot"

\end_inset

 shows very similar timings for C, Vector Pascal and Fortran95 for the single
 core case.
 Since the file formats generated for the final image differ between implementat
ions, the differences in timings are not significant.
 The multi-core acceleration achieved by the Fortran95 and Vector Pascal
 versions are also essentially the same.
\end_layout

\begin_layout Standard
One might hope that it should be possible to gain another factor of 4 in
 performance by taking advantage of the fact that a P4 class processor can
 handle 4 floating point numbers at a time.
 However a SIMD version of the algorithm runs into problems since it must
 be cast in a form that allows the same operations to be performed simultaneousl
y on a number of data points.
 But the divergence time will differ between different positions on the
 complex plane, which makes it difficult to compute several points in lockstep.
 When one point has already diverged, others have not.
 Thus we can not have the loop breakout used in the earlier algorithms.
 Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Version-of-the"

\end_inset

 shows how the problem can be expressed in SIMD fashion, operating in lockstep
 on all points in the complex plane.
 A conditional expression is now used to gather the escape times.
 These can be executed in SIMD fashion with no branches.
\end_layout

\begin_layout Standard
The performance of the SIMD version is frankly disappointing as shown in
 Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Timings-for-Mandelbrot"

\end_inset

.
 It runs in about 1/20th the speed of the MIMD version.
 This can be explained by the fact that most of the points being examined
 on the complex plane will diverge rapidly, a great deal of wasted computation
 is done because the SIMD version can not exploit this.
 A second factor will be the much poorer cache usage because each statement
 uses 2D arrays that are too big to fit in the cache.
 
\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
Modern desktop computers have the potential to perform highly parallel computati
ons.
 But realising this potential remains tricky.
 Array languages like Vector Pascal, SAC or Fortran95 are one promising
 approach.
 Highest performance is attained when one can utilise both the SIMD and
 the MIMD potential of modern chips.
 This not only requires a compiler that is able to target both forms of
 parallelism but also requires an appropriate problem domain.
 Even problems which, on first sight, are highly parallel, may not lend
 themselves to both sorts of parallelism.
 But when both SIMD and MIMD can be harnessed, the performance gains are
 startling.
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "database"
options "plain"

\end_inset


\end_layout

\end_body
\end_document
