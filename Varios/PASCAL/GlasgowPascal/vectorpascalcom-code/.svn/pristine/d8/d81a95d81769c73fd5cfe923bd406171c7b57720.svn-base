/*
\section{ILCG grammar}
This is a definition of the grammer of ILCG using the Sable grammar specification
lanaguage. It is input to Sable to generate a parser for machine descriptions in
ilcg


\begin{verbatim}
*/




Package ilcg;
/*\end{verbatim}
\subsection{Helpers}
Helpers are regular expressions macros used in the definition of terminal symbols of the grammar.
\begin{verbatim}*/
Helpers
 letter = [['A'..'Z']+['a'..'z']];
 digit = ['0'..'9'];
 alphanum = [letter+['0'..'9']];
 cr = 13;
 lf = 10;
 tab = 9;
 digit_sequence = digit+;
 fractional_constant = digit_sequence? '.' digit_sequence | digit_sequence '.';
 sign = '+' | '-';
 exponent_part = ('e' | 'E') sign? digit_sequence;
 floating_suffix = 'f' | 'F' | 'l' | 'L';
 eol = cr lf | cr | lf; // This takes care of different platforms
 not_cr_lf = [[32..127] - [cr + lf]];
 exponent = ('e'|'E');
 quote = ''';
 all =[0..127];
 schar = [all-'''];
 not_star = [all - '*'];
 not_star_slash = [not_star - '/'];
/*\end{verbatim}
\subsection{Tokens}
The tokens section defines the terminal symbols of the grammar.
\begin{verbatim}
*/
Tokens
 floating_constant = fractional_constant exponent_part? floating_suffix? |
 digit_sequence exponent_part floating_suffix?;
 /* \end{verbatim}
terminals specifying data formats \begin{verbatim}
*/
 void ='void';
 octet = 'octet'; int8 = 'int8'; uint8 = 'uint8';
 halfword = 'halfword'; int16 = 'int16' ; uint16 = 'uint16' ;
 word = 'word'; int32 = 'int32' ;
 uint32 = 'uint32' ; ieee32 = 'ieee32';
 doubleword = 'doubleword'; int64 = 'int64' ;
 uint64 = 'uint64'; ieee64 = 'ieee64';
 quadword = 'quadword';
/*\end{verbatim}
 terminals describing reserved words
\begin{verbatim}*/




 abs='ABS' ;
 address = 'address';
 alias = 'alias';
 and = 'AND' ;
 assembles = 'assembles';
 bra ='(';
 bss='bss';
 call='APPLY' ;
 colon = ':';
 comma = ',';
 const='const';
 contains ='CONTAINS' ;
 cos='COS' ;
 cur ='{';
 deref = '^';
 divide = 'div' ;
 do ='do';
 dot = '.' ;
 empty='EMPTY' ;
 end='end';
 equals = '=';
 exponentiate = '**';
 extend= 'EXTEND' ;
 fail ='interrupt';
 flag = 'flag';
 float='FLOAT' ;
 for ='for';
 free='FREE';
 full='FULL';
 function= 'function';
 ge='>=';
 goto='goto';
 gt='>';
 if ='if';
 inout = 'in'|'out';  
 instructionset='instructionset';
 intlit = digit+;
 ket =')';
 label = 'label';
 le = '<=';
 ley ='}';
 ln='LN';
 location = 'loc';
 lt='<';
 
 map='map';
 max='MAX' ;
 means = 'means';
 mem='mem';
 min='MIN' ;
 minus = '-';
 ne='<>';
 not = 'NOT' ;
 operation = 'operation';
 or = 'OR'  ;
 pattern = 'pattern';
 plus = '+';
 pop ='POP';
 precondition ='precondition';
 procedure='instruction';
 push ='PUSH' ;
 range='RANGE';
 ref='ref';
 reg= 'register';
 remainder = 'MOD' ;
 replicate = 'rep';
 reserved='reserved';
 returns ='returns';
 round='ROUND' ;
 satminus = '-:';
 satmult ='*:';
 satplus = '+:';
 sbra='[';
 semicolon= ';';
 shl='<<';
 shr='>>';
 sideeffect='sideeffect';
 sin='SIN' ;
 sket=']';
 sqr='SQR' ;
 sqrt='SQRT' ;
 stack = 'stack';
 step='step';
 stmt='statement';
 store = ':='|'<-';
 subscript='SUBSCRIPT' ;
 tan='TAN' ;
 times = '*';
 to='to';
 transformer='transformer';
 trunc='TRUNCATE' ;
 typetoken='type';
 vbar = '|';
 vector ='vector';
 xor = 'XOR' ;

 string = quote schar+ quote;
/*\end{verbatim}

 identifiers come after reserved words in the grammar
\begin{verbatim}

*/
 identifier = letter alphanum*;
 blank = (' '|cr|lf|tab)+;
 comment = '/*' not_star* '*'+ (not_star_slash not_star* '*'+)* '/';

Ignored Tokens
	blank,comment;
/*\end{verbatim}\subsection{Non terminal symbols}\begin{verbatim}
*/
Productions
 program = statementlist instructionlist;
 instructionlist =instructionset sbra alternatives sket;
/*\end{verbatim} non terminals specifying data formats \begin{verbatim}*/
 format = 		{octet} octet|
			{halfword} halfword |
			{word} word |
			{doubleword} doubleword |
			{quadword} quadword;


/*\end{verbatim} non terminals corresponding to type descriptions \begin{verbatim}*/
 reference 	= ref type ;
 array 		= vector bra number ket;
 aggregate	={stack} stack bra number ket |
		 {vector}array |
		 {non};
 predeclaredtype= {format} format|{tformat}tformat ;
 typeprim	=		{typeid} typeid|
				{predeclaredtype}predeclaredtype;
 type		= 		{predeclaredtype}predeclaredtype|
				{typeid} typeid|
				{array}typeprim array|
				{cartesian}sbra type cartesian* sket|
				{reftype}reference|
				{map}bra [arg]:type map [result]:type ket;
 cartesian 	= 	comma type;

 tformat = 	{signed} signed|
		{unsigned}unsigned|
		{ieee32}ieee32|
		{ieee63}ieee64;
 signed = 	int32 |
		{int8} int8 |
		{int16} int16 |
		{int64} int64;
 unsigned = 	uint32 |
		{uint8} uint8 |
		{uint16} uint16 |
		{uint64} uint64;


/*\end{verbatim} non terminals corresponding to typed values \begin{verbatim}*/
 value = /*{refval}refval | */
		{rhs}rhs|
		{loc}loc|
		{void}void|
		{cartval}cartval|
		{dyadic} dyadic bra [left]:value comma [right]:value ket|
		{monadic}monadic bra value ket;
/*\end{verbatim} value corresponding to a cartesian product type e.g. record initialisers \begin{verbatim}*/
 cartval	=sbra value carttail* sket;
 carttail 	= comma value;
/*\end{verbatim} conditions used in defining control structures \begin{verbatim}*/
condition=	{dyadic} dyadic bra [left]:condition comma [right]:condition ket|
		{monadic}monadic bra condition ket |
		{id}loc|
		{number}number;
 rhs=		{number}number|
		{cast}bra type ket value|
		{const}const identifier |
		{castpop}bra type ket pop [b2]:bra value [k2]:ket|
		{deref}deref bra refval ket;

 refval 	= loc|
 		{refcast} bra type ket loc;
 loc 	= 	{id}identifier|
		{inorout} identifier dot inout|
		{parameterisedid} identifier sbra subscriptlist sket |
		{memory}mem bra value optionaltype ket ;
 subscriptlist =identifier|{next} identifier comma subscriptlist; 

 
 number = {reallit} optionalsign reallit|
	  {integer} optionalsign intlit;
 optionalsign = |{plus}plus|{minus}minus;
 optionaltype ={null}|comma type;
 reallit= floating_constant;
/*\end{verbatim} operators \begin{verbatim}*/
dyadic = 	
		{plus} plus|
		{minus} minus |	 
		{identifier} identifier| 
		{inorout} identifier dot inout|
		{exp}exponentiate|
		{bss}bss|
		{contains}contains|
 		{times} times |
 		{divide} divide|
		{replicate} replicate|
 		{lt}lt|
 		{gt}gt|
 		{call}call|
		{le}le|
		{ge}ge|
		{eq}equals|
		{ne}ne|
		{min}min|{max}max|
		{push}push|
		{range} range|
		{remainder} remainder|
		{subscript}subscript|
		{satplus}satplus|
		{satmult}satmult|
		{satminus}satminus|
		{shl}shl|
		{shr}shr|
		{or}or|
		{and}and|
		{xor}xor;
monadic	=	{not}not|
		{full}full|
		{empty}empty|
		/*{pop}pop|*/
		{sin}sin|
		{trunc}trunc|
		{round}round|
		{float}float|
		{free}free|
		{extend}extend|
		{cos}cos|
		{tan}tan|
		{identifier} function identifier| 
		{inorout} function identifier dot inout|
		{abs}abs|
		{sqrt}sqrt |
		{sqr}sqr |
		{ln}ln;
/*\end{verbatim} register declaration \begin{verbatim}*/
registerdecl	= reservation reg aggregate type identifier assembles sbra string sket ;
reservation 	= {reserved}reserved|{unreserved};

aliasdecl 	= 	alias reg aggregate type
			[child]:identifier equals [parent]:identifier bra [lowbit]:intlit colon [highbit]:intlit ket
			assembles sbra string sket;

opdecl 		= 	operation identifier means operator assembles sbra string sket;
operator 	= 	{plus}plus|
			{minus}minus|
			{times}times|
			{lt}lt|
			{gt}gt|
			{min}min|
			{max}max|
			{satplus}satplus|
			{satmult}satmult|
			{satminus}satminus|
			{shl}shl|
			{shr}shr|
 			{le}le|
			{ge}ge|
			{eq}equals|
			{ne}ne|
			{divide} divide|
			{remainder}remainder|
			{or}or|
			{and}and|
			{xor}xor;
 
assign 		= 	refval store value ;
meaning 	=
			{value}value|
			{assign}assign|
			{goto}goto value|
			{fail}fail value|
			{if}if bra value ket meaning|
			{for} for refval store [start]:value to [stop]:value step [increment]:value do meaning|
			{sequence} stmt bra [head]:meaning comma [tail]:meaning ket|
			{loc}location value;
output = meaning;
patterndecl 	= 	{forward} pattern identifier|
			{transformforward}  transformer pattern identifier|
			pattern identifier paramlist means sbra meaning sket assemblesto /*sideeffects */ precond|
			{transformer} transformer pattern identifier paramlist 
			means sbra meaning sket 
			returns [outbra]:sbra output [outket]:sket precond |
			{alternatives} pattern identifier means sbra alternatives sket;

paramlist 	= 	bra param paramtail* ket|{nullparam}bra ket; 
param 		= 	typeid identifier|{typeparam} typetoken identifier|{label}label identifier;
typeid 		= 	identifier;
paramtail 	= 	comma param;
alternatives 	= 	type alts*;
alts 		= 	vbar type;
precond 	= 	precondition sbra condition sket|
				{unconditional};
asideeffect	= 	sideeffect returnval;
sideeffects 	= 	asideeffect*;
assemblesto	= 	assembles sbra assemblypattern sket;
assemblypattern = 	assemblertoken*;
assemblertoken 	= 	{string} string |
			{identifier} identifier;
names       = vbar identifier;
returnval 	= 	returns identifier; 
statement 	=	{aliasdecl} aliasdecl|
			{registerdecl} registerdecl |
			{addressmode} address patterndecl|
			{instructionformat}procedure patterndecl|
			{opdecl}opdecl|
			{transform}transformer sbra identifier names* sket|
			{flag} flag identifier equals intlit|
			{typerename}typetoken predeclaredtype equals identifier|
			{patterndecl} patterndecl;
statementlist 	= 	statement semicolon statements*;
statements 	= 	statement semicolon;
// \end{verbatim}


