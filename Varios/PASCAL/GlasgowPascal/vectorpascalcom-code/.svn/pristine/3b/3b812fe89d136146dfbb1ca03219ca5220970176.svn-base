\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\end{tabbing}
\textrm{\section{Multi-media instruction specifications}} 
\textrm{In this section we give a semi-formal definition of the multi media instructionsets used} 
\textrm{on Intel and AMD processors.} 
\textrm{For each instruction we provide a specification of its semantics and indicate the} 
\textrm{assembler syntax used. For all instructions we provide Nasm syntax and} 
\textrm{for the Intel MMX instructions we also provide the gnu assembler syntax.} 
\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\\
\\
\\
\\
\parbox{14cm}{\textsf{\textbf{program}  \textit{MMXandSSE} ;}}\\
\end{tabbing}
\textrm{\paragraph{Base types :}} 
\textrm{we first define the the underlying base types used by the multi-media instructions.} 
\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\\
\\
\\
\+\parbox{14cm}{\textsf{\textbf{type} }}\\
\\
\parbox{14cm}{\textsf{\textit{int8} =-128..127;}}\\
\parbox{14cm}{\textsf{\textit{uint8} =0..255;}}\\
\parbox{14cm}{\textsf{\textit{int16} =-32768..32767;}}\\
\parbox{14cm}{\textsf{\textit{uint16} =0..65535;}}\\
\parbox{14cm}{\textsf{\textit{int32} =\textit{integer} ;}}\\
\parbox{14cm}{\textsf{\textit{int64}  = -9223372036854775807..9223372036854775807;}}\\
\parbox{14cm}{\textsf{\textit{ieee32} = \textit{real} ;}}\\
\parbox{14cm}{\textsf{\textit{ieee64} =\textit{double} ;}}\\
\end{tabbing}
\textrm{\paragraph{Aggregates} we now define the short vector types} 
\textrm{that the MMX, 3DNOW and  SSE instisructions.} 
\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\+ \\
\<\parbox{3.5cm}{\scriptsize{MMX}}\'\>\parbox{14cm}{\textsf{\textit{int32vec2} =\textbf{array} [0..1] \textbf{of}  \textit{int32} ;}}\\
\parbox{14cm}{\textsf{\textit{int16vec4} =\textbf{array} [0..3] \textbf{of}  \textit{int16} ;}}\\
\parbox{14cm}{\textsf{\textit{uint16vec4} =\textbf{array} [0..3] \textbf{of}  \textit{uint16} ;}}\\
\parbox{14cm}{\textsf{\textit{int8vec8} =\textbf{array} [0..7] \textbf{of}  \textit{int8} ;}}\\
\parbox{14cm}{\textsf{\textit{uint8vec8} =\textbf{array} [0..7] \textbf{of}  \textit{uint8} ;}}\\
\<\parbox{3.5cm}{\scriptsize{3DNOW}}\'\>\parbox{14cm}{\textsf{\textit{ieee32vec2} =\textbf{array} [0..1] \textbf{of}  \textit{ieee32} ;}}\\
\<\parbox{3.5cm}{\scriptsize{SSE}}\'\>\parbox{14cm}{\textsf{\textit{ieee32vec4} =\textbf{array} [0..3] \textbf{of}  \textit{ieee32} ;}}\\
\<\parbox{3.5cm}{\scriptsize{SSE2}}\'\>\parbox{14cm}{\textsf{\textit{ieee64vec2} =\textbf{array} [0..1] \textbf{of}  \textit{ieee64} ;}}\\
\parbox{14cm}{\textsf{\textit{int32vec4} =\textbf{array} [0..3] \textbf{of}  \textit{int32} ;}}\\
\parbox{14cm}{\textsf{\textit{int16vec8} =\textbf{array} [0..8] \textbf{of}  \textit{int16} ;}}\\
\parbox{14cm}{\textsf{\textit{uint16vec8} =\textbf{array} [0..8] \textbf{of}  \textit{uint16} ;}}\\
\parbox{14cm}{\textsf{\textit{int8vec16} =\textbf{array} [0..15] \textbf{of}  \textit{int8} ;}}\\
\parbox{14cm}{\textsf{\textit{uint8vec16} =\textbf{array} [0..15]\textbf{of}  \textit{uint8} ;}}\\
\\
\end{tabbing}
\textrm{\paragraph{MMX register types} we define the MMX registers as variant records with multiple possible} 
\textrm{internal representations.} 
\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\+ \\
\\
\+\parbox{14cm}{\textsf{\textit{mmx}  = \textbf{record} }}\\
\+\parbox{14cm}{\textsf {\textbf {case } \textsf{\textit{char}} \textbf{ of } }}\\
\parbox{14cm}{'a':\textsf{(\textit{a} : \textit{int64})}; }\\
\parbox{14cm}{'b':\textsf{(\textit{b} : \textit{int32vec2})}; }\\
\parbox{14cm}{'c':\textsf{(\textit{c} : \textit{int16vec4})}; }\\
\parbox{14cm}{'d':\textsf{(\textit{d} : \textit{uint16vec4})}; }\\
\parbox{14cm}{'e':\textsf{(\textit{e} : \textit{int8vec8})}; }\\
\parbox{14cm}{'f':\textsf{(\textit{f} : \textit{uint8vec8})}; }\\
\<\<\<\parbox{3.5cm}{\scriptsize{Only AMD}}\'\>\>\>\parbox{14cm}{'g':\textsf{(\textit{g} : \textit{ieee32vec2})}; }\\
\<\-\parbox{14cm}{\textsf{\textbf{end} ;}}\\
\parbox{14cm}{\textsf{\textit{regid} $=$ 0..7}; }\\
\end{tabbing}
\textrm{\paragraph{SSE register types} we define the types that} 
\textrm{of the SSE registers as a variant record allowing any of the} 
\textrm{formats supported in either SSE1 or SSE2 instruction-sets.} 
\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\+ \+ \\
\+\parbox{14cm}{\textsf{\textit{xmm} $=$ \textit{record}}}\\
\+\parbox{14cm}{\textsf {\textbf {case } \textsf{\textit{char}} \textbf{ of } }}\\
\<\<\<\<\parbox{3.5cm}{\scriptsize{SSE}}\'\>\>\>\>\parbox{14cm}{'a':\textsf{(\textit{a} : \textit{ieee32vec4})}; }\\
\<\<\<\<\parbox{3.5cm}{\scriptsize{SSE2}}\'\>\>\>\>\parbox{14cm}{'b':\textsf{(\textit{b} : \textit{ieee64vec2})}; }\\
\parbox{14cm}{'c':\textsf{(\textit{c} : \textit{int32vec4})}; }\\
\parbox{14cm}{'d':\textsf{(\textit{d} : \textit{int16vec8})}; }\\
\parbox{14cm}{'e':\textsf{(\textit{e} : \textit{uint16vec8})}; }\\
\parbox{14cm}{'f':\textsf{(\textit{f} : \textit{int8vec16})}; }\\
\parbox{14cm}{'g':\textsf{(\textit{g} : \textit{uint8vec16})}; }\\
\<\-\parbox{14cm}{\textsf{\textbf{end} ;}}\\
\\
\end{tabbing}
\textrm{\paragraph{Define memory}} 
\textrm{we define the memory both as an array of bytes and as an array} 
\textrm{of 16 byte vectors, because the SSE instructions have distinct} 
\textrm{aligned and unaligned memory load instructions.} 
\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\+ \+ \+ \\
\<\<\<\parbox{3.5cm}{\scriptsize{arbitrary}}\'\>\>\parbox{14cm}{\textsf{\textbf{const} }}\\
\parbox{14cm}{\textsf{\textit{memsize} $=$ 16777216}; }\\
\<\parbox{14cm}{\textsf{\textbf{type} }}\\
\parbox{14cm}{\textsf{\textit{alignment} $=$ (\textit{IA32})}; }\\
\<\parbox{14cm}{\textsf{\textbf{var} }}\\
\+\parbox{14cm}{\textsf{\textit{mem} : \textit{record}}}\\
\+\parbox{14cm}{\textsf {\textbf {case } \textsf{\textit{allignment}} \textbf{ of } }}\\
\parbox{14cm}{\textsf{\textit{IA32} : (\textit{bytemem} : \textit{array}$_{0..\textit{memsize} - 1}$)}; }\\
\parbox{14cm}{\textsf{\textit{SSE} : (\textit{vecmem} : \textit{array}$_{0..\textit{memsize} \div 16 - 1}$)}; }\\
\<\-\parbox{14cm}{\textsf{\textbf{end} ;}}\\
\parbox{14cm}{\textsf{\textit{mmxreg} : \textit{array}$_{\textit{regid}}$}; }\\
\parbox{14cm}{\textsf{\textit{xmmreg} : \textit{array}$_{\textit{regid}}$}; }\\
\\
\end{tabbing}
\textrm{Each instruction is now presented as a procedure to give the semantics,} 
\textrm{along with this the {\tt NASM} and {\tt gas}  syntax for the intruction is given.} 
\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\+ \+ \+ \+ \\
\\
\\
\<\textsf{\textbf{procedure}  \textit{ADDPS} \textit{(}  \textit{d} :\textit{regid} ; \textit{src} :\textit{xmm} );}
\\
\end{tabbing}
