{ file pentium13.pas part of codegen pentium}
	FUNCTION pAWordFormat4_AWF4:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword;
		 pAWordFormat4_AWF4:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype3_AFP3:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAFormatPredeclaredtype3_AFP3:=myrec;
		END;
	FUNCTION pAUnsigned9_AU9:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32;
		 pAUnsigned9_AU9:=myrec;
		END;
	FUNCTION pAUnsignedTformat8_AUT8:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUnsigned9_AU9;
		 pAUnsignedTformat8_AUT8:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7_ATP7:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pATformatPredeclaredtype7_ATP7:=myrec;
		END;
	FUNCTION pASigned14_AS14:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned14_AS14:=myrec;
		END;
	FUNCTION pASignedTformat13_AST13:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned14_AS14;
		 pASignedTformat13_AST13:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype12_ATP12:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype12_ATP12:=myrec;
		END;
	FUNCTION pAIeee63Tformat18_AI63T18:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat18_AI63T18:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype17_ATP17:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype17_ATP17:=myrec;
		END;
	FUNCTION pAInt64Signed23_AI64S23:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64;
		 pAInt64Signed23_AI64S23:=myrec;
		END;
	FUNCTION pASignedTformat22_AST22:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt64Signed23_AI64S23;
		 pASignedTformat22_AST22:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype21_ATP21:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64 ;
		 pATformatPredeclaredtype21_ATP21:=myrec;
		END;
	FUNCTION pAOctetFormat27_AOF27:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat27_AOF27:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype26_AFP26:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype26_AFP26:=myrec;
		END;
	FUNCTION pAUint8Unsigned32_AU8U32:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned32_AU8U32:=myrec;
		END;
	FUNCTION pAUnsignedTformat31_AUT31:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned32_AU8U32;
		 pAUnsignedTformat31_AUT31:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype30_ATP30:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype30_ATP30:=myrec;
		END;
	FUNCTION pAInt16Signed37_AI16S37:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed37_AI16S37:=myrec;
		END;
	FUNCTION pASignedTformat36_AST36:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed37_AI16S37;
		 pASignedTformat36_AST36:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype35_ATP35:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype35_ATP35:=myrec;
		END;
	FUNCTION pAUint16Unsigned42_AU16U42:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16;
		 pAUint16Unsigned42_AU16U42:=myrec;
		END;
	FUNCTION pAUnsignedTformat41_AUT41:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint16Unsigned42_AU16U42;
		 pAUnsignedTformat41_AUT41:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype40_ATP40:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pATformatPredeclaredtype40_ATP40:=myrec;
		END;
	FUNCTION pAInt8Signed47_AI8S47:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed47_AI8S47:=myrec;
		END;
	FUNCTION pASignedTformat46_AST46:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed47_AI8S47;
		 pASignedTformat46_AST46:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype45_ATP45:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype45_ATP45:=myrec;
		END;
	FUNCTION pAIeee32Tformat51_AI32T51:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat51_AI32T51:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype50_ATP50:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype50_ATP50:=myrec;
		END;
	FUNCTION pAHalfwordFormat55_AHF55:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fhalfword;
		 pAHalfwordFormat55_AHF55:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype54_AFP54:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fhalfword ;
		 pAFormatPredeclaredtype54_AFP54:=myrec;
		END;
	FUNCTION pAUnreservedReservation61_AUR61:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation61_AUR61:=nil;
		 pAUnreservedReservation61_AUR61:=myrec;
		END;
	FUNCTION pANonAggregate62_ANA62:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate62_ANA62:=nil;
		 pANonAggregate62_ANA62:=myrec;
		END;
	FUNCTION pASigned66_AS66:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned66_AS66:=myrec;
		END;
	FUNCTION pASignedTformat65_AST65:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned66_AS66;
		 pASignedTformat65_AST65:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype64_ATP64:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype64_ATP64:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType63_APT63:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType63_APT63:=myrec;
		END;
	FUNCTION pAUnreservedReservation70_AUR70:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation70_AUR70:=nil;
		 pAUnreservedReservation70_AUR70:=myrec;
		END;
	FUNCTION pANonAggregate71_ANA71:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate71_ANA71:=nil;
		 pANonAggregate71_ANA71:=myrec;
		END;
	FUNCTION pASigned75_AS75:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned75_AS75:=myrec;
		END;
	FUNCTION pASignedTformat74_AST74:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned75_AS75;
		 pASignedTformat74_AST74:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype73_ATP73:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype73_ATP73:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType72_APT72:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType72_APT72:=myrec;
		END;
	FUNCTION pAUnreservedReservation79_AUR79:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation79_AUR79:=nil;
		 pAUnreservedReservation79_AUR79:=myrec;
		END;
	FUNCTION pANonAggregate80_ANA80:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate80_ANA80:=nil;
		 pANonAggregate80_ANA80:=myrec;
		END;
	FUNCTION pASigned84_AS84:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned84_AS84:=myrec;
		END;
	FUNCTION pASignedTformat83_AST83:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned84_AS84;
		 pASignedTformat83_AST83:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype82_ATP82:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype82_ATP82:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType81_APT81:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType81_APT81:=myrec;
		END;
	FUNCTION pAUnreservedReservation88_AUR88:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation88_AUR88:=nil;
		 pAUnreservedReservation88_AUR88:=myrec;
		END;
	FUNCTION pANonAggregate89_ANA89:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate89_ANA89:=nil;
		 pANonAggregate89_ANA89:=myrec;
		END;
	FUNCTION pASigned93_AS93:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned93_AS93:=myrec;
		END;
	FUNCTION pASignedTformat92_AST92:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned93_AS93;
		 pASignedTformat92_AST92:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype91_ATP91:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype91_ATP91:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType90_APT90:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType90_APT90:=myrec;
		END;
	FUNCTION pANonAggregate97_ANA97:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate97_ANA97:=nil;
		 pANonAggregate97_ANA97:=myrec;
		END;
	FUNCTION pASigned101_AS101:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned101_AS101:=myrec;
		END;
	FUNCTION pASignedTformat100_AST100:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned101_AS101;
		 pASignedTformat100_AST100:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype99_ATP99:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype99_ATP99:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType98_APT98:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType98_APT98:=myrec;
		END;
	FUNCTION pAReservedReservation105_ARR105:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAReservedReservation105_ARR105:=nil;
		 pAReservedReservation105_ARR105:=myrec;
		END;
	FUNCTION pANonAggregate106_ANA106:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate106_ANA106:=nil;
		 pANonAggregate106_ANA106:=myrec;
		END;
	FUNCTION pASigned110_AS110:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned110_AS110:=myrec;
		END;
	FUNCTION pASignedTformat109_AST109:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned110_AS110;
		 pASignedTformat109_AST109:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype108_ATP108:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype108_ATP108:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType107_APT107:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType107_APT107:=myrec;
		END;
	FUNCTION pAUnreservedReservation114_AUR114:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation114_AUR114:=nil;
		 pAUnreservedReservation114_AUR114:=myrec;
		END;
	FUNCTION pANonAggregate115_ANA115:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate115_ANA115:=nil;
		 pANonAggregate115_ANA115:=myrec;
		END;
	FUNCTION pASigned119_AS119:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned119_AS119:=myrec;
		END;
	FUNCTION pASignedTformat118_AST118:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned119_AS119;
		 pASignedTformat118_AST118:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype117_ATP117:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype117_ATP117:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType116_APT116:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType116_APT116:=myrec;
		END;
	FUNCTION pAUnreservedReservation123_AUR123:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation123_AUR123:=nil;
		 pAUnreservedReservation123_AUR123:=myrec;
		END;
	FUNCTION pANonAggregate124_ANA124:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate124_ANA124:=nil;
		 pANonAggregate124_ANA124:=myrec;
		END;
	FUNCTION pASigned128_AS128:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned128_AS128:=myrec;
		END;
	FUNCTION pASignedTformat127_AST127:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned128_AS128;
		 pASignedTformat127_AST127:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype126_ATP126:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype126_ATP126:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType125_APT125:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType125_APT125:=myrec;
		END;
	FUNCTION pAUnreservedReservation132_AUR132:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation132_AUR132:=nil;
		 pAUnreservedReservation132_AUR132:=myrec;
		END;
	FUNCTION pANonAggregate133_ANA133:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate133_ANA133:=nil;
		 pANonAggregate133_ANA133:=myrec;
		END;
	FUNCTION pASigned137_AS137:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned137_AS137:=myrec;
		END;
	FUNCTION pASignedTformat136_AST136:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned137_AS137;
		 pASignedTformat136_AST136:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype135_ATP135:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype135_ATP135:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType134_APT134:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType134_APT134:=myrec;
		END;
	FUNCTION pANonAggregate141_ANA141:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate141_ANA141:=nil;
		 pANonAggregate141_ANA141:=myrec;
		END;
	FUNCTION pAUnsigned145_AU145:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32;
		 pAUnsigned145_AU145:=myrec;
		END;
	FUNCTION pAUnsignedTformat144_AUT144:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUnsigned145_AU145;
		 pAUnsignedTformat144_AUT144:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype143_ATP143:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pATformatPredeclaredtype143_ATP143:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType142_APT142:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pAPredeclaredtypeType142_APT142:=myrec;
		END;
	FUNCTION pANonAggregate149_ANA149:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate149_ANA149:=nil;
		 pANonAggregate149_ANA149:=myrec;
		END;
	FUNCTION pAUnsigned153_AU153:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32;
		 pAUnsigned153_AU153:=myrec;
		END;
	FUNCTION pAUnsignedTformat152_AUT152:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUnsigned153_AU153;
		 pAUnsignedTformat152_AUT152:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype151_ATP151:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pATformatPredeclaredtype151_ATP151:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType150_APT150:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pAPredeclaredtypeType150_APT150:=myrec;
		END;
	FUNCTION pANonAggregate157_ANA157:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate157_ANA157:=nil;
		 pANonAggregate157_ANA157:=myrec;
		END;
	FUNCTION pAUnsigned161_AU161:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32;
		 pAUnsigned161_AU161:=myrec;
		END;
	FUNCTION pAUnsignedTformat160_AUT160:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUnsigned161_AU161;
		 pAUnsignedTformat160_AUT160:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype159_ATP159:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pATformatPredeclaredtype159_ATP159:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType158_APT158:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pAPredeclaredtypeType158_APT158:=myrec;
		END;
	FUNCTION pANonAggregate165_ANA165:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate165_ANA165:=nil;
		 pANonAggregate165_ANA165:=myrec;
		END;
	FUNCTION pAUnsigned169_AU169:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32;
		 pAUnsigned169_AU169:=myrec;
		END;
	FUNCTION pAUnsignedTformat168_AUT168:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUnsigned169_AU169;
		 pAUnsignedTformat168_AUT168:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype167_ATP167:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pATformatPredeclaredtype167_ATP167:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType166_APT166:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pAPredeclaredtypeType166_APT166:=myrec;
		END;
	FUNCTION pANonAggregate173_ANA173:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate173_ANA173:=nil;
		 pANonAggregate173_ANA173:=myrec;
		END;
	FUNCTION pAUnsigned177_AU177:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32;
		 pAUnsigned177_AU177:=myrec;
		END;
	FUNCTION pAUnsignedTformat176_AUT176:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUnsigned177_AU177;
		 pAUnsignedTformat176_AUT176:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype175_ATP175:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pATformatPredeclaredtype175_ATP175:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType174_APT174:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pAPredeclaredtypeType174_APT174:=myrec;
		END;
	FUNCTION pANonAggregate181_ANA181:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate181_ANA181:=nil;
		 pANonAggregate181_ANA181:=myrec;
		END;
	FUNCTION pAUnsigned185_AU185:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32;
		 pAUnsigned185_AU185:=myrec;
		END;
	FUNCTION pAUnsignedTformat184_AUT184:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUnsigned185_AU185;
		 pAUnsignedTformat184_AUT184:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype183_ATP183:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pATformatPredeclaredtype183_ATP183:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType182_APT182:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pAPredeclaredtypeType182_APT182:=myrec;
		END;
	FUNCTION pANonAggregate189_ANA189:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate189_ANA189:=nil;
		 pANonAggregate189_ANA189:=myrec;
		END;
	FUNCTION pAInt8Signed193_AI8S193:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed193_AI8S193:=myrec;
		END;
	FUNCTION pASignedTformat192_AST192:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed193_AI8S193;
		 pASignedTformat192_AST192:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype191_ATP191:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype191_ATP191:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType190_APT190:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType190_APT190:=myrec;
		END;
	FUNCTION pANonAggregate197_ANA197:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate197_ANA197:=nil;
		 pANonAggregate197_ANA197:=myrec;
		END;
	FUNCTION pAInt8Signed201_AI8S201:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed201_AI8S201:=myrec;
		END;
	FUNCTION pASignedTformat200_AST200:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed201_AI8S201;
		 pASignedTformat200_AST200:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype199_ATP199:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype199_ATP199:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType198_APT198:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType198_APT198:=myrec;
		END;
	FUNCTION pANonAggregate205_ANA205:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate205_ANA205:=nil;
		 pANonAggregate205_ANA205:=myrec;
		END;
	FUNCTION pAInt8Signed209_AI8S209:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed209_AI8S209:=myrec;
		END;
	FUNCTION pASignedTformat208_AST208:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed209_AI8S209;
		 pASignedTformat208_AST208:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype207_ATP207:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype207_ATP207:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType206_APT206:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType206_APT206:=myrec;
		END;
	FUNCTION pANonAggregate213_ANA213:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate213_ANA213:=nil;
		 pANonAggregate213_ANA213:=myrec;
		END;
	FUNCTION pAInt8Signed217_AI8S217:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed217_AI8S217:=myrec;
		END;
	FUNCTION pASignedTformat216_AST216:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed217_AI8S217;
		 pASignedTformat216_AST216:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype215_ATP215:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype215_ATP215:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType214_APT214:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType214_APT214:=myrec;
		END;
	FUNCTION pANonAggregate221_ANA221:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate221_ANA221:=nil;
		 pANonAggregate221_ANA221:=myrec;
		END;
	FUNCTION pAInt8Signed225_AI8S225:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed225_AI8S225:=myrec;
		END;
	FUNCTION pASignedTformat224_AST224:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed225_AI8S225;
		 pASignedTformat224_AST224:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype223_ATP223:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype223_ATP223:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType222_APT222:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType222_APT222:=myrec;
		END;
	FUNCTION pANonAggregate229_ANA229:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate229_ANA229:=nil;
		 pANonAggregate229_ANA229:=myrec;
		END;
	FUNCTION pAInt8Signed233_AI8S233:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed233_AI8S233:=myrec;
		END;
	FUNCTION pASignedTformat232_AST232:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed233_AI8S233;
		 pASignedTformat232_AST232:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype231_ATP231:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype231_ATP231:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType230_APT230:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType230_APT230:=myrec;
		END;
	FUNCTION pANonAggregate237_ANA237:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate237_ANA237:=nil;
		 pANonAggregate237_ANA237:=myrec;
		END;
	FUNCTION pAInt8Signed241_AI8S241:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed241_AI8S241:=myrec;
		END;
	FUNCTION pASignedTformat240_AST240:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed241_AI8S241;
		 pASignedTformat240_AST240:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype239_ATP239:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype239_ATP239:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType238_APT238:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType238_APT238:=myrec;
		END;
	FUNCTION pANonAggregate245_ANA245:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate245_ANA245:=nil;
		 pANonAggregate245_ANA245:=myrec;
		END;
	FUNCTION pAUint8Unsigned249_AU8U249:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned249_AU8U249:=myrec;
		END;
	FUNCTION pAUnsignedTformat248_AUT248:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned249_AU8U249;
		 pAUnsignedTformat248_AUT248:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype247_ATP247:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype247_ATP247:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType246_APT246:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType246_APT246:=myrec;
		END;
	FUNCTION pANonAggregate253_ANA253:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate253_ANA253:=nil;
		 pANonAggregate253_ANA253:=myrec;
		END;
	FUNCTION pAUint8Unsigned257_AU8U257:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned257_AU8U257:=myrec;
		END;
	FUNCTION pAUnsignedTformat256_AUT256:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned257_AU8U257;
		 pAUnsignedTformat256_AUT256:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype255_ATP255:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype255_ATP255:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType254_APT254:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType254_APT254:=myrec;
		END;
	FUNCTION pANonAggregate261_ANA261:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate261_ANA261:=nil;
		 pANonAggregate261_ANA261:=myrec;
		END;
	FUNCTION pAUint8Unsigned265_AU8U265:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned265_AU8U265:=myrec;
		END;
	FUNCTION pAUnsignedTformat264_AUT264:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned265_AU8U265;
		 pAUnsignedTformat264_AUT264:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype263_ATP263:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype263_ATP263:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType262_APT262:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType262_APT262:=myrec;
		END;
	FUNCTION pANonAggregate269_ANA269:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate269_ANA269:=nil;
		 pANonAggregate269_ANA269:=myrec;
		END;
	FUNCTION pAUint8Unsigned273_AU8U273:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned273_AU8U273:=myrec;
		END;
	FUNCTION pAUnsignedTformat272_AUT272:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned273_AU8U273;
		 pAUnsignedTformat272_AUT272:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype271_ATP271:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype271_ATP271:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType270_APT270:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType270_APT270:=myrec;
		END;
	FUNCTION pANonAggregate277_ANA277:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate277_ANA277:=nil;
		 pANonAggregate277_ANA277:=myrec;
		END;
	FUNCTION pAUint8Unsigned281_AU8U281:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned281_AU8U281:=myrec;
		END;
	FUNCTION pAUnsignedTformat280_AUT280:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned281_AU8U281;
		 pAUnsignedTformat280_AUT280:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype279_ATP279:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype279_ATP279:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType278_APT278:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType278_APT278:=myrec;
		END;
	FUNCTION pANonAggregate285_ANA285:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate285_ANA285:=nil;
		 pANonAggregate285_ANA285:=myrec;
		END;
	FUNCTION pAUint8Unsigned289_AU8U289:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned289_AU8U289:=myrec;
		END;
	FUNCTION pAUnsignedTformat288_AUT288:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned289_AU8U289;
		 pAUnsignedTformat288_AUT288:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype287_ATP287:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype287_ATP287:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType286_APT286:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType286_APT286:=myrec;
		END;
	FUNCTION pANonAggregate293_ANA293:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate293_ANA293:=nil;
		 pANonAggregate293_ANA293:=myrec;
		END;
	FUNCTION pAUint8Unsigned297_AU8U297:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned297_AU8U297:=myrec;
		END;
	FUNCTION pAUnsignedTformat296_AUT296:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned297_AU8U297;
		 pAUnsignedTformat296_AUT296:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype295_ATP295:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype295_ATP295:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType294_APT294:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType294_APT294:=myrec;
		END;
	FUNCTION pANonAggregate301_ANA301:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate301_ANA301:=nil;
		 pANonAggregate301_ANA301:=myrec;
		END;
	FUNCTION pAOctetFormat304_AOF304:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat304_AOF304:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype303_AFP303:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype303_AFP303:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType302_APT302:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAPredeclaredtypeType302_APT302:=myrec;
		END;
	FUNCTION pANonAggregate308_ANA308:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate308_ANA308:=nil;
		 pANonAggregate308_ANA308:=myrec;
		END;
	FUNCTION pAOctetFormat311_AOF311:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat311_AOF311:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype310_AFP310:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype310_AFP310:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType309_APT309:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAPredeclaredtypeType309_APT309:=myrec;
		END;
	FUNCTION pANonAggregate315_ANA315:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate315_ANA315:=nil;
		 pANonAggregate315_ANA315:=myrec;
		END;
	FUNCTION pAOctetFormat318_AOF318:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat318_AOF318:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype317_AFP317:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype317_AFP317:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType316_APT316:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAPredeclaredtypeType316_APT316:=myrec;
		END;
	FUNCTION pANonAggregate322_ANA322:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate322_ANA322:=nil;
		 pANonAggregate322_ANA322:=myrec;
		END;
	FUNCTION pAOctetFormat325_AOF325:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat325_AOF325:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype324_AFP324:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype324_AFP324:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType323_APT323:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAPredeclaredtypeType323_APT323:=myrec;
		END;
	FUNCTION pANonAggregate329_ANA329:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate329_ANA329:=nil;
		 pANonAggregate329_ANA329:=myrec;
		END;
	FUNCTION pAInt16Signed333_AI16S333:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed333_AI16S333:=myrec;
		END;
	FUNCTION pASignedTformat332_AST332:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed333_AI16S333;
		 pASignedTformat332_AST332:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype331_ATP331:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype331_ATP331:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType330_APT330:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pAPredeclaredtypeType330_APT330:=myrec;
		END;
	FUNCTION pANonAggregate337_ANA337:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate337_ANA337:=nil;
		 pANonAggregate337_ANA337:=myrec;
		END;
	FUNCTION pAInt16Signed341_AI16S341:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed341_AI16S341:=myrec;
		END;
	FUNCTION pASignedTformat340_AST340:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed341_AI16S341;
		 pASignedTformat340_AST340:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype339_ATP339:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype339_ATP339:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType338_APT338:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pAPredeclaredtypeType338_APT338:=myrec;
		END;
	FUNCTION pANonAggregate345_ANA345:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate345_ANA345:=nil;
		 pANonAggregate345_ANA345:=myrec;
		END;
	FUNCTION pAInt16Signed349_AI16S349:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed349_AI16S349:=myrec;
		END;
	FUNCTION pASignedTformat348_AST348:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed349_AI16S349;
		 pASignedTformat348_AST348:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype347_ATP347:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype347_ATP347:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType346_APT346:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pAPredeclaredtypeType346_APT346:=myrec;
		END;
	FUNCTION pANonAggregate353_ANA353:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate353_ANA353:=nil;
		 pANonAggregate353_ANA353:=myrec;
		END;
	FUNCTION pAInt16Signed357_AI16S357:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed357_AI16S357:=myrec;
		END;
	FUNCTION pASignedTformat356_AST356:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed357_AI16S357;
		 pASignedTformat356_AST356:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype355_ATP355:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype355_ATP355:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType354_APT354:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pAPredeclaredtypeType354_APT354:=myrec;
		END;
	FUNCTION pANonAggregate361_ANA361:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate361_ANA361:=nil;
		 pANonAggregate361_ANA361:=myrec;
		END;
	FUNCTION pAUint16Unsigned365_AU16U365:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16;
		 pAUint16Unsigned365_AU16U365:=myrec;
		END;
	FUNCTION pAUnsignedTformat364_AUT364:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint16Unsigned365_AU16U365;
		 pAUnsignedTformat364_AUT364:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype363_ATP363:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pATformatPredeclaredtype363_ATP363:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType362_APT362:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pAPredeclaredtypeType362_APT362:=myrec;
		END;
	FUNCTION pANonAggregate369_ANA369:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate369_ANA369:=nil;
		 pANonAggregate369_ANA369:=myrec;
		END;
	FUNCTION pAUint16Unsigned373_AU16U373:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16;
		 pAUint16Unsigned373_AU16U373:=myrec;
		END;
	FUNCTION pAUnsignedTformat372_AUT372:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint16Unsigned373_AU16U373;
		 pAUnsignedTformat372_AUT372:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype371_ATP371:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pATformatPredeclaredtype371_ATP371:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType370_APT370:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pAPredeclaredtypeType370_APT370:=myrec;
		END;
	FUNCTION pANonAggregate377_ANA377:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate377_ANA377:=nil;
		 pANonAggregate377_ANA377:=myrec;
		END;
	FUNCTION pAUint16Unsigned381_AU16U381:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16;
		 pAUint16Unsigned381_AU16U381:=myrec;
		END;
	FUNCTION pAUnsignedTformat380_AUT380:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint16Unsigned381_AU16U381;
		 pAUnsignedTformat380_AUT380:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype379_ATP379:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pATformatPredeclaredtype379_ATP379:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType378_APT378:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pAPredeclaredtypeType378_APT378:=myrec;
		END;
	FUNCTION pANonAggregate385_ANA385:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate385_ANA385:=nil;
		 pANonAggregate385_ANA385:=myrec;
		END;
	FUNCTION pAUint16Unsigned389_AU16U389:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16;
		 pAUint16Unsigned389_AU16U389:=myrec;
		END;
	FUNCTION pAUnsignedTformat388_AUT388:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint16Unsigned389_AU16U389;
		 pAUnsignedTformat388_AUT388:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype387_ATP387:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pATformatPredeclaredtype387_ATP387:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType386_APT386:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pAPredeclaredtypeType386_APT386:=myrec;
		END;
	FUNCTION pANonAggregate393_ANA393:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate393_ANA393:=nil;
		 pANonAggregate393_ANA393:=myrec;
		END;
	FUNCTION pAHalfwordFormat396_AHF396:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fhalfword;
		 pAHalfwordFormat396_AHF396:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype395_AFP395:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fhalfword ;
		 pAFormatPredeclaredtype395_AFP395:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType394_APT394:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fhalfword ;
		 pAPredeclaredtypeType394_APT394:=myrec;
		END;
	FUNCTION pANonAggregate400_ANA400:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate400_ANA400:=nil;
		 pANonAggregate400_ANA400:=myrec;
		END;
	FUNCTION pAHalfwordFormat403_AHF403:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fhalfword;
		 pAHalfwordFormat403_AHF403:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype402_AFP402:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fhalfword ;
		 pAFormatPredeclaredtype402_AFP402:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType401_APT401:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fhalfword ;
		 pAPredeclaredtypeType401_APT401:=myrec;
		END;
	FUNCTION pAUnreservedReservation407_AUR407:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation407_AUR407:=nil;
		 pAUnreservedReservation407_AUR407:=myrec;
		END;
	FUNCTION pAOptionalsign410_AO410:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign410_AO410:=nil;
		 pAOptionalsign410_AO410:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber409_AIN409:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4096 ;
		 pAIntegerNumber409_AIN409:=myrec;
		END;
	FUNCTION pAStackAggregate408_ASA408:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAStackAggregate408_ASA408:=nil;
		 pAStackAggregate408_ASA408:=myrec;
		END;
	FUNCTION pASigned414_AS414:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned414_AS414:=myrec;
		END;
	FUNCTION pASignedTformat413_AST413:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned414_AS414;
		 pASignedTformat413_AST413:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype412_ATP412:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype412_ATP412:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType411_APT411:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType411_APT411:=myrec;
		END;
	FUNCTION pATypeid419_AT419:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ EDI  ilcg.RegDetails@7796d0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid419_AT419:=myrec;
		END;
	FUNCTION pATypeidType418_ATT418:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid419_AT419;
		 pATypeidType418_ATT418:=myrec;
		END;
	FUNCTION pATypeid421_AT421:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ESI  ilcg.RegDetails@1a1411}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid421_AT421:=myrec;
		END;
	FUNCTION pATypeidType420_ATT420:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid421_AT421;
		 pATypeidType420_ATT420:=myrec;
		END;
	FUNCTION pATypeid423_AT423:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ EBX  ilcg.RegDetails@5291cd}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid423_AT423:=myrec;
		END;
	FUNCTION pATypeidType422_ATT422:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid423_AT423;
		 pATypeidType422_ATT422:=myrec;
		END;
	FUNCTION pATypeid425_AT425:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ EBP  ilcg.RegDetails@3e35b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid425_AT425:=myrec;
		END;
	FUNCTION pATypeidType424_ATT424:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid425_AT425;
		 pATypeidType424_ATT424:=myrec;
		END;
	FUNCTION pATypeid427_AT427:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ESP  ilcg.RegDetails@22d304}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid427_AT427:=myrec;
		END;
	FUNCTION pATypeidType426_ATT426:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid427_AT427;
		 pATypeidType426_ATT426:=myrec;
		END;
	FUNCTION pATypeid429_AT429:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ EAX  ilcg.RegDetails@156254}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid429_AT429:=myrec;
		END;
	FUNCTION pATypeidType428_ATT428:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid429_AT429;
		 pATypeidType428_ATT428:=myrec;
		END;
	FUNCTION pATypeid431_AT431:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ EDX  ilcg.RegDetails@2632be}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid431_AT431:=myrec;
		END;
	FUNCTION pATypeidType430_ATT430:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid431_AT431;
		 pATypeidType430_ATT430:=myrec;
		END;
	FUNCTION pATypeid433_AT433:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ECX  ilcg.RegDetails@6d8eb5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid433_AT433:=myrec;
		END;
	FUNCTION pATypeidType432_ATT432:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid433_AT433;
		 pATypeidType432_ATT432:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl417_AAP417:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 0;
		myrec^.last:= 7;
		 pAAlternativesPatterndecl417_AAP417:=myrec;
		END;
	FUNCTION pATypeid438_AT438:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ EAX  ilcg.RegDetails@156254}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid438_AT438:=myrec;
		END;
	FUNCTION pATypeidType437_ATT437:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid438_AT438;
		 pATypeidType437_ATT437:=myrec;
		END;
	FUNCTION pATypeid440_AT440:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ EDX  ilcg.RegDetails@2632be}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid440_AT440:=myrec;
		END;
	FUNCTION pATypeidType439_ATT439:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid440_AT440;
		 pATypeidType439_ATT439:=myrec;
		END;
	FUNCTION pATypeid442_AT442:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ECX  ilcg.RegDetails@6d8eb5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid442_AT442:=myrec;
		END;
	FUNCTION pATypeidType441_ATT441:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid442_AT442;
		 pATypeidType441_ATT441:=myrec;
		END;
	FUNCTION pATypeid444_AT444:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ EBX  ilcg.RegDetails@5291cd}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid444_AT444:=myrec;
		END;
	FUNCTION pATypeidType443_ATT443:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid444_AT444;
		 pATypeidType443_ATT443:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl436_AAP436:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 8;
		myrec^.last:= 11;
		 pAAlternativesPatterndecl436_AAP436:=myrec;
		END;
	FUNCTION pATypeid449_AT449:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ indexreg  ilcg.pattern@c954e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid449_AT449:=myrec;
		END;
	FUNCTION pATypeidType448_ATT448:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid449_AT449;
		 pATypeidType448_ATT448:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl447_AAP447:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 12;
		myrec^.last:= 12;
		 pAAlternativesPatterndecl447_AAP447:=myrec;
		END;
	FUNCTION pATypeid454_AT454:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ EBP  ilcg.RegDetails@3e35b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid454_AT454:=myrec;
		END;
	FUNCTION pATypeidType453_ATT453:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid454_AT454;
		 pATypeidType453_ATT453:=myrec;
		END;
	FUNCTION pATypeid456_AT456:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ubx  ilcg.RegDetails@599277}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid456_AT456:=myrec;
		END;
	FUNCTION pATypeidType455_ATT455:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid456_AT456;
		 pATypeidType455_ATT455:=myrec;
		END;
	FUNCTION pATypeid458_AT458:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ udi  ilcg.RegDetails@5e90f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid458_AT458:=myrec;
		END;
	FUNCTION pATypeidType457_ATT457:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid458_AT458;
		 pATypeidType457_ATT457:=myrec;
		END;
	FUNCTION pATypeid460_AT460:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ usi  ilcg.RegDetails@201a7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid460_AT460:=myrec;
		END;
	FUNCTION pATypeidType459_ATT459:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid460_AT460;
		 pATypeidType459_ATT459:=myrec;
		END;
	FUNCTION pATypeid462_AT462:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ udx  ilcg.RegDetails@495daa}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid462_AT462:=myrec;
		END;
	FUNCTION pATypeidType461_ATT461:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid462_AT462;
		 pATypeidType461_ATT461:=myrec;
		END;
	FUNCTION pATypeid464_AT464:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ESP  ilcg.RegDetails@22d304}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid464_AT464:=myrec;
		END;
	FUNCTION pATypeidType463_ATT463:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid464_AT464;
		 pATypeidType463_ATT463:=myrec;
		END;
	FUNCTION pATypeid466_AT466:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ucx  ilcg.RegDetails@13c366}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid466_AT466:=myrec;
		END;
	FUNCTION pATypeidType465_ATT465:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid466_AT466;
		 pATypeidType465_ATT465:=myrec;
		END;
	FUNCTION pATypeid468_AT468:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ uax  ilcg.RegDetails@4ab40a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid468_AT468:=myrec;
		END;
	FUNCTION pATypeidType467_ATT467:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid468_AT468;
		 pATypeidType467_ATT467:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl452_AAP452:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 13;
		myrec^.last:= 20;
		 pAAlternativesPatterndecl452_AAP452:=myrec;
		END;
	FUNCTION pATypeid473_AT473:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ireg  ilcg.pattern@3c86e9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid473_AT473:=myrec;
		END;
	FUNCTION pATypeidType472_ATT472:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid473_AT473;
		 pATypeidType472_ATT472:=myrec;
		END;
	FUNCTION pATypeid475_AT475:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ureg  ilcg.pattern@56182f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid475_AT475:=myrec;
		END;
	FUNCTION pATypeidType474_ATT474:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid475_AT475;
		 pATypeidType474_ATT474:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl471_AAP471:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 21;
		myrec^.last:= 22;
		 pAAlternativesPatterndecl471_AAP471:=myrec;
		END;
	FUNCTION pATypeid480_AT480:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BL  ilcg.RegDetails@3c9673}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid480_AT480:=myrec;
		END;
	FUNCTION pATypeidType479_ATT479:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid480_AT480;
		 pATypeidType479_ATT479:=myrec;
		END;
	FUNCTION pATypeid482_AT482:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ DL  ilcg.RegDetails@736e59}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid482_AT482:=myrec;
		END;
	FUNCTION pATypeidType481_ATT481:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid482_AT482;
		 pATypeidType481_ATT481:=myrec;
		END;
	FUNCTION pATypeid484_AT484:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ AL  ilcg.RegDetails@711e0f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid484_AT484:=myrec;
		END;
	FUNCTION pATypeidType483_ATT483:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid484_AT484;
		 pATypeidType483_ATT483:=myrec;
		END;
	FUNCTION pATypeid486_AT486:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ CL  ilcg.RegDetails@730b8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid486_AT486:=myrec;
		END;
	FUNCTION pATypeidType485_ATT485:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid486_AT486;
		 pATypeidType485_ATT485:=myrec;
		END;
	FUNCTION pATypeid488_AT488:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ iBH  ilcg.RegDetails@51918a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid488_AT488:=myrec;
		END;
	FUNCTION pATypeidType487_ATT487:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid488_AT488;
		 pATypeidType487_ATT487:=myrec;
		END;
	FUNCTION pATypeid490_AT490:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ iDH  ilcg.RegDetails@6db492}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid490_AT490:=myrec;
		END;
	FUNCTION pATypeidType489_ATT489:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid490_AT490;
		 pATypeidType489_ATT489:=myrec;
		END;
	FUNCTION pATypeid492_AT492:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ iCH  ilcg.RegDetails@455aa8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid492_AT492:=myrec;
		END;
	FUNCTION pATypeidType491_ATT491:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid492_AT492;
		 pATypeidType491_ATT491:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl478_AAP478:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 23;
		myrec^.last:= 29;
		 pAAlternativesPatterndecl478_AAP478:=myrec;
		END;
	FUNCTION pATypeid497_AT497:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BH  ilcg.RegDetails@474910}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid497_AT497:=myrec;
		END;
	FUNCTION pATypeidType496_ATT496:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid497_AT497;
		 pATypeidType496_ATT496:=myrec;
		END;
	FUNCTION pATypeid499_AT499:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ DH  ilcg.RegDetails@3f1179}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid499_AT499:=myrec;
		END;
	FUNCTION pATypeidType498_ATT498:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid499_AT499;
		 pATypeidType498_ATT498:=myrec;
		END;
	FUNCTION pATypeid501_AT501:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ uAL  ilcg.RegDetails@b1684}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid501_AT501:=myrec;
		END;
	FUNCTION pATypeidType500_ATT500:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid501_AT501;
		 pATypeidType500_ATT500:=myrec;
		END;
	FUNCTION pATypeid503_AT503:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ uBL  ilcg.RegDetails@60d16b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid503_AT503:=myrec;
		END;
	FUNCTION pATypeidType502_ATT502:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid503_AT503;
		 pATypeidType502_ATT502:=myrec;
		END;
	FUNCTION pATypeid505_AT505:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ uDL  ilcg.RegDetails@64d0cd}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid505_AT505:=myrec;
		END;
	FUNCTION pATypeidType504_ATT504:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid505_AT505;
		 pATypeidType504_ATT504:=myrec;
		END;
	FUNCTION pATypeid507_AT507:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ uCL  ilcg.RegDetails@107304}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid507_AT507:=myrec;
		END;
	FUNCTION pATypeidType506_ATT506:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid507_AT507;
		 pATypeidType506_ATT506:=myrec;
		END;
	FUNCTION pATypeid509_AT509:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ CH  ilcg.RegDetails@2c2d9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid509_AT509:=myrec;
		END;
	FUNCTION pATypeidType508_ATT508:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid509_AT509;
		 pATypeidType508_ATT508:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl495_AAP495:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 30;
		myrec^.last:= 36;
		 pAAlternativesPatterndecl495_AAP495:=myrec;
		END;
	FUNCTION pATypeid514_AT514:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ oBL  ilcg.RegDetails@5b24c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid514_AT514:=myrec;
		END;
	FUNCTION pATypeidType513_ATT513:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid514_AT514;
		 pATypeidType513_ATT513:=myrec;
		END;
	FUNCTION pATypeid516_AT516:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ oAL  ilcg.RegDetails@1558dc}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid516_AT516:=myrec;
		END;
	FUNCTION pATypeidType515_ATT515:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid516_AT516;
		 pATypeidType515_ATT515:=myrec;
		END;
	FUNCTION pATypeid518_AT518:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ oDL  ilcg.RegDetails@2726b2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid518_AT518:=myrec;
		END;
	FUNCTION pATypeidType517_ATT517:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid518_AT518;
		 pATypeidType517_ATT517:=myrec;
		END;
	FUNCTION pATypeid520_AT520:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ oCL  ilcg.RegDetails@1a791f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid520_AT520:=myrec;
		END;
	FUNCTION pATypeidType519_ATT519:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid520_AT520;
		 pATypeidType519_ATT519:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl512_AAP512:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 37;
		myrec^.last:= 40;
		 pAAlternativesPatterndecl512_AAP512:=myrec;
		END;
	FUNCTION pATypeid525_AT525:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ AL  ilcg.RegDetails@711e0f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid525_AT525:=myrec;
		END;
	FUNCTION pATypeidType524_ATT524:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid525_AT525;
		 pATypeidType524_ATT524:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl523_AAP523:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 41;
		myrec^.last:= 41;
		 pAAlternativesPatterndecl523_AAP523:=myrec;
		END;
	FUNCTION pATypeid530_AT530:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BL  ilcg.RegDetails@3c9673}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid530_AT530:=myrec;
		END;
	FUNCTION pATypeidType529_ATT529:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid530_AT530;
		 pATypeidType529_ATT529:=myrec;
		END;
	FUNCTION pATypeid532_AT532:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ CL  ilcg.RegDetails@730b8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid532_AT532:=myrec;
		END;
	FUNCTION pATypeidType531_ATT531:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid532_AT532;
		 pATypeidType531_ATT531:=myrec;
		END;
	FUNCTION pATypeid534_AT534:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ DL  ilcg.RegDetails@736e59}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid534_AT534:=myrec;
		END;
	FUNCTION pATypeidType533_ATT533:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid534_AT534;
		 pATypeidType533_ATT533:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl528_AAP528:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 42;
		myrec^.last:= 44;
		 pAAlternativesPatterndecl528_AAP528:=myrec;
		END;
	FUNCTION pATypeid539_AT539:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bacc  ilcg.pattern@260191}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid539_AT539:=myrec;
		END;
	FUNCTION pATypeidType538_ATT538:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid539_AT539;
		 pATypeidType538_ATT538:=myrec;
		END;
	FUNCTION pATypeid541_AT541:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bireg  ilcg.pattern@cc53e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid541_AT541:=myrec;
		END;
	FUNCTION pATypeidType540_ATT540:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid541_AT541;
		 pATypeidType540_ATT540:=myrec;
		END;
	FUNCTION pATypeid543_AT543:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bnonacc  ilcg.pattern@7275d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid543_AT543:=myrec;
		END;
	FUNCTION pATypeidType542_ATT542:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid543_AT543;
		 pATypeidType542_ATT542:=myrec;
		END;
	FUNCTION pATypeid545_AT545:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bureg  ilcg.pattern@40627c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid545_AT545:=myrec;
		END;
	FUNCTION pATypeidType544_ATT544:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid545_AT545;
		 pATypeidType544_ATT544:=myrec;
		END;
	FUNCTION pATypeid547_AT547:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ boreg  ilcg.pattern@4560cf}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid547_AT547:=myrec;
		END;
	FUNCTION pATypeidType546_ATT546:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid547_AT547;
		 pATypeidType546_ATT546:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl537_AAP537:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 45;
		myrec^.last:= 49;
		 pAAlternativesPatterndecl537_AAP537:=myrec;
		END;
	FUNCTION pATypeid552_AT552:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BX  ilcg.RegDetails@9dcbb}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid552_AT552:=myrec;
		END;
	FUNCTION pATypeidType551_ATT551:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid552_AT552;
		 pATypeidType551_ATT551:=myrec;
		END;
	FUNCTION pATypeid554_AT554:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ CX  ilcg.RegDetails@f8ee4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid554_AT554:=myrec;
		END;
	FUNCTION pATypeidType553_ATT553:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid554_AT554;
		 pATypeidType553_ATT553:=myrec;
		END;
	FUNCTION pATypeid556_AT556:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ DX  ilcg.RegDetails@5c13ef}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid556_AT556:=myrec;
		END;
	FUNCTION pATypeidType555_ATT555:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid556_AT556;
		 pATypeidType555_ATT555:=myrec;
		END;
	FUNCTION pATypeid558_AT558:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ AX  ilcg.RegDetails@4ce427}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid558_AT558:=myrec;
		END;
	FUNCTION pATypeidType557_ATT557:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid558_AT558;
		 pATypeidType557_ATT557:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl550_AAP550:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 50;
		myrec^.last:= 53;
		 pAAlternativesPatterndecl550_AAP550:=myrec;
		END;
	FUNCTION pATypeid563_AT563:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ uBX  ilcg.RegDetails@76ef01}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid563_AT563:=myrec;
		END;
	FUNCTION pATypeidType562_ATT562:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid563_AT563;
		 pATypeidType562_ATT562:=myrec;
		END;
	FUNCTION pATypeid565_AT565:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ uCX  ilcg.RegDetails@62e703}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid565_AT565:=myrec;
		END;
	FUNCTION pATypeidType564_ATT564:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid565_AT565;
		 pATypeidType564_ATT564:=myrec;
		END;
	FUNCTION pATypeid567_AT567:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ uDX  ilcg.RegDetails@487ae0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid567_AT567:=myrec;
		END;
	FUNCTION pATypeidType566_ATT566:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid567_AT567;
		 pATypeidType566_ATT566:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl561_AAP561:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 54;
		myrec^.last:= 56;
		 pAAlternativesPatterndecl561_AAP561:=myrec;
		END;
	FUNCTION pATypeid572_AT572:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SI  ilcg.RegDetails@54b38}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid572_AT572:=myrec;
		END;
	FUNCTION pATypeidType571_ATT571:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid572_AT572;
		 pATypeidType571_ATT571:=myrec;
		END;
	FUNCTION pATypeid574_AT574:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ DI  ilcg.RegDetails@4f8358}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid574_AT574:=myrec;
		END;
	FUNCTION pATypeidType573_ATT573:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid574_AT574;
		 pATypeidType573_ATT573:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl570_AAP570:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 57;
		myrec^.last:= 58;
		 pAAlternativesPatterndecl570_AAP570:=myrec;
		END;
	FUNCTION pATypeid579_AT579:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ swreg  ilcg.pattern@3f99af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid579_AT579:=myrec;
		END;
	FUNCTION pATypeidType578_ATT578:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid579_AT579;
		 pATypeidType578_ATT578:=myrec;
		END;
	FUNCTION pATypeid581_AT581:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ uwreg  ilcg.pattern@662121}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid581_AT581:=myrec;
		END;
	FUNCTION pATypeidType580_ATT580:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid581_AT581;
		 pATypeidType580_ATT580:=myrec;
		END;
	FUNCTION pATypeid583_AT583:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ untypedwreg  ilcg.pattern@60e390}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid583_AT583:=myrec;
		END;
	FUNCTION pATypeidType582_ATT582:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid583_AT583;
		 pATypeidType582_ATT582:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl577_AAP577:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 59;
		myrec^.last:= 61;
		 pAAlternativesPatterndecl577_AAP577:=myrec;
		END;
	FUNCTION pATypeid588_AT588:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid588_AT588:=myrec;
		END;
	FUNCTION pATypeidType587_ATT587:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid588_AT588;
		 pATypeidType587_ATT587:=myrec;
		END;
	FUNCTION pATypeid590_AT590:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ wreg  ilcg.pattern@18cbf7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid590_AT590:=myrec;
		END;
	FUNCTION pATypeidType589_ATT589:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid590_AT590;
		 pATypeidType589_ATT589:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl586_AAP586:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 62;
		myrec^.last:= 63;
		 pAAlternativesPatterndecl586_AAP586:=myrec;
		END;
	FUNCTION pATypeid595_AT595:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ pushreg  ilcg.pattern@11e321}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid595_AT595:=myrec;
		END;
	FUNCTION pATypeidType594_ATT594:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid595_AT595;
		 pATypeidType594_ATT594:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl593_AAP593:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 64;
		myrec^.last:= 64;
		 pAAlternativesPatterndecl593_AAP593:=myrec;
		END;
	FUNCTION pATypeid600_AT600:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid600_AT600:=myrec;
		END;
	FUNCTION pATypeidType599_ATT599:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid600_AT600;
		 pATypeidType599_ATT599:=myrec;
		END;
	FUNCTION pATypeid602_AT602:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ wreg  ilcg.pattern@18cbf7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid602_AT602:=myrec;
		END;
	FUNCTION pATypeidType601_ATT601:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid602_AT602;
		 pATypeidType601_ATT601:=myrec;
		END;
	FUNCTION pATypeid604_AT604:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid604_AT604:=myrec;
		END;
	FUNCTION pATypeidType603_ATT603:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid604_AT604;
		 pATypeidType603_ATT603:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl598_AAP598:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 65;
		myrec^.last:= 67;
		 pAAlternativesPatterndecl598_AAP598:=myrec;
		END;
	FUNCTION pATypeid609_AT609:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bireg  ilcg.pattern@cc53e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid609_AT609:=myrec;
		END;
	FUNCTION pATypeidType608_ATT608:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid609_AT609;
		 pATypeidType608_ATT608:=myrec;
		END;
	FUNCTION pATypeid611_AT611:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ireg  ilcg.pattern@3c86e9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid611_AT611:=myrec;
		END;
	FUNCTION pATypeidType610_ATT610:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid611_AT611;
		 pATypeidType610_ATT610:=myrec;
		END;
	FUNCTION pATypeid613_AT613:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ wreg  ilcg.pattern@18cbf7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid613_AT613:=myrec;
		END;
	FUNCTION pATypeidType612_ATT612:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid613_AT613;
		 pATypeidType612_ATT612:=myrec;
		END;
	FUNCTION pATypeid615_AT615:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ireg  ilcg.pattern@3c86e9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid615_AT615:=myrec;
		END;
	FUNCTION pATypeidType614_ATT614:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid615_AT615;
		 pATypeidType614_ATT614:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl607_AAP607:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 68;
		myrec^.last:= 71;
		 pAAlternativesPatterndecl607_AAP607:=myrec;
		END;
	FUNCTION pATypeid620_AT620:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bureg  ilcg.pattern@40627c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid620_AT620:=myrec;
		END;
	FUNCTION pATypeidType619_ATT619:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid620_AT620;
		 pATypeidType619_ATT619:=myrec;
		END;
	FUNCTION pATypeid622_AT622:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ureg  ilcg.pattern@56182f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid622_AT622:=myrec;
		END;
	FUNCTION pATypeidType621_ATT621:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid622_AT622;
		 pATypeidType621_ATT621:=myrec;
		END;
	FUNCTION pATypeid624_AT624:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ wreg  ilcg.pattern@18cbf7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid624_AT624:=myrec;
		END;
	FUNCTION pATypeidType623_ATT623:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid624_AT624;
		 pATypeidType623_ATT623:=myrec;
		END;
	FUNCTION pATypeid626_AT626:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ureg  ilcg.pattern@56182f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid626_AT626:=myrec;
		END;
	FUNCTION pATypeidType625_ATT625:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid626_AT626;
		 pATypeidType625_ATT625:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl618_AAP618:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 72;
		myrec^.last:= 75;
		 pAAlternativesPatterndecl618_AAP618:=myrec;
		END;
	FUNCTION pATypeid631_AT631:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ EAX  ilcg.RegDetails@156254}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid631_AT631:=myrec;
		END;
	FUNCTION pATypeidType630_ATT630:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid631_AT631;
		 pATypeidType630_ATT630:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl629_AAP629:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 76;
		myrec^.last:= 76;
		 pAAlternativesPatterndecl629_AAP629:=myrec;
		END;
	FUNCTION pATypeid636_AT636:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ EDX  ilcg.RegDetails@2632be}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid636_AT636:=myrec;
		END;
	FUNCTION pATypeidType635_ATT635:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid636_AT636;
		 pATypeidType635_ATT635:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl634_AAP634:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 77;
		myrec^.last:= 77;
		 pAAlternativesPatterndecl634_AAP634:=myrec;
		END;
	FUNCTION pATypeid641_AT641:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ AX  ilcg.RegDetails@4ce427}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid641_AT641:=myrec;
		END;
	FUNCTION pATypeidType640_ATT640:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid641_AT641;
		 pATypeidType640_ATT640:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl639_AAP639:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 78;
		myrec^.last:= 78;
		 pAAlternativesPatterndecl639_AAP639:=myrec;
		END;
	FUNCTION pATypeid646_AT646:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ EBX  ilcg.RegDetails@5291cd}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid646_AT646:=myrec;
		END;
	FUNCTION pATypeidType645_ATT645:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid646_AT646;
		 pATypeidType645_ATT645:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl644_AAP644:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 79;
		myrec^.last:= 79;
		 pAAlternativesPatterndecl644_AAP644:=myrec;
		END;
	FUNCTION pATypeid651_AT651:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BL  ilcg.RegDetails@3c9673}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid651_AT651:=myrec;
		END;
	FUNCTION pATypeidType650_ATT650:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid651_AT651;
		 pATypeidType650_ATT650:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl649_AAP649:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 80;
		myrec^.last:= 80;
		 pAAlternativesPatterndecl649_AAP649:=myrec;
		END;
	FUNCTION pATypeid656_AT656:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ECX  ilcg.RegDetails@6d8eb5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid656_AT656:=myrec;
		END;
	FUNCTION pATypeidType655_ATT655:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid656_AT656;
		 pATypeidType655_ATT655:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl654_AAP654:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 81;
		myrec^.last:= 81;
		 pAAlternativesPatterndecl654_AAP654:=myrec;
		END;
	FUNCTION pATypeid661_AT661:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ CL  ilcg.RegDetails@730b8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid661_AT661:=myrec;
		END;
	FUNCTION pATypeidType660_ATT660:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid661_AT661;
		 pATypeidType660_ATT660:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl659_AAP659:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 82;
		myrec^.last:= 82;
		 pAAlternativesPatterndecl659_AAP659:=myrec;
		END;
	FUNCTION pATypeid666_AT666:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ucx  ilcg.RegDetails@13c366}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid666_AT666:=myrec;
		END;
	FUNCTION pATypeidType665_ATT665:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid666_AT666;
		 pATypeidType665_ATT665:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl664_AAP664:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 83;
		myrec^.last:= 83;
		 pAAlternativesPatterndecl664_AAP664:=myrec;
		END;
	FUNCTION pATypeid671_AT671:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ECX  ilcg.RegDetails@6d8eb5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid671_AT671:=myrec;
		END;
	FUNCTION pATypeidType670_ATT670:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid671_AT671;
		 pATypeidType670_ATT670:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl669_AAP669:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 84;
		myrec^.last:= 84;
		 pAAlternativesPatterndecl669_AAP669:=myrec;
		END;
	FUNCTION pATypeid676_AT676:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ESI  ilcg.RegDetails@1a1411}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid676_AT676:=myrec;
		END;
	FUNCTION pATypeidType675_ATT675:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid676_AT676;
		 pATypeidType675_ATT675:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl674_AAP674:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 85;
		myrec^.last:= 85;
		 pAAlternativesPatterndecl674_AAP674:=myrec;
		END;
	FUNCTION pATypeid681_AT681:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ EDI  ilcg.RegDetails@7796d0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid681_AT681:=myrec;
		END;
	FUNCTION pATypeidType680_ATT680:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid681_AT681;
		 pATypeidType680_ATT680:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl679_AAP679:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 86;
		myrec^.last:= 86;
		 pAAlternativesPatterndecl679_AAP679:=myrec;
		END;
	FUNCTION pATypeid686_AT686:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ECX  ilcg.RegDetails@6d8eb5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid686_AT686:=myrec;
		END;
	FUNCTION pATypeidType685_ATT685:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid686_AT686;
		 pATypeidType685_ATT685:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl684_AAP684:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 87;
		myrec^.last:= 87;
		 pAAlternativesPatterndecl684_AAP684:=myrec;
		END;
	FUNCTION pATypeid691_AT691:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ecxbacc  ilcg.pattern@184f7d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid691_AT691:=myrec;
		END;
	FUNCTION pATypeidType690_ATT690:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid691_AT691;
		 pATypeidType690_ATT690:=myrec;
		END;
	FUNCTION pATypeid693_AT693:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ecxacc  ilcg.pattern@54e49a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid693_AT693:=myrec;
		END;
	FUNCTION pATypeidType692_ATT692:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid693_AT693;
		 pATypeidType692_ATT692:=myrec;
		END;
	FUNCTION pATypeid695_AT695:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ecxuacc  ilcg.pattern@86988}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid695_AT695:=myrec;
		END;
	FUNCTION pATypeidType694_ATT694:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid695_AT695;
		 pATypeidType694_ATT694:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl689_AAP689:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 88;
		myrec^.last:= 90;
		 pAAlternativesPatterndecl689_AAP689:=myrec;
		END;
	FUNCTION pAAndOperator703_AAO703:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAAndOperator703_AAO703:=nil;
		 pAAndOperator703_AAO703:=myrec;
		END;
	FUNCTION pAOrOperator707_AOO707:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOrOperator707_AOO707:=nil;
		 pAOrOperator707_AOO707:=myrec;
		END;
	FUNCTION pAXorOperator711_AXO711:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAXorOperator711_AXO711:=nil;
		 pAXorOperator711_AXO711:=myrec;
		END;
	FUNCTION pALtOperator727_ALO727:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pALtOperator727_ALO727:=nil;
		 pALtOperator727_ALO727:=myrec;
		END;
	FUNCTION pALtOperator731_ALO731:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pALtOperator731_ALO731:=nil;
		 pALtOperator731_ALO731:=myrec;
		END;
	FUNCTION pAGtOperator735_AGO735:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAGtOperator735_AGO735:=nil;
		 pAGtOperator735_AGO735:=myrec;
		END;
	FUNCTION pAGtOperator739_AGO739:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAGtOperator739_AGO739:=nil;
		 pAGtOperator739_AGO739:=myrec;
		END;
	FUNCTION pAEqOperator743_AEO743:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAEqOperator743_AEO743:=nil;
		 pAEqOperator743_AEO743:=myrec;
		END;
	FUNCTION pALeOperator747_ALO747:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pALeOperator747_ALO747:=nil;
		 pALeOperator747_ALO747:=myrec;
		END;
	FUNCTION pALeOperator751_ALO751:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pALeOperator751_ALO751:=nil;
		 pALeOperator751_ALO751:=myrec;
		END;
	FUNCTION pAGeOperator755_AGO755:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAGeOperator755_AGO755:=nil;
		 pAGeOperator755_AGO755:=myrec;
		END;
	FUNCTION pAGeOperator759_AGO759:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAGeOperator759_AGO759:=nil;
		 pAGeOperator759_AGO759:=myrec;
		END;
	FUNCTION pANeOperator763_ANO763:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANeOperator763_ANO763:=nil;
		 pANeOperator763_ANO763:=myrec;
		END;
	FUNCTION pAShlOperator767_ASO767:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAShlOperator767_ASO767:=nil;
		 pAShlOperator767_ASO767:=myrec;
		END;
	FUNCTION pAShrOperator771_ASO771:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAShrOperator771_ASO771:=nil;
		 pAShrOperator771_ASO771:=myrec;
		END;
	FUNCTION pATypeid776_AT776:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ne  ilcg.Operation@d41f2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid776_AT776:=myrec;
		END;
	FUNCTION pATypeidType775_ATT775:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid776_AT776;
		 pATypeidType775_ATT775:=myrec;
		END;
	FUNCTION pATypeid778_AT778:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ge  ilcg.Operation@41b736}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid778_AT778:=myrec;
		END;
	FUNCTION pATypeidType777_ATT777:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid778_AT778;
		 pATypeidType777_ATT777:=myrec;
		END;
	FUNCTION pATypeid780_AT780:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ le  ilcg.Operation@216b59}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid780_AT780:=myrec;
		END;
	FUNCTION pATypeidType779_ATT779:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid780_AT780;
		 pATypeidType779_ATT779:=myrec;
		END;
	FUNCTION pATypeid782_AT782:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ eq  ilcg.Operation@583cf4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid782_AT782:=myrec;
		END;
	FUNCTION pATypeidType781_ATT781:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid782_AT782;
		 pATypeidType781_ATT781:=myrec;
		END;
	FUNCTION pATypeid784_AT784:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ gt  ilcg.Operation@6965e9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid784_AT784:=myrec;
		END;
	FUNCTION pATypeidType783_ATT783:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid784_AT784;
		 pATypeidType783_ATT783:=myrec;
		END;
	FUNCTION pATypeid786_AT786:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ lt  ilcg.Operation@a1f38}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid786_AT786:=myrec;
		END;
	FUNCTION pATypeidType785_ATT785:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid786_AT786;
		 pATypeidType785_ATT785:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl774_AAP774:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 91;
		myrec^.last:= 96;
		 pAAlternativesPatterndecl774_AAP774:=myrec;
		END;
	FUNCTION pATypeid791_AT791:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ eq  ilcg.Operation@583cf4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid791_AT791:=myrec;
		END;
	FUNCTION pATypeidType790_ATT790:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid791_AT791;
		 pATypeidType790_ATT790:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl789_AAP789:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 97;
		myrec^.last:= 97;
		 pAAlternativesPatterndecl789_AAP789:=myrec;
		END;
	FUNCTION pATypeid796_AT796:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ne  ilcg.Operation@d41f2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid796_AT796:=myrec;
		END;
	FUNCTION pATypeidType795_ATT795:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid796_AT796;
		 pATypeidType795_ATT795:=myrec;
		END;
	FUNCTION pATypeid798_AT798:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ae  ilcg.Operation@68afdd}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid798_AT798:=myrec;
		END;
	FUNCTION pATypeidType797_ATT797:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid798_AT798;
		 pATypeidType797_ATT797:=myrec;
		END;
	FUNCTION pATypeid800_AT800:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ be  ilcg.Operation@11cf0b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid800_AT800:=myrec;
		END;
	FUNCTION pATypeidType799_ATT799:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid800_AT800;
		 pATypeidType799_ATT799:=myrec;
		END;
	FUNCTION pATypeid802_AT802:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ eq  ilcg.Operation@583cf4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid802_AT802:=myrec;
		END;
	FUNCTION pATypeidType801_ATT801:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid802_AT802;
		 pATypeidType801_ATT801:=myrec;
		END;
	FUNCTION pATypeid804_AT804:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ab  ilcg.Operation@3b8694}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid804_AT804:=myrec;
		END;
	FUNCTION pATypeidType803_ATT803:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid804_AT804;
		 pATypeidType803_ATT803:=myrec;
		END;
	FUNCTION pATypeid806_AT806:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bel  ilcg.Operation@fbbbc}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid806_AT806:=myrec;
		END;
	FUNCTION pATypeidType805_ATT805:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid806_AT806;
		 pATypeidType805_ATT805:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl794_AAP794:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 98;
		myrec^.last:= 103;
		 pAAlternativesPatterndecl794_AAP794:=myrec;
		END;
	FUNCTION pATypeid811_AT811:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ add  ilcg.Operation@7546f8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid811_AT811:=myrec;
		END;
	FUNCTION pATypeidType810_ATT810:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid811_AT811;
		 pATypeidType810_ATT810:=myrec;
		END;
	FUNCTION pATypeid813_AT813:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ sub  ilcg.Operation@2a559d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid813_AT813:=myrec;
		END;
	FUNCTION pATypeidType812_ATT812:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid813_AT813;
		 pATypeidType812_ATT812:=myrec;
		END;
	FUNCTION pATypeid815_AT815:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ imul  ilcg.Operation@34faeb}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid815_AT815:=myrec;
		END;
	FUNCTION pATypeidType814_ATT814:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid815_AT815;
		 pATypeidType814_ATT814:=myrec;
		END;
	FUNCTION pATypeid817_AT817:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ and  ilcg.Operation@6e8504}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid817_AT817:=myrec;
		END;
	FUNCTION pATypeidType816_ATT816:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid817_AT817;
		 pATypeidType816_ATT816:=myrec;
		END;
	FUNCTION pATypeid819_AT819:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ or  ilcg.Operation@6dbca8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid819_AT819:=myrec;
		END;
	FUNCTION pATypeidType818_ATT818:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid819_AT819;
		 pATypeidType818_ATT818:=myrec;
		END;
	FUNCTION pATypeid821_AT821:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xor  ilcg.Operation@3f5841}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid821_AT821:=myrec;
		END;
	FUNCTION pATypeidType820_ATT820:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid821_AT821;
		 pATypeidType820_ATT820:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl809_AAP809:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 104;
		myrec^.last:= 109;
		 pAAlternativesPatterndecl809_AAP809:=myrec;
		END;
	FUNCTION pATypeid826_AT826:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ add  ilcg.Operation@7546f8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid826_AT826:=myrec;
		END;
	FUNCTION pATypeidType825_ATT825:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid826_AT826;
		 pATypeidType825_ATT825:=myrec;
		END;
	FUNCTION pATypeid828_AT828:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ sub  ilcg.Operation@2a559d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid828_AT828:=myrec;
		END;
	FUNCTION pATypeidType827_ATT827:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid828_AT828;
		 pATypeidType827_ATT827:=myrec;
		END;
	FUNCTION pATypeid830_AT830:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ and  ilcg.Operation@6e8504}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid830_AT830:=myrec;
		END;
	FUNCTION pATypeidType829_ATT829:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid830_AT830;
		 pATypeidType829_ATT829:=myrec;
		END;
	FUNCTION pATypeid832_AT832:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ or  ilcg.Operation@6dbca8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid832_AT832:=myrec;
		END;
	FUNCTION pATypeidType831_ATT831:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid832_AT832;
		 pATypeidType831_ATT831:=myrec;
		END;
	FUNCTION pATypeid834_AT834:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xor  ilcg.Operation@3f5841}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid834_AT834:=myrec;
		END;
	FUNCTION pATypeidType833_ATT833:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid834_AT834;
		 pATypeidType833_ATT833:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl824_AAP824:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 110;
		myrec^.last:= 114;
		 pAAlternativesPatterndecl824_AAP824:=myrec;
		END;
	FUNCTION pATypeid839_AT839:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ add  ilcg.Operation@7546f8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid839_AT839:=myrec;
		END;
	FUNCTION pATypeidType838_ATT838:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid839_AT839;
		 pATypeidType838_ATT838:=myrec;
		END;
	FUNCTION pATypeid841_AT841:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ imul  ilcg.Operation@34faeb}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid841_AT841:=myrec;
		END;
	FUNCTION pATypeidType840_ATT840:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid841_AT841;
		 pATypeidType840_ATT840:=myrec;
		END;
	FUNCTION pATypeid843_AT843:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ and  ilcg.Operation@6e8504}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid843_AT843:=myrec;
		END;
	FUNCTION pATypeidType842_ATT842:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid843_AT843;
		 pATypeidType842_ATT842:=myrec;
		END;
	FUNCTION pATypeid845_AT845:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ or  ilcg.Operation@6dbca8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid845_AT845:=myrec;
		END;
	FUNCTION pATypeidType844_ATT844:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid845_AT845;
		 pATypeidType844_ATT844:=myrec;
		END;
	FUNCTION pATypeid847_AT847:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ xor  ilcg.Operation@3f5841}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid847_AT847:=myrec;
		END;
	FUNCTION pATypeidType846_ATT846:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid847_AT847;
		 pATypeidType846_ATT846:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl837_AAP837:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 115;
		myrec^.last:= 119;
		 pAAlternativesPatterndecl837_AAP837:=myrec;
		END;
	FUNCTION pATypeid852_AT852:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ shiftleft  ilcg.Operation@3b6255}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid852_AT852:=myrec;
		END;
	FUNCTION pATypeidType851_ATT851:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid852_AT852;
		 pATypeidType851_ATT851:=myrec;
		END;
	FUNCTION pATypeid854_AT854:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ shiftright  ilcg.Operation@58c3ee}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid854_AT854:=myrec;
		END;
	FUNCTION pATypeidType853_ATT853:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid854_AT854;
		 pATypeidType853_ATT853:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl850_AAP850:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 120;
		myrec^.last:= 121;
		 pAAlternativesPatterndecl850_AAP850:=myrec;
		END;
	FUNCTION pAUnsigned861_AU861:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32;
		 pAUnsigned861_AU861:=myrec;
		END;
	FUNCTION pAUnsignedTformat860_AUT860:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUnsigned861_AU861;
		 pAUnsignedTformat860_AUT860:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype859_ATP859:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pATformatPredeclaredtype859_ATP859:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType858_APT858:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pAPredeclaredtypeType858_APT858:=myrec;
		END;
	FUNCTION pAUint8Unsigned865_AU8U865:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned865_AU8U865:=myrec;
		END;
	FUNCTION pAUnsignedTformat864_AUT864:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned865_AU8U865;
		 pAUnsignedTformat864_AUT864:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype863_ATP863:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype863_ATP863:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType862_APT862:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType862_APT862:=myrec;
		END;
	FUNCTION pAUint16Unsigned869_AU16U869:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16;
		 pAUint16Unsigned869_AU16U869:=myrec;
		END;
	FUNCTION pAUnsignedTformat868_AUT868:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint16Unsigned869_AU16U869;
		 pAUnsignedTformat868_AUT868:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype867_ATP867:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pATformatPredeclaredtype867_ATP867:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType866_APT866:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pAPredeclaredtypeType866_APT866:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl857_AAP857:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 122;
		myrec^.last:= 124;
		 pAAlternativesPatterndecl857_AAP857:=myrec;
		END;
	FUNCTION pAInt8Signed876_AI8S876:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed876_AI8S876:=myrec;
		END;
	FUNCTION pASignedTformat875_AST875:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed876_AI8S876;
		 pASignedTformat875_AST875:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype874_ATP874:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype874_ATP874:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType873_APT873:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType873_APT873:=myrec;
		END;
	FUNCTION pAInt16Signed880_AI16S880:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed880_AI16S880:=myrec;
		END;
	FUNCTION pASignedTformat879_AST879:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed880_AI16S880;
		 pASignedTformat879_AST879:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype878_ATP878:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype878_ATP878:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType877_APT877:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pAPredeclaredtypeType877_APT877:=myrec;
		END;
	FUNCTION pASigned884_AS884:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned884_AS884:=myrec;
		END;
	FUNCTION pASignedTformat883_AST883:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned884_AS884;
		 pASignedTformat883_AST883:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype882_ATP882:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype882_ATP882:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType881_APT881:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType881_APT881:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl872_AAP872:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 125;
		myrec^.last:= 127;
		 pAAlternativesPatterndecl872_AAP872:=myrec;
		END;
	FUNCTION pAInt8Signed891_AI8S891:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed891_AI8S891:=myrec;
		END;
	FUNCTION pASignedTformat890_AST890:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed891_AI8S891;
		 pASignedTformat890_AST890:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype889_ATP889:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype889_ATP889:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType888_APT888:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType888_APT888:=myrec;
		END;
	FUNCTION pAInt16Signed895_AI16S895:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed895_AI16S895:=myrec;
		END;
	FUNCTION pASignedTformat894_AST894:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed895_AI16S895;
		 pASignedTformat894_AST894:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype893_ATP893:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype893_ATP893:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType892_APT892:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pAPredeclaredtypeType892_APT892:=myrec;
		END;
	FUNCTION pASigned899_AS899:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned899_AS899:=myrec;
		END;
	FUNCTION pASignedTformat898_AST898:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned899_AS899;
		 pASignedTformat898_AST898:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype897_ATP897:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype897_ATP897:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType896_APT896:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType896_APT896:=myrec;
		END;
	FUNCTION pAUnsigned903_AU903:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32;
		 pAUnsigned903_AU903:=myrec;
		END;
	FUNCTION pAUnsignedTformat902_AUT902:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUnsigned903_AU903;
		 pAUnsignedTformat902_AUT902:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype901_ATP901:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pATformatPredeclaredtype901_ATP901:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType900_APT900:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pAPredeclaredtypeType900_APT900:=myrec;
		END;
	FUNCTION pAUint8Unsigned907_AU8U907:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned907_AU8U907:=myrec;
		END;
	FUNCTION pAUnsignedTformat906_AUT906:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned907_AU8U907;
		 pAUnsignedTformat906_AUT906:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype905_ATP905:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype905_ATP905:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType904_APT904:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType904_APT904:=myrec;
		END;
	FUNCTION pAUint16Unsigned911_AU16U911:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16;
		 pAUint16Unsigned911_AU16U911:=myrec;
		END;
	FUNCTION pAUnsignedTformat910_AUT910:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint16Unsigned911_AU16U911;
		 pAUnsignedTformat910_AUT910:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype909_ATP909:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pATformatPredeclaredtype909_ATP909:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType908_APT908:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pAPredeclaredtypeType908_APT908:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl887_AAP887:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 128;
		myrec^.last:= 133;
		 pAAlternativesPatterndecl887_AAP887:=myrec;
		END;
	FUNCTION pAIeee63Tformat917_AI63T917:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat917_AI63T917:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype916_ATP916:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype916_ATP916:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType915_APT915:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType915_APT915:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl914_AAP914:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 134;
		myrec^.last:= 134;
		 pAAlternativesPatterndecl914_AAP914:=myrec;
		END;
	FUNCTION pAIeee32Tformat923_AI32T923:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat923_AI32T923:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype922_ATP922:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype922_ATP922:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType921_APT921:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType921_APT921:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl920_AAP920:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 135;
		myrec^.last:= 135;
		 pAAlternativesPatterndecl920_AAP920:=myrec;
		END;
	FUNCTION pAIeee63Tformat929_AI63T929:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat929_AI63T929:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype928_ATP928:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype928_ATP928:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType927_APT927:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType927_APT927:=myrec;
		END;
	FUNCTION pATypeid931_AT931:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ float  ilcg.pattern@7f0a34}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid931_AT931:=myrec;
		END;
	FUNCTION pATypeidType930_ATT930:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid931_AT931;
		 pATypeidType930_ATT930:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl926_AAP926:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 136;
		myrec^.last:= 137;
		 pAAlternativesPatterndecl926_AAP926:=myrec;
		END;
	FUNCTION pAUint8Unsigned938_AU8U938:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned938_AU8U938:=myrec;
		END;
	FUNCTION pAUnsignedTformat937_AUT937:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned938_AU8U938;
		 pAUnsignedTformat937_AUT937:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype936_ATP936:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype936_ATP936:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType935_APT935:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType935_APT935:=myrec;
		END;
	FUNCTION pAInt8Signed942_AI8S942:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed942_AI8S942:=myrec;
		END;
	FUNCTION pASignedTformat941_AST941:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed942_AI8S942;
		 pASignedTformat941_AST941:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype940_ATP940:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype940_ATP940:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType939_APT939:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType939_APT939:=myrec;
		END;
	FUNCTION pAOctetFormat945_AOF945:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat945_AOF945:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype944_AFP944:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype944_AFP944:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType943_APT943:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAPredeclaredtypeType943_APT943:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl934_AAP934:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 138;
		myrec^.last:= 140;
		 pAAlternativesPatterndecl934_AAP934:=myrec;
		END;
	FUNCTION pASigned952_AS952:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned952_AS952:=myrec;
		END;
	FUNCTION pASignedTformat951_AST951:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned952_AS952;
		 pASignedTformat951_AST951:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype950_ATP950:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype950_ATP950:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType949_APT949:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType949_APT949:=myrec;
		END;
	FUNCTION pAUnsigned956_AU956:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32;
		 pAUnsigned956_AU956:=myrec;
		END;
	FUNCTION pAUnsignedTformat955_AUT955:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUnsigned956_AU956;
		 pAUnsignedTformat955_AUT955:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype954_ATP954:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pATformatPredeclaredtype954_ATP954:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType953_APT953:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pAPredeclaredtypeType953_APT953:=myrec;
		END;
	FUNCTION pAWordFormat959_AWF959:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword;
		 pAWordFormat959_AWF959:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype958_AFP958:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAFormatPredeclaredtype958_AFP958:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType957_APT957:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAPredeclaredtypeType957_APT957:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl948_AAP948:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 141;
		myrec^.last:= 143;
		 pAAlternativesPatterndecl948_AAP948:=myrec;
		END;
	FUNCTION pAInt16Signed966_AI16S966:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed966_AI16S966:=myrec;
		END;
	FUNCTION pASignedTformat965_AST965:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed966_AI16S966;
		 pASignedTformat965_AST965:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype964_ATP964:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype964_ATP964:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType963_APT963:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pAPredeclaredtypeType963_APT963:=myrec;
		END;
	FUNCTION pAUint16Unsigned970_AU16U970:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16;
		 pAUint16Unsigned970_AU16U970:=myrec;
		END;
	FUNCTION pAUnsignedTformat969_AUT969:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint16Unsigned970_AU16U970;
		 pAUnsignedTformat969_AUT969:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype968_ATP968:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pATformatPredeclaredtype968_ATP968:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType967_APT967:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint16 ;
		 pAPredeclaredtypeType967_APT967:=myrec;
		END;
	FUNCTION pAHalfwordFormat973_AHF973:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fhalfword;
		 pAHalfwordFormat973_AHF973:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype972_AFP972:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fhalfword ;
		 pAFormatPredeclaredtype972_AFP972:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType971_APT971:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fhalfword ;
		 pAPredeclaredtypeType971_APT971:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl962_AAP962:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 144;
		myrec^.last:= 146;
		 pAAlternativesPatterndecl962_AAP962:=myrec;
		END;
	FUNCTION pATypeid978_AT978:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ byte  ilcg.pattern@39491b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid978_AT978:=myrec;
		END;
	FUNCTION pATypeidType977_ATT977:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid978_AT978;
		 pATypeidType977_ATT977:=myrec;
		END;
	FUNCTION pATypeid980_AT980:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ word16  ilcg.pattern@345130}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid980_AT980:=myrec;
		END;
	FUNCTION pATypeidType979_ATT979:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid980_AT980;
		 pATypeidType979_ATT979:=myrec;
		END;
	FUNCTION pATypeid982_AT982:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ word32  ilcg.pattern@3b9829}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid982_AT982:=myrec;
		END;
	FUNCTION pATypeidType981_ATT981:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid982_AT982;
		 pATypeidType981_ATT981:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl976_AAP976:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 147;
		myrec^.last:= 149;
		 pAAlternativesPatterndecl976_AAP976:=myrec;
		END;
	FUNCTION pAOctetFormat988_AOF988:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat988_AOF988:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype987_AFP987:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype987_AFP987:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType986_APT986:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAPredeclaredtypeType986_APT986:=myrec;
		END;
	FUNCTION pAWordFormat991_AWF991:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword;
		 pAWordFormat991_AWF991:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype990_AFP990:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAFormatPredeclaredtype990_AFP990:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType989_APT989:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAPredeclaredtypeType989_APT989:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl985_AAP985:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 150;
		myrec^.last:= 151;
		 pAAlternativesPatterndecl985_AAP985:=myrec;
		END;
	FUNCTION pASigned998_AS998:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned998_AS998:=myrec;
		END;
	FUNCTION pASignedTformat997_AST997:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned998_AS998;
		 pASignedTformat997_AST997:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype996_ATP996:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype996_ATP996:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType995_APT995:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType995_APT995:=myrec;
		END;
	FUNCTION pAUnsigned1002_AU1002:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32;
		 pAUnsigned1002_AU1002:=myrec;
		END;
	FUNCTION pAUnsignedTformat1001_AUT1001:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUnsigned1002_AU1002;
		 pAUnsignedTformat1001_AUT1001:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1000_ATP1000:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pATformatPredeclaredtype1000_ATP1000:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType999_APT999:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pAPredeclaredtypeType999_APT999:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl994_AAP994:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 152;
		myrec^.last:= 153;
		 pAAlternativesPatterndecl994_AAP994:=myrec;
		END;
	FUNCTION pASigned1009_AS1009:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned1009_AS1009:=myrec;
		END;
	FUNCTION pASignedTformat1008_AST1008:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned1009_AS1009;
		 pASignedTformat1008_AST1008:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1007_ATP1007:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype1007_ATP1007:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1006_APT1006:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType1006_APT1006:=myrec;
		END;
	FUNCTION pAInt64Signed1013_AI64S1013:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64;
		 pAInt64Signed1013_AI64S1013:=myrec;
		END;
	FUNCTION pASignedTformat1012_AST1012:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt64Signed1013_AI64S1013;
		 pASignedTformat1012_AST1012:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1011_ATP1011:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64 ;
		 pATformatPredeclaredtype1011_ATP1011:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1010_APT1010:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64 ;
		 pAPredeclaredtypeType1010_APT1010:=myrec;
		END;
	FUNCTION pAInt16Signed1017_AI16S1017:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed1017_AI16S1017:=myrec;
		END;
	FUNCTION pASignedTformat1016_AST1016:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed1017_AI16S1017;
		 pASignedTformat1016_AST1016:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1015_ATP1015:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype1015_ATP1015:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1014_APT1014:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pAPredeclaredtypeType1014_APT1014:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1005_AAP1005:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 154;
		myrec^.last:= 156;
		 pAAlternativesPatterndecl1005_AAP1005:=myrec;
		END;
	FUNCTION pAOptionalsign1026_AO1026:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign1026_AO1026:=nil;
		 pAOptionalsign1026_AO1026:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber1025_AIN1025:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber1025_AIN1025:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs1024_ANR1024:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber1025_AIN1025;
		 pANumberRhs1024_ANR1024:=myrec;
		END;
	FUNCTION pARhsValue1023_ARV1023:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs1024_ANR1024;
		 pARhsValue1023_ARV1023:=myrec;
		END;
	FUNCTION pAValueMeaning1022_AVM1022:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue1023_ARV1023;
		 pAValueMeaning1022_AVM1022:=myrec;
		END;
	FUNCTION pAAssemblypattern1028_AA1028:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'2' );
		pAAssemblypattern1028_AA1028:=list;
		END;
	FUNCTION pAAssemblesto1027_AA1027:pprintlist;
	begin
		pAAssemblesto1027_AA1027:=pAAssemblypattern1028_AA1028;
		END;
	FUNCTION pASideeffects1030_AS1030:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1030_AS1030:=nil;
		 pASideeffects1030_AS1030:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1031_AUP1031:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1031_AUP1031:=nil;
		 pAUnconditionalPrecond1031_AUP1031:=myrec;
		END;
	FUNCTION two_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning1022_AVM1022;
		matchedAssembler:=pAAssemblesto1027_AA1027;
		END;
		two_:=myrec;
	END;
	FUNCTION pAOptionalsign1040_AO1040:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign1040_AO1040:=nil;
		 pAOptionalsign1040_AO1040:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber1039_AIN1039:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber1039_AIN1039:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs1038_ANR1038:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber1039_AIN1039;
		 pANumberRhs1038_ANR1038:=myrec;
		END;
	FUNCTION pARhsValue1037_ARV1037:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs1038_ANR1038;
		 pARhsValue1037_ARV1037:=myrec;
		END;
	FUNCTION pAValueMeaning1036_AVM1036:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue1037_ARV1037;
		 pAValueMeaning1036_AVM1036:=myrec;
		END;
	FUNCTION pAAssemblypattern1042_AA1042:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'4' );
		pAAssemblypattern1042_AA1042:=list;
		END;
	FUNCTION pAAssemblesto1041_AA1041:pprintlist;
	begin
		pAAssemblesto1041_AA1041:=pAAssemblypattern1042_AA1042;
		END;
	FUNCTION pASideeffects1044_AS1044:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1044_AS1044:=nil;
		 pASideeffects1044_AS1044:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1045_AUP1045:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1045_AUP1045:=nil;
		 pAUnconditionalPrecond1045_AUP1045:=myrec;
		END;
	FUNCTION four_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning1036_AVM1036;
		matchedAssembler:=pAAssemblesto1041_AA1041;
		END;
		four_:=myrec;
	END;
	FUNCTION pAOptionalsign1054_AO1054:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign1054_AO1054:=nil;
		 pAOptionalsign1054_AO1054:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber1053_AIN1053:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber1053_AIN1053:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs1052_ANR1052:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber1053_AIN1053;
		 pANumberRhs1052_ANR1052:=myrec;
		END;
	FUNCTION pARhsValue1051_ARV1051:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs1052_ANR1052;
		 pARhsValue1051_ARV1051:=myrec;
		END;
	FUNCTION pAValueMeaning1050_AVM1050:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue1051_ARV1051;
		 pAValueMeaning1050_AVM1050:=myrec;
		END;
	FUNCTION pAAssemblypattern1056_AA1056:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'8' );
		pAAssemblypattern1056_AA1056:=list;
		END;
	FUNCTION pAAssemblesto1055_AA1055:pprintlist;
	begin
		pAAssemblesto1055_AA1055:=pAAssemblypattern1056_AA1056;
		END;
	FUNCTION pASideeffects1058_AS1058:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1058_AS1058:=nil;
		 pASideeffects1058_AS1058:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1059_AUP1059:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1059_AUP1059:=nil;
		 pAUnconditionalPrecond1059_AUP1059:=myrec;
		END;
	FUNCTION eight_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning1050_AVM1050;
		matchedAssembler:=pAAssemblesto1055_AA1055;
		END;
		eight_:=myrec;
	END;
	FUNCTION pATypeid1064_AT1064:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ two  ilcg.pattern@3e1d25}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1064_AT1064:=myrec;
		END;
	FUNCTION pATypeidType1063_ATT1063:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1064_AT1064;
		 pATypeidType1063_ATT1063:=myrec;
		END;
	FUNCTION pATypeid1066_AT1066:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ four  ilcg.pattern@7753a8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1066_AT1066:=myrec;
		END;
	FUNCTION pATypeidType1065_ATT1065:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1066_AT1066;
		 pATypeidType1065_ATT1065:=myrec;
		END;
	FUNCTION pATypeid1068_AT1068:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ eight  ilcg.pattern@34d75f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1068_AT1068:=myrec;
		END;
	FUNCTION pATypeidType1067_ATT1067:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1068_AT1068;
		 pATypeidType1067_ATT1067:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1062_AAP1062:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 157;
		myrec^.last:= 159;
		 pAAlternativesPatterndecl1062_AAP1062:=myrec;
		END;
	FUNCTION pAIdLoc1075_AIL1075:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1075_AIL1075:=myrec;
		END;
	FUNCTION pALocValue1074_ALV1074:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1075_AIL1075;
		 pALocValue1074_ALV1074:=myrec;
		END;
	FUNCTION pAValueMeaning1073_AVM1073:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pALocValue1074_ALV1074;
		 pAValueMeaning1073_AVM1073:=myrec;
		END;
	FUNCTION pAAssemblypattern1077_AA1077:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pAAssemblypattern1077_AA1077:=list;
		END;
	FUNCTION pAAssemblesto1076_AA1076:pprintlist;
	begin
		pAAssemblesto1076_AA1076:=pAAssemblypattern1077_AA1077;
		END;
	FUNCTION pASideeffects1079_AS1079:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1079_AS1079:=nil;
		 pASideeffects1079_AS1079:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1080_AUP1080:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1080_AUP1080:=nil;
		 pAUnconditionalPrecond1080_AUP1080:=myrec;
		END;
	FUNCTION labelf_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patlabel;
		paramcount:=2;
		meaning:=pAValueMeaning1073_AVM1073;
		matchedAssembler:=pAAssemblesto1076_AA1076;
		END;
		labelf_:=myrec;
	END;
	FUNCTION pATypeid1084_AT1084:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ signed  ilcg.pattern@c6406}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1084_AT1084:=myrec;
		END;
	FUNCTION pAConstRhs1087_ACR1087:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(0);;
		 pAConstRhs1087_ACR1087:=myrec;
		END;
	FUNCTION pARhsValue1086_ARV1086:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs1087_ACR1087;
		 pARhsValue1086_ARV1086:=myrec;
		END;
	FUNCTION pAValueMeaning1085_AVM1085:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue1086_ARV1086;
		 pAValueMeaning1085_AVM1085:=myrec;
		END;
	FUNCTION pAAssemblypattern1089_AA1089:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pAAssemblypattern1089_AA1089:=list;
		END;
	FUNCTION pAAssemblesto1088_AA1088:pprintlist;
	begin
		pAAssemblesto1088_AA1088:=pAAssemblypattern1089_AA1089;
		END;
	FUNCTION pASideeffects1091_AS1091:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1091_AS1091:=nil;
		 pASideeffects1091_AS1091:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1092_AUP1092:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1092_AUP1092:=nil;
		 pAUnconditionalPrecond1092_AUP1092:=myrec;
		END;
	FUNCTION sconst_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patsigned_;
		paramcount:=2;
		meaning:=pAValueMeaning1085_AVM1085;
		matchedAssembler:=pAAssemblesto1088_AA1088;
		END;
		sconst_:=myrec;
	END;
	FUNCTION pATypeid1097_AT1097:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ sconst  ilcg.pattern@49249e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1097_AT1097:=myrec;
		END;
	FUNCTION pATypeidType1096_ATT1096:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1097_AT1097;
		 pATypeidType1096_ATT1096:=myrec;
		END;
	FUNCTION pATypeid1099_AT1099:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ labelf  ilcg.pattern@7a906e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1099_AT1099:=myrec;
		END;
	FUNCTION pATypeidType1098_ATT1098:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1099_AT1099;
		 pATypeidType1098_ATT1098:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1095_AAP1095:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 160;
		myrec^.last:= 161;
		 pAAlternativesPatterndecl1095_AAP1095:=myrec;
		END;
	FUNCTION pATypeid1103_AT1103:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ lconstf  ilcg.pattern@3c0eba}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1103_AT1103:=myrec;
		END;
	FUNCTION pATypeid1105_AT1105:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ lconstf  ilcg.pattern@3c0eba}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1105_AT1105:=myrec;
		END;
	FUNCTION pAPlusDyadic1108_APD1108:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic1108_APD1108:=myrec;
		END;
	FUNCTION pAIdLoc1110_AIL1110:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1110_AIL1110:=myrec;
		END;
	FUNCTION pALocValue1109_ALV1109:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1110_AIL1110;
		 pALocValue1109_ALV1109:=myrec;
		END;
	FUNCTION pAConstRhs1112_ACR1112:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(1);;
		 pAConstRhs1112_ACR1112:=myrec;
		END;
	FUNCTION pARhsValue1111_ARV1111:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs1112_ACR1112;
		 pARhsValue1111_ARV1111:=myrec;
		END;
	FUNCTION pADyadicValue1107_ADV1107:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue1109_ALV1109;
		myrec^.arg2:=pARhsValue1111_ARV1111;
		myrec^.fn:=pAPlusDyadic1108_APD1108;
		 pADyadicValue1107_ADV1107:=myrec;
		END;
	FUNCTION pAValueMeaning1106_AVM1106:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue1107_ADV1107;
		 pAValueMeaning1106_AVM1106:=myrec;
		END;
	FUNCTION pAAssemblypattern1114_AA1114:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'+' );
		pappendp(list,1);
		pAAssemblypattern1114_AA1114:=list;
		END;
	FUNCTION pAAssemblesto1113_AA1113:pprintlist;
	begin
		pAAssemblesto1113_AA1113:=pAAssemblypattern1114_AA1114;
		END;
	FUNCTION pASideeffects1118_AS1118:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1118_AS1118:=nil;
		 pASideeffects1118_AS1118:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1119_AUP1119:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1119_AUP1119:=nil;
		 pAUnconditionalPrecond1119_AUP1119:=myrec;
		END;
	FUNCTION labelconstf_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patlconstf_;
		params^[1]:=patlconstf_;
		paramcount:=3;
		meaning:=pAValueMeaning1106_AVM1106;
		matchedAssembler:=pAAssemblesto1113_AA1113;
		END;
		labelconstf_:=myrec;
	END;
	FUNCTION pATypeid1123_AT1123:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ signed  ilcg.pattern@c6406}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1123_AT1123:=myrec;
		END;
	FUNCTION pAConstRhs1126_ACR1126:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(0);;
		 pAConstRhs1126_ACR1126:=myrec;
		END;
	FUNCTION pARhsValue1125_ARV1125:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs1126_ACR1126;
		 pARhsValue1125_ARV1125:=myrec;
		END;
	FUNCTION pAValueMeaning1124_AVM1124:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue1125_ARV1125;
		 pAValueMeaning1124_AVM1124:=myrec;
		END;
	FUNCTION pAAssemblypattern1128_AA1128:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pAAssemblypattern1128_AA1128:=list;
		END;
	FUNCTION pAAssemblesto1127_AA1127:pprintlist;
	begin
		pAAssemblesto1127_AA1127:=pAAssemblypattern1128_AA1128;
		END;
	FUNCTION pASideeffects1130_AS1130:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1130_AS1130:=nil;
		 pASideeffects1130_AS1130:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1131_AUP1131:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1131_AUP1131:=nil;
		 pAUnconditionalPrecond1131_AUP1131:=myrec;
		END;
	FUNCTION constf_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patsigned_;
		paramcount:=2;
		meaning:=pAValueMeaning1124_AVM1124;
		matchedAssembler:=pAAssemblesto1127_AA1127;
		END;
		constf_:=myrec;
	END;
	FUNCTION pATypeid1136_AT1136:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ constf  ilcg.pattern@18abfe}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1136_AT1136:=myrec;
		END;
	FUNCTION pATypeidType1135_ATT1135:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1136_AT1136;
		 pATypeidType1135_ATT1135:=myrec;
		END;
	FUNCTION pATypeid1138_AT1138:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ labelf  ilcg.pattern@7a906e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1138_AT1138:=myrec;
		END;
	FUNCTION pATypeidType1137_ATT1137:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1138_AT1138;
		 pATypeidType1137_ATT1137:=myrec;
		END;
	FUNCTION pATypeid1140_AT1140:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ labelconstf  ilcg.pattern@5713fe}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1140_AT1140:=myrec;
		END;
	FUNCTION pATypeidType1139_ATT1139:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1140_AT1140;
		 pATypeidType1139_ATT1139:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1134_AAP1134:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 162;
		myrec^.last:= 164;
		 pAAlternativesPatterndecl1134_AAP1134:=myrec;
		END;
	FUNCTION pATypeid1144_AT1144:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1144_AT1144:=myrec;
		END;
	FUNCTION pAIdLoc1149_AIL1149:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1149_AIL1149:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1148_AR1148:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1149_AIL1149;
		 pARefval1148_AR1148:=myrec;
		END;
	FUNCTION pADerefRhs1147_ADR1147:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1148_AR1148;
		 pADerefRhs1147_ADR1147:=myrec;
		END;
	FUNCTION pARhsValue1146_ARV1146:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1147_ADR1147;
		 pARhsValue1146_ARV1146:=myrec;
		END;
	FUNCTION pAValueMeaning1145_AVM1145:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue1146_ARV1146;
		 pAValueMeaning1145_AVM1145:=myrec;
		END;
	FUNCTION pAAssemblypattern1151_AA1151:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pAAssemblypattern1151_AA1151:=list;
		END;
	FUNCTION pAAssemblesto1150_AA1150:pprintlist;
	begin
		pAAssemblesto1150_AA1150:=pAAssemblypattern1151_AA1151;
		END;
	FUNCTION pASideeffects1153_AS1153:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1153_AS1153:=nil;
		 pASideeffects1153_AS1153:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1154_AUP1154:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1154_AUP1154:=nil;
		 pAUnconditionalPrecond1154_AUP1154:=myrec;
		END;
	FUNCTION regindirf_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		paramcount:=2;
		meaning:=pAValueMeaning1145_AVM1145;
		matchedAssembler:=pAAssemblesto1150_AA1150;
		END;
		regindirf_:=myrec;
	END;
	FUNCTION pATypeid1158_AT1158:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1158_AT1158:=myrec;
		END;
	FUNCTION pATypeid1160_AT1160:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ scale  ilcg.pattern@1ab00e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1160_AT1160:=myrec;
		END;
	FUNCTION pATimesDyadic1163_ATD1163:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcptimes;
		 pATimesDyadic1163_ATD1163:=myrec;
		END;
	FUNCTION pAIdLoc1167_AIL1167:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1167_AIL1167:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1166_AR1166:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1167_AIL1167;
		 pARefval1166_AR1166:=myrec;
		END;
	FUNCTION pADerefRhs1165_ADR1165:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1166_AR1166;
		 pADerefRhs1165_ADR1165:=myrec;
		END;
	FUNCTION pARhsValue1164_ARV1164:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1165_ADR1165;
		 pARhsValue1164_ARV1164:=myrec;
		END;
	FUNCTION pAIdLoc1169_AIL1169:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc1169_AIL1169:=myrec;
		END;
	FUNCTION pALocValue1168_ALV1168:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1169_AIL1169;
		 pALocValue1168_ALV1168:=myrec;
		END;
	FUNCTION pADyadicValue1162_ADV1162:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue1164_ARV1164;
		myrec^.arg2:=pALocValue1168_ALV1168;
		myrec^.fn:=pATimesDyadic1163_ATD1163;
		 pADyadicValue1162_ADV1162:=myrec;
		END;
	FUNCTION pAValueMeaning1161_AVM1161:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue1162_ADV1162;
		 pAValueMeaning1161_AVM1161:=myrec;
		END;
	FUNCTION pAAssemblypattern1171_AA1171:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'*' );
		pappendp(list,1);
		pAAssemblypattern1171_AA1171:=list;
		END;
	FUNCTION pAAssemblesto1170_AA1170:pprintlist;
	begin
		pAAssemblesto1170_AA1170:=pAAssemblypattern1171_AA1171;
		END;
	FUNCTION pASideeffects1175_AS1175:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1175_AS1175:=nil;
		 pASideeffects1175_AS1175:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1176_AUP1176:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1176_AUP1176:=nil;
		 pAUnconditionalPrecond1176_AUP1176:=myrec;
		END;
	FUNCTION simplescaled_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		params^[1]:=patscale_;
		paramcount:=3;
		meaning:=pAValueMeaning1161_AVM1161;
		matchedAssembler:=pAAssemblesto1170_AA1170;
		END;
		simplescaled_:=myrec;
	END;
	FUNCTION pATypeid1180_AT1180:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1180_AT1180:=myrec;
		END;
	FUNCTION pATypeid1182_AT1182:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ scale  ilcg.pattern@1ab00e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1182_AT1182:=myrec;
		END;
	FUNCTION pATypeid1184_AT1184:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ offset  ilcg.pattern@331fd9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1184_AT1184:=myrec;
		END;
	FUNCTION pATimesDyadic1187_ATD1187:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcptimes;
		 pATimesDyadic1187_ATD1187:=myrec;
		END;
	FUNCTION pAMinusDyadic1189_AMD1189:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpminus;
		 pAMinusDyadic1189_AMD1189:=myrec;
		END;
	FUNCTION pAIdLoc1193_AIL1193:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1193_AIL1193:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1192_AR1192:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1193_AIL1193;
		 pARefval1192_AR1192:=myrec;
		END;
	FUNCTION pADerefRhs1191_ADR1191:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1192_AR1192;
		 pADerefRhs1191_ADR1191:=myrec;
		END;
	FUNCTION pARhsValue1190_ARV1190:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1191_ADR1191;
		 pARhsValue1190_ARV1190:=myrec;
		END;
	FUNCTION pAIdLoc1195_AIL1195:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc1195_AIL1195:=myrec;
		END;
	FUNCTION pALocValue1194_ALV1194:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1195_AIL1195;
		 pALocValue1194_ALV1194:=myrec;
		END;
	FUNCTION pADyadicValue1188_ADV1188:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue1190_ARV1190;
		myrec^.arg2:=pALocValue1194_ALV1194;
		myrec^.fn:=pAMinusDyadic1189_AMD1189;
		 pADyadicValue1188_ADV1188:=myrec;
		END;
	FUNCTION pAIdLoc1197_AIL1197:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc1197_AIL1197:=myrec;
		END;
	FUNCTION pALocValue1196_ALV1196:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1197_AIL1197;
		 pALocValue1196_ALV1196:=myrec;
		END;
	FUNCTION pADyadicValue1186_ADV1186:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pADyadicValue1188_ADV1188;
		myrec^.arg2:=pALocValue1196_ALV1196;
		myrec^.fn:=pATimesDyadic1187_ATD1187;
		 pADyadicValue1186_ADV1186:=myrec;
		END;
	FUNCTION pAValueMeaning1185_AVM1185:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue1186_ADV1186;
		 pAValueMeaning1185_AVM1185:=myrec;
		END;
	FUNCTION pAAssemblypattern1199_AA1199:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'*' );
		pappendp(list,1);
		pappends(list,'-(' );
		pappendp(list,1);
		pappends(list,'*' );
		pappendp(list,2);
		pappends(list,')' );
		pAAssemblypattern1199_AA1199:=list;
		END;
	FUNCTION pAAssemblesto1198_AA1198:pprintlist;
	begin
		pAAssemblesto1198_AA1198:=pAAssemblypattern1199_AA1199;
		END;
	FUNCTION pASideeffects1208_AS1208:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1208_AS1208:=nil;
		 pASideeffects1208_AS1208:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1209_AUP1209:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1209_AUP1209:=nil;
		 pAUnconditionalPrecond1209_AUP1209:=myrec;
		END;
	FUNCTION negcompscaled_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		params^[1]:=patscale_;
		params^[2]:=patoffset_;
		paramcount:=4;
		meaning:=pAValueMeaning1185_AVM1185;
		matchedAssembler:=pAAssemblesto1198_AA1198;
		END;
		negcompscaled_:=myrec;
	END;
	FUNCTION pATypeid1213_AT1213:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1213_AT1213:=myrec;
		END;
	FUNCTION pATypeid1215_AT1215:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ scale  ilcg.pattern@1ab00e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1215_AT1215:=myrec;
		END;
	FUNCTION pATypeid1217_AT1217:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ offset  ilcg.pattern@331fd9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1217_AT1217:=myrec;
		END;
	FUNCTION pATimesDyadic1220_ATD1220:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcptimes;
		 pATimesDyadic1220_ATD1220:=myrec;
		END;
	FUNCTION pAPlusDyadic1222_APD1222:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic1222_APD1222:=myrec;
		END;
	FUNCTION pAIdLoc1226_AIL1226:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1226_AIL1226:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1225_AR1225:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1226_AIL1226;
		 pARefval1225_AR1225:=myrec;
		END;
	FUNCTION pADerefRhs1224_ADR1224:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1225_AR1225;
		 pADerefRhs1224_ADR1224:=myrec;
		END;
	FUNCTION pARhsValue1223_ARV1223:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1224_ADR1224;
		 pARhsValue1223_ARV1223:=myrec;
		END;
	FUNCTION pAIdLoc1228_AIL1228:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc1228_AIL1228:=myrec;
		END;
	FUNCTION pALocValue1227_ALV1227:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1228_AIL1228;
		 pALocValue1227_ALV1227:=myrec;
		END;
	FUNCTION pADyadicValue1221_ADV1221:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue1223_ARV1223;
		myrec^.arg2:=pALocValue1227_ALV1227;
		myrec^.fn:=pAPlusDyadic1222_APD1222;
		 pADyadicValue1221_ADV1221:=myrec;
		END;
	FUNCTION pAIdLoc1230_AIL1230:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc1230_AIL1230:=myrec;
		END;
	FUNCTION pALocValue1229_ALV1229:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1230_AIL1230;
		 pALocValue1229_ALV1229:=myrec;
		END;
	FUNCTION pADyadicValue1219_ADV1219:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pADyadicValue1221_ADV1221;
		myrec^.arg2:=pALocValue1229_ALV1229;
		myrec^.fn:=pATimesDyadic1220_ATD1220;
		 pADyadicValue1219_ADV1219:=myrec;
		END;
	FUNCTION pAValueMeaning1218_AVM1218:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue1219_ADV1219;
		 pAValueMeaning1218_AVM1218:=myrec;
		END;
	FUNCTION pAAssemblypattern1232_AA1232:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'*' );
		pappendp(list,1);
		pappends(list,'+(' );
		pappendp(list,1);
		pappends(list,'*' );
		pappendp(list,2);
		pappends(list,')' );
		pAAssemblypattern1232_AA1232:=list;
		END;
	FUNCTION pAAssemblesto1231_AA1231:pprintlist;
	begin
		pAAssemblesto1231_AA1231:=pAAssemblypattern1232_AA1232;
		END;
	FUNCTION pASideeffects1241_AS1241:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1241_AS1241:=nil;
		 pASideeffects1241_AS1241:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1242_AUP1242:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1242_AUP1242:=nil;
		 pAUnconditionalPrecond1242_AUP1242:=myrec;
		END;
	FUNCTION compscaled_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		params^[1]:=patscale_;
		params^[2]:=patoffset_;
		paramcount:=4;
		meaning:=pAValueMeaning1218_AVM1218;
		matchedAssembler:=pAAssemblesto1231_AA1231;
		END;
		compscaled_:=myrec;
	END;
	FUNCTION pATypeid1247_AT1247:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ compscaled  ilcg.pattern@55b945}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1247_AT1247:=myrec;
		END;
	FUNCTION pATypeidType1246_ATT1246:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1247_AT1247;
		 pATypeidType1246_ATT1246:=myrec;
		END;
	FUNCTION pATypeid1249_AT1249:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ negcompscaled  ilcg.pattern@2d8ecc}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1249_AT1249:=myrec;
		END;
	FUNCTION pATypeidType1248_ATT1248:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1249_AT1249;
		 pATypeidType1248_ATT1248:=myrec;
		END;
	FUNCTION pATypeid1251_AT1251:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ simplescaled  ilcg.pattern@7574b9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1251_AT1251:=myrec;
		END;
	FUNCTION pATypeidType1250_ATT1250:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1251_AT1251;
		 pATypeidType1250_ATT1250:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1245_AAP1245:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 165;
		myrec^.last:= 167;
		 pAAlternativesPatterndecl1245_AAP1245:=myrec;
		END;
	FUNCTION pATypeid1255_AT1255:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1255_AT1255:=myrec;
		END;
	FUNCTION pATypeid1257_AT1257:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ offset  ilcg.pattern@331fd9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1257_AT1257:=myrec;
		END;
	FUNCTION pAMinusDyadic1260_AMD1260:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpminus;
		 pAMinusDyadic1260_AMD1260:=myrec;
		END;
	FUNCTION pAIdLoc1264_AIL1264:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1264_AIL1264:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1263_AR1263:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1264_AIL1264;
		 pARefval1263_AR1263:=myrec;
		END;
	FUNCTION pADerefRhs1262_ADR1262:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1263_AR1263;
		 pADerefRhs1262_ADR1262:=myrec;
		END;
	FUNCTION pARhsValue1261_ARV1261:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1262_ADR1262;
		 pARhsValue1261_ARV1261:=myrec;
		END;
	FUNCTION pAIdLoc1266_AIL1266:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc1266_AIL1266:=myrec;
		END;
	FUNCTION pALocValue1265_ALV1265:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1266_AIL1266;
		 pALocValue1265_ALV1265:=myrec;
		END;
	FUNCTION pADyadicValue1259_ADV1259:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue1261_ARV1261;
		myrec^.arg2:=pALocValue1265_ALV1265;
		myrec^.fn:=pAMinusDyadic1260_AMD1260;
		 pADyadicValue1259_ADV1259:=myrec;
		END;
	FUNCTION pAValueMeaning1258_AVM1258:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue1259_ADV1259;
		 pAValueMeaning1258_AVM1258:=myrec;
		END;
	FUNCTION pAAssemblypattern1268_AA1268:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'-(' );
		pappendp(list,1);
		pappends(list,')' );
		pAAssemblypattern1268_AA1268:=list;
		END;
	FUNCTION pAAssemblesto1267_AA1267:pprintlist;
	begin
		pAAssemblesto1267_AA1267:=pAAssemblypattern1268_AA1268;
		END;
	FUNCTION pASideeffects1273_AS1273:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1273_AS1273:=nil;
		 pASideeffects1273_AS1273:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1274_AUP1274:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1274_AUP1274:=nil;
		 pAUnconditionalPrecond1274_AUP1274:=myrec;
		END;
	FUNCTION baseminusoffsetf_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patoffset_;
		params^[0]:=patreg_;
		paramcount:=3;
		meaning:=pAValueMeaning1258_AVM1258;
		matchedAssembler:=pAAssemblesto1267_AA1267;
		END;
		baseminusoffsetf_:=myrec;
	END;
	FUNCTION pATypeid1278_AT1278:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1278_AT1278:=myrec;
		END;
	FUNCTION pATypeid1280_AT1280:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ offset  ilcg.pattern@331fd9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1280_AT1280:=myrec;
		END;
	FUNCTION pAPlusDyadic1283_APD1283:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic1283_APD1283:=myrec;
		END;
	FUNCTION pAIdLoc1287_AIL1287:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1287_AIL1287:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1286_AR1286:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1287_AIL1287;
		 pARefval1286_AR1286:=myrec;
		END;
	FUNCTION pADerefRhs1285_ADR1285:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1286_AR1286;
		 pADerefRhs1285_ADR1285:=myrec;
		END;
	FUNCTION pARhsValue1284_ARV1284:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1285_ADR1285;
		 pARhsValue1284_ARV1284:=myrec;
		END;
	FUNCTION pAIdLoc1289_AIL1289:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc1289_AIL1289:=myrec;
		END;
	FUNCTION pALocValue1288_ALV1288:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1289_AIL1289;
		 pALocValue1288_ALV1288:=myrec;
		END;
	FUNCTION pADyadicValue1282_ADV1282:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue1284_ARV1284;
		myrec^.arg2:=pALocValue1288_ALV1288;
		myrec^.fn:=pAPlusDyadic1283_APD1283;
		 pADyadicValue1282_ADV1282:=myrec;
		END;
	FUNCTION pAValueMeaning1281_AVM1281:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue1282_ADV1282;
		 pAValueMeaning1281_AVM1281:=myrec;
		END;
	FUNCTION pAAssemblypattern1291_AA1291:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'+' );
		pappendp(list,1);
		pAAssemblypattern1291_AA1291:=list;
		END;
	FUNCTION pAAssemblesto1290_AA1290:pprintlist;
	begin
		pAAssemblesto1290_AA1290:=pAAssemblypattern1291_AA1291;
		END;
	FUNCTION pASideeffects1295_AS1295:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1295_AS1295:=nil;
		 pASideeffects1295_AS1295:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1296_AUP1296:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1296_AUP1296:=nil;
		 pAUnconditionalPrecond1296_AUP1296:=myrec;
		END;
	FUNCTION baseplusoffsetf_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patoffset_;
		params^[0]:=patreg_;
		paramcount:=3;
		meaning:=pAValueMeaning1281_AVM1281;
		matchedAssembler:=pAAssemblesto1290_AA1290;
		END;
		baseplusoffsetf_:=myrec;
	END;
	FUNCTION pATypeid1300_AT1300:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ scaled  ilcg.pattern@50078e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1300_AT1300:=myrec;
		END;
	FUNCTION pATypeid1302_AT1302:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ offset  ilcg.pattern@331fd9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1302_AT1302:=myrec;
		END;
	FUNCTION pAPlusDyadic1305_APD1305:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic1305_APD1305:=myrec;
		END;
	FUNCTION pAIdLoc1307_AIL1307:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1307_AIL1307:=myrec;
		END;
	FUNCTION pALocValue1306_ALV1306:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1307_AIL1307;
		 pALocValue1306_ALV1306:=myrec;
		END;
	FUNCTION pAIdLoc1309_AIL1309:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc1309_AIL1309:=myrec;
		END;
	FUNCTION pALocValue1308_ALV1308:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1309_AIL1309;
		 pALocValue1308_ALV1308:=myrec;
		END;
	FUNCTION pADyadicValue1304_ADV1304:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue1306_ALV1306;
		myrec^.arg2:=pALocValue1308_ALV1308;
		myrec^.fn:=pAPlusDyadic1305_APD1305;
		 pADyadicValue1304_ADV1304:=myrec;
		END;
	FUNCTION pAValueMeaning1303_AVM1303:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue1304_ADV1304;
		 pAValueMeaning1303_AVM1303:=myrec;
		END;
	FUNCTION pAAssemblypattern1311_AA1311:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'+' );
		pappendp(list,1);
		pAAssemblypattern1311_AA1311:=list;
		END;
	FUNCTION pAAssemblesto1310_AA1310:pprintlist;
	begin
		pAAssemblesto1310_AA1310:=pAAssemblypattern1311_AA1311;
		END;
	FUNCTION pASideeffects1315_AS1315:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1315_AS1315:=nil;
		 pASideeffects1315_AS1315:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1316_AUP1316:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1316_AUP1316:=nil;
		 pAUnconditionalPrecond1316_AUP1316:=myrec;
		END;
	FUNCTION scaledIndexPlusOffsetf_IPO:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patscaled_;
		params^[1]:=patoffset_;
		paramcount:=3;
		meaning:=pAValueMeaning1303_AVM1303;
		matchedAssembler:=pAAssemblesto1310_AA1310;
		END;
		scaledIndexPlusOffsetf_IPO:=myrec;
	END;
	FUNCTION pATypeid1319_AT1319:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1319_AT1319:=myrec;
		END;
	FUNCTION pATypeid1321_AT1321:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ scaled  ilcg.pattern@50078e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1321_AT1321:=myrec;
		END;
	FUNCTION pAPlusDyadic1324_APD1324:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic1324_APD1324:=myrec;
		END;
	FUNCTION pAIdLoc1328_AIL1328:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1328_AIL1328:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1327_AR1327:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1328_AIL1328;
		 pARefval1327_AR1327:=myrec;
		END;
	FUNCTION pADerefRhs1326_ADR1326:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1327_AR1327;
		 pADerefRhs1326_ADR1326:=myrec;
		END;
	FUNCTION pARhsValue1325_ARV1325:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1326_ADR1326;
		 pARhsValue1325_ARV1325:=myrec;
		END;
	FUNCTION pAIdLoc1330_AIL1330:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc1330_AIL1330:=myrec;
		END;
	FUNCTION pALocValue1329_ALV1329:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1330_AIL1330;
		 pALocValue1329_ALV1329:=myrec;
		END;
	FUNCTION pADyadicValue1323_ADV1323:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue1325_ARV1325;
		myrec^.arg2:=pALocValue1329_ALV1329;
		myrec^.fn:=pAPlusDyadic1324_APD1324;
		 pADyadicValue1323_ADV1323:=myrec;
		END;
	FUNCTION pAValueMeaning1322_AVM1322:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue1323_ADV1323;
		 pAValueMeaning1322_AVM1322:=myrec;
		END;
	FUNCTION pAAssemblypattern1332_AA1332:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'+' );
		pappendp(list,1);
		pAAssemblypattern1332_AA1332:=list;
		END;
	FUNCTION pAAssemblesto1331_AA1331:pprintlist;
	begin
		pAAssemblesto1331_AA1331:=pAAssemblypattern1332_AA1332;
		END;
	FUNCTION pASideeffects1336_AS1336:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1336_AS1336:=nil;
		 pASideeffects1336_AS1336:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1337_AUP1337:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1337_AUP1337:=nil;
		 pAUnconditionalPrecond1337_AUP1337:=myrec;
		END;
	FUNCTION basePlusScaledIndexf_PSI:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		params^[1]:=patscaled_;
		paramcount:=3;
		meaning:=pAValueMeaning1322_AVM1322;
		matchedAssembler:=pAAssemblesto1331_AA1331;
		END;
		basePlusScaledIndexf_PSI:=myrec;
	END;
	FUNCTION pATypeid1340_AT1340:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1340_AT1340:=myrec;
		END;
	FUNCTION pATypeid1342_AT1342:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ scaled  ilcg.pattern@50078e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1342_AT1342:=myrec;
		END;
	FUNCTION pATypeid1344_AT1344:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ offset  ilcg.pattern@331fd9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1344_AT1344:=myrec;
		END;
	FUNCTION pATypeid1346_AT1346:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ longint  ilcg.pattern@62974e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1346_AT1346:=myrec;
		END;
	FUNCTION pAPlusDyadic1349_APD1349:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic1349_APD1349:=myrec;
		END;
	FUNCTION pATypeid1353_AT1353:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@205d8d}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid1353_AT1353:=myrec;
		END;
	FUNCTION pATypeidType1352_ATT1352:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1353_AT1353;
		 pATypeidType1352_ATT1352:=myrec;
		END;
	FUNCTION pAPlusDyadic1355_APD1355:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic1355_APD1355:=myrec;
		END;
	FUNCTION pAIdLoc1359_AIL1359:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1359_AIL1359:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1358_AR1358:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1359_AIL1359;
		 pARefval1358_AR1358:=myrec;
		END;
	FUNCTION pADerefRhs1357_ADR1357:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1358_AR1358;
		 pADerefRhs1357_ADR1357:=myrec;
		END;
	FUNCTION pARhsValue1356_ARV1356:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1357_ADR1357;
		 pARhsValue1356_ARV1356:=myrec;
		END;
	FUNCTION pAIdLoc1361_AIL1361:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc1361_AIL1361:=myrec;
		END;
	FUNCTION pALocValue1360_ALV1360:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1361_AIL1361;
		 pALocValue1360_ALV1360:=myrec;
		END;
	FUNCTION pADyadicValue1354_ADV1354:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue1356_ARV1356;
		myrec^.arg2:=pALocValue1360_ALV1360;
		myrec^.fn:=pAPlusDyadic1355_APD1355;
		 pADyadicValue1354_ADV1354:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs1351_ACR1351:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType1352_ATT1352;
		myrec^.arg2:=pADyadicValue1354_ADV1354;
		 pACastRhs1351_ACR1351:=myrec;
		END;
	FUNCTION pARhsValue1350_ARV1350:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs1351_ACR1351;
		 pARhsValue1350_ARV1350:=myrec;
		END;
	FUNCTION pAIdLoc1363_AIL1363:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc1363_AIL1363:=myrec;
		END;
	FUNCTION pALocValue1362_ALV1362:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1363_AIL1363;
		 pALocValue1362_ALV1362:=myrec;
		END;
	FUNCTION pADyadicValue1348_ADV1348:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue1350_ARV1350;
		myrec^.arg2:=pALocValue1362_ALV1362;
		myrec^.fn:=pAPlusDyadic1349_APD1349;
		 pADyadicValue1348_ADV1348:=myrec;
		END;
	FUNCTION pAValueMeaning1347_AVM1347:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue1348_ADV1348;
		 pAValueMeaning1347_AVM1347:=myrec;
		END;
	FUNCTION pAAssemblypattern1365_AA1365:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'+' );
		pappendp(list,1);
		pappends(list,'+' );
		pappendp(list,2);
		pAAssemblypattern1365_AA1365:=list;
		END;
	FUNCTION pAAssemblesto1364_AA1364:pprintlist;
	begin
		pAAssemblesto1364_AA1364:=pAAssemblypattern1365_AA1365;
		END;
	FUNCTION pASideeffects1371_AS1371:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1371_AS1371:=nil;
		 pASideeffects1371_AS1371:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1372_AUP1372:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1372_AUP1372:=nil;
		 pAUnconditionalPrecond1372_AUP1372:=myrec;
		END;
	FUNCTION basePlusScaledIndexPlusOffsetf_PSIPO:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		params^[3]:=patlongint_;
		params^[1]:=patscaled_;
		params^[2]:=patoffset_;
		paramcount:=5;
		meaning:=pAValueMeaning1347_AVM1347;
		matchedAssembler:=pAAssemblesto1364_AA1364;
		END;
		basePlusScaledIndexPlusOffsetf_PSIPO:=myrec;
	END;
	FUNCTION pATypeid1375_AT1375:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1375_AT1375:=myrec;
		END;
	FUNCTION pATypeid1377_AT1377:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1377_AT1377:=myrec;
		END;
	FUNCTION pATypeid1379_AT1379:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ offset  ilcg.pattern@331fd9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1379_AT1379:=myrec;
		END;
	FUNCTION pAPlusDyadic1382_APD1382:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic1382_APD1382:=myrec;
		END;
	FUNCTION pAIdLoc1386_AIL1386:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1386_AIL1386:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1385_AR1385:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1386_AIL1386;
		 pARefval1385_AR1385:=myrec;
		END;
	FUNCTION pADerefRhs1384_ADR1384:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1385_AR1385;
		 pADerefRhs1384_ADR1384:=myrec;
		END;
	FUNCTION pARhsValue1383_ARV1383:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1384_ADR1384;
		 pARhsValue1383_ARV1383:=myrec;
		END;
	FUNCTION pAPlusDyadic1388_APD1388:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic1388_APD1388:=myrec;
		END;
	FUNCTION pAIdLoc1392_AIL1392:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc1392_AIL1392:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1391_AR1391:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1392_AIL1392;
		 pARefval1391_AR1391:=myrec;
		END;
	FUNCTION pADerefRhs1390_ADR1390:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1391_AR1391;
		 pADerefRhs1390_ADR1390:=myrec;
		END;
	FUNCTION pARhsValue1389_ARV1389:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1390_ADR1390;
		 pARhsValue1389_ARV1389:=myrec;
		END;
	FUNCTION pAIdLoc1394_AIL1394:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc1394_AIL1394:=myrec;
		END;
	FUNCTION pALocValue1393_ALV1393:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1394_AIL1394;
		 pALocValue1393_ALV1393:=myrec;
		END;
	FUNCTION pADyadicValue1387_ADV1387:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue1389_ARV1389;
		myrec^.arg2:=pALocValue1393_ALV1393;
		myrec^.fn:=pAPlusDyadic1388_APD1388;
		 pADyadicValue1387_ADV1387:=myrec;
		END;
	FUNCTION pADyadicValue1381_ADV1381:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue1383_ARV1383;
		myrec^.arg2:=pADyadicValue1387_ADV1387;
		myrec^.fn:=pAPlusDyadic1382_APD1382;
		 pADyadicValue1381_ADV1381:=myrec;
		END;
	FUNCTION pAValueMeaning1380_AVM1380:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue1381_ADV1381;
		 pAValueMeaning1380_AVM1380:=myrec;
		END;
	FUNCTION pAAssemblypattern1396_AA1396:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'+' );
		pappendp(list,1);
		pappends(list,' +' );
		pappendp(list,2);
		pAAssemblypattern1396_AA1396:=list;
		END;
	FUNCTION pAAssemblesto1395_AA1395:pprintlist;
	begin
		pAAssemblesto1395_AA1395:=pAAssemblypattern1396_AA1396;
		END;
	FUNCTION pASideeffects1402_AS1402:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1402_AS1402:=nil;
		 pASideeffects1402_AS1402:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1403_AUP1403:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1403_AUP1403:=nil;
		 pAUnconditionalPrecond1403_AUP1403:=myrec;
		END;
	FUNCTION basePlusIndexPlusOffsetf_PIPO:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patreg_;
		params^[0]:=patreg_;
		params^[2]:=patoffset_;
		paramcount:=4;
		meaning:=pAValueMeaning1380_AVM1380;
		matchedAssembler:=pAAssemblesto1395_AA1395;
		END;
		basePlusIndexPlusOffsetf_PIPO:=myrec;
	END;
	FUNCTION pATypeid1406_AT1406:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1406_AT1406:=myrec;
		END;
	FUNCTION pATypeid1408_AT1408:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1408_AT1408:=myrec;
		END;
	FUNCTION pAPlusDyadic1411_APD1411:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic1411_APD1411:=myrec;
		END;
	FUNCTION pAIdLoc1415_AIL1415:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1415_AIL1415:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1414_AR1414:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1415_AIL1415;
		 pARefval1414_AR1414:=myrec;
		END;
	FUNCTION pADerefRhs1413_ADR1413:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1414_AR1414;
		 pADerefRhs1413_ADR1413:=myrec;
		END;
	FUNCTION pARhsValue1412_ARV1412:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1413_ADR1413;
		 pARhsValue1412_ARV1412:=myrec;
		END;
	FUNCTION pAIdLoc1419_AIL1419:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc1419_AIL1419:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1418_AR1418:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1419_AIL1419;
		 pARefval1418_AR1418:=myrec;
		END;
	FUNCTION pADerefRhs1417_ADR1417:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1418_AR1418;
		 pADerefRhs1417_ADR1417:=myrec;
		END;
	FUNCTION pARhsValue1416_ARV1416:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1417_ADR1417;
		 pARhsValue1416_ARV1416:=myrec;
		END;
	FUNCTION pADyadicValue1410_ADV1410:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue1412_ARV1412;
		myrec^.arg2:=pARhsValue1416_ARV1416;
		myrec^.fn:=pAPlusDyadic1411_APD1411;
		 pADyadicValue1410_ADV1410:=myrec;
		END;
	FUNCTION pAValueMeaning1409_AVM1409:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue1410_ADV1410;
		 pAValueMeaning1409_AVM1409:=myrec;
		END;
	FUNCTION pAAssemblypattern1421_AA1421:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'+' );
		pappendp(list,1);
		pAAssemblypattern1421_AA1421:=list;
		END;
	FUNCTION pAAssemblesto1420_AA1420:pprintlist;
	begin
		pAAssemblesto1420_AA1420:=pAAssemblypattern1421_AA1421;
		END;
	FUNCTION pASideeffects1425_AS1425:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1425_AS1425:=nil;
		 pASideeffects1425_AS1425:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1426_AUP1426:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1426_AUP1426:=nil;
		 pAUnconditionalPrecond1426_AUP1426:=myrec;
		END;
	FUNCTION basePlusIndexf_PI:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patreg_;
		params^[0]:=patreg_;
		paramcount:=3;
		meaning:=pAValueMeaning1409_AVM1409;
		matchedAssembler:=pAAssemblesto1420_AA1420;
		END;
		basePlusIndexf_PI:=myrec;
	END;
	FUNCTION pATypeid1430_AT1430:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ unsigned  ilcg.pattern@6aa95b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1430_AT1430:=myrec;
		END;
	FUNCTION pAConstRhs1433_ACR1433:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(0);;
		 pAConstRhs1433_ACR1433:=myrec;
		END;
	FUNCTION pARhsValue1432_ARV1432:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs1433_ACR1433;
		 pARhsValue1432_ARV1432:=myrec;
		END;
	FUNCTION pAValueMeaning1431_AVM1431:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue1432_ARV1432;
		 pAValueMeaning1431_AVM1431:=myrec;
		END;
	FUNCTION pAAssemblypattern1435_AA1435:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pAAssemblypattern1435_AA1435:=list;
		END;
	FUNCTION pAAssemblesto1434_AA1434:pprintlist;
	begin
		pAAssemblesto1434_AA1434:=pAAssemblypattern1435_AA1435;
		END;
	FUNCTION pASideeffects1437_AS1437:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1437_AS1437:=nil;
		 pASideeffects1437_AS1437:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1438_AUP1438:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1438_AUP1438:=nil;
		 pAUnconditionalPrecond1438_AUP1438:=myrec;
		END;
	FUNCTION directf_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patunsigned_;
		paramcount:=2;
		meaning:=pAValueMeaning1431_AVM1431;
		matchedAssembler:=pAAssemblesto1434_AA1434;
		END;
		directf_:=myrec;
	END;
	FUNCTION pATypeid1442_AT1442:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@3e965}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1442_AT1442:=myrec;
		END;
	FUNCTION pAConstRhs1445_ACR1445:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(0);;
		 pAConstRhs1445_ACR1445:=myrec;
		END;
	FUNCTION pARhsValue1444_ARV1444:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs1445_ACR1445;
		 pARhsValue1444_ARV1444:=myrec;
		END;
	FUNCTION pAValueMeaning1443_AVM1443:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue1444_ARV1444;
		 pAValueMeaning1443_AVM1443:=myrec;
		END;
	FUNCTION pAAssemblypattern1447_AA1447:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pAAssemblypattern1447_AA1447:=list;
		END;
	FUNCTION pAAssemblesto1446_AA1446:pprintlist;
	begin
		pAAssemblesto1446_AA1446:=pAAssemblypattern1447_AA1447;
		END;
	FUNCTION pASideeffects1449_AS1449:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1449_AS1449:=nil;
		 pASideeffects1449_AS1449:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1450_AUP1450:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1450_AUP1450:=nil;
		 pAUnconditionalPrecond1450_AUP1450:=myrec;
		END;
	FUNCTION udirectf_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patint_;
		paramcount:=2;
		meaning:=pAValueMeaning1443_AVM1443;
		matchedAssembler:=pAAssemblesto1446_AA1446;
		END;
		udirectf_:=myrec;
	END;
	FUNCTION pATypeid1455_AT1455:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ directf  ilcg.pattern@73c5c4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1455_AT1455:=myrec;
		END;
	FUNCTION pATypeidType1454_ATT1454:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1455_AT1455;
		 pATypeidType1454_ATT1454:=myrec;
		END;
	FUNCTION pATypeid1457_AT1457:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ udirectf  ilcg.pattern@2f7cfe}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1457_AT1457:=myrec;
		END;
	FUNCTION pATypeidType1456_ATT1456:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1457_AT1457;
		 pATypeidType1456_ATT1456:=myrec;
		END;
	FUNCTION pATypeid1459_AT1459:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ labelf  ilcg.pattern@7a906e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1459_AT1459:=myrec;
		END;
	FUNCTION pATypeidType1458_ATT1458:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1459_AT1459;
		 pATypeidType1458_ATT1458:=myrec;
		END;
	FUNCTION pATypeid1461_AT1461:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ labelconstf  ilcg.pattern@5713fe}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1461_AT1461:=myrec;
		END;
	FUNCTION pATypeidType1460_ATT1460:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1461_AT1461;
		 pATypeidType1460_ATT1460:=myrec;
		END;
	FUNCTION pATypeid1463_AT1463:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ scaledIndexPlusOffsetf  ilcg.pattern@50d843}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1463_AT1463:=myrec;
		END;
	FUNCTION pATypeidType1462_ATT1462:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1463_AT1463;
		 pATypeidType1462_ATT1462:=myrec;
		END;
	FUNCTION pATypeid1465_AT1465:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ basePlusScaledIndexPlusOffsetf  ilcg.pattern@3b9533}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1465_AT1465:=myrec;
		END;
	FUNCTION pATypeidType1464_ATT1464:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1465_AT1465;
		 pATypeidType1464_ATT1464:=myrec;
		END;
	FUNCTION pATypeid1467_AT1467:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baseplusoffsetf  ilcg.pattern@657c7b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1467_AT1467:=myrec;
		END;
	FUNCTION pATypeidType1466_ATT1466:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1467_AT1467;
		 pATypeidType1466_ATT1466:=myrec;
		END;
	FUNCTION pATypeid1469_AT1469:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ basePlusIndexPlusOffsetf  ilcg.pattern@10c276}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1469_AT1469:=myrec;
		END;
	FUNCTION pATypeidType1468_ATT1468:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1469_AT1469;
		 pATypeidType1468_ATT1468:=myrec;
		END;
	FUNCTION pATypeid1471_AT1471:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ basePlusScaledIndexf  ilcg.pattern@43ed74}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1471_AT1471:=myrec;
		END;
	FUNCTION pATypeidType1470_ATT1470:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1471_AT1471;
		 pATypeidType1470_ATT1470:=myrec;
		END;
	FUNCTION pATypeid1473_AT1473:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ scaledIndexPlusOffsetf  ilcg.pattern@50d843}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1473_AT1473:=myrec;
		END;
	FUNCTION pATypeidType1472_ATT1472:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1473_AT1473;
		 pATypeidType1472_ATT1472:=myrec;
		END;
	FUNCTION pATypeid1475_AT1475:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baseminusoffsetf  ilcg.pattern@2982bf}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1475_AT1475:=myrec;
		END;
	FUNCTION pATypeidType1474_ATT1474:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1475_AT1475;
		 pATypeidType1474_ATT1474:=myrec;
		END;
	FUNCTION pATypeid1477_AT1477:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ basePlusIndexf  ilcg.pattern@17d6c1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1477_AT1477:=myrec;
		END;
	FUNCTION pATypeidType1476_ATT1476:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1477_AT1477;
		 pATypeidType1476_ATT1476:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1453_AAP1453:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 168;
		myrec^.last:= 179;
		 pAAlternativesPatterndecl1453_AAP1453:=myrec;
		END;
	FUNCTION pATypeid1481_AT1481:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ uncasteaform  ilcg.pattern@207440}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1481_AT1481:=myrec;
		END;
	FUNCTION pATypeid1483_AT1483:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ longint  ilcg.pattern@62974e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1483_AT1483:=myrec;
		END;
	FUNCTION pATypeid1488_AT1488:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@46b80e}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid1488_AT1488:=myrec;
		END;
	FUNCTION pATypeidType1487_ATT1487:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1488_AT1488;
		 pATypeidType1487_ATT1487:=myrec;
		END;
	FUNCTION pAIdLoc1490_AIL1490:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1490_AIL1490:=myrec;
		END;
	FUNCTION pALocValue1489_ALV1489:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1490_AIL1490;
		 pALocValue1489_ALV1489:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs1486_ACR1486:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType1487_ATT1487;
		myrec^.arg2:=pALocValue1489_ALV1489;
		 pACastRhs1486_ACR1486:=myrec;
		END;
	FUNCTION pARhsValue1485_ARV1485:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs1486_ACR1486;
		 pARhsValue1485_ARV1485:=myrec;
		END;
	FUNCTION pAValueMeaning1484_AVM1484:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue1485_ARV1485;
		 pAValueMeaning1484_AVM1484:=myrec;
		END;
	FUNCTION pAAssemblypattern1492_AA1492:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pAAssemblypattern1492_AA1492:=list;
		END;
	FUNCTION pAAssemblesto1491_AA1491:pprintlist;
	begin
		pAAssemblesto1491_AA1491:=pAAssemblypattern1492_AA1492;
		END;
	FUNCTION pASideeffects1494_AS1494:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1494_AS1494:=nil;
		 pASideeffects1494_AS1494:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1495_AUP1495:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1495_AUP1495:=nil;
		 pAUnconditionalPrecond1495_AUP1495:=myrec;
		END;
	FUNCTION eaform_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patlongint_;
		params^[0]:=patuncasteaform_;
		paramcount:=3;
		meaning:=pAValueMeaning1484_AVM1484;
		matchedAssembler:=pAAssemblesto1491_AA1491;
		END;
		eaform_:=myrec;
	END;
	FUNCTION pATypeid1500_AT1500:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ eaform  ilcg.pattern@5a366c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1500_AT1500:=myrec;
		END;
	FUNCTION pATypeidType1499_ATT1499:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1500_AT1500;
		 pATypeidType1499_ATT1499:=myrec;
		END;
	FUNCTION pATypeid1502_AT1502:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ regindirf  ilcg.pattern@4c562f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1502_AT1502:=myrec;
		END;
	FUNCTION pATypeidType1501_ATT1501:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1502_AT1502;
		 pATypeidType1501_ATT1501:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1498_AAP1498:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 180;
		myrec^.last:= 181;
		 pAAlternativesPatterndecl1498_AAP1498:=myrec;
		END;
	FUNCTION pATypeid1506_AT1506:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ addrform  ilcg.pattern@64dd79}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1506_AT1506:=myrec;
		END;
	FUNCTION pAIdLoc1511_AIL1511:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1511_AIL1511:=myrec;
		END;
	FUNCTION pALocValue1510_ALV1510:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1511_AIL1511;
		 pALocValue1510_ALV1510:=myrec;
		END;
	FUNCTION pAMemoryLoc1509_AML1509:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pALocValue1510_ALV1510;
		 pAMemoryLoc1509_AML1509:=myrec;
		END;
	FUNCTION pALocValue1508_ALV1508:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAMemoryLoc1509_AML1509;
		 pALocValue1508_ALV1508:=myrec;
		END;
	FUNCTION pAValueMeaning1507_AVM1507:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pALocValue1508_ALV1508;
		 pAValueMeaning1507_AVM1507:=myrec;
		END;
	FUNCTION pAAssemblypattern1513_AA1513:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'[' );
		pappendp(list,0);
		pappends(list,']' );
		pAAssemblypattern1513_AA1513:=list;
		END;
	FUNCTION pAAssemblesto1512_AA1512:pprintlist;
	begin
		pAAssemblesto1512_AA1512:=pAAssemblypattern1513_AA1513;
		END;
	FUNCTION pASideeffects1517_AS1517:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1517_AS1517:=nil;
		 pASideeffects1517_AS1517:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1518_AUP1518:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1518_AUP1518:=nil;
		 pAUnconditionalPrecond1518_AUP1518:=myrec;
		END;
	FUNCTION maddrmode_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=pataddrform_;
		paramcount:=2;
		meaning:=pAValueMeaning1507_AVM1507;
		matchedAssembler:=pAAssemblesto1512_AA1512;
		END;
		maddrmode_:=myrec;
	END;
	FUNCTION pATypeid1523_AT1523:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1523_AT1523:=myrec;
		END;
	FUNCTION pATypeidType1522_ATT1522:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1523_AT1523;
		 pATypeidType1522_ATT1522:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1521_AAP1521:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 182;
		myrec^.last:= 182;
		 pAAlternativesPatterndecl1521_AAP1521:=myrec;
		END;
	FUNCTION pATypeid1527_AT1527:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ signed  ilcg.pattern@c6406}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1527_AT1527:=myrec;
		END;
	FUNCTION pAConstRhs1530_ACR1530:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(0);;
		 pAConstRhs1530_ACR1530:=myrec;
		END;
	FUNCTION pARhsValue1529_ARV1529:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs1530_ACR1530;
		 pARhsValue1529_ARV1529:=myrec;
		END;
	FUNCTION pAValueMeaning1528_AVM1528:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue1529_ARV1529;
		 pAValueMeaning1528_AVM1528:=myrec;
		END;
	FUNCTION pAAssemblypattern1532_AA1532:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pAAssemblypattern1532_AA1532:=list;
		END;
	FUNCTION pAAssemblesto1531_AA1531:pprintlist;
	begin
		pAAssemblesto1531_AA1531:=pAAssemblypattern1532_AA1532;
		END;
	FUNCTION pASideeffects1534_AS1534:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1534_AS1534:=nil;
		 pASideeffects1534_AS1534:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1535_AUP1535:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1535_AUP1535:=nil;
		 pAUnconditionalPrecond1535_AUP1535:=myrec;
		END;
	FUNCTION immediate_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patsigned_;
		paramcount:=2;
		meaning:=pAValueMeaning1528_AVM1528;
		matchedAssembler:=pAAssemblesto1531_AA1531;
		END;
		immediate_:=myrec;
	END;
	FUNCTION pATypeid1539_AT1539:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@3e965}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1539_AT1539:=myrec;
		END;
	FUNCTION pAConstRhs1542_ACR1542:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(0);;
		 pAConstRhs1542_ACR1542:=myrec;
		END;
	FUNCTION pARhsValue1541_ARV1541:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs1542_ACR1542;
		 pARhsValue1541_ARV1541:=myrec;
		END;
	FUNCTION pAValueMeaning1540_AVM1540:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue1541_ARV1541;
		 pAValueMeaning1540_AVM1540:=myrec;
		END;
	FUNCTION pAAssemblypattern1544_AA1544:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pAAssemblypattern1544_AA1544:=list;
		END;
	FUNCTION pAAssemblesto1543_AA1543:pprintlist;
	begin
		pAAssemblesto1543_AA1543:=pAAssemblypattern1544_AA1544;
		END;
	FUNCTION pASideeffects1546_AS1546:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1546_AS1546:=nil;
		 pASideeffects1546_AS1546:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1547_AUP1547:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1547_AUP1547:=nil;
		 pAUnconditionalPrecond1547_AUP1547:=myrec;
		END;
	FUNCTION intimmediate_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patint_;
		paramcount:=2;
		meaning:=pAValueMeaning1540_AVM1540;
		matchedAssembler:=pAAssemblesto1543_AA1543;
		END;
		intimmediate_:=myrec;
	END;
	FUNCTION pATypeid1552_AT1552:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ labelf  ilcg.pattern@7a906e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1552_AT1552:=myrec;
		END;
	FUNCTION pATypeidType1551_ATT1551:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1552_AT1552;
		 pATypeidType1551_ATT1551:=myrec;
		END;
	FUNCTION pATypeid1554_AT1554:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1554_AT1554:=myrec;
		END;
	FUNCTION pATypeidType1553_ATT1553:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1554_AT1554;
		 pATypeidType1553_ATT1553:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1550_AAP1550:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 183;
		myrec^.last:= 184;
		 pAAlternativesPatterndecl1550_AAP1550:=myrec;
		END;
	FUNCTION pATypeid1559_AT1559:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1559_AT1559:=myrec;
		END;
	FUNCTION pATypeidType1558_ATT1558:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1559_AT1559;
		 pATypeidType1558_ATT1558:=myrec;
		END;
	FUNCTION pATypeid1561_AT1561:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ anyreg  ilcg.pattern@18b13b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1561_AT1561:=myrec;
		END;
	FUNCTION pATypeidType1560_ATT1560:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1561_AT1561;
		 pATypeidType1560_ATT1560:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1557_AAP1557:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 185;
		myrec^.last:= 186;
		 pAAlternativesPatterndecl1557_AAP1557:=myrec;
		END;
	FUNCTION pATypeid1566_AT1566:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1566_AT1566:=myrec;
		END;
	FUNCTION pATypeidType1565_ATT1565:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1566_AT1566;
		 pATypeidType1565_ATT1565:=myrec;
		END;
	FUNCTION pATypeid1568_AT1568:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1568_AT1568:=myrec;
		END;
	FUNCTION pATypeidType1567_ATT1567:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1568_AT1568;
		 pATypeidType1567_ATT1567:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1564_AAP1564:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 187;
		myrec^.last:= 188;
		 pAAlternativesPatterndecl1564_AAP1564:=myrec;
		END;
	FUNCTION pATypeid1573_AT1573:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1573_AT1573:=myrec;
		END;
	FUNCTION pATypeidType1572_ATT1572:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1573_AT1573;
		 pATypeidType1572_ATT1572:=myrec;
		END;
	FUNCTION pATypeid1575_AT1575:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1575_AT1575:=myrec;
		END;
	FUNCTION pATypeidType1574_ATT1574:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1575_AT1575;
		 pATypeidType1574_ATT1574:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1571_AAP1571:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 189;
		myrec^.last:= 190;
		 pAAlternativesPatterndecl1571_AAP1571:=myrec;
		END;
	FUNCTION pATypeid1580_AT1580:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1580_AT1580:=myrec;
		END;
	FUNCTION pATypeidType1579_ATT1579:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1580_AT1580;
		 pATypeidType1579_ATT1579:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1578_AAP1578:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 191;
		myrec^.last:= 191;
		 pAAlternativesPatterndecl1578_AAP1578:=myrec;
		END;
	FUNCTION pATypeid1584_AT1584:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ shiftcountreg  ilcg.pattern@43ca4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1584_AT1584:=myrec;
		END;
	FUNCTION pAIdLoc1589_AIL1589:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1589_AIL1589:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1588_AR1588:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1589_AIL1589;
		 pARefval1588_AR1588:=myrec;
		END;
	FUNCTION pADerefRhs1587_ADR1587:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1588_AR1588;
		 pADerefRhs1587_ADR1587:=myrec;
		END;
	FUNCTION pARhsValue1586_ARV1586:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1587_ADR1587;
		 pARhsValue1586_ARV1586:=myrec;
		END;
	FUNCTION pAValueMeaning1585_AVM1585:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue1586_ARV1586;
		 pAValueMeaning1585_AVM1585:=myrec;
		END;
	FUNCTION pAAssemblypattern1591_AA1591:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cl' );
		pAAssemblypattern1591_AA1591:=list;
		END;
	FUNCTION pAAssemblesto1590_AA1590:pprintlist;
	begin
		pAAssemblesto1590_AA1590:=pAAssemblypattern1591_AA1591;
		END;
	FUNCTION pASideeffects1593_AS1593:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1593_AS1593:=nil;
		 pASideeffects1593_AS1593:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1594_AUP1594:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1594_AUP1594:=nil;
		 pAUnconditionalPrecond1594_AUP1594:=myrec;
		END;
	FUNCTION regshift_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patshiftcountreg_;
		paramcount:=2;
		meaning:=pAValueMeaning1585_AVM1585;
		matchedAssembler:=pAAssemblesto1590_AA1590;
		END;
		regshift_:=myrec;
	END;
	FUNCTION pATypeid1599_AT1599:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ immediate  ilcg.pattern@3ed1fd}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1599_AT1599:=myrec;
		END;
	FUNCTION pATypeidType1598_ATT1598:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1599_AT1599;
		 pATypeidType1598_ATT1598:=myrec;
		END;
	FUNCTION pATypeid1601_AT1601:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ regshift  ilcg.pattern@8ea49}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1601_AT1601:=myrec;
		END;
	FUNCTION pATypeidType1600_ATT1600:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1601_AT1601;
		 pATypeidType1600_ATT1600:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1597_AAP1597:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 192;
		myrec^.last:= 193;
		 pAAlternativesPatterndecl1597_AAP1597:=myrec;
		END;
	FUNCTION pATypeid1605_AT1605:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ addrmode  ilcg.pattern@7a4076}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1605_AT1605:=myrec;
		END;
	FUNCTION pAIdLoc1610_AIL1610:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1610_AIL1610:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1609_AR1609:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1610_AIL1610;
		 pARefval1609_AR1609:=myrec;
		END;
	FUNCTION pADerefRhs1608_ADR1608:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1609_AR1609;
		 pADerefRhs1608_ADR1608:=myrec;
		END;
	FUNCTION pARhsValue1607_ARV1607:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1608_ADR1608;
		 pARhsValue1607_ARV1607:=myrec;
		END;
	FUNCTION pAValueMeaning1606_AVM1606:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue1607_ARV1607;
		 pAValueMeaning1606_AVM1606:=myrec;
		END;
	FUNCTION pAAssemblypattern1612_AA1612:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pAAssemblypattern1612_AA1612:=list;
		END;
	FUNCTION pAAssemblesto1611_AA1611:pprintlist;
	begin
		pAAssemblesto1611_AA1611:=pAAssemblypattern1612_AA1612;
		END;
	FUNCTION pASideeffects1614_AS1614:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1614_AS1614:=nil;
		 pASideeffects1614_AS1614:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1615_AUP1615:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1615_AUP1615:=nil;
		 pAUnconditionalPrecond1615_AUP1615:=myrec;
		END;
	FUNCTION regaddrop_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=pataddrmode_;
		paramcount:=2;
		meaning:=pAValueMeaning1606_AVM1606;
		matchedAssembler:=pAAssemblesto1611_AA1611;
		END;
		regaddrop_:=myrec;
	END;
	FUNCTION pATypeid1620_AT1620:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ intimmediate  ilcg.pattern@2d9b0f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1620_AT1620:=myrec;
		END;
	FUNCTION pATypeidType1619_ATT1619:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1620_AT1620;
		 pATypeidType1619_ATT1619:=myrec;
		END;
	FUNCTION pATypeid1622_AT1622:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1622_AT1622:=myrec;
		END;
	FUNCTION pATypeidType1621_ATT1621:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1622_AT1622;
		 pATypeidType1621_ATT1621:=myrec;
		END;
	FUNCTION pATypeid1624_AT1624:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ regaddrop  ilcg.pattern@5b55a9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1624_AT1624:=myrec;
		END;
	FUNCTION pATypeidType1623_ATT1623:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1624_AT1624;
		 pATypeidType1623_ATT1623:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl1618_AAP1618:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 194;
		myrec^.last:= 196;
		 pAAlternativesPatterndecl1618_AAP1618:=myrec;
		END;
	FUNCTION pATypeid1627_AT1627:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1627_AT1627:=myrec;
		END;
	FUNCTION pASigned1636_AS1636:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned1636_AS1636:=myrec;
		END;
	FUNCTION pASignedTformat1635_AST1635:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned1636_AS1636;
		 pASignedTformat1635_AST1635:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1634_ATP1634:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype1634_ATP1634:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1633_APT1633:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType1633_APT1633:=myrec;
		END;
	FUNCTION pAReference1632_AR1632:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType1633_APT1633;
		 pAReference1632_AR1632:=myrec;
		END;
	FUNCTION pAReftypeType1631_ART1631:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference1632_AR1632;
		 pAReftypeType1631_ART1631:=myrec;
		END;
	FUNCTION pAPopMonadic1639_APM1639:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic1639_APM1639:=myrec;
		END;
	FUNCTION pAIdLoc1641_AIL1641:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc1641_AIL1641:=myrec;
		END;
	FUNCTION pALocValue1640_ALV1640:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1641_AIL1641;
		 pALocValue1640_ALV1640:=myrec;
		END;
	FUNCTION pAMonadicValue1638_AMV1638:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue1640_ALV1640;
		myrec^.fn:=pAPopMonadic1639_APM1639;
		 pAMonadicValue1638_AMV1638:=myrec;
		END;
	FUNCTION pAMemoryLoc1637_AML1637:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pAMonadicValue1638_AMV1638;
		 pAMemoryLoc1637_AML1637:=myrec;
		END;
	FUNCTION pARefcastRefval1630_ARR1630:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType1631_ART1631;
		myrec^.arg2:=pAMemoryLoc1637_AML1637;
		 pARefcastRefval1630_ARR1630:=myrec;
		END;
	FUNCTION pAIdLoc1645_AIL1645:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1645_AIL1645:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1644_AR1644:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1645_AIL1645;
		 pARefval1644_AR1644:=myrec;
		END;
	FUNCTION pADerefRhs1643_ADR1643:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1644_AR1644;
		 pADerefRhs1643_ADR1643:=myrec;
		END;
	FUNCTION pARhsValue1642_ARV1642:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1643_ADR1643;
		 pARhsValue1642_ARV1642:=myrec;
		END;
	FUNCTION pAAssign1629_AA1629:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue1642_ARV1642;
		myrec^.dest:=pARefcastRefval1630_ARR1630;
		 pAAssign1629_AA1629:=myrec;
		END;
	FUNCTION pAAssignMeaning1628_AAM1628:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign1629_AA1629;
		 pAAssignMeaning1628_AAM1628:=myrec;
		END;
	FUNCTION pAAssemblypattern1647_AA1647:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'xchg DWORD[esp],' );
		pappendp(list,0);
		pappends(list,'\n  pop DWORD[' );
		pappendp(list,0);
		pappends(list,']\n   ' );
		pAAssemblypattern1647_AA1647:=list;
		END;
	FUNCTION pAAssemblesto1646_AA1646:pprintlist;
	begin
		pAAssemblesto1646_AA1646:=pAAssemblypattern1647_AA1647;
		END;
	FUNCTION pASideeffects1653_AS1653:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1653_AS1653:=nil;
		 pASideeffects1653_AS1653:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1654_AUP1654:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1654_AUP1654:=nil;
		 pAUnconditionalPrecond1654_AUP1654:=myrec;
		END;
	FUNCTION STACKSTORE_STACKSTORE:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		paramcount:=2;
		meaning:=pAAssignMeaning1628_AAM1628;
		matchedAssembler:=pAAssemblesto1646_AA1646;
		END;
		STACKSTORE_STACKSTORE:=myrec;
	END;
	FUNCTION pATypeid1657_AT1657:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ wreg  ilcg.pattern@18cbf7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1657_AT1657:=myrec;
		END;
	FUNCTION pAHalfwordFormat1665_AHF1665:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fhalfword;
		 pAHalfwordFormat1665_AHF1665:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype1664_AFP1664:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fhalfword ;
		 pAFormatPredeclaredtype1664_AFP1664:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1663_APT1663:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fhalfword ;
		 pAPredeclaredtypeType1663_APT1663:=myrec;
		END;
	FUNCTION pAReference1662_AR1662:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType1663_APT1663;
		 pAReference1662_AR1662:=myrec;
		END;
	FUNCTION pAReftypeType1661_ART1661:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference1662_AR1662;
		 pAReftypeType1661_ART1661:=myrec;
		END;
	FUNCTION pAPopMonadic1668_APM1668:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic1668_APM1668:=myrec;
		END;
	FUNCTION pAIdLoc1670_AIL1670:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc1670_AIL1670:=myrec;
		END;
	FUNCTION pALocValue1669_ALV1669:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1670_AIL1670;
		 pALocValue1669_ALV1669:=myrec;
		END;
	FUNCTION pAMonadicValue1667_AMV1667:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue1669_ALV1669;
		myrec^.fn:=pAPopMonadic1668_APM1668;
		 pAMonadicValue1667_AMV1667:=myrec;
		END;
	FUNCTION pAMemoryLoc1666_AML1666:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pAMonadicValue1667_AMV1667;
		 pAMemoryLoc1666_AML1666:=myrec;
		END;
	FUNCTION pARefcastRefval1660_ARR1660:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType1661_ART1661;
		myrec^.arg2:=pAMemoryLoc1666_AML1666;
		 pARefcastRefval1660_ARR1660:=myrec;
		END;
	FUNCTION pAIdLoc1674_AIL1674:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1674_AIL1674:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1673_AR1673:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1674_AIL1674;
		 pARefval1673_AR1673:=myrec;
		END;
	FUNCTION pADerefRhs1672_ADR1672:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1673_AR1673;
		 pADerefRhs1672_ADR1672:=myrec;
		END;
	FUNCTION pARhsValue1671_ARV1671:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1672_ADR1672;
		 pARhsValue1671_ARV1671:=myrec;
		END;
	FUNCTION pAAssign1659_AA1659:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue1671_ARV1671;
		myrec^.dest:=pARefcastRefval1660_ARR1660;
		 pAAssign1659_AA1659:=myrec;
		END;
	FUNCTION pAAssignMeaning1658_AAM1658:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign1659_AA1659;
		 pAAssignMeaning1658_AAM1658:=myrec;
		END;
	FUNCTION pAAssemblypattern1676_AA1676:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'xchg DWORD[esp],esi\n  mov word[esi],' );
		pappendp(list,0);
		pappends(list,'\n  pop esi' );
		pAAssemblypattern1676_AA1676:=list;
		END;
	FUNCTION pAAssemblesto1675_AA1675:pprintlist;
	begin
		pAAssemblesto1675_AA1675:=pAAssemblypattern1676_AA1676;
		END;
	FUNCTION pASideeffects1680_AS1680:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1680_AS1680:=nil;
		 pASideeffects1680_AS1680:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1681_AUP1681:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1681_AUP1681:=nil;
		 pAUnconditionalPrecond1681_AUP1681:=myrec;
		END;
	FUNCTION STACKWSTORE_STACKWSTORE:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patwreg_;
		paramcount:=2;
		meaning:=pAAssignMeaning1658_AAM1658;
		matchedAssembler:=pAAssemblesto1675_AA1675;
		END;
		STACKWSTORE_STACKWSTORE:=myrec;
	END;
	FUNCTION pATypeid1684_AT1684:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1684_AT1684:=myrec;
		END;
	FUNCTION pAOctetFormat1692_AOF1692:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat1692_AOF1692:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype1691_AFP1691:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype1691_AFP1691:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1690_APT1690:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAPredeclaredtypeType1690_APT1690:=myrec;
		END;
	FUNCTION pAReference1689_AR1689:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType1690_APT1690;
		 pAReference1689_AR1689:=myrec;
		END;
	FUNCTION pAReftypeType1688_ART1688:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference1689_AR1689;
		 pAReftypeType1688_ART1688:=myrec;
		END;
	FUNCTION pAPopMonadic1695_APM1695:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic1695_APM1695:=myrec;
		END;
	FUNCTION pAIdLoc1697_AIL1697:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc1697_AIL1697:=myrec;
		END;
	FUNCTION pALocValue1696_ALV1696:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1697_AIL1697;
		 pALocValue1696_ALV1696:=myrec;
		END;
	FUNCTION pAMonadicValue1694_AMV1694:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue1696_ALV1696;
		myrec^.fn:=pAPopMonadic1695_APM1695;
		 pAMonadicValue1694_AMV1694:=myrec;
		END;
	FUNCTION pAMemoryLoc1693_AML1693:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pAMonadicValue1694_AMV1694;
		 pAMemoryLoc1693_AML1693:=myrec;
		END;
	FUNCTION pARefcastRefval1687_ARR1687:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType1688_ART1688;
		myrec^.arg2:=pAMemoryLoc1693_AML1693;
		 pARefcastRefval1687_ARR1687:=myrec;
		END;
	FUNCTION pAIdLoc1701_AIL1701:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1701_AIL1701:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1700_AR1700:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1701_AIL1701;
		 pARefval1700_AR1700:=myrec;
		END;
	FUNCTION pADerefRhs1699_ADR1699:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1700_AR1700;
		 pADerefRhs1699_ADR1699:=myrec;
		END;
	FUNCTION pARhsValue1698_ARV1698:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1699_ADR1699;
		 pARhsValue1698_ARV1698:=myrec;
		END;
	FUNCTION pAAssign1686_AA1686:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue1698_ARV1698;
		myrec^.dest:=pARefcastRefval1687_ARR1687;
		 pAAssign1686_AA1686:=myrec;
		END;
	FUNCTION pAAssignMeaning1685_AAM1685:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign1686_AA1686;
		 pAAssignMeaning1685_AAM1685:=myrec;
		END;
	FUNCTION pAAssemblypattern1703_AA1703:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'xchg DWORD[esp],esi\n  mov BYTE[esi],' );
		pappendp(list,0);
		pappends(list,'\n  pop esi' );
		pAAssemblypattern1703_AA1703:=list;
		END;
	FUNCTION pAAssemblesto1702_AA1702:pprintlist;
	begin
		pAAssemblesto1702_AA1702:=pAAssemblypattern1703_AA1703;
		END;
	FUNCTION pASideeffects1707_AS1707:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1707_AS1707:=nil;
		 pASideeffects1707_AS1707:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1708_AUP1708:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1708_AUP1708:=nil;
		 pAUnconditionalPrecond1708_AUP1708:=myrec;
		END;
	FUNCTION STACKBSTORE_STACKBSTORE:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patbreg_;
		paramcount:=2;
		meaning:=pAAssignMeaning1685_AAM1685;
		matchedAssembler:=pAAssemblesto1702_AA1702;
		END;
		STACKBSTORE_STACKBSTORE:=myrec;
	END;
	FUNCTION pATypeid1711_AT1711:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ nonmultoperator  ilcg.pattern@145582}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1711_AT1711:=myrec;
		END;
	FUNCTION pATypeid1713_AT1713:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ offset  ilcg.pattern@331fd9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1713_AT1713:=myrec;
		END;
	FUNCTION pAPushDyadic1716_APD1716:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic1716_APD1716:=myrec;
		END;
	FUNCTION pAIdLoc1718_AIL1718:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc1718_AIL1718:=myrec;
		END;
	FUNCTION pALocValue1717_ALV1717:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1718_AIL1718;
		 pALocValue1717_ALV1717:=myrec;
		END;
	FUNCTION pASigned1724_AS1724:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned1724_AS1724:=myrec;
		END;
	FUNCTION pASignedTformat1723_AST1723:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned1724_AS1724;
		 pASignedTformat1723_AST1723:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1722_ATP1722:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype1722_ATP1722:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1721_APT1721:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType1721_APT1721:=myrec;
		END;
	FUNCTION pAIdentifierDyadic1726_AID1726:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic1726_AID1726:=myrec;
		END;
	FUNCTION pAPopMonadic1728_APM1728:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic1728_APM1728:=myrec;
		END;
	FUNCTION pAIdLoc1730_AIL1730:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc1730_AIL1730:=myrec;
		END;
	FUNCTION pALocValue1729_ALV1729:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1730_AIL1730;
		 pALocValue1729_ALV1729:=myrec;
		END;
	FUNCTION pAMonadicValue1727_AMV1727:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue1729_ALV1729;
		myrec^.fn:=pAPopMonadic1728_APM1728;
		 pAMonadicValue1727_AMV1727:=myrec;
		END;
	FUNCTION pAIdLoc1732_AIL1732:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc1732_AIL1732:=myrec;
		END;
	FUNCTION pALocValue1731_ALV1731:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1732_AIL1732;
		 pALocValue1731_ALV1731:=myrec;
		END;
	FUNCTION pADyadicValue1725_ADV1725:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pAMonadicValue1727_AMV1727;
		myrec^.arg2:=pALocValue1731_ALV1731;
		myrec^.fn:=pAIdentifierDyadic1726_AID1726;
		 pADyadicValue1725_ADV1725:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs1720_ACR1720:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType1721_APT1721;
		myrec^.arg2:=pADyadicValue1725_ADV1725;
		 pACastRhs1720_ACR1720:=myrec;
		END;
	FUNCTION pARhsValue1719_ARV1719:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs1720_ACR1720;
		 pARhsValue1719_ARV1719:=myrec;
		END;
	FUNCTION pADyadicValue1715_ADV1715:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue1717_ALV1717;
		myrec^.arg2:=pARhsValue1719_ARV1719;
		myrec^.fn:=pAPushDyadic1716_APD1716;
		 pADyadicValue1715_ADV1715:=myrec;
		END;
	FUNCTION pAValueMeaning1714_AVM1714:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue1715_ADV1715;
		 pAValueMeaning1714_AVM1714:=myrec;
		END;
	FUNCTION pAAssemblypattern1734_AA1734:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'  DWORD[esp] ,' );
		pappendp(list,1);
		pAAssemblypattern1734_AA1734:=list;
		END;
	FUNCTION pAAssemblesto1733_AA1733:pprintlist;
	begin
		pAAssemblesto1733_AA1733:=pAAssemblypattern1734_AA1734;
		END;
	FUNCTION pASideeffects1738_AS1738:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1738_AS1738:=nil;
		 pASideeffects1738_AS1738:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1739_AUP1739:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1739_AUP1739:=nil;
		 pAUnconditionalPrecond1739_AUP1739:=myrec;
		END;
	FUNCTION SMLIT_SMLIT:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patoffset_;
		params^[0]:=patnonmultoperator_;
		paramcount:=3;
		meaning:=pAValueMeaning1714_AVM1714;
		matchedAssembler:=pAAssemblesto1733_AA1733;
		END;
		SMLIT_SMLIT:=myrec;
	END;
	FUNCTION pATypeid1742_AT1742:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ nonmultoperator  ilcg.pattern@145582}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1742_AT1742:=myrec;
		END;
	FUNCTION pATypeid1744_AT1744:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ offset  ilcg.pattern@331fd9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1744_AT1744:=myrec;
		END;
	FUNCTION pAPushDyadic1747_APD1747:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic1747_APD1747:=myrec;
		END;
	FUNCTION pAIdLoc1749_AIL1749:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc1749_AIL1749:=myrec;
		END;
	FUNCTION pALocValue1748_ALV1748:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1749_AIL1749;
		 pALocValue1748_ALV1748:=myrec;
		END;
	FUNCTION pASigned1755_AS1755:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned1755_AS1755:=myrec;
		END;
	FUNCTION pASignedTformat1754_AST1754:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned1755_AS1755;
		 pASignedTformat1754_AST1754:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1753_ATP1753:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype1753_ATP1753:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1752_APT1752:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType1752_APT1752:=myrec;
		END;
	FUNCTION pATimesDyadic1757_ATD1757:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcptimes;
		 pATimesDyadic1757_ATD1757:=myrec;
		END;
	FUNCTION pAPopMonadic1759_APM1759:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic1759_APM1759:=myrec;
		END;
	FUNCTION pAIdLoc1761_AIL1761:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc1761_AIL1761:=myrec;
		END;
	FUNCTION pALocValue1760_ALV1760:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1761_AIL1761;
		 pALocValue1760_ALV1760:=myrec;
		END;
	FUNCTION pAMonadicValue1758_AMV1758:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue1760_ALV1760;
		myrec^.fn:=pAPopMonadic1759_APM1759;
		 pAMonadicValue1758_AMV1758:=myrec;
		END;
	FUNCTION pAIdLoc1763_AIL1763:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc1763_AIL1763:=myrec;
		END;
	FUNCTION pALocValue1762_ALV1762:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1763_AIL1763;
		 pALocValue1762_ALV1762:=myrec;
		END;
	FUNCTION pADyadicValue1756_ADV1756:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pAMonadicValue1758_AMV1758;
		myrec^.arg2:=pALocValue1762_ALV1762;
		myrec^.fn:=pATimesDyadic1757_ATD1757;
		 pADyadicValue1756_ADV1756:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs1751_ACR1751:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType1752_APT1752;
		myrec^.arg2:=pADyadicValue1756_ADV1756;
		 pACastRhs1751_ACR1751:=myrec;
		END;
	FUNCTION pARhsValue1750_ARV1750:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs1751_ACR1751;
		 pARhsValue1750_ARV1750:=myrec;
		END;
	FUNCTION pADyadicValue1746_ADV1746:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue1748_ALV1748;
		myrec^.arg2:=pARhsValue1750_ARV1750;
		myrec^.fn:=pAPushDyadic1747_APD1747;
		 pADyadicValue1746_ADV1746:=myrec;
		END;
	FUNCTION pAValueMeaning1745_AVM1745:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue1746_ADV1746;
		 pAValueMeaning1745_AVM1745:=myrec;
		END;
	FUNCTION pAAssemblypattern1765_AA1765:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'xchg eax,DWORD[esp]\n imul eax ,' );
		pappendp(list,1);
		pappends(list,'\n xchg eax,DWORD[esp]' );
		pAAssemblypattern1765_AA1765:=list;
		END;
	FUNCTION pAAssemblesto1764_AA1764:pprintlist;
	begin
		pAAssemblesto1764_AA1764:=pAAssemblypattern1765_AA1765;
		END;
	FUNCTION pASideeffects1769_AS1769:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1769_AS1769:=nil;
		 pASideeffects1769_AS1769:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1770_AUP1770:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1770_AUP1770:=nil;
		 pAUnconditionalPrecond1770_AUP1770:=myrec;
		END;
	FUNCTION SMULIT_SMULIT:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patoffset_;
		params^[0]:=patnonmultoperator_;
		paramcount:=3;
		meaning:=pAValueMeaning1745_AVM1745;
		matchedAssembler:=pAAssemblesto1764_AA1764;
		END;
		SMULIT_SMULIT:=myrec;
	END;
	FUNCTION pATypeid1773_AT1773:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ saddoperator  ilcg.pattern@465fb1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1773_AT1773:=myrec;
		END;
	FUNCTION pAPushDyadic1776_APD1776:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic1776_APD1776:=myrec;
		END;
	FUNCTION pAIdLoc1778_AIL1778:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc1778_AIL1778:=myrec;
		END;
	FUNCTION pALocValue1777_ALV1777:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1778_AIL1778;
		 pALocValue1777_ALV1777:=myrec;
		END;
	FUNCTION pATypeid1782_AT1782:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ longint  ilcg.pattern@62974e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1782_AT1782:=myrec;
		END;
	FUNCTION pATypeidType1781_ATT1781:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1782_AT1782;
		 pATypeidType1781_ATT1781:=myrec;
		END;
	FUNCTION pAPlusDyadic1784_APD1784:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic1784_APD1784:=myrec;
		END;
	FUNCTION pAPopMonadic1786_APM1786:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic1786_APM1786:=myrec;
		END;
	FUNCTION pAIdLoc1788_AIL1788:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc1788_AIL1788:=myrec;
		END;
	FUNCTION pALocValue1787_ALV1787:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1788_AIL1788;
		 pALocValue1787_ALV1787:=myrec;
		END;
	FUNCTION pAMonadicValue1785_AMV1785:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue1787_ALV1787;
		myrec^.fn:=pAPopMonadic1786_APM1786;
		 pAMonadicValue1785_AMV1785:=myrec;
		END;
	FUNCTION pAPopMonadic1790_APM1790:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic1790_APM1790:=myrec;
		END;
	FUNCTION pAIdLoc1792_AIL1792:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc1792_AIL1792:=myrec;
		END;
	FUNCTION pALocValue1791_ALV1791:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1792_AIL1792;
		 pALocValue1791_ALV1791:=myrec;
		END;
	FUNCTION pAMonadicValue1789_AMV1789:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue1791_ALV1791;
		myrec^.fn:=pAPopMonadic1790_APM1790;
		 pAMonadicValue1789_AMV1789:=myrec;
		END;
	FUNCTION pADyadicValue1783_ADV1783:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pAMonadicValue1785_AMV1785;
		myrec^.arg2:=pAMonadicValue1789_AMV1789;
		myrec^.fn:=pAPlusDyadic1784_APD1784;
		 pADyadicValue1783_ADV1783:=myrec;
		END;
		(*! try to cast to type: longint*)
	FUNCTION pACastRhs1780_ACR1780:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType1781_ATT1781;
		myrec^.arg2:=pADyadicValue1783_ADV1783;
		 pACastRhs1780_ACR1780:=myrec;
		END;
	FUNCTION pARhsValue1779_ARV1779:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs1780_ACR1780;
		 pARhsValue1779_ARV1779:=myrec;
		END;
	FUNCTION pADyadicValue1775_ADV1775:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue1777_ALV1777;
		myrec^.arg2:=pARhsValue1779_ARV1779;
		myrec^.fn:=pAPushDyadic1776_APD1776;
		 pADyadicValue1775_ADV1775:=myrec;
		END;
	FUNCTION pAValueMeaning1774_AVM1774:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue1775_ADV1775;
		 pAValueMeaning1774_AVM1774:=myrec;
		END;
	FUNCTION pAAssemblypattern1794_AA1794:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'xchg eax,DWORD[esp]\n add DWORD[esp+4],eax\n pop eax' );
		pAAssemblypattern1794_AA1794:=list;
		END;
	FUNCTION pAAssemblesto1793_AA1793:pprintlist;
	begin
		pAAssemblesto1793_AA1793:=pAAssemblypattern1794_AA1794;
		END;
	FUNCTION pASideeffects1796_AS1796:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1796_AS1796:=nil;
		 pASideeffects1796_AS1796:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1797_AUP1797:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1797_AUP1797:=nil;
		 pAUnconditionalPrecond1797_AUP1797:=myrec;
		END;
	FUNCTION SADD_SADD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patsaddoperator_;
		paramcount:=2;
		meaning:=pAValueMeaning1774_AVM1774;
		matchedAssembler:=pAAssemblesto1793_AA1793;
		END;
		SADD_SADD:=myrec;
	END;
	FUNCTION pATypeid1800_AT1800:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ saddoperator  ilcg.pattern@465fb1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1800_AT1800:=myrec;
		END;
	FUNCTION pAPushDyadic1803_APD1803:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic1803_APD1803:=myrec;
		END;
	FUNCTION pAIdLoc1805_AIL1805:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc1805_AIL1805:=myrec;
		END;
	FUNCTION pALocValue1804_ALV1804:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1805_AIL1805;
		 pALocValue1804_ALV1804:=myrec;
		END;
	FUNCTION pATypeid1809_AT1809:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ longint  ilcg.pattern@62974e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1809_AT1809:=myrec;
		END;
	FUNCTION pATypeidType1808_ATT1808:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1809_AT1809;
		 pATypeidType1808_ATT1808:=myrec;
		END;
	FUNCTION pAIdentifierDyadic1811_AID1811:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic1811_AID1811:=myrec;
		END;
	FUNCTION pAPopMonadic1813_APM1813:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic1813_APM1813:=myrec;
		END;
	FUNCTION pAIdLoc1815_AIL1815:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc1815_AIL1815:=myrec;
		END;
	FUNCTION pALocValue1814_ALV1814:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1815_AIL1815;
		 pALocValue1814_ALV1814:=myrec;
		END;
	FUNCTION pAMonadicValue1812_AMV1812:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue1814_ALV1814;
		myrec^.fn:=pAPopMonadic1813_APM1813;
		 pAMonadicValue1812_AMV1812:=myrec;
		END;
	FUNCTION pAPopMonadic1817_APM1817:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic1817_APM1817:=myrec;
		END;
	FUNCTION pAIdLoc1819_AIL1819:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc1819_AIL1819:=myrec;
		END;
	FUNCTION pALocValue1818_ALV1818:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1819_AIL1819;
		 pALocValue1818_ALV1818:=myrec;
		END;
	FUNCTION pAMonadicValue1816_AMV1816:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue1818_ALV1818;
		myrec^.fn:=pAPopMonadic1817_APM1817;
		 pAMonadicValue1816_AMV1816:=myrec;
		END;
	FUNCTION pADyadicValue1810_ADV1810:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pAMonadicValue1812_AMV1812;
		myrec^.arg2:=pAMonadicValue1816_AMV1816;
		myrec^.fn:=pAIdentifierDyadic1811_AID1811;
		 pADyadicValue1810_ADV1810:=myrec;
		END;
		(*! try to cast to type: longint*)
	FUNCTION pACastRhs1807_ACR1807:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType1808_ATT1808;
		myrec^.arg2:=pADyadicValue1810_ADV1810;
		 pACastRhs1807_ACR1807:=myrec;
		END;
	FUNCTION pARhsValue1806_ARV1806:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs1807_ACR1807;
		 pARhsValue1806_ARV1806:=myrec;
		END;
	FUNCTION pADyadicValue1802_ADV1802:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue1804_ALV1804;
		myrec^.arg2:=pARhsValue1806_ARV1806;
		myrec^.fn:=pAPushDyadic1803_APD1803;
		 pADyadicValue1802_ADV1802:=myrec;
		END;
	FUNCTION pAValueMeaning1801_AVM1801:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue1802_ADV1802;
		 pAValueMeaning1801_AVM1801:=myrec;
		END;
	FUNCTION pAAssemblypattern1821_AA1821:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'xchg eax,DWORD[esp]\n ' );
		pappendp(list,0);
		pappends(list,' eax,DWORD[esp+4]\n mov DWORD[esp+4],eax\n pop eax' );
		pAAssemblypattern1821_AA1821:=list;
		END;
	FUNCTION pAAssemblesto1820_AA1820:pprintlist;
	begin
		pAAssemblesto1820_AA1820:=pAAssemblypattern1821_AA1821;
		END;
	FUNCTION pASideeffects1825_AS1825:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1825_AS1825:=nil;
		 pASideeffects1825_AS1825:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1826_AUP1826:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1826_AUP1826:=nil;
		 pAUnconditionalPrecond1826_AUP1826:=myrec;
		END;
	FUNCTION SOP_SOP:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patsaddoperator_;
		paramcount:=2;
		meaning:=pAValueMeaning1801_AVM1801;
		matchedAssembler:=pAAssemblesto1820_AA1820;
		END;
		SOP_SOP:=myrec;
	END;
	FUNCTION pATypeid1829_AT1829:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ nonmultoperator  ilcg.pattern@145582}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1829_AT1829:=myrec;
		END;
	FUNCTION pATypeid1831_AT1831:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1831_AT1831:=myrec;
		END;
	FUNCTION pAPushDyadic1834_APD1834:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic1834_APD1834:=myrec;
		END;
	FUNCTION pAIdLoc1836_AIL1836:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc1836_AIL1836:=myrec;
		END;
	FUNCTION pALocValue1835_ALV1835:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1836_AIL1836;
		 pALocValue1835_ALV1835:=myrec;
		END;
	FUNCTION pASigned1842_AS1842:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned1842_AS1842:=myrec;
		END;
	FUNCTION pASignedTformat1841_AST1841:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned1842_AS1842;
		 pASignedTformat1841_AST1841:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1840_ATP1840:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype1840_ATP1840:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1839_APT1839:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType1839_APT1839:=myrec;
		END;
	FUNCTION pAIdentifierDyadic1844_AID1844:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic1844_AID1844:=myrec;
		END;
	FUNCTION pAPopMonadic1846_APM1846:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic1846_APM1846:=myrec;
		END;
	FUNCTION pAIdLoc1848_AIL1848:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc1848_AIL1848:=myrec;
		END;
	FUNCTION pALocValue1847_ALV1847:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1848_AIL1848;
		 pALocValue1847_ALV1847:=myrec;
		END;
	FUNCTION pAMonadicValue1845_AMV1845:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue1847_ALV1847;
		myrec^.fn:=pAPopMonadic1846_APM1846;
		 pAMonadicValue1845_AMV1845:=myrec;
		END;
	FUNCTION pAIdLoc1852_AIL1852:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc1852_AIL1852:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1851_AR1851:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1852_AIL1852;
		 pARefval1851_AR1851:=myrec;
		END;
	FUNCTION pADerefRhs1850_ADR1850:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1851_AR1851;
		 pADerefRhs1850_ADR1850:=myrec;
		END;
	FUNCTION pARhsValue1849_ARV1849:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1850_ADR1850;
		 pARhsValue1849_ARV1849:=myrec;
		END;
	FUNCTION pADyadicValue1843_ADV1843:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pAMonadicValue1845_AMV1845;
		myrec^.arg2:=pARhsValue1849_ARV1849;
		myrec^.fn:=pAIdentifierDyadic1844_AID1844;
		 pADyadicValue1843_ADV1843:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs1838_ACR1838:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType1839_APT1839;
		myrec^.arg2:=pADyadicValue1843_ADV1843;
		 pACastRhs1838_ACR1838:=myrec;
		END;
	FUNCTION pARhsValue1837_ARV1837:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs1838_ACR1838;
		 pARhsValue1837_ARV1837:=myrec;
		END;
	FUNCTION pADyadicValue1833_ADV1833:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue1835_ALV1835;
		myrec^.arg2:=pARhsValue1837_ARV1837;
		myrec^.fn:=pAPushDyadic1834_APD1834;
		 pADyadicValue1833_ADV1833:=myrec;
		END;
	FUNCTION pAValueMeaning1832_AVM1832:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue1833_ADV1833;
		 pAValueMeaning1832_AVM1832:=myrec;
		END;
	FUNCTION pAAssemblypattern1854_AA1854:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'  DWORD[esp] ,' );
		pappendp(list,1);
		pAAssemblypattern1854_AA1854:=list;
		END;
	FUNCTION pAAssemblesto1853_AA1853:pprintlist;
	begin
		pAAssemblesto1853_AA1853:=pAAssemblypattern1854_AA1854;
		END;
	FUNCTION pASideeffects1858_AS1858:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1858_AS1858:=nil;
		 pASideeffects1858_AS1858:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1859_AUP1859:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1859_AUP1859:=nil;
		 pAUnconditionalPrecond1859_AUP1859:=myrec;
		END;
	FUNCTION SMR_SMR:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patreg_;
		params^[0]:=patnonmultoperator_;
		paramcount:=3;
		meaning:=pAValueMeaning1832_AVM1832;
		matchedAssembler:=pAAssemblesto1853_AA1853;
		END;
		SMR_SMR:=myrec;
	END;
	FUNCTION pATypeid1862_AT1862:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ shiftop  ilcg.pattern@4c02d4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1862_AT1862:=myrec;
		END;
	FUNCTION pATypeid1864_AT1864:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ shiftcountreg  ilcg.pattern@43ca4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1864_AT1864:=myrec;
		END;
	FUNCTION pAPushDyadic1867_APD1867:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic1867_APD1867:=myrec;
		END;
	FUNCTION pAIdLoc1869_AIL1869:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc1869_AIL1869:=myrec;
		END;
	FUNCTION pALocValue1868_ALV1868:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1869_AIL1869;
		 pALocValue1868_ALV1868:=myrec;
		END;
	FUNCTION pAIdentifierDyadic1871_AID1871:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic1871_AID1871:=myrec;
		END;
	FUNCTION pAPopMonadic1873_APM1873:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic1873_APM1873:=myrec;
		END;
	FUNCTION pAIdLoc1875_AIL1875:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc1875_AIL1875:=myrec;
		END;
	FUNCTION pALocValue1874_ALV1874:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1875_AIL1875;
		 pALocValue1874_ALV1874:=myrec;
		END;
	FUNCTION pAMonadicValue1872_AMV1872:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue1874_ALV1874;
		myrec^.fn:=pAPopMonadic1873_APM1873;
		 pAMonadicValue1872_AMV1872:=myrec;
		END;
	FUNCTION pAIdLoc1879_AIL1879:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc1879_AIL1879:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1878_AR1878:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1879_AIL1879;
		 pARefval1878_AR1878:=myrec;
		END;
	FUNCTION pADerefRhs1877_ADR1877:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1878_AR1878;
		 pADerefRhs1877_ADR1877:=myrec;
		END;
	FUNCTION pARhsValue1876_ARV1876:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1877_ADR1877;
		 pARhsValue1876_ARV1876:=myrec;
		END;
	FUNCTION pADyadicValue1870_ADV1870:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pAMonadicValue1872_AMV1872;
		myrec^.arg2:=pARhsValue1876_ARV1876;
		myrec^.fn:=pAIdentifierDyadic1871_AID1871;
		 pADyadicValue1870_ADV1870:=myrec;
		END;
	FUNCTION pADyadicValue1866_ADV1866:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue1868_ALV1868;
		myrec^.arg2:=pADyadicValue1870_ADV1870;
		myrec^.fn:=pAPushDyadic1867_APD1867;
		 pADyadicValue1866_ADV1866:=myrec;
		END;
	FUNCTION pAValueMeaning1865_AVM1865:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue1866_ADV1866;
		 pAValueMeaning1865_AVM1865:=myrec;
		END;
	FUNCTION pAAssemblypattern1881_AA1881:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'xchg eax, [esp]\n' );
		pappends(list,'sh' );
		pappendp(list,0);
		pappends(list,'  eax ,cl' );
		pappends(list,'\n xchg eax,[esp]' );
		pAAssemblypattern1881_AA1881:=list;
		END;
	FUNCTION pAAssemblesto1880_AA1880:pprintlist;
	begin
		pAAssemblesto1880_AA1880:=pAAssemblypattern1881_AA1881;
		END;
	FUNCTION pASideeffects1887_AS1887:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1887_AS1887:=nil;
		 pASideeffects1887_AS1887:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1888_AUP1888:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1888_AUP1888:=nil;
		 pAUnconditionalPrecond1888_AUP1888:=myrec;
		END;
	FUNCTION SMRSHIFT_SMRSHIFT:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patshiftcountreg_;
		params^[0]:=patshiftop_;
		paramcount:=3;
		meaning:=pAValueMeaning1865_AVM1865;
		matchedAssembler:=pAAssemblesto1880_AA1880;
		END;
		SMRSHIFT_SMRSHIFT:=myrec;
	END;
	FUNCTION pATypeid1891_AT1891:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ nonmultoperator  ilcg.pattern@145582}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1891_AT1891:=myrec;
		END;
	FUNCTION pATypeid1893_AT1893:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1893_AT1893:=myrec;
		END;
	FUNCTION pAPushDyadic1896_APD1896:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic1896_APD1896:=myrec;
		END;
	FUNCTION pAIdLoc1898_AIL1898:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc1898_AIL1898:=myrec;
		END;
	FUNCTION pALocValue1897_ALV1897:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1898_AIL1898;
		 pALocValue1897_ALV1897:=myrec;
		END;
	FUNCTION pAOctetFormat1903_AOF1903:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat1903_AOF1903:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype1902_AFP1902:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype1902_AFP1902:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1901_APT1901:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAPredeclaredtypeType1901_APT1901:=myrec;
		END;
	FUNCTION pAIdentifierDyadic1905_AID1905:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic1905_AID1905:=myrec;
		END;
	FUNCTION pAPopMonadic1907_APM1907:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic1907_APM1907:=myrec;
		END;
	FUNCTION pAIdLoc1909_AIL1909:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc1909_AIL1909:=myrec;
		END;
	FUNCTION pALocValue1908_ALV1908:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1909_AIL1909;
		 pALocValue1908_ALV1908:=myrec;
		END;
	FUNCTION pAMonadicValue1906_AMV1906:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue1908_ALV1908;
		myrec^.fn:=pAPopMonadic1907_APM1907;
		 pAMonadicValue1906_AMV1906:=myrec;
		END;
	FUNCTION pAIdLoc1913_AIL1913:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc1913_AIL1913:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1912_AR1912:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1913_AIL1913;
		 pARefval1912_AR1912:=myrec;
		END;
	FUNCTION pADerefRhs1911_ADR1911:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1912_AR1912;
		 pADerefRhs1911_ADR1911:=myrec;
		END;
	FUNCTION pARhsValue1910_ARV1910:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1911_ADR1911;
		 pARhsValue1910_ARV1910:=myrec;
		END;
	FUNCTION pADyadicValue1904_ADV1904:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pAMonadicValue1906_AMV1906;
		myrec^.arg2:=pARhsValue1910_ARV1910;
		myrec^.fn:=pAIdentifierDyadic1905_AID1905;
		 pADyadicValue1904_ADV1904:=myrec;
		END;
		(*! try to cast to type: octet*)
	FUNCTION pACastRhs1900_ACR1900:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType1901_APT1901;
		myrec^.arg2:=pADyadicValue1904_ADV1904;
		 pACastRhs1900_ACR1900:=myrec;
		END;
	FUNCTION pARhsValue1899_ARV1899:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs1900_ACR1900;
		 pARhsValue1899_ARV1899:=myrec;
		END;
	FUNCTION pADyadicValue1895_ADV1895:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue1897_ALV1897;
		myrec^.arg2:=pARhsValue1899_ARV1899;
		myrec^.fn:=pAPushDyadic1896_APD1896;
		 pADyadicValue1895_ADV1895:=myrec;
		END;
	FUNCTION pAValueMeaning1894_AVM1894:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue1895_ADV1895;
		 pAValueMeaning1894_AVM1894:=myrec;
		END;
	FUNCTION pAAssemblypattern1915_AA1915:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'  byte[esp] ,' );
		pappendp(list,1);
		pAAssemblypattern1915_AA1915:=list;
		END;
	FUNCTION pAAssemblesto1914_AA1914:pprintlist;
	begin
		pAAssemblesto1914_AA1914:=pAAssemblypattern1915_AA1915;
		END;
	FUNCTION pASideeffects1919_AS1919:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1919_AS1919:=nil;
		 pASideeffects1919_AS1919:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1920_AUP1920:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1920_AUP1920:=nil;
		 pAUnconditionalPrecond1920_AUP1920:=myrec;
		END;
	FUNCTION BSMR_BSMR:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbreg_;
		params^[0]:=patnonmultoperator_;
		paramcount:=3;
		meaning:=pAValueMeaning1894_AVM1894;
		matchedAssembler:=pAAssemblesto1914_AA1914;
		END;
		BSMR_BSMR:=myrec;
	END;
	FUNCTION pATypeid1923_AT1923:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1923_AT1923:=myrec;
		END;
	FUNCTION pAIdLoc1927_AIL1927:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1927_AIL1927:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1926_AR1926:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1927_AIL1927;
		 pARefval1926_AR1926:=myrec;
		END;
	FUNCTION pASigned1933_AS1933:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned1933_AS1933:=myrec;
		END;
	FUNCTION pASignedTformat1932_AST1932:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned1933_AS1933;
		 pASignedTformat1932_AST1932:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype1931_ATP1931:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype1931_ATP1931:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType1930_APT1930:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType1930_APT1930:=myrec;
		END;
	FUNCTION pAPlusDyadic1935_APD1935:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic1935_APD1935:=myrec;
		END;
	FUNCTION pAPopMonadic1937_APM1937:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic1937_APM1937:=myrec;
		END;
	FUNCTION pAIdLoc1939_AIL1939:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc1939_AIL1939:=myrec;
		END;
	FUNCTION pALocValue1938_ALV1938:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1939_AIL1939;
		 pALocValue1938_ALV1938:=myrec;
		END;
	FUNCTION pAMonadicValue1936_AMV1936:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue1938_ALV1938;
		myrec^.fn:=pAPopMonadic1937_APM1937;
		 pAMonadicValue1936_AMV1936:=myrec;
		END;
	FUNCTION pAIdLoc1943_AIL1943:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1943_AIL1943:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1942_AR1942:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1943_AIL1943;
		 pARefval1942_AR1942:=myrec;
		END;
	FUNCTION pADerefRhs1941_ADR1941:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1942_AR1942;
		 pADerefRhs1941_ADR1941:=myrec;
		END;
	FUNCTION pARhsValue1940_ARV1940:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1941_ADR1941;
		 pARhsValue1940_ARV1940:=myrec;
		END;
	FUNCTION pADyadicValue1934_ADV1934:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pAMonadicValue1936_AMV1936;
		myrec^.arg2:=pARhsValue1940_ARV1940;
		myrec^.fn:=pAPlusDyadic1935_APD1935;
		 pADyadicValue1934_ADV1934:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs1929_ACR1929:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType1930_APT1930;
		myrec^.arg2:=pADyadicValue1934_ADV1934;
		 pACastRhs1929_ACR1929:=myrec;
		END;
	FUNCTION pARhsValue1928_ARV1928:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs1929_ACR1929;
		 pARhsValue1928_ARV1928:=myrec;
		END;
	FUNCTION pAAssign1925_AA1925:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue1928_ARV1928;
		myrec^.dest:=pARefval1926_AR1926;
		 pAAssign1925_AA1925:=myrec;
		END;
	FUNCTION pAAssignMeaning1924_AAM1924:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign1925_AA1925;
		 pAAssignMeaning1924_AAM1924:=myrec;
		END;
	FUNCTION pAAssemblypattern1945_AA1945:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'add ' );
		pappendp(list,0);
		pappends(list,',DWORD[esp] \n add esp,4' );
		pAAssemblypattern1945_AA1945:=list;
		END;
	FUNCTION pAAssemblesto1944_AA1944:pprintlist;
	begin
		pAAssemblesto1944_AA1944:=pAAssemblypattern1945_AA1945;
		END;
	FUNCTION pASideeffects1949_AS1949:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1949_AS1949:=nil;
		 pASideeffects1949_AS1949:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1950_AUP1950:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1950_AUP1950:=nil;
		 pAUnconditionalPrecond1950_AUP1950:=myrec;
		END;
	FUNCTION SMRADD_SMRADD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		paramcount:=2;
		meaning:=pAAssignMeaning1924_AAM1924;
		matchedAssembler:=pAAssemblesto1944_AA1944;
		END;
		SMRADD_SMRADD:=myrec;
	END;
	FUNCTION pATypeid1953_AT1953:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ nonmultoperator  ilcg.pattern@145582}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1953_AT1953:=myrec;
		END;
	FUNCTION pATypeid1955_AT1955:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1955_AT1955:=myrec;
		END;
	FUNCTION pAPushDyadic1960_APD1960:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic1960_APD1960:=myrec;
		END;
	FUNCTION pAIdLoc1962_AIL1962:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc1962_AIL1962:=myrec;
		END;
	FUNCTION pALocValue1961_ALV1961:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1962_AIL1962;
		 pALocValue1961_ALV1961:=myrec;
		END;
	FUNCTION pATypeid1968_AT1968:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@56b049}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid1968_AT1968:=myrec;
		END;
	FUNCTION pATypeidType1967_ATT1967:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid1968_AT1968;
		 pATypeidType1967_ATT1967:=myrec;
		END;
	FUNCTION pAReference1966_AR1966:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType1967_ATT1967;
		 pAReference1966_AR1966:=myrec;
		END;
	FUNCTION pAReftypeType1965_ART1965:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference1966_AR1966;
		 pAReftypeType1965_ART1965:=myrec;
		END;
	FUNCTION pAIdentifierDyadic1970_AID1970:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic1970_AID1970:=myrec;
		END;
	FUNCTION pAPopMonadic1972_APM1972:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic1972_APM1972:=myrec;
		END;
	FUNCTION pAIdLoc1974_AIL1974:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc1974_AIL1974:=myrec;
		END;
	FUNCTION pALocValue1973_ALV1973:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1974_AIL1974;
		 pALocValue1973_ALV1973:=myrec;
		END;
	FUNCTION pAMonadicValue1971_AMV1971:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue1973_ALV1973;
		myrec^.fn:=pAPopMonadic1972_APM1972;
		 pAMonadicValue1971_AMV1971:=myrec;
		END;
	FUNCTION pAIdLoc1978_AIL1978:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc1978_AIL1978:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1977_AR1977:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1978_AIL1978;
		 pARefval1977_AR1977:=myrec;
		END;
	FUNCTION pADerefRhs1976_ADR1976:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1977_AR1977;
		 pADerefRhs1976_ADR1976:=myrec;
		END;
	FUNCTION pARhsValue1975_ARV1975:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1976_ADR1976;
		 pARhsValue1975_ARV1975:=myrec;
		END;
	FUNCTION pADyadicValue1969_ADV1969:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pAMonadicValue1971_AMV1971;
		myrec^.arg2:=pARhsValue1975_ARV1975;
		myrec^.fn:=pAIdentifierDyadic1970_AID1970;
		 pADyadicValue1969_ADV1969:=myrec;
		END;
		(*! try to cast to type: ref t*)
	FUNCTION pACastRhs1964_ACR1964:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType1965_ART1965;
		myrec^.arg2:=pADyadicValue1969_ADV1969;
		 pACastRhs1964_ACR1964:=myrec;
		END;
	FUNCTION pARhsValue1963_ARV1963:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs1964_ACR1964;
		 pARhsValue1963_ARV1963:=myrec;
		END;
	FUNCTION pADyadicValue1959_ADV1959:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue1961_ALV1961;
		myrec^.arg2:=pARhsValue1963_ARV1963;
		myrec^.fn:=pAPushDyadic1960_APD1960;
		 pADyadicValue1959_ADV1959:=myrec;
		END;
	FUNCTION pAValueMeaning1958_AVM1958:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue1959_ADV1959;
		 pAValueMeaning1958_AVM1958:=myrec;
		END;
	FUNCTION pAAssemblypattern1980_AA1980:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'  DWORD[esp] ,' );
		pappendp(list,1);
		pAAssemblypattern1980_AA1980:=list;
		END;
	FUNCTION pAAssemblesto1979_AA1979:pprintlist;
	begin
		pAAssemblesto1979_AA1979:=pAAssemblypattern1980_AA1980;
		END;
	FUNCTION pASideeffects1984_AS1984:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects1984_AS1984:=nil;
		 pASideeffects1984_AS1984:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond1985_AUP1985:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond1985_AUP1985:=nil;
		 pAUnconditionalPrecond1985_AUP1985:=myrec;
		END;
	FUNCTION SMRP_SMRP:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patreg_;
		params^[2]:=typeparam;
		params^[0]:=patnonmultoperator_;
		paramcount:=4;
		meaning:=pAValueMeaning1958_AVM1958;
		matchedAssembler:=pAAssemblesto1979_AA1979;
		END;
		SMRP_SMRP:=myrec;
	END;
	FUNCTION pATypeid1988_AT1988:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ dpushreg  ilcg.pattern@5562b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid1988_AT1988:=myrec;
		END;
	FUNCTION pAPushDyadic1991_APD1991:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic1991_APD1991:=myrec;
		END;
	FUNCTION pAIdLoc1993_AIL1993:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc1993_AIL1993:=myrec;
		END;
	FUNCTION pALocValue1992_ALV1992:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1993_AIL1993;
		 pALocValue1992_ALV1992:=myrec;
		END;
	FUNCTION pAIdLoc1997_AIL1997:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc1997_AIL1997:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval1996_AR1996:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc1997_AIL1997;
		 pARefval1996_AR1996:=myrec;
		END;
	FUNCTION pADerefRhs1995_ADR1995:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval1996_AR1996;
		 pADerefRhs1995_ADR1995:=myrec;
		END;
	FUNCTION pARhsValue1994_ARV1994:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs1995_ADR1995;
		 pARhsValue1994_ARV1994:=myrec;
		END;
	FUNCTION pADyadicValue1990_ADV1990:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue1992_ALV1992;
		myrec^.arg2:=pARhsValue1994_ARV1994;
		myrec^.fn:=pAPushDyadic1991_APD1991;
		 pADyadicValue1990_ADV1990:=myrec;
		END;
	FUNCTION pAValueMeaning1989_AVM1989:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue1990_ADV1990;
		 pAValueMeaning1989_AVM1989:=myrec;
		END;
	FUNCTION pAAssemblypattern1999_AA1999:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'push ' );
		pappendp(list,0);
		pAAssemblypattern1999_AA1999:=list;
		END;
	FUNCTION pAAssemblesto1998_AA1998:pprintlist;
	begin
		pAAssemblesto1998_AA1998:=pAAssemblypattern1999_AA1999;
		END;
	FUNCTION pASideeffects2002_AS2002:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2002_AS2002:=nil;
		 pASideeffects2002_AS2002:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2003_AUP2003:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2003_AUP2003:=nil;
		 pAUnconditionalPrecond2003_AUP2003:=myrec;
		END;
	FUNCTION RPUSH_RPUSH:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patdpushreg_;
		paramcount:=2;
		meaning:=pAValueMeaning1989_AVM1989;
		matchedAssembler:=pAAssemblesto1998_AA1998;
		END;
		RPUSH_RPUSH:=myrec;
	END;
	FUNCTION pATypeid2006_AT2006:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ureg  ilcg.pattern@56182f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2006_AT2006:=myrec;
		END;
	FUNCTION pAPushDyadic2009_APD2009:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic2009_APD2009:=myrec;
		END;
	FUNCTION pAIdLoc2011_AIL2011:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2011_AIL2011:=myrec;
		END;
	FUNCTION pALocValue2010_ALV2010:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2011_AIL2011;
		 pALocValue2010_ALV2010:=myrec;
		END;
	FUNCTION pAInt64Signed2017_AI64S2017:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64;
		 pAInt64Signed2017_AI64S2017:=myrec;
		END;
	FUNCTION pASignedTformat2016_AST2016:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt64Signed2017_AI64S2017;
		 pASignedTformat2016_AST2016:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype2015_ATP2015:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64 ;
		 pATformatPredeclaredtype2015_ATP2015:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2014_APT2014:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64 ;
		 pAPredeclaredtypeType2014_APT2014:=myrec;
		END;
	FUNCTION pAExtendMonadic2019_AEM2019:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpEXTEND;
		 pAExtendMonadic2019_AEM2019:=myrec;
		END;
	FUNCTION pAIdLoc2023_AIL2023:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2023_AIL2023:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2022_AR2022:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2023_AIL2023;
		 pARefval2022_AR2022:=myrec;
		END;
	FUNCTION pADerefRhs2021_ADR2021:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2022_AR2022;
		 pADerefRhs2021_ADR2021:=myrec;
		END;
	FUNCTION pARhsValue2020_ARV2020:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2021_ADR2021;
		 pARhsValue2020_ARV2020:=myrec;
		END;
	FUNCTION pAMonadicValue2018_AMV2018:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue2020_ARV2020;
		myrec^.fn:=pAExtendMonadic2019_AEM2019;
		 pAMonadicValue2018_AMV2018:=myrec;
		END;
		(*! try to cast to type: int64*)
	FUNCTION pACastRhs2013_ACR2013:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2014_APT2014;
		myrec^.arg2:=pAMonadicValue2018_AMV2018;
		 pACastRhs2013_ACR2013:=myrec;
		END;
	FUNCTION pARhsValue2012_ARV2012:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2013_ACR2013;
		 pARhsValue2012_ARV2012:=myrec;
		END;
	FUNCTION pADyadicValue2008_ADV2008:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue2010_ALV2010;
		myrec^.arg2:=pARhsValue2012_ARV2012;
		myrec^.fn:=pAPushDyadic2009_APD2009;
		 pADyadicValue2008_ADV2008:=myrec;
		END;
	FUNCTION pAValueMeaning2007_AVM2007:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue2008_ADV2008;
		 pAValueMeaning2007_AVM2007:=myrec;
		END;
	FUNCTION pAAssemblypattern2025_AA2025:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,' push dword 0 ; extend ' );
		pappendp(list,0);
		pappends(list,' to 64' );
		pappends(list,'\n push ' );
		pappendp(list,0);
		pAAssemblypattern2025_AA2025:=list;
		END;
	FUNCTION pAAssemblesto2024_AA2024:pprintlist;
	begin
		pAAssemblesto2024_AA2024:=pAAssemblypattern2025_AA2025;
		END;
	FUNCTION pASideeffects2031_AS2031:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2031_AS2031:=nil;
		 pASideeffects2031_AS2031:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2032_AUP2032:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2032_AUP2032:=nil;
		 pAUnconditionalPrecond2032_AUP2032:=myrec;
		END;
	FUNCTION RPUSHE_RPUSHE:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patureg_;
		paramcount:=2;
		meaning:=pAValueMeaning2007_AVM2007;
		matchedAssembler:=pAAssemblesto2024_AA2024;
		END;
		RPUSHE_RPUSHE:=myrec;
	END;
	FUNCTION pATypeid2035_AT2035:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ dpushreg  ilcg.pattern@5562b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2035_AT2035:=myrec;
		END;
	FUNCTION pATypeid2044_AT2044:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@44ac5e}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid2044_AT2044:=myrec;
		END;
	FUNCTION pATypeidType2043_ATT2043:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2044_AT2044;
		 pATypeidType2043_ATT2043:=myrec;
		END;
	FUNCTION pAReference2042_AR2042:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType2043_ATT2043;
		 pAReference2042_AR2042:=myrec;
		END;
	FUNCTION pAReftypeType2041_ART2041:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference2042_AR2042;
		 pAReftypeType2041_ART2041:=myrec;
		END;
	FUNCTION pAIdLoc2045_AIL2045:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2045_AIL2045:=myrec;
		END;
	FUNCTION pARefcastRefval2040_ARR2040:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType2041_ART2041;
		myrec^.arg2:=pAIdLoc2045_AIL2045;
		 pARefcastRefval2040_ARR2040:=myrec;
		END;
	FUNCTION pATypeid2049_AT2049:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@44ac5e}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid2049_AT2049:=myrec;
		END;
	FUNCTION pATypeidType2048_ATT2048:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2049_AT2049;
		 pATypeidType2048_ATT2048:=myrec;
		END;
	FUNCTION pAPopMonadic2051_APM2051:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic2051_APM2051:=myrec;
		END;
	FUNCTION pAIdLoc2053_AIL2053:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2053_AIL2053:=myrec;
		END;
	FUNCTION pALocValue2052_ALV2052:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2053_AIL2053;
		 pALocValue2052_ALV2052:=myrec;
		END;
	FUNCTION pAMonadicValue2050_AMV2050:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue2052_ALV2052;
		myrec^.fn:=pAPopMonadic2051_APM2051;
		 pAMonadicValue2050_AMV2050:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs2047_ACR2047:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType2048_ATT2048;
		myrec^.arg2:=pAMonadicValue2050_AMV2050;
		 pACastRhs2047_ACR2047:=myrec;
		END;
	FUNCTION pARhsValue2046_ARV2046:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2047_ACR2047;
		 pARhsValue2046_ARV2046:=myrec;
		END;
	FUNCTION pAAssign2039_AA2039:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue2046_ARV2046;
		myrec^.dest:=pARefcastRefval2040_ARR2040;
		 pAAssign2039_AA2039:=myrec;
		END;
	FUNCTION pAAssignMeaning2038_AAM2038:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2039_AA2039;
		 pAAssignMeaning2038_AAM2038:=myrec;
		END;
	FUNCTION pAAssemblypattern2055_AA2055:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'pop  ' );
		pappendp(list,0);
		pAAssemblypattern2055_AA2055:=list;
		END;
	FUNCTION pAAssemblesto2054_AA2054:pprintlist;
	begin
		pAAssemblesto2054_AA2054:=pAAssemblypattern2055_AA2055;
		END;
	FUNCTION pASideeffects2058_AS2058:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2058_AS2058:=nil;
		 pASideeffects2058_AS2058:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2059_AUP2059:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2059_AUP2059:=nil;
		 pAUnconditionalPrecond2059_AUP2059:=myrec;
		END;
	FUNCTION RPOP_RPOP:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=typeparam;
		params^[0]:=patdpushreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning2038_AAM2038;
		matchedAssembler:=pAAssemblesto2054_AA2054;
		END;
		RPOP_RPOP:=myrec;
	END;
	FUNCTION pATypeid2062_AT2062:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bureg  ilcg.pattern@40627c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2062_AT2062:=myrec;
		END;
	FUNCTION pAPushDyadic2065_APD2065:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic2065_APD2065:=myrec;
		END;
	FUNCTION pAIdLoc2067_AIL2067:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2067_AIL2067:=myrec;
		END;
	FUNCTION pALocValue2066_ALV2066:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2067_AIL2067;
		 pALocValue2066_ALV2066:=myrec;
		END;
	FUNCTION pAIdLoc2071_AIL2071:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2071_AIL2071:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2070_AR2070:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2071_AIL2071;
		 pARefval2070_AR2070:=myrec;
		END;
	FUNCTION pADerefRhs2069_ADR2069:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2070_AR2070;
		 pADerefRhs2069_ADR2069:=myrec;
		END;
	FUNCTION pARhsValue2068_ARV2068:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2069_ADR2069;
		 pARhsValue2068_ARV2068:=myrec;
		END;
	FUNCTION pADyadicValue2064_ADV2064:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue2066_ALV2066;
		myrec^.arg2:=pARhsValue2068_ARV2068;
		myrec^.fn:=pAPushDyadic2065_APD2065;
		 pADyadicValue2064_ADV2064:=myrec;
		END;
	FUNCTION pAValueMeaning2063_AVM2063:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue2064_ADV2064;
		 pAValueMeaning2063_AVM2063:=myrec;
		END;
	FUNCTION pAAssemblypattern2073_AA2073:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'push dword 0\n mov BYTE[esp],' );
		pappendp(list,0);
		pAAssemblypattern2073_AA2073:=list;
		END;
	FUNCTION pAAssemblesto2072_AA2072:pprintlist;
	begin
		pAAssemblesto2072_AA2072:=pAAssemblypattern2073_AA2073;
		END;
	FUNCTION pASideeffects2076_AS2076:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2076_AS2076:=nil;
		 pASideeffects2076_AS2076:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2077_AUP2077:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2077_AUP2077:=nil;
		 pAUnconditionalPrecond2077_AUP2077:=myrec;
		END;
	FUNCTION BPUSH_BPUSH:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patbureg_;
		paramcount:=2;
		meaning:=pAValueMeaning2063_AVM2063;
		matchedAssembler:=pAAssemblesto2072_AA2072;
		END;
		BPUSH_BPUSH:=myrec;
	END;
	FUNCTION pATypeid2080_AT2080:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baddrmode  ilcg.pattern@52f73e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2080_AT2080:=myrec;
		END;
	FUNCTION pAPushDyadic2083_APD2083:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic2083_APD2083:=myrec;
		END;
	FUNCTION pAIdLoc2085_AIL2085:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2085_AIL2085:=myrec;
		END;
	FUNCTION pALocValue2084_ALV2084:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2085_AIL2085;
		 pALocValue2084_ALV2084:=myrec;
		END;
	FUNCTION pAInt8Signed2091_AI8S2091:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed2091_AI8S2091:=myrec;
		END;
	FUNCTION pASignedTformat2090_AST2090:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed2091_AI8S2091;
		 pASignedTformat2090_AST2090:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype2089_ATP2089:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype2089_ATP2089:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2088_APT2088:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType2088_APT2088:=myrec;
		END;
	FUNCTION pAIdLoc2095_AIL2095:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2095_AIL2095:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2094_AR2094:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2095_AIL2095;
		 pARefval2094_AR2094:=myrec;
		END;
	FUNCTION pADerefRhs2093_ADR2093:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2094_AR2094;
		 pADerefRhs2093_ADR2093:=myrec;
		END;
	FUNCTION pARhsValue2092_ARV2092:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2093_ADR2093;
		 pARhsValue2092_ARV2092:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs2087_ACR2087:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2088_APT2088;
		myrec^.arg2:=pARhsValue2092_ARV2092;
		 pACastRhs2087_ACR2087:=myrec;
		END;
	FUNCTION pARhsValue2086_ARV2086:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2087_ACR2087;
		 pARhsValue2086_ARV2086:=myrec;
		END;
	FUNCTION pADyadicValue2082_ADV2082:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue2084_ALV2084;
		myrec^.arg2:=pARhsValue2086_ARV2086;
		myrec^.fn:=pAPushDyadic2083_APD2083;
		 pADyadicValue2082_ADV2082:=myrec;
		END;
	FUNCTION pAValueMeaning2081_AVM2081:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue2082_ADV2082;
		 pAValueMeaning2081_AVM2081:=myrec;
		END;
	FUNCTION pAAssemblypattern2097_AA2097:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'push esi\n movsx esi,' );
		pappendp(list,0);
		pappends(list,'\n xchg esi,[esp]' );
		pAAssemblypattern2097_AA2097:=list;
		END;
	FUNCTION pAAssemblesto2096_AA2096:pprintlist;
	begin
		pAAssemblesto2096_AA2096:=pAAssemblypattern2097_AA2097;
		END;
	FUNCTION pASideeffects2101_AS2101:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2101_AS2101:=nil;
		 pASideeffects2101_AS2101:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2102_AUP2102:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2102_AUP2102:=nil;
		 pAUnconditionalPrecond2102_AUP2102:=myrec;
		END;
	FUNCTION BSPUSH_BSPUSH:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patbaddrmode_;
		paramcount:=2;
		meaning:=pAValueMeaning2081_AVM2081;
		matchedAssembler:=pAAssemblesto2096_AA2096;
		END;
		BSPUSH_BSPUSH:=myrec;
	END;
	FUNCTION pATypeid2105_AT2105:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bireg  ilcg.pattern@cc53e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2105_AT2105:=myrec;
		END;
	FUNCTION pAIdLoc2109_AIL2109:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2109_AIL2109:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2108_AR2108:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2109_AIL2109;
		 pARefval2108_AR2108:=myrec;
		END;
	FUNCTION pAPopMonadic2111_APM2111:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic2111_APM2111:=myrec;
		END;
	FUNCTION pAIdLoc2113_AIL2113:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2113_AIL2113:=myrec;
		END;
	FUNCTION pALocValue2112_ALV2112:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2113_AIL2113;
		 pALocValue2112_ALV2112:=myrec;
		END;
	FUNCTION pAMonadicValue2110_AMV2110:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue2112_ALV2112;
		myrec^.fn:=pAPopMonadic2111_APM2111;
		 pAMonadicValue2110_AMV2110:=myrec;
		END;
	FUNCTION pAAssign2107_AA2107:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pAMonadicValue2110_AMV2110;
		myrec^.dest:=pARefval2108_AR2108;
		 pAAssign2107_AA2107:=myrec;
		END;
	FUNCTION pAAssignMeaning2106_AAM2106:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2107_AA2107;
		 pAAssignMeaning2106_AAM2106:=myrec;
		END;
	FUNCTION pAAssemblypattern2115_AA2115:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'mov  ' );
		pappendp(list,0);
		pappends(list,',BYTE[esp]\n add esp,4' );
		pAAssemblypattern2115_AA2115:=list;
		END;
	FUNCTION pAAssemblesto2114_AA2114:pprintlist;
	begin
		pAAssemblesto2114_AA2114:=pAAssemblypattern2115_AA2115;
		END;
	FUNCTION pASideeffects2119_AS2119:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2119_AS2119:=nil;
		 pASideeffects2119_AS2119:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2120_AUP2120:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2120_AUP2120:=nil;
		 pAUnconditionalPrecond2120_AUP2120:=myrec;
		END;
	FUNCTION BSPOP_BSPOP:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patbireg_;
		paramcount:=2;
		meaning:=pAAssignMeaning2106_AAM2106;
		matchedAssembler:=pAAssemblesto2114_AA2114;
		END;
		BSPOP_BSPOP:=myrec;
	END;
	FUNCTION pATypeid2123_AT2123:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bureg  ilcg.pattern@40627c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2123_AT2123:=myrec;
		END;
	FUNCTION pAIdLoc2127_AIL2127:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2127_AIL2127:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2126_AR2126:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2127_AIL2127;
		 pARefval2126_AR2126:=myrec;
		END;
	FUNCTION pAPopMonadic2129_APM2129:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic2129_APM2129:=myrec;
		END;
	FUNCTION pAIdLoc2131_AIL2131:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2131_AIL2131:=myrec;
		END;
	FUNCTION pALocValue2130_ALV2130:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2131_AIL2131;
		 pALocValue2130_ALV2130:=myrec;
		END;
	FUNCTION pAMonadicValue2128_AMV2128:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue2130_ALV2130;
		myrec^.fn:=pAPopMonadic2129_APM2129;
		 pAMonadicValue2128_AMV2128:=myrec;
		END;
	FUNCTION pAAssign2125_AA2125:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pAMonadicValue2128_AMV2128;
		myrec^.dest:=pARefval2126_AR2126;
		 pAAssign2125_AA2125:=myrec;
		END;
	FUNCTION pAAssignMeaning2124_AAM2124:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2125_AA2125;
		 pAAssignMeaning2124_AAM2124:=myrec;
		END;
	FUNCTION pAAssemblypattern2133_AA2133:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'mov  ' );
		pappendp(list,0);
		pappends(list,',BYTE[esp]\n add esp,4' );
		pAAssemblypattern2133_AA2133:=list;
		END;
	FUNCTION pAAssemblesto2132_AA2132:pprintlist;
	begin
		pAAssemblesto2132_AA2132:=pAAssemblypattern2133_AA2133;
		END;
	FUNCTION pASideeffects2137_AS2137:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2137_AS2137:=nil;
		 pASideeffects2137_AS2137:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2138_AUP2138:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2138_AUP2138:=nil;
		 pAUnconditionalPrecond2138_AUP2138:=myrec;
		END;
	FUNCTION BPOP_BPOP:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patbureg_;
		paramcount:=2;
		meaning:=pAAssignMeaning2124_AAM2124;
		matchedAssembler:=pAAssemblesto2132_AA2132;
		END;
		BPOP_BPOP:=myrec;
	END;
	FUNCTION pATypeid2141_AT2141:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ addrmode  ilcg.pattern@7a4076}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2141_AT2141:=myrec;
		END;
	FUNCTION pATypeid2152_AT2152:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@6674d6}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid2152_AT2152:=myrec;
		END;
	FUNCTION pATypeidType2151_ATT2151:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2152_AT2152;
		 pATypeidType2151_ATT2151:=myrec;
		END;
	FUNCTION pAReference2150_AR2150:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType2151_ATT2151;
		 pAReference2150_AR2150:=myrec;
		END;
	FUNCTION pAReftypeType2149_ART2149:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference2150_AR2150;
		 pAReftypeType2149_ART2149:=myrec;
		END;
	FUNCTION pAReference2148_AR2148:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAReftypeType2149_ART2149;
		 pAReference2148_AR2148:=myrec;
		END;
	FUNCTION pAReftypeType2147_ART2147:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference2148_AR2148;
		 pAReftypeType2147_ART2147:=myrec;
		END;
	FUNCTION pAIdLoc2153_AIL2153:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2153_AIL2153:=myrec;
		END;
	FUNCTION pARefcastRefval2146_ARR2146:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType2147_ART2147;
		myrec^.arg2:=pAIdLoc2153_AIL2153;
		 pARefcastRefval2146_ARR2146:=myrec;
		END;
	FUNCTION pAPopMonadic2155_APM2155:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic2155_APM2155:=myrec;
		END;
	FUNCTION pAIdLoc2157_AIL2157:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2157_AIL2157:=myrec;
		END;
	FUNCTION pALocValue2156_ALV2156:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2157_AIL2157;
		 pALocValue2156_ALV2156:=myrec;
		END;
	FUNCTION pAMonadicValue2154_AMV2154:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue2156_ALV2156;
		myrec^.fn:=pAPopMonadic2155_APM2155;
		 pAMonadicValue2154_AMV2154:=myrec;
		END;
	FUNCTION pAAssign2145_AA2145:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pAMonadicValue2154_AMV2154;
		myrec^.dest:=pARefcastRefval2146_ARR2146;
		 pAAssign2145_AA2145:=myrec;
		END;
	FUNCTION pAAssignMeaning2144_AAM2144:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2145_AA2145;
		 pAAssignMeaning2144_AAM2144:=myrec;
		END;
	FUNCTION pAAssemblypattern2159_AA2159:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'pop DWORD ' );
		pappendp(list,0);
		pAAssemblypattern2159_AA2159:=list;
		END;
	FUNCTION pAAssemblesto2158_AA2158:pprintlist;
	begin
		pAAssemblesto2158_AA2158:=pAAssemblypattern2159_AA2159;
		END;
	FUNCTION pASideeffects2162_AS2162:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2162_AS2162:=nil;
		 pASideeffects2162_AS2162:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2163_AUP2163:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2163_AUP2163:=nil;
		 pAUnconditionalPrecond2163_AUP2163:=myrec;
		END;
	FUNCTION REFPOP_REFPOP:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=typeparam;
		params^[0]:=pataddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning2144_AAM2144;
		matchedAssembler:=pAAssemblesto2158_AA2158;
		END;
		REFPOP_REFPOP:=myrec;
	END;
	FUNCTION pATypeid2166_AT2166:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2166_AT2166:=myrec;
		END;
	FUNCTION pASigned2175_AS2175:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned2175_AS2175:=myrec;
		END;
	FUNCTION pASignedTformat2174_AST2174:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned2175_AS2175;
		 pASignedTformat2174_AST2174:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype2173_ATP2173:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype2173_ATP2173:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2172_APT2172:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType2172_APT2172:=myrec;
		END;
	FUNCTION pAReference2171_AR2171:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType2172_APT2172;
		 pAReference2171_AR2171:=myrec;
		END;
	FUNCTION pAReftypeType2170_ART2170:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference2171_AR2171;
		 pAReftypeType2170_ART2170:=myrec;
		END;
	FUNCTION pAIdLoc2176_AIL2176:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2176_AIL2176:=myrec;
		END;
	FUNCTION pARefcastRefval2169_ARR2169:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType2170_ART2170;
		myrec^.arg2:=pAIdLoc2176_AIL2176;
		 pARefcastRefval2169_ARR2169:=myrec;
		END;
	FUNCTION pAPopMonadic2178_APM2178:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic2178_APM2178:=myrec;
		END;
	FUNCTION pAIdLoc2180_AIL2180:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2180_AIL2180:=myrec;
		END;
	FUNCTION pALocValue2179_ALV2179:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2180_AIL2180;
		 pALocValue2179_ALV2179:=myrec;
		END;
	FUNCTION pAMonadicValue2177_AMV2177:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue2179_ALV2179;
		myrec^.fn:=pAPopMonadic2178_APM2178;
		 pAMonadicValue2177_AMV2177:=myrec;
		END;
	FUNCTION pAAssign2168_AA2168:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pAMonadicValue2177_AMV2177;
		myrec^.dest:=pARefcastRefval2169_ARR2169;
		 pAAssign2168_AA2168:=myrec;
		END;
	FUNCTION pAAssignMeaning2167_AAM2167:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2168_AA2168;
		 pAAssignMeaning2167_AAM2167:=myrec;
		END;
	FUNCTION pAAssemblypattern2182_AA2182:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'pop DWORD ' );
		pappendp(list,0);
		pAAssemblypattern2182_AA2182:=list;
		END;
	FUNCTION pAAssemblesto2181_AA2181:pprintlist;
	begin
		pAAssemblesto2181_AA2181:=pAAssemblypattern2182_AA2182;
		END;
	FUNCTION pASideeffects2185_AS2185:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2185_AS2185:=nil;
		 pASideeffects2185_AS2185:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2186_AUP2186:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2186_AUP2186:=nil;
		 pAUnconditionalPrecond2186_AUP2186:=myrec;
		END;
	FUNCTION MEMPOP_MEMPOP:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmaddrmode_;
		paramcount:=2;
		meaning:=pAAssignMeaning2167_AAM2167;
		matchedAssembler:=pAAssemblesto2181_AA2181;
		END;
		MEMPOP_MEMPOP:=myrec;
	END;
	FUNCTION pATypeid2189_AT2189:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ offset  ilcg.pattern@331fd9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2189_AT2189:=myrec;
		END;
	FUNCTION pAPushDyadic2192_APD2192:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic2192_APD2192:=myrec;
		END;
	FUNCTION pAIdLoc2194_AIL2194:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2194_AIL2194:=myrec;
		END;
	FUNCTION pALocValue2193_ALV2193:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2194_AIL2194;
		 pALocValue2193_ALV2193:=myrec;
		END;
	FUNCTION pAIdLoc2196_AIL2196:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2196_AIL2196:=myrec;
		END;
	FUNCTION pALocValue2195_ALV2195:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2196_AIL2196;
		 pALocValue2195_ALV2195:=myrec;
		END;
	FUNCTION pADyadicValue2191_ADV2191:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue2193_ALV2193;
		myrec^.arg2:=pALocValue2195_ALV2195;
		myrec^.fn:=pAPushDyadic2192_APD2192;
		 pADyadicValue2191_ADV2191:=myrec;
		END;
	FUNCTION pAValueMeaning2190_AVM2190:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue2191_ADV2191;
		 pAValueMeaning2190_AVM2190:=myrec;
		END;
	FUNCTION pAAssemblypattern2198_AA2198:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'push DWORD ' );
		pappendp(list,0);
		pAAssemblypattern2198_AA2198:=list;
		END;
	FUNCTION pAAssemblesto2197_AA2197:pprintlist;
	begin
		pAAssemblesto2197_AA2197:=pAAssemblypattern2198_AA2198;
		END;
	FUNCTION pASideeffects2201_AS2201:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2201_AS2201:=nil;
		 pASideeffects2201_AS2201:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2202_AUP2202:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2202_AUP2202:=nil;
		 pAUnconditionalPrecond2202_AUP2202:=myrec;
		END;
	FUNCTION LITPUSH_LITPUSH:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patoffset_;
		paramcount:=2;
		meaning:=pAValueMeaning2190_AVM2190;
		matchedAssembler:=pAAssemblesto2197_AA2197;
		END;
		LITPUSH_LITPUSH:=myrec;
	END;
	FUNCTION pATypeid2205_AT2205:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2205_AT2205:=myrec;
		END;
	FUNCTION pAPushDyadic2208_APD2208:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic2208_APD2208:=myrec;
		END;
	FUNCTION pAIdLoc2210_AIL2210:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2210_AIL2210:=myrec;
		END;
	FUNCTION pALocValue2209_ALV2209:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2210_AIL2210;
		 pALocValue2209_ALV2209:=myrec;
		END;
	FUNCTION pAWordFormat2215_AWF2215:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword;
		 pAWordFormat2215_AWF2215:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype2214_AFP2214:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAFormatPredeclaredtype2214_AFP2214:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2213_APT2213:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAPredeclaredtypeType2213_APT2213:=myrec;
		END;
	FUNCTION pAIdLoc2219_AIL2219:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2219_AIL2219:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2218_AR2218:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2219_AIL2219;
		 pARefval2218_AR2218:=myrec;
		END;
	FUNCTION pADerefRhs2217_ADR2217:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2218_AR2218;
		 pADerefRhs2217_ADR2217:=myrec;
		END;
	FUNCTION pARhsValue2216_ARV2216:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2217_ADR2217;
		 pARhsValue2216_ARV2216:=myrec;
		END;
		(*! try to cast to type: word*)
	FUNCTION pACastRhs2212_ACR2212:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2213_APT2213;
		myrec^.arg2:=pARhsValue2216_ARV2216;
		 pACastRhs2212_ACR2212:=myrec;
		END;
	FUNCTION pARhsValue2211_ARV2211:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2212_ACR2212;
		 pARhsValue2211_ARV2211:=myrec;
		END;
	FUNCTION pADyadicValue2207_ADV2207:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue2209_ALV2209;
		myrec^.arg2:=pARhsValue2211_ARV2211;
		myrec^.fn:=pAPushDyadic2208_APD2208;
		 pADyadicValue2207_ADV2207:=myrec;
		END;
	FUNCTION pAValueMeaning2206_AVM2206:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue2207_ADV2207;
		 pAValueMeaning2206_AVM2206:=myrec;
		END;
	FUNCTION pAAssemblypattern2221_AA2221:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'push DWORD ' );
		pappendp(list,0);
		pAAssemblypattern2221_AA2221:=list;
		END;
	FUNCTION pAAssemblesto2220_AA2220:pprintlist;
	begin
		pAAssemblesto2220_AA2220:=pAAssemblypattern2221_AA2221;
		END;
	FUNCTION pASideeffects2224_AS2224:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2224_AS2224:=nil;
		 pASideeffects2224_AS2224:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2225_AUP2225:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2225_AUP2225:=nil;
		 pAUnconditionalPrecond2225_AUP2225:=myrec;
		END;
	FUNCTION MEMPUSH_MEMPUSH:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmaddrmode_;
		paramcount:=2;
		meaning:=pAValueMeaning2206_AVM2206;
		matchedAssembler:=pAAssemblesto2220_AA2220;
		END;
		MEMPUSH_MEMPUSH:=myrec;
	END;
	FUNCTION pATypeid2228_AT2228:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ eaform  ilcg.pattern@5a366c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2228_AT2228:=myrec;
		END;
	FUNCTION pAPushDyadic2231_APD2231:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic2231_APD2231:=myrec;
		END;
	FUNCTION pAIdLoc2233_AIL2233:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2233_AIL2233:=myrec;
		END;
	FUNCTION pALocValue2232_ALV2232:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2233_AIL2233;
		 pALocValue2232_ALV2232:=myrec;
		END;
	FUNCTION pADoublewordFormat2238_ADF2238:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdword;
		 pADoublewordFormat2238_ADF2238:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype2237_AFP2237:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAFormatPredeclaredtype2237_AFP2237:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2236_APT2236:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAPredeclaredtypeType2236_APT2236:=myrec;
		END;
	FUNCTION pADoublewordFormat2246_ADF2246:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdword;
		 pADoublewordFormat2246_ADF2246:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype2245_AFP2245:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAFormatPredeclaredtype2245_AFP2245:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2244_APT2244:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAPredeclaredtypeType2244_APT2244:=myrec;
		END;
	FUNCTION pAReference2243_AR2243:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType2244_APT2244;
		 pAReference2243_AR2243:=myrec;
		END;
	FUNCTION pAReftypeType2242_ART2242:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference2243_AR2243;
		 pAReftypeType2242_ART2242:=myrec;
		END;
	FUNCTION pAIdLoc2249_AIL2249:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2249_AIL2249:=myrec;
		END;
	FUNCTION pALocValue2248_ALV2248:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2249_AIL2249;
		 pALocValue2248_ALV2248:=myrec;
		END;
	FUNCTION pAMemoryLoc2247_AML2247:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pALocValue2248_ALV2248;
		 pAMemoryLoc2247_AML2247:=myrec;
		END;
	FUNCTION pARefcastRefval2241_ARR2241:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType2242_ART2242;
		myrec^.arg2:=pAMemoryLoc2247_AML2247;
		 pARefcastRefval2241_ARR2241:=myrec;
		END;
	FUNCTION pADerefRhs2240_ADR2240:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval2241_ARR2241;
		 pADerefRhs2240_ADR2240:=myrec;
		END;
	FUNCTION pARhsValue2239_ARV2239:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2240_ADR2240;
		 pARhsValue2239_ARV2239:=myrec;
		END;
		(*! try to cast to type: doubleword*)
	FUNCTION pACastRhs2235_ACR2235:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2236_APT2236;
		myrec^.arg2:=pARhsValue2239_ARV2239;
		 pACastRhs2235_ACR2235:=myrec;
		END;
	FUNCTION pARhsValue2234_ARV2234:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2235_ACR2235;
		 pARhsValue2234_ARV2234:=myrec;
		END;
	FUNCTION pADyadicValue2230_ADV2230:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue2232_ALV2232;
		myrec^.arg2:=pARhsValue2234_ARV2234;
		myrec^.fn:=pAPushDyadic2231_APD2231;
		 pADyadicValue2230_ADV2230:=myrec;
		END;
	FUNCTION pAValueMeaning2229_AVM2229:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue2230_ADV2230;
		 pAValueMeaning2229_AVM2229:=myrec;
		END;
	FUNCTION pAAssemblypattern2251_AA2251:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'push DWORD[' );
		pappendp(list,0);
		pappends(list,'+4]\n push DWORD[' );
		pappendp(list,0);
		pappends(list,']' );
		pAAssemblypattern2251_AA2251:=list;
		END;
	FUNCTION pAAssemblesto2250_AA2250:pprintlist;
	begin
		pAAssemblesto2250_AA2250:=pAAssemblypattern2251_AA2251;
		END;
	FUNCTION pASideeffects2257_AS2257:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2257_AS2257:=nil;
		 pASideeffects2257_AS2257:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2258_AUP2258:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2258_AUP2258:=nil;
		 pAUnconditionalPrecond2258_AUP2258:=myrec;
		END;
	FUNCTION DMEMPUSH_DMEMPUSH:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=pateaform_;
		paramcount:=2;
		meaning:=pAValueMeaning2229_AVM2229;
		matchedAssembler:=pAAssemblesto2250_AA2250;
		END;
		DMEMPUSH_DMEMPUSH:=myrec;
	END;
	FUNCTION pATypeid2261_AT2261:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ word32  ilcg.pattern@3b9829}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2261_AT2261:=myrec;
		END;
	FUNCTION pAPushDyadic2264_APD2264:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic2264_APD2264:=myrec;
		END;
	FUNCTION pAIdLoc2266_AIL2266:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2266_AIL2266:=myrec;
		END;
	FUNCTION pALocValue2265_ALV2265:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2266_AIL2266;
		 pALocValue2265_ALV2265:=myrec;
		END;
	FUNCTION pATypeid2273_AT2273:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@69493a}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid2273_AT2273:=myrec;
		END;
	FUNCTION pATypeidType2272_ATT2272:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2273_AT2273;
		 pATypeidType2272_ATT2272:=myrec;
		END;
	FUNCTION pAReference2271_AR2271:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType2272_ATT2272;
		 pAReference2271_AR2271:=myrec;
		END;
	FUNCTION pAReftypeType2270_ART2270:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference2271_AR2271;
		 pAReftypeType2270_ART2270:=myrec;
		END;
	FUNCTION pAPopMonadic2276_APM2276:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic2276_APM2276:=myrec;
		END;
	FUNCTION pAIdLoc2278_AIL2278:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2278_AIL2278:=myrec;
		END;
	FUNCTION pALocValue2277_ALV2277:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2278_AIL2278;
		 pALocValue2277_ALV2277:=myrec;
		END;
	FUNCTION pAMonadicValue2275_AMV2275:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue2277_ALV2277;
		myrec^.fn:=pAPopMonadic2276_APM2276;
		 pAMonadicValue2275_AMV2275:=myrec;
		END;
	FUNCTION pAMemoryLoc2274_AML2274:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pAMonadicValue2275_AMV2275;
		 pAMemoryLoc2274_AML2274:=myrec;
		END;
	FUNCTION pARefcastRefval2269_ARR2269:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType2270_ART2270;
		myrec^.arg2:=pAMemoryLoc2274_AML2274;
		 pARefcastRefval2269_ARR2269:=myrec;
		END;
	FUNCTION pADerefRhs2268_ADR2268:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval2269_ARR2269;
		 pADerefRhs2268_ADR2268:=myrec;
		END;
	FUNCTION pARhsValue2267_ARV2267:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2268_ADR2268;
		 pARhsValue2267_ARV2267:=myrec;
		END;
	FUNCTION pADyadicValue2263_ADV2263:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue2265_ALV2265;
		myrec^.arg2:=pARhsValue2267_ARV2267;
		myrec^.fn:=pAPushDyadic2264_APD2264;
		 pADyadicValue2263_ADV2263:=myrec;
		END;
	FUNCTION pAValueMeaning2262_AVM2262:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue2263_ADV2263;
		 pAValueMeaning2262_AVM2262:=myrec;
		END;
	FUNCTION pAAssemblypattern2280_AA2280:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'xchg DWORD[esp],eax\n  mov eax,DWORD[eax]\n  xchg DWORD[esp],eax' );
		pAAssemblypattern2280_AA2280:=list;
		END;
	FUNCTION pAAssemblesto2279_AA2279:pprintlist;
	begin
		pAAssemblesto2279_AA2279:=pAAssemblypattern2280_AA2280;
		END;
	FUNCTION pASideeffects2282_AS2282:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2282_AS2282:=nil;
		 pASideeffects2282_AS2282:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2283_AUP2283:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2283_AUP2283:=nil;
		 pAUnconditionalPrecond2283_AUP2283:=myrec;
		END;
	FUNCTION STACKLOAD_STACKLOAD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patword32_32;
		paramcount:=2;
		meaning:=pAValueMeaning2262_AVM2262;
		matchedAssembler:=pAAssemblesto2279_AA2279;
		END;
		STACKLOAD_STACKLOAD:=myrec;
	END;
	FUNCTION pATypeid2286_AT2286:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2286_AT2286:=myrec;
		END;
	FUNCTION pAPushDyadic2291_APD2291:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic2291_APD2291:=myrec;
		END;
	FUNCTION pAIdLoc2293_AIL2293:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2293_AIL2293:=myrec;
		END;
	FUNCTION pALocValue2292_ALV2292:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2293_AIL2293;
		 pALocValue2292_ALV2292:=myrec;
		END;
	FUNCTION pATypeid2299_AT2299:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@795cce}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid2299_AT2299:=myrec;
		END;
	FUNCTION pATypeidType2298_ATT2298:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2299_AT2299;
		 pATypeidType2298_ATT2298:=myrec;
		END;
	FUNCTION pAReference2297_AR2297:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType2298_ATT2298;
		 pAReference2297_AR2297:=myrec;
		END;
	FUNCTION pAReftypeType2296_ART2296:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference2297_AR2297;
		 pAReftypeType2296_ART2296:=myrec;
		END;
	FUNCTION pAIdLoc2303_AIL2303:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2303_AIL2303:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2302_AR2302:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2303_AIL2303;
		 pARefval2302_AR2302:=myrec;
		END;
	FUNCTION pADerefRhs2301_ADR2301:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2302_AR2302;
		 pADerefRhs2301_ADR2301:=myrec;
		END;
	FUNCTION pARhsValue2300_ARV2300:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2301_ADR2301;
		 pARhsValue2300_ARV2300:=myrec;
		END;
		(*! try to cast to type: ref t*)
	FUNCTION pACastRhs2295_ACR2295:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType2296_ART2296;
		myrec^.arg2:=pARhsValue2300_ARV2300;
		 pACastRhs2295_ACR2295:=myrec;
		END;
	FUNCTION pARhsValue2294_ARV2294:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2295_ACR2295;
		 pARhsValue2294_ARV2294:=myrec;
		END;
	FUNCTION pADyadicValue2290_ADV2290:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue2292_ALV2292;
		myrec^.arg2:=pARhsValue2294_ARV2294;
		myrec^.fn:=pAPushDyadic2291_APD2291;
		 pADyadicValue2290_ADV2290:=myrec;
		END;
	FUNCTION pAValueMeaning2289_AVM2289:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue2290_ADV2290;
		 pAValueMeaning2289_AVM2289:=myrec;
		END;
	FUNCTION pAAssemblypattern2305_AA2305:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'push DWORD ' );
		pappendp(list,0);
		pAAssemblypattern2305_AA2305:=list;
		END;
	FUNCTION pAAssemblesto2304_AA2304:pprintlist;
	begin
		pAAssemblesto2304_AA2304:=pAAssemblypattern2305_AA2305;
		END;
	FUNCTION pASideeffects2308_AS2308:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2308_AS2308:=nil;
		 pASideeffects2308_AS2308:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2309_AUP2309:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2309_AUP2309:=nil;
		 pAUnconditionalPrecond2309_AUP2309:=myrec;
		END;
	FUNCTION REFPUSH_REFPUSH:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmaddrmode_;
		params^[1]:=typeparam;
		paramcount:=3;
		meaning:=pAValueMeaning2289_AVM2289;
		matchedAssembler:=pAAssemblesto2304_AA2304;
		END;
		REFPUSH_REFPUSH:=myrec;
	END;
	FUNCTION pATypeid2312_AT2312:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@3e965}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2312_AT2312:=myrec;
		END;
	FUNCTION pAPushDyadic2315_APD2315:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic2315_APD2315:=myrec;
		END;
	FUNCTION pAIdLoc2317_AIL2317:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2317_AIL2317:=myrec;
		END;
	FUNCTION pALocValue2316_ALV2316:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2317_AIL2317;
		 pALocValue2316_ALV2316:=myrec;
		END;
	FUNCTION pATypeid2321_AT2321:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@101da9}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid2321_AT2321:=myrec;
		END;
	FUNCTION pATypeidType2320_ATT2320:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2321_AT2321;
		 pATypeidType2320_ATT2320:=myrec;
		END;
	FUNCTION pAPopMonadic2327_APM2327:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic2327_APM2327:=myrec;
		END;
	FUNCTION pAIdLoc2329_AIL2329:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2329_AIL2329:=myrec;
		END;
	FUNCTION pALocValue2328_ALV2328:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2329_AIL2329;
		 pALocValue2328_ALV2328:=myrec;
		END;
	FUNCTION pAMonadicValue2326_AMV2326:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue2328_ALV2328;
		myrec^.fn:=pAPopMonadic2327_APM2327;
		 pAMonadicValue2326_AMV2326:=myrec;
		END;
	FUNCTION pAMemoryLoc2325_AML2325:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pAMonadicValue2326_AMV2326;
		 pAMemoryLoc2325_AML2325:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2324_AR2324:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAMemoryLoc2325_AML2325;
		 pARefval2324_AR2324:=myrec;
		END;
	FUNCTION pADerefRhs2323_ADR2323:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2324_AR2324;
		 pADerefRhs2323_ADR2323:=myrec;
		END;
	FUNCTION pARhsValue2322_ARV2322:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2323_ADR2323;
		 pARhsValue2322_ARV2322:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs2319_ACR2319:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType2320_ATT2320;
		myrec^.arg2:=pARhsValue2322_ARV2322;
		 pACastRhs2319_ACR2319:=myrec;
		END;
	FUNCTION pARhsValue2318_ARV2318:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2319_ACR2319;
		 pARhsValue2318_ARV2318:=myrec;
		END;
	FUNCTION pADyadicValue2314_ADV2314:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue2316_ALV2316;
		myrec^.arg2:=pARhsValue2318_ARV2318;
		myrec^.fn:=pAPushDyadic2315_APD2315;
		 pADyadicValue2314_ADV2314:=myrec;
		END;
	FUNCTION pAValueMeaning2313_AVM2313:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue2314_ADV2314;
		 pAValueMeaning2313_AVM2313:=myrec;
		END;
	FUNCTION pAAssemblypattern2331_AA2331:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'xchg esi,[esp]\n mov esi,dword[esi]\n  xchg esi,[esp]' );
		pAAssemblypattern2331_AA2331:=list;
		END;
	FUNCTION pAAssemblesto2330_AA2330:pprintlist;
	begin
		pAAssemblesto2330_AA2330:=pAAssemblypattern2331_AA2331;
		END;
	FUNCTION pASideeffects2333_AS2333:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2333_AS2333:=nil;
		 pASideeffects2333_AS2333:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2334_AUP2334:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2334_AUP2334:=nil;
		 pAUnconditionalPrecond2334_AUP2334:=myrec;
		END;
	FUNCTION SDEREF_SDEREF:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patint_;
		paramcount:=2;
		meaning:=pAValueMeaning2313_AVM2313;
		matchedAssembler:=pAAssemblesto2330_AA2330;
		END;
		SDEREF_SDEREF:=myrec;
	END;
	FUNCTION pATypeid2337_AT2337:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@3e965}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2337_AT2337:=myrec;
		END;
	FUNCTION pAPushDyadic2340_APD2340:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic2340_APD2340:=myrec;
		END;
	FUNCTION pAIdLoc2342_AIL2342:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2342_AIL2342:=myrec;
		END;
	FUNCTION pALocValue2341_ALV2341:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2342_AIL2342;
		 pALocValue2341_ALV2341:=myrec;
		END;
	FUNCTION pADoublewordFormat2347_ADF2347:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdword;
		 pADoublewordFormat2347_ADF2347:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype2346_AFP2346:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAFormatPredeclaredtype2346_AFP2346:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2345_APT2345:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAPredeclaredtypeType2345_APT2345:=myrec;
		END;
	FUNCTION pAPopMonadic2353_APM2353:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic2353_APM2353:=myrec;
		END;
	FUNCTION pAIdLoc2355_AIL2355:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc2355_AIL2355:=myrec;
		END;
	FUNCTION pALocValue2354_ALV2354:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2355_AIL2355;
		 pALocValue2354_ALV2354:=myrec;
		END;
	FUNCTION pAMonadicValue2352_AMV2352:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue2354_ALV2354;
		myrec^.fn:=pAPopMonadic2353_APM2353;
		 pAMonadicValue2352_AMV2352:=myrec;
		END;
	FUNCTION pAMemoryLoc2351_AML2351:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pAMonadicValue2352_AMV2352;
		 pAMemoryLoc2351_AML2351:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2350_AR2350:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAMemoryLoc2351_AML2351;
		 pARefval2350_AR2350:=myrec;
		END;
	FUNCTION pADerefRhs2349_ADR2349:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2350_AR2350;
		 pADerefRhs2349_ADR2349:=myrec;
		END;
	FUNCTION pARhsValue2348_ARV2348:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2349_ADR2349;
		 pARhsValue2348_ARV2348:=myrec;
		END;
		(*! try to cast to type: doubleword*)
	FUNCTION pACastRhs2344_ACR2344:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2345_APT2345;
		myrec^.arg2:=pARhsValue2348_ARV2348;
		 pACastRhs2344_ACR2344:=myrec;
		END;
	FUNCTION pARhsValue2343_ARV2343:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2344_ACR2344;
		 pARhsValue2343_ARV2343:=myrec;
		END;
	FUNCTION pADyadicValue2339_ADV2339:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue2341_ALV2341;
		myrec^.arg2:=pARhsValue2343_ARV2343;
		myrec^.fn:=pAPushDyadic2340_APD2340;
		 pADyadicValue2339_ADV2339:=myrec;
		END;
	FUNCTION pAValueMeaning2338_AVM2338:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue2339_ADV2339;
		 pAValueMeaning2338_AVM2338:=myrec;
		END;
	FUNCTION pAAssemblypattern2357_AA2357:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'xchg esi,[esp]\n push dword[esi]\n mov esi,dword[esi+4]\n  xchg esi,[esp]' );
		pAAssemblypattern2357_AA2357:=list;
		END;
	FUNCTION pAAssemblesto2356_AA2356:pprintlist;
	begin
		pAAssemblesto2356_AA2356:=pAAssemblypattern2357_AA2357;
		END;
	FUNCTION pASideeffects2359_AS2359:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2359_AS2359:=nil;
		 pASideeffects2359_AS2359:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2360_AUP2360:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2360_AUP2360:=nil;
		 pAUnconditionalPrecond2360_AUP2360:=myrec;
		END;
	FUNCTION SDEREFDOUBLEWORD_SDEREFDOUBLEWORD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patint_;
		paramcount:=2;
		meaning:=pAValueMeaning2338_AVM2338;
		matchedAssembler:=pAAssemblesto2356_AA2356;
		END;
		SDEREFDOUBLEWORD_SDEREFDOUBLEWORD:=myrec;
	END;
	FUNCTION pATypeid2363_AT2363:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2363_AT2363:=myrec;
		END;
	FUNCTION pATypeid2365_AT2365:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2365_AT2365:=myrec;
		END;
	FUNCTION pATypeid2367_AT2367:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ addrmode  ilcg.pattern@7a4076}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2367_AT2367:=myrec;
		END;
	FUNCTION pATypeid2369_AT2369:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ wordupto32  ilcg.pattern@c6692}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2369_AT2369:=myrec;
		END;
	FUNCTION pATypeid2376_AT2376:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@14c7cd}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid2376_AT2376:=myrec;
		END;
	FUNCTION pATypeidType2375_ATT2375:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2376_AT2376;
		 pATypeidType2375_ATT2375:=myrec;
		END;
	FUNCTION pAReference2374_AR2374:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType2375_ATT2375;
		 pAReference2374_AR2374:=myrec;
		END;
	FUNCTION pAReftypeType2373_ART2373:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference2374_AR2374;
		 pAReftypeType2373_ART2373:=myrec;
		END;
	FUNCTION pAIdLoc2377_AIL2377:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2377_AIL2377:=myrec;
		END;
	FUNCTION pARefcastRefval2372_ARR2372:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType2373_ART2373;
		myrec^.arg2:=pAIdLoc2377_AIL2377;
		 pARefcastRefval2372_ARR2372:=myrec;
		END;
	FUNCTION pAOrDyadic2379_AOD2379:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpor;
		 pAOrDyadic2379_AOD2379:=myrec;
		END;
	FUNCTION pAAndDyadic2381_AAD2381:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpand;
		 pAAndDyadic2381_AAD2381:=myrec;
		END;
	FUNCTION pATypeid2385_AT2385:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@14c7cd}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid2385_AT2385:=myrec;
		END;
	FUNCTION pATypeidType2384_ATT2384:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2385_AT2385;
		 pATypeidType2384_ATT2384:=myrec;
		END;
	FUNCTION pAIdLoc2389_AIL2389:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2389_AIL2389:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2388_AR2388:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2389_AIL2389;
		 pARefval2388_AR2388:=myrec;
		END;
	FUNCTION pADerefRhs2387_ADR2387:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2388_AR2388;
		 pADerefRhs2387_ADR2387:=myrec;
		END;
	FUNCTION pARhsValue2386_ARV2386:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2387_ADR2387;
		 pARhsValue2386_ARV2386:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs2383_ACR2383:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType2384_ATT2384;
		myrec^.arg2:=pARhsValue2386_ARV2386;
		 pACastRhs2383_ACR2383:=myrec;
		END;
	FUNCTION pARhsValue2382_ARV2382:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2383_ACR2383;
		 pARhsValue2382_ARV2382:=myrec;
		END;
	FUNCTION pATypeid2393_AT2393:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@14c7cd}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid2393_AT2393:=myrec;
		END;
	FUNCTION pATypeidType2392_ATT2392:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2393_AT2393;
		 pATypeidType2392_ATT2392:=myrec;
		END;
	FUNCTION pAIdLoc2397_AIL2397:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc2397_AIL2397:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2396_AR2396:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2397_AIL2397;
		 pARefval2396_AR2396:=myrec;
		END;
	FUNCTION pADerefRhs2395_ADR2395:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2396_AR2396;
		 pADerefRhs2395_ADR2395:=myrec;
		END;
	FUNCTION pARhsValue2394_ARV2394:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2395_ADR2395;
		 pARhsValue2394_ARV2394:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs2391_ACR2391:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType2392_ATT2392;
		myrec^.arg2:=pARhsValue2394_ARV2394;
		 pACastRhs2391_ACR2391:=myrec;
		END;
	FUNCTION pARhsValue2390_ARV2390:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2391_ACR2391;
		 pARhsValue2390_ARV2390:=myrec;
		END;
	FUNCTION pADyadicValue2380_ADV2380:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue2382_ARV2382;
		myrec^.arg2:=pARhsValue2390_ARV2390;
		myrec^.fn:=pAAndDyadic2381_AAD2381;
		 pADyadicValue2380_ADV2380:=myrec;
		END;
	FUNCTION pAAndDyadic2399_AAD2399:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpand;
		 pAAndDyadic2399_AAD2399:=myrec;
		END;
	FUNCTION pATypeid2403_AT2403:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@14c7cd}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid2403_AT2403:=myrec;
		END;
	FUNCTION pATypeidType2402_ATT2402:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2403_AT2403;
		 pATypeidType2402_ATT2402:=myrec;
		END;
	FUNCTION pAIdLoc2407_AIL2407:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc2407_AIL2407:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2406_AR2406:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2407_AIL2407;
		 pARefval2406_AR2406:=myrec;
		END;
	FUNCTION pADerefRhs2405_ADR2405:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2406_AR2406;
		 pADerefRhs2405_ADR2405:=myrec;
		END;
	FUNCTION pARhsValue2404_ARV2404:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2405_ADR2405;
		 pARhsValue2404_ARV2404:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs2401_ACR2401:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType2402_ATT2402;
		myrec^.arg2:=pARhsValue2404_ARV2404;
		 pACastRhs2401_ACR2401:=myrec;
		END;
	FUNCTION pARhsValue2400_ARV2400:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2401_ACR2401;
		 pARhsValue2400_ARV2400:=myrec;
		END;
	FUNCTION pANotMonadic2409_ANM2409:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpNOT;
		 pANotMonadic2409_ANM2409:=myrec;
		END;
	FUNCTION pAIdLoc2413_AIL2413:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc2413_AIL2413:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2412_AR2412:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2413_AIL2413;
		 pARefval2412_AR2412:=myrec;
		END;
	FUNCTION pADerefRhs2411_ADR2411:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2412_AR2412;
		 pADerefRhs2411_ADR2411:=myrec;
		END;
	FUNCTION pARhsValue2410_ARV2410:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2411_ADR2411;
		 pARhsValue2410_ARV2410:=myrec;
		END;
	FUNCTION pAMonadicValue2408_AMV2408:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue2410_ARV2410;
		myrec^.fn:=pANotMonadic2409_ANM2409;
		 pAMonadicValue2408_AMV2408:=myrec;
		END;
	FUNCTION pADyadicValue2398_ADV2398:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue2400_ARV2400;
		myrec^.arg2:=pAMonadicValue2408_AMV2408;
		myrec^.fn:=pAAndDyadic2399_AAD2399;
		 pADyadicValue2398_ADV2398:=myrec;
		END;
	FUNCTION pADyadicValue2378_ADV2378:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pADyadicValue2380_ADV2380;
		myrec^.arg2:=pADyadicValue2398_ADV2398;
		myrec^.fn:=pAOrDyadic2379_AOD2379;
		 pADyadicValue2378_ADV2378:=myrec;
		END;
	FUNCTION pAAssign2371_AA2371:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue2378_ADV2378;
		myrec^.dest:=pARefcastRefval2372_ARR2372;
		 pAAssign2371_AA2371:=myrec;
		END;
	FUNCTION pAAssignMeaning2370_AAM2370:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2371_AA2371;
		 pAAssignMeaning2370_AAM2370:=myrec;
		END;
	FUNCTION pAAssemblypattern2415_AA2415:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'and ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pappends(list,'\n' );
		pappends(list,'not ' );
		pappendp(list,1);
		pappends(list,'\n' );
		pappends(list,'and ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,3);
		pappends(list,' ' );
		pappendp(list,2);
		pappends(list,'\n' );
		pappends(list,'or ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern2415_AA2415:=list;
		END;
	FUNCTION pAAssemblesto2414_AA2414:pprintlist;
	begin
		pAAssemblesto2414_AA2414:=pAAssemblypattern2415_AA2415;
		END;
	FUNCTION pASideeffects2435_AS2435:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2435_AS2435:=nil;
		 pASideeffects2435_AS2435:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2436_AUP2436:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2436_AUP2436:=nil;
		 pAUnconditionalPrecond2436_AUP2436:=myrec;
		END;
	FUNCTION SELECT_SELECT:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=pataddrmode_;
		params^[1]:=patreg_;
		params^[0]:=patreg_;
		params^[3]:=patwordupto32_32;
		paramcount:=5;
		meaning:=pAAssignMeaning2370_AAM2370;
		matchedAssembler:=pAAssemblesto2414_AA2414;
		END;
		SELECT_SELECT:=myrec;
	END;
	FUNCTION pATypeid2439_AT2439:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2439_AT2439:=myrec;
		END;
	FUNCTION pATypeid2441_AT2441:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ anyreg  ilcg.pattern@18b13b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2441_AT2441:=myrec;
		END;
	FUNCTION pATypeid2443_AT2443:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ wordupto32  ilcg.pattern@c6692}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2443_AT2443:=myrec;
		END;
	FUNCTION pATypeid2450_AT2450:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@5591a6}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid2450_AT2450:=myrec;
		END;
	FUNCTION pATypeidType2449_ATT2449:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2450_AT2450;
		 pATypeidType2449_ATT2449:=myrec;
		END;
	FUNCTION pAReference2448_AR2448:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType2449_ATT2449;
		 pAReference2448_AR2448:=myrec;
		END;
	FUNCTION pAReftypeType2447_ART2447:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference2448_AR2448;
		 pAReftypeType2447_ART2447:=myrec;
		END;
	FUNCTION pAIdLoc2451_AIL2451:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc2451_AIL2451:=myrec;
		END;
	FUNCTION pARefcastRefval2446_ARR2446:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType2447_ART2447;
		myrec^.arg2:=pAIdLoc2451_AIL2451;
		 pARefcastRefval2446_ARR2446:=myrec;
		END;
	FUNCTION pATypeid2455_AT2455:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@5591a6}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid2455_AT2455:=myrec;
		END;
	FUNCTION pATypeidType2454_ATT2454:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2455_AT2455;
		 pATypeidType2454_ATT2454:=myrec;
		END;
	FUNCTION pAIdLoc2459_AIL2459:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2459_AIL2459:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2458_AR2458:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2459_AIL2459;
		 pARefval2458_AR2458:=myrec;
		END;
	FUNCTION pADerefRhs2457_ADR2457:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2458_AR2458;
		 pADerefRhs2457_ADR2457:=myrec;
		END;
	FUNCTION pARhsValue2456_ARV2456:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2457_ADR2457;
		 pARhsValue2456_ARV2456:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs2453_ACR2453:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType2454_ATT2454;
		myrec^.arg2:=pARhsValue2456_ARV2456;
		 pACastRhs2453_ACR2453:=myrec;
		END;
	FUNCTION pARhsValue2452_ARV2452:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2453_ACR2453;
		 pARhsValue2452_ARV2452:=myrec;
		END;
	FUNCTION pAAssign2445_AA2445:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue2452_ARV2452;
		myrec^.dest:=pARefcastRefval2446_ARR2446;
		 pAAssign2445_AA2445:=myrec;
		END;
	FUNCTION pAAssignMeaning2444_AAM2444:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2445_AA2445;
		 pAAssignMeaning2444_AAM2444:=myrec;
		END;
	FUNCTION pAAssemblypattern2461_AA2461:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'mov ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,2);
		pappends(list,' ' );
		pappendp(list,0);
		pAAssemblypattern2461_AA2461:=list;
		END;
	FUNCTION pAAssemblesto2460_AA2460:pprintlist;
	begin
		pAAssemblesto2460_AA2460:=pAAssemblypattern2461_AA2461;
		END;
	FUNCTION pASideeffects2468_AS2468:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2468_AS2468:=nil;
		 pASideeffects2468_AS2468:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2469_AUP2469:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2469_AUP2469:=nil;
		 pAUnconditionalPrecond2469_AUP2469:=myrec;
		END;
	FUNCTION LOAD_LOAD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patanyreg_;
		params^[2]:=patwordupto32_32;
		params^[0]:=patmaddrmode_;
		paramcount:=4;
		meaning:=pAAssignMeaning2444_AAM2444;
		matchedAssembler:=pAAssemblesto2460_AA2460;
		END;
		LOAD_LOAD:=myrec;
	END;
	FUNCTION pATypeid2472_AT2472:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2472_AT2472:=myrec;
		END;
	FUNCTION pATypeid2474_AT2474:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baddrmode  ilcg.pattern@52f73e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2474_AT2474:=myrec;
		END;
	FUNCTION pAIdLoc2478_AIL2478:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2478_AIL2478:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2477_AR2477:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2478_AIL2478;
		 pARefval2477_AR2477:=myrec;
		END;
	FUNCTION pASigned2484_AS2484:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned2484_AS2484:=myrec;
		END;
	FUNCTION pASignedTformat2483_AST2483:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned2484_AS2484;
		 pASignedTformat2483_AST2483:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype2482_ATP2482:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype2482_ATP2482:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2481_APT2481:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType2481_APT2481:=myrec;
		END;
	FUNCTION pAExtendMonadic2486_AEM2486:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpEXTEND;
		 pAExtendMonadic2486_AEM2486:=myrec;
		END;
	FUNCTION pAUint8Unsigned2492_AU8U2492:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned2492_AU8U2492:=myrec;
		END;
	FUNCTION pAUnsignedTformat2491_AUT2491:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned2492_AU8U2492;
		 pAUnsignedTformat2491_AUT2491:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype2490_ATP2490:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype2490_ATP2490:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2489_APT2489:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType2489_APT2489:=myrec;
		END;
	FUNCTION pAIdLoc2496_AIL2496:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc2496_AIL2496:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2495_AR2495:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2496_AIL2496;
		 pARefval2495_AR2495:=myrec;
		END;
	FUNCTION pADerefRhs2494_ADR2494:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2495_AR2495;
		 pADerefRhs2494_ADR2494:=myrec;
		END;
	FUNCTION pARhsValue2493_ARV2493:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2494_ADR2494;
		 pARhsValue2493_ARV2493:=myrec;
		END;
		(*! try to cast to type: uint8*)
	FUNCTION pACastRhs2488_ACR2488:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2489_APT2489;
		myrec^.arg2:=pARhsValue2493_ARV2493;
		 pACastRhs2488_ACR2488:=myrec;
		END;
	FUNCTION pARhsValue2487_ARV2487:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2488_ACR2488;
		 pARhsValue2487_ARV2487:=myrec;
		END;
	FUNCTION pAMonadicValue2485_AMV2485:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue2487_ARV2487;
		myrec^.fn:=pAExtendMonadic2486_AEM2486;
		 pAMonadicValue2485_AMV2485:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs2480_ACR2480:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2481_APT2481;
		myrec^.arg2:=pAMonadicValue2485_AMV2485;
		 pACastRhs2480_ACR2480:=myrec;
		END;
	FUNCTION pARhsValue2479_ARV2479:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2480_ACR2480;
		 pARhsValue2479_ARV2479:=myrec;
		END;
	FUNCTION pAAssign2476_AA2476:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue2479_ARV2479;
		myrec^.dest:=pARefval2477_AR2477;
		 pAAssign2476_AA2476:=myrec;
		END;
	FUNCTION pAAssignMeaning2475_AAM2475:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2476_AA2476;
		 pAAssignMeaning2475_AAM2475:=myrec;
		END;
	FUNCTION pAAssemblypattern2498_AA2498:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movzx ' );
		pappendp(list,0);
		pappends(list,', BYTE  ' );
		pappendp(list,1);
		pAAssemblypattern2498_AA2498:=list;
		END;
	FUNCTION pAAssemblesto2497_AA2497:pprintlist;
	begin
		pAAssemblesto2497_AA2497:=pAAssemblypattern2498_AA2498;
		END;
	FUNCTION pASideeffects2503_AS2503:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2503_AS2503:=nil;
		 pASideeffects2503_AS2503:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2504_AUP2504:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2504_AUP2504:=nil;
		 pAUnconditionalPrecond2504_AUP2504:=myrec;
		END;
	FUNCTION MOVZXB_MOVZXB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		params^[1]:=patbaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning2475_AAM2475;
		matchedAssembler:=pAAssemblesto2497_AA2497;
		END;
		MOVZXB_MOVZXB:=myrec;
	END;
	FUNCTION pATypeid2507_AT2507:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2507_AT2507:=myrec;
		END;
	FUNCTION pATypeid2509_AT2509:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baddrmode  ilcg.pattern@52f73e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2509_AT2509:=myrec;
		END;
	FUNCTION pAIdLoc2513_AIL2513:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2513_AIL2513:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2512_AR2512:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2513_AIL2513;
		 pARefval2512_AR2512:=myrec;
		END;
	FUNCTION pAUnsigned2519_AU2519:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32;
		 pAUnsigned2519_AU2519:=myrec;
		END;
	FUNCTION pAUnsignedTformat2518_AUT2518:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUnsigned2519_AU2519;
		 pAUnsignedTformat2518_AUT2518:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype2517_ATP2517:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pATformatPredeclaredtype2517_ATP2517:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2516_APT2516:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pAPredeclaredtypeType2516_APT2516:=myrec;
		END;
	FUNCTION pAExtendMonadic2521_AEM2521:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpEXTEND;
		 pAExtendMonadic2521_AEM2521:=myrec;
		END;
	FUNCTION pAUint8Unsigned2527_AU8U2527:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned2527_AU8U2527:=myrec;
		END;
	FUNCTION pAUnsignedTformat2526_AUT2526:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned2527_AU8U2527;
		 pAUnsignedTformat2526_AUT2526:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype2525_ATP2525:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype2525_ATP2525:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2524_APT2524:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType2524_APT2524:=myrec;
		END;
	FUNCTION pAIdLoc2531_AIL2531:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc2531_AIL2531:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2530_AR2530:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2531_AIL2531;
		 pARefval2530_AR2530:=myrec;
		END;
	FUNCTION pADerefRhs2529_ADR2529:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2530_AR2530;
		 pADerefRhs2529_ADR2529:=myrec;
		END;
	FUNCTION pARhsValue2528_ARV2528:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2529_ADR2529;
		 pARhsValue2528_ARV2528:=myrec;
		END;
		(*! try to cast to type: uint8*)
	FUNCTION pACastRhs2523_ACR2523:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2524_APT2524;
		myrec^.arg2:=pARhsValue2528_ARV2528;
		 pACastRhs2523_ACR2523:=myrec;
		END;
	FUNCTION pARhsValue2522_ARV2522:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2523_ACR2523;
		 pARhsValue2522_ARV2522:=myrec;
		END;
	FUNCTION pAMonadicValue2520_AMV2520:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue2522_ARV2522;
		myrec^.fn:=pAExtendMonadic2521_AEM2521;
		 pAMonadicValue2520_AMV2520:=myrec;
		END;
		(*! try to cast to type: uint32*)
	FUNCTION pACastRhs2515_ACR2515:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2516_APT2516;
		myrec^.arg2:=pAMonadicValue2520_AMV2520;
		 pACastRhs2515_ACR2515:=myrec;
		END;
	FUNCTION pARhsValue2514_ARV2514:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2515_ACR2515;
		 pARhsValue2514_ARV2514:=myrec;
		END;
	FUNCTION pAAssign2511_AA2511:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue2514_ARV2514;
		myrec^.dest:=pARefval2512_AR2512;
		 pAAssign2511_AA2511:=myrec;
		END;
	FUNCTION pAAssignMeaning2510_AAM2510:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2511_AA2511;
		 pAAssignMeaning2510_AAM2510:=myrec;
		END;
	FUNCTION pAAssemblypattern2533_AA2533:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movzx ' );
		pappendp(list,0);
		pappends(list,', BYTE  ' );
		pappendp(list,1);
		pAAssemblypattern2533_AA2533:=list;
		END;
	FUNCTION pAAssemblesto2532_AA2532:pprintlist;
	begin
		pAAssemblesto2532_AA2532:=pAAssemblypattern2533_AA2533;
		END;
	FUNCTION pASideeffects2538_AS2538:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2538_AS2538:=nil;
		 pASideeffects2538_AS2538:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2539_AUP2539:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2539_AUP2539:=nil;
		 pAUnconditionalPrecond2539_AUP2539:=myrec;
		END;
	FUNCTION MOVZXB2_MOVZXB2:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		params^[1]:=patbaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning2510_AAM2510;
		matchedAssembler:=pAAssemblesto2532_AA2532;
		END;
		MOVZXB2_MOVZXB2:=myrec;
	END;
	FUNCTION pATypeid2542_AT2542:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2542_AT2542:=myrec;
		END;
	FUNCTION pATypeid2544_AT2544:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baddrmode  ilcg.pattern@52f73e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2544_AT2544:=myrec;
		END;
	FUNCTION pAIdLoc2548_AIL2548:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2548_AIL2548:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2547_AR2547:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2548_AIL2548;
		 pARefval2547_AR2547:=myrec;
		END;
	FUNCTION pASigned2554_AS2554:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned2554_AS2554:=myrec;
		END;
	FUNCTION pASignedTformat2553_AST2553:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned2554_AS2554;
		 pASignedTformat2553_AST2553:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype2552_ATP2552:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype2552_ATP2552:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2551_APT2551:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType2551_APT2551:=myrec;
		END;
	FUNCTION pAExtendMonadic2556_AEM2556:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpEXTEND;
		 pAExtendMonadic2556_AEM2556:=myrec;
		END;
	FUNCTION pAInt8Signed2562_AI8S2562:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed2562_AI8S2562:=myrec;
		END;
	FUNCTION pASignedTformat2561_AST2561:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed2562_AI8S2562;
		 pASignedTformat2561_AST2561:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype2560_ATP2560:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype2560_ATP2560:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2559_APT2559:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType2559_APT2559:=myrec;
		END;
	FUNCTION pAIdLoc2566_AIL2566:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc2566_AIL2566:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2565_AR2565:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2566_AIL2566;
		 pARefval2565_AR2565:=myrec;
		END;
	FUNCTION pADerefRhs2564_ADR2564:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2565_AR2565;
		 pADerefRhs2564_ADR2564:=myrec;
		END;
	FUNCTION pARhsValue2563_ARV2563:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2564_ADR2564;
		 pARhsValue2563_ARV2563:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs2558_ACR2558:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2559_APT2559;
		myrec^.arg2:=pARhsValue2563_ARV2563;
		 pACastRhs2558_ACR2558:=myrec;
		END;
	FUNCTION pARhsValue2557_ARV2557:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2558_ACR2558;
		 pARhsValue2557_ARV2557:=myrec;
		END;
	FUNCTION pAMonadicValue2555_AMV2555:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue2557_ARV2557;
		myrec^.fn:=pAExtendMonadic2556_AEM2556;
		 pAMonadicValue2555_AMV2555:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs2550_ACR2550:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2551_APT2551;
		myrec^.arg2:=pAMonadicValue2555_AMV2555;
		 pACastRhs2550_ACR2550:=myrec;
		END;
	FUNCTION pARhsValue2549_ARV2549:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2550_ACR2550;
		 pARhsValue2549_ARV2549:=myrec;
		END;
	FUNCTION pAAssign2546_AA2546:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue2549_ARV2549;
		myrec^.dest:=pARefval2547_AR2547;
		 pAAssign2546_AA2546:=myrec;
		END;
	FUNCTION pAAssignMeaning2545_AAM2545:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2546_AA2546;
		 pAAssignMeaning2545_AAM2545:=myrec;
		END;
	FUNCTION pAAssemblypattern2568_AA2568:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movsx ' );
		pappendp(list,0);
		pappends(list,',BYTE   ' );
		pappendp(list,1);
		pAAssemblypattern2568_AA2568:=list;
		END;
	FUNCTION pAAssemblesto2567_AA2567:pprintlist;
	begin
		pAAssemblesto2567_AA2567:=pAAssemblypattern2568_AA2568;
		END;
	FUNCTION pASideeffects2573_AS2573:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2573_AS2573:=nil;
		 pASideeffects2573_AS2573:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2574_AUP2574:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2574_AUP2574:=nil;
		 pAUnconditionalPrecond2574_AUP2574:=myrec;
		END;
	FUNCTION MOVSXB_MOVSXB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		params^[1]:=patbaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning2545_AAM2545;
		matchedAssembler:=pAAssemblesto2567_AA2567;
		END;
		MOVSXB_MOVSXB:=myrec;
	END;
	FUNCTION pATypeid2577_AT2577:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ uwreg  ilcg.pattern@662121}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2577_AT2577:=myrec;
		END;
	FUNCTION pATypeid2579_AT2579:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2579_AT2579:=myrec;
		END;
	FUNCTION pAIdLoc2583_AIL2583:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2583_AIL2583:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2582_AR2582:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2583_AIL2583;
		 pARefval2582_AR2582:=myrec;
		END;
	FUNCTION pAExtendMonadic2585_AEM2585:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpEXTEND;
		 pAExtendMonadic2585_AEM2585:=myrec;
		END;
	FUNCTION pAIdLoc2589_AIL2589:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc2589_AIL2589:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2588_AR2588:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2589_AIL2589;
		 pARefval2588_AR2588:=myrec;
		END;
	FUNCTION pADerefRhs2587_ADR2587:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2588_AR2588;
		 pADerefRhs2587_ADR2587:=myrec;
		END;
	FUNCTION pARhsValue2586_ARV2586:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2587_ADR2587;
		 pARhsValue2586_ARV2586:=myrec;
		END;
	FUNCTION pAMonadicValue2584_AMV2584:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue2586_ARV2586;
		myrec^.fn:=pAExtendMonadic2585_AEM2585;
		 pAMonadicValue2584_AMV2584:=myrec;
		END;
	FUNCTION pAAssign2581_AA2581:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pAMonadicValue2584_AMV2584;
		myrec^.dest:=pARefval2582_AR2582;
		 pAAssign2581_AA2581:=myrec;
		END;
	FUNCTION pAAssignMeaning2580_AAM2580:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2581_AA2581;
		 pAAssignMeaning2580_AAM2580:=myrec;
		END;
	FUNCTION pAAssemblypattern2591_AA2591:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movzx ' );
		pappendp(list,0);
		pappends(list,',   ' );
		pappendp(list,1);
		pAAssemblypattern2591_AA2591:=list;
		END;
	FUNCTION pAAssemblesto2590_AA2590:pprintlist;
	begin
		pAAssemblesto2590_AA2590:=pAAssemblypattern2591_AA2591;
		END;
	FUNCTION pASideeffects2596_AS2596:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2596_AS2596:=nil;
		 pASideeffects2596_AS2596:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2597_AUP2597:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2597_AUP2597:=nil;
		 pAUnconditionalPrecond2597_AUP2597:=myrec;
		END;
	FUNCTION MOVZXBW_MOVZXBW:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patuwreg_;
		params^[1]:=patbreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning2580_AAM2580;
		matchedAssembler:=pAAssemblesto2590_AA2590;
		END;
		MOVZXBW_MOVZXBW:=myrec;
	END;
	FUNCTION pATypeid2600_AT2600:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ swreg  ilcg.pattern@3f99af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2600_AT2600:=myrec;
		END;
	FUNCTION pATypeid2602_AT2602:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2602_AT2602:=myrec;
		END;
	FUNCTION pAIdLoc2606_AIL2606:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2606_AIL2606:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2605_AR2605:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2606_AIL2606;
		 pARefval2605_AR2605:=myrec;
		END;
	FUNCTION pAExtendMonadic2608_AEM2608:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpEXTEND;
		 pAExtendMonadic2608_AEM2608:=myrec;
		END;
	FUNCTION pAIdLoc2612_AIL2612:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc2612_AIL2612:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2611_AR2611:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2612_AIL2612;
		 pARefval2611_AR2611:=myrec;
		END;
	FUNCTION pADerefRhs2610_ADR2610:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2611_AR2611;
		 pADerefRhs2610_ADR2610:=myrec;
		END;
	FUNCTION pARhsValue2609_ARV2609:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2610_ADR2610;
		 pARhsValue2609_ARV2609:=myrec;
		END;
	FUNCTION pAMonadicValue2607_AMV2607:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue2609_ARV2609;
		myrec^.fn:=pAExtendMonadic2608_AEM2608;
		 pAMonadicValue2607_AMV2607:=myrec;
		END;
	FUNCTION pAAssign2604_AA2604:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pAMonadicValue2607_AMV2607;
		myrec^.dest:=pARefval2605_AR2605;
		 pAAssign2604_AA2604:=myrec;
		END;
	FUNCTION pAAssignMeaning2603_AAM2603:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2604_AA2604;
		 pAAssignMeaning2603_AAM2603:=myrec;
		END;
	FUNCTION pAAssemblypattern2614_AA2614:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movsx ' );
		pappendp(list,0);
		pappends(list,',   ' );
		pappendp(list,1);
		pAAssemblypattern2614_AA2614:=list;
		END;
	FUNCTION pAAssemblesto2613_AA2613:pprintlist;
	begin
		pAAssemblesto2613_AA2613:=pAAssemblypattern2614_AA2614;
		END;
	FUNCTION pASideeffects2619_AS2619:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2619_AS2619:=nil;
		 pASideeffects2619_AS2619:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2620_AUP2620:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2620_AUP2620:=nil;
		 pAUnconditionalPrecond2620_AUP2620:=myrec;
		END;
	FUNCTION MOVSXBW_MOVSXBW:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patswreg_;
		params^[1]:=patbreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning2603_AAM2603;
		matchedAssembler:=pAAssemblesto2613_AA2613;
		END;
		MOVSXBW_MOVSXBW:=myrec;
	END;
	FUNCTION pATypeid2623_AT2623:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2623_AT2623:=myrec;
		END;
	FUNCTION pATypeid2625_AT2625:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ wreg  ilcg.pattern@18cbf7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2625_AT2625:=myrec;
		END;
	FUNCTION pAIdLoc2629_AIL2629:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2629_AIL2629:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2628_AR2628:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2629_AIL2629;
		 pARefval2628_AR2628:=myrec;
		END;
	FUNCTION pAUnsigned2635_AU2635:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32;
		 pAUnsigned2635_AU2635:=myrec;
		END;
	FUNCTION pAUnsignedTformat2634_AUT2634:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUnsigned2635_AU2635;
		 pAUnsignedTformat2634_AUT2634:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype2633_ATP2633:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pATformatPredeclaredtype2633_ATP2633:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2632_APT2632:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pAPredeclaredtypeType2632_APT2632:=myrec;
		END;
	FUNCTION pAExtendMonadic2637_AEM2637:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpEXTEND;
		 pAExtendMonadic2637_AEM2637:=myrec;
		END;
	FUNCTION pAIdLoc2641_AIL2641:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc2641_AIL2641:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2640_AR2640:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2641_AIL2641;
		 pARefval2640_AR2640:=myrec;
		END;
	FUNCTION pADerefRhs2639_ADR2639:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2640_AR2640;
		 pADerefRhs2639_ADR2639:=myrec;
		END;
	FUNCTION pARhsValue2638_ARV2638:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2639_ADR2639;
		 pARhsValue2638_ARV2638:=myrec;
		END;
	FUNCTION pAMonadicValue2636_AMV2636:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue2638_ARV2638;
		myrec^.fn:=pAExtendMonadic2637_AEM2637;
		 pAMonadicValue2636_AMV2636:=myrec;
		END;
		(*! try to cast to type: uint32*)
	FUNCTION pACastRhs2631_ACR2631:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2632_APT2632;
		myrec^.arg2:=pAMonadicValue2636_AMV2636;
		 pACastRhs2631_ACR2631:=myrec;
		END;
	FUNCTION pARhsValue2630_ARV2630:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2631_ACR2631;
		 pARhsValue2630_ARV2630:=myrec;
		END;
	FUNCTION pAAssign2627_AA2627:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue2630_ARV2630;
		myrec^.dest:=pARefval2628_AR2628;
		 pAAssign2627_AA2627:=myrec;
		END;
	FUNCTION pAAssignMeaning2626_AAM2626:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2627_AA2627;
		 pAAssignMeaning2626_AAM2626:=myrec;
		END;
	FUNCTION pAAssemblypattern2643_AA2643:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movzx ' );
		pappendp(list,0);
		pappends(list,',   ' );
		pappendp(list,1);
		pAAssemblypattern2643_AA2643:=list;
		END;
	FUNCTION pAAssemblesto2642_AA2642:pprintlist;
	begin
		pAAssemblesto2642_AA2642:=pAAssemblypattern2643_AA2643;
		END;
	FUNCTION pASideeffects2648_AS2648:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2648_AS2648:=nil;
		 pASideeffects2648_AS2648:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2649_AUP2649:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2649_AUP2649:=nil;
		 pAUnconditionalPrecond2649_AUP2649:=myrec;
		END;
	FUNCTION MOVZXW_MOVZXW:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		params^[1]:=patwreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning2626_AAM2626;
		matchedAssembler:=pAAssemblesto2642_AA2642;
		END;
		MOVZXW_MOVZXW:=myrec;
	END;
	FUNCTION pATypeid2652_AT2652:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2652_AT2652:=myrec;
		END;
	FUNCTION pATypeid2654_AT2654:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ wreg  ilcg.pattern@18cbf7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2654_AT2654:=myrec;
		END;
	FUNCTION pAIdLoc2658_AIL2658:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2658_AIL2658:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2657_AR2657:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2658_AIL2658;
		 pARefval2657_AR2657:=myrec;
		END;
	FUNCTION pASigned2664_AS2664:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned2664_AS2664:=myrec;
		END;
	FUNCTION pASignedTformat2663_AST2663:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned2664_AS2664;
		 pASignedTformat2663_AST2663:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype2662_ATP2662:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype2662_ATP2662:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2661_APT2661:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType2661_APT2661:=myrec;
		END;
	FUNCTION pAExtendMonadic2666_AEM2666:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpEXTEND;
		 pAExtendMonadic2666_AEM2666:=myrec;
		END;
	FUNCTION pAIdLoc2670_AIL2670:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc2670_AIL2670:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2669_AR2669:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2670_AIL2670;
		 pARefval2669_AR2669:=myrec;
		END;
	FUNCTION pADerefRhs2668_ADR2668:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2669_AR2669;
		 pADerefRhs2668_ADR2668:=myrec;
		END;
	FUNCTION pARhsValue2667_ARV2667:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2668_ADR2668;
		 pARhsValue2667_ARV2667:=myrec;
		END;
	FUNCTION pAMonadicValue2665_AMV2665:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue2667_ARV2667;
		myrec^.fn:=pAExtendMonadic2666_AEM2666;
		 pAMonadicValue2665_AMV2665:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs2660_ACR2660:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2661_APT2661;
		myrec^.arg2:=pAMonadicValue2665_AMV2665;
		 pACastRhs2660_ACR2660:=myrec;
		END;
	FUNCTION pARhsValue2659_ARV2659:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2660_ACR2660;
		 pARhsValue2659_ARV2659:=myrec;
		END;
	FUNCTION pAAssign2656_AA2656:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue2659_ARV2659;
		myrec^.dest:=pARefval2657_AR2657;
		 pAAssign2656_AA2656:=myrec;
		END;
	FUNCTION pAAssignMeaning2655_AAM2655:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2656_AA2656;
		 pAAssignMeaning2655_AAM2655:=myrec;
		END;
	FUNCTION pAAssemblypattern2672_AA2672:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movsx ' );
		pappendp(list,0);
		pappends(list,',   ' );
		pappendp(list,1);
		pAAssemblypattern2672_AA2672:=list;
		END;
	FUNCTION pAAssemblesto2671_AA2671:pprintlist;
	begin
		pAAssemblesto2671_AA2671:=pAAssemblypattern2672_AA2672;
		END;
	FUNCTION pASideeffects2677_AS2677:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2677_AS2677:=nil;
		 pASideeffects2677_AS2677:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2678_AUP2678:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2678_AUP2678:=nil;
		 pAUnconditionalPrecond2678_AUP2678:=myrec;
		END;
	FUNCTION MOVSXW_MOVSXW:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		params^[1]:=patwreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning2655_AAM2655;
		matchedAssembler:=pAAssemblesto2671_AA2671;
		END;
		MOVSXW_MOVSXW:=myrec;
	END;
	FUNCTION pATypeid2681_AT2681:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2681_AT2681:=myrec;
		END;
	FUNCTION pATypeid2683_AT2683:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2683_AT2683:=myrec;
		END;
	FUNCTION pAIdLoc2687_AIL2687:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc2687_AIL2687:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2686_AR2686:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2687_AIL2687;
		 pARefval2686_AR2686:=myrec;
		END;
	FUNCTION pAOctetFormat2692_AOF2692:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat2692_AOF2692:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype2691_AFP2691:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype2691_AFP2691:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2690_APT2690:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAPredeclaredtypeType2690_APT2690:=myrec;
		END;
	FUNCTION pAIdLoc2696_AIL2696:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2696_AIL2696:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2695_AR2695:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2696_AIL2696;
		 pARefval2695_AR2695:=myrec;
		END;
	FUNCTION pADerefRhs2694_ADR2694:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2695_AR2695;
		 pADerefRhs2694_ADR2694:=myrec;
		END;
	FUNCTION pARhsValue2693_ARV2693:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2694_ADR2694;
		 pARhsValue2693_ARV2693:=myrec;
		END;
		(*! try to cast to type: octet*)
	FUNCTION pACastRhs2689_ACR2689:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType2690_APT2690;
		myrec^.arg2:=pARhsValue2693_ARV2693;
		 pACastRhs2689_ACR2689:=myrec;
		END;
	FUNCTION pARhsValue2688_ARV2688:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2689_ACR2689;
		 pARhsValue2688_ARV2688:=myrec;
		END;
	FUNCTION pAAssign2685_AA2685:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue2688_ARV2688;
		myrec^.dest:=pARefval2686_AR2686;
		 pAAssign2685_AA2685:=myrec;
		END;
	FUNCTION pAAssignMeaning2684_AAM2684:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2685_AA2685;
		 pAAssignMeaning2684_AAM2684:=myrec;
		END;
	FUNCTION pAAssemblypattern2698_AA2698:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'push ' );
		pappendp(list,0);
		pappends(list,'\nmov ' );
		pappendp(list,1);
		pappends(list,',BYTE[esp]\nadd esp,4 ' );
		pAAssemblypattern2698_AA2698:=list;
		END;
	FUNCTION pAAssemblesto2697_AA2697:pprintlist;
	begin
		pAAssemblesto2697_AA2697:=pAAssemblypattern2698_AA2698;
		END;
	FUNCTION pASideeffects2704_AS2704:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2704_AS2704:=nil;
		 pASideeffects2704_AS2704:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2705_AUP2705:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2705_AUP2705:=nil;
		 pAUnconditionalPrecond2705_AUP2705:=myrec;
		END;
	FUNCTION ToBYTE_TBYTE:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbreg_;
		params^[0]:=patreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning2684_AAM2684;
		matchedAssembler:=pAAssemblesto2697_AA2697;
		END;
		ToBYTE_TBYTE:=myrec;
	END;
	FUNCTION pATypeid2708_AT2708:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baddrmode  ilcg.pattern@52f73e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2708_AT2708:=myrec;
		END;
	FUNCTION pATypeid2710_AT2710:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2710_AT2710:=myrec;
		END;
	FUNCTION pAOctetFormat2718_AOF2718:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat2718_AOF2718:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype2717_AFP2717:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype2717_AFP2717:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType2716_APT2716:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAPredeclaredtypeType2716_APT2716:=myrec;
		END;
	FUNCTION pAReference2715_AR2715:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType2716_APT2716;
		 pAReference2715_AR2715:=myrec;
		END;
	FUNCTION pAReftypeType2714_ART2714:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference2715_AR2715;
		 pAReftypeType2714_ART2714:=myrec;
		END;
	FUNCTION pAIdLoc2719_AIL2719:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2719_AIL2719:=myrec;
		END;
	FUNCTION pARefcastRefval2713_ARR2713:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType2714_ART2714;
		myrec^.arg2:=pAIdLoc2719_AIL2719;
		 pARefcastRefval2713_ARR2713:=myrec;
		END;
	FUNCTION pAIdLoc2723_AIL2723:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc2723_AIL2723:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2722_AR2722:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2723_AIL2723;
		 pARefval2722_AR2722:=myrec;
		END;
	FUNCTION pADerefRhs2721_ADR2721:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2722_AR2722;
		 pADerefRhs2721_ADR2721:=myrec;
		END;
	FUNCTION pARhsValue2720_ARV2720:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2721_ADR2721;
		 pARhsValue2720_ARV2720:=myrec;
		END;
	FUNCTION pAAssign2712_AA2712:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue2720_ARV2720;
		myrec^.dest:=pARefcastRefval2713_ARR2713;
		 pAAssign2712_AA2712:=myrec;
		END;
	FUNCTION pAAssignMeaning2711_AAM2711:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2712_AA2712;
		 pAAssignMeaning2711_AAM2711:=myrec;
		END;
	FUNCTION pAAssemblypattern2725_AA2725:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'mov BYTE ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern2725_AA2725:=list;
		END;
	FUNCTION pAAssemblesto2724_AA2724:pprintlist;
	begin
		pAAssemblesto2724_AA2724:=pAAssemblypattern2725_AA2725;
		END;
	FUNCTION pASideeffects2730_AS2730:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2730_AS2730:=nil;
		 pASideeffects2730_AS2730:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2731_AUP2731:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2731_AUP2731:=nil;
		 pAUnconditionalPrecond2731_AUP2731:=myrec;
		END;
	FUNCTION STOREBR_STOREBR:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbreg_;
		params^[0]:=patbaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning2711_AAM2711;
		matchedAssembler:=pAAssemblesto2724_AA2724;
		END;
		STOREBR_STOREBR:=myrec;
	END;
	FUNCTION pATypeid2734_AT2734:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2734_AT2734:=myrec;
		END;
	FUNCTION pATypeid2736_AT2736:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2736_AT2736:=myrec;
		END;
	FUNCTION pATypeid2738_AT2738:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ word32  ilcg.pattern@3b9829}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2738_AT2738:=myrec;
		END;
	FUNCTION pATypeid2745_AT2745:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@7a10da}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid2745_AT2745:=myrec;
		END;
	FUNCTION pATypeidType2744_ATT2744:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2745_AT2745;
		 pATypeidType2744_ATT2744:=myrec;
		END;
	FUNCTION pAReference2743_AR2743:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType2744_ATT2744;
		 pAReference2743_AR2743:=myrec;
		END;
	FUNCTION pAReftypeType2742_ART2742:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference2743_AR2743;
		 pAReftypeType2742_ART2742:=myrec;
		END;
	FUNCTION pAIdLoc2746_AIL2746:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2746_AIL2746:=myrec;
		END;
	FUNCTION pARefcastRefval2741_ARR2741:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType2742_ART2742;
		myrec^.arg2:=pAIdLoc2746_AIL2746;
		 pARefcastRefval2741_ARR2741:=myrec;
		END;
	FUNCTION pAIdLoc2750_AIL2750:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc2750_AIL2750:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2749_AR2749:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2750_AIL2750;
		 pARefval2749_AR2749:=myrec;
		END;
	FUNCTION pADerefRhs2748_ADR2748:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2749_AR2749;
		 pADerefRhs2748_ADR2748:=myrec;
		END;
	FUNCTION pARhsValue2747_ARV2747:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2748_ADR2748;
		 pARhsValue2747_ARV2747:=myrec;
		END;
	FUNCTION pAAssign2740_AA2740:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue2747_ARV2747;
		myrec^.dest:=pARefcastRefval2741_ARR2741;
		 pAAssign2740_AA2740:=myrec;
		END;
	FUNCTION pAAssignMeaning2739_AAM2739:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2740_AA2740;
		 pAAssignMeaning2739_AAM2739:=myrec;
		END;
	FUNCTION pAAssemblypattern2752_AA2752:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'mov ' );
		pappendp(list,2);
		pappends(list,' ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern2752_AA2752:=list;
		END;
	FUNCTION pAAssemblesto2751_AA2751:pprintlist;
	begin
		pAAssemblesto2751_AA2751:=pAAssemblypattern2752_AA2752;
		END;
	FUNCTION pASideeffects2759_AS2759:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2759_AS2759:=nil;
		 pASideeffects2759_AS2759:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2760_AUP2760:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2760_AUP2760:=nil;
		 pAUnconditionalPrecond2760_AUP2760:=myrec;
		END;
	FUNCTION STORER_STORER:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patreg_;
		params^[2]:=patword32_32;
		params^[0]:=patmaddrmode_;
		paramcount:=4;
		meaning:=pAAssignMeaning2739_AAM2739;
		matchedAssembler:=pAAssemblesto2751_AA2751;
		END;
		STORER_STORER:=myrec;
	END;
	FUNCTION pATypeid2763_AT2763:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2763_AT2763:=myrec;
		END;
	FUNCTION pATypeid2765_AT2765:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ wreg  ilcg.pattern@18cbf7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2765_AT2765:=myrec;
		END;
	FUNCTION pATypeid2767_AT2767:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ word16  ilcg.pattern@345130}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2767_AT2767:=myrec;
		END;
	FUNCTION pATypeid2774_AT2774:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@7b80c9}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid2774_AT2774:=myrec;
		END;
	FUNCTION pATypeidType2773_ATT2773:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2774_AT2774;
		 pATypeidType2773_ATT2773:=myrec;
		END;
	FUNCTION pAReference2772_AR2772:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType2773_ATT2773;
		 pAReference2772_AR2772:=myrec;
		END;
	FUNCTION pAReftypeType2771_ART2771:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference2772_AR2772;
		 pAReftypeType2771_ART2771:=myrec;
		END;
	FUNCTION pAIdLoc2775_AIL2775:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2775_AIL2775:=myrec;
		END;
	FUNCTION pARefcastRefval2770_ARR2770:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType2771_ART2771;
		myrec^.arg2:=pAIdLoc2775_AIL2775;
		 pARefcastRefval2770_ARR2770:=myrec;
		END;
	FUNCTION pAIdLoc2779_AIL2779:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc2779_AIL2779:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2778_AR2778:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2779_AIL2779;
		 pARefval2778_AR2778:=myrec;
		END;
	FUNCTION pADerefRhs2777_ADR2777:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2778_AR2778;
		 pADerefRhs2777_ADR2777:=myrec;
		END;
	FUNCTION pARhsValue2776_ARV2776:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2777_ADR2777;
		 pARhsValue2776_ARV2776:=myrec;
		END;
	FUNCTION pAAssign2769_AA2769:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue2776_ARV2776;
		myrec^.dest:=pARefcastRefval2770_ARR2770;
		 pAAssign2769_AA2769:=myrec;
		END;
	FUNCTION pAAssignMeaning2768_AAM2768:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2769_AA2769;
		 pAAssignMeaning2768_AAM2768:=myrec;
		END;
	FUNCTION pAAssemblypattern2781_AA2781:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'mov ' );
		pappendp(list,2);
		pappends(list,' ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern2781_AA2781:=list;
		END;
	FUNCTION pAAssemblesto2780_AA2780:pprintlist;
	begin
		pAAssemblesto2780_AA2780:=pAAssemblypattern2781_AA2781;
		END;
	FUNCTION pASideeffects2788_AS2788:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2788_AS2788:=nil;
		 pASideeffects2788_AS2788:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2789_AUP2789:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2789_AUP2789:=nil;
		 pAUnconditionalPrecond2789_AUP2789:=myrec;
		END;
	FUNCTION STOREWR_STOREWR:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patwreg_;
		params^[2]:=patword16_16;
		params^[0]:=patmaddrmode_;
		paramcount:=4;
		meaning:=pAAssignMeaning2768_AAM2768;
		matchedAssembler:=pAAssemblesto2780_AA2780;
		END;
		STOREWR_STOREWR:=myrec;
	END;
	FUNCTION pATypeid2792_AT2792:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2792_AT2792:=myrec;
		END;
	FUNCTION pATypeid2801_AT2801:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@2438f1}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid2801_AT2801:=myrec;
		END;
	FUNCTION pATypeidType2800_ATT2800:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2801_AT2801;
		 pATypeidType2800_ATT2800:=myrec;
		END;
	FUNCTION pAReference2799_AR2799:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType2800_ATT2800;
		 pAReference2799_AR2799:=myrec;
		END;
	FUNCTION pAReftypeType2798_ART2798:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference2799_AR2799;
		 pAReftypeType2798_ART2798:=myrec;
		END;
	FUNCTION pAIdLoc2802_AIL2802:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2802_AIL2802:=myrec;
		END;
	FUNCTION pARefcastRefval2797_ARR2797:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType2798_ART2798;
		myrec^.arg2:=pAIdLoc2802_AIL2802;
		 pARefcastRefval2797_ARR2797:=myrec;
		END;
	FUNCTION pATypeid2809_AT2809:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@2438f1}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid2809_AT2809:=myrec;
		END;
	FUNCTION pATypeidType2808_ATT2808:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2809_AT2809;
		 pATypeidType2808_ATT2808:=myrec;
		END;
	FUNCTION pAReference2807_AR2807:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType2808_ATT2808;
		 pAReference2807_AR2807:=myrec;
		END;
	FUNCTION pAReftypeType2806_ART2806:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference2807_AR2807;
		 pAReftypeType2806_ART2806:=myrec;
		END;
	FUNCTION pAIdLoc2810_AIL2810:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2810_AIL2810:=myrec;
		END;
	FUNCTION pARefcastRefval2805_ARR2805:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType2806_ART2806;
		myrec^.arg2:=pAIdLoc2810_AIL2810;
		 pARefcastRefval2805_ARR2805:=myrec;
		END;
	FUNCTION pADerefRhs2804_ADR2804:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval2805_ARR2805;
		 pADerefRhs2804_ADR2804:=myrec;
		END;
	FUNCTION pARhsValue2803_ARV2803:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2804_ADR2804;
		 pARhsValue2803_ARV2803:=myrec;
		END;
	FUNCTION pAAssign2796_AA2796:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue2803_ARV2803;
		myrec^.dest:=pARefcastRefval2797_ARR2797;
		 pAAssign2796_AA2796:=myrec;
		END;
	FUNCTION pAAssignMeaning2795_AAM2795:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2796_AA2796;
		 pAAssignMeaning2795_AAM2795:=myrec;
		END;
	FUNCTION pAAssemblypattern2812_AA2812:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,';nulmov ' );
		pappendp(list,0);
		pappendp(list,0);
		pAAssemblypattern2812_AA2812:=list;
		END;
	FUNCTION pAAssemblesto2811_AA2811:pprintlist;
	begin
		pAAssemblesto2811_AA2811:=pAAssemblypattern2812_AA2812;
		END;
	FUNCTION pASideeffects2816_AS2816:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2816_AS2816:=nil;
		 pASideeffects2816_AS2816:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2817_AUP2817:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2817_AUP2817:=nil;
		 pAUnconditionalPrecond2817_AUP2817:=myrec;
		END;
	FUNCTION NULMOV_NULMOV:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		params^[1]:=typeparam;
		paramcount:=3;
		meaning:=pAAssignMeaning2795_AAM2795;
		matchedAssembler:=pAAssemblesto2811_AA2811;
		END;
		NULMOV_NULMOV:=myrec;
	END;
	FUNCTION pATypeid2820_AT2820:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ addrmode  ilcg.pattern@7a4076}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2820_AT2820:=myrec;
		END;
	FUNCTION pATypeid2824_AT2824:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@3e965}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2824_AT2824:=myrec;
		END;
	FUNCTION pATypeid2831_AT2831:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@73b9f}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid2831_AT2831:=myrec;
		END;
	FUNCTION pATypeidType2830_ATT2830:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2831_AT2831;
		 pATypeidType2830_ATT2830:=myrec;
		END;
	FUNCTION pAReference2829_AR2829:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType2830_ATT2830;
		 pAReference2829_AR2829:=myrec;
		END;
	FUNCTION pAReftypeType2828_ART2828:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference2829_AR2829;
		 pAReftypeType2828_ART2828:=myrec;
		END;
	FUNCTION pAIdLoc2832_AIL2832:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2832_AIL2832:=myrec;
		END;
	FUNCTION pARefcastRefval2827_ARR2827:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType2828_ART2828;
		myrec^.arg2:=pAIdLoc2832_AIL2832;
		 pARefcastRefval2827_ARR2827:=myrec;
		END;
	FUNCTION pATypeid2836_AT2836:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@73b9f}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid2836_AT2836:=myrec;
		END;
	FUNCTION pATypeidType2835_ATT2835:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2836_AT2836;
		 pATypeidType2835_ATT2835:=myrec;
		END;
	FUNCTION pAConstRhs2838_ACR2838:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(2);;
		 pAConstRhs2838_ACR2838:=myrec;
		END;
	FUNCTION pARhsValue2837_ARV2837:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs2838_ACR2838;
		 pARhsValue2837_ARV2837:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs2834_ACR2834:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType2835_ATT2835;
		myrec^.arg2:=pARhsValue2837_ARV2837;
		 pACastRhs2834_ACR2834:=myrec;
		END;
	FUNCTION pARhsValue2833_ARV2833:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2834_ACR2834;
		 pARhsValue2833_ARV2833:=myrec;
		END;
	FUNCTION pAAssign2826_AA2826:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue2833_ARV2833;
		myrec^.dest:=pARefcastRefval2827_ARR2827;
		 pAAssign2826_AA2826:=myrec;
		END;
	FUNCTION pAAssignMeaning2825_AAM2825:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2826_AA2826;
		 pAAssignMeaning2825_AAM2825:=myrec;
		END;
	FUNCTION pAAssemblypattern2840_AA2840:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'mov ' );
		pappendp(list,1);
		pappends(list,' ' );
		pappendp(list,0);
		pappends(list,',' );
		pappends(list,' ' );
		pappendp(list,2);
		pAAssemblypattern2840_AA2840:=list;
		END;
	FUNCTION pAAssemblesto2839_AA2839:pprintlist;
	begin
		pAAssemblesto2839_AA2839:=pAAssemblypattern2840_AA2840;
		END;
	FUNCTION pASideeffects2848_AS2848:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2848_AS2848:=nil;
		 pASideeffects2848_AS2848:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2849_AUP2849:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2849_AUP2849:=nil;
		 pAUnconditionalPrecond2849_AUP2849:=myrec;
		END;
	FUNCTION STORELIT_STORELIT:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=typeparam;
		params^[2]:=patint_;
		params^[0]:=pataddrmode_;
		paramcount:=4;
		meaning:=pAAssignMeaning2825_AAM2825;
		matchedAssembler:=pAAssemblesto2839_AA2839;
		END;
		STORELIT_STORELIT:=myrec;
	END;
	FUNCTION pATypeid2852_AT2852:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2852_AT2852:=myrec;
		END;
	FUNCTION pATypeid2856_AT2856:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@3e965}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2856_AT2856:=myrec;
		END;
	FUNCTION pATypeid2863_AT2863:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@24be02}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid2863_AT2863:=myrec;
		END;
	FUNCTION pATypeidType2862_ATT2862:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2863_AT2863;
		 pATypeidType2862_ATT2862:=myrec;
		END;
	FUNCTION pAReference2861_AR2861:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType2862_ATT2862;
		 pAReference2861_AR2861:=myrec;
		END;
	FUNCTION pAReftypeType2860_ART2860:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference2861_AR2861;
		 pAReftypeType2860_ART2860:=myrec;
		END;
	FUNCTION pAIdLoc2864_AIL2864:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2864_AIL2864:=myrec;
		END;
	FUNCTION pARefcastRefval2859_ARR2859:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType2860_ART2860;
		myrec^.arg2:=pAIdLoc2864_AIL2864;
		 pARefcastRefval2859_ARR2859:=myrec;
		END;
	FUNCTION pATypeid2868_AT2868:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@24be02}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid2868_AT2868:=myrec;
		END;
	FUNCTION pATypeidType2867_ATT2867:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2868_AT2868;
		 pATypeidType2867_ATT2867:=myrec;
		END;
	FUNCTION pAOptionalsign2872_AO2872:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign2872_AO2872:=nil;
		 pAOptionalsign2872_AO2872:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber2871_AIN2871:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=0 ;
		 pAIntegerNumber2871_AIN2871:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs2870_ANR2870:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber2871_AIN2871;
		 pANumberRhs2870_ANR2870:=myrec;
		END;
	FUNCTION pARhsValue2869_ARV2869:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs2870_ANR2870;
		 pARhsValue2869_ARV2869:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs2866_ACR2866:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType2867_ATT2867;
		myrec^.arg2:=pARhsValue2869_ARV2869;
		 pACastRhs2866_ACR2866:=myrec;
		END;
	FUNCTION pARhsValue2865_ARV2865:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2866_ACR2866;
		 pARhsValue2865_ARV2865:=myrec;
		END;
	FUNCTION pAAssign2858_AA2858:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue2865_ARV2865;
		myrec^.dest:=pARefcastRefval2859_ARR2859;
		 pAAssign2858_AA2858:=myrec;
		END;
	FUNCTION pAAssignMeaning2857_AAM2857:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2858_AA2858;
		 pAAssignMeaning2857_AAM2857:=myrec;
		END;
	FUNCTION pAAssemblypattern2874_AA2874:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'xor ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,0);
		pAAssemblypattern2874_AA2874:=list;
		END;
	FUNCTION pAAssemblesto2873_AA2873:pprintlist;
	begin
		pAAssemblesto2873_AA2873:=pAAssemblypattern2874_AA2874;
		END;
	FUNCTION pASideeffects2879_AS2879:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2879_AS2879:=nil;
		 pASideeffects2879_AS2879:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2880_AUP2880:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2880_AUP2880:=nil;
		 pAUnconditionalPrecond2880_AUP2880:=myrec;
		END;
	FUNCTION CLEARREG_CLEARREG:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=typeparam;
		params^[2]:=patint_;
		params^[0]:=patreg_;
		paramcount:=4;
		meaning:=pAAssignMeaning2857_AAM2857;
		matchedAssembler:=pAAssemblesto2873_AA2873;
		END;
		CLEARREG_CLEARREG:=myrec;
	END;
	FUNCTION pATypeid2883_AT2883:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ nonmultoperator  ilcg.pattern@145582}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2883_AT2883:=myrec;
		END;
	FUNCTION pATypeid2885_AT2885:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ addrmode  ilcg.pattern@7a4076}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2885_AT2885:=myrec;
		END;
	FUNCTION pATypeid2889_AT2889:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ offset  ilcg.pattern@331fd9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2889_AT2889:=myrec;
		END;
	FUNCTION pATypeid2896_AT2896:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@fa97f}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid2896_AT2896:=myrec;
		END;
	FUNCTION pATypeidType2895_ATT2895:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2896_AT2896;
		 pATypeidType2895_ATT2895:=myrec;
		END;
	FUNCTION pAReference2894_AR2894:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType2895_ATT2895;
		 pAReference2894_AR2894:=myrec;
		END;
	FUNCTION pAReftypeType2893_ART2893:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference2894_AR2894;
		 pAReftypeType2893_ART2893:=myrec;
		END;
	FUNCTION pAIdLoc2897_AIL2897:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc2897_AIL2897:=myrec;
		END;
	FUNCTION pARefcastRefval2892_ARR2892:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType2893_ART2893;
		myrec^.arg2:=pAIdLoc2897_AIL2897;
		 pARefcastRefval2892_ARR2892:=myrec;
		END;
	FUNCTION pAIdentifierDyadic2899_AID2899:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic2899_AID2899:=myrec;
		END;
	FUNCTION pAIdLoc2903_AIL2903:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc2903_AIL2903:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2902_AR2902:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2903_AIL2903;
		 pARefval2902_AR2902:=myrec;
		END;
	FUNCTION pADerefRhs2901_ADR2901:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2902_AR2902;
		 pADerefRhs2901_ADR2901:=myrec;
		END;
	FUNCTION pARhsValue2900_ARV2900:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2901_ADR2901;
		 pARhsValue2900_ARV2900:=myrec;
		END;
	FUNCTION pATypeid2907_AT2907:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@fa97f}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid2907_AT2907:=myrec;
		END;
	FUNCTION pATypeidType2906_ATT2906:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2907_AT2907;
		 pATypeidType2906_ATT2906:=myrec;
		END;
	FUNCTION pAIdLoc2909_AIL2909:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(3);
		 pAIdLoc2909_AIL2909:=myrec;
		END;
	FUNCTION pALocValue2908_ALV2908:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2909_AIL2909;
		 pALocValue2908_ALV2908:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs2905_ACR2905:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType2906_ATT2906;
		myrec^.arg2:=pALocValue2908_ALV2908;
		 pACastRhs2905_ACR2905:=myrec;
		END;
	FUNCTION pARhsValue2904_ARV2904:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2905_ACR2905;
		 pARhsValue2904_ARV2904:=myrec;
		END;
	FUNCTION pADyadicValue2898_ADV2898:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue2900_ARV2900;
		myrec^.arg2:=pARhsValue2904_ARV2904;
		myrec^.fn:=pAIdentifierDyadic2899_AID2899;
		 pADyadicValue2898_ADV2898:=myrec;
		END;
	FUNCTION pAAssign2891_AA2891:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue2898_ADV2898;
		myrec^.dest:=pARefcastRefval2892_ARR2892;
		 pAAssign2891_AA2891:=myrec;
		END;
	FUNCTION pAAssignMeaning2890_AAM2890:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2891_AA2891;
		 pAAssignMeaning2890_AAM2890:=myrec;
		END;
	FUNCTION pAAssemblypattern2911_AA2911:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'  ' );
		pappendp(list,2);
		pappends(list,' ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,3);
		pAAssemblypattern2911_AA2911:=list;
		END;
	FUNCTION pAAssemblesto2910_AA2910:pprintlist;
	begin
		pAAssemblesto2910_AA2910:=pAAssemblypattern2911_AA2911;
		END;
	FUNCTION pASideeffects2919_AS2919:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2919_AS2919:=nil;
		 pASideeffects2919_AS2919:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2920_AUP2920:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2920_AUP2920:=nil;
		 pAUnconditionalPrecond2920_AUP2920:=myrec;
		END;
	FUNCTION RMLIT_RMLIT:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=typeparam;
		params^[1]:=pataddrmode_;
		params^[3]:=patoffset_;
		params^[0]:=patnonmultoperator_;
		paramcount:=5;
		meaning:=pAAssignMeaning2890_AAM2890;
		matchedAssembler:=pAAssemblesto2910_AA2910;
		END;
		RMLIT_RMLIT:=myrec;
	END;
	FUNCTION pATypeid2923_AT2923:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ addrmode  ilcg.pattern@7a4076}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2923_AT2923:=myrec;
		END;
	FUNCTION pATypeid2925_AT2925:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@3e965}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2925_AT2925:=myrec;
		END;
	FUNCTION pATypeid2932_AT2932:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@4478fe}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid2932_AT2932:=myrec;
		END;
	FUNCTION pATypeidType2931_ATT2931:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2932_AT2932;
		 pATypeidType2931_ATT2931:=myrec;
		END;
	FUNCTION pAReference2930_AR2930:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType2931_ATT2931;
		 pAReference2930_AR2930:=myrec;
		END;
	FUNCTION pAReftypeType2929_ART2929:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference2930_AR2930;
		 pAReftypeType2929_ART2929:=myrec;
		END;
	FUNCTION pAIdLoc2933_AIL2933:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2933_AIL2933:=myrec;
		END;
	FUNCTION pARefcastRefval2928_ARR2928:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType2929_ART2929;
		myrec^.arg2:=pAIdLoc2933_AIL2933;
		 pARefcastRefval2928_ARR2928:=myrec;
		END;
	FUNCTION pAPlusDyadic2935_APD2935:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic2935_APD2935:=myrec;
		END;
	FUNCTION pAIdLoc2939_AIL2939:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2939_AIL2939:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2938_AR2938:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2939_AIL2939;
		 pARefval2938_AR2938:=myrec;
		END;
	FUNCTION pADerefRhs2937_ADR2937:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2938_AR2938;
		 pADerefRhs2937_ADR2937:=myrec;
		END;
	FUNCTION pARhsValue2936_ARV2936:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2937_ADR2937;
		 pARhsValue2936_ARV2936:=myrec;
		END;
	FUNCTION pAOptionalsign2943_AO2943:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign2943_AO2943:=nil;
		 pAOptionalsign2943_AO2943:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber2942_AIN2942:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=1 ;
		 pAIntegerNumber2942_AIN2942:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs2941_ANR2941:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber2942_AIN2942;
		 pANumberRhs2941_ANR2941:=myrec;
		END;
	FUNCTION pARhsValue2940_ARV2940:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs2941_ANR2941;
		 pARhsValue2940_ARV2940:=myrec;
		END;
	FUNCTION pADyadicValue2934_ADV2934:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue2936_ARV2936;
		myrec^.arg2:=pARhsValue2940_ARV2940;
		myrec^.fn:=pAPlusDyadic2935_APD2935;
		 pADyadicValue2934_ADV2934:=myrec;
		END;
	FUNCTION pAAssign2927_AA2927:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue2934_ADV2934;
		myrec^.dest:=pARefcastRefval2928_ARR2928;
		 pAAssign2927_AA2927:=myrec;
		END;
	FUNCTION pAAssignMeaning2926_AAM2926:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2927_AA2927;
		 pAAssignMeaning2926_AAM2926:=myrec;
		END;
	FUNCTION pAAssemblypattern2945_AA2945:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'inc ' );
		pappendp(list,1);
		pappends(list,' ' );
		pappendp(list,0);
		pAAssemblypattern2945_AA2945:=list;
		END;
	FUNCTION pAAssemblesto2944_AA2944:pprintlist;
	begin
		pAAssemblesto2944_AA2944:=pAAssemblypattern2945_AA2945;
		END;
	FUNCTION pASideeffects2950_AS2950:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2950_AS2950:=nil;
		 pASideeffects2950_AS2950:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2951_AUP2951:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2951_AUP2951:=nil;
		 pAUnconditionalPrecond2951_AUP2951:=myrec;
		END;
	FUNCTION INC_INC:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patint_;
		params^[0]:=pataddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning2926_AAM2926;
		matchedAssembler:=pAAssemblesto2944_AA2944;
		END;
		INC_INC:=myrec;
	END;
	FUNCTION pATypeid2954_AT2954:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ addrmode  ilcg.pattern@7a4076}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2954_AT2954:=myrec;
		END;
	FUNCTION pATypeid2956_AT2956:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@3e965}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2956_AT2956:=myrec;
		END;
	FUNCTION pATypeid2963_AT2963:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@1ff563}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid2963_AT2963:=myrec;
		END;
	FUNCTION pATypeidType2962_ATT2962:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2963_AT2963;
		 pATypeidType2962_ATT2962:=myrec;
		END;
	FUNCTION pAReference2961_AR2961:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType2962_ATT2962;
		 pAReference2961_AR2961:=myrec;
		END;
	FUNCTION pAReftypeType2960_ART2960:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference2961_AR2961;
		 pAReftypeType2960_ART2960:=myrec;
		END;
	FUNCTION pAIdLoc2964_AIL2964:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2964_AIL2964:=myrec;
		END;
	FUNCTION pARefcastRefval2959_ARR2959:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType2960_ART2960;
		myrec^.arg2:=pAIdLoc2964_AIL2964;
		 pARefcastRefval2959_ARR2959:=myrec;
		END;
	FUNCTION pAMinusDyadic2966_AMD2966:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpminus;
		 pAMinusDyadic2966_AMD2966:=myrec;
		END;
	FUNCTION pATypeid2970_AT2970:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@1ff563}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid2970_AT2970:=myrec;
		END;
	FUNCTION pATypeidType2969_ATT2969:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid2970_AT2970;
		 pATypeidType2969_ATT2969:=myrec;
		END;
	FUNCTION pAIdLoc2974_AIL2974:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc2974_AIL2974:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval2973_AR2973:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc2974_AIL2974;
		 pARefval2973_AR2973:=myrec;
		END;
	FUNCTION pADerefRhs2972_ADR2972:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval2973_AR2973;
		 pADerefRhs2972_ADR2972:=myrec;
		END;
	FUNCTION pARhsValue2971_ARV2971:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs2972_ADR2972;
		 pARhsValue2971_ARV2971:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs2968_ACR2968:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType2969_ATT2969;
		myrec^.arg2:=pARhsValue2971_ARV2971;
		 pACastRhs2968_ACR2968:=myrec;
		END;
	FUNCTION pARhsValue2967_ARV2967:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs2968_ACR2968;
		 pARhsValue2967_ARV2967:=myrec;
		END;
	FUNCTION pAOptionalsign2978_AO2978:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign2978_AO2978:=nil;
		 pAOptionalsign2978_AO2978:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber2977_AIN2977:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=1 ;
		 pAIntegerNumber2977_AIN2977:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs2976_ANR2976:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber2977_AIN2977;
		 pANumberRhs2976_ANR2976:=myrec;
		END;
	FUNCTION pARhsValue2975_ARV2975:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs2976_ANR2976;
		 pARhsValue2975_ARV2975:=myrec;
		END;
	FUNCTION pADyadicValue2965_ADV2965:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue2967_ARV2967;
		myrec^.arg2:=pARhsValue2975_ARV2975;
		myrec^.fn:=pAMinusDyadic2966_AMD2966;
		 pADyadicValue2965_ADV2965:=myrec;
		END;
	FUNCTION pAAssign2958_AA2958:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue2965_ADV2965;
		myrec^.dest:=pARefcastRefval2959_ARR2959;
		 pAAssign2958_AA2958:=myrec;
		END;
	FUNCTION pAAssignMeaning2957_AAM2957:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2958_AA2958;
		 pAAssignMeaning2957_AAM2957:=myrec;
		END;
	FUNCTION pAAssemblypattern2980_AA2980:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'dec ' );
		pappendp(list,1);
		pappends(list,' ' );
		pappendp(list,0);
		pAAssemblypattern2980_AA2980:=list;
		END;
	FUNCTION pAAssemblesto2979_AA2979:pprintlist;
	begin
		pAAssemblesto2979_AA2979:=pAAssemblypattern2980_AA2980;
		END;
	FUNCTION pASideeffects2985_AS2985:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects2985_AS2985:=nil;
		 pASideeffects2985_AS2985:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond2986_AUP2986:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond2986_AUP2986:=nil;
		 pAUnconditionalPrecond2986_AUP2986:=myrec;
		END;
	FUNCTION DEC_DEC:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patint_;
		params^[0]:=pataddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning2957_AAM2957;
		matchedAssembler:=pAAssemblesto2979_AA2979;
		END;
		DEC_DEC:=myrec;
	END;
	FUNCTION pATypeid2989_AT2989:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ shiftop  ilcg.pattern@4c02d4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2989_AT2989:=myrec;
		END;
	FUNCTION pATypeid2991_AT2991:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ shiftcount  ilcg.pattern@708d0f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2991_AT2991:=myrec;
		END;
	FUNCTION pATypeid2993_AT2993:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ anyreg  ilcg.pattern@18b13b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid2993_AT2993:=myrec;
		END;
	FUNCTION pATypeid3002_AT3002:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@1f1f12}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid3002_AT3002:=myrec;
		END;
	FUNCTION pATypeidType3001_ATT3001:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3002_AT3002;
		 pATypeidType3001_ATT3001:=myrec;
		END;
	FUNCTION pAReference3000_AR3000:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType3001_ATT3001;
		 pAReference3000_AR3000:=myrec;
		END;
	FUNCTION pAReftypeType2999_ART2999:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference3000_AR3000;
		 pAReftypeType2999_ART2999:=myrec;
		END;
	FUNCTION pAIdLoc3003_AIL3003:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc3003_AIL3003:=myrec;
		END;
	FUNCTION pARefcastRefval2998_ARR2998:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType2999_ART2999;
		myrec^.arg2:=pAIdLoc3003_AIL3003;
		 pARefcastRefval2998_ARR2998:=myrec;
		END;
	FUNCTION pATypeid3007_AT3007:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@1f1f12}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid3007_AT3007:=myrec;
		END;
	FUNCTION pATypeidType3006_ATT3006:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3007_AT3007;
		 pATypeidType3006_ATT3006:=myrec;
		END;
	FUNCTION pAIdentifierDyadic3009_AID3009:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic3009_AID3009:=myrec;
		END;
	FUNCTION pAIdLoc3013_AIL3013:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc3013_AIL3013:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3012_AR3012:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3013_AIL3013;
		 pARefval3012_AR3012:=myrec;
		END;
	FUNCTION pADerefRhs3011_ADR3011:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3012_AR3012;
		 pADerefRhs3011_ADR3011:=myrec;
		END;
	FUNCTION pARhsValue3010_ARV3010:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3011_ADR3011;
		 pARhsValue3010_ARV3010:=myrec;
		END;
	FUNCTION pAIdLoc3015_AIL3015:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3015_AIL3015:=myrec;
		END;
	FUNCTION pALocValue3014_ALV3014:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3015_AIL3015;
		 pALocValue3014_ALV3014:=myrec;
		END;
	FUNCTION pADyadicValue3008_ADV3008:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3010_ARV3010;
		myrec^.arg2:=pALocValue3014_ALV3014;
		myrec^.fn:=pAIdentifierDyadic3009_AID3009;
		 pADyadicValue3008_ADV3008:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs3005_ACR3005:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType3006_ATT3006;
		myrec^.arg2:=pADyadicValue3008_ADV3008;
		 pACastRhs3005_ACR3005:=myrec;
		END;
	FUNCTION pARhsValue3004_ARV3004:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3005_ACR3005;
		 pARhsValue3004_ARV3004:=myrec;
		END;
	FUNCTION pAAssign2997_AA2997:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue3004_ARV3004;
		myrec^.dest:=pARefcastRefval2998_ARR2998;
		 pAAssign2997_AA2997:=myrec;
		END;
	FUNCTION pAAssignMeaning2996_AAM2996:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign2997_AA2997;
		 pAAssignMeaning2996_AAM2996:=myrec;
		END;
	FUNCTION pAAssemblypattern3017_AA3017:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'sh' );
		pappendp(list,0);
		pappends(list,' ' );
		pappendp(list,2);
		pappends(list,', ' );
		pappendp(list,1);
		pAAssemblypattern3017_AA3017:=list;
		END;
	FUNCTION pAAssemblesto3016_AA3016:pprintlist;
	begin
		pAAssemblesto3016_AA3016:=pAAssemblypattern3017_AA3017;
		END;
	FUNCTION pASideeffects3024_AS3024:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3024_AS3024:=nil;
		 pASideeffects3024_AS3024:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3025_AUP3025:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3025_AUP3025:=nil;
		 pAUnconditionalPrecond3025_AUP3025:=myrec;
		END;
	FUNCTION SHIFT_SHIFT:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[3]:=typeparam;
		params^[1]:=patshiftcount_;
		params^[2]:=patanyreg_;
		params^[0]:=patshiftop_;
		paramcount:=5;
		meaning:=pAAssignMeaning2996_AAM2996;
		matchedAssembler:=pAAssemblesto3016_AA3016;
		END;
		SHIFT_SHIFT:=myrec;
	END;
	FUNCTION pATypeid3028_AT3028:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ nonmultoperator  ilcg.pattern@145582}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3028_AT3028:=myrec;
		END;
	FUNCTION pATypeid3030_AT3030:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ addrmode  ilcg.pattern@7a4076}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3030_AT3030:=myrec;
		END;
	FUNCTION pATypeid3032_AT3032:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ anyreg  ilcg.pattern@18b13b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3032_AT3032:=myrec;
		END;
	FUNCTION pATypeid3034_AT3034:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ wordupto32  ilcg.pattern@c6692}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3034_AT3034:=myrec;
		END;
	FUNCTION pATypeid3041_AT3041:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@52d654}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid3041_AT3041:=myrec;
		END;
	FUNCTION pATypeidType3040_ATT3040:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3041_AT3041;
		 pATypeidType3040_ATT3040:=myrec;
		END;
	FUNCTION pAReference3039_AR3039:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType3040_ATT3040;
		 pAReference3039_AR3039:=myrec;
		END;
	FUNCTION pAReftypeType3038_ART3038:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference3039_AR3039;
		 pAReftypeType3038_ART3038:=myrec;
		END;
	FUNCTION pAIdLoc3042_AIL3042:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3042_AIL3042:=myrec;
		END;
	FUNCTION pARefcastRefval3037_ARR3037:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType3038_ART3038;
		myrec^.arg2:=pAIdLoc3042_AIL3042;
		 pARefcastRefval3037_ARR3037:=myrec;
		END;
	FUNCTION pAIdentifierDyadic3044_AID3044:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic3044_AID3044:=myrec;
		END;
	FUNCTION pATypeid3048_AT3048:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@52d654}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid3048_AT3048:=myrec;
		END;
	FUNCTION pATypeidType3047_ATT3047:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3048_AT3048;
		 pATypeidType3047_ATT3047:=myrec;
		END;
	FUNCTION pAIdLoc3052_AIL3052:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3052_AIL3052:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3051_AR3051:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3052_AIL3052;
		 pARefval3051_AR3051:=myrec;
		END;
	FUNCTION pADerefRhs3050_ADR3050:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3051_AR3051;
		 pADerefRhs3050_ADR3050:=myrec;
		END;
	FUNCTION pARhsValue3049_ARV3049:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3050_ADR3050;
		 pARhsValue3049_ARV3049:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs3046_ACR3046:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType3047_ATT3047;
		myrec^.arg2:=pARhsValue3049_ARV3049;
		 pACastRhs3046_ACR3046:=myrec;
		END;
	FUNCTION pARhsValue3045_ARV3045:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3046_ACR3046;
		 pARhsValue3045_ARV3045:=myrec;
		END;
	FUNCTION pATypeid3056_AT3056:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@52d654}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid3056_AT3056:=myrec;
		END;
	FUNCTION pATypeidType3055_ATT3055:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3056_AT3056;
		 pATypeidType3055_ATT3055:=myrec;
		END;
	FUNCTION pAIdLoc3060_AIL3060:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc3060_AIL3060:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3059_AR3059:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3060_AIL3060;
		 pARefval3059_AR3059:=myrec;
		END;
	FUNCTION pADerefRhs3058_ADR3058:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3059_AR3059;
		 pADerefRhs3058_ADR3058:=myrec;
		END;
	FUNCTION pARhsValue3057_ARV3057:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3058_ADR3058;
		 pARhsValue3057_ARV3057:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs3054_ACR3054:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType3055_ATT3055;
		myrec^.arg2:=pARhsValue3057_ARV3057;
		 pACastRhs3054_ACR3054:=myrec;
		END;
	FUNCTION pARhsValue3053_ARV3053:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3054_ACR3054;
		 pARhsValue3053_ARV3053:=myrec;
		END;
	FUNCTION pADyadicValue3043_ADV3043:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3045_ARV3045;
		myrec^.arg2:=pARhsValue3053_ARV3053;
		myrec^.fn:=pAIdentifierDyadic3044_AID3044;
		 pADyadicValue3043_ADV3043:=myrec;
		END;
	FUNCTION pAAssign3036_AA3036:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue3043_ADV3043;
		myrec^.dest:=pARefcastRefval3037_ARR3037;
		 pAAssign3036_AA3036:=myrec;
		END;
	FUNCTION pAAssignMeaning3035_AAM3035:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3036_AA3036;
		 pAAssignMeaning3035_AAM3035:=myrec;
		END;
	FUNCTION pAAssemblypattern3062_AA3062:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'  ' );
		pappendp(list,3);
		pappends(list,' ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,2);
		pAAssemblypattern3062_AA3062:=list;
		END;
	FUNCTION pAAssemblesto3061_AA3061:pprintlist;
	begin
		pAAssemblesto3061_AA3061:=pAAssemblypattern3062_AA3062;
		END;
	FUNCTION pASideeffects3070_AS3070:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3070_AS3070:=nil;
		 pASideeffects3070_AS3070:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3071_AUP3071:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3071_AUP3071:=nil;
		 pAUnconditionalPrecond3071_AUP3071:=myrec;
		END;
	FUNCTION RMR_RMR:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patanyreg_;
		params^[3]:=patwordupto32_32;
		params^[1]:=pataddrmode_;
		params^[0]:=patnonmultoperator_;
		paramcount:=5;
		meaning:=pAAssignMeaning3035_AAM3035;
		matchedAssembler:=pAAssemblesto3061_AA3061;
		END;
		RMR_RMR:=myrec;
	END;
	FUNCTION pATypeid3074_AT3074:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ nonmultoperator  ilcg.pattern@145582}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3074_AT3074:=myrec;
		END;
	FUNCTION pATypeid3076_AT3076:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ addrmode  ilcg.pattern@7a4076}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3076_AT3076:=myrec;
		END;
	FUNCTION pATypeid3078_AT3078:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3078_AT3078:=myrec;
		END;
	FUNCTION pATypeid3080_AT3080:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ byte  ilcg.pattern@39491b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3080_AT3080:=myrec;
		END;
	FUNCTION pATypeid3087_AT3087:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@41dc79}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid3087_AT3087:=myrec;
		END;
	FUNCTION pATypeidType3086_ATT3086:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3087_AT3087;
		 pATypeidType3086_ATT3086:=myrec;
		END;
	FUNCTION pAReference3085_AR3085:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType3086_ATT3086;
		 pAReference3085_AR3085:=myrec;
		END;
	FUNCTION pAReftypeType3084_ART3084:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference3085_AR3085;
		 pAReftypeType3084_ART3084:=myrec;
		END;
	FUNCTION pAIdLoc3088_AIL3088:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3088_AIL3088:=myrec;
		END;
	FUNCTION pARefcastRefval3083_ARR3083:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType3084_ART3084;
		myrec^.arg2:=pAIdLoc3088_AIL3088;
		 pARefcastRefval3083_ARR3083:=myrec;
		END;
	FUNCTION pAIdentifierDyadic3090_AID3090:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic3090_AID3090:=myrec;
		END;
	FUNCTION pATypeid3094_AT3094:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@41dc79}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid3094_AT3094:=myrec;
		END;
	FUNCTION pATypeidType3093_ATT3093:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3094_AT3094;
		 pATypeidType3093_ATT3093:=myrec;
		END;
	FUNCTION pAIdLoc3098_AIL3098:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3098_AIL3098:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3097_AR3097:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3098_AIL3098;
		 pARefval3097_AR3097:=myrec;
		END;
	FUNCTION pADerefRhs3096_ADR3096:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3097_AR3097;
		 pADerefRhs3096_ADR3096:=myrec;
		END;
	FUNCTION pARhsValue3095_ARV3095:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3096_ADR3096;
		 pARhsValue3095_ARV3095:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs3092_ACR3092:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType3093_ATT3093;
		myrec^.arg2:=pARhsValue3095_ARV3095;
		 pACastRhs3092_ACR3092:=myrec;
		END;
	FUNCTION pARhsValue3091_ARV3091:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3092_ACR3092;
		 pARhsValue3091_ARV3091:=myrec;
		END;
	FUNCTION pATypeid3102_AT3102:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@41dc79}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid3102_AT3102:=myrec;
		END;
	FUNCTION pATypeidType3101_ATT3101:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3102_AT3102;
		 pATypeidType3101_ATT3101:=myrec;
		END;
	FUNCTION pAIdLoc3106_AIL3106:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc3106_AIL3106:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3105_AR3105:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3106_AIL3106;
		 pARefval3105_AR3105:=myrec;
		END;
	FUNCTION pADerefRhs3104_ADR3104:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3105_AR3105;
		 pADerefRhs3104_ADR3104:=myrec;
		END;
	FUNCTION pARhsValue3103_ARV3103:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3104_ADR3104;
		 pARhsValue3103_ARV3103:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs3100_ACR3100:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType3101_ATT3101;
		myrec^.arg2:=pARhsValue3103_ARV3103;
		 pACastRhs3100_ACR3100:=myrec;
		END;
	FUNCTION pARhsValue3099_ARV3099:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3100_ACR3100;
		 pARhsValue3099_ARV3099:=myrec;
		END;
	FUNCTION pADyadicValue3089_ADV3089:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3091_ARV3091;
		myrec^.arg2:=pARhsValue3099_ARV3099;
		myrec^.fn:=pAIdentifierDyadic3090_AID3090;
		 pADyadicValue3089_ADV3089:=myrec;
		END;
	FUNCTION pAAssign3082_AA3082:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue3089_ADV3089;
		myrec^.dest:=pARefcastRefval3083_ARR3083;
		 pAAssign3082_AA3082:=myrec;
		END;
	FUNCTION pAAssignMeaning3081_AAM3081:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3082_AA3082;
		 pAAssignMeaning3081_AAM3081:=myrec;
		END;
	FUNCTION pAAssemblypattern3108_AA3108:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'  ' );
		pappendp(list,3);
		pappends(list,' ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,2);
		pAAssemblypattern3108_AA3108:=list;
		END;
	FUNCTION pAAssemblesto3107_AA3107:pprintlist;
	begin
		pAAssemblesto3107_AA3107:=pAAssemblypattern3108_AA3108;
		END;
	FUNCTION pASideeffects3116_AS3116:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3116_AS3116:=nil;
		 pASideeffects3116_AS3116:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3117_AUP3117:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3117_AUP3117:=nil;
		 pAUnconditionalPrecond3117_AUP3117:=myrec;
		END;
	FUNCTION RMRB_RMRB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patbreg_;
		params^[3]:=patbyte_;
		params^[1]:=pataddrmode_;
		params^[0]:=patnonmultoperator_;
		paramcount:=5;
		meaning:=pAAssignMeaning3081_AAM3081;
		matchedAssembler:=pAAssemblesto3107_AA3107;
		END;
		RMRB_RMRB:=myrec;
	END;
	FUNCTION pATypeid3120_AT3120:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ addrmode  ilcg.pattern@7a4076}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3120_AT3120:=myrec;
		END;
	FUNCTION pATypeid3122_AT3122:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3122_AT3122:=myrec;
		END;
	FUNCTION pATypeid3124_AT3124:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3124_AT3124:=myrec;
		END;
	FUNCTION pAIdLoc3128_AIL3128:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc3128_AIL3128:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3127_AR3127:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3128_AIL3128;
		 pARefval3127_AR3127:=myrec;
		END;
	FUNCTION pASatplusDyadic3130_ASD3130:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpsatplus;
		 pASatplusDyadic3130_ASD3130:=myrec;
		END;
	FUNCTION pAUint8Unsigned3136_AU8U3136:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned3136_AU8U3136:=myrec;
		END;
	FUNCTION pAUnsignedTformat3135_AUT3135:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned3136_AU8U3136;
		 pAUnsignedTformat3135_AUT3135:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype3134_ATP3134:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype3134_ATP3134:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3133_APT3133:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType3133_APT3133:=myrec;
		END;
	FUNCTION pAIdLoc3140_AIL3140:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc3140_AIL3140:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3139_AR3139:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3140_AIL3140;
		 pARefval3139_AR3139:=myrec;
		END;
	FUNCTION pADerefRhs3138_ADR3138:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3139_AR3139;
		 pADerefRhs3138_ADR3138:=myrec;
		END;
	FUNCTION pARhsValue3137_ARV3137:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3138_ADR3138;
		 pARhsValue3137_ARV3137:=myrec;
		END;
		(*! try to cast to type: uint8*)
	FUNCTION pACastRhs3132_ACR3132:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType3133_APT3133;
		myrec^.arg2:=pARhsValue3137_ARV3137;
		 pACastRhs3132_ACR3132:=myrec;
		END;
	FUNCTION pARhsValue3131_ARV3131:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3132_ACR3132;
		 pARhsValue3131_ARV3131:=myrec;
		END;
	FUNCTION pAIdLoc3144_AIL3144:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3144_AIL3144:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3143_AR3143:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3144_AIL3144;
		 pARefval3143_AR3143:=myrec;
		END;
	FUNCTION pADerefRhs3142_ADR3142:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3143_AR3143;
		 pADerefRhs3142_ADR3142:=myrec;
		END;
	FUNCTION pARhsValue3141_ARV3141:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3142_ADR3142;
		 pARhsValue3141_ARV3141:=myrec;
		END;
	FUNCTION pADyadicValue3129_ADV3129:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3131_ARV3131;
		myrec^.arg2:=pARhsValue3141_ARV3141;
		myrec^.fn:=pASatplusDyadic3130_ASD3130;
		 pADyadicValue3129_ADV3129:=myrec;
		END;
	FUNCTION pAAssign3126_AA3126:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue3129_ADV3129;
		myrec^.dest:=pARefval3127_AR3127;
		 pAAssign3126_AA3126:=myrec;
		END;
	FUNCTION pAAssignMeaning3125_AAM3125:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3126_AA3126;
		 pAAssignMeaning3125_AAM3125:=myrec;
		END;
	FUNCTION pAAssemblypattern3146_AA3146:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'add  ' );
		pappendp(list,2);
		pappends(list,',' );
		pappendp(list,1);
		pappends(list,'\n jnc $+4\n mov ' );
		pappendp(list,2);
		pappends(list,',255\n nop\n nop' );
		pAAssemblypattern3146_AA3146:=list;
		END;
	FUNCTION pAAssemblesto3145_AA3145:pprintlist;
	begin
		pAAssemblesto3145_AA3145:=pAAssemblypattern3146_AA3146;
		END;
	FUNCTION pASideeffects3154_AS3154:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3154_AS3154:=nil;
		 pASideeffects3154_AS3154:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3155_AUP3155:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3155_AUP3155:=nil;
		 pAUnconditionalPrecond3155_AUP3155:=myrec;
		END;
	FUNCTION ADDUSB_ADDUSB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbreg_;
		params^[0]:=pataddrmode_;
		params^[2]:=patbreg_;
		paramcount:=4;
		meaning:=pAAssignMeaning3125_AAM3125;
		matchedAssembler:=pAAssemblesto3145_AA3145;
		END;
		ADDUSB_ADDUSB:=myrec;
	END;
	FUNCTION pATypeid3158_AT3158:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3158_AT3158:=myrec;
		END;
	FUNCTION pATypeid3160_AT3160:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3160_AT3160:=myrec;
		END;
	FUNCTION pAIdLoc3164_AIL3164:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3164_AIL3164:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3163_AR3163:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3164_AIL3164;
		 pARefval3163_AR3163:=myrec;
		END;
	FUNCTION pASatminusDyadic3166_ASD3166:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpsatminus;
		 pASatminusDyadic3166_ASD3166:=myrec;
		END;
	FUNCTION pAUint8Unsigned3172_AU8U3172:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned3172_AU8U3172:=myrec;
		END;
	FUNCTION pAUnsignedTformat3171_AUT3171:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned3172_AU8U3172;
		 pAUnsignedTformat3171_AUT3171:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype3170_ATP3170:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype3170_ATP3170:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3169_APT3169:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType3169_APT3169:=myrec;
		END;
	FUNCTION pAIdLoc3176_AIL3176:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3176_AIL3176:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3175_AR3175:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3176_AIL3176;
		 pARefval3175_AR3175:=myrec;
		END;
	FUNCTION pADerefRhs3174_ADR3174:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3175_AR3175;
		 pADerefRhs3174_ADR3174:=myrec;
		END;
	FUNCTION pARhsValue3173_ARV3173:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3174_ADR3174;
		 pARhsValue3173_ARV3173:=myrec;
		END;
		(*! try to cast to type: uint8*)
	FUNCTION pACastRhs3168_ACR3168:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType3169_APT3169;
		myrec^.arg2:=pARhsValue3173_ARV3173;
		 pACastRhs3168_ACR3168:=myrec;
		END;
	FUNCTION pARhsValue3167_ARV3167:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3168_ACR3168;
		 pARhsValue3167_ARV3167:=myrec;
		END;
	FUNCTION pAIdLoc3180_AIL3180:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3180_AIL3180:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3179_AR3179:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3180_AIL3180;
		 pARefval3179_AR3179:=myrec;
		END;
	FUNCTION pADerefRhs3178_ADR3178:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3179_AR3179;
		 pADerefRhs3178_ADR3178:=myrec;
		END;
	FUNCTION pARhsValue3177_ARV3177:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3178_ADR3178;
		 pARhsValue3177_ARV3177:=myrec;
		END;
	FUNCTION pADyadicValue3165_ADV3165:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3167_ARV3167;
		myrec^.arg2:=pARhsValue3177_ARV3177;
		myrec^.fn:=pASatminusDyadic3166_ASD3166;
		 pADyadicValue3165_ADV3165:=myrec;
		END;
	FUNCTION pAAssign3162_AA3162:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue3165_ADV3165;
		myrec^.dest:=pARefval3163_AR3163;
		 pAAssign3162_AA3162:=myrec;
		END;
	FUNCTION pAAssignMeaning3161_AAM3161:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3162_AA3162;
		 pAAssignMeaning3161_AAM3161:=myrec;
		END;
	FUNCTION pAAssemblypattern3182_AA3182:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'sub  ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,0);
		pappends(list,'\n jnc $+4\n mov ' );
		pappendp(list,1);
		pappends(list,',0\n nop\n nop' );
		pAAssemblypattern3182_AA3182:=list;
		END;
	FUNCTION pAAssemblesto3181_AA3181:pprintlist;
	begin
		pAAssemblesto3181_AA3181:=pAAssemblypattern3182_AA3182;
		END;
	FUNCTION pASideeffects3190_AS3190:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3190_AS3190:=nil;
		 pASideeffects3190_AS3190:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3191_AUP3191:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3191_AUP3191:=nil;
		 pAUnconditionalPrecond3191_AUP3191:=myrec;
		END;
	FUNCTION SUBUSB_SUBUSB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patbreg_;
		params^[1]:=patbreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning3161_AAM3161;
		matchedAssembler:=pAAssemblesto3181_AA3181;
		END;
		SUBUSB_SUBUSB:=myrec;
	END;
	FUNCTION pATypeid3194_AT3194:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3194_AT3194:=myrec;
		END;
	FUNCTION pATypeid3196_AT3196:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3196_AT3196:=myrec;
		END;
	FUNCTION pAIdLoc3200_AIL3200:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3200_AIL3200:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3199_AR3199:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3200_AIL3200;
		 pARefval3199_AR3199:=myrec;
		END;
	FUNCTION pAInt8Signed3206_AI8S3206:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed3206_AI8S3206:=myrec;
		END;
	FUNCTION pASignedTformat3205_AST3205:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed3206_AI8S3206;
		 pASignedTformat3205_AST3205:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype3204_ATP3204:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype3204_ATP3204:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3203_APT3203:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType3203_APT3203:=myrec;
		END;
	FUNCTION pASatplusDyadic3208_ASD3208:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpsatplus;
		 pASatplusDyadic3208_ASD3208:=myrec;
		END;
	FUNCTION pAInt8Signed3214_AI8S3214:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed3214_AI8S3214:=myrec;
		END;
	FUNCTION pASignedTformat3213_AST3213:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed3214_AI8S3214;
		 pASignedTformat3213_AST3213:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype3212_ATP3212:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype3212_ATP3212:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3211_APT3211:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType3211_APT3211:=myrec;
		END;
	FUNCTION pAIdLoc3218_AIL3218:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3218_AIL3218:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3217_AR3217:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3218_AIL3218;
		 pARefval3217_AR3217:=myrec;
		END;
	FUNCTION pADerefRhs3216_ADR3216:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3217_AR3217;
		 pADerefRhs3216_ADR3216:=myrec;
		END;
	FUNCTION pARhsValue3215_ARV3215:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3216_ADR3216;
		 pARhsValue3215_ARV3215:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs3210_ACR3210:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType3211_APT3211;
		myrec^.arg2:=pARhsValue3215_ARV3215;
		 pACastRhs3210_ACR3210:=myrec;
		END;
	FUNCTION pARhsValue3209_ARV3209:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3210_ACR3210;
		 pARhsValue3209_ARV3209:=myrec;
		END;
	FUNCTION pAIdLoc3222_AIL3222:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3222_AIL3222:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3221_AR3221:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3222_AIL3222;
		 pARefval3221_AR3221:=myrec;
		END;
	FUNCTION pADerefRhs3220_ADR3220:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3221_AR3221;
		 pADerefRhs3220_ADR3220:=myrec;
		END;
	FUNCTION pARhsValue3219_ARV3219:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3220_ADR3220;
		 pARhsValue3219_ARV3219:=myrec;
		END;
	FUNCTION pADyadicValue3207_ADV3207:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3209_ARV3209;
		myrec^.arg2:=pARhsValue3219_ARV3219;
		myrec^.fn:=pASatplusDyadic3208_ASD3208;
		 pADyadicValue3207_ADV3207:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs3202_ACR3202:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType3203_APT3203;
		myrec^.arg2:=pADyadicValue3207_ADV3207;
		 pACastRhs3202_ACR3202:=myrec;
		END;
	FUNCTION pARhsValue3201_ARV3201:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3202_ACR3202;
		 pARhsValue3201_ARV3201:=myrec;
		END;
	FUNCTION pAAssign3198_AA3198:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue3201_ARV3201;
		myrec^.dest:=pARefval3199_AR3199;
		 pAAssign3198_AA3198:=myrec;
		END;
	FUNCTION pAAssignMeaning3197_AAM3197:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3198_AA3198;
		 pAAssignMeaning3197_AAM3197:=myrec;
		END;
	FUNCTION pAAssemblypattern3224_AA3224:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'add  ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,0);
		pappends(list,'\n jno $+10\n jg $+6\n mov ' );
		pappendp(list,1);
		pappends(list,' ,-128 \n jng $+4\n mov ' );
		pappendp(list,1);
		pappends(list,',127\n ' );
		pAAssemblypattern3224_AA3224:=list;
		END;
	FUNCTION pAAssemblesto3223_AA3223:pprintlist;
	begin
		pAAssemblesto3223_AA3223:=pAAssemblypattern3224_AA3224;
		END;
	FUNCTION pASideeffects3234_AS3234:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3234_AS3234:=nil;
		 pASideeffects3234_AS3234:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3235_AUP3235:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3235_AUP3235:=nil;
		 pAUnconditionalPrecond3235_AUP3235:=myrec;
		END;
	FUNCTION ADDSSB_ADDSSB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patbreg_;
		params^[1]:=patbreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning3197_AAM3197;
		matchedAssembler:=pAAssemblesto3223_AA3223;
		END;
		ADDSSB_ADDSSB:=myrec;
	END;
	FUNCTION pATypeid3238_AT3238:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3238_AT3238:=myrec;
		END;
	FUNCTION pATypeid3240_AT3240:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bnonacc  ilcg.pattern@7275d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3240_AT3240:=myrec;
		END;
	FUNCTION pAIdLoc3244_AIL3244:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3244_AIL3244:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3243_AR3243:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3244_AIL3244;
		 pARefval3243_AR3243:=myrec;
		END;
	FUNCTION pASatmultDyadic3246_ASD3246:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpsatmult;
		 pASatmultDyadic3246_ASD3246:=myrec;
		END;
	FUNCTION pAIdLoc3250_AIL3250:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3250_AIL3250:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3249_AR3249:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3250_AIL3250;
		 pARefval3249_AR3249:=myrec;
		END;
	FUNCTION pADerefRhs3248_ADR3248:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3249_AR3249;
		 pADerefRhs3248_ADR3248:=myrec;
		END;
	FUNCTION pARhsValue3247_ARV3247:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3248_ADR3248;
		 pARhsValue3247_ARV3247:=myrec;
		END;
	FUNCTION pAIdLoc3254_AIL3254:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3254_AIL3254:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3253_AR3253:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3254_AIL3254;
		 pARefval3253_AR3253:=myrec;
		END;
	FUNCTION pADerefRhs3252_ADR3252:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3253_AR3253;
		 pADerefRhs3252_ADR3252:=myrec;
		END;
	FUNCTION pARhsValue3251_ARV3251:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3252_ADR3252;
		 pARhsValue3251_ARV3251:=myrec;
		END;
	FUNCTION pADyadicValue3245_ADV3245:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3247_ARV3247;
		myrec^.arg2:=pARhsValue3251_ARV3251;
		myrec^.fn:=pASatmultDyadic3246_ASD3246;
		 pADyadicValue3245_ADV3245:=myrec;
		END;
	FUNCTION pAAssign3242_AA3242:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue3245_ADV3245;
		myrec^.dest:=pARefval3243_AR3243;
		 pAAssign3242_AA3242:=myrec;
		END;
	FUNCTION pAAssignMeaning3241_AAM3241:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3242_AA3242;
		 pAAssignMeaning3241_AAM3241:=myrec;
		END;
	FUNCTION pAAssemblypattern3256_AA3256:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'push ax\n mov al,' );
		pappendp(list,0);
		pappends(list,'\n imul  ' );
		pappendp(list,1);
		pappends(list,'\n shr ax,7\n mov ' );
		pappendp(list,1);
		pappends(list,',al\n pop ax' );
		pAAssemblypattern3256_AA3256:=list;
		END;
	FUNCTION pAAssemblesto3255_AA3255:pprintlist;
	begin
		pAAssemblesto3255_AA3255:=pAAssemblypattern3256_AA3256;
		END;
	FUNCTION pASideeffects3264_AS3264:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3264_AS3264:=nil;
		 pASideeffects3264_AS3264:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3265_AUP3265:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3265_AUP3265:=nil;
		 pAUnconditionalPrecond3265_AUP3265:=myrec;
		END;
	FUNCTION MULTSSB_MULTSSB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbnonacc_;
		params^[0]:=patbreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning3241_AAM3241;
		matchedAssembler:=pAAssemblesto3255_AA3255;
		END;
		MULTSSB_MULTSSB:=myrec;
	END;
	FUNCTION pATypeid3268_AT3268:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bacc  ilcg.pattern@260191}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3268_AT3268:=myrec;
		END;
	FUNCTION pATypeid3270_AT3270:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bnonacc  ilcg.pattern@7275d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3270_AT3270:=myrec;
		END;
	FUNCTION pAIdLoc3274_AIL3274:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3274_AIL3274:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3273_AR3273:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3274_AIL3274;
		 pARefval3273_AR3273:=myrec;
		END;
	FUNCTION pASatmultDyadic3276_ASD3276:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpsatmult;
		 pASatmultDyadic3276_ASD3276:=myrec;
		END;
	FUNCTION pAIdLoc3280_AIL3280:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3280_AIL3280:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3279_AR3279:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3280_AIL3280;
		 pARefval3279_AR3279:=myrec;
		END;
	FUNCTION pADerefRhs3278_ADR3278:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3279_AR3279;
		 pADerefRhs3278_ADR3278:=myrec;
		END;
	FUNCTION pARhsValue3277_ARV3277:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3278_ADR3278;
		 pARhsValue3277_ARV3277:=myrec;
		END;
	FUNCTION pAIdLoc3284_AIL3284:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3284_AIL3284:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3283_AR3283:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3284_AIL3284;
		 pARefval3283_AR3283:=myrec;
		END;
	FUNCTION pADerefRhs3282_ADR3282:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3283_AR3283;
		 pADerefRhs3282_ADR3282:=myrec;
		END;
	FUNCTION pARhsValue3281_ARV3281:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3282_ADR3282;
		 pARhsValue3281_ARV3281:=myrec;
		END;
	FUNCTION pADyadicValue3275_ADV3275:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3277_ARV3277;
		myrec^.arg2:=pARhsValue3281_ARV3281;
		myrec^.fn:=pASatmultDyadic3276_ASD3276;
		 pADyadicValue3275_ADV3275:=myrec;
		END;
	FUNCTION pAAssign3272_AA3272:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue3275_ADV3275;
		myrec^.dest:=pARefval3273_AR3273;
		 pAAssign3272_AA3272:=myrec;
		END;
	FUNCTION pAAssignMeaning3271_AAM3271:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3272_AA3272;
		 pAAssignMeaning3271_AAM3271:=myrec;
		END;
	FUNCTION pAAssemblypattern3286_AA3286:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'imul  ' );
		pappendp(list,1);
		pappends(list,'\n shr ax,7' );
		pAAssemblypattern3286_AA3286:=list;
		END;
	FUNCTION pAAssemblesto3285_AA3285:pprintlist;
	begin
		pAAssemblesto3285_AA3285:=pAAssemblypattern3286_AA3286;
		END;
	FUNCTION pASideeffects3290_AS3290:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3290_AS3290:=nil;
		 pASideeffects3290_AS3290:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3291_AUP3291:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3291_AUP3291:=nil;
		 pAUnconditionalPrecond3291_AUP3291:=myrec;
		END;
	FUNCTION MULTSSBAL_MULTSSBAL:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbnonacc_;
		params^[0]:=patbacc_;
		paramcount:=3;
		meaning:=pAAssignMeaning3271_AAM3271;
		matchedAssembler:=pAAssemblesto3285_AA3285;
		END;
		MULTSSBAL_MULTSSBAL:=myrec;
	END;
	FUNCTION pATypeid3294_AT3294:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ addrmode  ilcg.pattern@7a4076}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3294_AT3294:=myrec;
		END;
	FUNCTION pATypeid3296_AT3296:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3296_AT3296:=myrec;
		END;
	FUNCTION pATypeid3298_AT3298:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3298_AT3298:=myrec;
		END;
	FUNCTION pAIdLoc3302_AIL3302:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc3302_AIL3302:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3301_AR3301:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3302_AIL3302;
		 pARefval3301_AR3301:=myrec;
		END;
	FUNCTION pAInt8Signed3308_AI8S3308:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed3308_AI8S3308:=myrec;
		END;
	FUNCTION pASignedTformat3307_AST3307:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed3308_AI8S3308;
		 pASignedTformat3307_AST3307:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype3306_ATP3306:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype3306_ATP3306:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3305_APT3305:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType3305_APT3305:=myrec;
		END;
	FUNCTION pASatminusDyadic3310_ASD3310:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpsatminus;
		 pASatminusDyadic3310_ASD3310:=myrec;
		END;
	FUNCTION pAInt8Signed3316_AI8S3316:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed3316_AI8S3316:=myrec;
		END;
	FUNCTION pASignedTformat3315_AST3315:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed3316_AI8S3316;
		 pASignedTformat3315_AST3315:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype3314_ATP3314:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype3314_ATP3314:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3313_APT3313:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType3313_APT3313:=myrec;
		END;
	FUNCTION pAIdLoc3320_AIL3320:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc3320_AIL3320:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3319_AR3319:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3320_AIL3320;
		 pARefval3319_AR3319:=myrec;
		END;
	FUNCTION pADerefRhs3318_ADR3318:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3319_AR3319;
		 pADerefRhs3318_ADR3318:=myrec;
		END;
	FUNCTION pARhsValue3317_ARV3317:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3318_ADR3318;
		 pARhsValue3317_ARV3317:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs3312_ACR3312:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType3313_APT3313;
		myrec^.arg2:=pARhsValue3317_ARV3317;
		 pACastRhs3312_ACR3312:=myrec;
		END;
	FUNCTION pARhsValue3311_ARV3311:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3312_ACR3312;
		 pARhsValue3311_ARV3311:=myrec;
		END;
	FUNCTION pAIdLoc3324_AIL3324:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3324_AIL3324:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3323_AR3323:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3324_AIL3324;
		 pARefval3323_AR3323:=myrec;
		END;
	FUNCTION pADerefRhs3322_ADR3322:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3323_AR3323;
		 pADerefRhs3322_ADR3322:=myrec;
		END;
	FUNCTION pARhsValue3321_ARV3321:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3322_ADR3322;
		 pARhsValue3321_ARV3321:=myrec;
		END;
	FUNCTION pADyadicValue3309_ADV3309:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3311_ARV3311;
		myrec^.arg2:=pARhsValue3321_ARV3321;
		myrec^.fn:=pASatminusDyadic3310_ASD3310;
		 pADyadicValue3309_ADV3309:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs3304_ACR3304:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType3305_APT3305;
		myrec^.arg2:=pADyadicValue3309_ADV3309;
		 pACastRhs3304_ACR3304:=myrec;
		END;
	FUNCTION pARhsValue3303_ARV3303:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3304_ACR3304;
		 pARhsValue3303_ARV3303:=myrec;
		END;
	FUNCTION pAAssign3300_AA3300:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue3303_ARV3303;
		myrec^.dest:=pARefval3301_AR3301;
		 pAAssign3300_AA3300:=myrec;
		END;
	FUNCTION pAAssignMeaning3299_AAM3299:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3300_AA3300;
		 pAAssignMeaning3299_AAM3299:=myrec;
		END;
	FUNCTION pAAssemblypattern3326_AA3326:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'sub  ' );
		pappendp(list,2);
		pappends(list,',' );
		pappendp(list,1);
		pappends(list,'\n jno $+10\n jg $+6\n mov ' );
		pappendp(list,2);
		pappends(list,' ,-128 \n jng $+4\n mov ' );
		pappendp(list,2);
		pappends(list,',127\n nop\n nop' );
		pAAssemblypattern3326_AA3326:=list;
		END;
	FUNCTION pAAssemblesto3325_AA3325:pprintlist;
	begin
		pAAssemblesto3325_AA3325:=pAAssemblypattern3326_AA3326;
		END;
	FUNCTION pASideeffects3336_AS3336:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3336_AS3336:=nil;
		 pASideeffects3336_AS3336:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3337_AUP3337:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3337_AUP3337:=nil;
		 pAUnconditionalPrecond3337_AUP3337:=myrec;
		END;
	FUNCTION SUBSSB_SUBSSB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbreg_;
		params^[0]:=pataddrmode_;
		params^[2]:=patbreg_;
		paramcount:=4;
		meaning:=pAAssignMeaning3299_AAM3299;
		matchedAssembler:=pAAssemblesto3325_AA3325;
		END;
		SUBSSB_SUBSSB:=myrec;
	END;
	FUNCTION pATypeid3340_AT3340:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3340_AT3340:=myrec;
		END;
	FUNCTION pATypeid3342_AT3342:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3342_AT3342:=myrec;
		END;
	FUNCTION pAUint8Unsigned3351_AU8U3351:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned3351_AU8U3351:=myrec;
		END;
	FUNCTION pAUnsignedTformat3350_AUT3350:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned3351_AU8U3351;
		 pAUnsignedTformat3350_AUT3350:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype3349_ATP3349:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype3349_ATP3349:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3348_APT3348:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType3348_APT3348:=myrec;
		END;
	FUNCTION pAReference3347_AR3347:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType3348_APT3348;
		 pAReference3347_AR3347:=myrec;
		END;
	FUNCTION pAReftypeType3346_ART3346:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference3347_AR3347;
		 pAReftypeType3346_ART3346:=myrec;
		END;
	FUNCTION pAIdLoc3352_AIL3352:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3352_AIL3352:=myrec;
		END;
	FUNCTION pARefcastRefval3345_ARR3345:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType3346_ART3346;
		myrec^.arg2:=pAIdLoc3352_AIL3352;
		 pARefcastRefval3345_ARR3345:=myrec;
		END;
	FUNCTION pAMaxDyadic3354_AMD3354:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpmax;
		 pAMaxDyadic3354_AMD3354:=myrec;
		END;
	FUNCTION pAUint8Unsigned3360_AU8U3360:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned3360_AU8U3360:=myrec;
		END;
	FUNCTION pAUnsignedTformat3359_AUT3359:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned3360_AU8U3360;
		 pAUnsignedTformat3359_AUT3359:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype3358_ATP3358:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype3358_ATP3358:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3357_APT3357:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType3357_APT3357:=myrec;
		END;
	FUNCTION pAIdLoc3364_AIL3364:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3364_AIL3364:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3363_AR3363:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3364_AIL3364;
		 pARefval3363_AR3363:=myrec;
		END;
	FUNCTION pADerefRhs3362_ADR3362:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3363_AR3363;
		 pADerefRhs3362_ADR3362:=myrec;
		END;
	FUNCTION pARhsValue3361_ARV3361:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3362_ADR3362;
		 pARhsValue3361_ARV3361:=myrec;
		END;
		(*! try to cast to type: uint8*)
	FUNCTION pACastRhs3356_ACR3356:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType3357_APT3357;
		myrec^.arg2:=pARhsValue3361_ARV3361;
		 pACastRhs3356_ACR3356:=myrec;
		END;
	FUNCTION pARhsValue3355_ARV3355:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3356_ACR3356;
		 pARhsValue3355_ARV3355:=myrec;
		END;
	FUNCTION pAIdLoc3368_AIL3368:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3368_AIL3368:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3367_AR3367:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3368_AIL3368;
		 pARefval3367_AR3367:=myrec;
		END;
	FUNCTION pADerefRhs3366_ADR3366:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3367_AR3367;
		 pADerefRhs3366_ADR3366:=myrec;
		END;
	FUNCTION pARhsValue3365_ARV3365:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3366_ADR3366;
		 pARhsValue3365_ARV3365:=myrec;
		END;
	FUNCTION pADyadicValue3353_ADV3353:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3355_ARV3355;
		myrec^.arg2:=pARhsValue3365_ARV3365;
		myrec^.fn:=pAMaxDyadic3354_AMD3354;
		 pADyadicValue3353_ADV3353:=myrec;
		END;
	FUNCTION pAAssign3344_AA3344:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue3353_ADV3353;
		myrec^.dest:=pARefcastRefval3345_ARR3345;
		 pAAssign3344_AA3344:=myrec;
		END;
	FUNCTION pAAssignMeaning3343_AAM3343:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3344_AA3344;
		 pAAssignMeaning3343_AAM3343:=myrec;
		END;
	FUNCTION pAAssemblypattern3370_AA3370:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cmp ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pappends(list,'\n ja $+4\n mov ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern3370_AA3370:=list;
		END;
	FUNCTION pAAssemblesto3369_AA3369:pprintlist;
	begin
		pAAssemblesto3369_AA3369:=pAAssemblypattern3370_AA3370;
		END;
	FUNCTION pASideeffects3379_AS3379:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3379_AS3379:=nil;
		 pASideeffects3379_AS3379:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3380_AUP3380:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3380_AUP3380:=nil;
		 pAUnconditionalPrecond3380_AUP3380:=myrec;
		END;
	FUNCTION UINT8MAX_UINT8MAX:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbreg_;
		params^[0]:=patbreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning3343_AAM3343;
		matchedAssembler:=pAAssemblesto3369_AA3369;
		END;
		UINT8MAX_UINT8MAX:=myrec;
	END;
	FUNCTION pATypeid3383_AT3383:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3383_AT3383:=myrec;
		END;
	FUNCTION pATypeid3385_AT3385:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3385_AT3385:=myrec;
		END;
	FUNCTION pAUint8Unsigned3394_AU8U3394:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned3394_AU8U3394:=myrec;
		END;
	FUNCTION pAUnsignedTformat3393_AUT3393:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned3394_AU8U3394;
		 pAUnsignedTformat3393_AUT3393:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype3392_ATP3392:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype3392_ATP3392:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3391_APT3391:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType3391_APT3391:=myrec;
		END;
	FUNCTION pAReference3390_AR3390:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType3391_APT3391;
		 pAReference3390_AR3390:=myrec;
		END;
	FUNCTION pAReftypeType3389_ART3389:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference3390_AR3390;
		 pAReftypeType3389_ART3389:=myrec;
		END;
	FUNCTION pAIdLoc3395_AIL3395:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3395_AIL3395:=myrec;
		END;
	FUNCTION pARefcastRefval3388_ARR3388:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType3389_ART3389;
		myrec^.arg2:=pAIdLoc3395_AIL3395;
		 pARefcastRefval3388_ARR3388:=myrec;
		END;
	FUNCTION pAMinDyadic3397_AMD3397:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpmin;
		 pAMinDyadic3397_AMD3397:=myrec;
		END;
	FUNCTION pAUint8Unsigned3403_AU8U3403:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned3403_AU8U3403:=myrec;
		END;
	FUNCTION pAUnsignedTformat3402_AUT3402:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned3403_AU8U3403;
		 pAUnsignedTformat3402_AUT3402:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype3401_ATP3401:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype3401_ATP3401:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3400_APT3400:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType3400_APT3400:=myrec;
		END;
	FUNCTION pAIdLoc3407_AIL3407:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3407_AIL3407:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3406_AR3406:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3407_AIL3407;
		 pARefval3406_AR3406:=myrec;
		END;
	FUNCTION pADerefRhs3405_ADR3405:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3406_AR3406;
		 pADerefRhs3405_ADR3405:=myrec;
		END;
	FUNCTION pARhsValue3404_ARV3404:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3405_ADR3405;
		 pARhsValue3404_ARV3404:=myrec;
		END;
		(*! try to cast to type: uint8*)
	FUNCTION pACastRhs3399_ACR3399:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType3400_APT3400;
		myrec^.arg2:=pARhsValue3404_ARV3404;
		 pACastRhs3399_ACR3399:=myrec;
		END;
	FUNCTION pARhsValue3398_ARV3398:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3399_ACR3399;
		 pARhsValue3398_ARV3398:=myrec;
		END;
	FUNCTION pAIdLoc3411_AIL3411:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3411_AIL3411:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3410_AR3410:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3411_AIL3411;
		 pARefval3410_AR3410:=myrec;
		END;
	FUNCTION pADerefRhs3409_ADR3409:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3410_AR3410;
		 pADerefRhs3409_ADR3409:=myrec;
		END;
	FUNCTION pARhsValue3408_ARV3408:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3409_ADR3409;
		 pARhsValue3408_ARV3408:=myrec;
		END;
	FUNCTION pADyadicValue3396_ADV3396:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3398_ARV3398;
		myrec^.arg2:=pARhsValue3408_ARV3408;
		myrec^.fn:=pAMinDyadic3397_AMD3397;
		 pADyadicValue3396_ADV3396:=myrec;
		END;
	FUNCTION pAAssign3387_AA3387:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue3396_ADV3396;
		myrec^.dest:=pARefcastRefval3388_ARR3388;
		 pAAssign3387_AA3387:=myrec;
		END;
	FUNCTION pAAssignMeaning3386_AAM3386:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3387_AA3387;
		 pAAssignMeaning3386_AAM3386:=myrec;
		END;
	FUNCTION pAAssemblypattern3413_AA3413:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cmp ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pappends(list,'\n jna $+4\n mov ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern3413_AA3413:=list;
		END;
	FUNCTION pAAssemblesto3412_AA3412:pprintlist;
	begin
		pAAssemblesto3412_AA3412:=pAAssemblypattern3413_AA3413;
		END;
	FUNCTION pASideeffects3422_AS3422:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3422_AS3422:=nil;
		 pASideeffects3422_AS3422:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3423_AUP3423:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3423_AUP3423:=nil;
		 pAUnconditionalPrecond3423_AUP3423:=myrec;
		END;
	FUNCTION UINT8MIN_UINT8MIN:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbreg_;
		params^[0]:=patbreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning3386_AAM3386;
		matchedAssembler:=pAAssemblesto3412_AA3412;
		END;
		UINT8MIN_UINT8MIN:=myrec;
	END;
	FUNCTION pATypeid3426_AT3426:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3426_AT3426:=myrec;
		END;
	FUNCTION pATypeid3428_AT3428:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3428_AT3428:=myrec;
		END;
	FUNCTION pAInt8Signed3437_AI8S3437:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed3437_AI8S3437:=myrec;
		END;
	FUNCTION pASignedTformat3436_AST3436:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed3437_AI8S3437;
		 pASignedTformat3436_AST3436:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype3435_ATP3435:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype3435_ATP3435:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3434_APT3434:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType3434_APT3434:=myrec;
		END;
	FUNCTION pAReference3433_AR3433:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType3434_APT3434;
		 pAReference3433_AR3433:=myrec;
		END;
	FUNCTION pAReftypeType3432_ART3432:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference3433_AR3433;
		 pAReftypeType3432_ART3432:=myrec;
		END;
	FUNCTION pAIdLoc3438_AIL3438:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3438_AIL3438:=myrec;
		END;
	FUNCTION pARefcastRefval3431_ARR3431:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType3432_ART3432;
		myrec^.arg2:=pAIdLoc3438_AIL3438;
		 pARefcastRefval3431_ARR3431:=myrec;
		END;
	FUNCTION pAMaxDyadic3440_AMD3440:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpmax;
		 pAMaxDyadic3440_AMD3440:=myrec;
		END;
	FUNCTION pAInt8Signed3446_AI8S3446:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed3446_AI8S3446:=myrec;
		END;
	FUNCTION pASignedTformat3445_AST3445:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed3446_AI8S3446;
		 pASignedTformat3445_AST3445:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype3444_ATP3444:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype3444_ATP3444:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3443_APT3443:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType3443_APT3443:=myrec;
		END;
	FUNCTION pAIdLoc3450_AIL3450:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3450_AIL3450:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3449_AR3449:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3450_AIL3450;
		 pARefval3449_AR3449:=myrec;
		END;
	FUNCTION pADerefRhs3448_ADR3448:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3449_AR3449;
		 pADerefRhs3448_ADR3448:=myrec;
		END;
	FUNCTION pARhsValue3447_ARV3447:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3448_ADR3448;
		 pARhsValue3447_ARV3447:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs3442_ACR3442:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType3443_APT3443;
		myrec^.arg2:=pARhsValue3447_ARV3447;
		 pACastRhs3442_ACR3442:=myrec;
		END;
	FUNCTION pARhsValue3441_ARV3441:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3442_ACR3442;
		 pARhsValue3441_ARV3441:=myrec;
		END;
	FUNCTION pAIdLoc3454_AIL3454:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3454_AIL3454:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3453_AR3453:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3454_AIL3454;
		 pARefval3453_AR3453:=myrec;
		END;
	FUNCTION pADerefRhs3452_ADR3452:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3453_AR3453;
		 pADerefRhs3452_ADR3452:=myrec;
		END;
	FUNCTION pARhsValue3451_ARV3451:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3452_ADR3452;
		 pARhsValue3451_ARV3451:=myrec;
		END;
	FUNCTION pADyadicValue3439_ADV3439:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3441_ARV3441;
		myrec^.arg2:=pARhsValue3451_ARV3451;
		myrec^.fn:=pAMaxDyadic3440_AMD3440;
		 pADyadicValue3439_ADV3439:=myrec;
		END;
	FUNCTION pAAssign3430_AA3430:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue3439_ADV3439;
		myrec^.dest:=pARefcastRefval3431_ARR3431;
		 pAAssign3430_AA3430:=myrec;
		END;
	FUNCTION pAAssignMeaning3429_AAM3429:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3430_AA3430;
		 pAAssignMeaning3429_AAM3429:=myrec;
		END;
	FUNCTION pAAssemblypattern3456_AA3456:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cmp ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pappends(list,'\n jg $+4\n mov ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern3456_AA3456:=list;
		END;
	FUNCTION pAAssemblesto3455_AA3455:pprintlist;
	begin
		pAAssemblesto3455_AA3455:=pAAssemblypattern3456_AA3456;
		END;
	FUNCTION pASideeffects3465_AS3465:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3465_AS3465:=nil;
		 pASideeffects3465_AS3465:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3466_AUP3466:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3466_AUP3466:=nil;
		 pAUnconditionalPrecond3466_AUP3466:=myrec;
		END;
	FUNCTION INT8MAX_INT8MAX:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbreg_;
		params^[0]:=patbreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning3429_AAM3429;
		matchedAssembler:=pAAssemblesto3455_AA3455;
		END;
		INT8MAX_INT8MAX:=myrec;
	END;
	FUNCTION pATypeid3469_AT3469:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3469_AT3469:=myrec;
		END;
	FUNCTION pATypeid3471_AT3471:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3471_AT3471:=myrec;
		END;
	FUNCTION pAInt8Signed3480_AI8S3480:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed3480_AI8S3480:=myrec;
		END;
	FUNCTION pASignedTformat3479_AST3479:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed3480_AI8S3480;
		 pASignedTformat3479_AST3479:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype3478_ATP3478:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype3478_ATP3478:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3477_APT3477:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType3477_APT3477:=myrec;
		END;
	FUNCTION pAReference3476_AR3476:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType3477_APT3477;
		 pAReference3476_AR3476:=myrec;
		END;
	FUNCTION pAReftypeType3475_ART3475:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference3476_AR3476;
		 pAReftypeType3475_ART3475:=myrec;
		END;
	FUNCTION pAIdLoc3481_AIL3481:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3481_AIL3481:=myrec;
		END;
	FUNCTION pARefcastRefval3474_ARR3474:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType3475_ART3475;
		myrec^.arg2:=pAIdLoc3481_AIL3481;
		 pARefcastRefval3474_ARR3474:=myrec;
		END;
	FUNCTION pAMinDyadic3483_AMD3483:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpmin;
		 pAMinDyadic3483_AMD3483:=myrec;
		END;
	FUNCTION pAInt8Signed3489_AI8S3489:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed3489_AI8S3489:=myrec;
		END;
	FUNCTION pASignedTformat3488_AST3488:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed3489_AI8S3489;
		 pASignedTformat3488_AST3488:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype3487_ATP3487:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype3487_ATP3487:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3486_APT3486:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType3486_APT3486:=myrec;
		END;
	FUNCTION pAIdLoc3493_AIL3493:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3493_AIL3493:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3492_AR3492:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3493_AIL3493;
		 pARefval3492_AR3492:=myrec;
		END;
	FUNCTION pADerefRhs3491_ADR3491:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3492_AR3492;
		 pADerefRhs3491_ADR3491:=myrec;
		END;
	FUNCTION pARhsValue3490_ARV3490:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3491_ADR3491;
		 pARhsValue3490_ARV3490:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs3485_ACR3485:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType3486_APT3486;
		myrec^.arg2:=pARhsValue3490_ARV3490;
		 pACastRhs3485_ACR3485:=myrec;
		END;
	FUNCTION pARhsValue3484_ARV3484:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3485_ACR3485;
		 pARhsValue3484_ARV3484:=myrec;
		END;
	FUNCTION pAIdLoc3497_AIL3497:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3497_AIL3497:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3496_AR3496:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3497_AIL3497;
		 pARefval3496_AR3496:=myrec;
		END;
	FUNCTION pADerefRhs3495_ADR3495:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3496_AR3496;
		 pADerefRhs3495_ADR3495:=myrec;
		END;
	FUNCTION pARhsValue3494_ARV3494:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3495_ADR3495;
		 pARhsValue3494_ARV3494:=myrec;
		END;
	FUNCTION pADyadicValue3482_ADV3482:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3484_ARV3484;
		myrec^.arg2:=pARhsValue3494_ARV3494;
		myrec^.fn:=pAMinDyadic3483_AMD3483;
		 pADyadicValue3482_ADV3482:=myrec;
		END;
	FUNCTION pAAssign3473_AA3473:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue3482_ADV3482;
		myrec^.dest:=pARefcastRefval3474_ARR3474;
		 pAAssign3473_AA3473:=myrec;
		END;
	FUNCTION pAAssignMeaning3472_AAM3472:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3473_AA3473;
		 pAAssignMeaning3472_AAM3472:=myrec;
		END;
	FUNCTION pAAssemblypattern3499_AA3499:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cmp ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pappends(list,'\n jl $+4\n mov ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern3499_AA3499:=list;
		END;
	FUNCTION pAAssemblesto3498_AA3498:pprintlist;
	begin
		pAAssemblesto3498_AA3498:=pAAssemblypattern3499_AA3499;
		END;
	FUNCTION pASideeffects3508_AS3508:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3508_AS3508:=nil;
		 pASideeffects3508_AS3508:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3509_AUP3509:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3509_AUP3509:=nil;
		 pAUnconditionalPrecond3509_AUP3509:=myrec;
		END;
	FUNCTION INT8MIN_INT8MIN:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbreg_;
		params^[0]:=patbreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning3472_AAM3472;
		matchedAssembler:=pAAssemblesto3498_AA3498;
		END;
		INT8MIN_INT8MIN:=myrec;
	END;
	FUNCTION pATypeid3512_AT3512:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3512_AT3512:=myrec;
		END;
	FUNCTION pATypeid3514_AT3514:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ eaform  ilcg.pattern@5a366c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3514_AT3514:=myrec;
		END;
	FUNCTION pAIdLoc3518_AIL3518:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3518_AIL3518:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3517_AR3517:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3518_AIL3518;
		 pARefval3517_AR3517:=myrec;
		END;
	FUNCTION pAIdLoc3520_AIL3520:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3520_AIL3520:=myrec;
		END;
	FUNCTION pALocValue3519_ALV3519:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3520_AIL3520;
		 pALocValue3519_ALV3519:=myrec;
		END;
	FUNCTION pAAssign3516_AA3516:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pALocValue3519_ALV3519;
		myrec^.dest:=pARefval3517_AR3517;
		 pAAssign3516_AA3516:=myrec;
		END;
	FUNCTION pAAssignMeaning3515_AAM3515:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3516_AA3516;
		 pAAssignMeaning3515_AAM3515:=myrec;
		END;
	FUNCTION pAAssemblypattern3522_AA3522:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'lea ' );
		pappendp(list,0);
		pappends(list,',[' );
		pappendp(list,1);
		pappends(list,']' );
		pAAssemblypattern3522_AA3522:=list;
		END;
	FUNCTION pAAssemblesto3521_AA3521:pprintlist;
	begin
		pAAssemblesto3521_AA3521:=pAAssemblypattern3522_AA3522;
		END;
	FUNCTION pASideeffects3528_AS3528:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3528_AS3528:=nil;
		 pASideeffects3528_AS3528:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3529_AUP3529:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3529_AUP3529:=nil;
		 pAUnconditionalPrecond3529_AUP3529:=myrec;
		END;
	FUNCTION LEA_LEA:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		params^[1]:=pateaform_;
		paramcount:=3;
		meaning:=pAAssignMeaning3515_AAM3515;
		matchedAssembler:=pAAssemblesto3521_AA3521;
		END;
		LEA_LEA:=myrec;
	END;
	FUNCTION pATypeid3532_AT3532:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ addrmode  ilcg.pattern@7a4076}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3532_AT3532:=myrec;
		END;
	FUNCTION pATypeid3541_AT3541:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@6c7a64}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid3541_AT3541:=myrec;
		END;
	FUNCTION pATypeidType3540_ATT3540:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3541_AT3541;
		 pATypeidType3540_ATT3540:=myrec;
		END;
	FUNCTION pAReference3539_AR3539:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType3540_ATT3540;
		 pAReference3539_AR3539:=myrec;
		END;
	FUNCTION pAReftypeType3538_ART3538:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference3539_AR3539;
		 pAReftypeType3538_ART3538:=myrec;
		END;
	FUNCTION pAIdLoc3542_AIL3542:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3542_AIL3542:=myrec;
		END;
	FUNCTION pARefcastRefval3537_ARR3537:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType3538_ART3538;
		myrec^.arg2:=pAIdLoc3542_AIL3542;
		 pARefcastRefval3537_ARR3537:=myrec;
		END;
	FUNCTION pANotMonadic3544_ANM3544:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpNOT;
		 pANotMonadic3544_ANM3544:=myrec;
		END;
	FUNCTION pATypeid3548_AT3548:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@6c7a64}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid3548_AT3548:=myrec;
		END;
	FUNCTION pATypeidType3547_ATT3547:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3548_AT3548;
		 pATypeidType3547_ATT3547:=myrec;
		END;
	FUNCTION pAIdLoc3552_AIL3552:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3552_AIL3552:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3551_AR3551:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3552_AIL3552;
		 pARefval3551_AR3551:=myrec;
		END;
	FUNCTION pADerefRhs3550_ADR3550:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3551_AR3551;
		 pADerefRhs3550_ADR3550:=myrec;
		END;
	FUNCTION pARhsValue3549_ARV3549:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3550_ADR3550;
		 pARhsValue3549_ARV3549:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs3546_ACR3546:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType3547_ATT3547;
		myrec^.arg2:=pARhsValue3549_ARV3549;
		 pACastRhs3546_ACR3546:=myrec;
		END;
	FUNCTION pARhsValue3545_ARV3545:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3546_ACR3546;
		 pARhsValue3545_ARV3545:=myrec;
		END;
	FUNCTION pAMonadicValue3543_AMV3543:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue3545_ARV3545;
		myrec^.fn:=pANotMonadic3544_ANM3544;
		 pAMonadicValue3543_AMV3543:=myrec;
		END;
	FUNCTION pAAssign3536_AA3536:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pAMonadicValue3543_AMV3543;
		myrec^.dest:=pARefcastRefval3537_ARR3537;
		 pAAssign3536_AA3536:=myrec;
		END;
	FUNCTION pAAssignMeaning3535_AAM3535:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3536_AA3536;
		 pAAssignMeaning3535_AAM3535:=myrec;
		END;
	FUNCTION pAAssemblypattern3554_AA3554:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'not ' );
		pappendp(list,1);
		pappends(list,' ' );
		pappendp(list,0);
		pAAssemblypattern3554_AA3554:=list;
		END;
	FUNCTION pAAssemblesto3553_AA3553:pprintlist;
	begin
		pAAssemblesto3553_AA3553:=pAAssemblypattern3554_AA3554;
		END;
	FUNCTION pASideeffects3559_AS3559:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3559_AS3559:=nil;
		 pASideeffects3559_AS3559:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3560_AUP3560:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3560_AUP3560:=nil;
		 pAUnconditionalPrecond3560_AUP3560:=myrec;
		END;
	FUNCTION NOTOP_NOTOP:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=typeparam;
		params^[0]:=pataddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning3535_AAM3535;
		matchedAssembler:=pAAssemblesto3553_AA3553;
		END;
		NOTOP_NOTOP:=myrec;
	END;
	FUNCTION pATypeid3563_AT3563:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ anyreg  ilcg.pattern@18b13b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3563_AT3563:=myrec;
		END;
	FUNCTION pATypeid3572_AT3572:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@468351}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid3572_AT3572:=myrec;
		END;
	FUNCTION pATypeidType3571_ATT3571:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3572_AT3572;
		 pATypeidType3571_ATT3571:=myrec;
		END;
	FUNCTION pAReference3570_AR3570:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType3571_ATT3571;
		 pAReference3570_AR3570:=myrec;
		END;
	FUNCTION pAReftypeType3569_ART3569:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference3570_AR3570;
		 pAReftypeType3569_ART3569:=myrec;
		END;
	FUNCTION pAIdLoc3573_AIL3573:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3573_AIL3573:=myrec;
		END;
	FUNCTION pARefcastRefval3568_ARR3568:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType3569_ART3569;
		myrec^.arg2:=pAIdLoc3573_AIL3573;
		 pARefcastRefval3568_ARR3568:=myrec;
		END;
	FUNCTION pAMinusDyadic3575_AMD3575:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpminus;
		 pAMinusDyadic3575_AMD3575:=myrec;
		END;
	FUNCTION pATypeid3579_AT3579:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@468351}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid3579_AT3579:=myrec;
		END;
	FUNCTION pATypeidType3578_ATT3578:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3579_AT3579;
		 pATypeidType3578_ATT3578:=myrec;
		END;
	FUNCTION pAOptionalsign3583_AO3583:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign3583_AO3583:=nil;
		 pAOptionalsign3583_AO3583:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber3582_AIN3582:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=0 ;
		 pAIntegerNumber3582_AIN3582:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs3581_ANR3581:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber3582_AIN3582;
		 pANumberRhs3581_ANR3581:=myrec;
		END;
	FUNCTION pARhsValue3580_ARV3580:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs3581_ANR3581;
		 pARhsValue3580_ARV3580:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs3577_ACR3577:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType3578_ATT3578;
		myrec^.arg2:=pARhsValue3580_ARV3580;
		 pACastRhs3577_ACR3577:=myrec;
		END;
	FUNCTION pARhsValue3576_ARV3576:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3577_ACR3577;
		 pARhsValue3576_ARV3576:=myrec;
		END;
	FUNCTION pATypeid3587_AT3587:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@468351}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid3587_AT3587:=myrec;
		END;
	FUNCTION pATypeidType3586_ATT3586:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3587_AT3587;
		 pATypeidType3586_ATT3586:=myrec;
		END;
	FUNCTION pAIdLoc3591_AIL3591:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3591_AIL3591:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3590_AR3590:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3591_AIL3591;
		 pARefval3590_AR3590:=myrec;
		END;
	FUNCTION pADerefRhs3589_ADR3589:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3590_AR3590;
		 pADerefRhs3589_ADR3589:=myrec;
		END;
	FUNCTION pARhsValue3588_ARV3588:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3589_ADR3589;
		 pARhsValue3588_ARV3588:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs3585_ACR3585:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType3586_ATT3586;
		myrec^.arg2:=pARhsValue3588_ARV3588;
		 pACastRhs3585_ACR3585:=myrec;
		END;
	FUNCTION pARhsValue3584_ARV3584:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3585_ACR3585;
		 pARhsValue3584_ARV3584:=myrec;
		END;
	FUNCTION pADyadicValue3574_ADV3574:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3576_ARV3576;
		myrec^.arg2:=pARhsValue3584_ARV3584;
		myrec^.fn:=pAMinusDyadic3575_AMD3575;
		 pADyadicValue3574_ADV3574:=myrec;
		END;
	FUNCTION pAAssign3567_AA3567:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue3574_ADV3574;
		myrec^.dest:=pARefcastRefval3568_ARR3568;
		 pAAssign3567_AA3567:=myrec;
		END;
	FUNCTION pAAssignMeaning3566_AAM3566:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3567_AA3567;
		 pAAssignMeaning3566_AAM3566:=myrec;
		END;
	FUNCTION pAAssemblypattern3593_AA3593:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'neg ' );
		pappends(list,' ' );
		pappendp(list,0);
		pAAssemblypattern3593_AA3593:=list;
		END;
	FUNCTION pAAssemblesto3592_AA3592:pprintlist;
	begin
		pAAssemblesto3592_AA3592:=pAAssemblypattern3593_AA3593;
		END;
	FUNCTION pASideeffects3597_AS3597:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3597_AS3597:=nil;
		 pASideeffects3597_AS3597:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3598_AUP3598:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3598_AUP3598:=nil;
		 pAUnconditionalPrecond3598_AUP3598:=myrec;
		END;
	FUNCTION Negate_N:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patanyreg_;
		params^[1]:=typeparam;
		paramcount:=3;
		meaning:=pAAssignMeaning3566_AAM3566;
		matchedAssembler:=pAAssemblesto3592_AA3592;
		END;
		Negate_N:=myrec;
	END;
	FUNCTION pATypeid3601_AT3601:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ anyreg  ilcg.pattern@18b13b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3601_AT3601:=myrec;
		END;
	FUNCTION pATypeid3610_AT3610:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@3d9f80}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid3610_AT3610:=myrec;
		END;
	FUNCTION pATypeidType3609_ATT3609:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3610_AT3610;
		 pATypeidType3609_ATT3609:=myrec;
		END;
	FUNCTION pAReference3608_AR3608:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType3609_ATT3609;
		 pAReference3608_AR3608:=myrec;
		END;
	FUNCTION pAReftypeType3607_ART3607:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference3608_AR3608;
		 pAReftypeType3607_ART3607:=myrec;
		END;
	FUNCTION pAIdLoc3611_AIL3611:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3611_AIL3611:=myrec;
		END;
	FUNCTION pARefcastRefval3606_ARR3606:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType3607_ART3607;
		myrec^.arg2:=pAIdLoc3611_AIL3611;
		 pARefcastRefval3606_ARR3606:=myrec;
		END;
	FUNCTION pATimesDyadic3613_ATD3613:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcptimes;
		 pATimesDyadic3613_ATD3613:=myrec;
		END;
	FUNCTION pATypeid3617_AT3617:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@3d9f80}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid3617_AT3617:=myrec;
		END;
	FUNCTION pATypeidType3616_ATT3616:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3617_AT3617;
		 pATypeidType3616_ATT3616:=myrec;
		END;
	FUNCTION pAMinusOptionalsign3621_AMO3621:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAMinusOptionalsign3621_AMO3621:=nil;
		 pAMinusOptionalsign3621_AMO3621:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber3620_AIN3620:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=- 1 ;
		 pAIntegerNumber3620_AIN3620:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs3619_ANR3619:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber3620_AIN3620;
		 pANumberRhs3619_ANR3619:=myrec;
		END;
	FUNCTION pARhsValue3618_ARV3618:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs3619_ANR3619;
		 pARhsValue3618_ARV3618:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs3615_ACR3615:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType3616_ATT3616;
		myrec^.arg2:=pARhsValue3618_ARV3618;
		 pACastRhs3615_ACR3615:=myrec;
		END;
	FUNCTION pARhsValue3614_ARV3614:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3615_ACR3615;
		 pARhsValue3614_ARV3614:=myrec;
		END;
	FUNCTION pATypeid3625_AT3625:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@3d9f80}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid3625_AT3625:=myrec;
		END;
	FUNCTION pATypeidType3624_ATT3624:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3625_AT3625;
		 pATypeidType3624_ATT3624:=myrec;
		END;
	FUNCTION pAIdLoc3629_AIL3629:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3629_AIL3629:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3628_AR3628:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3629_AIL3629;
		 pARefval3628_AR3628:=myrec;
		END;
	FUNCTION pADerefRhs3627_ADR3627:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3628_AR3628;
		 pADerefRhs3627_ADR3627:=myrec;
		END;
	FUNCTION pARhsValue3626_ARV3626:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3627_ADR3627;
		 pARhsValue3626_ARV3626:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs3623_ACR3623:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType3624_ATT3624;
		myrec^.arg2:=pARhsValue3626_ARV3626;
		 pACastRhs3623_ACR3623:=myrec;
		END;
	FUNCTION pARhsValue3622_ARV3622:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3623_ACR3623;
		 pARhsValue3622_ARV3622:=myrec;
		END;
	FUNCTION pADyadicValue3612_ADV3612:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3614_ARV3614;
		myrec^.arg2:=pARhsValue3622_ARV3622;
		myrec^.fn:=pATimesDyadic3613_ATD3613;
		 pADyadicValue3612_ADV3612:=myrec;
		END;
	FUNCTION pAAssign3605_AA3605:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue3612_ADV3612;
		myrec^.dest:=pARefcastRefval3606_ARR3606;
		 pAAssign3605_AA3605:=myrec;
		END;
	FUNCTION pAAssignMeaning3604_AAM3604:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3605_AA3605;
		 pAAssignMeaning3604_AAM3604:=myrec;
		END;
	FUNCTION pAAssemblypattern3631_AA3631:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'neg ' );
		pappends(list,' ' );
		pappendp(list,0);
		pAAssemblypattern3631_AA3631:=list;
		END;
	FUNCTION pAAssemblesto3630_AA3630:pprintlist;
	begin
		pAAssemblesto3630_AA3630:=pAAssemblypattern3631_AA3631;
		END;
	FUNCTION pASideeffects3635_AS3635:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3635_AS3635:=nil;
		 pASideeffects3635_AS3635:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3636_AUP3636:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3636_AUP3636:=nil;
		 pAUnconditionalPrecond3636_AUP3636:=myrec;
		END;
	FUNCTION MNegate_MN:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patanyreg_;
		params^[1]:=typeparam;
		paramcount:=3;
		meaning:=pAAssignMeaning3604_AAM3604;
		matchedAssembler:=pAAssemblesto3630_AA3630;
		END;
		MNegate_MN:=myrec;
	END;
	FUNCTION pATypeid3639_AT3639:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ operator  ilcg.pattern@2d9844}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3639_AT3639:=myrec;
		END;
	FUNCTION pATypeid3641_AT3641:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ pushreg  ilcg.pattern@11e321}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3641_AT3641:=myrec;
		END;
	FUNCTION pATypeid3645_AT3645:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ signed  ilcg.pattern@c6406}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3645_AT3645:=myrec;
		END;
	FUNCTION pAIdLoc3649_AIL3649:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3649_AIL3649:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3648_AR3648:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3649_AIL3649;
		 pARefval3648_AR3648:=myrec;
		END;
	FUNCTION pAIdentifierDyadic3651_AID3651:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic3651_AID3651:=myrec;
		END;
	FUNCTION pAIdLoc3655_AIL3655:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3655_AIL3655:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3654_AR3654:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3655_AIL3655;
		 pARefval3654_AR3654:=myrec;
		END;
	FUNCTION pADerefRhs3653_ADR3653:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3654_AR3654;
		 pADerefRhs3653_ADR3653:=myrec;
		END;
	FUNCTION pARhsValue3652_ARV3652:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3653_ADR3653;
		 pARhsValue3652_ARV3652:=myrec;
		END;
	FUNCTION pAConstRhs3657_ACR3657:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(3);;
		 pAConstRhs3657_ACR3657:=myrec;
		END;
	FUNCTION pARhsValue3656_ARV3656:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs3657_ACR3657;
		 pARhsValue3656_ARV3656:=myrec;
		END;
	FUNCTION pADyadicValue3650_ADV3650:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3652_ARV3652;
		myrec^.arg2:=pARhsValue3656_ARV3656;
		myrec^.fn:=pAIdentifierDyadic3651_AID3651;
		 pADyadicValue3650_ADV3650:=myrec;
		END;
	FUNCTION pAAssign3647_AA3647:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue3650_ADV3650;
		myrec^.dest:=pARefval3648_AR3648;
		 pAAssign3647_AA3647:=myrec;
		END;
	FUNCTION pAAssignMeaning3646_AAM3646:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3647_AA3647;
		 pAAssignMeaning3646_AAM3646:=myrec;
		END;
	FUNCTION pAAssemblypattern3659_AA3659:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,'  ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,3);
		pAAssemblypattern3659_AA3659:=list;
		END;
	FUNCTION pAAssemblesto3658_AA3658:pprintlist;
	begin
		pAAssemblesto3658_AA3658:=pAAssemblypattern3659_AA3659;
		END;
	FUNCTION pASideeffects3665_AS3665:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3665_AS3665:=nil;
		 pASideeffects3665_AS3665:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3666_AUP3666:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3666_AUP3666:=nil;
		 pAUnconditionalPrecond3666_AUP3666:=myrec;
		END;
	FUNCTION RLIT_RLIT:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patpushreg_;
		params^[2]:=typeparam;
		params^[3]:=patsigned_;
		params^[0]:=patoperator_;
		paramcount:=5;
		meaning:=pAAssignMeaning3646_AAM3646;
		matchedAssembler:=pAAssemblesto3658_AA3658;
		END;
		RLIT_RLIT:=myrec;
	END;
	FUNCTION pATypeid3669_AT3669:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ nonmultoperator  ilcg.pattern@145582}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3669_AT3669:=myrec;
		END;
	FUNCTION pATypeid3671_AT3671:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ anyreg  ilcg.pattern@18b13b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3671_AT3671:=myrec;
		END;
	FUNCTION pATypeid3673_AT3673:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ anyreg  ilcg.pattern@18b13b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3673_AT3673:=myrec;
		END;
	FUNCTION pATypeid3675_AT3675:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@3e965}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3675_AT3675:=myrec;
		END;
	FUNCTION pAIdLoc3679_AIL3679:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3679_AIL3679:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3678_AR3678:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3679_AIL3679;
		 pARefval3678_AR3678:=myrec;
		END;
	FUNCTION pATypeid3683_AT3683:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@7dbc27}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid3683_AT3683:=myrec;
		END;
	FUNCTION pATypeidType3682_ATT3682:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3683_AT3683;
		 pATypeidType3682_ATT3682:=myrec;
		END;
	FUNCTION pAIdentifierDyadic3685_AID3685:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic3685_AID3685:=myrec;
		END;
	FUNCTION pATypeid3689_AT3689:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@7dbc27}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid3689_AT3689:=myrec;
		END;
	FUNCTION pATypeidType3688_ATT3688:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3689_AT3689;
		 pATypeidType3688_ATT3688:=myrec;
		END;
	FUNCTION pATypeid3696_AT3696:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@7dbc27}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid3696_AT3696:=myrec;
		END;
	FUNCTION pATypeidType3695_ATT3695:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3696_AT3696;
		 pATypeidType3695_ATT3695:=myrec;
		END;
	FUNCTION pAReference3694_AR3694:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType3695_ATT3695;
		 pAReference3694_AR3694:=myrec;
		END;
	FUNCTION pAReftypeType3693_ART3693:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference3694_AR3694;
		 pAReftypeType3693_ART3693:=myrec;
		END;
	FUNCTION pAIdLoc3697_AIL3697:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3697_AIL3697:=myrec;
		END;
	FUNCTION pARefcastRefval3692_ARR3692:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType3693_ART3693;
		myrec^.arg2:=pAIdLoc3697_AIL3697;
		 pARefcastRefval3692_ARR3692:=myrec;
		END;
	FUNCTION pADerefRhs3691_ADR3691:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval3692_ARR3692;
		 pADerefRhs3691_ADR3691:=myrec;
		END;
	FUNCTION pARhsValue3690_ARV3690:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3691_ADR3691;
		 pARhsValue3690_ARV3690:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs3687_ACR3687:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType3688_ATT3688;
		myrec^.arg2:=pARhsValue3690_ARV3690;
		 pACastRhs3687_ACR3687:=myrec;
		END;
	FUNCTION pARhsValue3686_ARV3686:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3687_ACR3687;
		 pARhsValue3686_ARV3686:=myrec;
		END;
	FUNCTION pATypeid3701_AT3701:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@7dbc27}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid3701_AT3701:=myrec;
		END;
	FUNCTION pATypeidType3700_ATT3700:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3701_AT3701;
		 pATypeidType3700_ATT3700:=myrec;
		END;
	FUNCTION pATypeid3708_AT3708:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@7dbc27}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid3708_AT3708:=myrec;
		END;
	FUNCTION pATypeidType3707_ATT3707:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3708_AT3708;
		 pATypeidType3707_ATT3707:=myrec;
		END;
	FUNCTION pAReference3706_AR3706:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType3707_ATT3707;
		 pAReference3706_AR3706:=myrec;
		END;
	FUNCTION pAReftypeType3705_ART3705:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference3706_AR3706;
		 pAReftypeType3705_ART3705:=myrec;
		END;
	FUNCTION pAIdLoc3709_AIL3709:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc3709_AIL3709:=myrec;
		END;
	FUNCTION pARefcastRefval3704_ARR3704:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType3705_ART3705;
		myrec^.arg2:=pAIdLoc3709_AIL3709;
		 pARefcastRefval3704_ARR3704:=myrec;
		END;
	FUNCTION pADerefRhs3703_ADR3703:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval3704_ARR3704;
		 pADerefRhs3703_ADR3703:=myrec;
		END;
	FUNCTION pARhsValue3702_ARV3702:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3703_ADR3703;
		 pARhsValue3702_ARV3702:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs3699_ACR3699:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType3700_ATT3700;
		myrec^.arg2:=pARhsValue3702_ARV3702;
		 pACastRhs3699_ACR3699:=myrec;
		END;
	FUNCTION pARhsValue3698_ARV3698:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3699_ACR3699;
		 pARhsValue3698_ARV3698:=myrec;
		END;
	FUNCTION pADyadicValue3684_ADV3684:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3686_ARV3686;
		myrec^.arg2:=pARhsValue3698_ARV3698;
		myrec^.fn:=pAIdentifierDyadic3685_AID3685;
		 pADyadicValue3684_ADV3684:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs3681_ACR3681:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType3682_ATT3682;
		myrec^.arg2:=pADyadicValue3684_ADV3684;
		 pACastRhs3681_ACR3681:=myrec;
		END;
	FUNCTION pARhsValue3680_ARV3680:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3681_ACR3681;
		 pARhsValue3680_ARV3680:=myrec;
		END;
	FUNCTION pAAssign3677_AA3677:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue3680_ARV3680;
		myrec^.dest:=pARefval3678_AR3678;
		 pAAssign3677_AA3677:=myrec;
		END;
	FUNCTION pAAssignMeaning3676_AAM3676:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3677_AA3677;
		 pAAssignMeaning3676_AAM3676:=myrec;
		END;
	FUNCTION pAAssemblypattern3711_AA3711:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,' ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,2);
		pAAssemblypattern3711_AA3711:=list;
		END;
	FUNCTION pAAssemblesto3710_AA3710:pprintlist;
	begin
		pAAssemblesto3710_AA3710:=pAAssemblypattern3711_AA3711;
		END;
	FUNCTION pASideeffects3717_AS3717:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3717_AS3717:=nil;
		 pASideeffects3717_AS3717:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3718_AUP3718:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3718_AUP3718:=nil;
		 pAUnconditionalPrecond3718_AUP3718:=myrec;
		END;
	FUNCTION RR_RR:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patanyreg_;
		params^[1]:=patanyreg_;
		params^[3]:=patint_;
		params^[0]:=patnonmultoperator_;
		paramcount:=5;
		meaning:=pAAssignMeaning3676_AAM3676;
		matchedAssembler:=pAAssemblesto3710_AA3710;
		END;
		RR_RR:=myrec;
	END;
	FUNCTION pATypeid3721_AT3721:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ operator  ilcg.pattern@2d9844}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3721_AT3721:=myrec;
		END;
	FUNCTION pATypeid3723_AT3723:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3723_AT3723:=myrec;
		END;
	FUNCTION pATypeid3725_AT3725:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3725_AT3725:=myrec;
		END;
	FUNCTION pATypeid3727_AT3727:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@3e965}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3727_AT3727:=myrec;
		END;
	FUNCTION pAIdLoc3731_AIL3731:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3731_AIL3731:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3730_AR3730:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3731_AIL3731;
		 pARefval3730_AR3730:=myrec;
		END;
	FUNCTION pATypeid3735_AT3735:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@845af}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid3735_AT3735:=myrec;
		END;
	FUNCTION pATypeidType3734_ATT3734:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3735_AT3735;
		 pATypeidType3734_ATT3734:=myrec;
		END;
	FUNCTION pAIdentifierDyadic3737_AID3737:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic3737_AID3737:=myrec;
		END;
	FUNCTION pATypeid3741_AT3741:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@845af}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid3741_AT3741:=myrec;
		END;
	FUNCTION pATypeidType3740_ATT3740:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3741_AT3741;
		 pATypeidType3740_ATT3740:=myrec;
		END;
	FUNCTION pATypeid3748_AT3748:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@845af}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid3748_AT3748:=myrec;
		END;
	FUNCTION pATypeidType3747_ATT3747:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3748_AT3748;
		 pATypeidType3747_ATT3747:=myrec;
		END;
	FUNCTION pAReference3746_AR3746:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType3747_ATT3747;
		 pAReference3746_AR3746:=myrec;
		END;
	FUNCTION pAReftypeType3745_ART3745:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference3746_AR3746;
		 pAReftypeType3745_ART3745:=myrec;
		END;
	FUNCTION pAIdLoc3749_AIL3749:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3749_AIL3749:=myrec;
		END;
	FUNCTION pARefcastRefval3744_ARR3744:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType3745_ART3745;
		myrec^.arg2:=pAIdLoc3749_AIL3749;
		 pARefcastRefval3744_ARR3744:=myrec;
		END;
	FUNCTION pADerefRhs3743_ADR3743:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval3744_ARR3744;
		 pADerefRhs3743_ADR3743:=myrec;
		END;
	FUNCTION pARhsValue3742_ARV3742:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3743_ADR3743;
		 pARhsValue3742_ARV3742:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs3739_ACR3739:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType3740_ATT3740;
		myrec^.arg2:=pARhsValue3742_ARV3742;
		 pACastRhs3739_ACR3739:=myrec;
		END;
	FUNCTION pARhsValue3738_ARV3738:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3739_ACR3739;
		 pARhsValue3738_ARV3738:=myrec;
		END;
	FUNCTION pATypeid3753_AT3753:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@845af}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid3753_AT3753:=myrec;
		END;
	FUNCTION pATypeidType3752_ATT3752:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3753_AT3753;
		 pATypeidType3752_ATT3752:=myrec;
		END;
	FUNCTION pATypeid3760_AT3760:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@845af}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid3760_AT3760:=myrec;
		END;
	FUNCTION pATypeidType3759_ATT3759:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3760_AT3760;
		 pATypeidType3759_ATT3759:=myrec;
		END;
	FUNCTION pAReference3758_AR3758:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType3759_ATT3759;
		 pAReference3758_AR3758:=myrec;
		END;
	FUNCTION pAReftypeType3757_ART3757:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference3758_AR3758;
		 pAReftypeType3757_ART3757:=myrec;
		END;
	FUNCTION pAIdLoc3761_AIL3761:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc3761_AIL3761:=myrec;
		END;
	FUNCTION pARefcastRefval3756_ARR3756:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType3757_ART3757;
		myrec^.arg2:=pAIdLoc3761_AIL3761;
		 pARefcastRefval3756_ARR3756:=myrec;
		END;
	FUNCTION pADerefRhs3755_ADR3755:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval3756_ARR3756;
		 pADerefRhs3755_ADR3755:=myrec;
		END;
	FUNCTION pARhsValue3754_ARV3754:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3755_ADR3755;
		 pARhsValue3754_ARV3754:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs3751_ACR3751:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType3752_ATT3752;
		myrec^.arg2:=pARhsValue3754_ARV3754;
		 pACastRhs3751_ACR3751:=myrec;
		END;
	FUNCTION pARhsValue3750_ARV3750:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3751_ACR3751;
		 pARhsValue3750_ARV3750:=myrec;
		END;
	FUNCTION pADyadicValue3736_ADV3736:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3738_ARV3738;
		myrec^.arg2:=pARhsValue3750_ARV3750;
		myrec^.fn:=pAIdentifierDyadic3737_AID3737;
		 pADyadicValue3736_ADV3736:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs3733_ACR3733:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType3734_ATT3734;
		myrec^.arg2:=pADyadicValue3736_ADV3736;
		 pACastRhs3733_ACR3733:=myrec;
		END;
	FUNCTION pARhsValue3732_ARV3732:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3733_ACR3733;
		 pARhsValue3732_ARV3732:=myrec;
		END;
	FUNCTION pAAssign3729_AA3729:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue3732_ARV3732;
		myrec^.dest:=pARefval3730_AR3730;
		 pAAssign3729_AA3729:=myrec;
		END;
	FUNCTION pAAssignMeaning3728_AAM3728:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3729_AA3729;
		 pAAssignMeaning3728_AAM3728:=myrec;
		END;
	FUNCTION pAAssemblypattern3763_AA3763:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,' ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,2);
		pAAssemblypattern3763_AA3763:=list;
		END;
	FUNCTION pAAssemblesto3762_AA3762:pprintlist;
	begin
		pAAssemblesto3762_AA3762:=pAAssemblypattern3763_AA3763;
		END;
	FUNCTION pASideeffects3769_AS3769:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3769_AS3769:=nil;
		 pASideeffects3769_AS3769:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3770_AUP3770:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3770_AUP3770:=nil;
		 pAUnconditionalPrecond3770_AUP3770:=myrec;
		END;
	FUNCTION iRR_RR:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patreg_;
		params^[1]:=patreg_;
		params^[3]:=patint_;
		params^[0]:=patoperator_;
		paramcount:=5;
		meaning:=pAAssignMeaning3728_AAM3728;
		matchedAssembler:=pAAssemblesto3762_AA3762;
		END;
		iRR_RR:=myrec;
	END;
	FUNCTION pATypeid3773_AT3773:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ operator  ilcg.pattern@2d9844}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3773_AT3773:=myrec;
		END;
	FUNCTION pATypeid3775_AT3775:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ pushreg  ilcg.pattern@11e321}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3775_AT3775:=myrec;
		END;
	FUNCTION pATypeid3777_AT3777:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3777_AT3777:=myrec;
		END;
	FUNCTION pATypeid3779_AT3779:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@3e965}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3779_AT3779:=myrec;
		END;
	FUNCTION pAIdLoc3783_AIL3783:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3783_AIL3783:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3782_AR3782:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3783_AIL3783;
		 pARefval3782_AR3782:=myrec;
		END;
	FUNCTION pATypeid3787_AT3787:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@5097d}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid3787_AT3787:=myrec;
		END;
	FUNCTION pATypeidType3786_ATT3786:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3787_AT3787;
		 pATypeidType3786_ATT3786:=myrec;
		END;
	FUNCTION pAIdentifierDyadic3789_AID3789:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic3789_AID3789:=myrec;
		END;
	FUNCTION pATypeid3793_AT3793:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@5097d}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid3793_AT3793:=myrec;
		END;
	FUNCTION pATypeidType3792_ATT3792:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3793_AT3793;
		 pATypeidType3792_ATT3792:=myrec;
		END;
	FUNCTION pAIdLoc3797_AIL3797:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3797_AIL3797:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3796_AR3796:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3797_AIL3797;
		 pARefval3796_AR3796:=myrec;
		END;
	FUNCTION pADerefRhs3795_ADR3795:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3796_AR3796;
		 pADerefRhs3795_ADR3795:=myrec;
		END;
	FUNCTION pARhsValue3794_ARV3794:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3795_ADR3795;
		 pARhsValue3794_ARV3794:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs3791_ACR3791:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType3792_ATT3792;
		myrec^.arg2:=pARhsValue3794_ARV3794;
		 pACastRhs3791_ACR3791:=myrec;
		END;
	FUNCTION pARhsValue3790_ARV3790:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3791_ACR3791;
		 pARhsValue3790_ARV3790:=myrec;
		END;
	FUNCTION pATypeid3801_AT3801:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@5097d}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid3801_AT3801:=myrec;
		END;
	FUNCTION pATypeidType3800_ATT3800:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3801_AT3801;
		 pATypeidType3800_ATT3800:=myrec;
		END;
	FUNCTION pAIdLoc3805_AIL3805:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc3805_AIL3805:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3804_AR3804:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3805_AIL3805;
		 pARefval3804_AR3804:=myrec;
		END;
	FUNCTION pADerefRhs3803_ADR3803:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3804_AR3804;
		 pADerefRhs3803_ADR3803:=myrec;
		END;
	FUNCTION pARhsValue3802_ARV3802:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3803_ADR3803;
		 pARhsValue3802_ARV3802:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs3799_ACR3799:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType3800_ATT3800;
		myrec^.arg2:=pARhsValue3802_ARV3802;
		 pACastRhs3799_ACR3799:=myrec;
		END;
	FUNCTION pARhsValue3798_ARV3798:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3799_ACR3799;
		 pARhsValue3798_ARV3798:=myrec;
		END;
	FUNCTION pADyadicValue3788_ADV3788:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3790_ARV3790;
		myrec^.arg2:=pARhsValue3798_ARV3798;
		myrec^.fn:=pAIdentifierDyadic3789_AID3789;
		 pADyadicValue3788_ADV3788:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs3785_ACR3785:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType3786_ATT3786;
		myrec^.arg2:=pADyadicValue3788_ADV3788;
		 pACastRhs3785_ACR3785:=myrec;
		END;
	FUNCTION pARhsValue3784_ARV3784:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3785_ACR3785;
		 pARhsValue3784_ARV3784:=myrec;
		END;
	FUNCTION pAAssign3781_AA3781:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue3784_ARV3784;
		myrec^.dest:=pARefval3782_AR3782;
		 pAAssign3781_AA3781:=myrec;
		END;
	FUNCTION pAAssignMeaning3780_AAM3780:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3781_AA3781;
		 pAAssignMeaning3780_AAM3780:=myrec;
		END;
	FUNCTION pAAssemblypattern3807_AA3807:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,' ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,2);
		pAAssemblypattern3807_AA3807:=list;
		END;
	FUNCTION pAAssemblesto3806_AA3806:pprintlist;
	begin
		pAAssemblesto3806_AA3806:=pAAssemblypattern3807_AA3807;
		END;
	FUNCTION pASideeffects3813_AS3813:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3813_AS3813:=nil;
		 pASideeffects3813_AS3813:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3814_AUP3814:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3814_AUP3814:=nil;
		 pAUnconditionalPrecond3814_AUP3814:=myrec;
		END;
	FUNCTION RRM_RRM:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patpushreg_;
		params^[3]:=patint_;
		params^[2]:=patmaddrmode_;
		params^[0]:=patoperator_;
		paramcount:=5;
		meaning:=pAAssignMeaning3780_AAM3780;
		matchedAssembler:=pAAssemblesto3806_AA3806;
		END;
		RRM_RRM:=myrec;
	END;
	FUNCTION pATypeid3819_AT3819:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ DH  ilcg.RegDetails@3f1179}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3819_AT3819:=myrec;
		END;
	FUNCTION pATypeidType3818_ATT3818:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3819_AT3819;
		 pATypeidType3818_ATT3818:=myrec;
		END;
	FUNCTION pATypeid3821_AT3821:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ DL  ilcg.RegDetails@736e59}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3821_AT3821:=myrec;
		END;
	FUNCTION pATypeidType3820_ATT3820:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3821_AT3821;
		 pATypeidType3820_ATT3820:=myrec;
		END;
	FUNCTION pATypeid3823_AT3823:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BH  ilcg.RegDetails@474910}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3823_AT3823:=myrec;
		END;
	FUNCTION pATypeidType3822_ATT3822:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3823_AT3823;
		 pATypeidType3822_ATT3822:=myrec;
		END;
	FUNCTION pATypeid3825_AT3825:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BL  ilcg.RegDetails@3c9673}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3825_AT3825:=myrec;
		END;
	FUNCTION pATypeidType3824_ATT3824:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3825_AT3825;
		 pATypeidType3824_ATT3824:=myrec;
		END;
	FUNCTION pATypeid3827_AT3827:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ CH  ilcg.RegDetails@2c2d9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3827_AT3827:=myrec;
		END;
	FUNCTION pATypeidType3826_ATT3826:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3827_AT3827;
		 pATypeidType3826_ATT3826:=myrec;
		END;
	FUNCTION pATypeid3829_AT3829:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ CL  ilcg.RegDetails@730b8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3829_AT3829:=myrec;
		END;
	FUNCTION pATypeidType3828_ATT3828:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3829_AT3829;
		 pATypeidType3828_ATT3828:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl3817_AAP3817:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 197;
		myrec^.last:= 202;
		 pAAlternativesPatterndecl3817_AAP3817:=myrec;
		END;
	FUNCTION pATypeid3834_AT3834:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ AL  ilcg.RegDetails@711e0f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3834_AT3834:=myrec;
		END;
	FUNCTION pATypeidType3833_ATT3833:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3834_AT3834;
		 pATypeidType3833_ATT3833:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl3832_AAP3832:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 203;
		myrec^.last:= 203;
		 pAAlternativesPatterndecl3832_AAP3832:=myrec;
		END;
	FUNCTION pATypeid3839_AT3839:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3839_AT3839:=myrec;
		END;
	FUNCTION pATypeidType3838_ATT3838:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3839_AT3839;
		 pATypeidType3838_ATT3838:=myrec;
		END;
	FUNCTION pATypeid3841_AT3841:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baccreg  ilcg.pattern@d637d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3841_AT3841:=myrec;
		END;
	FUNCTION pATypeidType3840_ATT3840:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3841_AT3841;
		 pATypeidType3840_ATT3840:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl3837_AAP3837:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 204;
		myrec^.last:= 205;
		 pAAlternativesPatterndecl3837_AAP3837:=myrec;
		END;
	FUNCTION pATypeid3846_AT3846:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3846_AT3846:=myrec;
		END;
	FUNCTION pATypeidType3845_ATT3845:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3846_AT3846;
		 pATypeidType3845_ATT3845:=myrec;
		END;
	FUNCTION pATypeid3848_AT3848:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bnonacreg  ilcg.pattern@747f59}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3848_AT3848:=myrec;
		END;
	FUNCTION pATypeidType3847_ATT3847:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid3848_AT3848;
		 pATypeidType3847_ATT3847:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl3844_AAP3844:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 206;
		myrec^.last:= 207;
		 pAAlternativesPatterndecl3844_AAP3844:=myrec;
		END;
	FUNCTION pATypeid3851_AT3851:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baccreg  ilcg.pattern@d637d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3851_AT3851:=myrec;
		END;
	FUNCTION pATypeid3853_AT3853:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bnonacregmode  ilcg.pattern@61fb6c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3853_AT3853:=myrec;
		END;
	FUNCTION pAIdLoc3857_AIL3857:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3857_AIL3857:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3856_AR3856:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3857_AIL3857;
		 pARefval3856_AR3856:=myrec;
		END;
	FUNCTION pADivideDyadic3859_ADD3859:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpdivide;
		 pADivideDyadic3859_ADD3859:=myrec;
		END;
	FUNCTION pAInt8Signed3865_AI8S3865:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed3865_AI8S3865:=myrec;
		END;
	FUNCTION pASignedTformat3864_AST3864:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed3865_AI8S3865;
		 pASignedTformat3864_AST3864:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype3863_ATP3863:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype3863_ATP3863:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3862_APT3862:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType3862_APT3862:=myrec;
		END;
	FUNCTION pAIdLoc3869_AIL3869:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3869_AIL3869:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3868_AR3868:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3869_AIL3869;
		 pARefval3868_AR3868:=myrec;
		END;
	FUNCTION pADerefRhs3867_ADR3867:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3868_AR3868;
		 pADerefRhs3867_ADR3867:=myrec;
		END;
	FUNCTION pARhsValue3866_ARV3866:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3867_ADR3867;
		 pARhsValue3866_ARV3866:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs3861_ACR3861:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType3862_APT3862;
		myrec^.arg2:=pARhsValue3866_ARV3866;
		 pACastRhs3861_ACR3861:=myrec;
		END;
	FUNCTION pARhsValue3860_ARV3860:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3861_ACR3861;
		 pARhsValue3860_ARV3860:=myrec;
		END;
	FUNCTION pAInt8Signed3875_AI8S3875:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed3875_AI8S3875:=myrec;
		END;
	FUNCTION pASignedTformat3874_AST3874:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed3875_AI8S3875;
		 pASignedTformat3874_AST3874:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype3873_ATP3873:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype3873_ATP3873:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3872_APT3872:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType3872_APT3872:=myrec;
		END;
	FUNCTION pAIdLoc3879_AIL3879:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3879_AIL3879:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3878_AR3878:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3879_AIL3879;
		 pARefval3878_AR3878:=myrec;
		END;
	FUNCTION pADerefRhs3877_ADR3877:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3878_AR3878;
		 pADerefRhs3877_ADR3877:=myrec;
		END;
	FUNCTION pARhsValue3876_ARV3876:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3877_ADR3877;
		 pARhsValue3876_ARV3876:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs3871_ACR3871:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType3872_APT3872;
		myrec^.arg2:=pARhsValue3876_ARV3876;
		 pACastRhs3871_ACR3871:=myrec;
		END;
	FUNCTION pARhsValue3870_ARV3870:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3871_ACR3871;
		 pARhsValue3870_ARV3870:=myrec;
		END;
	FUNCTION pADyadicValue3858_ADV3858:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3860_ARV3860;
		myrec^.arg2:=pARhsValue3870_ARV3870;
		myrec^.fn:=pADivideDyadic3859_ADD3859;
		 pADyadicValue3858_ADV3858:=myrec;
		END;
	FUNCTION pAAssign3855_AA3855:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue3858_ADV3858;
		myrec^.dest:=pARefval3856_AR3856;
		 pAAssign3855_AA3855:=myrec;
		END;
	FUNCTION pAAssignMeaning3854_AAM3854:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3855_AA3855;
		 pAAssignMeaning3854_AAM3854:=myrec;
		END;
	FUNCTION pAAssemblypattern3881_AA3881:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,' movsx ax,' );
		pappendp(list,0);
		pappends(list,'\n idiv BYTE ' );
		pappendp(list,1);
		pAAssemblypattern3881_AA3881:=list;
		END;
	FUNCTION pAAssemblesto3880_AA3880:pprintlist;
	begin
		pAAssemblesto3880_AA3880:=pAAssemblypattern3881_AA3881;
		END;
	FUNCTION pASideeffects3886_AS3886:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3886_AS3886:=nil;
		 pASideeffects3886_AS3886:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3887_AUP3887:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3887_AUP3887:=nil;
		 pAUnconditionalPrecond3887_AUP3887:=myrec;
		END;
	FUNCTION fastBIDIV_BIDIV:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbnonacregmode_;
		params^[0]:=patbaccreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning3854_AAM3854;
		matchedAssembler:=pAAssemblesto3880_AA3880;
		END;
		fastBIDIV_BIDIV:=myrec;
	END;
	FUNCTION pATypeid3890_AT3890:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baccreg  ilcg.pattern@d637d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3890_AT3890:=myrec;
		END;
	FUNCTION pATypeid3892_AT3892:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bnonacregmode  ilcg.pattern@61fb6c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3892_AT3892:=myrec;
		END;
	FUNCTION pATypeid3894_AT3894:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baccregmode  ilcg.pattern@59b924}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3894_AT3894:=myrec;
		END;
	FUNCTION pAIdLoc3898_AIL3898:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc3898_AIL3898:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3897_AR3897:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3898_AIL3898;
		 pARefval3897_AR3897:=myrec;
		END;
	FUNCTION pADivideDyadic3900_ADD3900:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpdivide;
		 pADivideDyadic3900_ADD3900:=myrec;
		END;
	FUNCTION pAInt8Signed3906_AI8S3906:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed3906_AI8S3906:=myrec;
		END;
	FUNCTION pASignedTformat3905_AST3905:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed3906_AI8S3906;
		 pASignedTformat3905_AST3905:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype3904_ATP3904:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype3904_ATP3904:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3903_APT3903:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType3903_APT3903:=myrec;
		END;
	FUNCTION pAIdLoc3910_AIL3910:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3910_AIL3910:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3909_AR3909:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3910_AIL3910;
		 pARefval3909_AR3909:=myrec;
		END;
	FUNCTION pADerefRhs3908_ADR3908:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3909_AR3909;
		 pADerefRhs3908_ADR3908:=myrec;
		END;
	FUNCTION pARhsValue3907_ARV3907:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3908_ADR3908;
		 pARhsValue3907_ARV3907:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs3902_ACR3902:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType3903_APT3903;
		myrec^.arg2:=pARhsValue3907_ARV3907;
		 pACastRhs3902_ACR3902:=myrec;
		END;
	FUNCTION pARhsValue3901_ARV3901:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3902_ACR3902;
		 pARhsValue3901_ARV3901:=myrec;
		END;
	FUNCTION pAInt8Signed3916_AI8S3916:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed3916_AI8S3916:=myrec;
		END;
	FUNCTION pASignedTformat3915_AST3915:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed3916_AI8S3916;
		 pASignedTformat3915_AST3915:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype3914_ATP3914:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype3914_ATP3914:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3913_APT3913:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType3913_APT3913:=myrec;
		END;
	FUNCTION pAIdLoc3920_AIL3920:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3920_AIL3920:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3919_AR3919:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3920_AIL3920;
		 pARefval3919_AR3919:=myrec;
		END;
	FUNCTION pADerefRhs3918_ADR3918:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3919_AR3919;
		 pADerefRhs3918_ADR3918:=myrec;
		END;
	FUNCTION pARhsValue3917_ARV3917:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3918_ADR3918;
		 pARhsValue3917_ARV3917:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs3912_ACR3912:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType3913_APT3913;
		myrec^.arg2:=pARhsValue3917_ARV3917;
		 pACastRhs3912_ACR3912:=myrec;
		END;
	FUNCTION pARhsValue3911_ARV3911:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3912_ACR3912;
		 pARhsValue3911_ARV3911:=myrec;
		END;
	FUNCTION pADyadicValue3899_ADV3899:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3901_ARV3901;
		myrec^.arg2:=pARhsValue3911_ARV3911;
		myrec^.fn:=pADivideDyadic3900_ADD3900;
		 pADyadicValue3899_ADV3899:=myrec;
		END;
	FUNCTION pAAssign3896_AA3896:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue3899_ADV3899;
		myrec^.dest:=pARefval3897_AR3897;
		 pAAssign3896_AA3896:=myrec;
		END;
	FUNCTION pAAssignMeaning3895_AAM3895:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3896_AA3896;
		 pAAssignMeaning3895_AAM3895:=myrec;
		END;
	FUNCTION pAAssemblypattern3922_AA3922:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,' movsx ax,' );
		pappendp(list,0);
		pappends(list,'\n idiv BYTE ' );
		pappendp(list,1);
		pappends(list,'\n mov BYTE ' );
		pappendp(list,2);
		pappends(list,',al' );
		pAAssemblypattern3922_AA3922:=list;
		END;
	FUNCTION pAAssemblesto3921_AA3921:pprintlist;
	begin
		pAAssemblesto3921_AA3921:=pAAssemblypattern3922_AA3922;
		END;
	FUNCTION pASideeffects3930_AS3930:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3930_AS3930:=nil;
		 pASideeffects3930_AS3930:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3931_AUP3931:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3931_AUP3931:=nil;
		 pAUnconditionalPrecond3931_AUP3931:=myrec;
		END;
	FUNCTION BIDIV_BIDIV:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patbaccregmode_;
		params^[1]:=patbnonacregmode_;
		params^[0]:=patbaccreg_;
		paramcount:=4;
		meaning:=pAAssignMeaning3895_AAM3895;
		matchedAssembler:=pAAssemblesto3921_AA3921;
		END;
		BIDIV_BIDIV:=myrec;
	END;
	FUNCTION pATypeid3934_AT3934:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baccreg  ilcg.pattern@d637d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3934_AT3934:=myrec;
		END;
	FUNCTION pATypeid3936_AT3936:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bnonacreg  ilcg.pattern@747f59}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3936_AT3936:=myrec;
		END;
	FUNCTION pAIdLoc3940_AIL3940:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3940_AIL3940:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3939_AR3939:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3940_AIL3940;
		 pARefval3939_AR3939:=myrec;
		END;
	FUNCTION pATimesDyadic3942_ATD3942:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcptimes;
		 pATimesDyadic3942_ATD3942:=myrec;
		END;
	FUNCTION pAInt8Signed3948_AI8S3948:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed3948_AI8S3948:=myrec;
		END;
	FUNCTION pASignedTformat3947_AST3947:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed3948_AI8S3948;
		 pASignedTformat3947_AST3947:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype3946_ATP3946:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype3946_ATP3946:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3945_APT3945:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType3945_APT3945:=myrec;
		END;
	FUNCTION pAIdLoc3952_AIL3952:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3952_AIL3952:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3951_AR3951:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3952_AIL3952;
		 pARefval3951_AR3951:=myrec;
		END;
	FUNCTION pADerefRhs3950_ADR3950:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3951_AR3951;
		 pADerefRhs3950_ADR3950:=myrec;
		END;
	FUNCTION pARhsValue3949_ARV3949:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3950_ADR3950;
		 pARhsValue3949_ARV3949:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs3944_ACR3944:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType3945_APT3945;
		myrec^.arg2:=pARhsValue3949_ARV3949;
		 pACastRhs3944_ACR3944:=myrec;
		END;
	FUNCTION pARhsValue3943_ARV3943:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3944_ACR3944;
		 pARhsValue3943_ARV3943:=myrec;
		END;
	FUNCTION pAInt8Signed3958_AI8S3958:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed3958_AI8S3958:=myrec;
		END;
	FUNCTION pASignedTformat3957_AST3957:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed3958_AI8S3958;
		 pASignedTformat3957_AST3957:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype3956_ATP3956:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype3956_ATP3956:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3955_APT3955:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType3955_APT3955:=myrec;
		END;
	FUNCTION pAIdLoc3962_AIL3962:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc3962_AIL3962:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3961_AR3961:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3962_AIL3962;
		 pARefval3961_AR3961:=myrec;
		END;
	FUNCTION pADerefRhs3960_ADR3960:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3961_AR3961;
		 pADerefRhs3960_ADR3960:=myrec;
		END;
	FUNCTION pARhsValue3959_ARV3959:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3960_ADR3960;
		 pARhsValue3959_ARV3959:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs3954_ACR3954:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType3955_APT3955;
		myrec^.arg2:=pARhsValue3959_ARV3959;
		 pACastRhs3954_ACR3954:=myrec;
		END;
	FUNCTION pARhsValue3953_ARV3953:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3954_ACR3954;
		 pARhsValue3953_ARV3953:=myrec;
		END;
	FUNCTION pADyadicValue3941_ADV3941:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3943_ARV3943;
		myrec^.arg2:=pARhsValue3953_ARV3953;
		myrec^.fn:=pATimesDyadic3942_ATD3942;
		 pADyadicValue3941_ADV3941:=myrec;
		END;
	FUNCTION pAAssign3938_AA3938:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue3941_ADV3941;
		myrec^.dest:=pARefval3939_AR3939;
		 pAAssign3938_AA3938:=myrec;
		END;
	FUNCTION pAAssignMeaning3937_AAM3937:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3938_AA3938;
		 pAAssignMeaning3937_AAM3937:=myrec;
		END;
	FUNCTION pAAssemblypattern3964_AA3964:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'imul BYTE ' );
		pappendp(list,1);
		pappends(list,'\n mov BYTE ' );
		pappendp(list,1);
		pappends(list,',al' );
		pAAssemblypattern3964_AA3964:=list;
		END;
	FUNCTION pAAssemblesto3963_AA3963:pprintlist;
	begin
		pAAssemblesto3963_AA3963:=pAAssemblypattern3964_AA3964;
		END;
	FUNCTION pASideeffects3970_AS3970:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects3970_AS3970:=nil;
		 pASideeffects3970_AS3970:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond3971_AUP3971:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond3971_AUP3971:=nil;
		 pAUnconditionalPrecond3971_AUP3971:=myrec;
		END;
	FUNCTION BIMUL_BIMUL:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbnonacreg_;
		params^[0]:=patbaccreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning3937_AAM3937;
		matchedAssembler:=pAAssemblesto3963_AA3963;
		END;
		BIMUL_BIMUL:=myrec;
	END;
	FUNCTION pATypeid3974_AT3974:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ acc  ilcg.pattern@535bf2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3974_AT3974:=myrec;
		END;
	FUNCTION pATypeid3976_AT3976:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ dacc  ilcg.pattern@25459}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid3976_AT3976:=myrec;
		END;
	FUNCTION pASigned3985_AS3985:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned3985_AS3985:=myrec;
		END;
	FUNCTION pASignedTformat3984_AST3984:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned3985_AS3985;
		 pASignedTformat3984_AST3984:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype3983_ATP3983:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype3983_ATP3983:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3982_APT3982:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType3982_APT3982:=myrec;
		END;
	FUNCTION pAReference3981_AR3981:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType3982_APT3982;
		 pAReference3981_AR3981:=myrec;
		END;
	FUNCTION pAReftypeType3980_ART3980:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference3981_AR3981;
		 pAReftypeType3980_ART3980:=myrec;
		END;
	FUNCTION pAIdLoc3986_AIL3986:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3986_AIL3986:=myrec;
		END;
	FUNCTION pARefcastRefval3979_ARR3979:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType3980_ART3980;
		myrec^.arg2:=pAIdLoc3986_AIL3986;
		 pARefcastRefval3979_ARR3979:=myrec;
		END;
	FUNCTION pATimesDyadic3988_ATD3988:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcptimes;
		 pATimesDyadic3988_ATD3988:=myrec;
		END;
	FUNCTION pASigned3994_AS3994:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned3994_AS3994:=myrec;
		END;
	FUNCTION pASignedTformat3993_AST3993:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned3994_AS3994;
		 pASignedTformat3993_AST3993:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype3992_ATP3992:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype3992_ATP3992:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType3991_APT3991:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType3991_APT3991:=myrec;
		END;
	FUNCTION pAIdLoc3998_AIL3998:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc3998_AIL3998:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval3997_AR3997:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc3998_AIL3998;
		 pARefval3997_AR3997:=myrec;
		END;
	FUNCTION pADerefRhs3996_ADR3996:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval3997_AR3997;
		 pADerefRhs3996_ADR3996:=myrec;
		END;
	FUNCTION pARhsValue3995_ARV3995:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs3996_ADR3996;
		 pARhsValue3995_ARV3995:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs3990_ACR3990:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType3991_APT3991;
		myrec^.arg2:=pARhsValue3995_ARV3995;
		 pACastRhs3990_ACR3990:=myrec;
		END;
	FUNCTION pARhsValue3989_ARV3989:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs3990_ACR3990;
		 pARhsValue3989_ARV3989:=myrec;
		END;
	FUNCTION pAIdLoc4002_AIL4002:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4002_AIL4002:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4001_AR4001:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4002_AIL4002;
		 pARefval4001_AR4001:=myrec;
		END;
	FUNCTION pADerefRhs4000_ADR4000:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4001_AR4001;
		 pADerefRhs4000_ADR4000:=myrec;
		END;
	FUNCTION pARhsValue3999_ARV3999:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4000_ADR4000;
		 pARhsValue3999_ARV3999:=myrec;
		END;
	FUNCTION pADyadicValue3987_ADV3987:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue3989_ARV3989;
		myrec^.arg2:=pARhsValue3999_ARV3999;
		myrec^.fn:=pATimesDyadic3988_ATD3988;
		 pADyadicValue3987_ADV3987:=myrec;
		END;
	FUNCTION pAAssign3978_AA3978:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue3987_ADV3987;
		myrec^.dest:=pARefcastRefval3979_ARR3979;
		 pAAssign3978_AA3978:=myrec;
		END;
	FUNCTION pAAssignMeaning3977_AAM3977:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign3978_AA3978;
		 pAAssignMeaning3977_AAM3977:=myrec;
		END;
	FUNCTION pAAssemblypattern4004_AA4004:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'imul edx' );
		pAAssemblypattern4004_AA4004:=list;
		END;
	FUNCTION pAAssemblesto4003_AA4003:pprintlist;
	begin
		pAAssemblesto4003_AA4003:=pAAssemblypattern4004_AA4004;
		END;
	FUNCTION pASideeffects4006_AS4006:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4006_AS4006:=nil;
		 pASideeffects4006_AS4006:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4007_AUP4007:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4007_AUP4007:=nil;
		 pAUnconditionalPrecond4007_AUP4007:=myrec;
		END;
	FUNCTION fastIMUL_IMUL:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patacc_;
		params^[1]:=patdacc_;
		paramcount:=3;
		meaning:=pAAssignMeaning3977_AAM3977;
		matchedAssembler:=pAAssemblesto4003_AA4003;
		END;
		fastIMUL_IMUL:=myrec;
	END;
	FUNCTION pATypeid4010_AT4010:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ acc  ilcg.pattern@535bf2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4010_AT4010:=myrec;
		END;
	FUNCTION pATypeid4012_AT4012:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ modreg  ilcg.pattern@4b2819}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4012_AT4012:=myrec;
		END;
	FUNCTION pAPushDyadic4015_APD4015:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic4015_APD4015:=myrec;
		END;
	FUNCTION pAIdLoc4017_AIL4017:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc4017_AIL4017:=myrec;
		END;
	FUNCTION pALocValue4016_ALV4016:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4017_AIL4017;
		 pALocValue4016_ALV4016:=myrec;
		END;
	FUNCTION pADivideDyadic4019_ADD4019:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpdivide;
		 pADivideDyadic4019_ADD4019:=myrec;
		END;
	FUNCTION pASigned4025_AS4025:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned4025_AS4025:=myrec;
		END;
	FUNCTION pASignedTformat4024_AST4024:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned4025_AS4025;
		 pASignedTformat4024_AST4024:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4023_ATP4023:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype4023_ATP4023:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4022_APT4022:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType4022_APT4022:=myrec;
		END;
	FUNCTION pAIdLoc4029_AIL4029:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4029_AIL4029:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4028_AR4028:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4029_AIL4029;
		 pARefval4028_AR4028:=myrec;
		END;
	FUNCTION pADerefRhs4027_ADR4027:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4028_AR4028;
		 pADerefRhs4027_ADR4027:=myrec;
		END;
	FUNCTION pARhsValue4026_ARV4026:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4027_ADR4027;
		 pARhsValue4026_ARV4026:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs4021_ACR4021:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType4022_APT4022;
		myrec^.arg2:=pARhsValue4026_ARV4026;
		 pACastRhs4021_ACR4021:=myrec;
		END;
	FUNCTION pARhsValue4020_ARV4020:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4021_ACR4021;
		 pARhsValue4020_ARV4020:=myrec;
		END;
	FUNCTION pAIdLoc4033_AIL4033:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4033_AIL4033:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4032_AR4032:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4033_AIL4033;
		 pARefval4032_AR4032:=myrec;
		END;
	FUNCTION pADerefRhs4031_ADR4031:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4032_AR4032;
		 pADerefRhs4031_ADR4031:=myrec;
		END;
	FUNCTION pARhsValue4030_ARV4030:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4031_ADR4031;
		 pARhsValue4030_ARV4030:=myrec;
		END;
	FUNCTION pADyadicValue4018_ADV4018:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4020_ARV4020;
		myrec^.arg2:=pARhsValue4030_ARV4030;
		myrec^.fn:=pADivideDyadic4019_ADD4019;
		 pADyadicValue4018_ADV4018:=myrec;
		END;
	FUNCTION pADyadicValue4014_ADV4014:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue4016_ALV4016;
		myrec^.arg2:=pADyadicValue4018_ADV4018;
		myrec^.fn:=pAPushDyadic4015_APD4015;
		 pADyadicValue4014_ADV4014:=myrec;
		END;
	FUNCTION pAValueMeaning4013_AVM4013:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue4014_ADV4014;
		 pAValueMeaning4013_AVM4013:=myrec;
		END;
	FUNCTION pAAssemblypattern4035_AA4035:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'push edx\n cdq\n idiv   ' );
		pappendp(list,1);
		pappends(list,'\n xchg eax,DWORD[esp]\n xchg eax,edx' );
		pAAssemblypattern4035_AA4035:=list;
		END;
	FUNCTION pAAssemblesto4034_AA4034:pprintlist;
	begin
		pAAssemblesto4034_AA4034:=pAAssemblypattern4035_AA4035;
		END;
	FUNCTION pASideeffects4039_AS4039:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4039_AS4039:=nil;
		 pASideeffects4039_AS4039:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4040_AUP4040:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4040_AUP4040:=nil;
		 pAUnconditionalPrecond4040_AUP4040:=myrec;
		END;
	FUNCTION IDIV_IDIV:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patmodreg_;
		params^[0]:=patacc_;
		paramcount:=3;
		meaning:=pAValueMeaning4013_AVM4013;
		matchedAssembler:=pAAssemblesto4034_AA4034;
		END;
		IDIV_IDIV:=myrec;
	END;
	FUNCTION pATypeid4043_AT4043:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ acc  ilcg.pattern@535bf2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4043_AT4043:=myrec;
		END;
	FUNCTION pATypeid4045_AT4045:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ modreg  ilcg.pattern@4b2819}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4045_AT4045:=myrec;
		END;
	FUNCTION pAPushDyadic4048_APD4048:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic4048_APD4048:=myrec;
		END;
	FUNCTION pAIdLoc4050_AIL4050:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc4050_AIL4050:=myrec;
		END;
	FUNCTION pALocValue4049_ALV4049:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4050_AIL4050;
		 pALocValue4049_ALV4049:=myrec;
		END;
	FUNCTION pADivideDyadic4052_ADD4052:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpdivide;
		 pADivideDyadic4052_ADD4052:=myrec;
		END;
	FUNCTION pAUnsigned4058_AU4058:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32;
		 pAUnsigned4058_AU4058:=myrec;
		END;
	FUNCTION pAUnsignedTformat4057_AUT4057:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUnsigned4058_AU4058;
		 pAUnsignedTformat4057_AUT4057:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4056_ATP4056:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pATformatPredeclaredtype4056_ATP4056:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4055_APT4055:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pAPredeclaredtypeType4055_APT4055:=myrec;
		END;
	FUNCTION pAIdLoc4062_AIL4062:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4062_AIL4062:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4061_AR4061:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4062_AIL4062;
		 pARefval4061_AR4061:=myrec;
		END;
	FUNCTION pADerefRhs4060_ADR4060:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4061_AR4061;
		 pADerefRhs4060_ADR4060:=myrec;
		END;
	FUNCTION pARhsValue4059_ARV4059:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4060_ADR4060;
		 pARhsValue4059_ARV4059:=myrec;
		END;
		(*! try to cast to type: uint32*)
	FUNCTION pACastRhs4054_ACR4054:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType4055_APT4055;
		myrec^.arg2:=pARhsValue4059_ARV4059;
		 pACastRhs4054_ACR4054:=myrec;
		END;
	FUNCTION pARhsValue4053_ARV4053:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4054_ACR4054;
		 pARhsValue4053_ARV4053:=myrec;
		END;
	FUNCTION pAIdLoc4066_AIL4066:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4066_AIL4066:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4065_AR4065:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4066_AIL4066;
		 pARefval4065_AR4065:=myrec;
		END;
	FUNCTION pADerefRhs4064_ADR4064:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4065_AR4065;
		 pADerefRhs4064_ADR4064:=myrec;
		END;
	FUNCTION pARhsValue4063_ARV4063:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4064_ADR4064;
		 pARhsValue4063_ARV4063:=myrec;
		END;
	FUNCTION pADyadicValue4051_ADV4051:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4053_ARV4053;
		myrec^.arg2:=pARhsValue4063_ARV4063;
		myrec^.fn:=pADivideDyadic4052_ADD4052;
		 pADyadicValue4051_ADV4051:=myrec;
		END;
	FUNCTION pADyadicValue4047_ADV4047:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue4049_ALV4049;
		myrec^.arg2:=pADyadicValue4051_ADV4051;
		myrec^.fn:=pAPushDyadic4048_APD4048;
		 pADyadicValue4047_ADV4047:=myrec;
		END;
	FUNCTION pAValueMeaning4046_AVM4046:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue4047_ADV4047;
		 pAValueMeaning4046_AVM4046:=myrec;
		END;
	FUNCTION pAAssemblypattern4068_AA4068:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'push edx\n xor edx,edx\n div   ' );
		pappendp(list,1);
		pappends(list,'\n xchg eax,DWORD[esp]\n xchg eax,edx' );
		pAAssemblypattern4068_AA4068:=list;
		END;
	FUNCTION pAAssemblesto4067_AA4067:pprintlist;
	begin
		pAAssemblesto4067_AA4067:=pAAssemblypattern4068_AA4068;
		END;
	FUNCTION pASideeffects4072_AS4072:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4072_AS4072:=nil;
		 pASideeffects4072_AS4072:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4073_AUP4073:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4073_AUP4073:=nil;
		 pAUnconditionalPrecond4073_AUP4073:=myrec;
		END;
	FUNCTION UDIV_UDIV:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patmodreg_;
		params^[0]:=patacc_;
		paramcount:=3;
		meaning:=pAValueMeaning4046_AVM4046;
		matchedAssembler:=pAAssemblesto4067_AA4067;
		END;
		UDIV_UDIV:=myrec;
	END;
	FUNCTION pATypeid4076_AT4076:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ pushreg  ilcg.pattern@11e321}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4076_AT4076:=myrec;
		END;
	FUNCTION pATypeid4078_AT4078:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ addrmode  ilcg.pattern@7a4076}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4078_AT4078:=myrec;
		END;
	FUNCTION pATypeid4080_AT4080:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ signed  ilcg.pattern@c6406}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4080_AT4080:=myrec;
		END;
	FUNCTION pASigned4089_AS4089:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned4089_AS4089:=myrec;
		END;
	FUNCTION pASignedTformat4088_AST4088:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned4089_AS4089;
		 pASignedTformat4088_AST4088:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4087_ATP4087:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype4087_ATP4087:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4086_APT4086:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType4086_APT4086:=myrec;
		END;
	FUNCTION pAReference4085_AR4085:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType4086_APT4086;
		 pAReference4085_AR4085:=myrec;
		END;
	FUNCTION pAReftypeType4084_ART4084:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference4085_AR4085;
		 pAReftypeType4084_ART4084:=myrec;
		END;
	FUNCTION pAIdLoc4090_AIL4090:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4090_AIL4090:=myrec;
		END;
	FUNCTION pARefcastRefval4083_ARR4083:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType4084_ART4084;
		myrec^.arg2:=pAIdLoc4090_AIL4090;
		 pARefcastRefval4083_ARR4083:=myrec;
		END;
	FUNCTION pATimesDyadic4092_ATD4092:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcptimes;
		 pATimesDyadic4092_ATD4092:=myrec;
		END;
	FUNCTION pAIdLoc4096_AIL4096:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4096_AIL4096:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4095_AR4095:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4096_AIL4096;
		 pARefval4095_AR4095:=myrec;
		END;
	FUNCTION pADerefRhs4094_ADR4094:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4095_AR4095;
		 pADerefRhs4094_ADR4094:=myrec;
		END;
	FUNCTION pARhsValue4093_ARV4093:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4094_ADR4094;
		 pARhsValue4093_ARV4093:=myrec;
		END;
	FUNCTION pAConstRhs4098_ACR4098:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(2);;
		 pAConstRhs4098_ACR4098:=myrec;
		END;
	FUNCTION pARhsValue4097_ARV4097:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs4098_ACR4098;
		 pARhsValue4097_ARV4097:=myrec;
		END;
	FUNCTION pADyadicValue4091_ADV4091:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4093_ARV4093;
		myrec^.arg2:=pARhsValue4097_ARV4097;
		myrec^.fn:=pATimesDyadic4092_ATD4092;
		 pADyadicValue4091_ADV4091:=myrec;
		END;
	FUNCTION pAAssign4082_AA4082:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue4091_ADV4091;
		myrec^.dest:=pARefcastRefval4083_ARR4083;
		 pAAssign4082_AA4082:=myrec;
		END;
	FUNCTION pAAssignMeaning4081_AAM4081:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4082_AA4082;
		 pAAssignMeaning4081_AAM4081:=myrec;
		END;
	FUNCTION pAAssemblypattern4100_AA4100:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'imul ' );
		pappendp(list,0);
		pappends(list,',DWORD ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,2);
		pAAssemblypattern4100_AA4100:=list;
		END;
	FUNCTION pAAssemblesto4099_AA4099:pprintlist;
	begin
		pAAssemblesto4099_AA4099:=pAAssemblypattern4100_AA4100;
		END;
	FUNCTION pASideeffects4107_AS4107:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4107_AS4107:=nil;
		 pASideeffects4107_AS4107:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4108_AUP4108:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4108_AUP4108:=nil;
		 pAUnconditionalPrecond4108_AUP4108:=myrec;
		END;
	FUNCTION IMULLIT_IMULLIT:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patpushreg_;
		params^[2]:=patsigned_;
		params^[1]:=pataddrmode_;
		paramcount:=4;
		meaning:=pAAssignMeaning4081_AAM4081;
		matchedAssembler:=pAAssemblesto4099_AA4099;
		END;
		IMULLIT_IMULLIT:=myrec;
	END;
	FUNCTION pATypeid4111_AT4111:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ acc  ilcg.pattern@535bf2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4111_AT4111:=myrec;
		END;
	FUNCTION pATypeid4113_AT4113:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ modreg  ilcg.pattern@4b2819}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4113_AT4113:=myrec;
		END;
	FUNCTION pAPushDyadic4116_APD4116:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic4116_APD4116:=myrec;
		END;
	FUNCTION pAIdLoc4118_AIL4118:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc4118_AIL4118:=myrec;
		END;
	FUNCTION pALocValue4117_ALV4117:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4118_AIL4118;
		 pALocValue4117_ALV4117:=myrec;
		END;
	FUNCTION pARemainderDyadic4120_ARD4120:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpremainder;
		 pARemainderDyadic4120_ARD4120:=myrec;
		END;
	FUNCTION pASigned4126_AS4126:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned4126_AS4126:=myrec;
		END;
	FUNCTION pASignedTformat4125_AST4125:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned4126_AS4126;
		 pASignedTformat4125_AST4125:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4124_ATP4124:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype4124_ATP4124:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4123_APT4123:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType4123_APT4123:=myrec;
		END;
	FUNCTION pAIdLoc4130_AIL4130:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4130_AIL4130:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4129_AR4129:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4130_AIL4130;
		 pARefval4129_AR4129:=myrec;
		END;
	FUNCTION pADerefRhs4128_ADR4128:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4129_AR4129;
		 pADerefRhs4128_ADR4128:=myrec;
		END;
	FUNCTION pARhsValue4127_ARV4127:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4128_ADR4128;
		 pARhsValue4127_ARV4127:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs4122_ACR4122:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType4123_APT4123;
		myrec^.arg2:=pARhsValue4127_ARV4127;
		 pACastRhs4122_ACR4122:=myrec;
		END;
	FUNCTION pARhsValue4121_ARV4121:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4122_ACR4122;
		 pARhsValue4121_ARV4121:=myrec;
		END;
	FUNCTION pAIdLoc4134_AIL4134:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4134_AIL4134:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4133_AR4133:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4134_AIL4134;
		 pARefval4133_AR4133:=myrec;
		END;
	FUNCTION pADerefRhs4132_ADR4132:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4133_AR4133;
		 pADerefRhs4132_ADR4132:=myrec;
		END;
	FUNCTION pARhsValue4131_ARV4131:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4132_ADR4132;
		 pARhsValue4131_ARV4131:=myrec;
		END;
	FUNCTION pADyadicValue4119_ADV4119:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4121_ARV4121;
		myrec^.arg2:=pARhsValue4131_ARV4131;
		myrec^.fn:=pARemainderDyadic4120_ARD4120;
		 pADyadicValue4119_ADV4119:=myrec;
		END;
	FUNCTION pADyadicValue4115_ADV4115:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue4117_ALV4117;
		myrec^.arg2:=pADyadicValue4119_ADV4119;
		myrec^.fn:=pAPushDyadic4116_APD4116;
		 pADyadicValue4115_ADV4115:=myrec;
		END;
	FUNCTION pAValueMeaning4114_AVM4114:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue4115_ADV4115;
		 pAValueMeaning4114_AVM4114:=myrec;
		END;
	FUNCTION pAAssemblypattern4136_AA4136:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'push edx\n cdq\n idiv   ' );
		pappendp(list,1);
		pappends(list,'\n xchg edx,DWORD[esp]' );
		pAAssemblypattern4136_AA4136:=list;
		END;
	FUNCTION pAAssemblesto4135_AA4135:pprintlist;
	begin
		pAAssemblesto4135_AA4135:=pAAssemblypattern4136_AA4136;
		END;
	FUNCTION pASideeffects4140_AS4140:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4140_AS4140:=nil;
		 pASideeffects4140_AS4140:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4141_AUP4141:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4141_AUP4141:=nil;
		 pAUnconditionalPrecond4141_AUP4141:=myrec;
		END;
	FUNCTION IMOD_IMOD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patmodreg_;
		params^[0]:=patacc_;
		paramcount:=3;
		meaning:=pAValueMeaning4114_AVM4114;
		matchedAssembler:=pAAssemblesto4135_AA4135;
		END;
		IMOD_IMOD:=myrec;
	END;
	FUNCTION pATypeid4144_AT4144:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ acc  ilcg.pattern@535bf2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4144_AT4144:=myrec;
		END;
	FUNCTION pATypeid4146_AT4146:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ modreg  ilcg.pattern@4b2819}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4146_AT4146:=myrec;
		END;
	FUNCTION pAPushDyadic4149_APD4149:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic4149_APD4149:=myrec;
		END;
	FUNCTION pAIdLoc4151_AIL4151:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc4151_AIL4151:=myrec;
		END;
	FUNCTION pALocValue4150_ALV4150:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4151_AIL4151;
		 pALocValue4150_ALV4150:=myrec;
		END;
	FUNCTION pARemainderDyadic4153_ARD4153:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpremainder;
		 pARemainderDyadic4153_ARD4153:=myrec;
		END;
	FUNCTION pAUnsigned4159_AU4159:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32;
		 pAUnsigned4159_AU4159:=myrec;
		END;
	FUNCTION pAUnsignedTformat4158_AUT4158:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUnsigned4159_AU4159;
		 pAUnsignedTformat4158_AUT4158:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4157_ATP4157:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pATformatPredeclaredtype4157_ATP4157:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4156_APT4156:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pAPredeclaredtypeType4156_APT4156:=myrec;
		END;
	FUNCTION pAIdLoc4163_AIL4163:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4163_AIL4163:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4162_AR4162:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4163_AIL4163;
		 pARefval4162_AR4162:=myrec;
		END;
	FUNCTION pADerefRhs4161_ADR4161:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4162_AR4162;
		 pADerefRhs4161_ADR4161:=myrec;
		END;
	FUNCTION pARhsValue4160_ARV4160:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4161_ADR4161;
		 pARhsValue4160_ARV4160:=myrec;
		END;
		(*! try to cast to type: uint32*)
	FUNCTION pACastRhs4155_ACR4155:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType4156_APT4156;
		myrec^.arg2:=pARhsValue4160_ARV4160;
		 pACastRhs4155_ACR4155:=myrec;
		END;
	FUNCTION pARhsValue4154_ARV4154:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4155_ACR4155;
		 pARhsValue4154_ARV4154:=myrec;
		END;
	FUNCTION pAIdLoc4167_AIL4167:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4167_AIL4167:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4166_AR4166:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4167_AIL4167;
		 pARefval4166_AR4166:=myrec;
		END;
	FUNCTION pADerefRhs4165_ADR4165:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4166_AR4166;
		 pADerefRhs4165_ADR4165:=myrec;
		END;
	FUNCTION pARhsValue4164_ARV4164:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4165_ADR4165;
		 pARhsValue4164_ARV4164:=myrec;
		END;
	FUNCTION pADyadicValue4152_ADV4152:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4154_ARV4154;
		myrec^.arg2:=pARhsValue4164_ARV4164;
		myrec^.fn:=pARemainderDyadic4153_ARD4153;
		 pADyadicValue4152_ADV4152:=myrec;
		END;
	FUNCTION pADyadicValue4148_ADV4148:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue4150_ALV4150;
		myrec^.arg2:=pADyadicValue4152_ADV4152;
		myrec^.fn:=pAPushDyadic4149_APD4149;
		 pADyadicValue4148_ADV4148:=myrec;
		END;
	FUNCTION pAValueMeaning4147_AVM4147:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue4148_ADV4148;
		 pAValueMeaning4147_AVM4147:=myrec;
		END;
	FUNCTION pAAssemblypattern4169_AA4169:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'push edx\n xor edx,edx\n div   ' );
		pappendp(list,1);
		pappends(list,'\n xchg edx,DWORD[esp]' );
		pAAssemblypattern4169_AA4169:=list;
		END;
	FUNCTION pAAssemblesto4168_AA4168:pprintlist;
	begin
		pAAssemblesto4168_AA4168:=pAAssemblypattern4169_AA4169;
		END;
	FUNCTION pASideeffects4173_AS4173:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4173_AS4173:=nil;
		 pASideeffects4173_AS4173:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4174_AUP4174:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4174_AUP4174:=nil;
		 pAUnconditionalPrecond4174_AUP4174:=myrec;
		END;
	FUNCTION UMOD_UMOD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patmodreg_;
		params^[0]:=patacc_;
		paramcount:=3;
		meaning:=pAValueMeaning4147_AVM4147;
		matchedAssembler:=pAAssemblesto4168_AA4168;
		END;
		UMOD_UMOD:=myrec;
	END;
	FUNCTION pATypeid4177_AT4177:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baccreg  ilcg.pattern@d637d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4177_AT4177:=myrec;
		END;
	FUNCTION pATypeid4179_AT4179:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bnonacreg  ilcg.pattern@747f59}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4179_AT4179:=myrec;
		END;
	FUNCTION pAIdLoc4183_AIL4183:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4183_AIL4183:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4182_AR4182:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4183_AIL4183;
		 pARefval4182_AR4182:=myrec;
		END;
	FUNCTION pARemainderDyadic4185_ARD4185:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpremainder;
		 pARemainderDyadic4185_ARD4185:=myrec;
		END;
	FUNCTION pAInt8Signed4191_AI8S4191:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed4191_AI8S4191:=myrec;
		END;
	FUNCTION pASignedTformat4190_AST4190:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed4191_AI8S4191;
		 pASignedTformat4190_AST4190:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4189_ATP4189:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype4189_ATP4189:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4188_APT4188:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType4188_APT4188:=myrec;
		END;
	FUNCTION pAIdLoc4195_AIL4195:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4195_AIL4195:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4194_AR4194:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4195_AIL4195;
		 pARefval4194_AR4194:=myrec;
		END;
	FUNCTION pADerefRhs4193_ADR4193:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4194_AR4194;
		 pADerefRhs4193_ADR4193:=myrec;
		END;
	FUNCTION pARhsValue4192_ARV4192:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4193_ADR4193;
		 pARhsValue4192_ARV4192:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs4187_ACR4187:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType4188_APT4188;
		myrec^.arg2:=pARhsValue4192_ARV4192;
		 pACastRhs4187_ACR4187:=myrec;
		END;
	FUNCTION pARhsValue4186_ARV4186:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4187_ACR4187;
		 pARhsValue4186_ARV4186:=myrec;
		END;
	FUNCTION pAInt8Signed4201_AI8S4201:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed4201_AI8S4201:=myrec;
		END;
	FUNCTION pASignedTformat4200_AST4200:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed4201_AI8S4201;
		 pASignedTformat4200_AST4200:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4199_ATP4199:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype4199_ATP4199:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4198_APT4198:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType4198_APT4198:=myrec;
		END;
	FUNCTION pAIdLoc4205_AIL4205:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4205_AIL4205:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4204_AR4204:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4205_AIL4205;
		 pARefval4204_AR4204:=myrec;
		END;
	FUNCTION pADerefRhs4203_ADR4203:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4204_AR4204;
		 pADerefRhs4203_ADR4203:=myrec;
		END;
	FUNCTION pARhsValue4202_ARV4202:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4203_ADR4203;
		 pARhsValue4202_ARV4202:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs4197_ACR4197:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType4198_APT4198;
		myrec^.arg2:=pARhsValue4202_ARV4202;
		 pACastRhs4197_ACR4197:=myrec;
		END;
	FUNCTION pARhsValue4196_ARV4196:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4197_ACR4197;
		 pARhsValue4196_ARV4196:=myrec;
		END;
	FUNCTION pADyadicValue4184_ADV4184:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4186_ARV4186;
		myrec^.arg2:=pARhsValue4196_ARV4196;
		myrec^.fn:=pARemainderDyadic4185_ARD4185;
		 pADyadicValue4184_ADV4184:=myrec;
		END;
	FUNCTION pAAssign4181_AA4181:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue4184_ADV4184;
		myrec^.dest:=pARefval4182_AR4182;
		 pAAssign4181_AA4181:=myrec;
		END;
	FUNCTION pAAssignMeaning4180_AAM4180:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4181_AA4181;
		 pAAssignMeaning4180_AAM4180:=myrec;
		END;
	FUNCTION pAAssemblypattern4207_AA4207:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,' movsx ax,' );
		pappendp(list,0);
		pappends(list,'\n idiv ' );
		pappendp(list,1);
		pappends(list,'\n mov ' );
		pappendp(list,1);
		pappends(list,',ah' );
		pAAssemblypattern4207_AA4207:=list;
		END;
	FUNCTION pAAssemblesto4206_AA4206:pprintlist;
	begin
		pAAssemblesto4206_AA4206:=pAAssemblypattern4207_AA4207;
		END;
	FUNCTION pASideeffects4215_AS4215:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4215_AS4215:=nil;
		 pASideeffects4215_AS4215:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4216_AUP4216:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4216_AUP4216:=nil;
		 pAUnconditionalPrecond4216_AUP4216:=myrec;
		END;
	FUNCTION BIMOD_BIMOD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbnonacreg_;
		params^[0]:=patbaccreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning4180_AAM4180;
		matchedAssembler:=pAAssemblesto4206_AA4206;
		END;
		BIMOD_BIMOD:=myrec;
	END;
	FUNCTION pATypeid4219_AT4219:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4219_AT4219:=myrec;
		END;
	FUNCTION pAIdLoc4223_AIL4223:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4223_AIL4223:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4222_AR4222:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4223_AIL4223;
		 pARefval4222_AR4222:=myrec;
		END;
	FUNCTION pARemainderDyadic4225_ARD4225:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpremainder;
		 pARemainderDyadic4225_ARD4225:=myrec;
		END;
	FUNCTION pAIdLoc4229_AIL4229:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4229_AIL4229:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4228_AR4228:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4229_AIL4229;
		 pARefval4228_AR4228:=myrec;
		END;
	FUNCTION pADerefRhs4227_ADR4227:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4228_AR4228;
		 pADerefRhs4227_ADR4227:=myrec;
		END;
	FUNCTION pARhsValue4226_ARV4226:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4227_ADR4227;
		 pARhsValue4226_ARV4226:=myrec;
		END;
	FUNCTION pAOptionalsign4233_AO4233:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign4233_AO4233:=nil;
		 pAOptionalsign4233_AO4233:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber4232_AIN4232:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber4232_AIN4232:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs4231_ANR4231:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber4232_AIN4232;
		 pANumberRhs4231_ANR4231:=myrec;
		END;
	FUNCTION pARhsValue4230_ARV4230:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs4231_ANR4231;
		 pARhsValue4230_ARV4230:=myrec;
		END;
	FUNCTION pADyadicValue4224_ADV4224:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4226_ARV4226;
		myrec^.arg2:=pARhsValue4230_ARV4230;
		myrec^.fn:=pARemainderDyadic4225_ARD4225;
		 pADyadicValue4224_ADV4224:=myrec;
		END;
	FUNCTION pAAssign4221_AA4221:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue4224_ADV4224;
		myrec^.dest:=pARefval4222_AR4222;
		 pAAssign4221_AA4221:=myrec;
		END;
	FUNCTION pAAssignMeaning4220_AAM4220:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4221_AA4221;
		 pAAssignMeaning4220_AAM4220:=myrec;
		END;
	FUNCTION pAAssemblypattern4235_AA4235:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'and ' );
		pappendp(list,0);
		pappends(list,',1' );
		pAAssemblypattern4235_AA4235:=list;
		END;
	FUNCTION pAAssemblesto4234_AA4234:pprintlist;
	begin
		pAAssemblesto4234_AA4234:=pAAssemblypattern4235_AA4235;
		END;
	FUNCTION pASideeffects4239_AS4239:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4239_AS4239:=nil;
		 pASideeffects4239_AS4239:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4240_AUP4240:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4240_AUP4240:=nil;
		 pAUnconditionalPrecond4240_AUP4240:=myrec;
		END;
	FUNCTION MOD2_MOD2:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		paramcount:=2;
		meaning:=pAAssignMeaning4220_AAM4220;
		matchedAssembler:=pAAssemblesto4234_AA4234;
		END;
		MOD2_MOD2:=myrec;
	END;
	FUNCTION pATypeid4243_AT4243:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4243_AT4243:=myrec;
		END;
	FUNCTION pAIdLoc4247_AIL4247:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4247_AIL4247:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4246_AR4246:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4247_AIL4247;
		 pARefval4246_AR4246:=myrec;
		END;
	FUNCTION pARemainderDyadic4249_ARD4249:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpremainder;
		 pARemainderDyadic4249_ARD4249:=myrec;
		END;
	FUNCTION pAIdLoc4253_AIL4253:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4253_AIL4253:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4252_AR4252:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4253_AIL4253;
		 pARefval4252_AR4252:=myrec;
		END;
	FUNCTION pADerefRhs4251_ADR4251:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4252_AR4252;
		 pADerefRhs4251_ADR4251:=myrec;
		END;
	FUNCTION pARhsValue4250_ARV4250:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4251_ADR4251;
		 pARhsValue4250_ARV4250:=myrec;
		END;
	FUNCTION pAOptionalsign4257_AO4257:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign4257_AO4257:=nil;
		 pAOptionalsign4257_AO4257:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber4256_AIN4256:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber4256_AIN4256:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs4255_ANR4255:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber4256_AIN4256;
		 pANumberRhs4255_ANR4255:=myrec;
		END;
	FUNCTION pARhsValue4254_ARV4254:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs4255_ANR4255;
		 pARhsValue4254_ARV4254:=myrec;
		END;
	FUNCTION pADyadicValue4248_ADV4248:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4250_ARV4250;
		myrec^.arg2:=pARhsValue4254_ARV4254;
		myrec^.fn:=pARemainderDyadic4249_ARD4249;
		 pADyadicValue4248_ADV4248:=myrec;
		END;
	FUNCTION pAAssign4245_AA4245:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue4248_ADV4248;
		myrec^.dest:=pARefval4246_AR4246;
		 pAAssign4245_AA4245:=myrec;
		END;
	FUNCTION pAAssignMeaning4244_AAM4244:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4245_AA4245;
		 pAAssignMeaning4244_AAM4244:=myrec;
		END;
	FUNCTION pAAssemblypattern4259_AA4259:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'and ' );
		pappendp(list,0);
		pappends(list,',3' );
		pAAssemblypattern4259_AA4259:=list;
		END;
	FUNCTION pAAssemblesto4258_AA4258:pprintlist;
	begin
		pAAssemblesto4258_AA4258:=pAAssemblypattern4259_AA4259;
		END;
	FUNCTION pASideeffects4263_AS4263:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4263_AS4263:=nil;
		 pASideeffects4263_AS4263:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4264_AUP4264:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4264_AUP4264:=nil;
		 pAUnconditionalPrecond4264_AUP4264:=myrec;
		END;
	FUNCTION MOD4_MOD4:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		paramcount:=2;
		meaning:=pAAssignMeaning4244_AAM4244;
		matchedAssembler:=pAAssemblesto4258_AA4258;
		END;
		MOD4_MOD4:=myrec;
	END;
	FUNCTION pATypeid4267_AT4267:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4267_AT4267:=myrec;
		END;
	FUNCTION pAIdLoc4271_AIL4271:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4271_AIL4271:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4270_AR4270:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4271_AIL4271;
		 pARefval4270_AR4270:=myrec;
		END;
	FUNCTION pARemainderDyadic4273_ARD4273:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpremainder;
		 pARemainderDyadic4273_ARD4273:=myrec;
		END;
	FUNCTION pAIdLoc4277_AIL4277:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4277_AIL4277:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4276_AR4276:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4277_AIL4277;
		 pARefval4276_AR4276:=myrec;
		END;
	FUNCTION pADerefRhs4275_ADR4275:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4276_AR4276;
		 pADerefRhs4275_ADR4275:=myrec;
		END;
	FUNCTION pARhsValue4274_ARV4274:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4275_ADR4275;
		 pARhsValue4274_ARV4274:=myrec;
		END;
	FUNCTION pAOptionalsign4281_AO4281:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign4281_AO4281:=nil;
		 pAOptionalsign4281_AO4281:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber4280_AIN4280:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber4280_AIN4280:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs4279_ANR4279:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber4280_AIN4280;
		 pANumberRhs4279_ANR4279:=myrec;
		END;
	FUNCTION pARhsValue4278_ARV4278:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs4279_ANR4279;
		 pARhsValue4278_ARV4278:=myrec;
		END;
	FUNCTION pADyadicValue4272_ADV4272:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4274_ARV4274;
		myrec^.arg2:=pARhsValue4278_ARV4278;
		myrec^.fn:=pARemainderDyadic4273_ARD4273;
		 pADyadicValue4272_ADV4272:=myrec;
		END;
	FUNCTION pAAssign4269_AA4269:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue4272_ADV4272;
		myrec^.dest:=pARefval4270_AR4270;
		 pAAssign4269_AA4269:=myrec;
		END;
	FUNCTION pAAssignMeaning4268_AAM4268:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4269_AA4269;
		 pAAssignMeaning4268_AAM4268:=myrec;
		END;
	FUNCTION pAAssemblypattern4283_AA4283:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'and ' );
		pappendp(list,0);
		pappends(list,',7' );
		pAAssemblypattern4283_AA4283:=list;
		END;
	FUNCTION pAAssemblesto4282_AA4282:pprintlist;
	begin
		pAAssemblesto4282_AA4282:=pAAssemblypattern4283_AA4283;
		END;
	FUNCTION pASideeffects4287_AS4287:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4287_AS4287:=nil;
		 pASideeffects4287_AS4287:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4288_AUP4288:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4288_AUP4288:=nil;
		 pAUnconditionalPrecond4288_AUP4288:=myrec;
		END;
	FUNCTION MOD8_MOD8:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		paramcount:=2;
		meaning:=pAAssignMeaning4268_AAM4268;
		matchedAssembler:=pAAssemblesto4282_AA4282;
		END;
		MOD8_MOD8:=myrec;
	END;
	FUNCTION pATypeid4291_AT4291:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ureg  ilcg.pattern@56182f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4291_AT4291:=myrec;
		END;
	FUNCTION pAIdLoc4295_AIL4295:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4295_AIL4295:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4294_AR4294:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4295_AIL4295;
		 pARefval4294_AR4294:=myrec;
		END;
	FUNCTION pADivideDyadic4297_ADD4297:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpdivide;
		 pADivideDyadic4297_ADD4297:=myrec;
		END;
	FUNCTION pAUnsigned4303_AU4303:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32;
		 pAUnsigned4303_AU4303:=myrec;
		END;
	FUNCTION pAUnsignedTformat4302_AUT4302:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUnsigned4303_AU4303;
		 pAUnsignedTformat4302_AUT4302:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4301_ATP4301:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pATformatPredeclaredtype4301_ATP4301:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4300_APT4300:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint32 ;
		 pAPredeclaredtypeType4300_APT4300:=myrec;
		END;
	FUNCTION pAIdLoc4307_AIL4307:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4307_AIL4307:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4306_AR4306:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4307_AIL4307;
		 pARefval4306_AR4306:=myrec;
		END;
	FUNCTION pADerefRhs4305_ADR4305:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4306_AR4306;
		 pADerefRhs4305_ADR4305:=myrec;
		END;
	FUNCTION pARhsValue4304_ARV4304:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4305_ADR4305;
		 pARhsValue4304_ARV4304:=myrec;
		END;
		(*! try to cast to type: uint32*)
	FUNCTION pACastRhs4299_ACR4299:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType4300_APT4300;
		myrec^.arg2:=pARhsValue4304_ARV4304;
		 pACastRhs4299_ACR4299:=myrec;
		END;
	FUNCTION pARhsValue4298_ARV4298:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4299_ACR4299;
		 pARhsValue4298_ARV4298:=myrec;
		END;
	FUNCTION pAOptionalsign4311_AO4311:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign4311_AO4311:=nil;
		 pAOptionalsign4311_AO4311:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber4310_AIN4310:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber4310_AIN4310:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs4309_ANR4309:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber4310_AIN4310;
		 pANumberRhs4309_ANR4309:=myrec;
		END;
	FUNCTION pARhsValue4308_ARV4308:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs4309_ANR4309;
		 pARhsValue4308_ARV4308:=myrec;
		END;
	FUNCTION pADyadicValue4296_ADV4296:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4298_ARV4298;
		myrec^.arg2:=pARhsValue4308_ARV4308;
		myrec^.fn:=pADivideDyadic4297_ADD4297;
		 pADyadicValue4296_ADV4296:=myrec;
		END;
	FUNCTION pAAssign4293_AA4293:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue4296_ADV4296;
		myrec^.dest:=pARefval4294_AR4294;
		 pAAssign4293_AA4293:=myrec;
		END;
	FUNCTION pAAssignMeaning4292_AAM4292:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4293_AA4293;
		 pAAssignMeaning4292_AAM4292:=myrec;
		END;
	FUNCTION pAAssemblypattern4313_AA4313:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'shr ' );
		pappendp(list,0);
		pappends(list,',3' );
		pAAssemblypattern4313_AA4313:=list;
		END;
	FUNCTION pAAssemblesto4312_AA4312:pprintlist;
	begin
		pAAssemblesto4312_AA4312:=pAAssemblypattern4313_AA4313;
		END;
	FUNCTION pASideeffects4317_AS4317:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4317_AS4317:=nil;
		 pASideeffects4317_AS4317:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4318_AUP4318:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4318_AUP4318:=nil;
		 pAUnconditionalPrecond4318_AUP4318:=myrec;
		END;
	FUNCTION DIV8_DIV8:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patureg_;
		paramcount:=2;
		meaning:=pAAssignMeaning4292_AAM4292;
		matchedAssembler:=pAAssemblesto4312_AA4312;
		END;
		DIV8_DIV8:=myrec;
	END;
	FUNCTION pATypeid4321_AT4321:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4321_AT4321:=myrec;
		END;
	FUNCTION pAIdLoc4325_AIL4325:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4325_AIL4325:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4324_AR4324:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4325_AIL4325;
		 pARefval4324_AR4324:=myrec;
		END;
	FUNCTION pARemainderDyadic4327_ARD4327:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpremainder;
		 pARemainderDyadic4327_ARD4327:=myrec;
		END;
	FUNCTION pAIdLoc4331_AIL4331:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4331_AIL4331:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4330_AR4330:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4331_AIL4331;
		 pARefval4330_AR4330:=myrec;
		END;
	FUNCTION pADerefRhs4329_ADR4329:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4330_AR4330;
		 pADerefRhs4329_ADR4329:=myrec;
		END;
	FUNCTION pARhsValue4328_ARV4328:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4329_ADR4329;
		 pARhsValue4328_ARV4328:=myrec;
		END;
	FUNCTION pAOptionalsign4335_AO4335:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign4335_AO4335:=nil;
		 pAOptionalsign4335_AO4335:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber4334_AIN4334:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=16 ;
		 pAIntegerNumber4334_AIN4334:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs4333_ANR4333:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber4334_AIN4334;
		 pANumberRhs4333_ANR4333:=myrec;
		END;
	FUNCTION pARhsValue4332_ARV4332:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs4333_ANR4333;
		 pARhsValue4332_ARV4332:=myrec;
		END;
	FUNCTION pADyadicValue4326_ADV4326:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4328_ARV4328;
		myrec^.arg2:=pARhsValue4332_ARV4332;
		myrec^.fn:=pARemainderDyadic4327_ARD4327;
		 pADyadicValue4326_ADV4326:=myrec;
		END;
	FUNCTION pAAssign4323_AA4323:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue4326_ADV4326;
		myrec^.dest:=pARefval4324_AR4324;
		 pAAssign4323_AA4323:=myrec;
		END;
	FUNCTION pAAssignMeaning4322_AAM4322:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4323_AA4323;
		 pAAssignMeaning4322_AAM4322:=myrec;
		END;
	FUNCTION pAAssemblypattern4337_AA4337:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'and ' );
		pappendp(list,0);
		pappends(list,',15' );
		pAAssemblypattern4337_AA4337:=list;
		END;
	FUNCTION pAAssemblesto4336_AA4336:pprintlist;
	begin
		pAAssemblesto4336_AA4336:=pAAssemblypattern4337_AA4337;
		END;
	FUNCTION pASideeffects4341_AS4341:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4341_AS4341:=nil;
		 pASideeffects4341_AS4341:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4342_AUP4342:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4342_AUP4342:=nil;
		 pAUnconditionalPrecond4342_AUP4342:=myrec;
		END;
	FUNCTION MOD16_MOD16:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		paramcount:=2;
		meaning:=pAAssignMeaning4322_AAM4322;
		matchedAssembler:=pAAssemblesto4336_AA4336;
		END;
		MOD16_MOD16:=myrec;
	END;
	FUNCTION pAIdLoc4348_AIL4348:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4348_AIL4348:=myrec;
		END;
	FUNCTION pALocValue4347_ALV4347:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4348_AIL4348;
		 pALocValue4347_ALV4347:=myrec;
		END;
	FUNCTION pAValueMeaning4346_AVM4346:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pALocValue4347_ALV4347;
		 pAValueMeaning4346_AVM4346:=myrec;
		END;
	FUNCTION pAAssemblypattern4350_AA4350:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pappends(list,':' );
		pAAssemblypattern4350_AA4350:=list;
		END;
	FUNCTION pAAssemblesto4349_AA4349:pprintlist;
	begin
		pAAssemblesto4349_AA4349:=pAAssemblypattern4350_AA4350;
		END;
	FUNCTION pASideeffects4353_AS4353:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4353_AS4353:=nil;
		 pASideeffects4353_AS4353:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4354_AUP4354:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4354_AUP4354:=nil;
		 pAUnconditionalPrecond4354_AUP4354:=myrec;
		END;
	FUNCTION PLANT_PLANT:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patlabel;
		paramcount:=2;
		meaning:=pAValueMeaning4346_AVM4346;
		matchedAssembler:=pAAssemblesto4349_AA4349;
		END;
		PLANT_PLANT:=myrec;
	END;
	FUNCTION pATypeid4357_AT4357:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ double  ilcg.pattern@545646}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4357_AT4357:=myrec;
		END;
	FUNCTION pATypeid4364_AT4364:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@7fd553}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid4364_AT4364:=myrec;
		END;
	FUNCTION pATypeidType4363_ATT4363:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4364_AT4364;
		 pATypeidType4363_ATT4363:=myrec;
		END;
	FUNCTION pAIdLoc4366_AIL4366:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4366_AIL4366:=myrec;
		END;
	FUNCTION pALocValue4365_ALV4365:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4366_AIL4366;
		 pALocValue4365_ALV4365:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs4362_ACR4362:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4363_ATT4363;
		myrec^.arg2:=pALocValue4365_ALV4365;
		 pACastRhs4362_ACR4362:=myrec;
		END;
	FUNCTION pARhsValue4361_ARV4361:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4362_ACR4362;
		 pARhsValue4361_ARV4361:=myrec;
		END;
	FUNCTION pALocMeaning4360_ALM4360:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=location;
		myrec^.locvalue:=pARhsValue4361_ARV4361;
		 pALocMeaning4360_ALM4360:=myrec;
		END;
	FUNCTION pAAssemblypattern4368_AA4368:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'dq ' );
		pappendp(list,0);
		pAAssemblypattern4368_AA4368:=list;
		END;
	FUNCTION pAAssemblesto4367_AA4367:pprintlist;
	begin
		pAAssemblesto4367_AA4367:=pAAssemblypattern4368_AA4368;
		END;
	FUNCTION pASideeffects4371_AS4371:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4371_AS4371:=nil;
		 pASideeffects4371_AS4371:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4372_AUP4372:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4372_AUP4372:=nil;
		 pAUnconditionalPrecond4372_AUP4372:=myrec;
		END;
	FUNCTION PLANTRCONST_PLANTRCONST:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=typeparam;
		params^[0]:=patdouble_;
		paramcount:=3;
		meaning:=pALocMeaning4360_ALM4360;
		matchedAssembler:=pAAssemblesto4367_AA4367;
		END;
		PLANTRCONST_PLANTRCONST:=myrec;
	END;
	FUNCTION pATypeid4375_AT4375:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ longint  ilcg.pattern@62974e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4375_AT4375:=myrec;
		END;
	FUNCTION pATypeid4382_AT4382:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@1d783}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid4382_AT4382:=myrec;
		END;
	FUNCTION pATypeidType4381_ATT4381:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4382_AT4382;
		 pATypeidType4381_ATT4381:=myrec;
		END;
	FUNCTION pAIdLoc4384_AIL4384:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4384_AIL4384:=myrec;
		END;
	FUNCTION pALocValue4383_ALV4383:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4384_AIL4384;
		 pALocValue4383_ALV4383:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs4380_ACR4380:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4381_ATT4381;
		myrec^.arg2:=pALocValue4383_ALV4383;
		 pACastRhs4380_ACR4380:=myrec;
		END;
	FUNCTION pARhsValue4379_ARV4379:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4380_ACR4380;
		 pARhsValue4379_ARV4379:=myrec;
		END;
	FUNCTION pALocMeaning4378_ALM4378:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=location;
		myrec^.locvalue:=pARhsValue4379_ARV4379;
		 pALocMeaning4378_ALM4378:=myrec;
		END;
	FUNCTION pAAssemblypattern4386_AA4386:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'dd ' );
		pappendp(list,0);
		pAAssemblypattern4386_AA4386:=list;
		END;
	FUNCTION pAAssemblesto4385_AA4385:pprintlist;
	begin
		pAAssemblesto4385_AA4385:=pAAssemblypattern4386_AA4386;
		END;
	FUNCTION pASideeffects4389_AS4389:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4389_AS4389:=nil;
		 pASideeffects4389_AS4389:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4390_AUP4390:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4390_AUP4390:=nil;
		 pAUnconditionalPrecond4390_AUP4390:=myrec;
		END;
	FUNCTION PLANTICONST_PLANTICONST:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=typeparam;
		params^[0]:=patlongint_;
		paramcount:=3;
		meaning:=pALocMeaning4378_ALM4378;
		matchedAssembler:=pAAssemblesto4385_AA4385;
		END;
		PLANTICONST_PLANTICONST:=myrec;
	END;
	FUNCTION pATypeid4393_AT4393:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ float  ilcg.pattern@7f0a34}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4393_AT4393:=myrec;
		END;
	FUNCTION pATypeid4400_AT4400:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@139285}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid4400_AT4400:=myrec;
		END;
	FUNCTION pATypeidType4399_ATT4399:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4400_AT4400;
		 pATypeidType4399_ATT4399:=myrec;
		END;
	FUNCTION pAIdLoc4402_AIL4402:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4402_AIL4402:=myrec;
		END;
	FUNCTION pALocValue4401_ALV4401:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4402_AIL4402;
		 pALocValue4401_ALV4401:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs4398_ACR4398:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4399_ATT4399;
		myrec^.arg2:=pALocValue4401_ALV4401;
		 pACastRhs4398_ACR4398:=myrec;
		END;
	FUNCTION pARhsValue4397_ARV4397:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4398_ACR4398;
		 pARhsValue4397_ARV4397:=myrec;
		END;
	FUNCTION pALocMeaning4396_ALM4396:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=location;
		myrec^.locvalue:=pARhsValue4397_ARV4397;
		 pALocMeaning4396_ALM4396:=myrec;
		END;
	FUNCTION pAAssemblypattern4404_AA4404:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'dd ' );
		pappendp(list,0);
		pAAssemblypattern4404_AA4404:=list;
		END;
	FUNCTION pAAssemblesto4403_AA4403:pprintlist;
	begin
		pAAssemblesto4403_AA4403:=pAAssemblypattern4404_AA4404;
		END;
	FUNCTION pASideeffects4407_AS4407:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4407_AS4407:=nil;
		 pASideeffects4407_AS4407:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4408_AUP4408:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4408_AUP4408:=nil;
		 pAUnconditionalPrecond4408_AUP4408:=myrec;
		END;
	FUNCTION PLANTSCONST_PLANTSCONST:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=typeparam;
		params^[0]:=patfloat_;
		paramcount:=3;
		meaning:=pALocMeaning4396_ALM4396;
		matchedAssembler:=pAAssemblesto4403_AA4403;
		END;
		PLANTSCONST_PLANTSCONST:=myrec;
	END;
	FUNCTION pATypeid4411_AT4411:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ byte  ilcg.pattern@39491b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4411_AT4411:=myrec;
		END;
	FUNCTION pATypeid4418_AT4418:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@10d68a}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid4418_AT4418:=myrec;
		END;
	FUNCTION pATypeidType4417_ATT4417:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4418_AT4418;
		 pATypeidType4417_ATT4417:=myrec;
		END;
	FUNCTION pAIdLoc4420_AIL4420:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4420_AIL4420:=myrec;
		END;
	FUNCTION pALocValue4419_ALV4419:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4420_AIL4420;
		 pALocValue4419_ALV4419:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs4416_ACR4416:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4417_ATT4417;
		myrec^.arg2:=pALocValue4419_ALV4419;
		 pACastRhs4416_ACR4416:=myrec;
		END;
	FUNCTION pARhsValue4415_ARV4415:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4416_ACR4416;
		 pARhsValue4415_ARV4415:=myrec;
		END;
	FUNCTION pALocMeaning4414_ALM4414:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=location;
		myrec^.locvalue:=pARhsValue4415_ARV4415;
		 pALocMeaning4414_ALM4414:=myrec;
		END;
	FUNCTION pAAssemblypattern4422_AA4422:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'db ' );
		pappendp(list,0);
		pAAssemblypattern4422_AA4422:=list;
		END;
	FUNCTION pAAssemblesto4421_AA4421:pprintlist;
	begin
		pAAssemblesto4421_AA4421:=pAAssemblypattern4422_AA4422;
		END;
	FUNCTION pASideeffects4425_AS4425:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4425_AS4425:=nil;
		 pASideeffects4425_AS4425:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4426_AUP4426:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4426_AUP4426:=nil;
		 pAUnconditionalPrecond4426_AUP4426:=myrec;
		END;
	FUNCTION PLANTBCONST_PLANTBCONST:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=typeparam;
		params^[0]:=patbyte_;
		paramcount:=3;
		meaning:=pALocMeaning4414_ALM4414;
		matchedAssembler:=pAAssemblesto4421_AA4421;
		END;
		PLANTBCONST_PLANTBCONST:=myrec;
	END;
	FUNCTION pATypeid4429_AT4429:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ word16  ilcg.pattern@345130}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4429_AT4429:=myrec;
		END;
	FUNCTION pATypeid4436_AT4436:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@125fe1}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid4436_AT4436:=myrec;
		END;
	FUNCTION pATypeidType4435_ATT4435:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4436_AT4436;
		 pATypeidType4435_ATT4435:=myrec;
		END;
	FUNCTION pAIdLoc4438_AIL4438:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4438_AIL4438:=myrec;
		END;
	FUNCTION pALocValue4437_ALV4437:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4438_AIL4438;
		 pALocValue4437_ALV4437:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs4434_ACR4434:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4435_ATT4435;
		myrec^.arg2:=pALocValue4437_ALV4437;
		 pACastRhs4434_ACR4434:=myrec;
		END;
	FUNCTION pARhsValue4433_ARV4433:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4434_ACR4434;
		 pARhsValue4433_ARV4433:=myrec;
		END;
	FUNCTION pALocMeaning4432_ALM4432:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=location;
		myrec^.locvalue:=pARhsValue4433_ARV4433;
		 pALocMeaning4432_ALM4432:=myrec;
		END;
	FUNCTION pAAssemblypattern4440_AA4440:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'dw ' );
		pappendp(list,0);
		pAAssemblypattern4440_AA4440:=list;
		END;
	FUNCTION pAAssemblesto4439_AA4439:pprintlist;
	begin
		pAAssemblesto4439_AA4439:=pAAssemblypattern4440_AA4440;
		END;
	FUNCTION pASideeffects4443_AS4443:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4443_AS4443:=nil;
		 pASideeffects4443_AS4443:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4444_AUP4444:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4444_AUP4444:=nil;
		 pAUnconditionalPrecond4444_AUP4444:=myrec;
		END;
	FUNCTION PLANTWCONST_PLANTWCONST:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=typeparam;
		params^[0]:=patword16_16;
		paramcount:=3;
		meaning:=pALocMeaning4432_ALM4432;
		matchedAssembler:=pAAssemblesto4439_AA4439;
		END;
		PLANTWCONST_PLANTWCONST:=myrec;
	END;
	FUNCTION pATypeid4447_AT4447:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@3e965}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4447_AT4447:=myrec;
		END;
	FUNCTION pAIdLoc4450_AIL4450:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4450_AIL4450:=myrec;
		END;
	FUNCTION pALocValue4449_ALV4449:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4450_AIL4450;
		 pALocValue4449_ALV4449:=myrec;
		END;
	FUNCTION pAFailMeaning4448_AFM4448:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=failure;
		myrec^.arg:=pALocValue4449_ALV4449;
		 pAFailMeaning4448_AFM4448:=myrec;
		END;
	FUNCTION pAAssemblypattern4452_AA4452:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'int ' );
		pappendp(list,0);
		pAAssemblypattern4452_AA4452:=list;
		END;
	FUNCTION pAAssemblesto4451_AA4451:pprintlist;
	begin
		pAAssemblesto4451_AA4451:=pAAssemblypattern4452_AA4452;
		END;
	FUNCTION pASideeffects4455_AS4455:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4455_AS4455:=nil;
		 pASideeffects4455_AS4455:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4456_AUP4456:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4456_AUP4456:=nil;
		 pAUnconditionalPrecond4456_AUP4456:=myrec;
		END;
	FUNCTION FAIL_FAIL:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patint_;
		paramcount:=2;
		meaning:=pAFailMeaning4448_AFM4448;
		matchedAssembler:=pAAssemblesto4451_AA4451;
		END;
		FAIL_FAIL:=myrec;
	END;
	FUNCTION pATypeid4459_AT4459:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ jumpmode  ilcg.pattern@5eb650}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4459_AT4459:=myrec;
		END;
	FUNCTION pAIdLoc4462_AIL4462:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4462_AIL4462:=myrec;
		END;
	FUNCTION pALocValue4461_ALV4461:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4462_AIL4462;
		 pALocValue4461_ALV4461:=myrec;
		END;
	FUNCTION pAGotoMeaning4460_AGM4460:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=gotonode;
		myrec^.dest:=pALocValue4461_ALV4461;
		 pAGotoMeaning4460_AGM4460:=myrec;
		END;
	FUNCTION pAAssemblypattern4464_AA4464:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'jmp ' );
		pappendp(list,0);
		pAAssemblypattern4464_AA4464:=list;
		END;
	FUNCTION pAAssemblesto4463_AA4463:pprintlist;
	begin
		pAAssemblesto4463_AA4463:=pAAssemblypattern4464_AA4464;
		END;
	FUNCTION pASideeffects4467_AS4467:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4467_AS4467:=nil;
		 pASideeffects4467_AS4467:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4468_AUP4468:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4468_AUP4468:=nil;
		 pAUnconditionalPrecond4468_AUP4468:=myrec;
		END;
	FUNCTION GOTO_GOTO:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patjumpmode_;
		paramcount:=2;
		meaning:=pAGotoMeaning4460_AGM4460;
		matchedAssembler:=pAAssemblesto4463_AA4463;
		END;
		GOTO_GOTO:=myrec;
	END;
	FUNCTION pATypeid4473_AT4473:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ addrmode  ilcg.pattern@7a4076}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4473_AT4473:=myrec;
		END;
	FUNCTION pATypeid4475_AT4475:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ signed  ilcg.pattern@c6406}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4475_AT4475:=myrec;
		END;
	FUNCTION pATypeid4477_AT4477:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ condition  ilcg.pattern@7470d0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4477_AT4477:=myrec;
		END;
	FUNCTION pATypeid4479_AT4479:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ signed  ilcg.pattern@c6406}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4479_AT4479:=myrec;
		END;
	FUNCTION pATypeid4481_AT4481:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@3e965}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4481_AT4481:=myrec;
		END;
	FUNCTION pATypeid4486_AT4486:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ b  ilcg.Param@374ed5}
		myrec^.tag:=param;
		myrec^.index:= 5;
		 pATypeid4486_AT4486:=myrec;
		END;
	FUNCTION pATypeidType4485_ATT4485:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4486_AT4486;
		 pATypeidType4485_ATT4485:=myrec;
		END;
	FUNCTION pAIdentifierDyadic4488_AID4488:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(3);
		 pAIdentifierDyadic4488_AID4488:=myrec;
		END;
	FUNCTION pATypeid4492_AT4492:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@285d8}
		myrec^.tag:=param;
		myrec^.index:= 4;
		 pATypeid4492_AT4492:=myrec;
		END;
	FUNCTION pATypeidType4491_ATT4491:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4492_AT4492;
		 pATypeidType4491_ATT4491:=myrec;
		END;
	FUNCTION pAIdLoc4496_AIL4496:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4496_AIL4496:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4495_AR4495:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4496_AIL4496;
		 pARefval4495_AR4495:=myrec;
		END;
	FUNCTION pADerefRhs4494_ADR4494:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4495_AR4495;
		 pADerefRhs4494_ADR4494:=myrec;
		END;
	FUNCTION pARhsValue4493_ARV4493:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4494_ADR4494;
		 pARhsValue4493_ARV4493:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs4490_ACR4490:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4491_ATT4491;
		myrec^.arg2:=pARhsValue4493_ARV4493;
		 pACastRhs4490_ACR4490:=myrec;
		END;
	FUNCTION pARhsValue4489_ARV4489:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4490_ACR4490;
		 pARhsValue4489_ARV4489:=myrec;
		END;
	FUNCTION pAConstRhs4498_ACR4498:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(2);;
		 pAConstRhs4498_ACR4498:=myrec;
		END;
	FUNCTION pARhsValue4497_ARV4497:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs4498_ACR4498;
		 pARhsValue4497_ARV4497:=myrec;
		END;
	FUNCTION pADyadicValue4487_ADV4487:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4489_ARV4489;
		myrec^.arg2:=pARhsValue4497_ARV4497;
		myrec^.fn:=pAIdentifierDyadic4488_AID4488;
		 pADyadicValue4487_ADV4487:=myrec;
		END;
		(*! try to cast to type: b*)
	FUNCTION pACastRhs4484_ACR4484:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4485_ATT4485;
		myrec^.arg2:=pADyadicValue4487_ADV4487;
		 pACastRhs4484_ACR4484:=myrec;
		END;
	FUNCTION pARhsValue4483_ARV4483:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4484_ACR4484;
		 pARhsValue4483_ARV4483:=myrec;
		END;
	FUNCTION pAIdLoc4501_AIL4501:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4501_AIL4501:=myrec;
		END;
	FUNCTION pALocValue4500_ALV4500:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4501_AIL4501;
		 pALocValue4500_ALV4500:=myrec;
		END;
	FUNCTION pAGotoMeaning4499_AGM4499:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=gotonode;
		myrec^.dest:=pALocValue4500_ALV4500;
		 pAGotoMeaning4499_AGM4499:=myrec;
		END;
	FUNCTION pAIfMeaning4482_AIM4482:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pARhsValue4483_ARV4483;
		myrec^.action:=pAGotoMeaning4499_AGM4499;
		 pAIfMeaning4482_AIM4482:=myrec;
		END;
	FUNCTION pAAssemblypattern4503_AA4503:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,' cmp ' );
		pappendp(list,4);
		pappends(list,' ' );
		pappendp(list,1);
		pappends(list,',  ' );
		pappendp(list,2);
		pappends(list,'\n j' );
		pappendp(list,3);
		pappends(list,' near  ' );
		pappendp(list,0);
		pAAssemblypattern4503_AA4503:=list;
		END;
	FUNCTION pAAssemblesto4502_AA4502:pprintlist;
	begin
		pAAssemblesto4502_AA4502:=pAAssemblypattern4503_AA4503;
		END;
	FUNCTION pASideeffects4514_AS4514:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4514_AS4514:=nil;
		 pASideeffects4514_AS4514:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4515_AUP4515:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4515_AUP4515:=nil;
		 pAUnconditionalPrecond4515_AUP4515:=myrec;
		END;
	FUNCTION IFLITGOTO_IFLITGOTO:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[5]:=patint_;
		params^[2]:=patsigned_;
		params^[0]:=patlabel;
		params^[1]:=pataddrmode_;
		params^[4]:=patsigned_;
		params^[3]:=patcondition_;
		paramcount:=7;
		meaning:=pAIfMeaning4482_AIM4482;
		matchedAssembler:=pAAssemblesto4502_AA4502;
		END;
		IFLITGOTO_IFLITGOTO:=myrec;
	END;
	FUNCTION pATypeid4520_AT4520:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baddrmode  ilcg.pattern@52f73e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4520_AT4520:=myrec;
		END;
	FUNCTION pATypeid4522_AT4522:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ signed  ilcg.pattern@c6406}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4522_AT4522:=myrec;
		END;
	FUNCTION pATypeid4524_AT4524:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ condition  ilcg.pattern@7470d0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4524_AT4524:=myrec;
		END;
	FUNCTION pATypeid4526_AT4526:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ signed  ilcg.pattern@c6406}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4526_AT4526:=myrec;
		END;
	FUNCTION pAIdentifierDyadic4529_AID4529:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(3);
		 pAIdentifierDyadic4529_AID4529:=myrec;
		END;
	FUNCTION pATypeid4533_AT4533:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@542094}
		myrec^.tag:=param;
		myrec^.index:= 4;
		 pATypeid4533_AT4533:=myrec;
		END;
	FUNCTION pATypeidType4532_ATT4532:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4533_AT4533;
		 pATypeidType4532_ATT4532:=myrec;
		END;
	FUNCTION pAIdLoc4537_AIL4537:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4537_AIL4537:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4536_AR4536:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4537_AIL4537;
		 pARefval4536_AR4536:=myrec;
		END;
	FUNCTION pADerefRhs4535_ADR4535:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4536_AR4536;
		 pADerefRhs4535_ADR4535:=myrec;
		END;
	FUNCTION pARhsValue4534_ARV4534:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4535_ADR4535;
		 pARhsValue4534_ARV4534:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs4531_ACR4531:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4532_ATT4532;
		myrec^.arg2:=pARhsValue4534_ARV4534;
		 pACastRhs4531_ACR4531:=myrec;
		END;
	FUNCTION pARhsValue4530_ARV4530:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4531_ACR4531;
		 pARhsValue4530_ARV4530:=myrec;
		END;
	FUNCTION pAConstRhs4539_ACR4539:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(2);;
		 pAConstRhs4539_ACR4539:=myrec;
		END;
	FUNCTION pARhsValue4538_ARV4538:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs4539_ACR4539;
		 pARhsValue4538_ARV4538:=myrec;
		END;
	FUNCTION pADyadicValue4528_ADV4528:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4530_ARV4530;
		myrec^.arg2:=pARhsValue4538_ARV4538;
		myrec^.fn:=pAIdentifierDyadic4529_AID4529;
		 pADyadicValue4528_ADV4528:=myrec;
		END;
	FUNCTION pAIdLoc4542_AIL4542:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4542_AIL4542:=myrec;
		END;
	FUNCTION pALocValue4541_ALV4541:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4542_AIL4542;
		 pALocValue4541_ALV4541:=myrec;
		END;
	FUNCTION pAGotoMeaning4540_AGM4540:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=gotonode;
		myrec^.dest:=pALocValue4541_ALV4541;
		 pAGotoMeaning4540_AGM4540:=myrec;
		END;
	FUNCTION pAIfMeaning4527_AIM4527:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pADyadicValue4528_ADV4528;
		myrec^.action:=pAGotoMeaning4540_AGM4540;
		 pAIfMeaning4527_AIM4527:=myrec;
		END;
	FUNCTION pAAssemblypattern4544_AA4544:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,' cmp ' );
		pappendp(list,4);
		pappends(list,' ' );
		pappendp(list,1);
		pappends(list,',  ' );
		pappendp(list,4);
		pappendp(list,2);
		pappends(list,'\n j' );
		pappendp(list,3);
		pappends(list,' near  ' );
		pappendp(list,0);
		pAAssemblypattern4544_AA4544:=list;
		END;
	FUNCTION pAAssemblesto4543_AA4543:pprintlist;
	begin
		pAAssemblesto4543_AA4543:=pAAssemblypattern4544_AA4544;
		END;
	FUNCTION pASideeffects4556_AS4556:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4556_AS4556:=nil;
		 pASideeffects4556_AS4556:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4557_AUP4557:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4557_AUP4557:=nil;
		 pAUnconditionalPrecond4557_AUP4557:=myrec;
		END;
	FUNCTION BIFLITGOTO_BIFLITGOTO:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patlabel;
		params^[2]:=patsigned_;
		params^[1]:=patbaddrmode_;
		params^[4]:=patsigned_;
		params^[3]:=patcondition_;
		paramcount:=6;
		meaning:=pAIfMeaning4527_AIM4527;
		matchedAssembler:=pAAssemblesto4543_AA4543;
		END;
		BIFLITGOTO_BIFLITGOTO:=myrec;
	END;
	FUNCTION pATypeid4562_AT4562:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ bireg  ilcg.pattern@cc53e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4562_AT4562:=myrec;
		END;
	FUNCTION pATypeid4564_AT4564:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ regaddrimmediate  ilcg.pattern@375be2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4564_AT4564:=myrec;
		END;
	FUNCTION pATypeid4566_AT4566:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ condition  ilcg.pattern@7470d0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4566_AT4566:=myrec;
		END;
	FUNCTION pATypeid4568_AT4568:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ signed  ilcg.pattern@c6406}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4568_AT4568:=myrec;
		END;
	FUNCTION pATypeid4570_AT4570:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@3e965}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4570_AT4570:=myrec;
		END;
	FUNCTION pAInt8Signed4577_AI8S4577:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed4577_AI8S4577:=myrec;
		END;
	FUNCTION pASignedTformat4576_AST4576:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed4577_AI8S4577;
		 pASignedTformat4576_AST4576:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4575_ATP4575:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype4575_ATP4575:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4574_APT4574:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType4574_APT4574:=myrec;
		END;
	FUNCTION pAIdentifierDyadic4579_AID4579:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(3);
		 pAIdentifierDyadic4579_AID4579:=myrec;
		END;
	FUNCTION pAIdLoc4583_AIL4583:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4583_AIL4583:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4582_AR4582:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4583_AIL4583;
		 pARefval4582_AR4582:=myrec;
		END;
	FUNCTION pADerefRhs4581_ADR4581:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4582_AR4582;
		 pADerefRhs4581_ADR4581:=myrec;
		END;
	FUNCTION pARhsValue4580_ARV4580:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4581_ADR4581;
		 pARhsValue4580_ARV4580:=myrec;
		END;
	FUNCTION pAInt8Signed4589_AI8S4589:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed4589_AI8S4589:=myrec;
		END;
	FUNCTION pASignedTformat4588_AST4588:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed4589_AI8S4589;
		 pASignedTformat4588_AST4588:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4587_ATP4587:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype4587_ATP4587:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4586_APT4586:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType4586_APT4586:=myrec;
		END;
	FUNCTION pAIdLoc4591_AIL4591:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc4591_AIL4591:=myrec;
		END;
	FUNCTION pALocValue4590_ALV4590:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4591_AIL4591;
		 pALocValue4590_ALV4590:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs4585_ACR4585:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType4586_APT4586;
		myrec^.arg2:=pALocValue4590_ALV4590;
		 pACastRhs4585_ACR4585:=myrec;
		END;
	FUNCTION pARhsValue4584_ARV4584:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4585_ACR4585;
		 pARhsValue4584_ARV4584:=myrec;
		END;
	FUNCTION pADyadicValue4578_ADV4578:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4580_ARV4580;
		myrec^.arg2:=pARhsValue4584_ARV4584;
		myrec^.fn:=pAIdentifierDyadic4579_AID4579;
		 pADyadicValue4578_ADV4578:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs4573_ACR4573:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType4574_APT4574;
		myrec^.arg2:=pADyadicValue4578_ADV4578;
		 pACastRhs4573_ACR4573:=myrec;
		END;
	FUNCTION pARhsValue4572_ARV4572:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4573_ACR4573;
		 pARhsValue4572_ARV4572:=myrec;
		END;
	FUNCTION pAIdLoc4594_AIL4594:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4594_AIL4594:=myrec;
		END;
	FUNCTION pALocValue4593_ALV4593:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4594_AIL4594;
		 pALocValue4593_ALV4593:=myrec;
		END;
	FUNCTION pAGotoMeaning4592_AGM4592:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=gotonode;
		myrec^.dest:=pALocValue4593_ALV4593;
		 pAGotoMeaning4592_AGM4592:=myrec;
		END;
	FUNCTION pAIfMeaning4571_AIM4571:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pARhsValue4572_ARV4572;
		myrec^.action:=pAGotoMeaning4592_AGM4592;
		 pAIfMeaning4571_AIM4571:=myrec;
		END;
	FUNCTION pAAssemblypattern4596_AA4596:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cmp ' );
		pappendp(list,1);
		pappends(list,',byte' );
		pappends(list,'  ' );
		pappendp(list,2);
		pappends(list,'\n j' );
		pappendp(list,3);
		pappends(list,' near  ' );
		pappendp(list,0);
		pAAssemblypattern4596_AA4596:=list;
		END;
	FUNCTION pAAssemblesto4595_AA4595:pprintlist;
	begin
		pAAssemblesto4595_AA4595:=pAAssemblypattern4596_AA4596;
		END;
	FUNCTION pASideeffects4606_AS4606:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4606_AS4606:=nil;
		 pASideeffects4606_AS4606:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4607_AUP4607:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4607_AUP4607:=nil;
		 pAUnconditionalPrecond4607_AUP4607:=myrec;
		END;
	FUNCTION IFGOTOB_IFGOTOB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[5]:=patint_;
		params^[2]:=patregaddrimmediate_;
		params^[0]:=patlabel;
		params^[1]:=patbireg_;
		params^[4]:=patsigned_;
		params^[3]:=patcondition_;
		paramcount:=7;
		meaning:=pAIfMeaning4571_AIM4571;
		matchedAssembler:=pAAssemblesto4595_AA4595;
		END;
		IFGOTOB_IFGOTOB:=myrec;
	END;
	FUNCTION pATypeid4612_AT4612:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ wreg  ilcg.pattern@18cbf7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4612_AT4612:=myrec;
		END;
	FUNCTION pATypeid4614_AT4614:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ regaddrimmediate  ilcg.pattern@375be2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4614_AT4614:=myrec;
		END;
	FUNCTION pATypeid4616_AT4616:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ condition  ilcg.pattern@7470d0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4616_AT4616:=myrec;
		END;
	FUNCTION pATypeid4618_AT4618:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ signed  ilcg.pattern@c6406}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4618_AT4618:=myrec;
		END;
	FUNCTION pATypeid4620_AT4620:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@3e965}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4620_AT4620:=myrec;
		END;
	FUNCTION pAInt8Signed4627_AI8S4627:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed4627_AI8S4627:=myrec;
		END;
	FUNCTION pASignedTformat4626_AST4626:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed4627_AI8S4627;
		 pASignedTformat4626_AST4626:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4625_ATP4625:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype4625_ATP4625:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4624_APT4624:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType4624_APT4624:=myrec;
		END;
	FUNCTION pAIdentifierDyadic4629_AID4629:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(3);
		 pAIdentifierDyadic4629_AID4629:=myrec;
		END;
	FUNCTION pAIdLoc4633_AIL4633:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4633_AIL4633:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4632_AR4632:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4633_AIL4633;
		 pARefval4632_AR4632:=myrec;
		END;
	FUNCTION pADerefRhs4631_ADR4631:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4632_AR4632;
		 pADerefRhs4631_ADR4631:=myrec;
		END;
	FUNCTION pARhsValue4630_ARV4630:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4631_ADR4631;
		 pARhsValue4630_ARV4630:=myrec;
		END;
	FUNCTION pAInt16Signed4639_AI16S4639:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed4639_AI16S4639:=myrec;
		END;
	FUNCTION pASignedTformat4638_AST4638:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed4639_AI16S4639;
		 pASignedTformat4638_AST4638:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4637_ATP4637:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype4637_ATP4637:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4636_APT4636:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pAPredeclaredtypeType4636_APT4636:=myrec;
		END;
	FUNCTION pAIdLoc4641_AIL4641:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc4641_AIL4641:=myrec;
		END;
	FUNCTION pALocValue4640_ALV4640:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4641_AIL4641;
		 pALocValue4640_ALV4640:=myrec;
		END;
		(*! try to cast to type: int16*)
	FUNCTION pACastRhs4635_ACR4635:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType4636_APT4636;
		myrec^.arg2:=pALocValue4640_ALV4640;
		 pACastRhs4635_ACR4635:=myrec;
		END;
	FUNCTION pARhsValue4634_ARV4634:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4635_ACR4635;
		 pARhsValue4634_ARV4634:=myrec;
		END;
	FUNCTION pADyadicValue4628_ADV4628:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4630_ARV4630;
		myrec^.arg2:=pARhsValue4634_ARV4634;
		myrec^.fn:=pAIdentifierDyadic4629_AID4629;
		 pADyadicValue4628_ADV4628:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs4623_ACR4623:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType4624_APT4624;
		myrec^.arg2:=pADyadicValue4628_ADV4628;
		 pACastRhs4623_ACR4623:=myrec;
		END;
	FUNCTION pARhsValue4622_ARV4622:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4623_ACR4623;
		 pARhsValue4622_ARV4622:=myrec;
		END;
	FUNCTION pAIdLoc4644_AIL4644:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4644_AIL4644:=myrec;
		END;
	FUNCTION pALocValue4643_ALV4643:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4644_AIL4644;
		 pALocValue4643_ALV4643:=myrec;
		END;
	FUNCTION pAGotoMeaning4642_AGM4642:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=gotonode;
		myrec^.dest:=pALocValue4643_ALV4643;
		 pAGotoMeaning4642_AGM4642:=myrec;
		END;
	FUNCTION pAIfMeaning4621_AIM4621:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pARhsValue4622_ARV4622;
		myrec^.action:=pAGotoMeaning4642_AGM4642;
		 pAIfMeaning4621_AIM4621:=myrec;
		END;
	FUNCTION pAAssemblypattern4646_AA4646:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cmp ' );
		pappendp(list,1);
		pappends(list,',word' );
		pappends(list,'  ' );
		pappendp(list,2);
		pappends(list,'\n j' );
		pappendp(list,3);
		pappends(list,' near  ' );
		pappendp(list,0);
		pAAssemblypattern4646_AA4646:=list;
		END;
	FUNCTION pAAssemblesto4645_AA4645:pprintlist;
	begin
		pAAssemblesto4645_AA4645:=pAAssemblypattern4646_AA4646;
		END;
	FUNCTION pASideeffects4656_AS4656:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4656_AS4656:=nil;
		 pASideeffects4656_AS4656:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4657_AUP4657:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4657_AUP4657:=nil;
		 pAUnconditionalPrecond4657_AUP4657:=myrec;
		END;
	FUNCTION IFGOTOW_IFGOTOW:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[5]:=patint_;
		params^[2]:=patregaddrimmediate_;
		params^[0]:=patlabel;
		params^[1]:=patwreg_;
		params^[4]:=patsigned_;
		params^[3]:=patcondition_;
		paramcount:=7;
		meaning:=pAIfMeaning4621_AIM4621;
		matchedAssembler:=pAAssemblesto4645_AA4645;
		END;
		IFGOTOW_IFGOTOW:=myrec;
	END;
	FUNCTION pATypeid4662_AT4662:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ireg  ilcg.pattern@3c86e9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4662_AT4662:=myrec;
		END;
	FUNCTION pATypeid4664_AT4664:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ regaddrimmediate  ilcg.pattern@375be2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4664_AT4664:=myrec;
		END;
	FUNCTION pATypeid4666_AT4666:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ condition  ilcg.pattern@7470d0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4666_AT4666:=myrec;
		END;
	FUNCTION pATypeid4668_AT4668:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ signed  ilcg.pattern@c6406}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4668_AT4668:=myrec;
		END;
	FUNCTION pATypeid4670_AT4670:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@3e965}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4670_AT4670:=myrec;
		END;
	FUNCTION pAInt8Signed4677_AI8S4677:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed4677_AI8S4677:=myrec;
		END;
	FUNCTION pASignedTformat4676_AST4676:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed4677_AI8S4677;
		 pASignedTformat4676_AST4676:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4675_ATP4675:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype4675_ATP4675:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4674_APT4674:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType4674_APT4674:=myrec;
		END;
	FUNCTION pAIdentifierDyadic4679_AID4679:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(3);
		 pAIdentifierDyadic4679_AID4679:=myrec;
		END;
	FUNCTION pAIdLoc4683_AIL4683:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4683_AIL4683:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4682_AR4682:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4683_AIL4683;
		 pARefval4682_AR4682:=myrec;
		END;
	FUNCTION pADerefRhs4681_ADR4681:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4682_AR4682;
		 pADerefRhs4681_ADR4681:=myrec;
		END;
	FUNCTION pARhsValue4680_ARV4680:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4681_ADR4681;
		 pARhsValue4680_ARV4680:=myrec;
		END;
	FUNCTION pASigned4689_AS4689:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned4689_AS4689:=myrec;
		END;
	FUNCTION pASignedTformat4688_AST4688:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned4689_AS4689;
		 pASignedTformat4688_AST4688:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype4687_ATP4687:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype4687_ATP4687:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType4686_APT4686:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType4686_APT4686:=myrec;
		END;
	FUNCTION pAIdLoc4691_AIL4691:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc4691_AIL4691:=myrec;
		END;
	FUNCTION pALocValue4690_ALV4690:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4691_AIL4691;
		 pALocValue4690_ALV4690:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs4685_ACR4685:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType4686_APT4686;
		myrec^.arg2:=pALocValue4690_ALV4690;
		 pACastRhs4685_ACR4685:=myrec;
		END;
	FUNCTION pARhsValue4684_ARV4684:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4685_ACR4685;
		 pARhsValue4684_ARV4684:=myrec;
		END;
	FUNCTION pADyadicValue4678_ADV4678:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4680_ARV4680;
		myrec^.arg2:=pARhsValue4684_ARV4684;
		myrec^.fn:=pAIdentifierDyadic4679_AID4679;
		 pADyadicValue4678_ADV4678:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs4673_ACR4673:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType4674_APT4674;
		myrec^.arg2:=pADyadicValue4678_ADV4678;
		 pACastRhs4673_ACR4673:=myrec;
		END;
	FUNCTION pARhsValue4672_ARV4672:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4673_ACR4673;
		 pARhsValue4672_ARV4672:=myrec;
		END;
	FUNCTION pAIdLoc4694_AIL4694:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4694_AIL4694:=myrec;
		END;
	FUNCTION pALocValue4693_ALV4693:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4694_AIL4694;
		 pALocValue4693_ALV4693:=myrec;
		END;
	FUNCTION pAGotoMeaning4692_AGM4692:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=gotonode;
		myrec^.dest:=pALocValue4693_ALV4693;
		 pAGotoMeaning4692_AGM4692:=myrec;
		END;
	FUNCTION pAIfMeaning4671_AIM4671:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pARhsValue4672_ARV4672;
		myrec^.action:=pAGotoMeaning4692_AGM4692;
		 pAIfMeaning4671_AIM4671:=myrec;
		END;
	FUNCTION pAAssemblypattern4696_AA4696:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cmp ' );
		pappendp(list,1);
		pappends(list,',dword' );
		pappends(list,'  ' );
		pappendp(list,2);
		pappends(list,'\n j' );
		pappendp(list,3);
		pappends(list,' near  ' );
		pappendp(list,0);
		pAAssemblypattern4696_AA4696:=list;
		END;
	FUNCTION pAAssemblesto4695_AA4695:pprintlist;
	begin
		pAAssemblesto4695_AA4695:=pAAssemblypattern4696_AA4696;
		END;
	FUNCTION pASideeffects4706_AS4706:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4706_AS4706:=nil;
		 pASideeffects4706_AS4706:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4707_AUP4707:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4707_AUP4707:=nil;
		 pAUnconditionalPrecond4707_AUP4707:=myrec;
		END;
	FUNCTION IFGOTO_IFGOTO:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[5]:=patint_;
		params^[2]:=patregaddrimmediate_;
		params^[0]:=patlabel;
		params^[1]:=patireg_;
		params^[4]:=patsigned_;
		params^[3]:=patcondition_;
		paramcount:=7;
		meaning:=pAIfMeaning4671_AIM4671;
		matchedAssembler:=pAAssemblesto4695_AA4695;
		END;
		IFGOTO_IFGOTO:=myrec;
	END;
	FUNCTION pATypeid4710_AT4710:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ signedreg  ilcg.pattern@7d20c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4710_AT4710:=myrec;
		END;
	FUNCTION pATypeid4712_AT4712:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ regaddrimmediate  ilcg.pattern@375be2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4712_AT4712:=myrec;
		END;
	FUNCTION pATypeid4714_AT4714:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ condition  ilcg.pattern@7470d0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4714_AT4714:=myrec;
		END;
	FUNCTION pATypeid4718_AT4718:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4718_AT4718:=myrec;
		END;
	FUNCTION pATypeid4720_AT4720:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4720_AT4720:=myrec;
		END;
	FUNCTION pATypeid4727_AT4727:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t2  ilcg.Param@7de8da}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid4727_AT4727:=myrec;
		END;
	FUNCTION pATypeidType4726_ATT4726:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4727_AT4727;
		 pATypeidType4726_ATT4726:=myrec;
		END;
	FUNCTION pAIdentifierDyadic4729_AID4729:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdentifierDyadic4729_AID4729:=myrec;
		END;
	FUNCTION pATypeid4733_AT4733:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@67ad79}
		myrec^.tag:=param;
		myrec^.index:= 6;
		 pATypeid4733_AT4733:=myrec;
		END;
	FUNCTION pATypeidType4732_ATT4732:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4733_AT4733;
		 pATypeidType4732_ATT4732:=myrec;
		END;
	FUNCTION pAIdLoc4737_AIL4737:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4737_AIL4737:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4736_AR4736:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4737_AIL4737;
		 pARefval4736_AR4736:=myrec;
		END;
	FUNCTION pADerefRhs4735_ADR4735:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4736_AR4736;
		 pADerefRhs4735_ADR4735:=myrec;
		END;
	FUNCTION pARhsValue4734_ARV4734:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4735_ADR4735;
		 pARhsValue4734_ARV4734:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs4731_ACR4731:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4732_ATT4732;
		myrec^.arg2:=pARhsValue4734_ARV4734;
		 pACastRhs4731_ACR4731:=myrec;
		END;
	FUNCTION pARhsValue4730_ARV4730:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4731_ACR4731;
		 pARhsValue4730_ARV4730:=myrec;
		END;
	FUNCTION pATypeid4741_AT4741:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@67ad79}
		myrec^.tag:=param;
		myrec^.index:= 6;
		 pATypeid4741_AT4741:=myrec;
		END;
	FUNCTION pATypeidType4740_ATT4740:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4741_AT4741;
		 pATypeidType4740_ATT4740:=myrec;
		END;
	FUNCTION pAIdLoc4743_AIL4743:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4743_AIL4743:=myrec;
		END;
	FUNCTION pALocValue4742_ALV4742:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4743_AIL4743;
		 pALocValue4742_ALV4742:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs4739_ACR4739:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4740_ATT4740;
		myrec^.arg2:=pALocValue4742_ALV4742;
		 pACastRhs4739_ACR4739:=myrec;
		END;
	FUNCTION pARhsValue4738_ARV4738:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4739_ACR4739;
		 pARhsValue4738_ARV4738:=myrec;
		END;
	FUNCTION pADyadicValue4728_ADV4728:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4730_ARV4730;
		myrec^.arg2:=pARhsValue4738_ARV4738;
		myrec^.fn:=pAIdentifierDyadic4729_AID4729;
		 pADyadicValue4728_ADV4728:=myrec;
		END;
		(*! try to cast to type: t2*)
	FUNCTION pACastRhs4725_ACR4725:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4726_ATT4726;
		myrec^.arg2:=pADyadicValue4728_ADV4728;
		 pACastRhs4725_ACR4725:=myrec;
		END;
	FUNCTION pARhsValue4724_ARV4724:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4725_ACR4725;
		 pARhsValue4724_ARV4724:=myrec;
		END;
	FUNCTION pATypeid4750_AT4750:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@67ad79}
		myrec^.tag:=param;
		myrec^.index:= 6;
		 pATypeid4750_AT4750:=myrec;
		END;
	FUNCTION pATypeidType4749_ATT4749:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4750_AT4750;
		 pATypeidType4749_ATT4749:=myrec;
		END;
	FUNCTION pAReference4748_AR4748:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType4749_ATT4749;
		 pAReference4748_AR4748:=myrec;
		END;
	FUNCTION pAReftypeType4747_ART4747:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference4748_AR4748;
		 pAReftypeType4747_ART4747:=myrec;
		END;
	FUNCTION pAIdLoc4751_AIL4751:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(5);
		 pAIdLoc4751_AIL4751:=myrec;
		END;
	FUNCTION pARefcastRefval4746_ARR4746:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType4747_ART4747;
		myrec^.arg2:=pAIdLoc4751_AIL4751;
		 pARefcastRefval4746_ARR4746:=myrec;
		END;
	FUNCTION pATypeid4755_AT4755:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@67ad79}
		myrec^.tag:=param;
		myrec^.index:= 6;
		 pATypeid4755_AT4755:=myrec;
		END;
	FUNCTION pATypeidType4754_ATT4754:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4755_AT4755;
		 pATypeidType4754_ATT4754:=myrec;
		END;
	FUNCTION pAIdLoc4759_AIL4759:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(4);
		 pAIdLoc4759_AIL4759:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4758_AR4758:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4759_AIL4759;
		 pARefval4758_AR4758:=myrec;
		END;
	FUNCTION pADerefRhs4757_ADR4757:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4758_AR4758;
		 pADerefRhs4757_ADR4757:=myrec;
		END;
	FUNCTION pARhsValue4756_ARV4756:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4757_ADR4757;
		 pARhsValue4756_ARV4756:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs4753_ACR4753:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4754_ATT4754;
		myrec^.arg2:=pARhsValue4756_ARV4756;
		 pACastRhs4753_ACR4753:=myrec;
		END;
	FUNCTION pARhsValue4752_ARV4752:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4753_ACR4753;
		 pARhsValue4752_ARV4752:=myrec;
		END;
	FUNCTION pAAssign4745_AA4745:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue4752_ARV4752;
		myrec^.dest:=pARefcastRefval4746_ARR4746;
		 pAAssign4745_AA4745:=myrec;
		END;
	FUNCTION pAAssignMeaning4744_AAM4744:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4745_AA4745;
		 pAAssignMeaning4744_AAM4744:=myrec;
		END;
	FUNCTION pAIfMeaning4723_AIM4723:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pARhsValue4724_ARV4724;
		myrec^.action:=pAAssignMeaning4744_AAM4744;
		 pAIfMeaning4723_AIM4723:=myrec;
		END;
	FUNCTION pAAssemblypattern4761_AA4761:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cmp ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,6);
		pappends(list,'  ' );
		pappendp(list,1);
		pappends(list,'\n mov ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,6);
		pappendp(list,5);
		pappends(list,'\n cmov' );
		pappendp(list,2);
		pappends(list,' ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,4);
		pappends(list,'\n mov ' );
		pappendp(list,6);
		pappendp(list,5);
		pappends(list,',' );
		pappendp(list,0);
		pAAssemblypattern4761_AA4761:=list;
		END;
	FUNCTION pAAssemblesto4760_AA4760:pprintlist;
	begin
		pAAssemblesto4760_AA4760:=pAAssemblypattern4761_AA4761;
		END;
	FUNCTION pASideeffects4784_AS4784:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4784_AS4784:=nil;
		 pASideeffects4784_AS4784:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4785_AUP4785:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4785_AUP4785:=nil;
		 pAUnconditionalPrecond4785_AUP4785:=myrec;
		END;
	FUNCTION IFASSp6_IFASS6:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[4]:=patmaddrmode_;
		params^[1]:=patregaddrimmediate_;
		params^[0]:=patsignedreg_;
		params^[6]:=typeparam;
		params^[3]:=typeparam;
		params^[5]:=patmaddrmode_;
		params^[2]:=patcondition_;
		paramcount:=8;
		meaning:=pAIfMeaning4723_AIM4723;
		matchedAssembler:=pAAssemblesto4760_AA4760;
		END;
		IFASSp6_IFASS6:=myrec;
	END;
	FUNCTION pATypeid4788_AT4788:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ signedreg  ilcg.pattern@7d20c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4788_AT4788:=myrec;
		END;
	FUNCTION pATypeid4790_AT4790:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ acc  ilcg.pattern@535bf2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4790_AT4790:=myrec;
		END;
	FUNCTION pATypeid4792_AT4792:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4792_AT4792:=myrec;
		END;
	FUNCTION pATypeid4796_AT4796:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ equals  ilcg.pattern@235feb}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4796_AT4796:=myrec;
		END;
	FUNCTION pATypeid4803_AT4803:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t2  ilcg.Param@42480b}
		myrec^.tag:=param;
		myrec^.index:= 5;
		 pATypeid4803_AT4803:=myrec;
		END;
	FUNCTION pATypeidType4802_ATT4802:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4803_AT4803;
		 pATypeidType4802_ATT4802:=myrec;
		END;
	FUNCTION pAIdentifierDyadic4805_AID4805:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(4);
		 pAIdentifierDyadic4805_AID4805:=myrec;
		END;
	FUNCTION pATypeid4809_AT4809:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@5eef88}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid4809_AT4809:=myrec;
		END;
	FUNCTION pATypeidType4808_ATT4808:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4809_AT4809;
		 pATypeidType4808_ATT4808:=myrec;
		END;
	FUNCTION pAIdLoc4813_AIL4813:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc4813_AIL4813:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4812_AR4812:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4813_AIL4813;
		 pARefval4812_AR4812:=myrec;
		END;
	FUNCTION pADerefRhs4811_ADR4811:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4812_AR4812;
		 pADerefRhs4811_ADR4811:=myrec;
		END;
	FUNCTION pARhsValue4810_ARV4810:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4811_ADR4811;
		 pARhsValue4810_ARV4810:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs4807_ACR4807:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4808_ATT4808;
		myrec^.arg2:=pARhsValue4810_ARV4810;
		 pACastRhs4807_ACR4807:=myrec;
		END;
	FUNCTION pARhsValue4806_ARV4806:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4807_ACR4807;
		 pARhsValue4806_ARV4806:=myrec;
		END;
	FUNCTION pATypeid4817_AT4817:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@5eef88}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid4817_AT4817:=myrec;
		END;
	FUNCTION pATypeidType4816_ATT4816:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4817_AT4817;
		 pATypeidType4816_ATT4816:=myrec;
		END;
	FUNCTION pAIdLoc4819_AIL4819:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4819_AIL4819:=myrec;
		END;
	FUNCTION pALocValue4818_ALV4818:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4819_AIL4819;
		 pALocValue4818_ALV4818:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs4815_ACR4815:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4816_ATT4816;
		myrec^.arg2:=pALocValue4818_ALV4818;
		 pACastRhs4815_ACR4815:=myrec;
		END;
	FUNCTION pARhsValue4814_ARV4814:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4815_ACR4815;
		 pARhsValue4814_ARV4814:=myrec;
		END;
	FUNCTION pADyadicValue4804_ADV4804:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4806_ARV4806;
		myrec^.arg2:=pARhsValue4814_ARV4814;
		myrec^.fn:=pAIdentifierDyadic4805_AID4805;
		 pADyadicValue4804_ADV4804:=myrec;
		END;
		(*! try to cast to type: t2*)
	FUNCTION pACastRhs4801_ACR4801:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4802_ATT4802;
		myrec^.arg2:=pADyadicValue4804_ADV4804;
		 pACastRhs4801_ACR4801:=myrec;
		END;
	FUNCTION pARhsValue4800_ARV4800:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4801_ACR4801;
		 pARhsValue4800_ARV4800:=myrec;
		END;
	FUNCTION pATypeid4826_AT4826:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@5eef88}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid4826_AT4826:=myrec;
		END;
	FUNCTION pATypeidType4825_ATT4825:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4826_AT4826;
		 pATypeidType4825_ATT4825:=myrec;
		END;
	FUNCTION pAReference4824_AR4824:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType4825_ATT4825;
		 pAReference4824_AR4824:=myrec;
		END;
	FUNCTION pAReftypeType4823_ART4823:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference4824_AR4824;
		 pAReftypeType4823_ART4823:=myrec;
		END;
	FUNCTION pAIdLoc4827_AIL4827:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc4827_AIL4827:=myrec;
		END;
	FUNCTION pARefcastRefval4822_ARR4822:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType4823_ART4823;
		myrec^.arg2:=pAIdLoc4827_AIL4827;
		 pARefcastRefval4822_ARR4822:=myrec;
		END;
	FUNCTION pATypeid4831_AT4831:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@5eef88}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid4831_AT4831:=myrec;
		END;
	FUNCTION pATypeidType4830_ATT4830:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4831_AT4831;
		 pATypeidType4830_ATT4830:=myrec;
		END;
	FUNCTION pAIdLoc4835_AIL4835:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4835_AIL4835:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4834_AR4834:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4835_AIL4835;
		 pARefval4834_AR4834:=myrec;
		END;
	FUNCTION pADerefRhs4833_ADR4833:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4834_AR4834;
		 pADerefRhs4833_ADR4833:=myrec;
		END;
	FUNCTION pARhsValue4832_ARV4832:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4833_ADR4833;
		 pARhsValue4832_ARV4832:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs4829_ACR4829:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4830_ATT4830;
		myrec^.arg2:=pARhsValue4832_ARV4832;
		 pACastRhs4829_ACR4829:=myrec;
		END;
	FUNCTION pARhsValue4828_ARV4828:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4829_ACR4829;
		 pARhsValue4828_ARV4828:=myrec;
		END;
	FUNCTION pAAssign4821_AA4821:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue4828_ARV4828;
		myrec^.dest:=pARefcastRefval4822_ARR4822;
		 pAAssign4821_AA4821:=myrec;
		END;
	FUNCTION pAAssignMeaning4820_AAM4820:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4821_AA4821;
		 pAAssignMeaning4820_AAM4820:=myrec;
		END;
	FUNCTION pAIfMeaning4799_AIM4799:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pARhsValue4800_ARV4800;
		myrec^.action:=pAAssignMeaning4820_AAM4820;
		 pAIfMeaning4799_AIM4799:=myrec;
		END;
	FUNCTION pAAssemblypattern4837_AA4837:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cmpxchg ' );
		pappendp(list,3);
		pappendp(list,2);
		pappends(list,',' );
		pappends(list,'  ' );
		pappendp(list,0);
		pAAssemblypattern4837_AA4837:=list;
		END;
	FUNCTION pAAssemblesto4836_AA4836:pprintlist;
	begin
		pAAssemblesto4836_AA4836:=pAAssemblypattern4837_AA4837;
		END;
	FUNCTION pASideeffects4844_AS4844:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4844_AS4844:=nil;
		 pASideeffects4844_AS4844:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4845_AUP4845:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4845_AUP4845:=nil;
		 pAUnconditionalPrecond4845_AUP4845:=myrec;
		END;
	FUNCTION IFASS_IFASS:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patacc_;
		params^[0]:=patsignedreg_;
		params^[3]:=typeparam;
		params^[5]:=typeparam;
		params^[2]:=patmaddrmode_;
		params^[4]:=patequals_;
		paramcount:=7;
		meaning:=pAIfMeaning4799_AIM4799;
		matchedAssembler:=pAAssemblesto4836_AA4836;
		END;
		IFASS_IFASS:=myrec;
	END;
	FUNCTION pATypeid4850_AT4850:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ anyreg  ilcg.pattern@18b13b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4850_AT4850:=myrec;
		END;
	FUNCTION pATypeid4852_AT4852:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ regaddrimmediate  ilcg.pattern@375be2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4852_AT4852:=myrec;
		END;
	FUNCTION pATypeid4854_AT4854:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ condition  ilcg.pattern@7470d0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4854_AT4854:=myrec;
		END;
	FUNCTION pATypeid4856_AT4856:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@3e965}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4856_AT4856:=myrec;
		END;
	FUNCTION pATypeid4858_AT4858:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@3e965}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4858_AT4858:=myrec;
		END;
	FUNCTION pATypeid4860_AT4860:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ anyreg  ilcg.pattern@18b13b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4860_AT4860:=myrec;
		END;
	FUNCTION pATypeid4862_AT4862:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ regaddrimmediate  ilcg.pattern@375be2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4862_AT4862:=myrec;
		END;
	FUNCTION pATypeid4864_AT4864:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ condition  ilcg.pattern@7470d0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4864_AT4864:=myrec;
		END;
	FUNCTION pATypeid4866_AT4866:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@3e965}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4866_AT4866:=myrec;
		END;
	FUNCTION pATypeid4868_AT4868:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@3e965}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4868_AT4868:=myrec;
		END;
	FUNCTION pATypeid4873_AT4873:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ b  ilcg.Param@4ef122}
		myrec^.tag:=param;
		myrec^.index:= 10;
		 pATypeid4873_AT4873:=myrec;
		END;
	FUNCTION pATypeidType4872_ATT4872:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4873_AT4873;
		 pATypeidType4872_ATT4872:=myrec;
		END;
	FUNCTION pAAndDyadic4875_AAD4875:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpand;
		 pAAndDyadic4875_AAD4875:=myrec;
		END;
	FUNCTION pATypeid4879_AT4879:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ b  ilcg.Param@4ef122}
		myrec^.tag:=param;
		myrec^.index:= 10;
		 pATypeid4879_AT4879:=myrec;
		END;
	FUNCTION pATypeidType4878_ATT4878:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4879_AT4879;
		 pATypeidType4878_ATT4878:=myrec;
		END;
	FUNCTION pAIdentifierDyadic4881_AID4881:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(3);
		 pAIdentifierDyadic4881_AID4881:=myrec;
		END;
	FUNCTION pATypeid4885_AT4885:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@30f24a}
		myrec^.tag:=param;
		myrec^.index:= 4;
		 pATypeid4885_AT4885:=myrec;
		END;
	FUNCTION pATypeidType4884_ATT4884:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4885_AT4885;
		 pATypeidType4884_ATT4884:=myrec;
		END;
	FUNCTION pAIdLoc4889_AIL4889:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4889_AIL4889:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4888_AR4888:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4889_AIL4889;
		 pARefval4888_AR4888:=myrec;
		END;
	FUNCTION pADerefRhs4887_ADR4887:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4888_AR4888;
		 pADerefRhs4887_ADR4887:=myrec;
		END;
	FUNCTION pARhsValue4886_ARV4886:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4887_ADR4887;
		 pARhsValue4886_ARV4886:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs4883_ACR4883:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4884_ATT4884;
		myrec^.arg2:=pARhsValue4886_ARV4886;
		 pACastRhs4883_ACR4883:=myrec;
		END;
	FUNCTION pARhsValue4882_ARV4882:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4883_ACR4883;
		 pARhsValue4882_ARV4882:=myrec;
		END;
	FUNCTION pATypeid4893_AT4893:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@30f24a}
		myrec^.tag:=param;
		myrec^.index:= 4;
		 pATypeid4893_AT4893:=myrec;
		END;
	FUNCTION pATypeidType4892_ATT4892:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4893_AT4893;
		 pATypeidType4892_ATT4892:=myrec;
		END;
	FUNCTION pAIdLoc4895_AIL4895:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc4895_AIL4895:=myrec;
		END;
	FUNCTION pALocValue4894_ALV4894:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4895_AIL4895;
		 pALocValue4894_ALV4894:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs4891_ACR4891:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4892_ATT4892;
		myrec^.arg2:=pALocValue4894_ALV4894;
		 pACastRhs4891_ACR4891:=myrec;
		END;
	FUNCTION pARhsValue4890_ARV4890:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4891_ACR4891;
		 pARhsValue4890_ARV4890:=myrec;
		END;
	FUNCTION pADyadicValue4880_ADV4880:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4882_ARV4882;
		myrec^.arg2:=pARhsValue4890_ARV4890;
		myrec^.fn:=pAIdentifierDyadic4881_AID4881;
		 pADyadicValue4880_ADV4880:=myrec;
		END;
		(*! try to cast to type: b*)
	FUNCTION pACastRhs4877_ACR4877:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4878_ATT4878;
		myrec^.arg2:=pADyadicValue4880_ADV4880;
		 pACastRhs4877_ACR4877:=myrec;
		END;
	FUNCTION pARhsValue4876_ARV4876:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4877_ACR4877;
		 pARhsValue4876_ARV4876:=myrec;
		END;
	FUNCTION pATypeid4899_AT4899:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ b  ilcg.Param@4ef122}
		myrec^.tag:=param;
		myrec^.index:= 10;
		 pATypeid4899_AT4899:=myrec;
		END;
	FUNCTION pATypeidType4898_ATT4898:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4899_AT4899;
		 pATypeidType4898_ATT4898:=myrec;
		END;
	FUNCTION pAIdentifierDyadic4901_AID4901:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(8);
		 pAIdentifierDyadic4901_AID4901:=myrec;
		END;
	FUNCTION pATypeid4905_AT4905:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t2  ilcg.Param@6a4268}
		myrec^.tag:=param;
		myrec^.index:= 9;
		 pATypeid4905_AT4905:=myrec;
		END;
	FUNCTION pATypeidType4904_ATT4904:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4905_AT4905;
		 pATypeidType4904_ATT4904:=myrec;
		END;
	FUNCTION pAIdLoc4909_AIL4909:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(6);
		 pAIdLoc4909_AIL4909:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4908_AR4908:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4909_AIL4909;
		 pARefval4908_AR4908:=myrec;
		END;
	FUNCTION pADerefRhs4907_ADR4907:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4908_AR4908;
		 pADerefRhs4907_ADR4907:=myrec;
		END;
	FUNCTION pARhsValue4906_ARV4906:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4907_ADR4907;
		 pARhsValue4906_ARV4906:=myrec;
		END;
		(*! try to cast to type: t2*)
	FUNCTION pACastRhs4903_ACR4903:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4904_ATT4904;
		myrec^.arg2:=pARhsValue4906_ARV4906;
		 pACastRhs4903_ACR4903:=myrec;
		END;
	FUNCTION pARhsValue4902_ARV4902:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4903_ACR4903;
		 pARhsValue4902_ARV4902:=myrec;
		END;
	FUNCTION pATypeid4913_AT4913:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t2  ilcg.Param@6a4268}
		myrec^.tag:=param;
		myrec^.index:= 9;
		 pATypeid4913_AT4913:=myrec;
		END;
	FUNCTION pATypeidType4912_ATT4912:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4913_AT4913;
		 pATypeidType4912_ATT4912:=myrec;
		END;
	FUNCTION pAIdLoc4915_AIL4915:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(7);
		 pAIdLoc4915_AIL4915:=myrec;
		END;
	FUNCTION pALocValue4914_ALV4914:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4915_AIL4915;
		 pALocValue4914_ALV4914:=myrec;
		END;
		(*! try to cast to type: t2*)
	FUNCTION pACastRhs4911_ACR4911:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4912_ATT4912;
		myrec^.arg2:=pALocValue4914_ALV4914;
		 pACastRhs4911_ACR4911:=myrec;
		END;
	FUNCTION pARhsValue4910_ARV4910:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4911_ACR4911;
		 pARhsValue4910_ARV4910:=myrec;
		END;
	FUNCTION pADyadicValue4900_ADV4900:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4902_ARV4902;
		myrec^.arg2:=pARhsValue4910_ARV4910;
		myrec^.fn:=pAIdentifierDyadic4901_AID4901;
		 pADyadicValue4900_ADV4900:=myrec;
		END;
		(*! try to cast to type: b*)
	FUNCTION pACastRhs4897_ACR4897:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4898_ATT4898;
		myrec^.arg2:=pADyadicValue4900_ADV4900;
		 pACastRhs4897_ACR4897:=myrec;
		END;
	FUNCTION pARhsValue4896_ARV4896:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4897_ACR4897;
		 pARhsValue4896_ARV4896:=myrec;
		END;
	FUNCTION pADyadicValue4874_ADV4874:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4876_ARV4876;
		myrec^.arg2:=pARhsValue4896_ARV4896;
		myrec^.fn:=pAAndDyadic4875_AAD4875;
		 pADyadicValue4874_ADV4874:=myrec;
		END;
		(*! try to cast to type: b*)
	FUNCTION pACastRhs4871_ACR4871:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4872_ATT4872;
		myrec^.arg2:=pADyadicValue4874_ADV4874;
		 pACastRhs4871_ACR4871:=myrec;
		END;
	FUNCTION pARhsValue4870_ARV4870:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4871_ACR4871;
		 pARhsValue4870_ARV4870:=myrec;
		END;
	FUNCTION pAIdLoc4918_AIL4918:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc4918_AIL4918:=myrec;
		END;
	FUNCTION pALocValue4917_ALV4917:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4918_AIL4918;
		 pALocValue4917_ALV4917:=myrec;
		END;
	FUNCTION pAGotoMeaning4916_AGM4916:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=gotonode;
		myrec^.dest:=pALocValue4917_ALV4917;
		 pAGotoMeaning4916_AGM4916:=myrec;
		END;
	FUNCTION pAIfMeaning4869_AIM4869:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pARhsValue4870_ARV4870;
		myrec^.action:=pAGotoMeaning4916_AGM4916;
		 pAIfMeaning4869_AIM4869:=myrec;
		END;
	FUNCTION pAAssemblypattern4920_AA4920:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'andifgoto ' );
		pappendp(list,3);
		pappends(list,',' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,4);
		pappendp(list,2);
		pappends(list,',' );
		pappendp(list,8);
		pappends(list,',' );
		pappendp(list,6);
		pappends(list,',' );
		pappendp(list,9);
		pappendp(list,7);
		pappends(list,',' );
		pappendp(list,0);
		pAAssemblypattern4920_AA4920:=list;
		END;
	FUNCTION pAAssemblesto4919_AA4919:pprintlist;
	begin
		pAAssemblesto4919_AA4919:=pAAssemblypattern4920_AA4920;
		END;
	FUNCTION pASideeffects4937_AS4937:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4937_AS4937:=nil;
		 pASideeffects4937_AS4937:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4938_AUP4938:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4938_AUP4938:=nil;
		 pAUnconditionalPrecond4938_AUP4938:=myrec;
		END;
	FUNCTION ANDIFGOTO_ANDIFGOTO:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[7]:=patregaddrimmediate_;
		params^[6]:=patanyreg_;
		params^[2]:=patregaddrimmediate_;
		params^[1]:=patanyreg_;
		params^[0]:=patlabel;
		params^[8]:=patcondition_;
		params^[9]:=patint_;
		params^[3]:=patcondition_;
		params^[10]:=patint_;
		params^[4]:=patint_;
		paramcount:=11;
		meaning:=pAIfMeaning4869_AIM4869;
		matchedAssembler:=pAAssemblesto4919_AA4919;
		END;
		ANDIFGOTO_ANDIFGOTO:=myrec;
	END;
	FUNCTION pATypeid4941_AT4941:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ condition  ilcg.pattern@7470d0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4941_AT4941:=myrec;
		END;
	FUNCTION pATypeid4943_AT4943:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ signedreg  ilcg.pattern@7d20c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4943_AT4943:=myrec;
		END;
	FUNCTION pATypeid4945_AT4945:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ regaddrimmediate  ilcg.pattern@375be2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4945_AT4945:=myrec;
		END;
	FUNCTION pATypeid4947_AT4947:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4947_AT4947:=myrec;
		END;
	FUNCTION pATypeid4949_AT4949:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ signed  ilcg.pattern@c6406}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4949_AT4949:=myrec;
		END;
	FUNCTION pAIdLoc4953_AIL4953:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(3);
		 pAIdLoc4953_AIL4953:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4952_AR4952:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4953_AIL4953;
		 pARefval4952_AR4952:=myrec;
		END;
	FUNCTION pAIdentifierDyadic4955_AID4955:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic4955_AID4955:=myrec;
		END;
	FUNCTION pATypeid4959_AT4959:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@7c15c0}
		myrec^.tag:=param;
		myrec^.index:= 4;
		 pATypeid4959_AT4959:=myrec;
		END;
	FUNCTION pATypeidType4958_ATT4958:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4959_AT4959;
		 pATypeidType4958_ATT4958:=myrec;
		END;
	FUNCTION pAIdLoc4963_AIL4963:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc4963_AIL4963:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval4962_AR4962:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4963_AIL4963;
		 pARefval4962_AR4962:=myrec;
		END;
	FUNCTION pADerefRhs4961_ADR4961:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval4962_AR4962;
		 pADerefRhs4961_ADR4961:=myrec;
		END;
	FUNCTION pARhsValue4960_ARV4960:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs4961_ADR4961;
		 pARhsValue4960_ARV4960:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs4957_ACR4957:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4958_ATT4958;
		myrec^.arg2:=pARhsValue4960_ARV4960;
		 pACastRhs4957_ACR4957:=myrec;
		END;
	FUNCTION pARhsValue4956_ARV4956:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4957_ACR4957;
		 pARhsValue4956_ARV4956:=myrec;
		END;
	FUNCTION pATypeid4967_AT4967:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@7c15c0}
		myrec^.tag:=param;
		myrec^.index:= 4;
		 pATypeid4967_AT4967:=myrec;
		END;
	FUNCTION pATypeidType4966_ATT4966:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid4967_AT4967;
		 pATypeidType4966_ATT4966:=myrec;
		END;
	FUNCTION pAIdLoc4969_AIL4969:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc4969_AIL4969:=myrec;
		END;
	FUNCTION pALocValue4968_ALV4968:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc4969_AIL4969;
		 pALocValue4968_ALV4968:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs4965_ACR4965:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType4966_ATT4966;
		myrec^.arg2:=pALocValue4968_ALV4968;
		 pACastRhs4965_ACR4965:=myrec;
		END;
	FUNCTION pARhsValue4964_ARV4964:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs4965_ACR4965;
		 pARhsValue4964_ARV4964:=myrec;
		END;
	FUNCTION pADyadicValue4954_ADV4954:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue4956_ARV4956;
		myrec^.arg2:=pARhsValue4964_ARV4964;
		myrec^.fn:=pAIdentifierDyadic4955_AID4955;
		 pADyadicValue4954_ADV4954:=myrec;
		END;
	FUNCTION pAAssign4951_AA4951:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue4954_ADV4954;
		myrec^.dest:=pARefval4952_AR4952;
		 pAAssign4951_AA4951:=myrec;
		END;
	FUNCTION pAAssignMeaning4950_AAM4950:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4951_AA4951;
		 pAAssignMeaning4950_AAM4950:=myrec;
		END;
	FUNCTION pAAssemblypattern4971_AA4971:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cmp ' );
		pappendp(list,1);
		pappends(list,',' );
		pappends(list,' ' );
		pappendp(list,2);
		pappends(list,'\n set' );
		pappendp(list,0);
		pappends(list,' ' );
		pappendp(list,3);
		pappends(list,'\n sub ' );
		pappendp(list,3);
		pappends(list,',1\n not ' );
		pappendp(list,3);
		pAAssemblypattern4971_AA4971:=list;
		END;
	FUNCTION pAAssemblesto4970_AA4970:pprintlist;
	begin
		pAAssemblesto4970_AA4970:=pAAssemblypattern4971_AA4971;
		END;
	FUNCTION pASideeffects4985_AS4985:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects4985_AS4985:=nil;
		 pASideeffects4985_AS4985:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond4986_AUP4986:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond4986_AUP4986:=nil;
		 pAUnconditionalPrecond4986_AUP4986:=myrec;
		END;
	FUNCTION SET_SET:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patsignedreg_;
		params^[4]:=patsigned_;
		params^[3]:=patbreg_;
		params^[2]:=patregaddrimmediate_;
		params^[0]:=patcondition_;
		paramcount:=6;
		meaning:=pAAssignMeaning4950_AAM4950;
		matchedAssembler:=pAAssemblesto4970_AA4970;
		END;
		SET_SET:=myrec;
	END;
	FUNCTION pATypeid4989_AT4989:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ unsignedcondition  ilcg.pattern@7a4dec}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4989_AT4989:=myrec;
		END;
	FUNCTION pATypeid4991_AT4991:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ureg  ilcg.pattern@56182f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4991_AT4991:=myrec;
		END;
	FUNCTION pATypeid4993_AT4993:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ regaddrimmediate  ilcg.pattern@375be2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4993_AT4993:=myrec;
		END;
	FUNCTION pATypeid4995_AT4995:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4995_AT4995:=myrec;
		END;
	FUNCTION pATypeid4997_AT4997:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ unsigned  ilcg.pattern@6aa95b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid4997_AT4997:=myrec;
		END;
	FUNCTION pAIdLoc5001_AIL5001:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(3);
		 pAIdLoc5001_AIL5001:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5000_AR5000:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5001_AIL5001;
		 pARefval5000_AR5000:=myrec;
		END;
	FUNCTION pAIdentifierDyadic5003_AID5003:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic5003_AID5003:=myrec;
		END;
	FUNCTION pATypeid5007_AT5007:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@bcbc}
		myrec^.tag:=param;
		myrec^.index:= 4;
		 pATypeid5007_AT5007:=myrec;
		END;
	FUNCTION pATypeidType5006_ATT5006:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5007_AT5007;
		 pATypeidType5006_ATT5006:=myrec;
		END;
	FUNCTION pAIdLoc5011_AIL5011:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5011_AIL5011:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5010_AR5010:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5011_AIL5011;
		 pARefval5010_AR5010:=myrec;
		END;
	FUNCTION pADerefRhs5009_ADR5009:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5010_AR5010;
		 pADerefRhs5009_ADR5009:=myrec;
		END;
	FUNCTION pARhsValue5008_ARV5008:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5009_ADR5009;
		 pARhsValue5008_ARV5008:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5005_ACR5005:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5006_ATT5006;
		myrec^.arg2:=pARhsValue5008_ARV5008;
		 pACastRhs5005_ACR5005:=myrec;
		END;
	FUNCTION pARhsValue5004_ARV5004:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5005_ACR5005;
		 pARhsValue5004_ARV5004:=myrec;
		END;
	FUNCTION pATypeid5015_AT5015:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@bcbc}
		myrec^.tag:=param;
		myrec^.index:= 4;
		 pATypeid5015_AT5015:=myrec;
		END;
	FUNCTION pATypeidType5014_ATT5014:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5015_AT5015;
		 pATypeidType5014_ATT5014:=myrec;
		END;
	FUNCTION pAIdLoc5017_AIL5017:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc5017_AIL5017:=myrec;
		END;
	FUNCTION pALocValue5016_ALV5016:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5017_AIL5017;
		 pALocValue5016_ALV5016:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5013_ACR5013:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5014_ATT5014;
		myrec^.arg2:=pALocValue5016_ALV5016;
		 pACastRhs5013_ACR5013:=myrec;
		END;
	FUNCTION pARhsValue5012_ARV5012:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5013_ACR5013;
		 pARhsValue5012_ARV5012:=myrec;
		END;
	FUNCTION pADyadicValue5002_ADV5002:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5004_ARV5004;
		myrec^.arg2:=pARhsValue5012_ARV5012;
		myrec^.fn:=pAIdentifierDyadic5003_AID5003;
		 pADyadicValue5002_ADV5002:=myrec;
		END;
	FUNCTION pAAssign4999_AA4999:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue5002_ADV5002;
		myrec^.dest:=pARefval5000_AR5000;
		 pAAssign4999_AA4999:=myrec;
		END;
	FUNCTION pAAssignMeaning4998_AAM4998:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign4999_AA4999;
		 pAAssignMeaning4998_AAM4998:=myrec;
		END;
	FUNCTION pAAssemblypattern5019_AA5019:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cmp ' );
		pappendp(list,1);
		pappends(list,',' );
		pappends(list,' ' );
		pappendp(list,2);
		pappends(list,'\n set' );
		pappendp(list,0);
		pappends(list,' ' );
		pappendp(list,3);
		pappends(list,'\n sub ' );
		pappendp(list,3);
		pappends(list,',1\n not ' );
		pappendp(list,3);
		pAAssemblypattern5019_AA5019:=list;
		END;
	FUNCTION pAAssemblesto5018_AA5018:pprintlist;
	begin
		pAAssemblesto5018_AA5018:=pAAssemblypattern5019_AA5019;
		END;
	FUNCTION pASideeffects5033_AS5033:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5033_AS5033:=nil;
		 pASideeffects5033_AS5033:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5034_AUP5034:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5034_AUP5034:=nil;
		 pAUnconditionalPrecond5034_AUP5034:=myrec;
		END;
	FUNCTION SETU_SETU:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patureg_;
		params^[4]:=patunsigned_;
		params^[3]:=patbreg_;
		params^[2]:=patregaddrimmediate_;
		params^[0]:=patunsignedcondition_;
		paramcount:=6;
		meaning:=pAAssignMeaning4998_AAM4998;
		matchedAssembler:=pAAssemblesto5018_AA5018;
		END;
		SETU_SETU:=myrec;
	END;
	FUNCTION pATypeid5039_AT5039:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5039_AT5039:=myrec;
		END;
	FUNCTION pAInt8Signed5046_AI8S5046:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed5046_AI8S5046:=myrec;
		END;
	FUNCTION pASignedTformat5045_AST5045:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed5046_AI8S5046;
		 pASignedTformat5045_AST5045:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5044_ATP5044:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype5044_ATP5044:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5043_APT5043:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType5043_APT5043:=myrec;
		END;
	FUNCTION pAIdLoc5050_AIL5050:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5050_AIL5050:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5049_AR5049:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5050_AIL5050;
		 pARefval5049_AR5049:=myrec;
		END;
	FUNCTION pADerefRhs5048_ADR5048:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5049_AR5049;
		 pADerefRhs5048_ADR5048:=myrec;
		END;
	FUNCTION pARhsValue5047_ARV5047:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5048_ADR5048;
		 pARhsValue5047_ARV5047:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs5042_ACR5042:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType5043_APT5043;
		myrec^.arg2:=pARhsValue5047_ARV5047;
		 pACastRhs5042_ACR5042:=myrec;
		END;
	FUNCTION pARhsValue5041_ARV5041:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5042_ACR5042;
		 pARhsValue5041_ARV5041:=myrec;
		END;
	FUNCTION pAIdLoc5053_AIL5053:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5053_AIL5053:=myrec;
		END;
	FUNCTION pALocValue5052_ALV5052:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5053_AIL5053;
		 pALocValue5052_ALV5052:=myrec;
		END;
	FUNCTION pAGotoMeaning5051_AGM5051:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=gotonode;
		myrec^.dest:=pALocValue5052_ALV5052;
		 pAGotoMeaning5051_AGM5051:=myrec;
		END;
	FUNCTION pAIfMeaning5040_AIM5040:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pARhsValue5041_ARV5041;
		myrec^.action:=pAGotoMeaning5051_AGM5051;
		 pAIfMeaning5040_AIM5040:=myrec;
		END;
	FUNCTION pAAssemblypattern5055_AA5055:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'test ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,1);
		pappends(list,'\n jnz near ' );
		pappendp(list,0);
		pAAssemblypattern5055_AA5055:=list;
		END;
	FUNCTION pAAssemblesto5054_AA5054:pprintlist;
	begin
		pAAssemblesto5054_AA5054:=pAAssemblypattern5055_AA5055;
		END;
	FUNCTION pASideeffects5062_AS5062:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5062_AS5062:=nil;
		 pASideeffects5062_AS5062:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5063_AUP5063:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5063_AUP5063:=nil;
		 pAUnconditionalPrecond5063_AUP5063:=myrec;
		END;
	FUNCTION IFBOOL_IFBOOL:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patlabel;
		params^[1]:=patbreg_;
		paramcount:=3;
		meaning:=pAIfMeaning5040_AIM5040;
		matchedAssembler:=pAAssemblesto5054_AA5054;
		END;
		IFBOOL_IFBOOL:=myrec;
	END;
	FUNCTION pATypeid5066_AT5066:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5066_AT5066:=myrec;
		END;
	FUNCTION pATypeid5068_AT5068:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5068_AT5068:=myrec;
		END;
	FUNCTION pAOrDyadic5071_AOD5071:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpor;
		 pAOrDyadic5071_AOD5071:=myrec;
		END;
	FUNCTION pALtDyadic5073_ALD5073:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcplt;
		 pALtDyadic5073_ALD5073:=myrec;
		END;
	FUNCTION pAIdLoc5077_AIL5077:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5077_AIL5077:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5076_AR5076:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5077_AIL5077;
		 pARefval5076_AR5076:=myrec;
		END;
	FUNCTION pADerefRhs5075_ADR5075:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5076_AR5076;
		 pADerefRhs5075_ADR5075:=myrec;
		END;
	FUNCTION pARhsValue5074_ARV5074:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5075_ADR5075;
		 pARhsValue5074_ARV5074:=myrec;
		END;
	FUNCTION pASigned5086_AS5086:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned5086_AS5086:=myrec;
		END;
	FUNCTION pASignedTformat5085_AST5085:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned5086_AS5086;
		 pASignedTformat5085_AST5085:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5084_ATP5084:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype5084_ATP5084:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5083_APT5083:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType5083_APT5083:=myrec;
		END;
	FUNCTION pAReference5082_AR5082:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType5083_APT5083;
		 pAReference5082_AR5082:=myrec;
		END;
	FUNCTION pAReftypeType5081_ART5081:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference5082_AR5082;
		 pAReftypeType5081_ART5081:=myrec;
		END;
	FUNCTION pAIdLoc5091_AIL5091:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5091_AIL5091:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5090_AR5090:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5091_AIL5091;
		 pARefval5090_AR5090:=myrec;
		END;
	FUNCTION pADerefRhs5089_ADR5089:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5090_AR5090;
		 pADerefRhs5089_ADR5089:=myrec;
		END;
	FUNCTION pARhsValue5088_ARV5088:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5089_ADR5089;
		 pARhsValue5088_ARV5088:=myrec;
		END;
	FUNCTION pAMemoryLoc5087_AML5087:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pARhsValue5088_ARV5088;
		 pAMemoryLoc5087_AML5087:=myrec;
		END;
	FUNCTION pARefcastRefval5080_ARR5080:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType5081_ART5081;
		myrec^.arg2:=pAMemoryLoc5087_AML5087;
		 pARefcastRefval5080_ARR5080:=myrec;
		END;
	FUNCTION pADerefRhs5079_ADR5079:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval5080_ARR5080;
		 pADerefRhs5079_ADR5079:=myrec;
		END;
	FUNCTION pARhsValue5078_ARV5078:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5079_ADR5079;
		 pARhsValue5078_ARV5078:=myrec;
		END;
	FUNCTION pADyadicValue5072_ADV5072:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5074_ARV5074;
		myrec^.arg2:=pARhsValue5078_ARV5078;
		myrec^.fn:=pALtDyadic5073_ALD5073;
		 pADyadicValue5072_ADV5072:=myrec;
		END;
	FUNCTION pAGtDyadic5093_AGD5093:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpgt;
		 pAGtDyadic5093_AGD5093:=myrec;
		END;
	FUNCTION pAIdLoc5097_AIL5097:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5097_AIL5097:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5096_AR5096:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5097_AIL5097;
		 pARefval5096_AR5096:=myrec;
		END;
	FUNCTION pADerefRhs5095_ADR5095:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5096_AR5096;
		 pADerefRhs5095_ADR5095:=myrec;
		END;
	FUNCTION pARhsValue5094_ARV5094:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5095_ADR5095;
		 pARhsValue5094_ARV5094:=myrec;
		END;
	FUNCTION pASigned5106_AS5106:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned5106_AS5106:=myrec;
		END;
	FUNCTION pASignedTformat5105_AST5105:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned5106_AS5106;
		 pASignedTformat5105_AST5105:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5104_ATP5104:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype5104_ATP5104:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5103_APT5103:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType5103_APT5103:=myrec;
		END;
	FUNCTION pAReference5102_AR5102:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType5103_APT5103;
		 pAReference5102_AR5102:=myrec;
		END;
	FUNCTION pAReftypeType5101_ART5101:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference5102_AR5102;
		 pAReftypeType5101_ART5101:=myrec;
		END;
	FUNCTION pAPlusDyadic5109_APD5109:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic5109_APD5109:=myrec;
		END;
	FUNCTION pAIdLoc5113_AIL5113:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5113_AIL5113:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5112_AR5112:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5113_AIL5113;
		 pARefval5112_AR5112:=myrec;
		END;
	FUNCTION pADerefRhs5111_ADR5111:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5112_AR5112;
		 pADerefRhs5111_ADR5111:=myrec;
		END;
	FUNCTION pARhsValue5110_ARV5110:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5111_ADR5111;
		 pARhsValue5110_ARV5110:=myrec;
		END;
	FUNCTION pAOptionalsign5117_AO5117:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign5117_AO5117:=nil;
		 pAOptionalsign5117_AO5117:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber5116_AIN5116:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber5116_AIN5116:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs5115_ANR5115:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber5116_AIN5116;
		 pANumberRhs5115_ANR5115:=myrec;
		END;
	FUNCTION pARhsValue5114_ARV5114:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs5115_ANR5115;
		 pARhsValue5114_ARV5114:=myrec;
		END;
	FUNCTION pADyadicValue5108_ADV5108:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5110_ARV5110;
		myrec^.arg2:=pARhsValue5114_ARV5114;
		myrec^.fn:=pAPlusDyadic5109_APD5109;
		 pADyadicValue5108_ADV5108:=myrec;
		END;
	FUNCTION pAMemoryLoc5107_AML5107:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pADyadicValue5108_ADV5108;
		 pAMemoryLoc5107_AML5107:=myrec;
		END;
	FUNCTION pARefcastRefval5100_ARR5100:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType5101_ART5101;
		myrec^.arg2:=pAMemoryLoc5107_AML5107;
		 pARefcastRefval5100_ARR5100:=myrec;
		END;
	FUNCTION pADerefRhs5099_ADR5099:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval5100_ARR5100;
		 pADerefRhs5099_ADR5099:=myrec;
		END;
	FUNCTION pARhsValue5098_ARV5098:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5099_ADR5099;
		 pARhsValue5098_ARV5098:=myrec;
		END;
	FUNCTION pADyadicValue5092_ADV5092:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5094_ARV5094;
		myrec^.arg2:=pARhsValue5098_ARV5098;
		myrec^.fn:=pAGtDyadic5093_AGD5093;
		 pADyadicValue5092_ADV5092:=myrec;
		END;
	FUNCTION pADyadicValue5070_ADV5070:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pADyadicValue5072_ADV5072;
		myrec^.arg2:=pADyadicValue5092_ADV5092;
		myrec^.fn:=pAOrDyadic5071_AOD5071;
		 pADyadicValue5070_ADV5070:=myrec;
		END;
	FUNCTION pAOptionalsign5122_AO5122:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign5122_AO5122:=nil;
		 pAOptionalsign5122_AO5122:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber5121_AIN5121:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=5 ;
		 pAIntegerNumber5121_AIN5121:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs5120_ANR5120:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber5121_AIN5121;
		 pANumberRhs5120_ANR5120:=myrec;
		END;
	FUNCTION pARhsValue5119_ARV5119:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs5120_ANR5120;
		 pARhsValue5119_ARV5119:=myrec;
		END;
	FUNCTION pAFailMeaning5118_AFM5118:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=failure;
		myrec^.arg:=pARhsValue5119_ARV5119;
		 pAFailMeaning5118_AFM5118:=myrec;
		END;
	FUNCTION pAIfMeaning5069_AIM5069:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pADyadicValue5070_ADV5070;
		myrec^.action:=pAFailMeaning5118_AFM5118;
		 pAIfMeaning5069_AIM5069:=myrec;
		END;
	FUNCTION pAAssemblypattern5124_AA5124:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'bound ' );
		pappendp(list,1);
		pappends(list,',[' );
		pappendp(list,0);
		pappends(list,']' );
		pAAssemblypattern5124_AA5124:=list;
		END;
	FUNCTION pAAssemblesto5123_AA5123:pprintlist;
	begin
		pAAssemblesto5123_AA5123:=pAAssemblypattern5124_AA5124;
		END;
	FUNCTION pASideeffects5130_AS5130:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5130_AS5130:=nil;
		 pASideeffects5130_AS5130:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5131_AUP5131:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5131_AUP5131:=nil;
		 pAUnconditionalPrecond5131_AUP5131:=myrec;
		END;
	FUNCTION BOUND0_BOUND0:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patreg_;
		params^[0]:=patreg_;
		paramcount:=3;
		meaning:=pAIfMeaning5069_AIM5069;
		matchedAssembler:=pAAssemblesto5123_AA5123;
		END;
		BOUND0_BOUND0:=myrec;
	END;
	FUNCTION pATypeid5134_AT5134:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5134_AT5134:=myrec;
		END;
	FUNCTION pATypeid5136_AT5136:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5136_AT5136:=myrec;
		END;
	FUNCTION pAOrDyadic5139_AOD5139:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpor;
		 pAOrDyadic5139_AOD5139:=myrec;
		END;
	FUNCTION pALtDyadic5141_ALD5141:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcplt;
		 pALtDyadic5141_ALD5141:=myrec;
		END;
	FUNCTION pAIdLoc5145_AIL5145:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5145_AIL5145:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5144_AR5144:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5145_AIL5145;
		 pARefval5144_AR5144:=myrec;
		END;
	FUNCTION pADerefRhs5143_ADR5143:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5144_AR5144;
		 pADerefRhs5143_ADR5143:=myrec;
		END;
	FUNCTION pARhsValue5142_ARV5142:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5143_ADR5143;
		 pARhsValue5142_ARV5142:=myrec;
		END;
	FUNCTION pASigned5154_AS5154:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned5154_AS5154:=myrec;
		END;
	FUNCTION pASignedTformat5153_AST5153:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned5154_AS5154;
		 pASignedTformat5153_AST5153:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5152_ATP5152:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype5152_ATP5152:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5151_APT5151:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType5151_APT5151:=myrec;
		END;
	FUNCTION pAReference5150_AR5150:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType5151_APT5151;
		 pAReference5150_AR5150:=myrec;
		END;
	FUNCTION pAReftypeType5149_ART5149:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference5150_AR5150;
		 pAReftypeType5149_ART5149:=myrec;
		END;
	FUNCTION pAPlusDyadic5157_APD5157:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic5157_APD5157:=myrec;
		END;
	FUNCTION pAIdLoc5161_AIL5161:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5161_AIL5161:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5160_AR5160:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5161_AIL5161;
		 pARefval5160_AR5160:=myrec;
		END;
	FUNCTION pADerefRhs5159_ADR5159:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5160_AR5160;
		 pADerefRhs5159_ADR5159:=myrec;
		END;
	FUNCTION pARhsValue5158_ARV5158:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5159_ADR5159;
		 pARhsValue5158_ARV5158:=myrec;
		END;
	FUNCTION pAOptionalsign5165_AO5165:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign5165_AO5165:=nil;
		 pAOptionalsign5165_AO5165:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber5164_AIN5164:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber5164_AIN5164:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs5163_ANR5163:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber5164_AIN5164;
		 pANumberRhs5163_ANR5163:=myrec;
		END;
	FUNCTION pARhsValue5162_ARV5162:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs5163_ANR5163;
		 pARhsValue5162_ARV5162:=myrec;
		END;
	FUNCTION pADyadicValue5156_ADV5156:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5158_ARV5158;
		myrec^.arg2:=pARhsValue5162_ARV5162;
		myrec^.fn:=pAPlusDyadic5157_APD5157;
		 pADyadicValue5156_ADV5156:=myrec;
		END;
	FUNCTION pAMemoryLoc5155_AML5155:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pADyadicValue5156_ADV5156;
		 pAMemoryLoc5155_AML5155:=myrec;
		END;
	FUNCTION pARefcastRefval5148_ARR5148:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType5149_ART5149;
		myrec^.arg2:=pAMemoryLoc5155_AML5155;
		 pARefcastRefval5148_ARR5148:=myrec;
		END;
	FUNCTION pADerefRhs5147_ADR5147:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval5148_ARR5148;
		 pADerefRhs5147_ADR5147:=myrec;
		END;
	FUNCTION pARhsValue5146_ARV5146:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5147_ADR5147;
		 pARhsValue5146_ARV5146:=myrec;
		END;
	FUNCTION pADyadicValue5140_ADV5140:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5142_ARV5142;
		myrec^.arg2:=pARhsValue5146_ARV5146;
		myrec^.fn:=pALtDyadic5141_ALD5141;
		 pADyadicValue5140_ADV5140:=myrec;
		END;
	FUNCTION pAGtDyadic5167_AGD5167:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpgt;
		 pAGtDyadic5167_AGD5167:=myrec;
		END;
	FUNCTION pAIdLoc5171_AIL5171:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5171_AIL5171:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5170_AR5170:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5171_AIL5171;
		 pARefval5170_AR5170:=myrec;
		END;
	FUNCTION pADerefRhs5169_ADR5169:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5170_AR5170;
		 pADerefRhs5169_ADR5169:=myrec;
		END;
	FUNCTION pARhsValue5168_ARV5168:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5169_ADR5169;
		 pARhsValue5168_ARV5168:=myrec;
		END;
	FUNCTION pASigned5180_AS5180:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned5180_AS5180:=myrec;
		END;
	FUNCTION pASignedTformat5179_AST5179:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned5180_AS5180;
		 pASignedTformat5179_AST5179:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5178_ATP5178:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype5178_ATP5178:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5177_APT5177:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType5177_APT5177:=myrec;
		END;
	FUNCTION pAReference5176_AR5176:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType5177_APT5177;
		 pAReference5176_AR5176:=myrec;
		END;
	FUNCTION pAReftypeType5175_ART5175:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference5176_AR5176;
		 pAReftypeType5175_ART5175:=myrec;
		END;
	FUNCTION pAPlusDyadic5183_APD5183:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic5183_APD5183:=myrec;
		END;
	FUNCTION pAIdLoc5187_AIL5187:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5187_AIL5187:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5186_AR5186:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5187_AIL5187;
		 pARefval5186_AR5186:=myrec;
		END;
	FUNCTION pADerefRhs5185_ADR5185:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5186_AR5186;
		 pADerefRhs5185_ADR5185:=myrec;
		END;
	FUNCTION pARhsValue5184_ARV5184:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5185_ADR5185;
		 pARhsValue5184_ARV5184:=myrec;
		END;
	FUNCTION pAOptionalsign5191_AO5191:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign5191_AO5191:=nil;
		 pAOptionalsign5191_AO5191:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber5190_AIN5190:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber5190_AIN5190:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs5189_ANR5189:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber5190_AIN5190;
		 pANumberRhs5189_ANR5189:=myrec;
		END;
	FUNCTION pARhsValue5188_ARV5188:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs5189_ANR5189;
		 pARhsValue5188_ARV5188:=myrec;
		END;
	FUNCTION pADyadicValue5182_ADV5182:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5184_ARV5184;
		myrec^.arg2:=pARhsValue5188_ARV5188;
		myrec^.fn:=pAPlusDyadic5183_APD5183;
		 pADyadicValue5182_ADV5182:=myrec;
		END;
	FUNCTION pAMemoryLoc5181_AML5181:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pADyadicValue5182_ADV5182;
		 pAMemoryLoc5181_AML5181:=myrec;
		END;
	FUNCTION pARefcastRefval5174_ARR5174:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType5175_ART5175;
		myrec^.arg2:=pAMemoryLoc5181_AML5181;
		 pARefcastRefval5174_ARR5174:=myrec;
		END;
	FUNCTION pADerefRhs5173_ADR5173:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval5174_ARR5174;
		 pADerefRhs5173_ADR5173:=myrec;
		END;
	FUNCTION pARhsValue5172_ARV5172:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5173_ADR5173;
		 pARhsValue5172_ARV5172:=myrec;
		END;
	FUNCTION pADyadicValue5166_ADV5166:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5168_ARV5168;
		myrec^.arg2:=pARhsValue5172_ARV5172;
		myrec^.fn:=pAGtDyadic5167_AGD5167;
		 pADyadicValue5166_ADV5166:=myrec;
		END;
	FUNCTION pADyadicValue5138_ADV5138:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pADyadicValue5140_ADV5140;
		myrec^.arg2:=pADyadicValue5166_ADV5166;
		myrec^.fn:=pAOrDyadic5139_AOD5139;
		 pADyadicValue5138_ADV5138:=myrec;
		END;
	FUNCTION pAOptionalsign5196_AO5196:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign5196_AO5196:=nil;
		 pAOptionalsign5196_AO5196:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber5195_AIN5195:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=5 ;
		 pAIntegerNumber5195_AIN5195:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs5194_ANR5194:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber5195_AIN5195;
		 pANumberRhs5194_ANR5194:=myrec;
		END;
	FUNCTION pARhsValue5193_ARV5193:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs5194_ANR5194;
		 pARhsValue5193_ARV5193:=myrec;
		END;
	FUNCTION pAFailMeaning5192_AFM5192:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=failure;
		myrec^.arg:=pARhsValue5193_ARV5193;
		 pAFailMeaning5192_AFM5192:=myrec;
		END;
	FUNCTION pAIfMeaning5137_AIM5137:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pADyadicValue5138_ADV5138;
		myrec^.action:=pAFailMeaning5192_AFM5192;
		 pAIfMeaning5137_AIM5137:=myrec;
		END;
	FUNCTION pAAssemblypattern5198_AA5198:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'bound ' );
		pappendp(list,1);
		pappends(list,',[' );
		pappendp(list,0);
		pappends(list,'+4]' );
		pAAssemblypattern5198_AA5198:=list;
		END;
	FUNCTION pAAssemblesto5197_AA5197:pprintlist;
	begin
		pAAssemblesto5197_AA5197:=pAAssemblypattern5198_AA5198;
		END;
	FUNCTION pASideeffects5204_AS5204:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5204_AS5204:=nil;
		 pASideeffects5204_AS5204:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5205_AUP5205:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5205_AUP5205:=nil;
		 pAUnconditionalPrecond5205_AUP5205:=myrec;
		END;
	FUNCTION BOUND4_BOUND4:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patreg_;
		params^[0]:=patreg_;
		paramcount:=3;
		meaning:=pAIfMeaning5137_AIM5137;
		matchedAssembler:=pAAssemblesto5197_AA5197;
		END;
		BOUND4_BOUND4:=myrec;
	END;
	FUNCTION pATypeid5208_AT5208:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5208_AT5208:=myrec;
		END;
	FUNCTION pATypeid5210_AT5210:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5210_AT5210:=myrec;
		END;
	FUNCTION pAOrDyadic5213_AOD5213:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpor;
		 pAOrDyadic5213_AOD5213:=myrec;
		END;
	FUNCTION pALtDyadic5215_ALD5215:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcplt;
		 pALtDyadic5215_ALD5215:=myrec;
		END;
	FUNCTION pAIdLoc5219_AIL5219:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5219_AIL5219:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5218_AR5218:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5219_AIL5219;
		 pARefval5218_AR5218:=myrec;
		END;
	FUNCTION pADerefRhs5217_ADR5217:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5218_AR5218;
		 pADerefRhs5217_ADR5217:=myrec;
		END;
	FUNCTION pARhsValue5216_ARV5216:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5217_ADR5217;
		 pARhsValue5216_ARV5216:=myrec;
		END;
	FUNCTION pASigned5228_AS5228:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned5228_AS5228:=myrec;
		END;
	FUNCTION pASignedTformat5227_AST5227:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned5228_AS5228;
		 pASignedTformat5227_AST5227:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5226_ATP5226:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype5226_ATP5226:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5225_APT5225:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType5225_APT5225:=myrec;
		END;
	FUNCTION pAReference5224_AR5224:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType5225_APT5225;
		 pAReference5224_AR5224:=myrec;
		END;
	FUNCTION pAReftypeType5223_ART5223:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference5224_AR5224;
		 pAReftypeType5223_ART5223:=myrec;
		END;
	FUNCTION pAPlusDyadic5231_APD5231:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic5231_APD5231:=myrec;
		END;
	FUNCTION pAIdLoc5235_AIL5235:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5235_AIL5235:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5234_AR5234:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5235_AIL5235;
		 pARefval5234_AR5234:=myrec;
		END;
	FUNCTION pADerefRhs5233_ADR5233:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5234_AR5234;
		 pADerefRhs5233_ADR5233:=myrec;
		END;
	FUNCTION pARhsValue5232_ARV5232:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5233_ADR5233;
		 pARhsValue5232_ARV5232:=myrec;
		END;
	FUNCTION pAOptionalsign5239_AO5239:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign5239_AO5239:=nil;
		 pAOptionalsign5239_AO5239:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber5238_AIN5238:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=16 ;
		 pAIntegerNumber5238_AIN5238:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs5237_ANR5237:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber5238_AIN5238;
		 pANumberRhs5237_ANR5237:=myrec;
		END;
	FUNCTION pARhsValue5236_ARV5236:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs5237_ANR5237;
		 pARhsValue5236_ARV5236:=myrec;
		END;
	FUNCTION pADyadicValue5230_ADV5230:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5232_ARV5232;
		myrec^.arg2:=pARhsValue5236_ARV5236;
		myrec^.fn:=pAPlusDyadic5231_APD5231;
		 pADyadicValue5230_ADV5230:=myrec;
		END;
	FUNCTION pAMemoryLoc5229_AML5229:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pADyadicValue5230_ADV5230;
		 pAMemoryLoc5229_AML5229:=myrec;
		END;
	FUNCTION pARefcastRefval5222_ARR5222:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType5223_ART5223;
		myrec^.arg2:=pAMemoryLoc5229_AML5229;
		 pARefcastRefval5222_ARR5222:=myrec;
		END;
	FUNCTION pADerefRhs5221_ADR5221:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval5222_ARR5222;
		 pADerefRhs5221_ADR5221:=myrec;
		END;
	FUNCTION pARhsValue5220_ARV5220:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5221_ADR5221;
		 pARhsValue5220_ARV5220:=myrec;
		END;
	FUNCTION pADyadicValue5214_ADV5214:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5216_ARV5216;
		myrec^.arg2:=pARhsValue5220_ARV5220;
		myrec^.fn:=pALtDyadic5215_ALD5215;
		 pADyadicValue5214_ADV5214:=myrec;
		END;
	FUNCTION pAGtDyadic5241_AGD5241:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpgt;
		 pAGtDyadic5241_AGD5241:=myrec;
		END;
	FUNCTION pAIdLoc5245_AIL5245:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5245_AIL5245:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5244_AR5244:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5245_AIL5245;
		 pARefval5244_AR5244:=myrec;
		END;
	FUNCTION pADerefRhs5243_ADR5243:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5244_AR5244;
		 pADerefRhs5243_ADR5243:=myrec;
		END;
	FUNCTION pARhsValue5242_ARV5242:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5243_ADR5243;
		 pARhsValue5242_ARV5242:=myrec;
		END;
	FUNCTION pASigned5254_AS5254:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned5254_AS5254:=myrec;
		END;
	FUNCTION pASignedTformat5253_AST5253:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned5254_AS5254;
		 pASignedTformat5253_AST5253:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5252_ATP5252:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype5252_ATP5252:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5251_APT5251:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType5251_APT5251:=myrec;
		END;
	FUNCTION pAReference5250_AR5250:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType5251_APT5251;
		 pAReference5250_AR5250:=myrec;
		END;
	FUNCTION pAReftypeType5249_ART5249:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference5250_AR5250;
		 pAReftypeType5249_ART5249:=myrec;
		END;
	FUNCTION pAPlusDyadic5257_APD5257:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic5257_APD5257:=myrec;
		END;
	FUNCTION pAIdLoc5261_AIL5261:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5261_AIL5261:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5260_AR5260:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5261_AIL5261;
		 pARefval5260_AR5260:=myrec;
		END;
	FUNCTION pADerefRhs5259_ADR5259:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5260_AR5260;
		 pADerefRhs5259_ADR5259:=myrec;
		END;
	FUNCTION pARhsValue5258_ARV5258:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5259_ADR5259;
		 pARhsValue5258_ARV5258:=myrec;
		END;
	FUNCTION pAOptionalsign5265_AO5265:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign5265_AO5265:=nil;
		 pAOptionalsign5265_AO5265:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber5264_AIN5264:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=20 ;
		 pAIntegerNumber5264_AIN5264:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs5263_ANR5263:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber5264_AIN5264;
		 pANumberRhs5263_ANR5263:=myrec;
		END;
	FUNCTION pARhsValue5262_ARV5262:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs5263_ANR5263;
		 pARhsValue5262_ARV5262:=myrec;
		END;
	FUNCTION pADyadicValue5256_ADV5256:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5258_ARV5258;
		myrec^.arg2:=pARhsValue5262_ARV5262;
		myrec^.fn:=pAPlusDyadic5257_APD5257;
		 pADyadicValue5256_ADV5256:=myrec;
		END;
	FUNCTION pAMemoryLoc5255_AML5255:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pADyadicValue5256_ADV5256;
		 pAMemoryLoc5255_AML5255:=myrec;
		END;
	FUNCTION pARefcastRefval5248_ARR5248:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType5249_ART5249;
		myrec^.arg2:=pAMemoryLoc5255_AML5255;
		 pARefcastRefval5248_ARR5248:=myrec;
		END;
	FUNCTION pADerefRhs5247_ADR5247:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval5248_ARR5248;
		 pADerefRhs5247_ADR5247:=myrec;
		END;
	FUNCTION pARhsValue5246_ARV5246:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5247_ADR5247;
		 pARhsValue5246_ARV5246:=myrec;
		END;
	FUNCTION pADyadicValue5240_ADV5240:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5242_ARV5242;
		myrec^.arg2:=pARhsValue5246_ARV5246;
		myrec^.fn:=pAGtDyadic5241_AGD5241;
		 pADyadicValue5240_ADV5240:=myrec;
		END;
	FUNCTION pADyadicValue5212_ADV5212:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pADyadicValue5214_ADV5214;
		myrec^.arg2:=pADyadicValue5240_ADV5240;
		myrec^.fn:=pAOrDyadic5213_AOD5213;
		 pADyadicValue5212_ADV5212:=myrec;
		END;
	FUNCTION pAOptionalsign5270_AO5270:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign5270_AO5270:=nil;
		 pAOptionalsign5270_AO5270:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber5269_AIN5269:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=5 ;
		 pAIntegerNumber5269_AIN5269:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs5268_ANR5268:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber5269_AIN5269;
		 pANumberRhs5268_ANR5268:=myrec;
		END;
	FUNCTION pARhsValue5267_ARV5267:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs5268_ANR5268;
		 pARhsValue5267_ARV5267:=myrec;
		END;
	FUNCTION pAFailMeaning5266_AFM5266:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=failure;
		myrec^.arg:=pARhsValue5267_ARV5267;
		 pAFailMeaning5266_AFM5266:=myrec;
		END;
	FUNCTION pAIfMeaning5211_AIM5211:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pADyadicValue5212_ADV5212;
		myrec^.action:=pAFailMeaning5266_AFM5266;
		 pAIfMeaning5211_AIM5211:=myrec;
		END;
	FUNCTION pAAssemblypattern5272_AA5272:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'bound ' );
		pappendp(list,1);
		pappends(list,',[' );
		pappendp(list,0);
		pappends(list,'+16]' );
		pAAssemblypattern5272_AA5272:=list;
		END;
	FUNCTION pAAssemblesto5271_AA5271:pprintlist;
	begin
		pAAssemblesto5271_AA5271:=pAAssemblypattern5272_AA5272;
		END;
	FUNCTION pASideeffects5278_AS5278:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5278_AS5278:=nil;
		 pASideeffects5278_AS5278:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5279_AUP5279:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5279_AUP5279:=nil;
		 pAUnconditionalPrecond5279_AUP5279:=myrec;
		END;
	FUNCTION BOUND16_BOUND16:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patreg_;
		params^[0]:=patreg_;
		paramcount:=3;
		meaning:=pAIfMeaning5211_AIM5211;
		matchedAssembler:=pAAssemblesto5271_AA5271;
		END;
		BOUND16_BOUND16:=myrec;
	END;
	FUNCTION pATypeid5282_AT5282:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5282_AT5282:=myrec;
		END;
	FUNCTION pATypeid5284_AT5284:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5284_AT5284:=myrec;
		END;
	FUNCTION pAInt8Signed5293_AI8S5293:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed5293_AI8S5293:=myrec;
		END;
	FUNCTION pASignedTformat5292_AST5292:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed5293_AI8S5293;
		 pASignedTformat5292_AST5292:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5291_ATP5291:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype5291_ATP5291:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5290_APT5290:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType5290_APT5290:=myrec;
		END;
	FUNCTION pAAndDyadic5295_AAD5295:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpand;
		 pAAndDyadic5295_AAD5295:=myrec;
		END;
	FUNCTION pAUint8Unsigned5301_AU8U5301:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned5301_AU8U5301:=myrec;
		END;
	FUNCTION pAUnsignedTformat5300_AUT5300:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned5301_AU8U5301;
		 pAUnsignedTformat5300_AUT5300:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5299_ATP5299:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype5299_ATP5299:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5298_APT5298:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType5298_APT5298:=myrec;
		END;
	FUNCTION pAIdLoc5307_AIL5307:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5307_AIL5307:=myrec;
		END;
	FUNCTION pALocValue5306_ALV5306:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5307_AIL5307;
		 pALocValue5306_ALV5306:=myrec;
		END;
	FUNCTION pAMemoryLoc5305_AML5305:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pALocValue5306_ALV5306;
		 pAMemoryLoc5305_AML5305:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5304_AR5304:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAMemoryLoc5305_AML5305;
		 pARefval5304_AR5304:=myrec;
		END;
	FUNCTION pADerefRhs5303_ADR5303:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5304_AR5304;
		 pADerefRhs5303_ADR5303:=myrec;
		END;
	FUNCTION pARhsValue5302_ARV5302:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5303_ADR5303;
		 pARhsValue5302_ARV5302:=myrec;
		END;
		(*! try to cast to type: uint8*)
	FUNCTION pACastRhs5297_ACR5297:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType5298_APT5298;
		myrec^.arg2:=pARhsValue5302_ARV5302;
		 pACastRhs5297_ACR5297:=myrec;
		END;
	FUNCTION pARhsValue5296_ARV5296:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5297_ACR5297;
		 pARhsValue5296_ARV5296:=myrec;
		END;
	FUNCTION pAShlDyadic5309_ASD5309:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpshl;
		 pAShlDyadic5309_ASD5309:=myrec;
		END;
	FUNCTION pAUint8Unsigned5315_AU8U5315:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned5315_AU8U5315:=myrec;
		END;
	FUNCTION pAUnsignedTformat5314_AUT5314:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned5315_AU8U5315;
		 pAUnsignedTformat5314_AUT5314:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5313_ATP5313:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype5313_ATP5313:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5312_APT5312:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType5312_APT5312:=myrec;
		END;
	FUNCTION pAOptionalsign5319_AO5319:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign5319_AO5319:=nil;
		 pAOptionalsign5319_AO5319:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber5318_AIN5318:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=1 ;
		 pAIntegerNumber5318_AIN5318:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs5317_ANR5317:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber5318_AIN5318;
		 pANumberRhs5317_ANR5317:=myrec;
		END;
	FUNCTION pARhsValue5316_ARV5316:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs5317_ANR5317;
		 pARhsValue5316_ARV5316:=myrec;
		END;
		(*! try to cast to type: uint8*)
	FUNCTION pACastRhs5311_ACR5311:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType5312_APT5312;
		myrec^.arg2:=pARhsValue5316_ARV5316;
		 pACastRhs5311_ACR5311:=myrec;
		END;
	FUNCTION pARhsValue5310_ARV5310:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5311_ACR5311;
		 pARhsValue5310_ARV5310:=myrec;
		END;
	FUNCTION pAIdLoc5323_AIL5323:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5323_AIL5323:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5322_AR5322:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5323_AIL5323;
		 pARefval5322_AR5322:=myrec;
		END;
	FUNCTION pADerefRhs5321_ADR5321:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5322_AR5322;
		 pADerefRhs5321_ADR5321:=myrec;
		END;
	FUNCTION pARhsValue5320_ARV5320:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5321_ADR5321;
		 pARhsValue5320_ARV5320:=myrec;
		END;
	FUNCTION pADyadicValue5308_ADV5308:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5310_ARV5310;
		myrec^.arg2:=pARhsValue5320_ARV5320;
		myrec^.fn:=pAShlDyadic5309_ASD5309;
		 pADyadicValue5308_ADV5308:=myrec;
		END;
	FUNCTION pADyadicValue5294_ADV5294:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5296_ARV5296;
		myrec^.arg2:=pADyadicValue5308_ADV5308;
		myrec^.fn:=pAAndDyadic5295_AAD5295;
		 pADyadicValue5294_ADV5294:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs5289_ACR5289:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType5290_APT5290;
		myrec^.arg2:=pADyadicValue5294_ADV5294;
		 pACastRhs5289_ACR5289:=myrec;
		END;
	FUNCTION pARhsValue5288_ARV5288:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5289_ACR5289;
		 pARhsValue5288_ARV5288:=myrec;
		END;
	FUNCTION pAIdLoc5326_AIL5326:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc5326_AIL5326:=myrec;
		END;
	FUNCTION pALocValue5325_ALV5325:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5326_AIL5326;
		 pALocValue5325_ALV5325:=myrec;
		END;
	FUNCTION pAGotoMeaning5324_AGM5324:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=gotonode;
		myrec^.dest:=pALocValue5325_ALV5325;
		 pAGotoMeaning5324_AGM5324:=myrec;
		END;
	FUNCTION pAIfMeaning5287_AIM5287:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pARhsValue5288_ARV5288;
		myrec^.action:=pAGotoMeaning5324_AGM5324;
		 pAIfMeaning5287_AIM5287:=myrec;
		END;
	FUNCTION pAAssemblypattern5328_AA5328:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'bt  [' );
		pappendp(list,0);
		pappends(list,'],' );
		pappendp(list,1);
		pappends(list,'\n jc ' );
		pappendp(list,2);
		pAAssemblypattern5328_AA5328:=list;
		END;
	FUNCTION pAAssemblesto5327_AA5327:pprintlist;
	begin
		pAAssemblesto5327_AA5327:=pAAssemblypattern5328_AA5328;
		END;
	FUNCTION pASideeffects5335_AS5335:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5335_AS5335:=nil;
		 pASideeffects5335_AS5335:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5336_AUP5336:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5336_AUP5336:=nil;
		 pAUnconditionalPrecond5336_AUP5336:=myrec;
		END;
	FUNCTION IFIN_IFIN:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patlabel;
		params^[1]:=patreg_;
		params^[0]:=patreg_;
		paramcount:=4;
		meaning:=pAIfMeaning5287_AIM5287;
		matchedAssembler:=pAAssemblesto5327_AA5327;
		END;
		IFIN_IFIN:=myrec;
	END;
	FUNCTION pATypeid5339_AT5339:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5339_AT5339:=myrec;
		END;
	FUNCTION pATypeid5341_AT5341:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5341_AT5341:=myrec;
		END;
	FUNCTION pATypeid5343_AT5343:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5343_AT5343:=myrec;
		END;
	FUNCTION pAIdLoc5347_AIL5347:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc5347_AIL5347:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5346_AR5346:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5347_AIL5347;
		 pARefval5346_AR5346:=myrec;
		END;
	FUNCTION pAAndDyadic5349_AAD5349:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpand;
		 pAAndDyadic5349_AAD5349:=myrec;
		END;
	FUNCTION pAUint8Unsigned5355_AU8U5355:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned5355_AU8U5355:=myrec;
		END;
	FUNCTION pAUnsignedTformat5354_AUT5354:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned5355_AU8U5355;
		 pAUnsignedTformat5354_AUT5354:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5353_ATP5353:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype5353_ATP5353:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5352_APT5352:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType5352_APT5352:=myrec;
		END;
	FUNCTION pAIdLoc5361_AIL5361:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5361_AIL5361:=myrec;
		END;
	FUNCTION pALocValue5360_ALV5360:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5361_AIL5361;
		 pALocValue5360_ALV5360:=myrec;
		END;
	FUNCTION pAMemoryLoc5359_AML5359:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pALocValue5360_ALV5360;
		 pAMemoryLoc5359_AML5359:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5358_AR5358:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAMemoryLoc5359_AML5359;
		 pARefval5358_AR5358:=myrec;
		END;
	FUNCTION pADerefRhs5357_ADR5357:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5358_AR5358;
		 pADerefRhs5357_ADR5357:=myrec;
		END;
	FUNCTION pARhsValue5356_ARV5356:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5357_ADR5357;
		 pARhsValue5356_ARV5356:=myrec;
		END;
		(*! try to cast to type: uint8*)
	FUNCTION pACastRhs5351_ACR5351:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType5352_APT5352;
		myrec^.arg2:=pARhsValue5356_ARV5356;
		 pACastRhs5351_ACR5351:=myrec;
		END;
	FUNCTION pARhsValue5350_ARV5350:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5351_ACR5351;
		 pARhsValue5350_ARV5350:=myrec;
		END;
	FUNCTION pAShlDyadic5363_ASD5363:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpshl;
		 pAShlDyadic5363_ASD5363:=myrec;
		END;
	FUNCTION pAUint8Unsigned5369_AU8U5369:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned5369_AU8U5369:=myrec;
		END;
	FUNCTION pAUnsignedTformat5368_AUT5368:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned5369_AU8U5369;
		 pAUnsignedTformat5368_AUT5368:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5367_ATP5367:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype5367_ATP5367:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5366_APT5366:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType5366_APT5366:=myrec;
		END;
	FUNCTION pAOptionalsign5373_AO5373:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign5373_AO5373:=nil;
		 pAOptionalsign5373_AO5373:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber5372_AIN5372:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=1 ;
		 pAIntegerNumber5372_AIN5372:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs5371_ANR5371:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber5372_AIN5372;
		 pANumberRhs5371_ANR5371:=myrec;
		END;
	FUNCTION pARhsValue5370_ARV5370:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs5371_ANR5371;
		 pARhsValue5370_ARV5370:=myrec;
		END;
		(*! try to cast to type: uint8*)
	FUNCTION pACastRhs5365_ACR5365:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType5366_APT5366;
		myrec^.arg2:=pARhsValue5370_ARV5370;
		 pACastRhs5365_ACR5365:=myrec;
		END;
	FUNCTION pARhsValue5364_ARV5364:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5365_ACR5365;
		 pARhsValue5364_ARV5364:=myrec;
		END;
	FUNCTION pAIdLoc5377_AIL5377:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5377_AIL5377:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5376_AR5376:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5377_AIL5377;
		 pARefval5376_AR5376:=myrec;
		END;
	FUNCTION pADerefRhs5375_ADR5375:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5376_AR5376;
		 pADerefRhs5375_ADR5375:=myrec;
		END;
	FUNCTION pARhsValue5374_ARV5374:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5375_ADR5375;
		 pARhsValue5374_ARV5374:=myrec;
		END;
	FUNCTION pADyadicValue5362_ADV5362:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5364_ARV5364;
		myrec^.arg2:=pARhsValue5374_ARV5374;
		myrec^.fn:=pAShlDyadic5363_ASD5363;
		 pADyadicValue5362_ADV5362:=myrec;
		END;
	FUNCTION pADyadicValue5348_ADV5348:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5350_ARV5350;
		myrec^.arg2:=pADyadicValue5362_ADV5362;
		myrec^.fn:=pAAndDyadic5349_AAD5349;
		 pADyadicValue5348_ADV5348:=myrec;
		END;
	FUNCTION pAAssign5345_AA5345:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue5348_ADV5348;
		myrec^.dest:=pARefval5346_AR5346;
		 pAAssign5345_AA5345:=myrec;
		END;
	FUNCTION pAAssignMeaning5344_AAM5344:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign5345_AA5345;
		 pAAssignMeaning5344_AAM5344:=myrec;
		END;
	FUNCTION pAAssemblypattern5379_AA5379:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'bt  [' );
		pappendp(list,0);
		pappends(list,'],' );
		pappendp(list,1);
		pappends(list,'\n setc ' );
		pappendp(list,2);
		pappends(list,'\n not ' );
		pappendp(list,2);
		pappends(list,'\n inc ' );
		pappendp(list,2);
		pAAssemblypattern5379_AA5379:=list;
		END;
	FUNCTION pAAssemblesto5378_AA5378:pprintlist;
	begin
		pAAssemblesto5378_AA5378:=pAAssemblypattern5379_AA5379;
		END;
	FUNCTION pASideeffects5390_AS5390:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5390_AS5390:=nil;
		 pASideeffects5390_AS5390:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5391_AUP5391:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5391_AUP5391:=nil;
		 pAUnconditionalPrecond5391_AUP5391:=myrec;
		END;
	FUNCTION TESTIN_TESTIN:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patreg_;
		params^[0]:=patreg_;
		params^[2]:=patbreg_;
		paramcount:=4;
		meaning:=pAAssignMeaning5344_AAM5344;
		matchedAssembler:=pAAssemblesto5378_AA5378;
		END;
		TESTIN_TESTIN:=myrec;
	END;
	FUNCTION pATypeid5394_AT5394:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5394_AT5394:=myrec;
		END;
	FUNCTION pATypeid5396_AT5396:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5396_AT5396:=myrec;
		END;
	FUNCTION pAUint8Unsigned5405_AU8U5405:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned5405_AU8U5405:=myrec;
		END;
	FUNCTION pAUnsignedTformat5404_AUT5404:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned5405_AU8U5405;
		 pAUnsignedTformat5404_AUT5404:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5403_ATP5403:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype5403_ATP5403:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5402_APT5402:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType5402_APT5402:=myrec;
		END;
	FUNCTION pAReference5401_AR5401:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType5402_APT5402;
		 pAReference5401_AR5401:=myrec;
		END;
	FUNCTION pAReftypeType5400_ART5400:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference5401_AR5401;
		 pAReftypeType5400_ART5400:=myrec;
		END;
	FUNCTION pAIdLoc5408_AIL5408:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5408_AIL5408:=myrec;
		END;
	FUNCTION pALocValue5407_ALV5407:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5408_AIL5408;
		 pALocValue5407_ALV5407:=myrec;
		END;
	FUNCTION pAMemoryLoc5406_AML5406:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pALocValue5407_ALV5407;
		 pAMemoryLoc5406_AML5406:=myrec;
		END;
	FUNCTION pARefcastRefval5399_ARR5399:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType5400_ART5400;
		myrec^.arg2:=pAMemoryLoc5406_AML5406;
		 pARefcastRefval5399_ARR5399:=myrec;
		END;
	FUNCTION pAOrDyadic5410_AOD5410:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpor;
		 pAOrDyadic5410_AOD5410:=myrec;
		END;
	FUNCTION pAUint8Unsigned5416_AU8U5416:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned5416_AU8U5416:=myrec;
		END;
	FUNCTION pAUnsignedTformat5415_AUT5415:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned5416_AU8U5416;
		 pAUnsignedTformat5415_AUT5415:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5414_ATP5414:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype5414_ATP5414:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5413_APT5413:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType5413_APT5413:=myrec;
		END;
	FUNCTION pAIdLoc5422_AIL5422:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5422_AIL5422:=myrec;
		END;
	FUNCTION pALocValue5421_ALV5421:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5422_AIL5422;
		 pALocValue5421_ALV5421:=myrec;
		END;
	FUNCTION pAMemoryLoc5420_AML5420:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pALocValue5421_ALV5421;
		 pAMemoryLoc5420_AML5420:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5419_AR5419:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAMemoryLoc5420_AML5420;
		 pARefval5419_AR5419:=myrec;
		END;
	FUNCTION pADerefRhs5418_ADR5418:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5419_AR5419;
		 pADerefRhs5418_ADR5418:=myrec;
		END;
	FUNCTION pARhsValue5417_ARV5417:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5418_ADR5418;
		 pARhsValue5417_ARV5417:=myrec;
		END;
		(*! try to cast to type: uint8*)
	FUNCTION pACastRhs5412_ACR5412:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType5413_APT5413;
		myrec^.arg2:=pARhsValue5417_ARV5417;
		 pACastRhs5412_ACR5412:=myrec;
		END;
	FUNCTION pARhsValue5411_ARV5411:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5412_ACR5412;
		 pARhsValue5411_ARV5411:=myrec;
		END;
	FUNCTION pAShlDyadic5424_ASD5424:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpshl;
		 pAShlDyadic5424_ASD5424:=myrec;
		END;
	FUNCTION pAUint8Unsigned5430_AU8U5430:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned5430_AU8U5430:=myrec;
		END;
	FUNCTION pAUnsignedTformat5429_AUT5429:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned5430_AU8U5430;
		 pAUnsignedTformat5429_AUT5429:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5428_ATP5428:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype5428_ATP5428:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5427_APT5427:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pAPredeclaredtypeType5427_APT5427:=myrec;
		END;
	FUNCTION pAOptionalsign5434_AO5434:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign5434_AO5434:=nil;
		 pAOptionalsign5434_AO5434:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber5433_AIN5433:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=1 ;
		 pAIntegerNumber5433_AIN5433:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs5432_ANR5432:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber5433_AIN5433;
		 pANumberRhs5432_ANR5432:=myrec;
		END;
	FUNCTION pARhsValue5431_ARV5431:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs5432_ANR5432;
		 pARhsValue5431_ARV5431:=myrec;
		END;
		(*! try to cast to type: uint8*)
	FUNCTION pACastRhs5426_ACR5426:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType5427_APT5427;
		myrec^.arg2:=pARhsValue5431_ARV5431;
		 pACastRhs5426_ACR5426:=myrec;
		END;
	FUNCTION pARhsValue5425_ARV5425:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5426_ACR5426;
		 pARhsValue5425_ARV5425:=myrec;
		END;
	FUNCTION pAIdLoc5438_AIL5438:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5438_AIL5438:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5437_AR5437:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5438_AIL5438;
		 pARefval5437_AR5437:=myrec;
		END;
	FUNCTION pADerefRhs5436_ADR5436:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5437_AR5437;
		 pADerefRhs5436_ADR5436:=myrec;
		END;
	FUNCTION pARhsValue5435_ARV5435:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5436_ADR5436;
		 pARhsValue5435_ARV5435:=myrec;
		END;
	FUNCTION pADyadicValue5423_ADV5423:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5425_ARV5425;
		myrec^.arg2:=pARhsValue5435_ARV5435;
		myrec^.fn:=pAShlDyadic5424_ASD5424;
		 pADyadicValue5423_ADV5423:=myrec;
		END;
	FUNCTION pADyadicValue5409_ADV5409:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5411_ARV5411;
		myrec^.arg2:=pADyadicValue5423_ADV5423;
		myrec^.fn:=pAOrDyadic5410_AOD5410;
		 pADyadicValue5409_ADV5409:=myrec;
		END;
	FUNCTION pAAssign5398_AA5398:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue5409_ADV5409;
		myrec^.dest:=pARefcastRefval5399_ARR5399;
		 pAAssign5398_AA5398:=myrec;
		END;
	FUNCTION pAAssignMeaning5397_AAM5397:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign5398_AA5398;
		 pAAssignMeaning5397_AAM5397:=myrec;
		END;
	FUNCTION pAAssemblypattern5440_AA5440:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'bts [' );
		pappendp(list,0);
		pappends(list,'],' );
		pappendp(list,1);
		pAAssemblypattern5440_AA5440:=list;
		END;
	FUNCTION pAAssemblesto5439_AA5439:pprintlist;
	begin
		pAAssemblesto5439_AA5439:=pAAssemblypattern5440_AA5440;
		END;
	FUNCTION pASideeffects5445_AS5445:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5445_AS5445:=nil;
		 pASideeffects5445_AS5445:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5446_AUP5446:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5446_AUP5446:=nil;
		 pAUnconditionalPrecond5446_AUP5446:=myrec;
		END;
	FUNCTION BTS_BTS:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patreg_;
		params^[0]:=patreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning5397_AAM5397;
		matchedAssembler:=pAAssemblesto5439_AA5439;
		END;
		BTS_BTS:=myrec;
	END;
	FUNCTION pATypeid5449_AT5449:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ countreg  ilcg.pattern@26161}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5449_AT5449:=myrec;
		END;
	FUNCTION pATypeid5451_AT5451:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5451_AT5451:=myrec;
		END;
	FUNCTION pATypeid5453_AT5453:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ sourcereg  ilcg.pattern@597efc}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5453_AT5453:=myrec;
		END;
	FUNCTION pATypeid5455_AT5455:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ destreg  ilcg.pattern@10b205}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5455_AT5455:=myrec;
		END;
	FUNCTION pASigned5463_AS5463:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned5463_AS5463:=myrec;
		END;
	FUNCTION pASignedTformat5462_AST5462:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned5463_AS5463;
		 pASignedTformat5462_AST5462:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5461_ATP5461:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype5461_ATP5461:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5460_APT5460:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType5460_APT5460:=myrec;
		END;
	FUNCTION pAReference5459_AR5459:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType5460_APT5460;
		 pAReference5459_AR5459:=myrec;
		END;
	FUNCTION pAReftypeType5458_ART5458:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference5459_AR5459;
		 pAReftypeType5458_ART5458:=myrec;
		END;
	FUNCTION pAIdLoc5464_AIL5464:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5464_AIL5464:=myrec;
		END;
	FUNCTION pARefcastRefval5457_ARR5457:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType5458_ART5458;
		myrec^.arg2:=pAIdLoc5464_AIL5464;
		 pARefcastRefval5457_ARR5457:=myrec;
		END;
	FUNCTION pAOptionalsign5468_AO5468:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign5468_AO5468:=nil;
		 pAOptionalsign5468_AO5468:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber5467_AIN5467:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=0 ;
		 pAIntegerNumber5467_AIN5467:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs5466_ANR5466:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber5467_AIN5467;
		 pANumberRhs5466_ANR5466:=myrec;
		END;
	FUNCTION pARhsValue5465_ARV5465:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs5466_ANR5466;
		 pARhsValue5465_ARV5465:=myrec;
		END;
	FUNCTION pAIdLoc5472_AIL5472:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5472_AIL5472:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5471_AR5471:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5472_AIL5472;
		 pARefval5471_AR5471:=myrec;
		END;
	FUNCTION pADerefRhs5470_ADR5470:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5471_AR5471;
		 pADerefRhs5470_ADR5470:=myrec;
		END;
	FUNCTION pARhsValue5469_ARV5469:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5470_ADR5470;
		 pARhsValue5469_ARV5469:=myrec;
		END;
	FUNCTION pAOptionalsign5476_AO5476:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign5476_AO5476:=nil;
		 pAOptionalsign5476_AO5476:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber5475_AIN5475:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=1 ;
		 pAIntegerNumber5475_AIN5475:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs5474_ANR5474:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber5475_AIN5475;
		 pANumberRhs5474_ANR5474:=myrec;
		END;
	FUNCTION pARhsValue5473_ARV5473:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs5474_ANR5474;
		 pARhsValue5473_ARV5473:=myrec;
		END;
	FUNCTION pASigned5485_AS5485:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned5485_AS5485:=myrec;
		END;
	FUNCTION pASignedTformat5484_AST5484:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned5485_AS5485;
		 pASignedTformat5484_AST5484:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5483_ATP5483:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype5483_ATP5483:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5482_APT5482:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType5482_APT5482:=myrec;
		END;
	FUNCTION pAReference5481_AR5481:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType5482_APT5482;
		 pAReference5481_AR5481:=myrec;
		END;
	FUNCTION pAReftypeType5480_ART5480:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference5481_AR5481;
		 pAReftypeType5480_ART5480:=myrec;
		END;
	FUNCTION pAPlusDyadic5488_APD5488:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic5488_APD5488:=myrec;
		END;
	FUNCTION pAIdLoc5492_AIL5492:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(3);
		 pAIdLoc5492_AIL5492:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5491_AR5491:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5492_AIL5492;
		 pARefval5491_AR5491:=myrec;
		END;
	FUNCTION pADerefRhs5490_ADR5490:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5491_AR5491;
		 pADerefRhs5490_ADR5490:=myrec;
		END;
	FUNCTION pARhsValue5489_ARV5489:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5490_ADR5490;
		 pARhsValue5489_ARV5489:=myrec;
		END;
	FUNCTION pATimesDyadic5494_ATD5494:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcptimes;
		 pATimesDyadic5494_ATD5494:=myrec;
		END;
	FUNCTION pASigned5503_AS5503:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned5503_AS5503:=myrec;
		END;
	FUNCTION pASignedTformat5502_AST5502:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned5503_AS5503;
		 pASignedTformat5502_AST5502:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5501_ATP5501:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype5501_ATP5501:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5500_APT5500:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType5500_APT5500:=myrec;
		END;
	FUNCTION pAReference5499_AR5499:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType5500_APT5500;
		 pAReference5499_AR5499:=myrec;
		END;
	FUNCTION pAReftypeType5498_ART5498:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference5499_AR5499;
		 pAReftypeType5498_ART5498:=myrec;
		END;
	FUNCTION pAIdLoc5504_AIL5504:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5504_AIL5504:=myrec;
		END;
	FUNCTION pARefcastRefval5497_ARR5497:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType5498_ART5498;
		myrec^.arg2:=pAIdLoc5504_AIL5504;
		 pARefcastRefval5497_ARR5497:=myrec;
		END;
	FUNCTION pADerefRhs5496_ADR5496:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval5497_ARR5497;
		 pADerefRhs5496_ADR5496:=myrec;
		END;
	FUNCTION pARhsValue5495_ARV5495:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5496_ADR5496;
		 pARhsValue5495_ARV5495:=myrec;
		END;
	FUNCTION pAOptionalsign5508_AO5508:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign5508_AO5508:=nil;
		 pAOptionalsign5508_AO5508:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber5507_AIN5507:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber5507_AIN5507:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs5506_ANR5506:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber5507_AIN5507;
		 pANumberRhs5506_ANR5506:=myrec;
		END;
	FUNCTION pARhsValue5505_ARV5505:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs5506_ANR5506;
		 pARhsValue5505_ARV5505:=myrec;
		END;
	FUNCTION pADyadicValue5493_ADV5493:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5495_ARV5495;
		myrec^.arg2:=pARhsValue5505_ARV5505;
		myrec^.fn:=pATimesDyadic5494_ATD5494;
		 pADyadicValue5493_ADV5493:=myrec;
		END;
	FUNCTION pADyadicValue5487_ADV5487:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5489_ARV5489;
		myrec^.arg2:=pADyadicValue5493_ADV5493;
		myrec^.fn:=pAPlusDyadic5488_APD5488;
		 pADyadicValue5487_ADV5487:=myrec;
		END;
	FUNCTION pAMemoryLoc5486_AML5486:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pADyadicValue5487_ADV5487;
		 pAMemoryLoc5486_AML5486:=myrec;
		END;
	FUNCTION pARefcastRefval5479_ARR5479:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType5480_ART5480;
		myrec^.arg2:=pAMemoryLoc5486_AML5486;
		 pARefcastRefval5479_ARR5479:=myrec;
		END;
	FUNCTION pASigned5517_AS5517:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned5517_AS5517:=myrec;
		END;
	FUNCTION pASignedTformat5516_AST5516:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned5517_AS5517;
		 pASignedTformat5516_AST5516:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5515_ATP5515:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype5515_ATP5515:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5514_APT5514:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType5514_APT5514:=myrec;
		END;
	FUNCTION pAReference5513_AR5513:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType5514_APT5514;
		 pAReference5513_AR5513:=myrec;
		END;
	FUNCTION pAReftypeType5512_ART5512:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference5513_AR5513;
		 pAReftypeType5512_ART5512:=myrec;
		END;
	FUNCTION pAPlusDyadic5520_APD5520:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic5520_APD5520:=myrec;
		END;
	FUNCTION pAIdLoc5524_AIL5524:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc5524_AIL5524:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5523_AR5523:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5524_AIL5524;
		 pARefval5523_AR5523:=myrec;
		END;
	FUNCTION pADerefRhs5522_ADR5522:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5523_AR5523;
		 pADerefRhs5522_ADR5522:=myrec;
		END;
	FUNCTION pARhsValue5521_ARV5521:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5522_ADR5522;
		 pARhsValue5521_ARV5521:=myrec;
		END;
	FUNCTION pATimesDyadic5526_ATD5526:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcptimes;
		 pATimesDyadic5526_ATD5526:=myrec;
		END;
	FUNCTION pASigned5535_AS5535:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned5535_AS5535:=myrec;
		END;
	FUNCTION pASignedTformat5534_AST5534:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned5535_AS5535;
		 pASignedTformat5534_AST5534:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5533_ATP5533:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype5533_ATP5533:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5532_APT5532:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType5532_APT5532:=myrec;
		END;
	FUNCTION pAReference5531_AR5531:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType5532_APT5532;
		 pAReference5531_AR5531:=myrec;
		END;
	FUNCTION pAReftypeType5530_ART5530:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference5531_AR5531;
		 pAReftypeType5530_ART5530:=myrec;
		END;
	FUNCTION pAIdLoc5536_AIL5536:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5536_AIL5536:=myrec;
		END;
	FUNCTION pARefcastRefval5529_ARR5529:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType5530_ART5530;
		myrec^.arg2:=pAIdLoc5536_AIL5536;
		 pARefcastRefval5529_ARR5529:=myrec;
		END;
	FUNCTION pADerefRhs5528_ADR5528:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval5529_ARR5529;
		 pADerefRhs5528_ADR5528:=myrec;
		END;
	FUNCTION pARhsValue5527_ARV5527:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5528_ADR5528;
		 pARhsValue5527_ARV5527:=myrec;
		END;
	FUNCTION pAOptionalsign5540_AO5540:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign5540_AO5540:=nil;
		 pAOptionalsign5540_AO5540:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber5539_AIN5539:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber5539_AIN5539:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs5538_ANR5538:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber5539_AIN5539;
		 pANumberRhs5538_ANR5538:=myrec;
		END;
	FUNCTION pARhsValue5537_ARV5537:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs5538_ANR5538;
		 pARhsValue5537_ARV5537:=myrec;
		END;
	FUNCTION pADyadicValue5525_ADV5525:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5527_ARV5527;
		myrec^.arg2:=pARhsValue5537_ARV5537;
		myrec^.fn:=pATimesDyadic5526_ATD5526;
		 pADyadicValue5525_ADV5525:=myrec;
		END;
	FUNCTION pADyadicValue5519_ADV5519:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5521_ARV5521;
		myrec^.arg2:=pADyadicValue5525_ADV5525;
		myrec^.fn:=pAPlusDyadic5520_APD5520;
		 pADyadicValue5519_ADV5519:=myrec;
		END;
	FUNCTION pAMemoryLoc5518_AML5518:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pADyadicValue5519_ADV5519;
		 pAMemoryLoc5518_AML5518:=myrec;
		END;
	FUNCTION pARefcastRefval5511_ARR5511:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType5512_ART5512;
		myrec^.arg2:=pAMemoryLoc5518_AML5518;
		 pARefcastRefval5511_ARR5511:=myrec;
		END;
	FUNCTION pADerefRhs5510_ADR5510:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval5511_ARR5511;
		 pADerefRhs5510_ADR5510:=myrec;
		END;
	FUNCTION pARhsValue5509_ARV5509:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5510_ADR5510;
		 pARhsValue5509_ARV5509:=myrec;
		END;
	FUNCTION pAAssign5478_AA5478:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue5509_ARV5509;
		myrec^.dest:=pARefcastRefval5479_ARR5479;
		 pAAssign5478_AA5478:=myrec;
		END;
	FUNCTION pAAssignMeaning5477_AAM5477:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign5478_AA5478;
		 pAAssignMeaning5477_AAM5477:=myrec;
		END;
	FUNCTION pAForMeaning5456_AFM5456:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=forloop;
		myrec^.indexvar:=pARefcastRefval5457_ARR5457;
		myrec^.start:=pARhsValue5465_ARV5465;
		myrec^.stop:=pARhsValue5469_ARV5469;
		myrec^.incr:=pARhsValue5473_ARV5473;
		myrec^.action:=pAAssignMeaning5477_AAM5477;
		 pAForMeaning5456_AFM5456:=myrec;
		END;
	FUNCTION pAAssemblypattern5542_AA5542:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,' inc ecx\n rep movsd' );
		pAAssemblypattern5542_AA5542:=list;
		END;
	FUNCTION pAAssemblesto5541_AA5541:pprintlist;
	begin
		pAAssemblesto5541_AA5541:=pAAssemblypattern5542_AA5542;
		END;
	FUNCTION pASideeffects5544_AS5544:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5544_AS5544:=nil;
		 pASideeffects5544_AS5544:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5545_AUP5545:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5545_AUP5545:=nil;
		 pAUnconditionalPrecond5545_AUP5545:=myrec;
		END;
	FUNCTION REPMOVSD_REPMOVSD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patsourcereg_;
		params^[1]:=patmaddrmode_;
		params^[0]:=patcountreg_;
		params^[3]:=patdestreg_;
		paramcount:=5;
		meaning:=pAForMeaning5456_AFM5456;
		matchedAssembler:=pAAssemblesto5541_AA5541;
		END;
		REPMOVSD_REPMOVSD:=myrec;
	END;
	FUNCTION pATypeid5548_AT5548:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ countreg  ilcg.pattern@26161}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5548_AT5548:=myrec;
		END;
	FUNCTION pATypeid5550_AT5550:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5550_AT5550:=myrec;
		END;
	FUNCTION pATypeid5552_AT5552:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ sourcereg  ilcg.pattern@597efc}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5552_AT5552:=myrec;
		END;
	FUNCTION pATypeid5554_AT5554:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ destreg  ilcg.pattern@10b205}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5554_AT5554:=myrec;
		END;
	FUNCTION pASigned5562_AS5562:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned5562_AS5562:=myrec;
		END;
	FUNCTION pASignedTformat5561_AST5561:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned5562_AS5562;
		 pASignedTformat5561_AST5561:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5560_ATP5560:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype5560_ATP5560:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5559_APT5559:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType5559_APT5559:=myrec;
		END;
	FUNCTION pAReference5558_AR5558:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType5559_APT5559;
		 pAReference5558_AR5558:=myrec;
		END;
	FUNCTION pAReftypeType5557_ART5557:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference5558_AR5558;
		 pAReftypeType5557_ART5557:=myrec;
		END;
	FUNCTION pAIdLoc5563_AIL5563:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5563_AIL5563:=myrec;
		END;
	FUNCTION pARefcastRefval5556_ARR5556:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType5557_ART5557;
		myrec^.arg2:=pAIdLoc5563_AIL5563;
		 pARefcastRefval5556_ARR5556:=myrec;
		END;
	FUNCTION pAOptionalsign5567_AO5567:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign5567_AO5567:=nil;
		 pAOptionalsign5567_AO5567:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber5566_AIN5566:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=0 ;
		 pAIntegerNumber5566_AIN5566:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs5565_ANR5565:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber5566_AIN5566;
		 pANumberRhs5565_ANR5565:=myrec;
		END;
	FUNCTION pARhsValue5564_ARV5564:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs5565_ANR5565;
		 pARhsValue5564_ARV5564:=myrec;
		END;
	FUNCTION pAIdLoc5571_AIL5571:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5571_AIL5571:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5570_AR5570:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5571_AIL5571;
		 pARefval5570_AR5570:=myrec;
		END;
	FUNCTION pADerefRhs5569_ADR5569:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5570_AR5570;
		 pADerefRhs5569_ADR5569:=myrec;
		END;
	FUNCTION pARhsValue5568_ARV5568:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5569_ADR5569;
		 pARhsValue5568_ARV5568:=myrec;
		END;
	FUNCTION pAOptionalsign5575_AO5575:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign5575_AO5575:=nil;
		 pAOptionalsign5575_AO5575:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber5574_AIN5574:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=1 ;
		 pAIntegerNumber5574_AIN5574:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs5573_ANR5573:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber5574_AIN5574;
		 pANumberRhs5573_ANR5573:=myrec;
		END;
	FUNCTION pARhsValue5572_ARV5572:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs5573_ANR5573;
		 pARhsValue5572_ARV5572:=myrec;
		END;
	FUNCTION pAOctetFormat5583_AOF5583:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat5583_AOF5583:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype5582_AFP5582:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype5582_AFP5582:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5581_APT5581:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAPredeclaredtypeType5581_APT5581:=myrec;
		END;
	FUNCTION pAReference5580_AR5580:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType5581_APT5581;
		 pAReference5580_AR5580:=myrec;
		END;
	FUNCTION pAReftypeType5579_ART5579:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference5580_AR5580;
		 pAReftypeType5579_ART5579:=myrec;
		END;
	FUNCTION pAPlusDyadic5586_APD5586:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic5586_APD5586:=myrec;
		END;
	FUNCTION pAIdLoc5590_AIL5590:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(3);
		 pAIdLoc5590_AIL5590:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5589_AR5589:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5590_AIL5590;
		 pARefval5589_AR5589:=myrec;
		END;
	FUNCTION pADerefRhs5588_ADR5588:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5589_AR5589;
		 pADerefRhs5588_ADR5588:=myrec;
		END;
	FUNCTION pARhsValue5587_ARV5587:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5588_ADR5588;
		 pARhsValue5587_ARV5587:=myrec;
		END;
	FUNCTION pASigned5599_AS5599:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned5599_AS5599:=myrec;
		END;
	FUNCTION pASignedTformat5598_AST5598:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned5599_AS5599;
		 pASignedTformat5598_AST5598:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5597_ATP5597:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype5597_ATP5597:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5596_APT5596:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType5596_APT5596:=myrec;
		END;
	FUNCTION pAReference5595_AR5595:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType5596_APT5596;
		 pAReference5595_AR5595:=myrec;
		END;
	FUNCTION pAReftypeType5594_ART5594:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference5595_AR5595;
		 pAReftypeType5594_ART5594:=myrec;
		END;
	FUNCTION pAIdLoc5600_AIL5600:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5600_AIL5600:=myrec;
		END;
	FUNCTION pARefcastRefval5593_ARR5593:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType5594_ART5594;
		myrec^.arg2:=pAIdLoc5600_AIL5600;
		 pARefcastRefval5593_ARR5593:=myrec;
		END;
	FUNCTION pADerefRhs5592_ADR5592:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval5593_ARR5593;
		 pADerefRhs5592_ADR5592:=myrec;
		END;
	FUNCTION pARhsValue5591_ARV5591:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5592_ADR5592;
		 pARhsValue5591_ARV5591:=myrec;
		END;
	FUNCTION pADyadicValue5585_ADV5585:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5587_ARV5587;
		myrec^.arg2:=pARhsValue5591_ARV5591;
		myrec^.fn:=pAPlusDyadic5586_APD5586;
		 pADyadicValue5585_ADV5585:=myrec;
		END;
	FUNCTION pAMemoryLoc5584_AML5584:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pADyadicValue5585_ADV5585;
		 pAMemoryLoc5584_AML5584:=myrec;
		END;
	FUNCTION pARefcastRefval5578_ARR5578:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType5579_ART5579;
		myrec^.arg2:=pAMemoryLoc5584_AML5584;
		 pARefcastRefval5578_ARR5578:=myrec;
		END;
	FUNCTION pAOctetFormat5608_AOF5608:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat5608_AOF5608:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype5607_AFP5607:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype5607_AFP5607:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5606_APT5606:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAPredeclaredtypeType5606_APT5606:=myrec;
		END;
	FUNCTION pAReference5605_AR5605:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType5606_APT5606;
		 pAReference5605_AR5605:=myrec;
		END;
	FUNCTION pAReftypeType5604_ART5604:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference5605_AR5605;
		 pAReftypeType5604_ART5604:=myrec;
		END;
	FUNCTION pAPlusDyadic5611_APD5611:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic5611_APD5611:=myrec;
		END;
	FUNCTION pAIdLoc5615_AIL5615:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc5615_AIL5615:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5614_AR5614:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5615_AIL5615;
		 pARefval5614_AR5614:=myrec;
		END;
	FUNCTION pADerefRhs5613_ADR5613:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5614_AR5614;
		 pADerefRhs5613_ADR5613:=myrec;
		END;
	FUNCTION pARhsValue5612_ARV5612:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5613_ADR5613;
		 pARhsValue5612_ARV5612:=myrec;
		END;
	FUNCTION pASigned5624_AS5624:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned5624_AS5624:=myrec;
		END;
	FUNCTION pASignedTformat5623_AST5623:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned5624_AS5624;
		 pASignedTformat5623_AST5623:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5622_ATP5622:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype5622_ATP5622:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5621_APT5621:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType5621_APT5621:=myrec;
		END;
	FUNCTION pAReference5620_AR5620:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType5621_APT5621;
		 pAReference5620_AR5620:=myrec;
		END;
	FUNCTION pAReftypeType5619_ART5619:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference5620_AR5620;
		 pAReftypeType5619_ART5619:=myrec;
		END;
	FUNCTION pAIdLoc5625_AIL5625:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5625_AIL5625:=myrec;
		END;
	FUNCTION pARefcastRefval5618_ARR5618:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType5619_ART5619;
		myrec^.arg2:=pAIdLoc5625_AIL5625;
		 pARefcastRefval5618_ARR5618:=myrec;
		END;
	FUNCTION pADerefRhs5617_ADR5617:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval5618_ARR5618;
		 pADerefRhs5617_ADR5617:=myrec;
		END;
	FUNCTION pARhsValue5616_ARV5616:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5617_ADR5617;
		 pARhsValue5616_ARV5616:=myrec;
		END;
	FUNCTION pADyadicValue5610_ADV5610:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5612_ARV5612;
		myrec^.arg2:=pARhsValue5616_ARV5616;
		myrec^.fn:=pAPlusDyadic5611_APD5611;
		 pADyadicValue5610_ADV5610:=myrec;
		END;
	FUNCTION pAMemoryLoc5609_AML5609:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pADyadicValue5610_ADV5610;
		 pAMemoryLoc5609_AML5609:=myrec;
		END;
	FUNCTION pARefcastRefval5603_ARR5603:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType5604_ART5604;
		myrec^.arg2:=pAMemoryLoc5609_AML5609;
		 pARefcastRefval5603_ARR5603:=myrec;
		END;
	FUNCTION pADerefRhs5602_ADR5602:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval5603_ARR5603;
		 pADerefRhs5602_ADR5602:=myrec;
		END;
	FUNCTION pARhsValue5601_ARV5601:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5602_ADR5602;
		 pARhsValue5601_ARV5601:=myrec;
		END;
	FUNCTION pAAssign5577_AA5577:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue5601_ARV5601;
		myrec^.dest:=pARefcastRefval5578_ARR5578;
		 pAAssign5577_AA5577:=myrec;
		END;
	FUNCTION pAAssignMeaning5576_AAM5576:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign5577_AA5577;
		 pAAssignMeaning5576_AAM5576:=myrec;
		END;
	FUNCTION pAForMeaning5555_AFM5555:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=forloop;
		myrec^.indexvar:=pARefcastRefval5556_ARR5556;
		myrec^.start:=pARhsValue5564_ARV5564;
		myrec^.stop:=pARhsValue5568_ARV5568;
		myrec^.incr:=pARhsValue5572_ARV5572;
		myrec^.action:=pAAssignMeaning5576_AAM5576;
		 pAForMeaning5555_AFM5555:=myrec;
		END;
	FUNCTION pAAssemblypattern5627_AA5627:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,' inc ecx\n rep movsb' );
		pAAssemblypattern5627_AA5627:=list;
		END;
	FUNCTION pAAssemblesto5626_AA5626:pprintlist;
	begin
		pAAssemblesto5626_AA5626:=pAAssemblypattern5627_AA5627;
		END;
	FUNCTION pASideeffects5629_AS5629:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5629_AS5629:=nil;
		 pASideeffects5629_AS5629:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5630_AUP5630:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5630_AUP5630:=nil;
		 pAUnconditionalPrecond5630_AUP5630:=myrec;
		END;
	FUNCTION REPMOVSB_REPMOVSB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[2]:=patsourcereg_;
		params^[1]:=patmaddrmode_;
		params^[0]:=patcountreg_;
		params^[3]:=patdestreg_;
		paramcount:=5;
		meaning:=pAForMeaning5555_AFM5555;
		matchedAssembler:=pAAssemblesto5626_AA5626;
		END;
		REPMOVSB_REPMOVSB:=myrec;
	END;
	FUNCTION pAUnreservedReservation5634_AUR5634:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation5634_AUR5634:=nil;
		 pAUnreservedReservation5634_AUR5634:=myrec;
		END;
	FUNCTION pAOptionalsign5637_AO5637:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign5637_AO5637:=nil;
		 pAOptionalsign5637_AO5637:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber5636_AIN5636:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber5636_AIN5636:=myrec;
		END;
	FUNCTION pAStackAggregate5635_ASA5635:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAStackAggregate5635_ASA5635:=nil;
		 pAStackAggregate5635_ASA5635:=myrec;
		END;
	FUNCTION pAIeee63Tformat5640_AI63T5640:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat5640_AI63T5640:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5639_ATP5639:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype5639_ATP5639:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5638_APT5638:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType5638_APT5638:=myrec;
		END;
	FUNCTION pAIeee32Tformat5646_AI32T5646:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat5646_AI32T5646:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5645_ATP5645:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype5645_ATP5645:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5644_APT5644:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType5644_APT5644:=myrec;
		END;
	FUNCTION pAIeee63Tformat5649_AI63T5649:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat5649_AI63T5649:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5648_ATP5648:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype5648_ATP5648:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5647_APT5647:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType5647_APT5647:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl5643_AAP5643:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 208;
		myrec^.last:= 209;
		 pAAlternativesPatterndecl5643_AAP5643:=myrec;
		END;
	FUNCTION pARemainderOperator5657_ARO5657:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pARemainderOperator5657_ARO5657:=nil;
		 pARemainderOperator5657_ARO5657:=myrec;
		END;
	FUNCTION pATypeid5662_AT5662:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ add  ilcg.Operation@7546f8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5662_AT5662:=myrec;
		END;
	FUNCTION pATypeidType5661_ATT5661:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5662_AT5662;
		 pATypeidType5661_ATT5661:=myrec;
		END;
	FUNCTION pATypeid5664_AT5664:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ sub  ilcg.Operation@2a559d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5664_AT5664:=myrec;
		END;
	FUNCTION pATypeidType5663_ATT5663:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5664_AT5664;
		 pATypeidType5663_ATT5663:=myrec;
		END;
	FUNCTION pATypeid5666_AT5666:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mul  ilcg.Operation@54ab0e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5666_AT5666:=myrec;
		END;
	FUNCTION pATypeidType5665_ATT5665:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5666_AT5666;
		 pATypeidType5665_ATT5665:=myrec;
		END;
	FUNCTION pATypeid5668_AT5668:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fdiv  ilcg.Operation@2606b8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5668_AT5668:=myrec;
		END;
	FUNCTION pATypeidType5667_ATT5667:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5668_AT5668;
		 pATypeidType5667_ATT5667:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl5660_AAP5660:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 210;
		myrec^.last:= 213;
		 pAAlternativesPatterndecl5660_AAP5660:=myrec;
		END;
	FUNCTION pARoundMonadic5675_ARM5675:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpROUND;
		 pARoundMonadic5675_ARM5675:=myrec;
		END;
	FUNCTION pATypeid5679_AT5679:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@edf3c}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid5679_AT5679:=myrec;
		END;
	FUNCTION pATypeidType5678_ATT5678:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5679_AT5679;
		 pATypeidType5678_ATT5678:=myrec;
		END;
	FUNCTION pAPopMonadic5681_APM5681:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic5681_APM5681:=myrec;
		END;
	FUNCTION pAIdLoc5683_AIL5683:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc5683_AIL5683:=myrec;
		END;
	FUNCTION pALocValue5682_ALV5682:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5683_AIL5683;
		 pALocValue5682_ALV5682:=myrec;
		END;
	FUNCTION pAMonadicValue5680_AMV5680:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue5682_ALV5682;
		myrec^.fn:=pAPopMonadic5681_APM5681;
		 pAMonadicValue5680_AMV5680:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5677_ACR5677:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5678_ATT5678;
		myrec^.arg2:=pAMonadicValue5680_AMV5680;
		 pACastRhs5677_ACR5677:=myrec;
		END;
	FUNCTION pARhsValue5676_ARV5676:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5677_ACR5677;
		 pARhsValue5676_ARV5676:=myrec;
		END;
	FUNCTION pAMonadicValue5674_AMV5674:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue5676_ARV5676;
		myrec^.fn:=pARoundMonadic5675_ARM5675;
		 pAMonadicValue5674_AMV5674:=myrec;
		END;
	FUNCTION pAValueMeaning5673_AVM5673:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAMonadicValue5674_AMV5674;
		 pAValueMeaning5673_AVM5673:=myrec;
		END;
	FUNCTION pAAssemblypattern5685_AA5685:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'frndint' );
		pAAssemblypattern5685_AA5685:=list;
		END;
	FUNCTION pAAssemblesto5684_AA5684:pprintlist;
	begin
		pAAssemblesto5684_AA5684:=pAAssemblypattern5685_AA5685;
		END;
	FUNCTION pASideeffects5687_AS5687:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5687_AS5687:=nil;
		 pASideeffects5687_AS5687:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5688_AUP5688:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5688_AUP5688:=nil;
		 pAUnconditionalPrecond5688_AUP5688:=myrec;
		END;
	FUNCTION fround_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning5673_AVM5673;
		matchedAssembler:=pAAssemblesto5684_AA5684;
		END;
		fround_:=myrec;
	END;
	FUNCTION pATypeid5697_AT5697:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@5cd7f9}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid5697_AT5697:=myrec;
		END;
	FUNCTION pATypeidType5696_ATT5696:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5697_AT5697;
		 pATypeidType5696_ATT5696:=myrec;
		END;
	FUNCTION pASqrtMonadic5699_ASM5699:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpSQRT;
		 pASqrtMonadic5699_ASM5699:=myrec;
		END;
	FUNCTION pATypeid5703_AT5703:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@5cd7f9}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid5703_AT5703:=myrec;
		END;
	FUNCTION pATypeidType5702_ATT5702:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5703_AT5703;
		 pATypeidType5702_ATT5702:=myrec;
		END;
	FUNCTION pAPopMonadic5705_APM5705:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic5705_APM5705:=myrec;
		END;
	FUNCTION pAIdLoc5707_AIL5707:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc5707_AIL5707:=myrec;
		END;
	FUNCTION pALocValue5706_ALV5706:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5707_AIL5707;
		 pALocValue5706_ALV5706:=myrec;
		END;
	FUNCTION pAMonadicValue5704_AMV5704:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue5706_ALV5706;
		myrec^.fn:=pAPopMonadic5705_APM5705;
		 pAMonadicValue5704_AMV5704:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5701_ACR5701:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5702_ATT5702;
		myrec^.arg2:=pAMonadicValue5704_AMV5704;
		 pACastRhs5701_ACR5701:=myrec;
		END;
	FUNCTION pARhsValue5700_ARV5700:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5701_ACR5701;
		 pARhsValue5700_ARV5700:=myrec;
		END;
	FUNCTION pAMonadicValue5698_AMV5698:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue5700_ARV5700;
		myrec^.fn:=pASqrtMonadic5699_ASM5699;
		 pAMonadicValue5698_AMV5698:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5695_ACR5695:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5696_ATT5696;
		myrec^.arg2:=pAMonadicValue5698_AMV5698;
		 pACastRhs5695_ACR5695:=myrec;
		END;
	FUNCTION pARhsValue5694_ARV5694:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5695_ACR5695;
		 pARhsValue5694_ARV5694:=myrec;
		END;
	FUNCTION pAValueMeaning5693_AVM5693:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue5694_ARV5694;
		 pAValueMeaning5693_AVM5693:=myrec;
		END;
	FUNCTION pAAssemblypattern5709_AA5709:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fsqrt' );
		pAAssemblypattern5709_AA5709:=list;
		END;
	FUNCTION pAAssemblesto5708_AA5708:pprintlist;
	begin
		pAAssemblesto5708_AA5708:=pAAssemblypattern5709_AA5709;
		END;
	FUNCTION pASideeffects5711_AS5711:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5711_AS5711:=nil;
		 pASideeffects5711_AS5711:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5712_AUP5712:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5712_AUP5712:=nil;
		 pAUnconditionalPrecond5712_AUP5712:=myrec;
		END;
	FUNCTION fsqrt_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning5693_AVM5693;
		matchedAssembler:=pAAssemblesto5708_AA5708;
		END;
		fsqrt_:=myrec;
	END;
	FUNCTION pATypeid5721_AT5721:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@20ff10}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid5721_AT5721:=myrec;
		END;
	FUNCTION pATypeidType5720_ATT5720:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5721_AT5721;
		 pATypeidType5720_ATT5720:=myrec;
		END;
	FUNCTION pASinMonadic5723_ASM5723:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpSIN;
		 pASinMonadic5723_ASM5723:=myrec;
		END;
	FUNCTION pATypeid5727_AT5727:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@20ff10}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid5727_AT5727:=myrec;
		END;
	FUNCTION pATypeidType5726_ATT5726:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5727_AT5727;
		 pATypeidType5726_ATT5726:=myrec;
		END;
	FUNCTION pAPopMonadic5729_APM5729:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic5729_APM5729:=myrec;
		END;
	FUNCTION pAIdLoc5731_AIL5731:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc5731_AIL5731:=myrec;
		END;
	FUNCTION pALocValue5730_ALV5730:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5731_AIL5731;
		 pALocValue5730_ALV5730:=myrec;
		END;
	FUNCTION pAMonadicValue5728_AMV5728:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue5730_ALV5730;
		myrec^.fn:=pAPopMonadic5729_APM5729;
		 pAMonadicValue5728_AMV5728:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5725_ACR5725:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5726_ATT5726;
		myrec^.arg2:=pAMonadicValue5728_AMV5728;
		 pACastRhs5725_ACR5725:=myrec;
		END;
	FUNCTION pARhsValue5724_ARV5724:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5725_ACR5725;
		 pARhsValue5724_ARV5724:=myrec;
		END;
	FUNCTION pAMonadicValue5722_AMV5722:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue5724_ARV5724;
		myrec^.fn:=pASinMonadic5723_ASM5723;
		 pAMonadicValue5722_AMV5722:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5719_ACR5719:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5720_ATT5720;
		myrec^.arg2:=pAMonadicValue5722_AMV5722;
		 pACastRhs5719_ACR5719:=myrec;
		END;
	FUNCTION pARhsValue5718_ARV5718:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5719_ACR5719;
		 pARhsValue5718_ARV5718:=myrec;
		END;
	FUNCTION pAValueMeaning5717_AVM5717:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue5718_ARV5718;
		 pAValueMeaning5717_AVM5717:=myrec;
		END;
	FUNCTION pAAssemblypattern5733_AA5733:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fsin' );
		pAAssemblypattern5733_AA5733:=list;
		END;
	FUNCTION pAAssemblesto5732_AA5732:pprintlist;
	begin
		pAAssemblesto5732_AA5732:=pAAssemblypattern5733_AA5733;
		END;
	FUNCTION pASideeffects5735_AS5735:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5735_AS5735:=nil;
		 pASideeffects5735_AS5735:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5736_AUP5736:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5736_AUP5736:=nil;
		 pAUnconditionalPrecond5736_AUP5736:=myrec;
		END;
	FUNCTION fsin_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning5717_AVM5717;
		matchedAssembler:=pAAssemblesto5732_AA5732;
		END;
		fsin_:=myrec;
	END;
	FUNCTION pATypeid5745_AT5745:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@5292e6}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid5745_AT5745:=myrec;
		END;
	FUNCTION pATypeidType5744_ATT5744:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5745_AT5745;
		 pATypeidType5744_ATT5744:=myrec;
		END;
	FUNCTION pACosMonadic5747_ACM5747:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpCOS;
		 pACosMonadic5747_ACM5747:=myrec;
		END;
	FUNCTION pATypeid5751_AT5751:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@5292e6}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid5751_AT5751:=myrec;
		END;
	FUNCTION pATypeidType5750_ATT5750:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5751_AT5751;
		 pATypeidType5750_ATT5750:=myrec;
		END;
	FUNCTION pAPopMonadic5753_APM5753:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic5753_APM5753:=myrec;
		END;
	FUNCTION pAIdLoc5755_AIL5755:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc5755_AIL5755:=myrec;
		END;
	FUNCTION pALocValue5754_ALV5754:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5755_AIL5755;
		 pALocValue5754_ALV5754:=myrec;
		END;
	FUNCTION pAMonadicValue5752_AMV5752:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue5754_ALV5754;
		myrec^.fn:=pAPopMonadic5753_APM5753;
		 pAMonadicValue5752_AMV5752:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5749_ACR5749:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5750_ATT5750;
		myrec^.arg2:=pAMonadicValue5752_AMV5752;
		 pACastRhs5749_ACR5749:=myrec;
		END;
	FUNCTION pARhsValue5748_ARV5748:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5749_ACR5749;
		 pARhsValue5748_ARV5748:=myrec;
		END;
	FUNCTION pAMonadicValue5746_AMV5746:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue5748_ARV5748;
		myrec^.fn:=pACosMonadic5747_ACM5747;
		 pAMonadicValue5746_AMV5746:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5743_ACR5743:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5744_ATT5744;
		myrec^.arg2:=pAMonadicValue5746_AMV5746;
		 pACastRhs5743_ACR5743:=myrec;
		END;
	FUNCTION pARhsValue5742_ARV5742:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5743_ACR5743;
		 pARhsValue5742_ARV5742:=myrec;
		END;
	FUNCTION pAValueMeaning5741_AVM5741:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue5742_ARV5742;
		 pAValueMeaning5741_AVM5741:=myrec;
		END;
	FUNCTION pAAssemblypattern5757_AA5757:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fcos' );
		pAAssemblypattern5757_AA5757:=list;
		END;
	FUNCTION pAAssemblesto5756_AA5756:pprintlist;
	begin
		pAAssemblesto5756_AA5756:=pAAssemblypattern5757_AA5757;
		END;
	FUNCTION pASideeffects5759_AS5759:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5759_AS5759:=nil;
		 pASideeffects5759_AS5759:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5760_AUP5760:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5760_AUP5760:=nil;
		 pAUnconditionalPrecond5760_AUP5760:=myrec;
		END;
	FUNCTION fcos_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning5741_AVM5741;
		matchedAssembler:=pAAssemblesto5756_AA5756;
		END;
		fcos_:=myrec;
	END;
	FUNCTION pATypeid5769_AT5769:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@226638}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid5769_AT5769:=myrec;
		END;
	FUNCTION pATypeidType5768_ATT5768:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5769_AT5769;
		 pATypeidType5768_ATT5768:=myrec;
		END;
	FUNCTION pALnMonadic5771_ALM5771:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpLN;
		 pALnMonadic5771_ALM5771:=myrec;
		END;
	FUNCTION pATypeid5775_AT5775:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@226638}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid5775_AT5775:=myrec;
		END;
	FUNCTION pATypeidType5774_ATT5774:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5775_AT5775;
		 pATypeidType5774_ATT5774:=myrec;
		END;
	FUNCTION pAPopMonadic5777_APM5777:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic5777_APM5777:=myrec;
		END;
	FUNCTION pAIdLoc5779_AIL5779:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc5779_AIL5779:=myrec;
		END;
	FUNCTION pALocValue5778_ALV5778:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5779_AIL5779;
		 pALocValue5778_ALV5778:=myrec;
		END;
	FUNCTION pAMonadicValue5776_AMV5776:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue5778_ALV5778;
		myrec^.fn:=pAPopMonadic5777_APM5777;
		 pAMonadicValue5776_AMV5776:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5773_ACR5773:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5774_ATT5774;
		myrec^.arg2:=pAMonadicValue5776_AMV5776;
		 pACastRhs5773_ACR5773:=myrec;
		END;
	FUNCTION pARhsValue5772_ARV5772:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5773_ACR5773;
		 pARhsValue5772_ARV5772:=myrec;
		END;
	FUNCTION pAMonadicValue5770_AMV5770:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue5772_ARV5772;
		myrec^.fn:=pALnMonadic5771_ALM5771;
		 pAMonadicValue5770_AMV5770:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5767_ACR5767:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5768_ATT5768;
		myrec^.arg2:=pAMonadicValue5770_AMV5770;
		 pACastRhs5767_ACR5767:=myrec;
		END;
	FUNCTION pARhsValue5766_ARV5766:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5767_ACR5767;
		 pARhsValue5766_ARV5766:=myrec;
		END;
	FUNCTION pAValueMeaning5765_AVM5765:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue5766_ARV5766;
		 pAValueMeaning5765_AVM5765:=myrec;
		END;
	FUNCTION pAAssemblypattern5781_AA5781:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fldln2\n fxch\n fyl2x' );
		pAAssemblypattern5781_AA5781:=list;
		END;
	FUNCTION pAAssemblesto5780_AA5780:pprintlist;
	begin
		pAAssemblesto5780_AA5780:=pAAssemblypattern5781_AA5781;
		END;
	FUNCTION pASideeffects5783_AS5783:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5783_AS5783:=nil;
		 pASideeffects5783_AS5783:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5784_AUP5784:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5784_AUP5784:=nil;
		 pAUnconditionalPrecond5784_AUP5784:=myrec;
		END;
	FUNCTION fln_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning5765_AVM5765;
		matchedAssembler:=pAAssemblesto5780_AA5780;
		END;
		fln_:=myrec;
	END;
	FUNCTION pATypeid5793_AT5793:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@1b7dfa}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid5793_AT5793:=myrec;
		END;
	FUNCTION pATypeidType5792_ATT5792:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5793_AT5793;
		 pATypeidType5792_ATT5792:=myrec;
		END;
	FUNCTION pATanMonadic5795_ATM5795:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpTAN;
		 pATanMonadic5795_ATM5795:=myrec;
		END;
	FUNCTION pATypeid5799_AT5799:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@1b7dfa}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid5799_AT5799:=myrec;
		END;
	FUNCTION pATypeidType5798_ATT5798:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5799_AT5799;
		 pATypeidType5798_ATT5798:=myrec;
		END;
	FUNCTION pAPopMonadic5801_APM5801:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic5801_APM5801:=myrec;
		END;
	FUNCTION pAIdLoc5803_AIL5803:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc5803_AIL5803:=myrec;
		END;
	FUNCTION pALocValue5802_ALV5802:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5803_AIL5803;
		 pALocValue5802_ALV5802:=myrec;
		END;
	FUNCTION pAMonadicValue5800_AMV5800:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue5802_ALV5802;
		myrec^.fn:=pAPopMonadic5801_APM5801;
		 pAMonadicValue5800_AMV5800:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5797_ACR5797:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5798_ATT5798;
		myrec^.arg2:=pAMonadicValue5800_AMV5800;
		 pACastRhs5797_ACR5797:=myrec;
		END;
	FUNCTION pARhsValue5796_ARV5796:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5797_ACR5797;
		 pARhsValue5796_ARV5796:=myrec;
		END;
	FUNCTION pAMonadicValue5794_AMV5794:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue5796_ARV5796;
		myrec^.fn:=pATanMonadic5795_ATM5795;
		 pAMonadicValue5794_AMV5794:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5791_ACR5791:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5792_ATT5792;
		myrec^.arg2:=pAMonadicValue5794_AMV5794;
		 pACastRhs5791_ACR5791:=myrec;
		END;
	FUNCTION pARhsValue5790_ARV5790:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5791_ACR5791;
		 pARhsValue5790_ARV5790:=myrec;
		END;
	FUNCTION pAValueMeaning5789_AVM5789:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue5790_ARV5790;
		 pAValueMeaning5789_AVM5789:=myrec;
		END;
	FUNCTION pAAssemblypattern5805_AA5805:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fptan' );
		pAAssemblypattern5805_AA5805:=list;
		END;
	FUNCTION pAAssemblesto5804_AA5804:pprintlist;
	begin
		pAAssemblesto5804_AA5804:=pAAssemblypattern5805_AA5805;
		END;
	FUNCTION pASideeffects5807_AS5807:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5807_AS5807:=nil;
		 pASideeffects5807_AS5807:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5808_AUP5808:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5808_AUP5808:=nil;
		 pAUnconditionalPrecond5808_AUP5808:=myrec;
		END;
	FUNCTION fptan_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning5789_AVM5789;
		matchedAssembler:=pAAssemblesto5804_AA5804;
		END;
		fptan_:=myrec;
	END;
	FUNCTION pATypeid5817_AT5817:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@10690e}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid5817_AT5817:=myrec;
		END;
	FUNCTION pATypeidType5816_ATT5816:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5817_AT5817;
		 pATypeidType5816_ATT5816:=myrec;
		END;
	FUNCTION pAAbsMonadic5819_AAM5819:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpABS;
		 pAAbsMonadic5819_AAM5819:=myrec;
		END;
	FUNCTION pATypeid5823_AT5823:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@10690e}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid5823_AT5823:=myrec;
		END;
	FUNCTION pATypeidType5822_ATT5822:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5823_AT5823;
		 pATypeidType5822_ATT5822:=myrec;
		END;
	FUNCTION pAPopMonadic5825_APM5825:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic5825_APM5825:=myrec;
		END;
	FUNCTION pAIdLoc5827_AIL5827:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc5827_AIL5827:=myrec;
		END;
	FUNCTION pALocValue5826_ALV5826:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5827_AIL5827;
		 pALocValue5826_ALV5826:=myrec;
		END;
	FUNCTION pAMonadicValue5824_AMV5824:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue5826_ALV5826;
		myrec^.fn:=pAPopMonadic5825_APM5825;
		 pAMonadicValue5824_AMV5824:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5821_ACR5821:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5822_ATT5822;
		myrec^.arg2:=pAMonadicValue5824_AMV5824;
		 pACastRhs5821_ACR5821:=myrec;
		END;
	FUNCTION pARhsValue5820_ARV5820:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5821_ACR5821;
		 pARhsValue5820_ARV5820:=myrec;
		END;
	FUNCTION pAMonadicValue5818_AMV5818:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue5820_ARV5820;
		myrec^.fn:=pAAbsMonadic5819_AAM5819;
		 pAMonadicValue5818_AMV5818:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs5815_ACR5815:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType5816_ATT5816;
		myrec^.arg2:=pAMonadicValue5818_AMV5818;
		 pACastRhs5815_ACR5815:=myrec;
		END;
	FUNCTION pARhsValue5814_ARV5814:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5815_ACR5815;
		 pARhsValue5814_ARV5814:=myrec;
		END;
	FUNCTION pAValueMeaning5813_AVM5813:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pARhsValue5814_ARV5814;
		 pAValueMeaning5813_AVM5813:=myrec;
		END;
	FUNCTION pAAssemblypattern5829_AA5829:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fabs' );
		pAAssemblypattern5829_AA5829:=list;
		END;
	FUNCTION pAAssemblesto5828_AA5828:pprintlist;
	begin
		pAAssemblesto5828_AA5828:=pAAssemblypattern5829_AA5829;
		END;
	FUNCTION pASideeffects5831_AS5831:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5831_AS5831:=nil;
		 pASideeffects5831_AS5831:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5832_AUP5832:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5832_AUP5832:=nil;
		 pAUnconditionalPrecond5832_AUP5832:=myrec;
		END;
	FUNCTION fabs_:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning5813_AVM5813;
		matchedAssembler:=pAAssemblesto5828_AA5828;
		END;
		fabs_:=myrec;
	END;
	FUNCTION pATypeid5837_AT5837:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fround  ilcg.pattern@fd2b1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5837_AT5837:=myrec;
		END;
	FUNCTION pATypeidType5836_ATT5836:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5837_AT5837;
		 pATypeidType5836_ATT5836:=myrec;
		END;
	FUNCTION pATypeid5839_AT5839:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fsqrt  ilcg.pattern@7b6617}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5839_AT5839:=myrec;
		END;
	FUNCTION pATypeidType5838_ATT5838:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5839_AT5839;
		 pATypeidType5838_ATT5838:=myrec;
		END;
	FUNCTION pATypeid5841_AT5841:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fsin  ilcg.pattern@4f889}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5841_AT5841:=myrec;
		END;
	FUNCTION pATypeidType5840_ATT5840:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5841_AT5841;
		 pATypeidType5840_ATT5840:=myrec;
		END;
	FUNCTION pATypeid5843_AT5843:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fcos  ilcg.pattern@5c93be}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5843_AT5843:=myrec;
		END;
	FUNCTION pATypeidType5842_ATT5842:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5843_AT5843;
		 pATypeidType5842_ATT5842:=myrec;
		END;
	FUNCTION pATypeid5845_AT5845:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fptan  ilcg.pattern@6a5d87}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5845_AT5845:=myrec;
		END;
	FUNCTION pATypeidType5844_ATT5844:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5845_AT5845;
		 pATypeidType5844_ATT5844:=myrec;
		END;
	FUNCTION pATypeid5847_AT5847:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fln  ilcg.pattern@5e43ee}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5847_AT5847:=myrec;
		END;
	FUNCTION pATypeidType5846_ATT5846:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5847_AT5847;
		 pATypeidType5846_ATT5846:=myrec;
		END;
	FUNCTION pATypeid5849_AT5849:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fabs  ilcg.pattern@61c596}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5849_AT5849:=myrec;
		END;
	FUNCTION pATypeidType5848_ATT5848:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid5849_AT5849;
		 pATypeidType5848_ATT5848:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl5835_AAP5835:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 214;
		myrec^.last:= 220;
		 pAAlternativesPatterndecl5835_AAP5835:=myrec;
		END;
	FUNCTION pATypeid5852_AT5852:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5852_AT5852:=myrec;
		END;
	FUNCTION pATypeid5854_AT5854:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baddrmode  ilcg.pattern@52f73e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5854_AT5854:=myrec;
		END;
	FUNCTION pAIdLoc5858_AIL5858:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5858_AIL5858:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5857_AR5857:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5858_AIL5858;
		 pARefval5857_AR5857:=myrec;
		END;
	FUNCTION pADivideDyadic5860_ADD5860:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpdivide;
		 pADivideDyadic5860_ADD5860:=myrec;
		END;
	FUNCTION pAIdLoc5864_AIL5864:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5864_AIL5864:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5863_AR5863:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5864_AIL5864;
		 pARefval5863_AR5863:=myrec;
		END;
	FUNCTION pADerefRhs5862_ADR5862:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5863_AR5863;
		 pADerefRhs5862_ADR5862:=myrec;
		END;
	FUNCTION pARhsValue5861_ARV5861:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5862_ADR5862;
		 pARhsValue5861_ARV5861:=myrec;
		END;
	FUNCTION pAIdLoc5868_AIL5868:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5868_AIL5868:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5867_AR5867:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5868_AIL5868;
		 pARefval5867_AR5867:=myrec;
		END;
	FUNCTION pADerefRhs5866_ADR5866:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5867_AR5867;
		 pADerefRhs5866_ADR5866:=myrec;
		END;
	FUNCTION pARhsValue5865_ARV5865:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5866_ADR5866;
		 pARhsValue5865_ARV5865:=myrec;
		END;
	FUNCTION pADyadicValue5859_ADV5859:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5861_ARV5861;
		myrec^.arg2:=pARhsValue5865_ARV5865;
		myrec^.fn:=pADivideDyadic5860_ADD5860;
		 pADyadicValue5859_ADV5859:=myrec;
		END;
	FUNCTION pAAssign5856_AA5856:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue5859_ADV5859;
		myrec^.dest:=pARefval5857_AR5857;
		 pAAssign5856_AA5856:=myrec;
		END;
	FUNCTION pAAssignMeaning5855_AAM5855:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign5856_AA5856;
		 pAAssignMeaning5855_AAM5855:=myrec;
		END;
	FUNCTION pAAssemblypattern5870_AA5870:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'bytediv ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern5870_AA5870:=list;
		END;
	FUNCTION pAAssemblesto5869_AA5869:pprintlist;
	begin
		pAAssemblesto5869_AA5869:=pAAssemblypattern5870_AA5870;
		END;
	FUNCTION pASideeffects5875_AS5875:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5875_AS5875:=nil;
		 pASideeffects5875_AS5875:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5876_AUP5876:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5876_AUP5876:=nil;
		 pAUnconditionalPrecond5876_AUP5876:=myrec;
		END;
	FUNCTION RDIVB_RDIVB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbaddrmode_;
		params^[0]:=patbreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning5855_AAM5855;
		matchedAssembler:=pAAssemblesto5869_AA5869;
		END;
		RDIVB_RDIVB:=myrec;
	END;
	FUNCTION pATypeid5879_AT5879:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5879_AT5879:=myrec;
		END;
	FUNCTION pATypeid5881_AT5881:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baddrmode  ilcg.pattern@52f73e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5881_AT5881:=myrec;
		END;
	FUNCTION pAIdLoc5885_AIL5885:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5885_AIL5885:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5884_AR5884:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5885_AIL5885;
		 pARefval5884_AR5884:=myrec;
		END;
	FUNCTION pATimesDyadic5887_ATD5887:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcptimes;
		 pATimesDyadic5887_ATD5887:=myrec;
		END;
	FUNCTION pAIdLoc5891_AIL5891:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5891_AIL5891:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5890_AR5890:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5891_AIL5891;
		 pARefval5890_AR5890:=myrec;
		END;
	FUNCTION pADerefRhs5889_ADR5889:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5890_AR5890;
		 pADerefRhs5889_ADR5889:=myrec;
		END;
	FUNCTION pARhsValue5888_ARV5888:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5889_ADR5889;
		 pARhsValue5888_ARV5888:=myrec;
		END;
	FUNCTION pAIdLoc5895_AIL5895:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc5895_AIL5895:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5894_AR5894:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5895_AIL5895;
		 pARefval5894_AR5894:=myrec;
		END;
	FUNCTION pADerefRhs5893_ADR5893:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5894_AR5894;
		 pADerefRhs5893_ADR5893:=myrec;
		END;
	FUNCTION pARhsValue5892_ARV5892:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5893_ADR5893;
		 pARhsValue5892_ARV5892:=myrec;
		END;
	FUNCTION pADyadicValue5886_ADV5886:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue5888_ARV5888;
		myrec^.arg2:=pARhsValue5892_ARV5892;
		myrec^.fn:=pATimesDyadic5887_ATD5887;
		 pADyadicValue5886_ADV5886:=myrec;
		END;
	FUNCTION pAAssign5883_AA5883:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue5886_ADV5886;
		myrec^.dest:=pARefval5884_AR5884;
		 pAAssign5883_AA5883:=myrec;
		END;
	FUNCTION pAAssignMeaning5882_AAM5882:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign5883_AA5883;
		 pAAssignMeaning5882_AAM5882:=myrec;
		END;
	FUNCTION pAAssemblypattern5897_AA5897:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'bytemult ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern5897_AA5897:=list;
		END;
	FUNCTION pAAssemblesto5896_AA5896:pprintlist;
	begin
		pAAssemblesto5896_AA5896:=pAAssemblypattern5897_AA5897;
		END;
	FUNCTION pASideeffects5902_AS5902:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5902_AS5902:=nil;
		 pASideeffects5902_AS5902:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5903_AUP5903:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5903_AUP5903:=nil;
		 pAUnconditionalPrecond5903_AUP5903:=myrec;
		END;
	FUNCTION RMULTB_RMULTB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbaddrmode_;
		params^[0]:=patbreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning5882_AAM5882;
		matchedAssembler:=pAAssemblesto5896_AA5896;
		END;
		RMULTB_RMULTB:=myrec;
	END;
	FUNCTION pATypeid5906_AT5906:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5906_AT5906:=myrec;
		END;
	FUNCTION pAIdLoc5910_AIL5910:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5910_AIL5910:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5909_AR5909:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5910_AIL5910;
		 pARefval5909_AR5909:=myrec;
		END;
	FUNCTION pAPopMonadic5912_APM5912:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic5912_APM5912:=myrec;
		END;
	FUNCTION pAIdLoc5914_AIL5914:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc5914_AIL5914:=myrec;
		END;
	FUNCTION pALocValue5913_ALV5913:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5914_AIL5914;
		 pALocValue5913_ALV5913:=myrec;
		END;
	FUNCTION pAMonadicValue5911_AMV5911:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue5913_ALV5913;
		myrec^.fn:=pAPopMonadic5912_APM5912;
		 pAMonadicValue5911_AMV5911:=myrec;
		END;
	FUNCTION pAAssign5908_AA5908:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pAMonadicValue5911_AMV5911;
		myrec^.dest:=pARefval5909_AR5909;
		 pAAssign5908_AA5908:=myrec;
		END;
	FUNCTION pAAssignMeaning5907_AAM5907:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign5908_AA5908;
		 pAAssignMeaning5907_AAM5907:=myrec;
		END;
	FUNCTION pAAssemblypattern5916_AA5916:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fistb ' );
		pappendp(list,0);
		pAAssemblypattern5916_AA5916:=list;
		END;
	FUNCTION pAAssemblesto5915_AA5915:pprintlist;
	begin
		pAAssemblesto5915_AA5915:=pAAssemblypattern5916_AA5916;
		END;
	FUNCTION pASideeffects5919_AS5919:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5919_AS5919:=nil;
		 pASideeffects5919_AS5919:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5920_AUP5920:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5920_AUP5920:=nil;
		 pAUnconditionalPrecond5920_AUP5920:=myrec;
		END;
	FUNCTION FISTB_FISTB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patbreg_;
		paramcount:=2;
		meaning:=pAAssignMeaning5907_AAM5907;
		matchedAssembler:=pAAssemblesto5915_AA5915;
		END;
		FISTB_FISTB:=myrec;
	END;
	FUNCTION pATypeid5923_AT5923:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ baddrmode  ilcg.pattern@52f73e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5923_AT5923:=myrec;
		END;
	FUNCTION pAPushDyadic5926_APD5926:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic5926_APD5926:=myrec;
		END;
	FUNCTION pAIdLoc5928_AIL5928:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc5928_AIL5928:=myrec;
		END;
	FUNCTION pALocValue5927_ALV5927:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5928_AIL5928;
		 pALocValue5927_ALV5927:=myrec;
		END;
	FUNCTION pAInt8Signed5934_AI8S5934:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed5934_AI8S5934:=myrec;
		END;
	FUNCTION pASignedTformat5933_AST5933:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed5934_AI8S5934;
		 pASignedTformat5933_AST5933:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5932_ATP5932:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype5932_ATP5932:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5931_APT5931:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType5931_APT5931:=myrec;
		END;
	FUNCTION pAIdLoc5938_AIL5938:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5938_AIL5938:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5937_AR5937:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5938_AIL5938;
		 pARefval5937_AR5937:=myrec;
		END;
	FUNCTION pADerefRhs5936_ADR5936:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5937_AR5937;
		 pADerefRhs5936_ADR5936:=myrec;
		END;
	FUNCTION pARhsValue5935_ARV5935:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5936_ADR5936;
		 pARhsValue5935_ARV5935:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs5930_ACR5930:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType5931_APT5931;
		myrec^.arg2:=pARhsValue5935_ARV5935;
		 pACastRhs5930_ACR5930:=myrec;
		END;
	FUNCTION pARhsValue5929_ARV5929:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5930_ACR5930;
		 pARhsValue5929_ARV5929:=myrec;
		END;
	FUNCTION pADyadicValue5925_ADV5925:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue5927_ALV5927;
		myrec^.arg2:=pARhsValue5929_ARV5929;
		myrec^.fn:=pAPushDyadic5926_APD5926;
		 pADyadicValue5925_ADV5925:=myrec;
		END;
	FUNCTION pAValueMeaning5924_AVM5924:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue5925_ADV5925;
		 pAValueMeaning5924_AVM5924:=myrec;
		END;
	FUNCTION pAAssemblypattern5940_AA5940:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fildb ' );
		pappendp(list,0);
		pAAssemblypattern5940_AA5940:=list;
		END;
	FUNCTION pAAssemblesto5939_AA5939:pprintlist;
	begin
		pAAssemblesto5939_AA5939:=pAAssemblypattern5940_AA5940;
		END;
	FUNCTION pASideeffects5943_AS5943:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5943_AS5943:=nil;
		 pASideeffects5943_AS5943:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5944_AUP5944:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5944_AUP5944:=nil;
		 pAUnconditionalPrecond5944_AUP5944:=myrec;
		END;
	FUNCTION FILDB_FILDB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patbaddrmode_;
		paramcount:=2;
		meaning:=pAValueMeaning5924_AVM5924;
		matchedAssembler:=pAAssemblesto5939_AA5939;
		END;
		FILDB_FILDB:=myrec;
	END;
	FUNCTION pATypeid5947_AT5947:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5947_AT5947:=myrec;
		END;
	FUNCTION pAPushDyadic5950_APD5950:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic5950_APD5950:=myrec;
		END;
	FUNCTION pAIdLoc5952_AIL5952:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc5952_AIL5952:=myrec;
		END;
	FUNCTION pALocValue5951_ALV5951:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5952_AIL5952;
		 pALocValue5951_ALV5951:=myrec;
		END;
	FUNCTION pASigned5958_AS5958:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned5958_AS5958:=myrec;
		END;
	FUNCTION pASignedTformat5957_AST5957:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned5958_AS5958;
		 pASignedTformat5957_AST5957:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5956_ATP5956:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype5956_ATP5956:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5955_APT5955:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType5955_APT5955:=myrec;
		END;
	FUNCTION pAIdLoc5962_AIL5962:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5962_AIL5962:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval5961_AR5961:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5962_AIL5962;
		 pARefval5961_AR5961:=myrec;
		END;
	FUNCTION pADerefRhs5960_ADR5960:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval5961_AR5961;
		 pADerefRhs5960_ADR5960:=myrec;
		END;
	FUNCTION pARhsValue5959_ARV5959:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs5960_ADR5960;
		 pARhsValue5959_ARV5959:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs5954_ACR5954:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType5955_APT5955;
		myrec^.arg2:=pARhsValue5959_ARV5959;
		 pACastRhs5954_ACR5954:=myrec;
		END;
	FUNCTION pARhsValue5953_ARV5953:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs5954_ACR5954;
		 pARhsValue5953_ARV5953:=myrec;
		END;
	FUNCTION pADyadicValue5949_ADV5949:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue5951_ALV5951;
		myrec^.arg2:=pARhsValue5953_ARV5953;
		myrec^.fn:=pAPushDyadic5950_APD5950;
		 pADyadicValue5949_ADV5949:=myrec;
		END;
	FUNCTION pAValueMeaning5948_AVM5948:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue5949_ADV5949;
		 pAValueMeaning5948_AVM5948:=myrec;
		END;
	FUNCTION pAAssemblypattern5964_AA5964:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'mov dword[fttemp], ' );
		pappendp(list,0);
		pappends(list,'\n fild dword[fttemp]' );
		pAAssemblypattern5964_AA5964:=list;
		END;
	FUNCTION pAAssemblesto5963_AA5963:pprintlist;
	begin
		pAAssemblesto5963_AA5963:=pAAssemblypattern5964_AA5964;
		END;
	FUNCTION pASideeffects5968_AS5968:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5968_AS5968:=nil;
		 pASideeffects5968_AS5968:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5969_AUP5969:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5969_AUP5969:=nil;
		 pAUnconditionalPrecond5969_AUP5969:=myrec;
		END;
	FUNCTION FILDR_FILDR:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreg_;
		paramcount:=2;
		meaning:=pAValueMeaning5948_AVM5948;
		matchedAssembler:=pAAssemblesto5963_AA5963;
		END;
		FILDR_FILDR:=myrec;
	END;
	FUNCTION pATypeid5972_AT5972:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5972_AT5972:=myrec;
		END;
	FUNCTION pAIeee63Tformat5980_AI63T5980:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat5980_AI63T5980:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype5979_ATP5979:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype5979_ATP5979:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType5978_APT5978:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType5978_APT5978:=myrec;
		END;
	FUNCTION pAReference5977_AR5977:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType5978_APT5978;
		 pAReference5977_AR5977:=myrec;
		END;
	FUNCTION pAReftypeType5976_ART5976:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference5977_AR5977;
		 pAReftypeType5976_ART5976:=myrec;
		END;
	FUNCTION pAIdLoc5981_AIL5981:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc5981_AIL5981:=myrec;
		END;
	FUNCTION pARefcastRefval5975_ARR5975:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType5976_ART5976;
		myrec^.arg2:=pAIdLoc5981_AIL5981;
		 pARefcastRefval5975_ARR5975:=myrec;
		END;
	FUNCTION pAPopMonadic5983_APM5983:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic5983_APM5983:=myrec;
		END;
	FUNCTION pAIdLoc5985_AIL5985:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc5985_AIL5985:=myrec;
		END;
	FUNCTION pALocValue5984_ALV5984:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc5985_AIL5985;
		 pALocValue5984_ALV5984:=myrec;
		END;
	FUNCTION pAMonadicValue5982_AMV5982:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue5984_ALV5984;
		myrec^.fn:=pAPopMonadic5983_APM5983;
		 pAMonadicValue5982_AMV5982:=myrec;
		END;
	FUNCTION pAAssign5974_AA5974:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pAMonadicValue5982_AMV5982;
		myrec^.dest:=pARefcastRefval5975_ARR5975;
		 pAAssign5974_AA5974:=myrec;
		END;
	FUNCTION pAAssignMeaning5973_AAM5973:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign5974_AA5974;
		 pAAssignMeaning5973_AAM5973:=myrec;
		END;
	FUNCTION pAAssemblypattern5987_AA5987:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fstp qword ' );
		pappendp(list,0);
		pAAssemblypattern5987_AA5987:=list;
		END;
	FUNCTION pAAssemblesto5986_AA5986:pprintlist;
	begin
		pAAssemblesto5986_AA5986:=pAAssemblypattern5987_AA5987;
		END;
	FUNCTION pASideeffects5990_AS5990:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects5990_AS5990:=nil;
		 pASideeffects5990_AS5990:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond5991_AUP5991:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond5991_AUP5991:=nil;
		 pAUnconditionalPrecond5991_AUP5991:=myrec;
		END;
	FUNCTION FSTR_FSTR:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmaddrmode_;
		paramcount:=2;
		meaning:=pAAssignMeaning5973_AAM5973;
		matchedAssembler:=pAAssemblesto5986_AA5986;
		END;
		FSTR_FSTR:=myrec;
	END;
	FUNCTION pATypeid5994_AT5994:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid5994_AT5994:=myrec;
		END;
	FUNCTION pAIeee32Tformat6002_AI32T6002:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat6002_AI32T6002:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6001_ATP6001:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype6001_ATP6001:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6000_APT6000:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType6000_APT6000:=myrec;
		END;
	FUNCTION pAReference5999_AR5999:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType6000_APT6000;
		 pAReference5999_AR5999:=myrec;
		END;
	FUNCTION pAReftypeType5998_ART5998:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference5999_AR5999;
		 pAReftypeType5998_ART5998:=myrec;
		END;
	FUNCTION pAIdLoc6003_AIL6003:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6003_AIL6003:=myrec;
		END;
	FUNCTION pARefcastRefval5997_ARR5997:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType5998_ART5998;
		myrec^.arg2:=pAIdLoc6003_AIL6003;
		 pARefcastRefval5997_ARR5997:=myrec;
		END;
	FUNCTION pAPopMonadic6005_APM6005:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic6005_APM6005:=myrec;
		END;
	FUNCTION pAIdLoc6007_AIL6007:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6007_AIL6007:=myrec;
		END;
	FUNCTION pALocValue6006_ALV6006:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6007_AIL6007;
		 pALocValue6006_ALV6006:=myrec;
		END;
	FUNCTION pAMonadicValue6004_AMV6004:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue6006_ALV6006;
		myrec^.fn:=pAPopMonadic6005_APM6005;
		 pAMonadicValue6004_AMV6004:=myrec;
		END;
	FUNCTION pAAssign5996_AA5996:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pAMonadicValue6004_AMV6004;
		myrec^.dest:=pARefcastRefval5997_ARR5997;
		 pAAssign5996_AA5996:=myrec;
		END;
	FUNCTION pAAssignMeaning5995_AAM5995:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign5996_AA5996;
		 pAAssignMeaning5995_AAM5995:=myrec;
		END;
	FUNCTION pAAssemblypattern6009_AA6009:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fstp dword ' );
		pappendp(list,0);
		pAAssemblypattern6009_AA6009:=list;
		END;
	FUNCTION pAAssemblesto6008_AA6008:pprintlist;
	begin
		pAAssemblesto6008_AA6008:=pAAssemblypattern6009_AA6009;
		END;
	FUNCTION pASideeffects6012_AS6012:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6012_AS6012:=nil;
		 pASideeffects6012_AS6012:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6013_AUP6013:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6013_AUP6013:=nil;
		 pAUnconditionalPrecond6013_AUP6013:=myrec;
		END;
	FUNCTION FSTRF_FSTRF:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmaddrmode_;
		paramcount:=2;
		meaning:=pAAssignMeaning5995_AAM5995;
		matchedAssembler:=pAAssemblesto6008_AA6008;
		END;
		FSTRF_FSTRF:=myrec;
	END;
	FUNCTION pATypeid6016_AT6016:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ anyreal  ilcg.pattern@1dc852}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6016_AT6016:=myrec;
		END;
	FUNCTION pAPushDyadic6019_APD6019:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic6019_APD6019:=myrec;
		END;
	FUNCTION pAIdLoc6021_AIL6021:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6021_AIL6021:=myrec;
		END;
	FUNCTION pALocValue6020_ALV6020:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6021_AIL6021;
		 pALocValue6020_ALV6020:=myrec;
		END;
	FUNCTION pATypeid6025_AT6025:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@47f38c}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid6025_AT6025:=myrec;
		END;
	FUNCTION pATypeidType6024_ATT6024:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6025_AT6025;
		 pATypeidType6024_ATT6024:=myrec;
		END;
	FUNCTION pAFloatMonadic6027_AFM6027:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpFLOAT;
		 pAFloatMonadic6027_AFM6027:=myrec;
		END;
	FUNCTION pAPopMonadic6029_APM6029:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic6029_APM6029:=myrec;
		END;
	FUNCTION pAIdLoc6031_AIL6031:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc6031_AIL6031:=myrec;
		END;
	FUNCTION pALocValue6030_ALV6030:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6031_AIL6031;
		 pALocValue6030_ALV6030:=myrec;
		END;
	FUNCTION pAMonadicValue6028_AMV6028:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue6030_ALV6030;
		myrec^.fn:=pAPopMonadic6029_APM6029;
		 pAMonadicValue6028_AMV6028:=myrec;
		END;
	FUNCTION pAMonadicValue6026_AMV6026:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pAMonadicValue6028_AMV6028;
		myrec^.fn:=pAFloatMonadic6027_AFM6027;
		 pAMonadicValue6026_AMV6026:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs6023_ACR6023:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType6024_ATT6024;
		myrec^.arg2:=pAMonadicValue6026_AMV6026;
		 pACastRhs6023_ACR6023:=myrec;
		END;
	FUNCTION pARhsValue6022_ARV6022:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6023_ACR6023;
		 pARhsValue6022_ARV6022:=myrec;
		END;
	FUNCTION pADyadicValue6018_ADV6018:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue6020_ALV6020;
		myrec^.arg2:=pARhsValue6022_ARV6022;
		myrec^.fn:=pAPushDyadic6019_APD6019;
		 pADyadicValue6018_ADV6018:=myrec;
		END;
	FUNCTION pAValueMeaning6017_AVM6017:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue6018_ADV6018;
		 pAValueMeaning6017_AVM6017:=myrec;
		END;
	FUNCTION pAAssemblypattern6033_AA6033:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fild dword [esp]\n add esp,4' );
		pAAssemblypattern6033_AA6033:=list;
		END;
	FUNCTION pAAssemblesto6032_AA6032:pprintlist;
	begin
		pAAssemblesto6032_AA6032:=pAAssemblypattern6033_AA6033;
		END;
	FUNCTION pASideeffects6035_AS6035:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6035_AS6035:=nil;
		 pASideeffects6035_AS6035:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6036_AUP6036:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6036_AUP6036:=nil;
		 pAUnconditionalPrecond6036_AUP6036:=myrec;
		END;
	FUNCTION FLOATMS_FLOATMS:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patanyreal_;
		paramcount:=2;
		meaning:=pAValueMeaning6017_AVM6017;
		matchedAssembler:=pAAssemblesto6032_AA6032;
		END;
		FLOATMS_FLOATMS:=myrec;
	END;
	FUNCTION pAPushDyadic6042_APD6042:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic6042_APD6042:=myrec;
		END;
	FUNCTION pAIdLoc6044_AIL6044:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6044_AIL6044:=myrec;
		END;
	FUNCTION pALocValue6043_ALV6043:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6044_AIL6044;
		 pALocValue6043_ALV6043:=myrec;
		END;
	FUNCTION pAInt64Signed6050_AI64S6050:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64;
		 pAInt64Signed6050_AI64S6050:=myrec;
		END;
	FUNCTION pASignedTformat6049_AST6049:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt64Signed6050_AI64S6050;
		 pASignedTformat6049_AST6049:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6048_ATP6048:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64 ;
		 pATformatPredeclaredtype6048_ATP6048:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6047_APT6047:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64 ;
		 pAPredeclaredtypeType6047_APT6047:=myrec;
		END;
	FUNCTION pAExtendMonadic6052_AEM6052:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpEXTEND;
		 pAExtendMonadic6052_AEM6052:=myrec;
		END;
	FUNCTION pASigned6058_AS6058:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned6058_AS6058:=myrec;
		END;
	FUNCTION pASignedTformat6057_AST6057:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned6058_AS6058;
		 pASignedTformat6057_AST6057:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6056_ATP6056:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype6056_ATP6056:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6055_APT6055:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType6055_APT6055:=myrec;
		END;
	FUNCTION pAPopMonadic6060_APM6060:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic6060_APM6060:=myrec;
		END;
	FUNCTION pAIdLoc6062_AIL6062:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc6062_AIL6062:=myrec;
		END;
	FUNCTION pALocValue6061_ALV6061:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6062_AIL6062;
		 pALocValue6061_ALV6061:=myrec;
		END;
	FUNCTION pAMonadicValue6059_AMV6059:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue6061_ALV6061;
		myrec^.fn:=pAPopMonadic6060_APM6060;
		 pAMonadicValue6059_AMV6059:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs6054_ACR6054:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType6055_APT6055;
		myrec^.arg2:=pAMonadicValue6059_AMV6059;
		 pACastRhs6054_ACR6054:=myrec;
		END;
	FUNCTION pARhsValue6053_ARV6053:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6054_ACR6054;
		 pARhsValue6053_ARV6053:=myrec;
		END;
	FUNCTION pAMonadicValue6051_AMV6051:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue6053_ARV6053;
		myrec^.fn:=pAExtendMonadic6052_AEM6052;
		 pAMonadicValue6051_AMV6051:=myrec;
		END;
		(*! try to cast to type: int64*)
	FUNCTION pACastRhs6046_ACR6046:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType6047_APT6047;
		myrec^.arg2:=pAMonadicValue6051_AMV6051;
		 pACastRhs6046_ACR6046:=myrec;
		END;
	FUNCTION pARhsValue6045_ARV6045:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6046_ACR6046;
		 pARhsValue6045_ARV6045:=myrec;
		END;
	FUNCTION pADyadicValue6041_ADV6041:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue6043_ALV6043;
		myrec^.arg2:=pARhsValue6045_ARV6045;
		myrec^.fn:=pAPushDyadic6042_APD6042;
		 pADyadicValue6041_ADV6041:=myrec;
		END;
	FUNCTION pAValueMeaning6040_AVM6040:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue6041_ADV6041;
		 pAValueMeaning6040_AVM6040:=myrec;
		END;
	FUNCTION pAAssemblypattern6064_AA6064:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fild dword [esp]\n add esp,4' );
		pAAssemblypattern6064_AA6064:=list;
		END;
	FUNCTION pAAssemblesto6063_AA6063:pprintlist;
	begin
		pAAssemblesto6063_AA6063:=pAAssemblypattern6064_AA6064;
		END;
	FUNCTION pASideeffects6066_AS6066:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6066_AS6066:=nil;
		 pASideeffects6066_AS6066:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6067_AUP6067:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6067_AUP6067:=nil;
		 pAUnconditionalPrecond6067_AUP6067:=myrec;
		END;
	FUNCTION EXTENDMS_EXTENDMS:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning6040_AVM6040;
		matchedAssembler:=pAAssemblesto6063_AA6063;
		END;
		EXTENDMS_EXTENDMS:=myrec;
	END;
	FUNCTION pAPushDyadic6073_APD6073:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic6073_APD6073:=myrec;
		END;
	FUNCTION pAIdLoc6075_AIL6075:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6075_AIL6075:=myrec;
		END;
	FUNCTION pALocValue6074_ALV6074:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6075_AIL6075;
		 pALocValue6074_ALV6074:=myrec;
		END;
	FUNCTION pAIeee32Tformat6080_AI32T6080:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat6080_AI32T6080:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6079_ATP6079:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype6079_ATP6079:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6078_APT6078:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType6078_APT6078:=myrec;
		END;
	FUNCTION pAPopMonadic6082_APM6082:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic6082_APM6082:=myrec;
		END;
	FUNCTION pAIdLoc6084_AIL6084:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc6084_AIL6084:=myrec;
		END;
	FUNCTION pALocValue6083_ALV6083:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6084_AIL6084;
		 pALocValue6083_ALV6083:=myrec;
		END;
	FUNCTION pAMonadicValue6081_AMV6081:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue6083_ALV6083;
		myrec^.fn:=pAPopMonadic6082_APM6082;
		 pAMonadicValue6081_AMV6081:=myrec;
		END;
		(*! try to cast to type: ieee32*)
	FUNCTION pACastRhs6077_ACR6077:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType6078_APT6078;
		myrec^.arg2:=pAMonadicValue6081_AMV6081;
		 pACastRhs6077_ACR6077:=myrec;
		END;
	FUNCTION pARhsValue6076_ARV6076:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6077_ACR6077;
		 pARhsValue6076_ARV6076:=myrec;
		END;
	FUNCTION pADyadicValue6072_ADV6072:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue6074_ALV6074;
		myrec^.arg2:=pARhsValue6076_ARV6076;
		myrec^.fn:=pAPushDyadic6073_APD6073;
		 pADyadicValue6072_ADV6072:=myrec;
		END;
	FUNCTION pAValueMeaning6071_AVM6071:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue6072_ADV6072;
		 pAValueMeaning6071_AVM6071:=myrec;
		END;
	FUNCTION pAAssemblypattern6086_AA6086:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fld dword [esp]\n add esp,4' );
		pAAssemblypattern6086_AA6086:=list;
		END;
	FUNCTION pAAssemblesto6085_AA6085:pprintlist;
	begin
		pAAssemblesto6085_AA6085:=pAAssemblypattern6086_AA6086;
		END;
	FUNCTION pASideeffects6088_AS6088:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6088_AS6088:=nil;
		 pASideeffects6088_AS6088:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6089_AUP6089:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6089_AUP6089:=nil;
		 pAUnconditionalPrecond6089_AUP6089:=myrec;
		END;
	FUNCTION FPOPMS_FPOPMS:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning6071_AVM6071;
		matchedAssembler:=pAAssemblesto6085_AA6085;
		END;
		FPOPMS_FPOPMS:=myrec;
	END;
	FUNCTION pAPushDyadic6095_APD6095:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic6095_APD6095:=myrec;
		END;
	FUNCTION pAIdLoc6097_AIL6097:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6097_AIL6097:=myrec;
		END;
	FUNCTION pALocValue6096_ALV6096:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6097_AIL6097;
		 pALocValue6096_ALV6096:=myrec;
		END;
	FUNCTION pAInt64Signed6103_AI64S6103:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64;
		 pAInt64Signed6103_AI64S6103:=myrec;
		END;
	FUNCTION pASignedTformat6102_AST6102:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt64Signed6103_AI64S6103;
		 pASignedTformat6102_AST6102:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6101_ATP6101:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64 ;
		 pATformatPredeclaredtype6101_ATP6101:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6100_APT6100:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint64 ;
		 pAPredeclaredtypeType6100_APT6100:=myrec;
		END;
	FUNCTION pAPopMonadic6105_APM6105:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic6105_APM6105:=myrec;
		END;
	FUNCTION pAIdLoc6107_AIL6107:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc6107_AIL6107:=myrec;
		END;
	FUNCTION pALocValue6106_ALV6106:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6107_AIL6107;
		 pALocValue6106_ALV6106:=myrec;
		END;
	FUNCTION pAMonadicValue6104_AMV6104:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue6106_ALV6106;
		myrec^.fn:=pAPopMonadic6105_APM6105;
		 pAMonadicValue6104_AMV6104:=myrec;
		END;
		(*! try to cast to type: int64*)
	FUNCTION pACastRhs6099_ACR6099:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType6100_APT6100;
		myrec^.arg2:=pAMonadicValue6104_AMV6104;
		 pACastRhs6099_ACR6099:=myrec;
		END;
	FUNCTION pARhsValue6098_ARV6098:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6099_ACR6099;
		 pARhsValue6098_ARV6098:=myrec;
		END;
	FUNCTION pADyadicValue6094_ADV6094:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue6096_ALV6096;
		myrec^.arg2:=pARhsValue6098_ARV6098;
		myrec^.fn:=pAPushDyadic6095_APD6095;
		 pADyadicValue6094_ADV6094:=myrec;
		END;
	FUNCTION pAValueMeaning6093_AVM6093:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue6094_ADV6094;
		 pAValueMeaning6093_AVM6093:=myrec;
		END;
	FUNCTION pAAssemblypattern6109_AA6109:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fild qword [esp]\n add esp,8' );
		pAAssemblypattern6109_AA6109:=list;
		END;
	FUNCTION pAAssemblesto6108_AA6108:pprintlist;
	begin
		pAAssemblesto6108_AA6108:=pAAssemblypattern6109_AA6109;
		END;
	FUNCTION pASideeffects6111_AS6111:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6111_AS6111:=nil;
		 pASideeffects6111_AS6111:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6112_AUP6112:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6112_AUP6112:=nil;
		 pAUnconditionalPrecond6112_AUP6112:=myrec;
		END;
	FUNCTION FPOPMSI64_FPOPMSI64:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning6093_AVM6093;
		matchedAssembler:=pAAssemblesto6108_AA6108;
		END;
		FPOPMSI64_FPOPMSI64:=myrec;
	END;
	FUNCTION pAPushDyadic6118_APD6118:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic6118_APD6118:=myrec;
		END;
	FUNCTION pAIdLoc6120_AIL6120:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6120_AIL6120:=myrec;
		END;
	FUNCTION pALocValue6119_ALV6119:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6120_AIL6120;
		 pALocValue6119_ALV6119:=myrec;
		END;
	FUNCTION pAIeee63Tformat6125_AI63T6125:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat6125_AI63T6125:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6124_ATP6124:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype6124_ATP6124:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6123_APT6123:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType6123_APT6123:=myrec;
		END;
	FUNCTION pAPopMonadic6127_APM6127:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic6127_APM6127:=myrec;
		END;
	FUNCTION pAIdLoc6129_AIL6129:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc6129_AIL6129:=myrec;
		END;
	FUNCTION pALocValue6128_ALV6128:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6129_AIL6129;
		 pALocValue6128_ALV6128:=myrec;
		END;
	FUNCTION pAMonadicValue6126_AMV6126:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue6128_ALV6128;
		myrec^.fn:=pAPopMonadic6127_APM6127;
		 pAMonadicValue6126_AMV6126:=myrec;
		END;
		(*! try to cast to type: ieee64*)
	FUNCTION pACastRhs6122_ACR6122:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType6123_APT6123;
		myrec^.arg2:=pAMonadicValue6126_AMV6126;
		 pACastRhs6122_ACR6122:=myrec;
		END;
	FUNCTION pARhsValue6121_ARV6121:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6122_ACR6122;
		 pARhsValue6121_ARV6121:=myrec;
		END;
	FUNCTION pADyadicValue6117_ADV6117:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue6119_ALV6119;
		myrec^.arg2:=pARhsValue6121_ARV6121;
		myrec^.fn:=pAPushDyadic6118_APD6118;
		 pADyadicValue6117_ADV6117:=myrec;
		END;
	FUNCTION pAValueMeaning6116_AVM6116:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue6117_ADV6117;
		 pAValueMeaning6116_AVM6116:=myrec;
		END;
	FUNCTION pAAssemblypattern6131_AA6131:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fld qword [esp]\n add esp,8' );
		pAAssemblypattern6131_AA6131:=list;
		END;
	FUNCTION pAAssemblesto6130_AA6130:pprintlist;
	begin
		pAAssemblesto6130_AA6130:=pAAssemblypattern6131_AA6131;
		END;
	FUNCTION pASideeffects6133_AS6133:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6133_AS6133:=nil;
		 pASideeffects6133_AS6133:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6134_AUP6134:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6134_AUP6134:=nil;
		 pAUnconditionalPrecond6134_AUP6134:=myrec;
		END;
	FUNCTION DPOPMS_DPOPMS:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning6116_AVM6116;
		matchedAssembler:=pAAssemblesto6130_AA6130;
		END;
		DPOPMS_DPOPMS:=myrec;
	END;
	FUNCTION pAPushDyadic6140_APD6140:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic6140_APD6140:=myrec;
		END;
	FUNCTION pAIdLoc6142_AIL6142:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc6142_AIL6142:=myrec;
		END;
	FUNCTION pALocValue6141_ALV6141:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6142_AIL6142;
		 pALocValue6141_ALV6141:=myrec;
		END;
	FUNCTION pAIeee63Tformat6147_AI63T6147:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat6147_AI63T6147:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6146_ATP6146:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype6146_ATP6146:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6145_APT6145:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType6145_APT6145:=myrec;
		END;
	FUNCTION pAPopMonadic6149_APM6149:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic6149_APM6149:=myrec;
		END;
	FUNCTION pAIdLoc6151_AIL6151:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6151_AIL6151:=myrec;
		END;
	FUNCTION pALocValue6150_ALV6150:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6151_AIL6151;
		 pALocValue6150_ALV6150:=myrec;
		END;
	FUNCTION pAMonadicValue6148_AMV6148:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue6150_ALV6150;
		myrec^.fn:=pAPopMonadic6149_APM6149;
		 pAMonadicValue6148_AMV6148:=myrec;
		END;
		(*! try to cast to type: ieee64*)
	FUNCTION pACastRhs6144_ACR6144:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType6145_APT6145;
		myrec^.arg2:=pAMonadicValue6148_AMV6148;
		 pACastRhs6144_ACR6144:=myrec;
		END;
	FUNCTION pARhsValue6143_ARV6143:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6144_ACR6144;
		 pARhsValue6143_ARV6143:=myrec;
		END;
	FUNCTION pADyadicValue6139_ADV6139:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue6141_ALV6141;
		myrec^.arg2:=pARhsValue6143_ARV6143;
		myrec^.fn:=pAPushDyadic6140_APD6140;
		 pADyadicValue6139_ADV6139:=myrec;
		END;
	FUNCTION pAValueMeaning6138_AVM6138:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue6139_ADV6139;
		 pAValueMeaning6138_AVM6138:=myrec;
		END;
	FUNCTION pAAssemblypattern6153_AA6153:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'sub esp,8\n fstp qword [esp]' );
		pAAssemblypattern6153_AA6153:=list;
		END;
	FUNCTION pAAssemblesto6152_AA6152:pprintlist;
	begin
		pAAssemblesto6152_AA6152:=pAAssemblypattern6153_AA6153;
		END;
	FUNCTION pASideeffects6155_AS6155:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6155_AS6155:=nil;
		 pASideeffects6155_AS6155:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6156_AUP6156:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6156_AUP6156:=nil;
		 pAUnconditionalPrecond6156_AUP6156:=myrec;
		END;
	FUNCTION FPUSHD_FPUSHD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning6138_AVM6138;
		matchedAssembler:=pAAssemblesto6152_AA6152;
		END;
		FPUSHD_FPUSHD:=myrec;
	END;
	FUNCTION pAPushDyadic6162_APD6162:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic6162_APD6162:=myrec;
		END;
	FUNCTION pAIdLoc6164_AIL6164:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc6164_AIL6164:=myrec;
		END;
	FUNCTION pALocValue6163_ALV6163:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6164_AIL6164;
		 pALocValue6163_ALV6163:=myrec;
		END;
	FUNCTION pAIeee32Tformat6169_AI32T6169:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat6169_AI32T6169:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6168_ATP6168:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype6168_ATP6168:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6167_APT6167:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType6167_APT6167:=myrec;
		END;
	FUNCTION pAPopMonadic6171_APM6171:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic6171_APM6171:=myrec;
		END;
	FUNCTION pAIdLoc6173_AIL6173:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6173_AIL6173:=myrec;
		END;
	FUNCTION pALocValue6172_ALV6172:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6173_AIL6173;
		 pALocValue6172_ALV6172:=myrec;
		END;
	FUNCTION pAMonadicValue6170_AMV6170:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue6172_ALV6172;
		myrec^.fn:=pAPopMonadic6171_APM6171;
		 pAMonadicValue6170_AMV6170:=myrec;
		END;
		(*! try to cast to type: ieee32*)
	FUNCTION pACastRhs6166_ACR6166:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType6167_APT6167;
		myrec^.arg2:=pAMonadicValue6170_AMV6170;
		 pACastRhs6166_ACR6166:=myrec;
		END;
	FUNCTION pARhsValue6165_ARV6165:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6166_ACR6166;
		 pARhsValue6165_ARV6165:=myrec;
		END;
	FUNCTION pADyadicValue6161_ADV6161:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue6163_ALV6163;
		myrec^.arg2:=pARhsValue6165_ARV6165;
		myrec^.fn:=pAPushDyadic6162_APD6162;
		 pADyadicValue6161_ADV6161:=myrec;
		END;
	FUNCTION pAValueMeaning6160_AVM6160:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue6161_ADV6161;
		 pAValueMeaning6160_AVM6160:=myrec;
		END;
	FUNCTION pAAssemblypattern6175_AA6175:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'sub esp,4\n fstp dword [esp]' );
		pAAssemblypattern6175_AA6175:=list;
		END;
	FUNCTION pAAssemblesto6174_AA6174:pprintlist;
	begin
		pAAssemblesto6174_AA6174:=pAAssemblypattern6175_AA6175;
		END;
	FUNCTION pASideeffects6177_AS6177:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6177_AS6177:=nil;
		 pASideeffects6177_AS6177:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6178_AUP6178:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6178_AUP6178:=nil;
		 pAUnconditionalPrecond6178_AUP6178:=myrec;
		END;
	FUNCTION FPUSHF_FPUSHF:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning6160_AVM6160;
		matchedAssembler:=pAAssemblesto6174_AA6174;
		END;
		FPUSHF_FPUSHF:=myrec;
	END;
	FUNCTION pATypeid6181_AT6181:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ wmemdummy  ilcg.pattern@5e0c45}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6181_AT6181:=myrec;
		END;
	FUNCTION pATypeid6183_AT6183:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ hiint  ilcg.pattern@44c4a4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6183_AT6183:=myrec;
		END;
	FUNCTION pATypeid6190_AT6190:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ i  ilcg.Param@21a602}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid6190_AT6190:=myrec;
		END;
	FUNCTION pATypeidType6189_ATT6189:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6190_AT6190;
		 pATypeidType6189_ATT6189:=myrec;
		END;
	FUNCTION pAReference6188_AR6188:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType6189_ATT6189;
		 pAReference6188_AR6188:=myrec;
		END;
	FUNCTION pAReftypeType6187_ART6187:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference6188_AR6188;
		 pAReftypeType6187_ART6187:=myrec;
		END;
	FUNCTION pAIdLoc6191_AIL6191:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6191_AIL6191:=myrec;
		END;
	FUNCTION pARefcastRefval6186_ARR6186:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType6187_ART6187;
		myrec^.arg2:=pAIdLoc6191_AIL6191;
		 pARefcastRefval6186_ARR6186:=myrec;
		END;
	FUNCTION pATypeid6195_AT6195:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ i  ilcg.Param@21a602}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid6195_AT6195:=myrec;
		END;
	FUNCTION pATypeidType6194_ATT6194:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6195_AT6195;
		 pATypeidType6194_ATT6194:=myrec;
		END;
	FUNCTION pAPopMonadic6197_APM6197:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic6197_APM6197:=myrec;
		END;
	FUNCTION pAIdLoc6199_AIL6199:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6199_AIL6199:=myrec;
		END;
	FUNCTION pALocValue6198_ALV6198:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6199_AIL6199;
		 pALocValue6198_ALV6198:=myrec;
		END;
	FUNCTION pAMonadicValue6196_AMV6196:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue6198_ALV6198;
		myrec^.fn:=pAPopMonadic6197_APM6197;
		 pAMonadicValue6196_AMV6196:=myrec;
		END;
		(*! try to cast to type: i*)
	FUNCTION pACastRhs6193_ACR6193:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType6194_ATT6194;
		myrec^.arg2:=pAMonadicValue6196_AMV6196;
		 pACastRhs6193_ACR6193:=myrec;
		END;
	FUNCTION pARhsValue6192_ARV6192:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6193_ACR6193;
		 pARhsValue6192_ARV6192:=myrec;
		END;
	FUNCTION pAAssign6185_AA6185:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue6192_ARV6192;
		myrec^.dest:=pARefcastRefval6186_ARR6186;
		 pAAssign6185_AA6185:=myrec;
		END;
	FUNCTION pAAssignMeaning6184_AAM6184:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign6185_AA6185;
		 pAAssignMeaning6184_AAM6184:=myrec;
		END;
	FUNCTION pAAssemblypattern6201_AA6201:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fistp ' );
		pappendp(list,1);
		pappends(list,' ' );
		pappendp(list,0);
		pAAssemblypattern6201_AA6201:=list;
		END;
	FUNCTION pAAssemblesto6200_AA6200:pprintlist;
	begin
		pAAssemblesto6200_AA6200:=pAAssemblypattern6201_AA6201;
		END;
	FUNCTION pASideeffects6206_AS6206:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6206_AS6206:=nil;
		 pASideeffects6206_AS6206:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6207_AUP6207:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6207_AUP6207:=nil;
		 pAUnconditionalPrecond6207_AUP6207:=myrec;
		END;
	FUNCTION FISTR_FISTR:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patwmemdummy_;
		params^[1]:=pathiint_;
		paramcount:=3;
		meaning:=pAAssignMeaning6184_AAM6184;
		matchedAssembler:=pAAssemblesto6200_AA6200;
		END;
		FISTR_FISTR:=myrec;
	END;
	FUNCTION pAPushDyadic6213_APD6213:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic6213_APD6213:=myrec;
		END;
	FUNCTION pAIdLoc6215_AIL6215:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc6215_AIL6215:=myrec;
		END;
	FUNCTION pALocValue6214_ALV6214:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6215_AIL6215;
		 pALocValue6214_ALV6214:=myrec;
		END;
	FUNCTION pASigned6221_AS6221:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned6221_AS6221:=myrec;
		END;
	FUNCTION pASignedTformat6220_AST6220:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned6221_AS6221;
		 pASignedTformat6220_AST6220:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6219_ATP6219:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype6219_ATP6219:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6218_APT6218:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType6218_APT6218:=myrec;
		END;
	FUNCTION pAPopMonadic6223_APM6223:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic6223_APM6223:=myrec;
		END;
	FUNCTION pAIdLoc6225_AIL6225:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6225_AIL6225:=myrec;
		END;
	FUNCTION pALocValue6224_ALV6224:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6225_AIL6225;
		 pALocValue6224_ALV6224:=myrec;
		END;
	FUNCTION pAMonadicValue6222_AMV6222:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue6224_ALV6224;
		myrec^.fn:=pAPopMonadic6223_APM6223;
		 pAMonadicValue6222_AMV6222:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs6217_ACR6217:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType6218_APT6218;
		myrec^.arg2:=pAMonadicValue6222_AMV6222;
		 pACastRhs6217_ACR6217:=myrec;
		END;
	FUNCTION pARhsValue6216_ARV6216:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6217_ACR6217;
		 pARhsValue6216_ARV6216:=myrec;
		END;
	FUNCTION pADyadicValue6212_ADV6212:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue6214_ALV6214;
		myrec^.arg2:=pARhsValue6216_ARV6216;
		myrec^.fn:=pAPushDyadic6213_APD6213;
		 pADyadicValue6212_ADV6212:=myrec;
		END;
	FUNCTION pAValueMeaning6211_AVM6211:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue6212_ADV6212;
		 pAValueMeaning6211_AVM6211:=myrec;
		END;
	FUNCTION pAAssemblypattern6227_AA6227:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'sub esp,4\n fistp dword [esp]' );
		pAAssemblypattern6227_AA6227:=list;
		END;
	FUNCTION pAAssemblesto6226_AA6226:pprintlist;
	begin
		pAAssemblesto6226_AA6226:=pAAssemblypattern6227_AA6227;
		END;
	FUNCTION pASideeffects6229_AS6229:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6229_AS6229:=nil;
		 pASideeffects6229_AS6229:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6230_AUP6230:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6230_AUP6230:=nil;
		 pAUnconditionalPrecond6230_AUP6230:=myrec;
		END;
	FUNCTION FPUSHI_FPUSHI:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=typeparam;
		paramcount:=2;
		meaning:=pAValueMeaning6211_AVM6211;
		matchedAssembler:=pAAssemblesto6226_AA6226;
		END;
		FPUSHI_FPUSHI:=myrec;
	END;
	FUNCTION pATypeid6233_AT6233:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6233_AT6233:=myrec;
		END;
	FUNCTION pAPushDyadic6236_APD6236:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic6236_APD6236:=myrec;
		END;
	FUNCTION pAIdLoc6238_AIL6238:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6238_AIL6238:=myrec;
		END;
	FUNCTION pALocValue6237_ALV6237:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6238_AIL6238;
		 pALocValue6237_ALV6237:=myrec;
		END;
	FUNCTION pAIeee63Tformat6246_AI63T6246:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat6246_AI63T6246:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6245_ATP6245:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype6245_ATP6245:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6244_APT6244:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType6244_APT6244:=myrec;
		END;
	FUNCTION pAReference6243_AR6243:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType6244_APT6244;
		 pAReference6243_AR6243:=myrec;
		END;
	FUNCTION pAReftypeType6242_ART6242:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference6243_AR6243;
		 pAReftypeType6242_ART6242:=myrec;
		END;
	FUNCTION pAIdLoc6247_AIL6247:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6247_AIL6247:=myrec;
		END;
	FUNCTION pARefcastRefval6241_ARR6241:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType6242_ART6242;
		myrec^.arg2:=pAIdLoc6247_AIL6247;
		 pARefcastRefval6241_ARR6241:=myrec;
		END;
	FUNCTION pADerefRhs6240_ADR6240:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval6241_ARR6241;
		 pADerefRhs6240_ADR6240:=myrec;
		END;
	FUNCTION pARhsValue6239_ARV6239:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6240_ADR6240;
		 pARhsValue6239_ARV6239:=myrec;
		END;
	FUNCTION pADyadicValue6235_ADV6235:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue6237_ALV6237;
		myrec^.arg2:=pARhsValue6239_ARV6239;
		myrec^.fn:=pAPushDyadic6236_APD6236;
		 pADyadicValue6235_ADV6235:=myrec;
		END;
	FUNCTION pAValueMeaning6234_AVM6234:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue6235_ADV6235;
		 pAValueMeaning6234_AVM6234:=myrec;
		END;
	FUNCTION pAAssemblypattern6249_AA6249:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fld qword ' );
		pappendp(list,0);
		pAAssemblypattern6249_AA6249:=list;
		END;
	FUNCTION pAAssemblesto6248_AA6248:pprintlist;
	begin
		pAAssemblesto6248_AA6248:=pAAssemblypattern6249_AA6249;
		END;
	FUNCTION pASideeffects6252_AS6252:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6252_AS6252:=nil;
		 pASideeffects6252_AS6252:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6253_AUP6253:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6253_AUP6253:=nil;
		 pAUnconditionalPrecond6253_AUP6253:=myrec;
		END;
	FUNCTION FLD_FLD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmaddrmode_;
		paramcount:=2;
		meaning:=pAValueMeaning6234_AVM6234;
		matchedAssembler:=pAAssemblesto6248_AA6248;
		END;
		FLD_FLD:=myrec;
	END;
	FUNCTION pATypeid6256_AT6256:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6256_AT6256:=myrec;
		END;
	FUNCTION pAPushDyadic6259_APD6259:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic6259_APD6259:=myrec;
		END;
	FUNCTION pAIdLoc6261_AIL6261:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6261_AIL6261:=myrec;
		END;
	FUNCTION pALocValue6260_ALV6260:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6261_AIL6261;
		 pALocValue6260_ALV6260:=myrec;
		END;
	FUNCTION pAIeee32Tformat6269_AI32T6269:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat6269_AI32T6269:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6268_ATP6268:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype6268_ATP6268:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6267_APT6267:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType6267_APT6267:=myrec;
		END;
	FUNCTION pAReference6266_AR6266:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType6267_APT6267;
		 pAReference6266_AR6266:=myrec;
		END;
	FUNCTION pAReftypeType6265_ART6265:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference6266_AR6266;
		 pAReftypeType6265_ART6265:=myrec;
		END;
	FUNCTION pAIdLoc6270_AIL6270:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6270_AIL6270:=myrec;
		END;
	FUNCTION pARefcastRefval6264_ARR6264:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType6265_ART6265;
		myrec^.arg2:=pAIdLoc6270_AIL6270;
		 pARefcastRefval6264_ARR6264:=myrec;
		END;
	FUNCTION pADerefRhs6263_ADR6263:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval6264_ARR6264;
		 pADerefRhs6263_ADR6263:=myrec;
		END;
	FUNCTION pARhsValue6262_ARV6262:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6263_ADR6263;
		 pARhsValue6262_ARV6262:=myrec;
		END;
	FUNCTION pADyadicValue6258_ADV6258:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue6260_ALV6260;
		myrec^.arg2:=pARhsValue6262_ARV6262;
		myrec^.fn:=pAPushDyadic6259_APD6259;
		 pADyadicValue6258_ADV6258:=myrec;
		END;
	FUNCTION pAValueMeaning6257_AVM6257:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue6258_ADV6258;
		 pAValueMeaning6257_AVM6257:=myrec;
		END;
	FUNCTION pAAssemblypattern6272_AA6272:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fld dword ' );
		pappendp(list,0);
		pAAssemblypattern6272_AA6272:=list;
		END;
	FUNCTION pAAssemblesto6271_AA6271:pprintlist;
	begin
		pAAssemblesto6271_AA6271:=pAAssemblypattern6272_AA6272;
		END;
	FUNCTION pASideeffects6275_AS6275:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6275_AS6275:=nil;
		 pASideeffects6275_AS6275:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6276_AUP6276:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6276_AUP6276:=nil;
		 pAUnconditionalPrecond6276_AUP6276:=myrec;
		END;
	FUNCTION FLDF_FLDF:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmaddrmode_;
		paramcount:=2;
		meaning:=pAValueMeaning6257_AVM6257;
		matchedAssembler:=pAAssemblesto6271_AA6271;
		END;
		FLDF_FLDF:=myrec;
	END;
	FUNCTION pATypeid6279_AT6279:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ wmemdummy  ilcg.pattern@5e0c45}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6279_AT6279:=myrec;
		END;
	FUNCTION pATypeid6281_AT6281:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ real  ilcg.pattern@33219b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6281_AT6281:=myrec;
		END;
	FUNCTION pATypeid6283_AT6283:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ hiint  ilcg.pattern@44c4a4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6283_AT6283:=myrec;
		END;
	FUNCTION pAPushDyadic6286_APD6286:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic6286_APD6286:=myrec;
		END;
	FUNCTION pAIdLoc6288_AIL6288:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6288_AIL6288:=myrec;
		END;
	FUNCTION pALocValue6287_ALV6287:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6288_AIL6288;
		 pALocValue6287_ALV6287:=myrec;
		END;
	FUNCTION pATypeid6295_AT6295:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ i  ilcg.Param@5a59fa}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid6295_AT6295:=myrec;
		END;
	FUNCTION pATypeidType6294_ATT6294:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6295_AT6295;
		 pATypeidType6294_ATT6294:=myrec;
		END;
	FUNCTION pAReference6293_AR6293:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType6294_ATT6294;
		 pAReference6293_AR6293:=myrec;
		END;
	FUNCTION pAReftypeType6292_ART6292:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference6293_AR6293;
		 pAReftypeType6292_ART6292:=myrec;
		END;
	FUNCTION pAIdLoc6296_AIL6296:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6296_AIL6296:=myrec;
		END;
	FUNCTION pARefcastRefval6291_ARR6291:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType6292_ART6292;
		myrec^.arg2:=pAIdLoc6296_AIL6296;
		 pARefcastRefval6291_ARR6291:=myrec;
		END;
	FUNCTION pADerefRhs6290_ADR6290:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval6291_ARR6291;
		 pADerefRhs6290_ADR6290:=myrec;
		END;
	FUNCTION pARhsValue6289_ARV6289:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6290_ADR6290;
		 pARhsValue6289_ARV6289:=myrec;
		END;
	FUNCTION pADyadicValue6285_ADV6285:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue6287_ALV6287;
		myrec^.arg2:=pARhsValue6289_ARV6289;
		myrec^.fn:=pAPushDyadic6286_APD6286;
		 pADyadicValue6285_ADV6285:=myrec;
		END;
	FUNCTION pAValueMeaning6284_AVM6284:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue6285_ADV6285;
		 pAValueMeaning6284_AVM6284:=myrec;
		END;
	FUNCTION pAAssemblypattern6298_AA6298:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fild ' );
		pappendp(list,2);
		pappends(list,' ' );
		pappendp(list,0);
		pAAssemblypattern6298_AA6298:=list;
		END;
	FUNCTION pAAssemblesto6297_AA6297:pprintlist;
	begin
		pAAssemblesto6297_AA6297:=pAAssemblypattern6298_AA6298;
		END;
	FUNCTION pASideeffects6303_AS6303:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6303_AS6303:=nil;
		 pASideeffects6303_AS6303:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6304_AUP6304:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6304_AUP6304:=nil;
		 pAUnconditionalPrecond6304_AUP6304:=myrec;
		END;
	FUNCTION FILD_FILD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patwmemdummy_;
		params^[2]:=pathiint_;
		params^[1]:=patreal_;
		paramcount:=4;
		meaning:=pAValueMeaning6284_AVM6284;
		matchedAssembler:=pAAssemblesto6297_AA6297;
		END;
		FILD_FILD:=myrec;
	END;
	FUNCTION pATypeid6307_AT6307:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6307_AT6307:=myrec;
		END;
	FUNCTION pATypeid6309_AT6309:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ real  ilcg.pattern@33219b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6309_AT6309:=myrec;
		END;
	FUNCTION pATypeid6311_AT6311:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ hiint  ilcg.pattern@44c4a4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6311_AT6311:=myrec;
		END;
	FUNCTION pAPushDyadic6314_APD6314:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic6314_APD6314:=myrec;
		END;
	FUNCTION pAIdLoc6316_AIL6316:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6316_AIL6316:=myrec;
		END;
	FUNCTION pALocValue6315_ALV6315:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6316_AIL6316;
		 pALocValue6315_ALV6315:=myrec;
		END;
	FUNCTION pAFloatMonadic6318_AFM6318:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpFLOAT;
		 pAFloatMonadic6318_AFM6318:=myrec;
		END;
	FUNCTION pATypeid6325_AT6325:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ i  ilcg.Param@346c4c}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid6325_AT6325:=myrec;
		END;
	FUNCTION pATypeidType6324_ATT6324:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6325_AT6325;
		 pATypeidType6324_ATT6324:=myrec;
		END;
	FUNCTION pAReference6323_AR6323:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType6324_ATT6324;
		 pAReference6323_AR6323:=myrec;
		END;
	FUNCTION pAReftypeType6322_ART6322:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference6323_AR6323;
		 pAReftypeType6322_ART6322:=myrec;
		END;
	FUNCTION pAIdLoc6326_AIL6326:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6326_AIL6326:=myrec;
		END;
	FUNCTION pARefcastRefval6321_ARR6321:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType6322_ART6322;
		myrec^.arg2:=pAIdLoc6326_AIL6326;
		 pARefcastRefval6321_ARR6321:=myrec;
		END;
	FUNCTION pADerefRhs6320_ADR6320:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval6321_ARR6321;
		 pADerefRhs6320_ADR6320:=myrec;
		END;
	FUNCTION pARhsValue6319_ARV6319:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6320_ADR6320;
		 pARhsValue6319_ARV6319:=myrec;
		END;
	FUNCTION pAMonadicValue6317_AMV6317:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue6319_ARV6319;
		myrec^.fn:=pAFloatMonadic6318_AFM6318;
		 pAMonadicValue6317_AMV6317:=myrec;
		END;
	FUNCTION pADyadicValue6313_ADV6313:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue6315_ALV6315;
		myrec^.arg2:=pAMonadicValue6317_AMV6317;
		myrec^.fn:=pAPushDyadic6314_APD6314;
		 pADyadicValue6313_ADV6313:=myrec;
		END;
	FUNCTION pAValueMeaning6312_AVM6312:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue6313_ADV6313;
		 pAValueMeaning6312_AVM6312:=myrec;
		END;
	FUNCTION pAAssemblypattern6328_AA6328:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fild ' );
		pappendp(list,2);
		pappends(list,' ' );
		pappendp(list,0);
		pAAssemblypattern6328_AA6328:=list;
		END;
	FUNCTION pAAssemblesto6327_AA6327:pprintlist;
	begin
		pAAssemblesto6327_AA6327:=pAAssemblypattern6328_AA6328;
		END;
	FUNCTION pASideeffects6333_AS6333:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6333_AS6333:=nil;
		 pASideeffects6333_AS6333:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6334_AUP6334:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6334_AUP6334:=nil;
		 pAUnconditionalPrecond6334_AUP6334:=myrec;
		END;
	FUNCTION FILDF_FILDF:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmaddrmode_;
		params^[2]:=pathiint_;
		params^[1]:=patreal_;
		paramcount:=4;
		meaning:=pAValueMeaning6312_AVM6312;
		matchedAssembler:=pAAssemblesto6327_AA6327;
		END;
		FILDF_FILDF:=myrec;
	END;
	FUNCTION pATypeid6337_AT6337:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ real  ilcg.pattern@33219b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6337_AT6337:=myrec;
		END;
	FUNCTION pAPushDyadic6340_APD6340:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic6340_APD6340:=myrec;
		END;
	FUNCTION pAIdLoc6342_AIL6342:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6342_AIL6342:=myrec;
		END;
	FUNCTION pALocValue6341_ALV6341:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6342_AIL6342;
		 pALocValue6341_ALV6341:=myrec;
		END;
	FUNCTION pASigned6348_AS6348:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned6348_AS6348:=myrec;
		END;
	FUNCTION pASignedTformat6347_AST6347:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned6348_AS6348;
		 pASignedTformat6347_AST6347:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6346_ATP6346:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype6346_ATP6346:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6345_APT6345:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType6345_APT6345:=myrec;
		END;
	FUNCTION pAPopMonadic6350_APM6350:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic6350_APM6350:=myrec;
		END;
	FUNCTION pAIdLoc6352_AIL6352:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc6352_AIL6352:=myrec;
		END;
	FUNCTION pALocValue6351_ALV6351:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6352_AIL6352;
		 pALocValue6351_ALV6351:=myrec;
		END;
	FUNCTION pAMonadicValue6349_AMV6349:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue6351_ALV6351;
		myrec^.fn:=pAPopMonadic6350_APM6350;
		 pAMonadicValue6349_AMV6349:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs6344_ACR6344:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType6345_APT6345;
		myrec^.arg2:=pAMonadicValue6349_AMV6349;
		 pACastRhs6344_ACR6344:=myrec;
		END;
	FUNCTION pARhsValue6343_ARV6343:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6344_ACR6344;
		 pARhsValue6343_ARV6343:=myrec;
		END;
	FUNCTION pADyadicValue6339_ADV6339:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue6341_ALV6341;
		myrec^.arg2:=pARhsValue6343_ARV6343;
		myrec^.fn:=pAPushDyadic6340_APD6340;
		 pADyadicValue6339_ADV6339:=myrec;
		END;
	FUNCTION pAValueMeaning6338_AVM6338:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue6339_ADV6339;
		 pAValueMeaning6338_AVM6338:=myrec;
		END;
	FUNCTION pAAssemblypattern6354_AA6354:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fild dword[esp]\n add esp,4' );
		pAAssemblypattern6354_AA6354:=list;
		END;
	FUNCTION pAAssemblesto6353_AA6353:pprintlist;
	begin
		pAAssemblesto6353_AA6353:=pAAssemblypattern6354_AA6354;
		END;
	FUNCTION pASideeffects6356_AS6356:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6356_AS6356:=nil;
		 pASideeffects6356_AS6356:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6357_AUP6357:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6357_AUP6357:=nil;
		 pAUnconditionalPrecond6357_AUP6357:=myrec;
		END;
	FUNCTION FILDIP_FILDIP:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreal_;
		paramcount:=2;
		meaning:=pAValueMeaning6338_AVM6338;
		matchedAssembler:=pAAssemblesto6353_AA6353;
		END;
		FILDIP_FILDIP:=myrec;
	END;
	FUNCTION pALtOperator6361_ALO6361:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pALtOperator6361_ALO6361:=nil;
		 pALtOperator6361_ALO6361:=myrec;
		END;
	FUNCTION pAGtOperator6365_AGO6365:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAGtOperator6365_AGO6365:=nil;
		 pAGtOperator6365_AGO6365:=myrec;
		END;
	FUNCTION pAEqOperator6369_AEO6369:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAEqOperator6369_AEO6369:=nil;
		 pAEqOperator6369_AEO6369:=myrec;
		END;
	FUNCTION pALeOperator6373_ALO6373:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pALeOperator6373_ALO6373:=nil;
		 pALeOperator6373_ALO6373:=myrec;
		END;
	FUNCTION pAGeOperator6377_AGO6377:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAGeOperator6377_AGO6377:=nil;
		 pAGeOperator6377_AGO6377:=myrec;
		END;
	FUNCTION pANeOperator6381_ANO6381:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANeOperator6381_ANO6381:=nil;
		 pANeOperator6381_ANO6381:=myrec;
		END;
	FUNCTION pATypeid6386_AT6386:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fne  ilcg.Operation@76a711}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6386_AT6386:=myrec;
		END;
	FUNCTION pATypeidType6385_ATT6385:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6386_AT6386;
		 pATypeidType6385_ATT6385:=myrec;
		END;
	FUNCTION pATypeid6388_AT6388:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fge  ilcg.Operation@59b7c1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6388_AT6388:=myrec;
		END;
	FUNCTION pATypeidType6387_ATT6387:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6388_AT6388;
		 pATypeidType6387_ATT6387:=myrec;
		END;
	FUNCTION pATypeid6390_AT6390:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fle  ilcg.Operation@446579}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6390_AT6390:=myrec;
		END;
	FUNCTION pATypeidType6389_ATT6389:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6390_AT6390;
		 pATypeidType6389_ATT6389:=myrec;
		END;
	FUNCTION pATypeid6392_AT6392:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ feq  ilcg.Operation@2dcae8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6392_AT6392:=myrec;
		END;
	FUNCTION pATypeidType6391_ATT6391:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6392_AT6392;
		 pATypeidType6391_ATT6391:=myrec;
		END;
	FUNCTION pATypeid6394_AT6394:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fgt  ilcg.Operation@4ace71}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6394_AT6394:=myrec;
		END;
	FUNCTION pATypeidType6393_ATT6393:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6394_AT6394;
		 pATypeidType6393_ATT6393:=myrec;
		END;
	FUNCTION pATypeid6396_AT6396:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ flt  ilcg.Operation@8ebd2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6396_AT6396:=myrec;
		END;
	FUNCTION pATypeidType6395_ATT6395:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6396_AT6396;
		 pATypeidType6395_ATT6395:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl6384_AAP6384:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 221;
		myrec^.last:= 226;
		 pAAlternativesPatterndecl6384_AAP6384:=myrec;
		END;
	FUNCTION pATypeid6401_AT6401:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6401_AT6401:=myrec;
		END;
	FUNCTION pATypeid6403_AT6403:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fcondition  ilcg.pattern@33d448}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6403_AT6403:=myrec;
		END;
	FUNCTION pATypeid6405_AT6405:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@3e965}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6405_AT6405:=myrec;
		END;
	FUNCTION pATypeid6410_AT6410:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@d1e0b}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid6410_AT6410:=myrec;
		END;
	FUNCTION pATypeidType6409_ATT6409:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6410_AT6410;
		 pATypeidType6409_ATT6409:=myrec;
		END;
	FUNCTION pAIdentifierDyadic6412_AID6412:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdentifierDyadic6412_AID6412:=myrec;
		END;
	FUNCTION pAPopMonadic6414_APM6414:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic6414_APM6414:=myrec;
		END;
	FUNCTION pAIdLoc6416_AIL6416:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6416_AIL6416:=myrec;
		END;
	FUNCTION pALocValue6415_ALV6415:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6416_AIL6416;
		 pALocValue6415_ALV6415:=myrec;
		END;
	FUNCTION pAMonadicValue6413_AMV6413:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue6415_ALV6415;
		myrec^.fn:=pAPopMonadic6414_APM6414;
		 pAMonadicValue6413_AMV6413:=myrec;
		END;
	FUNCTION pAPopMonadic6418_APM6418:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic6418_APM6418:=myrec;
		END;
	FUNCTION pAIdLoc6420_AIL6420:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6420_AIL6420:=myrec;
		END;
	FUNCTION pALocValue6419_ALV6419:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6420_AIL6420;
		 pALocValue6419_ALV6419:=myrec;
		END;
	FUNCTION pAMonadicValue6417_AMV6417:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue6419_ALV6419;
		myrec^.fn:=pAPopMonadic6418_APM6418;
		 pAMonadicValue6417_AMV6417:=myrec;
		END;
	FUNCTION pADyadicValue6411_ADV6411:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pAMonadicValue6413_AMV6413;
		myrec^.arg2:=pAMonadicValue6417_AMV6417;
		myrec^.fn:=pAIdentifierDyadic6412_AID6412;
		 pADyadicValue6411_ADV6411:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs6408_ACR6408:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType6409_ATT6409;
		myrec^.arg2:=pADyadicValue6411_ADV6411;
		 pACastRhs6408_ACR6408:=myrec;
		END;
	FUNCTION pARhsValue6407_ARV6407:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6408_ACR6408;
		 pARhsValue6407_ARV6407:=myrec;
		END;
	FUNCTION pAIdLoc6423_AIL6423:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6423_AIL6423:=myrec;
		END;
	FUNCTION pALocValue6422_ALV6422:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6423_AIL6423;
		 pALocValue6422_ALV6422:=myrec;
		END;
	FUNCTION pAGotoMeaning6421_AGM6421:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=gotonode;
		myrec^.dest:=pALocValue6422_ALV6422;
		 pAGotoMeaning6421_AGM6421:=myrec;
		END;
	FUNCTION pAIfMeaning6406_AIM6406:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pARhsValue6407_ARV6407;
		myrec^.action:=pAGotoMeaning6421_AGM6421;
		 pAIfMeaning6406_AIM6406:=myrec;
		END;
	FUNCTION pAAssemblypattern6425_AA6425:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fcomip st0,st1 \n  fincstp\n j' );
		pappendp(list,2);
		pappends(list,' near  ' );
		pappendp(list,0);
		pAAssemblypattern6425_AA6425:=list;
		END;
	FUNCTION pAAssemblesto6424_AA6424:pprintlist;
	begin
		pAAssemblesto6424_AA6424:=pAAssemblypattern6425_AA6425;
		END;
	FUNCTION pASideeffects6430_AS6430:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6430_AS6430:=nil;
		 pASideeffects6430_AS6430:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6431_AUP6431:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6431_AUP6431:=nil;
		 pAUnconditionalPrecond6431_AUP6431:=myrec;
		END;
	FUNCTION p6FIFGOTO_6FIFGOTO:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patmaddrmode_;
		params^[0]:=patlabel;
		params^[3]:=patint_;
		params^[2]:=patfcondition_;
		paramcount:=5;
		meaning:=pAIfMeaning6406_AIM6406;
		matchedAssembler:=pAAssemblesto6424_AA6424;
		END;
		p6FIFGOTO_6FIFGOTO:=myrec;
	END;
	FUNCTION pATypeid6436_AT6436:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6436_AT6436:=myrec;
		END;
	FUNCTION pATypeid6438_AT6438:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fcondition  ilcg.pattern@33d448}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6438_AT6438:=myrec;
		END;
	FUNCTION pATypeid6440_AT6440:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@3e965}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6440_AT6440:=myrec;
		END;
	FUNCTION pATypeid6445_AT6445:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@44b664}
		myrec^.tag:=param;
		myrec^.index:= 3;
		 pATypeid6445_AT6445:=myrec;
		END;
	FUNCTION pATypeidType6444_ATT6444:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6445_AT6445;
		 pATypeidType6444_ATT6444:=myrec;
		END;
	FUNCTION pAIdentifierDyadic6447_AID6447:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdentifierDyadic6447_AID6447:=myrec;
		END;
	FUNCTION pAPopMonadic6449_APM6449:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic6449_APM6449:=myrec;
		END;
	FUNCTION pAIdLoc6451_AIL6451:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6451_AIL6451:=myrec;
		END;
	FUNCTION pALocValue6450_ALV6450:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6451_AIL6451;
		 pALocValue6450_ALV6450:=myrec;
		END;
	FUNCTION pAMonadicValue6448_AMV6448:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue6450_ALV6450;
		myrec^.fn:=pAPopMonadic6449_APM6449;
		 pAMonadicValue6448_AMV6448:=myrec;
		END;
	FUNCTION pAIeee32Tformat6459_AI32T6459:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat6459_AI32T6459:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6458_ATP6458:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype6458_ATP6458:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6457_APT6457:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType6457_APT6457:=myrec;
		END;
	FUNCTION pAReference6456_AR6456:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType6457_APT6457;
		 pAReference6456_AR6456:=myrec;
		END;
	FUNCTION pAReftypeType6455_ART6455:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference6456_AR6456;
		 pAReftypeType6455_ART6455:=myrec;
		END;
	FUNCTION pAIdLoc6460_AIL6460:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc6460_AIL6460:=myrec;
		END;
	FUNCTION pARefcastRefval6454_ARR6454:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType6455_ART6455;
		myrec^.arg2:=pAIdLoc6460_AIL6460;
		 pARefcastRefval6454_ARR6454:=myrec;
		END;
	FUNCTION pADerefRhs6453_ADR6453:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval6454_ARR6454;
		 pADerefRhs6453_ADR6453:=myrec;
		END;
	FUNCTION pARhsValue6452_ARV6452:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6453_ADR6453;
		 pARhsValue6452_ARV6452:=myrec;
		END;
	FUNCTION pADyadicValue6446_ADV6446:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pAMonadicValue6448_AMV6448;
		myrec^.arg2:=pARhsValue6452_ARV6452;
		myrec^.fn:=pAIdentifierDyadic6447_AID6447;
		 pADyadicValue6446_ADV6446:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs6443_ACR6443:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType6444_ATT6444;
		myrec^.arg2:=pADyadicValue6446_ADV6446;
		 pACastRhs6443_ACR6443:=myrec;
		END;
	FUNCTION pARhsValue6442_ARV6442:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6443_ACR6443;
		 pARhsValue6442_ARV6442:=myrec;
		END;
	FUNCTION pAIdLoc6463_AIL6463:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6463_AIL6463:=myrec;
		END;
	FUNCTION pALocValue6462_ALV6462:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6463_AIL6463;
		 pALocValue6462_ALV6462:=myrec;
		END;
	FUNCTION pAGotoMeaning6461_AGM6461:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=gotonode;
		myrec^.dest:=pALocValue6462_ALV6462;
		 pAGotoMeaning6461_AGM6461:=myrec;
		END;
	FUNCTION pAIfMeaning6441_AIM6441:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pARhsValue6442_ARV6442;
		myrec^.action:=pAGotoMeaning6461_AGM6461;
		 pAIfMeaning6441_AIM6441:=myrec;
		END;
	FUNCTION pAAssemblypattern6465_AA6465:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fcomp dword ' );
		pappendp(list,1);
		pappends(list,' \npush ax\n fstsw ax\n sahf\n pop ax\n j' );
		pappendp(list,2);
		pappends(list,' near  ' );
		pappendp(list,0);
		pAAssemblypattern6465_AA6465:=list;
		END;
	FUNCTION pAAssemblesto6464_AA6464:pprintlist;
	begin
		pAAssemblesto6464_AA6464:=pAAssemblypattern6465_AA6465;
		END;
	FUNCTION pASideeffects6472_AS6472:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6472_AS6472:=nil;
		 pASideeffects6472_AS6472:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6473_AUP6473:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6473_AUP6473:=nil;
		 pAUnconditionalPrecond6473_AUP6473:=myrec;
		END;
	FUNCTION FIFGOTO_FIFGOTO:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patmaddrmode_;
		params^[0]:=patlabel;
		params^[3]:=patint_;
		params^[2]:=patfcondition_;
		paramcount:=5;
		meaning:=pAIfMeaning6441_AIM6441;
		matchedAssembler:=pAAssemblesto6464_AA6464;
		END;
		FIFGOTO_FIFGOTO:=myrec;
	END;
	FUNCTION pATypeid6478_AT6478:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fcondition  ilcg.pattern@33d448}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6478_AT6478:=myrec;
		END;
	FUNCTION pATypeid6480_AT6480:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@3e965}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6480_AT6480:=myrec;
		END;
	FUNCTION pATypeid6485_AT6485:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@9fe65}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid6485_AT6485:=myrec;
		END;
	FUNCTION pATypeidType6484_ATT6484:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6485_AT6485;
		 pATypeidType6484_ATT6484:=myrec;
		END;
	FUNCTION pAIdentifierDyadic6487_AID6487:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdentifierDyadic6487_AID6487:=myrec;
		END;
	FUNCTION pAPopMonadic6489_APM6489:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic6489_APM6489:=myrec;
		END;
	FUNCTION pAIdLoc6491_AIL6491:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6491_AIL6491:=myrec;
		END;
	FUNCTION pALocValue6490_ALV6490:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6491_AIL6491;
		 pALocValue6490_ALV6490:=myrec;
		END;
	FUNCTION pAMonadicValue6488_AMV6488:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue6490_ALV6490;
		myrec^.fn:=pAPopMonadic6489_APM6489;
		 pAMonadicValue6488_AMV6488:=myrec;
		END;
	FUNCTION pAPopMonadic6493_APM6493:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic6493_APM6493:=myrec;
		END;
	FUNCTION pAIdLoc6495_AIL6495:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6495_AIL6495:=myrec;
		END;
	FUNCTION pALocValue6494_ALV6494:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6495_AIL6495;
		 pALocValue6494_ALV6494:=myrec;
		END;
	FUNCTION pAMonadicValue6492_AMV6492:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue6494_ALV6494;
		myrec^.fn:=pAPopMonadic6493_APM6493;
		 pAMonadicValue6492_AMV6492:=myrec;
		END;
	FUNCTION pADyadicValue6486_ADV6486:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pAMonadicValue6488_AMV6488;
		myrec^.arg2:=pAMonadicValue6492_AMV6492;
		myrec^.fn:=pAIdentifierDyadic6487_AID6487;
		 pADyadicValue6486_ADV6486:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs6483_ACR6483:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType6484_ATT6484;
		myrec^.arg2:=pADyadicValue6486_ADV6486;
		 pACastRhs6483_ACR6483:=myrec;
		END;
	FUNCTION pARhsValue6482_ARV6482:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6483_ACR6483;
		 pARhsValue6482_ARV6482:=myrec;
		END;
	FUNCTION pAIdLoc6498_AIL6498:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6498_AIL6498:=myrec;
		END;
	FUNCTION pALocValue6497_ALV6497:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6498_AIL6498;
		 pALocValue6497_ALV6497:=myrec;
		END;
	FUNCTION pAGotoMeaning6496_AGM6496:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=gotonode;
		myrec^.dest:=pALocValue6497_ALV6497;
		 pAGotoMeaning6496_AGM6496:=myrec;
		END;
	FUNCTION pAIfMeaning6481_AIM6481:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ifnode;
		myrec^.condition:=pARhsValue6482_ARV6482;
		myrec^.action:=pAGotoMeaning6496_AGM6496;
		 pAIfMeaning6481_AIM6481:=myrec;
		END;
	FUNCTION pAAssemblypattern6500_AA6500:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fxch\n fcompp \npush ax  \n fstsw ax\n sahf\n pop ax\n j' );
		pappendp(list,1);
		pappends(list,' near ' );
		pappendp(list,0);
		pAAssemblypattern6500_AA6500:=list;
		END;
	FUNCTION pAAssemblesto6499_AA6499:pprintlist;
	begin
		pAAssemblesto6499_AA6499:=pAAssemblypattern6500_AA6500;
		END;
	FUNCTION pASideeffects6505_AS6505:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6505_AS6505:=nil;
		 pASideeffects6505_AS6505:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6506_AUP6506:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6506_AUP6506:=nil;
		 pAUnconditionalPrecond6506_AUP6506:=myrec;
		END;
	FUNCTION FIFGOTOgeneral_FIFGOTO:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patlabel;
		params^[2]:=patint_;
		params^[1]:=patfcondition_;
		paramcount:=4;
		meaning:=pAIfMeaning6481_AIM6481;
		matchedAssembler:=pAAssemblesto6499_AA6499;
		END;
		FIFGOTOgeneral_FIFGOTO:=myrec;
	END;
	FUNCTION pATypeid6509_AT6509:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fcondition  ilcg.pattern@33d448}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6509_AT6509:=myrec;
		END;
	FUNCTION pATypeid6511_AT6511:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6511_AT6511:=myrec;
		END;
	FUNCTION pAInt8Signed6520_AI8S6520:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed6520_AI8S6520:=myrec;
		END;
	FUNCTION pASignedTformat6519_AST6519:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed6520_AI8S6520;
		 pASignedTformat6519_AST6519:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6518_ATP6518:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype6518_ATP6518:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6517_APT6517:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType6517_APT6517:=myrec;
		END;
	FUNCTION pAReference6516_AR6516:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType6517_APT6517;
		 pAReference6516_AR6516:=myrec;
		END;
	FUNCTION pAReftypeType6515_ART6515:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference6516_AR6516;
		 pAReftypeType6515_ART6515:=myrec;
		END;
	FUNCTION pAIdLoc6521_AIL6521:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc6521_AIL6521:=myrec;
		END;
	FUNCTION pARefcastRefval6514_ARR6514:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType6515_ART6515;
		myrec^.arg2:=pAIdLoc6521_AIL6521;
		 pARefcastRefval6514_ARR6514:=myrec;
		END;
	FUNCTION pAInt8Signed6527_AI8S6527:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed6527_AI8S6527:=myrec;
		END;
	FUNCTION pASignedTformat6526_AST6526:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed6527_AI8S6527;
		 pASignedTformat6526_AST6526:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6525_ATP6525:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype6525_ATP6525:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6524_APT6524:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pAPredeclaredtypeType6524_APT6524:=myrec;
		END;
	FUNCTION pAIdentifierDyadic6529_AID6529:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic6529_AID6529:=myrec;
		END;
	FUNCTION pAPopMonadic6531_APM6531:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic6531_APM6531:=myrec;
		END;
	FUNCTION pAIdLoc6533_AIL6533:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6533_AIL6533:=myrec;
		END;
	FUNCTION pALocValue6532_ALV6532:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6533_AIL6533;
		 pALocValue6532_ALV6532:=myrec;
		END;
	FUNCTION pAMonadicValue6530_AMV6530:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue6532_ALV6532;
		myrec^.fn:=pAPopMonadic6531_APM6531;
		 pAMonadicValue6530_AMV6530:=myrec;
		END;
	FUNCTION pAPopMonadic6535_APM6535:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic6535_APM6535:=myrec;
		END;
	FUNCTION pAIdLoc6537_AIL6537:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6537_AIL6537:=myrec;
		END;
	FUNCTION pALocValue6536_ALV6536:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6537_AIL6537;
		 pALocValue6536_ALV6536:=myrec;
		END;
	FUNCTION pAMonadicValue6534_AMV6534:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue6536_ALV6536;
		myrec^.fn:=pAPopMonadic6535_APM6535;
		 pAMonadicValue6534_AMV6534:=myrec;
		END;
	FUNCTION pADyadicValue6528_ADV6528:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pAMonadicValue6530_AMV6530;
		myrec^.arg2:=pAMonadicValue6534_AMV6534;
		myrec^.fn:=pAIdentifierDyadic6529_AID6529;
		 pADyadicValue6528_ADV6528:=myrec;
		END;
		(*! try to cast to type: int8*)
	FUNCTION pACastRhs6523_ACR6523:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType6524_APT6524;
		myrec^.arg2:=pADyadicValue6528_ADV6528;
		 pACastRhs6523_ACR6523:=myrec;
		END;
	FUNCTION pARhsValue6522_ARV6522:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6523_ACR6523;
		 pARhsValue6522_ARV6522:=myrec;
		END;
	FUNCTION pAAssign6513_AA6513:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue6522_ARV6522;
		myrec^.dest:=pARefcastRefval6514_ARR6514;
		 pAAssign6513_AA6513:=myrec;
		END;
	FUNCTION pAAssignMeaning6512_AAM6512:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign6513_AA6513;
		 pAAssignMeaning6512_AAM6512:=myrec;
		END;
	FUNCTION pAAssemblypattern6539_AA6539:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fxch\n fcompp\n push ax\n fstsw ax\n sahf\n pop ax\n set' );
		pappendp(list,0);
		pappends(list,' ' );
		pappendp(list,1);
		pappends(list,'\nnot ' );
		pappendp(list,1);
		pappends(list,'\n inc ' );
		pappendp(list,1);
		pAAssemblypattern6539_AA6539:=list;
		END;
	FUNCTION pAAssemblesto6538_AA6538:pprintlist;
	begin
		pAAssemblesto6538_AA6538:=pAAssemblypattern6539_AA6539;
		END;
	FUNCTION pASideeffects6548_AS6548:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6548_AS6548:=nil;
		 pASideeffects6548_AS6548:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6549_AUP6549:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6549_AUP6549:=nil;
		 pAUnconditionalPrecond6549_AUP6549:=myrec;
		END;
	FUNCTION FSET_FSET:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patbreg_;
		params^[0]:=patfcondition_;
		paramcount:=3;
		meaning:=pAAssignMeaning6512_AAM6512;
		matchedAssembler:=pAAssemblesto6538_AA6538;
		END;
		FSET_FSET:=myrec;
	END;
	FUNCTION pATypeid6552_AT6552:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fmoperator  ilcg.pattern@92539}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6552_AT6552:=myrec;
		END;
	FUNCTION pAPushDyadic6555_APD6555:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic6555_APD6555:=myrec;
		END;
	FUNCTION pAIdLoc6557_AIL6557:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6557_AIL6557:=myrec;
		END;
	FUNCTION pALocValue6556_ALV6556:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6557_AIL6557;
		 pALocValue6556_ALV6556:=myrec;
		END;
	FUNCTION pAIdLoc6559_AIL6559:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6559_AIL6559:=myrec;
		END;
	FUNCTION pALocValue6558_ALV6558:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6559_AIL6559;
		 pALocValue6558_ALV6558:=myrec;
		END;
	FUNCTION pADyadicValue6554_ADV6554:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue6556_ALV6556;
		myrec^.arg2:=pALocValue6558_ALV6558;
		myrec^.fn:=pAPushDyadic6555_APD6555;
		 pADyadicValue6554_ADV6554:=myrec;
		END;
	FUNCTION pAValueMeaning6553_AVM6553:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue6554_ADV6554;
		 pAValueMeaning6553_AVM6553:=myrec;
		END;
	FUNCTION pAAssemblypattern6561_AA6561:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappendp(list,0);
		pAAssemblypattern6561_AA6561:=list;
		END;
	FUNCTION pAAssemblesto6560_AA6560:pprintlist;
	begin
		pAAssemblesto6560_AA6560:=pAAssemblypattern6561_AA6561;
		END;
	FUNCTION pASideeffects6563_AS6563:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6563_AS6563:=nil;
		 pASideeffects6563_AS6563:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6564_AUP6564:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6564_AUP6564:=nil;
		 pAUnconditionalPrecond6564_AUP6564:=myrec;
		END;
	FUNCTION FMOP_FMOP:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patfmoperator_;
		paramcount:=2;
		meaning:=pAValueMeaning6553_AVM6553;
		matchedAssembler:=pAAssemblesto6560_AA6560;
		END;
		FMOP_FMOP:=myrec;
	END;
	FUNCTION pATypeid6567_AT6567:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ real  ilcg.pattern@33219b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6567_AT6567:=myrec;
		END;
	FUNCTION pAPushDyadic6570_APD6570:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic6570_APD6570:=myrec;
		END;
	FUNCTION pAIdLoc6572_AIL6572:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6572_AIL6572:=myrec;
		END;
	FUNCTION pALocValue6571_ALV6571:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6572_AIL6572;
		 pALocValue6571_ALV6571:=myrec;
		END;
	FUNCTION pATypeid6576_AT6576:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@43d34b}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid6576_AT6576:=myrec;
		END;
	FUNCTION pATypeidType6575_ATT6575:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6576_AT6576;
		 pATypeidType6575_ATT6575:=myrec;
		END;
	FUNCTION pAMinusDyadic6578_AMD6578:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpminus;
		 pAMinusDyadic6578_AMD6578:=myrec;
		END;
	FUNCTION pATypeid6582_AT6582:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@43d34b}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid6582_AT6582:=myrec;
		END;
	FUNCTION pATypeidType6581_ATT6581:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6582_AT6582;
		 pATypeidType6581_ATT6581:=myrec;
		END;
	FUNCTION pAOptionalsign6586_AO6586:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign6586_AO6586:=nil;
		 pAOptionalsign6586_AO6586:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber6585_AIN6585:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=0 ;
		 pAIntegerNumber6585_AIN6585:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs6584_ANR6584:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber6585_AIN6585;
		 pANumberRhs6584_ANR6584:=myrec;
		END;
	FUNCTION pARhsValue6583_ARV6583:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs6584_ANR6584;
		 pARhsValue6583_ARV6583:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs6580_ACR6580:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType6581_ATT6581;
		myrec^.arg2:=pARhsValue6583_ARV6583;
		 pACastRhs6580_ACR6580:=myrec;
		END;
	FUNCTION pARhsValue6579_ARV6579:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6580_ACR6580;
		 pARhsValue6579_ARV6579:=myrec;
		END;
	FUNCTION pATypeid6590_AT6590:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@43d34b}
		myrec^.tag:=param;
		myrec^.index:= 0;
		 pATypeid6590_AT6590:=myrec;
		END;
	FUNCTION pATypeidType6589_ATT6589:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6590_AT6590;
		 pATypeidType6589_ATT6589:=myrec;
		END;
	FUNCTION pAPopMonadic6592_APM6592:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic6592_APM6592:=myrec;
		END;
	FUNCTION pAIdLoc6594_AIL6594:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6594_AIL6594:=myrec;
		END;
	FUNCTION pALocValue6593_ALV6593:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6594_AIL6594;
		 pALocValue6593_ALV6593:=myrec;
		END;
	FUNCTION pAMonadicValue6591_AMV6591:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue6593_ALV6593;
		myrec^.fn:=pAPopMonadic6592_APM6592;
		 pAMonadicValue6591_AMV6591:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs6588_ACR6588:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType6589_ATT6589;
		myrec^.arg2:=pAMonadicValue6591_AMV6591;
		 pACastRhs6588_ACR6588:=myrec;
		END;
	FUNCTION pARhsValue6587_ARV6587:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6588_ACR6588;
		 pARhsValue6587_ARV6587:=myrec;
		END;
	FUNCTION pADyadicValue6577_ADV6577:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue6579_ARV6579;
		myrec^.arg2:=pARhsValue6587_ARV6587;
		myrec^.fn:=pAMinusDyadic6578_AMD6578;
		 pADyadicValue6577_ADV6577:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs6574_ACR6574:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType6575_ATT6575;
		myrec^.arg2:=pADyadicValue6577_ADV6577;
		 pACastRhs6574_ACR6574:=myrec;
		END;
	FUNCTION pARhsValue6573_ARV6573:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6574_ACR6574;
		 pARhsValue6573_ARV6573:=myrec;
		END;
	FUNCTION pADyadicValue6569_ADV6569:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue6571_ALV6571;
		myrec^.arg2:=pARhsValue6573_ARV6573;
		myrec^.fn:=pAPushDyadic6570_APD6570;
		 pADyadicValue6569_ADV6569:=myrec;
		END;
	FUNCTION pAValueMeaning6568_AVM6568:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue6569_ADV6569;
		 pAValueMeaning6568_AVM6568:=myrec;
		END;
	FUNCTION pAAssemblypattern6596_AA6596:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fchs' );
		pAAssemblypattern6596_AA6596:=list;
		END;
	FUNCTION pAAssemblesto6595_AA6595:pprintlist;
	begin
		pAAssemblesto6595_AA6595:=pAAssemblypattern6596_AA6596;
		END;
	FUNCTION pASideeffects6598_AS6598:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6598_AS6598:=nil;
		 pASideeffects6598_AS6598:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6599_AUP6599:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6599_AUP6599:=nil;
		 pAUnconditionalPrecond6599_AUP6599:=myrec;
		END;
	FUNCTION FCHS_FCHS:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patreal_;
		paramcount:=2;
		meaning:=pAValueMeaning6568_AVM6568;
		matchedAssembler:=pAAssemblesto6595_AA6595;
		END;
		FCHS_FCHS:=myrec;
	END;
	FUNCTION pATypeid6602_AT6602:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ float  ilcg.pattern@7f0a34}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6602_AT6602:=myrec;
		END;
	FUNCTION pAPushDyadic6605_APD6605:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic6605_APD6605:=myrec;
		END;
	FUNCTION pAIdLoc6607_AIL6607:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6607_AIL6607:=myrec;
		END;
	FUNCTION pALocValue6606_ALV6606:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6607_AIL6607;
		 pALocValue6606_ALV6606:=myrec;
		END;
	FUNCTION pAConstRhs6609_ACR6609:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(0);;
		 pAConstRhs6609_ACR6609:=myrec;
		END;
	FUNCTION pARhsValue6608_ARV6608:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs6609_ACR6609;
		 pARhsValue6608_ARV6608:=myrec;
		END;
	FUNCTION pADyadicValue6604_ADV6604:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue6606_ALV6606;
		myrec^.arg2:=pARhsValue6608_ARV6608;
		myrec^.fn:=pAPushDyadic6605_APD6605;
		 pADyadicValue6604_ADV6604:=myrec;
		END;
	FUNCTION pAValueMeaning6603_AVM6603:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue6604_ADV6604;
		 pAValueMeaning6603_AVM6603:=myrec;
		END;
	FUNCTION pAAssemblypattern6611_AA6611:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'floadlit ' );
		pappendp(list,0);
		pAAssemblypattern6611_AA6611:=list;
		END;
	FUNCTION pAAssemblesto6610_AA6610:pprintlist;
	begin
		pAAssemblesto6610_AA6610:=pAAssemblypattern6611_AA6611;
		END;
	FUNCTION pASideeffects6614_AS6614:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6614_AS6614:=nil;
		 pASideeffects6614_AS6614:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6615_AUP6615:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6615_AUP6615:=nil;
		 pAUnconditionalPrecond6615_AUP6615:=myrec;
		END;
	FUNCTION FLOADLIT_FLOADLIT:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patfloat_;
		paramcount:=2;
		meaning:=pAValueMeaning6603_AVM6603;
		matchedAssembler:=pAAssemblesto6610_AA6610;
		END;
		FLOADLIT_FLOADLIT:=myrec;
	END;
	FUNCTION pATypeid6618_AT6618:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ real  ilcg.pattern@33219b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6618_AT6618:=myrec;
		END;
	FUNCTION pATypeid6620_AT6620:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ anyreal  ilcg.pattern@1dc852}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6620_AT6620:=myrec;
		END;
	FUNCTION pAPushDyadic6623_APD6623:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic6623_APD6623:=myrec;
		END;
	FUNCTION pAIdLoc6625_AIL6625:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6625_AIL6625:=myrec;
		END;
	FUNCTION pALocValue6624_ALV6624:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6625_AIL6625;
		 pALocValue6624_ALV6624:=myrec;
		END;
	FUNCTION pATypeid6629_AT6629:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@4d0e66}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid6629_AT6629:=myrec;
		END;
	FUNCTION pATypeidType6628_ATT6628:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6629_AT6629;
		 pATypeidType6628_ATT6628:=myrec;
		END;
	FUNCTION pAConstRhs6631_ACR6631:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(0);;
		 pAConstRhs6631_ACR6631:=myrec;
		END;
	FUNCTION pARhsValue6630_ARV6630:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs6631_ACR6631;
		 pARhsValue6630_ARV6630:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs6627_ACR6627:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType6628_ATT6628;
		myrec^.arg2:=pARhsValue6630_ARV6630;
		 pACastRhs6627_ACR6627:=myrec;
		END;
	FUNCTION pARhsValue6626_ARV6626:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6627_ACR6627;
		 pARhsValue6626_ARV6626:=myrec;
		END;
	FUNCTION pADyadicValue6622_ADV6622:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue6624_ALV6624;
		myrec^.arg2:=pARhsValue6626_ARV6626;
		myrec^.fn:=pAPushDyadic6623_APD6623;
		 pADyadicValue6622_ADV6622:=myrec;
		END;
	FUNCTION pAValueMeaning6621_AVM6621:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue6622_ADV6622;
		 pAValueMeaning6621_AVM6621:=myrec;
		END;
	FUNCTION pAAssemblypattern6633_AA6633:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'floadlit ' );
		pappendp(list,0);
		pAAssemblypattern6633_AA6633:=list;
		END;
	FUNCTION pAAssemblesto6632_AA6632:pprintlist;
	begin
		pAAssemblesto6632_AA6632:=pAAssemblypattern6633_AA6633;
		END;
	FUNCTION pASideeffects6636_AS6636:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6636_AS6636:=nil;
		 pASideeffects6636_AS6636:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6637_AUP6637:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6637_AUP6637:=nil;
		 pAUnconditionalPrecond6637_AUP6637:=myrec;
		END;
	FUNCTION FLOADDLIT_FLOADDLIT:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patanyreal_;
		params^[0]:=patreal_;
		paramcount:=3;
		meaning:=pAValueMeaning6621_AVM6621;
		matchedAssembler:=pAAssemblesto6632_AA6632;
		END;
		FLOADDLIT_FLOADDLIT:=myrec;
	END;
	FUNCTION pATypeid6640_AT6640:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ hiint  ilcg.pattern@44c4a4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6640_AT6640:=myrec;
		END;
	FUNCTION pATypeid6642_AT6642:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ real  ilcg.pattern@33219b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6642_AT6642:=myrec;
		END;
	FUNCTION pAPushDyadic6645_APD6645:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic6645_APD6645:=myrec;
		END;
	FUNCTION pAIdLoc6647_AIL6647:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6647_AIL6647:=myrec;
		END;
	FUNCTION pALocValue6646_ALV6646:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6647_AIL6647;
		 pALocValue6646_ALV6646:=myrec;
		END;
	FUNCTION pATypeid6651_AT6651:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@634094}
		myrec^.tag:=param;
		myrec^.index:= 1;
		 pATypeid6651_AT6651:=myrec;
		END;
	FUNCTION pATypeidType6650_ATT6650:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6651_AT6651;
		 pATypeidType6650_ATT6650:=myrec;
		END;
	FUNCTION pAConstRhs6653_ACR6653:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=constant;
		myrec^.arg:=buildparamref(0);;
		 pAConstRhs6653_ACR6653:=myrec;
		END;
	FUNCTION pARhsValue6652_ARV6652:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAConstRhs6653_ACR6653;
		 pARhsValue6652_ARV6652:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs6649_ACR6649:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType6650_ATT6650;
		myrec^.arg2:=pARhsValue6652_ARV6652;
		 pACastRhs6649_ACR6649:=myrec;
		END;
	FUNCTION pARhsValue6648_ARV6648:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6649_ACR6649;
		 pARhsValue6648_ARV6648:=myrec;
		END;
	FUNCTION pADyadicValue6644_ADV6644:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue6646_ALV6646;
		myrec^.arg2:=pARhsValue6648_ARV6648;
		myrec^.fn:=pAPushDyadic6645_APD6645;
		 pADyadicValue6644_ADV6644:=myrec;
		END;
	FUNCTION pAValueMeaning6643_AVM6643:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue6644_ADV6644;
		 pAValueMeaning6643_AVM6643:=myrec;
		END;
	FUNCTION pAAssemblypattern6655_AA6655:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'filoadlit ' );
		pappendp(list,0);
		pAAssemblypattern6655_AA6655:=list;
		END;
	FUNCTION pAAssemblesto6654_AA6654:pprintlist;
	begin
		pAAssemblesto6654_AA6654:=pAAssemblypattern6655_AA6655;
		END;
	FUNCTION pASideeffects6658_AS6658:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6658_AS6658:=nil;
		 pASideeffects6658_AS6658:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6659_AUP6659:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6659_AUP6659:=nil;
		 pAUnconditionalPrecond6659_AUP6659:=myrec;
		END;
	FUNCTION FILOADLIT_FILOADLIT:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patreal_;
		params^[0]:=pathiint_;
		paramcount:=3;
		meaning:=pAValueMeaning6643_AVM6643;
		matchedAssembler:=pAAssemblesto6654_AA6654;
		END;
		FILOADLIT_FILOADLIT:=myrec;
	END;
	FUNCTION pATypeid6662_AT6662:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6662_AT6662:=myrec;
		END;
	FUNCTION pATypeid6664_AT6664:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ foperator  ilcg.pattern@56cd93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6664_AT6664:=myrec;
		END;
	FUNCTION pAPushDyadic6667_APD6667:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic6667_APD6667:=myrec;
		END;
	FUNCTION pAIdLoc6669_AIL6669:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6669_AIL6669:=myrec;
		END;
	FUNCTION pALocValue6668_ALV6668:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6669_AIL6669;
		 pALocValue6668_ALV6668:=myrec;
		END;
	FUNCTION pAIdentifierDyadic6671_AID6671:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdentifierDyadic6671_AID6671:=myrec;
		END;
	FUNCTION pAPopMonadic6673_APM6673:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic6673_APM6673:=myrec;
		END;
	FUNCTION pAIdLoc6675_AIL6675:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6675_AIL6675:=myrec;
		END;
	FUNCTION pALocValue6674_ALV6674:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6675_AIL6675;
		 pALocValue6674_ALV6674:=myrec;
		END;
	FUNCTION pAMonadicValue6672_AMV6672:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue6674_ALV6674;
		myrec^.fn:=pAPopMonadic6673_APM6673;
		 pAMonadicValue6672_AMV6672:=myrec;
		END;
	FUNCTION pAIeee63Tformat6683_AI63T6683:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64;
		 pAIeee63Tformat6683_AI63T6683:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6682_ATP6682:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pATformatPredeclaredtype6682_ATP6682:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6681_APT6681:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee64 ;
		 pAPredeclaredtypeType6681_APT6681:=myrec;
		END;
	FUNCTION pAReference6680_AR6680:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType6681_APT6681;
		 pAReference6680_AR6680:=myrec;
		END;
	FUNCTION pAReftypeType6679_ART6679:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference6680_AR6680;
		 pAReftypeType6679_ART6679:=myrec;
		END;
	FUNCTION pAIdLoc6684_AIL6684:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6684_AIL6684:=myrec;
		END;
	FUNCTION pARefcastRefval6678_ARR6678:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType6679_ART6679;
		myrec^.arg2:=pAIdLoc6684_AIL6684;
		 pARefcastRefval6678_ARR6678:=myrec;
		END;
	FUNCTION pADerefRhs6677_ADR6677:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval6678_ARR6678;
		 pADerefRhs6677_ADR6677:=myrec;
		END;
	FUNCTION pARhsValue6676_ARV6676:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6677_ADR6677;
		 pARhsValue6676_ARV6676:=myrec;
		END;
	FUNCTION pADyadicValue6670_ADV6670:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pAMonadicValue6672_AMV6672;
		myrec^.arg2:=pARhsValue6676_ARV6676;
		myrec^.fn:=pAIdentifierDyadic6671_AID6671;
		 pADyadicValue6670_ADV6670:=myrec;
		END;
	FUNCTION pADyadicValue6666_ADV6666:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue6668_ALV6668;
		myrec^.arg2:=pADyadicValue6670_ADV6670;
		myrec^.fn:=pAPushDyadic6667_APD6667;
		 pADyadicValue6666_ADV6666:=myrec;
		END;
	FUNCTION pAValueMeaning6665_AVM6665:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue6666_ADV6666;
		 pAValueMeaning6665_AVM6665:=myrec;
		END;
	FUNCTION pAAssemblypattern6686_AA6686:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'f' );
		pappendp(list,1);
		pappends(list,'  qword  ' );
		pappendp(list,0);
		pAAssemblypattern6686_AA6686:=list;
		END;
	FUNCTION pAAssemblesto6685_AA6685:pprintlist;
	begin
		pAAssemblesto6685_AA6685:=pAAssemblypattern6686_AA6686;
		END;
	FUNCTION pASideeffects6691_AS6691:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6691_AS6691:=nil;
		 pASideeffects6691_AS6691:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6692_AUP6692:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6692_AUP6692:=nil;
		 pAUnconditionalPrecond6692_AUP6692:=myrec;
		END;
	FUNCTION FOP_FOP:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmaddrmode_;
		params^[1]:=patfoperator_;
		paramcount:=3;
		meaning:=pAValueMeaning6665_AVM6665;
		matchedAssembler:=pAAssemblesto6685_AA6685;
		END;
		FOP_FOP:=myrec;
	END;
	FUNCTION pATypeid6695_AT6695:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6695_AT6695:=myrec;
		END;
	FUNCTION pATypeid6697_AT6697:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ foperator  ilcg.pattern@56cd93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6697_AT6697:=myrec;
		END;
	FUNCTION pATypeid6699_AT6699:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ real  ilcg.pattern@33219b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6699_AT6699:=myrec;
		END;
	FUNCTION pAPushDyadic6702_APD6702:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic6702_APD6702:=myrec;
		END;
	FUNCTION pAIdLoc6704_AIL6704:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6704_AIL6704:=myrec;
		END;
	FUNCTION pALocValue6703_ALV6703:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6704_AIL6704;
		 pALocValue6703_ALV6703:=myrec;
		END;
	FUNCTION pATypeid6708_AT6708:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@78d6a6}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid6708_AT6708:=myrec;
		END;
	FUNCTION pATypeidType6707_ATT6707:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6708_AT6708;
		 pATypeidType6707_ATT6707:=myrec;
		END;
	FUNCTION pAIdentifierDyadic6710_AID6710:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdentifierDyadic6710_AID6710:=myrec;
		END;
	FUNCTION pAPopMonadic6712_APM6712:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic6712_APM6712:=myrec;
		END;
	FUNCTION pAIdLoc6714_AIL6714:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6714_AIL6714:=myrec;
		END;
	FUNCTION pALocValue6713_ALV6713:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6714_AIL6714;
		 pALocValue6713_ALV6713:=myrec;
		END;
	FUNCTION pAMonadicValue6711_AMV6711:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue6713_ALV6713;
		myrec^.fn:=pAPopMonadic6712_APM6712;
		 pAMonadicValue6711_AMV6711:=myrec;
		END;
	FUNCTION pATypeid6718_AT6718:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@78d6a6}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid6718_AT6718:=myrec;
		END;
	FUNCTION pATypeidType6717_ATT6717:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6718_AT6718;
		 pATypeidType6717_ATT6717:=myrec;
		END;
	FUNCTION pATypeid6725_AT6725:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ t  ilcg.Param@78d6a6}
		myrec^.tag:=param;
		myrec^.index:= 2;
		 pATypeid6725_AT6725:=myrec;
		END;
	FUNCTION pATypeidType6724_ATT6724:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid6725_AT6725;
		 pATypeidType6724_ATT6724:=myrec;
		END;
	FUNCTION pAReference6723_AR6723:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pATypeidType6724_ATT6724;
		 pAReference6723_AR6723:=myrec;
		END;
	FUNCTION pAReftypeType6722_ART6722:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference6723_AR6723;
		 pAReftypeType6722_ART6722:=myrec;
		END;
	FUNCTION pAIdLoc6726_AIL6726:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6726_AIL6726:=myrec;
		END;
	FUNCTION pARefcastRefval6721_ARR6721:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType6722_ART6722;
		myrec^.arg2:=pAIdLoc6726_AIL6726;
		 pARefcastRefval6721_ARR6721:=myrec;
		END;
	FUNCTION pADerefRhs6720_ADR6720:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval6721_ARR6721;
		 pADerefRhs6720_ADR6720:=myrec;
		END;
	FUNCTION pARhsValue6719_ARV6719:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6720_ADR6720;
		 pARhsValue6719_ARV6719:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs6716_ACR6716:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType6717_ATT6717;
		myrec^.arg2:=pARhsValue6719_ARV6719;
		 pACastRhs6716_ACR6716:=myrec;
		END;
	FUNCTION pARhsValue6715_ARV6715:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6716_ACR6716;
		 pARhsValue6715_ARV6715:=myrec;
		END;
	FUNCTION pADyadicValue6709_ADV6709:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pAMonadicValue6711_AMV6711;
		myrec^.arg2:=pARhsValue6715_ARV6715;
		myrec^.fn:=pAIdentifierDyadic6710_AID6710;
		 pADyadicValue6709_ADV6709:=myrec;
		END;
		(*! try to cast to type: t*)
	FUNCTION pACastRhs6706_ACR6706:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pATypeidType6707_ATT6707;
		myrec^.arg2:=pADyadicValue6709_ADV6709;
		 pACastRhs6706_ACR6706:=myrec;
		END;
	FUNCTION pARhsValue6705_ARV6705:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6706_ACR6706;
		 pARhsValue6705_ARV6705:=myrec;
		END;
	FUNCTION pADyadicValue6701_ADV6701:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue6703_ALV6703;
		myrec^.arg2:=pARhsValue6705_ARV6705;
		myrec^.fn:=pAPushDyadic6702_APD6702;
		 pADyadicValue6701_ADV6701:=myrec;
		END;
	FUNCTION pAValueMeaning6700_AVM6700:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue6701_ADV6701;
		 pAValueMeaning6700_AVM6700:=myrec;
		END;
	FUNCTION pAAssemblypattern6728_AA6728:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'f' );
		pappendp(list,1);
		pappends(list,' ' );
		pappendp(list,2);
		pappends(list,' ' );
		pappendp(list,0);
		pAAssemblypattern6728_AA6728:=list;
		END;
	FUNCTION pAAssemblesto6727_AA6727:pprintlist;
	begin
		pAAssemblesto6727_AA6727:=pAAssemblypattern6728_AA6728;
		END;
	FUNCTION pASideeffects6735_AS6735:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6735_AS6735:=nil;
		 pASideeffects6735_AS6735:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6736_AUP6736:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6736_AUP6736:=nil;
		 pAUnconditionalPrecond6736_AUP6736:=myrec;
		END;
	FUNCTION FOPF_FOPF:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmaddrmode_;
		params^[2]:=patreal_;
		params^[1]:=patfoperator_;
		paramcount:=4;
		meaning:=pAValueMeaning6700_AVM6700;
		matchedAssembler:=pAAssemblesto6727_AA6727;
		END;
		FOPF_FOPF:=myrec;
	END;
	FUNCTION pATypeid6739_AT6739:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6739_AT6739:=myrec;
		END;
	FUNCTION pATypeid6741_AT6741:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ foperator  ilcg.pattern@56cd93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6741_AT6741:=myrec;
		END;
	FUNCTION pAPushDyadic6744_APD6744:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic6744_APD6744:=myrec;
		END;
	FUNCTION pAIdLoc6746_AIL6746:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6746_AIL6746:=myrec;
		END;
	FUNCTION pALocValue6745_ALV6745:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6746_AIL6746;
		 pALocValue6745_ALV6745:=myrec;
		END;
	FUNCTION pAIdentifierDyadic6748_AID6748:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdentifierDyadic6748_AID6748:=myrec;
		END;
	FUNCTION pAPopMonadic6750_APM6750:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic6750_APM6750:=myrec;
		END;
	FUNCTION pAIdLoc6752_AIL6752:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6752_AIL6752:=myrec;
		END;
	FUNCTION pALocValue6751_ALV6751:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6752_AIL6752;
		 pALocValue6751_ALV6751:=myrec;
		END;
	FUNCTION pAMonadicValue6749_AMV6749:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue6751_ALV6751;
		myrec^.fn:=pAPopMonadic6750_APM6750;
		 pAMonadicValue6749_AMV6749:=myrec;
		END;
	FUNCTION pAFloatMonadic6754_AFM6754:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpFLOAT;
		 pAFloatMonadic6754_AFM6754:=myrec;
		END;
	FUNCTION pAIdLoc6758_AIL6758:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6758_AIL6758:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6757_AR6757:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6758_AIL6758;
		 pARefval6757_AR6757:=myrec;
		END;
	FUNCTION pADerefRhs6756_ADR6756:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6757_AR6757;
		 pADerefRhs6756_ADR6756:=myrec;
		END;
	FUNCTION pARhsValue6755_ARV6755:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6756_ADR6756;
		 pARhsValue6755_ARV6755:=myrec;
		END;
	FUNCTION pAMonadicValue6753_AMV6753:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue6755_ARV6755;
		myrec^.fn:=pAFloatMonadic6754_AFM6754;
		 pAMonadicValue6753_AMV6753:=myrec;
		END;
	FUNCTION pADyadicValue6747_ADV6747:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pAMonadicValue6749_AMV6749;
		myrec^.arg2:=pAMonadicValue6753_AMV6753;
		myrec^.fn:=pAIdentifierDyadic6748_AID6748;
		 pADyadicValue6747_ADV6747:=myrec;
		END;
	FUNCTION pADyadicValue6743_ADV6743:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue6745_ALV6745;
		myrec^.arg2:=pADyadicValue6747_ADV6747;
		myrec^.fn:=pAPushDyadic6744_APD6744;
		 pADyadicValue6743_ADV6743:=myrec;
		END;
	FUNCTION pAValueMeaning6742_AVM6742:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue6743_ADV6743;
		 pAValueMeaning6742_AVM6742:=myrec;
		END;
	FUNCTION pAAssemblypattern6760_AA6760:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fi' );
		pappendp(list,1);
		pappends(list,'  dword  ' );
		pappendp(list,0);
		pAAssemblypattern6760_AA6760:=list;
		END;
	FUNCTION pAAssemblesto6759_AA6759:pprintlist;
	begin
		pAAssemblesto6759_AA6759:=pAAssemblypattern6760_AA6760;
		END;
	FUNCTION pASideeffects6765_AS6765:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6765_AS6765:=nil;
		 pASideeffects6765_AS6765:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6766_AUP6766:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6766_AUP6766:=nil;
		 pAUnconditionalPrecond6766_AUP6766:=myrec;
		END;
	FUNCTION FOPI_FOPI:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmaddrmode_;
		params^[1]:=patfoperator_;
		paramcount:=3;
		meaning:=pAValueMeaning6742_AVM6742;
		matchedAssembler:=pAAssemblesto6759_AA6759;
		END;
		FOPI_FOPI:=myrec;
	END;
	FUNCTION pATypeid6769_AT6769:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6769_AT6769:=myrec;
		END;
	FUNCTION pATypeid6771_AT6771:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ foperator  ilcg.pattern@56cd93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6771_AT6771:=myrec;
		END;
	FUNCTION pAPushDyadic6774_APD6774:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic6774_APD6774:=myrec;
		END;
	FUNCTION pAIdLoc6776_AIL6776:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6776_AIL6776:=myrec;
		END;
	FUNCTION pALocValue6775_ALV6775:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6776_AIL6776;
		 pALocValue6775_ALV6775:=myrec;
		END;
	FUNCTION pAIdentifierDyadic6778_AID6778:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdentifierDyadic6778_AID6778:=myrec;
		END;
	FUNCTION pAPopMonadic6780_APM6780:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic6780_APM6780:=myrec;
		END;
	FUNCTION pAIdLoc6782_AIL6782:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6782_AIL6782:=myrec;
		END;
	FUNCTION pALocValue6781_ALV6781:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6782_AIL6782;
		 pALocValue6781_ALV6781:=myrec;
		END;
	FUNCTION pAMonadicValue6779_AMV6779:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue6781_ALV6781;
		myrec^.fn:=pAPopMonadic6780_APM6780;
		 pAMonadicValue6779_AMV6779:=myrec;
		END;
	FUNCTION pAIdLoc6786_AIL6786:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6786_AIL6786:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6785_AR6785:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6786_AIL6786;
		 pARefval6785_AR6785:=myrec;
		END;
	FUNCTION pADerefRhs6784_ADR6784:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6785_AR6785;
		 pADerefRhs6784_ADR6784:=myrec;
		END;
	FUNCTION pARhsValue6783_ARV6783:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6784_ADR6784;
		 pARhsValue6783_ARV6783:=myrec;
		END;
	FUNCTION pADyadicValue6777_ADV6777:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pAMonadicValue6779_AMV6779;
		myrec^.arg2:=pARhsValue6783_ARV6783;
		myrec^.fn:=pAIdentifierDyadic6778_AID6778;
		 pADyadicValue6777_ADV6777:=myrec;
		END;
	FUNCTION pADyadicValue6773_ADV6773:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue6775_ALV6775;
		myrec^.arg2:=pADyadicValue6777_ADV6777;
		myrec^.fn:=pAPushDyadic6774_APD6774;
		 pADyadicValue6773_ADV6773:=myrec;
		END;
	FUNCTION pAValueMeaning6772_AVM6772:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue6773_ADV6773;
		 pAValueMeaning6772_AVM6772:=myrec;
		END;
	FUNCTION pAAssemblypattern6788_AA6788:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fi' );
		pappendp(list,1);
		pappends(list,'  dword  ' );
		pappendp(list,0);
		pAAssemblypattern6788_AA6788:=list;
		END;
	FUNCTION pAAssemblesto6787_AA6787:pprintlist;
	begin
		pAAssemblesto6787_AA6787:=pAAssemblypattern6788_AA6788;
		END;
	FUNCTION pASideeffects6793_AS6793:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6793_AS6793:=nil;
		 pASideeffects6793_AS6793:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6794_AUP6794:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6794_AUP6794:=nil;
		 pAUnconditionalPrecond6794_AUP6794:=myrec;
		END;
	FUNCTION FOPII_FOPII:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmaddrmode_;
		params^[1]:=patfoperator_;
		paramcount:=3;
		meaning:=pAValueMeaning6772_AVM6772;
		matchedAssembler:=pAAssemblesto6787_AA6787;
		END;
		FOPII_FOPII:=myrec;
	END;
	FUNCTION pATypeid6797_AT6797:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ foperator  ilcg.pattern@56cd93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6797_AT6797:=myrec;
		END;
	FUNCTION pATypeid6799_AT6799:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ real  ilcg.pattern@33219b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6799_AT6799:=myrec;
		END;
	FUNCTION pAPushDyadic6802_APD6802:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic6802_APD6802:=myrec;
		END;
	FUNCTION pAIdLoc6804_AIL6804:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6804_AIL6804:=myrec;
		END;
	FUNCTION pALocValue6803_ALV6803:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6804_AIL6804;
		 pALocValue6803_ALV6803:=myrec;
		END;
	FUNCTION pAIdentifierDyadic6806_AID6806:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdentifierDyadic6806_AID6806:=myrec;
		END;
	FUNCTION pAPopMonadic6808_APM6808:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic6808_APM6808:=myrec;
		END;
	FUNCTION pAIdLoc6810_AIL6810:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6810_AIL6810:=myrec;
		END;
	FUNCTION pALocValue6809_ALV6809:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6810_AIL6810;
		 pALocValue6809_ALV6809:=myrec;
		END;
	FUNCTION pAMonadicValue6807_AMV6807:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue6809_ALV6809;
		myrec^.fn:=pAPopMonadic6808_APM6808;
		 pAMonadicValue6807_AMV6807:=myrec;
		END;
	FUNCTION pAPopMonadic6812_APM6812:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic6812_APM6812:=myrec;
		END;
	FUNCTION pAIdLoc6814_AIL6814:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6814_AIL6814:=myrec;
		END;
	FUNCTION pALocValue6813_ALV6813:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6814_AIL6814;
		 pALocValue6813_ALV6813:=myrec;
		END;
	FUNCTION pAMonadicValue6811_AMV6811:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue6813_ALV6813;
		myrec^.fn:=pAPopMonadic6812_APM6812;
		 pAMonadicValue6811_AMV6811:=myrec;
		END;
	FUNCTION pADyadicValue6805_ADV6805:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pAMonadicValue6807_AMV6807;
		myrec^.arg2:=pAMonadicValue6811_AMV6811;
		myrec^.fn:=pAIdentifierDyadic6806_AID6806;
		 pADyadicValue6805_ADV6805:=myrec;
		END;
	FUNCTION pADyadicValue6801_ADV6801:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue6803_ALV6803;
		myrec^.arg2:=pADyadicValue6805_ADV6805;
		myrec^.fn:=pAPushDyadic6802_APD6802;
		 pADyadicValue6801_ADV6801:=myrec;
		END;
	FUNCTION pAValueMeaning6800_AVM6800:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue6801_ADV6801;
		 pAValueMeaning6800_AVM6800:=myrec;
		END;
	FUNCTION pAAssemblypattern6816_AA6816:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'f' );
		pappendp(list,0);
		pappends(list,'p' );
		pappends(list,' st1' );
		pAAssemblypattern6816_AA6816:=list;
		END;
	FUNCTION pAAssemblesto6815_AA6815:pprintlist;
	begin
		pAAssemblesto6815_AA6815:=pAAssemblypattern6816_AA6816;
		END;
	FUNCTION pASideeffects6821_AS6821:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6821_AS6821:=nil;
		 pASideeffects6821_AS6821:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6822_AUP6822:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6822_AUP6822:=nil;
		 pAUnconditionalPrecond6822_AUP6822:=myrec;
		END;
	FUNCTION ReversePolishFOP_RPFOP:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patreal_;
		params^[0]:=patfoperator_;
		paramcount:=3;
		meaning:=pAValueMeaning6800_AVM6800;
		matchedAssembler:=pAAssemblesto6815_AA6815;
		END;
		ReversePolishFOP_RPFOP:=myrec;
	END;
	FUNCTION pATypeid6825_AT6825:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6825_AT6825:=myrec;
		END;
	FUNCTION pAPushDyadic6828_APD6828:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic6828_APD6828:=myrec;
		END;
	FUNCTION pAIdLoc6830_AIL6830:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6830_AIL6830:=myrec;
		END;
	FUNCTION pALocValue6829_ALV6829:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6830_AIL6830;
		 pALocValue6829_ALV6829:=myrec;
		END;
	FUNCTION pAMaxDyadic6832_AMD6832:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpmax;
		 pAMaxDyadic6832_AMD6832:=myrec;
		END;
	FUNCTION pAPopMonadic6834_APM6834:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic6834_APM6834:=myrec;
		END;
	FUNCTION pAIdLoc6836_AIL6836:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6836_AIL6836:=myrec;
		END;
	FUNCTION pALocValue6835_ALV6835:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6836_AIL6836;
		 pALocValue6835_ALV6835:=myrec;
		END;
	FUNCTION pAMonadicValue6833_AMV6833:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue6835_ALV6835;
		myrec^.fn:=pAPopMonadic6834_APM6834;
		 pAMonadicValue6833_AMV6833:=myrec;
		END;
	FUNCTION pAPopMonadic6838_APM6838:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic6838_APM6838:=myrec;
		END;
	FUNCTION pAIdLoc6840_AIL6840:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6840_AIL6840:=myrec;
		END;
	FUNCTION pALocValue6839_ALV6839:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6840_AIL6840;
		 pALocValue6839_ALV6839:=myrec;
		END;
	FUNCTION pAMonadicValue6837_AMV6837:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue6839_ALV6839;
		myrec^.fn:=pAPopMonadic6838_APM6838;
		 pAMonadicValue6837_AMV6837:=myrec;
		END;
	FUNCTION pADyadicValue6831_ADV6831:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pAMonadicValue6833_AMV6833;
		myrec^.arg2:=pAMonadicValue6837_AMV6837;
		myrec^.fn:=pAMaxDyadic6832_AMD6832;
		 pADyadicValue6831_ADV6831:=myrec;
		END;
	FUNCTION pADyadicValue6827_ADV6827:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue6829_ALV6829;
		myrec^.arg2:=pADyadicValue6831_ADV6831;
		myrec^.fn:=pAPushDyadic6828_APD6828;
		 pADyadicValue6827_ADV6827:=myrec;
		END;
	FUNCTION pAValueMeaning6826_AVM6826:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue6827_ADV6827;
		 pAValueMeaning6826_AVM6826:=myrec;
		END;
	FUNCTION pAAssemblypattern6842_AA6842:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fcomi st0,st1\n fcmovb st0,st1 \nfstp st1' );
		pAAssemblypattern6842_AA6842:=list;
		END;
	FUNCTION pAAssemblesto6841_AA6841:pprintlist;
	begin
		pAAssemblesto6841_AA6841:=pAAssemblypattern6842_AA6842;
		END;
	FUNCTION pASideeffects6844_AS6844:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6844_AS6844:=nil;
		 pASideeffects6844_AS6844:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6845_AUP6845:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6845_AUP6845:=nil;
		 pAUnconditionalPrecond6845_AUP6845:=myrec;
		END;
	FUNCTION FMAXp6_FMAX6:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmaddrmode_;
		paramcount:=2;
		meaning:=pAValueMeaning6826_AVM6826;
		matchedAssembler:=pAAssemblesto6841_AA6841;
		END;
		FMAXp6_FMAX6:=myrec;
	END;
	FUNCTION pATypeid6848_AT6848:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6848_AT6848:=myrec;
		END;
	FUNCTION pATypeid6850_AT6850:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6850_AT6850:=myrec;
		END;
	FUNCTION pAIdLoc6854_AIL6854:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6854_AIL6854:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6853_AR6853:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6854_AIL6854;
		 pARefval6853_AR6853:=myrec;
		END;
	FUNCTION pASigned6860_AS6860:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned6860_AS6860:=myrec;
		END;
	FUNCTION pASignedTformat6859_AST6859:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned6860_AS6860;
		 pASignedTformat6859_AST6859:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6858_ATP6858:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype6858_ATP6858:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6857_APT6857:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType6857_APT6857:=myrec;
		END;
	FUNCTION pAMaxDyadic6862_AMD6862:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpmax;
		 pAMaxDyadic6862_AMD6862:=myrec;
		END;
	FUNCTION pAIdLoc6866_AIL6866:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6866_AIL6866:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6865_AR6865:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6866_AIL6866;
		 pARefval6865_AR6865:=myrec;
		END;
	FUNCTION pADerefRhs6864_ADR6864:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6865_AR6865;
		 pADerefRhs6864_ADR6864:=myrec;
		END;
	FUNCTION pARhsValue6863_ARV6863:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6864_ADR6864;
		 pARhsValue6863_ARV6863:=myrec;
		END;
	FUNCTION pAIdLoc6870_AIL6870:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc6870_AIL6870:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6869_AR6869:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6870_AIL6870;
		 pARefval6869_AR6869:=myrec;
		END;
	FUNCTION pADerefRhs6868_ADR6868:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6869_AR6869;
		 pADerefRhs6868_ADR6868:=myrec;
		END;
	FUNCTION pARhsValue6867_ARV6867:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6868_ADR6868;
		 pARhsValue6867_ARV6867:=myrec;
		END;
	FUNCTION pADyadicValue6861_ADV6861:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue6863_ARV6863;
		myrec^.arg2:=pARhsValue6867_ARV6867;
		myrec^.fn:=pAMaxDyadic6862_AMD6862;
		 pADyadicValue6861_ADV6861:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs6856_ACR6856:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType6857_APT6857;
		myrec^.arg2:=pADyadicValue6861_ADV6861;
		 pACastRhs6856_ACR6856:=myrec;
		END;
	FUNCTION pARhsValue6855_ARV6855:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6856_ACR6856;
		 pARhsValue6855_ARV6855:=myrec;
		END;
	FUNCTION pAAssign6852_AA6852:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue6855_ARV6855;
		myrec^.dest:=pARefval6853_AR6853;
		 pAAssign6852_AA6852:=myrec;
		END;
	FUNCTION pAAssignMeaning6851_AAM6851:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign6852_AA6852;
		 pAAssignMeaning6851_AAM6851:=myrec;
		END;
	FUNCTION pAAssemblypattern6872_AA6872:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cmp ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pappends(list,'\ncmob ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern6872_AA6872:=list;
		END;
	FUNCTION pAAssemblesto6871_AA6871:pprintlist;
	begin
		pAAssemblesto6871_AA6871:=pAAssemblypattern6872_AA6872;
		END;
	FUNCTION pASideeffects6881_AS6881:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6881_AS6881:=nil;
		 pASideeffects6881_AS6881:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6882_AUP6882:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6882_AUP6882:=nil;
		 pAUnconditionalPrecond6882_AUP6882:=myrec;
		END;
	FUNCTION MAXp6_MAX6:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patreg_;
		params^[0]:=patreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning6851_AAM6851;
		matchedAssembler:=pAAssemblesto6871_AA6871;
		END;
		MAXp6_MAX6:=myrec;
	END;
	FUNCTION pATypeid6885_AT6885:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6885_AT6885:=myrec;
		END;
	FUNCTION pATypeid6887_AT6887:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6887_AT6887:=myrec;
		END;
	FUNCTION pAIdLoc6891_AIL6891:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6891_AIL6891:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6890_AR6890:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6891_AIL6891;
		 pARefval6890_AR6890:=myrec;
		END;
	FUNCTION pASigned6897_AS6897:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned6897_AS6897:=myrec;
		END;
	FUNCTION pASignedTformat6896_AST6896:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned6897_AS6897;
		 pASignedTformat6896_AST6896:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype6895_ATP6895:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype6895_ATP6895:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6894_APT6894:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pAPredeclaredtypeType6894_APT6894:=myrec;
		END;
	FUNCTION pAMinDyadic6899_AMD6899:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpmin;
		 pAMinDyadic6899_AMD6899:=myrec;
		END;
	FUNCTION pAIdLoc6903_AIL6903:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc6903_AIL6903:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6902_AR6902:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6903_AIL6903;
		 pARefval6902_AR6902:=myrec;
		END;
	FUNCTION pADerefRhs6901_ADR6901:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6902_AR6902;
		 pADerefRhs6901_ADR6901:=myrec;
		END;
	FUNCTION pARhsValue6900_ARV6900:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6901_ADR6901;
		 pARhsValue6900_ARV6900:=myrec;
		END;
	FUNCTION pAIdLoc6907_AIL6907:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc6907_AIL6907:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval6906_AR6906:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6907_AIL6907;
		 pARefval6906_AR6906:=myrec;
		END;
	FUNCTION pADerefRhs6905_ADR6905:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval6906_AR6906;
		 pADerefRhs6905_ADR6905:=myrec;
		END;
	FUNCTION pARhsValue6904_ARV6904:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs6905_ADR6905;
		 pARhsValue6904_ARV6904:=myrec;
		END;
	FUNCTION pADyadicValue6898_ADV6898:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue6900_ARV6900;
		myrec^.arg2:=pARhsValue6904_ARV6904;
		myrec^.fn:=pAMinDyadic6899_AMD6899;
		 pADyadicValue6898_ADV6898:=myrec;
		END;
		(*! try to cast to type: int32*)
	FUNCTION pACastRhs6893_ACR6893:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType6894_APT6894;
		myrec^.arg2:=pADyadicValue6898_ADV6898;
		 pACastRhs6893_ACR6893:=myrec;
		END;
	FUNCTION pARhsValue6892_ARV6892:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6893_ACR6893;
		 pARhsValue6892_ARV6892:=myrec;
		END;
	FUNCTION pAAssign6889_AA6889:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue6892_ARV6892;
		myrec^.dest:=pARefval6890_AR6890;
		 pAAssign6889_AA6889:=myrec;
		END;
	FUNCTION pAAssignMeaning6888_AAM6888:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign6889_AA6889;
		 pAAssignMeaning6888_AAM6888:=myrec;
		END;
	FUNCTION pAAssemblypattern6909_AA6909:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'cmp ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,0);
		pappends(list,'\ncmovb ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern6909_AA6909:=list;
		END;
	FUNCTION pAAssemblesto6908_AA6908:pprintlist;
	begin
		pAAssemblesto6908_AA6908:=pAAssemblypattern6909_AA6909;
		END;
	FUNCTION pASideeffects6918_AS6918:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6918_AS6918:=nil;
		 pASideeffects6918_AS6918:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6919_AUP6919:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6919_AUP6919:=nil;
		 pAUnconditionalPrecond6919_AUP6919:=myrec;
		END;
	FUNCTION MINp6_MIN6:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patreg_;
		params^[0]:=patreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning6888_AAM6888;
		matchedAssembler:=pAAssemblesto6908_AA6908;
		END;
		MINp6_MIN6:=myrec;
	END;
	FUNCTION pATypeid6922_AT6922:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6922_AT6922:=myrec;
		END;
	FUNCTION pAPushDyadic6925_APD6925:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic6925_APD6925:=myrec;
		END;
	FUNCTION pAIdLoc6927_AIL6927:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6927_AIL6927:=myrec;
		END;
	FUNCTION pALocValue6926_ALV6926:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6927_AIL6927;
		 pALocValue6926_ALV6926:=myrec;
		END;
	FUNCTION pAMinDyadic6929_AMD6929:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpmin;
		 pAMinDyadic6929_AMD6929:=myrec;
		END;
	FUNCTION pAPopMonadic6931_APM6931:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic6931_APM6931:=myrec;
		END;
	FUNCTION pAIdLoc6933_AIL6933:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6933_AIL6933:=myrec;
		END;
	FUNCTION pALocValue6932_ALV6932:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6933_AIL6933;
		 pALocValue6932_ALV6932:=myrec;
		END;
	FUNCTION pAMonadicValue6930_AMV6930:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue6932_ALV6932;
		myrec^.fn:=pAPopMonadic6931_APM6931;
		 pAMonadicValue6930_AMV6930:=myrec;
		END;
	FUNCTION pAPopMonadic6935_APM6935:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic6935_APM6935:=myrec;
		END;
	FUNCTION pAIdLoc6937_AIL6937:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6937_AIL6937:=myrec;
		END;
	FUNCTION pALocValue6936_ALV6936:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6937_AIL6937;
		 pALocValue6936_ALV6936:=myrec;
		END;
	FUNCTION pAMonadicValue6934_AMV6934:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue6936_ALV6936;
		myrec^.fn:=pAPopMonadic6935_APM6935;
		 pAMonadicValue6934_AMV6934:=myrec;
		END;
	FUNCTION pADyadicValue6928_ADV6928:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pAMonadicValue6930_AMV6930;
		myrec^.arg2:=pAMonadicValue6934_AMV6934;
		myrec^.fn:=pAMinDyadic6929_AMD6929;
		 pADyadicValue6928_ADV6928:=myrec;
		END;
	FUNCTION pADyadicValue6924_ADV6924:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue6926_ALV6926;
		myrec^.arg2:=pADyadicValue6928_ADV6928;
		myrec^.fn:=pAPushDyadic6925_APD6925;
		 pADyadicValue6924_ADV6924:=myrec;
		END;
	FUNCTION pAValueMeaning6923_AVM6923:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue6924_ADV6924;
		 pAValueMeaning6923_AVM6923:=myrec;
		END;
	FUNCTION pAAssemblypattern6939_AA6939:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fcomi st0,st1\n fcmovnb st0,st1 \nfstp st1' );
		pAAssemblypattern6939_AA6939:=list;
		END;
	FUNCTION pAAssemblesto6938_AA6938:pprintlist;
	begin
		pAAssemblesto6938_AA6938:=pAAssemblypattern6939_AA6939;
		END;
	FUNCTION pASideeffects6941_AS6941:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6941_AS6941:=nil;
		 pASideeffects6941_AS6941:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6942_AUP6942:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6942_AUP6942:=nil;
		 pAUnconditionalPrecond6942_AUP6942:=myrec;
		END;
	FUNCTION FMINp6_FMIN6:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmaddrmode_;
		paramcount:=2;
		meaning:=pAValueMeaning6923_AVM6923;
		matchedAssembler:=pAAssemblesto6938_AA6938;
		END;
		FMINp6_FMIN6:=myrec;
	END;
	FUNCTION pATypeid6945_AT6945:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6945_AT6945:=myrec;
		END;
	FUNCTION pAPushDyadic6948_APD6948:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic6948_APD6948:=myrec;
		END;
	FUNCTION pAIdLoc6950_AIL6950:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6950_AIL6950:=myrec;
		END;
	FUNCTION pALocValue6949_ALV6949:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6950_AIL6950;
		 pALocValue6949_ALV6949:=myrec;
		END;
	FUNCTION pAMaxDyadic6952_AMD6952:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpmax;
		 pAMaxDyadic6952_AMD6952:=myrec;
		END;
	FUNCTION pAPopMonadic6954_APM6954:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic6954_APM6954:=myrec;
		END;
	FUNCTION pAIdLoc6956_AIL6956:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6956_AIL6956:=myrec;
		END;
	FUNCTION pALocValue6955_ALV6955:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6956_AIL6956;
		 pALocValue6955_ALV6955:=myrec;
		END;
	FUNCTION pAMonadicValue6953_AMV6953:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue6955_ALV6955;
		myrec^.fn:=pAPopMonadic6954_APM6954;
		 pAMonadicValue6953_AMV6953:=myrec;
		END;
	FUNCTION pAPopMonadic6958_APM6958:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic6958_APM6958:=myrec;
		END;
	FUNCTION pAIdLoc6960_AIL6960:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6960_AIL6960:=myrec;
		END;
	FUNCTION pALocValue6959_ALV6959:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6960_AIL6960;
		 pALocValue6959_ALV6959:=myrec;
		END;
	FUNCTION pAMonadicValue6957_AMV6957:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue6959_ALV6959;
		myrec^.fn:=pAPopMonadic6958_APM6958;
		 pAMonadicValue6957_AMV6957:=myrec;
		END;
	FUNCTION pADyadicValue6951_ADV6951:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pAMonadicValue6953_AMV6953;
		myrec^.arg2:=pAMonadicValue6957_AMV6957;
		myrec^.fn:=pAMaxDyadic6952_AMD6952;
		 pADyadicValue6951_ADV6951:=myrec;
		END;
	FUNCTION pADyadicValue6947_ADV6947:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue6949_ALV6949;
		myrec^.arg2:=pADyadicValue6951_ADV6951;
		myrec^.fn:=pAPushDyadic6948_APD6948;
		 pADyadicValue6947_ADV6947:=myrec;
		END;
	FUNCTION pAValueMeaning6946_AVM6946:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue6947_ADV6947;
		 pAValueMeaning6946_AVM6946:=myrec;
		END;
	FUNCTION pAAssemblypattern6962_AA6962:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fcom st0,st1  \npush ax\n fstsw ax\n sahf\n pop ax\n jnb $+4 \n fxch \nfstp st1' );
		pAAssemblypattern6962_AA6962:=list;
		END;
	FUNCTION pAAssemblesto6961_AA6961:pprintlist;
	begin
		pAAssemblesto6961_AA6961:=pAAssemblypattern6962_AA6962;
		END;
	FUNCTION pASideeffects6964_AS6964:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6964_AS6964:=nil;
		 pASideeffects6964_AS6964:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6965_AUP6965:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6965_AUP6965:=nil;
		 pAUnconditionalPrecond6965_AUP6965:=myrec;
		END;
	FUNCTION FMAX_FMAX:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmaddrmode_;
		paramcount:=2;
		meaning:=pAValueMeaning6946_AVM6946;
		matchedAssembler:=pAAssemblesto6961_AA6961;
		END;
		FMAX_FMAX:=myrec;
	END;
	FUNCTION pATypeid6968_AT6968:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6968_AT6968:=myrec;
		END;
	FUNCTION pAPushDyadic6971_APD6971:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic6971_APD6971:=myrec;
		END;
	FUNCTION pAIdLoc6973_AIL6973:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6973_AIL6973:=myrec;
		END;
	FUNCTION pALocValue6972_ALV6972:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6973_AIL6973;
		 pALocValue6972_ALV6972:=myrec;
		END;
	FUNCTION pAMinDyadic6975_AMD6975:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpmin;
		 pAMinDyadic6975_AMD6975:=myrec;
		END;
	FUNCTION pAPopMonadic6977_APM6977:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic6977_APM6977:=myrec;
		END;
	FUNCTION pAIdLoc6979_AIL6979:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6979_AIL6979:=myrec;
		END;
	FUNCTION pALocValue6978_ALV6978:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6979_AIL6979;
		 pALocValue6978_ALV6978:=myrec;
		END;
	FUNCTION pAMonadicValue6976_AMV6976:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue6978_ALV6978;
		myrec^.fn:=pAPopMonadic6977_APM6977;
		 pAMonadicValue6976_AMV6976:=myrec;
		END;
	FUNCTION pAPopMonadic6981_APM6981:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic6981_APM6981:=myrec;
		END;
	FUNCTION pAIdLoc6983_AIL6983:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6983_AIL6983:=myrec;
		END;
	FUNCTION pALocValue6982_ALV6982:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6983_AIL6983;
		 pALocValue6982_ALV6982:=myrec;
		END;
	FUNCTION pAMonadicValue6980_AMV6980:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue6982_ALV6982;
		myrec^.fn:=pAPopMonadic6981_APM6981;
		 pAMonadicValue6980_AMV6980:=myrec;
		END;
	FUNCTION pADyadicValue6974_ADV6974:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pAMonadicValue6976_AMV6976;
		myrec^.arg2:=pAMonadicValue6980_AMV6980;
		myrec^.fn:=pAMinDyadic6975_AMD6975;
		 pADyadicValue6974_ADV6974:=myrec;
		END;
	FUNCTION pADyadicValue6970_ADV6970:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue6972_ALV6972;
		myrec^.arg2:=pADyadicValue6974_ADV6974;
		myrec^.fn:=pAPushDyadic6971_APD6971;
		 pADyadicValue6970_ADV6970:=myrec;
		END;
	FUNCTION pAValueMeaning6969_AVM6969:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue6970_ADV6970;
		 pAValueMeaning6969_AVM6969:=myrec;
		END;
	FUNCTION pAAssemblypattern6985_AA6985:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fcom st0,st1  \n push ax\n fstsw ax\n sahf\n pop ax\n jb $+4 \n fxch \nfstp st1' );
		pAAssemblypattern6985_AA6985:=list;
		END;
	FUNCTION pAAssemblesto6984_AA6984:pprintlist;
	begin
		pAAssemblesto6984_AA6984:=pAAssemblypattern6985_AA6985;
		END;
	FUNCTION pASideeffects6987_AS6987:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects6987_AS6987:=nil;
		 pASideeffects6987_AS6987:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond6988_AUP6988:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond6988_AUP6988:=nil;
		 pAUnconditionalPrecond6988_AUP6988:=myrec;
		END;
	FUNCTION FMIN_FMIN:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmaddrmode_;
		paramcount:=2;
		meaning:=pAValueMeaning6969_AVM6969;
		matchedAssembler:=pAAssemblesto6984_AA6984;
		END;
		FMIN_FMIN:=myrec;
	END;
	FUNCTION pATypeid6991_AT6991:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ int  ilcg.pattern@3e965}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid6991_AT6991:=myrec;
		END;
	FUNCTION pAPushDyadic6994_APD6994:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic6994_APD6994:=myrec;
		END;
	FUNCTION pAIdLoc6996_AIL6996:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc6996_AIL6996:=myrec;
		END;
	FUNCTION pALocValue6995_ALV6995:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc6996_AIL6996;
		 pALocValue6995_ALV6995:=myrec;
		END;
	FUNCTION pAIeee32Tformat7001_AI32T7001:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32;
		 pAIeee32Tformat7001_AI32T7001:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7000_ATP7000:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pATformatPredeclaredtype7000_ATP7000:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType6999_APT6999:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fieee32 ;
		 pAPredeclaredtypeType6999_APT6999:=myrec;
		END;
	FUNCTION pARemainderDyadic7003_ARD7003:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpremainder;
		 pARemainderDyadic7003_ARD7003:=myrec;
		END;
	FUNCTION pAPopMonadic7005_APM7005:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic7005_APM7005:=myrec;
		END;
	FUNCTION pAIdLoc7007_AIL7007:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7007_AIL7007:=myrec;
		END;
	FUNCTION pALocValue7006_ALV7006:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7007_AIL7007;
		 pALocValue7006_ALV7006:=myrec;
		END;
	FUNCTION pAMonadicValue7004_AMV7004:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue7006_ALV7006;
		myrec^.fn:=pAPopMonadic7005_APM7005;
		 pAMonadicValue7004_AMV7004:=myrec;
		END;
	FUNCTION pAPopMonadic7009_APM7009:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic7009_APM7009:=myrec;
		END;
	FUNCTION pAIdLoc7011_AIL7011:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patST_ST;
		 pAIdLoc7011_AIL7011:=myrec;
		END;
	FUNCTION pALocValue7010_ALV7010:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7011_AIL7011;
		 pALocValue7010_ALV7010:=myrec;
		END;
	FUNCTION pAMonadicValue7008_AMV7008:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue7010_ALV7010;
		myrec^.fn:=pAPopMonadic7009_APM7009;
		 pAMonadicValue7008_AMV7008:=myrec;
		END;
	FUNCTION pADyadicValue7002_ADV7002:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pAMonadicValue7004_AMV7004;
		myrec^.arg2:=pAMonadicValue7008_AMV7008;
		myrec^.fn:=pARemainderDyadic7003_ARD7003;
		 pADyadicValue7002_ADV7002:=myrec;
		END;
		(*! try to cast to type: ieee32*)
	FUNCTION pACastRhs6998_ACR6998:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType6999_APT6999;
		myrec^.arg2:=pADyadicValue7002_ADV7002;
		 pACastRhs6998_ACR6998:=myrec;
		END;
	FUNCTION pARhsValue6997_ARV6997:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs6998_ACR6998;
		 pARhsValue6997_ARV6997:=myrec;
		END;
	FUNCTION pADyadicValue6993_ADV6993:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue6995_ALV6995;
		myrec^.arg2:=pARhsValue6997_ARV6997;
		myrec^.fn:=pAPushDyadic6994_APD6994;
		 pADyadicValue6993_ADV6993:=myrec;
		END;
	FUNCTION pAValueMeaning6992_AVM6992:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue6993_ADV6993;
		 pAValueMeaning6992_AVM6992:=myrec;
		END;
	FUNCTION pAAssemblypattern7013_AA7013:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'fprem' );
		pAAssemblypattern7013_AA7013:=list;
		END;
	FUNCTION pAAssemblesto7012_AA7012:pprintlist;
	begin
		pAAssemblesto7012_AA7012:=pAAssemblypattern7013_AA7013;
		END;
	FUNCTION pASideeffects7015_AS7015:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7015_AS7015:=nil;
		 pASideeffects7015_AS7015:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7016_AUP7016:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7016_AUP7016:=nil;
		 pAUnconditionalPrecond7016_AUP7016:=myrec;
		END;
	FUNCTION FPREM_FPREM:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patint_;
		paramcount:=2;
		meaning:=pAValueMeaning6992_AVM6992;
		matchedAssembler:=pAAssemblesto7012_AA7012;
		END;
		FPREM_FPREM:=myrec;
	END;
	FUNCTION pAUnreservedReservation7020_AUR7020:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation7020_AUR7020:=nil;
		 pAUnreservedReservation7020_AUR7020:=myrec;
		END;
	FUNCTION pANonAggregate7021_ANA7021:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate7021_ANA7021:=nil;
		 pANonAggregate7021_ANA7021:=myrec;
		END;
	FUNCTION pADoublewordFormat7024_ADF7024:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdword;
		 pADoublewordFormat7024_ADF7024:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype7023_AFP7023:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAFormatPredeclaredtype7023_AFP7023:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7022_APT7022:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAPredeclaredtypeType7022_APT7022:=myrec;
		END;
	FUNCTION pAUnreservedReservation7028_AUR7028:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation7028_AUR7028:=nil;
		 pAUnreservedReservation7028_AUR7028:=myrec;
		END;
	FUNCTION pANonAggregate7029_ANA7029:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate7029_ANA7029:=nil;
		 pANonAggregate7029_ANA7029:=myrec;
		END;
	FUNCTION pADoublewordFormat7032_ADF7032:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdword;
		 pADoublewordFormat7032_ADF7032:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype7031_AFP7031:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAFormatPredeclaredtype7031_AFP7031:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7030_APT7030:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAPredeclaredtypeType7030_APT7030:=myrec;
		END;
	FUNCTION pAUnreservedReservation7036_AUR7036:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation7036_AUR7036:=nil;
		 pAUnreservedReservation7036_AUR7036:=myrec;
		END;
	FUNCTION pANonAggregate7037_ANA7037:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate7037_ANA7037:=nil;
		 pANonAggregate7037_ANA7037:=myrec;
		END;
	FUNCTION pADoublewordFormat7040_ADF7040:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdword;
		 pADoublewordFormat7040_ADF7040:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype7039_AFP7039:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAFormatPredeclaredtype7039_AFP7039:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7038_APT7038:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAPredeclaredtypeType7038_APT7038:=myrec;
		END;
	FUNCTION pAUnreservedReservation7044_AUR7044:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation7044_AUR7044:=nil;
		 pAUnreservedReservation7044_AUR7044:=myrec;
		END;
	FUNCTION pANonAggregate7045_ANA7045:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate7045_ANA7045:=nil;
		 pANonAggregate7045_ANA7045:=myrec;
		END;
	FUNCTION pADoublewordFormat7048_ADF7048:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdword;
		 pADoublewordFormat7048_ADF7048:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype7047_AFP7047:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAFormatPredeclaredtype7047_AFP7047:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7046_APT7046:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAPredeclaredtypeType7046_APT7046:=myrec;
		END;
	FUNCTION pAUnreservedReservation7052_AUR7052:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnreservedReservation7052_AUR7052:=nil;
		 pAUnreservedReservation7052_AUR7052:=myrec;
		END;
	FUNCTION pANonAggregate7053_ANA7053:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate7053_ANA7053:=nil;
		 pANonAggregate7053_ANA7053:=myrec;
		END;
	FUNCTION pADoublewordFormat7056_ADF7056:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdword;
		 pADoublewordFormat7056_ADF7056:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype7055_AFP7055:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAFormatPredeclaredtype7055_AFP7055:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7054_APT7054:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAPredeclaredtypeType7054_APT7054:=myrec;
		END;
	FUNCTION pAReservedReservation7060_ARR7060:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAReservedReservation7060_ARR7060:=nil;
		 pAReservedReservation7060_ARR7060:=myrec;
		END;
	FUNCTION pANonAggregate7061_ANA7061:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate7061_ANA7061:=nil;
		 pANonAggregate7061_ANA7061:=myrec;
		END;
	FUNCTION pADoublewordFormat7064_ADF7064:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdword;
		 pADoublewordFormat7064_ADF7064:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype7063_AFP7063:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAFormatPredeclaredtype7063_AFP7063:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7062_APT7062:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAPredeclaredtypeType7062_APT7062:=myrec;
		END;
	FUNCTION pAReservedReservation7068_ARR7068:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAReservedReservation7068_ARR7068:=nil;
		 pAReservedReservation7068_ARR7068:=myrec;
		END;
	FUNCTION pANonAggregate7069_ANA7069:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate7069_ANA7069:=nil;
		 pANonAggregate7069_ANA7069:=myrec;
		END;
	FUNCTION pADoublewordFormat7072_ADF7072:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdword;
		 pADoublewordFormat7072_ADF7072:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype7071_AFP7071:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAFormatPredeclaredtype7071_AFP7071:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7070_APT7070:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAPredeclaredtypeType7070_APT7070:=myrec;
		END;
	FUNCTION pAReservedReservation7076_ARR7076:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAReservedReservation7076_ARR7076:=nil;
		 pAReservedReservation7076_ARR7076:=myrec;
		END;
	FUNCTION pANonAggregate7077_ANA7077:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate7077_ANA7077:=nil;
		 pANonAggregate7077_ANA7077:=myrec;
		END;
	FUNCTION pADoublewordFormat7080_ADF7080:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdword;
		 pADoublewordFormat7080_ADF7080:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype7079_AFP7079:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAFormatPredeclaredtype7079_AFP7079:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7078_APT7078:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAPredeclaredtypeType7078_APT7078:=myrec;
		END;
	FUNCTION pANonAggregate7084_ANA7084:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate7084_ANA7084:=nil;
		 pANonAggregate7084_ANA7084:=myrec;
		END;
	FUNCTION pAWordFormat7087_AWF7087:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword;
		 pAWordFormat7087_AWF7087:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype7086_AFP7086:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAFormatPredeclaredtype7086_AFP7086:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7085_APT7085:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAPredeclaredtypeType7085_APT7085:=myrec;
		END;
	FUNCTION pANonAggregate7091_ANA7091:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate7091_ANA7091:=nil;
		 pANonAggregate7091_ANA7091:=myrec;
		END;
	FUNCTION pAWordFormat7094_AWF7094:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword;
		 pAWordFormat7094_AWF7094:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype7093_AFP7093:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAFormatPredeclaredtype7093_AFP7093:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7092_APT7092:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAPredeclaredtypeType7092_APT7092:=myrec;
		END;
	FUNCTION pANonAggregate7098_ANA7098:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate7098_ANA7098:=nil;
		 pANonAggregate7098_ANA7098:=myrec;
		END;
	FUNCTION pAWordFormat7101_AWF7101:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword;
		 pAWordFormat7101_AWF7101:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype7100_AFP7100:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAFormatPredeclaredtype7100_AFP7100:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7099_APT7099:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAPredeclaredtypeType7099_APT7099:=myrec;
		END;
	FUNCTION pANonAggregate7105_ANA7105:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate7105_ANA7105:=nil;
		 pANonAggregate7105_ANA7105:=myrec;
		END;
	FUNCTION pAWordFormat7108_AWF7108:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword;
		 pAWordFormat7108_AWF7108:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype7107_AFP7107:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAFormatPredeclaredtype7107_AFP7107:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7106_APT7106:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAPredeclaredtypeType7106_APT7106:=myrec;
		END;
	FUNCTION pANonAggregate7112_ANA7112:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate7112_ANA7112:=nil;
		 pANonAggregate7112_ANA7112:=myrec;
		END;
	FUNCTION pAWordFormat7115_AWF7115:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword;
		 pAWordFormat7115_AWF7115:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype7114_AFP7114:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAFormatPredeclaredtype7114_AFP7114:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7113_APT7113:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAPredeclaredtypeType7113_APT7113:=myrec;
		END;
	FUNCTION pANonAggregate7119_ANA7119:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate7119_ANA7119:=nil;
		 pANonAggregate7119_ANA7119:=myrec;
		END;
	FUNCTION pAWordFormat7122_AWF7122:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword;
		 pAWordFormat7122_AWF7122:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype7121_AFP7121:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAFormatPredeclaredtype7121_AFP7121:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType7120_APT7120:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAPredeclaredtypeType7120_APT7120:=myrec;
		END;
	FUNCTION pANonAggregate7126_ANA7126:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate7126_ANA7126:=nil;
		 pANonAggregate7126_ANA7126:=myrec;
		END;
	FUNCTION pAInt16Signed7131_AI16S7131:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed7131_AI16S7131:=myrec;
		END;
	FUNCTION pASignedTformat7130_AST7130:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed7131_AI16S7131;
		 pASignedTformat7130_AST7130:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7129_ATP7129:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype7129_ATP7129:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7128_APT7128:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7128_APT7128:=nil;
		 pAPredeclaredtypeTypeprim7128_APT7128:=myrec;
		END;
	FUNCTION pAOptionalsign7134_AO7134:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7134_AO7134:=nil;
		 pAOptionalsign7134_AO7134:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7133_AIN7133:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber7133_AIN7133:=myrec;
		END;
	FUNCTION pAArray7132_AA7132:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7132_AA7132:=nil;
		 pAArray7132_AA7132:=myrec;
		END;
	FUNCTION pAArrayType7127_AAT7127:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType7127_AAT7127:=myrec;
		END;
	FUNCTION pANonAggregate7138_ANA7138:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate7138_ANA7138:=nil;
		 pANonAggregate7138_ANA7138:=myrec;
		END;
	FUNCTION pAInt16Signed7143_AI16S7143:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed7143_AI16S7143:=myrec;
		END;
	FUNCTION pASignedTformat7142_AST7142:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed7143_AI16S7143;
		 pASignedTformat7142_AST7142:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7141_ATP7141:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype7141_ATP7141:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7140_APT7140:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7140_APT7140:=nil;
		 pAPredeclaredtypeTypeprim7140_APT7140:=myrec;
		END;
	FUNCTION pAOptionalsign7146_AO7146:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7146_AO7146:=nil;
		 pAOptionalsign7146_AO7146:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7145_AIN7145:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber7145_AIN7145:=myrec;
		END;
	FUNCTION pAArray7144_AA7144:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7144_AA7144:=nil;
		 pAArray7144_AA7144:=myrec;
		END;
	FUNCTION pAArrayType7139_AAT7139:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType7139_AAT7139:=myrec;
		END;
	FUNCTION pANonAggregate7150_ANA7150:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate7150_ANA7150:=nil;
		 pANonAggregate7150_ANA7150:=myrec;
		END;
	FUNCTION pAInt16Signed7155_AI16S7155:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed7155_AI16S7155:=myrec;
		END;
	FUNCTION pASignedTformat7154_AST7154:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed7155_AI16S7155;
		 pASignedTformat7154_AST7154:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7153_ATP7153:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype7153_ATP7153:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7152_APT7152:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7152_APT7152:=nil;
		 pAPredeclaredtypeTypeprim7152_APT7152:=myrec;
		END;
	FUNCTION pAOptionalsign7158_AO7158:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7158_AO7158:=nil;
		 pAOptionalsign7158_AO7158:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7157_AIN7157:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber7157_AIN7157:=myrec;
		END;
	FUNCTION pAArray7156_AA7156:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7156_AA7156:=nil;
		 pAArray7156_AA7156:=myrec;
		END;
	FUNCTION pAArrayType7151_AAT7151:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType7151_AAT7151:=myrec;
		END;
	FUNCTION pANonAggregate7162_ANA7162:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate7162_ANA7162:=nil;
		 pANonAggregate7162_ANA7162:=myrec;
		END;
	FUNCTION pAInt16Signed7167_AI16S7167:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed7167_AI16S7167:=myrec;
		END;
	FUNCTION pASignedTformat7166_AST7166:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed7167_AI16S7167;
		 pASignedTformat7166_AST7166:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7165_ATP7165:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype7165_ATP7165:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7164_APT7164:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7164_APT7164:=nil;
		 pAPredeclaredtypeTypeprim7164_APT7164:=myrec;
		END;
	FUNCTION pAOptionalsign7170_AO7170:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7170_AO7170:=nil;
		 pAOptionalsign7170_AO7170:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7169_AIN7169:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber7169_AIN7169:=myrec;
		END;
	FUNCTION pAArray7168_AA7168:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7168_AA7168:=nil;
		 pAArray7168_AA7168:=myrec;
		END;
	FUNCTION pAArrayType7163_AAT7163:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType7163_AAT7163:=myrec;
		END;
	FUNCTION pANonAggregate7174_ANA7174:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate7174_ANA7174:=nil;
		 pANonAggregate7174_ANA7174:=myrec;
		END;
	FUNCTION pAInt16Signed7179_AI16S7179:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed7179_AI16S7179:=myrec;
		END;
	FUNCTION pASignedTformat7178_AST7178:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed7179_AI16S7179;
		 pASignedTformat7178_AST7178:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7177_ATP7177:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype7177_ATP7177:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7176_APT7176:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7176_APT7176:=nil;
		 pAPredeclaredtypeTypeprim7176_APT7176:=myrec;
		END;
	FUNCTION pAOptionalsign7182_AO7182:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7182_AO7182:=nil;
		 pAOptionalsign7182_AO7182:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7181_AIN7181:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber7181_AIN7181:=myrec;
		END;
	FUNCTION pAArray7180_AA7180:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7180_AA7180:=nil;
		 pAArray7180_AA7180:=myrec;
		END;
	FUNCTION pAArrayType7175_AAT7175:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType7175_AAT7175:=myrec;
		END;
	FUNCTION pANonAggregate7186_ANA7186:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate7186_ANA7186:=nil;
		 pANonAggregate7186_ANA7186:=myrec;
		END;
	FUNCTION pAInt16Signed7191_AI16S7191:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed7191_AI16S7191:=myrec;
		END;
	FUNCTION pASignedTformat7190_AST7190:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed7191_AI16S7191;
		 pASignedTformat7190_AST7190:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7189_ATP7189:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype7189_ATP7189:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7188_APT7188:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7188_APT7188:=nil;
		 pAPredeclaredtypeTypeprim7188_APT7188:=myrec;
		END;
	FUNCTION pAOptionalsign7194_AO7194:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7194_AO7194:=nil;
		 pAOptionalsign7194_AO7194:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7193_AIN7193:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber7193_AIN7193:=myrec;
		END;
	FUNCTION pAArray7192_AA7192:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7192_AA7192:=nil;
		 pAArray7192_AA7192:=myrec;
		END;
	FUNCTION pAArrayType7187_AAT7187:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType7187_AAT7187:=myrec;
		END;
	FUNCTION pANonAggregate7198_ANA7198:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate7198_ANA7198:=nil;
		 pANonAggregate7198_ANA7198:=myrec;
		END;
	FUNCTION pASigned7203_AS7203:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned7203_AS7203:=myrec;
		END;
	FUNCTION pASignedTformat7202_AST7202:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned7203_AS7203;
		 pASignedTformat7202_AST7202:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7201_ATP7201:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype7201_ATP7201:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7200_APT7200:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7200_APT7200:=nil;
		 pAPredeclaredtypeTypeprim7200_APT7200:=myrec;
		END;
	FUNCTION pAOptionalsign7206_AO7206:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7206_AO7206:=nil;
		 pAOptionalsign7206_AO7206:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7205_AIN7205:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber7205_AIN7205:=myrec;
		END;
	FUNCTION pAArray7204_AA7204:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7204_AA7204:=nil;
		 pAArray7204_AA7204:=myrec;
		END;
	FUNCTION pAArrayType7199_AAT7199:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,2 );
		 pAArrayType7199_AAT7199:=myrec;
		END;
	FUNCTION pANonAggregate7210_ANA7210:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate7210_ANA7210:=nil;
		 pANonAggregate7210_ANA7210:=myrec;
		END;
	FUNCTION pASigned7215_AS7215:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned7215_AS7215:=myrec;
		END;
	FUNCTION pASignedTformat7214_AST7214:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned7215_AS7215;
		 pASignedTformat7214_AST7214:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7213_ATP7213:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype7213_ATP7213:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7212_APT7212:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7212_APT7212:=nil;
		 pAPredeclaredtypeTypeprim7212_APT7212:=myrec;
		END;
	FUNCTION pAOptionalsign7218_AO7218:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7218_AO7218:=nil;
		 pAOptionalsign7218_AO7218:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7217_AIN7217:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber7217_AIN7217:=myrec;
		END;
	FUNCTION pAArray7216_AA7216:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7216_AA7216:=nil;
		 pAArray7216_AA7216:=myrec;
		END;
	FUNCTION pAArrayType7211_AAT7211:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,2 );
		 pAArrayType7211_AAT7211:=myrec;
		END;
	FUNCTION pANonAggregate7222_ANA7222:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate7222_ANA7222:=nil;
		 pANonAggregate7222_ANA7222:=myrec;
		END;
	FUNCTION pASigned7227_AS7227:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned7227_AS7227:=myrec;
		END;
	FUNCTION pASignedTformat7226_AST7226:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned7227_AS7227;
		 pASignedTformat7226_AST7226:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7225_ATP7225:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype7225_ATP7225:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7224_APT7224:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7224_APT7224:=nil;
		 pAPredeclaredtypeTypeprim7224_APT7224:=myrec;
		END;
	FUNCTION pAOptionalsign7230_AO7230:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7230_AO7230:=nil;
		 pAOptionalsign7230_AO7230:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7229_AIN7229:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber7229_AIN7229:=myrec;
		END;
	FUNCTION pAArray7228_AA7228:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7228_AA7228:=nil;
		 pAArray7228_AA7228:=myrec;
		END;
	FUNCTION pAArrayType7223_AAT7223:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,2 );
		 pAArrayType7223_AAT7223:=myrec;
		END;
	FUNCTION pANonAggregate7234_ANA7234:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate7234_ANA7234:=nil;
		 pANonAggregate7234_ANA7234:=myrec;
		END;
	FUNCTION pASigned7239_AS7239:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned7239_AS7239:=myrec;
		END;
	FUNCTION pASignedTformat7238_AST7238:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned7239_AS7239;
		 pASignedTformat7238_AST7238:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7237_ATP7237:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype7237_ATP7237:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7236_APT7236:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7236_APT7236:=nil;
		 pAPredeclaredtypeTypeprim7236_APT7236:=myrec;
		END;
	FUNCTION pAOptionalsign7242_AO7242:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7242_AO7242:=nil;
		 pAOptionalsign7242_AO7242:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7241_AIN7241:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber7241_AIN7241:=myrec;
		END;
	FUNCTION pAArray7240_AA7240:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7240_AA7240:=nil;
		 pAArray7240_AA7240:=myrec;
		END;
	FUNCTION pAArrayType7235_AAT7235:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,2 );
		 pAArrayType7235_AAT7235:=myrec;
		END;
	FUNCTION pANonAggregate7246_ANA7246:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate7246_ANA7246:=nil;
		 pANonAggregate7246_ANA7246:=myrec;
		END;
	FUNCTION pASigned7251_AS7251:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned7251_AS7251:=myrec;
		END;
	FUNCTION pASignedTformat7250_AST7250:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned7251_AS7251;
		 pASignedTformat7250_AST7250:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7249_ATP7249:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype7249_ATP7249:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7248_APT7248:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7248_APT7248:=nil;
		 pAPredeclaredtypeTypeprim7248_APT7248:=myrec;
		END;
	FUNCTION pAOptionalsign7254_AO7254:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7254_AO7254:=nil;
		 pAOptionalsign7254_AO7254:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7253_AIN7253:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber7253_AIN7253:=myrec;
		END;
	FUNCTION pAArray7252_AA7252:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7252_AA7252:=nil;
		 pAArray7252_AA7252:=myrec;
		END;
	FUNCTION pAArrayType7247_AAT7247:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,2 );
		 pAArrayType7247_AAT7247:=myrec;
		END;
	FUNCTION pANonAggregate7258_ANA7258:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate7258_ANA7258:=nil;
		 pANonAggregate7258_ANA7258:=myrec;
		END;
	FUNCTION pASigned7263_AS7263:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned7263_AS7263:=myrec;
		END;
	FUNCTION pASignedTformat7262_AST7262:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned7263_AS7263;
		 pASignedTformat7262_AST7262:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7261_ATP7261:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype7261_ATP7261:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7260_APT7260:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7260_APT7260:=nil;
		 pAPredeclaredtypeTypeprim7260_APT7260:=myrec;
		END;
	FUNCTION pAOptionalsign7266_AO7266:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7266_AO7266:=nil;
		 pAOptionalsign7266_AO7266:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7265_AIN7265:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber7265_AIN7265:=myrec;
		END;
	FUNCTION pAArray7264_AA7264:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7264_AA7264:=nil;
		 pAArray7264_AA7264:=myrec;
		END;
	FUNCTION pAArrayType7259_AAT7259:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,2 );
		 pAArrayType7259_AAT7259:=myrec;
		END;
	FUNCTION pANonAggregate7270_ANA7270:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate7270_ANA7270:=nil;
		 pANonAggregate7270_ANA7270:=myrec;
		END;
	FUNCTION pAInt8Signed7275_AI8S7275:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed7275_AI8S7275:=myrec;
		END;
	FUNCTION pASignedTformat7274_AST7274:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed7275_AI8S7275;
		 pASignedTformat7274_AST7274:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7273_ATP7273:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype7273_ATP7273:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7272_APT7272:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7272_APT7272:=nil;
		 pAPredeclaredtypeTypeprim7272_APT7272:=myrec;
		END;
	FUNCTION pAOptionalsign7278_AO7278:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7278_AO7278:=nil;
		 pAOptionalsign7278_AO7278:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7277_AIN7277:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber7277_AIN7277:=myrec;
		END;
	FUNCTION pAArray7276_AA7276:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7276_AA7276:=nil;
		 pAArray7276_AA7276:=myrec;
		END;
	FUNCTION pAArrayType7271_AAT7271:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType7271_AAT7271:=myrec;
		END;
	FUNCTION pANonAggregate7282_ANA7282:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate7282_ANA7282:=nil;
		 pANonAggregate7282_ANA7282:=myrec;
		END;
	FUNCTION pAInt8Signed7287_AI8S7287:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed7287_AI8S7287:=myrec;
		END;
	FUNCTION pASignedTformat7286_AST7286:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed7287_AI8S7287;
		 pASignedTformat7286_AST7286:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7285_ATP7285:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype7285_ATP7285:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7284_APT7284:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7284_APT7284:=nil;
		 pAPredeclaredtypeTypeprim7284_APT7284:=myrec;
		END;
	FUNCTION pAOptionalsign7290_AO7290:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7290_AO7290:=nil;
		 pAOptionalsign7290_AO7290:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7289_AIN7289:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber7289_AIN7289:=myrec;
		END;
	FUNCTION pAArray7288_AA7288:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7288_AA7288:=nil;
		 pAArray7288_AA7288:=myrec;
		END;
	FUNCTION pAArrayType7283_AAT7283:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType7283_AAT7283:=myrec;
		END;
	FUNCTION pANonAggregate7294_ANA7294:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate7294_ANA7294:=nil;
		 pANonAggregate7294_ANA7294:=myrec;
		END;
	FUNCTION pAInt8Signed7299_AI8S7299:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed7299_AI8S7299:=myrec;
		END;
	FUNCTION pASignedTformat7298_AST7298:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed7299_AI8S7299;
		 pASignedTformat7298_AST7298:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7297_ATP7297:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype7297_ATP7297:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7296_APT7296:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7296_APT7296:=nil;
		 pAPredeclaredtypeTypeprim7296_APT7296:=myrec;
		END;
	FUNCTION pAOptionalsign7302_AO7302:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7302_AO7302:=nil;
		 pAOptionalsign7302_AO7302:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7301_AIN7301:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber7301_AIN7301:=myrec;
		END;
	FUNCTION pAArray7300_AA7300:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7300_AA7300:=nil;
		 pAArray7300_AA7300:=myrec;
		END;
	FUNCTION pAArrayType7295_AAT7295:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType7295_AAT7295:=myrec;
		END;
	FUNCTION pANonAggregate7306_ANA7306:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate7306_ANA7306:=nil;
		 pANonAggregate7306_ANA7306:=myrec;
		END;
	FUNCTION pAInt8Signed7311_AI8S7311:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed7311_AI8S7311:=myrec;
		END;
	FUNCTION pASignedTformat7310_AST7310:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed7311_AI8S7311;
		 pASignedTformat7310_AST7310:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7309_ATP7309:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype7309_ATP7309:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7308_APT7308:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7308_APT7308:=nil;
		 pAPredeclaredtypeTypeprim7308_APT7308:=myrec;
		END;
	FUNCTION pAOptionalsign7314_AO7314:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7314_AO7314:=nil;
		 pAOptionalsign7314_AO7314:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7313_AIN7313:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber7313_AIN7313:=myrec;
		END;
	FUNCTION pAArray7312_AA7312:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7312_AA7312:=nil;
		 pAArray7312_AA7312:=myrec;
		END;
	FUNCTION pAArrayType7307_AAT7307:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType7307_AAT7307:=myrec;
		END;
	FUNCTION pANonAggregate7318_ANA7318:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate7318_ANA7318:=nil;
		 pANonAggregate7318_ANA7318:=myrec;
		END;
	FUNCTION pAInt8Signed7323_AI8S7323:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed7323_AI8S7323:=myrec;
		END;
	FUNCTION pASignedTformat7322_AST7322:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed7323_AI8S7323;
		 pASignedTformat7322_AST7322:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7321_ATP7321:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype7321_ATP7321:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7320_APT7320:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7320_APT7320:=nil;
		 pAPredeclaredtypeTypeprim7320_APT7320:=myrec;
		END;
	FUNCTION pAOptionalsign7326_AO7326:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7326_AO7326:=nil;
		 pAOptionalsign7326_AO7326:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7325_AIN7325:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber7325_AIN7325:=myrec;
		END;
	FUNCTION pAArray7324_AA7324:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7324_AA7324:=nil;
		 pAArray7324_AA7324:=myrec;
		END;
	FUNCTION pAArrayType7319_AAT7319:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType7319_AAT7319:=myrec;
		END;
	FUNCTION pANonAggregate7330_ANA7330:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pANonAggregate7330_ANA7330:=nil;
		 pANonAggregate7330_ANA7330:=myrec;
		END;
	FUNCTION pAInt8Signed7335_AI8S7335:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed7335_AI8S7335:=myrec;
		END;
	FUNCTION pASignedTformat7334_AST7334:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed7335_AI8S7335;
		 pASignedTformat7334_AST7334:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7333_ATP7333:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype7333_ATP7333:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7332_APT7332:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7332_APT7332:=nil;
		 pAPredeclaredtypeTypeprim7332_APT7332:=myrec;
		END;
	FUNCTION pAOptionalsign7338_AO7338:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7338_AO7338:=nil;
		 pAOptionalsign7338_AO7338:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7337_AIN7337:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber7337_AIN7337:=myrec;
		END;
	FUNCTION pAArray7336_AA7336:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7336_AA7336:=nil;
		 pAArray7336_AA7336:=myrec;
		END;
	FUNCTION pAArrayType7331_AAT7331:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType7331_AAT7331:=myrec;
		END;
	FUNCTION pATypeid7343_AT7343:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM48  ilcg.RegDetails@60f945}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7343_AT7343:=myrec;
		END;
	FUNCTION pATypeidType7342_ATT7342:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7343_AT7343;
		 pATypeidType7342_ATT7342:=myrec;
		END;
	FUNCTION pATypeid7345_AT7345:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM38  ilcg.RegDetails@2ea981}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7345_AT7345:=myrec;
		END;
	FUNCTION pATypeidType7344_ATT7344:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7345_AT7345;
		 pATypeidType7344_ATT7344:=myrec;
		END;
	FUNCTION pATypeid7347_AT7347:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM58  ilcg.RegDetails@7bafbb}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7347_AT7347:=myrec;
		END;
	FUNCTION pATypeidType7346_ATT7346:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7347_AT7347;
		 pATypeidType7346_ATT7346:=myrec;
		END;
	FUNCTION pATypeid7349_AT7349:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM08  ilcg.RegDetails@3b84ee}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7349_AT7349:=myrec;
		END;
	FUNCTION pATypeidType7348_ATT7348:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7349_AT7349;
		 pATypeidType7348_ATT7348:=myrec;
		END;
	FUNCTION pATypeid7351_AT7351:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM18  ilcg.RegDetails@491629}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7351_AT7351:=myrec;
		END;
	FUNCTION pATypeidType7350_ATT7350:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7351_AT7351;
		 pATypeidType7350_ATT7350:=myrec;
		END;
	FUNCTION pATypeid7353_AT7353:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM28  ilcg.RegDetails@259727}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7353_AT7353:=myrec;
		END;
	FUNCTION pATypeidType7352_ATT7352:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7353_AT7353;
		 pATypeidType7352_ATT7352:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl7341_AAP7341:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 227;
		myrec^.last:= 232;
		 pAAlternativesPatterndecl7341_AAP7341:=myrec;
		END;
	FUNCTION pATypeid7358_AT7358:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM432  ilcg.RegDetails@eb73e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7358_AT7358:=myrec;
		END;
	FUNCTION pATypeidType7357_ATT7357:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7358_AT7358;
		 pATypeidType7357_ATT7357:=myrec;
		END;
	FUNCTION pATypeid7360_AT7360:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM332  ilcg.RegDetails@204c26}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7360_AT7360:=myrec;
		END;
	FUNCTION pATypeidType7359_ATT7359:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7360_AT7360;
		 pATypeidType7359_ATT7359:=myrec;
		END;
	FUNCTION pATypeid7362_AT7362:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM532  ilcg.RegDetails@479a6b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7362_AT7362:=myrec;
		END;
	FUNCTION pATypeidType7361_ATT7361:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7362_AT7362;
		 pATypeidType7361_ATT7361:=myrec;
		END;
	FUNCTION pATypeid7364_AT7364:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM032  ilcg.RegDetails@66529c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7364_AT7364:=myrec;
		END;
	FUNCTION pATypeidType7363_ATT7363:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7364_AT7364;
		 pATypeidType7363_ATT7363:=myrec;
		END;
	FUNCTION pATypeid7366_AT7366:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM132  ilcg.RegDetails@397cea}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7366_AT7366:=myrec;
		END;
	FUNCTION pATypeidType7365_ATT7365:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7366_AT7366;
		 pATypeidType7365_ATT7365:=myrec;
		END;
	FUNCTION pATypeid7368_AT7368:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM232  ilcg.RegDetails@69929}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7368_AT7368:=myrec;
		END;
	FUNCTION pATypeidType7367_ATT7367:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7368_AT7368;
		 pATypeidType7367_ATT7367:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl7356_AAP7356:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 233;
		myrec^.last:= 238;
		 pAAlternativesPatterndecl7356_AAP7356:=myrec;
		END;
	FUNCTION pATypeid7373_AT7373:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM416  ilcg.RegDetails@601873}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7373_AT7373:=myrec;
		END;
	FUNCTION pATypeidType7372_ATT7372:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7373_AT7373;
		 pATypeidType7372_ATT7372:=myrec;
		END;
	FUNCTION pATypeid7375_AT7375:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM316  ilcg.RegDetails@4cf1b9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7375_AT7375:=myrec;
		END;
	FUNCTION pATypeidType7374_ATT7374:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7375_AT7375;
		 pATypeidType7374_ATT7374:=myrec;
		END;
	FUNCTION pATypeid7377_AT7377:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM516  ilcg.RegDetails@3d58b2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7377_AT7377:=myrec;
		END;
	FUNCTION pATypeidType7376_ATT7376:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7377_AT7377;
		 pATypeidType7376_ATT7376:=myrec;
		END;
	FUNCTION pATypeid7379_AT7379:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM016  ilcg.RegDetails@76ed77}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7379_AT7379:=myrec;
		END;
	FUNCTION pATypeidType7378_ATT7378:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7379_AT7379;
		 pATypeidType7378_ATT7378:=myrec;
		END;
	FUNCTION pATypeid7381_AT7381:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM116  ilcg.RegDetails@32967d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7381_AT7381:=myrec;
		END;
	FUNCTION pATypeidType7380_ATT7380:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7381_AT7381;
		 pATypeidType7380_ATT7380:=myrec;
		END;
	FUNCTION pATypeid7383_AT7383:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM216  ilcg.RegDetails@4e8e44}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7383_AT7383:=myrec;
		END;
	FUNCTION pATypeidType7382_ATT7382:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7383_AT7383;
		 pATypeidType7382_ATT7382:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl7371_AAP7371:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 239;
		myrec^.last:= 244;
		 pAAlternativesPatterndecl7371_AAP7371:=myrec;
		END;
	FUNCTION pATypeid7388_AT7388:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM1  ilcg.RegDetails@2098ff}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7388_AT7388:=myrec;
		END;
	FUNCTION pATypeidType7387_ATT7387:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7388_AT7388;
		 pATypeidType7387_ATT7387:=myrec;
		END;
	FUNCTION pATypeid7390_AT7390:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM3  ilcg.RegDetails@6e3762}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7390_AT7390:=myrec;
		END;
	FUNCTION pATypeidType7389_ATT7389:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7390_AT7390;
		 pATypeidType7389_ATT7389:=myrec;
		END;
	FUNCTION pATypeid7392_AT7392:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM4  ilcg.RegDetails@12fe09}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7392_AT7392:=myrec;
		END;
	FUNCTION pATypeidType7391_ATT7391:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7392_AT7392;
		 pATypeidType7391_ATT7391:=myrec;
		END;
	FUNCTION pATypeid7394_AT7394:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM5  ilcg.RegDetails@33cc96}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7394_AT7394:=myrec;
		END;
	FUNCTION pATypeidType7393_ATT7393:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7394_AT7394;
		 pATypeidType7393_ATT7393:=myrec;
		END;
	FUNCTION pATypeid7396_AT7396:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM2  ilcg.RegDetails@30d990}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7396_AT7396:=myrec;
		END;
	FUNCTION pATypeidType7395_ATT7395:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7396_AT7396;
		 pATypeidType7395_ATT7395:=myrec;
		END;
	FUNCTION pATypeid7398_AT7398:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM0  ilcg.RegDetails@55fcfe}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7398_AT7398:=myrec;
		END;
	FUNCTION pATypeidType7397_ATT7397:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7398_AT7398;
		 pATypeidType7397_ATT7397:=myrec;
		END;
	FUNCTION pATypeid7400_AT7400:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM7  ilcg.RegDetails@32835b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7400_AT7400:=myrec;
		END;
	FUNCTION pATypeidType7399_ATT7399:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7400_AT7400;
		 pATypeidType7399_ATT7399:=myrec;
		END;
	FUNCTION pATypeid7402_AT7402:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM6  ilcg.RegDetails@46ccac}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7402_AT7402:=myrec;
		END;
	FUNCTION pATypeidType7401_ATT7401:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7402_AT7402;
		 pATypeidType7401_ATT7401:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl7386_AAP7386:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 245;
		myrec^.last:= 252;
		 pAAlternativesPatterndecl7386_AAP7386:=myrec;
		END;
	FUNCTION pATypeid7407_AT7407:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM1L  ilcg.RegDetails@7c6345}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7407_AT7407:=myrec;
		END;
	FUNCTION pATypeidType7406_ATT7406:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7407_AT7407;
		 pATypeidType7406_ATT7406:=myrec;
		END;
	FUNCTION pATypeid7409_AT7409:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM3L  ilcg.RegDetails@7c8865}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7409_AT7409:=myrec;
		END;
	FUNCTION pATypeidType7408_ATT7408:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7409_AT7409;
		 pATypeidType7408_ATT7408:=myrec;
		END;
	FUNCTION pATypeid7411_AT7411:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM4L  ilcg.RegDetails@58a983}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7411_AT7411:=myrec;
		END;
	FUNCTION pATypeidType7410_ATT7410:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7411_AT7411;
		 pATypeidType7410_ATT7410:=myrec;
		END;
	FUNCTION pATypeid7413_AT7413:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM2L  ilcg.RegDetails@7a9557}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7413_AT7413:=myrec;
		END;
	FUNCTION pATypeidType7412_ATT7412:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7413_AT7413;
		 pATypeidType7412_ATT7412:=myrec;
		END;
	FUNCTION pATypeid7415_AT7415:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM0L  ilcg.RegDetails@586ed7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7415_AT7415:=myrec;
		END;
	FUNCTION pATypeidType7414_ATT7414:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7415_AT7415;
		 pATypeidType7414_ATT7414:=myrec;
		END;
	FUNCTION pATypeid7417_AT7417:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM5L  ilcg.RegDetails@433b55}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7417_AT7417:=myrec;
		END;
	FUNCTION pATypeidType7416_ATT7416:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7417_AT7417;
		 pATypeidType7416_ATT7416:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl7405_AAP7405:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 253;
		myrec^.last:= 258;
		 pAAlternativesPatterndecl7405_AAP7405:=myrec;
		END;
	FUNCTION pATypeid7422_AT7422:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM1L  ilcg.RegDetails@7c6345}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7422_AT7422:=myrec;
		END;
	FUNCTION pATypeidType7421_ATT7421:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7422_AT7422;
		 pATypeidType7421_ATT7421:=myrec;
		END;
	FUNCTION pATypeid7424_AT7424:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM3L  ilcg.RegDetails@7c8865}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7424_AT7424:=myrec;
		END;
	FUNCTION pATypeidType7423_ATT7423:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7424_AT7424;
		 pATypeidType7423_ATT7423:=myrec;
		END;
	FUNCTION pATypeid7426_AT7426:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM4L  ilcg.RegDetails@58a983}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7426_AT7426:=myrec;
		END;
	FUNCTION pATypeidType7425_ATT7425:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7426_AT7426;
		 pATypeidType7425_ATT7425:=myrec;
		END;
	FUNCTION pATypeid7428_AT7428:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM2L  ilcg.RegDetails@7a9557}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7428_AT7428:=myrec;
		END;
	FUNCTION pATypeidType7427_ATT7427:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7428_AT7428;
		 pATypeidType7427_ATT7427:=myrec;
		END;
	FUNCTION pATypeid7430_AT7430:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM0L  ilcg.RegDetails@586ed7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7430_AT7430:=myrec;
		END;
	FUNCTION pATypeidType7429_ATT7429:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7430_AT7430;
		 pATypeidType7429_ATT7429:=myrec;
		END;
	FUNCTION pATypeid7432_AT7432:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MM5L  ilcg.RegDetails@433b55}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7432_AT7432:=myrec;
		END;
	FUNCTION pATypeidType7431_ATT7431:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7432_AT7432;
		 pATypeidType7431_ATT7431:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl7420_AAP7420:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 259;
		myrec^.last:= 264;
		 pAAlternativesPatterndecl7420_AAP7420:=myrec;
		END;
	FUNCTION pATypeid7437_AT7437:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im4reg  ilcg.pattern@49982e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7437_AT7437:=myrec;
		END;
	FUNCTION pATypeidType7436_ATT7436:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7437_AT7437;
		 pATypeidType7436_ATT7436:=myrec;
		END;
	FUNCTION pATypeid7439_AT7439:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im8reg  ilcg.pattern@694a18}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7439_AT7439:=myrec;
		END;
	FUNCTION pATypeidType7438_ATT7438:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7439_AT7439;
		 pATypeidType7438_ATT7438:=myrec;
		END;
	FUNCTION pATypeid7441_AT7441:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im2reg  ilcg.pattern@3813c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7441_AT7441:=myrec;
		END;
	FUNCTION pATypeidType7440_ATT7440:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7441_AT7441;
		 pATypeidType7440_ATT7440:=myrec;
		END;
	FUNCTION pATypeid7443_AT7443:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ untypedmreg  ilcg.pattern@264dd8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7443_AT7443:=myrec;
		END;
	FUNCTION pATypeidType7442_ATT7442:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7443_AT7443;
		 pATypeidType7442_ATT7442:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl7435_AAP7435:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 265;
		myrec^.last:= 268;
		 pAAlternativesPatterndecl7435_AAP7435:=myrec;
		END;
	FUNCTION pATypeid7448_AT7448:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7448_AT7448:=myrec;
		END;
	FUNCTION pATypeidType7447_ATT7447:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7448_AT7448;
		 pATypeidType7447_ATT7447:=myrec;
		END;
	FUNCTION pATypeid7450_AT7450:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@27d316}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7450_AT7450:=myrec;
		END;
	FUNCTION pATypeidType7449_ATT7449:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid7450_AT7450;
		 pATypeidType7449_ATT7449:=myrec;
		END;
	FUNCTION pAAlternativesPatterndecl7446_AAP7446:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=alternation;
		myrec^.first:= 269;
		myrec^.last:= 270;
		 pAAlternativesPatterndecl7446_AAP7446:=myrec;
		END;
	FUNCTION pATypeid7453_AT7453:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im4reg  ilcg.pattern@49982e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7453_AT7453:=myrec;
		END;
	FUNCTION pATypeid7455_AT7455:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@2a7640}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7455_AT7455:=myrec;
		END;
	FUNCTION pAIdLoc7459_AIL7459:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc7459_AIL7459:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval7458_AR7458:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7459_AIL7459;
		 pARefval7458_AR7458:=myrec;
		END;
	FUNCTION pAInt16Signed7466_AI16S7466:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed7466_AI16S7466:=myrec;
		END;
	FUNCTION pASignedTformat7465_AST7465:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed7466_AI16S7466;
		 pASignedTformat7465_AST7465:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7464_ATP7464:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype7464_ATP7464:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7463_APT7463:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7463_APT7463:=nil;
		 pAPredeclaredtypeTypeprim7463_APT7463:=myrec;
		END;
	FUNCTION pAOptionalsign7469_AO7469:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7469_AO7469:=nil;
		 pAOptionalsign7469_AO7469:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7468_AIN7468:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber7468_AIN7468:=myrec;
		END;
	FUNCTION pAArray7467_AA7467:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7467_AA7467:=nil;
		 pAArray7467_AA7467:=myrec;
		END;
	FUNCTION pAArrayType7462_AAT7462:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType7462_AAT7462:=myrec;
		END;
	FUNCTION pATimesDyadic7471_ATD7471:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcptimes;
		 pATimesDyadic7471_ATD7471:=myrec;
		END;
	FUNCTION pAInt16Signed7478_AI16S7478:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed7478_AI16S7478:=myrec;
		END;
	FUNCTION pASignedTformat7477_AST7477:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed7478_AI16S7478;
		 pASignedTformat7477_AST7477:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7476_ATP7476:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype7476_ATP7476:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7475_APT7475:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7475_APT7475:=nil;
		 pAPredeclaredtypeTypeprim7475_APT7475:=myrec;
		END;
	FUNCTION pAOptionalsign7481_AO7481:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7481_AO7481:=nil;
		 pAOptionalsign7481_AO7481:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7480_AIN7480:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber7480_AIN7480:=myrec;
		END;
	FUNCTION pAArray7479_AA7479:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7479_AA7479:=nil;
		 pAArray7479_AA7479:=myrec;
		END;
	FUNCTION pAArrayType7474_AAT7474:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType7474_AAT7474:=myrec;
		END;
	FUNCTION pAIdLoc7485_AIL7485:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc7485_AIL7485:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval7484_AR7484:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7485_AIL7485;
		 pARefval7484_AR7484:=myrec;
		END;
	FUNCTION pADerefRhs7483_ADR7483:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval7484_AR7484;
		 pADerefRhs7483_ADR7483:=myrec;
		END;
	FUNCTION pARhsValue7482_ARV7482:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs7483_ADR7483;
		 pARhsValue7482_ARV7482:=myrec;
		END;
		(*! try to cast to type: int16 vector ( 4 )*)
	FUNCTION pACastRhs7473_ACR7473:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType7474_AAT7474;
		myrec^.arg2:=pARhsValue7482_ARV7482;
		 pACastRhs7473_ACR7473:=myrec;
		END;
	FUNCTION pARhsValue7472_ARV7472:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7473_ACR7473;
		 pARhsValue7472_ARV7472:=myrec;
		END;
	FUNCTION pAInt16Signed7492_AI16S7492:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed7492_AI16S7492:=myrec;
		END;
	FUNCTION pASignedTformat7491_AST7491:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed7492_AI16S7492;
		 pASignedTformat7491_AST7491:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7490_ATP7490:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype7490_ATP7490:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7489_APT7489:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7489_APT7489:=nil;
		 pAPredeclaredtypeTypeprim7489_APT7489:=myrec;
		END;
	FUNCTION pAOptionalsign7495_AO7495:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7495_AO7495:=nil;
		 pAOptionalsign7495_AO7495:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7494_AIN7494:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber7494_AIN7494:=myrec;
		END;
	FUNCTION pAArray7493_AA7493:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7493_AA7493:=nil;
		 pAArray7493_AA7493:=myrec;
		END;
	FUNCTION pAArrayType7488_AAT7488:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType7488_AAT7488:=myrec;
		END;
	FUNCTION pAIdLoc7499_AIL7499:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc7499_AIL7499:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval7498_AR7498:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7499_AIL7499;
		 pARefval7498_AR7498:=myrec;
		END;
	FUNCTION pADerefRhs7497_ADR7497:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval7498_AR7498;
		 pADerefRhs7497_ADR7497:=myrec;
		END;
	FUNCTION pARhsValue7496_ARV7496:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs7497_ADR7497;
		 pARhsValue7496_ARV7496:=myrec;
		END;
		(*! try to cast to type: int16 vector ( 4 )*)
	FUNCTION pACastRhs7487_ACR7487:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType7488_AAT7488;
		myrec^.arg2:=pARhsValue7496_ARV7496;
		 pACastRhs7487_ACR7487:=myrec;
		END;
	FUNCTION pARhsValue7486_ARV7486:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7487_ACR7487;
		 pARhsValue7486_ARV7486:=myrec;
		END;
	FUNCTION pADyadicValue7470_ADV7470:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue7472_ARV7472;
		myrec^.arg2:=pARhsValue7486_ARV7486;
		myrec^.fn:=pATimesDyadic7471_ATD7471;
		 pADyadicValue7470_ADV7470:=myrec;
		END;
		(*! try to cast to type: int16 vector ( 4 )*)
	FUNCTION pACastRhs7461_ACR7461:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType7462_AAT7462;
		myrec^.arg2:=pADyadicValue7470_ADV7470;
		 pACastRhs7461_ACR7461:=myrec;
		END;
	FUNCTION pARhsValue7460_ARV7460:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7461_ACR7461;
		 pARhsValue7460_ARV7460:=myrec;
		END;
	FUNCTION pAAssign7457_AA7457:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue7460_ARV7460;
		myrec^.dest:=pARefval7458_AR7458;
		 pAAssign7457_AA7457:=myrec;
		END;
	FUNCTION pAAssignMeaning7456_AAM7456:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign7457_AA7457;
		 pAAssignMeaning7456_AAM7456:=myrec;
		END;
	FUNCTION pAAssemblypattern7501_AA7501:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'pmullw ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern7501_AA7501:=list;
		END;
	FUNCTION pAAssemblesto7500_AA7500:pprintlist;
	begin
		pAAssemblesto7500_AA7500:=pAAssemblypattern7501_AA7501;
		END;
	FUNCTION pASideeffects7506_AS7506:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7506_AS7506:=nil;
		 pASideeffects7506_AS7506:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7507_AUP7507:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7507_AUP7507:=nil;
		 pAUnconditionalPrecond7507_AUP7507:=myrec;
		END;
	FUNCTION PMULLW_PMULLW:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patim4reg_4;
		params^[1]:=patmrmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning7456_AAM7456;
		matchedAssembler:=pAAssemblesto7500_AA7500;
		END;
		PMULLW_PMULLW:=myrec;
	END;
	FUNCTION pATypeid7510_AT7510:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im8reg  ilcg.pattern@694a18}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7510_AT7510:=myrec;
		END;
	FUNCTION pATypeid7512_AT7512:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@2a7640}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7512_AT7512:=myrec;
		END;
	FUNCTION pATypeid7514_AT7514:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@2a7640}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7514_AT7514:=myrec;
		END;
	FUNCTION pAIdLoc7518_AIL7518:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc7518_AIL7518:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval7517_AR7517:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7518_AIL7518;
		 pARefval7517_AR7517:=myrec;
		END;
	FUNCTION pAInt8Signed7525_AI8S7525:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed7525_AI8S7525:=myrec;
		END;
	FUNCTION pASignedTformat7524_AST7524:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed7525_AI8S7525;
		 pASignedTformat7524_AST7524:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7523_ATP7523:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype7523_ATP7523:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7522_APT7522:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7522_APT7522:=nil;
		 pAPredeclaredtypeTypeprim7522_APT7522:=myrec;
		END;
	FUNCTION pAOptionalsign7528_AO7528:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7528_AO7528:=nil;
		 pAOptionalsign7528_AO7528:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7527_AIN7527:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber7527_AIN7527:=myrec;
		END;
	FUNCTION pAArray7526_AA7526:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7526_AA7526:=nil;
		 pAArray7526_AA7526:=myrec;
		END;
	FUNCTION pAArrayType7521_AAT7521:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType7521_AAT7521:=myrec;
		END;
	FUNCTION pASatmultDyadic7530_ASD7530:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpsatmult;
		 pASatmultDyadic7530_ASD7530:=myrec;
		END;
	FUNCTION pAInt8Signed7537_AI8S7537:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed7537_AI8S7537:=myrec;
		END;
	FUNCTION pASignedTformat7536_AST7536:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed7537_AI8S7537;
		 pASignedTformat7536_AST7536:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7535_ATP7535:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype7535_ATP7535:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7534_APT7534:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7534_APT7534:=nil;
		 pAPredeclaredtypeTypeprim7534_APT7534:=myrec;
		END;
	FUNCTION pAOptionalsign7540_AO7540:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7540_AO7540:=nil;
		 pAOptionalsign7540_AO7540:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7539_AIN7539:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber7539_AIN7539:=myrec;
		END;
	FUNCTION pAArray7538_AA7538:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7538_AA7538:=nil;
		 pAArray7538_AA7538:=myrec;
		END;
	FUNCTION pAArrayType7533_AAT7533:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType7533_AAT7533:=myrec;
		END;
	FUNCTION pAIdLoc7544_AIL7544:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc7544_AIL7544:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval7543_AR7543:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7544_AIL7544;
		 pARefval7543_AR7543:=myrec;
		END;
	FUNCTION pADerefRhs7542_ADR7542:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval7543_AR7543;
		 pADerefRhs7542_ADR7542:=myrec;
		END;
	FUNCTION pARhsValue7541_ARV7541:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs7542_ADR7542;
		 pARhsValue7541_ARV7541:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs7532_ACR7532:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType7533_AAT7533;
		myrec^.arg2:=pARhsValue7541_ARV7541;
		 pACastRhs7532_ACR7532:=myrec;
		END;
	FUNCTION pARhsValue7531_ARV7531:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7532_ACR7532;
		 pARhsValue7531_ARV7531:=myrec;
		END;
	FUNCTION pAInt8Signed7551_AI8S7551:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed7551_AI8S7551:=myrec;
		END;
	FUNCTION pASignedTformat7550_AST7550:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed7551_AI8S7551;
		 pASignedTformat7550_AST7550:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7549_ATP7549:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype7549_ATP7549:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7548_APT7548:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7548_APT7548:=nil;
		 pAPredeclaredtypeTypeprim7548_APT7548:=myrec;
		END;
	FUNCTION pAOptionalsign7554_AO7554:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7554_AO7554:=nil;
		 pAOptionalsign7554_AO7554:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7553_AIN7553:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber7553_AIN7553:=myrec;
		END;
	FUNCTION pAArray7552_AA7552:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7552_AA7552:=nil;
		 pAArray7552_AA7552:=myrec;
		END;
	FUNCTION pAArrayType7547_AAT7547:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType7547_AAT7547:=myrec;
		END;
	FUNCTION pAIdLoc7558_AIL7558:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc7558_AIL7558:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval7557_AR7557:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7558_AIL7558;
		 pARefval7557_AR7557:=myrec;
		END;
	FUNCTION pADerefRhs7556_ADR7556:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval7557_AR7557;
		 pADerefRhs7556_ADR7556:=myrec;
		END;
	FUNCTION pARhsValue7555_ARV7555:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs7556_ADR7556;
		 pARhsValue7555_ARV7555:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs7546_ACR7546:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType7547_AAT7547;
		myrec^.arg2:=pARhsValue7555_ARV7555;
		 pACastRhs7546_ACR7546:=myrec;
		END;
	FUNCTION pARhsValue7545_ARV7545:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7546_ACR7546;
		 pARhsValue7545_ARV7545:=myrec;
		END;
	FUNCTION pADyadicValue7529_ADV7529:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue7531_ARV7531;
		myrec^.arg2:=pARhsValue7545_ARV7545;
		myrec^.fn:=pASatmultDyadic7530_ASD7530;
		 pADyadicValue7529_ADV7529:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs7520_ACR7520:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType7521_AAT7521;
		myrec^.arg2:=pADyadicValue7529_ADV7529;
		 pACastRhs7520_ACR7520:=myrec;
		END;
	FUNCTION pARhsValue7519_ARV7519:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7520_ACR7520;
		 pARhsValue7519_ARV7519:=myrec;
		END;
	FUNCTION pAAssign7516_AA7516:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue7519_ARV7519;
		myrec^.dest:=pARefval7517_AR7517;
		 pAAssign7516_AA7516:=myrec;
		END;
	FUNCTION pAAssignMeaning7515_AAM7515:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign7516_AA7516;
		 pAAssignMeaning7515_AAM7515:=myrec;
		END;
	FUNCTION pAAssemblypattern7560_AA7560:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'pxor MM7,MM7' );
		pappends(list,'\n pxor MM5,MM5' );
		pappends(list,'\n punpckhbw MM7,' );
		pappendp(list,2);
		pappends(list,'\n pxor MM6,MM6' );
		pappends(list,'\n punpckhbw MM6,' );
		pappendp(list,1);
		pappends(list,'\n pxor ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,0);
		pappends(list,'\n punpcklbw ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,2);
		pappends(list,'\n pmulhw MM7,MM6' );
		pappends(list,'\n psraw MM7,7' );
		pappends(list,'\n punpcklbw MM6,' );
		pappendp(list,1);
		pappends(list,'\n pmulhw ' );
		pappendp(list,0);
		pappends(list,',MM6' );
		pappends(list,'\n psraw ' );
		pappendp(list,0);
		pappends(list,',7' );
		pappends(list,'\n packsswb ' );
		pappendp(list,0);
		pappends(list,',MM7' );
		pAAssemblypattern7560_AA7560:=list;
		END;
	FUNCTION pAAssemblesto7559_AA7559:pprintlist;
	begin
		pAAssemblesto7559_AA7559:=pAAssemblypattern7560_AA7560;
		END;
	FUNCTION pASideeffects7589_AS7589:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7589_AS7589:=nil;
		 pASideeffects7589_AS7589:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7590_AUP7590:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7590_AUP7590:=nil;
		 pAUnconditionalPrecond7590_AUP7590:=myrec;
		END;
	FUNCTION PMULLSSB_PMULLSSB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patmrmaddrmode_;
		params^[0]:=patim8reg_8;
		params^[2]:=patmrmaddrmode_;
		paramcount:=4;
		meaning:=pAAssignMeaning7515_AAM7515;
		matchedAssembler:=pAAssemblesto7559_AA7559;
		END;
		PMULLSSB_PMULLSSB:=myrec;
	END;
	FUNCTION pATypeid7593_AT7593:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@27d316}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7593_AT7593:=myrec;
		END;
	FUNCTION pAPushDyadic7596_APD7596:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcppush;
		 pAPushDyadic7596_APD7596:=myrec;
		END;
	FUNCTION pAIdLoc7598_AIL7598:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc7598_AIL7598:=myrec;
		END;
	FUNCTION pALocValue7597_ALV7597:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7598_AIL7598;
		 pALocValue7597_ALV7597:=myrec;
		END;
	FUNCTION pAIdLoc7600_AIL7600:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc7600_AIL7600:=myrec;
		END;
	FUNCTION pALocValue7599_ALV7599:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7600_AIL7600;
		 pALocValue7599_ALV7599:=myrec;
		END;
	FUNCTION pADyadicValue7595_ADV7595:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pALocValue7597_ALV7597;
		myrec^.arg2:=pALocValue7599_ALV7599;
		myrec^.fn:=pAPushDyadic7596_APD7596;
		 pADyadicValue7595_ADV7595:=myrec;
		END;
	FUNCTION pAValueMeaning7594_AVM7594:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADyadicValue7595_ADV7595;
		 pAValueMeaning7594_AVM7594:=myrec;
		END;
	FUNCTION pAAssemblypattern7602_AA7602:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'sub esp,8\n movq [esp],' );
		pappendp(list,0);
		pAAssemblypattern7602_AA7602:=list;
		END;
	FUNCTION pAAssemblesto7601_AA7601:pprintlist;
	begin
		pAAssemblesto7601_AA7601:=pAAssemblypattern7602_AA7602;
		END;
	FUNCTION pASideeffects7605_AS7605:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7605_AS7605:=nil;
		 pASideeffects7605_AS7605:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7606_AUP7606:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7606_AUP7606:=nil;
		 pAUnconditionalPrecond7606_AUP7606:=myrec;
		END;
	FUNCTION MMXPUSH_MMXPUSH:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		paramcount:=2;
		meaning:=pAValueMeaning7594_AVM7594;
		matchedAssembler:=pAAssemblesto7601_AA7601;
		END;
		MMXPUSH_MMXPUSH:=myrec;
	END;
	FUNCTION pATypeid7609_AT7609:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@27d316}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7609_AT7609:=myrec;
		END;
	FUNCTION pAIdLoc7613_AIL7613:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc7613_AIL7613:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval7612_AR7612:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7613_AIL7613;
		 pARefval7612_AR7612:=myrec;
		END;
	FUNCTION pAPopMonadic7615_APM7615:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic7615_APM7615:=myrec;
		END;
	FUNCTION pAIdLoc7617_AIL7617:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc7617_AIL7617:=myrec;
		END;
	FUNCTION pALocValue7616_ALV7616:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7617_AIL7617;
		 pALocValue7616_ALV7616:=myrec;
		END;
	FUNCTION pAMonadicValue7614_AMV7614:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue7616_ALV7616;
		myrec^.fn:=pAPopMonadic7615_APM7615;
		 pAMonadicValue7614_AMV7614:=myrec;
		END;
	FUNCTION pAAssign7611_AA7611:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pAMonadicValue7614_AMV7614;
		myrec^.dest:=pARefval7612_AR7612;
		 pAAssign7611_AA7611:=myrec;
		END;
	FUNCTION pAAssignMeaning7610_AAM7610:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign7611_AA7611;
		 pAAssignMeaning7610_AAM7610:=myrec;
		END;
	FUNCTION pAAssemblypattern7619_AA7619:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movq ' );
		pappendp(list,0);
		pappends(list,',[esp]\n add esp,8' );
		pAAssemblypattern7619_AA7619:=list;
		END;
	FUNCTION pAAssemblesto7618_AA7618:pprintlist;
	begin
		pAAssemblesto7618_AA7618:=pAAssemblypattern7619_AA7619;
		END;
	FUNCTION pASideeffects7623_AS7623:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7623_AS7623:=nil;
		 pASideeffects7623_AS7623:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7624_AUP7624:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7624_AUP7624:=nil;
		 pAUnconditionalPrecond7624_AUP7624:=myrec;
		END;
	FUNCTION MMXPOP_MMXPOP:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		paramcount:=2;
		meaning:=pAAssignMeaning7610_AAM7610;
		matchedAssembler:=pAAssemblesto7618_AA7618;
		END;
		MMXPOP_MMXPOP:=myrec;
	END;
	FUNCTION pATypeid7627_AT7627:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@27d316}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7627_AT7627:=myrec;
		END;
	FUNCTION pATypeid7629_AT7629:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@2a7640}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7629_AT7629:=myrec;
		END;
	FUNCTION pASigned7639_AS7639:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned7639_AS7639:=myrec;
		END;
	FUNCTION pASignedTformat7638_AST7638:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned7639_AS7639;
		 pASignedTformat7638_AST7638:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7637_ATP7637:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype7637_ATP7637:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7636_APT7636:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7636_APT7636:=nil;
		 pAPredeclaredtypeTypeprim7636_APT7636:=myrec;
		END;
	FUNCTION pAOptionalsign7642_AO7642:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7642_AO7642:=nil;
		 pAOptionalsign7642_AO7642:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7641_AIN7641:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber7641_AIN7641:=myrec;
		END;
	FUNCTION pAArray7640_AA7640:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7640_AA7640:=nil;
		 pAArray7640_AA7640:=myrec;
		END;
	FUNCTION pAArrayType7635_AAT7635:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,2 );
		 pAArrayType7635_AAT7635:=myrec;
		END;
	FUNCTION pAReference7634_AR7634:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType7635_AAT7635;
		 pAReference7634_AR7634:=myrec;
		END;
	FUNCTION pAReftypeType7633_ART7633:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference7634_AR7634;
		 pAReftypeType7633_ART7633:=myrec;
		END;
	FUNCTION pAIdLoc7643_AIL7643:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc7643_AIL7643:=myrec;
		END;
	FUNCTION pARefcastRefval7632_ARR7632:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType7633_ART7633;
		myrec^.arg2:=pAIdLoc7643_AIL7643;
		 pARefcastRefval7632_ARR7632:=myrec;
		END;
	FUNCTION pASigned7650_AS7650:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned7650_AS7650:=myrec;
		END;
	FUNCTION pASignedTformat7649_AST7649:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned7650_AS7650;
		 pASignedTformat7649_AST7649:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7648_ATP7648:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype7648_ATP7648:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7647_APT7647:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7647_APT7647:=nil;
		 pAPredeclaredtypeTypeprim7647_APT7647:=myrec;
		END;
	FUNCTION pAOptionalsign7653_AO7653:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7653_AO7653:=nil;
		 pAOptionalsign7653_AO7653:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7652_AIN7652:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber7652_AIN7652:=myrec;
		END;
	FUNCTION pAArray7651_AA7651:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7651_AA7651:=nil;
		 pAArray7651_AA7651:=myrec;
		END;
	FUNCTION pAArrayType7646_AAT7646:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,2 );
		 pAArrayType7646_AAT7646:=myrec;
		END;
	FUNCTION pAPlusDyadic7655_APD7655:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic7655_APD7655:=myrec;
		END;
	FUNCTION pASigned7662_AS7662:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned7662_AS7662:=myrec;
		END;
	FUNCTION pASignedTformat7661_AST7661:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned7662_AS7662;
		 pASignedTformat7661_AST7661:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7660_ATP7660:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype7660_ATP7660:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7659_APT7659:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7659_APT7659:=nil;
		 pAPredeclaredtypeTypeprim7659_APT7659:=myrec;
		END;
	FUNCTION pAOptionalsign7665_AO7665:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7665_AO7665:=nil;
		 pAOptionalsign7665_AO7665:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7664_AIN7664:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber7664_AIN7664:=myrec;
		END;
	FUNCTION pAArray7663_AA7663:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7663_AA7663:=nil;
		 pAArray7663_AA7663:=myrec;
		END;
	FUNCTION pAArrayType7658_AAT7658:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,2 );
		 pAArrayType7658_AAT7658:=myrec;
		END;
	FUNCTION pAIdLoc7669_AIL7669:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc7669_AIL7669:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval7668_AR7668:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7669_AIL7669;
		 pARefval7668_AR7668:=myrec;
		END;
	FUNCTION pADerefRhs7667_ADR7667:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval7668_AR7668;
		 pADerefRhs7667_ADR7667:=myrec;
		END;
	FUNCTION pARhsValue7666_ARV7666:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs7667_ADR7667;
		 pARhsValue7666_ARV7666:=myrec;
		END;
		(*! try to cast to type: int32 vector ( 2 )*)
	FUNCTION pACastRhs7657_ACR7657:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType7658_AAT7658;
		myrec^.arg2:=pARhsValue7666_ARV7666;
		 pACastRhs7657_ACR7657:=myrec;
		END;
	FUNCTION pARhsValue7656_ARV7656:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7657_ACR7657;
		 pARhsValue7656_ARV7656:=myrec;
		END;
	FUNCTION pASigned7676_AS7676:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned7676_AS7676:=myrec;
		END;
	FUNCTION pASignedTformat7675_AST7675:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned7676_AS7676;
		 pASignedTformat7675_AST7675:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7674_ATP7674:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype7674_ATP7674:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7673_APT7673:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7673_APT7673:=nil;
		 pAPredeclaredtypeTypeprim7673_APT7673:=myrec;
		END;
	FUNCTION pAOptionalsign7679_AO7679:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7679_AO7679:=nil;
		 pAOptionalsign7679_AO7679:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7678_AIN7678:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber7678_AIN7678:=myrec;
		END;
	FUNCTION pAArray7677_AA7677:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7677_AA7677:=nil;
		 pAArray7677_AA7677:=myrec;
		END;
	FUNCTION pAArrayType7672_AAT7672:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,2 );
		 pAArrayType7672_AAT7672:=myrec;
		END;
	FUNCTION pAIdLoc7683_AIL7683:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc7683_AIL7683:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval7682_AR7682:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7683_AIL7683;
		 pARefval7682_AR7682:=myrec;
		END;
	FUNCTION pADerefRhs7681_ADR7681:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval7682_AR7682;
		 pADerefRhs7681_ADR7681:=myrec;
		END;
	FUNCTION pARhsValue7680_ARV7680:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs7681_ADR7681;
		 pARhsValue7680_ARV7680:=myrec;
		END;
		(*! try to cast to type: int32 vector ( 2 )*)
	FUNCTION pACastRhs7671_ACR7671:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType7672_AAT7672;
		myrec^.arg2:=pARhsValue7680_ARV7680;
		 pACastRhs7671_ACR7671:=myrec;
		END;
	FUNCTION pARhsValue7670_ARV7670:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7671_ACR7671;
		 pARhsValue7670_ARV7670:=myrec;
		END;
	FUNCTION pADyadicValue7654_ADV7654:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue7656_ARV7656;
		myrec^.arg2:=pARhsValue7670_ARV7670;
		myrec^.fn:=pAPlusDyadic7655_APD7655;
		 pADyadicValue7654_ADV7654:=myrec;
		END;
		(*! try to cast to type: int32 vector ( 2 )*)
	FUNCTION pACastRhs7645_ACR7645:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType7646_AAT7646;
		myrec^.arg2:=pADyadicValue7654_ADV7654;
		 pACastRhs7645_ACR7645:=myrec;
		END;
	FUNCTION pARhsValue7644_ARV7644:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7645_ACR7645;
		 pARhsValue7644_ARV7644:=myrec;
		END;
	FUNCTION pAAssign7631_AA7631:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue7644_ARV7644;
		myrec^.dest:=pARefcastRefval7632_ARR7632;
		 pAAssign7631_AA7631:=myrec;
		END;
	FUNCTION pAAssignMeaning7630_AAM7630:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign7631_AA7631;
		 pAAssignMeaning7630_AAM7630:=myrec;
		END;
	FUNCTION pAAssemblypattern7685_AA7685:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'paddd ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern7685_AA7685:=list;
		END;
	FUNCTION pAAssemblesto7684_AA7684:pprintlist;
	begin
		pAAssemblesto7684_AA7684:=pAAssemblypattern7685_AA7685;
		END;
	FUNCTION pASideeffects7690_AS7690:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7690_AS7690:=nil;
		 pASideeffects7690_AS7690:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7691_AUP7691:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7691_AUP7691:=nil;
		 pAUnconditionalPrecond7691_AUP7691:=myrec;
		END;
	FUNCTION PADDD_PADDD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		params^[1]:=patmrmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning7630_AAM7630;
		matchedAssembler:=pAAssemblesto7684_AA7684;
		END;
		PADDD_PADDD:=myrec;
	END;
	FUNCTION pATypeid7694_AT7694:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im4reg  ilcg.pattern@49982e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7694_AT7694:=myrec;
		END;
	FUNCTION pATypeid7696_AT7696:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@2a7640}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7696_AT7696:=myrec;
		END;
	FUNCTION pAInt16Signed7706_AI16S7706:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed7706_AI16S7706:=myrec;
		END;
	FUNCTION pASignedTformat7705_AST7705:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed7706_AI16S7706;
		 pASignedTformat7705_AST7705:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7704_ATP7704:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype7704_ATP7704:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7703_APT7703:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7703_APT7703:=nil;
		 pAPredeclaredtypeTypeprim7703_APT7703:=myrec;
		END;
	FUNCTION pAOptionalsign7709_AO7709:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7709_AO7709:=nil;
		 pAOptionalsign7709_AO7709:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7708_AIN7708:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber7708_AIN7708:=myrec;
		END;
	FUNCTION pAArray7707_AA7707:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7707_AA7707:=nil;
		 pAArray7707_AA7707:=myrec;
		END;
	FUNCTION pAArrayType7702_AAT7702:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType7702_AAT7702:=myrec;
		END;
	FUNCTION pAReference7701_AR7701:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType7702_AAT7702;
		 pAReference7701_AR7701:=myrec;
		END;
	FUNCTION pAReftypeType7700_ART7700:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference7701_AR7701;
		 pAReftypeType7700_ART7700:=myrec;
		END;
	FUNCTION pAIdLoc7710_AIL7710:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc7710_AIL7710:=myrec;
		END;
	FUNCTION pARefcastRefval7699_ARR7699:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType7700_ART7700;
		myrec^.arg2:=pAIdLoc7710_AIL7710;
		 pARefcastRefval7699_ARR7699:=myrec;
		END;
	FUNCTION pAInt16Signed7717_AI16S7717:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed7717_AI16S7717:=myrec;
		END;
	FUNCTION pASignedTformat7716_AST7716:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed7717_AI16S7717;
		 pASignedTformat7716_AST7716:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7715_ATP7715:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype7715_ATP7715:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7714_APT7714:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7714_APT7714:=nil;
		 pAPredeclaredtypeTypeprim7714_APT7714:=myrec;
		END;
	FUNCTION pAOptionalsign7720_AO7720:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7720_AO7720:=nil;
		 pAOptionalsign7720_AO7720:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7719_AIN7719:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber7719_AIN7719:=myrec;
		END;
	FUNCTION pAArray7718_AA7718:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7718_AA7718:=nil;
		 pAArray7718_AA7718:=myrec;
		END;
	FUNCTION pAArrayType7713_AAT7713:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType7713_AAT7713:=myrec;
		END;
	FUNCTION pAPlusDyadic7722_APD7722:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic7722_APD7722:=myrec;
		END;
	FUNCTION pAInt16Signed7729_AI16S7729:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed7729_AI16S7729:=myrec;
		END;
	FUNCTION pASignedTformat7728_AST7728:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed7729_AI16S7729;
		 pASignedTformat7728_AST7728:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7727_ATP7727:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype7727_ATP7727:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7726_APT7726:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7726_APT7726:=nil;
		 pAPredeclaredtypeTypeprim7726_APT7726:=myrec;
		END;
	FUNCTION pAOptionalsign7732_AO7732:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7732_AO7732:=nil;
		 pAOptionalsign7732_AO7732:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7731_AIN7731:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber7731_AIN7731:=myrec;
		END;
	FUNCTION pAArray7730_AA7730:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7730_AA7730:=nil;
		 pAArray7730_AA7730:=myrec;
		END;
	FUNCTION pAArrayType7725_AAT7725:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType7725_AAT7725:=myrec;
		END;
	FUNCTION pAIdLoc7736_AIL7736:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc7736_AIL7736:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval7735_AR7735:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7736_AIL7736;
		 pARefval7735_AR7735:=myrec;
		END;
	FUNCTION pADerefRhs7734_ADR7734:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval7735_AR7735;
		 pADerefRhs7734_ADR7734:=myrec;
		END;
	FUNCTION pARhsValue7733_ARV7733:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs7734_ADR7734;
		 pARhsValue7733_ARV7733:=myrec;
		END;
		(*! try to cast to type: int16 vector ( 4 )*)
	FUNCTION pACastRhs7724_ACR7724:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType7725_AAT7725;
		myrec^.arg2:=pARhsValue7733_ARV7733;
		 pACastRhs7724_ACR7724:=myrec;
		END;
	FUNCTION pARhsValue7723_ARV7723:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7724_ACR7724;
		 pARhsValue7723_ARV7723:=myrec;
		END;
	FUNCTION pAInt16Signed7743_AI16S7743:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed7743_AI16S7743:=myrec;
		END;
	FUNCTION pASignedTformat7742_AST7742:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed7743_AI16S7743;
		 pASignedTformat7742_AST7742:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7741_ATP7741:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype7741_ATP7741:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7740_APT7740:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7740_APT7740:=nil;
		 pAPredeclaredtypeTypeprim7740_APT7740:=myrec;
		END;
	FUNCTION pAOptionalsign7746_AO7746:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7746_AO7746:=nil;
		 pAOptionalsign7746_AO7746:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7745_AIN7745:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber7745_AIN7745:=myrec;
		END;
	FUNCTION pAArray7744_AA7744:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7744_AA7744:=nil;
		 pAArray7744_AA7744:=myrec;
		END;
	FUNCTION pAArrayType7739_AAT7739:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType7739_AAT7739:=myrec;
		END;
	FUNCTION pAIdLoc7750_AIL7750:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc7750_AIL7750:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval7749_AR7749:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7750_AIL7750;
		 pARefval7749_AR7749:=myrec;
		END;
	FUNCTION pADerefRhs7748_ADR7748:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval7749_AR7749;
		 pADerefRhs7748_ADR7748:=myrec;
		END;
	FUNCTION pARhsValue7747_ARV7747:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs7748_ADR7748;
		 pARhsValue7747_ARV7747:=myrec;
		END;
		(*! try to cast to type: int16 vector ( 4 )*)
	FUNCTION pACastRhs7738_ACR7738:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType7739_AAT7739;
		myrec^.arg2:=pARhsValue7747_ARV7747;
		 pACastRhs7738_ACR7738:=myrec;
		END;
	FUNCTION pARhsValue7737_ARV7737:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7738_ACR7738;
		 pARhsValue7737_ARV7737:=myrec;
		END;
	FUNCTION pADyadicValue7721_ADV7721:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue7723_ARV7723;
		myrec^.arg2:=pARhsValue7737_ARV7737;
		myrec^.fn:=pAPlusDyadic7722_APD7722;
		 pADyadicValue7721_ADV7721:=myrec;
		END;
		(*! try to cast to type: int16 vector ( 4 )*)
	FUNCTION pACastRhs7712_ACR7712:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType7713_AAT7713;
		myrec^.arg2:=pADyadicValue7721_ADV7721;
		 pACastRhs7712_ACR7712:=myrec;
		END;
	FUNCTION pARhsValue7711_ARV7711:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7712_ACR7712;
		 pARhsValue7711_ARV7711:=myrec;
		END;
	FUNCTION pAAssign7698_AA7698:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue7711_ARV7711;
		myrec^.dest:=pARefcastRefval7699_ARR7699;
		 pAAssign7698_AA7698:=myrec;
		END;
	FUNCTION pAAssignMeaning7697_AAM7697:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign7698_AA7698;
		 pAAssignMeaning7697_AAM7697:=myrec;
		END;
	FUNCTION pAAssemblypattern7752_AA7752:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'paddw ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern7752_AA7752:=list;
		END;
	FUNCTION pAAssemblesto7751_AA7751:pprintlist;
	begin
		pAAssemblesto7751_AA7751:=pAAssemblypattern7752_AA7752;
		END;
	FUNCTION pASideeffects7757_AS7757:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7757_AS7757:=nil;
		 pASideeffects7757_AS7757:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7758_AUP7758:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7758_AUP7758:=nil;
		 pAUnconditionalPrecond7758_AUP7758:=myrec;
		END;
	FUNCTION PADDW_PADDW:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patim4reg_4;
		params^[1]:=patmrmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning7697_AAM7697;
		matchedAssembler:=pAAssemblesto7751_AA7751;
		END;
		PADDW_PADDW:=myrec;
	END;
	FUNCTION pATypeid7761_AT7761:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im8reg  ilcg.pattern@694a18}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7761_AT7761:=myrec;
		END;
	FUNCTION pATypeid7763_AT7763:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@2a7640}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7763_AT7763:=myrec;
		END;
	FUNCTION pAInt8Signed7773_AI8S7773:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed7773_AI8S7773:=myrec;
		END;
	FUNCTION pASignedTformat7772_AST7772:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed7773_AI8S7773;
		 pASignedTformat7772_AST7772:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7771_ATP7771:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype7771_ATP7771:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7770_APT7770:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7770_APT7770:=nil;
		 pAPredeclaredtypeTypeprim7770_APT7770:=myrec;
		END;
	FUNCTION pAOptionalsign7776_AO7776:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7776_AO7776:=nil;
		 pAOptionalsign7776_AO7776:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7775_AIN7775:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber7775_AIN7775:=myrec;
		END;
	FUNCTION pAArray7774_AA7774:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7774_AA7774:=nil;
		 pAArray7774_AA7774:=myrec;
		END;
	FUNCTION pAArrayType7769_AAT7769:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType7769_AAT7769:=myrec;
		END;
	FUNCTION pAReference7768_AR7768:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType7769_AAT7769;
		 pAReference7768_AR7768:=myrec;
		END;
	FUNCTION pAReftypeType7767_ART7767:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference7768_AR7768;
		 pAReftypeType7767_ART7767:=myrec;
		END;
	FUNCTION pAIdLoc7777_AIL7777:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc7777_AIL7777:=myrec;
		END;
	FUNCTION pARefcastRefval7766_ARR7766:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType7767_ART7767;
		myrec^.arg2:=pAIdLoc7777_AIL7777;
		 pARefcastRefval7766_ARR7766:=myrec;
		END;
	FUNCTION pAInt8Signed7784_AI8S7784:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed7784_AI8S7784:=myrec;
		END;
	FUNCTION pASignedTformat7783_AST7783:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed7784_AI8S7784;
		 pASignedTformat7783_AST7783:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7782_ATP7782:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype7782_ATP7782:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7781_APT7781:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7781_APT7781:=nil;
		 pAPredeclaredtypeTypeprim7781_APT7781:=myrec;
		END;
	FUNCTION pAOptionalsign7787_AO7787:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7787_AO7787:=nil;
		 pAOptionalsign7787_AO7787:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7786_AIN7786:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber7786_AIN7786:=myrec;
		END;
	FUNCTION pAArray7785_AA7785:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7785_AA7785:=nil;
		 pAArray7785_AA7785:=myrec;
		END;
	FUNCTION pAArrayType7780_AAT7780:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType7780_AAT7780:=myrec;
		END;
	FUNCTION pAPlusDyadic7789_APD7789:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic7789_APD7789:=myrec;
		END;
	FUNCTION pAInt8Signed7796_AI8S7796:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed7796_AI8S7796:=myrec;
		END;
	FUNCTION pASignedTformat7795_AST7795:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed7796_AI8S7796;
		 pASignedTformat7795_AST7795:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7794_ATP7794:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype7794_ATP7794:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7793_APT7793:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7793_APT7793:=nil;
		 pAPredeclaredtypeTypeprim7793_APT7793:=myrec;
		END;
	FUNCTION pAOptionalsign7799_AO7799:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7799_AO7799:=nil;
		 pAOptionalsign7799_AO7799:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7798_AIN7798:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber7798_AIN7798:=myrec;
		END;
	FUNCTION pAArray7797_AA7797:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7797_AA7797:=nil;
		 pAArray7797_AA7797:=myrec;
		END;
	FUNCTION pAArrayType7792_AAT7792:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType7792_AAT7792:=myrec;
		END;
	FUNCTION pAIdLoc7803_AIL7803:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc7803_AIL7803:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval7802_AR7802:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7803_AIL7803;
		 pARefval7802_AR7802:=myrec;
		END;
	FUNCTION pADerefRhs7801_ADR7801:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval7802_AR7802;
		 pADerefRhs7801_ADR7801:=myrec;
		END;
	FUNCTION pARhsValue7800_ARV7800:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs7801_ADR7801;
		 pARhsValue7800_ARV7800:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs7791_ACR7791:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType7792_AAT7792;
		myrec^.arg2:=pARhsValue7800_ARV7800;
		 pACastRhs7791_ACR7791:=myrec;
		END;
	FUNCTION pARhsValue7790_ARV7790:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7791_ACR7791;
		 pARhsValue7790_ARV7790:=myrec;
		END;
	FUNCTION pAInt8Signed7810_AI8S7810:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed7810_AI8S7810:=myrec;
		END;
	FUNCTION pASignedTformat7809_AST7809:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed7810_AI8S7810;
		 pASignedTformat7809_AST7809:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype7808_ATP7808:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype7808_ATP7808:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7807_APT7807:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7807_APT7807:=nil;
		 pAPredeclaredtypeTypeprim7807_APT7807:=myrec;
		END;
	FUNCTION pAOptionalsign7813_AO7813:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7813_AO7813:=nil;
		 pAOptionalsign7813_AO7813:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7812_AIN7812:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber7812_AIN7812:=myrec;
		END;
	FUNCTION pAArray7811_AA7811:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7811_AA7811:=nil;
		 pAArray7811_AA7811:=myrec;
		END;
	FUNCTION pAArrayType7806_AAT7806:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType7806_AAT7806:=myrec;
		END;
	FUNCTION pAIdLoc7817_AIL7817:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc7817_AIL7817:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval7816_AR7816:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7817_AIL7817;
		 pARefval7816_AR7816:=myrec;
		END;
	FUNCTION pADerefRhs7815_ADR7815:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval7816_AR7816;
		 pADerefRhs7815_ADR7815:=myrec;
		END;
	FUNCTION pARhsValue7814_ARV7814:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs7815_ADR7815;
		 pARhsValue7814_ARV7814:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs7805_ACR7805:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType7806_AAT7806;
		myrec^.arg2:=pARhsValue7814_ARV7814;
		 pACastRhs7805_ACR7805:=myrec;
		END;
	FUNCTION pARhsValue7804_ARV7804:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7805_ACR7805;
		 pARhsValue7804_ARV7804:=myrec;
		END;
	FUNCTION pADyadicValue7788_ADV7788:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue7790_ARV7790;
		myrec^.arg2:=pARhsValue7804_ARV7804;
		myrec^.fn:=pAPlusDyadic7789_APD7789;
		 pADyadicValue7788_ADV7788:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs7779_ACR7779:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType7780_AAT7780;
		myrec^.arg2:=pADyadicValue7788_ADV7788;
		 pACastRhs7779_ACR7779:=myrec;
		END;
	FUNCTION pARhsValue7778_ARV7778:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7779_ACR7779;
		 pARhsValue7778_ARV7778:=myrec;
		END;
	FUNCTION pAAssign7765_AA7765:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue7778_ARV7778;
		myrec^.dest:=pARefcastRefval7766_ARR7766;
		 pAAssign7765_AA7765:=myrec;
		END;
	FUNCTION pAAssignMeaning7764_AAM7764:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign7765_AA7765;
		 pAAssignMeaning7764_AAM7764:=myrec;
		END;
	FUNCTION pAAssemblypattern7819_AA7819:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'paddb ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern7819_AA7819:=list;
		END;
	FUNCTION pAAssemblesto7818_AA7818:pprintlist;
	begin
		pAAssemblesto7818_AA7818:=pAAssemblypattern7819_AA7819;
		END;
	FUNCTION pASideeffects7824_AS7824:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7824_AS7824:=nil;
		 pASideeffects7824_AS7824:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7825_AUP7825:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7825_AUP7825:=nil;
		 pAUnconditionalPrecond7825_AUP7825:=myrec;
		END;
	FUNCTION PADDB_PADDB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patim8reg_8;
		params^[1]:=patmrmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning7764_AAM7764;
		matchedAssembler:=pAAssemblesto7818_AA7818;
		END;
		PADDB_PADDB:=myrec;
	END;
	FUNCTION pATypeid7828_AT7828:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@27d316}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7828_AT7828:=myrec;
		END;
	FUNCTION pATypeid7830_AT7830:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@2a7640}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7830_AT7830:=myrec;
		END;
	FUNCTION pAOctetFormat7839_AOF7839:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat7839_AOF7839:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype7838_AFP7838:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype7838_AFP7838:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7837_APT7837:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7837_APT7837:=nil;
		 pAPredeclaredtypeTypeprim7837_APT7837:=myrec;
		END;
	FUNCTION pAOptionalsign7842_AO7842:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7842_AO7842:=nil;
		 pAOptionalsign7842_AO7842:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7841_AIN7841:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber7841_AIN7841:=myrec;
		END;
	FUNCTION pAArray7840_AA7840:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7840_AA7840:=nil;
		 pAArray7840_AA7840:=myrec;
		END;
	FUNCTION pAArrayType7836_AAT7836:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(foctet ,8 );
		 pAArrayType7836_AAT7836:=myrec;
		END;
	FUNCTION pAReference7835_AR7835:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType7836_AAT7836;
		 pAReference7835_AR7835:=myrec;
		END;
	FUNCTION pAReftypeType7834_ART7834:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference7835_AR7835;
		 pAReftypeType7834_ART7834:=myrec;
		END;
	FUNCTION pAIdLoc7843_AIL7843:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc7843_AIL7843:=myrec;
		END;
	FUNCTION pARefcastRefval7833_ARR7833:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType7834_ART7834;
		myrec^.arg2:=pAIdLoc7843_AIL7843;
		 pARefcastRefval7833_ARR7833:=myrec;
		END;
	FUNCTION pAOctetFormat7849_AOF7849:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat7849_AOF7849:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype7848_AFP7848:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype7848_AFP7848:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7847_APT7847:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7847_APT7847:=nil;
		 pAPredeclaredtypeTypeprim7847_APT7847:=myrec;
		END;
	FUNCTION pAOptionalsign7852_AO7852:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7852_AO7852:=nil;
		 pAOptionalsign7852_AO7852:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7851_AIN7851:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber7851_AIN7851:=myrec;
		END;
	FUNCTION pAArray7850_AA7850:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7850_AA7850:=nil;
		 pAArray7850_AA7850:=myrec;
		END;
	FUNCTION pAArrayType7846_AAT7846:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(foctet ,8 );
		 pAArrayType7846_AAT7846:=myrec;
		END;
	FUNCTION pAEqDyadic7854_AED7854:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpeq;
		 pAEqDyadic7854_AED7854:=myrec;
		END;
	FUNCTION pAOctetFormat7860_AOF7860:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat7860_AOF7860:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype7859_AFP7859:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype7859_AFP7859:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7858_APT7858:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7858_APT7858:=nil;
		 pAPredeclaredtypeTypeprim7858_APT7858:=myrec;
		END;
	FUNCTION pAOptionalsign7863_AO7863:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7863_AO7863:=nil;
		 pAOptionalsign7863_AO7863:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7862_AIN7862:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber7862_AIN7862:=myrec;
		END;
	FUNCTION pAArray7861_AA7861:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7861_AA7861:=nil;
		 pAArray7861_AA7861:=myrec;
		END;
	FUNCTION pAArrayType7857_AAT7857:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(foctet ,8 );
		 pAArrayType7857_AAT7857:=myrec;
		END;
	FUNCTION pAIdLoc7867_AIL7867:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc7867_AIL7867:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval7866_AR7866:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7867_AIL7867;
		 pARefval7866_AR7866:=myrec;
		END;
	FUNCTION pADerefRhs7865_ADR7865:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval7866_AR7866;
		 pADerefRhs7865_ADR7865:=myrec;
		END;
	FUNCTION pARhsValue7864_ARV7864:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs7865_ADR7865;
		 pARhsValue7864_ARV7864:=myrec;
		END;
		(*! try to cast to type: octet vector ( 8 )*)
	FUNCTION pACastRhs7856_ACR7856:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType7857_AAT7857;
		myrec^.arg2:=pARhsValue7864_ARV7864;
		 pACastRhs7856_ACR7856:=myrec;
		END;
	FUNCTION pARhsValue7855_ARV7855:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7856_ACR7856;
		 pARhsValue7855_ARV7855:=myrec;
		END;
	FUNCTION pAOctetFormat7873_AOF7873:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat7873_AOF7873:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype7872_AFP7872:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype7872_AFP7872:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7871_APT7871:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7871_APT7871:=nil;
		 pAPredeclaredtypeTypeprim7871_APT7871:=myrec;
		END;
	FUNCTION pAOptionalsign7876_AO7876:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7876_AO7876:=nil;
		 pAOptionalsign7876_AO7876:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7875_AIN7875:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber7875_AIN7875:=myrec;
		END;
	FUNCTION pAArray7874_AA7874:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7874_AA7874:=nil;
		 pAArray7874_AA7874:=myrec;
		END;
	FUNCTION pAArrayType7870_AAT7870:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(foctet ,8 );
		 pAArrayType7870_AAT7870:=myrec;
		END;
	FUNCTION pAIdLoc7880_AIL7880:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc7880_AIL7880:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval7879_AR7879:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7880_AIL7880;
		 pARefval7879_AR7879:=myrec;
		END;
	FUNCTION pADerefRhs7878_ADR7878:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval7879_AR7879;
		 pADerefRhs7878_ADR7878:=myrec;
		END;
	FUNCTION pARhsValue7877_ARV7877:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs7878_ADR7878;
		 pARhsValue7877_ARV7877:=myrec;
		END;
		(*! try to cast to type: octet vector ( 8 )*)
	FUNCTION pACastRhs7869_ACR7869:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType7870_AAT7870;
		myrec^.arg2:=pARhsValue7877_ARV7877;
		 pACastRhs7869_ACR7869:=myrec;
		END;
	FUNCTION pARhsValue7868_ARV7868:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7869_ACR7869;
		 pARhsValue7868_ARV7868:=myrec;
		END;
	FUNCTION pADyadicValue7853_ADV7853:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue7855_ARV7855;
		myrec^.arg2:=pARhsValue7868_ARV7868;
		myrec^.fn:=pAEqDyadic7854_AED7854;
		 pADyadicValue7853_ADV7853:=myrec;
		END;
		(*! try to cast to type: octet vector ( 8 )*)
	FUNCTION pACastRhs7845_ACR7845:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType7846_AAT7846;
		myrec^.arg2:=pADyadicValue7853_ADV7853;
		 pACastRhs7845_ACR7845:=myrec;
		END;
	FUNCTION pARhsValue7844_ARV7844:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7845_ACR7845;
		 pARhsValue7844_ARV7844:=myrec;
		END;
	FUNCTION pAAssign7832_AA7832:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue7844_ARV7844;
		myrec^.dest:=pARefcastRefval7833_ARR7833;
		 pAAssign7832_AA7832:=myrec;
		END;
	FUNCTION pAAssignMeaning7831_AAM7831:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign7832_AA7832;
		 pAAssignMeaning7831_AAM7831:=myrec;
		END;
	FUNCTION pAAssemblypattern7882_AA7882:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'pcmpeqb ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern7882_AA7882:=list;
		END;
	FUNCTION pAAssemblesto7881_AA7881:pprintlist;
	begin
		pAAssemblesto7881_AA7881:=pAAssemblypattern7882_AA7882;
		END;
	FUNCTION pASideeffects7887_AS7887:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7887_AS7887:=nil;
		 pASideeffects7887_AS7887:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7888_AUP7888:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7888_AUP7888:=nil;
		 pAUnconditionalPrecond7888_AUP7888:=myrec;
		END;
	FUNCTION CMPEQB_CMPEQB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		params^[1]:=patmrmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning7831_AAM7831;
		matchedAssembler:=pAAssemblesto7881_AA7881;
		END;
		CMPEQB_CMPEQB:=myrec;
	END;
	FUNCTION pATypeid7891_AT7891:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@27d316}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7891_AT7891:=myrec;
		END;
	FUNCTION pATypeid7893_AT7893:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@2a7640}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7893_AT7893:=myrec;
		END;
	FUNCTION pAOctetFormat7902_AOF7902:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat7902_AOF7902:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype7901_AFP7901:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype7901_AFP7901:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7900_APT7900:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7900_APT7900:=nil;
		 pAPredeclaredtypeTypeprim7900_APT7900:=myrec;
		END;
	FUNCTION pAOptionalsign7905_AO7905:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7905_AO7905:=nil;
		 pAOptionalsign7905_AO7905:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7904_AIN7904:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber7904_AIN7904:=myrec;
		END;
	FUNCTION pAArray7903_AA7903:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7903_AA7903:=nil;
		 pAArray7903_AA7903:=myrec;
		END;
	FUNCTION pAArrayType7899_AAT7899:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(foctet ,8 );
		 pAArrayType7899_AAT7899:=myrec;
		END;
	FUNCTION pAReference7898_AR7898:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType7899_AAT7899;
		 pAReference7898_AR7898:=myrec;
		END;
	FUNCTION pAReftypeType7897_ART7897:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference7898_AR7898;
		 pAReftypeType7897_ART7897:=myrec;
		END;
	FUNCTION pAIdLoc7906_AIL7906:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc7906_AIL7906:=myrec;
		END;
	FUNCTION pARefcastRefval7896_ARR7896:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType7897_ART7897;
		myrec^.arg2:=pAIdLoc7906_AIL7906;
		 pARefcastRefval7896_ARR7896:=myrec;
		END;
	FUNCTION pAOctetFormat7912_AOF7912:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat7912_AOF7912:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype7911_AFP7911:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype7911_AFP7911:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7910_APT7910:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7910_APT7910:=nil;
		 pAPredeclaredtypeTypeprim7910_APT7910:=myrec;
		END;
	FUNCTION pAOptionalsign7915_AO7915:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7915_AO7915:=nil;
		 pAOptionalsign7915_AO7915:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7914_AIN7914:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber7914_AIN7914:=myrec;
		END;
	FUNCTION pAArray7913_AA7913:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7913_AA7913:=nil;
		 pAArray7913_AA7913:=myrec;
		END;
	FUNCTION pAArrayType7909_AAT7909:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(foctet ,8 );
		 pAArrayType7909_AAT7909:=myrec;
		END;
	FUNCTION pAGtDyadic7917_AGD7917:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpgt;
		 pAGtDyadic7917_AGD7917:=myrec;
		END;
	FUNCTION pAOctetFormat7923_AOF7923:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat7923_AOF7923:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype7922_AFP7922:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype7922_AFP7922:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7921_APT7921:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7921_APT7921:=nil;
		 pAPredeclaredtypeTypeprim7921_APT7921:=myrec;
		END;
	FUNCTION pAOptionalsign7926_AO7926:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7926_AO7926:=nil;
		 pAOptionalsign7926_AO7926:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7925_AIN7925:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber7925_AIN7925:=myrec;
		END;
	FUNCTION pAArray7924_AA7924:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7924_AA7924:=nil;
		 pAArray7924_AA7924:=myrec;
		END;
	FUNCTION pAArrayType7920_AAT7920:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(foctet ,8 );
		 pAArrayType7920_AAT7920:=myrec;
		END;
	FUNCTION pAIdLoc7930_AIL7930:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc7930_AIL7930:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval7929_AR7929:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7930_AIL7930;
		 pARefval7929_AR7929:=myrec;
		END;
	FUNCTION pADerefRhs7928_ADR7928:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval7929_AR7929;
		 pADerefRhs7928_ADR7928:=myrec;
		END;
	FUNCTION pARhsValue7927_ARV7927:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs7928_ADR7928;
		 pARhsValue7927_ARV7927:=myrec;
		END;
		(*! try to cast to type: octet vector ( 8 )*)
	FUNCTION pACastRhs7919_ACR7919:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType7920_AAT7920;
		myrec^.arg2:=pARhsValue7927_ARV7927;
		 pACastRhs7919_ACR7919:=myrec;
		END;
	FUNCTION pARhsValue7918_ARV7918:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7919_ACR7919;
		 pARhsValue7918_ARV7918:=myrec;
		END;
	FUNCTION pAOctetFormat7936_AOF7936:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat7936_AOF7936:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype7935_AFP7935:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype7935_AFP7935:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7934_APT7934:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7934_APT7934:=nil;
		 pAPredeclaredtypeTypeprim7934_APT7934:=myrec;
		END;
	FUNCTION pAOptionalsign7939_AO7939:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7939_AO7939:=nil;
		 pAOptionalsign7939_AO7939:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7938_AIN7938:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber7938_AIN7938:=myrec;
		END;
	FUNCTION pAArray7937_AA7937:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7937_AA7937:=nil;
		 pAArray7937_AA7937:=myrec;
		END;
	FUNCTION pAArrayType7933_AAT7933:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(foctet ,8 );
		 pAArrayType7933_AAT7933:=myrec;
		END;
	FUNCTION pAIdLoc7943_AIL7943:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc7943_AIL7943:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval7942_AR7942:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7943_AIL7943;
		 pARefval7942_AR7942:=myrec;
		END;
	FUNCTION pADerefRhs7941_ADR7941:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval7942_AR7942;
		 pADerefRhs7941_ADR7941:=myrec;
		END;
	FUNCTION pARhsValue7940_ARV7940:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs7941_ADR7941;
		 pARhsValue7940_ARV7940:=myrec;
		END;
		(*! try to cast to type: octet vector ( 8 )*)
	FUNCTION pACastRhs7932_ACR7932:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType7933_AAT7933;
		myrec^.arg2:=pARhsValue7940_ARV7940;
		 pACastRhs7932_ACR7932:=myrec;
		END;
	FUNCTION pARhsValue7931_ARV7931:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7932_ACR7932;
		 pARhsValue7931_ARV7931:=myrec;
		END;
	FUNCTION pADyadicValue7916_ADV7916:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue7918_ARV7918;
		myrec^.arg2:=pARhsValue7931_ARV7931;
		myrec^.fn:=pAGtDyadic7917_AGD7917;
		 pADyadicValue7916_ADV7916:=myrec;
		END;
		(*! try to cast to type: octet vector ( 8 )*)
	FUNCTION pACastRhs7908_ACR7908:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType7909_AAT7909;
		myrec^.arg2:=pADyadicValue7916_ADV7916;
		 pACastRhs7908_ACR7908:=myrec;
		END;
	FUNCTION pARhsValue7907_ARV7907:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7908_ACR7908;
		 pARhsValue7907_ARV7907:=myrec;
		END;
	FUNCTION pAAssign7895_AA7895:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue7907_ARV7907;
		myrec^.dest:=pARefcastRefval7896_ARR7896;
		 pAAssign7895_AA7895:=myrec;
		END;
	FUNCTION pAAssignMeaning7894_AAM7894:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign7895_AA7895;
		 pAAssignMeaning7894_AAM7894:=myrec;
		END;
	FUNCTION pAAssemblypattern7945_AA7945:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'pcmpgtb ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern7945_AA7945:=list;
		END;
	FUNCTION pAAssemblesto7944_AA7944:pprintlist;
	begin
		pAAssemblesto7944_AA7944:=pAAssemblypattern7945_AA7945;
		END;
	FUNCTION pASideeffects7950_AS7950:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects7950_AS7950:=nil;
		 pASideeffects7950_AS7950:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond7951_AUP7951:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond7951_AUP7951:=nil;
		 pAUnconditionalPrecond7951_AUP7951:=myrec;
		END;
	FUNCTION CMPGTB_CMPGTB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		params^[1]:=patmrmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning7894_AAM7894;
		matchedAssembler:=pAAssemblesto7944_AA7944;
		END;
		CMPGTB_CMPGTB:=myrec;
	END;
	FUNCTION pATypeid7954_AT7954:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@27d316}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7954_AT7954:=myrec;
		END;
	FUNCTION pATypeid7956_AT7956:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@2a7640}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid7956_AT7956:=myrec;
		END;
	FUNCTION pAOctetFormat7965_AOF7965:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat7965_AOF7965:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype7964_AFP7964:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype7964_AFP7964:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7963_APT7963:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7963_APT7963:=nil;
		 pAPredeclaredtypeTypeprim7963_APT7963:=myrec;
		END;
	FUNCTION pAOptionalsign7968_AO7968:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7968_AO7968:=nil;
		 pAOptionalsign7968_AO7968:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7967_AIN7967:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber7967_AIN7967:=myrec;
		END;
	FUNCTION pAArray7966_AA7966:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7966_AA7966:=nil;
		 pAArray7966_AA7966:=myrec;
		END;
	FUNCTION pAArrayType7962_AAT7962:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(foctet ,8 );
		 pAArrayType7962_AAT7962:=myrec;
		END;
	FUNCTION pAReference7961_AR7961:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType7962_AAT7962;
		 pAReference7961_AR7961:=myrec;
		END;
	FUNCTION pAReftypeType7960_ART7960:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference7961_AR7961;
		 pAReftypeType7960_ART7960:=myrec;
		END;
	FUNCTION pAIdLoc7969_AIL7969:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc7969_AIL7969:=myrec;
		END;
	FUNCTION pARefcastRefval7959_ARR7959:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType7960_ART7960;
		myrec^.arg2:=pAIdLoc7969_AIL7969;
		 pARefcastRefval7959_ARR7959:=myrec;
		END;
	FUNCTION pAOctetFormat7975_AOF7975:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat7975_AOF7975:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype7974_AFP7974:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype7974_AFP7974:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7973_APT7973:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7973_APT7973:=nil;
		 pAPredeclaredtypeTypeprim7973_APT7973:=myrec;
		END;
	FUNCTION pAOptionalsign7978_AO7978:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7978_AO7978:=nil;
		 pAOptionalsign7978_AO7978:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7977_AIN7977:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber7977_AIN7977:=myrec;
		END;
	FUNCTION pAArray7976_AA7976:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7976_AA7976:=nil;
		 pAArray7976_AA7976:=myrec;
		END;
	FUNCTION pAArrayType7972_AAT7972:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(foctet ,8 );
		 pAArrayType7972_AAT7972:=myrec;
		END;
	FUNCTION pALtDyadic7980_ALD7980:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcplt;
		 pALtDyadic7980_ALD7980:=myrec;
		END;
	FUNCTION pAOctetFormat7986_AOF7986:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat7986_AOF7986:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype7985_AFP7985:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype7985_AFP7985:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7984_APT7984:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7984_APT7984:=nil;
		 pAPredeclaredtypeTypeprim7984_APT7984:=myrec;
		END;
	FUNCTION pAOptionalsign7989_AO7989:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign7989_AO7989:=nil;
		 pAOptionalsign7989_AO7989:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber7988_AIN7988:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber7988_AIN7988:=myrec;
		END;
	FUNCTION pAArray7987_AA7987:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray7987_AA7987:=nil;
		 pAArray7987_AA7987:=myrec;
		END;
	FUNCTION pAArrayType7983_AAT7983:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(foctet ,8 );
		 pAArrayType7983_AAT7983:=myrec;
		END;
	FUNCTION pAIdLoc7993_AIL7993:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc7993_AIL7993:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval7992_AR7992:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc7993_AIL7993;
		 pARefval7992_AR7992:=myrec;
		END;
	FUNCTION pADerefRhs7991_ADR7991:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval7992_AR7992;
		 pADerefRhs7991_ADR7991:=myrec;
		END;
	FUNCTION pARhsValue7990_ARV7990:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs7991_ADR7991;
		 pARhsValue7990_ARV7990:=myrec;
		END;
		(*! try to cast to type: octet vector ( 8 )*)
	FUNCTION pACastRhs7982_ACR7982:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType7983_AAT7983;
		myrec^.arg2:=pARhsValue7990_ARV7990;
		 pACastRhs7982_ACR7982:=myrec;
		END;
	FUNCTION pARhsValue7981_ARV7981:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7982_ACR7982;
		 pARhsValue7981_ARV7981:=myrec;
		END;
	FUNCTION pAOctetFormat7999_AOF7999:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet;
		 pAOctetFormat7999_AOF7999:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype7998_AFP7998:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=foctet ;
		 pAFormatPredeclaredtype7998_AFP7998:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim7997_APT7997:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim7997_APT7997:=nil;
		 pAPredeclaredtypeTypeprim7997_APT7997:=myrec;
		END;
	FUNCTION pAOptionalsign8002_AO8002:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8002_AO8002:=nil;
		 pAOptionalsign8002_AO8002:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8001_AIN8001:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8001_AIN8001:=myrec;
		END;
	FUNCTION pAArray8000_AA8000:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8000_AA8000:=nil;
		 pAArray8000_AA8000:=myrec;
		END;
	FUNCTION pAArrayType7996_AAT7996:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(foctet ,8 );
		 pAArrayType7996_AAT7996:=myrec;
		END;
	FUNCTION pAIdLoc8006_AIL8006:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8006_AIL8006:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8005_AR8005:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8006_AIL8006;
		 pARefval8005_AR8005:=myrec;
		END;
	FUNCTION pADerefRhs8004_ADR8004:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8005_AR8005;
		 pADerefRhs8004_ADR8004:=myrec;
		END;
	FUNCTION pARhsValue8003_ARV8003:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8004_ADR8004;
		 pARhsValue8003_ARV8003:=myrec;
		END;
		(*! try to cast to type: octet vector ( 8 )*)
	FUNCTION pACastRhs7995_ACR7995:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType7996_AAT7996;
		myrec^.arg2:=pARhsValue8003_ARV8003;
		 pACastRhs7995_ACR7995:=myrec;
		END;
	FUNCTION pARhsValue7994_ARV7994:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7995_ACR7995;
		 pARhsValue7994_ARV7994:=myrec;
		END;
	FUNCTION pADyadicValue7979_ADV7979:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue7981_ARV7981;
		myrec^.arg2:=pARhsValue7994_ARV7994;
		myrec^.fn:=pALtDyadic7980_ALD7980;
		 pADyadicValue7979_ADV7979:=myrec;
		END;
		(*! try to cast to type: octet vector ( 8 )*)
	FUNCTION pACastRhs7971_ACR7971:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType7972_AAT7972;
		myrec^.arg2:=pADyadicValue7979_ADV7979;
		 pACastRhs7971_ACR7971:=myrec;
		END;
	FUNCTION pARhsValue7970_ARV7970:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs7971_ACR7971;
		 pARhsValue7970_ARV7970:=myrec;
		END;
	FUNCTION pAAssign7958_AA7958:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue7970_ARV7970;
		myrec^.dest:=pARefcastRefval7959_ARR7959;
		 pAAssign7958_AA7958:=myrec;
		END;
	FUNCTION pAAssignMeaning7957_AAM7957:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign7958_AA7958;
		 pAAssignMeaning7957_AAM7957:=myrec;
		END;
	FUNCTION pAAssemblypattern8008_AA8008:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'pcmpgtb ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern8008_AA8008:=list;
		END;
	FUNCTION pAAssemblesto8007_AA8007:pprintlist;
	begin
		pAAssemblesto8007_AA8007:=pAAssemblypattern8008_AA8008;
		END;
	FUNCTION pASideeffects8013_AS8013:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects8013_AS8013:=nil;
		 pASideeffects8013_AS8013:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond8014_AUP8014:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond8014_AUP8014:=nil;
		 pAUnconditionalPrecond8014_AUP8014:=myrec;
		END;
	FUNCTION CMPGTBR_CMPGTBR:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		params^[1]:=patmrmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning7957_AAM7957;
		matchedAssembler:=pAAssemblesto8007_AA8007;
		END;
		CMPGTBR_CMPGTBR:=myrec;
	END;
	FUNCTION pATypeid8017_AT8017:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@27d316}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8017_AT8017:=myrec;
		END;
	FUNCTION pATypeid8019_AT8019:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@2a7640}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8019_AT8019:=myrec;
		END;
	FUNCTION pAUint8Unsigned8029_AU8U8029:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned8029_AU8U8029:=myrec;
		END;
	FUNCTION pAUnsignedTformat8028_AUT8028:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned8029_AU8U8029;
		 pAUnsignedTformat8028_AUT8028:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8027_ATP8027:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype8027_ATP8027:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8026_APT8026:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8026_APT8026:=nil;
		 pAPredeclaredtypeTypeprim8026_APT8026:=myrec;
		END;
	FUNCTION pAOptionalsign8032_AO8032:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8032_AO8032:=nil;
		 pAOptionalsign8032_AO8032:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8031_AIN8031:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8031_AIN8031:=myrec;
		END;
	FUNCTION pAArray8030_AA8030:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8030_AA8030:=nil;
		 pAArray8030_AA8030:=myrec;
		END;
	FUNCTION pAArrayType8025_AAT8025:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType8025_AAT8025:=myrec;
		END;
	FUNCTION pAReference8024_AR8024:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType8025_AAT8025;
		 pAReference8024_AR8024:=myrec;
		END;
	FUNCTION pAReftypeType8023_ART8023:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference8024_AR8024;
		 pAReftypeType8023_ART8023:=myrec;
		END;
	FUNCTION pAIdLoc8033_AIL8033:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8033_AIL8033:=myrec;
		END;
	FUNCTION pARefcastRefval8022_ARR8022:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType8023_ART8023;
		myrec^.arg2:=pAIdLoc8033_AIL8033;
		 pARefcastRefval8022_ARR8022:=myrec;
		END;
	FUNCTION pAUint8Unsigned8040_AU8U8040:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned8040_AU8U8040:=myrec;
		END;
	FUNCTION pAUnsignedTformat8039_AUT8039:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned8040_AU8U8040;
		 pAUnsignedTformat8039_AUT8039:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8038_ATP8038:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype8038_ATP8038:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8037_APT8037:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8037_APT8037:=nil;
		 pAPredeclaredtypeTypeprim8037_APT8037:=myrec;
		END;
	FUNCTION pAOptionalsign8043_AO8043:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8043_AO8043:=nil;
		 pAOptionalsign8043_AO8043:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8042_AIN8042:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8042_AIN8042:=myrec;
		END;
	FUNCTION pAArray8041_AA8041:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8041_AA8041:=nil;
		 pAArray8041_AA8041:=myrec;
		END;
	FUNCTION pAArrayType8036_AAT8036:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType8036_AAT8036:=myrec;
		END;
	FUNCTION pAPlusDyadic8045_APD8045:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic8045_APD8045:=myrec;
		END;
	FUNCTION pAUint8Unsigned8052_AU8U8052:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned8052_AU8U8052:=myrec;
		END;
	FUNCTION pAUnsignedTformat8051_AUT8051:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned8052_AU8U8052;
		 pAUnsignedTformat8051_AUT8051:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8050_ATP8050:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype8050_ATP8050:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8049_APT8049:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8049_APT8049:=nil;
		 pAPredeclaredtypeTypeprim8049_APT8049:=myrec;
		END;
	FUNCTION pAOptionalsign8055_AO8055:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8055_AO8055:=nil;
		 pAOptionalsign8055_AO8055:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8054_AIN8054:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8054_AIN8054:=myrec;
		END;
	FUNCTION pAArray8053_AA8053:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8053_AA8053:=nil;
		 pAArray8053_AA8053:=myrec;
		END;
	FUNCTION pAArrayType8048_AAT8048:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType8048_AAT8048:=myrec;
		END;
	FUNCTION pAIdLoc8059_AIL8059:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8059_AIL8059:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8058_AR8058:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8059_AIL8059;
		 pARefval8058_AR8058:=myrec;
		END;
	FUNCTION pADerefRhs8057_ADR8057:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8058_AR8058;
		 pADerefRhs8057_ADR8057:=myrec;
		END;
	FUNCTION pARhsValue8056_ARV8056:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8057_ADR8057;
		 pARhsValue8056_ARV8056:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs8047_ACR8047:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8048_AAT8048;
		myrec^.arg2:=pARhsValue8056_ARV8056;
		 pACastRhs8047_ACR8047:=myrec;
		END;
	FUNCTION pARhsValue8046_ARV8046:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8047_ACR8047;
		 pARhsValue8046_ARV8046:=myrec;
		END;
	FUNCTION pAUint8Unsigned8066_AU8U8066:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned8066_AU8U8066:=myrec;
		END;
	FUNCTION pAUnsignedTformat8065_AUT8065:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned8066_AU8U8066;
		 pAUnsignedTformat8065_AUT8065:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8064_ATP8064:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype8064_ATP8064:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8063_APT8063:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8063_APT8063:=nil;
		 pAPredeclaredtypeTypeprim8063_APT8063:=myrec;
		END;
	FUNCTION pAOptionalsign8069_AO8069:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8069_AO8069:=nil;
		 pAOptionalsign8069_AO8069:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8068_AIN8068:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8068_AIN8068:=myrec;
		END;
	FUNCTION pAArray8067_AA8067:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8067_AA8067:=nil;
		 pAArray8067_AA8067:=myrec;
		END;
	FUNCTION pAArrayType8062_AAT8062:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType8062_AAT8062:=myrec;
		END;
	FUNCTION pAIdLoc8073_AIL8073:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc8073_AIL8073:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8072_AR8072:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8073_AIL8073;
		 pARefval8072_AR8072:=myrec;
		END;
	FUNCTION pADerefRhs8071_ADR8071:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8072_AR8072;
		 pADerefRhs8071_ADR8071:=myrec;
		END;
	FUNCTION pARhsValue8070_ARV8070:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8071_ADR8071;
		 pARhsValue8070_ARV8070:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs8061_ACR8061:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8062_AAT8062;
		myrec^.arg2:=pARhsValue8070_ARV8070;
		 pACastRhs8061_ACR8061:=myrec;
		END;
	FUNCTION pARhsValue8060_ARV8060:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8061_ACR8061;
		 pARhsValue8060_ARV8060:=myrec;
		END;
	FUNCTION pADyadicValue8044_ADV8044:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue8046_ARV8046;
		myrec^.arg2:=pARhsValue8060_ARV8060;
		myrec^.fn:=pAPlusDyadic8045_APD8045;
		 pADyadicValue8044_ADV8044:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs8035_ACR8035:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8036_AAT8036;
		myrec^.arg2:=pADyadicValue8044_ADV8044;
		 pACastRhs8035_ACR8035:=myrec;
		END;
	FUNCTION pARhsValue8034_ARV8034:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8035_ACR8035;
		 pARhsValue8034_ARV8034:=myrec;
		END;
	FUNCTION pAAssign8021_AA8021:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue8034_ARV8034;
		myrec^.dest:=pARefcastRefval8022_ARR8022;
		 pAAssign8021_AA8021:=myrec;
		END;
	FUNCTION pAAssignMeaning8020_AAM8020:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign8021_AA8021;
		 pAAssignMeaning8020_AAM8020:=myrec;
		END;
	FUNCTION pAAssemblypattern8075_AA8075:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'paddb ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern8075_AA8075:=list;
		END;
	FUNCTION pAAssemblesto8074_AA8074:pprintlist;
	begin
		pAAssemblesto8074_AA8074:=pAAssemblypattern8075_AA8075;
		END;
	FUNCTION pASideeffects8080_AS8080:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects8080_AS8080:=nil;
		 pASideeffects8080_AS8080:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond8081_AUP8081:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond8081_AUP8081:=nil;
		 pAUnconditionalPrecond8081_AUP8081:=myrec;
		END;
	FUNCTION PADDUB_PADDUB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		params^[1]:=patmrmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning8020_AAM8020;
		matchedAssembler:=pAAssemblesto8074_AA8074;
		END;
		PADDUB_PADDUB:=myrec;
	END;
	FUNCTION pATypeid8084_AT8084:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im8reg  ilcg.pattern@694a18}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8084_AT8084:=myrec;
		END;
	FUNCTION pATypeid8086_AT8086:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@2a7640}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8086_AT8086:=myrec;
		END;
	FUNCTION pAIdLoc8090_AIL8090:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8090_AIL8090:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8089_AR8089:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8090_AIL8090;
		 pARefval8089_AR8089:=myrec;
		END;
	FUNCTION pAInt8Signed8097_AI8S8097:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed8097_AI8S8097:=myrec;
		END;
	FUNCTION pASignedTformat8096_AST8096:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed8097_AI8S8097;
		 pASignedTformat8096_AST8096:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8095_ATP8095:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype8095_ATP8095:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8094_APT8094:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8094_APT8094:=nil;
		 pAPredeclaredtypeTypeprim8094_APT8094:=myrec;
		END;
	FUNCTION pAOptionalsign8100_AO8100:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8100_AO8100:=nil;
		 pAOptionalsign8100_AO8100:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8099_AIN8099:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8099_AIN8099:=myrec;
		END;
	FUNCTION pAArray8098_AA8098:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8098_AA8098:=nil;
		 pAArray8098_AA8098:=myrec;
		END;
	FUNCTION pAArrayType8093_AAT8093:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType8093_AAT8093:=myrec;
		END;
	FUNCTION pASatplusDyadic8102_ASD8102:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpsatplus;
		 pASatplusDyadic8102_ASD8102:=myrec;
		END;
	FUNCTION pAIdLoc8106_AIL8106:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8106_AIL8106:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8105_AR8105:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8106_AIL8106;
		 pARefval8105_AR8105:=myrec;
		END;
	FUNCTION pADerefRhs8104_ADR8104:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8105_AR8105;
		 pADerefRhs8104_ADR8104:=myrec;
		END;
	FUNCTION pARhsValue8103_ARV8103:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8104_ADR8104;
		 pARhsValue8103_ARV8103:=myrec;
		END;
	FUNCTION pAInt8Signed8113_AI8S8113:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed8113_AI8S8113:=myrec;
		END;
	FUNCTION pASignedTformat8112_AST8112:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed8113_AI8S8113;
		 pASignedTformat8112_AST8112:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8111_ATP8111:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype8111_ATP8111:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8110_APT8110:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8110_APT8110:=nil;
		 pAPredeclaredtypeTypeprim8110_APT8110:=myrec;
		END;
	FUNCTION pAOptionalsign8116_AO8116:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8116_AO8116:=nil;
		 pAOptionalsign8116_AO8116:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8115_AIN8115:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8115_AIN8115:=myrec;
		END;
	FUNCTION pAArray8114_AA8114:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8114_AA8114:=nil;
		 pAArray8114_AA8114:=myrec;
		END;
	FUNCTION pAArrayType8109_AAT8109:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType8109_AAT8109:=myrec;
		END;
	FUNCTION pAIdLoc8120_AIL8120:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc8120_AIL8120:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8119_AR8119:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8120_AIL8120;
		 pARefval8119_AR8119:=myrec;
		END;
	FUNCTION pADerefRhs8118_ADR8118:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8119_AR8119;
		 pADerefRhs8118_ADR8118:=myrec;
		END;
	FUNCTION pARhsValue8117_ARV8117:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8118_ADR8118;
		 pARhsValue8117_ARV8117:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs8108_ACR8108:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8109_AAT8109;
		myrec^.arg2:=pARhsValue8117_ARV8117;
		 pACastRhs8108_ACR8108:=myrec;
		END;
	FUNCTION pARhsValue8107_ARV8107:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8108_ACR8108;
		 pARhsValue8107_ARV8107:=myrec;
		END;
	FUNCTION pADyadicValue8101_ADV8101:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue8103_ARV8103;
		myrec^.arg2:=pARhsValue8107_ARV8107;
		myrec^.fn:=pASatplusDyadic8102_ASD8102;
		 pADyadicValue8101_ADV8101:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs8092_ACR8092:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8093_AAT8093;
		myrec^.arg2:=pADyadicValue8101_ADV8101;
		 pACastRhs8092_ACR8092:=myrec;
		END;
	FUNCTION pARhsValue8091_ARV8091:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8092_ACR8092;
		 pARhsValue8091_ARV8091:=myrec;
		END;
	FUNCTION pAAssign8088_AA8088:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue8091_ARV8091;
		myrec^.dest:=pARefval8089_AR8089;
		 pAAssign8088_AA8088:=myrec;
		END;
	FUNCTION pAAssignMeaning8087_AAM8087:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign8088_AA8088;
		 pAAssignMeaning8087_AAM8087:=myrec;
		END;
	FUNCTION pAAssemblypattern8122_AA8122:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'paddsb ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern8122_AA8122:=list;
		END;
	FUNCTION pAAssemblesto8121_AA8121:pprintlist;
	begin
		pAAssemblesto8121_AA8121:=pAAssemblypattern8122_AA8122;
		END;
	FUNCTION pASideeffects8127_AS8127:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects8127_AS8127:=nil;
		 pASideeffects8127_AS8127:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond8128_AUP8128:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond8128_AUP8128:=nil;
		 pAUnconditionalPrecond8128_AUP8128:=myrec;
		END;
	FUNCTION PADDSB_PADDSB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patim8reg_8;
		params^[1]:=patmrmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning8087_AAM8087;
		matchedAssembler:=pAAssemblesto8121_AA8121;
		END;
		PADDSB_PADDSB:=myrec;
	END;
	FUNCTION pATypeid8131_AT8131:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im8reg  ilcg.pattern@694a18}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8131_AT8131:=myrec;
		END;
	FUNCTION pATypeid8133_AT8133:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im8reg  ilcg.pattern@694a18}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8133_AT8133:=myrec;
		END;
	FUNCTION pATypeid8135_AT8135:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@2a7640}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8135_AT8135:=myrec;
		END;
	FUNCTION pAIdLoc8139_AIL8139:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8139_AIL8139:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8138_AR8138:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8139_AIL8139;
		 pARefval8138_AR8138:=myrec;
		END;
	FUNCTION pAInt8Signed8146_AI8S8146:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed8146_AI8S8146:=myrec;
		END;
	FUNCTION pASignedTformat8145_AST8145:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed8146_AI8S8146;
		 pASignedTformat8145_AST8145:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8144_ATP8144:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype8144_ATP8144:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8143_APT8143:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8143_APT8143:=nil;
		 pAPredeclaredtypeTypeprim8143_APT8143:=myrec;
		END;
	FUNCTION pAOptionalsign8149_AO8149:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8149_AO8149:=nil;
		 pAOptionalsign8149_AO8149:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8148_AIN8148:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8148_AIN8148:=myrec;
		END;
	FUNCTION pAArray8147_AA8147:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8147_AA8147:=nil;
		 pAArray8147_AA8147:=myrec;
		END;
	FUNCTION pAArrayType8142_AAT8142:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType8142_AAT8142:=myrec;
		END;
	FUNCTION pASatplusDyadic8151_ASD8151:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpsatplus;
		 pASatplusDyadic8151_ASD8151:=myrec;
		END;
	FUNCTION pAIdLoc8155_AIL8155:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc8155_AIL8155:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8154_AR8154:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8155_AIL8155;
		 pARefval8154_AR8154:=myrec;
		END;
	FUNCTION pADerefRhs8153_ADR8153:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8154_AR8154;
		 pADerefRhs8153_ADR8153:=myrec;
		END;
	FUNCTION pARhsValue8152_ARV8152:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8153_ADR8153;
		 pARhsValue8152_ARV8152:=myrec;
		END;
	FUNCTION pAInt8Signed8162_AI8S8162:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed8162_AI8S8162:=myrec;
		END;
	FUNCTION pASignedTformat8161_AST8161:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed8162_AI8S8162;
		 pASignedTformat8161_AST8161:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8160_ATP8160:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype8160_ATP8160:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8159_APT8159:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8159_APT8159:=nil;
		 pAPredeclaredtypeTypeprim8159_APT8159:=myrec;
		END;
	FUNCTION pAOptionalsign8165_AO8165:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8165_AO8165:=nil;
		 pAOptionalsign8165_AO8165:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8164_AIN8164:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8164_AIN8164:=myrec;
		END;
	FUNCTION pAArray8163_AA8163:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8163_AA8163:=nil;
		 pAArray8163_AA8163:=myrec;
		END;
	FUNCTION pAArrayType8158_AAT8158:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType8158_AAT8158:=myrec;
		END;
	FUNCTION pAIdLoc8169_AIL8169:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(2);
		 pAIdLoc8169_AIL8169:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8168_AR8168:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8169_AIL8169;
		 pARefval8168_AR8168:=myrec;
		END;
	FUNCTION pADerefRhs8167_ADR8167:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8168_AR8168;
		 pADerefRhs8167_ADR8167:=myrec;
		END;
	FUNCTION pARhsValue8166_ARV8166:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8167_ADR8167;
		 pARhsValue8166_ARV8166:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs8157_ACR8157:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8158_AAT8158;
		myrec^.arg2:=pARhsValue8166_ARV8166;
		 pACastRhs8157_ACR8157:=myrec;
		END;
	FUNCTION pARhsValue8156_ARV8156:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8157_ACR8157;
		 pARhsValue8156_ARV8156:=myrec;
		END;
	FUNCTION pADyadicValue8150_ADV8150:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue8152_ARV8152;
		myrec^.arg2:=pARhsValue8156_ARV8156;
		myrec^.fn:=pASatplusDyadic8151_ASD8151;
		 pADyadicValue8150_ADV8150:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs8141_ACR8141:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8142_AAT8142;
		myrec^.arg2:=pADyadicValue8150_ADV8150;
		 pACastRhs8141_ACR8141:=myrec;
		END;
	FUNCTION pARhsValue8140_ARV8140:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8141_ACR8141;
		 pARhsValue8140_ARV8140:=myrec;
		END;
	FUNCTION pAAssign8137_AA8137:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue8140_ARV8140;
		myrec^.dest:=pARefval8138_AR8138;
		 pAAssign8137_AA8137:=myrec;
		END;
	FUNCTION pAAssignMeaning8136_AAM8136:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign8137_AA8137;
		 pAAssignMeaning8136_AAM8136:=myrec;
		END;
	FUNCTION pAAssemblypattern8171_AA8171:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movq ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pappends(list,'\n paddsb ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,2);
		pAAssemblypattern8171_AA8171:=list;
		END;
	FUNCTION pAAssemblesto8170_AA8170:pprintlist;
	begin
		pAAssemblesto8170_AA8170:=pAAssemblypattern8171_AA8171;
		END;
	FUNCTION pASideeffects8180_AS8180:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects8180_AS8180:=nil;
		 pASideeffects8180_AS8180:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond8181_AUP8181:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond8181_AUP8181:=nil;
		 pAUnconditionalPrecond8181_AUP8181:=myrec;
		END;
	FUNCTION PADDSB3_PADDSB3:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patim8reg_8;
		params^[1]:=patim8reg_8;
		params^[2]:=patmrmaddrmode_;
		paramcount:=4;
		meaning:=pAAssignMeaning8136_AAM8136;
		matchedAssembler:=pAAssemblesto8170_AA8170;
		END;
		PADDSB3_PADDSB3:=myrec;
	END;
	FUNCTION pATypeid8184_AT8184:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@27d316}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8184_AT8184:=myrec;
		END;
	FUNCTION pATypeid8186_AT8186:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@2a7640}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8186_AT8186:=myrec;
		END;
	FUNCTION pAUint8Unsigned8196_AU8U8196:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned8196_AU8U8196:=myrec;
		END;
	FUNCTION pAUnsignedTformat8195_AUT8195:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned8196_AU8U8196;
		 pAUnsignedTformat8195_AUT8195:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8194_ATP8194:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype8194_ATP8194:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8193_APT8193:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8193_APT8193:=nil;
		 pAPredeclaredtypeTypeprim8193_APT8193:=myrec;
		END;
	FUNCTION pAOptionalsign8199_AO8199:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8199_AO8199:=nil;
		 pAOptionalsign8199_AO8199:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8198_AIN8198:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8198_AIN8198:=myrec;
		END;
	FUNCTION pAArray8197_AA8197:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8197_AA8197:=nil;
		 pAArray8197_AA8197:=myrec;
		END;
	FUNCTION pAArrayType8192_AAT8192:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType8192_AAT8192:=myrec;
		END;
	FUNCTION pAReference8191_AR8191:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType8192_AAT8192;
		 pAReference8191_AR8191:=myrec;
		END;
	FUNCTION pAReftypeType8190_ART8190:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference8191_AR8191;
		 pAReftypeType8190_ART8190:=myrec;
		END;
	FUNCTION pAIdLoc8200_AIL8200:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8200_AIL8200:=myrec;
		END;
	FUNCTION pARefcastRefval8189_ARR8189:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType8190_ART8190;
		myrec^.arg2:=pAIdLoc8200_AIL8200;
		 pARefcastRefval8189_ARR8189:=myrec;
		END;
	FUNCTION pAUint8Unsigned8207_AU8U8207:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned8207_AU8U8207:=myrec;
		END;
	FUNCTION pAUnsignedTformat8206_AUT8206:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned8207_AU8U8207;
		 pAUnsignedTformat8206_AUT8206:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8205_ATP8205:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype8205_ATP8205:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8204_APT8204:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8204_APT8204:=nil;
		 pAPredeclaredtypeTypeprim8204_APT8204:=myrec;
		END;
	FUNCTION pAOptionalsign8210_AO8210:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8210_AO8210:=nil;
		 pAOptionalsign8210_AO8210:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8209_AIN8209:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8209_AIN8209:=myrec;
		END;
	FUNCTION pAArray8208_AA8208:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8208_AA8208:=nil;
		 pAArray8208_AA8208:=myrec;
		END;
	FUNCTION pAArrayType8203_AAT8203:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType8203_AAT8203:=myrec;
		END;
	FUNCTION pASatplusDyadic8212_ASD8212:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpsatplus;
		 pASatplusDyadic8212_ASD8212:=myrec;
		END;
	FUNCTION pAUint8Unsigned8219_AU8U8219:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned8219_AU8U8219:=myrec;
		END;
	FUNCTION pAUnsignedTformat8218_AUT8218:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned8219_AU8U8219;
		 pAUnsignedTformat8218_AUT8218:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8217_ATP8217:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype8217_ATP8217:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8216_APT8216:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8216_APT8216:=nil;
		 pAPredeclaredtypeTypeprim8216_APT8216:=myrec;
		END;
	FUNCTION pAOptionalsign8222_AO8222:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8222_AO8222:=nil;
		 pAOptionalsign8222_AO8222:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8221_AIN8221:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8221_AIN8221:=myrec;
		END;
	FUNCTION pAArray8220_AA8220:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8220_AA8220:=nil;
		 pAArray8220_AA8220:=myrec;
		END;
	FUNCTION pAArrayType8215_AAT8215:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType8215_AAT8215:=myrec;
		END;
	FUNCTION pAIdLoc8226_AIL8226:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8226_AIL8226:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8225_AR8225:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8226_AIL8226;
		 pARefval8225_AR8225:=myrec;
		END;
	FUNCTION pADerefRhs8224_ADR8224:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8225_AR8225;
		 pADerefRhs8224_ADR8224:=myrec;
		END;
	FUNCTION pARhsValue8223_ARV8223:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8224_ADR8224;
		 pARhsValue8223_ARV8223:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs8214_ACR8214:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8215_AAT8215;
		myrec^.arg2:=pARhsValue8223_ARV8223;
		 pACastRhs8214_ACR8214:=myrec;
		END;
	FUNCTION pARhsValue8213_ARV8213:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8214_ACR8214;
		 pARhsValue8213_ARV8213:=myrec;
		END;
	FUNCTION pAUint8Unsigned8233_AU8U8233:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned8233_AU8U8233:=myrec;
		END;
	FUNCTION pAUnsignedTformat8232_AUT8232:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned8233_AU8U8233;
		 pAUnsignedTformat8232_AUT8232:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8231_ATP8231:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype8231_ATP8231:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8230_APT8230:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8230_APT8230:=nil;
		 pAPredeclaredtypeTypeprim8230_APT8230:=myrec;
		END;
	FUNCTION pAOptionalsign8236_AO8236:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8236_AO8236:=nil;
		 pAOptionalsign8236_AO8236:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8235_AIN8235:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8235_AIN8235:=myrec;
		END;
	FUNCTION pAArray8234_AA8234:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8234_AA8234:=nil;
		 pAArray8234_AA8234:=myrec;
		END;
	FUNCTION pAArrayType8229_AAT8229:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType8229_AAT8229:=myrec;
		END;
	FUNCTION pAIdLoc8240_AIL8240:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc8240_AIL8240:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8239_AR8239:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8240_AIL8240;
		 pARefval8239_AR8239:=myrec;
		END;
	FUNCTION pADerefRhs8238_ADR8238:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8239_AR8239;
		 pADerefRhs8238_ADR8238:=myrec;
		END;
	FUNCTION pARhsValue8237_ARV8237:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8238_ADR8238;
		 pARhsValue8237_ARV8237:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs8228_ACR8228:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8229_AAT8229;
		myrec^.arg2:=pARhsValue8237_ARV8237;
		 pACastRhs8228_ACR8228:=myrec;
		END;
	FUNCTION pARhsValue8227_ARV8227:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8228_ACR8228;
		 pARhsValue8227_ARV8227:=myrec;
		END;
	FUNCTION pADyadicValue8211_ADV8211:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue8213_ARV8213;
		myrec^.arg2:=pARhsValue8227_ARV8227;
		myrec^.fn:=pASatplusDyadic8212_ASD8212;
		 pADyadicValue8211_ADV8211:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs8202_ACR8202:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8203_AAT8203;
		myrec^.arg2:=pADyadicValue8211_ADV8211;
		 pACastRhs8202_ACR8202:=myrec;
		END;
	FUNCTION pARhsValue8201_ARV8201:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8202_ACR8202;
		 pARhsValue8201_ARV8201:=myrec;
		END;
	FUNCTION pAAssign8188_AA8188:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue8201_ARV8201;
		myrec^.dest:=pARefcastRefval8189_ARR8189;
		 pAAssign8188_AA8188:=myrec;
		END;
	FUNCTION pAAssignMeaning8187_AAM8187:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign8188_AA8188;
		 pAAssignMeaning8187_AAM8187:=myrec;
		END;
	FUNCTION pAAssemblypattern8242_AA8242:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'paddusb ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern8242_AA8242:=list;
		END;
	FUNCTION pAAssemblesto8241_AA8241:pprintlist;
	begin
		pAAssemblesto8241_AA8241:=pAAssemblypattern8242_AA8242;
		END;
	FUNCTION pASideeffects8247_AS8247:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects8247_AS8247:=nil;
		 pASideeffects8247_AS8247:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond8248_AUP8248:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond8248_AUP8248:=nil;
		 pAUnconditionalPrecond8248_AUP8248:=myrec;
		END;
	FUNCTION PADDUSB_PADDUSB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		params^[1]:=patmrmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning8187_AAM8187;
		matchedAssembler:=pAAssemblesto8241_AA8241;
		END;
		PADDUSB_PADDUSB:=myrec;
	END;
	FUNCTION pATypeid8251_AT8251:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@27d316}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8251_AT8251:=myrec;
		END;
	FUNCTION pAUint8Unsigned8261_AU8U8261:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned8261_AU8U8261:=myrec;
		END;
	FUNCTION pAUnsignedTformat8260_AUT8260:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned8261_AU8U8261;
		 pAUnsignedTformat8260_AUT8260:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8259_ATP8259:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype8259_ATP8259:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8258_APT8258:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8258_APT8258:=nil;
		 pAPredeclaredtypeTypeprim8258_APT8258:=myrec;
		END;
	FUNCTION pAOptionalsign8264_AO8264:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8264_AO8264:=nil;
		 pAOptionalsign8264_AO8264:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8263_AIN8263:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8263_AIN8263:=myrec;
		END;
	FUNCTION pAArray8262_AA8262:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8262_AA8262:=nil;
		 pAArray8262_AA8262:=myrec;
		END;
	FUNCTION pAArrayType8257_AAT8257:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType8257_AAT8257:=myrec;
		END;
	FUNCTION pAReference8256_AR8256:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType8257_AAT8257;
		 pAReference8256_AR8256:=myrec;
		END;
	FUNCTION pAReftypeType8255_ART8255:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference8256_AR8256;
		 pAReftypeType8255_ART8255:=myrec;
		END;
	FUNCTION pAIdLoc8265_AIL8265:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8265_AIL8265:=myrec;
		END;
	FUNCTION pARefcastRefval8254_ARR8254:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType8255_ART8255;
		myrec^.arg2:=pAIdLoc8265_AIL8265;
		 pARefcastRefval8254_ARR8254:=myrec;
		END;
	FUNCTION pAUint8Unsigned8272_AU8U8272:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned8272_AU8U8272:=myrec;
		END;
	FUNCTION pAUnsignedTformat8271_AUT8271:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned8272_AU8U8272;
		 pAUnsignedTformat8271_AUT8271:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8270_ATP8270:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype8270_ATP8270:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8269_APT8269:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8269_APT8269:=nil;
		 pAPredeclaredtypeTypeprim8269_APT8269:=myrec;
		END;
	FUNCTION pAOptionalsign8275_AO8275:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8275_AO8275:=nil;
		 pAOptionalsign8275_AO8275:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8274_AIN8274:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8274_AIN8274:=myrec;
		END;
	FUNCTION pAArray8273_AA8273:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8273_AA8273:=nil;
		 pAArray8273_AA8273:=myrec;
		END;
	FUNCTION pAArrayType8268_AAT8268:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType8268_AAT8268:=myrec;
		END;
	FUNCTION pASatplusDyadic8277_ASD8277:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpsatplus;
		 pASatplusDyadic8277_ASD8277:=myrec;
		END;
	FUNCTION pAUint8Unsigned8284_AU8U8284:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned8284_AU8U8284:=myrec;
		END;
	FUNCTION pAUnsignedTformat8283_AUT8283:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned8284_AU8U8284;
		 pAUnsignedTformat8283_AUT8283:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8282_ATP8282:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype8282_ATP8282:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8281_APT8281:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8281_APT8281:=nil;
		 pAPredeclaredtypeTypeprim8281_APT8281:=myrec;
		END;
	FUNCTION pAOptionalsign8287_AO8287:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8287_AO8287:=nil;
		 pAOptionalsign8287_AO8287:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8286_AIN8286:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8286_AIN8286:=myrec;
		END;
	FUNCTION pAArray8285_AA8285:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8285_AA8285:=nil;
		 pAArray8285_AA8285:=myrec;
		END;
	FUNCTION pAArrayType8280_AAT8280:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType8280_AAT8280:=myrec;
		END;
	FUNCTION pAPopMonadic8289_APM8289:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic8289_APM8289:=myrec;
		END;
	FUNCTION pAIdLoc8291_AIL8291:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc8291_AIL8291:=myrec;
		END;
	FUNCTION pALocValue8290_ALV8290:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8291_AIL8291;
		 pALocValue8290_ALV8290:=myrec;
		END;
	FUNCTION pAMonadicValue8288_AMV8288:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue8290_ALV8290;
		myrec^.fn:=pAPopMonadic8289_APM8289;
		 pAMonadicValue8288_AMV8288:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs8279_ACR8279:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8280_AAT8280;
		myrec^.arg2:=pAMonadicValue8288_AMV8288;
		 pACastRhs8279_ACR8279:=myrec;
		END;
	FUNCTION pARhsValue8278_ARV8278:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8279_ACR8279;
		 pARhsValue8278_ARV8278:=myrec;
		END;
	FUNCTION pAUint8Unsigned8298_AU8U8298:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned8298_AU8U8298:=myrec;
		END;
	FUNCTION pAUnsignedTformat8297_AUT8297:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned8298_AU8U8298;
		 pAUnsignedTformat8297_AUT8297:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8296_ATP8296:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype8296_ATP8296:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8295_APT8295:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8295_APT8295:=nil;
		 pAPredeclaredtypeTypeprim8295_APT8295:=myrec;
		END;
	FUNCTION pAOptionalsign8301_AO8301:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8301_AO8301:=nil;
		 pAOptionalsign8301_AO8301:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8300_AIN8300:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8300_AIN8300:=myrec;
		END;
	FUNCTION pAArray8299_AA8299:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8299_AA8299:=nil;
		 pAArray8299_AA8299:=myrec;
		END;
	FUNCTION pAArrayType8294_AAT8294:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType8294_AAT8294:=myrec;
		END;
	FUNCTION pAPopMonadic8303_APM8303:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic8303_APM8303:=myrec;
		END;
	FUNCTION pAIdLoc8305_AIL8305:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc8305_AIL8305:=myrec;
		END;
	FUNCTION pALocValue8304_ALV8304:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8305_AIL8305;
		 pALocValue8304_ALV8304:=myrec;
		END;
	FUNCTION pAMonadicValue8302_AMV8302:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue8304_ALV8304;
		myrec^.fn:=pAPopMonadic8303_APM8303;
		 pAMonadicValue8302_AMV8302:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs8293_ACR8293:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8294_AAT8294;
		myrec^.arg2:=pAMonadicValue8302_AMV8302;
		 pACastRhs8293_ACR8293:=myrec;
		END;
	FUNCTION pARhsValue8292_ARV8292:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8293_ACR8293;
		 pARhsValue8292_ARV8292:=myrec;
		END;
	FUNCTION pADyadicValue8276_ADV8276:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue8278_ARV8278;
		myrec^.arg2:=pARhsValue8292_ARV8292;
		myrec^.fn:=pASatplusDyadic8277_ASD8277;
		 pADyadicValue8276_ADV8276:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs8267_ACR8267:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8268_AAT8268;
		myrec^.arg2:=pADyadicValue8276_ADV8276;
		 pACastRhs8267_ACR8267:=myrec;
		END;
	FUNCTION pARhsValue8266_ARV8266:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8267_ACR8267;
		 pARhsValue8266_ARV8266:=myrec;
		END;
	FUNCTION pAAssign8253_AA8253:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue8266_ARV8266;
		myrec^.dest:=pARefcastRefval8254_ARR8254;
		 pAAssign8253_AA8253:=myrec;
		END;
	FUNCTION pAAssignMeaning8252_AAM8252:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign8253_AA8253;
		 pAAssignMeaning8252_AAM8252:=myrec;
		END;
	FUNCTION pAAssemblypattern8307_AA8307:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movq ' );
		pappendp(list,0);
		pappends(list,',[esp]\n paddusb ' );
		pappendp(list,0);
		pappends(list,',[esp+8]\n add esp,16' );
		pAAssemblypattern8307_AA8307:=list;
		END;
	FUNCTION pAAssemblesto8306_AA8306:pprintlist;
	begin
		pAAssemblesto8306_AA8306:=pAAssemblypattern8307_AA8307;
		END;
	FUNCTION pASideeffects8313_AS8313:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects8313_AS8313:=nil;
		 pASideeffects8313_AS8313:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond8314_AUP8314:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond8314_AUP8314:=nil;
		 pAUnconditionalPrecond8314_AUP8314:=myrec;
		END;
	FUNCTION SPADDUSB_SPADDUSB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		paramcount:=2;
		meaning:=pAAssignMeaning8252_AAM8252;
		matchedAssembler:=pAAssemblesto8306_AA8306;
		END;
		SPADDUSB_SPADDUSB:=myrec;
	END;
	FUNCTION pATypeid8317_AT8317:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@27d316}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8317_AT8317:=myrec;
		END;
	FUNCTION pAUint8Unsigned8327_AU8U8327:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned8327_AU8U8327:=myrec;
		END;
	FUNCTION pAUnsignedTformat8326_AUT8326:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned8327_AU8U8327;
		 pAUnsignedTformat8326_AUT8326:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8325_ATP8325:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype8325_ATP8325:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8324_APT8324:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8324_APT8324:=nil;
		 pAPredeclaredtypeTypeprim8324_APT8324:=myrec;
		END;
	FUNCTION pAOptionalsign8330_AO8330:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8330_AO8330:=nil;
		 pAOptionalsign8330_AO8330:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8329_AIN8329:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8329_AIN8329:=myrec;
		END;
	FUNCTION pAArray8328_AA8328:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8328_AA8328:=nil;
		 pAArray8328_AA8328:=myrec;
		END;
	FUNCTION pAArrayType8323_AAT8323:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType8323_AAT8323:=myrec;
		END;
	FUNCTION pAReference8322_AR8322:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType8323_AAT8323;
		 pAReference8322_AR8322:=myrec;
		END;
	FUNCTION pAReftypeType8321_ART8321:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference8322_AR8322;
		 pAReftypeType8321_ART8321:=myrec;
		END;
	FUNCTION pAIdLoc8331_AIL8331:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8331_AIL8331:=myrec;
		END;
	FUNCTION pARefcastRefval8320_ARR8320:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType8321_ART8321;
		myrec^.arg2:=pAIdLoc8331_AIL8331;
		 pARefcastRefval8320_ARR8320:=myrec;
		END;
	FUNCTION pAUint8Unsigned8338_AU8U8338:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned8338_AU8U8338:=myrec;
		END;
	FUNCTION pAUnsignedTformat8337_AUT8337:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned8338_AU8U8338;
		 pAUnsignedTformat8337_AUT8337:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8336_ATP8336:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype8336_ATP8336:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8335_APT8335:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8335_APT8335:=nil;
		 pAPredeclaredtypeTypeprim8335_APT8335:=myrec;
		END;
	FUNCTION pAOptionalsign8341_AO8341:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8341_AO8341:=nil;
		 pAOptionalsign8341_AO8341:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8340_AIN8340:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8340_AIN8340:=myrec;
		END;
	FUNCTION pAArray8339_AA8339:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8339_AA8339:=nil;
		 pAArray8339_AA8339:=myrec;
		END;
	FUNCTION pAArrayType8334_AAT8334:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType8334_AAT8334:=myrec;
		END;
	FUNCTION pAPlusDyadic8343_APD8343:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpplus;
		 pAPlusDyadic8343_APD8343:=myrec;
		END;
	FUNCTION pAUint8Unsigned8350_AU8U8350:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned8350_AU8U8350:=myrec;
		END;
	FUNCTION pAUnsignedTformat8349_AUT8349:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned8350_AU8U8350;
		 pAUnsignedTformat8349_AUT8349:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8348_ATP8348:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype8348_ATP8348:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8347_APT8347:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8347_APT8347:=nil;
		 pAPredeclaredtypeTypeprim8347_APT8347:=myrec;
		END;
	FUNCTION pAOptionalsign8353_AO8353:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8353_AO8353:=nil;
		 pAOptionalsign8353_AO8353:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8352_AIN8352:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8352_AIN8352:=myrec;
		END;
	FUNCTION pAArray8351_AA8351:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8351_AA8351:=nil;
		 pAArray8351_AA8351:=myrec;
		END;
	FUNCTION pAArrayType8346_AAT8346:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType8346_AAT8346:=myrec;
		END;
	FUNCTION pAPopMonadic8355_APM8355:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic8355_APM8355:=myrec;
		END;
	FUNCTION pAIdLoc8357_AIL8357:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc8357_AIL8357:=myrec;
		END;
	FUNCTION pALocValue8356_ALV8356:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8357_AIL8357;
		 pALocValue8356_ALV8356:=myrec;
		END;
	FUNCTION pAMonadicValue8354_AMV8354:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue8356_ALV8356;
		myrec^.fn:=pAPopMonadic8355_APM8355;
		 pAMonadicValue8354_AMV8354:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs8345_ACR8345:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8346_AAT8346;
		myrec^.arg2:=pAMonadicValue8354_AMV8354;
		 pACastRhs8345_ACR8345:=myrec;
		END;
	FUNCTION pARhsValue8344_ARV8344:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8345_ACR8345;
		 pARhsValue8344_ARV8344:=myrec;
		END;
	FUNCTION pAUint8Unsigned8364_AU8U8364:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned8364_AU8U8364:=myrec;
		END;
	FUNCTION pAUnsignedTformat8363_AUT8363:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned8364_AU8U8364;
		 pAUnsignedTformat8363_AUT8363:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8362_ATP8362:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype8362_ATP8362:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8361_APT8361:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8361_APT8361:=nil;
		 pAPredeclaredtypeTypeprim8361_APT8361:=myrec;
		END;
	FUNCTION pAOptionalsign8367_AO8367:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8367_AO8367:=nil;
		 pAOptionalsign8367_AO8367:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8366_AIN8366:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8366_AIN8366:=myrec;
		END;
	FUNCTION pAArray8365_AA8365:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8365_AA8365:=nil;
		 pAArray8365_AA8365:=myrec;
		END;
	FUNCTION pAArrayType8360_AAT8360:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType8360_AAT8360:=myrec;
		END;
	FUNCTION pAPopMonadic8369_APM8369:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic8369_APM8369:=myrec;
		END;
	FUNCTION pAIdLoc8371_AIL8371:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc8371_AIL8371:=myrec;
		END;
	FUNCTION pALocValue8370_ALV8370:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8371_AIL8371;
		 pALocValue8370_ALV8370:=myrec;
		END;
	FUNCTION pAMonadicValue8368_AMV8368:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue8370_ALV8370;
		myrec^.fn:=pAPopMonadic8369_APM8369;
		 pAMonadicValue8368_AMV8368:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs8359_ACR8359:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8360_AAT8360;
		myrec^.arg2:=pAMonadicValue8368_AMV8368;
		 pACastRhs8359_ACR8359:=myrec;
		END;
	FUNCTION pARhsValue8358_ARV8358:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8359_ACR8359;
		 pARhsValue8358_ARV8358:=myrec;
		END;
	FUNCTION pADyadicValue8342_ADV8342:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue8344_ARV8344;
		myrec^.arg2:=pARhsValue8358_ARV8358;
		myrec^.fn:=pAPlusDyadic8343_APD8343;
		 pADyadicValue8342_ADV8342:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs8333_ACR8333:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8334_AAT8334;
		myrec^.arg2:=pADyadicValue8342_ADV8342;
		 pACastRhs8333_ACR8333:=myrec;
		END;
	FUNCTION pARhsValue8332_ARV8332:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8333_ACR8333;
		 pARhsValue8332_ARV8332:=myrec;
		END;
	FUNCTION pAAssign8319_AA8319:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue8332_ARV8332;
		myrec^.dest:=pARefcastRefval8320_ARR8320;
		 pAAssign8319_AA8319:=myrec;
		END;
	FUNCTION pAAssignMeaning8318_AAM8318:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign8319_AA8319;
		 pAAssignMeaning8318_AAM8318:=myrec;
		END;
	FUNCTION pAAssemblypattern8373_AA8373:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movq ' );
		pappendp(list,0);
		pappends(list,',[esp]\n paddb ' );
		pappendp(list,0);
		pappends(list,',[esp+8]\n add esp,16' );
		pAAssemblypattern8373_AA8373:=list;
		END;
	FUNCTION pAAssemblesto8372_AA8372:pprintlist;
	begin
		pAAssemblesto8372_AA8372:=pAAssemblypattern8373_AA8373;
		END;
	FUNCTION pASideeffects8379_AS8379:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects8379_AS8379:=nil;
		 pASideeffects8379_AS8379:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond8380_AUP8380:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond8380_AUP8380:=nil;
		 pAUnconditionalPrecond8380_AUP8380:=myrec;
		END;
	FUNCTION SPADDUB_SPADDUB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		paramcount:=2;
		meaning:=pAAssignMeaning8318_AAM8318;
		matchedAssembler:=pAAssemblesto8372_AA8372;
		END;
		SPADDUB_SPADDUB:=myrec;
	END;
	FUNCTION pATypeid8383_AT8383:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im8reg  ilcg.pattern@694a18}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8383_AT8383:=myrec;
		END;
	FUNCTION pAIdLoc8387_AIL8387:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8387_AIL8387:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8386_AR8386:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8387_AIL8387;
		 pARefval8386_AR8386:=myrec;
		END;
	FUNCTION pAInt8Signed8394_AI8S8394:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed8394_AI8S8394:=myrec;
		END;
	FUNCTION pASignedTformat8393_AST8393:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed8394_AI8S8394;
		 pASignedTformat8393_AST8393:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8392_ATP8392:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype8392_ATP8392:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8391_APT8391:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8391_APT8391:=nil;
		 pAPredeclaredtypeTypeprim8391_APT8391:=myrec;
		END;
	FUNCTION pAOptionalsign8397_AO8397:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8397_AO8397:=nil;
		 pAOptionalsign8397_AO8397:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8396_AIN8396:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8396_AIN8396:=myrec;
		END;
	FUNCTION pAArray8395_AA8395:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8395_AA8395:=nil;
		 pAArray8395_AA8395:=myrec;
		END;
	FUNCTION pAArrayType8390_AAT8390:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType8390_AAT8390:=myrec;
		END;
	FUNCTION pASatplusDyadic8399_ASD8399:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpsatplus;
		 pASatplusDyadic8399_ASD8399:=myrec;
		END;
	FUNCTION pAInt8Signed8406_AI8S8406:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed8406_AI8S8406:=myrec;
		END;
	FUNCTION pASignedTformat8405_AST8405:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed8406_AI8S8406;
		 pASignedTformat8405_AST8405:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8404_ATP8404:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype8404_ATP8404:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8403_APT8403:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8403_APT8403:=nil;
		 pAPredeclaredtypeTypeprim8403_APT8403:=myrec;
		END;
	FUNCTION pAOptionalsign8409_AO8409:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8409_AO8409:=nil;
		 pAOptionalsign8409_AO8409:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8408_AIN8408:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8408_AIN8408:=myrec;
		END;
	FUNCTION pAArray8407_AA8407:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8407_AA8407:=nil;
		 pAArray8407_AA8407:=myrec;
		END;
	FUNCTION pAArrayType8402_AAT8402:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType8402_AAT8402:=myrec;
		END;
	FUNCTION pAPopMonadic8411_APM8411:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic8411_APM8411:=myrec;
		END;
	FUNCTION pAIdLoc8413_AIL8413:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc8413_AIL8413:=myrec;
		END;
	FUNCTION pALocValue8412_ALV8412:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8413_AIL8413;
		 pALocValue8412_ALV8412:=myrec;
		END;
	FUNCTION pAMonadicValue8410_AMV8410:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue8412_ALV8412;
		myrec^.fn:=pAPopMonadic8411_APM8411;
		 pAMonadicValue8410_AMV8410:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs8401_ACR8401:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8402_AAT8402;
		myrec^.arg2:=pAMonadicValue8410_AMV8410;
		 pACastRhs8401_ACR8401:=myrec;
		END;
	FUNCTION pARhsValue8400_ARV8400:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8401_ACR8401;
		 pARhsValue8400_ARV8400:=myrec;
		END;
	FUNCTION pAInt8Signed8420_AI8S8420:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed8420_AI8S8420:=myrec;
		END;
	FUNCTION pASignedTformat8419_AST8419:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed8420_AI8S8420;
		 pASignedTformat8419_AST8419:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8418_ATP8418:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype8418_ATP8418:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8417_APT8417:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8417_APT8417:=nil;
		 pAPredeclaredtypeTypeprim8417_APT8417:=myrec;
		END;
	FUNCTION pAOptionalsign8423_AO8423:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8423_AO8423:=nil;
		 pAOptionalsign8423_AO8423:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8422_AIN8422:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8422_AIN8422:=myrec;
		END;
	FUNCTION pAArray8421_AA8421:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8421_AA8421:=nil;
		 pAArray8421_AA8421:=myrec;
		END;
	FUNCTION pAArrayType8416_AAT8416:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType8416_AAT8416:=myrec;
		END;
	FUNCTION pAPopMonadic8425_APM8425:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic8425_APM8425:=myrec;
		END;
	FUNCTION pAIdLoc8427_AIL8427:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc8427_AIL8427:=myrec;
		END;
	FUNCTION pALocValue8426_ALV8426:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8427_AIL8427;
		 pALocValue8426_ALV8426:=myrec;
		END;
	FUNCTION pAMonadicValue8424_AMV8424:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue8426_ALV8426;
		myrec^.fn:=pAPopMonadic8425_APM8425;
		 pAMonadicValue8424_AMV8424:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs8415_ACR8415:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8416_AAT8416;
		myrec^.arg2:=pAMonadicValue8424_AMV8424;
		 pACastRhs8415_ACR8415:=myrec;
		END;
	FUNCTION pARhsValue8414_ARV8414:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8415_ACR8415;
		 pARhsValue8414_ARV8414:=myrec;
		END;
	FUNCTION pADyadicValue8398_ADV8398:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue8400_ARV8400;
		myrec^.arg2:=pARhsValue8414_ARV8414;
		myrec^.fn:=pASatplusDyadic8399_ASD8399;
		 pADyadicValue8398_ADV8398:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs8389_ACR8389:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8390_AAT8390;
		myrec^.arg2:=pADyadicValue8398_ADV8398;
		 pACastRhs8389_ACR8389:=myrec;
		END;
	FUNCTION pARhsValue8388_ARV8388:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8389_ACR8389;
		 pARhsValue8388_ARV8388:=myrec;
		END;
	FUNCTION pAAssign8385_AA8385:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue8388_ARV8388;
		myrec^.dest:=pARefval8386_AR8386;
		 pAAssign8385_AA8385:=myrec;
		END;
	FUNCTION pAAssignMeaning8384_AAM8384:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign8385_AA8385;
		 pAAssignMeaning8384_AAM8384:=myrec;
		END;
	FUNCTION pAAssemblypattern8429_AA8429:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movq ' );
		pappendp(list,0);
		pappends(list,',[esp]\n paddsb ' );
		pappendp(list,0);
		pappends(list,',[esp+8]\n add esp,16' );
		pAAssemblypattern8429_AA8429:=list;
		END;
	FUNCTION pAAssemblesto8428_AA8428:pprintlist;
	begin
		pAAssemblesto8428_AA8428:=pAAssemblypattern8429_AA8429;
		END;
	FUNCTION pASideeffects8435_AS8435:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects8435_AS8435:=nil;
		 pASideeffects8435_AS8435:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond8436_AUP8436:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond8436_AUP8436:=nil;
		 pAUnconditionalPrecond8436_AUP8436:=myrec;
		END;
	FUNCTION SPADDSB_SPADDSB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patim8reg_8;
		paramcount:=2;
		meaning:=pAAssignMeaning8384_AAM8384;
		matchedAssembler:=pAAssemblesto8428_AA8428;
		END;
		SPADDSB_SPADDSB:=myrec;
	END;
	FUNCTION pATypeid8439_AT8439:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@27d316}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8439_AT8439:=myrec;
		END;
	FUNCTION pASigned8449_AS8449:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned8449_AS8449:=myrec;
		END;
	FUNCTION pASignedTformat8448_AST8448:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned8449_AS8449;
		 pASignedTformat8448_AST8448:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8447_ATP8447:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype8447_ATP8447:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8446_APT8446:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8446_APT8446:=nil;
		 pAPredeclaredtypeTypeprim8446_APT8446:=myrec;
		END;
	FUNCTION pAOptionalsign8452_AO8452:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8452_AO8452:=nil;
		 pAOptionalsign8452_AO8452:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8451_AIN8451:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber8451_AIN8451:=myrec;
		END;
	FUNCTION pAArray8450_AA8450:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8450_AA8450:=nil;
		 pAArray8450_AA8450:=myrec;
		END;
	FUNCTION pAArrayType8445_AAT8445:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,2 );
		 pAArrayType8445_AAT8445:=myrec;
		END;
	FUNCTION pAReference8444_AR8444:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType8445_AAT8445;
		 pAReference8444_AR8444:=myrec;
		END;
	FUNCTION pAReftypeType8443_ART8443:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference8444_AR8444;
		 pAReftypeType8443_ART8443:=myrec;
		END;
	FUNCTION pAIdLoc8453_AIL8453:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8453_AIL8453:=myrec;
		END;
	FUNCTION pARefcastRefval8442_ARR8442:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType8443_ART8443;
		myrec^.arg2:=pAIdLoc8453_AIL8453;
		 pARefcastRefval8442_ARR8442:=myrec;
		END;
	FUNCTION pASigned8460_AS8460:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned8460_AS8460:=myrec;
		END;
	FUNCTION pASignedTformat8459_AST8459:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned8460_AS8460;
		 pASignedTformat8459_AST8459:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8458_ATP8458:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype8458_ATP8458:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8457_APT8457:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8457_APT8457:=nil;
		 pAPredeclaredtypeTypeprim8457_APT8457:=myrec;
		END;
	FUNCTION pAOptionalsign8463_AO8463:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8463_AO8463:=nil;
		 pAOptionalsign8463_AO8463:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8462_AIN8462:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber8462_AIN8462:=myrec;
		END;
	FUNCTION pAArray8461_AA8461:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8461_AA8461:=nil;
		 pAArray8461_AA8461:=myrec;
		END;
	FUNCTION pAArrayType8456_AAT8456:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,2 );
		 pAArrayType8456_AAT8456:=myrec;
		END;
	FUNCTION pAMinusDyadic8465_AMD8465:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpminus;
		 pAMinusDyadic8465_AMD8465:=myrec;
		END;
	FUNCTION pASigned8472_AS8472:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned8472_AS8472:=myrec;
		END;
	FUNCTION pASignedTformat8471_AST8471:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned8472_AS8472;
		 pASignedTformat8471_AST8471:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8470_ATP8470:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype8470_ATP8470:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8469_APT8469:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8469_APT8469:=nil;
		 pAPredeclaredtypeTypeprim8469_APT8469:=myrec;
		END;
	FUNCTION pAOptionalsign8475_AO8475:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8475_AO8475:=nil;
		 pAOptionalsign8475_AO8475:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8474_AIN8474:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber8474_AIN8474:=myrec;
		END;
	FUNCTION pAArray8473_AA8473:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8473_AA8473:=nil;
		 pAArray8473_AA8473:=myrec;
		END;
	FUNCTION pAArrayType8468_AAT8468:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,2 );
		 pAArrayType8468_AAT8468:=myrec;
		END;
	FUNCTION pAIdLoc8479_AIL8479:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8479_AIL8479:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8478_AR8478:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8479_AIL8479;
		 pARefval8478_AR8478:=myrec;
		END;
	FUNCTION pADerefRhs8477_ADR8477:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8478_AR8478;
		 pADerefRhs8477_ADR8477:=myrec;
		END;
	FUNCTION pARhsValue8476_ARV8476:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8477_ADR8477;
		 pARhsValue8476_ARV8476:=myrec;
		END;
		(*! try to cast to type: int32 vector ( 2 )*)
	FUNCTION pACastRhs8467_ACR8467:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8468_AAT8468;
		myrec^.arg2:=pARhsValue8476_ARV8476;
		 pACastRhs8467_ACR8467:=myrec;
		END;
	FUNCTION pARhsValue8466_ARV8466:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8467_ACR8467;
		 pARhsValue8466_ARV8466:=myrec;
		END;
	FUNCTION pASigned8486_AS8486:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned8486_AS8486:=myrec;
		END;
	FUNCTION pASignedTformat8485_AST8485:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned8486_AS8486;
		 pASignedTformat8485_AST8485:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8484_ATP8484:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype8484_ATP8484:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8483_APT8483:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8483_APT8483:=nil;
		 pAPredeclaredtypeTypeprim8483_APT8483:=myrec;
		END;
	FUNCTION pAOptionalsign8489_AO8489:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8489_AO8489:=nil;
		 pAOptionalsign8489_AO8489:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8488_AIN8488:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber8488_AIN8488:=myrec;
		END;
	FUNCTION pAArray8487_AA8487:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8487_AA8487:=nil;
		 pAArray8487_AA8487:=myrec;
		END;
	FUNCTION pAArrayType8482_AAT8482:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,2 );
		 pAArrayType8482_AAT8482:=myrec;
		END;
	FUNCTION pAPopMonadic8491_APM8491:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpPOP;
		 pAPopMonadic8491_APM8491:=myrec;
		END;
	FUNCTION pAIdLoc8493_AIL8493:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=patterntag;
		myrec^.pat:=patmainSTACK_STACK;
		 pAIdLoc8493_AIL8493:=myrec;
		END;
	FUNCTION pALocValue8492_ALV8492:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8493_AIL8493;
		 pALocValue8492_ALV8492:=myrec;
		END;
	FUNCTION pAMonadicValue8490_AMV8490:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pALocValue8492_ALV8492;
		myrec^.fn:=pAPopMonadic8491_APM8491;
		 pAMonadicValue8490_AMV8490:=myrec;
		END;
		(*! try to cast to type: int32 vector ( 2 )*)
	FUNCTION pACastRhs8481_ACR8481:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8482_AAT8482;
		myrec^.arg2:=pAMonadicValue8490_AMV8490;
		 pACastRhs8481_ACR8481:=myrec;
		END;
	FUNCTION pARhsValue8480_ARV8480:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8481_ACR8481;
		 pARhsValue8480_ARV8480:=myrec;
		END;
	FUNCTION pADyadicValue8464_ADV8464:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue8466_ARV8466;
		myrec^.arg2:=pARhsValue8480_ARV8480;
		myrec^.fn:=pAMinusDyadic8465_AMD8465;
		 pADyadicValue8464_ADV8464:=myrec;
		END;
		(*! try to cast to type: int32 vector ( 2 )*)
	FUNCTION pACastRhs8455_ACR8455:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8456_AAT8456;
		myrec^.arg2:=pADyadicValue8464_ADV8464;
		 pACastRhs8455_ACR8455:=myrec;
		END;
	FUNCTION pARhsValue8454_ARV8454:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8455_ACR8455;
		 pARhsValue8454_ARV8454:=myrec;
		END;
	FUNCTION pAAssign8441_AA8441:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue8454_ARV8454;
		myrec^.dest:=pARefcastRefval8442_ARR8442;
		 pAAssign8441_AA8441:=myrec;
		END;
	FUNCTION pAAssignMeaning8440_AAM8440:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign8441_AA8441;
		 pAAssignMeaning8440_AAM8440:=myrec;
		END;
	FUNCTION pAAssemblypattern8495_AA8495:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'psubd ' );
		pappendp(list,0);
		pappends(list,',[esp]\n add esp,8' );
		pAAssemblypattern8495_AA8495:=list;
		END;
	FUNCTION pAAssemblesto8494_AA8494:pprintlist;
	begin
		pAAssemblesto8494_AA8494:=pAAssemblypattern8495_AA8495;
		END;
	FUNCTION pASideeffects8499_AS8499:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects8499_AS8499:=nil;
		 pASideeffects8499_AS8499:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond8500_AUP8500:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond8500_AUP8500:=nil;
		 pAUnconditionalPrecond8500_AUP8500:=myrec;
		END;
	FUNCTION SPSUBD_SPSUBD:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		paramcount:=2;
		meaning:=pAAssignMeaning8440_AAM8440;
		matchedAssembler:=pAAssemblesto8494_AA8494;
		END;
		SPSUBD_SPSUBD:=myrec;
	END;
	FUNCTION pATypeid8503_AT8503:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im4reg  ilcg.pattern@49982e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8503_AT8503:=myrec;
		END;
	FUNCTION pATypeid8505_AT8505:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@2a7640}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8505_AT8505:=myrec;
		END;
	FUNCTION pAInt16Signed8515_AI16S8515:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed8515_AI16S8515:=myrec;
		END;
	FUNCTION pASignedTformat8514_AST8514:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed8515_AI16S8515;
		 pASignedTformat8514_AST8514:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8513_ATP8513:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype8513_ATP8513:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8512_APT8512:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8512_APT8512:=nil;
		 pAPredeclaredtypeTypeprim8512_APT8512:=myrec;
		END;
	FUNCTION pAOptionalsign8518_AO8518:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8518_AO8518:=nil;
		 pAOptionalsign8518_AO8518:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8517_AIN8517:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber8517_AIN8517:=myrec;
		END;
	FUNCTION pAArray8516_AA8516:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8516_AA8516:=nil;
		 pAArray8516_AA8516:=myrec;
		END;
	FUNCTION pAArrayType8511_AAT8511:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType8511_AAT8511:=myrec;
		END;
	FUNCTION pAReference8510_AR8510:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType8511_AAT8511;
		 pAReference8510_AR8510:=myrec;
		END;
	FUNCTION pAReftypeType8509_ART8509:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference8510_AR8510;
		 pAReftypeType8509_ART8509:=myrec;
		END;
	FUNCTION pAIdLoc8519_AIL8519:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8519_AIL8519:=myrec;
		END;
	FUNCTION pARefcastRefval8508_ARR8508:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType8509_ART8509;
		myrec^.arg2:=pAIdLoc8519_AIL8519;
		 pARefcastRefval8508_ARR8508:=myrec;
		END;
	FUNCTION pAInt16Signed8526_AI16S8526:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed8526_AI16S8526:=myrec;
		END;
	FUNCTION pASignedTformat8525_AST8525:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed8526_AI16S8526;
		 pASignedTformat8525_AST8525:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8524_ATP8524:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype8524_ATP8524:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8523_APT8523:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8523_APT8523:=nil;
		 pAPredeclaredtypeTypeprim8523_APT8523:=myrec;
		END;
	FUNCTION pAOptionalsign8529_AO8529:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8529_AO8529:=nil;
		 pAOptionalsign8529_AO8529:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8528_AIN8528:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber8528_AIN8528:=myrec;
		END;
	FUNCTION pAArray8527_AA8527:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8527_AA8527:=nil;
		 pAArray8527_AA8527:=myrec;
		END;
	FUNCTION pAArrayType8522_AAT8522:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType8522_AAT8522:=myrec;
		END;
	FUNCTION pAMinusDyadic8531_AMD8531:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpminus;
		 pAMinusDyadic8531_AMD8531:=myrec;
		END;
	FUNCTION pAInt16Signed8538_AI16S8538:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed8538_AI16S8538:=myrec;
		END;
	FUNCTION pASignedTformat8537_AST8537:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed8538_AI16S8538;
		 pASignedTformat8537_AST8537:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8536_ATP8536:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype8536_ATP8536:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8535_APT8535:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8535_APT8535:=nil;
		 pAPredeclaredtypeTypeprim8535_APT8535:=myrec;
		END;
	FUNCTION pAOptionalsign8541_AO8541:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8541_AO8541:=nil;
		 pAOptionalsign8541_AO8541:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8540_AIN8540:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber8540_AIN8540:=myrec;
		END;
	FUNCTION pAArray8539_AA8539:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8539_AA8539:=nil;
		 pAArray8539_AA8539:=myrec;
		END;
	FUNCTION pAArrayType8534_AAT8534:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType8534_AAT8534:=myrec;
		END;
	FUNCTION pAIdLoc8545_AIL8545:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8545_AIL8545:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8544_AR8544:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8545_AIL8545;
		 pARefval8544_AR8544:=myrec;
		END;
	FUNCTION pADerefRhs8543_ADR8543:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8544_AR8544;
		 pADerefRhs8543_ADR8543:=myrec;
		END;
	FUNCTION pARhsValue8542_ARV8542:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8543_ADR8543;
		 pARhsValue8542_ARV8542:=myrec;
		END;
		(*! try to cast to type: int16 vector ( 4 )*)
	FUNCTION pACastRhs8533_ACR8533:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8534_AAT8534;
		myrec^.arg2:=pARhsValue8542_ARV8542;
		 pACastRhs8533_ACR8533:=myrec;
		END;
	FUNCTION pARhsValue8532_ARV8532:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8533_ACR8533;
		 pARhsValue8532_ARV8532:=myrec;
		END;
	FUNCTION pAInt16Signed8552_AI16S8552:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed8552_AI16S8552:=myrec;
		END;
	FUNCTION pASignedTformat8551_AST8551:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed8552_AI16S8552;
		 pASignedTformat8551_AST8551:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8550_ATP8550:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype8550_ATP8550:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8549_APT8549:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8549_APT8549:=nil;
		 pAPredeclaredtypeTypeprim8549_APT8549:=myrec;
		END;
	FUNCTION pAOptionalsign8555_AO8555:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8555_AO8555:=nil;
		 pAOptionalsign8555_AO8555:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8554_AIN8554:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber8554_AIN8554:=myrec;
		END;
	FUNCTION pAArray8553_AA8553:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8553_AA8553:=nil;
		 pAArray8553_AA8553:=myrec;
		END;
	FUNCTION pAArrayType8548_AAT8548:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType8548_AAT8548:=myrec;
		END;
	FUNCTION pAIdLoc8559_AIL8559:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc8559_AIL8559:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8558_AR8558:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8559_AIL8559;
		 pARefval8558_AR8558:=myrec;
		END;
	FUNCTION pADerefRhs8557_ADR8557:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8558_AR8558;
		 pADerefRhs8557_ADR8557:=myrec;
		END;
	FUNCTION pARhsValue8556_ARV8556:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8557_ADR8557;
		 pARhsValue8556_ARV8556:=myrec;
		END;
		(*! try to cast to type: int16 vector ( 4 )*)
	FUNCTION pACastRhs8547_ACR8547:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8548_AAT8548;
		myrec^.arg2:=pARhsValue8556_ARV8556;
		 pACastRhs8547_ACR8547:=myrec;
		END;
	FUNCTION pARhsValue8546_ARV8546:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8547_ACR8547;
		 pARhsValue8546_ARV8546:=myrec;
		END;
	FUNCTION pADyadicValue8530_ADV8530:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue8532_ARV8532;
		myrec^.arg2:=pARhsValue8546_ARV8546;
		myrec^.fn:=pAMinusDyadic8531_AMD8531;
		 pADyadicValue8530_ADV8530:=myrec;
		END;
		(*! try to cast to type: int16 vector ( 4 )*)
	FUNCTION pACastRhs8521_ACR8521:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8522_AAT8522;
		myrec^.arg2:=pADyadicValue8530_ADV8530;
		 pACastRhs8521_ACR8521:=myrec;
		END;
	FUNCTION pARhsValue8520_ARV8520:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8521_ACR8521;
		 pARhsValue8520_ARV8520:=myrec;
		END;
	FUNCTION pAAssign8507_AA8507:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue8520_ARV8520;
		myrec^.dest:=pARefcastRefval8508_ARR8508;
		 pAAssign8507_AA8507:=myrec;
		END;
	FUNCTION pAAssignMeaning8506_AAM8506:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign8507_AA8507;
		 pAAssignMeaning8506_AAM8506:=myrec;
		END;
	FUNCTION pAAssemblypattern8561_AA8561:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'psubw ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern8561_AA8561:=list;
		END;
	FUNCTION pAAssemblesto8560_AA8560:pprintlist;
	begin
		pAAssemblesto8560_AA8560:=pAAssemblypattern8561_AA8561;
		END;
	FUNCTION pASideeffects8566_AS8566:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects8566_AS8566:=nil;
		 pASideeffects8566_AS8566:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond8567_AUP8567:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond8567_AUP8567:=nil;
		 pAUnconditionalPrecond8567_AUP8567:=myrec;
		END;
	FUNCTION PSUBW_PSUBW:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patim4reg_4;
		params^[1]:=patmrmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning8506_AAM8506;
		matchedAssembler:=pAAssemblesto8560_AA8560;
		END;
		PSUBW_PSUBW:=myrec;
	END;
	FUNCTION pATypeid8570_AT8570:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im8reg  ilcg.pattern@694a18}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8570_AT8570:=myrec;
		END;
	FUNCTION pATypeid8572_AT8572:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@2a7640}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8572_AT8572:=myrec;
		END;
	FUNCTION pAInt8Signed8582_AI8S8582:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed8582_AI8S8582:=myrec;
		END;
	FUNCTION pASignedTformat8581_AST8581:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed8582_AI8S8582;
		 pASignedTformat8581_AST8581:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8580_ATP8580:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype8580_ATP8580:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8579_APT8579:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8579_APT8579:=nil;
		 pAPredeclaredtypeTypeprim8579_APT8579:=myrec;
		END;
	FUNCTION pAOptionalsign8585_AO8585:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8585_AO8585:=nil;
		 pAOptionalsign8585_AO8585:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8584_AIN8584:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8584_AIN8584:=myrec;
		END;
	FUNCTION pAArray8583_AA8583:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8583_AA8583:=nil;
		 pAArray8583_AA8583:=myrec;
		END;
	FUNCTION pAArrayType8578_AAT8578:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType8578_AAT8578:=myrec;
		END;
	FUNCTION pAReference8577_AR8577:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType8578_AAT8578;
		 pAReference8577_AR8577:=myrec;
		END;
	FUNCTION pAReftypeType8576_ART8576:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference8577_AR8577;
		 pAReftypeType8576_ART8576:=myrec;
		END;
	FUNCTION pAIdLoc8586_AIL8586:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8586_AIL8586:=myrec;
		END;
	FUNCTION pARefcastRefval8575_ARR8575:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType8576_ART8576;
		myrec^.arg2:=pAIdLoc8586_AIL8586;
		 pARefcastRefval8575_ARR8575:=myrec;
		END;
	FUNCTION pAInt8Signed8593_AI8S8593:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed8593_AI8S8593:=myrec;
		END;
	FUNCTION pASignedTformat8592_AST8592:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed8593_AI8S8593;
		 pASignedTformat8592_AST8592:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8591_ATP8591:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype8591_ATP8591:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8590_APT8590:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8590_APT8590:=nil;
		 pAPredeclaredtypeTypeprim8590_APT8590:=myrec;
		END;
	FUNCTION pAOptionalsign8596_AO8596:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8596_AO8596:=nil;
		 pAOptionalsign8596_AO8596:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8595_AIN8595:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8595_AIN8595:=myrec;
		END;
	FUNCTION pAArray8594_AA8594:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8594_AA8594:=nil;
		 pAArray8594_AA8594:=myrec;
		END;
	FUNCTION pAArrayType8589_AAT8589:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType8589_AAT8589:=myrec;
		END;
	FUNCTION pAMinusDyadic8598_AMD8598:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpminus;
		 pAMinusDyadic8598_AMD8598:=myrec;
		END;
	FUNCTION pAInt8Signed8605_AI8S8605:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed8605_AI8S8605:=myrec;
		END;
	FUNCTION pASignedTformat8604_AST8604:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed8605_AI8S8605;
		 pASignedTformat8604_AST8604:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8603_ATP8603:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype8603_ATP8603:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8602_APT8602:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8602_APT8602:=nil;
		 pAPredeclaredtypeTypeprim8602_APT8602:=myrec;
		END;
	FUNCTION pAOptionalsign8608_AO8608:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8608_AO8608:=nil;
		 pAOptionalsign8608_AO8608:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8607_AIN8607:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8607_AIN8607:=myrec;
		END;
	FUNCTION pAArray8606_AA8606:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8606_AA8606:=nil;
		 pAArray8606_AA8606:=myrec;
		END;
	FUNCTION pAArrayType8601_AAT8601:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType8601_AAT8601:=myrec;
		END;
	FUNCTION pAIdLoc8612_AIL8612:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8612_AIL8612:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8611_AR8611:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8612_AIL8612;
		 pARefval8611_AR8611:=myrec;
		END;
	FUNCTION pADerefRhs8610_ADR8610:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8611_AR8611;
		 pADerefRhs8610_ADR8610:=myrec;
		END;
	FUNCTION pARhsValue8609_ARV8609:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8610_ADR8610;
		 pARhsValue8609_ARV8609:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs8600_ACR8600:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8601_AAT8601;
		myrec^.arg2:=pARhsValue8609_ARV8609;
		 pACastRhs8600_ACR8600:=myrec;
		END;
	FUNCTION pARhsValue8599_ARV8599:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8600_ACR8600;
		 pARhsValue8599_ARV8599:=myrec;
		END;
	FUNCTION pAInt8Signed8619_AI8S8619:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed8619_AI8S8619:=myrec;
		END;
	FUNCTION pASignedTformat8618_AST8618:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed8619_AI8S8619;
		 pASignedTformat8618_AST8618:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8617_ATP8617:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype8617_ATP8617:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8616_APT8616:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8616_APT8616:=nil;
		 pAPredeclaredtypeTypeprim8616_APT8616:=myrec;
		END;
	FUNCTION pAOptionalsign8622_AO8622:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8622_AO8622:=nil;
		 pAOptionalsign8622_AO8622:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8621_AIN8621:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8621_AIN8621:=myrec;
		END;
	FUNCTION pAArray8620_AA8620:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8620_AA8620:=nil;
		 pAArray8620_AA8620:=myrec;
		END;
	FUNCTION pAArrayType8615_AAT8615:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType8615_AAT8615:=myrec;
		END;
	FUNCTION pAIdLoc8626_AIL8626:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc8626_AIL8626:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8625_AR8625:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8626_AIL8626;
		 pARefval8625_AR8625:=myrec;
		END;
	FUNCTION pADerefRhs8624_ADR8624:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8625_AR8625;
		 pADerefRhs8624_ADR8624:=myrec;
		END;
	FUNCTION pARhsValue8623_ARV8623:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8624_ADR8624;
		 pARhsValue8623_ARV8623:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs8614_ACR8614:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8615_AAT8615;
		myrec^.arg2:=pARhsValue8623_ARV8623;
		 pACastRhs8614_ACR8614:=myrec;
		END;
	FUNCTION pARhsValue8613_ARV8613:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8614_ACR8614;
		 pARhsValue8613_ARV8613:=myrec;
		END;
	FUNCTION pADyadicValue8597_ADV8597:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue8599_ARV8599;
		myrec^.arg2:=pARhsValue8613_ARV8613;
		myrec^.fn:=pAMinusDyadic8598_AMD8598;
		 pADyadicValue8597_ADV8597:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs8588_ACR8588:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8589_AAT8589;
		myrec^.arg2:=pADyadicValue8597_ADV8597;
		 pACastRhs8588_ACR8588:=myrec;
		END;
	FUNCTION pARhsValue8587_ARV8587:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8588_ACR8588;
		 pARhsValue8587_ARV8587:=myrec;
		END;
	FUNCTION pAAssign8574_AA8574:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue8587_ARV8587;
		myrec^.dest:=pARefcastRefval8575_ARR8575;
		 pAAssign8574_AA8574:=myrec;
		END;
	FUNCTION pAAssignMeaning8573_AAM8573:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign8574_AA8574;
		 pAAssignMeaning8573_AAM8573:=myrec;
		END;
	FUNCTION pAAssemblypattern8628_AA8628:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'psubb ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern8628_AA8628:=list;
		END;
	FUNCTION pAAssemblesto8627_AA8627:pprintlist;
	begin
		pAAssemblesto8627_AA8627:=pAAssemblypattern8628_AA8628;
		END;
	FUNCTION pASideeffects8633_AS8633:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects8633_AS8633:=nil;
		 pASideeffects8633_AS8633:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond8634_AUP8634:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond8634_AUP8634:=nil;
		 pAUnconditionalPrecond8634_AUP8634:=myrec;
		END;
	FUNCTION PSUBB_PSUBB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patim8reg_8;
		params^[1]:=patmrmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning8573_AAM8573;
		matchedAssembler:=pAAssemblesto8627_AA8627;
		END;
		PSUBB_PSUBB:=myrec;
	END;
	FUNCTION pATypeid8637_AT8637:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@27d316}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8637_AT8637:=myrec;
		END;
	FUNCTION pATypeid8639_AT8639:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@2a7640}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8639_AT8639:=myrec;
		END;
	FUNCTION pAUint8Unsigned8649_AU8U8649:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned8649_AU8U8649:=myrec;
		END;
	FUNCTION pAUnsignedTformat8648_AUT8648:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned8649_AU8U8649;
		 pAUnsignedTformat8648_AUT8648:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8647_ATP8647:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype8647_ATP8647:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8646_APT8646:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8646_APT8646:=nil;
		 pAPredeclaredtypeTypeprim8646_APT8646:=myrec;
		END;
	FUNCTION pAOptionalsign8652_AO8652:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8652_AO8652:=nil;
		 pAOptionalsign8652_AO8652:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8651_AIN8651:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8651_AIN8651:=myrec;
		END;
	FUNCTION pAArray8650_AA8650:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8650_AA8650:=nil;
		 pAArray8650_AA8650:=myrec;
		END;
	FUNCTION pAArrayType8645_AAT8645:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType8645_AAT8645:=myrec;
		END;
	FUNCTION pAReference8644_AR8644:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType8645_AAT8645;
		 pAReference8644_AR8644:=myrec;
		END;
	FUNCTION pAReftypeType8643_ART8643:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference8644_AR8644;
		 pAReftypeType8643_ART8643:=myrec;
		END;
	FUNCTION pAIdLoc8653_AIL8653:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8653_AIL8653:=myrec;
		END;
	FUNCTION pARefcastRefval8642_ARR8642:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType8643_ART8643;
		myrec^.arg2:=pAIdLoc8653_AIL8653;
		 pARefcastRefval8642_ARR8642:=myrec;
		END;
	FUNCTION pAUint8Unsigned8660_AU8U8660:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned8660_AU8U8660:=myrec;
		END;
	FUNCTION pAUnsignedTformat8659_AUT8659:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned8660_AU8U8660;
		 pAUnsignedTformat8659_AUT8659:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8658_ATP8658:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype8658_ATP8658:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8657_APT8657:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8657_APT8657:=nil;
		 pAPredeclaredtypeTypeprim8657_APT8657:=myrec;
		END;
	FUNCTION pAOptionalsign8663_AO8663:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8663_AO8663:=nil;
		 pAOptionalsign8663_AO8663:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8662_AIN8662:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8662_AIN8662:=myrec;
		END;
	FUNCTION pAArray8661_AA8661:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8661_AA8661:=nil;
		 pAArray8661_AA8661:=myrec;
		END;
	FUNCTION pAArrayType8656_AAT8656:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType8656_AAT8656:=myrec;
		END;
	FUNCTION pAMinusDyadic8665_AMD8665:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpminus;
		 pAMinusDyadic8665_AMD8665:=myrec;
		END;
	FUNCTION pAUint8Unsigned8672_AU8U8672:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned8672_AU8U8672:=myrec;
		END;
	FUNCTION pAUnsignedTformat8671_AUT8671:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned8672_AU8U8672;
		 pAUnsignedTformat8671_AUT8671:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8670_ATP8670:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype8670_ATP8670:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8669_APT8669:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8669_APT8669:=nil;
		 pAPredeclaredtypeTypeprim8669_APT8669:=myrec;
		END;
	FUNCTION pAOptionalsign8675_AO8675:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8675_AO8675:=nil;
		 pAOptionalsign8675_AO8675:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8674_AIN8674:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8674_AIN8674:=myrec;
		END;
	FUNCTION pAArray8673_AA8673:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8673_AA8673:=nil;
		 pAArray8673_AA8673:=myrec;
		END;
	FUNCTION pAArrayType8668_AAT8668:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType8668_AAT8668:=myrec;
		END;
	FUNCTION pAIdLoc8679_AIL8679:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8679_AIL8679:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8678_AR8678:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8679_AIL8679;
		 pARefval8678_AR8678:=myrec;
		END;
	FUNCTION pADerefRhs8677_ADR8677:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8678_AR8678;
		 pADerefRhs8677_ADR8677:=myrec;
		END;
	FUNCTION pARhsValue8676_ARV8676:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8677_ADR8677;
		 pARhsValue8676_ARV8676:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs8667_ACR8667:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8668_AAT8668;
		myrec^.arg2:=pARhsValue8676_ARV8676;
		 pACastRhs8667_ACR8667:=myrec;
		END;
	FUNCTION pARhsValue8666_ARV8666:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8667_ACR8667;
		 pARhsValue8666_ARV8666:=myrec;
		END;
	FUNCTION pAUint8Unsigned8686_AU8U8686:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned8686_AU8U8686:=myrec;
		END;
	FUNCTION pAUnsignedTformat8685_AUT8685:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned8686_AU8U8686;
		 pAUnsignedTformat8685_AUT8685:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8684_ATP8684:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype8684_ATP8684:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8683_APT8683:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8683_APT8683:=nil;
		 pAPredeclaredtypeTypeprim8683_APT8683:=myrec;
		END;
	FUNCTION pAOptionalsign8689_AO8689:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8689_AO8689:=nil;
		 pAOptionalsign8689_AO8689:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8688_AIN8688:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8688_AIN8688:=myrec;
		END;
	FUNCTION pAArray8687_AA8687:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8687_AA8687:=nil;
		 pAArray8687_AA8687:=myrec;
		END;
	FUNCTION pAArrayType8682_AAT8682:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType8682_AAT8682:=myrec;
		END;
	FUNCTION pAIdLoc8693_AIL8693:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc8693_AIL8693:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8692_AR8692:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8693_AIL8693;
		 pARefval8692_AR8692:=myrec;
		END;
	FUNCTION pADerefRhs8691_ADR8691:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8692_AR8692;
		 pADerefRhs8691_ADR8691:=myrec;
		END;
	FUNCTION pARhsValue8690_ARV8690:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8691_ADR8691;
		 pARhsValue8690_ARV8690:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs8681_ACR8681:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8682_AAT8682;
		myrec^.arg2:=pARhsValue8690_ARV8690;
		 pACastRhs8681_ACR8681:=myrec;
		END;
	FUNCTION pARhsValue8680_ARV8680:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8681_ACR8681;
		 pARhsValue8680_ARV8680:=myrec;
		END;
	FUNCTION pADyadicValue8664_ADV8664:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue8666_ARV8666;
		myrec^.arg2:=pARhsValue8680_ARV8680;
		myrec^.fn:=pAMinusDyadic8665_AMD8665;
		 pADyadicValue8664_ADV8664:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs8655_ACR8655:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8656_AAT8656;
		myrec^.arg2:=pADyadicValue8664_ADV8664;
		 pACastRhs8655_ACR8655:=myrec;
		END;
	FUNCTION pARhsValue8654_ARV8654:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8655_ACR8655;
		 pARhsValue8654_ARV8654:=myrec;
		END;
	FUNCTION pAAssign8641_AA8641:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue8654_ARV8654;
		myrec^.dest:=pARefcastRefval8642_ARR8642;
		 pAAssign8641_AA8641:=myrec;
		END;
	FUNCTION pAAssignMeaning8640_AAM8640:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign8641_AA8641;
		 pAAssignMeaning8640_AAM8640:=myrec;
		END;
	FUNCTION pAAssemblypattern8695_AA8695:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'psubb ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern8695_AA8695:=list;
		END;
	FUNCTION pAAssemblesto8694_AA8694:pprintlist;
	begin
		pAAssemblesto8694_AA8694:=pAAssemblypattern8695_AA8695;
		END;
	FUNCTION pASideeffects8700_AS8700:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects8700_AS8700:=nil;
		 pASideeffects8700_AS8700:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond8701_AUP8701:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond8701_AUP8701:=nil;
		 pAUnconditionalPrecond8701_AUP8701:=myrec;
		END;
	FUNCTION PSUBUB_PSUBUB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		params^[1]:=patmrmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning8640_AAM8640;
		matchedAssembler:=pAAssemblesto8694_AA8694;
		END;
		PSUBUB_PSUBUB:=myrec;
	END;
	FUNCTION pATypeid8704_AT8704:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im8reg  ilcg.pattern@694a18}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8704_AT8704:=myrec;
		END;
	FUNCTION pATypeid8706_AT8706:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@2a7640}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8706_AT8706:=myrec;
		END;
	FUNCTION pAInt8Signed8716_AI8S8716:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed8716_AI8S8716:=myrec;
		END;
	FUNCTION pASignedTformat8715_AST8715:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed8716_AI8S8716;
		 pASignedTformat8715_AST8715:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8714_ATP8714:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype8714_ATP8714:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8713_APT8713:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8713_APT8713:=nil;
		 pAPredeclaredtypeTypeprim8713_APT8713:=myrec;
		END;
	FUNCTION pAOptionalsign8719_AO8719:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8719_AO8719:=nil;
		 pAOptionalsign8719_AO8719:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8718_AIN8718:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8718_AIN8718:=myrec;
		END;
	FUNCTION pAArray8717_AA8717:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8717_AA8717:=nil;
		 pAArray8717_AA8717:=myrec;
		END;
	FUNCTION pAArrayType8712_AAT8712:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType8712_AAT8712:=myrec;
		END;
	FUNCTION pAReference8711_AR8711:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType8712_AAT8712;
		 pAReference8711_AR8711:=myrec;
		END;
	FUNCTION pAReftypeType8710_ART8710:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference8711_AR8711;
		 pAReftypeType8710_ART8710:=myrec;
		END;
	FUNCTION pAIdLoc8720_AIL8720:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8720_AIL8720:=myrec;
		END;
	FUNCTION pARefcastRefval8709_ARR8709:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType8710_ART8710;
		myrec^.arg2:=pAIdLoc8720_AIL8720;
		 pARefcastRefval8709_ARR8709:=myrec;
		END;
	FUNCTION pAInt8Signed8727_AI8S8727:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed8727_AI8S8727:=myrec;
		END;
	FUNCTION pASignedTformat8726_AST8726:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed8727_AI8S8727;
		 pASignedTformat8726_AST8726:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8725_ATP8725:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype8725_ATP8725:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8724_APT8724:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8724_APT8724:=nil;
		 pAPredeclaredtypeTypeprim8724_APT8724:=myrec;
		END;
	FUNCTION pAOptionalsign8730_AO8730:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8730_AO8730:=nil;
		 pAOptionalsign8730_AO8730:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8729_AIN8729:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8729_AIN8729:=myrec;
		END;
	FUNCTION pAArray8728_AA8728:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8728_AA8728:=nil;
		 pAArray8728_AA8728:=myrec;
		END;
	FUNCTION pAArrayType8723_AAT8723:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType8723_AAT8723:=myrec;
		END;
	FUNCTION pASatminusDyadic8732_ASD8732:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpsatminus;
		 pASatminusDyadic8732_ASD8732:=myrec;
		END;
	FUNCTION pAInt8Signed8739_AI8S8739:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed8739_AI8S8739:=myrec;
		END;
	FUNCTION pASignedTformat8738_AST8738:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed8739_AI8S8739;
		 pASignedTformat8738_AST8738:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8737_ATP8737:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype8737_ATP8737:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8736_APT8736:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8736_APT8736:=nil;
		 pAPredeclaredtypeTypeprim8736_APT8736:=myrec;
		END;
	FUNCTION pAOptionalsign8742_AO8742:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8742_AO8742:=nil;
		 pAOptionalsign8742_AO8742:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8741_AIN8741:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8741_AIN8741:=myrec;
		END;
	FUNCTION pAArray8740_AA8740:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8740_AA8740:=nil;
		 pAArray8740_AA8740:=myrec;
		END;
	FUNCTION pAArrayType8735_AAT8735:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType8735_AAT8735:=myrec;
		END;
	FUNCTION pAIdLoc8746_AIL8746:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8746_AIL8746:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8745_AR8745:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8746_AIL8746;
		 pARefval8745_AR8745:=myrec;
		END;
	FUNCTION pADerefRhs8744_ADR8744:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8745_AR8745;
		 pADerefRhs8744_ADR8744:=myrec;
		END;
	FUNCTION pARhsValue8743_ARV8743:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8744_ADR8744;
		 pARhsValue8743_ARV8743:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs8734_ACR8734:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8735_AAT8735;
		myrec^.arg2:=pARhsValue8743_ARV8743;
		 pACastRhs8734_ACR8734:=myrec;
		END;
	FUNCTION pARhsValue8733_ARV8733:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8734_ACR8734;
		 pARhsValue8733_ARV8733:=myrec;
		END;
	FUNCTION pAInt8Signed8753_AI8S8753:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed8753_AI8S8753:=myrec;
		END;
	FUNCTION pASignedTformat8752_AST8752:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed8753_AI8S8753;
		 pASignedTformat8752_AST8752:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8751_ATP8751:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype8751_ATP8751:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8750_APT8750:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8750_APT8750:=nil;
		 pAPredeclaredtypeTypeprim8750_APT8750:=myrec;
		END;
	FUNCTION pAOptionalsign8756_AO8756:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8756_AO8756:=nil;
		 pAOptionalsign8756_AO8756:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8755_AIN8755:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8755_AIN8755:=myrec;
		END;
	FUNCTION pAArray8754_AA8754:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8754_AA8754:=nil;
		 pAArray8754_AA8754:=myrec;
		END;
	FUNCTION pAArrayType8749_AAT8749:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType8749_AAT8749:=myrec;
		END;
	FUNCTION pAIdLoc8760_AIL8760:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc8760_AIL8760:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8759_AR8759:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8760_AIL8760;
		 pARefval8759_AR8759:=myrec;
		END;
	FUNCTION pADerefRhs8758_ADR8758:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8759_AR8759;
		 pADerefRhs8758_ADR8758:=myrec;
		END;
	FUNCTION pARhsValue8757_ARV8757:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8758_ADR8758;
		 pARhsValue8757_ARV8757:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs8748_ACR8748:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8749_AAT8749;
		myrec^.arg2:=pARhsValue8757_ARV8757;
		 pACastRhs8748_ACR8748:=myrec;
		END;
	FUNCTION pARhsValue8747_ARV8747:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8748_ACR8748;
		 pARhsValue8747_ARV8747:=myrec;
		END;
	FUNCTION pADyadicValue8731_ADV8731:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue8733_ARV8733;
		myrec^.arg2:=pARhsValue8747_ARV8747;
		myrec^.fn:=pASatminusDyadic8732_ASD8732;
		 pADyadicValue8731_ADV8731:=myrec;
		END;
		(*! try to cast to type: int8 vector ( 8 )*)
	FUNCTION pACastRhs8722_ACR8722:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8723_AAT8723;
		myrec^.arg2:=pADyadicValue8731_ADV8731;
		 pACastRhs8722_ACR8722:=myrec;
		END;
	FUNCTION pARhsValue8721_ARV8721:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8722_ACR8722;
		 pARhsValue8721_ARV8721:=myrec;
		END;
	FUNCTION pAAssign8708_AA8708:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue8721_ARV8721;
		myrec^.dest:=pARefcastRefval8709_ARR8709;
		 pAAssign8708_AA8708:=myrec;
		END;
	FUNCTION pAAssignMeaning8707_AAM8707:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign8708_AA8708;
		 pAAssignMeaning8707_AAM8707:=myrec;
		END;
	FUNCTION pAAssemblypattern8762_AA8762:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'psubsb ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern8762_AA8762:=list;
		END;
	FUNCTION pAAssemblesto8761_AA8761:pprintlist;
	begin
		pAAssemblesto8761_AA8761:=pAAssemblypattern8762_AA8762;
		END;
	FUNCTION pASideeffects8767_AS8767:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects8767_AS8767:=nil;
		 pASideeffects8767_AS8767:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond8768_AUP8768:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond8768_AUP8768:=nil;
		 pAUnconditionalPrecond8768_AUP8768:=myrec;
		END;
	FUNCTION PSUBSB_PSUBSB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patim8reg_8;
		params^[1]:=patmrmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning8707_AAM8707;
		matchedAssembler:=pAAssemblesto8761_AA8761;
		END;
		PSUBSB_PSUBSB:=myrec;
	END;
	FUNCTION pATypeid8771_AT8771:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@27d316}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8771_AT8771:=myrec;
		END;
	FUNCTION pATypeid8773_AT8773:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@2a7640}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8773_AT8773:=myrec;
		END;
	FUNCTION pAUint8Unsigned8783_AU8U8783:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned8783_AU8U8783:=myrec;
		END;
	FUNCTION pAUnsignedTformat8782_AUT8782:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned8783_AU8U8783;
		 pAUnsignedTformat8782_AUT8782:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8781_ATP8781:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype8781_ATP8781:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8780_APT8780:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8780_APT8780:=nil;
		 pAPredeclaredtypeTypeprim8780_APT8780:=myrec;
		END;
	FUNCTION pAOptionalsign8786_AO8786:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8786_AO8786:=nil;
		 pAOptionalsign8786_AO8786:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8785_AIN8785:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8785_AIN8785:=myrec;
		END;
	FUNCTION pAArray8784_AA8784:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8784_AA8784:=nil;
		 pAArray8784_AA8784:=myrec;
		END;
	FUNCTION pAArrayType8779_AAT8779:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType8779_AAT8779:=myrec;
		END;
	FUNCTION pAReference8778_AR8778:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType8779_AAT8779;
		 pAReference8778_AR8778:=myrec;
		END;
	FUNCTION pAReftypeType8777_ART8777:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference8778_AR8778;
		 pAReftypeType8777_ART8777:=myrec;
		END;
	FUNCTION pAIdLoc8787_AIL8787:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8787_AIL8787:=myrec;
		END;
	FUNCTION pARefcastRefval8776_ARR8776:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType8777_ART8777;
		myrec^.arg2:=pAIdLoc8787_AIL8787;
		 pARefcastRefval8776_ARR8776:=myrec;
		END;
	FUNCTION pAUint8Unsigned8794_AU8U8794:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned8794_AU8U8794:=myrec;
		END;
	FUNCTION pAUnsignedTformat8793_AUT8793:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned8794_AU8U8794;
		 pAUnsignedTformat8793_AUT8793:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8792_ATP8792:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype8792_ATP8792:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8791_APT8791:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8791_APT8791:=nil;
		 pAPredeclaredtypeTypeprim8791_APT8791:=myrec;
		END;
	FUNCTION pAOptionalsign8797_AO8797:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8797_AO8797:=nil;
		 pAOptionalsign8797_AO8797:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8796_AIN8796:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8796_AIN8796:=myrec;
		END;
	FUNCTION pAArray8795_AA8795:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8795_AA8795:=nil;
		 pAArray8795_AA8795:=myrec;
		END;
	FUNCTION pAArrayType8790_AAT8790:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType8790_AAT8790:=myrec;
		END;
	FUNCTION pASatminusDyadic8799_ASD8799:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpsatminus;
		 pASatminusDyadic8799_ASD8799:=myrec;
		END;
	FUNCTION pAUint8Unsigned8806_AU8U8806:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned8806_AU8U8806:=myrec;
		END;
	FUNCTION pAUnsignedTformat8805_AUT8805:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned8806_AU8U8806;
		 pAUnsignedTformat8805_AUT8805:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8804_ATP8804:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype8804_ATP8804:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8803_APT8803:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8803_APT8803:=nil;
		 pAPredeclaredtypeTypeprim8803_APT8803:=myrec;
		END;
	FUNCTION pAOptionalsign8809_AO8809:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8809_AO8809:=nil;
		 pAOptionalsign8809_AO8809:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8808_AIN8808:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8808_AIN8808:=myrec;
		END;
	FUNCTION pAArray8807_AA8807:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8807_AA8807:=nil;
		 pAArray8807_AA8807:=myrec;
		END;
	FUNCTION pAArrayType8802_AAT8802:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType8802_AAT8802:=myrec;
		END;
	FUNCTION pAIdLoc8813_AIL8813:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8813_AIL8813:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8812_AR8812:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8813_AIL8813;
		 pARefval8812_AR8812:=myrec;
		END;
	FUNCTION pADerefRhs8811_ADR8811:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8812_AR8812;
		 pADerefRhs8811_ADR8811:=myrec;
		END;
	FUNCTION pARhsValue8810_ARV8810:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8811_ADR8811;
		 pARhsValue8810_ARV8810:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs8801_ACR8801:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8802_AAT8802;
		myrec^.arg2:=pARhsValue8810_ARV8810;
		 pACastRhs8801_ACR8801:=myrec;
		END;
	FUNCTION pARhsValue8800_ARV8800:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8801_ACR8801;
		 pARhsValue8800_ARV8800:=myrec;
		END;
	FUNCTION pAUint8Unsigned8820_AU8U8820:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned8820_AU8U8820:=myrec;
		END;
	FUNCTION pAUnsignedTformat8819_AUT8819:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned8820_AU8U8820;
		 pAUnsignedTformat8819_AUT8819:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8818_ATP8818:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype8818_ATP8818:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8817_APT8817:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8817_APT8817:=nil;
		 pAPredeclaredtypeTypeprim8817_APT8817:=myrec;
		END;
	FUNCTION pAOptionalsign8823_AO8823:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8823_AO8823:=nil;
		 pAOptionalsign8823_AO8823:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8822_AIN8822:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8822_AIN8822:=myrec;
		END;
	FUNCTION pAArray8821_AA8821:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8821_AA8821:=nil;
		 pAArray8821_AA8821:=myrec;
		END;
	FUNCTION pAArrayType8816_AAT8816:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType8816_AAT8816:=myrec;
		END;
	FUNCTION pAIdLoc8827_AIL8827:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc8827_AIL8827:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8826_AR8826:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8827_AIL8827;
		 pARefval8826_AR8826:=myrec;
		END;
	FUNCTION pADerefRhs8825_ADR8825:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8826_AR8826;
		 pADerefRhs8825_ADR8825:=myrec;
		END;
	FUNCTION pARhsValue8824_ARV8824:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8825_ADR8825;
		 pARhsValue8824_ARV8824:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs8815_ACR8815:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8816_AAT8816;
		myrec^.arg2:=pARhsValue8824_ARV8824;
		 pACastRhs8815_ACR8815:=myrec;
		END;
	FUNCTION pARhsValue8814_ARV8814:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8815_ACR8815;
		 pARhsValue8814_ARV8814:=myrec;
		END;
	FUNCTION pADyadicValue8798_ADV8798:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue8800_ARV8800;
		myrec^.arg2:=pARhsValue8814_ARV8814;
		myrec^.fn:=pASatminusDyadic8799_ASD8799;
		 pADyadicValue8798_ADV8798:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs8789_ACR8789:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8790_AAT8790;
		myrec^.arg2:=pADyadicValue8798_ADV8798;
		 pACastRhs8789_ACR8789:=myrec;
		END;
	FUNCTION pARhsValue8788_ARV8788:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8789_ACR8789;
		 pARhsValue8788_ARV8788:=myrec;
		END;
	FUNCTION pAAssign8775_AA8775:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue8788_ARV8788;
		myrec^.dest:=pARefcastRefval8776_ARR8776;
		 pAAssign8775_AA8775:=myrec;
		END;
	FUNCTION pAAssignMeaning8774_AAM8774:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign8775_AA8775;
		 pAAssignMeaning8774_AAM8774:=myrec;
		END;
	FUNCTION pAAssemblypattern8829_AA8829:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'psubusb ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern8829_AA8829:=list;
		END;
	FUNCTION pAAssemblesto8828_AA8828:pprintlist;
	begin
		pAAssemblesto8828_AA8828:=pAAssemblypattern8829_AA8829;
		END;
	FUNCTION pASideeffects8834_AS8834:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects8834_AS8834:=nil;
		 pASideeffects8834_AS8834:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond8835_AUP8835:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond8835_AUP8835:=nil;
		 pAUnconditionalPrecond8835_AUP8835:=myrec;
		END;
	FUNCTION PSUBUSB_PSUBUSB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		params^[1]:=patmrmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning8774_AAM8774;
		matchedAssembler:=pAAssemblesto8828_AA8828;
		END;
		PSUBUSB_PSUBUSB:=myrec;
	END;
	FUNCTION pATypeid8838_AT8838:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@27d316}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8838_AT8838:=myrec;
		END;
	FUNCTION pATypeid8840_AT8840:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@2a7640}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8840_AT8840:=myrec;
		END;
	FUNCTION pAIdLoc8844_AIL8844:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8844_AIL8844:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8843_AR8843:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8844_AIL8844;
		 pARefval8843_AR8843:=myrec;
		END;
	FUNCTION pAAndDyadic8846_AAD8846:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpand;
		 pAAndDyadic8846_AAD8846:=myrec;
		END;
	FUNCTION pAIdLoc8850_AIL8850:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8850_AIL8850:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8849_AR8849:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8850_AIL8850;
		 pARefval8849_AR8849:=myrec;
		END;
	FUNCTION pADerefRhs8848_ADR8848:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8849_AR8849;
		 pADerefRhs8848_ADR8848:=myrec;
		END;
	FUNCTION pARhsValue8847_ARV8847:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8848_ADR8848;
		 pARhsValue8847_ARV8847:=myrec;
		END;
	FUNCTION pAIdLoc8854_AIL8854:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc8854_AIL8854:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8853_AR8853:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8854_AIL8854;
		 pARefval8853_AR8853:=myrec;
		END;
	FUNCTION pADerefRhs8852_ADR8852:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8853_AR8853;
		 pADerefRhs8852_ADR8852:=myrec;
		END;
	FUNCTION pARhsValue8851_ARV8851:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8852_ADR8852;
		 pARhsValue8851_ARV8851:=myrec;
		END;
	FUNCTION pADyadicValue8845_ADV8845:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue8847_ARV8847;
		myrec^.arg2:=pARhsValue8851_ARV8851;
		myrec^.fn:=pAAndDyadic8846_AAD8846;
		 pADyadicValue8845_ADV8845:=myrec;
		END;
	FUNCTION pAAssign8842_AA8842:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue8845_ADV8845;
		myrec^.dest:=pARefval8843_AR8843;
		 pAAssign8842_AA8842:=myrec;
		END;
	FUNCTION pAAssignMeaning8841_AAM8841:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign8842_AA8842;
		 pAAssignMeaning8841_AAM8841:=myrec;
		END;
	FUNCTION pAAssemblypattern8856_AA8856:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'pand ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern8856_AA8856:=list;
		END;
	FUNCTION pAAssemblesto8855_AA8855:pprintlist;
	begin
		pAAssemblesto8855_AA8855:=pAAssemblypattern8856_AA8856;
		END;
	FUNCTION pASideeffects8861_AS8861:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects8861_AS8861:=nil;
		 pASideeffects8861_AS8861:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond8862_AUP8862:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond8862_AUP8862:=nil;
		 pAUnconditionalPrecond8862_AUP8862:=myrec;
		END;
	FUNCTION PAND_PAND:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		params^[1]:=patmrmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning8841_AAM8841;
		matchedAssembler:=pAAssemblesto8855_AA8855;
		END;
		PAND_PAND:=myrec;
	END;
	FUNCTION pATypeid8865_AT8865:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@27d316}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8865_AT8865:=myrec;
		END;
	FUNCTION pATypeid8867_AT8867:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@2a7640}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8867_AT8867:=myrec;
		END;
	FUNCTION pAIdLoc8871_AIL8871:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8871_AIL8871:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8870_AR8870:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8871_AIL8871;
		 pARefval8870_AR8870:=myrec;
		END;
	FUNCTION pAAndDyadic8873_AAD8873:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpand;
		 pAAndDyadic8873_AAD8873:=myrec;
		END;
	FUNCTION pAIdLoc8877_AIL8877:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc8877_AIL8877:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8876_AR8876:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8877_AIL8877;
		 pARefval8876_AR8876:=myrec;
		END;
	FUNCTION pADerefRhs8875_ADR8875:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8876_AR8876;
		 pADerefRhs8875_ADR8875:=myrec;
		END;
	FUNCTION pARhsValue8874_ARV8874:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8875_ADR8875;
		 pARhsValue8874_ARV8874:=myrec;
		END;
	FUNCTION pANotMonadic8879_ANM8879:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monop;
		myrec^.opname:=ilcpNOT;
		 pANotMonadic8879_ANM8879:=myrec;
		END;
	FUNCTION pAIdLoc8883_AIL8883:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8883_AIL8883:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8882_AR8882:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8883_AIL8883;
		 pARefval8882_AR8882:=myrec;
		END;
	FUNCTION pADerefRhs8881_ADR8881:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8882_AR8882;
		 pADerefRhs8881_ADR8881:=myrec;
		END;
	FUNCTION pARhsValue8880_ARV8880:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8881_ADR8881;
		 pARhsValue8880_ARV8880:=myrec;
		END;
	FUNCTION pAMonadicValue8878_AMV8878:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=monad;
		myrec^.arg:=pARhsValue8880_ARV8880;
		myrec^.fn:=pANotMonadic8879_ANM8879;
		 pAMonadicValue8878_AMV8878:=myrec;
		END;
	FUNCTION pADyadicValue8872_ADV8872:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue8874_ARV8874;
		myrec^.arg2:=pAMonadicValue8878_AMV8878;
		myrec^.fn:=pAAndDyadic8873_AAD8873;
		 pADyadicValue8872_ADV8872:=myrec;
		END;
	FUNCTION pAAssign8869_AA8869:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue8872_ADV8872;
		myrec^.dest:=pARefval8870_AR8870;
		 pAAssign8869_AA8869:=myrec;
		END;
	FUNCTION pAAssignMeaning8868_AAM8868:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign8869_AA8869;
		 pAAssignMeaning8868_AAM8868:=myrec;
		END;
	FUNCTION pAAssemblypattern8885_AA8885:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'pandn ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern8885_AA8885:=list;
		END;
	FUNCTION pAAssemblesto8884_AA8884:pprintlist;
	begin
		pAAssemblesto8884_AA8884:=pAAssemblypattern8885_AA8885;
		END;
	FUNCTION pASideeffects8890_AS8890:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects8890_AS8890:=nil;
		 pASideeffects8890_AS8890:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond8891_AUP8891:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond8891_AUP8891:=nil;
		 pAUnconditionalPrecond8891_AUP8891:=myrec;
		END;
	FUNCTION PANDN_PANDN:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		params^[1]:=patmrmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning8868_AAM8868;
		matchedAssembler:=pAAssemblesto8884_AA8884;
		END;
		PANDN_PANDN:=myrec;
	END;
	FUNCTION pATypeid8894_AT8894:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@27d316}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8894_AT8894:=myrec;
		END;
	FUNCTION pATypeid8896_AT8896:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mrmaddrmode  ilcg.pattern@2a7640}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8896_AT8896:=myrec;
		END;
	FUNCTION pAIdLoc8900_AIL8900:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8900_AIL8900:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8899_AR8899:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8900_AIL8900;
		 pARefval8899_AR8899:=myrec;
		END;
	FUNCTION pAOrDyadic8902_AOD8902:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcpor;
		 pAOrDyadic8902_AOD8902:=myrec;
		END;
	FUNCTION pAIdLoc8906_AIL8906:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8906_AIL8906:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8905_AR8905:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8906_AIL8906;
		 pARefval8905_AR8905:=myrec;
		END;
	FUNCTION pADerefRhs8904_ADR8904:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8905_AR8905;
		 pADerefRhs8904_ADR8904:=myrec;
		END;
	FUNCTION pARhsValue8903_ARV8903:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8904_ADR8904;
		 pARhsValue8903_ARV8903:=myrec;
		END;
	FUNCTION pAIdLoc8910_AIL8910:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc8910_AIL8910:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8909_AR8909:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8910_AIL8910;
		 pARefval8909_AR8909:=myrec;
		END;
	FUNCTION pADerefRhs8908_ADR8908:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8909_AR8909;
		 pADerefRhs8908_ADR8908:=myrec;
		END;
	FUNCTION pARhsValue8907_ARV8907:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8908_ADR8908;
		 pARhsValue8907_ARV8907:=myrec;
		END;
	FUNCTION pADyadicValue8901_ADV8901:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue8903_ARV8903;
		myrec^.arg2:=pARhsValue8907_ARV8907;
		myrec^.fn:=pAOrDyadic8902_AOD8902;
		 pADyadicValue8901_ADV8901:=myrec;
		END;
	FUNCTION pAAssign8898_AA8898:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue8901_ADV8901;
		myrec^.dest:=pARefval8899_AR8899;
		 pAAssign8898_AA8898:=myrec;
		END;
	FUNCTION pAAssignMeaning8897_AAM8897:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign8898_AA8898;
		 pAAssignMeaning8897_AAM8897:=myrec;
		END;
	FUNCTION pAAssemblypattern8912_AA8912:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'por ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern8912_AA8912:=list;
		END;
	FUNCTION pAAssemblesto8911_AA8911:pprintlist;
	begin
		pAAssemblesto8911_AA8911:=pAAssemblypattern8912_AA8912;
		END;
	FUNCTION pASideeffects8917_AS8917:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects8917_AS8917:=nil;
		 pASideeffects8917_AS8917:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond8918_AUP8918:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond8918_AUP8918:=nil;
		 pAUnconditionalPrecond8918_AUP8918:=myrec;
		END;
	FUNCTION POR_POR:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		params^[1]:=patmrmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning8897_AAM8897;
		matchedAssembler:=pAAssemblesto8911_AA8911;
		END;
		POR_POR:=myrec;
	END;
	FUNCTION pATypeid8921_AT8921:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ waddrmode  ilcg.pattern@735a55}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8921_AT8921:=myrec;
		END;
	FUNCTION pATypeid8923_AT8923:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ wmreg  ilcg.pattern@e3f75}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8923_AT8923:=myrec;
		END;
	FUNCTION pAWordFormat8931_AWF8931:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword;
		 pAWordFormat8931_AWF8931:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype8930_AFP8930:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAFormatPredeclaredtype8930_AFP8930:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType8929_APT8929:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAPredeclaredtypeType8929_APT8929:=myrec;
		END;
	FUNCTION pAReference8928_AR8928:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType8929_APT8929;
		 pAReference8928_AR8928:=myrec;
		END;
	FUNCTION pAReftypeType8927_ART8927:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference8928_AR8928;
		 pAReftypeType8927_ART8927:=myrec;
		END;
	FUNCTION pAIdLoc8932_AIL8932:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8932_AIL8932:=myrec;
		END;
	FUNCTION pARefcastRefval8926_ARR8926:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType8927_ART8927;
		myrec^.arg2:=pAIdLoc8932_AIL8932;
		 pARefcastRefval8926_ARR8926:=myrec;
		END;
	FUNCTION pAIdLoc8936_AIL8936:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc8936_AIL8936:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8935_AR8935:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8936_AIL8936;
		 pARefval8935_AR8935:=myrec;
		END;
	FUNCTION pADerefRhs8934_ADR8934:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8935_AR8935;
		 pADerefRhs8934_ADR8934:=myrec;
		END;
	FUNCTION pARhsValue8933_ARV8933:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8934_ADR8934;
		 pARhsValue8933_ARV8933:=myrec;
		END;
	FUNCTION pAAssign8925_AA8925:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue8933_ARV8933;
		myrec^.dest:=pARefcastRefval8926_ARR8926;
		 pAAssign8925_AA8925:=myrec;
		END;
	FUNCTION pAAssignMeaning8924_AAM8924:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign8925_AA8925;
		 pAAssignMeaning8924_AAM8924:=myrec;
		END;
	FUNCTION pAAssemblypattern8938_AA8938:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movd ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern8938_AA8938:=list;
		END;
	FUNCTION pAAssemblesto8937_AA8937:pprintlist;
	begin
		pAAssemblesto8937_AA8937:=pAAssemblypattern8938_AA8938;
		END;
	FUNCTION pASideeffects8943_AS8943:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects8943_AS8943:=nil;
		 pASideeffects8943_AS8943:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond8944_AUP8944:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond8944_AUP8944:=nil;
		 pAUnconditionalPrecond8944_AUP8944:=myrec;
		END;
	FUNCTION MOVDS_MOVDS:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patwmreg_;
		params^[0]:=patwaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning8924_AAM8924;
		matchedAssembler:=pAAssemblesto8937_AA8937;
		END;
		MOVDS_MOVDS:=myrec;
	END;
	FUNCTION pATypeid8947_AT8947:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ waddrmode  ilcg.pattern@735a55}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8947_AT8947:=myrec;
		END;
	FUNCTION pATypeid8949_AT8949:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ wmreg  ilcg.pattern@e3f75}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8949_AT8949:=myrec;
		END;
	FUNCTION pAIdLoc8953_AIL8953:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc8953_AIL8953:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8952_AR8952:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8953_AIL8953;
		 pARefval8952_AR8952:=myrec;
		END;
	FUNCTION pAWordFormat8958_AWF8958:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword;
		 pAWordFormat8958_AWF8958:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype8957_AFP8957:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAFormatPredeclaredtype8957_AFP8957:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType8956_APT8956:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fword ;
		 pAPredeclaredtypeType8956_APT8956:=myrec;
		END;
	FUNCTION pAIdLoc8962_AIL8962:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8962_AIL8962:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8961_AR8961:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8962_AIL8962;
		 pARefval8961_AR8961:=myrec;
		END;
	FUNCTION pADerefRhs8960_ADR8960:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8961_AR8961;
		 pADerefRhs8960_ADR8960:=myrec;
		END;
	FUNCTION pARhsValue8959_ARV8959:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8960_ADR8960;
		 pARhsValue8959_ARV8959:=myrec;
		END;
		(*! try to cast to type: word*)
	FUNCTION pACastRhs8955_ACR8955:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType8956_APT8956;
		myrec^.arg2:=pARhsValue8959_ARV8959;
		 pACastRhs8955_ACR8955:=myrec;
		END;
	FUNCTION pARhsValue8954_ARV8954:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8955_ACR8955;
		 pARhsValue8954_ARV8954:=myrec;
		END;
	FUNCTION pAAssign8951_AA8951:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue8954_ARV8954;
		myrec^.dest:=pARefval8952_AR8952;
		 pAAssign8951_AA8951:=myrec;
		END;
	FUNCTION pAAssignMeaning8950_AAM8950:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign8951_AA8951;
		 pAAssignMeaning8950_AAM8950:=myrec;
		END;
	FUNCTION pAAssemblypattern8964_AA8964:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movd ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,0);
		pAAssemblypattern8964_AA8964:=list;
		END;
	FUNCTION pAAssemblesto8963_AA8963:pprintlist;
	begin
		pAAssemblesto8963_AA8963:=pAAssemblypattern8964_AA8964;
		END;
	FUNCTION pASideeffects8969_AS8969:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects8969_AS8969:=nil;
		 pASideeffects8969_AS8969:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond8970_AUP8970:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond8970_AUP8970:=nil;
		 pAUnconditionalPrecond8970_AUP8970:=myrec;
		END;
	FUNCTION MOVDL_MOVDL:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patwmreg_;
		params^[0]:=patwaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning8950_AAM8950;
		matchedAssembler:=pAAssemblesto8963_AA8963;
		END;
		MOVDL_MOVDL:=myrec;
	END;
	FUNCTION pATypeid8973_AT8973:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ addrmode  ilcg.pattern@7a4076}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8973_AT8973:=myrec;
		END;
	FUNCTION pATypeid8975_AT8975:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@27d316}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid8975_AT8975:=myrec;
		END;
	FUNCTION pAIdLoc8979_AIL8979:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc8979_AIL8979:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8978_AR8978:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8979_AIL8979;
		 pARefval8978_AR8978:=myrec;
		END;
	FUNCTION pAUint8Unsigned8986_AU8U8986:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned8986_AU8U8986:=myrec;
		END;
	FUNCTION pAUnsignedTformat8985_AUT8985:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned8986_AU8U8986;
		 pAUnsignedTformat8985_AUT8985:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype8984_ATP8984:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype8984_ATP8984:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim8983_APT8983:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim8983_APT8983:=nil;
		 pAPredeclaredtypeTypeprim8983_APT8983:=myrec;
		END;
	FUNCTION pAOptionalsign8989_AO8989:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign8989_AO8989:=nil;
		 pAOptionalsign8989_AO8989:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber8988_AIN8988:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber8988_AIN8988:=myrec;
		END;
	FUNCTION pAArray8987_AA8987:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray8987_AA8987:=nil;
		 pAArray8987_AA8987:=myrec;
		END;
	FUNCTION pAArrayType8982_AAT8982:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType8982_AAT8982:=myrec;
		END;
	FUNCTION pAIdLoc8993_AIL8993:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc8993_AIL8993:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval8992_AR8992:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc8993_AIL8993;
		 pARefval8992_AR8992:=myrec;
		END;
	FUNCTION pADerefRhs8991_ADR8991:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval8992_AR8992;
		 pADerefRhs8991_ADR8991:=myrec;
		END;
	FUNCTION pARhsValue8990_ARV8990:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs8991_ADR8991;
		 pARhsValue8990_ARV8990:=myrec;
		END;
		(*! try to cast to type: uint8 vector ( 8 )*)
	FUNCTION pACastRhs8981_ACR8981:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAArrayType8982_AAT8982;
		myrec^.arg2:=pARhsValue8990_ARV8990;
		 pACastRhs8981_ACR8981:=myrec;
		END;
	FUNCTION pARhsValue8980_ARV8980:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs8981_ACR8981;
		 pARhsValue8980_ARV8980:=myrec;
		END;
	FUNCTION pAAssign8977_AA8977:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue8980_ARV8980;
		myrec^.dest:=pARefval8978_AR8978;
		 pAAssign8977_AA8977:=myrec;
		END;
	FUNCTION pAAssignMeaning8976_AAM8976:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign8977_AA8977;
		 pAAssignMeaning8976_AAM8976:=myrec;
		END;
	FUNCTION pAAssemblypattern8995_AA8995:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movq ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,0);
		pAAssemblypattern8995_AA8995:=list;
		END;
	FUNCTION pAAssemblesto8994_AA8994:pprintlist;
	begin
		pAAssemblesto8994_AA8994:=pAAssemblypattern8995_AA8995;
		END;
	FUNCTION pASideeffects9000_AS9000:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects9000_AS9000:=nil;
		 pASideeffects9000_AS9000:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond9001_AUP9001:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond9001_AUP9001:=nil;
		 pAUnconditionalPrecond9001_AUP9001:=myrec;
		END;
	FUNCTION MOVOCTUINTL_MOVOCTUINTL:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patmreg_;
		params^[0]:=pataddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning8976_AAM8976;
		matchedAssembler:=pAAssemblesto8994_AA8994;
		END;
		MOVOCTUINTL_MOVOCTUINTL:=myrec;
	END;
	FUNCTION pATypeid9004_AT9004:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9004_AT9004:=myrec;
		END;
	FUNCTION pATypeid9006_AT9006:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@27d316}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9006_AT9006:=myrec;
		END;
	FUNCTION pADoublewordFormat9014_ADF9014:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdword;
		 pADoublewordFormat9014_ADF9014:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype9013_AFP9013:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAFormatPredeclaredtype9013_AFP9013:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType9012_APT9012:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAPredeclaredtypeType9012_APT9012:=myrec;
		END;
	FUNCTION pAReference9011_AR9011:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType9012_APT9012;
		 pAReference9011_AR9011:=myrec;
		END;
	FUNCTION pAReftypeType9010_ART9010:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference9011_AR9011;
		 pAReftypeType9010_ART9010:=myrec;
		END;
	FUNCTION pAIdLoc9015_AIL9015:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9015_AIL9015:=myrec;
		END;
	FUNCTION pARefcastRefval9009_ARR9009:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType9010_ART9010;
		myrec^.arg2:=pAIdLoc9015_AIL9015;
		 pARefcastRefval9009_ARR9009:=myrec;
		END;
	FUNCTION pAIdLoc9019_AIL9019:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc9019_AIL9019:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9018_AR9018:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9019_AIL9019;
		 pARefval9018_AR9018:=myrec;
		END;
	FUNCTION pADerefRhs9017_ADR9017:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9018_AR9018;
		 pADerefRhs9017_ADR9017:=myrec;
		END;
	FUNCTION pARhsValue9016_ARV9016:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9017_ADR9017;
		 pARhsValue9016_ARV9016:=myrec;
		END;
	FUNCTION pAAssign9008_AA9008:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue9016_ARV9016;
		myrec^.dest:=pARefcastRefval9009_ARR9009;
		 pAAssign9008_AA9008:=myrec;
		END;
	FUNCTION pAAssignMeaning9007_AAM9007:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign9008_AA9008;
		 pAAssignMeaning9007_AAM9007:=myrec;
		END;
	FUNCTION pAAssemblypattern9021_AA9021:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movq ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern9021_AA9021:=list;
		END;
	FUNCTION pAAssemblesto9020_AA9020:pprintlist;
	begin
		pAAssemblesto9020_AA9020:=pAAssemblypattern9021_AA9021;
		END;
	FUNCTION pASideeffects9026_AS9026:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects9026_AS9026:=nil;
		 pASideeffects9026_AS9026:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond9027_AUP9027:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond9027_AUP9027:=nil;
		 pAUnconditionalPrecond9027_AUP9027:=myrec;
		END;
	FUNCTION MOVQS_MOVQS:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patmreg_;
		params^[0]:=patmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning9007_AAM9007;
		matchedAssembler:=pAAssemblesto9020_AA9020;
		END;
		MOVQS_MOVQS:=myrec;
	END;
	FUNCTION pATypeid9030_AT9030:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@27d316}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9030_AT9030:=myrec;
		END;
	FUNCTION pATypeid9032_AT9032:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@27d316}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9032_AT9032:=myrec;
		END;
	FUNCTION pADoublewordFormat9040_ADF9040:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdword;
		 pADoublewordFormat9040_ADF9040:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype9039_AFP9039:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAFormatPredeclaredtype9039_AFP9039:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType9038_APT9038:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAPredeclaredtypeType9038_APT9038:=myrec;
		END;
	FUNCTION pAReference9037_AR9037:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAPredeclaredtypeType9038_APT9038;
		 pAReference9037_AR9037:=myrec;
		END;
	FUNCTION pAReftypeType9036_ART9036:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference9037_AR9037;
		 pAReftypeType9036_ART9036:=myrec;
		END;
	FUNCTION pAIdLoc9041_AIL9041:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9041_AIL9041:=myrec;
		END;
	FUNCTION pARefcastRefval9035_ARR9035:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType9036_ART9036;
		myrec^.arg2:=pAIdLoc9041_AIL9041;
		 pARefcastRefval9035_ARR9035:=myrec;
		END;
	FUNCTION pAIdLoc9045_AIL9045:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc9045_AIL9045:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9044_AR9044:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9045_AIL9045;
		 pARefval9044_AR9044:=myrec;
		END;
	FUNCTION pADerefRhs9043_ADR9043:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9044_AR9044;
		 pADerefRhs9043_ADR9043:=myrec;
		END;
	FUNCTION pARhsValue9042_ARV9042:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9043_ADR9043;
		 pARhsValue9042_ARV9042:=myrec;
		END;
	FUNCTION pAAssign9034_AA9034:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue9042_ARV9042;
		myrec^.dest:=pARefcastRefval9035_ARR9035;
		 pAAssign9034_AA9034:=myrec;
		END;
	FUNCTION pAAssignMeaning9033_AAM9033:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign9034_AA9034;
		 pAAssignMeaning9033_AAM9033:=myrec;
		END;
	FUNCTION pAAssemblypattern9047_AA9047:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movq ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern9047_AA9047:=list;
		END;
	FUNCTION pAAssemblesto9046_AA9046:pprintlist;
	begin
		pAAssemblesto9046_AA9046:=pAAssemblypattern9047_AA9047;
		END;
	FUNCTION pASideeffects9052_AS9052:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects9052_AS9052:=nil;
		 pASideeffects9052_AS9052:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond9053_AUP9053:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond9053_AUP9053:=nil;
		 pAUnconditionalPrecond9053_AUP9053:=myrec;
		END;
	FUNCTION MOVQR_MOVQR:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patmreg_;
		params^[0]:=patmreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning9033_AAM9033;
		matchedAssembler:=pAAssemblesto9046_AA9046;
		END;
		MOVQR_MOVQR:=myrec;
	END;
	FUNCTION pATypeid9056_AT9056:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9056_AT9056:=myrec;
		END;
	FUNCTION pATypeid9058_AT9058:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@27d316}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9058_AT9058:=myrec;
		END;
	FUNCTION pAUint8Unsigned9068_AU8U9068:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned9068_AU8U9068:=myrec;
		END;
	FUNCTION pAUnsignedTformat9067_AUT9067:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned9068_AU8U9068;
		 pAUnsignedTformat9067_AUT9067:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9066_ATP9066:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype9066_ATP9066:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9065_APT9065:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9065_APT9065:=nil;
		 pAPredeclaredtypeTypeprim9065_APT9065:=myrec;
		END;
	FUNCTION pAOptionalsign9071_AO9071:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9071_AO9071:=nil;
		 pAOptionalsign9071_AO9071:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9070_AIN9070:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9070_AIN9070:=myrec;
		END;
	FUNCTION pAArray9069_AA9069:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9069_AA9069:=nil;
		 pAArray9069_AA9069:=myrec;
		END;
	FUNCTION pAArrayType9064_AAT9064:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType9064_AAT9064:=myrec;
		END;
	FUNCTION pAReference9063_AR9063:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType9064_AAT9064;
		 pAReference9063_AR9063:=myrec;
		END;
	FUNCTION pAReftypeType9062_ART9062:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference9063_AR9063;
		 pAReftypeType9062_ART9062:=myrec;
		END;
	FUNCTION pAIdLoc9072_AIL9072:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9072_AIL9072:=myrec;
		END;
	FUNCTION pARefcastRefval9061_ARR9061:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType9062_ART9062;
		myrec^.arg2:=pAIdLoc9072_AIL9072;
		 pARefcastRefval9061_ARR9061:=myrec;
		END;
	FUNCTION pAIdLoc9076_AIL9076:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc9076_AIL9076:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9075_AR9075:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9076_AIL9076;
		 pARefval9075_AR9075:=myrec;
		END;
	FUNCTION pADerefRhs9074_ADR9074:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9075_AR9075;
		 pADerefRhs9074_ADR9074:=myrec;
		END;
	FUNCTION pARhsValue9073_ARV9073:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9074_ADR9074;
		 pARhsValue9073_ARV9073:=myrec;
		END;
	FUNCTION pAAssign9060_AA9060:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue9073_ARV9073;
		myrec^.dest:=pARefcastRefval9061_ARR9061;
		 pAAssign9060_AA9060:=myrec;
		END;
	FUNCTION pAAssignMeaning9059_AAM9059:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign9060_AA9060;
		 pAAssignMeaning9059_AAM9059:=myrec;
		END;
	FUNCTION pAAssemblypattern9078_AA9078:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movq ' );
		pappendp(list,0);
		pappends(list,',' );
		pappendp(list,1);
		pAAssemblypattern9078_AA9078:=list;
		END;
	FUNCTION pAAssemblesto9077_AA9077:pprintlist;
	begin
		pAAssemblesto9077_AA9077:=pAAssemblypattern9078_AA9078;
		END;
	FUNCTION pASideeffects9083_AS9083:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects9083_AS9083:=nil;
		 pASideeffects9083_AS9083:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond9084_AUP9084:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond9084_AUP9084:=nil;
		 pAUnconditionalPrecond9084_AUP9084:=myrec;
		END;
	FUNCTION MOVOCTUINTS_MOVOCTUINTS:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patmreg_;
		params^[0]:=patmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning9059_AAM9059;
		matchedAssembler:=pAAssemblesto9077_AA9077;
		END;
		MOVOCTUINTS_MOVOCTUINTS:=myrec;
	END;
	FUNCTION pATypeid9087_AT9087:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ maddrmode  ilcg.pattern@447498}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9087_AT9087:=myrec;
		END;
	FUNCTION pATypeid9089_AT9089:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@27d316}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9089_AT9089:=myrec;
		END;
	FUNCTION pAIdLoc9093_AIL9093:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc9093_AIL9093:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9092_AR9092:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9093_AIL9093;
		 pARefval9092_AR9092:=myrec;
		END;
	FUNCTION pADoublewordFormat9098_ADF9098:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdword;
		 pADoublewordFormat9098_ADF9098:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAFormatPredeclaredtype9097_AFP9097:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAFormatPredeclaredtype9097_AFP9097:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pAPredeclaredtypeType9096_APT9096:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fdoubleword ;
		 pAPredeclaredtypeType9096_APT9096:=myrec;
		END;
	FUNCTION pAIdLoc9102_AIL9102:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9102_AIL9102:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9101_AR9101:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9102_AIL9102;
		 pARefval9101_AR9101:=myrec;
		END;
	FUNCTION pADerefRhs9100_ADR9100:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9101_AR9101;
		 pADerefRhs9100_ADR9100:=myrec;
		END;
	FUNCTION pARhsValue9099_ARV9099:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9100_ADR9100;
		 pARhsValue9099_ARV9099:=myrec;
		END;
		(*! try to cast to type: doubleword*)
	FUNCTION pACastRhs9095_ACR9095:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAPredeclaredtypeType9096_APT9096;
		myrec^.arg2:=pARhsValue9099_ARV9099;
		 pACastRhs9095_ACR9095:=myrec;
		END;
	FUNCTION pARhsValue9094_ARV9094:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pACastRhs9095_ACR9095;
		 pARhsValue9094_ARV9094:=myrec;
		END;
	FUNCTION pAAssign9091_AA9091:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue9094_ARV9094;
		myrec^.dest:=pARefval9092_AR9092;
		 pAAssign9091_AA9091:=myrec;
		END;
	FUNCTION pAAssignMeaning9090_AAM9090:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign9091_AA9091;
		 pAAssignMeaning9090_AAM9090:=myrec;
		END;
	FUNCTION pAAssemblypattern9104_AA9104:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movq ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,0);
		pAAssemblypattern9104_AA9104:=list;
		END;
	FUNCTION pAAssemblesto9103_AA9103:pprintlist;
	begin
		pAAssemblesto9103_AA9103:=pAAssemblypattern9104_AA9104;
		END;
	FUNCTION pASideeffects9109_AS9109:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects9109_AS9109:=nil;
		 pASideeffects9109_AS9109:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond9110_AUP9110:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond9110_AUP9110:=nil;
		 pAUnconditionalPrecond9110_AUP9110:=myrec;
		END;
	FUNCTION MOVQL_MOVQL:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patmreg_;
		params^[0]:=patmaddrmode_;
		paramcount:=3;
		meaning:=pAAssignMeaning9090_AAM9090;
		matchedAssembler:=pAAssemblesto9103_AA9103;
		END;
		MOVQL_MOVQL:=myrec;
	END;
	FUNCTION pATypeid9113_AT9113:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im8reg  ilcg.pattern@694a18}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9113_AT9113:=myrec;
		END;
	FUNCTION pATypeid9115_AT9115:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im8reg  ilcg.pattern@694a18}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9115_AT9115:=myrec;
		END;
	FUNCTION pAIdLoc9119_AIL9119:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc9119_AIL9119:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9118_AR9118:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9119_AIL9119;
		 pARefval9118_AR9118:=myrec;
		END;
	FUNCTION pAIdLoc9123_AIL9123:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9123_AIL9123:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9122_AR9122:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9123_AIL9123;
		 pARefval9122_AR9122:=myrec;
		END;
	FUNCTION pADerefRhs9121_ADR9121:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9122_AR9122;
		 pADerefRhs9121_ADR9121:=myrec;
		END;
	FUNCTION pARhsValue9120_ARV9120:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9121_ADR9121;
		 pARhsValue9120_ARV9120:=myrec;
		END;
	FUNCTION pAAssign9117_AA9117:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue9120_ARV9120;
		myrec^.dest:=pARefval9118_AR9118;
		 pAAssign9117_AA9117:=myrec;
		END;
	FUNCTION pAAssignMeaning9116_AAM9116:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign9117_AA9117;
		 pAAssignMeaning9116_AAM9116:=myrec;
		END;
	FUNCTION pAAssemblypattern9125_AA9125:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movq ' );
		pappendp(list,1);
		pappends(list,',' );
		pappendp(list,0);
		pAAssemblypattern9125_AA9125:=list;
		END;
	FUNCTION pAAssemblesto9124_AA9124:pprintlist;
	begin
		pAAssemblesto9124_AA9124:=pAAssemblypattern9125_AA9125;
		END;
	FUNCTION pASideeffects9130_AS9130:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects9130_AS9130:=nil;
		 pASideeffects9130_AS9130:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond9131_AUP9131:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond9131_AUP9131:=nil;
		 pAUnconditionalPrecond9131_AUP9131:=myrec;
		END;
	FUNCTION MOVQLR_MOVQLR:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patim8reg_8;
		params^[0]:=patim8reg_8;
		paramcount:=3;
		meaning:=pAAssignMeaning9116_AAM9116;
		matchedAssembler:=pAAssemblesto9124_AA9124;
		END;
		MOVQLR_MOVQLR:=myrec;
	END;
	FUNCTION pATypeid9134_AT9134:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@27d316}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9134_AT9134:=myrec;
		END;
	FUNCTION pATypeid9136_AT9136:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9136_AT9136:=myrec;
		END;
	FUNCTION pAIdLoc9140_AIL9140:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9140_AIL9140:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9139_AR9139:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9140_AIL9140;
		 pARefval9139_AR9139:=myrec;
		END;
	FUNCTION pAReplicateDyadic9142_ARD9142:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcprep;
		 pAReplicateDyadic9142_ARD9142:=myrec;
		END;
	FUNCTION pAIdLoc9146_AIL9146:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc9146_AIL9146:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9145_AR9145:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9146_AIL9146;
		 pARefval9145_AR9145:=myrec;
		END;
	FUNCTION pADerefRhs9144_ADR9144:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9145_AR9145;
		 pADerefRhs9144_ADR9144:=myrec;
		END;
	FUNCTION pARhsValue9143_ARV9143:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9144_ADR9144;
		 pARhsValue9143_ARV9143:=myrec;
		END;
	FUNCTION pAOptionalsign9150_AO9150:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9150_AO9150:=nil;
		 pAOptionalsign9150_AO9150:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9149_AIN9149:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=2 ;
		 pAIntegerNumber9149_AIN9149:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs9148_ANR9148:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber9149_AIN9149;
		 pANumberRhs9148_ANR9148:=myrec;
		END;
	FUNCTION pARhsValue9147_ARV9147:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs9148_ANR9148;
		 pARhsValue9147_ARV9147:=myrec;
		END;
	FUNCTION pADyadicValue9141_ADV9141:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue9143_ARV9143;
		myrec^.arg2:=pARhsValue9147_ARV9147;
		myrec^.fn:=pAReplicateDyadic9142_ARD9142;
		 pADyadicValue9141_ADV9141:=myrec;
		END;
	FUNCTION pAAssign9138_AA9138:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue9141_ADV9141;
		myrec^.dest:=pARefval9139_AR9139;
		 pAAssign9138_AA9138:=myrec;
		END;
	FUNCTION pAAssignMeaning9137_AAM9137:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign9138_AA9138;
		 pAAssignMeaning9137_AAM9137:=myrec;
		END;
	FUNCTION pAAssemblypattern9152_AA9152:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'push ' );
		pappendp(list,1);
		pappends(list,'\n push ' );
		pappendp(list,1);
		pappends(list,'\n movq ' );
		pappendp(list,0);
		pappends(list,',[esp]\n add esp,8' );
		pAAssemblypattern9152_AA9152:=list;
		END;
	FUNCTION pAAssemblesto9151_AA9151:pprintlist;
	begin
		pAAssemblesto9151_AA9151:=pAAssemblypattern9152_AA9152;
		END;
	FUNCTION pASideeffects9160_AS9160:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects9160_AS9160:=nil;
		 pASideeffects9160_AS9160:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond9161_AUP9161:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond9161_AUP9161:=nil;
		 pAUnconditionalPrecond9161_AUP9161:=myrec;
		END;
	FUNCTION REP2_REP2:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		params^[1]:=patreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning9137_AAM9137;
		matchedAssembler:=pAAssemblesto9151_AA9151;
		END;
		REP2_REP2:=myrec;
	END;
	FUNCTION pATypeid9164_AT9164:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@27d316}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9164_AT9164:=myrec;
		END;
	FUNCTION pATypeid9166_AT9166:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ wreg  ilcg.pattern@18cbf7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9166_AT9166:=myrec;
		END;
	FUNCTION pAIdLoc9170_AIL9170:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9170_AIL9170:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9169_AR9169:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9170_AIL9170;
		 pARefval9169_AR9169:=myrec;
		END;
	FUNCTION pAReplicateDyadic9172_ARD9172:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcprep;
		 pAReplicateDyadic9172_ARD9172:=myrec;
		END;
	FUNCTION pAIdLoc9176_AIL9176:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc9176_AIL9176:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9175_AR9175:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9176_AIL9176;
		 pARefval9175_AR9175:=myrec;
		END;
	FUNCTION pADerefRhs9174_ADR9174:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9175_AR9175;
		 pADerefRhs9174_ADR9174:=myrec;
		END;
	FUNCTION pARhsValue9173_ARV9173:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9174_ADR9174;
		 pARhsValue9173_ARV9173:=myrec;
		END;
	FUNCTION pAOptionalsign9180_AO9180:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9180_AO9180:=nil;
		 pAOptionalsign9180_AO9180:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9179_AIN9179:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber9179_AIN9179:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs9178_ANR9178:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber9179_AIN9179;
		 pANumberRhs9178_ANR9178:=myrec;
		END;
	FUNCTION pARhsValue9177_ARV9177:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs9178_ANR9178;
		 pARhsValue9177_ARV9177:=myrec;
		END;
	FUNCTION pADyadicValue9171_ADV9171:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue9173_ARV9173;
		myrec^.arg2:=pARhsValue9177_ARV9177;
		myrec^.fn:=pAReplicateDyadic9172_ARD9172;
		 pADyadicValue9171_ADV9171:=myrec;
		END;
	FUNCTION pAAssign9168_AA9168:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue9171_ADV9171;
		myrec^.dest:=pARefval9169_AR9169;
		 pAAssign9168_AA9168:=myrec;
		END;
	FUNCTION pAAssignMeaning9167_AAM9167:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign9168_AA9168;
		 pAAssignMeaning9167_AAM9167:=myrec;
		END;
	FUNCTION pAAssemblypattern9182_AA9182:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'push ' );
		pappendp(list,1);
		pappends(list,'\n push ' );
		pappendp(list,1);
		pappends(list,'\n push ' );
		pappendp(list,1);
		pappends(list,'\n push ' );
		pappendp(list,1);
		pappends(list,'\n movq ' );
		pappendp(list,0);
		pappends(list,',[esp]\n add esp,8' );
		pAAssemblypattern9182_AA9182:=list;
		END;
	FUNCTION pAAssemblesto9181_AA9181:pprintlist;
	begin
		pAAssemblesto9181_AA9181:=pAAssemblypattern9182_AA9182;
		END;
	FUNCTION pASideeffects9194_AS9194:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects9194_AS9194:=nil;
		 pASideeffects9194_AS9194:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond9195_AUP9195:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond9195_AUP9195:=nil;
		 pAUnconditionalPrecond9195_AUP9195:=myrec;
		END;
	FUNCTION REP4_REP4:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		params^[1]:=patwreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning9167_AAM9167;
		matchedAssembler:=pAAssemblesto9181_AA9181;
		END;
		REP4_REP4:=myrec;
	END;
	FUNCTION pATypeid9198_AT9198:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@27d316}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9198_AT9198:=myrec;
		END;
	FUNCTION pATypeid9200_AT9200:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ breg  ilcg.pattern@6f45e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9200_AT9200:=myrec;
		END;
	FUNCTION pAIdLoc9204_AIL9204:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9204_AIL9204:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9203_AR9203:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9204_AIL9204;
		 pARefval9203_AR9203:=myrec;
		END;
	FUNCTION pAReplicateDyadic9206_ARD9206:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyadicop;
		myrec^.opname:=ilcprep;
		 pAReplicateDyadic9206_ARD9206:=myrec;
		END;
	FUNCTION pAIdLoc9210_AIL9210:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc9210_AIL9210:=myrec;
		END;
		(*! recognises a refval which is a location *)
	FUNCTION pARefval9209_AR9209:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9210_AIL9210;
		 pARefval9209_AR9209:=myrec;
		END;
	FUNCTION pADerefRhs9208_ADR9208:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefval9209_AR9209;
		 pADerefRhs9208_ADR9208:=myrec;
		END;
	FUNCTION pARhsValue9207_ARV9207:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9208_ADR9208;
		 pARhsValue9207_ARV9207:=myrec;
		END;
	FUNCTION pAOptionalsign9214_AO9214:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9214_AO9214:=nil;
		 pAOptionalsign9214_AO9214:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9213_AIN9213:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9213_AIN9213:=myrec;
		END;
		(*! recognizes a number *) 
	FUNCTION pANumberRhs9212_ANR9212:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIntegerNumber9213_AIN9213;
		 pANumberRhs9212_ANR9212:=myrec;
		END;
	FUNCTION pARhsValue9211_ARV9211:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pANumberRhs9212_ANR9212;
		 pARhsValue9211_ARV9211:=myrec;
		END;
	FUNCTION pADyadicValue9205_ADV9205:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=dyad;
		myrec^.arg:=pARhsValue9207_ARV9207;
		myrec^.arg2:=pARhsValue9211_ARV9211;
		myrec^.fn:=pAReplicateDyadic9206_ARD9206;
		 pADyadicValue9205_ADV9205:=myrec;
		END;
	FUNCTION pAAssign9202_AA9202:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pADyadicValue9205_ADV9205;
		myrec^.dest:=pARefval9203_AR9203;
		 pAAssign9202_AA9202:=myrec;
		END;
	FUNCTION pAAssignMeaning9201_AAM9201:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign9202_AA9202;
		 pAAssignMeaning9201_AAM9201:=myrec;
		END;
	FUNCTION pAAssemblypattern9216_AA9216:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'sub esp,2\n mov [esp], ' );
		pappendp(list,1);
		pappends(list,'\n mov [esp+1], ' );
		pappendp(list,1);
		pappends(list,'\n xchg [esp],ax\npush ax\npush ax\n push ax\nxchg [esp+6],ax\n movq ' );
		pappendp(list,0);
		pappends(list,',[esp]\n add esp,8' );
		pAAssemblypattern9216_AA9216:=list;
		END;
	FUNCTION pAAssemblesto9215_AA9215:pprintlist;
	begin
		pAAssemblesto9215_AA9215:=pAAssemblypattern9216_AA9216;
		END;
	FUNCTION pASideeffects9224_AS9224:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects9224_AS9224:=nil;
		 pASideeffects9224_AS9224:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond9225_AUP9225:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond9225_AUP9225:=nil;
		 pAUnconditionalPrecond9225_AUP9225:=myrec;
		END;
	FUNCTION REP8_REP8:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[0]:=patmreg_;
		params^[1]:=patbreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning9201_AAM9201;
		matchedAssembler:=pAAssemblesto9215_AA9215;
		END;
		REP8_REP8:=myrec;
	END;
	FUNCTION pATypeid9228_AT9228:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9228_AT9228:=myrec;
		END;
	FUNCTION pATypeid9230_AT9230:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@27d316}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9230_AT9230:=myrec;
		END;
	FUNCTION pAInt16Signed9240_AI16S9240:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed9240_AI16S9240:=myrec;
		END;
	FUNCTION pASignedTformat9239_AST9239:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed9240_AI16S9240;
		 pASignedTformat9239_AST9239:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9238_ATP9238:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype9238_ATP9238:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9237_APT9237:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9237_APT9237:=nil;
		 pAPredeclaredtypeTypeprim9237_APT9237:=myrec;
		END;
	FUNCTION pAOptionalsign9243_AO9243:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9243_AO9243:=nil;
		 pAOptionalsign9243_AO9243:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9242_AIN9242:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber9242_AIN9242:=myrec;
		END;
	FUNCTION pAArray9241_AA9241:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9241_AA9241:=nil;
		 pAArray9241_AA9241:=myrec;
		END;
	FUNCTION pAArrayType9236_AAT9236:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,4 );
		 pAArrayType9236_AAT9236:=myrec;
		END;
	FUNCTION pAReference9235_AR9235:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType9236_AAT9236;
		 pAReference9235_AR9235:=myrec;
		END;
	FUNCTION pAReftypeType9234_ART9234:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference9235_AR9235;
		 pAReftypeType9234_ART9234:=myrec;
		END;
	FUNCTION pAIdLoc9244_AIL9244:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc9244_AIL9244:=myrec;
		END;
	FUNCTION pARefcastRefval9233_ARR9233:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType9234_ART9234;
		myrec^.arg2:=pAIdLoc9244_AIL9244;
		 pARefcastRefval9233_ARR9233:=myrec;
		END;
	FUNCTION pASigned9254_AS9254:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32;
		 pASigned9254_AS9254:=myrec;
		END;
	FUNCTION pASignedTformat9253_AST9253:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pASigned9254_AS9254;
		 pASignedTformat9253_AST9253:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9252_ATP9252:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint32 ;
		 pATformatPredeclaredtype9252_ATP9252:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9251_APT9251:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9251_APT9251:=nil;
		 pAPredeclaredtypeTypeprim9251_APT9251:=myrec;
		END;
	FUNCTION pAOptionalsign9257_AO9257:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9257_AO9257:=nil;
		 pAOptionalsign9257_AO9257:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9256_AIN9256:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=4 ;
		 pAIntegerNumber9256_AIN9256:=myrec;
		END;
	FUNCTION pAArray9255_AA9255:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9255_AA9255:=nil;
		 pAArray9255_AA9255:=myrec;
		END;
	FUNCTION pAArrayType9250_AAT9250:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint32 ,4 );
		 pAArrayType9250_AAT9250:=myrec;
		END;
	FUNCTION pAReference9249_AR9249:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType9250_AAT9250;
		 pAReference9249_AR9249:=myrec;
		END;
	FUNCTION pAReftypeType9248_ART9248:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference9249_AR9249;
		 pAReftypeType9248_ART9248:=myrec;
		END;
	FUNCTION pAIdLoc9260_AIL9260:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9260_AIL9260:=myrec;
		END;
	FUNCTION pALocValue9259_ALV9259:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9260_AIL9260;
		 pALocValue9259_ALV9259:=myrec;
		END;
	FUNCTION pAMemoryLoc9258_AML9258:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pALocValue9259_ALV9259;
		 pAMemoryLoc9258_AML9258:=myrec;
		END;
	FUNCTION pARefcastRefval9247_ARR9247:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType9248_ART9248;
		myrec^.arg2:=pAMemoryLoc9258_AML9258;
		 pARefcastRefval9247_ARR9247:=myrec;
		END;
	FUNCTION pADerefRhs9246_ADR9246:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval9247_ARR9247;
		 pADerefRhs9246_ADR9246:=myrec;
		END;
	FUNCTION pARhsValue9245_ARV9245:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9246_ADR9246;
		 pARhsValue9245_ARV9245:=myrec;
		END;
	FUNCTION pAAssign9232_AA9232:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue9245_ARV9245;
		myrec^.dest:=pARefcastRefval9233_ARR9233;
		 pAAssign9232_AA9232:=myrec;
		END;
	FUNCTION pAAssignMeaning9231_AAM9231:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign9232_AA9232;
		 pAAssignMeaning9231_AAM9231:=myrec;
		END;
	FUNCTION pAAssemblypattern9262_AA9262:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movq ' );
		pappendp(list,1);
		pappends(list,',[' );
		pappendp(list,0);
		pappends(list,']\n packssdw ' );
		pappendp(list,1);
		pappends(list,',[' );
		pappendp(list,0);
		pappends(list,'+8]' );
		pAAssemblypattern9262_AA9262:=list;
		END;
	FUNCTION pAAssemblesto9261_AA9261:pprintlist;
	begin
		pAAssemblesto9261_AA9261:=pAAssemblypattern9262_AA9262;
		END;
	FUNCTION pASideeffects9272_AS9272:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects9272_AS9272:=nil;
		 pASideeffects9272_AS9272:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond9273_AUP9273:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond9273_AUP9273:=nil;
		 pAUnconditionalPrecond9273_AUP9273:=myrec;
		END;
	FUNCTION PACKSSDW_PACKSSDW:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patmreg_;
		params^[0]:=patreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning9231_AAM9231;
		matchedAssembler:=pAAssemblesto9261_AA9261;
		END;
		PACKSSDW_PACKSSDW:=myrec;
	END;
	FUNCTION pATypeid9276_AT9276:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9276_AT9276:=myrec;
		END;
	FUNCTION pATypeid9278_AT9278:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ im8reg  ilcg.pattern@694a18}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9278_AT9278:=myrec;
		END;
	FUNCTION pAInt8Signed9288_AI8S9288:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8;
		 pAInt8Signed9288_AI8S9288:=myrec;
		END;
	FUNCTION pASignedTformat9287_AST9287:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt8Signed9288_AI8S9288;
		 pASignedTformat9287_AST9287:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9286_ATP9286:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint8 ;
		 pATformatPredeclaredtype9286_ATP9286:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9285_APT9285:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9285_APT9285:=nil;
		 pAPredeclaredtypeTypeprim9285_APT9285:=myrec;
		END;
	FUNCTION pAOptionalsign9291_AO9291:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9291_AO9291:=nil;
		 pAOptionalsign9291_AO9291:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9290_AIN9290:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9290_AIN9290:=myrec;
		END;
	FUNCTION pAArray9289_AA9289:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9289_AA9289:=nil;
		 pAArray9289_AA9289:=myrec;
		END;
	FUNCTION pAArrayType9284_AAT9284:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint8 ,8 );
		 pAArrayType9284_AAT9284:=myrec;
		END;
	FUNCTION pAReference9283_AR9283:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType9284_AAT9284;
		 pAReference9283_AR9283:=myrec;
		END;
	FUNCTION pAReftypeType9282_ART9282:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference9283_AR9283;
		 pAReftypeType9282_ART9282:=myrec;
		END;
	FUNCTION pAIdLoc9292_AIL9292:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc9292_AIL9292:=myrec;
		END;
	FUNCTION pARefcastRefval9281_ARR9281:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType9282_ART9282;
		myrec^.arg2:=pAIdLoc9292_AIL9292;
		 pARefcastRefval9281_ARR9281:=myrec;
		END;
	FUNCTION pAInt16Signed9302_AI16S9302:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed9302_AI16S9302:=myrec;
		END;
	FUNCTION pASignedTformat9301_AST9301:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed9302_AI16S9302;
		 pASignedTformat9301_AST9301:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9300_ATP9300:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype9300_ATP9300:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9299_APT9299:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9299_APT9299:=nil;
		 pAPredeclaredtypeTypeprim9299_APT9299:=myrec;
		END;
	FUNCTION pAOptionalsign9305_AO9305:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9305_AO9305:=nil;
		 pAOptionalsign9305_AO9305:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9304_AIN9304:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9304_AIN9304:=myrec;
		END;
	FUNCTION pAArray9303_AA9303:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9303_AA9303:=nil;
		 pAArray9303_AA9303:=myrec;
		END;
	FUNCTION pAArrayType9298_AAT9298:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,8 );
		 pAArrayType9298_AAT9298:=myrec;
		END;
	FUNCTION pAReference9297_AR9297:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType9298_AAT9298;
		 pAReference9297_AR9297:=myrec;
		END;
	FUNCTION pAReftypeType9296_ART9296:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference9297_AR9297;
		 pAReftypeType9296_ART9296:=myrec;
		END;
	FUNCTION pAIdLoc9308_AIL9308:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9308_AIL9308:=myrec;
		END;
	FUNCTION pALocValue9307_ALV9307:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9308_AIL9308;
		 pALocValue9307_ALV9307:=myrec;
		END;
	FUNCTION pAMemoryLoc9306_AML9306:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pALocValue9307_ALV9307;
		 pAMemoryLoc9306_AML9306:=myrec;
		END;
	FUNCTION pARefcastRefval9295_ARR9295:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType9296_ART9296;
		myrec^.arg2:=pAMemoryLoc9306_AML9306;
		 pARefcastRefval9295_ARR9295:=myrec;
		END;
	FUNCTION pADerefRhs9294_ADR9294:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval9295_ARR9295;
		 pADerefRhs9294_ADR9294:=myrec;
		END;
	FUNCTION pARhsValue9293_ARV9293:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9294_ADR9294;
		 pARhsValue9293_ARV9293:=myrec;
		END;
	FUNCTION pAAssign9280_AA9280:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue9293_ARV9293;
		myrec^.dest:=pARefcastRefval9281_ARR9281;
		 pAAssign9280_AA9280:=myrec;
		END;
	FUNCTION pAAssignMeaning9279_AAM9279:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign9280_AA9280;
		 pAAssignMeaning9279_AAM9279:=myrec;
		END;
	FUNCTION pAAssemblypattern9310_AA9310:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movq ' );
		pappendp(list,1);
		pappends(list,',[' );
		pappendp(list,0);
		pappends(list,']\n packsswb ' );
		pappendp(list,1);
		pappends(list,',[' );
		pappendp(list,0);
		pappends(list,'+8]' );
		pAAssemblypattern9310_AA9310:=list;
		END;
	FUNCTION pAAssemblesto9309_AA9309:pprintlist;
	begin
		pAAssemblesto9309_AA9309:=pAAssemblypattern9310_AA9310;
		END;
	FUNCTION pASideeffects9320_AS9320:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects9320_AS9320:=nil;
		 pASideeffects9320_AS9320:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond9321_AUP9321:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond9321_AUP9321:=nil;
		 pAUnconditionalPrecond9321_AUP9321:=myrec;
		END;
	FUNCTION PACKSSWB_PACKSSWB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patim8reg_8;
		params^[0]:=patreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning9279_AAM9279;
		matchedAssembler:=pAAssemblesto9309_AA9309;
		END;
		PACKSSWB_PACKSSWB:=myrec;
	END;
	FUNCTION pATypeid9324_AT9324:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ reg  ilcg.pattern@360c93}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9324_AT9324:=myrec;
		END;
	FUNCTION pATypeid9326_AT9326:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ mreg  ilcg.pattern@27d316}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9326_AT9326:=myrec;
		END;
	FUNCTION pAUint8Unsigned9336_AU8U9336:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8;
		 pAUint8Unsigned9336_AU8U9336:=myrec;
		END;
	FUNCTION pAUnsignedTformat9335_AUT9335:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAUint8Unsigned9336_AU8U9336;
		 pAUnsignedTformat9335_AUT9335:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9334_ATP9334:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fuint8 ;
		 pATformatPredeclaredtype9334_ATP9334:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9333_APT9333:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9333_APT9333:=nil;
		 pAPredeclaredtypeTypeprim9333_APT9333:=myrec;
		END;
	FUNCTION pAOptionalsign9339_AO9339:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9339_AO9339:=nil;
		 pAOptionalsign9339_AO9339:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9338_AIN9338:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9338_AIN9338:=myrec;
		END;
	FUNCTION pAArray9337_AA9337:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9337_AA9337:=nil;
		 pAArray9337_AA9337:=myrec;
		END;
	FUNCTION pAArrayType9332_AAT9332:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fuint8 ,8 );
		 pAArrayType9332_AAT9332:=myrec;
		END;
	FUNCTION pAReference9331_AR9331:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType9332_AAT9332;
		 pAReference9331_AR9331:=myrec;
		END;
	FUNCTION pAReftypeType9330_ART9330:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference9331_AR9331;
		 pAReftypeType9330_ART9330:=myrec;
		END;
	FUNCTION pAIdLoc9340_AIL9340:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(1);
		 pAIdLoc9340_AIL9340:=myrec;
		END;
	FUNCTION pARefcastRefval9329_ARR9329:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType9330_ART9330;
		myrec^.arg2:=pAIdLoc9340_AIL9340;
		 pARefcastRefval9329_ARR9329:=myrec;
		END;
	FUNCTION pAInt16Signed9350_AI16S9350:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16;
		 pAInt16Signed9350_AI16S9350:=myrec;
		END;
	FUNCTION pASignedTformat9349_AST9349:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAInt16Signed9350_AI16S9350;
		 pASignedTformat9349_AST9349:=myrec;
		END;
		(*! recognises a predeclared type *)
	FUNCTION pATformatPredeclaredtype9348_ATP9348:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=fint16 ;
		 pATformatPredeclaredtype9348_ATP9348:=myrec;
		END;
	FUNCTION pAPredeclaredtypeTypeprim9347_APT9347:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAPredeclaredtypeTypeprim9347_APT9347:=nil;
		 pAPredeclaredtypeTypeprim9347_APT9347:=myrec;
		END;
	FUNCTION pAOptionalsign9353_AO9353:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAOptionalsign9353_AO9353:=nil;
		 pAOptionalsign9353_AO9353:=myrec;
		END;
		(*! recognises an integer literal in number context *)
	FUNCTION pAIntegerNumber9352_AIN9352:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=intlit;
		myrec^.intlitarg:=8 ;
		 pAIntegerNumber9352_AIN9352:=myrec;
		END;
	FUNCTION pAArray9351_AA9351:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAArray9351_AA9351:=nil;
		 pAArray9351_AA9351:=myrec;
		END;
	FUNCTION pAArrayType9346_AAT9346:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=format;
		myrec^.formatarg:=vectorof(fint16 ,8 );
		 pAArrayType9346_AAT9346:=myrec;
		END;
	FUNCTION pAReference9345_AR9345:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=ref;
		myrec^.arg:=pAArrayType9346_AAT9346;
		 pAReference9345_AR9345:=myrec;
		END;
	FUNCTION pAReftypeType9344_ART9344:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAReference9345_AR9345;
		 pAReftypeType9344_ART9344:=myrec;
		END;
	FUNCTION pAIdLoc9356_AIL9356:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=buildparamref(0);
		 pAIdLoc9356_AIL9356:=myrec;
		END;
	FUNCTION pALocValue9355_ALV9355:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAIdLoc9356_AIL9356;
		 pALocValue9355_ALV9355:=myrec;
		END;
	FUNCTION pAMemoryLoc9354_AML9354:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=memref;
		myrec^.arg:=pALocValue9355_ALV9355;
		 pAMemoryLoc9354_AML9354:=myrec;
		END;
	FUNCTION pARefcastRefval9343_ARR9343:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=typecast;
		myrec^.arg:=pAReftypeType9344_ART9344;
		myrec^.arg2:=pAMemoryLoc9354_AML9354;
		 pARefcastRefval9343_ARR9343:=myrec;
		END;
	FUNCTION pADerefRhs9342_ADR9342:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
				myrec^.tag:=deref;
				myrec^.arg:=pARefcastRefval9343_ARR9343;
		 pADerefRhs9342_ADR9342:=myrec;
		END;
	FUNCTION pARhsValue9341_ARV9341:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pADerefRhs9342_ADR9342;
		 pARhsValue9341_ARV9341:=myrec;
		END;
	FUNCTION pAAssign9328_AA9328:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec^.tag:=assignop;
		myrec^.src:=pARhsValue9341_ARV9341;
		myrec^.dest:=pARefcastRefval9329_ARR9329;
		 pAAssign9328_AA9328:=myrec;
		END;
	FUNCTION pAAssignMeaning9327_AAM9327:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pAAssign9328_AA9328;
		 pAAssignMeaning9327_AAM9327:=myrec;
		END;
	FUNCTION pAAssemblypattern9358_AA9358:pprintlist;
	 var list:pprintlist;
	begin
		list:=nil;
		pappends(list,'movq ' );
		pappendp(list,1);
		pappends(list,',[' );
		pappendp(list,0);
		pappends(list,']\n packuswb ' );
		pappendp(list,1);
		pappends(list,',[' );
		pappendp(list,0);
		pappends(list,'+8]' );
		pAAssemblypattern9358_AA9358:=list;
		END;
	FUNCTION pAAssemblesto9357_AA9357:pprintlist;
	begin
		pAAssemblesto9357_AA9357:=pAAssemblypattern9358_AA9358;
		END;
	FUNCTION pASideeffects9368_AS9368:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pASideeffects9368_AS9368:=nil;
		 pASideeffects9368_AS9368:=myrec;
		END;
	FUNCTION pAUnconditionalPrecond9369_AUP9369:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
pAUnconditionalPrecond9369_AUP9369:=nil;
		 pAUnconditionalPrecond9369_AUP9369:=myrec;
		END;
	FUNCTION PACKUSWB_PACKUSWB:ppattern;
		VAR myrec:ppattern;
	BEGIN
		new(myrec);
		WITH myrec^ DO BEGIN
		params^[1]:=patmreg_;
		params^[0]:=patreg_;
		paramcount:=3;
		meaning:=pAAssignMeaning9327_AAM9327;
		matchedAssembler:=pAAssemblesto9357_AA9357;
		END;
		PACKUSWB_PACKUSWB:=myrec;
	END;
	FUNCTION pATypeid9372_AT9372:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ IFLITGOTO  ilcg.pattern@6545fa}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9372_AT9372:=myrec;
		END;
	FUNCTION pATypeidType9371_ATT9371:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9372_AT9372;
		 pATypeidType9371_ATT9371:=myrec;
		END;
	FUNCTION pATypeid9374_AT9374:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ LOAD  ilcg.pattern@187e1e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9374_AT9374:=myrec;
		END;
	FUNCTION pATypeidType9373_ATT9373:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9374_AT9374;
		 pATypeidType9373_ATT9373:=myrec;
		END;
	FUNCTION pATypeid9376_AT9376:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVZXB  ilcg.pattern@5714de}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9376_AT9376:=myrec;
		END;
	FUNCTION pATypeidType9375_ATT9375:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9376_AT9376;
		 pATypeidType9375_ATT9375:=myrec;
		END;
	FUNCTION pATypeid9378_AT9378:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVSXB  ilcg.pattern@61bfee}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9378_AT9378:=myrec;
		END;
	FUNCTION pATypeidType9377_ATT9377:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9378_AT9378;
		 pATypeidType9377_ATT9377:=myrec;
		END;
	FUNCTION pATypeid9380_AT9380:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVZXW  ilcg.pattern@4a17d8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9380_AT9380:=myrec;
		END;
	FUNCTION pATypeidType9379_ATT9379:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9380_AT9380;
		 pATypeidType9379_ATT9379:=myrec;
		END;
	FUNCTION pATypeid9382_AT9382:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVSXW  ilcg.pattern@15c2b4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9382_AT9382:=myrec;
		END;
	FUNCTION pATypeidType9381_ATT9381:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9382_AT9382;
		 pATypeidType9381_ATT9381:=myrec;
		END;
	FUNCTION pATypeid9384_AT9384:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVZXB2  ilcg.pattern@1212f4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9384_AT9384:=myrec;
		END;
	FUNCTION pATypeidType9383_ATT9383:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9384_AT9384;
		 pATypeidType9383_ATT9383:=myrec;
		END;
	FUNCTION pATypeid9386_AT9386:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVZXBW  ilcg.pattern@4cd32e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9386_AT9386:=myrec;
		END;
	FUNCTION pATypeidType9385_ATT9385:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9386_AT9386;
		 pATypeidType9385_ATT9385:=myrec;
		END;
	FUNCTION pATypeid9388_AT9388:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVSXBW  ilcg.pattern@6e523d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9388_AT9388:=myrec;
		END;
	FUNCTION pATypeidType9387_ATT9387:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9388_AT9388;
		 pATypeidType9387_ATT9387:=myrec;
		END;
	FUNCTION pATypeid9390_AT9390:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ CLEARREG  ilcg.pattern@41f9f6}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9390_AT9390:=myrec;
		END;
	FUNCTION pATypeidType9389_ATT9389:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9390_AT9390;
		 pATypeidType9389_ATT9389:=myrec;
		END;
	FUNCTION pATypeid9392_AT9392:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ STORELIT  ilcg.pattern@494b8f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9392_AT9392:=myrec;
		END;
	FUNCTION pATypeidType9391_ATT9391:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9392_AT9392;
		 pATypeidType9391_ATT9391:=myrec;
		END;
	FUNCTION pATypeid9394_AT9394:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ LEA  ilcg.pattern@7281f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9394_AT9394:=myrec;
		END;
	FUNCTION pATypeidType9393_ATT9393:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9394_AT9394;
		 pATypeidType9393_ATT9393:=myrec;
		END;
	FUNCTION pATypeid9396_AT9396:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ INC  ilcg.pattern@3e49a8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9396_AT9396:=myrec;
		END;
	FUNCTION pATypeidType9395_ATT9395:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9396_AT9396;
		 pATypeidType9395_ATT9395:=myrec;
		END;
	FUNCTION pATypeid9398_AT9398:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ RMLIT  ilcg.pattern@6fa7ec}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9398_AT9398:=myrec;
		END;
	FUNCTION pATypeidType9397_ATT9397:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9398_AT9398;
		 pATypeidType9397_ATT9397:=myrec;
		END;
	FUNCTION pATypeid9400_AT9400:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ RMR  ilcg.pattern@2e306c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9400_AT9400:=myrec;
		END;
	FUNCTION pATypeidType9399_ATT9399:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9400_AT9400;
		 pATypeidType9399_ATT9399:=myrec;
		END;
	FUNCTION pATypeid9402_AT9402:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ DEC  ilcg.pattern@5c51c8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9402_AT9402:=myrec;
		END;
	FUNCTION pATypeidType9401_ATT9401:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9402_AT9402;
		 pATypeidType9401_ATT9401:=myrec;
		END;
	FUNCTION pATypeid9404_AT9404:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ IMULLIT  ilcg.pattern@19eb89}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9404_AT9404:=myrec;
		END;
	FUNCTION pATypeidType9403_ATT9403:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9404_AT9404;
		 pATypeidType9403_ATT9403:=myrec;
		END;
	FUNCTION pATypeid9406_AT9406:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BIMUL  ilcg.pattern@171f66}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9406_AT9406:=myrec;
		END;
	FUNCTION pATypeidType9405_ATT9405:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9406_AT9406;
		 pATypeidType9405_ATT9405:=myrec;
		END;
	FUNCTION pATypeid9408_AT9408:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ RLIT  ilcg.pattern@11c755}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9408_AT9408:=myrec;
		END;
	FUNCTION pATypeidType9407_ATT9407:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9408_AT9408;
		 pATypeidType9407_ATT9407:=myrec;
		END;
	FUNCTION pATypeid9410_AT9410:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ RRM  ilcg.pattern@1cfefb}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9410_AT9410:=myrec;
		END;
	FUNCTION pATypeidType9409_ATT9409:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9410_AT9410;
		 pATypeidType9409_ATT9409:=myrec;
		END;
	FUNCTION pATypeid9412_AT9412:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ RMRB  ilcg.pattern@76e542}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9412_AT9412:=myrec;
		END;
	FUNCTION pATypeidType9411_ATT9411:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9412_AT9412;
		 pATypeidType9411_ATT9411:=myrec;
		END;
	FUNCTION pATypeid9414_AT9414:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ iRR  ilcg.pattern@2971e3}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9414_AT9414:=myrec;
		END;
	FUNCTION pATypeidType9413_ATT9413:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9414_AT9414;
		 pATypeidType9413_ATT9413:=myrec;
		END;
	FUNCTION pATypeid9416_AT9416:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ RR  ilcg.pattern@60c0b6}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9416_AT9416:=myrec;
		END;
	FUNCTION pATypeidType9415_ATT9415:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9416_AT9416;
		 pATypeidType9415_ATT9415:=myrec;
		END;
	FUNCTION pATypeid9418_AT9418:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ DIV8  ilcg.pattern@47c57c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9418_AT9418:=myrec;
		END;
	FUNCTION pATypeidType9417_ATT9417:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9418_AT9418;
		 pATypeidType9417_ATT9417:=myrec;
		END;
	FUNCTION pATypeid9420_AT9420:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ IDIV  ilcg.pattern@616021}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9420_AT9420:=myrec;
		END;
	FUNCTION pATypeidType9419_ATT9419:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9420_AT9420;
		 pATypeidType9419_ATT9419:=myrec;
		END;
	FUNCTION pATypeid9422_AT9422:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fastBIDIV  ilcg.pattern@579e35}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9422_AT9422:=myrec;
		END;
	FUNCTION pATypeidType9421_ATT9421:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9422_AT9422;
		 pATypeidType9421_ATT9421:=myrec;
		END;
	FUNCTION pATypeid9424_AT9424:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BIDIV  ilcg.pattern@5af109}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9424_AT9424:=myrec;
		END;
	FUNCTION pATypeidType9423_ATT9423:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9424_AT9424;
		 pATypeidType9423_ATT9423:=myrec;
		END;
	FUNCTION pATypeid9426_AT9426:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ UDIV  ilcg.pattern@421ab0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9426_AT9426:=myrec;
		END;
	FUNCTION pATypeidType9425_ATT9425:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9426_AT9426;
		 pATypeidType9425_ATT9425:=myrec;
		END;
	FUNCTION pATypeid9428_AT9428:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOD2  ilcg.pattern@654dec}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9428_AT9428:=myrec;
		END;
	FUNCTION pATypeidType9427_ATT9427:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9428_AT9428;
		 pATypeidType9427_ATT9427:=myrec;
		END;
	FUNCTION pATypeid9430_AT9430:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOD4  ilcg.pattern@56dbdd}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9430_AT9430:=myrec;
		END;
	FUNCTION pATypeidType9429_ATT9429:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9430_AT9430;
		 pATypeidType9429_ATT9429:=myrec;
		END;
	FUNCTION pATypeid9432_AT9432:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOD8  ilcg.pattern@7f1907}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9432_AT9432:=myrec;
		END;
	FUNCTION pATypeidType9431_ATT9431:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9432_AT9432;
		 pATypeidType9431_ATT9431:=myrec;
		END;
	FUNCTION pATypeid9434_AT9434:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOD16  ilcg.pattern@3088f8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9434_AT9434:=myrec;
		END;
	FUNCTION pATypeidType9433_ATT9433:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9434_AT9434;
		 pATypeidType9433_ATT9433:=myrec;
		END;
	FUNCTION pATypeid9436_AT9436:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ IMOD  ilcg.pattern@4e374a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9436_AT9436:=myrec;
		END;
	FUNCTION pATypeidType9435_ATT9435:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9436_AT9436;
		 pATypeidType9435_ATT9435:=myrec;
		END;
	FUNCTION pATypeid9438_AT9438:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ UMOD  ilcg.pattern@280fb8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9438_AT9438:=myrec;
		END;
	FUNCTION pATypeidType9437_ATT9437:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9438_AT9438;
		 pATypeidType9437_ATT9437:=myrec;
		END;
	FUNCTION pATypeid9440_AT9440:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ fastIMUL  ilcg.pattern@7b4a7b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9440_AT9440:=myrec;
		END;
	FUNCTION pATypeidType9439_ATT9439:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9440_AT9440;
		 pATypeidType9439_ATT9439:=myrec;
		END;
	FUNCTION pATypeid9442_AT9442:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ Negate  ilcg.pattern@5d8897}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9442_AT9442:=myrec;
		END;
	FUNCTION pATypeidType9441_ATT9441:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9442_AT9442;
		 pATypeidType9441_ATT9441:=myrec;
		END;
	FUNCTION pATypeid9444_AT9444:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ NOTOP  ilcg.pattern@63c132}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9444_AT9444:=myrec;
		END;
	FUNCTION pATypeidType9443_ATT9443:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9444_AT9444;
		 pATypeidType9443_ATT9443:=myrec;
		END;
	FUNCTION pATypeid9446_AT9446:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MNegate  ilcg.pattern@17aadf}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9446_AT9446:=myrec;
		END;
	FUNCTION pATypeidType9445_ATT9445:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9446_AT9446;
		 pATypeidType9445_ATT9445:=myrec;
		END;
	FUNCTION pATypeid9448_AT9448:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BTS  ilcg.pattern@5bfe9c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9448_AT9448:=myrec;
		END;
	FUNCTION pATypeidType9447_ATT9447:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9448_AT9448;
		 pATypeidType9447_ATT9447:=myrec;
		END;
	FUNCTION pATypeid9450_AT9450:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ TESTIN  ilcg.pattern@91732}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9450_AT9450:=myrec;
		END;
	FUNCTION pATypeidType9449_ATT9449:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9450_AT9450;
		 pATypeidType9449_ATT9449:=myrec;
		END;
	FUNCTION pATypeid9452_AT9452:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SHIFT  ilcg.pattern@3b087c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9452_AT9452:=myrec;
		END;
	FUNCTION pATypeidType9451_ATT9451:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9452_AT9452;
		 pATypeidType9451_ATT9451:=myrec;
		END;
	FUNCTION pATypeid9454_AT9454:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ UINT8MAX  ilcg.pattern@61e946}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9454_AT9454:=myrec;
		END;
	FUNCTION pATypeidType9453_ATT9453:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9454_AT9454;
		 pATypeidType9453_ATT9453:=myrec;
		END;
	FUNCTION pATypeid9456_AT9456:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ UINT8MIN  ilcg.pattern@5aa9f1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9456_AT9456:=myrec;
		END;
	FUNCTION pATypeidType9455_ATT9455:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9456_AT9456;
		 pATypeidType9455_ATT9455:=myrec;
		END;
	FUNCTION pATypeid9458_AT9458:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ INT8MAX  ilcg.pattern@55c657}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9458_AT9458:=myrec;
		END;
	FUNCTION pATypeidType9457_ATT9457:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9458_AT9458;
		 pATypeidType9457_ATT9457:=myrec;
		END;
	FUNCTION pATypeid9460_AT9460:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ INT8MIN  ilcg.pattern@458364}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9460_AT9460:=myrec;
		END;
	FUNCTION pATypeidType9459_ATT9459:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9460_AT9460;
		 pATypeidType9459_ATT9459:=myrec;
		END;
	FUNCTION pATypeid9462_AT9462:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SELECT  ilcg.pattern@7673cc}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9462_AT9462:=myrec;
		END;
	FUNCTION pATypeidType9461_ATT9461:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9462_AT9462;
		 pATypeidType9461_ATT9461:=myrec;
		END;
	FUNCTION pATypeid9464_AT9464:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PLANT  ilcg.pattern@6e7cee}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9464_AT9464:=myrec;
		END;
	FUNCTION pATypeidType9463_ATT9463:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9464_AT9464;
		 pATypeidType9463_ATT9463:=myrec;
		END;
	FUNCTION pATypeid9466_AT9466:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ LITPUSH  ilcg.pattern@35c12e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9466_AT9466:=myrec;
		END;
	FUNCTION pATypeidType9465_ATT9465:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9466_AT9466;
		 pATypeidType9465_ATT9465:=myrec;
		END;
	FUNCTION pATypeid9468_AT9468:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MEMPUSH  ilcg.pattern@6f2b7f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9468_AT9468:=myrec;
		END;
	FUNCTION pATypeidType9467_ATT9467:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9468_AT9468;
		 pATypeidType9467_ATT9467:=myrec;
		END;
	FUNCTION pATypeid9470_AT9470:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SET  ilcg.pattern@5d63c9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9470_AT9470:=myrec;
		END;
	FUNCTION pATypeidType9469_ATT9469:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9470_AT9470;
		 pATypeidType9469_ATT9469:=myrec;
		END;
	FUNCTION pATypeid9472_AT9472:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SETU  ilcg.pattern@33aa7b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9472_AT9472:=myrec;
		END;
	FUNCTION pATypeidType9471_ATT9471:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9472_AT9472;
		 pATypeidType9471_ATT9471:=myrec;
		END;
	FUNCTION pATypeid9474_AT9474:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ToBYTE  ilcg.pattern@51817d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9474_AT9474:=myrec;
		END;
	FUNCTION pATypeidType9473_ATT9473:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9474_AT9474;
		 pATypeidType9473_ATT9473:=myrec;
		END;
	FUNCTION pATypeid9476_AT9476:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ IFASS  ilcg.pattern@3b1937}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9476_AT9476:=myrec;
		END;
	FUNCTION pATypeidType9475_ATT9475:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9476_AT9476;
		 pATypeidType9475_ATT9475:=myrec;
		END;
	FUNCTION pATypeid9478_AT9478:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ANDIFGOTO  ilcg.pattern@1f167a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9478_AT9478:=myrec;
		END;
	FUNCTION pATypeidType9477_ATT9477:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9478_AT9478;
		 pATypeidType9477_ATT9477:=myrec;
		END;
	FUNCTION pATypeid9480_AT9480:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ IFLITGOTO  ilcg.pattern@6545fa}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9480_AT9480:=myrec;
		END;
	FUNCTION pATypeidType9479_ATT9479:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9480_AT9480;
		 pATypeidType9479_ATT9479:=myrec;
		END;
	FUNCTION pATypeid9482_AT9482:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BIFLITGOTO  ilcg.pattern@56be89}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9482_AT9482:=myrec;
		END;
	FUNCTION pATypeidType9481_ATT9481:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9482_AT9482;
		 pATypeidType9481_ATT9481:=myrec;
		END;
	FUNCTION pATypeid9484_AT9484:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ IFIN  ilcg.pattern@7011c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9484_AT9484:=myrec;
		END;
	FUNCTION pATypeidType9483_ATT9483:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9484_AT9484;
		 pATypeidType9483_ATT9483:=myrec;
		END;
	FUNCTION pATypeid9486_AT9486:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ IFGOTO  ilcg.pattern@1e80b1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9486_AT9486:=myrec;
		END;
	FUNCTION pATypeidType9485_ATT9485:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9486_AT9486;
		 pATypeidType9485_ATT9485:=myrec;
		END;
	FUNCTION pATypeid9488_AT9488:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ IFGOTOB  ilcg.pattern@107c2f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9488_AT9488:=myrec;
		END;
	FUNCTION pATypeidType9487_ATT9487:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9488_AT9488;
		 pATypeidType9487_ATT9487:=myrec;
		END;
	FUNCTION pATypeid9490_AT9490:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ IFGOTOW  ilcg.pattern@30bd0a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9490_AT9490:=myrec;
		END;
	FUNCTION pATypeidType9489_ATT9489:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9490_AT9490;
		 pATypeidType9489_ATT9489:=myrec;
		END;
	FUNCTION pATypeid9492_AT9492:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ GOTO  ilcg.pattern@7fefc9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9492_AT9492:=myrec;
		END;
	FUNCTION pATypeidType9491_ATT9491:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9492_AT9492;
		 pATypeidType9491_ATT9491:=myrec;
		END;
	FUNCTION pATypeid9494_AT9494:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FAIL  ilcg.pattern@12eceb}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9494_AT9494:=myrec;
		END;
	FUNCTION pATypeidType9493_ATT9493:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9494_AT9494;
		 pATypeidType9493_ATT9493:=myrec;
		END;
	FUNCTION pATypeid9496_AT9496:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BOUND4  ilcg.pattern@581af3}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9496_AT9496:=myrec;
		END;
	FUNCTION pATypeidType9495_ATT9495:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9496_AT9496;
		 pATypeidType9495_ATT9495:=myrec;
		END;
	FUNCTION pATypeid9498_AT9498:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BOUND0  ilcg.pattern@201a5c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9498_AT9498:=myrec;
		END;
	FUNCTION pATypeidType9497_ATT9497:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9498_AT9498;
		 pATypeidType9497_ATT9497:=myrec;
		END;
	FUNCTION pATypeid9500_AT9500:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BOUND16  ilcg.pattern@139acf}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9500_AT9500:=myrec;
		END;
	FUNCTION pATypeidType9499_ATT9499:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9500_AT9500;
		 pATypeidType9499_ATT9499:=myrec;
		END;
	FUNCTION pATypeid9502_AT9502:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PLANTBCONST  ilcg.pattern@732927}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9502_AT9502:=myrec;
		END;
	FUNCTION pATypeidType9501_ATT9501:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9502_AT9502;
		 pATypeidType9501_ATT9501:=myrec;
		END;
	FUNCTION pATypeid9504_AT9504:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PLANTWCONST  ilcg.pattern@be298}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9504_AT9504:=myrec;
		END;
	FUNCTION pATypeidType9503_ATT9503:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9504_AT9504;
		 pATypeidType9503_ATT9503:=myrec;
		END;
	FUNCTION pATypeid9506_AT9506:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PLANTICONST  ilcg.pattern@592304}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9506_AT9506:=myrec;
		END;
	FUNCTION pATypeidType9505_ATT9505:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9506_AT9506;
		 pATypeidType9505_ATT9505:=myrec;
		END;
	FUNCTION pATypeid9508_AT9508:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PLANTRCONST  ilcg.pattern@3be4e1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9508_AT9508:=myrec;
		END;
	FUNCTION pATypeidType9507_ATT9507:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9508_AT9508;
		 pATypeidType9507_ATT9507:=myrec;
		END;
	FUNCTION pATypeid9510_AT9510:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PLANTSCONST  ilcg.pattern@2284af}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9510_AT9510:=myrec;
		END;
	FUNCTION pATypeidType9509_ATT9509:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9510_AT9510;
		 pATypeidType9509_ATT9509:=myrec;
		END;
	FUNCTION pATypeid9512_AT9512:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ REPMOVSB  ilcg.pattern@6dc8f0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9512_AT9512:=myrec;
		END;
	FUNCTION pATypeidType9511_ATT9511:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9512_AT9512;
		 pATypeidType9511_ATT9511:=myrec;
		END;
	FUNCTION pATypeid9514_AT9514:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ REPMOVSD  ilcg.pattern@6eefcf}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9514_AT9514:=myrec;
		END;
	FUNCTION pATypeidType9513_ATT9513:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9514_AT9514;
		 pATypeidType9513_ATT9513:=myrec;
		END;
	FUNCTION pATypeid9516_AT9516:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ADDUSB  ilcg.pattern@6e0054}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9516_AT9516:=myrec;
		END;
	FUNCTION pATypeidType9515_ATT9515:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9516_AT9516;
		 pATypeidType9515_ATT9515:=myrec;
		END;
	FUNCTION pATypeid9518_AT9518:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SUBUSB  ilcg.pattern@259e26}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9518_AT9518:=myrec;
		END;
	FUNCTION pATypeidType9517_ATT9517:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9518_AT9518;
		 pATypeidType9517_ATT9517:=myrec;
		END;
	FUNCTION pATypeid9520_AT9520:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ADDSSB  ilcg.pattern@307663}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9520_AT9520:=myrec;
		END;
	FUNCTION pATypeidType9519_ATT9519:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9520_AT9520;
		 pATypeidType9519_ATT9519:=myrec;
		END;
	FUNCTION pATypeid9522_AT9522:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SUBSSB  ilcg.pattern@592141}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9522_AT9522:=myrec;
		END;
	FUNCTION pATypeidType9521_ATT9521:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9522_AT9522;
		 pATypeidType9521_ATT9521:=myrec;
		END;
	FUNCTION pATypeid9524_AT9524:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MULTSSB  ilcg.pattern@399c02}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9524_AT9524:=myrec;
		END;
	FUNCTION pATypeidType9523_ATT9523:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9524_AT9524;
		 pATypeidType9523_ATT9523:=myrec;
		END;
	FUNCTION pATypeid9526_AT9526:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MULTSSBAL  ilcg.pattern@583882}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9526_AT9526:=myrec;
		END;
	FUNCTION pATypeidType9525_ATT9525:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9526_AT9526;
		 pATypeidType9525_ATT9525:=myrec;
		END;
	FUNCTION pATypeid9528_AT9528:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ RPUSH  ilcg.pattern@29dff4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9528_AT9528:=myrec;
		END;
	FUNCTION pATypeidType9527_ATT9527:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9528_AT9528;
		 pATypeidType9527_ATT9527:=myrec;
		END;
	FUNCTION pATypeid9530_AT9530:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ REFPUSH  ilcg.pattern@46b7ee}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9530_AT9530:=myrec;
		END;
	FUNCTION pATypeidType9529_ATT9529:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9530_AT9530;
		 pATypeidType9529_ATT9529:=myrec;
		END;
	FUNCTION pATypeid9532_AT9532:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SDEREF  ilcg.pattern@5612fc}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9532_AT9532:=myrec;
		END;
	FUNCTION pATypeidType9531_ATT9531:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9532_AT9532;
		 pATypeidType9531_ATT9531:=myrec;
		END;
	FUNCTION pATypeid9534_AT9534:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SDEREFDOUBLEWORD  ilcg.pattern@558dfe}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9534_AT9534:=myrec;
		END;
	FUNCTION pATypeidType9533_ATT9533:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9534_AT9534;
		 pATypeidType9533_ATT9533:=myrec;
		END;
	FUNCTION pATypeid9536_AT9536:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ IFBOOL  ilcg.pattern@39358c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9536_AT9536:=myrec;
		END;
	FUNCTION pATypeidType9535_ATT9535:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9536_AT9536;
		 pATypeidType9535_ATT9535:=myrec;
		END;
	FUNCTION pATypeid9538_AT9538:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SMLIT  ilcg.pattern@54f3b3}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9538_AT9538:=myrec;
		END;
	FUNCTION pATypeidType9537_ATT9537:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9538_AT9538;
		 pATypeidType9537_ATT9537:=myrec;
		END;
	FUNCTION pATypeid9540_AT9540:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SMRP  ilcg.pattern@5b0f40}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9540_AT9540:=myrec;
		END;
	FUNCTION pATypeidType9539_ATT9539:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9540_AT9540;
		 pATypeidType9539_ATT9539:=myrec;
		END;
	FUNCTION pATypeid9542_AT9542:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SADD  ilcg.pattern@124f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9542_AT9542:=myrec;
		END;
	FUNCTION pATypeidType9541_ATT9541:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9542_AT9542;
		 pATypeidType9541_ATT9541:=myrec;
		END;
	FUNCTION pATypeid9544_AT9544:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SMULIT  ilcg.pattern@3c6542}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9544_AT9544:=myrec;
		END;
	FUNCTION pATypeidType9543_ATT9543:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9544_AT9544;
		 pATypeidType9543_ATT9543:=myrec;
		END;
	FUNCTION pATypeid9546_AT9546:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SMRADD  ilcg.pattern@6909e0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9546_AT9546:=myrec;
		END;
	FUNCTION pATypeidType9545_ATT9545:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9546_AT9546;
		 pATypeidType9545_ATT9545:=myrec;
		END;
	FUNCTION pATypeid9548_AT9548:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SOP  ilcg.pattern@35a415}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9548_AT9548:=myrec;
		END;
	FUNCTION pATypeidType9547_ATT9547:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9548_AT9548;
		 pATypeidType9547_ATT9547:=myrec;
		END;
	FUNCTION pATypeid9550_AT9550:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SMR  ilcg.pattern@1ad677}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9550_AT9550:=myrec;
		END;
	FUNCTION pATypeidType9549_ATT9549:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9550_AT9550;
		 pATypeidType9549_ATT9549:=myrec;
		END;
	FUNCTION pATypeid9552_AT9552:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BSMR  ilcg.pattern@c115}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9552_AT9552:=myrec;
		END;
	FUNCTION pATypeidType9551_ATT9551:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9552_AT9552;
		 pATypeidType9551_ATT9551:=myrec;
		END;
	FUNCTION pATypeid9554_AT9554:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ STOREWR  ilcg.pattern@207c1c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9554_AT9554:=myrec;
		END;
	FUNCTION pATypeidType9553_ATT9553:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9554_AT9554;
		 pATypeidType9553_ATT9553:=myrec;
		END;
	FUNCTION pATypeid9556_AT9556:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ STORER  ilcg.pattern@233fe3}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9556_AT9556:=myrec;
		END;
	FUNCTION pATypeidType9555_ATT9555:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9556_AT9556;
		 pATypeidType9555_ATT9555:=myrec;
		END;
	FUNCTION pATypeid9558_AT9558:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ STOREBR  ilcg.pattern@787ee7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9558_AT9558:=myrec;
		END;
	FUNCTION pATypeidType9557_ATT9557:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9558_AT9558;
		 pATypeidType9557_ATT9557:=myrec;
		END;
	FUNCTION pATypeid9560_AT9560:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ STACKLOAD  ilcg.pattern@82100}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9560_AT9560:=myrec;
		END;
	FUNCTION pATypeidType9559_ATT9559:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9560_AT9560;
		 pATypeidType9559_ATT9559:=myrec;
		END;
	FUNCTION pATypeid9562_AT9562:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ REFPOP  ilcg.pattern@69a11f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9562_AT9562:=myrec;
		END;
	FUNCTION pATypeidType9561_ATT9561:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9562_AT9562;
		 pATypeidType9561_ATT9561:=myrec;
		END;
	FUNCTION pATypeid9564_AT9564:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MEMPOP  ilcg.pattern@15df3f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9564_AT9564:=myrec;
		END;
	FUNCTION pATypeidType9563_ATT9563:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9564_AT9564;
		 pATypeidType9563_ATT9563:=myrec;
		END;
	FUNCTION pATypeid9566_AT9566:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BPOP  ilcg.pattern@641957}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9566_AT9566:=myrec;
		END;
	FUNCTION pATypeidType9565_ATT9565:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9566_AT9566;
		 pATypeidType9565_ATT9565:=myrec;
		END;
	FUNCTION pATypeid9568_AT9568:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BSPOP  ilcg.pattern@434fd9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9568_AT9568:=myrec;
		END;
	FUNCTION pATypeidType9567_ATT9567:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9568_AT9568;
		 pATypeidType9567_ATT9567:=myrec;
		END;
	FUNCTION pATypeid9570_AT9570:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BSPUSH  ilcg.pattern@513f05}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9570_AT9570:=myrec;
		END;
	FUNCTION pATypeidType9569_ATT9569:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9570_AT9570;
		 pATypeidType9569_ATT9569:=myrec;
		END;
	FUNCTION pATypeid9572_AT9572:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ DMEMPUSH  ilcg.pattern@9e5f0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9572_AT9572:=myrec;
		END;
	FUNCTION pATypeidType9571_ATT9571:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9572_AT9572;
		 pATypeidType9571_ATT9571:=myrec;
		END;
	FUNCTION pATypeid9574_AT9574:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ RPUSHE  ilcg.pattern@b00d5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9574_AT9574:=myrec;
		END;
	FUNCTION pATypeidType9573_ATT9573:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9574_AT9574;
		 pATypeidType9573_ATT9573:=myrec;
		END;
	FUNCTION pATypeid9576_AT9576:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ BPUSH  ilcg.pattern@1a4ab}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9576_AT9576:=myrec;
		END;
	FUNCTION pATypeidType9575_ATT9575:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9576_AT9576;
		 pATypeidType9575_ATT9575:=myrec;
		END;
	FUNCTION pATypeid9578_AT9578:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ STACKSTORE  ilcg.pattern@6ec0c5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9578_AT9578:=myrec;
		END;
	FUNCTION pATypeidType9577_ATT9577:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9578_AT9578;
		 pATypeidType9577_ATT9577:=myrec;
		END;
	FUNCTION pATypeid9580_AT9580:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ STACKWSTORE  ilcg.pattern@6dbcef}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9580_AT9580:=myrec;
		END;
	FUNCTION pATypeidType9579_ATT9579:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9580_AT9580;
		 pATypeidType9579_ATT9579:=myrec;
		END;
	FUNCTION pATypeid9582_AT9582:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ STACKBSTORE  ilcg.pattern@5b0bc6}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9582_AT9582:=myrec;
		END;
	FUNCTION pATypeidType9581_ATT9581:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9582_AT9582;
		 pATypeidType9581_ATT9581:=myrec;
		END;
	FUNCTION pATypeid9584_AT9584:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ RPOP  ilcg.pattern@134c4b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9584_AT9584:=myrec;
		END;
	FUNCTION pATypeidType9583_ATT9583:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9584_AT9584;
		 pATypeidType9583_ATT9583:=myrec;
		END;
	FUNCTION pATypeid9586_AT9586:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SMRSHIFT  ilcg.pattern@3bddbf}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9586_AT9586:=myrec;
		END;
	FUNCTION pATypeidType9585_ATT9585:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9586_AT9586;
		 pATypeidType9585_ATT9585:=myrec;
		END;
	FUNCTION pATypeid9588_AT9588:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FCHS  ilcg.pattern@7b9223}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9588_AT9588:=myrec;
		END;
	FUNCTION pATypeidType9587_ATT9587:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9588_AT9588;
		 pATypeidType9587_ATT9587:=myrec;
		END;
	FUNCTION pATypeid9590_AT9590:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FOPF  ilcg.pattern@135779}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9590_AT9590:=myrec;
		END;
	FUNCTION pATypeidType9589_ATT9589:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9590_AT9590;
		 pATypeidType9589_ATT9589:=myrec;
		END;
	FUNCTION pATypeid9592_AT9592:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FLOADLIT  ilcg.pattern@55e778}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9592_AT9592:=myrec;
		END;
	FUNCTION pATypeidType9591_ATT9591:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9592_AT9592;
		 pATypeidType9591_ATT9591:=myrec;
		END;
	FUNCTION pATypeid9594_AT9594:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FILOADLIT  ilcg.pattern@980b7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9594_AT9594:=myrec;
		END;
	FUNCTION pATypeidType9593_ATT9593:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9594_AT9594;
		 pATypeidType9593_ATT9593:=myrec;
		END;
	FUNCTION pATypeid9596_AT9596:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FMAX  ilcg.pattern@403bcd}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9596_AT9596:=myrec;
		END;
	FUNCTION pATypeidType9595_ATT9595:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9596_AT9596;
		 pATypeidType9595_ATT9595:=myrec;
		END;
	FUNCTION pATypeid9598_AT9598:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FMIN  ilcg.pattern@3536e6}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9598_AT9598:=myrec;
		END;
	FUNCTION pATypeidType9597_ATT9597:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9598_AT9598;
		 pATypeidType9597_ATT9597:=myrec;
		END;
	FUNCTION pATypeid9600_AT9600:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FLD  ilcg.pattern@77e11b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9600_AT9600:=myrec;
		END;
	FUNCTION pATypeidType9599_ATT9599:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9600_AT9600;
		 pATypeidType9599_ATT9599:=myrec;
		END;
	FUNCTION pATypeid9602_AT9602:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FLDF  ilcg.pattern@737611}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9602_AT9602:=myrec;
		END;
	FUNCTION pATypeidType9601_ATT9601:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9602_AT9602;
		 pATypeidType9601_ATT9601:=myrec;
		END;
	FUNCTION pATypeid9604_AT9604:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FILDF  ilcg.pattern@294813}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9604_AT9604:=myrec;
		END;
	FUNCTION pATypeidType9603_ATT9603:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9604_AT9604;
		 pATypeidType9603_ATT9603:=myrec;
		END;
	FUNCTION pATypeid9606_AT9606:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FILD  ilcg.pattern@227edd}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9606_AT9606:=myrec;
		END;
	FUNCTION pATypeidType9605_ATT9605:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9606_AT9606;
		 pATypeidType9605_ATT9605:=myrec;
		END;
	FUNCTION pATypeid9608_AT9608:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FILDF  ilcg.pattern@294813}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9608_AT9608:=myrec;
		END;
	FUNCTION pATypeidType9607_ATT9607:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9608_AT9608;
		 pATypeidType9607_ATT9607:=myrec;
		END;
	FUNCTION pATypeid9610_AT9610:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FLOADDLIT  ilcg.pattern@14dd0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9610_AT9610:=myrec;
		END;
	FUNCTION pATypeidType9609_ATT9609:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9610_AT9610;
		 pATypeidType9609_ATT9609:=myrec;
		END;
	FUNCTION pATypeid9612_AT9612:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FILDB  ilcg.pattern@63430}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9612_AT9612:=myrec;
		END;
	FUNCTION pATypeidType9611_ATT9611:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9612_AT9612;
		 pATypeidType9611_ATT9611:=myrec;
		END;
	FUNCTION pATypeid9614_AT9614:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FILDR  ilcg.pattern@3f47df}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9614_AT9614:=myrec;
		END;
	FUNCTION pATypeidType9613_ATT9613:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9614_AT9614;
		 pATypeidType9613_ATT9613:=myrec;
		END;
	FUNCTION pATypeid9616_AT9616:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ ReversePolishFOP  ilcg.pattern@20ae6d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9616_AT9616:=myrec;
		END;
	FUNCTION pATypeidType9615_ATT9615:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9616_AT9616;
		 pATypeidType9615_ATT9615:=myrec;
		END;
	FUNCTION pATypeid9618_AT9618:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FMOP  ilcg.pattern@4a128d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9618_AT9618:=myrec;
		END;
	FUNCTION pATypeidType9617_ATT9617:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9618_AT9618;
		 pATypeidType9617_ATT9617:=myrec;
		END;
	FUNCTION pATypeid9620_AT9620:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FPREM  ilcg.pattern@1caed5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9620_AT9620:=myrec;
		END;
	FUNCTION pATypeidType9619_ATT9619:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9620_AT9620;
		 pATypeidType9619_ATT9619:=myrec;
		END;
	FUNCTION pATypeid9622_AT9622:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FOP  ilcg.pattern@94e9c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9622_AT9622:=myrec;
		END;
	FUNCTION pATypeidType9621_ATT9621:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9622_AT9622;
		 pATypeidType9621_ATT9621:=myrec;
		END;
	FUNCTION pATypeid9624_AT9624:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FOPI  ilcg.pattern@3a994b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9624_AT9624:=myrec;
		END;
	FUNCTION pATypeidType9623_ATT9623:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9624_AT9624;
		 pATypeidType9623_ATT9623:=myrec;
		END;
	FUNCTION pATypeid9626_AT9626:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FOPII  ilcg.pattern@47b21b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9626_AT9626:=myrec;
		END;
	FUNCTION pATypeidType9625_ATT9625:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9626_AT9626;
		 pATypeidType9625_ATT9625:=myrec;
		END;
	FUNCTION pATypeid9628_AT9628:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ RMULTB  ilcg.pattern@1b2dc6}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9628_AT9628:=myrec;
		END;
	FUNCTION pATypeidType9627_ATT9627:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9628_AT9628;
		 pATypeidType9627_ATT9627:=myrec;
		END;
	FUNCTION pATypeid9630_AT9630:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FPOPMSI64  ilcg.pattern@14214b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9630_AT9630:=myrec;
		END;
	FUNCTION pATypeidType9629_ATT9629:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9630_AT9630;
		 pATypeidType9629_ATT9629:=myrec;
		END;
	FUNCTION pATypeid9632_AT9632:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FISTR  ilcg.pattern@4b8f9}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9632_AT9632:=myrec;
		END;
	FUNCTION pATypeidType9631_ATT9631:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9632_AT9632;
		 pATypeidType9631_ATT9631:=myrec;
		END;
	FUNCTION pATypeid9634_AT9634:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FSTR  ilcg.pattern@210afa}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9634_AT9634:=myrec;
		END;
	FUNCTION pATypeidType9633_ATT9633:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9634_AT9634;
		 pATypeidType9633_ATT9633:=myrec;
		END;
	FUNCTION pATypeid9636_AT9636:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FSTRF  ilcg.pattern@1c0042}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9636_AT9636:=myrec;
		END;
	FUNCTION pATypeidType9635_ATT9635:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9636_AT9636;
		 pATypeidType9635_ATT9635:=myrec;
		END;
	FUNCTION pATypeid9638_AT9638:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FLOATMS  ilcg.pattern@1b12e1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9638_AT9638:=myrec;
		END;
	FUNCTION pATypeidType9637_ATT9637:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9638_AT9638;
		 pATypeidType9637_ATT9637:=myrec;
		END;
	FUNCTION pATypeid9640_AT9640:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FILDIP  ilcg.pattern@644d85}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9640_AT9640:=myrec;
		END;
	FUNCTION pATypeidType9639_ATT9639:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9640_AT9640;
		 pATypeidType9639_ATT9639:=myrec;
		END;
	FUNCTION pATypeid9642_AT9642:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ EXTENDMS  ilcg.pattern@3e6d4}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9642_AT9642:=myrec;
		END;
	FUNCTION pATypeidType9641_ATT9641:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9642_AT9642;
		 pATypeidType9641_ATT9641:=myrec;
		END;
	FUNCTION pATypeid9644_AT9644:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FIFGOTO  ilcg.pattern@620c7}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9644_AT9644:=myrec;
		END;
	FUNCTION pATypeidType9643_ATT9643:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9644_AT9644;
		 pATypeidType9643_ATT9643:=myrec;
		END;
	FUNCTION pATypeid9646_AT9646:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FIFGOTOgeneral  ilcg.pattern@7dfa36}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9646_AT9646:=myrec;
		END;
	FUNCTION pATypeidType9645_ATT9645:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9646_AT9646;
		 pATypeidType9645_ATT9645:=myrec;
		END;
	FUNCTION pATypeid9648_AT9648:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FSET  ilcg.pattern@260657}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9648_AT9648:=myrec;
		END;
	FUNCTION pATypeidType9647_ATT9647:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9648_AT9648;
		 pATypeidType9647_ATT9647:=myrec;
		END;
	FUNCTION pATypeid9650_AT9650:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ DPOPMS  ilcg.pattern@6284ab}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9650_AT9650:=myrec;
		END;
	FUNCTION pATypeidType9649_ATT9649:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9650_AT9650;
		 pATypeidType9649_ATT9649:=myrec;
		END;
	FUNCTION pATypeid9652_AT9652:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FPOPMS  ilcg.pattern@2e38bd}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9652_AT9652:=myrec;
		END;
	FUNCTION pATypeidType9651_ATT9651:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9652_AT9652;
		 pATypeidType9651_ATT9651:=myrec;
		END;
	FUNCTION pATypeid9654_AT9654:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FISTB  ilcg.pattern@2adc2d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9654_AT9654:=myrec;
		END;
	FUNCTION pATypeidType9653_ATT9653:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9654_AT9654;
		 pATypeidType9653_ATT9653:=myrec;
		END;
	FUNCTION pATypeid9656_AT9656:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FPUSHI  ilcg.pattern@23c69a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9656_AT9656:=myrec;
		END;
	FUNCTION pATypeidType9655_ATT9655:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9656_AT9656;
		 pATypeidType9655_ATT9655:=myrec;
		END;
	FUNCTION pATypeid9658_AT9658:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FPUSHD  ilcg.pattern@447dd5}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9658_AT9658:=myrec;
		END;
	FUNCTION pATypeidType9657_ATT9657:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9658_AT9658;
		 pATypeidType9657_ATT9657:=myrec;
		END;
	FUNCTION pATypeid9660_AT9660:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ FPUSHF  ilcg.pattern@6655d8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9660_AT9660:=myrec;
		END;
	FUNCTION pATypeidType9659_ATT9659:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9660_AT9660;
		 pATypeidType9659_ATT9659:=myrec;
		END;
	FUNCTION pATypeid9662_AT9662:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PADDD  ilcg.pattern@6cb1b2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9662_AT9662:=myrec;
		END;
	FUNCTION pATypeidType9661_ATT9661:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9662_AT9662;
		 pATypeidType9661_ATT9661:=myrec;
		END;
	FUNCTION pATypeid9664_AT9664:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PADDW  ilcg.pattern@5dcf43}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9664_AT9664:=myrec;
		END;
	FUNCTION pATypeidType9663_ATT9663:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9664_AT9664;
		 pATypeidType9663_ATT9663:=myrec;
		END;
	FUNCTION pATypeid9666_AT9666:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PADDB  ilcg.pattern@5acc2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9666_AT9666:=myrec;
		END;
	FUNCTION pATypeidType9665_ATT9665:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9666_AT9666;
		 pATypeidType9665_ATT9665:=myrec;
		END;
	FUNCTION pATypeid9668_AT9668:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PADDSB  ilcg.pattern@44a2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9668_AT9668:=myrec;
		END;
	FUNCTION pATypeidType9667_ATT9667:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9668_AT9668;
		 pATypeidType9667_ATT9667:=myrec;
		END;
	FUNCTION pATypeid9670_AT9670:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PADDSB3  ilcg.pattern@75de2f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9670_AT9670:=myrec;
		END;
	FUNCTION pATypeidType9669_ATT9669:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9670_AT9670;
		 pATypeidType9669_ATT9669:=myrec;
		END;
	FUNCTION pATypeid9672_AT9672:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PADDUSB  ilcg.pattern@23d5c3}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9672_AT9672:=myrec;
		END;
	FUNCTION pATypeidType9671_ATT9671:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9672_AT9672;
		 pATypeidType9671_ATT9671:=myrec;
		END;
	FUNCTION pATypeid9674_AT9674:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PADDUB  ilcg.pattern@450701}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9674_AT9674:=myrec;
		END;
	FUNCTION pATypeidType9673_ATT9673:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9674_AT9674;
		 pATypeidType9673_ATT9673:=myrec;
		END;
	FUNCTION pATypeid9676_AT9676:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SPADDSB  ilcg.pattern@6b1670}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9676_AT9676:=myrec;
		END;
	FUNCTION pATypeidType9675_ATT9675:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9676_AT9676;
		 pATypeidType9675_ATT9675:=myrec;
		END;
	FUNCTION pATypeid9678_AT9678:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SPADDUSB  ilcg.pattern@468663}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9678_AT9678:=myrec;
		END;
	FUNCTION pATypeidType9677_ATT9677:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9678_AT9678;
		 pATypeidType9677_ATT9677:=myrec;
		END;
	FUNCTION pATypeid9680_AT9680:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SPADDUB  ilcg.pattern@46530}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9680_AT9680:=myrec;
		END;
	FUNCTION pATypeidType9679_ATT9679:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9680_AT9680;
		 pATypeidType9679_ATT9679:=myrec;
		END;
	FUNCTION pATypeid9682_AT9682:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PACKSSDW  ilcg.pattern@79eb8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9682_AT9682:=myrec;
		END;
	FUNCTION pATypeidType9681_ATT9681:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9682_AT9682;
		 pATypeidType9681_ATT9681:=myrec;
		END;
	FUNCTION pATypeid9684_AT9684:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PACKSSWB  ilcg.pattern@7f9a48}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9684_AT9684:=myrec;
		END;
	FUNCTION pATypeidType9683_ATT9683:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9684_AT9684;
		 pATypeidType9683_ATT9683:=myrec;
		END;
	FUNCTION pATypeid9686_AT9686:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PACKUSWB  ilcg.pattern@147864}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9686_AT9686:=myrec;
		END;
	FUNCTION pATypeidType9685_ATT9685:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9686_AT9686;
		 pATypeidType9685_ATT9685:=myrec;
		END;
	FUNCTION pATypeid9688_AT9688:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ CMPEQB  ilcg.pattern@248adb}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9688_AT9688:=myrec;
		END;
	FUNCTION pATypeidType9687_ATT9687:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9688_AT9688;
		 pATypeidType9687_ATT9687:=myrec;
		END;
	FUNCTION pATypeid9690_AT9690:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ CMPGTB  ilcg.pattern@631ef2}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9690_AT9690:=myrec;
		END;
	FUNCTION pATypeidType9689_ATT9689:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9690_AT9690;
		 pATypeidType9689_ATT9689:=myrec;
		END;
	FUNCTION pATypeid9692_AT9692:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ CMPGTBR  ilcg.pattern@695d95}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9692_AT9692:=myrec;
		END;
	FUNCTION pATypeidType9691_ATT9691:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9692_AT9692;
		 pATypeidType9691_ATT9691:=myrec;
		END;
	FUNCTION pATypeid9694_AT9694:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ SPSUBD  ilcg.pattern@3c2950}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9694_AT9694:=myrec;
		END;
	FUNCTION pATypeidType9693_ATT9693:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9694_AT9694;
		 pATypeidType9693_ATT9693:=myrec;
		END;
	FUNCTION pATypeid9696_AT9696:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PSUBW  ilcg.pattern@6c006e}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9696_AT9696:=myrec;
		END;
	FUNCTION pATypeidType9695_ATT9695:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9696_AT9696;
		 pATypeidType9695_ATT9695:=myrec;
		END;
	FUNCTION pATypeid9698_AT9698:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PSUBB  ilcg.pattern@5bab83}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9698_AT9698:=myrec;
		END;
	FUNCTION pATypeidType9697_ATT9697:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9698_AT9698;
		 pATypeidType9697_ATT9697:=myrec;
		END;
	FUNCTION pATypeid9700_AT9700:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PSUBSB  ilcg.pattern@64b53d}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9700_AT9700:=myrec;
		END;
	FUNCTION pATypeidType9699_ATT9699:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9700_AT9700;
		 pATypeidType9699_ATT9699:=myrec;
		END;
	FUNCTION pATypeid9702_AT9702:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PSUBUSB  ilcg.pattern@43f750}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9702_AT9702:=myrec;
		END;
	FUNCTION pATypeidType9701_ATT9701:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9702_AT9702;
		 pATypeidType9701_ATT9701:=myrec;
		END;
	FUNCTION pATypeid9704_AT9704:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PSUBUB  ilcg.pattern@115870}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9704_AT9704:=myrec;
		END;
	FUNCTION pATypeidType9703_ATT9703:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9704_AT9704;
		 pATypeidType9703_ATT9703:=myrec;
		END;
	FUNCTION pATypeid9706_AT9706:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ POR  ilcg.pattern@5347c3}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9706_AT9706:=myrec;
		END;
	FUNCTION pATypeidType9705_ATT9705:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9706_AT9706;
		 pATypeidType9705_ATT9705:=myrec;
		END;
	FUNCTION pATypeid9708_AT9708:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PAND  ilcg.pattern@11f1f}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9708_AT9708:=myrec;
		END;
	FUNCTION pATypeidType9707_ATT9707:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9708_AT9708;
		 pATypeidType9707_ATT9707:=myrec;
		END;
	FUNCTION pATypeid9710_AT9710:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PANDN  ilcg.pattern@e398}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9710_AT9710:=myrec;
		END;
	FUNCTION pATypeidType9709_ATT9709:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9710_AT9710;
		 pATypeidType9709_ATT9709:=myrec;
		END;
	FUNCTION pATypeid9712_AT9712:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PMULLSSB  ilcg.pattern@15272a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9712_AT9712:=myrec;
		END;
	FUNCTION pATypeidType9711_ATT9711:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9712_AT9712;
		 pATypeidType9711_ATT9711:=myrec;
		END;
	FUNCTION pATypeid9714_AT9714:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ PMULLW  ilcg.pattern@497e4b}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9714_AT9714:=myrec;
		END;
	FUNCTION pATypeidType9713_ATT9713:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9714_AT9714;
		 pATypeidType9713_ATT9713:=myrec;
		END;
	FUNCTION pATypeid9716_AT9716:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVDS  ilcg.pattern@7af9c1}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9716_AT9716:=myrec;
		END;
	FUNCTION pATypeidType9715_ATT9715:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9716_AT9716;
		 pATypeidType9715_ATT9715:=myrec;
		END;
	FUNCTION pATypeid9718_AT9718:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVDL  ilcg.pattern@48a027}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9718_AT9718:=myrec;
		END;
	FUNCTION pATypeidType9717_ATT9717:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9718_AT9718;
		 pATypeidType9717_ATT9717:=myrec;
		END;
	FUNCTION pATypeid9720_AT9720:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVQS  ilcg.pattern@4ebf1c}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9720_AT9720:=myrec;
		END;
	FUNCTION pATypeidType9719_ATT9719:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9720_AT9720;
		 pATypeidType9719_ATT9719:=myrec;
		END;
	FUNCTION pATypeid9722_AT9722:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVQL  ilcg.pattern@7aaf5a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9722_AT9722:=myrec;
		END;
	FUNCTION pATypeidType9721_ATT9721:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9722_AT9722;
		 pATypeidType9721_ATT9721:=myrec;
		END;
	FUNCTION pATypeid9724_AT9724:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVQLR  ilcg.pattern@7a5848}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9724_AT9724:=myrec;
		END;
	FUNCTION pATypeidType9723_ATT9723:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9724_AT9724;
		 pATypeidType9723_ATT9723:=myrec;
		END;
	FUNCTION pATypeid9726_AT9726:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVOCTUINTS  ilcg.pattern@46fed0}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9726_AT9726:=myrec;
		END;
	FUNCTION pATypeidType9725_ATT9725:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9726_AT9726;
		 pATypeidType9725_ATT9725:=myrec;
		END;
	FUNCTION pATypeid9728_AT9728:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVOCTUINTL  ilcg.pattern@1e5879}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9728_AT9728:=myrec;
		END;
	FUNCTION pATypeidType9727_ATT9727:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9728_AT9728;
		 pATypeidType9727_ATT9727:=myrec;
		END;
	FUNCTION pATypeid9730_AT9730:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ REP2  ilcg.pattern@4e91f8}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9730_AT9730:=myrec;
		END;
	FUNCTION pATypeidType9729_ATT9729:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9730_AT9730;
		 pATypeidType9729_ATT9729:=myrec;
		END;
	FUNCTION pATypeid9732_AT9732:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ REP4  ilcg.pattern@19569a}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9732_AT9732:=myrec;
		END;
	FUNCTION pATypeidType9731_ATT9731:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9732_AT9732;
		 pATypeidType9731_ATT9731:=myrec;
		END;
	FUNCTION pATypeid9734_AT9734:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ REP8  ilcg.pattern@69fb74}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9734_AT9734:=myrec;
		END;
	FUNCTION pATypeidType9733_ATT9733:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9734_AT9734;
		 pATypeidType9733_ATT9733:=myrec;
		END;
	FUNCTION pATypeid9736_AT9736:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MMXPUSH  ilcg.pattern@2d33f6}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9736_AT9736:=myrec;
		END;
	FUNCTION pATypeidType9735_ATT9735:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9736_AT9736;
		 pATypeidType9735_ATT9735:=myrec;
		END;
	FUNCTION pATypeid9738_AT9738:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		{ MOVQR  ilcg.pattern@258c89}
		myrec^.tag:=format;
		myrec^.formatarg:=(0+2);
		 pATypeid9738_AT9738:=myrec;
		END;
	FUNCTION pATypeidType9737_ATT9737:pilcgnode;
		VAR myrec:pilcgnode;
	BEGIN
		new(myrec);
		myrec:=pATypeid9738_AT9738;
		 pATypeidType9737_ATT9737:=myrec;
		END;
		procedure predecp;begin

			pattype_^.meaning^.first:=271;
			pattype_^.meaning^.last:=282;
		new(patword_);
		new(patword_^.meaning);
		patword_^.meaning^.tag:=format;
		patword_^.meaning^.formatarg:=fword;
		patword_^.matchedassembler:=string2printlist('DWORD');
		alternatives[271]:=patword_;
		new(patuint32_32);
		new(patuint32_32^.meaning);
		patuint32_32^.meaning^.tag:=format;
		patuint32_32^.meaning^.formatarg:=fuint32;
		patuint32_32^.matchedassembler:=string2printlist('DWORD');
		alternatives[272]:=patuint32_32;
		new(patint32_32);
		new(patint32_32^.meaning);
		patint32_32^.meaning^.tag:=format;
		patint32_32^.meaning^.formatarg:=fint32;
		patint32_32^.matchedassembler:=string2printlist('DWORD');
		alternatives[273]:=patint32_32;
		new(patieee64_64);
		new(patieee64_64^.meaning);
		patieee64_64^.meaning^.tag:=format;
		patieee64_64^.meaning^.formatarg:=fieee64;
		patieee64_64^.matchedassembler:=string2printlist('QWORD');
		alternatives[274]:=patieee64_64;
		new(patint64_64);
		new(patint64_64^.meaning);
		patint64_64^.meaning^.tag:=format;
		patint64_64^.meaning^.formatarg:=fint64;
		patint64_64^.matchedassembler:=string2printlist('QWORD');
		alternatives[275]:=patint64_64;
		new(patoctet_);
		new(patoctet_^.meaning);
		patoctet_^.meaning^.tag:=format;
		patoctet_^.meaning^.formatarg:=foctet;
		patoctet_^.matchedassembler:=string2printlist('BYTE');
		alternatives[276]:=patoctet_;
		new(patuint8_8);
		new(patuint8_8^.meaning);
		patuint8_8^.meaning^.tag:=format;
		patuint8_8^.meaning^.formatarg:=fuint8;
		patuint8_8^.matchedassembler:=string2printlist('BYTE');
		alternatives[277]:=patuint8_8;
		new(patint16_16);
		new(patint16_16^.meaning);
		patint16_16^.meaning^.tag:=format;
		patint16_16^.meaning^.formatarg:=fint16;
		patint16_16^.matchedassembler:=string2printlist('WORD');
		alternatives[278]:=patint16_16;
		new(patuint16_16);
		new(patuint16_16^.meaning);
		patuint16_16^.meaning^.tag:=format;
		patuint16_16^.meaning^.formatarg:=fuint16;
		patuint16_16^.matchedassembler:=string2printlist('WORD');
		alternatives[279]:=patuint16_16;
		new(patint8_8);
		new(patint8_8^.meaning);
		patint8_8^.meaning^.tag:=format;
		patint8_8^.meaning^.formatarg:=fint8;
		patint8_8^.matchedassembler:=string2printlist('BYTE');
		alternatives[280]:=patint8_8;
		new(patieee32_32);
		new(patieee32_32^.meaning);
		patieee32_32^.meaning^.tag:=format;
		patieee32_32^.meaning^.formatarg:=fieee32;
		patieee32_32^.matchedassembler:=string2printlist('DWORD');
		alternatives[281]:=patieee32_32;
		new(pathalfword_);
		new(pathalfword_^.meaning);
		pathalfword_^.meaning^.tag:=format;
		pathalfword_^.meaning^.formatarg:=fhalfword;
		pathalfword_^.matchedassembler:=string2printlist('WORD');
		alternatives[282]:=pathalfword_;
		end;
