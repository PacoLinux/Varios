// \begin{verbatim}
Package postfixilcg;

Helpers
  letter = [['A'..'Z']+['a'..'z']];
  digit = ['0'..'9'];
  alphanum = [letter+['0'..'9']];
  cr = 13;
  lf = 10;
  tab = 9;

  eol = cr lf | cr | lf;        // This takes care of different platforms


  not_cr_lf = [[32..127] - [cr + lf]];
  exponent = ('e'|'E');
  /* fp='FP';gp='GP';*/
  quote = ''';
  all =[0..127];
  schar = [all-'''];
  sign = '+' | '-';
   
    not_star = [all - '*'];
    not_star_slash = [not_star - '/'];

Tokens
  
 /* terminals specifying data formats */
 octet = 'octet'; int8 = 'int8'; uint8 = 'uint8';
 halfword = 'halfword'; int16 = 'int16' ; uint16 = 'uint16' ;
 word = 'word'; int32 = 'int32' ; 
 uint32 = 'uint32' ; ieee32 = 'ieee32';
 doubleword = 'doubleword'; int64 = 'int64' ; 
 uint64 = 'uint64'; ieee64 = 'ieee64';
 quadword = 'quadword';

 procedure='procedure';

 label = 'label';
 call = 'call';
 if = 'if';
 then = 'then';
 else = 'else';
 fi = 'fi';
 while = 'while';
/* terminals for describing new patterns */
 pattern = 'pattern';
 means = 'means';
  
 assembles = 'assembles'; 

/* terminals specifying operators */
 colon = ':';
 semicolon= ';';
 comma = ',';
 dot = '.' ;
 bra ='(';
 
 ket =')';
 plus = '+';
 cartesian = '#';
 equals = '=';
 le = '<=';
 ge='>=';
 lt='<';
 gt='>';
 ne='<>';
 minus = '-';
 times = '*';
 sideeffect='sideeffect';
 divide = 'div';
 and = 'AND';
 or = 'OR' ;
 xor = 'XOR';
 not = 'NOT';
 remainder = 'mod'; 
 assign = 'store';
 deref = '^';
 ref='ref';
 const='const';
 

 address = 'address';
 fp='fp';
 intlit = digit+;
 
 vbar = '|';
 sket=']';sbra='[';
 end='end';
 vector ='vector';
 mem='mem';
 for = 'for';
 string = quote schar+ quote;
/* identifiers come after reserved words in the grammar */
 identifier = letter alphanum*;
 exponentpart = exponent sign? digit+; 
 blank = (' '|cr|lf|tab)+;
 comment = '/*' not_star* '*'+ (not_star_slash not_star* '*'+)* '/';

Ignored Tokens 
	blank,comment;
Productions
 program = generator equals identifier semicolon statementlist ;
 
/* non terminals specifying data formats */
 format = {octet} octet| {halfword} halfword |
          {word} word | {doubleword} doubleword |
          {quadword} quadword|{tformat}tformat;
 
 
/* non terminals corresponding to type descriptions */

 type = {format} format |{array}type vector bra number ket|{reference}ref type;
 

 tformat = {signed} signed|{unsigned}unsigned|{ieee32}ieee32|{ieee63}ieee64;
 signed = int32 | {int8} int8 | {int16} int16 | {int64} int64;
 unsigned = uint32 | {uint8} uint8 | {uint16} uint16 | 
            {uint64} uint64;
   

/* non terminals corresponding to typed values */
 value = {refval}refval |
	{number}number|
         {call} bra valuelist ket identifier ;

 
 sylable = {value}value|
	{dyadic}dyadic |
	{monadic}monadic | 
	{cast}  bra type ket  |
	{assign} assign|{deref}deref;
 
 refval =  {fp} fp|{memory}mem type bra value ket   ;
 
 number =  {reallit}reallit|
           {integer}intlit;
 reallit	=[intpart]:intlit dot [fracpart]:intlit exponentpart?;
/* operators */ 
dyadic  = {plus} plus| 
	{minus} minus | 
        {times} times | 
	{divide}  divide|
	{lt}lt|
	{gt}gt|
	{le}le|
	{ge}ge|
	{eq}equals|
	{ne}ne|
        {remainder} remainder|
	{or}or|
	{and}and|
	{xor}xor;
monadic ={not}not;



/* statements */
statement = {words} words|
            {block} sbra bra number ket statementlist sket |
	    {proc}procedure identifier bra statementlist ket|
	    {for}for [induction]: value  from [start]:value to [stop]:value step [step]:value bra
			statementlist ket| 
	    {while} while value bra statementlist ket |
            {ifthen} if value then [then]:statementlist else [else]:statementlist fi
            ;
statementlist = statement statements*;
statements = semicolon statement;
valuelist =    value*;
 
wordlist = sylable words;
words = sylable*;

// \end{verbatim}


