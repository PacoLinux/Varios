unit opcodes;
{ Copyright (c) Paul Cockshott}
interface
type opcode = (
 addresssize,
 add_eax_ecx,
 add_eax_tos,
 and_eax_ecx,
 assindireax,
 assindirb,
 assindirc,
 assindiri,
 assindirp,
 assindirr,
 assindir_al,
 cmp_eax_ecx,
 cmpoppntr,
 cwdop,
 dupi,
 dupp,
 end_write,
 enterframe,
 exitframe,
 forprep,
 heappntr,
 heappopp,
 heappopreal,
 heappushp,
 heappushreal,
 idiv_ecx,
 imul_ecx,
 int18,
 int21,
 lindirb,
 lindirc,
 lindiri,
 lindirp,
 lindirr,
 minusop,
 movp,
 movr,
 mov_eax_esesi,
 mov_eax_esi,
 mov_ax_sp,
 mov_bp_sp,
 mov_bx_sp,
 mov_edi_eax,
 mov_es_dx,
 mov_es_ss,
 mov_esi_eax,
 multop,
 neg_op,
 not_op,
 no_op,
 or_eax_ecx,
 outbyte,
 plusop,
 popesesi,
 popes_movesieax,
 popp,
 popreal,
 pop_eax,
 pop_bx,
 pop_cx,
 pop_ecx,
 pop_es,
 pop_esi,
 procsize,
 prolog86,
 pushc_esesi,
 pushc_sssi,
 pushdisp,
 pushp,
 pushreal,
 push_eax,
 push_cs,
 push_bp,
 push_bx,
 push_edx,
 push_esesi,
 push_ss,
 push_sssi,
 realsize,
 shl_eax_cl,
 shrink,
 shr_eax_cl,
 stackpntr,
 start_paramsi,
 start_paramsp,
 start_paramsr,
 start_paramsv,
 start_write,
 stridesize,
 sub_eax_ecx,
 assindiril,
 llint,
 pluslint,
 subsassi,
 subsassr,
 subsi,
 subsr,
 lindira,
 assindira,
 call_glob,
 call_loc,
 add_eax,
 lea_eax,
 mov_eax,
 add_l_tos,
 add_sp,
 cmp_eax,
 ldsesi,
 dw,
 epilog,
 globali,
 globaleax,
 globaladdr,
 globalp,
 globalproc,
 globalr,
 lea_eax_glob,
 lea_esi_glob,
 locali,
 localeax,
 locplusi,
 locminusi,
 localaddr,
 localaddr_esi,
 localp,
 localproc,
 localr,
 getlev,
 globalassi,
 globalassr,
 globalassp,
 localassi,
 localassr,
 localassp,
 localmovi,
 localmovr,
 localmovp,
 discard_globali,
 pop_es_edi,
 push_es_esi,
 add_edi,
 add_esi,
 loadi,
 loadaddr,
 loadr,
 loadp,
 loadproc,
 assi,
 assr,
 assp,
 call_,
 prolog,
 db,
 assindirbl,
 jump,
 jumpt,
 jumptt,
 cjump,
 fortest,
 forstep,
 minfortest,
 minforstep,
 jl,
 jle,
 jg,
 jge,
 je,
 jnz,
 call_static,
 sspushfarpntr,
 llreal_op,
 cslea_eax,
 calld,
 intsize,
stringlit,reallit,trademark,plant_label);
opmnemonic=string[17];
opstr = string[50];
optype =(nonadic,monadic,dyadic,stringadic,byteadic,relative,byterel,abslabel);
const codeparams:array[opcode]of optype =(
{addresssize}nonadic,
{add_eax_ecx}nonadic,
{add_eax_tos}nonadic,
{and_eax_ecx}nonadic,
{assindireax}nonadic,
{assindirb}nonadic,
{assindirc}nonadic,
{assindiri}nonadic,
{assindirp}nonadic,
{assindirr}nonadic,
{assindir_al}nonadic,
{cmp_eax_ecx}nonadic,
{cmpoppntr}nonadic,
{cwdop}nonadic,
{dupi}nonadic,
{dupp}nonadic,
{end_write}nonadic,
{enterframe}nonadic,
{exitframe}nonadic,
{forprep}nonadic,
{heappntr}nonadic,
{heappopp}nonadic,
{heappopreal}nonadic,
{heappushp}nonadic,
{heappushreal}nonadic,
{idiv_ecx}nonadic,
{imul_ecx}nonadic,
{int18}nonadic,
{int21}nonadic,
{lindirb}nonadic,
{lindirc}nonadic,
{lindiri}nonadic,
{lindirp}nonadic,
{lindirr}nonadic,
{minusop}nonadic,
{movp}nonadic,
{movr}nonadic,
{mov_eax_esesi}nonadic,
{mov_eax_esi}nonadic,
{mov_ax_sp}nonadic,
{mov_bp_sp}nonadic,
{mov_bx_sp}nonadic,
{mov_edi_eax}nonadic,
{mov_es_dx}nonadic,
{mov_es_ss}nonadic,
{mov_esi_eax}nonadic,
{multop}nonadic,
{neg_op}nonadic,
{not_op}nonadic,
{no_op}nonadic,
{or_eax_ecx}nonadic,
{outbyte}nonadic,
{plusop}nonadic,
{popesesi}nonadic,
{popes_movesieax}nonadic,
{popp}nonadic,
{popreal}nonadic,
{pop_eax}nonadic,
{pop_bx}nonadic,
{pop_cx}nonadic,
{pop_ecx}nonadic,
{pop_es}nonadic,
{pop_esi}nonadic,
{procsize}nonadic,
{prolog86}nonadic,
{pushc_esesi}nonadic,
{pushc_sssi}nonadic,
{pushdisp}nonadic,
{pushp}nonadic,
{pushreal}nonadic,
{push_eax}nonadic,
{push_cs}nonadic,
{push_bp}nonadic,
{push_bx}nonadic,
{push_edx}nonadic,
{push_esesi}nonadic,
{push_ss}nonadic,
{push_sssi}nonadic,
{realsize}nonadic,
{shl_eax_cl}nonadic,
{shrink}nonadic,
{shr_eax_cl}nonadic,
{stackpntr}nonadic,
{start_paramsi}nonadic,
{start_paramsp}nonadic,
{start_paramsr}nonadic,
{start_paramsv}nonadic,
{start_write}nonadic,
{stridesize}nonadic,
{sub_eax_ecx}nonadic,
{assindiril}monadic,
{llint}monadic,
{pluslint}monadic,
{subsassi}monadic,
{subsassr}monadic,
{subsi}monadic,
{subsr}monadic,
{lindira}monadic,
{assindira}monadic,
{call_glob}monadic,
{call_loc}monadic,
{add_eax}monadic,
{lea_eax}monadic,
{mov_eax}monadic,
{add_l_tos}monadic,
{add_sp}monadic,
{cmp_eax}monadic,
{ldsesi}monadic,
{dw}monadic,
{epilog}monadic,
{globali}monadic,
{globaleax}monadic,
{globaladdr}monadic,
{globalp}monadic,
{globalproc}monadic,
{globalr}monadic,
{lea_eax_glob}monadic,
{lea_esi_glob}monadic,
{locali}monadic,
{localeax}monadic,
{locplusi}monadic,
{locminusi}monadic,
{localaddr}monadic,
{localaddr_esi}monadic,
{localp}monadic,
{localproc}monadic,
{localr}monadic,
{getlev}monadic,
{globalassi}monadic,
{globalassr}monadic,
{globalassp}monadic,
{localassi}monadic,
{localassr}monadic,
{localassp}monadic,
{localmovi}monadic,
{localmovr}monadic,
{localmovp}monadic,
{discard_globali}monadic,
{pop_es_edi}monadic,
{push_es_esi}monadic,
{add_edi}monadic,
{add_esi}monadic,
{loadi}dyadic,
{loadaddr}dyadic,
{loadr}dyadic,
{loadp}dyadic,
{loadproc}dyadic,
{assi}dyadic,
{assr}dyadic,
{assp}dyadic,
{call_}dyadic,
{prolog}byteadic,
{db}byteadic,
{assindirbl}byteadic,
{jump}relative,
{jumpt}relative,
{jumptt}relative,
{cjump}relative,
{fortest}relative,
{forstep}relative,
{minfortest}relative,
{minforstep}relative,
{jl}byterel,
{jle}byterel,
{jg}byterel,
{jge}byterel,
{je}byterel,
{jnz}byterel,
{call_static}abslabel,
{sspushfarpntr}abslabel,
{llreal_op}abslabel,
{cslea_eax}abslabel,
{calld}relative,
{intsize}nonadic,
nonadic,nonadic,nonadic,nonadic);
const codelits:array[opcode]of opmnemonic=(
'addresssize',
'add_eax_ecx',
'add_eax_tos',
'and_eax_ecx',
'assindireax',
'assindirb',
'assindirc',
'assindiri',
'assindirp',
'assindirr',
'assindir_al',
'cmp_eax_ecx',
'cmpoppntr',
'cwdop',
'dupi',
'dupp',
'end_write',
'enterframe',
'exitframe',
'forprep',
'heappntr',
'heappopp',
'heappopreal',
'heappushp',
'heappushreal',
'idiv_ecx',
'imul_ecx',
'int18',
'int21',
'lindirb',
'lindirc',
'lindiri',
'lindirp',
'lindirr',
'minusop',
'movp',
'movr',
'mov_eax_esesi',
'mov_eax_esi',
'mov_ax_sp',
'mov_bp_sp',
'mov_bx_sp',
'mov_edi_eax',
'mov_es_dx',
'mov_es_ss',
'mov_esi_eax',
'multop',
'neg_op',
'not_op',
'no_op',
'or_eax_ecx',
'outbyte',
'plusop',
'popesesi',
'popes_movesieax',
'popp',
'popreal',
'pop_eax',
'pop_bx',
'pop_cx',
'pop_ecx',
'pop_es',
'pop_esi',
'procsize',
'prolog86',
'pushc_esesi',
'pushc_sssi',
'pushdisp',
'pushp',
'pushreal',
'push_eax',
'push_cs',
'push_bp',
'push_bx',
'push_edx',
'push_esesi',
'push_ss',
'push_sssi',
'realsize',
'shl_eax_cl',
'shrink',
'shr_eax_cl',
'stackpntr',
'start_paramsi',
'start_paramsp',
'start_paramsr',
'start_paramsv',
'start_write',
'stridesize',
'sub_eax_ecx',
'assindiril',
'llint',
'pluslint',
'subsassi',
'subsassr',
'subsi',
'subsr',
'lindira',
'assindira',
'call_glob',
'call_loc',
'add_eax',
'lea_eax',
'mov_eax',
'add_l_tos',
'add_sp',
'cmp_eax',
'ldsesi',
'dw',
'epilog',
'globali',
'globaleax',
'globaladdr',
'globalp',
'globalproc',
'globalr',
'lea_eax_glob',
'lea_esi_glob',
'locali',
'localeax',
'locplusi',
'locminusi',
'localaddr',
'localaddr_esi',
'localp',
'localproc',
'localr',
'getlev',
'globalassi',
'globalassr',
'globalassp',
'localassi',
'localassr',
'localassp',
'localmovi',
'localmovr',
'localmovp',
'discard_globali',
'pop_es_edi',
'push_es_esi',
'add_edi',
'add_esi',
'loadi',
'loadaddr',
'loadr',
'loadp',
'loadproc',
'assi',
'assr',
'assp',
'call_',
'prolog',
'db',
'assindirbl',
'jump',
'jumpt',
'jumptt',
'cjump',
'fortest',
'forstep',
'minfortest',
'minforstep',
'jl',
'jle',
'jg',
'jge',
'je',
'jnz',
'call_static',
'sspushfarpntr',
'llreal_op',
'cslea_eax',
'calld',
'intsize',
'stringlit','reallit','trademark', 'plant_label');
lastopt=23 ; 
optimisations:array[0..23]of record
   pattern:array[1..3]of opcode;
   p1,p2:0..4;
 end=(
 (pattern:(mov_es_ss , pushc_esesi , pushc_sssi ) ; p1 : 1 ; p2 : 2 )  , 
 (pattern:(mov_esi_eax , pop_es , popes_movesieax ) ; p1 : 1 ; p2 : 2 )  , 
 (pattern:(no_op , pop_ecx , pop_ecx ) ; p1 : 1 ; p2 : 2 )  , 
 (pattern:(pop_ecx , add_eax_ecx , add_eax_tos ) ; p1 : 1 ; p2 : 2 )  , 
 (pattern:(push_eax , assindiri , assindireax ) ; p1 : 1 ; p2 : 2 )  , 
 (pattern:(push_eax , pop_eax , no_op ) ; p1 : 1 ; p2 : 2 )  , 
 (pattern:(push_eax , pop_esi , mov_esi_eax ) ; p1 : 1 ; p2 : 2 )  , 
 (pattern:(push_eax , add_l_tos , add_eax ) ; p1 : 3 ; p2 : 4 )  , 
 (pattern:(push_esesi , pop_eax , mov_eax_esesi ) ; p1 : 1 ; p2 : 2 )  , 
 (pattern:(push_ss , pop_es , mov_es_ss ) ; p1 : 1 ; p2 : 2 )  , 
 (pattern:(llint , plusop , pluslint ) ; p1 : 1 ; p2 : 2 )  , 
 (pattern:(llint , pop_eax , mov_eax ) ; p1 : 1 ; p2 : 2 )  , 
 (pattern:(mov_eax , add_eax_tos , add_l_tos ) ; p1 : 1 ; p2 : 2 )  , 
 (pattern:(mov_eax , assindir_al , assindirbl ) ; p1 : 1 ; p2 : 2 )  , 
 (pattern:(globali , pop_eax , globaleax ) ; p1 : 1 ; p2 : 2 )  , 
 (pattern:(globaladdr , lindirc , globalproc ) ; p1 : 1 ; p2 : 2 )  , 
 (pattern:(globaladdr , lindiri , globali ) ; p1 : 1 ; p2 : 2 )  , 
 (pattern:(lea_eax_glob , mov_esi_eax , lea_esi_glob ) ; p1 : 1 ; p2 : 2 )  , 
 (pattern:(locali , minusop , locminusi ) ; p1 : 1 ; p2 : 2 )  , 
 (pattern:(locali , plusop , locplusi ) ; p1 : 1 ; p2 : 2 )  , 
 (pattern:(locali , pop_eax , localeax ) ; p1 : 1 ; p2 : 2 )  , 
 (pattern:(localaddr , lindirc , localproc ) ; p1 : 1 ; p2 : 2 )  , 
 (pattern:(localaddr , lindiri , locali ) ; p1 : 1 ; p2 : 2 )  , 
 (pattern:(localaddr , pop_esi , localaddr_esi ) ; p1 : 1 ; p2 : 2 ) );
codelen:array[opcode] of byte=(
1,
3,
5,
3,
8,
8,
16,
10,
16,
18,
7,
3,
19,
1,
6,
9,
2,
2,
2,
13,
1,
12,
13,
25,
18,
3,
3,
2,
2,
10,
8,
8,
8,
14,
9,
18,
20,
5,
3,
2,
2,
2,
3,
2,
2,
3,
9,
5,
6,
0,
2,
19,
9,
3,
4,
13,
9,
2,
1,
1,
2,
1,
2,
1,
5,
10,
8,
6,
20,
9,
2,
1,
1,
1,
2,
5,
1,
4,
1,
3,
7,
3,
1,
2,
3,
3,
0,
8,
1,
3,
12,
8,
9,
14,
22,
9,
21,
20,
32,
5,
4,
6,
5,
6,
8,
4,
6,
9,
2,
6,
6,
6,
8,
25,
6,
13,
5,
5,
5,
5,
9,
9,
8,
6,
25,
7,
13,
4,
6,
13,
17,
5,
13,
17,
9,
24,
22,
4,
9,
9,
7,
7,
10,
12,
18,
28,
10,
9,
18,
21,
9,
4,
1,
8,
3,
8,
11,
15,
39,
13,
9,
10,
2,
2,
2,
2,
2,
2,
6,
9,
26,
5,
5,
1,
0,0,0,0);
codeoffset:array[opcode]of integer=(
{addresssize}   350,
{add_eax_ecx}   351,
{add_eax_tos}   354,
{and_eax_ecx}   359,
{assindireax}   362,
{assindirb}   370,
{assindirc}   378,
{assindiri}   394,
{assindirp}   404,
{assindirr}   420,
{assindir_al}   438,
{cmp_eax_ecx}   445,
{cmpoppntr}   448,
{cwdop}   467,
{dupi}   468,
{dupp}   474,
{end_write}   483,
{enterframe}   485,
{exitframe}   487,
{forprep}   489,
{heappntr}   502,
{heappopp}   503,
{heappopreal}   515,
{heappushp}   528,
{heappushreal}   553,
{idiv_ecx}   571,
{imul_ecx}   574,
{int18}   577,
{int21}   579,
{lindirb}   581,
{lindirc}   591,
{lindiri}   599,
{lindirp}   607,
{lindirr}   615,
{minusop}   629,
{movp}   638,
{movr}   656,
{mov_eax_esesi}   676,
{mov_eax_esi}   681,
{mov_ax_sp}   684,
{mov_bp_sp}   686,
{mov_bx_sp}   688,
{mov_edi_eax}   690,
{mov_es_dx}   693,
{mov_es_ss}   695,
{mov_esi_eax}   697,
{multop}   700,
{neg_op}   709,
{not_op}   714,
{no_op}   720,
{or_eax_ecx}   720,
{outbyte}   722,
{plusop}   741,
{popesesi}   750,
{popes_movesieax}   753,
{popp}   757,
{popreal}   770,
{pop_eax}   779,
{pop_bx}   781,
{pop_cx}   782,
{pop_ecx}   783,
{pop_es}   785,
{pop_esi}   786,
{procsize}   788,
{prolog86}   789,
{pushc_esesi}   794,
{pushc_sssi}   804,
{pushdisp}   812,
{pushp}   818,
{pushreal}   838,
{push_eax}   847,
{push_cs}   849,
{push_bp}   850,
{push_bx}   851,
{push_edx}   852,
{push_esesi}   854,
{push_ss}   859,
{push_sssi}   860,
{realsize}   864,
{shl_eax_cl}   865,
{shrink}   868,
{shr_eax_cl}   875,
{stackpntr}   878,
{start_paramsi}   879,
{start_paramsp}   881,
{start_paramsr}   884,
{start_paramsv}   887,
{start_write}   887,
{stridesize}   895,
{sub_eax_ecx}   896,
{assindiril}   899,
{llint}   911,
{pluslint}   919,
{subsassi}   928,
{subsassr}   942,
{subsi}   964,
{subsr}   973,
{lindira}   994,
{assindira}   1014,
{call_glob}   1046,
{call_loc}   1051,
{add_eax}   1055,
{lea_eax}   1061,
{mov_eax}   1066,
{add_l_tos}   1072,
{add_sp}   1080,
{cmp_eax}   1084,
{ldsesi}   1090,
{dw}   1099,
{epilog}   1101,
{globali}   1107,
{globaleax}   1113,
{globaladdr}   1119,
{globalp}   1127,
{globalproc}   1152,
{globalr}   1158,
{lea_eax_glob}   1171,
{lea_esi_glob}   1176,
{locali}   1181,
{localeax}   1186,
{locplusi}   1191,
{locminusi}   1200,
{localaddr}   1209,
{localaddr_esi}   1217,
{localp}   1223,
{localproc}   1248,
{localr}   1255,
{getlev}   1268,
{globalassi}   1272,
{globalassr}   1278,
{globalassp}   1291,
{localassi}   1308,
{localassr}   1313,
{localassp}   1326,
{localmovi}   1343,
{localmovr}   1352,
{localmovp}   1376,
{discard_globali}   1398,
{pop_es_edi}   1402,
{push_es_esi}   1411,
{add_edi}   1420,
{add_esi}   1427,
{loadi}   1434,
{loadaddr}   1444,
{loadr}   1456,
{loadp}   1474,
{loadproc}   1502,
{assi}   1512,
{assr}   1521,
{assp}   1539,
{call_}   1560,
{prolog}   1569,
{db}   1573,
{assindirbl}   1574,
{jump}   1582,
{jumpt}   1585,
{jumptt}   1593,
{cjump}   1604,
{fortest}   1619,
{forstep}   1658,
{minfortest}   1671,
{minforstep}   1680,
{jl}   1690,
{jle}   1692,
{jg}   1694,
{jge}   1696,
{je}   1698,
{jnz}   1700,
{call_static}   1702,
{sspushfarpntr}   1708,
{llreal_op}   1717,
{cslea_eax}   1743,
{calld}   1748,
{intsize}   1753,
0,0,0,0);
const codelib:array[350..1755]of byte=(


{addresssize}3,

{add_eax_ecx}102,3,193,

{add_eax_tos}102,89,102,3,193,

{and_eax_ecx}102,35,193,

{assindireax}102,94,7,38,103,102,137,6,

{assindirb}88,102,94,7,38,103,136,6,

{assindirc}102,88,90,102,94,7,38,103,
102,137,6,38,103,137,86,4,

{assindiri}102,88,
102,94,7,38,103,102,137,6,

{assindirp}102,88,90,102,94,7,38,103,
102,137,6,38,103,137,86,4,

{assindirr}102,196,
116,8,38,103,102,143,6,38,
103,102,143,70,4,131,196,6,

{assindir_al}102,94,7,38,103,136,6,

{cmp_eax_ecx}102,59,193,

{cmpoppntr}102,88,94,
102,89,95,102,51,193,51,254,
11,199,102,80,88,89,11,193,

{cwdop}153,

{dupi}102,88,102,80,102,80,

{dupp}102,
88,7,6,102,80,6,102,80,

{end_write}102,88,

{enterframe}85,83,

{exitframe}91,93,

{forprep}102,89,102,88,102,
80,102,43,200,102,131,193,2,

{heappntr}8,

{heappopp}142,194,38,103,
102,143,7,38,103,143,71,4,

{heappopreal}142,194,38,103,102,
143,7,38,103,102,143,71,4,

{heappushp}131,
196,250,139,252,22,7,185,8,
0,140,216,142,218,243,165,142,
216,83,205,24,112,49,0,91,

{heappushreal}131,196,
248,139,252,22,7,185,4,0,
140,216,142,218,243,165,142,216,

{idiv_ecx}102,247,249,

{imul_ecx}102,247,233,

{int18}205,24,

{int21}205,33,

{lindirb}102,94,
7,38,103,138,6,50,228,80,

{lindirc}102,94,7,38,103,102,255,54,

{lindiri}102,94,7,38,103,102,255,54,

{lindirp}102,94,7,38,103,102,255,54,

{lindirr}102,94,7,38,103,102,
255,118,4,38,103,102,255,54,

{minusop}102,
89,102,88,102,43,193,102,80,

{movp}103,102,
139,4,36,54,102,137,5,103,
139,68,36,4,54,137,69,4,

{movr}103,102,139,4,
36,54,102,137,5,103,102,139,
68,36,4,54,102,137,69,4,

{mov_eax_esesi}38,103,102,139,6,

{mov_eax_esi}102,139,198,

{mov_ax_sp}139,196,

{mov_bp_sp}139,236,

{mov_bx_sp}139,220,

{mov_edi_eax}102,139,248,

{mov_es_dx}142,194,

{mov_es_ss}22,7,

{mov_esi_eax}102,139,240,

{multop}102,
89,102,88,102,247,233,102,80,

{neg_op}103,102,247,28,36,

{not_op}103,102,131,52,36,1,

{no_op}11,
{or_eax_ecx}193,88,

{outbyte}90,89,81,
83,139,217,185,1,0,80,3,
212,180,64,205,33,88,91,102,

{plusop}89,
102,88,102,3,193,102,80,102,

{popesesi}94,7,102,

{popes_movesieax}139,240,7,102,

{popp}139,244,30,7,185,
8,0,243,165,131,196,6,54,

{popreal}102,
143,5,54,102,143,69,4,102,

{pop_eax}88,91,

{pop_bx}89,

{pop_cx}102,

{pop_ecx}89,7,

{pop_es}102,

{pop_esi}94,2,

{procsize}85,

{prolog86}139,253,139,236,38,

{pushc_esesi}103,255,
118,4,38,103,102,255,54,54,

{pushc_sssi}255,116,4,54,102,255,52,131,

{pushdisp}239,2,54,255,53,131,

{pushp}196,250,140,215,
140,216,142,199,142,223,139,252,
185,3,0,243,165,142,216,54,

{pushreal}102,
255,116,4,54,102,255,52,102,

{push_eax}80,14,

{push_cs}85,

{push_bp}83,

{push_bx}102,

{push_edx}82,38,

{push_esesi}103,102,255,54,22,

{push_ss}54,

{push_sssi}102,255,52,4,

{realsize}102,

{shl_eax_cl}211,224,180,

{shrink}74,187,0,16,205,33,102,

{shr_eax_cl}211,232,3,

{stackpntr}102,

{start_paramsi}80,131,

{start_paramsp}236,3,131,

{start_paramsr}236,4,102,

{start_paramsv}184,
{start_write}1,0,0,0,102,80,2,102,

{stridesize}43,

{sub_eax_ecx}193,102,94,

{assindiril}7,38,103,102,
199,6,57,48,0,0,102,184,

{llint}57,48,0,0,102,80,103,102,

{pluslint}129,
4,36,57,48,0,0,102,88,

{subsassi}7,102,94,38,103,102,
137,134,57,48,0,0,139,244,

{subsassr}54,196,125,8,141,189,
57,48,38,102,143,5,38,102,
143,69,4,131,196,6,7,102,

{subsi}94,
38,102,255,180,57,48,7,102,

{subsr}94,102,129,198,57,
48,0,0,38,103,102,255,118,
4,38,103,102,255,54,102,94,

{lindira}140,216,31,185,
57,48,43,225,22,7,102,139,
252,243,103,164,142,216,102,139,

{assindira}244,140,216,185,57,48,3,241,
54,103,102,197,62,140,210,142,
194,141,84,6,102,139,244,243,
103,164,142,216,139,226,54,255,

{call_glob}159,57,48,255,158,

{call_loc}57,48,102,5,

{add_eax}57,48,0,0,102,141,

{lea_eax}6,57,48,102,184,

{mov_eax}57,48,0,0,102,88,

{add_l_tos}102,5,57,48,0,0,129,196,

{add_sp}57,48,102,61,

{cmp_eax}57,48,0,0,140,200,

{ldsesi}142,
216,102,141,54,57,48,57,48,

{dw}139,229,

{epilog}93,202,57,48,54,102,

{globali}255,183,57,48,54,102,

{globaleax}139,135,57,48,22,102,

{globaladdr}141,135,57,48,102,80,102,141,

{globalp}183,
57,48,131,196,250,140,215,140,
216,142,199,142,223,139,252,185,
3,0,243,165,142,216,54,102,

{globalproc}255,183,57,48,141,183,

{globalr}57,48,54,102,255,
116,4,54,102,255,52,102,141,

{lea_eax_glob}135,57,48,102,141,

{lea_esi_glob}183,57,48,102,255,

{locali}182,57,48,102,139,

{localeax}134,57,48,102,88,

{locplusi}102,
3,134,57,48,102,80,102,88,

{locminusi}102,
43,134,57,48,102,80,102,141,

{localaddr}134,57,48,22,102,80,102,141,

{localaddr_esi}182,57,48,22,102,141,

{localp}182,
57,48,131,196,250,140,215,140,
216,142,199,142,223,139,252,185,
3,0,243,165,142,216,141,182,

{localproc}57,48,102,255,52,141,182,

{localr}57,48,54,102,255,
116,4,54,102,255,52,139,182,

{getlev}57,48,54,102,

{globalassi}143,135,57,48,141,191,

{globalassr}57,48,54,102,143,
5,54,102,143,69,4,141,191,

{globalassp}57,
48,102,139,244,30,7,185,8,
0,243,165,131,196,6,102,143,

{localassi}134,57,48,141,190,

{localassr}57,48,54,102,143,
5,54,102,143,69,4,141,190,

{localassp}57,
48,102,139,244,30,7,185,8,
0,243,165,131,196,6,102,88,

{localmovi}102,
80,102,137,134,57,48,141,190,

{localmovr}57,48,103,102,139,4,36,54,
102,137,5,103,102,139,68,36,
4,54,102,137,69,4,141,190,

{localmovp}57,48,103,102,139,4,
36,54,102,137,5,103,139,68,
36,4,54,137,69,4,129,196,

{discard_globali}57,48,38,103,

{pop_es_edi}102,
143,135,57,48,0,0,38,103,

{push_es_esi}102,
255,182,57,48,0,0,102,129,

{add_edi}199,57,48,0,0,102,129,

{add_esi}198,57,48,0,0,139,182,

{loadi}57,48,
54,102,255,180,160,91,139,182,

{loadaddr}57,48,129,198,
160,91,22,106,0,86,139,182,

{loadr}57,48,
102,141,180,160,91,54,102,255,
116,4,54,102,255,52,139,182,

{loadp}57,48,141,180,
160,91,131,196,250,140,215,140,
216,142,199,142,223,139,252,185,
3,0,243,165,142,216,139,182,

{loadproc}57,48,
54,102,255,180,160,91,139,182,

{assi}57,
48,102,143,132,160,91,139,182,

{assr}57,48,
102,141,188,160,91,54,102,143,
5,54,102,143,69,4,139,182,

{assp}57,48,141,188,160,
91,102,139,244,30,7,185,8,
0,243,165,131,196,6,139,182,

{call_}57,
48,54,255,156,160,91,200,0,

{prolog}0,199,199,102,

{db}94,

{assindirbl}7,38,103,198,6,199,233,8,

{jump}42,102,88,

{jumpt}11,192,15,133,0,42,103,246,

{jumptt}4,36,1,
15,133,247,41,102,88,102,89,

{cjump}103,57,12,36,15,133,5,
0,102,88,233,230,41,102,89,

{fortest}102,90,102,88,102,131,249,
0,15,140,10,0,102,59,194,
15,142,12,0,233,206,41,102,
59,194,15,141,2,0,235,244,
102,80,102,82,102,81,102,89,

{forstep}103,102,1,76,36,
4,102,81,233,178,41,226,5,

{minfortest}102,
88,233,171,41,102,81,102,89,

{minforstep}103,102,
255,4,36,233,159,41,124,97,

{jl}126,97,

{jle}127,97,

{jg}125,97,

{jge}116,97,

{je}117,97,

{jnz}14,184,

{call_static}57,48,255,208,22,102,

{sspushfarpntr}184,
57,48,0,0,102,80,140,200,

{llreal_op}142,216,
102,141,54,57,48,103,255,118,
6,103,255,118,4,103,255,118,
2,103,255,54,22,31,102,141,

{cslea_eax}6,57,48,83,232,

{calld}97,41,91,2,0,0);
param1:array[opcode] of byte=(
{addresssize}0,
{add_eax_ecx}0,
{add_eax_tos}0,
{and_eax_ecx}0,
{assindireax}0,
{assindirb}0,
{assindirc}0,
{assindiri}0,
{assindirp}0,
{assindirr}0,
{assindir_al}0,
{cmp_eax_ecx}0,
{cmpoppntr}0,
{cwdop}0,
{dupi}0,
{dupp}0,
{end_write}0,
{enterframe}0,
{exitframe}0,
{forprep}0,
{heappntr}0,
{heappopp}0,
{heappopreal}0,
{heappushp}0,
{heappushreal}0,
{idiv_ecx}0,
{imul_ecx}0,
{int18}0,
{int21}0,
{lindirb}0,
{lindirc}0,
{lindiri}0,
{lindirp}0,
{lindirr}0,
{minusop}0,
{movp}0,
{movr}0,
{mov_eax_esesi}0,
{mov_eax_esi}0,
{mov_ax_sp}0,
{mov_bp_sp}0,
{mov_bx_sp}0,
{mov_edi_eax}0,
{mov_es_dx}0,
{mov_es_ss}0,
{mov_esi_eax}0,
{multop}0,
{neg_op}0,
{not_op}0,
{no_op}0,
{or_eax_ecx}0,
{outbyte}0,
{plusop}0,
{popesesi}0,
{popes_movesieax}0,
{popp}0,
{popreal}0,
{pop_eax}0,
{pop_bx}0,
{pop_cx}0,
{pop_ecx}0,
{pop_es}0,
{pop_esi}0,
{procsize}0,
{prolog86}0,
{pushc_esesi}0,
{pushc_sssi}0,
{pushdisp}0,
{pushp}0,
{pushreal}0,
{push_eax}0,
{push_cs}0,
{push_bp}0,
{push_bx}0,
{push_edx}0,
{push_esesi}0,
{push_ss}0,
{push_sssi}0,
{realsize}0,
{shl_eax_cl}0,
{shrink}0,
{shr_eax_cl}0,
{stackpntr}0,
{start_paramsi}0,
{start_paramsp}0,
{start_paramsr}0,
{start_paramsv}0,
{start_write}0,
{stridesize}0,
{sub_eax_ecx}0,
{assindiril}8,
{llint}2,
{pluslint}5,
{subsassi}10,
{subsassr}8,
{subsi}7,
{subsr}6,
{lindira}6,
{assindira}6,
{call_glob}3,
{call_loc}2,
{add_eax}2,
{lea_eax}3,
{mov_eax}2,
{add_l_tos}4,
{add_sp}2,
{cmp_eax}2,
{ldsesi}7,
{dw}0,
{epilog}4,
{globali}4,
{globaleax}4,
{globaladdr}4,
{globalp}3,
{globalproc}4,
{globalr}2,
{lea_eax_glob}3,
{lea_esi_glob}3,
{locali}3,
{localeax}3,
{locplusi}5,
{locminusi}5,
{localaddr}3,
{localaddr_esi}3,
{localp}3,
{localproc}2,
{localr}2,
{getlev}2,
{globalassi}4,
{globalassr}2,
{globalassp}2,
{localassi}3,
{localassr}2,
{localassp}2,
{localmovi}7,
{localmovr}2,
{localmovp}2,
{discard_globali}2,
{pop_es_edi}5,
{push_es_esi}5,
{add_edi}3,
{add_esi}3,
{loadi}2,
{loadaddr}2,
{loadr}2,
{loadp}2,
{loadproc}2,
{assi}2,
{assr}2,
{assp}2,
{call_}2,
{prolog}3,
{db}0,
{assindirbl}7,
{jump}1,
{jumpt}6,
{jumptt}7,
{cjump}13,
{fortest}22,
{forstep}11,
{minfortest}5,
{minforstep}8,
{jl}1,
{jle}1,
{jg}1,
{jge}1,
{je}1,
{jnz}1,
{call_static}2,
{sspushfarpntr}3,
{llreal_op}7,
{cslea_eax}3,
{calld}2,
{intsize}0,
0,0,0,0);
param2:array[opcode] of byte=(
{addresssize}0,
{add_eax_ecx}0,
{add_eax_tos}0,
{and_eax_ecx}0,
{assindireax}0,
{assindirb}0,
{assindirc}0,
{assindiri}0,
{assindirp}0,
{assindirr}0,
{assindir_al}0,
{cmp_eax_ecx}0,
{cmpoppntr}0,
{cwdop}0,
{dupi}0,
{dupp}0,
{end_write}0,
{enterframe}0,
{exitframe}0,
{forprep}0,
{heappntr}0,
{heappopp}0,
{heappopreal}0,
{heappushp}0,
{heappushreal}0,
{idiv_ecx}0,
{imul_ecx}0,
{int18}0,
{int21}0,
{lindirb}0,
{lindirc}0,
{lindiri}0,
{lindirp}0,
{lindirr}0,
{minusop}0,
{movp}0,
{movr}0,
{mov_eax_esesi}0,
{mov_eax_esi}0,
{mov_ax_sp}0,
{mov_bp_sp}0,
{mov_bx_sp}0,
{mov_edi_eax}0,
{mov_es_dx}0,
{mov_es_ss}0,
{mov_esi_eax}0,
{multop}0,
{neg_op}0,
{not_op}0,
{no_op}0,
{or_eax_ecx}0,
{outbyte}0,
{plusop}0,
{popesesi}0,
{popes_movesieax}0,
{popp}0,
{popreal}0,
{pop_eax}0,
{pop_bx}0,
{pop_cx}0,
{pop_ecx}0,
{pop_es}0,
{pop_esi}0,
{procsize}0,
{prolog86}0,
{pushc_esesi}0,
{pushc_sssi}0,
{pushdisp}0,
{pushp}0,
{pushreal}0,
{push_eax}0,
{push_cs}0,
{push_bp}0,
{push_bx}0,
{push_edx}0,
{push_esesi}0,
{push_ss}0,
{push_sssi}0,
{realsize}0,
{shl_eax_cl}0,
{shrink}0,
{shr_eax_cl}0,
{stackpntr}0,
{start_paramsi}0,
{start_paramsp}0,
{start_paramsr}0,
{start_paramsv}0,
{start_write}0,
{stridesize}0,
{sub_eax_ecx}0,
{assindiril}0,
{llint}0,
{pluslint}0,
{subsassi}0,
{subsassr}0,
{subsi}0,
{subsr}0,
{lindira}0,
{assindira}0,
{call_glob}0,
{call_loc}0,
{add_eax}0,
{lea_eax}0,
{mov_eax}0,
{add_l_tos}0,
{add_sp}0,
{cmp_eax}0,
{ldsesi}0,
{dw}0,
{epilog}0,
{globali}0,
{globaleax}0,
{globaladdr}0,
{globalp}0,
{globalproc}0,
{globalr}0,
{lea_eax_glob}0,
{lea_esi_glob}0,
{locali}0,
{localeax}0,
{locplusi}0,
{locminusi}0,
{localaddr}0,
{localaddr_esi}0,
{localp}0,
{localproc}0,
{localr}0,
{getlev}0,
{globalassi}0,
{globalassr}0,
{globalassp}0,
{localassi}0,
{localassr}0,
{localassp}0,
{localmovi}0,
{localmovr}0,
{localmovp}0,
{discard_globali}0,
{pop_es_edi}0,
{push_es_esi}0,
{add_edi}0,
{add_esi}0,
{loadi}8,
{loadaddr}6,
{loadr}7,
{loadp}6,
{loadproc}8,
{assi}7,
{assr}7,
{assp}6,
{call_}7,
{prolog}0,
{db}0,
{assindirbl}0,
{jump}0,
{jumpt}0,
{jumptt}0,
{cjump}0,
{fortest}0,
{forstep}0,
{minfortest}0,
{minforstep}0,
{jl}0,
{jle}0,
{jg}0,
{jge}0,
{je}0,
{jnz}0,
{call_static}0,
{sspushfarpntr}0,
{llreal_op}0,
{cslea_eax}0,
{calld}0,
{intsize}0,
0,0,0,0);
implementation begin end.
