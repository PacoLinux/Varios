%% LyX 1.1 created this file.  For more info, see http://www.lyx.org/.
%% Do not edit unless you really know what you are doing.
\documentclass{article}
\usepackage[T1]{fontenc}
\usepackage[latin1]{inputenc}

\makeatletter


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% LyX specific LaTeX commands.
\providecommand{\LyX}{L\kern-.1667em\lower.25em\hbox{Y}\kern-.125emX\@}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% User specified LaTeX commands.
\usepackage{times}
\usepackage{a4}

\makeatother

\begin{document}


\title{The Abstraction Mechanisms of Vector Pascal}


\author{Paul Cockshott, University of Glasgow, Imaging Faraday Partnership}

\maketitle
\begin{abstract}\small
Vector Pascal is a language designed to support elegant and efficient expression
of algorithms using the SIMD model of computation. It imports into Pascal abstraction mechanisms
derived from  functional languages having their origins in APL. In particular it extends
 all operators to work on vectors of data. The type system is extended to
handle pixels and dimensional analysis. Code generation is via the ILCG system that allows
retargeting to multiple different SIMD instructionsets based on formal descrition
of the instructionset semantics.
\end{abstract}

\section{Introduction}

The introduction of SIMD instruction sets\cite{IA32 }\cite{AMD}\cite{Peleg97}\cite{Intel00}
to Personal Computers potentially provides substantial performance increases,
but the ability of most programmers to harness this performance is held back
by two factors. The first is the limited availability of compilers that make
effective use of these instructionsets in a machine independent manner. This
remains the case despite the research efforts to develop compilers for multi-media
instructionsets\cite{Cheong97}\cite{Leupers99}\cite{Krall00}\cite{Sreraman00}.
The second is the fact that most popular programming languages were designed
on the word at a time model of the classic von Neuman computer rather than
the SIMD model.  



The functions of a high level programming language (HLPL) are:
\begin{enumerate}
\item To lighten the mental load of the programmer.
\item To help obviate program errors.
\item To allow programs to run fast by making efficient use of hardware.
\end{enumerate}
The abstraction mechanisms of HLPLs 
 make the thinking through of a problem, and its solution by
algorithmical means, easier. They allow a problem to be thought
of as one concrete instance in a more general family,
and, as such, reveal that it can be solved by some very general,
powerful  and well understood algorithmic techniques.
The type and abstraction mechanisms of HLPLs condition the
thought processes of their users.

If we consider popular imperative languages like 
Pascal, C, Java and Delphi we see that:
\begin{itemize} \item They are structured around a model
of computation in which operations take place on a single value at a time.
The abstraction mechanism they use for bulk data operations is 
serialisation using {\bf for} loops.   This reflects the word at a time model
of earlier computers.
\item Their type system provides inadequate support for pixels and
images.


\end{itemize}
 These limitations make it is, significantly
harder than it need be to write image processing programs that will use SIMD parallelism.


% mention intel image processing library

Vector Pascal aims to provide an efficient and elegant notation for programmers
using Multi-Media enhanced CPUs. In doing so it borrows concepts for expressing
data parallelism that have a long history, dating back to Iverson's work on
APL in the early '60s\cite{Iverson62}. 
By an elegant algorithm I mean one which is expressed as concisely as possible.
Elegance is a goal that one approaches asymtotically, approaching but never
attaining\cite{Chaiten}. APL and J allow the construction of very elegant programs,
but at a cost. An inevitable consequence of elegance is the loss of redundancy.
APL programs are as concise, or even more concise than conventional mathematical
notation\cite{Iversion80} and use a special characterset. This makes them hard
for the uninitiated to understand. J attempts to remedy this by restricting
itself to the ASCII characterset, but still looks dauntingly unfamiliar to programmers
brought up on more conventional languages. Both APL and J are interpretive which
makes them ill suited to many of the applications for which SIMD speed is required.
The aim of Vector Pascal is to provide the conceptual gains of Iverson's notation
within a framework familiar to imperative programmers.

Pascal\cite{Wirth}was chosen as a base language over the alternatives of C
and Java. C was rejected because notations like \texttt{x+y} for \texttt{x}
and \texttt{y} declared as \texttt{int x{[}4{]},y{[}4{]}}, already have the
meaning of adding the addresses of the arrays together. Java was rejected because
of the difficulty of efficiently transmitting data parallel operations via its
intermediate code to a just in time code generator. 

 
\section{Array mechanisms for data parallelism}
Vector Pascal extends the array type mechanism of Pascal  to
provide better support for data parallel programming in general,
and SIMD image processing in particular.
Data parallel programming can be built up from certain underlying
abstractions\cite{Ewing}:
\begin{itemize}
\item operations on whole arrays
\item array slicing
%\item conditional operations
\item reduction operations
%\item scan operations
%\item data reorganisation
\end{itemize}
We will first consider these in general before moving on to
look %at their support in other languages and then finally looking
at how they are supported in Vector Pascal.
\subsection{Operations on whole arrays}
The basic {\em conceptual} mechanism is the {\em map}, which takes an operator and
and a source array ( or pair of arrays ) and produces a result array by mapping the
source(s) under the operator. Let us denote the type of an arry of 
\( T \)as  \( T[] \). Then if we have a binary operator \( \omega :(T\otimes T)\rightarrow T \),
 we automatically have an operator \( \omega :(T[]\otimes T[])\rightarrow T[] \)
\(  \). Thus if \( x,y \) are arrays of integers \( k=x+y \) is the array
of integers where \( k_{i}=x_{i}+y_{i} \): 

\begin{tabular}{|c|c|c|}
\hline
3&5&9\\
\hline
\end{tabular} =
\begin{tabular}{|c|c|c|}
\hline
2&3&5\\
\hline
\end{tabular} +
\begin{tabular}{|c|c|c|}
\hline
1&2&4\\
\hline
\end{tabular} 


Similarly if we have a unary operator $\mu$:( T$\rightarrow$T)
then we automatically have an operator $\mu$:(T[]$\rightarrow$T[]). Thus $z=$sqr$(x)$ is the array
where $z_i=x_i^2$:

\begin{tabular}{|c|c|c|}
\hline
4&9&25\\
\hline
\end{tabular} = sqr(
\begin{tabular}{|c|c|c|}
\hline
2&3&5\\
\hline
\end{tabular})

The map replaces the {\em serialisation} or {\em for loop} abstraction of classical imperative languages. 
The map concept is simple, and maps over lists are widely used in functional programming. 
For array based languages there are complications to do with the semantics
of operations between arrays of different lengths and different dimensions,
but Iverson\cite{Iverson62} provided a consistent treatment of these. Recent languages
  built round this model are J, an interpretive language\cite{Jmanual}\cite{Burke}\cite{Jintro},
High Performance Fortran\cite{Ewing} and F\cite{Metcalf96} a modern Fortran subset. In principle though any language
with array types can be extended in a similar way. The map approach to data
parallelism is machine independent. 
 Depending on the target machine, a compiler can output
sequential, SIMD, or MIMD code to handle it.
\subsection{ Array slicing}
It is advantageous to be able to specify sections of arrays as values in expression.
The sections may be rows or columns in a matrix, a rectangular sub-range of the elements
of an array, as shown in figure \ref{figslice}.
In image processing such rectangular sub regions of pixel arrays are called regions of interest. 
It may also be desirable to provide matrix diagonals\cite{vanderMeulen}.

\begin{figure}
\begin{tabular}{||c|c|cc||}\hline\hline
1&1&1&1\\
1&2&4&8\\
1&2&4&16\\
1&2&8&512\\\hline\hline
\end{tabular}\ \ 
\begin{tabular}{||cccc||}\hline\hline
1&1&1&1\\\hline
1&2&4&8\\\hline
1&2&4&16\\
1&2&8&512\\\hline\hline
\end{tabular}\ \ 
\begin{tabular}{||cccc||}\hline\hline
1&1&1&1\\\cline{2-3}
1&\multicolumn{2}{|c|}{2 4}&8\\
1&\multicolumn{2}{|c|}{2 4}&16\\\cline{2-3}
1&2&8&512\\\hline\hline
\end{tabular}
 
\caption{Different ways of slicing the same array}\label{figslice}

\end{figure}
%\subsection{ Conditional operations}
%For data parallel programming one frequently wants to make an operation
%work on some subset of the data based on some logical mask. This can be thought of providing
%a finer grain of selection than subslicing, allowing arbitrary combinations of
%array elements to be acted on.
\subsection{ Reduction operations}
In a reduction operation, a dyadic operator  injected between the elements of 
a vector, the rows or columns of a matrix etc,  produces a result of lower rank.
Examples would be the forming the sum of a table or finding the maximum or minimum
of a table.
So one could use + to reduce
\begin{tabular}{|c|c|c|c|}\hline
1&2&4&8\\\hline
\end{tabular}   to 1+2+4+8=15

%\subsection{ Scan operations}
%Scan operations are analogous to reduction operations except that they return
%an array whose values are the partial results of the reduction. Examples would be
%producing a table of partial sums.
%So one could scan
%\begin{tabular}{|c|c|c|c|}\hline
%1&2&4&8\\\hline
%\end{tabular} with +  to produce  \begin{tabular}{|c|c|c|c|}\hline
%1&3&7&15\\\hline
%\end{tabular}.
%\subsection{ Data reorganisation}
\section{Data parallelism in Vector Pascal}

Vector Pascal incorporates Iverson's approach to data parallelism. Its aim is
to provide a notation that allows the natural and elegant expression of data
parallel algorithms within a base language that is already familiar to a considerable
body of programmers and combine this with modern compilation techniques.



\subsection{Assignment maps}

Standard Pascal allows assignement of whole arrays. Vector Pascal extends this
to allow consistent use of mixed rank expressions on the right hand side of
an assignment. Given

\textbf{r0:real; r1:array{[}0..7{]} of real; r2:array{[}0..7,0..7{]} of real}

then we can write

%\begin{enumerate}
 r\textbf{1:= r2{[}3{]}; \{ supported in standard Pascal \}}

 \textbf{r1:= 1/2; \{ assign 0.5 to each element of r1 \}}

 \textbf{r2:= r1{*}3; \{ assign 1.5 to every element of r2\}}

 \textbf{r2[3]:= r2[4]+r1 ; \{ self explanatory \}}

%\end{enumerate}
The variable on the left hand side of an assignment defines an array context
within which expressions on the right hand side are evaluated. Each array context
has a rank given by the number of dimensions of the array on the left hand side.
A scalar variable has rank 0. Variables occuring in expressions with an array
context of rank \emph{r} must have \emph{r} or fewer dimensions. The \emph{n}
bounds of any \emph{n} dimensional array variable, with \( n\leq r \) occuring
within an expression evaluated in an array context of rank \emph{r} must match
with the rightmost \emph{n} bounds of the array on the left hand side of the
assignment statement.

Where a variable is of lower rank than its array context, the variable is replicated
to fill the array context. This is shown in examples 2 and 3 above. Because
the rank of any assignment is constrained by the variable on the left hand side,
no temporary arrays, other than machine registers, need be allocated to store
the intermediate array results of expressions.


Maps are implicitly and promiscously defined on both monadic operators and unary functions.
If \textbf{f} is a function or unary operator
mapping from type \textbf{r} to type \textbf{t} then if \textbf{x} is an array
of \textbf{r} then \textbf{a:=f(x)} assigns an array of \textbf{t} such that
\textbf{a{[}i{]}=f(x{[}i{]})}.

Functions can return any data type whose size is known at compile time, including arrays and records.
A consistent copying semantics is used.

\subsection{Operator Reduction}
Maps take operators and arrays and deliver array results. The {\em reduction }
abstraction takes a dyadic operator and an array and returns a scalar result. It is denoted
by the
functional form \textbackslash{}. Thus if a is an array, \textbackslash{}+a denotes
the sum over the array. More generally \( \setminus \Phi x \) for some dyadic
operator \( \Phi  \) means \( x_{0}\Phi (x_{1}\Phi ..(x_{n}\Phi \iota )) \)
where \( \iota  \) is the identity element for the operator and the type. Thus
we can write \textbackslash{}+ for \( \sum  \), \textbackslash{}{*} for \( \prod  \)
etc. The dot product of two vectors can thus be written as

\textbf{x:=\textbackslash{}+(y{*}z);}

instead of

\textbf{x:=0;}

\textbf{for i:=0 to n do x:= x+ y{[}i{]}{*}z{[}i{]};}

A reduction operation takes an argument of rank \emph{r} and returns an argument
of rank \emph{r-1} except in the case where its argument is or rank 0, in which
case it acts as the identity operation. Reduction is always performed along
the last array dimension of its argument.
\subsection{Operations on implicit indices}
Assignment maps and reductions involve implicit indices. It can be useful to have access to these.
\subsubsection{iota\label{iota}}

The syntactic form \ {\bf iota }{\em i } returns the {\em i}th current implicit index.
%\paragraph{Examples}
Thus given the definitions

 \textbf{ v1:array{[}1..3{]}of integer; v2:array{[}0..4{]}of
integer;}

the program fragment
\textbf{v1:=iota 0; }
\textbf{v2:=iota 0 {*}2;}

would set v1 and v2 as follows:

\begin{verbatim}
v1=	1	2	3
v2=	0	2	4	6	8
\end{verbatim}
whilst given the definitions

\textbf{m1:array{[}1..3,0..4{]} of integer;m2:array{[}0..4,1..3{]}of integer;}

then the program fragment

\textbf{m2:= iota 0 +2{*}iota 1; }



would set m2

\begin{verbatim}
m2=
	2	4	6
	3	5	7
	4	6	8	
	5	7	9
	6	8	10
\end{verbatim}
The argument to iota\index{iota} must be an integer known at compile time within
the range of implicit indices in the current context.


\subsubsection{trans}

The syntactic form {\bf trans\index{trans}}{\em x} transposes a vector \footnote{Note that
{\bf trans} is not strictly speaking an operator, as there exists no Pascal type corresponding
to a column vector.}matrix, or tensor. It achieves
this by cyclic rotation of the implicit indices\index{indices}\index{implicit indices}.
Thus if \textbf{trans} \emph{e} is evaluated in a context with implicit indices

\textbf{iota} \emph{0}.. \textbf{iota} \emph{n }

then the expression e is evaluated in a context with implicit indices

\textbf{iota}'\emph{0}.. \textbf{iota}'\emph{n}

where

\textbf{iota}'\emph{x} = \textbf{iota} ( (\emph{x+1})\textbf{mod} \emph{n+1})

It should be noted that transposition is generalised to arrays of rank greater
than 2.


\paragraph{Examples}

Given the defintions used above in section \ref{iota}, the program fragment:

\textbf{m1:= (trans v1){*}v2; }




\textbf{m2 := trans m1; }


will set m1 and m2:

\begin{verbatim}
m1=
	0	2	4	6	8
	0	4	8	12	16
	0	6	12	18	24
m2=
	0	0	0
	2	4	6
	4	8	12
	6	12	18
	8	16	24
\end{verbatim}



\section{Unary operators}

A unary expression is formed by applying a unary operator to another unary or
primary expression. The unary operators supported are \textbf{+, -, {*}, /,
div, not, round, sqrt, sin, cos, tan, abs, ln, ord, chr, succ, pred} and \textbf{@}.

Thus the following are valid unary expressions\textbf{: -1, +b, not true, sqrt
abs x, sin theta.} In standard Pascal some of these operators are treated as
functions,. Syntactically this means that their arguments must be enclosed in
brackets, as in \textbf{sin(theta)}. This usage remains syntactically correct
in Vector Pascal.

The dyadic operators \textbf{+, -, {*}, /, div} are all extended to unary context
by the insertion of an identity element under the operation.
This is a generalisation of the monadic use of + and - in standard pascal where
\textbf{+a=0+a} and \textbf{-a
= 0-a} with 0 being the additive identity, so too \textbf{/2 = 1/2} with 1 the multiplicative
identity. For sets the notation \textbf{-s} means the
complement of the set \textbf{s}. The implicit value inserted are given below.


\vspace{0.3cm}
{\centering \begin{tabular}{|c|c|c|}
\hline
type&
operators&
identity elem\\
\hline
\hline
number&
+,-&
0\\
\hline
set\index{set}&
+&
empty set\\
\hline
set&
-,{*}&
fullset\\
\hline
number&
{*},/ ,div,mod&
1\\
\hline
boolean\index{boolean}&
and&
true\\
\hline
boolean&
or &
false\\
\hline
\end{tabular}\par}
\vspace{0.3cm}


\subsubsection{Dyadic Operations}

Dyadic operators supported are \textbf{+, +:, -:, -, {*}, /, div, mod , {*}{*},
pow, <, >, >=, <=, =, <>, shr, shl, and, or, in, min, max}. All of these are consistently
extended to operate over arrays. The operators {*}{*}, pow denote exponentiation
and raising to an integer power as in ISO Extended Pascal.
 The operators +: and -: exist to support saturated
arithmetic on bytes as supported by the MMX instructionset.



 \section{Extensions to the Pascal Type System}


\subsection{Dynamic Arrays}

A dynamic array is an array whose bounds are determined at run time. Operations
on dynamic arrays are essential in general purpose image processing software since
the size of an image loaded from a file may not be known at compile time.

Pascal 90\cite{ISO90} introduced the notion of schematic or parameterised types
as a means of creating dynamic arrays. Thus where \textbf{r} is some integral
type one can write 

\textbf{type z(a,b:r)=array{[}a..b{]} of t;}

If \textbf{p:\textasciicircum{}z}, then 

\textbf{new(p,n,m)}

where \textbf{n,m:r} initialises \textbf{p} to point to an array of bounds \textbf{n..m}.
The bounds of the array can then be accessed as \textbf{p\textasciicircum{}.a,
p\textasciicircum{}.b}. Vector Pascal incorporates this notation from Pascal
90 for dynamic arrays 
\footnote{
It should be noted that the use of schematic array types preserves the semantic distinction
present in Standard Pascal, between assigning a pointer to an array, and assigining an array itself.
This distinction is confused with the "open array" construct allowed by Delphi and Free Pascal.
}.
\subsection{Indexed Ranges}

Image processing applications often have to deal with regions of interest, rectangular
sub-images within a larger image. Vector Pascal extends the array abstraction to
define sub-ranges of arrays. A sub-range  of an array variable are denoted by the variable followed
by a range expression in brackets.

%\vspace{0.3cm}
%{\centering \begin{tabular}{|c|c|}
%\hline 
%<indexed range>&
%<variable> '{[}' <range expression>{[}',' <range expression>{]}{*} '{]}'\\
%\hline 
%\end{tabular}\par}
%\vspace{0.3cm}

%\vspace{0.3cm}
%{\centering \begin{tabular}{|c|c|}
%\hline 
%<range expression>&
%<expression> '..' <expression>\\
%\hline 
%\end{tabular}\par}
%\vspace{0.3cm}

The expressions within the range expression must conform to the index type of
the array variable. The type of a range expression \textbf{a{[}i..j{]}} where
\textbf{a: array{[}p..q{]} of t} is \textbf{array{[}0..j-i{]} of t.}

Examples

\textbf{dataset{[}i..i+2{]}:=blank;}

\textbf{twoDdata{[}2..3,5..6{]}:=twoDdata{[}4..5,11..12{]}{*}0.5;}

Subranges may be passed in as actual parameters to procedures whose corresponding
formal parameters are declared as variables of a schematic type. Hence given
the following declarations:

\textbf{type image(miny,maxy,minx,maxx:integer)=array{[}miny..maxy,minx..maxx{]}
of pixel;}

\textbf{procedure invert(var im:image);begin im:= - im; end;}

\textbf{var screen:array{[}0..319,0..199{]} of pixel;}

then the following statement would be valid:

\textbf{invert(screen{[}40..60,20..30{]});}



 An array may be indexed
by another array. If \textbf{x:array{[}t0{]} of t1} and \textbf{y:array{[}t1{]}
of t2}, then \textbf{y{[}x{]}} denotes the virtual array of type \textbf{array{[}t0{]}
of t2} such that \textbf{y{[}x{]}{[}i{]}=y{[}x{[}i{]}{]}}. This construct is
useful for performing permutations. 
%To fully understand the following example
%refer to sections \ref{iota},\ref{implicitindices}.


\paragraph{Example}

Given the declarations

\textbf{const perm:array{[}0..3{]} of integer=(3,1,2,0);}

\textbf{var ma,m0:array{[}0..3{]} of integer; }

then the statements

\textbf{m0:= (iota 0)+1;}

%\textbf{write('m0=');for j:=0 to 3 do write(m0{[}j{]});writeln;}

\textbf{ma:=m0{[}perm{]}; }

%\textbf{write('perm=');for j:=0 to 3 do write(perm{[}j{]});writeln; }

%\textbf{writeln('ma:=m0{[}perm{]}');for j:=0 to 3 do write(ma{[}j{]});writeln;}

would set the variables such that 

\begin{verbatim}
m0=	1 	2 	3 	4
perm=	3	1	2	0
ma=	4	2	3	1
\end{verbatim}


\subsection{Pixels}
Standard Pascal is a strongly typed language, with a comparatively rich collection
of type abstractions : enumeration, set formation, sub-ranging, array formation,
cartesian product\footnote{The {\bf record} construct.} and unioning\footnote{The {\bf case}
construct in records.}. However as an image processing language it suffers from
the disadvantage that no support is provided for pixels and images.
Given the vintage of the language this is not surprising and, it may be thought,
this deficiency can be readily overcome using existing language features. 
Can pixels not
be defined as a subrange 0..255 of the integers, and images modeled as two
dimensional arrays? 

They can be, and are so defined in many applications, but such an approach throws
onto the programmer the whole burden of handling the complexities of limited
precision arithmetic. Among the problems are:\begin{enumerate}\item
When doing image processing it is frequently necessary to subtract one image
from another, or to create negatives of an image. Subtraction and negation
implies that pixels should be able to take on negative values.
\item When adding pixels using limited precision arithmetic, addition is nonmontonic due to wrap-round. 
Pixel values of $100 + 200 = 300$, which in
8 bit precision is truncated to 44 a value darker than either of the
starting values.
A similar problem can arise with subtraction, for instance $100-200=156$ in 8 bit unsigned arithmetic.
\item When multiplying 8 bit numbers, as one does in executing a convolution kernel,
one has to enlarge the representation and shift down by an appropriate amount to stay
within range.
\end{enumerate}
These and similar problems make the coding of image filters a skilled task. The difficulty
arises because one is using an inappropriate conceptual representation of pixels.

The {\em conceptual model} of pixels in Vector Pascal is that they are real numbers in
the range $-1.0 .. 1.0$. This representation overcomes the aforementioned difficulties.
As a signed representation it lends itself to subtraction. As an unbiased representation,
it makes the adjustment of contrast easier, one can reduce contrast 50\% simply by multiplying an image by 
 0.5
\footnote{When pixels are represented as integers in the range 0..255, a 50\% contrast reduction has to be
expressed as $((p-128) \div 2)+128$.}.
Assignment to pixel variables in Vector Pascal is defined to be saturating - real numbers outside
the range $-1..1$ are clipped to it.
The multiplications involved in convolution operations fall naturally into place.

The {\em implementation model} of pixels used in Vector Pascal
is of 8 bit signed integers treated as
 fixed point binary fractions.
 All the conversions necessary to preserve 
the monotonicity of addition, the range of multiplication etc, are delegated to the code generator
which, where possible, will implement the semantics using efficient,
 saturated multi-media  arithmetic instructions.

%For coders commited to the use of integral pixel representations, saturated addition and
%subtraction operations +: and -: are supported. 

%The type system of Pascal is extended by the provision of dynamic arrays and
%by the introduction of dimensioned types. 

\subsection{Dimensioned Types}

Dimensional analysis is familiar to scientists and engineers and provides a
routine check on the sanity of mathematical expressions. Dimensions can not
be expressed in the otherwise rigourous type system of standard Pascal, but
they are a useful protection against the sort of programming confusion between
imperial and metric units that caused the demise of a recent Mars probe. They
provide a means by which floating point types can be specialised to represent
dimensioned numbers as is required in physics calculations. For example:

\textbf{kms =(mass,distance,time);}

\textbf{meter=real of distance;}

\textbf{kilo=real of mass;}

\textbf{second=real of time;}

\textbf{newton=real of mass {*} distance {*} time POW -2;}

\textbf{meterpersecond = real of distance {*}time POW -1;}

%The grammar is given by:

%\vspace{0.3cm}
%{\centering \begin{tabular}{|c|c|}
%\hline 
%<dimensioned type>&
%<real type> <dimension >{[}'{*}' <dimension>{]}{*}\\
%\hline 
%\end{tabular}\par}
%\vspace{0.3cm}

%\vspace{0.3cm}
%{\centering \begin{tabular}{|c|c|}
%\hline 
%<real type>&
%'real'\\
%&
%'double'\\
%\hline 
%\end{tabular}\par}
%\vspace{0.3cm}

%\vspace{0.3cm}
%{\centering \begin{tabular}{|c|c|}
%\hline 
%<dimension>&
%<identifier> {[}'POW' {[}<sign>{]} <unsigned integer>{]}\\
%\hline 
%\end{tabular}\par}
%\vspace{0.3cm}

The identifier must be a member of a scalar type, and that scalar type is then
refered to as the {\em basis space} of the dimensioned type. The identifiers of the
basis space are refered to as the dimensions of the dimensioned type. Associated
with each dimension of a dimensioned type there is an integer number refered
to as the power of that dimension. This is either introduced explicitly at type
declaration time, or determined implicitly for the dimensional type of expressions. 

A value of a dimensioned type is a dimensioned value. Let \( \log_{d}t     \)
of a dimensioned type \( t \) be the power to which the dimension \( d \)
of type \( t \) is raised. Thus for \( t= \)newton in the example above, and
\( d= \)time, \( \log _{d}t=-2 \)

If \( x \) and \( y \) are values of dimensioned types \( t_{x} \)and \( t_{y} \)respectively,
then the following operators are only permissible if \( t_{x}=t_{y} \): +,
- ,<, >, =, <=, >=. For + and -, the dimensional type of the result is the same
as that of the arguments. The operations. The operations {*}, / are permited
if the types \( t_{x} \)and \( t_{y} \) share the same basis space, or if
the basis space of one of the types is a subrange of the basis space of the
other.  

The operation \textbf{POW} is permited between dimensioned types and integers.


\paragraph*{Dimension deduction rules}

\begin{enumerate}
\item If \( x=y*z \) for \( x:t_{1},y:t_{2},z:t_{3} \) with basis space \( B \)
then \( \forall _{d\in B}\log _{d}t_{1}=\log _{d}t_{2}+\log _{d}t_{3} \).
\item If \( x=y/z \) for \( x:t_{1},y:t_{2},z:t_{3} \) with basis space \( B \)
then \( \forall _{d\in B}\log _{d}t_{1}=\log _{d}t_{2}-\log _{d}t_{3} \).
\item If \( x=y \) \textbf{POW} \( z \) for \( x:t_{1},y:t_{2},z:integer \) with
basis space for \( t_{2} \), \( B \) then \( \forall _{d\in B}\log _{d}t_{1}=\log _{d}t_{2}\times z \).
\end{enumerate}

%\section{Expressions}

%The expression syntax of Vector Pascal incorportates extensions to refer to
%ranges of arrays and to operate on arrays as a whole.

\section{Implementation}

The Vector Pascal compiler is implemented in Java. It uses the ILCG\cite{Cockshott00}(Intermediate Language for Code Generators)
portable code generator generator system. A Vector Pascal program is translated into
an abstract semantic tree implemented as a Java datastructure. The tree is passed
to a machine generated Java class corresponding to the code generator for the
target machine. Code generator classes currently exist for the Intel 486, Pentium
with MMX, and P3 and also the AMD K6. Output is assembler code which is assembled
using the NASM assembler and linked using the gcc loader. Vector Pascal currently
runs under Windows98 , Windows2000 and Linux. Separate compilation using Turbo
Pascal style units is supported. C calling conventions  allow use of
existing libraries.

The code generators follow the pattern matching approach described in\cite{Aho}\cite{Cattel80}and
\cite{graham80}, and are automatically generated from machine specifications
written in ILCG . ILCG is a strongly
typed language which supports vector data types and the mapping of operators over vectors.
It is well suited to describing SIMD instructionsets. The code generator
classes export from their interfaces details about the degree of parallelism
supported for each data-type. This is used by the front end compiler to iterate
over arrays longer than those supported by the underlying machine. Where supported
parallelism is unitary, this defaults to iteration over the whole array.

Selection of target machines is by a compile time switch which causes the appropriate
code generator class to be dynamically loaded. 


\section{Conclusions}

Vector Pascal provides a new approach to providing a programming environment
for multi-media instructionsets. It borrows abstraction mechanisms that have
a long history of sucessfull use in interpretive programming languages, combining
these with modern compiler techniques to target SIMD instructionsets. It provides
a uniform source language that can target multiple different processors without
the programmer having to think about the target machine. Use of Java as the
implementation language aids portability of the compiler accross operating systems.
Work is underway to 
port the BLAS library to Vector Pascal, and to develop an IDE and literate programming
system for it.
\begin{thebibliography}{10}
\bibitem{AMD}Advanced Micro Devices, 3DNow! Technology Manual, 1999. 
\bibitem{Aho}Aho, A.V., Ganapathi, M, TJiang S.W.K., Code Generation Using Tree Matching
and Dynamic Programming, ACM Trans, Programming Languages and Systems 11, no.4,
1989, pp.491-516. 
\bibitem{Burke}Burke, Chris, J User Manual, ISI, 1995.
\bibitem{Cattel80}Cattell R. G. G., Automatic derivation of code generators from machine descriptions,
ACM Transactions on Programming Languages and Systems, 2(2), pp. 173-190, April
1980. 
\bibitem{Chaiten}Chaitin. G., Elegant Lisp Programs, in The Limits of Mathematics, pp. 29-56,
Springer, 1997.
\bibitem{Cheong97}Cheong, G., and Lam, M., An Optimizer for Multimedia Instruction Sets, 2nd SUIF
Workshop, Stanford University, August 1997. 
\bibitem{Cockshott00}Cockshott, Paul, Direct Compilation of High Level Languages for Multi-media
Instruction-sets, Department of Computer Science, University of Glasgow, Nov
2000.
\bibitem{Ewing} Ewing, A. K., Richardson, H., Simpson, A. D., Kulkarni, R., Writing Data Parallel
Programs with High Performance Fortran, Edinburgh Parallel Computing Centre, Ver 1.3.1.
\bibitem{graham80}Susan L. Graham, Table Driven Code Generation, IEEE Computer, Vol 13, No. 8,
August 1980, pp 25..37. 
\bibitem{IA32 }Intel, Intel Architecture Software Developers Manual Volumes 1 and 2, 1999. 
\bibitem{Intel00}Intel, Willamette Processor Software Developer's Guide, February, 2000. 
\bibitem{ISO90}ISO, Extended Pascal ISO 10206:1990, 1991.
\bibitem{Iverson62}Iverson K. E., A Programming Language, John Wiley \& Sons, Inc., New York (1962),
p. 16. 
\bibitem{Iversion80}Iverson, K. E. . Notation as a tool of thought. Communications of the ACM, 23(8),
444-465, 1980.
\bibitem{Jmanual}Iverson K. E, A personal View of APL, IBM Systems Journal, Vol 30, No 4, 1991. 
\bibitem{Jintro}Iverson, Kenneth E., J Introduction and Dictionary, Iverson Software Inc. (ISI),
Toronto, Ontario, 1995.~
\bibitem{Wirth}Jensen K., and Wirth N., Pascal User Manual and Report, Springer, 1978.
\bibitem{Krall00}Krall, A., and Lelait, S., Compilation Techniques for Multimedia Processors,
International Journal of Parallel Programming, Vol. 28, No. 4, pp 347-361, 2000. 
\bibitem{Leupers99}Leupers, R., Compiler Optimization for Media Processors, EMMSEC 99/Sweden 1999. 
\bibitem{Metcalf96}Metcalf, M., and Reid., J., The F Programming Language, OUP, 1996. 
\bibitem{Peleg97}Peleg, A., Wilke S., Weiser U., Intel MMX for Multimedia PCs, Comm. ACM, vol
40, no. 1 1997. 
\bibitem{Sreraman00}Srereman, N., and Govindarajan, G., A Vectorizing Compiler for Multimedia Extensions,
International Journal of Parallel Programming, Vol. 28, No. 4, pp 363-400, 2000.
%\bibitem{Tanenbaum} Tannenbaum, A. S., A Tutorial on {\sc Algol 68}, Computing Surveys, Vol. 8, No. 2, June 1976, p.155-190.


\bibitem{vanderMeulen}van der Meulen, S. G.,{\sc Algol 68} Might Have Beens, SIGPLAN notices Vol. 12, No. 6, 1977.
 





 \end{thebibliography}
\end{document}
