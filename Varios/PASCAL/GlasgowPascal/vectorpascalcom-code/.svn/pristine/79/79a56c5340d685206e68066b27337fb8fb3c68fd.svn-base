/* This file was generated by SableCC (http://www.sablecc.org/). */

package ilcgasm.lexer;

import java.io.*;
import java.util.*;
import ilcgasm.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;

        if(gotoTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Lexer.class.getResourceAsStream("lexer.dat")));

                // read gotoTable
                int length = s.readInt();
                gotoTable = new int[length][][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][][];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        length = s.readInt();
                        gotoTable[i][j] = new int[length][3];
                        for(int k = 0; k < gotoTable[i][j].length; k++)
                        {
                            for(int l = 0; l < 3; l++)
                            {
                                gotoTable[i][j][k][l] = s.readInt();
                            }
                        }
                    }
                }

                // read accept
                length = s.readInt();
                accept = new int[length][];
                for(int i = 0; i < accept.length; i++)
                {
                    length = s.readInt();
                    accept[i] = new int[length];
                    for(int j = 0; j < accept[i].length; j++)
                    {
                        accept[i][j] = s.readInt();
                    }
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("Unable to read lexer.dat.");
            }
        }
    }

    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            Token token = new14(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            Token token = new15(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(String text, int line, int pos) { return new TFloatingConstant(text, line, pos); }
    Token new1(int line, int pos) { return new TVector(line, pos); }
    Token new2(int line, int pos) { return new TRef(line, pos); }
    Token new3(int line, int pos) { return new TBra(line, pos); }
    Token new4(int line, int pos) { return new TKet(line, pos); }
    Token new5(int line, int pos) { return new TSbra(line, pos); }
    Token new6(int line, int pos) { return new TSket(line, pos); }
    Token new7(int line, int pos) { return new TColon(line, pos); }
    Token new8(int line, int pos) { return new TComma(line, pos); }
    Token new9(String text, int line, int pos) { return new TIntlit(text, line, pos); }
    Token new10(String text, int line, int pos) { return new TString(text, line, pos); }
    Token new11(String text, int line, int pos) { return new TTypeid(text, line, pos); }
    Token new12(String text, int line, int pos) { return new TIdentifier(text, line, pos); }
    Token new13(String text, int line, int pos) { return new TOpidentifier(text, line, pos); }
    Token new14(String text, int line, int pos) { return new TBlank(text, line, pos); }
    Token new15(String text, int line, int pos) { return new TComment(text, line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {36, 36, 5}, {39, 39, 6}, {40, 40, 7}, {41, 41, 8}, {42, 42, 9}, {43, 43, 10}, {44, 44, 11}, {45, 45, 12}, {46, 46, 13}, {47, 47, 14}, {48, 57, 15}, {58, 58, 16}, {60, 60, 17}, {61, 61, 18}, {62, 62, 19}, {65, 90, 20}, {91, 91, 21}, {93, 93, 22}, {94, 94, 23}, {95, 95, 24}, {97, 99, 20}, {100, 100, 25}, {101, 103, 20}, {104, 104, 26}, {105, 105, 27}, {106, 110, 20}, {111, 111, 28}, {112, 112, 20}, {113, 113, 29}, {114, 114, 30}, {115, 116, 20}, {117, 117, 31}, {118, 118, 32}, {119, 119, 33}, {120, 122, 20}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{36, 36, 34}, {48, 57, 35}, {65, 90, 36}, {95, 95, 37}, {97, 122, 36}, },
            {{0, 38, 38}, {40, 127, 38}, },
            {},
            {},
            {{42, 42, 39}, {43, 43, 40}, {45, 45, 41}, {47, 47, 42}, {58, 58, 43}, {60, 60, 44}, {61, 61, 45}, {62, 62, 46}, {94, 94, 47}, },
            {{42, 45, -11}, {46, 46, 13}, {47, 47, 42}, {48, 57, 15}, {58, 94, -11}, },
            {},
            {{42, 94, -12}, },
            {{48, 57, 48}, },
            {{42, 42, 49}, {43, 94, -11}, },
            {{46, 46, 50}, {48, 57, 15}, {69, 69, 51}, {101, 101, 52}, },
            {{42, 94, -11}, },
            {{42, 94, -11}, },
            {{42, 94, -11}, },
            {{42, 94, -11}, },
            {{36, 122, -7}, },
            {},
            {},
            {{42, 94, -11}, },
            {{36, 122, -7}, },
            {{36, 95, -7}, {97, 110, 36}, {111, 111, 53}, {112, 122, 36}, },
            {{36, 95, -7}, {97, 97, 54}, {98, 122, 36}, },
            {{36, 95, -7}, {97, 100, 36}, {101, 101, 55}, {102, 109, 36}, {110, 110, 56}, {111, 122, 36}, },
            {{36, 95, -7}, {97, 98, 36}, {99, 99, 57}, {100, 122, 36}, },
            {{36, 95, -7}, {97, 116, 36}, {117, 117, 58}, {118, 122, 36}, },
            {{36, 100, -29}, {101, 101, 59}, {102, 122, 36}, },
            {{36, 95, -7}, {97, 104, 36}, {105, 105, 60}, {106, 109, 36}, {110, 110, 61}, {111, 122, 36}, },
            {{36, 100, -29}, {101, 101, 62}, {102, 110, 36}, {111, 111, 63}, {112, 122, 36}, },
            {{36, 110, -27}, {111, 111, 64}, {112, 122, 36}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
            {{0, 38, 38}, {39, 39, 65}, {40, 127, 38}, },
            {{42, 94, -11}, },
            {{42, 94, -11}, },
            {{42, 94, -11}, },
            {{42, 94, -11}, },
            {{42, 94, -11}, },
            {{42, 94, -11}, },
            {{42, 94, -11}, },
            {{42, 94, -11}, },
            {{42, 94, -11}, },
            {{48, 57, 48}, {69, 69, 66}, {70, 70, 67}, {76, 76, 68}, {101, 101, 69}, {102, 102, 70}, {108, 108, 71}, },
            {{0, 41, 72}, {42, 42, 73}, {43, 43, 74}, {44, 44, 72}, {45, 45, 75}, {46, 46, 72}, {47, 47, 76}, {48, 57, 72}, {58, 58, 77}, {59, 59, 72}, {60, 60, 78}, {61, 61, 79}, {62, 62, 80}, {63, 93, 72}, {94, 94, 81}, {95, 127, 72}, },
            {{48, 108, -50}, },
            {{43, 43, 82}, {45, 45, 83}, {48, 57, 84}, },
            {{43, 57, -53}, },
            {{36, 116, -31}, {117, 117, 85}, {118, 122, 36}, },
            {{36, 95, -7}, {97, 107, 36}, {108, 108, 86}, {109, 122, 36}, },
            {{36, 100, -29}, {101, 101, 87}, {102, 122, 36}, },
            {{36, 95, -7}, {97, 115, 36}, {116, 116, 88}, {117, 122, 36}, },
            {{36, 115, -58}, {116, 116, 89}, {117, 122, 36}, },
            {{36, 95, -7}, {97, 97, 90}, {98, 122, 36}, },
            {{36, 95, -7}, {97, 101, 36}, {102, 102, 91}, {103, 122, 36}, },
            {{36, 95, -7}, {97, 109, 36}, {110, 110, 92}, {111, 122, 36}, },
            {{36, 95, -7}, {97, 99, 36}, {100, 100, 93}, {101, 122, 36}, },
            {{36, 98, -30}, {99, 99, 94}, {100, 122, 36}, },
            {{36, 104, -33}, {105, 105, 95}, {106, 122, 36}, },
            {{36, 95, -7}, {97, 113, 36}, {114, 114, 96}, {115, 122, 36}, },
            {},
            {{43, 43, 97}, {45, 45, 98}, {48, 57, 99}, },
            {},
            {},
            {{43, 57, -68}, },
            {},
            {},
            {{0, 41, 72}, {42, 42, 100}, {43, 127, 72}, },
            {{0, 41, 101}, {42, 42, 73}, {43, 43, 102}, {44, 44, 101}, {45, 45, 103}, {46, 46, 101}, {47, 47, 104}, {48, 57, 101}, {58, 58, 105}, {59, 59, 101}, {60, 60, 106}, {61, 61, 107}, {62, 62, 108}, {63, 93, 101}, {94, 94, 109}, {95, 127, 101}, },
            {{0, 127, -51}, },
            {{0, 127, -51}, },
            {{0, 127, -51}, },
            {{0, 127, -51}, },
            {{0, 127, -51}, },
            {{0, 127, -51}, },
            {{0, 127, -51}, },
            {{0, 127, -51}, },
            {{48, 57, 84}, },
            {{48, 57, 84}, },
            {{48, 57, 84}, {70, 70, 110}, {76, 76, 111}, {102, 102, 112}, {108, 108, 113}, },
            {{36, 95, -7}, {97, 97, 36}, {98, 98, 114}, {99, 122, 36}, },
            {{36, 101, -61}, {102, 102, 115}, {103, 122, 36}, },
            {{36, 100, -29}, {101, 101, 116}, {102, 122, 36}, },
            {{36, 36, 34}, {48, 48, 35}, {49, 49, 117}, {50, 50, 35}, {51, 51, 118}, {52, 53, 35}, {54, 54, 119}, {55, 55, 35}, {56, 56, 120}, {57, 57, 35}, {65, 122, -7}, },
            {{36, 100, -29}, {101, 101, 121}, {102, 122, 36}, },
            {{36, 99, -63}, {100, 100, 122}, {101, 122, 36}, },
            {{36, 122, -7}, },
            {{36, 115, -58}, {116, 116, 123}, {117, 122, 36}, },
            {{36, 100, -29}, {101, 101, 124}, {102, 122, 36}, },
            {{36, 115, -58}, {116, 116, 125}, {117, 122, 36}, },
            {{36, 99, -63}, {100, 100, 126}, {101, 122, 36}, },
            {{36, 99, -63}, {100, 100, 127}, {101, 122, 36}, },
            {{48, 57, 99}, },
            {{48, 57, 99}, },
            {{48, 57, 99}, {70, 76, -50}, {102, 108, -50}, },
            {{0, 41, 101}, {42, 42, 100}, {43, 46, 101}, {47, 47, 128}, {48, 127, 101}, },
            {{0, 41, 129}, {42, 42, 130}, {43, 127, 129}, },
            {{0, 41, 129}, {42, 42, 131}, {43, 43, 132}, {44, 44, 129}, {45, 45, 133}, {46, 46, 129}, {47, 47, 134}, {48, 57, 129}, {58, 58, 135}, {59, 59, 129}, {60, 60, 136}, {61, 61, 137}, {62, 62, 138}, {63, 93, 129}, {94, 94, 139}, {95, 127, 129}, },
            {{0, 127, -104}, },
            {{42, 94, -11}, },
            {{0, 127, -104}, },
            {{0, 127, -104}, },
            {{0, 127, -104}, },
            {{0, 127, -104}, },
            {{0, 127, -104}, },
            {},
            {},
            {},
            {},
            {{36, 107, -56}, {108, 108, 140}, {109, 122, 36}, },
            {{36, 95, -7}, {97, 118, 36}, {119, 119, 141}, {120, 122, 36}, },
            {{36, 36, 34}, {48, 50, 35}, {51, 51, 142}, {52, 53, 35}, {54, 54, 143}, {55, 57, 35}, {65, 122, -7}, },
            {{36, 36, 34}, {48, 53, 35}, {54, 54, 144}, {55, 122, -118}, },
            {{36, 36, 34}, {48, 49, 35}, {50, 50, 145}, {51, 57, 35}, {65, 122, -7}, },
            {{36, 36, 34}, {48, 51, 35}, {52, 52, 146}, {53, 57, 35}, {65, 122, -7}, },
            {{36, 122, -7}, },
            {{36, 115, -58}, {116, 116, 147}, {117, 122, 36}, },
            {{36, 118, -117}, {119, 119, 148}, {120, 122, 36}, },
            {{36, 48, -90}, {49, 49, 149}, {50, 50, 35}, {51, 51, 150}, {52, 53, 35}, {54, 54, 151}, {55, 55, 35}, {56, 56, 152}, {57, 122, -90}, },
            {{36, 101, -61}, {102, 102, 153}, {103, 122, 36}, },
            {{36, 110, -27}, {111, 111, 154}, {112, 122, 36}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
            {},
            {{0, 127, -103}, },
            {{0, 41, 101}, {42, 42, 130}, {43, 127, -102}, },
            {{0, 41, 101}, {42, 42, 131}, {43, 127, -75}, },
            {{0, 127, -104}, },
            {{0, 127, -104}, },
            {{0, 127, -104}, },
            {{0, 127, -104}, },
            {{0, 127, -104}, },
            {{0, 127, -104}, },
            {{0, 127, -104}, },
            {{0, 127, -104}, },
            {{36, 100, -29}, {101, 101, 155}, {102, 122, 36}, },
            {{36, 110, -27}, {111, 111, 156}, {112, 122, 36}, },
            {{36, 49, -120}, {50, 50, 157}, {51, 122, -120}, },
            {{36, 51, -121}, {52, 52, 158}, {53, 122, -121}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
            {{36, 110, -27}, {111, 111, 159}, {112, 122, 36}, },
            {{36, 53, -119}, {54, 54, 160}, {55, 122, -118}, },
            {{36, 49, -120}, {50, 50, 161}, {51, 122, -120}, },
            {{36, 51, -121}, {52, 52, 162}, {53, 122, -121}, },
            {{36, 122, -7}, },
            {{36, 104, -33}, {105, 105, 163}, {106, 122, 36}, },
            {{36, 113, -66}, {114, 114, 164}, {115, 122, 36}, },
            {{36, 118, -117}, {119, 119, 165}, {120, 122, 36}, },
            {{36, 113, -66}, {114, 114, 166}, {115, 122, 36}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
            {{36, 113, -66}, {114, 114, 167}, {115, 122, 36}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
            {{36, 109, -62}, {110, 110, 168}, {111, 122, 36}, },
            {{36, 122, -7}, },
            {{36, 110, -27}, {111, 111, 169}, {112, 122, 36}, },
            {{36, 99, -63}, {100, 100, 170}, {101, 122, 36}, },
            {{36, 99, -63}, {100, 100, 171}, {101, 122, 36}, },
            {{36, 100, -29}, {101, 101, 172}, {102, 122, 36}, },
            {{36, 113, -66}, {114, 114, 173}, {115, 122, 36}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
            {{36, 99, -63}, {100, 100, 174}, {101, 122, 36}, },
            {{36, 99, -63}, {100, 100, 175}, {101, 122, 36}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 14, 14, 14, 14, 12, -1, 3, 4, 13, 13, 8, 13, -1, 13, 9, 7, 13, 13, 13, 12, 5, 6, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, -1, 13, 13, 13, 13, 13, 13, 13, 13, 13, 0, 13, 0, -1, -1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 10, -1, 0, 0, -1, 0, 0, -1, 13, 13, 13, 13, 13, 13, 13, 13, 13, -1, -1, 0, 12, 12, 12, 12, 12, 12, 2, 12, 12, 12, 12, 12, -1, -1, 0, -1, -1, 13, 13, 13, 13, 13, 13, 13, 13, 0, 0, 0, 0, 12, 12, 12, 12, 12, 12, 11, 12, 12, 12, 12, 12, 11, 11, 15, -1, -1, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 12, 12, 12, 12, 11, 12, 12, 12, 12, 11, 11, 12, 11, 11, 11, 12, 1, 12, 12, 12, 12, 12, 11, 11, 12, 12, 11, 11, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }
}
