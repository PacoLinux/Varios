\documentstyle{amsart}
\title{Conformance of Vector Pascal with ISO Pascal}
\author{Paul Cockshott}
\begin{document}
\maketitle
Vector Pascal is designed as a superset of ISO Pascal, but it is also
designed to be compatible with Turbo Pascal given the wide usage
of Turbo Pascal. This involves some non conformance with the
ISO standard. In addition some other aspects of non-conformance
have been deliberately chosen.

The conformance has been tested using the BSI Pascal Validation suite.
In what follows I identify the points of non-conformance with the
standard that have been exposed by the test suite.
\subsection*{ 6.1.1-2. FILE=CONF002,    }

This fails because the Vector Pascal compiler does yet not allow
function parameters to procedures. The Delphi compiler also reports
this as an error. This is recognised as a deficiency to be corrected
in later releases of Vector Pascal.

\subsection*{6.1.2-2, FILE=CONF005,               }
{                                                                    }
{This program contains identifiers which some processors may        }
disallow because they have extended the word-symbol list.  

This tests to see if certain identifiers have been made reserved words
in an implementation. For instance the test program declares a variable
\verb+new+. This is rejected by Vector Pascal which treats {\tt new}
as a reserved word. Pascal compilers are allowed to have addtional
reserved words but there should be a standard compliant mode of
compilation for which these reserved words are disabled.
No such standard compliant mode is presently provided for Vector Pascal.

There are no plans at present to remove this restriction. Note that
the Delphi compiler also fails on this test for similar reasons.


\subsection*{6.1.9-1. FILE=CONF019,               }
{                                                                    }
{This program checks that the two equivalent forms of comment       }
{delimiters are implemented correctly. }

This tests if comments that start with \{ can end with \verb+ *)+
and that comments that start with \verb+(*+ can end with \}.

This non-conformance is deliberate to maintain compatibility with
the existing code base for Turbo Pascal which allows comments
bracketed by \verb+(* *)+ to enclose comments bracketed
by \verb+{ }+.
\subsection*{ 6.3-10. FILE=CONF033,     }
This test fails because the test program test to see if 
\verb+(-7) mod 5+$=3$. Vector Pascal evaluates it to -2,
as does Delphi. This evaluation seems compatible with
the definition of mod in ISO 10206 as 
\begin{quote} the value of i mod j shall be the value
of $(i-(k*j))$ for integral $k$ such that $0\le$ i mod j$<j$.
\end{quote}
thus no change will be made to the Vector Pascal implementation. 
\subsection*{Test FILE=CONF037}
                                                                  
This test checks that the required constant identifiers, true and  
false, have been correctly enumerated.                             
                                                                    
 The Pascal Standard states that type boolean shall have            
 enumeration values which are denoted by false and true, such that  
 false is the predecessor of true.  It also states that the ord of  
 these values are 0 and 1 respectively.

The Vector Pascal system denotes true internally by -1 and false
by zero. This is for compatibility with SIMD instructionsets which
typically evaluate true and false in this way. This representation
allows efficient masking operations to be performed in the parallel
evaluation of conditional expressions ( a Vector Pascal extension).
The lack of conformance in this case is deliberate.

\subsection*{ 6.4.2.2-7. FILE=CONF041,  }
This fails because Max is used as a variable in the program whereas
it is a reserved operator name in Vector Pascal. If the variable is
renamed TheMax the test passes.
\subsection*{6.4.3.2-10. FILE=CONF054,            }
{                                                                    }
{This test checks that arrays, whose component-types are            }
{file-types, behave as required.  }

It fails for Vector Pascal because Vector Pascal uses Turbo Pascal style
file handling rather than Standard Pascal files. In particular the
construct f\^ for f a file name is not supported. Delphi also rejects this
test.

\subsection*{  6.4.3.3-1. FILE=CONF055,  }
This fails because the identifiers Name and String are declared, whereas
each is a reserved word in Vector Pascal. It fails 
for Delphi for the same reason.
If the names of the identifiers are changed it passes the test.
\subsection*{ 6.4.3.4-1. FILE=CONF063,             }
{                                                                    }
{This program tests that set-types are permitted.                   }

It fails because it attempts the following:\begin{verbatim}
  v5 := [0 .. 4] * v4;
\end{verbatim}  
where \begin{verbatim}
v4:set 1..10;
v5:set 0..3;          
\end{verbatim}
Vector Pascal rejects as type unsafe this because it treats types {\tt set 0..3} and {\tt set 1..10 }
as distinct. A set 1..10 would occupy 2 bytes and a set 0..3 would occupy 1 byte.

Vector Pascal allows arbitrarily large sets of integers and implements such
sets as packed sets. This  means that sets involved in set assignments
must be strictly of the same type.                 

An attempt will be made to bring the Vector Pascal implementation into conformance
with the ISO standard on this.
\subsection*{6.4.3.5-3, FILE=CONF067}
{This program tests if an end-of-line marker is inserted at the end }
{of the line, if not explicitly done in the program.                }
{                                                                    }
{ The structure of a text file requires a closing linemarker.        }
{ Conforming processors will insert the linemarker automatically to  }
{ make the textfile conform.                                         }

Failure is because the file/io in Vector
Pascal follows that of Turbo Pascal
rather than ISO-Pascal.

The same restriction affects tests
{  6.4.3.5-4, file CONF068,   } to test 6.4.3.5-12, file CONF076 and
test 6.4.4-4, file CONF078.
Delphi also fails this set of tests.

\subsection*{6.4.5-4. FILE=CONF082,               }
{                                                                    }
{This test checks that string types with the same number of         }
{components are compatible. }
However it does this both by comparing string literals and by comparing
packed arrays of char thus:
\begin{verbatim}
 if 'ABC' = 'ABC' then
      if string1 <> string2 then
\end{verbatim}
where {\tt string1, string2} are defined as packed arrays of char.
In Vector Pascal this is an error since comparison of two vectors returns
a vector of booleans not a scalar boolean value.
\subsection*{6.4.5-5, FILE=CONF083}

{This test checks the type-compatibility rules for sets.            }

{                                                                    }
{ Set-types are compatible if their base-types are compatible which  }
{ means identical or subranges thereof, and are jointly packed or    }
{ unpacked.  This test tries several combinations which should be    }
{ allowed.                                                           }

Vector Pascal fails this for the same reason that it fails test
6.4.3.4-1. Action should be taken to remedy this disrepancy.

\subsection*{6.5.1-1, FILE=CONF088          }
{                                                                    }
{This test contains examples of legal type and variable             }
{declarations.                                                      }

It fails because the Vector Pascal reserved words name, operator and max
are used as identifiers.              
\end{document}
