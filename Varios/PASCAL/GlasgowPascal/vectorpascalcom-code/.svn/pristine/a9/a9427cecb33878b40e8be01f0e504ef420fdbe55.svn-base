\documentstyle{article}
\begin{document}

\title{An intermediate language for code generation}
\author{W P Cockshott}
\maketitle
The purpose of ILCG to 
mediate between CPU instruction sets and high level language programs.
It poth provides a representation to which compilers can translate
a variety of source level programming languages and also a notation for
defining the semantics of CPU instructions.


Its purpose is to act as an input to two types of programs:
\begin{enumerate}\item ILCG structures produced by a HLL compiler are input to 
an automatically constructed code generator,
working on the syntax matching principles described in \cite{graham80}. This then
generates equivalent sequences of assembler statements.
\item
\end{enumerate}
It is assumed that all store allocation appart from register spillage has already been accomplished.

It is itself intended to be machine independent in that it abstracts from the instruction
model of the machine on which it is being executed. However, it will assume certain
things about the machine. It will assume that certain basic types are supported and that
the machine is addressed at the byte level.

We further assume that all type conversions, dereferences etc have to be made
absolutely explicit.
Since the notation is intended primarily to be machine generated we are not particularly
concerned with human readability, and thus use a prefix notation.

In what follows we will designate terminals of the language in bold thus {\bf octet}
and nonterminal in sloping font thus {\sl word8}.
\section{Supported types}
\subsection{Data formats}
The data in a memory can be distinguished initially in terms of the number of bits
in the individually addressable chunks. The addressable chunks are assumed to be the
powers of two from 3 to 7, so we thus have as allowed formats:{\sl word8, word16, word32, word64,
word128}.
These are treated as non terminals in the grammar of ILCG.

When data is being explicitly operated on without regard to its type, we have terminals which
stand for these formats: {\bf octet, halfword, word, doubleword, quadword}.
\subsection{Typed formats}
Each of these underlying formats can contain information of different types, either
signed or unsigned integers, floats etc.

We thus allow the following integer types as terminals in the language:{\bf
int8, uint8, int16, uint16, int32, uint32, int64, uint64 }to stand for signed and
unsigned integers of the appropriate lengths.

The integers are logically grouped into {\sl signed} and {\sl unsigned}.
As non terminal types they are represented as 
{\sl byte, short, integer, long} and
{\sl ubyte, ushort, uinteger, ulong}.

Floating point numbers are either assumed to be 32 bit or 64 bit with 32 bit numbers
given the nonterminal symbols {\sl float,double}. If we wish to specify a particular
representation of floats of doubles we can use the terminals {\bf ieee32, ieee64}.



\subsection{Ref types}
A value can be a reference to another type. Thus an integer when used as
an address of a 64 bit floating point number would be a {\bf ref ieee64 }.
Ref types include registers. An integer register would be a {\bf ref int32}
when holding an integer, a {\bf ref ref int32} when holding the address
of an integer etc.
\section{Supported operations}
\subsection{Type coercions}
In order to prevent the $n^2 $ problem associated with conversions
between $n$ different types, ILCG provides a limited subset of 
allowed expansions, which, by composition allow any conversion requested
without minimal loss of accuracy.
The compressions necessarily involve a loss of accuracy.

The allowed conversions are summarised in the tables \ref{expansions}
and \ref{contractions}.

The syntax for the type conversions is C style so we have
for example {\tt (ieee64) int32} to represent a conversion
of an 32 bit integer to a 64 bit real.


\begin{table}\caption{Range expanding coercions}\label{expansions}
\center
\begin{tabular}{lll}
INPUT& OUTPUT \\
byte & integer\\
ubyte & integer\\
short &integer\\
ushort& integer\\
uinteger & double\\
integer & double \\
float & double \\
long & double \\
\end{tabular}
\end{table}
\begin{table}\caption{Range contracting coercions}\label{contractions}
\center
\begin{tabular}{ll}
INPUT& OUTPUT \\
integer & byte\\
integer & ubyte\\
integer &short\\
integer &ushort\\
double & uinteger\\
  double& integer\\
double & float \\
double & long \\
\end{tabular}
\end{table}
\subsection{Arithmetic}
The allowed arithmetic operations are addition, multiplication,
subtraction, 
division and remainder with operator symboles {\bf +,*,-,div , mod}.. 
The arithmetic is assumed to take place at the precisions 
of 32 bit integer and 64 bit reals.

The syntax is prefix with bracketing. Thus 
the infix operation $ 3+5 \div 7$ would be
represented as {\bf +(3 div (5 7))}.
\subsection{Memory}
Memory is explicitly represented. All accesses to memory are
represented by array operations on a predefined array {\bf mem}.
Thus location 100 in memory is represented as {\bf mem(100)}.
The type of such an expression is {\sl address}.
It can be cast to a reference type of a given format.
Thus we could have
{\bf

(ref int32)mem(100)
}

\subsection{ Assignment }
We have a set of storage  operators corresponding to the
word lengths supported. These  have the form of 
infix operators. The size of the store being performed
depends on the size of the right hand side.
A valid storage statement might be 
{\bf

(ref octet)mem( 299) :=(int8) 99

}
The first argument is always a reference and the second 
argument a value of the appropriate format.

If the left hand side is a format the right hand side
must be a value of the appropriate size.
If the left hand side is an explicit type rather than
a format, the right hand side must have the same type.
\subsection{ Dereferencing}
Dereferencing is done explicitly when a value other than a literal is required.
There is a dereference operator, which converts a reference 
into the value that it references.
 A valid load expression might be:
{\bf

(octet)$\uparrow$  ( (ref octet)mem(99))

}
The argument to the load operator must be a reference.

\section{Machine description}
Ilcg can be used to describe the semantics of machine instructions.
A machine description typically consists of a set of register declarations
followed by a set of instruction formats and a set of operations.
This approach works well only with machines that have an orthogonal
instruction set, ie, those that allow addressing modes and operators
to be combined in an independent manner.
\subsection{Registers }
When entering machine descriptions in ilcg registers can be declared
along with their type hence
{\bf

register word EBX assembles['ebx'] ;

reserved register word ESP assembles['esp'];
 

}
would declare {\bf EBX} to be of type {\bf ref word}.

\subsubsection{Aliasing}
A register can be declared to be a sub-field of another register,
hence we could write 
{\bf

 alias register octet AL = EAX(0:7) assembles['al']; 

 alias register octet BL = EBX(0:7) assembles['bl'];


}
to indicate that {\bf BL} occupies the bottom 8 bits of register {\bf EBX}.
In this notation bit zero is taken to be the least significant bit of a value.
There are assumed to be two pregiven registers {\bf FP, GP} that
are used by compilers to point to  areas of memory.
These can be aliased to a particular real register.{\bf

register word EBP assembles['ebp'] ;

alias register word FP = EBP(0:31) assembles ['ebp'];

}

Additional registers may be reserved, indicating that the code generator
must not use them to hold temporary values:

{\bf

reserved register word ESP assembles['esp'];
}
 
\subsection{Register sets}
A set of registers that are used in the same way by the instructionset
can be defined.
{\bf

pattern reg means [$ EBP| EBX|ESI|EDI|ECX |EAX|EDX|ESP$]  ;

pattern breg means[$ AL|AH|BL|BH|CL|CH|DL|DH$];
}

All registers in an register set should be of the same length.


\subsection{Register Arrays}
Some machine designs have regular arrays of registers.
Rather than have these exhaustively enumerated it is convenient to
have a means of providing an array of registers.
This can be declared as:


{\bf

register  vector(8)doubleword MM assembles['MM'i] ;

}
 
 
This declares the symbol MMX to stand for the entire MMX register
set. It implicitly defines how the register names are to be
printed in the assembly language by defining an indexing variable
i that is used in the assembly language definition.

We also need a syntax for explicitly identifying individual
registers in the set. This is done by using
the dyadic subscript operator:
{\bf

subscript(MM,2)

}
which would be of type {\bf ref doubleword}.
\subsection{Register Stacks}
Whilst some machines have registers organised as an array,
another class of machines, those oriented around postfix instructionsets,
have register stacks.

The ilcg syntax allows register stacks to be declared:



{\bf

register stack (8)ieee64 FP assembles[ ' '] ;


}

Two access operations are supported on stacks:
\paragraph{PUSH} is a void dyadic operator taking a stack of type ref $t$ as first argument
and a value of  type $t$ as the second argument. Thus we might have:
{ \bf

PUSH(FP,$\uparrow$mem(20))
}

\paragraph{POP} is a monadic operator returning $t$ on stacks of type $t$. So we might have
{\bf

mem(20):=POP(FP)
} 
In addition there are two predicates on stacks that can be used in pattern pre-conditions.
\paragraph{FULL} is a monadic boolean operator on stacks.
\paragraph{EMPTY} is a monadic boolean operator on stacks.
\subsection{Instruction formats}

An instruction format is an abstraction over a class of concrete instructions.
It abstracts over particular operations
 and types thereof
whilst specifying how arguments can be combined.
{\bf

instruction pattern 

RR( operator op, anyreg r1, anyreg r2, int t)

        means[r1:=(t) op( $\uparrow$((ref t) r1),$\uparrow$((ref t) r2))]    

	assembles[op ' ' r1 ',' r2];


}
In the above example, we specify a register to register instruction format
that uses the first register as a source and a destination whilst the second
register is only a destination. The 
 result is returned in register r1.


We might however wish to have a more powerful abstraction, which was capable of
taking more abstract apecifications for its arguments. For example, many machines
allow arguments to instructions to be addressing modes that can be either
registers or memory references. For us to be able to specify this in an instruction
format we need to be able to provide grammer non-terminals as arguments
to the instruction formats.

For example we might want to be able to say

{\bf

instruction  pattern 

RRM(operator op, reg r1, maddrmode rm, int t)

        means [r1:=(t) op( $\uparrow$((ref t)r1),$\uparrow$((ref t) rm))]

        assembles[op ' ' r1 ',' rm ] ;}

This implies that addrmode and reg must be non terminals.
Since the non terminals required by different machines will vary, there
must be a means of declaring such non-terminals in ilcg.

An example would be:
{
\bf 

 


 pattern regindirf(reg r) 

	means[$\uparrow$(r) ]
	assembles[ r ];

pattern baseplusoffsetf(reg r, signed s) 

	means[+(  $\uparrow$(r) ,const s)]
	assembles[  r '+' s ];

pattern addrform means[baseplusoffsetf$|$ regindirf];

 

pattern maddrmode(addrform f) 

means[mem(f) ] assembles[ '[' f ']' ];

}
This gives us a way of including non terminals as parameters to patterns.




\section{Grammar}
The following grammar is given in Sable \cite{sable} compatible form.
We do not imply that the grammar is to be parsed using sable, the
grammar exists as a convenient way of specifying the operations
supported. It is assumed that the data format used for ilcg will
actually be abstract parse trees. In principle of course,
we could use Sable to generate such trees from an input source, but
the sable parse trees are a little heavyweight for our purposes.
\input ilcggram

\section{Partial escription of the IA32 architecture in ILCG}
 
\input{/cpus/ia32.ilc}
 
\subsection{Concrete representation}
\begin{thebibliography}{------------}
\bibitem{graham80} Susan L. Graham, Table Driven Code Generation, IEEE Computer, Vol 13, No. 8,
August 1980, pp 25..37.
\bibitem{sable} \' Etienne Gagnon , SABLECC, AN OBJECT-ORIENTED
                     COMPILER FRAMEWORK,
                                   School of Computer Science
                                   McGill University, Montreal ,
                                          March 1998. 
\end{thebibliography}
\end{document}
