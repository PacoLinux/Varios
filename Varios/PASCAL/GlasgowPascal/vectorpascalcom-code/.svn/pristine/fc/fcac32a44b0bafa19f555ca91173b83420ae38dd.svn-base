/*
\section{ILCG assembler language grammar}
This is a definition of the grammer of ILCG using the Sable grammar specification
lanaguage. It is input to Sable to generate a parser for machine descriptions in
ilcg


\begin{verbatim}
*/




Package ilcgasm;
/*\end{verbatim}
\subsection{Helpers}
Helpers are regular expressions macros used in the definition of terminal symbols of the grammar.
\begin{verbatim}*/
Helpers
  alph = [['A'..'Z']+['a'..'z']];
  letter =alph|'_'|'$';
  digit = ['0'..'9'];
  alphanum = letter|digit;
  cr = 13;
  lf = 10;
  tab = 9;
  digit_sequence = digit+;
  fractional_constant = digit_sequence? '.' digit_sequence | digit_sequence '.';
  sign = '+' | '-';
  exponent_part = ('e' | 'E') sign? digit_sequence;
  floating_suffix = 'f' | 'F' | 'l' | 'L';
  eol = cr lf | cr | lf;        // This takes care of different platforms
  not_cr_lf = [[32..127] - [cr + lf]];
  exponent = ('e'|'E');
  quote = ''';
  all =[0..127];
  schar = [all-'''];
  not_star = [all - '*'];
  not_star_slash = [not_star - '/'];
  opsym='+' | '-' | '/' | '<' | '>' | '=' | '*' | '^' | ':';
   typeidh ='void'|'undefined'
		|'octet'
		|'int8'
		|'uint8'
 		|'halfword'
		|'int16' 
		|'uint16'
		|'word'
		|'int32' 
		|'uint32' 
		| 'ieee32'
		|'doubleword'
		| 'int64' 
		|'uint64'
		|'ieee64'
  		|'quadword';
/*\end{verbatim}
\subsection{Tokens}
The tokens section defines the terminal symbols of the grammar.
\begin{verbatim}
*/
Tokens
  floating_constant = sign? fractional_constant exponent_part? floating_suffix? |
        sign? digit_sequence exponent_part floating_suffix?;
 

 
  vector = 'vector';
  ref = 'ref';
  bra = '(';
  ket=')';
  sbra='[';
  sket=']';
  colon=':';
  comma = ',' ;
   
  intlit = sign? digit+;
 
 
 string = quote schar+ quote;
/*\end{verbatim}

 identifiers come after reserved words in the grammar 
\begin{verbatim}

*/
 typeid=typeidh;
 identifier = letter alphanum*;
 opidentifier = ( opsym opsym*);  
 blank = (' '|cr|lf|tab)+;
 comment = '/*' not_star* '*'+ (not_star_slash not_star* '*'+)* '/';
 
Ignored Tokens 
	blank,comment;
/*\end{verbatim}\subsection{Non terminal symbols}\begin{verbatim}
*/
Productions
 program = value;
  
 reference 	=   ref type ;
 array 		= vector bra intlit ket;
 id  = {identifier}identifier|{op}opidentifier;
 types		= 	
			{typeid}  typeid|	
			{array}typeid array|
			{cartesian} sbra params sket|
			{reftype}reference ;
 type      = types;
 params     = {null}|{list} type typetail*;
 typetail   = comma type;
 
  


 cartval	= bra value carttail* ket;
 carttail 	= comma value;
 low            = intlit;
 high           = intlit;
 value=	{real}floating_constant|
        {int}intlit|
		{type}type|
		{id} identifier|
		{string} string|
	       
 		{cast}bra type ket value|
		{fn} identifier sbra value carttail* sket| 
		{proc} identifier sbra sket|               /* procedure call with no params */
 		{primfn} id cartval  ;
 
     
 
  

// \end{verbatim}


