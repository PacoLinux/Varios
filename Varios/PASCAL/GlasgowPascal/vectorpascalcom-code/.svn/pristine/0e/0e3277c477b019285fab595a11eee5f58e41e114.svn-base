#LyX 1.2 created this file. For more info see http://www.lyx.org/
\lyxformat 2.15
\textclass book
\paperfontsize 10
\language english
\options  
\inputencoding latin1
\makeindex
\fontscheme helvet
\paperpackage a4wide
\fontscheme times

\layout Chapter*

Introduction
\layout Standard

Vector Pascal is a dialect of Pascal designed to make efficient use of the
 multi-media instructionsets of recent procesors.
 It supports data parallel operations and saturated arithmetic.
 This manual describes the Vector Pascal language. 
\layout Standard

A number of widely used contemporary processors have instructionset extensions
 for improved performance in multi-media applications.
 The aim is to allow operations to proceed on multiple pixels each clock
 cycle.
 Such instructionsets have been incorporated both in specialist DSP chips
 like the Texas C62xx
\begin_inset LatexCommand \cite{Texas}

\end_inset 

 and in general purpose CPU chips like the Intel IA32
\begin_inset LatexCommand \cite{Intel00}

\end_inset 

 or the AMD K6 
\begin_inset LatexCommand \cite{AMD}

\end_inset 

. 
\layout Standard

These instructionset extensions are typically based on the Single Instruction-st
ream
 Multiple Data-stream (SIMD
\begin_inset LatexCommand \index{SIMD}

\end_inset 

) model in which a single instruction causes the same mathematical operation
 to be carried out on several operands, or pairs of operands at the same
 time.
 The level or parallelism supported ranges from 2 floating point operations
 at a time on the AMD
\begin_inset LatexCommand \index{AMD}

\end_inset 

 K
\begin_inset LatexCommand \index{K6}

\end_inset 

6 architecture to 16 byte operations at a time on the intel P4 architecture.
 Whilst processor architectures are moving towards greater levels of parallelism
,
 the most widely used programming languages like C
\begin_inset LatexCommand \index{C}

\end_inset 

, Java
\begin_inset LatexCommand \index{Java}

\end_inset 

 and Delphi
\begin_inset LatexCommand \index{Delphi}

\end_inset 

 are structured around a model of computation in which operations take place
 on a single value at a time.
 This was appropriate when processors worked this way, but has become an
 impediment to programmers seeking to make use of the performance offered
 by multi-media instructionsets.
 The introduction of SIMD instruction sets
\begin_inset LatexCommand \cite{IA32}

\end_inset 


\begin_inset LatexCommand \cite{Peleg97}

\end_inset 

 to Personal Computers potentially provides substantial performance increases,
 but the ability of most programmers to harness this performance is held
 back by two factors.
 The first is the limited availability of compilers that make effective
 use of these instructionsets in a machine independent manner.
 This remains the case despite the research efforts to develop compilers
 for multi-media instructionsets
\begin_inset LatexCommand \cite{Cheong97}

\end_inset 


\begin_inset LatexCommand \cite{Leupers99}

\end_inset 


\begin_inset LatexCommand \cite{Krall00}

\end_inset 


\begin_inset LatexCommand \cite{Sreraman00}

\end_inset 

.
 The second is the fact that most popular programming languages were designed
 on the word at a time model of the classic von Neumann computer. 
\layout Standard

Vector Pascal aims to provide an efficient and concise notation for programmers
 using Multi-Media enhanced CPUs.
 In doing so it borrows concepts for expressing data parallelism that have
 a long history, dating back to Iverson's work on APL
\begin_inset LatexCommand \index{APL}

\end_inset 

 in the early '60s
\begin_inset LatexCommand \cite{Iverson62}

\end_inset 

. 
\layout Standard

Define a vector of type 
\emph on 
T
\emph default 
 as having type 
\begin_inset Formula \(  T[] \)
\end_inset 

.
 Then if we have a binary operator 
\begin_inset Formula \(  \omega :(T\otimes T)\rightarrow T \)
\end_inset 

, in languages derived from APL we automatically have an operator 
\begin_inset Formula \(  \omega :(T[]\otimes T[])\rightarrow T[] \)
\end_inset 

 
\begin_inset Formula \(   \)
\end_inset 

.
 Thus if 
\begin_inset Formula \(  x,y \)
\end_inset 

 are arrays of integers 
\begin_inset Formula \(  k=x+y \)
\end_inset 

 is the array of integers where 
\begin_inset Formula \(  k_{i}=x_{i}+y_{i} \)
\end_inset 

. 
\layout Standard

The basic concept is simple, there are complications to do with the semantics
 of operations between arrays of different lengths and different dimensions,
 but Iverson provides a consistent treatment of these.
 The most recent languages to be built round this model are J
\begin_inset LatexCommand \index{J}

\end_inset 

, an interpretive language
\begin_inset LatexCommand \cite{Jmanual}

\end_inset 


\begin_inset LatexCommand \cite{Burke}

\end_inset 


\begin_inset LatexCommand \cite{Jintro}

\end_inset 

, and F
\begin_inset LatexCommand \cite{Metcalf96}

\end_inset 

 a modernised Fortran
\begin_inset LatexCommand \index{Fortran}

\end_inset 

.
 In principle though any language with array types can be extended in a
 similar way.
 Iverson's approach to data parallelism is machine independent.
 It can be implemented using scalar instructions or using the SIMD model.
 The only difference is speed. 
\layout Standard

Vector Pascal incorporates Iverson's approach to data parallelism.
 Its aim is to provide a notation that allows the natural and elegant expression
 of data parallel algorithms within a base language that is already familiar
 to a considerable body of programmers and combine this with modern compilation
 techniques. 
\layout Standard

By an elegant algorithm I mean one which is expressed as concisely as possible.
 Elegance is a goal that one approaches asymptotically, approaching but
 never attaining
\begin_inset LatexCommand \cite{Chaitin}

\end_inset 

.
 APL and J allow the construction of very elegant programs, but at a cost.
 An inevitable consequence of elegance is the loss of redundancy.
 APL programs are as concise, or even more concise than conventional mathematica
l
 notation
\begin_inset LatexCommand \cite{Iverson80}

\end_inset 

 and use a special character-set.
 This makes them hard for the uninitiated to understand.
 J attempts to remedy this by restricting itself to the ASCII character-set,
 but still looks dauntingly unfamiliar to programmers brought up on more
 conventional languages.
 Both APL and J are interpretive which makes them ill suited to many of
 the applications for which SIMD speed is required.
 The aim of Vector Pascal is to provide the conceptual gains of Iverson's
 notation within a framework familiar to imperative programmers. 
\layout Standard

Pascal
\begin_inset LatexCommand \index{Pascal}

\end_inset 


\begin_inset LatexCommand \cite{Jensen}

\end_inset 

was chosen as a base language over the alternatives of C and Java.
 C was rejected because notations like 
\family typewriter 
x+y
\family default 
 for 
\family typewriter 
x
\family default 
 and 
\family typewriter 
y
\family default 
 declared as 
\family typewriter 
int x[4]
\family default 
, 
\family typewriter 
y[4]
\family default 
, already have the meaning of adding the addresses of the arrays together.
 Java was rejected because of the difficulty of efficiently transmitting
 data parallel operations via its intermediate code to a just in time code
 generator. 
\layout Standard

Iverson's approach to data parallelism is machine independent.
 It can be implemented using scalar instructions or using the SIMD
\begin_inset LatexCommand \index{SIMD}

\end_inset 

 model.
 The only difference is speed.
 Vector Pascal incorporates Iverson's approach to data parallelism. 
\the_end
