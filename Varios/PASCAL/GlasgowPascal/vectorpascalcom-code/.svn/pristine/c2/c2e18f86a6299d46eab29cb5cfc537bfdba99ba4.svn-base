/*
 ILCG 2
 
 Version of ILCG that incorporates translation from abstract syntax
 source all the way to generating machine code 
*/




Package ilcg2;
 
Helpers
  letter = [['A'..'Z']+['a'..'z']];
  digit = ['0'..'9'];
  ubar='_';
  alphanum = [letter+['0'..'9']]|ubar;
  cr = 13;
  lf = 10;
  tab = 9;
    digit_sequence = digit+;
    fractional_constant = digit_sequence? '.' digit_sequence | digit_sequence '.';
    sign = '+' | '-';
    exponent_part = ('e' | 'E') sign? digit_sequence;
    floating_suffix = 'f' | 'F' | 'l' | 'L';
  eol = cr lf | cr | lf;        // This takes care of different platforms
  not_cr_lf = [[32..127] - [cr + lf]];
  exponent = ('e'|'E');
  quote = ''';
  
  all =[0..127];
  schar = [all-'''];
  not_star = [all - '*'];
  not_star_slash = [not_star - '/'];
  not_star_ket =[not_star -')'];
 abs='ABS';
 and = 'AND';
 call='APPLY';
 cos='COS';
 divide = 'div';
 doubleword = 'doubleword'; 
 exponentiate = '**';
 extend= 'EXTEND';
 float='FLOAT';
 ge='>=';
 gt='>';
 halfword='halfword';
 ieee32 = 'ieee32';
 ieee64 = 'ieee64';
 int16 = 'int16' ; 
 int32 = 'int32' ; 
 int64 = 'int64' ; 
 int8 = 'int8'; 
 le = '<=';
 ln='LN';
 lt='<';
 max='MAX';
 min='MIN';
 minus = '-';
 ne='<>';
 not = 'NOT';
 octet = 'octet';
 octword = 'octword';
 or = 'OR' ;
 plus = '+';
 push ='PUSH';
 quadword = 'quadword';
 remainder = 'MOD';
 replicate = 'rep';
 round='ROUND';
 satminus = '-:';
 satmult ='*:'; 
 satplus = '+:';
 seq='seq';
 shl='<<';
 shr='>>';
 sin='SIN';
 sqr='SQR';
 sqrt='SQRT';
 subscript='SUBSCRIPT'; 
 tan='TAN';
 times = '*';
 trunc='TRUNCATE';
 
 uint16 = 'uint16' ;
 uint32 = 'uint32' ; 
 uint64 = 'uint64'; 
 uint8 = 'uint8';
 word = 'word'; 
 xor = 'XOR';

 optionalsign =(|plus|minus);


/* The tokens section defines the terminal symbols of the grammar.*/
Tokens
  floating_constant = optionalsign fractional_constant exponent_part? floating_suffix? |
      optionalsign  digit_sequence exponent_part floating_suffix?;
 
 adaptor = 'adaptor';
 address = 'address';
 alias = 'alias';
 assembles = 'assembles';  
 /*assign */ store = ':=';
 bra ='(';
 colon = ':';
 comma = ',';
 compiler = 'compiler';
 const='const';
 cpu = 'cpu';
 deref = '^';
 do ='do';
 dollar = '$'; 
 dot = '.' ;
 empty='EMPTY';
 end='end';
 equals = '=';
 fail ='interrupt';
 flag = 'flag';
 for ='for';
 full='FULL';
 function= 'function';
 goto='goto';
 if ='if';
 instructionset='instructionset';  
 intlit = optionalsign digit+;
 ket =')';
 label = 'label';
 location = 'loc';
 map='map';
 means = 'means';
 mem='mem'; 
 operation = 'operation';
 pattern = 'pattern';
 parser = 'parser';
 pop ='POP';
 precondition ='javaprecondition';
 procedure='instruction';
 ref='ref';
 reg= 'register';
 reserved='reserved';
 returns ='returns';
 sbra='[';
 semicolon= ';';
 sideeffect='sideeffect';
 sket=']';
 stack = 'stack';
 step='step';
 string = quote schar+ quote;
 format = ieee32|ieee64|int32 | int8 |  int16 |  int64|uint32 | uint8 | uint16 |  uint64| 
           octet| halfword | word |  doubleword | quadword|octword;
 to='to';
 token='token';
 typetoken='type';
 vbar = '|';
 vector ='vector';
 void ='void';

/*  operators  */ 
dyad  = 	
        and|
 		call|
 		divide| 
		exponentiate|
		ge|
 		gt|
		le|
 		lt|
		max|
		min|
		minus |
		ne|
        or|
        plus|
		push|
        remainder|
		replicate|
		satminus|
		satmult|
		satplus|
		seq|
		shl|
		shr|
		subscript|
 		times |
        xor;
monadic 	=abs|
		cos|
		extend|
		float| 
		ln|
		not|
		round|
		sin|
		sqr |
		sqrt |
		tan|
		trunc;




/*  identifiers come after reserved words in the grammar */
 identifier = letter alphanum*;  
 blank = (' '|cr|lf|tab)+;
 comment = '/*' not_star* '*'+ (not_star_slash not_star* '*'+)* '/';
 codecomment = '(*' not_star* '*'+ (not_star_ket not_star* '*'+)* ')';

Ignored Tokens 
	blank,comment;
 
Productions
 program =processor|
          {translator} translator;
 translator =  compiler [classid]:identifier 
               parser [parserid]:identifier
               cpu [processorid]: identifier 
                
              /* translationlist*/;
 processor = statementlist instructionlist;
 instructionlist =instructionset sbra alternatives sket; 
  
 dyadic = dyad|{eq}equals;
 
/* non terminals corresponding to type descriptions */
 reference 	=   ref type ;
 array 		= vector bra number ket;
 aggregate	=
         {stack} stack bra number ket |
		 {vector}array |
		 {non}; 
 typeprim	=	
			{typeid}  identifier| 
			{predeclaredtype}format;
 type		= 	
			typeprim|	
			{array}typeprim array|
 			{cartesian}sbra type cartesian* sket|
			{reftype}reference|		
			{map}bra [arg]:type map [result]:type ket;
 cartesian 	=  	comma type;
 
  

/* non terminals corresponding to typed values */
 value = 
    {fn} identifier bra value carttail* ket|
 	{rhs}rhs|
 	{loc}loc|
 	{void}void|
 	{cartval}cartval|
	{dyadic} dyadic bra [left]:meaning comma [right]:meaning ket|
	{monadic}monadic bra value ket;
/*  value corresponding to a cartesian product type e.g. record initialisers  */
 cartval	=sbra value carttail* sket;
 carttail 	= comma value;
/*  conditions used in defining control structures  */
condition	=
		{dyadic} dyadic bra [left]:condition comma [right]:condition ket|
		{monadic}monadic bra condition ket |
		{id}identifier|
		{number}number;
 rhs=	
    {dollar} dollar identifier|
	{number}number|
 	{cast}bra type ket value|
 	{const}const identifier |
	{castpop}bra type ket pop [b2]:bra value [k2]:ket|
  	{deref}deref  bra  refval ket;
 
 refval 	= 
		loc|
 		{refcast} bra type ket loc;
 loc 	= 	
		{id}identifier|
 		{memory}mem bra value ket ;
 
 
 number =  
		{reallit}   floating_constant|
        {integer}  intlit;
 

/*  register declaration  */
registerdecl	= reservation reg aggregate type identifier assembles sbra string sket  ;
reservation 	= {reserved}reserved|{unreserved}; 

aliasdecl 	= alias reg aggregate type
          	  [child]:identifier equals [parent]:identifier bra [lowbit]:intlit colon [highbit]:intlit ket
          	  assembles sbra string sket;
	 
opdecl 		= operation identifier means dyadic assembles sbra string sket;


/*  pattern declarations  */
assign 		=  refval store value ;
meaning 	= 	{nullmeaning}|
		{value}value|
		{assign}assign|
		{goto}goto value|
		{fail}fail value|
		{if}if bra value ket meaning|
		{for} for refval store [start]:value to [stop]:value step [increment]:value do meaning|
  		{loc}location value;
patterndecl 	= pattern identifier paramlist means sbra meaning sket assemblesto sideeffects precond|
              	{alternatives} pattern identifier means sbra alternatives sket;

paramlist 	= bra param paramtail* ket|{nullparam}bra ket;
param 		= type identifier|
   
	{typeparam} typetoken identifier|
	{label}label identifier|
	{tok}token identifier;
 
paramtail 	= comma param;
alternatives 	= type alts*; 
alts 		= vbar type;
precond 	= 
		precondition codecomment|
		{unconditional};
asideeffect	= sideeffect  returnval;
sideeffects 	= asideeffect*;
assemblesto	= assembles sbra assemblypattern sket;
assemblypattern = assemblertoken*;
assemblertoken 	= 
		{string} string | 
		{identifier} identifier;
returnval 	= returns identifier;
/*  statements  */
statement 	= 
		{aliasdecl} aliasdecl|
        {registerdecl} registerdecl |	    
		{addressmode} address patterndecl|
		{instructionformat}procedure patterndecl|
		{opdecl}opdecl|
		{flag} flag identifier equals intlit| 
		{typerename}typetoken format     equals identifier|
		{patterndecl} patterndecl;
statementlist 	= statement semicolon statements*;
statements 	= statement  semicolon;
translationlist 	= translationstatement semicolon translations*;
translations 	= translationstatement  semicolon;
translationstatement = {alternatives} pattern identifier means sbra alternatives sket|
                        pattern identifier paramlist precond means sbra meaning sket  ;
//  


