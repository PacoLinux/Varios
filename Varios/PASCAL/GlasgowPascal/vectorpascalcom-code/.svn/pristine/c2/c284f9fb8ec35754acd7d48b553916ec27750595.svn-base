#LyX 1.2 created this file. For more info see http://www.lyx.org/
\lyxformat 2.15
\textclass book
\paperfontsize 10
\language english
\options  
\inputencoding latin1
\makeindex
\fontscheme helvet
\paperpackage a4wide
\fontscheme times

\layout Standard


\begin_inset LatexCommand \label{porting}

\end_inset 

 Vector Pascal is an open-source project.
 It aims to create a productive an efficient program development environment
 for SIMD programming.
 In order to validate the concepts it has been developed initially for the
 Intel family of processors running Linux and Microsoft Windows.
 However it has been intended from the outset that the technology should
 be portable to other families of CPUs.
 This chapter addresses some of the issues involved in porting the compiler
 to new systems.
\layout Section

Dependencies
\layout Standard

The Vector Pascal compiler tool-set can be divided along two axes as shown
 in figure 
\begin_inset LatexCommand \ref{toolset}

\end_inset 

. 
\layout Enumerate

Tools can be divided into (a) those provided as part of the release , versus
 (b) tools provided as part of the operating environment. 
\begin_deeper 
\layout Enumerate

These are mainly written in Java, the exceptions being a small run-time
 library in C, a Pascal System unit, and several machine descriptions. 
\layout Enumerate

These are all available as standard under Linux, and Windows versions are
 freely downloadable from the web. 
\end_deeper 
\layout Enumerate

Tools can further divided into (a) those required for program preparation
 and documentation, (b) code translation tools, and (c) code generator preparati
on
 tools. 
\begin_deeper 
\layout Enumerate

The program preparation tools are the VIPER IDE described in Chapter 
\begin_inset LatexCommand \ref{vipintro}

\end_inset 

, along with the standard LaTeXdocument prepartion system, DVI viewers, and the TTH tool to prepare web
 enabled versions of Vector Pascal program descriptions. 
\layout Enumerate

The program translation tools are: 
\begin_deeper 
\layout Enumerate

The 
\family typewriter 
ilcg.pascal
\family default 
 Java package which contains the Pascal compiler itself and classes to support
 Pascal type declarations.
 This carries out the first stage of code translation, from Pascal to an
 ILCG tree
\begin_inset LatexCommand \cite{Cockshott00}

\end_inset 

. 
\layout Enumerate

A set of machine generated code generators for CPUs such as the Pentium,
 the K6 etc.
 These carry out the second phase of code translation - into an assembler
 file. 
\layout Enumerate

The 
\family typewriter 
ilcg.tree
\family default 
 Java package which supports the internal representation of ILCG trees (see
 section 
\begin_inset LatexCommand \ref{ilcgintro}

\end_inset 

). 
\layout Enumerate

The Java system which is need to run all of the above. 
\layout Enumerate

An assembler, which is necessary to carry out the third phase of code translatio
n,
 from an assembler file to a relocatable object file. 
\layout Enumerate

A C compiler and linkage system is needed to compile the C run-time library
 and to link the relocatable object files into final executables. 
\layout Enumerate

In addition if one wants to alter the reserved words of Vector Pascal or
 make other lexical changes one needs the JLex lexical analyser generator.
\end_deeper 
\end_deeper 
\layout Standard


\begin_float fig 

\begin_inset Figure
file toolset.eps
width 2 4.6
flags 9

\end_inset 


\layout Caption

Vector Pascal toolset
\layout Standard


\begin_inset LatexCommand \label{toolset}

\end_inset 


\end_float 


\layout Section

Compiler Structure
\layout Standard


\begin_float fig 

\latex latex 

\backslash center
\newline 

\latex default 

\begin_inset Figure
file system.eps
width 2 3.5
flags 9

\end_inset 


\layout Caption

The translation of Vector Pascal to assembler.
\layout Standard


\begin_inset LatexCommand \label{system}

\end_inset 


\end_float 

 The structure of the Vector Pascal translation system is shown in figure
 
\begin_inset LatexCommand \ref{fig:system}

\end_inset 

.
 The main program class of the compiler 
\family typewriter 
ilcg.Pascal.PascalCompiler.java
\family default 
 translates the source code of the program into an internal structure called
 an ILCG tree 
\begin_inset LatexCommand \cite{Cockshott00}

\end_inset 

.
 A machine generated code generator then translates this into assembler
 code.
 An example would be the class ilcg.tree.IA32.
 An assembler and linker specified in descendent class of the code generator
 then translate the assembler code into an executable file.
\layout Standard

Consider first the path followed from a source file, the phases that it
 goes through are 
\layout Itemize

i.
 The source file (1) is parsed by a java class PascalCompiler.class (2)
 a hand written, recursive descent parser
\begin_inset LatexCommand \cite{Watt}

\end_inset 

, and results in a Java data structure (3), an ILCG tree, which is basically
 a semantic tree for the program. 
\layout Itemize

ii.
 The resulting tree is transformed (4) from sequential to parallel form
 and machine independent optimisations are performed.
 Since ILCG trees are java objects, they can contain methods to self-optimise.
 Each class contains for instance a method 
\family typewriter 
eval
\family default 
 which attempts to evaluate a tree at compile time.
 Another method 
\family typewriter 
simplify
\family default 
 applies generic machine independent transpormations to the code.
 Thus the 
\family typewriter 
simplify
\family default 
 method of the class 
\family typewriter 
For
\family default 
 can perform loop unrolling, removal of redundant loops etc.
 Other methods allow tree walkers to apply context specific transformations.
 
\layout Itemize

iii.
 The resulting ilcg tree (7) is walked over by a class that encapsulates
 the semantics of the target machine's instructionset (10); for example
 Pentium.class.
 During code generation the tree is futher transformed, as machine specific
 register optimisations are performed.
 The output of this process is an assembler file (11). 
\layout Itemize

iv.
 This is then fed through an appropriate assembler and linker, assumed to
 be externally provided to generate an executable program. 
\layout Subsection

Vectorisation
\layout Standard

The parser initially generates serial code for all constructs.
 It then interogates the current code generator class to determine the degree
 of parallelism possible for the types of operations performed in a loop,
 and if these are greater than one, it vectorises the code.
\layout Standard

Given the declaration
\layout Standard


\series bold 
var v1,v2,v3:array[1..9] of integer;
\series default 

\layout Standard

then the statement
\layout Standard


\series bold 
v1:=v2+v3;
\series default 

\layout Standard

would first be translated to the ILCG sequence shown in figure 
\begin_inset LatexCommand \ref{seqf}

\end_inset 


\begin_float fig 

\latex latex 

\backslash begin{verbatim}
\newline 
{ var  i;
\newline 
  for  i=1 to 9 step 1 do {
\newline 
   v1[^i]:= +(^(v2[^i]),^(v3[^i]));
\newline 
  };
\newline 
}
\newline 

\backslash end{verbatim}
\latex default 

\layout Caption

Sequential form of array assignment
\layout Standard


\begin_inset LatexCommand \label{seqf}

\end_inset 


\end_float 

 In the example above variable names such as 
\family typewriter 
v1
\family default 
 and 
\family typewriter 
i
\family default 
 have been used for clarity.
 In reality 
\family typewriter 
i
\family default 
 would be an addressing expression like:
\layout Standard


\latex latex 

\backslash verb{ (ref int32)mem(+(^((ref int32)ebp),     -1860)){
\latex default 
,
\layout Standard

which encodes both the type and the address of the variable.
 The code generator is queried as to the parallelism available on the type
 
\family typewriter 
int32
\family default 
 and, since it is a Pentium with MMX, returns 2.
 The loop is then split into two, a portion that can be executed in parallel
 and a residual sequential component, resulting in the ILCG shown in figure
 
\begin_inset LatexCommand \ref{parf}

\end_inset 

.
\begin_float fig 

\latex latex 

\backslash begin{verbatim}
\newline 
{ var i;  
\newline 
   for i=    1 to     8 step     2 do {
\newline 
    (ref int32 vector ( 2 ))mem(+(@v1,*(-(^i,1),4))):=
\newline 
       +(^((ref int32 vector ( 2 ))mem(+(@v2,*(-(^i,1),4)))), 
\newline 
         ^((ref int32 vector ( 2 ))mem(+(@v3,*(-(^i,1),4)))));
\newline 
   };
\newline 
   for i=    9 to     9 step     1 do {
\newline 
      v1[^i]:= +(^(v2[^i]),^(v3[^i]));
\newline 
   };
\newline 
}
\newline 

\backslash end{verbatim}
\latex default 

\layout Caption

Parallelised loop
\layout Standard


\begin_inset LatexCommand \label{parf}

\end_inset 


\end_float 

 In the parallel part of the code, the array subscriptions have been replaced
 by explictly cast memory addresses.
 This coerces the locations from their original types to the type required
 by the vectorisation.
 Applying the 
\family typewriter 
simplify 
\family default 
 method of the For class the following generic transformations are performed:
 
\layout Enumerate

The second loop is replaced by a single statement. 
\layout Enumerate

The parallel loop is unrolled twofold. 
\layout Enumerate

The For class is replaced by a sequence of statements with explicit gotos.
 
\layout Standard

The result is shown in figure 
\begin_inset LatexCommand \ref{simpf}

\end_inset 

.
 When the 
\family typewriter 
eval
\family default 
 method is invoked, constant folding causes the loop test condition to be
 evaluated to
\layout Standard


\latex latex 

\backslash verb{if >(^i,8) then	goto leb4af11b47f{
\latex default 
. 
\begin_float fig 

\latex latex 

\backslash begin{verbatim}
\newline 
{ var i:
\newline 
  i:= 1;
\newline 
  leb4af11b47e:
\newline 
  if >( 2, 0) then	if >(^i,8) then	goto leb4af11b47f
\newline 
	                else null
\newline 
                        fi
\newline 
         else if <(^i, 8) then	goto leb4af11b47f
\newline 
         else null
\newline 
         fi
\newline 
  fi;
\newline 
 (ref int32 vector ( 2 ))mem(+(@v1,*(-(^i,1),4))):=
\newline 
       +(^((ref int32 vector ( 2 ))mem(+(@v2,*(-(^i,1),4)))), 
\newline 
         ^((ref int32 vector ( 2 ))mem(+(@v3,*(-(^i,1),4)))));
\newline 
  i:=+(^i,2);
\newline 
 (ref int32 vector ( 2 ))mem(+(@v1,*(-(^i,1),4))):=
\newline 
       +(^((ref int32 vector ( 2 ))mem(+(@v2,*(-(^i,1),4)))), 
\newline 
         ^((ref int32 vector ( 2 ))mem(+(@v3,*(-(^i,1),4)))));
\newline 
  i:=+(^i,2);
\newline 
  goto leb4af11b47e;
\newline 
  leb4af11b47f:
\newline 
  i:=    9;
\newline 
  v1[^i]:= +(^(v2[^i]),^(v3[^i]));
\newline 
}
\newline 

\backslash end{verbatim}
\latex default 

\layout Caption

After applying 
\family typewriter 
simplify
\family default 
 to the tree
\layout Standard


\begin_inset LatexCommand \label{simpf}

\end_inset 


\end_float 


\layout Standard


\begin_float fig 

\latex latex 

\backslash begin{verbatim}
\newline 
 mov DWORD ecx,     1
\newline 
leb4b08729615: 
\newline 
 cmp DWORD ecx,      8
\newline 
 jg near  leb4b08729616
\newline 
 lea edi,[  ecx-(     1)]; substituting in edi with 3 occurences  
\newline 
 movq MM1, [  ebp+edi* 4+     -1620]
\newline 
 paddd MM1, [  ebp+edi* 4+     -1640]
\newline 
 movq  [  ebp+edi* 4+     -1600],MM1
\newline 
 lea ecx,[  ecx+     2]
\newline 
 lea edi,[  ecx-(     1)]; substituting in edi with 3 occurences  
\newline 
 movq MM1, [  ebp+edi* 4+     -1620]
\newline 
 paddd MM1, [  ebp+edi* 4+     -1640]
\newline 
 movq  [  ebp+edi* 4+     -1600],MM1
\newline 
 lea ecx,[  ecx+     2]
\newline 
 jmp  leb4b08729615
\newline 
leb4b08729616:
\newline 

\backslash end{verbatim}
\latex default 

\layout Caption

The result of matching the parallelised loop against the Pentium instruction
 set
\layout Standard


\begin_inset LatexCommand \label{matchf}

\end_inset 


\end_float 


\layout Subsection

Porting strategy
\layout Standard

To port the compiler to a new machine, say a G5, it is necessary to
\layout Enumerate

Write a new machine description 
\family typewriter 
G5.ilc
\family default 
 in ILCG source code. 
\layout Enumerate

Compile this to a code generator in java with the ilcg compiler generator
 using a command of the form
\begin_deeper 
\layout Enumerate


\family typewriter 
java ilcg.ILCG cpus/G5.ilc ilcg/tree/G5.java G5
\family default 

\end_deeper 
\layout Enumerate

Write an interface class 
\family typewriter 
ilcg/tree/G5CG
\family default 
 which is a subclass of 
\family typewriter 
G5 
\family default 
 and which invokes the assembler and linker.
 The linker and assembler used will depend on the machine but one can assume
 that at least a 
\family typewriter 
gcc
\family default 
 assembler and linker will be available.
 The class 
\family typewriter 
G5CG
\family default 
 must take responsibility to handle the translation of procedure calls from
 the abstract form provided in ILCG to the concrete form required by the
 G5 processor. 
\layout Enumerate

The class 
\family typewriter 
G5CG
\family default 
 should also export the method 
\family typewriter 
getparallelism
\family default 
 which specifies to the vectoriser the degree of parallelism available for
 given data types.
 An example for a P4 is given in figure 
\begin_inset LatexCommand \ref{getparallelism}

\end_inset 

.
 Note that although a P4 is potentially capable of performing 16 way parallelism
 on 8 bit operands the measured speed when doing this on is less than that
 measured for 8 way parallelism.
 This is due to the restriction placed on un-aligned loads of 16 byte quantities
 in the P4 architecture.
 For image processing operations aligned accesses are the exception.
 Thus when specifying the degree of parallelism for a processor one should
 not simply give the maximal degree supported by the architecture.
 The maximal level of parallelism is not necessarily the fastest. 
\layout Standard


\begin_float fig 

\latex latex 

\backslash begin{verbatim}
\newline 
public int getParallelism(String elementType) 
\newline 
{   if(elementType.equals(Node.int32)) return 2;
\newline 
    if(elementType.equals(Node.int16)) return 4;
\newline 
    if(elementType.equals(Node.int8)) return 8;   
\newline 
    if(elementType.equals(Node.uint32)) return 2;
\newline 
    if(elementType.equals(Node.uint16)) return 4;
\newline 
    if(elementType.equals(Node.uint8)) return 8;  
\newline 
    if(elementType.equals(Node.ieee32))return 4; 
\newline 
    if(elementType.equals(Node.ieee64))return 1;  
\newline 
    return 1; 
\newline 
} 
\newline 

\backslash end{verbatim}
\latex default 

\layout Caption

The method getParallelism for a P4 processor. 
\layout Standard


\begin_inset LatexCommand \label{getparallelism}

\end_inset 


\end_float 

 Sample machine descriptions for the Pentium and 486 are given in chapter
 
\begin_inset LatexCommand \ref{machines}

\end_inset 

 to help those wishing to port the compiler.
 These are given in the ILCG machine description language, an outline of
 which follows.
\layout Section

ILCG 
\layout Standard


\begin_inset LatexCommand \label{ilcgintro}

\end_inset 

 The purpose of ILCG (Intermediate Language for Code Generation) is to mediate
 between CPU instruction sets and high level language programs.
 It poth provides a representation to which compilers can translate a variety
 of source level programming languages and also a notation for defining
 the semantics of CPU instructions.
\layout Standard

Its purpose is to act as an input to two types of programs: 
\layout Enumerate

ILCG structures produced by a HLL compiler are input to an automatically
 constructed code generator, working on the syntax matching principles described
 in 
\begin_inset LatexCommand \cite{graham80}

\end_inset 

.
 This then generates equivalent sequences of assembler statements. 
\layout Enumerate

Machine descriptions written as ILCG source files are input to code-generator-ge
nerators
 which produce java programs which perform function (1) above. 
\layout Standard

So far one HLL compiler producing ILCG structures as output exists: the
 Vector Pascal compiler.
 There also exists one code-generator-generator which produces code generators
 that use a top-down pattern matching technique analogous to Prolog unification.
 ILCG is intended to be flexible enough to describe a wide variety of machine
 architectures.
 In particular it can specify both SISD and SIMD instructions and either
 stack-based or register-based machines.
 However, it does assume certain things about the machine: that certain
 basic types are supported and that the machine is addressed at the byte
 level.
\layout Standard

In ILCG all type conversions, dereferences etc have to be made absolutely
 explicit.
 In what follows we will designate terminals of the language in bold thus
 
\series bold 
octet
\series default 
 and nonterminal in sloping font thus 
\shape slanted 
word8
\shape default 
. 
\layout Section

Supported types
\layout Subsection

Data formats
\layout Standard

The data in a memory can be distinguished initially in terms of the number
 of bits in the individually addressable chunks.
 The addressable chunks are assumed to be the powers of two from 3 to 7,
 so we thus have as allowed formats:
\shape slanted 
word8, word16, word32, word64, word128
\shape default 
.
 These are treated as non terminals in the grammar of ILCG.
\layout Standard

When data is being explicitly operated on without regard to its type, we
 have terminals which stand for these formats: 
\series bold 
octet, halfword, word, doubleword, quadword
\series default 
. 
\layout Subsection

Typed formats
\layout Standard

Each of these underlying formats can contain information of different types,
 either signed or unsigned integers, floats etc.
 ILCG allows the following integer types as terminals :
\series bold 
int8, uint8, int16, uint16, int32, uint32, int64, uint64 
\series default 
to stand for signed and unsigned integers of the appropriate lengths.
\layout Standard

The integers are logically grouped into 
\shape slanted 
signed
\shape default 
 and 
\shape slanted 
unsigned
\shape default 
.
 As non-terminal types they are represented as 
\shape slanted 
byte, short, integer, long
\shape default 
 and 
\shape slanted 
ubyte, ushort, uinteger, ulong
\shape default 
.
\layout Standard

Floating point numbers are either assumed to be 32 bit or 64 bit with 32
 bit numbers given the nonterminal symbols 
\shape slanted 
float,double
\shape default 
.
 If we wish to specify a particular representation of floats of doubles
 we can use the terminals 
\series bold 
ieee32, ieee64
\series default 
.
\layout Subsection

Ref types
\layout Standard

ILCG uses a simplified version of the Algol-68 reference typing model.
 A value can be a reference to another type.
 Thus an integer when used as an address of a 64 bit floating point number
 would be a 
\series bold 
ref ieee64 
\series default 
.
 Ref types include registers.
 An integer register would be a 
\series bold 
ref int32
\series default 
 when holding an integer, a 
\series bold 
ref ref int32
\series default 
 when holding the address of an integer etc. 
\layout Section

Supported operations
\layout Subsection

Type casts
\layout Standard

The syntax for the type casts is C style so we have for example 
\family typewriter 
(ieee64) int32
\family default 
 to represent a conversion of an 32 bit integer to a 64 bit real.
 These type casts act as constraints on the pattern matcher during code
 generation.
 They do not perform any data transformation.
 They are inserted into machine descritions to constrain the types of the
 arguments that will be matched for an instruction.
 They are also used by compilers to decorate ILCG trees in order both to
 enforce, and to allow limited breaking of, the type rules.
\layout Subsection

Arithmetic
\layout Standard

The allowed dyadic arithmetic operations are addition, saturated addition,
 multiplication, saturated multiplication, subtraction, saturated subtraction,
 division and remainder with operator symboles 
\series bold 
+, +:, *, *:, -, -:, div , mod
\series default 
..
\layout Standard

The concrete syntax is prefix with bracketing.
 Thus the infix operation 
\begin_inset Formula \(  3+5 \div 7\)
\end_inset 

 would be represented as 
\series bold 
+(3 div (5 7))
\series default 
. 
\layout Subsection

Memory
\layout Standard

Memory is explicitly represented.
 All accesses to memory are represented by array operations on a predefined
 array 
\series bold 
mem
\series default 
.
 Thus location 100 in memory is represented as 
\series bold 
mem(100)
\series default 
.
 The type of such an expression is 
\shape slanted 
address
\shape default 
.
 It can be cast to a reference type of a given format.
 Thus we could have 
\series bold 
(ref int32)mem(100) 
\series default 

\layout Subsection

Assignment 
\layout Standard

We have a set of storage operators corresponding to the word lengths supported.
 These have the form of infix operators.
 The size of the store being performed depends on the size of the right
 hand side.
 A valid storage statement might be 
\series bold 
(ref octet)mem( 299) :=(int8) 99
\series default 

\layout Standard

The first argument is always a reference and the second argument a value
 of the appropriate format.
\layout Standard

If the left hand side is a format the right hand side must be a value of
 the appropriate size.
 If the left hand side is an explicit type rather than a format, the right
 hand side must have the same type. 
\layout Subsection

Dereferencing
\layout Standard

Dereferencing is done explicitly when a value other than a literal is required.
 There is a dereference operator, which converts a reference into the value
 that it references.
 A valid load expression might be: 
\series bold 
(octet)
\begin_inset Formula \( \uparrow\)
\end_inset 

 ( (ref octet)mem(99))
\series default 

\layout Standard

The argument to the load operator must be a reference.
\layout Section

Machine description
\layout Standard

Ilcg can be used to describe the semantics of machine instructions.
 A machine description typically consists of a set of register declarations
 followed by a set of instruction formats and a set of operations.
 This approach works well only with machines that have an orthogonal instruction
 set, ie, those that allow addressing modes and operators to be combined
 in an independent manner. 
\layout Subsection

Registers 
\layout Standard

When entering machine descriptions in ilcg registers can be declared along
 with their type hence 
\series bold 
register word EBX assembles['ebx'] ;
\layout Standard


\series bold 
reserved register word ESP assembles['esp'];
\series default 

\layout Standard

would declare 
\series bold 
EBX
\series default 
 to be of type 
\series bold 
ref word
\series default 
.
\layout Subsubsection

Aliasing
\layout Standard

A register can be declared to be a sub-field of another register, hence
 we could write 
\series bold 
 alias register octet AL = EAX(0:7) assembles['al'];
\layout Standard


\series bold 
alias register octet BL = EBX(0:7) assembles['bl'];
\series default 

\layout Standard

to indicate that 
\series bold 
BL
\series default 
 occupies the bottom 8 bits of register 
\series bold 
EBX
\series default 
.
 In this notation bit zero is taken to be the least significant bit of a
 value.
 There are assumed to be two pregiven registers 
\series bold 
FP, GP
\series default 
 that are used by compilers to point to areas of memory.
 These can be aliased to a particular real register.
\series bold 
register word EBP assembles['ebp'] ;
\layout Standard


\series bold 
alias register word FP = EBP(0:31) assembles ['ebp'];
\series default 

\layout Standard

Additional registers may be reserved, indicating that the code generator
 must not use them to hold temporary values:
\layout Standard


\series bold 
reserved register word ESP assembles['esp']; 
\series default 

\layout Subsection

Register sets
\layout Standard

A set of registers that are used in the same way by the instructionset can
 be defined. 
\series bold 
pattern reg means [
\begin_inset Formula \(  EBP| EBX|ESI|EDI|ECX |EAX|EDX|ESP\)
\end_inset 

] ;
\layout Standard


\series bold 
pattern breg means[
\begin_inset Formula \(  AL|AH|BL|BH|CL|CH|DL|DH\)
\end_inset 

]; 
\series default 

\layout Standard

All registers in an register set should be of the same length.
\layout Subsection

Register Arrays
\layout Standard

Some machine designs have regular arrays of registers.
 Rather than have these exhaustively enumerated it is convenient to have
 a means of providing an array of registers.
 This can be declared as:
\layout Standard


\series bold 
register vector(8)doubleword MM assembles['MM'i] ;
\series default 

\layout Standard

This declares the symbol MMX to stand for the entire MMX register set.
 It implicitly defines how the register names are to be printed in the assembly
 language by defining an indexing variable i that is used in the assembly
 language definition.
\layout Standard

We also need a syntax for explicitly identifying individual registers in
 the set.
 This is done by using the dyadic subscript operator: 
\series bold 
subscript(MM,2)
\series default 

\layout Standard

which would be of type 
\series bold 
ref doubleword
\series default 
. 
\layout Subsection

Register Stacks
\layout Standard

Whilst some machines have registers organised as an array, another class
 of machines, those oriented around postfix instructionsets, have register
 stacks.
\layout Standard

The ilcg syntax allows register stacks to be declared:
\layout Standard


\series bold 
register stack (8)ieee64 FP assembles[ ' '] ;
\series default 

\layout Standard

Two access operations are supported on stacks: 
\layout Paragraph

PUSH
\layout Standard

is a void dyadic operator taking a stack of type ref 
\begin_inset Formula \( t\)
\end_inset 

 as first argument and a value of type 
\begin_inset Formula \( t\)
\end_inset 

 as the second argument.
 Thus we might have:  
\series bold 
PUSH(FP,
\begin_inset Formula \( \uparrow\)
\end_inset 

mem(20)) 
\series default 

\layout Paragraph

POP
\layout Standard

is a monadic operator returning 
\begin_inset Formula \( t\)
\end_inset 

 on stacks of type 
\begin_inset Formula \( t\)
\end_inset 

.
 So we might have 
\series bold 
mem(20):=POP(FP) 
\series default 
 In addition there are two predicates on stacks that can be used in pattern
 pre-conditions. 
\layout Paragraph

FULL
\layout Standard

is a monadic boolean operator on stacks. 
\layout Paragraph

EMPTY
\layout Standard

is a monadic boolean operator on stacks. 
\layout Subsection

Instruction formats
\layout Standard

An instruction format is an abstraction over a class of concrete instructions.
 It abstracts over particular operations and types thereof whilst specifying
 how arguments can be combined. 
\series bold 
instruction pattern
\layout Standard


\series bold 
RR( operator op, anyreg r1, anyreg r2, int t)
\layout Standard


\series bold 
means[r1:=(t) op( 
\begin_inset Formula \( \uparrow\)
\end_inset 

((ref t) r1),
\begin_inset Formula \( \uparrow\)
\end_inset 

((ref t) r2))]
\layout Standard


\series bold 
assembles[op ' ' r1 ',' r2];
\series default 

\layout Standard

In the above example, we specify a register to register instruction format
 that uses the first register as a source and a destination whilst the second
 register is only a destination.
 The result is returned in register r1.
\layout Standard

We might however wish to have a more powerful abstraction, which was capable
 of taking more abstract apecifications for its arguments.
 For example, many machines allow arguments to instructions to be addressing
 modes that can be either registers or memory references.
 For us to be able to specify this in an instruction format we need to be
 able to provide grammer non-terminals as arguments to the instruction formats.
\layout Standard

For example we might want to be able to say
\layout Standard


\series bold 
instruction pattern
\layout Standard


\series bold 
RRM(operator op, reg r1, maddrmode rm, int t)
\layout Standard


\series bold 
means [r1:=(t) op( 
\begin_inset Formula \( \uparrow\)
\end_inset 

((ref t)r1),
\begin_inset Formula \( \uparrow\)
\end_inset 

((ref t) rm))]
\layout Standard


\series bold 
assembles[op ' ' r1 ',' rm ] ;
\series default 

\layout Standard

This implies that addrmode and reg must be non terminals.
 Since the non terminals required by different machines will vary, there
 must be a means of declaring such non-terminals in ilcg.
\layout Standard

An example would be:  
\series bold 
 pattern regindirf(reg r)
\layout Standard


\series bold 
means[
\begin_inset Formula \( \uparrow\)
\end_inset 

(r) ] assembles[ r ];
\layout Standard


\series bold 
pattern baseplusoffsetf(reg r, signed s)
\layout Standard


\series bold 
means[+( 
\begin_inset Formula \( \uparrow\)
\end_inset 

(r) ,const s)] assembles[ r '+' s ];
\layout Standard


\series bold 
pattern addrform means[baseplusoffsetf
\begin_inset Formula \( |\)
\end_inset 

 regindirf];
\layout Standard


\series bold 
pattern maddrmode(addrform f)
\layout Standard


\series bold 
means[mem(f) ] assembles[ '[' f ']' ];
\series default 

\layout Standard

This gives us a way of including non terminals as parameters to patterns.
\layout Section

Grammar of ILCG
\layout Standard

The following grammar is given in Sable 
\begin_inset LatexCommand \cite{sable}

\end_inset 

 compatible form.
 The Sable parser generator is used to generate a parser for ILCG from this
 grammar.
 The ILCG parser then translates a CPU specification into a tree structure
 which is then walked by an ILCG-tree-walk-generator to produce an ILCG-tree-wal
k
 Java class specific to that CPU.
\layout Standard

If the ILCG grammar is extended, for example to allow new arithmetic operators,
 then the ILCG-tree-walk-generator must itself be modified to generate translati
on
 rules for the new operators.
\layout Standard


\size small 

\begin_inset Include \input{ilcggram.lyx}

\end_inset 


\size default 

\layout Chapter

Sample Machine Descriptions
\layout Standard


\begin_inset LatexCommand \label{machines}

\end_inset 

 
\size small 

\layout Section


\size small 
Basic 386 architecture
\layout Standard


\size small 

\begin_inset Include \include{i386base.m4.lyx}

\end_inset 


\layout Section


\size small 
The MMX instruction-set
\layout Standard


\size small 

\begin_inset Include \include{mmx.m4.lyx}

\end_inset 


\layout Section


\size small 
The 486 CPU
\layout Standard


\size small 

\begin_inset Include \include{ia32.m4.lyx}

\end_inset 


\layout Standard


\size small 

\begin_inset Include \include{pentium.m4.lyx}

\end_inset 

 
\size default 

\layout Subsection

Concrete representation
\the_end
