
/* 
 


Basic ia32 processor description int ilcg
 copyright(c) Paul Cockshott, University of Glasgow
 Feb 2000


\subsection{Declare types to correspond to internal ilcg types }
\begin{verbatim}
*/

type word=DWORD;
type uint32=DWORD;
type int32=DWORD;
type ieee64=QWORD;
type int64=QWORD;
type octet=BYTE;
type uint8=BYTE; 
type int16=WORD;
type uint16=WORD;
type int8=BYTE;
type ieee32=DWORD;
type halfword=WORD;

/* \end{verbatim}
\subsection{compiler configuration flags }
\begin{verbatim}
*/
flag realLitSupported = 0;
/* \end{verbatim}
\subsection{Register declarations}

\begin{verbatim}
*/
register int32 EAX assembles['eax'] ;
register int32 ECX assembles['ecx'] ;
register int32 EBX assembles['ebx'] ;
register int32 EBP assembles['ebp'] ;
alias register int32 FP = EBP(0:31) assembles ['ebp'];
reserved register int32 ESP assembles['esp'];
register int32 ESI assembles['esi'] ;
register int32 EDI assembles['edi'] ;
register int32 EDX assembles['edx'];
/*register int32 fitemp assembles['dword[fitemp]'];/* not a real register */
alias register uint32 uax= EAX (0:31) assembles ['eax'] ;
alias register uint32 ucx= ECX (0:31) assembles ['ecx'] ;
alias register uint32 ubx= EBX (0:31) assembles ['ebx'] ;
alias register uint32 usi= ESI (0:31) assembles ['esi'] ;
alias register uint32 udi= EDI (0:31) assembles ['edi'] ;
alias register uint32 udx= EDX (0:31) assembles ['edx'];



/* use these for signed 8 bit values */
 alias register int8 AL = EAX(0:7) assembles['al'];
 alias register int8 BL = EBX(0:7) assembles['bl'];
 alias register int8 CL = ECX(0:7) assembles['cl'];
 alias register int8 DL = EDX(0:7) assembles['dl'];
 alias register int8 iBH = EBX(8:15) assembles['bh'];
 alias register int8 iCH = ECX(8:15) assembles['ch'];
 alias register int8 iDH = EDX(8:15) assembles['dh'];
/* use these for unsigned 8 bit values */
/* alias register uint8 AH = EAX(8:15) assembles['ah']; dont use this*/
 alias register uint8 BH = EBX(8:15) assembles['bh'];
 alias register uint8 CH = ECX(8:15) assembles['ch'];
 alias register uint8 DH = EDX(8:15) assembles['dh'];
 alias register uint8 uAL = EAX(0:7) assembles['al'];
 alias register uint8 uBL = EBX(0:7) assembles['bl'];
 alias register uint8 uCL = ECX(0:7) assembles['cl'];
 alias register uint8 uDL = EDX(0:7) assembles['dl'];

/* use these for untyped 8 bit values */
 alias register octet oAL = EAX(0:7) assembles['al'];
 alias register octet oBL = EBX(0:7) assembles['bl'];
 alias register octet oCL = ECX(0:7) assembles['cl'];
 alias register octet oDL = EDX(0:7) assembles['dl'];

 alias register int16 AX =EAX(0:15)assembles['ax'];
 alias register int16 BX =EBX(0:15)assembles['bx'];

 alias register int16 DX =EDX(0:15)assembles['dx'];
 alias register int16 CX =ECX(0:15)assembles['cx'];
 alias register uint16 uAX =EAX(0:15)assembles['ax'];
 alias register uint16 uBX =EBX(0:15)assembles['bx'];

 alias register uint16 uDX =EDX(0:15)assembles['dx'];
 alias register uint16 uCX =ECX(0:15)assembles['cx'];
 alias register halfword SI = ESI(0:15)assembles['si'];
 alias register halfword DI = EDI(0:15)assembles['di'];

register stack(4096)int32 mainSTACK assembles[ 'mainSTACK'];
                  /* \end{verbatim}
\subsection{Register sets }
There are several intersecting sets of registers defined
for different instructions. Note that the ECX  and CL,CH registers
are named last  in their   lists to increase the chance
that they are free for sepecial instructions that need them.
\begin{verbatim}
*/
pattern indexreg means[EDI|ESI|EBX|EBP|ESP|EAX|EDX|ECX];
pattern accumulators means[EAX|EDX|ECX|EBX];
pattern ireg means [  indexreg]  ;
pattern ureg means [EBP| ubx|udi|usi|udx|ESP|ucx|uax ]  ;

pattern reg means [ireg|ureg];

/* Note that the order of the byte registers is chosen to keep the ah and al regs
   free for instructions that require themspecifically, particularly
conditional expressions on the floating point stack, that return boolean
results in al */
pattern bireg means[ BL|DL|AL|CL|iBH|iDH|iCH];
pattern bureg means[BH|DH|uAL|uBL|uDL|uCL|CH];
pattern boreg means[oBL|oAL|oDL|oCL];
pattern bacc means[AL];
pattern bnonacc means[BL|CL|DL];
pattern breg means[bacc|bireg|bnonacc|bureg|boreg];
pattern swreg means[BX|CX|DX|AX];
pattern uwreg means[uBX|uCX|uDX];
pattern untypedwreg means[SI|DI];
pattern wreg means[swreg|uwreg|untypedwreg];
pattern pushreg means[reg|wreg]; /* these are directly pushable */
/*pattern dummyreg means[fitemp];*/
pattern dpushreg means[pushreg];
pattern anyreg means[ breg|wreg|reg];
pattern signedreg means[bireg|ireg|wreg|ireg];
pattern unsignedreg means[bureg|ureg|wreg|ureg];
pattern acc means[EAX];

pattern dacc means[EDX];
pattern wacc means[AX];
pattern ebxacc means[EBX];
pattern ebxbacc means[BL];
pattern ecxacc means[ECX];
pattern ecxbacc means[CL];
pattern ecxuacc means[ucx];
pattern modreg means [ECX];
pattern sourcereg means [ESI];
pattern destreg means [EDI];
pattern countreg means [ECX];
pattern shiftcountreg means [ecxbacc|ecxacc|ecxuacc];

/*\end{verbatim}

\subsection{Operator definition}
This section defines operations that can be used to parameterise
functions.
\begin{verbatim}

*/
operation add means  +  assembles [ 'add'];
/* */operation and means  AND  assembles[ 'and'];
operation or means OR assembles['or'];
operation xor means XOR assembles['xor'];/* */
operation sub means  -  assembles [ 'sub'];
operation mul means * assembles ['mul'];
operation imul means * assembles ['imul '];
operation bel means < assembles ['b'];
operation lt means < assembles ['l'];

operation ab means > assembles ['a'];
operation gt means > assembles ['g'];

operation eq means = assembles ['z'];

operation be means <= assembles ['be'];
operation le means <= assembles ['le'];

operation ae means >= assembles ['ae'];
operation ge means >= assembles ['ge'];
operation ne means <> assembles ['nz'];
operation shiftleft means << assembles ['l'];
operation shiftright means >> assembles ['r'];

pattern condition means[ne|ge|le|eq|gt|lt];
pattern equals means[eq];
pattern unsignedcondition means[ne|ae|be|eq|ab|bel];
pattern operator means[add | sub|imul|and|or|xor];
pattern nonmultoperator means[add|sub|and|or|xor];
pattern saddoperator means[add|imul|and|or|xor];
pattern shiftop means [shiftleft|shiftright];

/*

\end{verbatim}
\subsection{Data formats}
Here we define ilcg symbols for the types that
can be used as part of instructions.
\begin{verbatim}
*/
pattern unsigned means[uint32|uint8|uint16];
pattern signed means[   int8 |   int16|int32 ];
pattern int means[   int8 |   int16 |int32| uint32|uint8|uint16];
pattern double means[ieee64] ;
pattern float  means[ieee32];
pattern real means [ieee64|float];
pattern byte means[uint8|int8|octet];

pattern word32 means[int32|uint32|word];
pattern word16 means[int16|uint16|halfword];
pattern wordupto32 means[byte|word16|word32];
pattern dataformat means[octet|word];
pattern longint means [int32|uint32];
pattern hiint means[int32|int64|int16];
pattern two(type t)means[2] assembles['2'];
pattern four(type t)means[4] assembles['4'];
pattern eight(type t)means[8] assembles['8'];

pattern scale means[two|four|eight];

/* \end{verbatim}

Define the address forms used in lea instructions
these differ from the address forms used in other instructions as the
semantics includes no memory reference.
Also of course register and immediate modes are not present.

\begin{verbatim} */
pattern labelf(label l)
	means [l]
	assembles[l];
pattern sconst(signed s)means[const s]assembles[s];
pattern lconstf means[sconst|labelf];
pattern labelconstf(lconstf l,lconstf s)
	means [+(l,const s)]
	assembles[l'+'s];
pattern constf(signed s)
	means[const s]
	assembles [s];
pattern offset means[constf|labelf|labelconstf];
pattern regindirf(reg r)
	means[^(r) ]
	assembles[ r ];
pattern simplescaled(reg r1,scale s)
	means[*(^(r1),s)]
	assembles[r1 '*'s];

pattern negcompscaled(reg r1,scale s,offset o)
	means[*(-(^(r1),o),s)]
	assembles[r1 '*'s'-(' s'*'o')'];
pattern compscaled(reg r1,scale s,offset o)
	means[*(+(^(r1),o),s)]
	assembles[r1 '*'s'+(' s'*'o')'];
pattern scaled means[compscaled|negcompscaled|simplescaled];
pattern baseminusoffsetf(reg r, offset s ) 
	means[-(   ^(r) ,  s)]
	assembles[  r '-(' s ')'];
pattern baseplusoffsetf(reg r, offset s )
	means[+(   ^(r) ,  s)]
	assembles[  r '+' s ];
pattern scaledIndexPlusOffsetf( scaled s, offset offs)
	means[+(s, offs)]
	assembles[ s '+' offs];
address pattern basePlusScaledIndexf(reg r1,scaled s)
	means[+(^(r1),s)]
        assembles[  r1 '+'   s   ];
address pattern basePlusScaledIndexPlusOffsetf(reg r1,scaled s,offset off,longint t)
	means[+((t)+(^(r1),  off),s )]
        assembles[  r1 '+' s '+'off  ];
address pattern basePlusIndexPlusOffsetf(reg r1,reg r2,offset off)
	means[+(^(r1),+(^(r2),  off))]
        assembles[  r1 '+' r2 ' +'off  ];
address pattern basePlusIndexf(reg r1,reg r2)
	means [+(^(r1),^(r2))]
	assembles[  r1 '+' r2   ];
pattern directf(unsigned s) 
	means[const s]
	assembles[  s  ];
pattern udirectf(int s) 
	means[const s]
	assembles[  s  ];

 
/*\end{verbatim}\subsection{Choice of effective address}
 This contains the useful formats for the load effective address instruction.
The pattern 
 regindirf is excluded here as it adds nothing
   we do not have already from mov instructions.

\begin{verbatim}
*/
pattern uncasteaform means[directf  |udirectf|
	labelf|  labelconstf|
	scaledIndexPlusOffsetf|
	basePlusScaledIndexPlusOffsetf| 
	baseplusoffsetf |
	basePlusIndexPlusOffsetf| 
	basePlusScaledIndexf| 
        scaledIndexPlusOffsetf|	
	baseminusoffsetf
	|basePlusIndexf
];
pattern eaform(uncasteaform f,longint t)  /* allow the address expression to be cast to an integer */
	means[(t)f]
	assembles[f];
/*\end{verbatim}
 \subsection{ Formats for all memory addresses}
 \begin{verbatim}*/
pattern addrform means[eaform|regindirf];


/** \end{verbatim}
define the address patterns used in other instructions

\begin{verbatim}

*/





pattern maddrmode(addrform f)
means[mem(f) ]
assembles[ '[' f ']' ];
pattern gmaddrmode means[/*dummyreg|*/maddrmode];
pattern immediate(signed s)means [const s] assembles [s];
pattern intimmediate(int s)means [const s] assembles [s];
pattern jumpmode means[labelf|maddrmode];
pattern addrmode means[maddrmode|anyreg];
pattern baddrmode means[maddrmode|breg];
pattern waddrmode means[maddrmode|reg];
pattern wmemdummy means[maddrmode/*|dummyreg*/];
pattern regshift(shiftcountreg r)means[^(r)] assembles['cl'];
pattern shiftcount means[immediate|regshift];
pattern regaddrop(addrmode r)means[^(r)] assembles[r];
pattern regaddrimmediate means[intimmediate|maddrmode|regaddrop/*|dummyreg*/];
/* \end{verbatim}

\subsection{Instruction patterns for the  386}
\subsubsection{Stack operations }

\begin{verbatim}
*/

instruction pattern STACKSTORE(reg r1 )
	means[(ref int32)mem(POP(mainSTACK)):=^(r1)]
	assembles['xchg DWORD[esp],'r1'\n  pop DWORD['r1']\n   '];
instruction pattern STACKWSTORE(wreg r1 )
	means[(ref halfword)mem(POP(mainSTACK)):=^(r1)]
	assembles['xchg DWORD[esp],esi\n  mov word[esi],'r1'\n  pop esi'];
instruction pattern STACKBSTORE(breg r1 )
	means[(ref octet)mem(POP(mainSTACK)):=^(r1)]
	assembles['xchg DWORD[esp],esi\n  mov BYTE[esi],'r1'\n  pop esi'];
instruction  pattern SMLIT( nonmultoperator op,offset s) 
        means[ PUSH(mainSTACK,(int32)op( POP(mainSTACK), s))] 
    	assembles[op '  DWORD[esp] ,' s];

instruction  pattern SMULIT( nonmultoperator op,offset s) 
        means[ PUSH(mainSTACK,(int32)*( POP(mainSTACK), s))] 
    	assembles['xchg eax,DWORD[esp]\n imul eax ,' s'\n xchg eax,DWORD[esp]' ];

instruction pattern SADD(saddoperator op)
	means [PUSH(mainSTACK,(longint)+(POP(mainSTACK),POP(mainSTACK)))]
	assembles['xchg eax,DWORD[esp]\n add DWORD[esp+4],eax\n pop eax'];
 
instruction pattern SOP(saddoperator op)
	means [PUSH(mainSTACK,(longint)op(POP(mainSTACK),POP(mainSTACK)))]
	assembles['xchg eax,DWORD[esp]\n 'op' eax,DWORD[esp+4]\n mov DWORD[esp+4],eax\n pop eax'];
instruction  pattern SMR( nonmultoperator op,reg r1) 
        means[ PUSH(mainSTACK,(int32)op( POP(mainSTACK),^( r1)))] 
    	assembles[op '  DWORD[esp] ,' r1];
instruction  pattern SMRSHIFT( shiftop op,shiftcountreg r1) 
        means[ PUSH(mainSTACK, op( POP(mainSTACK),^( r1)))]
    	assembles['xchg eax, [esp]\n'
                  'sh'op '  eax ,cl' 
                  '\n xchg eax,[esp]']; 
instruction  pattern BSMR( nonmultoperator op,breg r1) 
        means[ PUSH(mainSTACK,(octet)op( POP(mainSTACK),^( r1)))]
    	assembles[op '  byte[esp] ,' r1]; 

instruction  pattern SMRADD( reg r1) 
        means[ r1:=(int32)+( POP(mainSTACK),^( r1))] 
    	assembles['add 'r1',DWORD[esp] \n add esp,4']; 

instruction  pattern SMRP( nonmultoperator op,reg r1,type t)
        means[ PUSH(mainSTACK,(ref t)op( POP(mainSTACK),^(r1)))] 
    	assembles[op '  DWORD[esp] ,' r1]; 
instruction pattern RPUSH(dpushreg r)
	means[PUSH(mainSTACK,^(r))] 
	assembles['push '  r];
instruction pattern RPUSHE(ureg r) 
	means[PUSH(mainSTACK,(int64)EXTEND(^(r)))]
	assembles[' push dword 0 ; extend 'r' to 64'
                  '\n push '  r];
  
instruction pattern RPOP(dpushreg r,type t) 
	means[(ref t)r:=(t)POP(mainSTACK)] 
	assembles['pop  '  r];	
instruction pattern BPUSH(bureg r) 
	means[PUSH(mainSTACK,^(r))]
	assembles['push dword 0\n mov BYTE[esp],'r];
instruction pattern BSPUSH(baddrmode r)
	means[PUSH(mainSTACK,(int8)^(r))]
	assembles['push esi\n movsx esi,'r'\n xchg esi,[esp]'];
instruction pattern BSPOP(bireg r)
	means[r:=POP(mainSTACK)]
	assembles['mov  '  r',BYTE[esp]\n add esp,4']; 
instruction pattern BPOP(bureg r) 
	means[r:=POP(mainSTACK)]
	assembles['mov  '  r',BYTE[esp]\n add esp,4'];	


instruction pattern REFPOP(addrmode r,type t)
	means[(ref ref t)r:=POP(mainSTACK)] 
	assembles['pop DWORD '  r];
instruction pattern MEMPOP(maddrmode m)
	means[(ref int32)m:=POP(mainSTACK)]
	assembles['pop DWORD 'm];		 
instruction pattern LITPUSH(offset s) 
	means[PUSH(mainSTACK, s)] 
	assembles['push DWORD '  s];
instruction pattern MEMPUSH(maddrmode m)
	means[PUSH(mainSTACK,(word)^( m))] 
	assembles['push DWORD ' m]; 
instruction pattern DMEMPUSH(eaform ea) 
	means[PUSH(mainSTACK,(doubleword)^((ref doubleword)mem(ea)))] 
	assembles['push DWORD['ea'+4]\n push DWORD['ea']'];

instruction pattern STACKLOAD(word32 t)
	means[PUSH(mainSTACK,^((ref t)mem(POP(mainSTACK))))]
	assembles['xchg DWORD[esp],eax\n  mov eax,DWORD[eax]\n  xchg DWORD[esp],eax'];
instruction pattern REFPUSH(maddrmode m,type t) 
	means[PUSH(mainSTACK,(ref t)^(m))] 
	assembles['push DWORD ' m];
instruction pattern SDEREF(int t)
 means[PUSH(mainSTACK,(t)^(mem(POP(mainSTACK))))]
 assembles['xchg esi,[esp]\n mov esi,dword[esi]\n  xchg esi,[esp]'];
instruction pattern SDEREFDOUBLEWORD(int t)
 means[PUSH(mainSTACK,(doubleword)^(mem(POP(mainSTACK))))]
 assembles['xchg esi,[esp]\n push dword[esi]\n mov esi,dword[esi+4]\n  xchg esi,[esp]'];

/* \end{verbatim}
\subsubsection{Data movement  to and from registers }
\begin{verbatim}
*/
instruction pattern SELECT(reg r1,reg r2,addrmode r3,wordupto32 t)
	means[(ref t) r1:=OR(AND((t)^(r1),(t)^(r2)),AND((t)^(r3),NOT(^(r2))))]
	assembles[
		'and 'r1      ','     		r2         '\n'
                'not 'r2                         '\n'
		'and 'r2      ','   t ' ' 	r3         '\n'
		'or 'r1       ','     		r2];
instruction  pattern LOAD(maddrmode rm, anyreg r1, wordupto32 t) 
        means[ (ref t) r1:= (t)^(rm )] 
	assembles['mov ' r1 ',' t ' ' rm];
instruction pattern MOVZXB(reg r1, baddrmode rm)
	means[  r1:=(int32)EXTEND( (uint8)^( rm) )]
	assembles['movzx ' r1 ', BYTE  'rm]; 
instruction pattern MOVZXB2(reg r1, baddrmode rm) 
	means[  r1:=(uint32)EXTEND( (uint8)^( rm) )]
	assembles['movzx ' r1 ', BYTE  'rm]; 

instruction pattern MOVSXB(reg r1,baddrmode rm) 
	means[r1:=(int32)EXTEND( (int8)^( rm) )]
	assembles['movsx 'r1',BYTE   'rm];
instruction pattern MOVZXBW(uwreg r1, breg rm)
	means[  r1:= EXTEND(^(rm))]
	assembles['movzx ' r1 ',   'rm];  
instruction pattern MOVSXBW(swreg r1, breg rm)
	means[  r1:= EXTEND(^(rm))]
	assembles['movsx ' r1 ',   'rm];  
instruction pattern MOVZXW(reg r1, wreg rm) 
	means[  r1:=(uint32)EXTEND(^(rm))]
	assembles['movzx ' r1 ',   'rm]; 
instruction pattern MOVSXW(reg r1, wreg rm) 
	means[  r1:=(int32)EXTEND(^(rm))]
	assembles['movsx ' r1 ',   'rm]; 
instruction pattern ToBYTE(reg r, breg b)
	means[b:= (octet) ^( r)]
        assembles['push ' r '\nmov ' b ',BYTE[esp]\nadd esp,4 ' ];



instruction pattern STOREBR(baddrmode rm, breg r1)
        means[  (ref octet ) rm:= ^(r1) ]
	assembles['mov BYTE 'rm',' r1];
instruction pattern STORER(maddrmode rm, reg r1, word32 t)
        means[  (ref t) rm:= ^( r1) ]
	assembles['mov ' t ' 'rm',' r1];
 instruction pattern STOREWR(maddrmode rm, wreg r1, word16 t)
        means[  (ref t) rm:= ^( r1) ]
	assembles['mov ' t ' 'rm',' r1];
instruction  pattern NULMOV(reg r3, type t)
	means[(ref t)r3:=^((ref t)r3)]
        assembles[';nulmov ' r3  r3];
instruction  pattern STORELIT(addrmode rm,  type t, int s)
        means[ (ref t) rm:= (t)const s  ]
	assembles['mov ' t ' 'rm ','  ' ' s];
instruction  pattern CLEARREG(reg rm,  type t, int s)
        means[ (ref t) rm:= (t)0  ]
	assembles['xor '  rm ','  rm];
/*
\end{verbatim}
\subsubsection{Register to register arithmetic }
\begin{verbatim}
*/ 
instruction  pattern RMLIT(nonmultoperator op,addrmode rm,  type t, offset sm)
        means[  (ref t) rm:= op(^(rm),(t) sm)  ]
	assembles[op '  ' t ' ' rm ',' sm];
instruction  pattern INC(addrmode rm,int t)
	means[(ref t)rm:=   + (^(rm),1)]
	assembles['inc ' t ' ' rm];
instruction  pattern DEC(addrmode rm,int t)
	means[(ref t)rm:=   - ((t)^(rm),1)]
	assembles['dec ' t ' ' rm];
instruction  pattern SHIFT(shiftop op, shiftcount s, anyreg r,type t)
	means[(ref t) r:= (t)op(^(r),s)]
	assembles['sh' op' ' r ', 's];
instruction  pattern RMR( nonmultoperator op,addrmode rm,anyreg r1,wordupto32 t)
        means[ (ref t) rm :=op((t) ^( rm),(t)^( r1))]
    	assembles[op '  '   t ' ' rm ',' r1]; 
instruction  pattern RMRB( nonmultoperator op,addrmode rm,breg r1,byte t)
        means[ (ref t) rm :=op((t) ^( rm),(t)^( r1))]
    	assembles[op '  '   t ' ' rm ',' r1]; 
instruction pattern ADDUSB(addrmode fm,breg r1,breg rm)
	means[ rm:= +:((uint8)^(rm),^(r1))]
	assembles[ 'add  ' rm ',' r1 '\n jnc $+4\n mov ' rm',255\n nop\n nop']; 
instruction pattern SUBUSB(breg r1,breg rm)
	means[ rm:= -:((uint8)^(rm),^(r1))]
	assembles[ 'sub  ' rm ',' r1 '\n jnc $+4\n mov ' rm',0\n nop\n nop'];
instruction pattern ADDSSB(breg r1,breg rm)
	means[ rm:=(int8) +:((int8)^(rm),^(r1))]
	assembles[ 'add  ' rm ',' r1 '\n jno $+10\n jg $+6\n mov 'rm' ,-128 \n jng $+4\n mov ' rm',127\n '];
instruction pattern MULTSSB(breg r1,bnonacc r2)
	means[r2:=*:(^(r2),^(r1))]
	assembles['push ax\n mov al,'r1'\n imul  'r2'\n shr ax,7\n mov 'r2',al\n pop ax'];
 
instruction pattern MULTSSBAL(bacc r1,bnonacc r2)
	means[r1:=*:(^(r1),^(r2))]
	assembles['imul  'r2'\n shr ax,7'];

instruction pattern SUBSSB(addrmode fm,breg r1,breg rm)
	means[ rm:= (int8)-:((int8)^(rm),^(r1))]
	assembles[ 'sub  ' rm ',' r1 '\n jno $+10\n jg $+6\n mov 'rm' ,-128 \n jng $+4\n mov ' rm',127\n nop\n nop'];
instruction pattern UINT8MAX(breg r1,breg r2)
        means[ (ref uint8)r1:=MAX((uint8)^(r1),^(r2))]
	assembles['cmp 'r1','r2'\n ja $+4\n mov 'r1','r2];
instruction pattern UINT8MIN(breg r1,breg r2)
        means[ (ref uint8)r1:=MIN((uint8)^(r1),^(r2))]
	assembles['cmp 'r1','r2'\n jna $+4\n mov 'r1','r2];
instruction pattern INT8MAX(breg r1,breg r2)
        means[ (ref int8)r1:=MAX((int8)^(r1),^(r2))]
	assembles['cmp 'r1','r2'\n jg $+4\n mov 'r1','r2];
instruction pattern INT8MIN(breg r1,breg r2)
        means[ (ref int8)r1:=MIN((int8)^(r1),^(r2))]
	assembles['cmp 'r1','r2'\n jl $+4\n mov 'r1','r2];
instruction pattern LEA(reg r1, eaform ea)
	means [r1:=ea]
        assembles ['lea ' r1 ',[' ea ']' ];
instruction pattern NOTOP(addrmode rm, type t)
	means[(ref t)rm:= NOT((t)^(rm))]
	assembles['not 't ' ' rm];
instruction pattern Negate(anyreg r1,type t)
	means[(ref t)r1:= -((t)0,( t)^(r1))]
	assembles ['neg ' ' '  r1];
instruction pattern MNegate(anyreg r1,type t)
	means[(ref t)r1:= *((t)-1,( t)^(r1))]
	assembles ['neg '  ' '  r1];
instruction  pattern RLIT(operator op,pushreg r0,  type t, signed sm)
        means[r0:=  op(^( r0), const sm)  ]
	assembles[op '  '  r0 ',' sm];
instruction pattern RR( nonmultoperator op, anyreg r1, anyreg r2, int t)
        means[r1:=(t) op((t) ^( (ref t) r1),(t)^( (ref t) r2))]
	assembles[op ' ' r1 ',' r2];
instruction pattern iRR( operator op, reg r1, reg r2, int t)
        means[r1:=(t) op((t) ^( (ref t) r1),(t)^( (ref t) r2))]
	assembles[op ' ' r1 ',' r2];
instruction  pattern RRM(operator op, pushreg r1, maddrmode rm, int t)
        means [r1:=(t) op((t) ^(r1),(t)^( rm))]
        assembles[op ' ' r1 ',' rm ] ;
pattern bnonacreg means[DH|DL|BH|BL|CH|CL];
pattern baccreg means[AL];
pattern baccregmode means[maddrmode|baccreg];
pattern bnonacregmode means[maddrmode|bnonacreg];
instruction pattern fastBIDIV(baccreg r1,bnonacregmode r2)
        means[r1:=div((int8)^(r1),(int8)^(r2))]
	assembles[' movsx ax,'r1'\n idiv BYTE 'r2];
instruction pattern BIDIV(baccreg r1, bnonacregmode r2,baccregmode r3)
        means[r3:=div((int8)^(r1),(int8)^(r2))]
	assembles[' movsx ax,'r1'\n idiv BYTE 'r2'\n mov BYTE 'r3',al'];
instruction pattern BIMUL(baccreg r1, bnonacreg r2)
        means[r2:=*((int8)^(r1),(int8)^(r2))]
	assembles['imul BYTE 'r2'\n mov BYTE 'r2',al'];
instruction pattern fastIMUL(acc a,dacc d)
	means[(ref int32)a:=*((int32)^(a),^(d))]
	assembles['imul edx'];
instruction pattern IDIV(acc r1,modreg r2)
   	means[PUSH(mainSTACK,div((int32)^(r1),^( r2))) ]
	assembles['push edx\n cdq\n idiv   ' r2 '\n xchg eax,DWORD[esp]\n xchg eax,edx'];
instruction pattern UDIV(acc r1,modreg r2)
   	means[PUSH(mainSTACK,div((uint32)^(r1),^( r2))) ]
	assembles['push edx\n xor edx,edx\n div   ' r2 '\n xchg eax,DWORD[esp]\n xchg eax,edx'];
instruction pattern IMULLIT(pushreg r1,addrmode rm, signed s)
	means[(ref int32)r1:=*(^(rm),const s)]
	assembles['imul 'r1',DWORD 'rm','s];
instruction pattern IMOD(acc r1, modreg r2)
        means[PUSH(mainSTACK,MOD((int32)^(r1),^( r2))) ]
	assembles['push edx\n cdq\n idiv   ' r2 '\n xchg edx,DWORD[esp]'];
instruction pattern UMOD(acc r1, modreg r2)
        means[PUSH(mainSTACK,MOD((uint32)^(r1),^( r2))) ]
	assembles['push edx\n xor edx,edx\n div   ' r2 '\n xchg edx,DWORD[esp]'];
instruction pattern BIMOD(baccreg r1, bnonacreg r2)
        means[r2:=MOD((int8)^(r1),(int8)^(r2))]
	assembles[' movsx ax,'r1'\n idiv 'r2'\n mov 'r2',ah'];

instruction pattern MOD2(reg r)
	means[r:=MOD(^(r),2)]
	assembles['and 'r ',1'];
instruction pattern MOD4(reg r)
	means[r:=MOD(^(r),4)]
	assembles['and 'r ',3'];
instruction pattern MOD8(reg r)
	means[r:=MOD(^(r),8)]
	assembles['and 'r ',7'];
instruction pattern DIV8(ureg r)
	means[r:=div((uint32)^(r),8)]
	assembles['shr 'r ',3'];

instruction pattern MOD16(reg r)
	means[r:=MOD(^(r),16)]
	assembles['and 'r ',15'];	
instruction pattern PLANT(label l)
	means[l]
	assembles[l ':'];  
instruction pattern PLANTRCONST( double r,type t)
	means[loc (t)r]
	assembles[ 'dq ' r];
instruction pattern PLANTICONST( longint r,type t) 
	means[loc (t) r] 
	assembles[ 'dd ' r]; 
 
instruction pattern PLANTSCONST( float  r,type t)
	means[loc (t) r]
	assembles[ 'dd ' r];
instruction pattern PLANTBCONST( byte r,type t) 
	means[loc (t) r]
	assembles[ 'db ' r]; 
instruction pattern PLANTWCONST( word16 r,type t) 
	means[loc (t) r] 
	assembles[ 'dw ' r];
	/*
\end{verbatim}
\subsubsection{Control transfers and tests }
\begin{verbatim}
*/
instruction pattern FAIL(int i)
	means[interrupt i]
	assembles['int 'i];
instruction pattern GOTO(jumpmode l)
	means[goto l]
	assembles['jmp ' l];
instruction pattern IFLITGOTO(label l,addrmode r1,signed r2,condition c,signed t,int b)
	means[if((b)c((t) ^(r1),const r2))goto l]
	assembles[' cmp 't' ' r1 ',  '  r2 '\n j' c ' near  '  l];
instruction pattern BIFLITGOTO(label l,baddrmode r1,signed arg2,condition c,signed t)
	means[if(c((t) ^(r1),const arg2))goto l]
	assembles[' cmp 't' ' r1 ',  't  arg2 '\n j' c ' near  '  l];
instruction pattern IFGOTOB(label l,bireg r1,regaddrimmediate r2,condition c,signed t,int b)
	means[if((int8)c( ^(r1),(int8) r2))goto l]
	assembles['cmp ' r1 ',byte' '  '  r2 '\n j' c ' near  ' l];
instruction pattern IFGOTOW(label l,wreg r1,regaddrimmediate r2,condition c,signed t,int b)
	means[if((int8)c( ^(r1),(int16) r2))goto l]
	assembles['cmp ' r1 ',word' '  '  r2 '\n j' c ' near  ' l];
instruction pattern IFGOTO(label l,ireg r1,regaddrimmediate r2,condition c,signed t,int b)
	means[if((int8)c( ^(r1),(int32) r2))goto l]
	assembles['cmp ' r1 ',dword' '  '  r2 '\n j' c ' near  ' l];
instruction pattern IFASSp6(signedreg r1,regaddrimmediate r2,condition c,type t2,maddrmode r3,maddrmode rm, type t )
	means[if((t2)c( (t)^(r1),(t) r2))(ref t)rm:= (t)^(r3)]
	assembles['cmp ' r1 ','t '  '  r2
		'\n mov 'r1','t rm
		'\n cmov'c' 'r1','r3'\n mov 't rm ',' r1];
instruction pattern IFASS(signedreg r1,acc r2,maddrmode rm, type t,equals c,type t2 )
	means[if((t2)c( (t)^(rm),(t) r2))(ref t)rm:= (t)^(r1)]
	assembles['cmpxchg ' t rm ',' '  '  r1 ];

instruction pattern ANDIFGOTO(label l,anyreg r1,regaddrimmediate r2,condition c,int t,int b,anyreg r3,
                              regaddrimmediate r4, condition c2, int t2,int b)
	means[if((b)AND((b)c((t) ^(r1),(t) r2),(b)c2((t2)^(r3),(t2)r4)))goto l]
	assembles['andifgoto ' c','r1','t r2','c2','r3',' t2 r4 ',' l];
instruction pattern SET(condition c,signedreg r1,regaddrimmediate   rm, breg r,signed t)
	means[r:= c((t)^(r1),(t) rm)]
	assembles['cmp 'r1 ',' ' ' rm '\n set'c ' ' r'\n sub 'r',1\n not 'r];
instruction pattern SETU(unsignedcondition c,ureg r1,regaddrimmediate rm, breg r,unsigned t)
	means[r:= c((t)^(r1),(t) rm)]
	assembles['cmp 'r1 ',' ' ' rm '\n set'c ' ' r'\n sub 'r',1\n not 'r];
instruction pattern IFBOOL(label l,breg r1)
	means[ if( (int8)^(r1))goto l]
	assembles['test ' r1 ',' r1 '\n jnz near ' l];
instruction pattern BOUND0(reg r1,reg r2)
	means[if(OR(<( ^(r2), ^((ref int32)mem(  ^(r1) ))), >( ^(r2), ^((ref int32)mem(+(^(r1), 4))))) )interrupt 5]
 	assembles['bound ' r2 ',[' r1 ']'];
instruction pattern BOUND4(reg r1,reg r2)
	means[if(OR(<( ^(r2),^((ref int32)mem(+(^(r1),4)))),>(^(r2),^((ref int32)mem(+(^(r1), 8))))))interrupt 5]
 	assembles['bound ' r2 ',[' r1 '+4]'];
instruction pattern BOUND16(reg r1,reg r2)
	means[if(OR(<( ^(r2),^((ref int32)mem(+(^(r1),16)))),>(^(r2),^((ref int32)mem(+(^(r1), 20))))))interrupt 5]
 	assembles['bound ' r2 ',[' r1 '+16]'];
instruction pattern IFIN(reg r1,reg r2, label l)
	means[ if((int8)AND((uint8)^(mem(r1 )) , <<( (uint8)1,^(r2))))goto l]
	assembles['bt  [' r1 '],' r2 '\n jc 'l];

instruction pattern TESTIN(reg r1,reg r2, breg r)
	means[ r:=AND((uint8)^(mem(r1 )) , <<( (uint8)1,^(r2)))]
	assembles['bt  [' r1 '],' r2 '\n setc 'r'\n not 'r'\n inc 'r];
instruction pattern BTS(reg r1,reg r2)
	means[(ref uint8)mem(r1 ):=OR((uint8)^(mem(r1 ) ), <<( (uint8)1,^(r2)))]
	assembles['bts [' r1 '],' r2];
instruction pattern REPMOVSD(countreg s,maddrmode m1,sourcereg si, destreg di)
	means[for (ref int32)m1:=0 to ^(s) step 1 do 
              (ref int32)mem(+(^(di),*(^((ref int32)m1),4))):=^((ref int32)mem(+(^(si),*(^((ref int32)m1),4))))
	]
	assembles[' inc ecx\n rep movsd'];  
instruction pattern REPMOVSB(countreg s,maddrmode m1,sourcereg si, destreg di)
	means[for (ref int32)m1:=0 to ^(s) step 1 do 
              (ref octet)mem(+(^(di),^((ref int32)m1))):=^((ref octet)mem(+(^(si),^((ref int32)m1))))
	]
	assembles[' inc ecx\n rep movsb'];
	

			

/* these come last as they are a fallback for having no free registers */



/* \end{verbatim} */



/* \subsection{Intel fpu instructions} 
Copyright (c) University of Glasgow 2003
\begin{verbatim}
*/  

register stack(8)ieee64 ST assembles[ 'ST']; 

pattern anyreal means[ieee32|ieee64];
operation fdiv means div assembles['div'];
operation frem means MOD assembles['prem'];
pattern foperator means[add | sub|mul|fdiv];
pattern fround(type t) means [ROUND((t)POP(ST))] assembles['frndint'];
pattern fsqrt(type t) means[(t)SQRT((t)POP(ST))]   assembles ['fsqrt'];
pattern fsin(type t) means[(t)SIN((t)POP(ST))]  assembles ['fsin'];
pattern fcos(type t) means[(t)COS((t)POP(ST))]   assembles ['fcos'];
pattern fln(type t)means[(t)LN((t)POP(ST))] assembles['fldln2\n fxch\n fyl2x'];
pattern fptan(type t) means[(t)TAN((t)POP(ST))]assembles['fptan'];
pattern fabs(type t) means[(t)ABS((t)POP(ST))]assembles['fabs'];
pattern fmoperator means [fround|fsqrt|fsin|fcos|fptan|fln|fabs];

instruction pattern RDIVB(breg b1,baddrmode b2)
	means[b1:=div(^(b1),^(b2))]
	assembles['bytediv 'b1','b2];
instruction pattern RMULTB(breg b1,baddrmode b2)
	means[b1:=*(^(b1),^(b2))]
	assembles['bytemult 'b1','b2];

instruction pattern FISTB(breg b1)
	means[b1:=POP(ST)]
	assembles['fistb 'b1];
instruction pattern FILDB(baddrmode b2)
	means[PUSH(ST,(int8)^(b2))]
	assembles['fildb 'b2];
instruction pattern FILDR(reg r)
	means[PUSH(ST,(int32)^(r))]
	assembles['mov dword[fttemp], 'r'\n fild dword[fttemp]'];

instruction pattern FSTR(maddrmode a)
	means[(ref ieee64) a:= POP(ST)]
	assembles['fstp qword ' a];
instruction pattern FSTRF(maddrmode a)
	means[(ref ieee32) a:= POP(ST)]
	assembles['fstp dword ' a];
instruction pattern FLOATMS(anyreal t)
	means[PUSH(ST,(t)FLOAT(POP(mainSTACK)))]
	assembles['fild dword [esp]\n add esp,4'];
instruction pattern EXTENDMS(type t)
	means[PUSH(ST,(int64)EXTEND((int32)POP(mainSTACK)))]
	assembles['fild dword [esp]\n add esp,4'];
instruction pattern FPOPMS(type t)
	means[PUSH(ST,(ieee32)POP(mainSTACK))]
	assembles['fld dword [esp]\n add esp,4'];
instruction pattern FPOPMSI64(type t)
	means[PUSH(ST,(int64)POP(mainSTACK))]
	assembles['fild qword [esp]\n add esp,8'];
instruction pattern DPOPMS(type t)
	means[PUSH(ST,(ieee64)POP(mainSTACK))]
	assembles['fld qword [esp]\n add esp,8'];
instruction pattern FPUSHD(type t)
	means[PUSH(mainSTACK,(ieee64)POP(ST))]
	assembles['sub esp,8\n fstp qword [esp]'];
instruction pattern FPUSHF(type t)
	means[PUSH(mainSTACK,(ieee32)POP(ST))]
	assembles['sub esp,4\n fstp dword [esp]'];
instruction pattern FISTR(wmemdummy m, hiint i)
	means[(ref i )m:=(i )POP(ST)]
	assembles['fistp 'i' ' m];
instruction pattern FPUSHI(type t)
	means[PUSH(mainSTACK,(int32)POP(ST))]
	assembles['sub esp,4\n fistp dword [esp]'];
instruction pattern FLD(maddrmode a)
	means[PUSH(ST,^((ref ieee64) a))]
	assembles['fld qword ' a];
instruction pattern FLDF(maddrmode a)
	means[PUSH(ST,^((ref ieee32) a))]
	assembles['fld dword ' a];
instruction pattern FILD(wmemdummy a,real t, hiint i)
	means[PUSH(ST,^((ref i) a))]
	assembles['fild 'i ' ' a];
instruction pattern FILDF(maddrmode a,real t, hiint i)
	means[PUSH(ST,FLOAT(^((ref i) a)))]
	assembles['fild 'i ' ' a];
instruction pattern FILDIP(real t)
	means[PUSH(ST, (int32)POP(mainSTACK))]
	assembles['fild dword[esp]\n add esp,4'];
/*
instruction pattern FILDF(maddrmode a,real t, hiint i)
	means[PUSH(ST,(t)FLOAT(^((ref i) a)))]
	assembles['fild 'i ' ' a];
*/	
operation flt means < assembles ['c'];
operation fgt means > assembles ['nc'];
operation feq means = assembles ['z'];
operation fle means <= assembles ['na'];
operation fge means >= assembles ['ae'];
operation fne means <> assembles ['nz'];
pattern fcondition means[fne|fge|fle|feq|fgt|flt];
instruction pattern p6FIFGOTO(label l, maddrmode a,fcondition c,int t) 
	means[if((t)c(POP(ST),POP(ST)))goto l]
	assembles['fcomip st0,st1 \n  fincstp\n j' c ' near  ' l];
instruction pattern FIFGOTO(label l, maddrmode a,fcondition c,int t) 
	means[if((t)c(POP(ST), ^((ref ieee32)a)))goto l] 
	assembles['fcomp dword ' a ' \npush ax\n fstsw ax\n sahf\n pop ax\n j' c ' near  ' l];
instruction pattern FIFGOTOgeneral(label l,  fcondition c,int t) 
	means[if((t)c(POP(ST), POP(ST)))goto l] 
	assembles['fxch\n fcompp \npush ax  \n fstsw ax\n sahf\n pop ax\n j' c ' near ' l];
instruction pattern FSET(fcondition c, breg r)
	means[(ref int8)r:=(int8) c(POP(ST), POP(ST))]
	assembles['fxch\n fcompp\n push ax\n fstsw ax\n sahf\n pop ax\n set'c ' ' r'\nnot 'r'\n inc 'r];
instruction pattern FMOP(fmoperator op)
	means[PUSH(ST,op)]
	assembles[op];
instruction pattern FCHS(real t)
	means[PUSH(ST,(t)-((t)0,(t)POP(ST)))]
	assembles['fchs'];
/*instruction pattern RFLOADLIT(float f,reg r)
	means[r:=const f]
	assembles['rloadlit 'r','f];
/*	assembles['db 0ebh,4\ndd 'f'\n mov 'r',dword[$-4]'];	*/
instruction pattern FLOADLIT(float f)
	means[PUSH(ST,const f)]
	assembles['floadlit 'f];
/*	assembles['db 0ebh,4\ndd 'f'\n fld dword  [$-4]'];*/
/* this handles any length of real and should come last in the set of codes */
instruction pattern FLOADDLIT(real f,anyreal t)
	means[PUSH(ST,(t)const f)]
	assembles['floadlit 'f];
/*	assembles['db 0ebh,8\ndq ' f'\nfld qword  [$-8]'];*/
instruction pattern FILOADLIT(hiint i,real t)
	means[PUSH(ST,(t) const i)]
	assembles['filoadlit 'i];
/*	assembles['db 0ebh,10\ndt ' i'.0\nfld tword  [$-10]'];*/

instruction pattern FOP(maddrmode a,foperator op)
	means[PUSH(ST,op(POP(ST),^((ref ieee64)a)  )) ]
	assembles['f'op '  qword  ' a];
instruction pattern FOPF(maddrmode a,foperator op,real t) 
	means[PUSH(ST,(t)op(POP(ST),(t)^((ref t)a)  )) ] 
	assembles['f'op ' ' t   ' ' a]; 
instruction pattern FOPI(maddrmode a,foperator op) 
	means[PUSH(ST,op(POP(ST),FLOAT(^(a) ) )) ] 
	assembles['fi'op '  dword  ' a]; 
instruction pattern FOPII(maddrmode a,foperator op) 
	means[PUSH(ST,op(POP(ST),^(a)  )) ] 
	assembles['fi'op '  dword  ' a]; 

instruction pattern ReversePolishFOP(foperator op,real t)
	means[PUSH(ST,op(POP(ST),POP(ST)))]
	assembles['f'op'p' ' st1']; 
 


instruction pattern FMAXp6(maddrmode a)		/* this version only works on P6s and above*/
	means[PUSH(ST,MAX(POP(ST),POP(ST)))]
	assembles['fcomi st0,st1\n fcmovb st0,st1 \nfstp st1'];
instruction pattern MAXp6(reg r1,reg r2)
	means[r1:= (int32)MAX(^(r1),^(r2))]
	assembles['cmp 'r1','r2'\ncmob 'r1','r2];
instruction pattern MINp6(reg r1,reg r2)
	means[r1:= (int32)MIN(^(r1),^(r2))]
	assembles['cmp 'r2','r1'\ncmovb 'r1','r2];

instruction pattern FMINp6(maddrmode a)
	means[PUSH(ST,MIN(POP(ST),POP(ST)))]
	assembles['fcomi st0,st1\n fcmovnb st0,st1 \nfstp st1'];
instruction pattern FMAX(maddrmode a)		/* this version only works on P6s and above*/
	means[PUSH(ST,MAX(POP(ST),POP(ST)))]
	assembles['fcom st0,st1  \npush ax\n fstsw ax\n sahf\n pop ax\n jnb $+4 \n fxch \nfstp st1'];
instruction pattern FMIN(maddrmode a)
	means[PUSH(ST,MIN(POP(ST),POP(ST)))]
	assembles['fcom st0,st1  \n push ax\n fstsw ax\n sahf\n pop ax\n jb $+4 \n fxch \nfstp st1'];

instruction pattern FPREM(int t)
	means[PUSH(ST,(ieee32)MOD( POP(ST),POP(ST)))]
	assembles['fprem'];




/* \end{verbatim}
\subsection{Pentium extensions to the FPU codes }
\begin{verbatim}*/

/* \end{verbatim} */
 

/* \begin{verbatim}*/

instructionset [IFLITGOTO|LOAD|MOVZXB|MOVSXB|MOVZXW|MOVSXW|MOVZXB2|MOVZXBW|MOVSXBW|
		CLEARREG|STORELIT|LEA|INC|
		RMLIT|RMR|
/*		STOREWR|STORER|STOREBR|/* stores */
		
		DEC|IMULLIT|
		BIMUL|RLIT|RRM|RMRB|iRR|RR|DIV8|IDIV|fastBIDIV|BIDIV|UDIV
		|MOD2|MOD4|MOD8|MOD16| IMOD|UMOD|
		fastIMUL|
		Negate|NOTOP|MNegate|BTS|TESTIN|SHIFT|
		UINT8MAX|UINT8MIN|INT8MAX|INT8MIN|SELECT|
		PLANT|LITPUSH| MEMPUSH|
		SET|SETU|ToBYTE|IFASS|
		ANDIFGOTO |IFLITGOTO|BIFLITGOTO|IFIN|IFGOTO|
		IFGOTOB|IFGOTOW
		|GOTO|FAIL|BOUND4|BOUND0|BOUND16
		|PLANTBCONST|PLANTWCONST|PLANTICONST|PLANTRCONST|PLANTSCONST
		|REPMOVSB|REPMOVSD |ADDUSB|SUBUSB|ADDSSB|SUBSSB|MULTSSB|MULTSSBAL |FSET|RPUSH| REFPUSH|SDEREF|SDEREFDOUBLEWORD/* pushes */
			|IFBOOL|SMLIT|SMRP|SADD|SMULIT|SMRADD|SOP|SMR|BSMR|/* stack ops */
                 	STOREWR|STORER|STOREBR|/* stores */
			STACKLOAD |REFPOP|MEMPOP|BPOP|BSPOP|BSPUSH|DMEMPUSH|RPUSHE
                         |BPUSH|STACKSTORE|STACKWSTORE|STACKBSTORE|RPOP|SMRSHIFT|FCHS|FOPF|FLOADLIT| FILOADLIT| FMAX|FMIN|FLD|FLDF|FILDF|FILD|FILDF|
	FLOADDLIT|FILDB|FILDR|		   ReversePolishFOP|FMOP|  FPREM| FOP|FOPI|
        FOPII|
        RMULTB|FPOPMSI64|
		FISTR|FSTR|FSTRF|FLOATMS|FILDIP|EXTENDMS|
		 FIFGOTO|FIFGOTOgeneral|FSET|DPOPMS|FPOPMS|FISTB|FPUSHI|FPUSHD|FPUSHF]

/*

\end{verbatim}
*/
