{\rtf1\ansi\ansicpg1252\deff0\deflang1033
{\fonttbl
{\f0\fnil\fcharset0\fprq0\fttruetype Times New Roman;}
{\f1\fnil\fcharset0\fprq0\fttruetype NULL;}
{\f2\fnil\fcharset0\fprq0\fttruetype Dingbats;}
{\f3\fnil\fcharset0\fprq0\fttruetype Symbol;}
{\f4\fnil\fcharset0\fprq0\fttruetype Arial;}
{\f5\fnil\fcharset0\fprq0\fttruetype Nimbus Sans;}
{\f6\fnil\fcharset0\fprq0\fttruetype Nimbus Roman;}
{\f7\fnil\fcharset0\fprq0\fttruetype Nimbus Mono;}}
{\colortbl
\red0\green0\blue0;
\red255\green255\blue255;
\red0\green0\blue255;}
{\stylesheet
{\s5\fi-431\li720 Dashed List;}
{\s2\fi-431\li720 Box List;}
{\s21\tx1584\sbasedon16\snext15 Section Heading;}
{\s17\tx431\sbasedon9\snext15 Numbered Heading 2;}
{\s20\f7\sbasedon15 Plain Text;}
{\s12\fi-431\li720 Implies List;}
{\s26\fi-431\li720\sbasedon19 Upper Case List;}
{\s7\fi-431\li720 Hand List;}
{\s27\fi-431\li720\sbasedon19 Upper Roman List;}
{\s15\f6\fs24 Normal;}
{\s1\li1440\ri1440\sa120\sbasedon15 Block Text;}
{\s14\fi-431\li720\sbasedon15 Lower Roman List;}
{\s11\fi-431\li720 Heart List;}
{\s13\fi-431\li720\sbasedon19 Lower Case List;}
{\s24\fi-431\li720 Tick List;}
{\s8\sb440\sa60\f5\fs34\b\sbasedon15\snext15 Heading 1;}
{\s9\sb440\sa60\f5\fs28\b\sbasedon15\snext15 Heading 2;}
{\s10\sb440\sa60\f5\fs24\b\sbasedon15\snext15 Heading 3;}
{\s19\fi-431\li720 Numbered List;}
{\s23\fi-431\li720 Star List;}
{\s16\tx431\sbasedon8\snext15 Numbered Heading 1;}
{\s6\fi-431\li720 Diamond List;}
{\s18\tx431\sbasedon10\snext15 Numbered Heading 3;}
{\s4\tx1584\sbasedon16\snext15 Chapter Heading;}
{\s22\fi-431\li720 Square List;}
{\s25\fi-431\li720 Triangle List;}
{\s3\fi-431\li720 Bullet List;}}
\kerning0\cf0\viewkind1\paperw11905\paperh16837\margl1440\margr1440\widowctl
\sectd\sbknone\colsx360\marglsxn1800\margrsxn1800\pgncont\ltrsect
\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0} }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_7}{\f0\fs26\b\lang2057{\*\listtag0}A.7 ADDPS: SSE Packed Single-FP ADD}{\*\bkmkend section_A_7}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}ADDPS xmmreg,r/m128           ; 0F 58 /r             [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}ADDPS treats both operands as vectors of four 32-bit floating-point numbers and adds each number in the source operand to the corresponding number in the destination register. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_8}{\f0\fs26\b\lang2057{\*\listtag0}A.8 ADDSS: SSE Scalar Single-FP ADD}{\*\bkmkend section_A_8}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}ADDSS xmmreg,xmmreg/mem32     ; F3 0F 58 /r          [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}ADDSS adds the 32-bit floating-point number in the lowest 4 bytes of the source operand to the floating-point number in the lowest quarter of the destination register. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_10}{\f0\fs26\b\lang2057{\*\listtag0}A.10 ANDNPS: SSE Bitwise Logical AND NOT}{\*\bkmkend section_A_10}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}ANDNPS xmmreg,r/m128          ; 0F 55 /r             [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}ANDNPS performs a bitwise AND operation on the source operand and the complement of the destination register, and stores the result in the destination register. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_11}{\f0\fs26\b\lang2057{\*\listtag0}A.11 ANDPS: SSE Bitwise Logical AND}{\*\bkmkend section_A_11}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}ANDPS xmmreg,r/m128           ; 0F 54 /r             [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}ANDPS performs a bitwise AND operation on the source operand and the destination register, and stores the result in the destination register. }
\par\pard\plain\sb100\ltrpar{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\sb100\ltrpar{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_23}{\f0\fs26\b\lang2057{\*\listtag0}A.23 CMPccPS: SSE Packed Single-FP Compare}{\*\bkmkend section_A_23}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}CMPPS xmmreg,r/m128,imm8      ; 0F C2 /r ib          [KATMAI,SSE]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}CMPEQPS xmmreg,r/m128         ; 0F C2 /r 00          [KATMAI,SSE] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}CMPLEPS xmmreg,r/m128         ; 0F C2 /r 02          [KATMAI,SSE] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}CMPLTPS xmmreg,r/m128         ; 0F C2 /r 01          [KATMAI,SSE] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}CMPNEQPS xmmreg,r/m128        ; 0F C2 /r 04          [KATMAI,SSE] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}CMPNLEPS xmmreg,r/m128        ; 0F C2 /r 06          [KATMAI,SSE] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}CMPNLTPS xmmreg,r/m128        ; 0F C2 /r 05          [KATMAI,SSE] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}CMPORDPS xmmreg,r/m128        ; 0F C2 /r 07          [KATMAI,SSE] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}CMPUNORDPS xmmreg,r/m128      ; 0F C2 /r 03          [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}CMPPS treats both operands as vectors of four 32-bit floating-point numbers. For each pair of such numbers CMPPS produces an all 1 32-bit mask or an all 0 32-bit mask, using the comparison specified by imm8, and puts this mask in the corresponding location in the destination register. The allowed values of imm8 are 0-7, which correspond to the eight pseudo-ops shown above. }
\par\pard\plain\sb100\ltrpar{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\sb100\ltrpar{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_25}{\f0\fs26\b\lang2057{\*\listtag0}A.25 CMPccSS: SSE Scalar Single-FP Compare}{\*\bkmkend section_A_25}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}CMPSS xmmreg,xmmreg/mem32,imm8; F3 0F C2 /r ib       [KATMAI,SSE]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}CMPEQSS xmmreg,xmmreg/mem32   ; F3 0F C2 /r 00       [KATMAI,SSE] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}CMPLESS xmmreg,xmmreg/mem32   ; F3 0F C2 /r 02       [KATMAI,SSE] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}CMPLTSS xmmreg,xmmreg/mem32   ; F3 0F C2 /r 01       [KATMAI,SSE] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}CMPNEQSS xmmreg,xmmreg/mem32  ; F3 0F C2 /r 04       [KATMAI,SSE] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}CMPNLESS xmmreg,xmmreg/mem32  ; F3 0F C2 /r 06       [KATMAI,SSE] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}CMPNLTSS xmmreg,xmmreg/mem32  ; F3 0F C2 /r 05       [KATMAI,SSE] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}CMPORDSS xmmreg,xmmreg/mem32  ; F3 0F C2 /r 07       [KATMAI,SSE] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}CMPUNORDSS xmmreg,xmmreg/mem32; F3 0F C2 /r 03       [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}CMPSS is the same as CMPPS except that it compares only the first pair of 32-bit floating point numbers. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_27}{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_28}{\*\bkmkend section_A_27}{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\sb100\ltrpar{\f0\fs26\b\lang2057{\*\listtag0}A.28 COMISS: SSE Scalar Compare and Set EFLAGS}{\*\bkmkend section_A_28}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}COMISS xmmreg,xmmreg/mem32    ; 0F 2F /r             [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}COMISS compares the 32-bit floating-point numbers in the lowest part of the two operands, and sets the CPU flags appropriately. COMISS differs from UCOMISS in that it signals an invalid numeric exeception if an operand is an sNaN or a qNaN, whereas UCOMISS does so only if an operand is an sNaN. }
\par\pard\plain\sb100\ltrpar{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\sb100\ltrpar{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_30}{\f0\fs26\b\lang2057{\*\listtag0}A.30 CVTPI2PS: SSE Packed Integer to Floating-Point Conversion}{\*\bkmkend section_A_30}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}CVTPI2PS xmmreg,r/m64         ; 0F 2A /r             [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}CVTPI2PS considers the source operand as a pair of signed 32-bit integers and converts them to 32-bit floating-point numbers, storing the result in the lower half of the destination register. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_31}{\f0\fs26\b\lang2057{\*\listtag0}A.31 CVTPS2PI, CVTTPS2PI: SSE Packed Floating-Point to Integer Conversion}{\*\bkmkend section_A_31}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}CVTPS2PI mmxreg,xmmreg/mem64  ; 0F 2D /r             [KATMAI,SSE] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}CVTTPS2PI mmxreg,xmmreg/mem64 ; 0F 2C /r             [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}These instructions consider the source operand as a pair of 32-bit floating-point numbers and convert them to signed 32-bit integers, storing the result in the destination register. Note that if the source operand is a register then only its lower half is used. If the conversion is inexact, then CVTTPS2PI truncates, whereas CVTPS2PI rounds according to the MXCSR. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_32}{\f0\fs26\b\lang2057{\*\listtag0}A.32 CVTSI2SS: SSE Scalar Integer to Floating-Point Conversion}{\*\bkmkend section_A_32}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}CVTSI2SS xmmreg,r/m32         ; F3 0F 2A /r          [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}CVTSI2SS considers the source operand as a 32-bit signed integer, and converts it to a 32-bit float, storing the result in the lowest quarter of the destination register. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_33}{\f0\fs26\b\lang2057{\*\listtag0}A.33 CVTSS2SI, CVTTSS2SI: SSE Scalar Floating-Point to Integer Conversion}{\*\bkmkend section_A_33}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}CVTSS2SI reg32,xmmreg/mem32   ; F3 0F 2D /r          [KATMAI,SSE] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}CVTTSS2SI reg32,xmmreg/mem32  ; F3 0F 2C /r          [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}These instructions consider the source operand as a 32-bit floating-point number and convert it to a signed 32-bit integer, storing the result in the destination register. Note that if the source operand is a register then only its lowest quarter is used. If the conversion is inexact, then CVTTSS2SI truncates, whereas CVTSS2SI rounds according to the MXCSR. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_35}{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_37}{\*\bkmkend section_A_35}{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\sb100\ltrpar{\f0\fs26\b\lang2057{\*\listtag0}A.37 DIVPS: Packed Single-FP Divide}{\*\bkmkend section_A_37}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}DIVPS xmmreg,r/m128           ; 0F 5E /r             [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}DIVPS considers both operands as vectors of four 32-bit floating-point numbers and divides each such number in the destination register by the corresponding number in the source operand. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_38}{\f0\fs26\b\lang2057{\*\listtag0}A.38 DIVSS: Scalar Single-FP Divide}{\*\bkmkend section_A_38}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}DIVSS xmmreg,xmmreg/mem32     ; F3 0F 5E /r          [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}c\{DIVSS\} divides the 32-bit floating-point number in the lowest quarter of the destination register by the corresponding number in the source operand. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_39}{\f0\fs26\b\lang2057{\*\listtag0}A.39 EMMS: Empty MMX State}{\*\bkmkend section_A_39}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}EMMS                          ; 0F 77                [PENT,MMX]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}EMMS sets the FPU tag word (marking which floating-point registers are available) to all ones, meaning all registers are available for the FPU to use. It should be used after executing MMX instructions and before executing any subsequent floating-point operations. }
\par\pard\plain\sb100\ltrpar{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_53}{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\sb100\ltrpar{\f0\fs26\b\lang2057{\*\listtag0}A.53 FEMMS: Fast EMMS}{\*\bkmkend section_A_53}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}FEMMS                         ; 0F 0E                [3DNOW]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}FEMMS is like EMMS except that it is faster and leaves the contents of the MMX / floating-point registers undefined. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_66}{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_75}{\*\bkmkend section_A_66}{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\sb100\ltrpar{\*\bkmkend section_A_75}{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0} }
\par\pard\plain\sb100\ltrpar{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\sb100\ltrpar{\f0\fs26\b\lang2057{\*\listtag0}A.88 FXRSTOR: Restore FP, MMX and SSE States}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}FXRSTOR m512byte              ; 0F AE /1             [P6,SSE,FPU]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}FXRSTOR reloads the FP and MMX state, and the SSE state (environment and registers), from the memory area defined by m512byte. This data should have been written by a previous FXSAVE. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_89}{\f0\fs26\b\lang2057{\*\listtag0}A.89 FXSAVE: Store FP and MMX State and Streaming SIMD}{\*\bkmkend section_A_89}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}FXSAVE m512byte               ; 0F AE /0             [P6,SSE,FPU]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}FXSAVE writes the current FP and MMX state, and SSE state (environment and registers), to the specified destination defined by m512byte. It does this without checking for pending unmasked floating-point exceptions (similar to the operation of FNSAVE). Unlike the FSAVE/FNSAVE instructions, the processor retains the contents of the FP and MMX state and Streaming SIMD Extension state in the processor after the state has been saved. This instruction has been optimized to maximize floating-point save performance. }
\par\pard\plain\sb100\ltrpar{\f0\fs26\b\lang2057{\*\listtag0}A}
\par\pard\plain\sb100\ltrpar{\f0\fs26\b\lang2057{\*\listtag0}
\par}\pard\plain\sb100\ltrpar{\f0\fs26\b\lang2057{\*\listtag0}
\par}\pard\plain\sb100\ltrpar{\f0\fs26\b\lang2057{\*\listtag0}
\par}\pard\plain\sb100\ltrpar{\f0\fs26\b\lang2057{\*\listtag0}
\par}\pard\plain\sb100\ltrpar{\f0\fs26\b\lang2057{\*\listtag0}
\par}\pard\plain\sb100\ltrpar{\f0\fs26\b\lang2057{\*\listtag0}A.111 LDMXCSR: SSE Load MXCSR}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}LDMXCSR mem32                 ; 0F AE /2             [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}LDMXCSR loads a 32-bit value out of memory and stores it into the MXCSR (the SSE control/status register). }
\par\pard\plain\sb100\ltrpar{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\sb100\ltrpar{\f0\fs26\b\lang2057{\*\listtag0}A.118 LOOP, LOOPE, LOOPZ, LOOPNE, LOOPNZ: Loop with Counter}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}LOOP imm                      ; E2 rb                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}LOOP imm,CX                   ; a16 E2 rb            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}LOOP imm,ECX                  ; a32 E2 rb            [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}LOOPE imm                     ; E1 rb                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}LOOPE imm,CX                  ; a16 E1 rb            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}LOOPE imm,ECX                 ; a32 E1 rb            [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}LOOPZ imm                     ; E1 rb                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}LOOPZ imm,CX                  ; a16 E1 rb            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}LOOPZ imm,ECX                 ; a32 E1 rb            [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}LOOPNE imm                    ; E0 rb                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}LOOPNE imm,CX                 ; a16 E0 rb            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}LOOPNE imm,ECX                ; a32 E0 rb            [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}LOOPNZ imm                    ; E0 rb                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}LOOPNZ imm,CX                 ; a16 E0 rb            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}LOOPNZ imm,ECX                ; a32 E0 rb            [386]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}LOOP decrements its counter register (either CX or ECX - if one is not specified explicitly, the BITS setting dictates which is used) by one, and if the counter does not become zero as a result of this operation, it jumps to the given label. The jump has a range of 128 bytes. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}LOOPE (or its synonym LOOPZ) adds the additional condition that it only jumps if the counter is nonzero and the zero flag is set. Similarly, LOOPNE (and LOOPNZ) jumps only if the counter is nonzero and the zero flag is clear. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_119}{\f0\fs26\b\lang2057{\*\listtag0}A.119 LSL: Load Segment Limit}{\*\bkmkend section_A_119}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}LSL reg16,r/m16               ; o16 0F 03 /r         [286,PRIV] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}LSL reg32,r/m32               ; o32 0F 03 /r         [286,PRIV]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}LSL is given a segment selector in its source (second) operand; it computes the segment limit value by loading the segment limit field from the associated segment descriptor in the GDT or LDT. (This involves shifting left by 12 bits if the segment limit is page-granular, and not if it is byte-granular; so you end up with a byte limit in either case.) The segment limit obtained is then loaded into the destination (first) operand. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_120}{\f0\fs26\b\lang2057{\*\listtag0}A.120 LTR: Load Task Register}{\*\bkmkend section_A_120}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}LTR r/m16                     ; 0F 00 /3             [286,PRIV]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}LTR looks up the segment base and limit in the GDT or LDT descriptor specified by the segment selector given as its operand, and loads them into the Task Register. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_121}{\f0\fs26\b\lang2057{\*\listtag0}A.121 MASKMOVQ: Byte Mask Write}{\*\bkmkend section_A_121}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MASKMOVQ mmxreg,mmxreg        ; 0F F7 /r             [KATMAI]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}MASKMOVQ uses the most significant bit in each byte of the second MMX resister to selectively write (0 = no write, 1 = write) each byte of the first MMX register to the 64-bit memory location DS:DI or DS:EDI (depending on the addressing mode). }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_122}{\f0\fs26\b\lang2057{\*\listtag0}A.122 MAXPS: SSE Packed Single-FP Maximum}{\*\bkmkend section_A_122}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MAXPS xmmreg,r/m128           ; 0F 5F /r             [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}MAXPS considers its operands as vectors of four 32-bit floating-point numbers, and for each pair it stores the maximum of the the two in the corresponding quarter of the destination register. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_123}{\f0\fs26\b\lang2057{\*\listtag0}A.123 MAXSS: SSE Scalar Single-FP Maximum}{\*\bkmkend section_A_123}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MAXSS xmmreg,r/m128           ; F3 0F 5F /r          [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}MAXSS determines the maximum 32-bit floating-point number from the lowest quarter of both operands, and places this in the lowest quarter of the destination register. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_124}{\f0\fs26\b\lang2057{\*\listtag0}A.124 MINPS: SSE Packed Single-FP Minimum}{\*\bkmkend section_A_124}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MINPS xmmreg,r/m128           ; 0F 5D /r             [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}MINPS considers its operands as vectors of four 32-bit floating-point numbers, and for each pair it stores the minimum of the the two in the corresponding quarter of the destination register. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_125}{\f0\fs26\b\lang2057{\*\listtag0}A.125 MINSS: SSE Scalar Single-FP Maximum}{\*\bkmkend section_A_125}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MINSS xmmreg,r/m128           ; F3 0F 5D /r          [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}MINSS determines the minimum 32-bit floating-point number from the lowest quarter of both operands, and places this in the lowest quarter of the destination register. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_126}{\f0\fs26\b\lang2057{\*\listtag0}A.126 MOV: Move Data}{\*\bkmkend section_A_126}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOV r/m8,reg8                 ; 88 /r                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOV r/m16,reg16               ; o16 89 /r            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOV r/m32,reg32               ; o32 89 /r            [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOV reg8,r/m8                 ; 8A /r                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOV reg16,r/m16               ; o16 8B /r            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOV reg32,r/m32               ; o32 8B /r            [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOV reg8,imm8                 ; B0+r ib              [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOV reg16,imm16               ; o16 B8+r iw          [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOV reg32,imm32               ; o32 B8+r id          [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOV r/m8,imm8                 ; C6 /0 ib             [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOV r/m16,imm16               ; o16 C7 /0 iw         [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOV r/m32,imm32               ; o32 C7 /0 id         [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOV AL,memoffs8               ; A0 ow/od             [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOV AX,memoffs16              ; o16 A1 ow/od         [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOV EAX,memoffs32             ; o32 A1 ow/od         [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOV memoffs8,AL               ; A2 ow/od             [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOV memoffs16,AX              ; o16 A3 ow/od         [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOV memoffs32,EAX             ; o32 A3 ow/od         [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOV r/m16,segreg              ; o16 8C /r            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOV r/m32,segreg              ; o32 8C /r            [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOV segreg,r/m16              ; o16 8E /r            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOV segreg,r/m32              ; o32 8E /r            [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOV reg32,CR0/2/3/4           ; 0F 20 /r             [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOV reg32,DR0/1/2/3/6/7       ; 0F 21 /r             [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOV reg32,TR3/4/5/6/7         ; 0F 24 /r             [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOV CR0/2/3/4,reg32           ; 0F 22 /r             [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOV DR0/1/2/3/6/7,reg32       ; 0F 23 /r             [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOV TR3/4/5/6/7,reg32         ; 0F 26 /r             [386]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}MOV copies the contents of its source (second) operand into its destination (first) operand. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}In all forms of the MOV instruction, the two operands are the same size, except for moving between a segment register and an r/m32 operand. These instructions are treated exactly like the corresponding 16-bit equivalent (so that, for example, MOV DS,EAX functions identically to MOV DS,AX but saves a prefix when in 32-bit mode), except that when a segment register is moved into a 32-bit destination, the top two bytes of the result are undefined. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}MOV may not use CS as a destination. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}CR4 is only a supported register on the Pentium and above. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_127}{\f0\fs26\b\lang2057{\*\listtag0}A.127 MOVAPS: Move Aligned Four Packed Single-FP}{\*\bkmkend section_A_127}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOVAPS xmmreg,r/m128          ; 0F 28 /r             [KATMAI,SSE] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOVAPS r/m128,xmmreg          ; 0F 29 /r             [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}MOVAPS copies 16 bytes from the source operand to the destination operand. If one of the operands is a memory location it must be aligned on a 16-byte boundary (otherwise use MOVUPS). }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_128}{\f0\fs26\b\lang2057{\*\listtag0}A.128 MOVD: Move Doubleword to/from MMX Register}{\*\bkmkend section_A_128}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOVD mmxreg,r/m32             ; 0F 6E /r             [PENT,MMX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOVD r/m32,mmxreg             ; 0F 7E /r             [PENT,MMX]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}MOVD copies 32 bits from its source (second) operand into its destination (first) operand. When the destination is a 64-bit MMX register, the top 32 bits are set to zero. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_129}{\f0\fs26\b\lang2057{\*\listtag0}A.129 MOVHLPS: SSE Move High to Low}{\*\bkmkend section_A_129}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOVHLPS xmmreg,xmmreg         ; OF 12 /r             [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}MOVHLPS moves 8 bytes from the upper half of the source register to the lower half of the destination register. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_130}{\f0\fs26\b\lang2057{\*\listtag0}A.130 MOVHPS: SSE Move High}{\*\bkmkend section_A_130}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOVHPS xmmreg,mem64           ; 0F 16 /r             [KATMAI,SSE] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOVHPS mem64,xmmreg           ; 0F 17 /r             [KATMAI,SSE] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOVHPS xmmreg,xmmreg          ; 0F 16 /r             [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}MOVHPS xmmreg,mem64 moves 8 bytes from mem64 to the upper half of xmmreg. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}MOVHPS mem64,xmmreg moves 8 bytes from the upper half of xmmreg to mem64. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}MOVHPS xmmreg,xmmreg is simply a synonym for MOVLHPS xmmreg,xmmreg. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_131}{\f0\fs26\b\lang2057{\*\listtag0}A.131 MOVLHPS: SSE Move Low to High}{\*\bkmkend section_A_131}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOVLHPS xmmreg,xmmreg         ; 0F 16 /r             [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}MOVLHPS moves 8 bytes from the lower half of the source register to the upper half of the destination register. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_132}{\f0\fs26\b\lang2057{\*\listtag0}A.132 MOVLPS: SSE Move Low}{\*\bkmkend section_A_132}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOVLPS xmmreg,mem64           ; 0F 12 /r             [KATMAI,SSE] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOVLPS mem64,xmmreg           ; 0F 13 /r             [KATMAI,SSE] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOVLPS xmmreg,xmmreg          ; 0F 12 /r             [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}MOVLPS xmmreg,mem64 moves 8 bytes from mem64 to the lower half of xmmreg. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}MOVLPS mem64,xmmreg moves 8 bytes from the lower half of xmmreg to mem64. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}MOVLPS xmmreg,xmmreg is simply a synonym for MOVHLPS xmmreg,xmmreg. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_133}{\f0\fs26\b\lang2057{\*\listtag0}A.133 MOVMSKPS: Move Mask To Integer}{\*\bkmkend section_A_133}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOVMSKPS reg32,xmmreg         ; 0F 50 /r             [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}MOVMSKPS forms a 4-bit mask from the most significant bit of each of the four 32-bit numbers in the source register, and stores this mask in the destination register. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_134}{\f0\fs26\b\lang2057{\*\listtag0}A.134 MOVNTPS: Move Aligned Four Packed Single-FP Non Temporal}{\*\bkmkend section_A_134}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOVNTPS mem128,xmmreg         ; 0F 2B /r             [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}MOVNTPS copies the contents of the XMM register into the given memory location, doing so in such a way as to minimize cache pollution. The memory location must be 16-byte aligned. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_135}{\f0\fs26\b\lang2057{\*\listtag0}A.135 MOVNTQ: Move 64 Bits Non Temporal}{\*\bkmkend section_A_135}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOVNTQ mem64,mmxreg           ; 0F E7 /r             [KATMAI]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}MOVNTPS copies the contents of the MMX register into the given memory location, doing so in such a way as to minimize cache pollution. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_136}{\f0\fs26\b\lang2057{\*\listtag0}A.136 MOVQ: Move Quadword to/from MMX Register}{\*\bkmkend section_A_136}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOVQ mmxreg,r/m64             ; 0F 6F /r             [PENT,MMX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOVQ r/m64,mmxreg             ; 0F 7F /r             [PENT,MMX]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}MOVQ copies 64 bits from its source (second) operand into its destination (first) operand. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_137}{\f0\fs26\b\lang2057{\*\listtag0}A.137 MOVSB, MOVSW, MOVSD: Move String}{\*\bkmkend section_A_137}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOVSB                         ; A4                   [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOVSW                         ; o16 A5               [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOVSD                         ; o32 A5               [386]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}MOVSB copies the byte at [ES:DI] or [ES:EDI] to [DS:SI] or [DS:ESI]. It then increments or decrements (depending on the direction flag: increments if the flag is clear, decrements if it is set) SI and DI (or ESI and EDI). }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}The registers used are SI and DI if the address size is 16 bits, and ESI and EDI if it is 32 bits. If you need to use an address size not equal to the current BITS setting, you can use an explicit a16 or a32 prefix. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}The segment register used to load from [SI] or [ESI] can be overridden by using a segment register name as a prefix (for example, es movsb). The use of ES for the store to [DI] or [EDI] cannot be overridden. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}MOVSW and MOVSD work in the same way, but they copy a word or a doubleword instead of a byte, and increment or decrement the addressing registers by 2 or 4 instead of 1. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}The REP prefix may be used to repeat the instruction CX (or ECX - again, the address size chooses which) times. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_138}{\f0\fs26\b\lang2057{\*\listtag0}A.138 MOVSS: Move Scalar Single-FP}{\*\bkmkend section_A_138}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOVSS xmmreg,xmmreg/mem32     ; F3 0F 10 /r          [KATMAI,SSE] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOVSS xmmreg/mem32,xmmreg     ; F3 0F 11 /r          [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}MOVSS copies the lower 4 bytes of the source operand to the lower 4 bytes of the destination operand. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_139}{\f0\fs26\b\lang2057{\*\listtag0}A.139 MOVSX, MOVZX: Move Data with Sign or Zero Extend}{\*\bkmkend section_A_139}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOVSX reg16,r/m8              ; o16 0F BE /r         [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOVSX reg32,r/m8              ; o32 0F BE /r         [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOVSX reg32,r/m16             ; o32 0F BF /r         [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOVZX reg16,r/m8              ; o16 0F B6 /r         [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOVZX reg32,r/m8              ; o32 0F B6 /r         [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOVZX reg32,r/m16             ; o32 0F B7 /r         [386]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}MOVSX sign-extends its source (second) operand to the length of its destination (first) operand, and copies the result into the destination operand. MOVZX does the same, but zero-extends rather than sign-extending. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_140}{\f0\fs26\b\lang2057{\*\listtag0}A.140 MOVUPS: Move Unaligned Four Packed Single-FP}{\*\bkmkend section_A_140}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOVUPS xmmreg,r/m128          ; 0F 10 /r             [KATMAI,SSE] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MOVUPS r/m128,xmmreg          ; 0F 11 /r             [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}MOVUPS copies 16 bytes from the source operand to the destination operand. In contrast to MOVAPS, no assumption is made about alignment. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_141}{\f0\fs26\b\lang2057{\*\listtag0}A.141 MUL: Unsigned Integer Multiply}{\*\bkmkend section_A_141}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MUL r/m8                      ; F6 /4                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MUL r/m16                     ; o16 F7 /4            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MUL r/m32                     ; o32 F7 /4            [386]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}MUL performs unsigned integer multiplication. The other operand to the multiplication, and the destination operand, are implicit, in the following way: }
\par\pard\plain\fi-360\li720\sb100\sa100\ltrpar\tx720{\f0\fs24\lang2057{\*\listtag0}For MUL r/m8, AL is multiplied by the given operand; the product is stored in AX. }
\par\pard\plain\fi-360\li720\sb100\sa100\ltrpar\tx720{\f0\fs24\lang2057{\*\listtag0}For MUL r/m16, AX is multiplied by the given operand; the product is stored in DX:AX. }
\par\pard\plain\fi-360\li720\sb100\sa100\ltrpar\tx720{\f0\fs24\lang2057{\*\listtag0}For MUL r/m32, EAX is multiplied by the given operand; the product is stored in EDX:EAX. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}Signed integer multiplication is performed by the IMUL instruction: see }{\cf2\f0\fs24\ul\lang2057{\*\listtag0}section A.95.}{\f0\fs24\lang2057{\*\listtag0} }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_142}{\f0\fs26\b\lang2057{\*\listtag0}A.142 MULPS: Packed Single-FP Multiply}{\*\bkmkend section_A_142}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MULPS xmmreg,r/m128           ; 0F 59 /r             [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}MULPS multiplies each of the four 32-bit floating-point numbers in the destination register by the corresponding numbers in the source operand. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_143}{\f0\fs26\b\lang2057{\*\listtag0}A.143 MULSS: Scalar Single-FP Multiply}{\*\bkmkend section_A_143}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}MULSS xmmreg,xmmreg/mem32     ; F3 0F 59 /r          [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}MULSS multiplies the first of the four 32-bit floating-point numbers in the destination register by the corresponding number in the source operand. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_144}{\f0\fs26\b\lang2057{\*\listtag0}A.144 NEG, NOT: Two's and One's Complement}{\*\bkmkend section_A_144}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}NEG r/m8                      ; F6 /3                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}NEG r/m16                     ; o16 F7 /3            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}NEG r/m32                     ; o32 F7 /3            [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}NOT r/m8                      ; F6 /2                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}NOT r/m16                     ; o16 F7 /2            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}NOT r/m32                     ; o32 F7 /2            [386]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}NEG replaces the contents of its operand by the two's complement negation (invert all the bits and then add one) of the original value. NOT, similarly, performs one's complement (inverts all the bits). }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_145}{\f0\fs26\b\lang2057{\*\listtag0}A.145 NOP: No Operation}{\*\bkmkend section_A_145}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}NOP                           ; 90                   [8086]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}NOP performs no operation. Its opcode is the same as that generated by XCHG AX,AX or XCHG EAX,EAX (depending on the processor mode; see }{\cf2\f0\fs24\ul\lang2057{\*\listtag0}section A.268)}{\f0\fs24\lang2057{\*\listtag0}. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_146}{\f0\fs26\b\lang2057{\*\listtag0}A.146 OR: Bitwise OR}{\*\bkmkend section_A_146}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}OR r/m8,reg8                  ; 08 /r                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}OR r/m16,reg16                ; o16 09 /r            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}OR r/m32,reg32                ; o32 09 /r            [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}OR reg8,r/m8                  ; 0A /r                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}OR reg16,r/m16                ; o16 0B /r            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}OR reg32,r/m32                ; o32 0B /r            [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}OR r/m8,imm8                  ; 80 /1 ib             [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}OR r/m16,imm16                ; o16 81 /1 iw         [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}OR r/m32,imm32                ; o32 81 /1 id         [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}OR r/m16,imm8                 ; o16 83 /1 ib         [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}OR r/m32,imm8                 ; o32 83 /1 ib         [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}OR AL,imm8                    ; 0C ib                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}OR AX,imm16                   ; o16 0D iw            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}OR EAX,imm32                  ; o32 0D id            [386]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}OR performs a bitwise OR operation between its two operands (i.e. each bit of the result is 1 if and only if at least one of the corresponding bits of the two inputs was 1), and stores the result in the destination (first) operand. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}In the forms with an 8-bit immediate second operand and a longer first operand, the second operand is considered to be signed, and is sign-extended to the length of the first operand. In these cases, the BYTE qualifier is necessary to force NASM to generate this form of the instruction. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}The MMX instruction POR (see }{\cf2\f0\fs24\ul\lang2057{\*\listtag0}section A.196)}{\f0\fs24\lang2057{\*\listtag0} performs the same operation on the 64-bit MMX registers. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_147}{\f0\fs26\b\lang2057{\*\listtag0}A.147 ORPS: SSE Bitwise Logical OR}{\*\bkmkend section_A_147}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}ORPS xmmreg,r/m128            ; 0F 56 /r             [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}ORPS performs a bitwise OR operation on the source operand and the destination register, and stores the result in the destination register. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_148}{\f0\fs26\b\lang2057{\*\listtag0}A.148 OUT: Output Data to I/O Port}{\*\bkmkend section_A_148}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}OUT imm8,AL                   ; E6 ib                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}OUT imm8,AX                   ; o16 E7 ib            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}OUT imm8,EAX                  ; o32 E7 ib            [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}OUT DX,AL                     ; EE                   [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}OUT DX,AX                     ; o16 EF               [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}OUT DX,EAX                    ; o32 EF               [386]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}IN writes the contents of the given source register to the specified I/O port. The port number may be specified as an immediate value if it is between 0 and 255, and otherwise must be stored in DX. See also IN (}{\cf2\f0\fs24\ul\lang2057{\*\listtag0}section A.96)}{\f0\fs24\lang2057{\*\listtag0}. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_149}{\f0\fs26\b\lang2057{\*\listtag0}A.149 OUTSB, OUTSW, OUTSD: Output String to I/O Port}{\*\bkmkend section_A_149}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}OUTSB                         ; 6E                   [186] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}OUTSW                         ; o16 6F               [186] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}OUTSD                         ; o32 6F               [386]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}OUTSB loads a byte from [DS:SI] or [DS:ESI] and writes it to the I/O port specified in DX. It then increments or decrements (depending on the direction flag: increments if the flag is clear, decrements if it is set) SI or ESI. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}The register used is SI if the address size is 16 bits, and ESI if it is 32 bits. If you need to use an address size not equal to the current BITS setting, you can use an explicit a16 or a32 prefix. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}The segment register used to load from [SI] or [ESI] can be overridden by using a segment register name as a prefix (for example, es outsb). }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}OUTSW and OUTSD work in the same way, but they output a word or a doubleword instead of a byte, and increment or decrement the addressing registers by 2 or 4 instead of 1. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}The REP prefix may be used to repeat the instruction CX (or ECX - again, the address size chooses which) times. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_150}{\f0\fs26\b\lang2057{\*\listtag0}A.150 PACKSSDW, PACKSSWB, PACKUSWB: Pack Data}{\*\bkmkend section_A_150}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PACKSSDW mmxreg,r/m64         ; 0F 6B /r             [PENT,MMX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PACKSSWB mmxreg,r/m64         ; 0F 63 /r             [PENT,MMX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PACKUSWB mmxreg,r/m64         ; 0F 67 /r             [PENT,MMX]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}All these instructions start by forming a notional 128-bit word by placing the source (second) operand on the left of the destination (first) operand. PACKSSDW then splits this 128-bit word into four doublewords, converts each to a word, and loads them side by side into the destination register; PACKSSWB and PACKUSWB both split the 128-bit word into eight words, converts each to a byte, and loads those side by side into the destination register. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PACKSSDW and PACKSSWB perform signed saturation when reducing the length of numbers: if the number is too large to fit into the reduced space, they replace it by the largest signed number (7FFFh or 7Fh) that will fit, and if it is too small then they replace it by the smallest signed number (8000h or 80h) that will fit. PACKUSWB performs unsigned saturation: it treats its input as unsigned, and replaces it by the largest unsigned number that will fit. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_151}{\f0\fs26\b\lang2057{\*\listtag0}A.151 PADDxx: MMX Packed Addition}{\*\bkmkend section_A_151}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PADDB mmxreg,r/m64            ; 0F FC /r             [PENT,MMX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PADDW mmxreg,r/m64            ; 0F FD /r             [PENT,MMX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PADDD mmxreg,r/m64            ; 0F FE /r             [PENT,MMX]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PADDSB mmxreg,r/m64           ; 0F EC /r             [PENT,MMX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PADDSW mmxreg,r/m64           ; 0F ED /r             [PENT,MMX]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PADDUSB mmxreg,r/m64          ; 0F DC /r             [PENT,MMX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PADDUSW mmxreg,r/m64          ; 0F DD /r             [PENT,MMX]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PADDxx all perform packed addition between their two 64-bit operands, storing the result in the destination (first) operand. The PADDxB forms treat the 64-bit operands as vectors of eight bytes, and add each byte individually; PADDxW treat the operands as vectors of four words; and PADDD treats its operands as vectors of two doublewords. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PADDSB and PADDSW perform signed saturation on the sum of each pair of bytes or words: if the result of an addition is too large or too small to fit into a signed byte or word result, it is clipped (saturated) to the largest or smallest value which will fit. PADDUSB and PADDUSW similarly perform unsigned saturation, clipping to 0FFh or 0FFFFh if the result is larger than that. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_152}{\f0\fs26\b\lang2057{\*\listtag0}A.152 PADDSIW: MMX Packed Addition to Implicit Destination}{\*\bkmkend section_A_152}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PADDSIW mmxreg,r/m64          ; 0F 51 /r             [CYRIX,MMX]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PADDSIW, specific to the Cyrix extensions to the MMX instruction set, performs the same function as PADDSW, except that the result is not placed in the register specified by the first operand, but instead in the register whose number differs from the first operand only in the last bit. So PADDSIW MM0,MM2 would put the result in MM1, but PADDSIW MM1,MM2 would put the result in MM0. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_153}{\f0\fs26\b\lang2057{\*\listtag0}A.153 PAND, PANDN: MMX Bitwise AND and AND-NOT}{\*\bkmkend section_A_153}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PAND mmxreg,r/m64             ; 0F DB /r             [PENT,MMX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PANDN mmxreg,r/m64            ; 0F DF /r             [PENT,MMX]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PAND performs a bitwise AND operation between its two operands (i.e. each bit of the result is 1 if and only if the corresponding bits of the two inputs were both 1), and stores the result in the destination (first) operand. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PANDN performs the same operation, but performs a one's complement operation on the destination (first) operand first. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_154}{\f0\fs26\b\lang2057{\*\listtag0}A.154 PAVEB: MMX Packed Average}{\*\bkmkend section_A_154}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PAVEB mmxreg,r/m64            ; 0F 50 /r             [CYRIX,MMX]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PAVEB, specific to the Cyrix MMX extensions, treats its two operands as vectors of eight unsigned bytes, and calculates the average of the corresponding bytes in the operands. The resulting vector of eight averages is stored in the first operand. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_155}{\f0\fs26\b\lang2057{\*\listtag0}A.155 PAVGB, PAVGW: Packed Average}{\*\bkmkend section_A_155}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PAVGB mmxreg,r/m64            ; 0F E0 /r             [KATMAI] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PAVGW mmxreg,r/m64            ; 0F E3 /r             [KATMAI]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}For each byte in the source register, PAVGB computes the average of this byte and the corresponding byte in the destination register, and stores this average in place of the byte in the source register. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PAVGW does the same thing, but operating on 4 pairs of words instead of 8 pairs of bytes. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}In all cases, the values operated one are considered to be unsigned, and the result is rounded up if it is not an integer. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_156}{\f0\fs26\b\lang2057{\*\listtag0}A.156 PAVGUSB: Average Of Unsigned Packed 8-bit Values}{\*\bkmkend section_A_156}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PAVGUSB mmxreg,r/m64          ; 0F 0F /r BF          [3DNOW]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PAVGUSB produces the averages (rounded up) of the eight unsigned 8-bit integer values in the source operand and the eight corresponding unsigned 8-bit integer values in the destination register. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_157}{\f0\fs26\b\lang2057{\*\listtag0}A.157 PCMPxx: MMX Packed Comparison}{\*\bkmkend section_A_157}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PCMPEQB mmxreg,r/m64          ; 0F 74 /r             [PENT,MMX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PCMPEQW mmxreg,r/m64          ; 0F 75 /r             [PENT,MMX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PCMPEQD mmxreg,r/m64          ; 0F 76 /r             [PENT,MMX]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PCMPGTB mmxreg,r/m64          ; 0F 64 /r             [PENT,MMX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PCMPGTW mmxreg,r/m64          ; 0F 65 /r             [PENT,MMX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PCMPGTD mmxreg,r/m64          ; 0F 66 /r             [PENT,MMX]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}The PCMPxx instructions all treat their operands as vectors of bytes, words, or doublewords; corresponding elements of the source and destination are compared, and the corresponding element of the destination (first) operand is set to all zeros or all ones depending on the result of the comparison. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PCMPxxB treats the operands as vectors of eight bytes, PCMPxxW treats them as vectors of four words, and PCMPxxD as two doublewords. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PCMPEQx sets the corresponding element of the destination operand to all ones if the two elements compared are equal; PCMPGTx sets the destination element to all ones if the element of the first (destination) operand is greater (treated as a signed integer) than that of the second (source) operand. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_158}{\f0\fs26\b\lang2057{\*\listtag0}A.158 PDISTIB: MMX Packed Distance and Accumulate with Implied Register}{\*\bkmkend section_A_158}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PDISTIB mmxreg,mem64          ; 0F 54 /r             [CYRIX,MMX]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PDISTIB, specific to the Cyrix MMX extensions, treats its two input operands as vectors of eight unsigned bytes. For each byte position, it finds the absolute difference between the bytes in that position in the two input operands, and adds that value to the byte in the same position in the implied output register. The addition is saturated to an unsigned byte in the same way as PADDUSB. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}The implied output register is found in the same way as PADDSIW (}{\cf2\f0\fs24\ul\lang2057{\*\listtag0}section A.152)}{\f0\fs24\lang2057{\*\listtag0}. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}Note that PDISTIB cannot take a register as its second source operand. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_159}{\f0\fs26\b\lang2057{\*\listtag0}A.159 PEXTRW: Extract Word}{\*\bkmkend section_A_159}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PEXTRW reg32,mmxreg,imm8      ; 0F C5 /r ib          [KATMAI]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PEXTRW moves the word in the MMX register (selected by the two least significant bits of imm8) into the lower half of the 32-bit integer register. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_160}{\f0\fs26\b\lang2057{\*\listtag0}A.160 PF2ID: Packed Floating-Point To Integer Conversion}{\*\bkmkend section_A_160}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PF2ID mmxreg,r/m64            ; 0F 0F /r 1D          [3DNOW]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PF2ID converts two 32-bit floating point numbers in the source operand into 32-bit signed integers in the destination register, using truncation. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_161}{\f0\fs26\b\lang2057{\*\listtag0}A.161 PF2IW: Packed Floating-Point to Integer Conversion}{\*\bkmkend section_A_161}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PF2IW mmxreg,r/m64            ; 0F 0F /r 1C          [ATHLON]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PF2IW converts two 32-bit floating point numbers in the source operand into 16-bit signed integers in the destination register, using truncation and sign-extending to 32 bits. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_162}{\f0\fs26\b\lang2057{\*\listtag0}A.162 PFACC: Floating-Point Accumulate}{\*\bkmkend section_A_162}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PFACC mmxreg,r/m64            ; 0F 0F /r AE          [3DNOW]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PFACC treats the source and destination operands as pairs of 32-bit floating-point numbers. The sum of the pair in the destination register is stored in the lower half of the destination register, and the sum of the pair in the source operand is stored in the upper half of the destination register. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_163}{\f0\fs26\b\lang2057{\*\listtag0}A.163 PFADD: Packed Floating-Point Addition}{\*\bkmkend section_A_163}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PFADD mmxreg,r/m64            ; 0F 0F /r 9E          [3DNOW]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PFADD adds the contents of the source operand to the contents of the destination register, treating both as pairs of 32-bit floating-point numbers. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_164}{\f0\fs26\b\lang2057{\*\listtag0}A.164 PFCMPEQ, PFCMPGE, PFCMPGT: Packed Floating-Point Comparison.}{\*\bkmkend section_A_164}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PFCMPEQ mmxreg,r/m64          ; 0F 0F /r B0          [3DNOW] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PFCMPGE mmxreg,r/m64          ; 0F 0F /r 90          [3DNOW] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PFCMPGT mmxreg,r/m64          ; 0F 0F /r A0          [3DNOW]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}These instructions perform comparisons between pairs of 32-bit floating-point numbers, storing the two results in the destination register. PFCMPEQ stores 0xFFFFFFFF if the numbers are equal, and 0 otherwise. PFCMPGE stores 0xFFFFFFFF if the destination is greater than or equal to the source, and 0 otherwise. PFCMPGT stores 0xFFFFFFFF if the destination is greater than the source, and 0 otherwise. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_165}{\f0\fs26\b\lang2057{\*\listtag0}A.165 PFMAX: Packed Floating-Point Maximum}{\*\bkmkend section_A_165}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PFMAX mmxreg,r/m64            ; 0F 0F /r A4          [3DNOW]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}For each half of the destination register, sets it equal to the maximum of itself and the corresponding half of the source operand, treating both as 32-bit floating-point numbers. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_166}{\f0\fs26\b\lang2057{\*\listtag0}A.166 PFMIN: Packed Floating-Point Minimum}{\*\bkmkend section_A_166}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PFMIN mmxreg,r/m64            ; 0F 0F /r 94          [3DNOW]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}For each half of the destination register, sets it equal to the minimum of itself and the corresponding half of the source operand, treating both as 32-bit floating-point numbers. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_167}{\f0\fs26\b\lang2057{\*\listtag0}A.167 PFMUL: Packed Floating-Point Multiply}{\*\bkmkend section_A_167}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PFMUL mmxreg,r/m64            ; 0F 0F /r B4          [3DNOW]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PFMUL multiples the contents of the destination register by the contents of the source operand, treating both as pairs of 32-bit floating-point numbers. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_168}{\f0\fs26\b\lang2057{\*\listtag0}A.168 PFNACC: Packed Floating-Point Negative Accumulate}{\*\bkmkend section_A_168}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PFNACC mmxreg,r/m64           ; 0F 0F /r 8A          [ATHLON]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PFNACC works the same as PFACC, except that the difference rather than the sum is stored, the value in the upper half in both cases being subtracted from the value in the lower half. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_169}{\f0\fs26\b\lang2057{\*\listtag0}A.169 PFPNACC: Packed Floating-Point Mixed Accumulate}{\*\bkmkend section_A_169}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PFPNACC mmxreg,r/m64          ; 0F 0F /r 8E          [ATHLON]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PFPNACC is a mixture of PFACC and PFNACC. The new value of the lower half of the destination register is obtained by subtracting the upper half from the lower half. But the new value of the upper half of the destination register is obtained by adding both halves of the source operand. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_170}{\f0\fs26\b\lang2057{\*\listtag0}A.170 PFRCP: Floating-Point Reciprocal Approximation}{\*\bkmkend section_A_170}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PFRCP mmxreg,r/m64            ; 0F 0F /r 96          [3DNOW]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PFRCP calculates an approximation (accurate to 14 bits) of the reciprocal of the 32-bit floating-point number in the lower half of the source and stores it in both halves of the destination. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_171}{\f0\fs26\b\lang2057{\*\listtag0}A.171 PFRCPIT1: Floating-Point Reciprocal Refinement}{\*\bkmkend section_A_171}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PFRCPIT1 mmxreg,r/m64         ; 0F 0F /r A6          [3DNOW]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PFRCPIT1 performs the first step in the iterative refinement of a reciprocal produced by PFRCP. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_172}{\f0\fs26\b\lang2057{\*\listtag0}A.172 PFRCPIT2: Floating-Point Refinement (Last Step)}{\*\bkmkend section_A_172}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PFRCPIT2 mmxreg,r/m64         ; 0F 0F /r B6          [3DNOW]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PFRCPIT2 performs the second and final step in the iterative refinement of a reciprocal produced by PFRCP or of a reciprocal square root produced by PFRSQRT. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_173}{\f0\fs26\b\lang2057{\*\listtag0}A.173 PFRSQIT1: Floating-Point Reciprocal Square-Root Refinement}{\*\bkmkend section_A_173}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PFRSQIT1 mmxreg,r/m64         ; 0F 0F /r A7          [3DNOW]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PFRSQIT1 performs the first step in the iterative refinement of a reciprocal square root produced by PFRSQRT. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_174}{\f0\fs26\b\lang2057{\*\listtag0}A.174 PFRSQRT: Floating-Point Reciprocal Square-Root Approximation}{\*\bkmkend section_A_174}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PFRSQRT mmxreg,r/m64          ; 0F 0F /r 97          [3DNOW]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PFRSQRT calculates an approximation (accurate to 15 bits) of the reciprocal of the square root of the 32-bit floating-point number in the lower half of the source and stores it in both halves of the destination. If the source value is negative then it is treated as positive except that its sign is copied to the result. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_175}{\f0\fs26\b\lang2057{\*\listtag0}A.175 PFSUB: Packed Floating-Point Subtraction}{\*\bkmkend section_A_175}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PFSUB mmxreg,r/m64            ; 0F 0F /r 9A          [3DNOW]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PFSUB subtracts the pair of 32-bit floating-point numbers in the source operand from the corresponding pair in the destination register. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_176}{\f0\fs26\b\lang2057{\*\listtag0}A.176 PFSUBR: Packed Floating-Point Reverse Subtraction}{\*\bkmkend section_A_176}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PFSUBR mmxreg,r/m64           ; 0F 0F /r AA          [3DNOW]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PFSUB subtracts the pair of 32-bit floating-point numbers in the source operand from the corresponding pair in the destination register, and then negates the results. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_177}{\f0\fs26\b\lang2057{\*\listtag0}A.177 PI2FD: Packed Integer To Floating-Point Conversion}{\*\bkmkend section_A_177}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PI2FD mmxreg,r/m64            ; 0F 0F /r 0D          [3DNOW]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PI2FD converts the pair of signed 32-bit integers in the source operand into 32-bit floating-point numbers (using truncation) and stores the results in the destination register. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_178}{\f0\fs26\b\lang2057{\*\listtag0}A.178 PI2FW: Packed Integer To Floating-Point Conversion}{\*\bkmkend section_A_178}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PI2FW mmxreg,r/m64            ; 0F 0F /r 0C          [ATHLON]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PI2FW treats the source operand as a pair of signed 16-bit integers, by ignoring the upper 16 bits of each 32-bit half. These integers are converted to 32-bit floating-point numbers and stored in the destination register. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_179}{\f0\fs26\b\lang2057{\*\listtag0}A.179 PINSRW: Insert Word}{\*\bkmkend section_A_179}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PINSRW mmxreg,r/m16,imm8      ; 0F C4 /r ib          [KATMAI]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PINSRW loads a word from the 16-bit integer register or memory location and inserts it in the MMX register, at a position defined by the two least significant bits of the imm8 constant. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}Instead of specifying a 16-bit register you can instead specify a 32-bit register, of which only the bottom half will be used. This may seem peculiar, but it's the way Intel prefers. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_180}{\f0\fs26\b\lang2057{\*\listtag0}A.180 PMACHRIW: MMX Packed Multiply and Accumulate with Rounding}{\*\bkmkend section_A_180}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PMACHRIW mmxreg,mem64         ; 0F 5E /r             [CYRIX,MMX]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PMACHRIW acts almost identically to PMULHRIW (}{\cf2\f0\fs24\ul\lang2057{\*\listtag0}section A.189)}{\f0\fs24\lang2057{\*\listtag0}, but instead of storing its result in the implied destination register, it adds its result, as four packed words, to the implied destination register. No saturation is done: the addition can wrap around. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}Note that PMACHRIW cannot take a register as its second source operand. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_181}{\f0\fs26\b\lang2057{\*\listtag0}A.181 PMADDWD: MMX Packed Multiply and Add}{\*\bkmkend section_A_181}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PMADDWD mmxreg,r/m64          ; 0F F5 /r             [PENT,MMX]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PMADDWD treats its two inputs as vectors of four signed words. It multiplies corresponding elements of the two operands, giving four signed doubleword results. The top two of these are added and placed in the top 32 bits of the destination (first) operand; the bottom two are added and placed in the bottom 32 bits. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_182}{\f0\fs26\b\lang2057{\*\listtag0}A.182 PMAGW: MMX Packed Magnitude}{\*\bkmkend section_A_182}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PMAGW mmxreg,r/m64            ; 0F 52 /r             [CYRIX,MMX]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PMAGW, specific to the Cyrix MMX extensions, treats both its operands as vectors of four signed words. It compares the absolute values of the words in corresponding positions, and sets each word of the destination (first) operand to whichever of the two words in that position had the larger absolute value. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_183}{\f0\fs26\b\lang2057{\*\listtag0}A.183 PMAXSW: Packed Signed Integer Word Maximum}{\*\bkmkend section_A_183}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PMAXSW mmxreg,r/m64           ; 0F EE /r             [KATMAI]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PMAXSW considers both operands as vectors of 4 signed words. Each such word in the destination register is replaced by the corresponding word in the source operand if that is larger. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_184}{\f0\fs26\b\lang2057{\*\listtag0}A.184 PMAXUB: Packed Unsigned Integer Byte Maximum}{\*\bkmkend section_A_184}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PMAXUB mmxreg,r/m64           ; 0F DE /r             [KATMAI]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PMAXUB considers both operands as vectors of 8 unsigned bytes. Each such byte in the destination register is replaced by the corresponding byte in the source operand if that is larger. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_185}{\f0\fs26\b\lang2057{\*\listtag0}A.185 PMINSW: Packed Signed Integer Word Minimum}{\*\bkmkend section_A_185}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PMINSW mmxreg,r/m64           ; 0F EA /r             [KATMAI]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PMINSW considers both operands as vectors of 4 signed words. Each such word in the destination register is replaced by the corresponding word in the source operand if that is smaller. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_186}{\f0\fs26\b\lang2057{\*\listtag0}A.186 PMINUB: Packed Unsigned Integer Byte Minimum}{\*\bkmkend section_A_186}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PMINUB mmxreg,r/m64           ; 0F DA /r             [KATMAI]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PMINUB considers both operands as vectors of 8 unsigned bytes. Each such byte in the destination register is replaced by the corresponding byte in the source operand if that is smaller. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_187}{\f0\fs26\b\lang2057{\*\listtag0}A.187 PMOVMSKB: Move Byte Mask To Integer}{\*\bkmkend section_A_187}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PMOVMSKB reg32,mmxreg         ; 0F D7 /r             [KATMAI]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PMOVMSKB creates an 8-bit mask formed of the most significant bit of each byte of its source operand, and stores this in the destination register. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_188}{\f0\fs26\b\lang2057{\*\listtag0}A.188 PMULHRWA: Packed Multiply With Rounding}{\*\bkmkend section_A_188}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PMULHRWA mmxreg,r/m64         ; 0F 0F /r B7          [3DNOW]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PMULHRWA performs the same operation as PMULHW, except that it rounds the results rather than truncating. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}Note that the PMULHRWA instruction is called PMULHRW in AMD documentation. But NASM uses the form PMULHRWA to avoid conflict with Cyrix's different PMULHRW instruction (which NASM calls PMULHRWC). }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_189}{\f0\fs26\b\lang2057{\*\listtag0}A.189 PMULHRWC, PMULHRIW: MMX Packed Multiply High with Rounding}{\*\bkmkend section_A_189}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PMULHRWC mmxreg,r/m64         ; 0F 59 /r             [CYRIX,MMX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PMULHRIW mmxreg,r/m64         ; 0F 5D /r             [CYRIX,MMX]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}These instructions, specific to the Cyrix MMX extensions, treat their operands as vectors of four signed words. Words in corresponding positions are multiplied, to give a 32-bit value in which bits 30 and 31 are guaranteed equal. Bits 30 to 15 of this value (bit mask 0x7FFF8000) are taken and stored in the corresponding position of the destination operand, after first rounding the low bit (equivalent to adding 0x4000 before extracting bits 30 to 15). }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}For PMULHRWC, the destination operand is the first operand; for PMULHRIW the destination operand is implied by the first operand in the manner of PADDSIW (}{\cf2\f0\fs24\ul\lang2057{\*\listtag0}section A.152)}{\f0\fs24\lang2057{\*\listtag0}. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}Note that the PMULHRWC instruction is called PMULHRW in Cyrix documentation. But NASM uses the form PMULHRWC to avoid conflict with AMD's different PMULHRW instruction (which NASM calls PMULHRWA) }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_190}{\f0\fs26\b\lang2057{\*\listtag0}A.190 PMULHUW: Packed Multiply High Unsigned}{\*\bkmkend section_A_190}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PMULHUW mmxreg,r/m64          ; 0F E4 /r             [KATMAI]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PMULHUW multiplies the four unsigned words in the destination register with the four unsigned words in the source operand. The high-order 16 bits of each of the 32-bit intermediate results are written to the destination operand. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_191}{\f0\fs26\b\lang2057{\*\listtag0}A.191 PMULHW, PMULLW: MMX Packed Multiply}{\*\bkmkend section_A_191}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PMULHW mmxreg,r/m64           ; 0F E5 /r             [PENT,MMX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PMULLW mmxreg,r/m64           ; 0F D5 /r             [PENT,MMX]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PMULxW treats its two inputs as vectors of four signed words. It multiplies corresponding elements of the two operands, giving four signed doubleword results. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PMULHW then stores the top 16 bits of each doubleword in the destination (first) operand; PMULLW stores the bottom 16 bits of each doubleword in the destination operand. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_192}{\f0\fs26\b\lang2057{\*\listtag0}A.192 PMVccZB: MMX Packed Conditional Move}{\*\bkmkend section_A_192}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PMVZB mmxreg,mem64            ; 0F 58 /r             [CYRIX,MMX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PMVNZB mmxreg,mem64           ; 0F 5A /r             [CYRIX,MMX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PMVLZB mmxreg,mem64           ; 0F 5B /r             [CYRIX,MMX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PMVGEZB mmxreg,mem64          ; 0F 5C /r             [CYRIX,MMX]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}These instructions, specific to the Cyrix MMX extensions, perform parallel conditional moves. The two input operands are treated as vectors of eight bytes. Each byte of the destination (first) operand is either written from the corresponding byte of the source (second) operand, or left alone, depending on the value of the byte in the implied operand (specified in the same way as PADDSIW, in }{\cf2\f0\fs24\ul\lang2057{\*\listtag0}section A.152)}{\f0\fs24\lang2057{\*\listtag0}. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PMVZB performs each move if the corresponding byte in the implied operand is zero. PMVNZB moves if the byte is non-zero. PMVLZB moves if the byte is less than zero, and PMVGEZB moves if the byte is greater than or equal to zero. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}Note that these instructions cannot take a register as their second source operand. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_193}{\f0\fs26\b\lang2057{\*\listtag0}A.193 POP: Pop Data from Stack}{\*\bkmkend section_A_193}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}POP reg16                     ; o16 58+r             [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}POP reg32                     ; o32 58+r             [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}POP r/m16                     ; o16 8F /0            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}POP r/m32                     ; o32 8F /0            [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}POP CS                        ; 0F                   [8086,UNDOC] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}POP DS                        ; 1F                   [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}POP ES                        ; 07                   [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}POP SS                        ; 17                   [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}POP FS                        ; 0F A1                [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}POP GS                        ; 0F A9                [386]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}POP loads a value from the stack (from [SS:SP] or [SS:ESP]) and then increments the stack pointer. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}The address-size attribute of the instruction determines whether SP or ESP is used as the stack pointer: to deliberately override the default given by the BITS setting, you can use an a16 or a32 prefix. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}The operand-size attribute of the instruction determines whether the stack pointer is incremented by 2 or 4: this means that segment register pops in BITS 32 mode will pop 4 bytes off the stack and discard the upper two of them. If you need to override that, you can use an o16 or o32 prefix. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}The above opcode listings give two forms for general-purpose register pop instructions: for example, POP BX has the two forms 5B and 8F C3. NASM will always generate the shorter form when given POP BX. NDISASM will disassemble both. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}POP CS is not a documented instruction, and is not supported on any processor above the 8086 (since they use 0Fh as an opcode prefix for instruction set extensions). However, at least some 8086 processors do support it, and so NASM generates it for completeness. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_194}{\f0\fs26\b\lang2057{\*\listtag0}A.194 POPAx: Pop All General-Purpose Registers}{\*\bkmkend section_A_194}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}POPA                          ; 61                   [186] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}POPAW                         ; o16 61               [186] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}POPAD                         ; o32 61               [386]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}POPAW pops a word from the stack into each of, successively, DI, SI, BP, nothing (it discards a word from the stack which was a placeholder for SP), BX, DX, CX and AX. It is intended to reverse the operation of PUSHAW (see }{\cf2\f0\fs24\ul\lang2057{\*\listtag0}section A.207)}{\f0\fs24\lang2057{\*\listtag0}, but it ignores the value for SP that was pushed on the stack by PUSHAW. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}POPAD pops twice as much data, and places the results in EDI, ESI, EBP, nothing (placeholder for ESP), EBX, EDX, ECX and EAX. It reverses the operation of PUSHAD. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}POPA is an alias mnemonic for either POPAW or POPAD, depending on the current BITS setting. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}Note that the registers are popped in reverse order of their numeric values in opcodes (see }{\cf2\f0\fs24\ul\lang2057{\*\listtag0}section A.2.1)}{\f0\fs24\lang2057{\*\listtag0}. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_195}{\f0\fs26\b\lang2057{\*\listtag0}A.195 POPFx: Pop Flags Register}{\*\bkmkend section_A_195}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}POPF                          ; 9D                   [186] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}POPFW                         ; o16 9D               [186] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}POPFD                         ; o32 9D               [386]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}POPFW pops a word from the stack and stores it in the bottom 16 bits of the flags register (or the whole flags register, on processors below a 386). POPFD pops a doubleword and stores it in the entire flags register. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}POPF is an alias mnemonic for either POPFW or POPFD, depending on the current BITS setting. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}See also PUSHF (}{\cf2\f0\fs24\ul\lang2057{\*\listtag0}section A.208)}{\f0\fs24\lang2057{\*\listtag0}. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_196}{\f0\fs26\b\lang2057{\*\listtag0}A.196 POR: MMX Bitwise OR}{\*\bkmkend section_A_196}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}POR mmxreg,r/m64              ; 0F EB /r             [PENT,MMX]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}POR performs a bitwise OR operation between its two operands (i.e. each bit of the result is 1 if and only if at least one of the corresponding bits of the two inputs was 1), and stores the result in the destination (first) operand. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_197}{\f0\fs26\b\lang2057{\*\listtag0}A.197 PREFETCH, PREFETCHW: Prefetch cache line}{\*\bkmkend section_A_197}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PREFETCH mem                  ; 0F 0D /0             [3DNOW] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PREFETCHW mem                 ; 0F 0D /1             [3DNOW]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PREFETCH loads a cache line into the L1 data cache. PREFETCHW does the same, but also marks the cache line as modified. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_198}{\f0\fs26\b\lang2057{\*\listtag0}A.198 PREFETCHNTA, PREFETCHT0, PREFETCHT1, PREFETCHT2: Prefetch cache line}{\*\bkmkend section_A_198}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PREFETCHNTA mem               ; 0F 18 /0             [KATMAI] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PREFETCHT0 mem                ; 0F 18 /1             [KATMAI] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PREFETCHT1 mem                ; 0F 18 /2             [KATMAI] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PREFETCHT2 mem                ; 0F 18 /3             [KATMAI]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}These instructions move the data specified by the address closer to the processor using, respectively, the nta, t0, t1 and t2 hints. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_199}{\f0\fs26\b\lang2057{\*\listtag0}A.199 PSADBW: Packed Sum of Absolute Differences}{\*\bkmkend section_A_199}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PSADBW mmxreg,r/m64           ; 0F F6 /r             [KATMAI]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PSADBW computes the sum of the absolute differences of the unsigned signed bytes in the destination register and those in the source operand. It then places this sum in the lowest word of the destination register, and sets the three other words to zero. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_200}{\f0\fs26\b\lang2057{\*\listtag0}A.200 PSHUFW: Packed Shuffle Word}{\*\bkmkend section_A_200}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PSHUFW mmxreg,r/m64,imm8      ; 0F 70 /r ib          [KATMAI]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PSHUFW uses the imm8 value to select which of the four words of the source operand will be placed in each of the words of the destination register. Bits 0 and 1 of imm8 encode the source for word 0 (the lowest word) of the destination register, bits 2 and 3 encode the source for word 1, bits 4 and 5 for word 2, and bits 6 and 7 for word 3 (the highest word). Each 2-bit encoding is a number in the range 0-3 that specifies the corresponding word of the source operand. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_201}{\f0\fs26\b\lang2057{\*\listtag0}A.201 PSLLx, PSRLx, PSRAx: MMX Bit Shifts}{\*\bkmkend section_A_201}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PSLLW mmxreg,r/m64            ; 0F F1 /r             [PENT,MMX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PSLLW mmxreg,imm8             ; 0F 71 /6 ib          [PENT,MMX]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PSLLD mmxreg,r/m64            ; 0F F2 /r             [PENT,MMX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PSLLD mmxreg,imm8             ; 0F 72 /6 ib          [PENT,MMX]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PSLLQ mmxreg,r/m64            ; 0F F3 /r             [PENT,MMX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PSLLQ mmxreg,imm8             ; 0F 73 /6 ib          [PENT,MMX]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PSRAW mmxreg,r/m64            ; 0F E1 /r             [PENT,MMX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PSRAW mmxreg,imm8             ; 0F 71 /4 ib          [PENT,MMX]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PSRAD mmxreg,r/m64            ; 0F E2 /r             [PENT,MMX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PSRAD mmxreg,imm8             ; 0F 72 /4 ib          [PENT,MMX]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PSRLW mmxreg,r/m64            ; 0F D1 /r             [PENT,MMX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PSRLW mmxreg,imm8             ; 0F 71 /2 ib          [PENT,MMX]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PSRLD mmxreg,r/m64            ; 0F D2 /r             [PENT,MMX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PSRLD mmxreg,imm8             ; 0F 72 /2 ib          [PENT,MMX]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PSRLQ mmxreg,r/m64            ; 0F D3 /r             [PENT,MMX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PSRLQ mmxreg,imm8             ; 0F 73 /2 ib          [PENT,MMX]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PSxxQ perform simple bit shifts on the 64-bit MMX registers: the destination (first) operand is shifted left or right by the number of bits given in the source (second) operand, and the vacated bits are filled in with zeros (for a logical shift) or copies of the original sign bit (for an arithmetic right shift). }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PSxxW and PSxxD perform packed bit shifts: the destination operand is treated as a vector of four words or two doublewords, and each element is shifted individually, so bits shifted out of one element do not interfere with empty bits coming into the next. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PSLLx and PSRLx perform logical shifts: the vacated bits at one end of the shifted number are filled with zeros. PSRAx performs an arithmetic right shift: the vacated bits at the top of the shifted number are filled with copies of the original top (sign) bit. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_202}{\f0\fs26\b\lang2057{\*\listtag0}A.202 PSUBxx: MMX Packed Subtraction}{\*\bkmkend section_A_202}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PSUBB mmxreg,r/m64            ; 0F F8 /r             [PENT,MMX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PSUBW mmxreg,r/m64            ; 0F F9 /r             [PENT,MMX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PSUBD mmxreg,r/m64            ; 0F FA /r             [PENT,MMX]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PSUBSB mmxreg,r/m64           ; 0F E8 /r             [PENT,MMX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PSUBSW mmxreg,r/m64           ; 0F E9 /r             [PENT,MMX]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PSUBUSB mmxreg,r/m64          ; 0F D8 /r             [PENT,MMX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PSUBUSW mmxreg,r/m64          ; 0F D9 /r             [PENT,MMX]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PSUBxx all perform packed subtraction between their two 64-bit operands, storing the result in the destination (first) operand. The PSUBxB forms treat the 64-bit operands as vectors of eight bytes, and subtract each byte individually; PSUBxW treat the operands as vectors of four words; and PSUBD treats its operands as vectors of two doublewords. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}In all cases, the elements of the operand on the right are subtracted from the corresponding elements of the operand on the left, not the other way round. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PSUBSB and PSUBSW perform signed saturation on the sum of each pair of bytes or words: if the result of a subtraction is too large or too small to fit into a signed byte or word result, it is clipped (saturated) to the largest or smallest value which will fit. PSUBUSB and PSUBUSW similarly perform unsigned saturation, clipping to 0FFh or 0FFFFh if the result is larger than that. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_203}{\f0\fs26\b\lang2057{\*\listtag0}A.203 PSUBSIW: MMX Packed Subtract with Saturation to Implied Destination}{\*\bkmkend section_A_203}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PSUBSIW mmxreg,r/m64          ; 0F 55 /r             [CYRIX,MMX]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PSUBSIW, specific to the Cyrix extensions to the MMX instruction set, performs the same function as PSUBSW, except that the result is not placed in the register specified by the first operand, but instead in the implied destination register, specified as for PADDSIW (}{\cf2\f0\fs24\ul\lang2057{\*\listtag0}section A.152)}{\f0\fs24\lang2057{\*\listtag0}. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_204}{\f0\fs26\b\lang2057{\*\listtag0}A.204 PSWAPD: Packed Swap Doubleword}{\*\bkmkend section_A_204}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PSWAPD mmxreg,r/m64           ; 0F 0F /r BB          [ATHLON]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PSWAPD copies the source operand to the destination register, swapping the upper and lower halves in the process. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_205}{\f0\fs26\b\lang2057{\*\listtag0}A.205 PUNPCKxxx: Unpack Data}{\*\bkmkend section_A_205}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PUNPCKHBW mmxreg,r/m64        ; 0F 68 /r             [PENT,MMX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PUNPCKHWD mmxreg,r/m64        ; 0F 69 /r             [PENT,MMX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PUNPCKHDQ mmxreg,r/m64        ; 0F 6A /r             [PENT,MMX]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PUNPCKLBW mmxreg,r/m64        ; 0F 60 /r             [PENT,MMX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PUNPCKLWD mmxreg,r/m64        ; 0F 61 /r             [PENT,MMX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PUNPCKLDQ mmxreg,r/m64        ; 0F 62 /r             [PENT,MMX]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PUNPCKxx all treat their operands as vectors, and produce a new vector generated by interleaving elements from the two inputs. The PUNPCKHxx instructions start by throwing away the bottom half of each input operand, and the PUNPCKLxx instructions throw away the top half. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}The remaining elements, totalling 64 bits, are then interleaved into the destination, alternating elements from the second (source) operand and the first (destination) operand: so the leftmost element in the result always comes from the second operand, and the rightmost from the destination. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PUNPCKxBW works a byte at a time, PUNPCKxWD a word at a time, and PUNPCKxDQ a doubleword at a time. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}So, for example, if the first operand held 0x7A6A5A4A3A2A1A0A and the second held 0x7B6B5B4B3B2B1B0B, then: }
\par\pard\plain\fi-360\li720\sb100\sa100\ltrpar\tx720{\f0\fs24\lang2057{\*\listtag0}PUNPCKHBW would return 0x7B7A6B6A5B5A4B4A. }
\par\pard\plain\fi-360\li720\sb100\sa100\ltrpar\tx720{\f0\fs24\lang2057{\*\listtag0}PUNPCKHWD would return 0x7B6B7A6A5B4B5A4A. }
\par\pard\plain\fi-360\li720\sb100\sa100\ltrpar\tx720{\f0\fs24\lang2057{\*\listtag0}PUNPCKHDQ would return 0x7B6B5B4B7A6A5A4A. }
\par\pard\plain\fi-360\li720\sb100\sa100\ltrpar\tx720{\f0\fs24\lang2057{\*\listtag0}PUNPCKLBW would return 0x3B3A2B2A1B1A0B0A. }
\par\pard\plain\fi-360\li720\sb100\sa100\ltrpar\tx720{\f0\fs24\lang2057{\*\listtag0}PUNPCKLWD would return 0x3B2B3A2A1B0B1A0A. }
\par\pard\plain\fi-360\li720\sb100\sa100\ltrpar\tx720{\f0\fs24\lang2057{\*\listtag0}PUNPCKLDQ would return 0x3B2B1B0B3A2A1A0A. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_206}{\f0\fs26\b\lang2057{\*\listtag0}A.206 PUSH: Push Data on Stack}{\*\bkmkend section_A_206}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PUSH reg16                    ; o16 50+r             [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PUSH reg32                    ; o32 50+r             [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PUSH r/m16                    ; o16 FF /6            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PUSH r/m32                    ; o32 FF /6            [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PUSH CS                       ; 0E                   [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PUSH DS                       ; 1E                   [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PUSH ES                       ; 06                   [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PUSH SS                       ; 16                   [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PUSH FS                       ; 0F A0                [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PUSH GS                       ; 0F A8                [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PUSH imm8                     ; 6A ib                [286] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PUSH imm16                    ; o16 68 iw            [286] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PUSH imm32                    ; o32 68 id            [386]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PUSH decrements the stack pointer (SP or ESP) by 2 or 4, and then stores the given value at [SS:SP] or [SS:ESP]. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}The address-size attribute of the instruction determines whether SP or ESP is used as the stack pointer: to deliberately override the default given by the BITS setting, you can use an a16 or a32 prefix. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}The operand-size attribute of the instruction determines whether the stack pointer is decremented by 2 or 4: this means that segment register pushes in BITS 32 mode will push 4 bytes on the stack, of which the upper two are undefined. If you need to override that, you can use an o16 or o32 prefix. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}The above opcode listings give two forms for general-purpose register push instructions: for example, PUSH BX has the two forms 53 and FF F3. NASM will always generate the shorter form when given PUSH BX. NDISASM will disassemble both. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}Unlike the undocumented and barely supported POP CS, PUSH CS is a perfectly valid and sensible instruction, supported on all processors. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}The instruction PUSH SP may be used to distinguish an 8086 from later processors: on an 8086, the value of SP stored is the value it has after the push instruction, whereas on later processors it is the value before the push instruction. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_207}{\f0\fs26\b\lang2057{\*\listtag0}A.207 PUSHAx: Push All General-Purpose Registers}{\*\bkmkend section_A_207}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PUSHA                         ; 60                   [186] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PUSHAD                        ; o32 60               [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PUSHAW                        ; o16 60               [186]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PUSHAW pushes, in succession, AX, CX, DX, BX, SP, BP, SI and DI on the stack, decrementing the stack pointer by a total of 16. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PUSHAD pushes, in succession, EAX, ECX, EDX, EBX, ESP, EBP, ESI and EDI on the stack, decrementing the stack pointer by a total of 32. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}In both cases, the value of SP or ESP pushed is its original value, as it had before the instruction was executed. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PUSHA is an alias mnemonic for either PUSHAW or PUSHAD, depending on the current BITS setting. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}Note that the registers are pushed in order of their numeric values in opcodes (see }{\cf2\f0\fs24\ul\lang2057{\*\listtag0}section A.2.1)}{\f0\fs24\lang2057{\*\listtag0}. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}See also POPA (}{\cf2\f0\fs24\ul\lang2057{\*\listtag0}section A.194)}{\f0\fs24\lang2057{\*\listtag0}. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_208}{\f0\fs26\b\lang2057{\*\listtag0}A.208 PUSHFx: Push Flags Register}{\*\bkmkend section_A_208}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PUSHF                         ; 9C                   [186] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PUSHFD                        ; o32 9C               [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PUSHFW                        ; o16 9C               [186]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PUSHFW pops a word from the stack and stores it in the bottom 16 bits of the flags register (or the whole flags register, on processors below a 386). PUSHFD pops a doubleword and stores it in the entire flags register. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PUSHF is an alias mnemonic for either PUSHFW or PUSHFD, depending on the current BITS setting. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}See also POPF (}{\cf2\f0\fs24\ul\lang2057{\*\listtag0}section A.195)}{\f0\fs24\lang2057{\*\listtag0}. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_209}{\f0\fs26\b\lang2057{\*\listtag0}A.209 PXOR: MMX Bitwise XOR}{\*\bkmkend section_A_209}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}PXOR mmxreg,r/m64             ; 0F EF /r             [PENT,MMX]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}PXOR performs a bitwise XOR operation between its two operands (i.e. each bit of the result is 1 if and only if exactly one of the corresponding bits of the two inputs was 1), and stores the result in the destination (first) operand. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_210}{\f0\fs26\b\lang2057{\*\listtag0}A.210 RCL, RCR: Bitwise Rotate through Carry Bit}{\*\bkmkend section_A_210}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RCL r/m8,1                    ; D0 /2                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RCL r/m8,CL                   ; D2 /2                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RCL r/m8,imm8                 ; C0 /2 ib             [286] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RCL r/m16,1                   ; o16 D1 /2            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RCL r/m16,CL                  ; o16 D3 /2            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RCL r/m16,imm8                ; o16 C1 /2 ib         [286] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RCL r/m32,1                   ; o32 D1 /2            [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RCL r/m32,CL                  ; o32 D3 /2            [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RCL r/m32,imm8                ; o32 C1 /2 ib         [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RCR r/m8,1                    ; D0 /3                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RCR r/m8,CL                   ; D2 /3                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RCR r/m8,imm8                 ; C0 /3 ib             [286] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RCR r/m16,1                   ; o16 D1 /3            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RCR r/m16,CL                  ; o16 D3 /3            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RCR r/m16,imm8                ; o16 C1 /3 ib         [286] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RCR r/m32,1                   ; o32 D1 /3            [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RCR r/m32,CL                  ; o32 D3 /3            [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RCR r/m32,imm8                ; o32 C1 /3 ib         [386]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}RCL and RCR perform a 9-bit, 17-bit or 33-bit bitwise rotation operation, involving the given source/destination (first) operand and the carry bit. Thus, for example, in the operation RCR AL,1, a 9-bit rotation is performed in which AL is shifted left by 1, the top bit of AL moves into the carry flag, and the original value of the carry flag is placed in the low bit of AL. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}The number of bits to rotate by is given by the second operand. Only the bottom five bits of the rotation count are considered by processors above the 8086. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}You can force the longer (286 and upwards, beginning with a C1 byte) form of RCL foo,1 by using a BYTE prefix: RCL foo,BYTE 1. Similarly with RCR. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_211}{\f0\fs26\b\lang2057{\*\listtag0}A.211 RCPPS: SSE Packed Single-FP Reciprocal Approximation}{\*\bkmkend section_A_211}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RCPPS xmmreg,r/m128           ; 0F 53 /r             [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}Four each of the four 32-bit floating-point numbers in the source operand RCPPS calculates an approximation of the reciprocal and stores it in the corresponding quarter of the destination register. The absolute value of the error for each of these approximations is at most 3/8192. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_212}{\f0\fs26\b\lang2057{\*\listtag0}A.212 RCPSS: SSE Scalar Single-FP Reciprocal Approximation}{\*\bkmkend section_A_212}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RCPSS xmmreg,xmmreg/mem32     ; F3 0F 53 /r          [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}RCPSS calculates an approximation of the reciprocal of the 32-bit floating-point in the source operand (using the lowest quarter of the source operand if it is a register) and places the result in the lowest quarter of the destination register. The absolute value of the error for this approximation is at most 3/8192. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_213}{\f0\fs26\b\lang2057{\*\listtag0}A.213 RDMSR: Read Model-Specific Registers}{\*\bkmkend section_A_213}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RDMSR                         ; 0F 32                [PENT]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}RDMSR reads the processor Model-Specific Register (MSR) whose index is stored in ECX, and stores the result in EDX:EAX. See also WRMSR (}{\cf2\f0\fs24\ul\lang2057{\*\listtag0}section A.264)}{\f0\fs24\lang2057{\*\listtag0}. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_214}{\f0\fs26\b\lang2057{\*\listtag0}A.214 RDPMC: Read Performance-Monitoring Counters}{\*\bkmkend section_A_214}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RDPMC                         ; 0F 33                [P6]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}RDPMC reads the processor performance-monitoring counter whose index is stored in ECX, and stores the result in EDX:EAX. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_215}{\f0\fs26\b\lang2057{\*\listtag0}A.215 RDSHR: Read SMM Header Pointer Register}{\*\bkmkend section_A_215}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RDSHR                         ; 0F 36                [P6,CYRIX,SMM]}
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_216}{\f0\fs26\b\lang2057{\*\listtag0}A.216 RDTSC: Read Time-Stamp Counter}{\*\bkmkend section_A_216}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RDTSC                         ; 0F 31                [PENT]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}RDTSC reads the processor's time-stamp counter into EDX:EAX. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_217}{\f0\fs26\b\lang2057{\*\listtag0}A.217 RET, RETF, RETN: Return from Procedure Call}{\*\bkmkend section_A_217}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RET                           ; C3                   [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RET imm16                     ; C2 iw                [8086]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RETF                          ; CB                   [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RETF imm16                    ; CA iw                [8086]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RETN                          ; C3                   [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RETN imm16                    ; C2 iw                [8086]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}RET, and its exact synonym RETN, pop IP or EIP from the stack and transfer control to the new address. Optionally, if a numeric second operand is provided, they increment the stack pointer by a further imm16 bytes after popping the return address. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}RETF executes a far return: after popping IP/EIP, it then pops CS, and then increments the stack pointer by the optional argument if present. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_218}{\f0\fs26\b\lang2057{\*\listtag0}A.218 ROL, ROR: Bitwise Rotate}{\*\bkmkend section_A_218}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}ROL r/m8,1                    ; D0 /0                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}ROL r/m8,CL                   ; D2 /0                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}ROL r/m8,imm8                 ; C0 /0 ib             [286] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}ROL r/m16,1                   ; o16 D1 /0            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}ROL r/m16,CL                  ; o16 D3 /0            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}ROL r/m16,imm8                ; o16 C1 /0 ib         [286] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}ROL r/m32,1                   ; o32 D1 /0            [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}ROL r/m32,CL                  ; o32 D3 /0            [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}ROL r/m32,imm8                ; o32 C1 /0 ib         [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}ROR r/m8,1                    ; D0 /1                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}ROR r/m8,CL                   ; D2 /1                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}ROR r/m8,imm8                 ; C0 /1 ib             [286] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}ROR r/m16,1                   ; o16 D1 /1            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}ROR r/m16,CL                  ; o16 D3 /1            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}ROR r/m16,imm8                ; o16 C1 /1 ib         [286] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}ROR r/m32,1                   ; o32 D1 /1            [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}ROR r/m32,CL                  ; o32 D3 /1            [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}ROR r/m32,imm8                ; o32 C1 /1 ib         [386]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}ROL and ROR perform a bitwise rotation operation on the given source/destination (first) operand. Thus, for example, in the operation ROR AL,1, an 8-bit rotation is performed in which AL is shifted left by 1 and the original top bit of AL moves round into the low bit. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}The number of bits to rotate by is given by the second operand. Only the bottom 3, 4 or 5 bits (depending on the source operand size) of the rotation count are considered by processors above the 8086. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}You can force the longer (286 and upwards, beginning with a C1 byte) form of ROL foo,1 by using a BYTE prefix: ROL foo,BYTE 1. Similarly with ROR. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_219}{\f0\fs26\b\lang2057{\*\listtag0}A.219 RSDC: Restore Segment Register and Descriptor}{\*\bkmkend section_A_219}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RSDC segreg,mem80             ; 0F 79 /r             [486,CYRIX,SMM]}
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_220}{\f0\fs26\b\lang2057{\*\listtag0}A.220 RSLDT: Restore LDTR and Descriptor}{\*\bkmkend section_A_220}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RSLDT mem80                   ; 0F 7B /0             [486,CYRIX,SMM]}
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_221}{\f0\fs26\b\lang2057{\*\listtag0}A.221 RSM: Resume from System-Management Mode}{\*\bkmkend section_A_221}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RSM                           ; 0F AA                [PENT]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}RSM returns the processor to its normal operating mode when it was in System-Management Mode. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_222}{\f0\fs26\b\lang2057{\*\listtag0}A.222 RSQRTPS: Packed Single-FP Square Root Reciprocal}{\*\bkmkend section_A_222}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RSQRTPS xmmreg,r/m128         ; 0F 52 /r             [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}For each of the four 32-bit floating-point numbers in the source operand, RSQRTPS computes an approximation of the reciprocal of the square root, and puts this in the corresponding quarter of the destination register. The maximum absolute error for this approximation is 3/8192. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_223}{\f0\fs26\b\lang2057{\*\listtag0}A.223 RSQRTSS:Scalar Single-FP Square Root Reciprocal}{\*\bkmkend section_A_223}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RSQRTSS xmmreg,r/m128         ; F3 0F 52 /r          [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}RSQRTSS computes an approximation of the reciprocal of the square root of the first 32-bit floating-point number from xmm2/m32 and puts it in the lowest quarter of the destination register. The maximum absolute error for this approximation is 3/8192. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_224}{\f0\fs26\b\lang2057{\*\listtag0}A.224 RSTS: Restore TSR and Descriptor}{\*\bkmkend section_A_224}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}RSTS mem80                    ; 0F 7D /0             [486,CYRIX,SMM]}
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_225}{\f0\fs26\b\lang2057{\*\listtag0}A.225 SAHF: Store AH to Flags}{\*\bkmkend section_A_225}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SAHF                          ; 9E                   [8086]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}SAHF sets the low byte of the flags word according to the contents of the AH register. See also LAHF (}{\cf2\f0\fs24\ul\lang2057{\*\listtag0}section A.108)}{\f0\fs24\lang2057{\*\listtag0}. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_226}{\f0\fs26\b\lang2057{\*\listtag0}A.226 SAL, SAR: Bitwise Arithmetic Shifts}{\*\bkmkend section_A_226}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SAL r/m8,1                    ; D0 /4                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SAL r/m8,CL                   ; D2 /4                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SAL r/m8,imm8                 ; C0 /4 ib             [286] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SAL r/m16,1                   ; o16 D1 /4            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SAL r/m16,CL                  ; o16 D3 /4            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SAL r/m16,imm8                ; o16 C1 /4 ib         [286] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SAL r/m32,1                   ; o32 D1 /4            [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SAL r/m32,CL                  ; o32 D3 /4            [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SAL r/m32,imm8                ; o32 C1 /4 ib         [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SAR r/m8,1                    ; D0 /0                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SAR r/m8,CL                   ; D2 /0                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SAR r/m8,imm8                 ; C0 /0 ib             [286] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SAR r/m16,1                   ; o16 D1 /0            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SAR r/m16,CL                  ; o16 D3 /0            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SAR r/m16,imm8                ; o16 C1 /0 ib         [286] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SAR r/m32,1                   ; o32 D1 /0            [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SAR r/m32,CL                  ; o32 D3 /0            [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SAR r/m32,imm8                ; o32 C1 /0 ib         [386]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}SAL and SAR perform an arithmetic shift operation on the given source/destination (first) operand. The vacated bits are filled with zero for SAL, and with copies of the original high bit of the source operand for SAR. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}SAL is a synonym for SHL (see }{\cf2\f0\fs24\ul\lang2057{\*\listtag0}section A.233)}{\f0\fs24\lang2057{\*\listtag0}. NASM will assemble either one to the same code, but NDISASM will always disassemble that code as SHL. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}The number of bits to shift by is given by the second operand. Only the bottom 3, 4 or 5 bits (depending on the source operand size) of the shift count are considered by processors above the 8086. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}You can force the longer (286 and upwards, beginning with a C1 byte) form of SAL foo,1 by using a BYTE prefix: SAL foo,BYTE 1. Similarly with SAR. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_227}{\f0\fs26\b\lang2057{\*\listtag0}A.227 SALC: Set AL from Carry Flag}{\*\bkmkend section_A_227}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SALC                          ; D6                  [8086,UNDOC]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}SALC is an early undocumented instruction similar in concept to SETcc (}{\cf2\f0\fs24\ul\lang2057{\*\listtag0}section A.230)}{\f0\fs24\lang2057{\*\listtag0}. Its function is to set AL to zero if the carry flag is clear, or to 0xFF if it is set. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_228}{\f0\fs26\b\lang2057{\*\listtag0}A.228 SBB: Subtract with Borrow}{\*\bkmkend section_A_228}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SBB r/m8,reg8                 ; 18 /r                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SBB r/m16,reg16               ; o16 19 /r            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SBB r/m32,reg32               ; o32 19 /r            [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SBB reg8,r/m8                 ; 1A /r                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SBB reg16,r/m16               ; o16 1B /r            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SBB reg32,r/m32               ; o32 1B /r            [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SBB r/m8,imm8                 ; 80 /3 ib             [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SBB r/m16,imm16               ; o16 81 /3 iw         [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SBB r/m32,imm32               ; o32 81 /3 id         [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SBB r/m16,imm8                ; o16 83 /3 ib         [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SBB r/m32,imm8                ; o32 83 /3 ib         [8086]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SBB AL,imm8                   ; 1C ib                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SBB AX,imm16                  ; o16 1D iw            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SBB EAX,imm32                 ; o32 1D id            [386]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}SBB performs integer subtraction: it subtracts its second operand, plus the value of the carry flag, from its first, and leaves the result in its destination (first) operand. The flags are set according to the result of the operation: in particular, the carry flag is affected and can be used by a subsequent SBB instruction. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}In the forms with an 8-bit immediate second operand and a longer first operand, the second operand is considered to be signed, and is sign-extended to the length of the first operand. In these cases, the BYTE qualifier is necessary to force NASM to generate this form of the instruction. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}To subtract one number from another without also subtracting the contents of the carry flag, use SUB (}{\cf2\f0\fs24\ul\lang2057{\*\listtag0}section A.245)}{\f0\fs24\lang2057{\*\listtag0}. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_229}{\f0\fs26\b\lang2057{\*\listtag0}A.229 SCASB, SCASW, SCASD: Scan String}{\*\bkmkend section_A_229}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SCASB                         ; AE                   [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SCASW                         ; o16 AF               [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SCASD                         ; o32 AF               [386]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}SCASB compares the byte in AL with the byte at [ES:DI] or [ES:EDI], and sets the flags accordingly. It then increments or decrements (depending on the direction flag: increments if the flag is clear, decrements if it is set) DI (or EDI). }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}The register used is DI if the address size is 16 bits, and EDI if it is 32 bits. If you need to use an address size not equal to the current BITS setting, you can use an explicit a16 or a32 prefix. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}Segment override prefixes have no effect for this instruction: the use of ES for the load from [DI] or [EDI] cannot be overridden. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}SCASW and SCASD work in the same way, but they compare a word to AX or a doubleword to EAX instead of a byte to AL, and increment or decrement the addressing registers by 2 or 4 instead of 1. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}The REPE and REPNE prefixes (equivalently, REPZ and REPNZ) may be used to repeat the instruction up to CX (or ECX - again, the address size chooses which) times until the first unequal or equal byte is found. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_230}{\f0\fs26\b\lang2057{\*\listtag0}A.230 SETcc: Set Register from Condition}{\*\bkmkend section_A_230}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SETcc r/m8                    ; 0F 90+cc /2          [386]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}SETcc sets the given 8-bit operand to zero if its condition is not satisfied, and to 1 if it is. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_231}{\f0\fs26\b\lang2057{\*\listtag0}A.231 SFENCE: Store Fence}{\*\bkmkend section_A_231}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SFENCE                        ; 0F AE /7             [KATMAI]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}SFENCE guarantees that all store instructions which precede it in the program order are globally visible before any store instructions which follow it. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_232}{\f0\fs26\b\lang2057{\*\listtag0}A.232 SGDT, SIDT, SLDT: Store Descriptor Table Pointers}{\*\bkmkend section_A_232}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SGDT mem                      ; 0F 01 /0             [286,PRIV] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SIDT mem                      ; 0F 01 /1             [286,PRIV] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SLDT r/m16                    ; 0F 00 /0             [286,PRIV]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}SGDT and SIDT both take a 6-byte memory area as an operand: they store the contents of the GDTR (global descriptor table register) or IDTR (interrupt descriptor table register) into that area as a 32-bit linear address and a 16-bit size limit from that area (in that order). These are the only instructions which directly use linear addresses, rather than segment/offset pairs. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}SLDT stores the segment selector corresponding to the LDT (local descriptor table) into the given operand. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}See also LGDT, LIDT and LLDT (}{\cf2\f0\fs24\ul\lang2057{\*\listtag0}section A.114)}{\f0\fs24\lang2057{\*\listtag0}. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_233}{\f0\fs26\b\lang2057{\*\listtag0}A.233 SHL, SHR: Bitwise Logical Shifts}{\*\bkmkend section_A_233}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SHL r/m8,1                    ; D0 /4                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SHL r/m8,CL                   ; D2 /4                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SHL r/m8,imm8                 ; C0 /4 ib             [286] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SHL r/m16,1                   ; o16 D1 /4            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SHL r/m16,CL                  ; o16 D3 /4            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SHL r/m16,imm8                ; o16 C1 /4 ib         [286] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SHL r/m32,1                   ; o32 D1 /4            [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SHL r/m32,CL                  ; o32 D3 /4            [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SHL r/m32,imm8                ; o32 C1 /4 ib         [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SHR r/m8,1                    ; D0 /5                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SHR r/m8,CL                   ; D2 /5                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SHR r/m8,imm8                 ; C0 /5 ib             [286] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SHR r/m16,1                   ; o16 D1 /5            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SHR r/m16,CL                  ; o16 D3 /5            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SHR r/m16,imm8                ; o16 C1 /5 ib         [286] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SHR r/m32,1                   ; o32 D1 /5            [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SHR r/m32,CL                  ; o32 D3 /5            [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SHR r/m32,imm8                ; o32 C1 /5 ib         [386]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}SHL and SHR perform a logical shift operation on the given source/destination (first) operand. The vacated bits are filled with zero. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}A synonym for SHL is SAL (see }{\cf2\f0\fs24\ul\lang2057{\*\listtag0}section A.226)}{\f0\fs24\lang2057{\*\listtag0}. NASM will assemble either one to the same code, but NDISASM will always disassemble that code as SHL. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}The number of bits to shift by is given by the second operand. Only the bottom 3, 4 or 5 bits (depending on the source operand size) of the shift count are considered by processors above the 8086. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}You can force the longer (286 and upwards, beginning with a C1 byte) form of SHL foo,1 by using a BYTE prefix: SHL foo,BYTE 1. Similarly with SHR. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_234}{\f0\fs26\b\lang2057{\*\listtag0}A.234 SHLD, SHRD: Bitwise Double-Precision Shifts}{\*\bkmkend section_A_234}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SHLD r/m16,reg16,imm8         ; o16 0F A4 /r ib      [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SHLD r/m32,reg32,imm8         ; o32 0F A4 /r ib      [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SHLD r/m16,reg16,CL           ; o16 0F A5 /r         [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SHLD r/m32,reg32,CL           ; o32 0F A5 /r         [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SHRD r/m16,reg16,imm8         ; o16 0F AC /r ib      [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SHRD r/m32,reg32,imm8         ; o32 0F AC /r ib      [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SHRD r/m16,reg16,CL           ; o16 0F AD /r         [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SHRD r/m32,reg32,CL           ; o32 0F AD /r         [386]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}SHLD performs a double-precision left shift. It notionally places its second operand to the right of its first, then shifts the entire bit string thus generated to the left by a number of bits specified in the third operand. It then updates only the first operand according to the result of this. The second operand is not modified. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}SHRD performs the corresponding right shift: it notionally places the second operand to the left of the first, shifts the whole bit string right, and updates only the first operand. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}For example, if EAX holds 0x01234567 and EBX holds 0x89ABCDEF, then the instruction SHLD EAX,EBX,4 would update EAX to hold 0x12345678. Under the same conditions, SHRD EAX,EBX,4 would update EAX to hold 0xF0123456. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}The number of bits to shift by is given by the third operand. Only the bottom 5 bits of the shift count are considered. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_235}{\f0\fs26\b\lang2057{\*\listtag0}A.235 SHUFPS: Shuffle Single-FP}{\*\bkmkend section_A_235}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SHUFPS xmmreg,r/m128,imm8     ; 0F C6 /r ib          [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}SHUFPS copies two quarters of the destination register to the lower two quarters of the destination register, and copies two quarters of the source operand to the upper two quarters of the destination register. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}Bits 0 and 1 of imm8 determine which of the four quarters of the destination register gets copied to the lowest quater of the destination register. Bits 2 and 3 of imm8 similary deterine which quarter is copied to the second quarter of the destination register. Bits 4-7 likewise select the quarters of the source operand to be copied. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_236}{\f0\fs26\b\lang2057{\*\listtag0}A.236 SMI: System Management Interrupt}{\*\bkmkend section_A_236}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SMI                           ; F1                   [386,UNDOC]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}This is an opcode apparently supported by some AMD processors (which is why it can generate the same opcode as INT1), and places the machine into system-management mode, a special debugging mode. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_237}{\f0\fs26\b\lang2057{\*\listtag0}A.237 SMINT, SMINTOLD: Software SMM Interrupt}{\*\bkmkend section_A_237}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SMINT                         ; 0F 38                [P6,CYRIX] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SMINTOLD                      ; 0F 7E                [486,CYRIX]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}SMINT causes the CPU to enter System Management Mode (SMM). SMINTOLD is NASM's mnenonic for the older encoding of SMINT, which Cyrix had to change because of a conflict with the MMX MOVD instruction. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_238}{\f0\fs26\b\lang2057{\*\listtag0}A.238 SMSW: Store Machine Status Word}{\*\bkmkend section_A_238}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SMSW r/m16                    ; 0F 01 /4             [286,PRIV]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}SMSW stores the bottom half of the CR0 control register (or the Machine Status Word, on 286 processors) into the destination operand. See also LMSW (}{\cf2\f0\fs24\ul\lang2057{\*\listtag0}section A.115)}{\f0\fs24\lang2057{\*\listtag0}. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_239}{\f0\fs26\b\lang2057{\*\listtag0}A.239 SQRTPS: Packed Single-FP Square Root}{\*\bkmkend section_A_239}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SQRTPS xmmreg,r/m128          ; 0F 51 /r             [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}SQRTPS considers the source operand as a vector of four 32-bit floating-point numbers, and for each of these it computes the square root and stores the result in the corresponding quarter of the destination register. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_240}{\f0\fs26\b\lang2057{\*\listtag0}A.240 SQRTSS: Scalar Single-FP Square Root}{\*\bkmkend section_A_240}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SQRTSS xmmreg,xmmreg/mem32    ; F3 0F 51 /r          [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}SQRTSS computes the square root of the 32-bit floating-point number in the lowest quarter of the source operand and stores the result in the lowest quarter of the destination register. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_241}{\f0\fs26\b\lang2057{\*\listtag0}A.241 STC, STD, STI: Set Flags}{\*\bkmkend section_A_241}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}STC                           ; F9                   [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}STD                           ; FD                   [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}STI                           ; FB                   [8086]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}These instructions set various flags. STC sets the carry flag; STD sets the direction flag; and STI sets the interrupt flag (thus enabling interrupts). }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}To clear the carry, direction, or interrupt flags, use the CLC, CLD and CLI instructions (}{\cf2\f0\fs24\ul\lang2057{\*\listtag0}section A.19)}{\f0\fs24\lang2057{\*\listtag0}. To invert the carry flag, use CMC (}{\cf2\f0\fs24\ul\lang2057{\*\listtag0}section A.20)}{\f0\fs24\lang2057{\*\listtag0}. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_242}{\f0\fs26\b\lang2057{\*\listtag0}A.242 STMXCSR: SSE Store MXCSR}{\*\bkmkend section_A_242}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}STMXCSR mem32                 ; 0F AE /3             [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}STMXCSR copies the the MXCSR (the SSE control/status register) into the 32-bit memory location. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_243}{\f0\fs26\b\lang2057{\*\listtag0}A.243 STOSB, STOSW, STOSD: Store Byte to String}{\*\bkmkend section_A_243}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}STOSB                         ; AA                   [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}STOSW                         ; o16 AB               [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}STOSD                         ; o32 AB               [386]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}STOSB stores the byte in AL at [ES:DI] or [ES:EDI], and sets the flags accordingly. It then increments or decrements (depending on the direction flag: increments if the flag is clear, decrements if it is set) DI (or EDI). }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}The register used is DI if the address size is 16 bits, and EDI if it is 32 bits. If you need to use an address size not equal to the current BITS setting, you can use an explicit a16 or a32 prefix. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}Segment override prefixes have no effect for this instruction: the use of ES for the store to [DI] or [EDI] cannot be overridden. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}STOSW and STOSD work in the same way, but they store the word in AX or the doubleword in EAX instead of the byte in AL, and increment or decrement the addressing registers by 2 or 4 instead of 1. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}The REP prefix may be used to repeat the instruction CX (or ECX - again, the address size chooses which) times. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_244}{\f0\fs26\b\lang2057{\*\listtag0}A.244 STR: Store Task Register}{\*\bkmkend section_A_244}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}STR r/m16                     ; 0F 00 /1             [286,PRIV]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}STR stores the segment selector corresponding to the contents of the Task Register into its operand. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_245}{\f0\fs26\b\lang2057{\*\listtag0}A.245 SUB: Subtract Integers}{\*\bkmkend section_A_245}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SUB r/m8,reg8                 ; 28 /r                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SUB r/m16,reg16               ; o16 29 /r            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SUB r/m32,reg32               ; o32 29 /r            [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SUB reg8,r/m8                 ; 2A /r                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SUB reg16,r/m16               ; o16 2B /r            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SUB reg32,r/m32               ; o32 2B /r            [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SUB r/m8,imm8                 ; 80 /5 ib             [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SUB r/m16,imm16               ; o16 81 /5 iw         [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SUB r/m32,imm32               ; o32 81 /5 id         [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SUB r/m16,imm8                ; o16 83 /5 ib         [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SUB r/m32,imm8                ; o32 83 /5 ib         [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SUB AL,imm8                   ; 2C ib                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SUB AX,imm16                  ; o16 2D iw            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SUB EAX,imm32                 ; o32 2D id            [386]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}SUB performs integer subtraction: it subtracts its second operand from its first, and leaves the result in its destination (first) operand. The flags are set according to the result of the operation: in particular, the carry flag is affected and can be used by a subsequent SBB instruction (}{\cf2\f0\fs24\ul\lang2057{\*\listtag0}section A.228)}{\f0\fs24\lang2057{\*\listtag0}. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}In the forms with an 8-bit immediate second operand and a longer first operand, the second operand is considered to be signed, and is sign-extended to the length of the first operand. In these cases, the BYTE qualifier is necessary to force NASM to generate this form of the instruction. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_246}{\f0\fs26\b\lang2057{\*\listtag0}A.246 SUBPS: Packed Single-FP Subtract}{\*\bkmkend section_A_246}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SUBPS xmmreg,r/m128           ; 0F 5C /r             [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}SUBPS considers both operands as vectors of four 32-bit floating-point numbers, and subtracts each such number in the source operand from the corresponding number in the destination register. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_247}{\f0\fs26\b\lang2057{\*\listtag0}A.247 SUBSS: Scalar Single-FP Subtract}{\*\bkmkend section_A_247}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SUBSS xmmreg,xmmreg/mem32     ; F3 0F 5C /r          [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}SUBSS subtracts the 32-bit floating-point number in the lowest 4 bytes of the source operand from the corresponding number in the destination register. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_248}{\f0\fs26\b\lang2057{\*\listtag0}A.248 SVDC: Save Segment Register and Descriptor}{\*\bkmkend section_A_248}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SVDC mem80,segreg             ; 0F 78 /r             [486,CYRIX,SMM]}
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_249}{\f0\fs26\b\lang2057{\*\listtag0}A.249 SVLDT: Save LDTR and Descriptor}{\*\bkmkend section_A_249}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SVLDT mem80                   ; 0F 7A /0             [486,CYRIX,SMM]}
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_250}{\f0\fs26\b\lang2057{\*\listtag0}A.250 SVTS: Save TSR and Descriptor}{\*\bkmkend section_A_250}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SVTS mem80                    ; 0F 7C /0             [486,CYRIX,SMM]}
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_251}{\f0\fs26\b\lang2057{\*\listtag0}A.251 SYSCALL: Call Operating System}{\*\bkmkend section_A_251}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SYSCALL                       ; 0F 05                [P6,AMD]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}Sets ECX to the value of EIP and then sets CS, EIP and SS in a manner previously determined by the operating system. This is designed to allow a fast system call facility. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_252}{\f0\fs26\b\lang2057{\*\listtag0}A.252 SYSENTER: Fast Transistion to System Call Entry Point}{\*\bkmkend section_A_252}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SYSENTER                      ; 0F 34                [P6]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}Sets CS, EIP, SS and ESP in a manner previously determined by the operating system. This is designed to allow a fast system call facility. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_253}{\f0\fs26\b\lang2057{\*\listtag0}A.253 SYSEXIT: Fast Transistion from System Call Entry Point}{\*\bkmkend section_A_253}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SYSEXIT                       ; 0F 36                [P6,PRIV]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}Sets CS and SS in a manner previously determined by the operating system, and sets EIP to the value of EDX, and ESP to the value of ECX. This is designed to allow return from a system call entered by means of SYSENTER. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_254}{\f0\fs26\b\lang2057{\*\listtag0}A.254 SYSRET: Return From Operating System}{\*\bkmkend section_A_254}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}SYSRET                        ; 0F 07                [P6,AMD,PRIV]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}Sets EIP to the value of ECX and sets CS and SS in a manner previously determined by the operating system. This is designed to allow return from a system call entered by means of SYSCALL. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_255}{\f0\fs26\b\lang2057{\*\listtag0}A.255 TEST: Test Bits (notional bitwise AND)}{\*\bkmkend section_A_255}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}TEST r/m8,reg8                ; 84 /r                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}TEST r/m16,reg16              ; o16 85 /r            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}TEST r/m32,reg32              ; o32 85 /r            [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}TEST r/m8,imm8                ; F6 /7 ib             [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}TEST r/m16,imm16              ; o16 F7 /7 iw         [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}TEST r/m32,imm32              ; o32 F7 /7 id         [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}TEST AL,imm8                  ; A8 ib                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}TEST AX,imm16                 ; o16 A9 iw            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}TEST EAX,imm32                ; o32 A9 id            [386]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}TEST performs a `mental' bitwise AND of its two operands, and affects the flags as if the operation had taken place, but does not store the result of the operation anywhere. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_256}{\f0\fs26\b\lang2057{\*\listtag0}A.256 UCOMISS: Unordered Scalar Single-FP Compare and set EFLAGS}{\*\bkmkend section_A_256}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}UCOMISS xmmreg,xmmreg/mem32   ; 0F 2E /r             [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}UCOMISS compares the 32-bit floating-point numbers in the lowest part of the two operands, and sets the CPU flags appropriately. UCOMISS differs from COMISS in that it signals an invalid numeric exeception only if an operand is an sNaN, whereas COMISS does so also if an operand is a qNaN. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_257}{\f0\fs26\b\lang2057{\*\listtag0}A.257 UD2: Undefined Instruction}{\*\bkmkend section_A_257}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}UD2                           ; 0F 0B                [286]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}UD2 raises the invalid opcode exception, and is the preferred way to do this explicitly. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_258}{\f0\fs26\b\lang2057{\*\listtag0}A.258 UMOV: User Move Data}{\*\bkmkend section_A_258}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}UMOV r/m8,reg8                ; 0F 10 /r             [386,UNDOC] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}UMOV r/m16,reg16              ; o16 0F 11 /r         [386,UNDOC] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}UMOV r/m32,reg32              ; o32 0F 11 /r         [386,UNDOC]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}UMOV reg8,r/m8                ; 0F 12 /r             [386,UNDOC] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}UMOV reg16,r/m16              ; o16 0F 13 /r         [386,UNDOC] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}UMOV reg32,r/m32              ; o32 0F 13 /r         [386,UNDOC]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}This undocumented instruction is used by in-circuit emulators to access user memory (as opposed to host memory). It is used just like an ordinary memory/register or register/register MOV instruction, but accesses user space. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_259}{\f0\fs26\b\lang2057{\*\listtag0}A.259 UNPCKHPS: Unpack High Packed Single-FP Data}{\*\bkmkend section_A_259}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}UNPCKHPS xmmreg,r/m128        ; 0F 15 /r             [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}UNPCKHPS performs an interleaved unpack of the high-order data elements of the two operands in the following manner: labelling the data elements of the destination register as X0, X1, X2 and X3 (from low to high) and those of the source operand as Y0, Y1, Y2 and Y3 the UNPCKHPS instruction simultaneously performs the four assignments X0 := X2, X1 := Y2, X2 := X3 and X3 := Y3. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_260}{\f0\fs26\b\lang2057{\*\listtag0}A.260 UNPCKLPS: Unpack Low Packed Single-FP Data}{\*\bkmkend section_A_260}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}UNPCKLPS xmmreg,r/m128        ; 0F 14 /r             [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}UNPCKLPS performs an interleaved unpack of the low-order data elements of the two operands in the following manner: labelling the data elements of the destination register as X0, X1, X2 and X3 (from low to high) and those of the source operand as Y0, Y1, Y2 and Y3 the UNPCKLPS instruction simultaneously performs the four assignments X0 := X0, X1 := Y0, X2 := X1 and X3 := Y1. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_261}{\f0\fs26\b\lang2057{\*\listtag0}A.261 VERR, VERW: Verify Segment Readability/Writability}{\*\bkmkend section_A_261}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}VERR r/m16                    ; 0F 00 /4             [286,PRIV]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}VERW r/m16                    ; 0F 00 /5             [286,PRIV]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}VERR sets the zero flag if the segment specified by the selector in its operand can be read from at the current privilege level. VERW sets the zero flag if the segment can be written. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_262}{\f0\fs26\b\lang2057{\*\listtag0}A.262 WAIT: Wait for Floating-Point Processor}{\*\bkmkend section_A_262}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}WAIT                          ; 9B                   [8086]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}WAIT, on 8086 systems with a separate 8087 FPU, waits for the FPU to have finished any operation it is engaged in before continuing main processor operations, so that (for example) an FPU store to main memory can be guaranteed to have completed before the CPU tries to read the result back out. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}On higher processors, WAIT is unnecessary for this purpose, and it has the alternative purpose of ensuring that any pending unmasked FPU exceptions have happened before execution continues. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_263}{\f0\fs26\b\lang2057{\*\listtag0}A.263 WBINVD: Write Back and Invalidate Cache}{\*\bkmkend section_A_263}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}WBINVD                        ; 0F 09                [486]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}WBINVD invalidates and empties the processor's internal caches, and causes the processor to instruct external caches to do the same. It writes the contents of the caches back to memory first, so no data is lost. To flush the caches quickly without bothering to write the data back first, use INVD (}{\cf2\f0\fs24\ul\lang2057{\*\listtag0}section A.102)}{\f0\fs24\lang2057{\*\listtag0}. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_264}{\f0\fs26\b\lang2057{\*\listtag0}A.264 WRMSR: Write Model-Specific Registers}{\*\bkmkend section_A_264}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}WRMSR                         ; 0F 30                [PENT]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}WRMSR writes the value in EDX:EAX to the processor Model-Specific Register (MSR) whose index is stored in ECX. See also RDMSR (}{\cf2\f0\fs24\ul\lang2057{\*\listtag0}section A.213)}{\f0\fs24\lang2057{\*\listtag0}. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_265}{\f0\fs26\b\lang2057{\*\listtag0}A.265 WRSHR: Write SMM Header Pointer Register}{\*\bkmkend section_A_265}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}WRSHR                         ; 0F 37                [P6,CYRIX,SMM]}
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_266}{\f0\fs26\b\lang2057{\*\listtag0}A.266 XADD: Exchange and Add}{\*\bkmkend section_A_266}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}XADD r/m8,reg8                ; 0F C0 /r             [486] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}XADD r/m16,reg16              ; o16 0F C1 /r         [486] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}XADD r/m32,reg32              ; o32 0F C1 /r         [486]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}XADD exchanges the values in its two operands, and then adds them together and writes the result into the destination (first) operand. This instruction can be used with a LOCK prefix for multi-processor synchronisation purposes. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_267}{\f0\fs26\b\lang2057{\*\listtag0}A.267 XBTS: Extract Bit String}{\*\bkmkend section_A_267}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}XBTS reg16,r/m16              ; o16 0F A6 /r         [386,UNDOC] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}XBTS reg32,r/m32              ; o32 0F A6 /r         [386,UNDOC]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}No clear documentation seems to be available for this instruction: the best I've been able to find reads `Takes a string of bits from the first operand and puts them in the second operand'. It is present only in early 386 processors, and conflicts with the opcodes for CMPXCHG486. NASM supports it only for completeness. Its counterpart is IBTS (see }{\cf2\f0\fs24\ul\lang2057{\*\listtag0}section A.93)}{\f0\fs24\lang2057{\*\listtag0}. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_268}{\f0\fs26\b\lang2057{\*\listtag0}A.268 XCHG: Exchange}{\*\bkmkend section_A_268}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}XCHG reg8,r/m8                ; 86 /r                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}XCHG reg16,r/m8               ; o16 87 /r            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}XCHG reg32,r/m32              ; o32 87 /r            [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}XCHG r/m8,reg8                ; 86 /r                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}XCHG r/m16,reg16              ; o16 87 /r            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}XCHG r/m32,reg32              ; o32 87 /r            [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}XCHG AX,reg16                 ; o16 90+r             [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}XCHG EAX,reg32                ; o32 90+r             [386] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}XCHG reg16,AX                 ; o16 90+r             [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}XCHG reg32,EAX                ; o32 90+r             [386]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}XCHG exchanges the values in its two operands. It can be used with a LOCK prefix for purposes of multi-processor synchronisation. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}XCHG AX,AX or XCHG EAX,EAX (depending on the BITS setting) generates the opcode 90h, and so is a synonym for NOP (}{\cf2\f0\fs24\ul\lang2057{\*\listtag0}section A.145)}{\f0\fs24\lang2057{\*\listtag0}. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_269}{\f0\fs26\b\lang2057{\*\listtag0}A.269 XLATB: Translate Byte in Lookup Table}{\*\bkmkend section_A_269}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}XLATB                         ; D7                   [8086]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}XLATB adds the value in AL, treated as an unsigned byte, to BX or EBX, and loads the byte from the resulting address (in the segment specified by DS) back into AL. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}The base register used is BX if the address size is 16 bits, and EBX if it is 32 bits. If you need to use an address size not equal to the current BITS setting, you can use an explicit a16 or a32 prefix. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}The segment register used to load from [BX+AL] or [EBX+AL] can be overridden by using a segment register name as a prefix (for example, es xlatb). }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_270}{\f0\fs26\b\lang2057{\*\listtag0}A.270 XOR: Bitwise Exclusive OR}{\*\bkmkend section_A_270}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}XOR r/m8,reg8                 ; 30 /r                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}XOR r/m16,reg16               ; o16 31 /r            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}XOR r/m32,reg32               ; o32 31 /r            [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}XOR reg8,r/m8                 ; 32 /r                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}XOR reg16,r/m16               ; o16 33 /r            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}XOR reg32,r/m32               ; o32 33 /r            [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}XOR r/m8,imm8                 ; 80 /6 ib             [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}XOR r/m16,imm16               ; o16 81 /6 iw         [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}XOR r/m32,imm32               ; o32 81 /6 id         [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}XOR r/m16,imm8                ; o16 83 /6 ib         [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}XOR r/m32,imm8                ; o32 83 /6 ib         [386]}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}XOR AL,imm8                   ; 34 ib                [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}XOR AX,imm16                  ; o16 35 iw            [8086] }
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}XOR EAX,imm32                 ; o32 35 id            [386]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}XOR performs a bitwise XOR operation between its two operands (i.e. each bit of the result is 1 if and only if exactly one of the corresponding bits of the two inputs was 1), and stores the result in the destination (first) operand. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}In the forms with an 8-bit immediate second operand and a longer first operand, the second operand is considered to be signed, and is sign-extended to the length of the first operand. In these cases, the BYTE qualifier is necessary to force NASM to generate this form of the instruction. }
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}The MMX instruction PXOR (see }{\cf2\f0\fs24\ul\lang2057{\*\listtag0}section A.209)}{\f0\fs24\lang2057{\*\listtag0} performs the same operation on the 64-bit MMX registers. }
\par\pard\plain\sb100\ltrpar{\*\bkmkstart section_A_271}{\f0\fs26\b\lang2057{\*\listtag0}A.271 XORPS: SSE Bitwise Logical OR}{\*\bkmkend section_A_271}
\par\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f6\fs24\lang1033{\*\listtag0}
\par}\pard\plain\ltrpar\tx915\tx1831\tx2747\tx3663\tx4580\tx5496\tx6412\tx7328\tx8243\tx9159\tx10075\tx10991\tx11907\tx12824\tx13740\tx14656{\f0\fs20\lang2057{\*\listtag0}XORPS xmmreg,r/m128           ; 0F 57 /r             [KATMAI,SSE]}
\par\pard\plain\sb100\ltrpar{\f0\fs24\lang2057{\*\listtag0}XORPS performs a bitwise OR operation on the source operand and the destination register, and stores the result in the destination register. }
\par\pard\plain\qc\sb100\ltrpar{\cf2\f0\fs24\ul\lang2057{\*\listtag0}Previous Chapter }{\f0\fs24\lang2057{\*\listtag0}| }{\cf2\f0\fs24\ul\lang2057{\*\listtag0}Contents }{\f0\fs24\lang2057{\*\listtag0}| }{\cf2\f0\fs24\ul\lang2057{\*\listtag0}Index }}