// new version of dyad written april 2001
// this is rewritten from scratch to distinguish 
// clearly between pascal types and machine types
Node dyad(Node l,Node r, String op)throws SyntaxError
{
	// first obtain dereferenced versions of the arguments
	Node left = forcederef(l);
	Node right= forecderef(r);
	// get the types
	Type lt= getType(left);
	Type rt= getType(right);
	// Now categorise the types into sets, strings, numbers and chars
	if(lt instanceof SetType)return setdyad(l,r,op);
	else 
	if(lt instanceof StringType)return stringdyad(l,r,op);
	else
	if(lt == CHAR)return chardyad(left,right,op);
	else
	if(lt instanceof IntegralType)return integraldyad(left,right,op);
	else
	if(isreal(lt))return realdyad(left,optionalfloat(right,REAL),op);
	else // try vector dyad
	return vectordyad(l,r,op);
}
// handles dyadic operators between ordinals
Node integraldyad(Node left,Node right,String op) throws SyntaxError
{
	Type lt=getType(left);
	Type rt=getType(right);
	if (!(lt.equals(rt)){
		Type precise = maxprecision(lt,rt);
		if(isreal(precise)) return dyad(optionalfloat(left,precise),right,op);
		return dyad(new TypeTag(left,precise),new TypeTag(right,precise));
	}
	if( iscomparison(op)||isboolean(op)||op.equals("MOD"))
	    return new Dyad(left,right, new TOP(new Op(op,lt.type,rt.type,rt.type),rt));
	if(op.equals("+")) return new Dyad(left,right,new TOP(OP.sum(lt.type,rt.type,rt.type),rt));
	if(op.equals("-")) return new Dyad(left,right,new TOP(OP.dif(lt.type,rt.type,rt.type),rt));
	if(op.equals("*")) return new Dyad(left,right,new TOP(OP.prod(lt.type,rt.type,rt.type),rt));
	if(op.equals("div")) return new Dyad(left,right,new TOP(OP.div(lt.type,rt.type,rt.type),rt));
	if(op.equals("/"))return dyad(optionalfloat(left,REAL),optionalfloat(right,REAL),op);
	error("operator "+op+" is not defined on ordinal types");
}
// handles dyadic operators between
Node realdyad(Node left,Node right,String op) throws SyntaxError
{
	Type lt=getType(left);
	Type rt=getType(right);
	if (!(lt.equals(rt)){
		Type precise = maxprecision(lt,rt);
		return realdyad(new TypeTag(left,precise),new TypeTag(right,precise));
	}
 
	if( iscomparison(op)) return new Dyad(left,right, new TOP(new Op(op,lt.type,rt.type,rt.type),rt));
	if(op.equals("+")) return new Dyad(left,right,new TOP(OP.sum(lt.type,rt.type,rt.type),rt));
	if(op.equals("-")) return new Dyad(left,right,new TOP(OP.dif(lt.type,rt.type,rt.type),rt));
	if(op.equals("*")) return new Dyad(left,right,new TOP(OP.prod(lt.type,rt.type,rt.type),rt));
	if(op.equals("/")) return new Dyad(left,right,new TOP(OP.div(lt.type,rt.type,rt.type),rt));
	error("operator "+op+" is not defined on real types");
}
