#LyX 1.2 created this file. For more info see http://www.lyx.org/
\lyxformat 2.15
\textclass article
\paperfontsize 10
\papersize a4paper
\options  
\begin_preamble
\usepackage{graphicx, epsfig}
\reversemarginpar
\title{dirlist.pas}
\end_preamble

\layout Standard


\begin_inset LatexCommand \tableofcontents

\end_inset 


\layout Section

dirlist
\layout Standard


\latex latex 

\backslash begin{tabbing}
\newline 
***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash ={
\backslash kill
\newline 
}
\backslash parbox{14cm}{
\backslash textsf{
\backslash textbf{program}  
\backslash textit{dirlist} ;}}
\backslash 
\backslash 
\newline 

\backslash end{tabbing}
\latex default 
 This program takes a single parameter: a dirctory name.
 It traverses the directory tree listing all of the file-names found. 
\latex latex 

\backslash begin{tabbing}
\newline 
***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash ={
\backslash kill
\newline 
}
\backslash 
\backslash 
\newline 

\backslash +
\backslash parbox{14cm}{
\backslash textsf{
\backslash textbf{const} }}
\backslash 
\backslash 
\newline 

\backslash parbox{14cm}{
\backslash textsf{
\backslash textit{above} =
\backslash textrm{
\backslash textup { `..' } };}}
\backslash 
\backslash 
\newline 

\backslash parbox{14cm}{
\backslash textsf{
\backslash textit{this} =
\backslash textrm{
\backslash textup { `.' } };}}
\backslash 
\backslash 
\newline 

\backslash end{tabbing}
\latex default 
 The constants are used to refer to the Unix and Windows representations
 of the current and superior directory. 
\latex latex 

\backslash begin{tabbing}
\newline 
***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash ={
\backslash kill
\newline 
}
\backslash + 
\backslash 
\backslash 
\newline 

\backslash <
\backslash parbox{14cm}{
\backslash textsf{
\backslash textbf{var} }}
\backslash 
\backslash 
\newline 

\backslash parbox{14cm}{
\backslash textsf{Let 
\backslash textit{s} 
\backslash (
\backslash in
\backslash ) string;}}
\backslash 
\backslash 
\newline 

\backslash <
\backslash textsf{
\backslash textbf{procedure}  
\backslash textit{intodir} 
\backslash textit{(} 
\backslash textit{s} :
\backslash textbf{string} ; 
\backslash textit{level} :
\backslash textit{integer} );} (see Section 
\backslash ref{sec:dirlistintodir} )
\backslash 
\backslash 
\newline 

\backslash -
\backslash <
\backslash +
\backslash parbox{14cm}{
\backslash textsf{
\backslash textbf{begin} }}
\backslash 
\backslash 
\newline 

\backslash parbox{14cm}{
\backslash textsf{
\backslash textit{s}
\backslash (
\backslash leftarrow
\backslash ) 
\backslash textit{paramstr} (1)}; }
\backslash 
\backslash 
\newline 

\backslash parbox{14cm}{
\backslash textsf{
\backslash textit{intodir} (
\backslash textit{s}, 0)}; }
\backslash 
\backslash 
\newline 

\backslash <
\backslash -
\backslash parbox{14cm}{
\backslash textsf{
\backslash textbf{end} .}}
\backslash 
\backslash 
\newline 

\backslash end{tabbing}
\latex default 

\layout Section

intodir
\layout Standard


\begin_inset LatexCommand \label{sec:dirlistintodir}

\end_inset 


\layout Standard


\latex latex 

\backslash begin{tabbing}
\newline 
***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash ={
\backslash kill
\newline 
}
\backslash parbox{14cm}{
\backslash textsf{
\backslash textbf{procedure}  
\backslash textit{intodir} 
\backslash textit{(} 
\backslash textit{s} :
\backslash textbf{string} ; 
\backslash textit{level} :
\backslash textit{integer} );}}
\backslash 
\backslash 
\newline 

\backslash end{tabbing}
\latex default 
 This procedure recursively traverses the directory whose name is passed
 as a parameter.
 All files encountered are listed to the standard output stream.
 A major complication is the need to convert between unicode strings used
 internally and the ascii filenames used by Linux. 
\latex latex 

\backslash begin{tabbing}
\newline 
***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash ={
\backslash kill
\newline 
}
\backslash 
\backslash 
\newline 

\backslash 
\backslash 
\newline 

\backslash +
\backslash parbox{14cm}{
\backslash textsf{
\backslash textbf{var} }}
\backslash 
\backslash 
\newline 

\backslash parbox{14cm}{buf: 
\backslash textbf{ array } 
\backslash textsf{[0..100] } 
\backslash textbf{ of } 
\backslash textsf{ 
\backslash textit{ascii} ;}}
\backslash 
\backslash 
\newline 

\backslash parbox{14cm}{
\backslash textsf{Let 
\backslash textit{n} 
\backslash (
\backslash in
\backslash ) pchar;}}
\backslash 
\backslash 
\newline 

\backslash parbox{14cm}{
\backslash textsf{Let 
\backslash textit{un} 
\backslash (
\backslash in
\backslash ) string;}}
\backslash 
\backslash 
\newline 

\backslash parbox{14cm}{
\backslash textsf{Let 
\backslash textit{thedir} 
\backslash (
\backslash in
\backslash ) pdir;}}
\backslash 
\backslash 
\newline 

\backslash parbox{14cm}{
\backslash textsf{Let 
\backslash textit{theentry} 
\backslash (
\backslash in
\backslash ) pdirentry;}}
\backslash 
\backslash 
\newline 

\backslash end{tabbing}
\latex default 
 Type ascii is an internal representation of ascii characters, stored one
 per byte.
 It is declared in the system unit.
 The type pchar is a pointer to an ascii character.
 This is the standard way in which strings are passed in C and it is needed
 to converse with the Linux or Windows file system.
 Types pdir and pdirentry are types declared in the system unit for traversing
 operating system directories.
 The function also makes use of a group of system procedures or functions.
 
\latex latex 

\backslash begin{tabbing}
\newline 
***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash ={
\backslash kill
\newline 
}
\backslash + 
\backslash 
\backslash 
\newline 

\backslash 
\backslash 
\newline 

\backslash end{tabbing}
\latex default 
 The procedure unicodestring2ascii takes a Vector Pascal string and copies
 it into an array of ascii characters, appending the requisite null character
 expected by C. 
\latex latex 

\backslash begin{tabbing}
\newline 
***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash ={
\backslash kill
\newline 
}
\backslash + 
\backslash 
\backslash 
\newline 

\backslash 
\backslash 
\newline 

\backslash end{tabbing}
\latex default 
 The function opendir must be passed the address of an ascii string and
 returns a directory handle. 
\latex latex 

\backslash begin{tabbing}
\newline 
***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash ={
\backslash kill
\newline 
}
\backslash + 
\backslash 
\backslash 
\newline 

\backslash 
\backslash 
\newline 

\backslash end{tabbing}
\latex default 
 The chdir procedure changes the current directory to the one specified
 by the ascii string provided in its parameter. 
\latex latex 

\backslash begin{tabbing}
\newline 
***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash ={
\backslash kill
\newline 
}
\backslash + 
\backslash 
\backslash 
\newline 

\backslash 
\backslash 
\newline 

\backslash end{tabbing}
\latex default 
 The function readdir reads the next directory entry from the directory
 directory specified by the handle passed to it. 
\latex latex 

\backslash begin{tabbing}
\newline 
***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash ={
\backslash kill
\newline 
}
\backslash + 
\backslash 
\backslash 
\newline 

\backslash 
\backslash 
\newline 

\backslash end{tabbing}
\latex default 
 The function entryname returns a pointer to an ascii string which has to
 be converted to a pascal string using the function strpas. 
\latex latex 

\backslash begin{tabbing}
\newline 
***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash =***
\backslash ={
\backslash kill
\newline 
}
\backslash + 
\backslash 
\backslash 
\newline 

\backslash 
\backslash 
\newline 

\backslash -
\backslash <
\backslash +
\backslash parbox{14cm}{
\backslash textsf{
\backslash textbf{begin} }}
\backslash 
\backslash 
\newline 

\backslash parbox{14cm}{
\backslash textsf{
\backslash textit{unicodestring2ascii} (
\backslash textit{s}, 
\backslash textit{buf}
\backslash (_{0}
\backslash ))}; }
\backslash 
\backslash 
\newline 

\backslash parbox{14cm}{
\backslash textsf{
\backslash textit{thedir} :=
\backslash textit{opendir} 
\backslash textit{(} @
\backslash textit{buf} );}}
\backslash 
\backslash 
\newline 

\backslash +
\backslash parbox{14cm}{
\backslash textsf {
\backslash textbf {if } 
\backslash textsf{
\backslash textit{thedir} 
\backslash (
\backslash neq
\backslash ) 
\backslash textit{nil}} 
\backslash textbf{ then } }}
\backslash 
\backslash 
\newline 

\backslash <
\backslash parbox{14cm}{
\backslash textsf{
\backslash textbf{begin} }}
\backslash 
\backslash 
\newline 

\backslash parbox{14cm}{
\backslash textsf{
\backslash textit{chdir} 
\backslash textit{(} @
\backslash textit{buf} );}}
\backslash 
\backslash 
\newline 

\backslash parbox{14cm}{
\backslash textsf{
\backslash textit{theentry}
\backslash (
\backslash leftarrow
\backslash ) 
\backslash textit{readdir} (
\backslash textit{thedir})}; }
\backslash 
\backslash 
\newline 

\backslash +
\backslash parbox{14cm}{
\backslash textsf {
\backslash textbf {while } 
\backslash textsf{(
\backslash textit{theentry} 
\backslash (
\backslash neq
\backslash ) 
\backslash textit{nil})} 
\backslash textbf{ do } }}
\backslash 
\backslash 
\newline 

\backslash <
\backslash parbox{14cm}{
\backslash textsf{
\backslash textbf{begin} }}
\backslash 
\backslash 
\newline 

\backslash parbox{14cm}{
\backslash textsf{
\backslash textit{n}
\backslash (
\backslash leftarrow
\backslash ) 
\backslash textit{entryname} (
\backslash textit{theentry})}; }
\backslash 
\backslash 
\newline 

\backslash parbox{14cm}{
\backslash textsf{
\backslash textit{un}
\backslash (
\backslash leftarrow
\backslash ) 
\backslash textit{strpas} (
\backslash textit{n})}; }
\backslash 
\backslash 
\newline 

\backslash parbox{14cm}{
\backslash textsf{
\backslash textbf{writeln}(
\backslash textit{un})}; }
\backslash 
\backslash 
\newline 

\backslash +
\backslash parbox{14cm}{
\backslash textsf {
\backslash textbf {if } 
\backslash textsf{
\backslash textit{isdir} (
\backslash textit{n})} 
\backslash textbf{ then } }}
\backslash 
\backslash 
\newline 

\backslash +
\backslash parbox{14cm}{
\backslash textsf {
\backslash textbf {if } 
\backslash textsf{
\backslash textit{un} 
\backslash (
\backslash neq
\backslash ) 
\backslash textit{above}} 
\backslash textbf{ then } }}
\backslash 
\backslash 
\newline 

\backslash +
\backslash parbox{14cm}{
\backslash textsf {
\backslash textbf {if } 
\backslash textsf{
\backslash textit{un} 
\backslash (
\backslash neq
\backslash ) 
\backslash textit{this}} 
\backslash textbf{ then } }}
\backslash 
\backslash 
\newline 

\backslash -
\backslash -
\backslash -
\backslash parbox{14cm}{
\backslash textsf{
\backslash textit{intodir} (
\backslash textit{un}, 
\backslash textit{level} + 1)}; }
\backslash 
\backslash 
\newline 

\backslash parbox{14cm}{
\backslash textsf{
\backslash textit{theentry}
\backslash (
\backslash leftarrow
\backslash ) 
\backslash textit{readdir} (
\backslash textit{thedir})}; }
\backslash 
\backslash 
\newline 

\backslash <
\backslash -
\backslash parbox{14cm}{
\backslash textsf{
\backslash textbf{end} ;}}
\backslash 
\backslash 
\newline 

\backslash parbox{14cm}{
\backslash textsf{
\backslash textit{unicodestring2ascii} (
\backslash textit{above}, 
\backslash textit{buf}
\backslash (_{0}
\backslash ))}; }
\backslash 
\backslash 
\newline 

\backslash parbox{14cm}{
\backslash textsf{
\backslash textit{chdir} 
\backslash textit{(} @
\backslash textit{buf} );}}
\backslash 
\backslash 
\newline 

\backslash <
\backslash -
\backslash parbox{14cm}{
\backslash textsf{
\backslash textbf{end} ;}}
\backslash 
\backslash 
\newline 

\backslash <
\backslash -
\backslash parbox{14cm}{
\backslash textsf{
\backslash textbf{end} ;}}
\backslash 
\backslash 
\newline 

\backslash end{tabbing}
\latex default 

\the_end
