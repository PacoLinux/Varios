\documentclass[10pt, a4paper]{article}
\usepackage{graphicx, epsfig}
\reversemarginpar
\title{dirlist.pas}
\begin{document}
\maketitle

\tableofcontents
\section{dirlist}
\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\parbox{14cm}{\textsf{\textbf{program}  \textit{dirlist} ;}}\\
\end{tabbing}
This program takes a single parameter: a dirctory name. It
traverses the directory tree listing all of the file-names found.
\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\\
\+\parbox{14cm}{\textsf{\textbf{const} }}\\
\parbox{14cm}{\textsf{\textit{above} =\textrm{\textup { `..' } };}}\\
\parbox{14cm}{\textsf{\textit{this} =\textrm{\textup { `.' } };}}\\
\end{tabbing}
The constants are used to refer to the Unix and Windows representations
of the current and superior directory.
\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\+ \\
\<\parbox{14cm}{\textsf{\textbf{var} }}\\
\parbox{14cm}{\textsf{Let \textit{s} $\in$ string;}}\\
\<\textsf{\textbf{procedure}  \textit{intodir} \textit{(} \textit{s} :\textbf{string} ; \textit{level} :\textit{integer} );} (see Section \ref{sec:dirlistintodir} )\\
\-\<\+\parbox{14cm}{\textsf{\textbf{begin} }}\\
\parbox{14cm}{\textsf{\textit{s}$\leftarrow$ \textit{paramstr} (1)}; }\\
\parbox{14cm}{\textsf{\textit{intodir} (\textit{s}, 0)}; }\\
\<\-\parbox{14cm}{\textsf{\textbf{end} .}}\\
\end{tabbing}
\section{intodir}\label{sec:dirlistintodir}

\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\parbox{14cm}{\textsf{\textbf{procedure}  \textit{intodir} \textit{(} \textit{s} :\textbf{string} ; \textit{level} :\textit{integer} );}}\\
\end{tabbing}
This procedure recursively traverses the directory whose
name is passed as a parameter. All files encountered are listed
to the standard output stream.
A major complication is the need to convert between unicode strings
used internally and the ascii filenames used by Linux.
\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\\
\\
\+\parbox{14cm}{\textsf{\textbf{var} }}\\
\parbox{14cm}{buf: \textbf{ array } \textsf{[0..100] } \textbf{ of } \textsf{ \textit{ascii} ;}}\\
\parbox{14cm}{\textsf{Let \textit{n} $\in$ pchar;}}\\
\parbox{14cm}{\textsf{Let \textit{un} $\in$ string;}}\\
\parbox{14cm}{\textsf{Let \textit{thedir} $\in$ pdir;}}\\
\parbox{14cm}{\textsf{Let \textit{theentry} $\in$ pdirentry;}}\\
\end{tabbing}
Type ascii is an internal representation of ascii characters, stored one
per byte. It is declared in the system unit. The type pchar is a pointer
to an ascii character. This is the standard way in which strings are
passed in C and it is needed to converse with the Linux or Windows
file system. Types pdir and pdirentry are types declared in the
system unit for traversing operating system directories.
The function also makes use of a group of system procedures or functions.
\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\+ \\
\\
\end{tabbing}
The procedure unicodestring2ascii takes a Vector Pascal string and
copies it into an array of ascii characters, appending the requisite
null character expected by C.
\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\+ \\
\\
\end{tabbing}
The function opendir must be passed the address of an ascii string
and returns a directory handle.
\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\+ \\
\\
\end{tabbing}
The chdir procedure changes the current directory to the one specified
by the ascii string provided in its parameter.
\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\+ \\
\\
\end{tabbing}
The function readdir reads the next directory entry from the directory
directory specified by the handle passed to it.
\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\+ \\
\\
\end{tabbing}
The function entryname returns a pointer to an ascii string which
has to be converted to a pascal string using the function strpas.
\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\+ \\
\\
\-\<\+\parbox{14cm}{\textsf{\textbf{begin} }}\\
\parbox{14cm}{\textsf{\textit{unicodestring2ascii} (\textit{s}, \textit{buf}$_{0}$)}; }\\
\parbox{14cm}{\textsf{\textit{thedir} :=\textit{opendir} \textit{(} @\textit{buf} );}}\\
\+\parbox{14cm}{\textsf {\textbf {if } \textsf{\textit{thedir} $\neq$ \textit{nil}} \textbf{ then } }}\\
\<\parbox{14cm}{\textsf{\textbf{begin} }}\\
\parbox{14cm}{\textsf{\textit{chdir} \textit{(} @\textit{buf} );}}\\
\parbox{14cm}{\textsf{\textit{theentry}$\leftarrow$ \textit{readdir} (\textit{thedir})}; }\\
\+\parbox{14cm}{\textsf {\textbf {while } \textsf{(\textit{theentry} $\neq$ \textit{nil})} \textbf{ do } }}\\
\<\parbox{14cm}{\textsf{\textbf{begin} }}\\
\parbox{14cm}{\textsf{\textit{n}$\leftarrow$ \textit{entryname} (\textit{theentry})}; }\\
\parbox{14cm}{\textsf{\textit{un}$\leftarrow$ \textit{strpas} (\textit{n})}; }\\
\parbox{14cm}{\textsf{\textbf{writeln}(\textit{un})}; }\\
\+\parbox{14cm}{\textsf {\textbf {if } \textsf{\textit{isdir} (\textit{n})} \textbf{ then } }}\\
\+\parbox{14cm}{\textsf {\textbf {if } \textsf{\textit{un} $\neq$ \textit{above}} \textbf{ then } }}\\
\+\parbox{14cm}{\textsf {\textbf {if } \textsf{\textit{un} $\neq$ \textit{this}} \textbf{ then } }}\\
\-\-\-\parbox{14cm}{\textsf{\textit{intodir} (\textit{un}, \textit{level} + 1)}; }\\
\parbox{14cm}{\textsf{\textit{theentry}$\leftarrow$ \textit{readdir} (\textit{thedir})}; }\\
\<\-\parbox{14cm}{\textsf{\textbf{end} ;}}\\
\parbox{14cm}{\textsf{\textit{unicodestring2ascii} (\textit{above}, \textit{buf}$_{0}$)}; }\\
\parbox{14cm}{\textsf{\textit{chdir} \textit{(} @\textit{buf} );}}\\
\<\-\parbox{14cm}{\textsf{\textbf{end} ;}}\\
\<\-\parbox{14cm}{\textsf{\textbf{end} ;}}\\
\end{tabbing}
\end{document}
