\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\parbox{14cm}{\textsf{\textbf{unit}   \textit{bmp} ;}}\\
\\
\end{tabbing}
This UNIT  provides a library to access and manipulate
bitmap images provided in Microsoft .bmp file format.
\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\\
\\
\+\parbox{14cm}{\textsf{\textbf{interface} }}\\
\end{tabbing}
The module exports an image type as a 3 dimensional
array of pixels in which the first dimension identifies
the colour plane, the second dimension indicates the row
and the third dimension indicates the column of the pixel
\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\+ \\
\+\parbox{14cm}{\textsf{\textbf{type} }}\\
\\
\parbox{14cm}{\textsf{\textit{image} \textit{(} \textit{maxplane} ,\textit{maxrow} ,\textit{maxcol} :\textit{integer} )=}}\\
\parbox{14cm}{\textsf {\textbf {array } \textsf{[0..\textit{maxplane} ,0..\textit{maxrow} ,0..\textit{maxcol} ]} \textbf{ of } \textsf{ \textit{real} ;}}}\\
\parbox{14cm}{\textsf{\textit{plane} \textit{(} \textit{maxrow} ,\textit{maxcol} :\textit{integer} )=}}\\
\parbox{14cm}{\textsf {\textbf {array } \textsf{[0..\textit{maxrow} ,0..\textit{maxcol} ]} \textbf{ of } \textsf{ \textit{real} ;}}}\\
\parbox{14cm}{\textsf{\textit{pimage} =\textit{\^{}} \textit{image} ;}}\\
\parbox{14cm}{\textsf{\textit{filename}  = \textbf{string} [79];}}\\
\\
\<\textsf{\textbf{procedure}   \textit{storebmpfile} \textit{(} \textit{s} :\textbf{string} ;\textbf{var}  \textit{im} :\textit{image} ) ;} (see Section \ref{sec:bmpstorebmpfile} )\\
\end{tabbing}
This PROCEDURE  will store an image \textsf{im} as
a Microsoft .bmp file with name \textsf{s}
\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\+ \+ \\
\\
\<\textsf{\textbf{function}  \textit{loadbmpfile} \textit{(} \textit{s} :\textit{filename} ;\textbf{var}  \textit{im} :\textit{pimage} ):\textit{boolean}  ;} (see Section \ref{sec:bmploadbmpfile} )\\
\end{tabbing}
This FUNCTION returns true if it has sucessfully
loaded the bmp file \textsf{s}. The image pointer \textsf{im}
is initialised to point to an image on the heap. The program should
explicity discard the image after use by calling \textsf{dispose}.
\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\+ \+ \\
\\
\<\textsf{\textbf{procedure}   \textit{adjustcontrast} \textit{(} \textit{f} :\textit{real} ; \textbf{var}  \textit{src} ,\textit{dest} :\textit{image} );} (see Section \ref{sec:bmpadjustcontrast} )\\
\end{tabbing}
This PROCEDURE  takes a real number
as a parameter and adjusts the contrast of an image to
by that factor. If \textsf{f}=2 then contrast is doubled,
if \textsf{f}=0.5 contrast is halved.
\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\+ \+ \\
\\
\<\textsf{\textbf{function}  \textit{real2byte} \textit{(} \textit{r} :\textit{real} ):\textit{byte} ;} (see Section \ref{sec:bmpreal2byte} )\\
\\
\<\textsf{\textbf{function}  \textit{byte2real} \textit{(} \textit{b} :\textit{byte} ):\textit{real} ;} (see Section \ref{sec:bmpbyte2real} )\\
\\
\\
\<\parbox{14cm}{\textsf{\textbf{implementation} }}\\
\<\parbox{14cm}{\textsf{\textbf{type} }}\\
\\
\end{tabbing}
The following data structures are defined by Microsoft
for their bitmap files (.BMP)
\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\+ \+ \\
\+\parbox{14cm}{\textsf{\textit{bitmapfileheader} =\textbf{packed}  \textbf{record} }}\\
\parbox{14cm}{bftype: \textbf{ array } \textsf{\textit{}[1..2]} \textbf{ of } \textsf{\textit{byte}}; }\\
\parbox{14cm}{\textsf{\textit{bfsize} : \textit{integer}}; }\\
\parbox{14cm}{res1: \textbf{ array } \textsf{\textit{}[0..3]} \textbf{ of } \textsf{\textit{byte}}; }\\
\parbox{14cm}{\textsf{\textit{bfoffbits} : \textit{integer}}; }\\
\<\-\parbox{14cm}{\textsf{\textbf{end}  ;}}\\
\end{tabbing}
A BitmapInfoHeader is the internal data structure used
by microsoft Windows to handle device indepEND ent bitmaps, (DIBs).
We only need this structure to interpret the data in a BMP file.
\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\+ \+ \\
\+\parbox{14cm}{\textsf{\textit{TBitmapInfoHeader} $=$ \textit{record}}}\\
\parbox{14cm}{\textsf{\textit{biSize} : \textit{integer}}; }\\
\parbox{14cm}{\textsf{\textit{biWidth} : \textit{integer}}; }\\
\parbox{14cm}{\textsf{\textit{biHeight} : \textit{integer}}; }\\
\parbox{14cm}{\textsf{\textit{biPlanes} : \textit{Word}}; }\\
\parbox{14cm}{\textsf{\textit{biBitCount} : \textit{Word}}; }\\
\parbox{14cm}{\textsf{\textit{biCompression} : \textit{integer}}; }\\
\parbox{14cm}{\textsf{\textit{biSizeImage} : \textit{integer}}; }\\
\parbox{14cm}{\textsf{\textit{biXPelsPerMeter} : \textit{integer}}; }\\
\parbox{14cm}{\textsf{\textit{biYPelsPerMeter} : \textit{integer}}; }\\
\parbox{14cm}{\textsf{\textit{biClrUsed} : \textit{integer}}; }\\
\parbox{14cm}{\textsf{\textit{biClrImportant} : \textit{integer}}; }\\
\<\-\parbox{14cm}{\textsf{\textbf{end}  ;}}\\
\\
\end{tabbing}
This datastructure can optionally include
a colour table, but this library does not support reading
.bmp files with colour tables
\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\+ \+ \\
\+\parbox{14cm}{\textsf{\textit{TBitmapInfo} $=$ \textit{record}}}\\
\parbox{14cm}{\textsf{\textit{bmiHeader} : \textit{TBitmapInfoHeader}}; }\\
\\
\<\-\parbox{14cm}{\textsf{\textbf{end}  ;}}\\
\end{tabbing}
The start of a .bmp file has a file header followed by
information about the bitmap itself.
\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\+ \+ \\
\+\parbox{14cm}{\textsf{\textit{bmpfile} $=$ \textbf{packed} \textit{record} }}\\
\parbox{14cm}{\textsf{\textit{fileheader} : \textit{bitmapfileheader}}; }\\
\parbox{14cm}{\textsf{\textit{filedata} : \textit{tbitmapinfo}}; }\\
\<\-\parbox{14cm}{\textsf{\textbf{end}  ;}}\\
\parbox{14cm}{\textsf{\textit{pbmpfile} $=$ $\uparrow$ \textit{bmpfile} }; }\\
\end{tabbing}
This data type is the format in which lines of pixels are stored
in .bmp files. It is used internally in the UNIT  BMP to load
and store images to files. This process involves translating
between internal and external representations.
\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\+ \+ \\
\parbox{14cm}{\textsf{\textit{imageline} (\textit{mincol}, \textit{maxcol}, \textit{minplane}, \textit{maxplane} : \textit{integer}) $=$ \textit{}}}\\
\parbox{14cm}{\textsf {\textbf {array } \textsf{\textit{}[mincol..maxcol, minplane..maxplane]} \textbf{ of } \textsf{\textit{byte}}; }}\\
\\
\\
\\
\\
\\
\\
\<\textsf{\textbf{procedure}   \textit{initbmpheader} \textit{(} \textbf{var}  \textit{header} :\textit{bmpfile} ;\textbf{var}  \textit{im} :\textit{image} );} (see Section \ref{sec:bmpinitbmpheader} )\\
\\
\\
\<\textsf{\textbf{procedure}   \textit{storebmpfile} \textit{(} \textit{s} :\textbf{string} ;\textbf{var}  \textit{im} :\textit{image} ) ;} (see Section \ref{sec:bmpstorebmpfile} )\\
\\
\\
\<\textsf{\textbf{function}  \textit{loadbmpfile} \textit{(} \textit{s} :\textit{filename} ;\textbf{var}  \textit{im} :\textit{pimage} ):\textit{boolean}  ;} (see Section \ref{sec:bmploadbmpfile} )\\
\\
\<\parbox{14cm}{\textsf{\textbf{type} }}\\
\parbox{14cm}{line (high:\textsf{\textit{integer} )=} \textbf{ array } \textsf{[0..\textit{high} ] } \textbf{ of } \textsf{ \textit{pixel} ;}}\\
\\
\<\textsf{\textbf{procedure}   \textit{adjustcontrast} \textit{(} \textit{f} :\textit{real} ; \textbf{var}  \textit{src} ,\textit{dest} :\textit{image} );} (see Section \ref{sec:bmpadjustcontrast} )\\
\\
\<\textsf{\textbf{function}  \textit{real2byte} \textit{(} \textit{r} :\textit{real} ):\textit{byte} ;} (see Section \ref{sec:bmpreal2byte} )\\
\\
\<\textsf{\textbf{function}  \textit{byte2real} \textit{(} \textit{b} :\textit{byte} ):\textit{real} ;} (see Section \ref{sec:bmpbyte2real} )\\
\\
\\
\-\<\+\parbox{14cm}{\textsf{\textbf{begin} }}\\
\\
\<\-\parbox{14cm}{\textsf{\textbf{end}  .}}\\
\\
\\
\\
\\
\\
\end{tabbing}
\section{initbmpheader}\label{sec:bmpinitbmpheader}

\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\parbox{14cm}{\textsf{\textbf{procedure}   \textit{initbmpheader} \textit{(} \textbf{var}  \textit{header} :\textit{bmpfile} ;\textbf{var}  \textit{im} :\textit{image} );}}\\
\end{tabbing}
This PROCEDURE  has the task of initialising a Window's BMP file header in
a way conformant with the dimensions of the image passed as a parameter
\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\\
\+\parbox{14cm}{\textsf{\textbf{begin} }}\\
\\
\end{tabbing}
\paragraph{FileHeader} BMP files have the letters BM at the start followed by
a 32 bit integer giving the file size, 4 reserved bytes and then
a 32 bit integer giving the offset into the file at which
the bitmap data starts.
\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\+ \\
\\
\parbox{14cm}{\textsf{\textit{header.fileheader.bftype}$_{1}$$\leftarrow$ \textbf{ord}(\textit{\textrm{\textup { `B' } }})}; }\\
\parbox{14cm}{\textsf{\textit{header.fileheader.bftype}$_{2}$$\leftarrow$ \textbf{ord}(\textit{\textrm{\textup { `M' } }})}; }\\
\parbox{14cm}{\textsf{\textit{header.fileheader.bfsize}$\leftarrow$ \textbf{sizeof}(\textit{bmpfile}) + \textit{}}}\\
\parbox{14cm}{\textsf{(\textit{im.maxcol} + 1) $\times$ \textit{}}}\\
\parbox{14cm}{\textsf{(\textit{im.maxplane} + 1) $\times$ \textit{}}}\\
\parbox{14cm}{\textsf{(\textit{im.maxrow} + 1)}; }\\
\parbox{14cm}{\textsf{\textit{header.fileheader.res1}$\leftarrow$ 0}; }\\
\parbox{14cm}{\textsf{\textit{header.fileheader.bfoffbits}$\leftarrow$ \textbf{sizeof}(\textit{bmpfile})}; }\\
\\
\end{tabbing}
\paragraph{Bitmap info}
Next comes a bitmap info header which
gives details about the bitmap itself. The fields
of this are as follows:
\paragraph{bisize} this gives the size of the
entire bitmap info header as a 32 bit integer.
\paragraph{biwidth} this 32 bit integer gives the number of
columns in the image, which can be determined from
the bounds of the pixel array provided.
\paragraph{biheight} another 32 bit integer which
gives the number of scan
lines in the image, which can again be determined
from the bounds of the image array.
\paragraph{biplanes} This gives the
number of planes in the image as a 16 bit integer.
This defaults to 1.
\paragraph{bibitcount} Gives the  var im:imagenumber of  bits
per pixel, we only support 8 and 24 bit versions at present.
\paragraph{bicompression} The meaning of this field is
not clear, it seems to be 0 in most files.
\paragraph{biXPelsPerMeter, biYPelsPerMeter} These specify
the printable
spacing of pixels, I use the value \$ec4 that I observe
in a number of bmp files.
\paragraph{biClrUsed, biClrImportant} these fields are only
used in images with colour maps, set them to zero for now.
\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\+ \\
\\
\+\parbox{14cm}{\textsf {\textbf {with } \textsf{\textit{header.filedata.bmiheader}} \textbf{ do } }}\\
\<\parbox{14cm}{\textsf{\textbf{begin} }}\\
\parbox{14cm}{\textsf{\textit{bisize}$\leftarrow$ \textbf{sizeof}(\textit{tbitmapinfo})}; }\\
\parbox{14cm}{\textsf{\textit{biwidth}$\leftarrow$ \textit{im.maxcol} + 1}; }\\
\parbox{14cm}{\textsf{\textit{biheight}$\leftarrow$ \textit{im.maxrow} + 1}; }\\
\parbox{14cm}{\textsf{\textit{biplanes}$\leftarrow$ 1}; }\\
\parbox{14cm}{\textsf{\textit{bibitcount}$\leftarrow$ 8 $\times$ (\textit{im.maxplane} + 1)}; }\\
\parbox{14cm}{\textsf{\textit{bicompression}$\leftarrow$ 0}; }\\
\parbox{14cm}{\textsf{\textit{biXPelsPerMeter}$\leftarrow$ \$ec4}; }\\
\parbox{14cm}{\textsf{\textit{biYPelsPerMeter}$\leftarrow$ \$ec4}; }\\
\parbox{14cm}{\textsf{\textit{biClrUsed}$\leftarrow$ 0}; }\\
\parbox{14cm}{\textsf{\textit{biClrImportant}$\leftarrow$ 0}; }\\
\<\-\parbox{14cm}{\textsf{\textbf{end}  ;}}\\
\\
\\
\<\-\parbox{14cm}{\textsf{\textbf{end}  ;}}\\
\end{tabbing}
\section{storebmpfile}\label{sec:bmpstorebmpfile}

\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\parbox{14cm}{\textsf{\textbf{procedure}   \textit{storebmpfile} \textit{(} \textit{s} :\textbf{string} ;\textbf{var}  \textit{im} :\textit{image} ) ;}}\\
\end{tabbing}
This FUNCTION writes an image in vector pascal format to a microsoft {\tt .BMP} file.
It is designed only to work with 1 or 3 plane images.
\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\\
\+\parbox{14cm}{\textsf{\textbf{type} }}\\
\parbox{14cm}{lines(rows,cols,planes:\textsf{\textit{integer} )=} \textbf{ array } \textsf{[0..\textit{rows} ,0..\textit{cols} ,0..\textit{planes} ] } \textbf{ of } \textsf{ \textit{byte} ;}}\\
\<\parbox{14cm}{\textsf{\textbf{var} }}\\
\parbox{14cm}{\textsf{Let \textit{f} $\in$ file ;}}\\
\parbox{14cm}{\textsf{Let \textit{fsize}, \textit{i}, \textit{index}, \textit{j}, \textit{k}, \textit{m}, \textit{row}, \textit{res} $\in$ integer;}}\\
\parbox{14cm}{\textsf{Let \textit{pf} $\in$ bmpfile;}}\\
\parbox{14cm}{\textsf{Let \textit{la} $\in$  \^lines;}}\\
\parbox{14cm}{\textsf{Let \textit{b} $\in$ byte;}}\\
\-\<\+\parbox{14cm}{\textsf{\textbf{begin} }}\\
\\
\parbox{14cm}{\textsf{\textit{assign} (\textit{f}, \textit{s})}; }\\
\parbox{14cm}{\textsf{\textit{rewrite} (\textit{f})}; }\\
\\
\<\parbox{3.5cm}{\scriptsize{setup header}}\'\>\parbox{14cm}{\textsf{\textit{initbmpheader} (\textit{pf}, \textit{im})}; }\\
\<\parbox{3.5cm}{\scriptsize{write it}}\'\>\parbox{14cm}{\textsf{\textit{blockwrite} (\textit{f}, \textit{pf}, \textbf{sizeof}(\textit{bmpfile}), \textit{res})}; }\\
\<\parbox{3.5cm}{\scriptsize{get buffer}}\'\>\parbox{14cm}{\textsf{\textbf{new} \textit{(} \textit{la}   ,\textit{im} .\textit{maxrow} ,\textit{im} .\textit{maxcol} ,\textit{im} .\textit{maxplane}  );}}\\
\end{tabbing}
Convert the data from the planar signed fixed point format used
in Vector Pascal to the interleaved unsigned byte format used
in Windows.
\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\+ \\
\parbox{14cm}{\textsf{\textit{la}$\uparrow$\textit{}$\leftarrow$ \textbf{perm} \textit{}[2, 0, 1] \textit{real2byte} (\textit{im})}; }\\
\end{tabbing}
Compute the size of a line and
write each line. We have to make sure each line occupies
an integral number of 32 bit words.
\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\+ \\
\parbox{14cm}{\textsf{\textit{fsize}$\leftarrow$ (\textit{im.maxplane} + 1) $\times$ (\textit{im.maxcol} + 1)}; }\\
\parbox{14cm}{\textsf {\textbf {if } \textsf{(\textit{fsize}\textbf{ mod }4) $\neq$ 0} \textbf{ then } \textsf{\textit{fsize}$\leftarrow$ \textit{fsize} + 4 - (\textit{fsize}\textbf{ mod }4)}; }}\\
\parbox{14cm}{\texttt{\small{\{ make integral number of words on a line \}}}}\\
\+\parbox{14cm}{\textsf {\textbf {for } \textsf{\textit{i}$\leftarrow$ \textit{im.maxrow}} \textbf{ downto } \textsf{0} \textbf{ do } }}\\
\-\<\<\parbox{3.5cm}{\scriptsize{write data}}\'\>\>\parbox{14cm}{\textsf{\textit{blockwrite} (\textit{f}, \textit{la}$\uparrow$\textit{}[i, 0, 0], \textit{fsize}, \textit{res})}; }\\
\\
\\
\<\parbox{3.5cm}{\scriptsize{free buffer}}\'\>\parbox{14cm}{\textsf{\textbf{dispose} \textit{(} \textit{la} );}}\\
\parbox{14cm}{\textsf{\textit{close} (\textit{f})}; }\\
\\
\<\-\parbox{14cm}{\textsf{\textbf{end}  ;}}\\
\end{tabbing}
\section{loadbmpfile}\label{sec:bmploadbmpfile}

\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\parbox{14cm}{\textsf{\textbf{function}  \textit{loadbmpfile} \textit{(} \textit{s} :\textit{filename} ;\textbf{var}  \textit{im} :\textit{pimage} ):\textit{boolean}  ;}}\\
\+\parbox{14cm}{\textsf{\textbf{type} }}\\
\parbox{14cm}{byteimage(maxrow,maxcol,maxpix:\textsf{\textit{integer} )=} \textbf{ array } \textsf{[0..\textit{maxrow} ,0..\textit{maxcol} ,0..\textit{maxpix} ] } \textbf{ of } \textsf{ \textit{byte} ;}}\\
\<\parbox{14cm}{\textsf{\textbf{var} }}\\
\parbox{14cm}{\textsf{Let \textit{f} $\in$ file of byte;}}\\
\parbox{14cm}{\textsf{Let \textit{fsize}, \textit{i}, \textit{index}, \textit{j}, \textit{k}, \textit{m}, \textit{row}, \textit{res} $\in$ integer;}}\\
\parbox{14cm}{\textsf{Let \textit{la} $\in$  \^byteimage;}}\\
\parbox{14cm}{\textsf{Let \textit{pf} $\in$ bmpfile;}}\\
\parbox{14cm}{\textsf{Let \textit{bb} $\in$ byte;}}\\
\-\<\+\parbox{14cm}{\textsf{\textbf{begin} }}\\
\parbox{14cm}{\textsf{\textit{loadbmpfile}$\leftarrow$ \textit{false}}; }\\
\parbox{14cm}{\textsf{\textit{assign} (\textit{f}, \textit{s})}; }\\
\parbox{14cm}{\textsf{\textit{reset} (\textit{f})}; }\\
\+\parbox{14cm}{\textsf {\textbf {if } \textsf{\textit{ioresult} $\neq$ 0} \textbf{ then } }}\\
\<\parbox{14cm}{\textsf{\textbf{begin} }}\\
\parbox{14cm}{\textsf{\textit{loadbmpfile}$\leftarrow$ \textit{false}}; }\\
\parbox{14cm}{\textsf{\textbf{writeln}(\textit{\textrm{\textup { `cant open ' } }}, \textit{s}, \textit{ioresult})}; }\\
\<\-\parbox{14cm}{\textsf{\textbf{end} }}\\
\+\parbox{14cm}{\textsf{\textbf{else} }}\\
\<\parbox{14cm}{\textsf{\textbf{begin} }}\\
\\
\parbox{14cm}{\textsf{\textit{fsize}$\leftarrow$ \textit{filesize} (\textit{f})}; }\\
\parbox{14cm}{\textsf{\textit{i}$\leftarrow$ \textbf{sizeof}(\textit{bmpfile})}; }\\
\parbox{14cm}{\textsf{\textit{blockread} (\textit{f}, \textit{pf}, \textit{i}, \textit{res})}; }\\
\+\parbox{14cm}{\textsf {\textbf {with } \textsf{\textit{pf.filedata.bmiheader}} \textbf{ do } }}\\
\<\parbox{14cm}{\textsf{\textbf{begin} }}\\
\parbox{14cm}{\texttt{\small{\{	writeln('read header');\}}}}\\
\parbox{14cm}{\textsf{\textbf{new} \textit{(} \textit{im} ,2,\textit{biheight} -1,\textit{biwidth} -1);}}\\
\parbox{14cm}{\textsf{\textbf{new} \textit{(} \textit{la} ,\textit{biheight} -1,\textit{biwidth} -1,2);}}\\
\parbox{14cm}{\texttt{\small{\{ writeln('created array la',biheight-1,biwidth-1,2);\{\}}}}\\
\+\<\parbox{14cm}{\textsf {\textbf {if } \textsf{\textit{bibitcount} $=$ 8} \textbf{ then } \textsf{\textit{BEGIN}} \textbf{ begin } }}\\
\parbox{14cm}{\textsf{\textit{loadbmpfile}$\leftarrow$ \textit{false}}; }\\
\parbox{14cm}{\textsf{\textbf{writeln}(\textit{\textrm{\textup { ` 8 bit bmp files not supported' } }})}; }\\
\<\-\parbox{14cm}{\textsf{\textbf{end} }}\\
\+\parbox{14cm}{\textsf {\textbf {else }  \textbf{ if } \textsf{\textit{bibitcount} $=$ 24} \textbf{ then } }}\\
\<\parbox{14cm}{\textsf{\textbf{begin} }}\\
\parbox{14cm}{\textsf{\textit{fsize}$\leftarrow$ (\textit{im}$\uparrow$.\textit{maxplane} + 1) $\times$ (\textit{im}$\uparrow$.\textit{maxcol} + 1)}; }\\
\parbox{14cm}{\textsf {\textbf {if } \textsf{(\textit{fsize}\textbf{ mod }4) $\neq$ 0} \textbf{ then } \textsf{\textit{fsize}$\leftarrow$ \textit{fsize} + 4 - (\textit{fsize}\textbf{ mod }4)}; }}\\
\parbox{14cm}{\texttt{\small{\{ make integral number of words on a line \}}}}\\
\+\<\parbox{14cm}{\textsf {\textbf {for } \textsf{\textit{i}$\leftarrow$ \textit{im}$\uparrow$.\textit{maxrow}} \textbf{ downto } \textsf{0} \textbf{ do } \textsf{\textit{BEGIN}} \textbf{ begin } }}\\
\parbox{14cm}{\texttt{\small{\{	writeln('read row',i);\}\{\$r-\}}}}\\
\parbox{14cm}{\textsf{\textit{bb}$\leftarrow$ \textit{la}$\uparrow$\textit{}[i, 0, 0]}; }\\
\parbox{14cm}{\texttt{\small{\{	writeln('got byte');\}}}}\\
\<\<\<\<\<\parbox{3.5cm}{\scriptsize{read data}}\'\>\>\>\>\>\parbox{14cm}{\textsf{\textit{blockread} (\textit{f}, \textit{la}$\uparrow$\textit{}[i, 0, 0], \textit{fsize}, \textit{res})}; }\\
\<\-\parbox{14cm}{\textsf{\textbf{end}  ;}}\\
\parbox{14cm}{\texttt{\small{\{	writeln('permute ');\}}}}\\
\parbox{14cm}{\textsf{\textit{im}$\uparrow$\textit{}$\leftarrow$ \textbf{perm} \textit{}[1, 2, 0] \textit{byte2real} (\textit{la}$\uparrow$\textit{})}; }\\
\\
\parbox{14cm}{\textsf{\textit{loadbmpfile}$\leftarrow$ \textit{true}}; }\\
\<\-\parbox{14cm}{\textsf{\textbf{end}  ;}}\\
\parbox{14cm}{\textsf{\textbf{dispose} \textit{(} \textit{la} );}}\\
\parbox{14cm}{\textsf{\textit{close} (\textit{f})}; }\\
\<\-\parbox{14cm}{\textsf{\textbf{end}  ;}}\\
\<\-\parbox{14cm}{\textsf{\textbf{end}  ;}}\\
\<\-\parbox{14cm}{\textsf{\textbf{end}  ;}}\\
\end{tabbing}
\section{adjustcontrast}\label{sec:bmpadjustcontrast}

\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\parbox{14cm}{\textsf{\textbf{procedure}   \textit{adjustcontrast} \textit{(} \textit{f} :\textit{real} ; \textbf{var}  \textit{src} ,\textit{dest} :\textit{image} );}}\\
\+\parbox{14cm}{\textsf{\textbf{var} }}\\
\parbox{14cm}{\textsf{Let \textit{l} $\in$ \^{}line;}}\\
\parbox{14cm}{\textsf{Let \textit{r} $\in$ real;}}\\
\-\<\+\parbox{14cm}{\textsf{\textbf{begin} }}\\
\parbox{14cm}{\textsf{\textit{dest}$\leftarrow$ \textit{src} $\times$ \textit{f}}; }\\
\\
\\
\<\-\parbox{14cm}{\textsf{\textbf{end}  ;}}\\
\end{tabbing}
\section{real2byte}\label{sec:bmpreal2byte}

\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\parbox{14cm}{\textsf{\textbf{function}  \textit{real2byte} \textit{(} \textit{r} :\textit{real} ):\textit{byte} ;}}\\
\+\parbox{14cm}{\textsf{\textbf{var} }}\\
\parbox{14cm}{\textsf{Let \textit{temp} $\in$ pixel;}}\\
\-\<\+\parbox{14cm}{\textsf{\textbf{begin} }}\\
\parbox{14cm}{\textsf{\textit{temp}$\leftarrow$ \textit{r}}; }\\
\parbox{14cm}{\textsf{\textit{real2byte}$\leftarrow$ \textbf{pixel2byte}(\textit{temp})}; }\\
\<\-\parbox{14cm}{\textsf{\textbf{end}  ;}}\\
\end{tabbing}
\section{byte2real}\label{sec:bmpbyte2real}

\begin{tabbing}
***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=***\=\kill
\parbox{14cm}{\textsf{\textbf{function}  \textit{byte2real} \textit{(} \textit{b} :\textit{byte} ):\textit{real} ;}}\\
\+\parbox{14cm}{\textsf{\textbf{var} }}\\
\parbox{14cm}{\textsf{Let \textit{temp} $\in$ pixel;}}\\
\-\<\+\parbox{14cm}{\textsf{\textbf{begin} }}\\
\parbox{14cm}{\textsf{\textit{temp}$\leftarrow$ \textbf{byte2pixel}(\textit{b})}; }\\
\parbox{14cm}{\textsf{\textit{byte2real}$\leftarrow$ \textit{temp}}; }\\
\<\-\parbox{14cm}{\textsf{\textbf{end}  ;}}\\
\end{tabbing}
