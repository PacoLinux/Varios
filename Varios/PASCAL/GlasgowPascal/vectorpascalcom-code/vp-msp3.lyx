#LyX 1.1 created this file. For more info see http://www.lyx.org/
\lyxformat 2.16
\textclass article
\begin_preamble
\usepackage{times}
\usepackage{a4}
\end_preamble
\language default
\inputencoding latin1
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Title

Vector Pascal
\layout Author

Paul Cockshott, University of Glasgow
\layout Abstract

Vector Pascal is a language designed to support elegant and efficient expression
 of algorithms using the SIMD model of computation.
 It imports into Pascal features derived from the functional languages APL
 and J, in particular the extension of all operators to work on vectors
 of data.
 The type system is extended to handle dimensional analysis.
 Code generation is via the ILCG system that allows retargeting to multiple
 different SIMD instructionsets based on formal descrition of the instructionset
 semantics.
\layout Section*

Introduction
\layout Standard

The introduction of SIMD instruction sets
\begin_inset LatexCommand \cite{IA32 }

\end_inset 


\begin_inset LatexCommand \cite{AMD}

\end_inset 


\begin_inset LatexCommand \cite{Peleg97}

\end_inset 


\begin_inset LatexCommand \cite{Intel00}

\end_inset 

 to Personal Computers potentially provides substantial performance increases,
 but the ability of most programmers to harness this performance is held
 back by two factors.
 The first is the limited availability of compilers that make effective
 use of these instructionsets in a machine independent manner.
 This remains the case despite the research efforts to develop compilers
 for multi-media instructionsets
\begin_inset LatexCommand \cite{Cheong97}

\end_inset 


\begin_inset LatexCommand \cite{Leupers99}

\end_inset 


\begin_inset LatexCommand \cite{Krall00}

\end_inset 


\begin_inset LatexCommand \cite{Sreraman00}

\end_inset 

.
 The second is the fact that most popular programming languages were designed
 on the word at a time model of the classic von Neuman computer.
 Whilst processor architectures are moving towards greater levels of parallelism
, the most widely used programming languages like C, Java and Delphi are
 structured around a model of computation in which operations take place
 on a single value at a time.
 This was appropriate when processors worked this way, but has become an
 impediment to programmers seeking to make use of the performance offered
 by multi-media instructionsets.
 These problems mean that it is, in practice, significantly harder to write
 a program that will use SIMD features than it is to write a conventional
 program.
 
\layout Standard

Vector Pascal aims to provide an efficient and concise notation for programmers
 using Multi-Media enhanced CPUs.
 In doing so it borrows concepts for expressing data parallelism that have
 a long history, dating back to Iverson's work on APL in the early '60s
\begin_inset LatexCommand \cite{Iverson62}

\end_inset 

.
 
\layout Standard

The\SpecialChar 
 Let us denote an array whose elements are of type 
\begin_inset Formula \( T \)
\end_inset 

as having type 
\begin_inset Formula \( T[] \)
\end_inset 

.
 Then if we have a binary operator 
\begin_inset Formula \( \omega :(T\otimes T)\rightarrow T \)
\end_inset 

, in languages derived from APL we automatically have an operator 
\begin_inset Formula \( \omega :(T[]\otimes T[])\rightarrow T[] \)
\end_inset 

 
\begin_inset Formula \(  \)
\end_inset 

.
 Thus if 
\begin_inset Formula \( x,y \)
\end_inset 

 are arrays of integers 
\begin_inset Formula \( k=x+y \)
\end_inset 

 is the array of integers where 
\begin_inset Formula \( k_{i}=x_{i}+y_{i} \)
\end_inset 

.
\layout Standard

The basic concept is simple, there are complications to do with the semantics
 of operations between arrays of different lengths and different dimensions,
 but Iverson provides a consistent treatment of these.
 The most recent languages to be built round this model are J, an interpretive
 language
\begin_inset LatexCommand \cite{Jmanual}

\end_inset 


\begin_inset LatexCommand \cite{Burke}

\end_inset 


\begin_inset LatexCommand \cite{Jintro}

\end_inset 

, and F
\begin_inset LatexCommand \cite{Metcalf96}

\end_inset 

 a modernised Fortran.
 In principle though any language with array types can be extended in a
 similar way.
 Iverson's approach to data parallelism is machine independent.
 It can be implemented using scalar instructions or using the SIMD model.
 The only difference is speed.
 
\layout Standard

Vector Pascal incorporates Iverson's approach to data parallelism.
 Its aim is to provide a notation that allows the natural and elegant expression
 of data parallel algorithms within a base language that is already familiar
 to a considerable body of programmers and combine this with modern compilation
 techniques.
 
\layout Standard

By an elegant algorithm I mean one which is expressed as concisely as possible.
 Elegance is a goal that one approaches asymtotically, approaching but never
 attaining
\begin_inset LatexCommand \cite{Chaiten}

\end_inset 

.
 APL and J allow the construction of very elegant programs, but at a cost.
 An inevitable consequence of elegance is the loss of redundancy.
 APL programs are as concise, or even more concise than conventional mathematica
l notation
\begin_inset LatexCommand \cite{Iversion80}

\end_inset 

 and use a special characterset.
 This makes them hard for the uninitiated to understand.
 J attempts to remedy this by restricting itself to the ASCII characterset,
 but still looks dauntingly unfamiliar to programmers brought up on more
 conventional languages.
 Both APL and J are interpretive which makes them ill suited to many of
 the applications for which SIMD speed is required.
 The aim of Vector Pascal is to provide the conceptual gains of Iverson's
 notation within a framework familiar to imperative programmers.
\layout Standard

Pascal
\begin_inset LatexCommand \cite{Wirth}

\end_inset 

was chosen as a base language over the alternatives of C and Java.
 C was rejected because notations like
\family typewriter 
 x+y
\family default 
 for 
\family typewriter 
x 
\family default 
and 
\family typewriter 
y
\family default 
 declared as 
\family typewriter 
int x[4],y[4]
\family default 
, already have the meaning of adding the addresses of the arrays together.
 Java was rejected because of the difficulty of efficiently transmitting
 data parallel operations via its intermediate code to a just in time code
 generator.
 
\layout Section*

Type System
\layout Standard

The type system of Pascal is extended by the provision of dynamic arrays
 and by the introduction of dimensioned types.
 
\layout Subsection*

Dimensioned Types
\layout Standard

Dimensional analysis is familiar to scientists and engineers and provides
 a routine check on the sanity of mathematical expressions.
 Dimensions can not be expressed in the otherwise rigourous type system
 of standard Pascal, but they are a useful protection against the sort of
 programming confusion between imperial and metric units that caused the
 demise of a recent Mars probe.
 They provide a means by which floating point types can be specialised to
 represent dimensioned numbers as is required in physics calculations.
 For example:
\layout Standard


\series bold 
kms =(mass,distance,time);
\layout Standard


\series bold 
meter=real of distance;
\layout Standard


\series bold 
kilo=real of mass;
\layout Standard


\series bold 
second=real of time;
\layout Standard


\series bold 
newton=real of mass * distance * time POW -2;
\layout Standard


\series bold 
meterpersecond = real of distance *time POW -1;
\layout Standard

The grammar is given by:
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
1 2 0 0 -1 -1 -1 -1
1 1 0 0
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

<dimensioned type>
\newline 
<real type> <dimension >['*' <dimension>]*
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
2 2 0 0 -1 -1 -1 -1
1 0 0 0
0 1 0 0
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

<real type>
\newline 
'real'
\newline 

\newline 
'double'
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
1 2 0 0 -1 -1 -1 -1
1 1 0 0
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

<dimension>
\newline 
<identifier> ['POW' [<sign>] <unsigned integer>]
\layout Standard

The identifier must be a member of a scalar type, and that scalar type is
 then refered to as the basis space of the dimensioned type.
 The identifiers of the basis space are refered to as the dimensions of
 the dimensioned type.
 Associated with each dimension of a dimensioned type there is an integer
 number refered to as the power of that dimension.
 This is either introduced explicitly at type declaration time, or determined
 implicitly for the dimensional type of expressions.
 
\layout Standard

A value of a dimensioned type is a dimensioned value.
 Let 
\begin_inset Formula \( \log _{d}t \)
\end_inset 

 of a dimensioned type 
\begin_inset Formula \( t \)
\end_inset 

 be the power to which the dimension 
\begin_inset Formula \( d \)
\end_inset 

 of type 
\begin_inset Formula \( t \)
\end_inset 

 is raised.
 Thus for 
\begin_inset Formula \( t= \)
\end_inset 

newton in the example above, and 
\begin_inset Formula \( d= \)
\end_inset 

time, 
\begin_inset Formula \( \log _{d}t=-2 \)
\end_inset 


\layout Standard

If 
\begin_inset Formula \( x \)
\end_inset 

 and 
\begin_inset Formula \( y \)
\end_inset 

 are values of dimensioned types 
\begin_inset Formula \( t_{x} \)
\end_inset 

and 
\begin_inset Formula \( t_{y} \)
\end_inset 

respectively, then the following operators are only permissible if 
\begin_inset Formula \( t_{x}=t_{y} \)
\end_inset 

: +, - ,<, >, =, <=, >=.
 For + and -, the dimensional type of the result is the same as that of
 the arguments.
 The operations.
 The operations *, / are permited if the types 
\begin_inset Formula \( t_{x} \)
\end_inset 

and 
\begin_inset Formula \( t_{y} \)
\end_inset 

 share the same basis space, or if the basis space of one of the types is
 a subrange of the basis space of the other.
  
\layout Standard

The operation 
\series bold 
POW
\series default 
 is permited between dimensioned types and integers.
\layout Paragraph*

Dimension deduction rules
\layout Enumerate

If 
\begin_inset Formula \( x=y*z \)
\end_inset 

 for 
\begin_inset Formula \( x:t_{1},y:t_{2},z:t_{3} \)
\end_inset 

 with basis space 
\begin_inset Formula \( B \)
\end_inset 

 then 
\begin_inset Formula \( \forall _{d\in B}\log _{d}t_{1}=\log _{d}t_{2}+\log _{d}t_{3} \)
\end_inset 

.
 
\layout Enumerate

If 
\begin_inset Formula \( x=y/z \)
\end_inset 

 for 
\begin_inset Formula \( x:t_{1},y:t_{2},z:t_{3} \)
\end_inset 

 with basis space 
\begin_inset Formula \( B \)
\end_inset 

 then 
\begin_inset Formula \( \forall _{d\in B}\log _{d}t_{1}=\log _{d}t_{2}-\log _{d}t_{3} \)
\end_inset 

.
 
\layout Enumerate

If 
\begin_inset Formula \( x=y \)
\end_inset 

 
\series bold 
POW
\series default 
 
\begin_inset Formula \( z \)
\end_inset 

 for 
\begin_inset Formula \( x:t_{1},y:t_{2},z:integer \)
\end_inset 

 with basis space for 
\begin_inset Formula \( t_{2} \)
\end_inset 

, 
\begin_inset Formula \( B \)
\end_inset 

 then 
\begin_inset Formula \( \forall _{d\in B}\log _{d}t_{1}=\log _{d}t_{2}\times z \)
\end_inset 

.
\layout Subsection*

Dynamic Arrays
\layout Standard

A dynamic array is an array whose bounds are determined at run time.
 Operations on dynamic arrays are essential in general purpose image processing
 software.
\layout Standard

Pascal 90
\begin_inset LatexCommand \cite{ISO90}

\end_inset 

 introduced the notion of schematic or parameterised types as a means of
 creating dynamic arrays.
 Thus where 
\series bold 
r
\series default 
 is some integral type one can write 
\layout Standard


\series bold 
type z(a,b:r)=array[a..b] of t;
\layout Standard

If 
\series bold 
p:^z
\series default 
, then 
\layout Standard


\series bold 
new(p,n,m)
\layout Standard

where 
\series bold 
n,m:r 
\series default 
initialises 
\series bold 
p
\series default 
 to point to an array of bounds 
\series bold 
n..m
\series default 
.
 The bounds of the array can then be accessed as 
\series bold 
p^.a, p^.b
\series default 
.
 Vector Pascal incorporates this notation from Pascal 90 for dynamic arrays.
 
\layout Section*

Expressions
\layout Standard

The expression syntax of Vector Pascal incorportates extensions to refer
 to ranges of arrays and to operate on arrays as a whole.
\layout Subsection*

Indexed Ranges
\layout Standard

A range of components of an array variable are denoted by the variable followed
 by a range expression in brackets.
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
1 2 0 0 -1 -1 -1 -1
1 1 0 0
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

<indexed range>
\newline 
<variable> '[' <range expression>[',' <range expression>]* ']'
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
1 2 0 0 -1 -1 -1 -1
1 1 0 0
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

<range expression>
\newline 
<expression> '..' <expression>
\layout Standard

The expressions within the range expression must conform to the index type
 of the array variable.
 The type of a range expression 
\series bold 
a[i..j]
\series default 
 where 
\series bold 
a: array[p..q] of t
\series default 
 is 
\series bold 
array[0..j-i] of t.
\layout Standard

Examples
\layout Standard


\series bold 
dataset[i..i+2]:=blank;
\layout Standard


\series bold 
twoDdata[2..3,5..6]:=twoDdata[4..5,11..12]*0.5;
\layout Standard

Subranges may be passed in as actual parameters to procedures whose correspondin
g formal parameters are declared as variables of a schematic type.
 Hence given the following declarations:
\layout Standard


\series bold 
type image(miny,maxy,minx,maxx:integer)=array[miny..maxy,minx..maxx] of byte;
\layout Standard


\series bold 
procedure invert(var im:image);begin im:=255-im; end;
\layout Standard


\series bold 
var screen:array[0..319,0..199] of byte;
\layout Standard

then the following statement would be valid:
\layout Standard


\series bold 
invert(screen[40..60,20..30]);
\layout Subsection*

Unary expressions
\layout Standard

A unary expression is formed by applying a unary operator to another unary
 or primary expression.
 The unary operators supported are 
\series bold 
+, -, *, /, div, not, round, sqrt, sin, cos, tan, abs, ln, ord, chr, succ,
 pred
\series default 
 and 
\series bold 
@
\series default 
.
\layout Standard

Thus the following are valid unary expressions
\series bold 
: -1, +b, not true, sqrt abs x, sin theta.
 
\series default 
In standard Pascal some of these operators are treated as functions,.
 Syntactically this means that their arguments must be enclosed in brackets,
 as in 
\series bold 
sin(theta)
\series default 
.
 This usage remains syntactically correct in Vector Pascal.
 
\layout Standard

The dyadic operators 
\series bold 
+, -, *, /, div
\series default 
 are all extended to unary context by the insertion of an implicit value
 under the operation.
 Thus just as 
\series bold 
-a = 0-a
\series default 
 so too 
\series bold 
/2 = 1/2
\series default 
.
 For sets the notation 
\series bold 
-s
\series default 
 means the complement of the set 
\series bold 
s
\series default 
.
 The implicit value inserted are given below.
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center \LyXTable
multicol5
5 3 0 0 -1 -1 -1 -1
1 1 0 0
1 0 0 0
1 0 0 0
1 0 0 0
1 1 0 0
8 1 0 "" ""
8 1 0 "" ""
8 1 1 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

type
\newline 
operators
\newline 
implicit value
\newline 
number
\newline 
+,-
\newline 
0
\newline 
set
\newline 
+
\newline 
empty set
\newline 
set
\newline 
-,*
\newline 
fullset
\newline 
number
\newline 
*,/ ,div
\newline 
1
\layout Standard

A unary operator can be applied to an array argument and returns an array
 result.
 Similarly any user declared function over a scalar type can be applied
 to an array type and return an array.
 If 
\series bold 
f
\series default 
 is a function or unary operator mapping from type
\series bold 
 r
\series default 
 to type
\series bold 
 t
\series default 
 then if 
\series bold 
x
\series default 
 is an array of 
\series bold 
r
\series default 
 then 
\series bold 
a:=f(x)
\series default 
 assigns an array of
\series bold 
 t
\series default 
 such that 
\series bold 
a[i]=f(x[i])
\layout Subsubsection*

Dyadic Operations
\layout Standard

Dyadic operators supported are 
\series bold 
+, +:, -:, -, *, /, div, mod , **, pow, <, >, >=, <=, =, <>, shr, shl, and,
 or, in
\series default 
.
 All of these are consistently extended to operate over arrays.
 The operators **, pow denote exponentiation and raising to an integer power.
 The operators +: and -: exist to support saturated arithmetic as supported
 by the MMX instructionset.
\layout Subsubsection*

Addition operations
\layout Standard
\align center \LyXTable
multicol5
9 5 0 0 -1 -1 -1 -1
1 1 0 0
1 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 1 0 0
0 1 0 0
8 0 0 "" ""
8 0 0 "" ""
8 0 0 "" ""
8 0 0 "" ""
8 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""

Operation
\newline 
Left
\newline 
Right
\newline 
Result
\newline 
Effect of 
\emph on 
a
\emph default 
 
\series bold 
op
\series default 
 
\emph on 
b
\emph default 

\newline 
+
\newline 
integer
\newline 
integer
\newline 
integer
\newline 
sum of 
\emph on 
a
\emph default 
 and 
\emph on 
b
\emph default 

\newline 

\newline 
real
\newline 
real
\newline 
real
\newline 
sum of 
\emph on 
a
\emph default 
 and 
\emph on 
b
\emph default 

\newline 
-
\newline 
integer
\newline 
integer
\newline 
integer
\newline 
result of subtracting 
\emph on 
b
\emph default 
 from 
\emph on 
a
\emph default 

\newline 

\newline 
real
\newline 
real
\newline 
real
\newline 
result of subtracting 
\emph on 
b
\emph default 
 from 
\emph on 
a
\emph default 

\newline 
+:
\newline 
0..255
\newline 
0..255
\newline 
0..255
\newline 
saturated addition cliped to 0..255 
\newline 

\newline 
-128..127
\newline 
-128..127
\newline 
-128..127
\newline 
saturated addition clipped to -128..127
\newline 
-:
\newline 
0..255
\newline 
0..255
\newline 
0..255
\newline 
saturated subtraction clipped to 0..255
\newline 

\newline 
-128..127
\newline 
-128..127
\newline 
-128..127
\newline 
saturated subtraction clipped to -128..127
\layout Subsection*

Assignment
\layout Standard

Standard Pascal allows assignement of whole arrays.
 Vector Pascal extends this to allow consistent use of mixed rank expressions
 on the right hand side of an assignment.
 Given
\layout Standard


\series bold 
r0:real; r1:array[0..7] of real; r2:array[0..7,0..7] of real
\layout Standard

then we can write
\layout Enumerate

r
\series bold 
1:= r2[3]; { supported in standard Pascal }
\layout Enumerate


\series bold 
r1:= /2; { assign 0.5 to each element of r1 }
\layout Enumerate


\series bold 
r2:= r1*3; { assign 1.5 to every element of r2}
\layout Enumerate


\series bold 
r1:= 
\backslash 
+ r2; { r1gets the totals along the rows of r2}
\layout Standard

The variable on the left hand side of an assignment defines an array context
 within which expressions on the right hand side are evaluated.
 Each array context has a rank given by the number of dimensions of the
 array on the left hand side.
 A scalar variable has rank 0.
 Variables occuring in expressions with an array context of rank 
\emph on 
r
\emph default 
 must have 
\emph on 
r
\emph default 
 or fewer dimensions.
 The 
\emph on 
n
\emph default 
 bounds of any
\emph on 
 n
\emph default 
 dimensional array variable, with 
\begin_inset Formula \( n\leq r \)
\end_inset 

 occuring within an expression evaluated in an array context of rank 
\emph on 
r
\emph default 
 must match with the rightmost 
\emph on 
n
\emph default 
 bounds of the array on the left hand side of the assignment statement.
 
\layout Standard

Where a variable is of lower rank than its array context, the variable is
 replicated to fill the array context.
 This is shown in examples 2 and 3 above.
 Because the rank of any assignment is constrained by the variable on the
 left hand side, no temporary arrays, other than machine registers, need
 be allocated to store the intermediate array results of expressions.
\layout Subsubsection*

Operator Reduction
\layout Standard

Any dyadic operator can be converted to a monadic reduction operator by
 the functional 
\backslash 
.
 Thus if a is an array, 
\backslash 
+a denotes the sum over the array.
 More generally 
\begin_inset Formula \( \setminus \Phi x \)
\end_inset 

 for some dyadic operator 
\begin_inset Formula \( \Phi  \)
\end_inset 

 means 
\begin_inset Formula \( x_{0}\Phi (x_{1}\Phi ..(x_{n}\Phi \iota )) \)
\end_inset 

 where 
\begin_inset Formula \( \iota  \)
\end_inset 

 is the implicit value given the operator and the type.
 Thus we can write 
\backslash 
+ for 
\begin_inset Formula \( \sum  \)
\end_inset 

, 
\backslash 
* for 
\begin_inset Formula \( \prod  \)
\end_inset 

 etc.
 The dot product of two vectors can thus be written as
\layout Standard


\series bold 
x:=
\backslash 
+(y*z);
\layout Standard

instead of
\layout Standard


\series bold 
x:=0;
\layout Standard


\series bold 
for i:=0 to n do x:= x+ y[i]*z[i];
\layout Standard

A reduction operation takes an argument of rank 
\emph on 
r
\emph default 
 and returns an argument of rank 
\emph on 
r-1
\emph default 
 except in the case where its argument is or rank 0, in which case it acts
 as the identity operation.
 Reduction is always performed along the last array dimension of its argument.
 
\layout Section*

Implementation
\layout Standard

The Vector Pascal compiler is implemented in Java.
 It uses the ILCG
\begin_inset LatexCommand \cite{Cockshott00}

\end_inset 

 portable code generation system.
 A Vector Pascal program is translated into an abstract semantic tree implemente
d as a Java datastructure.
 The tree is passed to a machine generated Java class corresponding to the
 code generator for the target machine.
 Code generator classes currently exist for the Intel 486, Pentium with
 MMX, and P3 and also the AMD K6.
 Output is assembler code which is assembled using the NASM assembler and
 linked using the gcc loader.
 Vector Pascal currently runs under Windows98 , Windows2000 and Linux.
 Separate compilation using Turbo Pascal style units is supported.
\layout Standard

The code generators follow the pattern matching approach described in
\begin_inset LatexCommand \cite{Aho}

\end_inset 


\begin_inset LatexCommand \cite{Cattel80}

\end_inset 

and 
\begin_inset LatexCommand \cite{graham80}

\end_inset 

, and are automatically generated from machine specifications written in
 ILCG (Intermediate Language for Code Generators).
 ILCG is a strongly typed language which supports vector data types and
 operators over vectors.
 It is well suited to describing MMX type instructionsets.
 The code generator classes export from their interfaces details about the
 degree of parallelism supported for each data-type.
 This is used by the front end compiler to iterate over arrays longer than
 those supported by the underlying machine.
 Where supported parallelism is unitary this defaults to iteration over
 the whole array.
\layout Standard

Selection of target machines is by a compile time switch which causes the
 appropriate code generator class to be dynamically loaded.
 
\layout Section*

Conclusions
\layout Standard

Vector Pascal provides a new approach to providing a programming environment
 for multi-media instructionsets.
 It borrows notational conventions that have a long history of sucessfull
 use in interpretive programming languages, combining these with modern
 compiler techniques to target SIMD instructionsets.
 It provides a uniform source language that can target multiple different
 processors without the programmer having to think about the target machine.
 Use of Java as the implementation language aids portability of the compiler
 accross operating systems.
 Work is underway to compare the performance and elegance of implementations
 of a stereo-matcher algorithm implemented in Vector Pascal with the same
 algorithm implemented in C using the Intel image processing library.
\layout Bibliography
\bibitem {AMD}

Advanced Micro Devices, 3DNow! Technology Manual, 1999.
 
\layout Bibliography
\bibitem {Aho}

Aho, A.V., Ganapathi, M, TJiang S.W.K., Code Generation Using Tree Matching and
 Dynamic Programming, ACM Trans, Programming Languages and Systems 11, no.4,
 1989, pp.491-516.
 
\layout Bibliography
\bibitem {Burke}

Burke, Chris, J User Manual, ISI, 1995.
\layout Bibliography
\bibitem {Cattel80}

Cattell R.
 G.
 G., Automatic derivation of code generators from machine descriptions, ACM
 Transactions on Programming Languages and Systems, 2(2), pp.
 173-190, April 1980.
 
\layout Bibliography
\bibitem {Chaiten}

Chaitin.
 G., Elegant Lisp Programs, in The Limits of Mathematics, pp.
 29-56, Springer, 1997.
\layout Bibliography
\bibitem {Cheong97}

Cheong, G., and Lam, M., An Optimizer for Multimedia Instruction Sets, 2nd
 SUIF Workshop, Stanford University, August 1997.
 
\layout Bibliography
\bibitem {Cockshott00}

Cockshott, Paul, Direct Compilation of High Level Languages for Multi-media
 Instruction-sets, Department of Computer Science, University of Glasgow,
 Nov 2000.
\layout Bibliography
\bibitem {graham80}

Susan L.
 Graham, Table Driven Code Generation, IEEE Computer, Vol 13, No.
 8, August 1980, pp 25..37.
 
\layout Bibliography
\bibitem {IA32 }

Intel, Intel Architecture Software Developers Manual Volumes 1 and 2, 1999.
 
\layout Bibliography
\bibitem {Intel00}

Intel, Willamette Processor Software Developer's Guide, February, 2000.
 
\layout Bibliography
\bibitem {ISO90}

ISO, Extended Pascal ISO 10206:1990, 1991.
\layout Bibliography
\bibitem {Iverson62}

Iverson K.
 E., A Programming Language, John Wiley & Sons, Inc., New York (1962), p.
 16.
 
\layout Bibliography
\bibitem {Iversion80}

Iverson, K.
 E.
 .
 Notation as a tool of thought.
 Communications of the ACM, 23(8), 444-465, 1980.
\layout Bibliography
\bibitem {Jmanual}

Iverson K.
 E, A personal View of APL, IBM Systems Journal, Vol 30, No 4, 1991.
 
\layout Bibliography
\bibitem {Jintro}

Iverson, Kenneth E., J Introduction and Dictionary, Iverson Software Inc.
 (ISI), Toronto, Ontario, 1995.\SpecialChar ~

\layout Bibliography
\bibitem {Wirth}

Jensen K., and Wirth N., Pascal User Manual and Report, Springer, 1978.
\layout Bibliography
\bibitem {Krall00}

Krall, A., and Lelait, S., Compilation Techniques for Multimedia Processors,
 International Journal of Parallel Programming, Vol.
 28, No.
 4, pp 347-361, 2000.
 
\layout Bibliography
\bibitem {Leupers99}

Leupers, R., Compiler Optimization for Media Processors, EMMSEC 99/Sweden
 1999.
 
\layout Bibliography
\bibitem {Metcalf96}

Metcalf, M., and Reid., J., The F Programming Language, OUP, 1996.
 
\layout Bibliography
\bibitem {Peleg97}

Peleg, A., Wilke S., Weiser U., Intel MMX for Multimedia PCs, Comm.
 ACM, vol 40, no.
 1 1997.
 
\layout Bibliography
\bibitem {Sreraman00}

Srereman, N., and Govindarajan, G., A Vectorizing Compiler for Multimedia
 Extensions, International Journal of Parallel Programming, Vol.
 28, No.
 4, pp 363-400, 2000.
 
\the_end
