// \begin{verbatim}
Package ilcg;

Helpers
  letter = [['A'..'Z']+['a'..'z']];
  digit = ['0'..'9'];
  alphanum = [letter+['0'..'9']];
  cr = 13;
  lf = 10;
  tab = 9;

  eol = cr lf | cr | lf;        // This takes care of different platforms


  not_cr_lf = [[32..127] - [cr + lf]];
  exponent = ('e'|'E');
  /* fp='FP';gp='GP';*/
  quote = ''';
  all =[0..127];
  schar = [all-'''];
  sign = '+' | '-';
   
    not_star = [all - '*'];
    not_star_slash = [not_star - '/'];

Tokens
  
 /* terminals specifying data formats */
 octet = 'octet'; int8 = 'int8'; uint8 = 'uint8';
 halfword = 'halfword'; int16 = 'int16' ; uint16 = 'uint16' ;
 word = 'word'; int32 = 'int32' ; 
 uint32 = 'uint32' ; ieee32 = 'ieee32';
 doubleword = 'doubleword'; int64 = 'int64' ; 
 uint64 = 'uint64'; ieee64 = 'ieee64';
 quadword = 'quadword';
 function= 'function';
 procedure='procedure';
 returns ='returns';
/* terminals for describing new patterns */
 pattern = 'pattern';
 means = 'means';
  
 assembles = 'assembles'; 

/* terminals specifying operators */
 colon = ':';
 semicolon= ';';
 comma = ',';
 dot = '.' ;
 bra ='(';
 
 ket =')';
 plus = '+';
 cartesian = '#';
 equals = '=';
 le = '<=';
 ge='>=';
 lt='<';
 gt='>';
 ne='<>';
 minus = '-';
 times = '*';
 sideeffect='sideeffect';
 divide = 'div';
 and = 'AND';
 or = 'OR' ;
 xor = 'XOR';
 not = 'NOT';
 remainder = 'mod'; 
 store = 'store';
 deref = '^';
 ref='ref';
 const='const';
 reg= 'register';
 operation = 'operation';
 alias = 'alias';
 instruction = 'instruction';
 address = 'address';
 
 intlit = digit+;
 
 vbar = '|';
 sket=']';sbra='[';
 end='end';
 typetoken='type';
 mem='mem';
 instructionset='instructionset';
 string = quote schar+ quote;
/* identifiers come after reserved words in the grammar */
 identifier = letter alphanum*;
 exponentpart = exponent sign? digit+; 
 blank = (' '|cr|lf|tab)+;
 comment = '/*' not_star* '*'+ (not_star_slash not_star* '*'+)* '/';

Ignored Tokens 
	blank,comment;
Productions
 program = statementlist instructionlist;
 instructionlist =instructionset sbra alternatives sket;
/* non terminals specifying data formats */
 format = {octet} octet| {halfword} halfword |
          {word} word | {doubleword} doubleword |
          {quadword} quadword|{tformat}tformat;
 
 
/* non terminals corresponding to type descriptions */
 reference =   ref type ;
 type = {format} format |{typeid}typeid;
 tformat = {signed} signed|{unsigned}unsigned|{ieee32}ieee32|{ieee63}ieee64;
 signed = int32 | {int8} int8 | {int16} int16 | {int64} int64;
 unsigned = uint32 | {uint8} uint8 | {uint16} uint16 | 
            {uint64} uint64;
   

/* non terminals corresponding to typed values */
 value = {refval}refval |{rhs}rhs|
	{dyadic} dyadic bra [left]:value comma [right]:value ket|
	{monadic}monadic bra value ket ;
 rhs=	{number}number| {cast}bra type ket value|{const}const identifier |
         {deref}deref  bra  refval ket;
    
 refval = loc| {refcast} bra reference ket loc;
 loc = {id}identifier|{memory}mem bra value ket ;
 /*predeclaredregister = {fp}fp|{gp}gp;*/
 number =  {reallit}reallit|
           {integer}intlit;
 reallit=[intpart]:intlit dot [fracpart]:intlit exponentpart?;
/* operators */ 
dyadic  = {plus} plus| {minus} minus | {identifier} identifier|
             	{times} times | {divide}  divide|{lt}lt|{gt}gt|
		{le}le|{ge}ge|{eq}equals|{ne}ne|
             	{remainder} remainder|{or}or|{and}and|{xor}xor;
monadic ={not}not;
/* register declaration */
registerdecl = reg format identifier assembles sbra string sket  ;
aliasdecl =  
          alias reg format 
          [child]:identifier equals [parent]:identifier bra [lowbit]:intlit colon [highbit]:intlit ket
          assembles sbra string sket;
	 
opdecl = operation identifier means operator assembles sbra string sket;
operator = {plus}plus|{minus}minus|{times}times|{divide} divide|
           {remainder}remainder|{or}or|{and}and|{xor}xor;

/* pattern declarations */
assign = store type bra refval comma value ket;
meaning = {value}value|{assign}assign;
patterndecl = pattern identifier paramlist means sbra meaning sket assemblesto sideeffects
               |
              {alternatives} pattern identifier means sbra alternatives sket;

paramlist = bra param paramtail* ket;
param = typeid identifier|{typeparam} typetoken identifier;
typeid = identifier;
paramtail = comma param;
alternatives = type alts*; 
alts = vbar type;
asideeffect=   sideeffect  returnval;
sideeffects = asideeffect*;
assemblesto=assembles sbra assemblypattern sket;
assemblypattern = assemblertoken*;
assemblertoken = {string} string | {identifier} identifier;
returnval = returns identifier;
/* statements */
statement = {aliasdecl} aliasdecl|
            {registerdecl} registerdecl|
		{addressmode} address patterndecl|
		{instructionformat}procedure patterndecl|
		{instructionfunction}function pattern identifier paramlist means sbra meaning sket 
 		returnval assemblesto sideeffects|
		{opdecl}opdecl|
		{typerename}typetoken format equals identifier|
		{patterndecl} patterndecl;
statementlist = statement statements*;
statements = semicolon statement;


// \end{verbatim}


