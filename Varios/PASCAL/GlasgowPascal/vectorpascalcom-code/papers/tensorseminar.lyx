#LyX 1.5.6 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass beamer
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation landscape
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Automatic SIMD/MIMD Compilation of tensor expressions
\end_layout

\begin_layout Author
Paul Cockshott
\end_layout

\begin_layout Institute
University of Glasgow
\end_layout

\begin_layout Standard

\family sans
\size small
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="8">
<features>
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<row endhead="true">
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
 cpu
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
year
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
regs
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
clock
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
clock/ins
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
cores
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
speed
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
datarate
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
bits
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
Mhz
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
Mips
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
MB/s
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
4004
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
1971
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
4
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
0.1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
0.0125
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
0.00625
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
 8080
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
1974
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
8
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
2
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
0.25
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
0.25
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
 8086
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
1978
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
16
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
5
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
0.33
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
0.66
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
 386
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
1985
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
32
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
16
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
5.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
20
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
 MMX 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
1997
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
64
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
200
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
0.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
1
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
400 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
3,200
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
Harpertown
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
2007
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
128
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
3400
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
0.25
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
54,400
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
870,400
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
Larrabee
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
2010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
512
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
2000
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
0.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
64,000
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\size small
4096,000
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Itemize
Instruction speed 
\begin_inset Formula $s_{i}=pc/i$
\end_inset

 where 
\begin_inset Formula $p$
\end_inset

 is processor cores, 
\begin_inset Formula $c$
\end_inset

 is the clock and 
\begin_inset Formula $i$
\end_inset

 clocks per instruction
\end_layout

\begin_layout Itemize
data throughput 
\begin_inset Formula $d=s_{i}w$
\end_inset

 where 
\begin_inset Formula $w$
\end_inset

 is the register width in bytes
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Growth of clock speed versus maximum throughput
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename perfplot.eps
	scale 70

\end_inset


\end_layout

\begin_layout Standard
Note how much of the increase in performance comes from increasing data
 parallelism.
\end_layout

\begin_layout Standard
Key points: use the wide data registers, use multiple cores.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame

\emph on
Importance of Graphics Operations
\end_layout

\begin_layout Standard
The driving force in processor data throughput over the last decade has
 been graphics.
 We can see 4 stages in this evolution:
\end_layout

\begin_layout Enumerate
Intel introduce saturated parallel arithmetic for working on pixel arrays
 with the MMX instruction set.
 
\end_layout

\begin_layout Enumerate
AMD and Intel introduce parallel operations on 32 bit floats for working
 on co-ordinate transformations for 3D graphics in games.
\end_layout

\begin_layout Enumerate
Nvida and ATI develop programmable Miltie-core GPUs able to operate on 32
 bit floats for games graphics.
\end_layout

\begin_layout Enumerate
Sony
\begin_inset Foot
status collapsed

\begin_layout Standard
Cell
\end_layout

\end_inset

and Intel
\begin_inset Foot
status collapsed

\begin_layout Standard
Larrabee
\end_layout

\end_inset

 respond by developing general purpose multicore CPUs optimised for 32bit
 floating point vector operations.
\end_layout

\begin_layout BeginFrame

\emph on
Use the right types!
\end_layout

\begin_layout Standard
To get the best from current processors you have to be able to make use
 of the data-types that they perform best on : 8 bit saturated integers,
 and 32 bit floats.
 Parallel operations are possible on other data-types but the gain in throughput
 is not nearly so great.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame

\emph on
Operate on whole arrays at once
\end_layout

\begin_layout Standard
The hardware is capable of operating on a vector of numbers in a single
 instruction
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="5">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
processor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
byte
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
float
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
double
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Vector Lengths
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
MMX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
-
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
SSE2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
2
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Cell
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
2
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Larrabee
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
16
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
8
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Thus a programming language for this sort of machine should support whole
 array operations.
 Provided that the programmer writes the operation as operating on a whole
 array the compiler should select the best vector instructions to achieve
 this on a given architecture.
\end_layout

\begin_layout Standard

\emph on
Use multiple cores
\end_layout

\begin_layout Standard
If the CPU has multiple cores the compiler should parallelise across these
 without the programmer altering their source code.
 
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame

\emph on
Working with Pixels
\end_layout

\begin_layout Standard
When operating with 8 bit pixels one has the problem that arithmetic operations
 can wrap round.
 Thus adding two bright pixels can lead to a result that is dark.
 So one has to put in guards against this.
 Consider adding two arrays of pixels and making sure that we never get
 any pixels wrapping round in C: 
\end_layout

\begin_layout LyX-Code

\size footnotesize
#define LEN 6400
\end_layout

\begin_layout LyX-Code

\size footnotesize
#define CNT 100000
\end_layout

\begin_layout LyX-Code

\size footnotesize
main()
\end_layout

\begin_layout LyX-Code

\size footnotesize
{
\end_layout

\begin_layout LyX-Code

\size footnotesize
  unsigned char v1[LEN],v2[LEN],v3[LEN];
\end_layout

\begin_layout LyX-Code

\size footnotesize
  int i,j,t;
\end_layout

\begin_layout LyX-Code

\size footnotesize
  for(i=0;i<CNT;i++)
\end_layout

\begin_layout LyX-Code

\size footnotesize
     for (j=0;j<LEN;j++) {t=v2[j]+v1[j];if( t>255)t=255; v3[j]=t;}
\end_layout

\begin_layout LyX-Code

\size footnotesize
}
\end_layout

\begin_layout LyX-Code
[wpc@maui tests]$ time C/a.out
\end_layout

\begin_layout LyX-Code
real    0m2.854s
\end_layout

\begin_layout LyX-Code
user    0m2.813s
\end_layout

\begin_layout LyX-Code
sys     0m0.004s
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame

\emph on
Doing it with the hardware
\end_layout

\begin_layout Standard
Intel provide an instruction PADDUSB which can add 8 pixels in one cycle
 simultaneously ensuring that there is no wrap around.
 If we code the same program up in assembler we get much better performance.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Assembler
\end_layout

\begin_layout LyX-Code

\size footnotesize
SECTION .text ;
\end_layout

\begin_layout LyX-Code

\size footnotesize
        global  main 
\end_layout

\begin_layout LyX-Code

\size footnotesize
LEN equ 6400
\end_layout

\begin_layout LyX-Code

\size footnotesize
 main: enter  LEN*3,0
\end_layout

\begin_layout LyX-Code

\size footnotesize
    mov ebx,100000     ; perform test 100000 times for timing
\end_layout

\begin_layout LyX-Code

\size footnotesize
l0:
\end_layout

\begin_layout LyX-Code

\size footnotesize
    mov esi,0     ; set esi registers to index the elements
\end_layout

\begin_layout LyX-Code

\size footnotesize
    mov ecx,LEN/8     ; set up the count byte
\end_layout

\begin_layout LyX-Code

\size footnotesize
l1: movq mm0,[esi+ebp-LEN]    ; load 8 bytes
\end_layout

\begin_layout LyX-Code

\size footnotesize
    paddusb mm0,[esi+ebp-2*LEN] ; packed unsigned add bytes
\end_layout

\begin_layout LyX-Code

\size footnotesize
    movq [esi+ebp-3*LEN],mm0    ; store 8 byte result
\end_layout

\begin_layout LyX-Code

\size footnotesize
    add esi,8         ; inc dest pntr
\end_layout

\begin_layout LyX-Code

\size footnotesize
    loop l1           ; repeat for the rest of the array
\end_layout

\begin_layout LyX-Code

\size footnotesize
    dec ebx
\end_layout

\begin_layout LyX-Code

\size footnotesize
    jnz l0
\end_layout

\begin_layout LyX-Code

\size footnotesize
    mov eax,0
\end_layout

\begin_layout LyX-Code

\size footnotesize
    leave
\end_layout

\begin_layout LyX-Code

\size footnotesize
    ret
\end_layout

\begin_layout LyX-Code

\size footnotesize
[wpc@maui tests]$ time asm/a.out
\end_layout

\begin_layout LyX-Code

\size footnotesize
real    0m0.209s
\end_layout

\begin_layout LyX-Code

\size footnotesize
user    0m0.181s
\end_layout

\begin_layout LyX-Code

\size footnotesize
sys     0m0.003s
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Why the difference?
\end_layout

\begin_layout Itemize
Semantic gap between source language and hardware capabilities.
 
\end_layout

\begin_deeper
\begin_layout Itemize
C is a von Neuman single word at a time language.
\end_layout

\begin_layout Itemize
Machine is a vector machine.
\end_layout

\end_deeper
\begin_layout Itemize
Compiler tends to select the scalar instructions not the vector ones.
\end_layout

\begin_layout Itemize
Operator set of the language does not match the operator set of the hardware
 -- it is less powerful than the hardware.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Now lets use an array language compiler
\end_layout

\begin_layout LyX-Code

\color red
program
\color inherit
 vecadd;
\end_layout

\begin_layout LyX-Code

\color red
type
\color inherit
 byte=0..255;
\end_layout

\begin_layout LyX-Code

\color red
var
\color inherit
 v1,v2,v3:
\color red
array
\color inherit
[0..6399]
\color red
of
\color inherit
 byte;
\end_layout

\begin_layout LyX-Code
    i:
\color red
integer
\color inherit
;
\end_layout

\begin_layout LyX-Code

\color red
begin
\end_layout

\begin_layout LyX-Code
        
\color red
for
\color inherit
 i:= 1 
\color red
to
\color inherit
 100000 
\color red
do
\color inherit
 v3:=v1 +: v2;
\end_layout

\begin_layout LyX-Code
        { 
\color green
+: is the saturated add operation
\color inherit
 }
\end_layout

\begin_layout LyX-Code

\color red
end
\color inherit
.
\end_layout

\begin_layout LyX-Code
[wpc@maui tests]$ time vecadd
\end_layout

\begin_layout LyX-Code
real    0m0.094s
\end_layout

\begin_layout LyX-Code
user    0m0.091s
\end_layout

\begin_layout LyX-Code
sys     0m0.005s
\end_layout

\begin_layout Standard
So the array language code is about twice the speed as the assembler.
 
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame

\emph on
Vector Pascal
\end_layout

\begin_layout Standard
I will focus on the language Vector Pascal, an extension of Pascal that
 allows whole array operations, and which both vectorises these and parallelises
 them across multiple CPUs.
 It was developed specifically to take advantage of SIMD processors whilst
 maintaining backward compatibility with legacy Pascal code.
 It stands in a similar relationship to ISO Pascal as FORTRAN 95 stands
 to FORTRAN 77.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Extend array semantics
\end_layout

\begin_layout Standard
Standard Pascal allows assignment of whole arrays.
 Vector Pascal extends this to allow consistent use of mixed rank expressions
 on the right hand side of an assignment.
 For example, given:
\end_layout

\begin_layout LyX-Code
r1:
\color red
array
\color inherit
[0..7] 
\color red
of real
\color inherit
;
\end_layout

\begin_layout LyX-Code
r2:
\color red
array
\color inherit
[0..7,0..7] 
\color red
of real
\end_layout

\begin_layout Standard
then we can write: 
\end_layout

\begin_layout LyX-Code

\family roman
1.

\family default
 
\family typewriter
r1:= 1/2; 
\newline

\family default
 
\family roman
2.

\family default
 
\family typewriter
r2:= r1*3; 
\newline

\family default
 
\family roman
3.

\family default
 
\family typewriter
r1:= 
\backslash
+ r2;       {
\backslash

\begin_inset Formula $\odot$
\end_inset

 reduces using operator 
\begin_inset Formula $\odot$
\end_inset

}
\newline

\family default
 
\family roman
4.

\family default
 
\family typewriter
r1:= r1+r2[1];
\family default
 
\end_layout

\begin_layout Standard
Line 1 assign 
\family typewriter
0.5
\family default
 to each element of 
\family typewriter
r1
\family default
.
 
\end_layout

\begin_layout Standard
Line 2 assign 
\family typewriter
1.5
\family default
 to every element of 
\family typewriter
r2
\family default
.
 
\end_layout

\begin_layout Standard
In line 3, 
\family typewriter
r1
\family default
 gets the totals along the rows of 
\family typewriter
r2
\family default
.
\end_layout

\begin_layout Standard
In line 4, 
\family typewriter
r1
\family default
 is incremented with the corresponding elements of row 1 of 
\family typewriter
r2
\family default
.
 
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Data reformatting
\end_layout

\begin_layout Standard
Given two con-formant matrices a, b
\end_layout

\begin_layout Standard
the statement
\end_layout

\begin_layout LyX-Code
a:= 
\color red
trans
\color inherit
 b;
\end_layout

\begin_layout Standard
will transpose the matrix b into a.
\end_layout

\begin_layout Standard
For more general reorganisations you can permute the implicit indices thus
\end_layout

\begin_layout LyX-Code
a:=
\color red
perm
\color inherit
[1,0] b ;{ equivalent to a:= trans b }
\end_layout

\begin_layout LyX-Code
z:=
\color red
perm
\color inherit
[1,2,0] y;
\end_layout

\begin_layout Standard
In the second case z and y must be 3 d arrays and the result is such that
 z[i,j,k]=y[j,k,i]
\end_layout

\begin_layout Standard
Given 
\family typewriter
\size small
a:
\size default
\color red
array
\size small
\color inherit
[0..10,0..15] 
\size default
\color red
of
\size small
\color inherit
 t
\family default
\size default
; then 
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
a[1]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
array
\size small
\color inherit
 [0..15]
\size default
\color red
 of
\size small
\color inherit
 t
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
a[1..2]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
array
\size small
\color inherit
 [0..1,0..15]
\size default
\color red
 of
\size small
\color inherit
 t
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
a[][1]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
array
\size small
\color inherit
[0..10,0..0] 
\size default
\color red
of
\size small
\color inherit
 t
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\size small
a[1..2,4..6]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\family typewriter
\color red
array
\size small
\color inherit
[0..1,0..3] 
\size default
\color red
of
\size small
\color inherit
 t
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Equivalent loops
\end_layout

\begin_layout Standard
These are defined to be equivalent to the following standard Pascal loops:
 
\end_layout

\begin_layout LyX-Code

\family roman
1'.

\family default
 
\color red
for
\family typewriter
\color inherit
 
\begin_inset Formula $\iota_{0}$
\end_inset

:=0 
\family default
\color red
to
\family typewriter
\color inherit
 7 
\family default
\color red
do
\family typewriter
\color inherit
 r1[
\begin_inset Formula $\iota_{0}$
\end_inset

]:=1/2; 
\newline

\family roman
2'.

\family default
 
\color red
for
\family typewriter
\color inherit
 
\begin_inset Formula $\iota_{0}$
\end_inset

:=0 
\family default
\color red
to
\family typewriter
\color inherit
 7 
\family default
\color red
do
\family typewriter
\color inherit
 
\end_layout

\begin_layout LyX-Code

\family typewriter
    
\family default
\color red
for
\family typewriter
\color inherit
 
\begin_inset Formula $\iota_{1}$
\end_inset

:=0 
\family default
\color red
to
\family typewriter
\color inherit
 7 
\family default
\color red
do
\family typewriter
\color inherit
 r2[
\begin_inset Formula $\iota_{0},\iota_{1}$
\end_inset

]:=r1[
\begin_inset Formula $\iota_{1}$
\end_inset

]*3;
\family default
 
\end_layout

\begin_layout LyX-Code

\family roman
3'.

\family default
 
\color red
for
\family typewriter
\color inherit
 
\begin_inset Formula $\iota_{0}$
\end_inset

:=0 
\family default
\color red
to
\family typewriter
\color inherit
 7 
\family default
\color red
do
\family typewriter
\color inherit
 
\end_layout

\begin_layout LyX-Code

\family typewriter
   
\family default
\color red
begin
\family typewriter
\color inherit
 
\newline
      
\begin_inset Formula $t$
\end_inset

:=0; 
\newline
      
\family default
\color red
for
\family typewriter
\color inherit
 
\begin_inset Formula $\iota_{1}$
\end_inset

:=7 
\family default
\color red
downto
\family typewriter
\color inherit
 0 
\family default
\color red
do
\family typewriter
\color inherit
 t:=r2[
\begin_inset Formula $\iota_{0},\iota_{1}$
\end_inset

]+t;
\newline
      r1[
\begin_inset Formula $\iota_{0}$
\end_inset

]:=
\begin_inset Formula $t$
\end_inset

; 
\newline
   
\family default
\color red
end
\family typewriter
\color inherit
;
\end_layout

\begin_layout LyX-Code

\family roman
4'.

\family default
 
\color red
for
\family typewriter
\color inherit
 
\begin_inset Formula $\iota_{0}$
\end_inset

:=0 
\family default
\color red
to
\family typewriter
\color inherit
 7 
\family default
\color red
do
\family typewriter
\color inherit
 r1[
\begin_inset Formula $\iota_{0}$
\end_inset

]:=r1[
\begin_inset Formula $\iota_{0}$
\end_inset

]+r2[1,
\begin_inset Formula $\iota_{0}$
\end_inset

];
\family default
 
\end_layout

\begin_layout Standard
The compiler has to generate an implicit loop
\begin_inset LatexCommand index
name "loop"

\end_inset

.
 In the above 
\family typewriter

\begin_inset Formula $\iota_{0},\iota_{1}$
\end_inset

,
\begin_inset Formula $t$
\end_inset


\family default
 are temporary variables created by the compiler.
 The implicit indices 
\family typewriter

\begin_inset Formula $\iota_{0},\iota_{1}$
\end_inset


\family default
 etc are accessible to a coder using the syntax 
\family typewriter
iota[0], iota[1]
\family default
 etc.
 
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Implicit mapping
\end_layout

\begin_layout Standard
Maps are implicitly defined on both operators and functions.
 
\end_layout

\begin_layout Standard
If 
\family typewriter
f
\family default
 is a function or unary operator mapping from type 
\begin_inset Formula $T_{1}$
\end_inset

 to type 
\begin_inset Formula $T_{2}$
\end_inset

 and 
\family typewriter
x
\family default
 : 
\family typewriter
\color red
array of
\family default
\color inherit
 
\begin_inset Formula $T_{1}$
\end_inset

 
\end_layout

\begin_layout Standard
then 
\family typewriter
a:=f(x)
\family default
 assigns an array of 
\begin_inset Formula $T_{2}$
\end_inset

 such that 
\family typewriter
a[i]=f(x[i])
\family default
.
 
\end_layout

\begin_layout Standard
Similarly if we have 
\family typewriter
g(p,q:
\family default

\begin_inset Formula $T_{1}$
\end_inset


\family typewriter
):
\family default
 
\begin_inset Formula $T_{2}$
\end_inset

,
\end_layout

\begin_layout Standard
then 
\family typewriter
a:=g(x,y)
\family default
 
\end_layout

\begin_layout Standard
for 
\family typewriter
x,y:
\color red
array of
\family default
\color inherit
 
\begin_inset Formula $T_{1}$
\end_inset

 
\end_layout

\begin_layout Standard
gives 
\family typewriter
a[i]=g(x[i],y[i])
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Method of translation
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="5">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
compiler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
code generator
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
machine
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
pascal source
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset Formula $\rightarrow$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ILCG tree
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset Formula $\rightarrow$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
specific
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
assembler
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
ILCG
\end_layout

\begin_layout Standard
Intermediate language for code generation.
\end_layout

\begin_layout Standard
It is a machine level array language which provides a semantic abstraction
 of current processors.
\end_layout

\begin_layout Enumerate
We can translate source code into ILCG.
\end_layout

\begin_layout Enumerate
We can describe hardware in ILCG too.
\end_layout

\begin_layout Standard
This allows the automatic construction of vectorising code generators.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Translation from source to ILCG
\end_layout

\begin_layout Standard
Pascal
\end_layout

\begin_layout LyX-Code
  v3:=v1 +: v2;
\end_layout

\begin_layout Standard
ILCG
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\size footnotesize
     mem(ref uint8 vector ( 6400 ),  +(PmainBase, -25600) ):=
\end_layout

\begin_layout LyX-Code

\size footnotesize
     +:(^(mem(ref uint8 vector ( 6400 ),  +(PmainBase, -12800))),
\end_layout

\begin_layout LyX-Code

\size footnotesize
        ^(mem(ref uint8 vector ( 6400 ),  +(PmainBase, -19200))))) 
\end_layout

\begin_layout Standard
Note that all operation are annotated with type information, and all variables
 are resolved to explicit address calculations in ILCG -- hence close to
 the machine, but it still allows expression of parallel operations.
\end_layout

\begin_layout Standard

\family typewriter
^
\family default
 is the dereference operation.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Key instruction specifications in ILCG
\end_layout

\begin_layout Standard
These are taken from the machine specification file gnuPentium.ilc
\end_layout

\begin_layout Standard
 saturated add  
\end_layout

\begin_layout LyX-Code

\color red
instruction pattern
\size footnotesize
\color inherit
 PADDUSB(mreg m, mrmaddrmode ma)     
\end_layout

\begin_layout LyX-Code

\size footnotesize
 
\size default
\color red
means
\size footnotesize
\color inherit
[(ref uint8 vector(8))m := 
\end_layout

\begin_layout LyX-Code

\size footnotesize
      (uint8 vector(8))+:((uint8 vector(8))^(m),
\end_layout

\begin_layout LyX-Code

\size footnotesize
                          (uint8 vector(8))^(ma))]      
\end_layout

\begin_layout LyX-Code

\size footnotesize
 
\size default
\color red
assembles
\size footnotesize
\color inherit
 ['paddusb 'ma ',' m];
\end_layout

\begin_layout Standard
 vector load and store 
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color red
instruction pattern
\color inherit
 MOVQL(maddrmode rm, mreg m)         
\end_layout

\begin_layout LyX-Code

\size footnotesize
  
\color red
means
\color inherit
[m := (doubleword)^(rm)]   
\end_layout

\begin_layout LyX-Code

\size footnotesize
  
\color red
assembles
\color inherit
['movq ' rm ',' m'
\backslash
n prefetchnta 128+'rm];
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color red
instruction pattern
\color inherit
 MOVQS(maddrmode rm, mreg m)         
\end_layout

\begin_layout LyX-Code

\size footnotesize
  
\color red
means
\color inherit
[(ref doubleword)rm:= ^(m)]        
\end_layout

\begin_layout LyX-Code

\size footnotesize
  
\color red
assembles
\color inherit
['movq 'm ','rm];
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Automatically build an optimising code generator
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="5">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
ILCG 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Java 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Compiler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Compiler
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Pentium.ilc
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset Formula $\rightarrow$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Pentium.java
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset Formula $\rightarrow$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Pentium.class
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Opteron.ilc
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset Formula $\rightarrow$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Opteron.java
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
\begin_inset Formula $\rightarrow$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Opteron.class
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
To port to new machines one has to write a machine description of that CPU
 in ILCG.
 We currently have the Intel and AMD machines post 486 plus Beta versions
 for the PlayStation 2 and PlayStation 3.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Vectorisation process
\end_layout

\begin_layout Standard
Basic array operation broken down into strides equal to the machine vector
 length.
 Then match to machine instructions to generate code.
\end_layout

\begin_layout Standard

\emph on
ILCG input to Opteron.class
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\size footnotesize
     mem(ref uint8 vector ( 6400 ),  +(PmainBase, -25600) ):=
\end_layout

\begin_layout LyX-Code

\size footnotesize
     +:(^(mem(ref uint8 vector ( 6400 ),  +(PmainBase, -12800))),
\end_layout

\begin_layout LyX-Code

\size footnotesize
        ^(mem(ref uint8 vector ( 6400 ),  +(PmainBase, -19200))))) 
\end_layout

\begin_layout Standard

\emph on
Assembler output by Opteron.class
\end_layout

\begin_layout LyX-Code

\size footnotesize
   leaq         0,%rdx             ; init loop counter
\end_layout

\begin_layout LyX-Code

\size footnotesize
l1:cmpq         $ 6399, %rdx
\end_layout

\begin_layout LyX-Code

\size footnotesize
   jg           l3
\end_layout

\begin_layout LyX-Code

\size footnotesize
   movq         PmainBase-12800(%rdx),%MM4
\end_layout

\begin_layout LyX-Code

\size footnotesize
   prefetchnta 128+PmainBase-12800(%rdx) ; get data 16 iterations  
\end_layout

\begin_layout LyX-Code

\size footnotesize
                                         ;  ahead into cache
\end_layout

\begin_layout LyX-Code

\size footnotesize
   paddusb     PmainBase-19200(%rdx),%MM4
\end_layout

\begin_layout LyX-Code

\size footnotesize
   movq        %MM4,PmainBase-25600(%rdx)
\end_layout

\begin_layout LyX-Code

\size footnotesize
   addq        $ 8,%rdx
\end_layout

\begin_layout LyX-Code

\size footnotesize
   jmp         l1
\end_layout

\begin_layout LyX-Code

\size footnotesize
l3:
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Extend to Multi-cores
\end_layout

\begin_layout Standard
Vectorisation works particularly well for one dimensional data in which
 there is locality of access, since the hardware wants to work on adjacent
 words.
\end_layout

\begin_layout Standard
But newer chips have multiple cores.
 For the Opteron, the 
\begin_inset Formula $\beta$
\end_inset

 version of our compiler will parallelise across multiple cores if the arrays
 being worked on are of rank 2 rather than 1.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
2 D example.
\end_layout

\begin_layout LyX-Code

\color red
procedure
\color inherit
 sub2d;
\end_layout

\begin_layout LyX-Code

\color red
type
\color inherit
 range=0..127; 
\end_layout

\begin_layout LyX-Code

\color red
var
\color inherit
 x,y,z:
\color red
array
\color inherit
[range,range] 
\color red
of real
\color inherit
;
\end_layout

\begin_layout LyX-Code

\color red
begin
\end_layout

\begin_layout LyX-Code
        x:=y-z;
\end_layout

\begin_layout LyX-Code

\color red
end
\color inherit
;
\end_layout

\begin_layout Standard
Top level ILCG translation when compiled for a dual core Opteron
\end_layout

\begin_layout LyX-Code

\size footnotesize
\color red
procedure
\size default
\color inherit
(sub2d,
\end_layout

\begin_layout LyX-Code
 
\size footnotesize
\color red
procedure
\color inherit
 (label12 
\color green
...
 see below
\color inherit
 )
\end_layout

\begin_layout LyX-Code
 post_job[label12,^(%rbp),1];   /* 
\size footnotesize
\color green
send to core 1
\size default
\color inherit
 */           
\end_layout

\begin_layout LyX-Code
 post_job[label12,^(%rbp),0];   /* 
\size footnotesize
\color green
send to core 0
\size default
\color inherit
 */             
\end_layout

\begin_layout LyX-Code
 wait_on_done[0];
\end_layout

\begin_layout LyX-Code
 wait_on_done[1];
\end_layout

\begin_layout LyX-Code
)
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Individual task procedure
\end_layout

\begin_layout Standard
The statement x:=y-z  is translated into a procedure that can run as a separate
 task, the ILCG has been simplified for comprehensibility! Note the stepsizes
 of 2 and 4 in the loops rather than 1
\end_layout

\begin_layout LyX-Code

\size scriptsize
\color red
procedure
\color inherit
 (label12 /* 
\color green
internal label
\color inherit
*/ ,
\end_layout

\begin_layout LyX-Code

\size scriptsize
 
\color red
for
\color inherit
(mem(+(^(%rbp),-24)),^(mem(+(^(%rbp),16))),127  ,   
\series bold
\color blue
2
\series default
\color inherit
, 
\end_layout

\begin_layout LyX-Code

\size scriptsize
     /*
\color green
iota [0]             task number        limit  step
\color inherit
*/
\end_layout

\begin_layout LyX-Code

\size scriptsize
  
\color red
var
\color inherit
(mem(+(^(%rbp),-32))),/* iota[1] */
\end_layout

\begin_layout LyX-Code

\size scriptsize
  
\color red
for
\color inherit
(mem(+(^(%rbp),-32)), 0    ,127,     
\series bold
\color blue
4
\series default
\color inherit
 ,
\end_layout

\begin_layout LyX-Code

\size scriptsize
     /*
\color green
iota [1]            start limit  step
\color inherit
*/
\end_layout

\begin_layout LyX-Code

\size scriptsize
   mem(ref ieee32 vector ( 4 ), /* 
\color green
x[iota[0],iota[1]]
\color inherit
 */
\end_layout

\begin_layout LyX-Code

\size scriptsize
       +(+(*(^(mem(+(^(%rbp),-24))),512), 
\end_layout

\begin_layout LyX-Code

\size scriptsize
         +(*(^(mem(+(^(%rbp),-32))),  4),-131072)), 
\end_layout

\begin_layout LyX-Code

\size scriptsize
           ^(mem(+(^(%rbp),-8))))):=
\end_layout

\begin_layout LyX-Code

\size scriptsize
     -(^(mem(ref ieee32 vector ( 4 ),/* 
\color green
y[iota[0],iota[1]]
\color inherit
 */
\end_layout

\begin_layout LyX-Code

\size scriptsize
       +(+(*(^(mem(+(^(%rbp),-24))),512), 
\end_layout

\begin_layout LyX-Code

\size scriptsize
         +(*(^(mem(+(^(%rbp),-32))),  4),-196608)), 
\end_layout

\begin_layout LyX-Code

\size scriptsize
           ^(mem(+(^(%rbp),-8)))))),
\end_layout

\begin_layout LyX-Code

\size scriptsize
       ^(mem(ref ieee32 vector ( 4 ),/* 
\color green
z[iota[0],iota[1]]
\color inherit
 */
\end_layout

\begin_layout LyX-Code

\size scriptsize
         +(+(*(^(mem(+(^(%rbp), -24))),512), 
\end_layout

\begin_layout LyX-Code

\size scriptsize
           +(*(^(mem(+(^(%rbp), -32))),  4),-262144)), 
\end_layout

\begin_layout LyX-Code

\size scriptsize
             ^(mem(+(^(%rbp),-8))))))))),
\end_layout

\begin_layout LyX-Code

\size scriptsize
 )      
\size default
               
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Memory organisation
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename taskstacks.pdf
	scale 60

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Practical Example
\end_layout

\begin_layout Standard
The example is to write a parallel image blurring program in Vector Pascal.
\end_layout

\begin_layout Standard
The blurring program uses a simple 3x3 separable kernel applied first to
 the rows and then the columns.
\end_layout

\begin_layout Standard
It should use the type 
\family typewriter
pixel
\family default
 for arithmetic since this maps to 8 bit fixed point numbers which can effective
ly use the MMX instructions.
\end_layout

\begin_layout Standard
It should be expressed in whole array operations if possible.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame

\emph on
Horizontal blur
\end_layout

\begin_layout Standard
Recall we can blur horizontally if
\end_layout

\begin_layout Standard
\begin_inset Formula $p'_{i}=0.25p_{i-1}+0.25p_{i+1}+0.5p_{i}$
\end_inset


\end_layout

\begin_layout Standard
So to form temporary images 
\begin_inset Formula $b,c$
\end_inset

 from image 
\begin_inset Formula $a$
\end_inset

 thus: 
\begin_inset Formula $b=0.5a,c=0.25a$
\end_inset


\end_layout

\begin_layout Standard
the horizontal blurred image is then 
\end_layout

\begin_layout Standard
\begin_inset Formula $b+ c$
\end_inset

 shifted left one 
\begin_inset Formula $+ c$
\end_inset

 shifted right one
\end_layout

\begin_layout Standard

\emph on
2D blur
\end_layout

\begin_layout Enumerate
blur horizontally
\end_layout

\begin_layout Enumerate
transpose
\end_layout

\begin_layout Enumerate
blur horizontally
\end_layout

\begin_layout Enumerate
transpose
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
blurplane
\end_layout

\begin_layout LyX-Code

\series bold
\color red
procedure
\series default
\color inherit
 blurplane(
\series bold
\color red
var
\series default
\color inherit
 inplane,outplane:plane);
\end_layout

\begin_layout LyX-Code
 
\series bold
\color red
var
\series default
\color inherit
 temp:^plane;
\end_layout

\begin_layout LyX-Code
 
\series bold
\color red
begin 
\end_layout

\begin_layout LyX-Code
  new(temp,maxrow,maxcol );  
\color green
{create buffer}
\end_layout

\begin_layout LyX-Code
  horizblur(inplane,temp^);
\end_layout

\begin_layout LyX-Code
  outplane:= 
\series bold
\color red
trans
\series default
\color inherit
 temp^;
\end_layout

\begin_layout LyX-Code
  horizblur( outplane,temp^);
\end_layout

\begin_layout LyX-Code
  outplane:= 
\series bold
\color red
trans
\series default
\color inherit
 temp^;
\end_layout

\begin_layout LyX-Code
  dispose(temp);
\end_layout

\begin_layout LyX-Code
 
\series bold
\color red
end
\series default
\color inherit
;   
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Horizblur
\end_layout

\begin_layout LyX-Code

\series bold
\color red
procedure
\series default
\color inherit
 horizblur(
\series bold
\color red
var
\series default
\color inherit
 inplane,outplane:plane);
\end_layout

\begin_layout LyX-Code

\series bold
\color red
 type
\series default
\color inherit
 tempplane=array[0..maxrow,0..maxcol+2] 
\series bold
\color red
of
\series default
\color inherit
 pixel;
\end_layout

\begin_layout LyX-Code
 
\series bold
\color red
var
\series default
\color inherit
 temp:^tempplane;
\end_layout

\begin_layout LyX-Code
     quarter,half:array[0..1024] 
\series bold
\color red
of
\series default
\color inherit
 pixel;
\end_layout

\begin_layout LyX-Code
 
\series bold
\color red
begin
\end_layout

\begin_layout LyX-Code
        quarter:=0.25;{ 
\color green
create vectors of pixels
\color inherit
 }
\end_layout

\begin_layout LyX-Code
        half:=0.5;    { 
\color green
to do parallel arithetic
\color inherit
 }
\end_layout

\begin_layout LyX-Code
        new(temp);       
\end_layout

\begin_layout LyX-Code
        temp^ [][1..
 maxrow+1]:= inplane * quarter;
\end_layout

\begin_layout LyX-Code
        outplane:=temp^  + temp^[ ][2..maxcol+2]
\end_layout

\begin_layout LyX-Code
                  +inplane * half ; 
\end_layout

\begin_layout LyX-Code
        dispose(temp); 
\end_layout

\begin_layout LyX-Code
 
\series bold
\color red
end
\series default
\color inherit
;
\end_layout

\begin_layout EndFrame

\end_layout

\end_body
\end_document
