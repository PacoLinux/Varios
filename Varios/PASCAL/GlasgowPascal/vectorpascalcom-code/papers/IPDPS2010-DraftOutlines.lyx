#LyX 1.6.0 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
A new Approach for Programming the Cell Processor
\end_layout

\begin_layout Abstract
The heterogeneous design of the Cell processor provides new challenges in
 porting languages such as Fortran , MATLAB and Vector Pascal (VP) which
 allow generalized array expressions.
 Our research project aimed at designing techniques that can implicitly
 exploit parallelism in intensive-data applications with the aim of reducing
 the execution time of the parallelized code.
 This paper introduces the part of this project that is aimed at developing
 automatic Vector Pascal parallelizing compilers for the Cell Broadband
 Engine (Cell BE).
 This part of the project is divided into two main phases: The first phase
 is porting Vector Pascal on the Cell BE using a virtual machine model to
 access the Cell BE accelerator processors.
 The novelty in this approach is the use of a virtual machine to access
 the Cell BE hardware.
 The second phase is developing and implementing a cost model, which the
 VP compiler can rely on to automatically decide if a given array expression
 is worth parallelizing or not.
 We will also persent  results that were obtained by executing the Vector
 Pascal programs on the Cell processor.
\end_layout

\begin_layout Section
Introduction 
\end_layout

\begin_layout Section
Background 
\end_layout

\begin_layout Subsection
CELL architecture 
\end_layout

\begin_layout Subsection
Vector Pascal 
\end_layout

\begin_layout Section
VP-Cell Compiler System 
\end_layout

\begin_layout Subsection
PowerPC Back-End compiler 
\end_layout

\begin_layout Subsection
VP-Cell VM 
\end_layout

\begin_layout Subsubsection
VM instructions 
\end_layout

\begin_layout Subsubsection
VM interpreter 
\end_layout

\begin_layout Subsection
Optimizations 
\end_layout

\begin_layout Subsubsection
Interpreter Pipelining 
\end_layout

\begin_layout Subsubsection
Data Alignment 
\end_layout

\begin_layout Subsection
Parallelization (to be briefly mentioned as part of the second phase) 
\end_layout

\begin_layout Section*
4.
 Preliminary Results 
\end_layout

\begin_layout Section*
5.
 Conclusion 
\end_layout

\end_body
\end_document
