   7 22FL    #OPT  K0PMSUMA=0
  11 22_=    #LIS  K0PMSUMA>K0POST>K0ALLGEO  
   4 23DW    #   
  15 23YG    #SEG  PMSUMA85                     [M.C.D. MANN 
  16 248# ...#     (C) COPYRIGHT INTERNATIONAL COMPUTERS LTD 1982
   4 24D6    #   
  18 24XQ    #     THIS SEGMENT PRINTS OUT THE POSTMORTEM SUMMARY LISTING
   4 25CB    #   
   9 25X2                   8HPMSUMA 
   4 26BL    #   
   9 26W=    #     ENTRY POINT TABLE 
   4 27*W    #   
  10 27TG     SEGENTRY K1PMSUMA,XK1PMSUMA
  10 28*6     SEGENTRY K2PMSUMA,XK2PMSUMA
  10 28SQ     SEGENTRY K3PMSUMA,XK3PMSUMA
  10 29#B     SEGENTRY K4PMSUMA,XK4PMSUMA
  20 29S2    JPMREL                           [THIS WORD IS UPDATED BY NEWFIXED  
  11 2=?L ...REL            +AENDCHAPS-DDATUM
   4 2=R=    #   
   4 2?=W    #   
   9 2?QG    XHEADA         7HINSTR: 
   9 2#=6    XHEADB         7HSUMMARY
  12 2#C# ...XSYSER         16HSYSTEM ERROR:  0  
   9 2#JG ...XF5PST         16HF5POST
  15 2#PQ    XHEADC         28HBROKE IN          AT ADDRESS  
   9 2*9B    XHEADD         8HOBEYING
   9 2*P2    XHEADE         8HGEOERR:
  10 2B8L    XHEADF         8H????????   
  14 2BN=    XHEADG         23HCONTENTS OF FX2 ILLEGAL   
  18 2C7W    XHEADH         39HFX2 DOES NOT POINT TO AN ACTIVITY BLOCK   
  12 2CMG    XHEADI         17HCURRENT ACTIVITY: 
  13 2D76    XHEADJ         47HJOB NAME,:USER NAME:  
  16 2DLQ    XHEADK         +30,30H_*CURRENT CHAPTER:          _*
  11 2F6B    XHEADL         14HACTIVITY NO.: 
  14 2FL2    XHEADM         24HFILES OPEN TO ACTIVITY:   
  20 2G5L    XHEADN         52HUSER.LOCAL NAME         REEL NO. GEN. NO. LANGUAGE
   9 2GK=                   4HMODE   
   5 2H4W    #SKI  G4
   4 2HJG    (   
  17 2J46    XHEADT         35H   GEORGE4 MARK  ISSUE   POSTMORTEM   
  18 2JHQ    XHEADU         48H  IDENTITY:             GEORGE4 LOADED AT 
   4 2K3B    )   
   5 2KH2    #SKI  G3
   4 2L2L    (   
  17 2LG=    XHEADT         35H   GEORGE3 MARK  ISSUE   POSTMORTEM   
   7 2LL7 ...#UNS  FSHTEST   
   4 2LQ4 ...#SKI
   7 2LT_ ...      FSHSKIP   
  18 2L_W    XHEADU         48H  IDENTITY:             GEORGE3 LOADED AT 
   6 2M3K ...#UNS FSHTEST
   4 2M5# ...#SKI
   4 2M73 ...(   
   7 2M8Q ...      FSHCODE  A
  18 2M=F ...XHEADU         48H  IDENTITY:              MASTER LOADED AT 
   7 2M#8 ...      FSHCODE  B
  18 2M*X ...XHEADU         48H  IDENTITY:              SLAVE  LOADED AT 
   4 2MCL ...)   
   4 2MFG    )   
   9 2M_6                   16H    ON
  16 2NDQ    XHEADV         32H_*JOB CURRENTLY BEING PROCESSED:  
   9 2NYB    XHEADY         +2,2H_*  
  14 2PD2    XHEADZ         +22,22H_*POSTMORTEM ENTERED_*
  12 2PXL    XHEADW         17HBREAK IN FILERING 
  13 2QC=    XHEADX         19HFCB BLOCK NOT FOUND   
  19 2QWW    MESSAGE        +0                   [ SAVES ADD. OF CTW MESSAGE 
  10 2RBG    XHJ            +XHEADJ+5.1  
   9 2RW6    XHT            +XHEADT.3
   8 2S*Q    XLINK          +0   
   8 2STB    XLINK3         +0   
   9 2T*2    XBJOBQ         +BJOBQ   
   9 2TSL    XBCHAP         +BCHAP   
  19 2W#=    XBACKCH        +0                  [SET=1 IF BACKWARD CHAINING  
  21 2WRW    XBACKPR        +0                  [TO H_LD START ADD. OF PREVIOUS BLOCK
  21 2X?G                                       [IN CHAIN. USED BY SEARCH ROUTINES   
  21 2XR6    XK             +0                  [TO CONTAIN CONTENTS OF K0-1 MASKED  
  20 2Y=Q    XKX            +0                  [DUPLICATE K0-1 FOR RELATIVISING 
  18 2YQB    X3             +0                  [ X3 PRESERVE ACCUMULATOR
   8 2_=2    XEIGHT         +8   
   8 2_PL    X45            +45  
   8 329=    XCOMCOL        4H,: 
  10 338G    PMSUMEND       +ZPMSUMA+1   
  10 33N6    SEGSFS         +ZPMSUMA+50  
   8 347Q    TACT           #60  
   8 34MB    TAMOP          #72  
   9 3572    TBAT           +BAT/64  
   9 35LL    TAPET          +APET/64 
   9 366=    TFCB           +FILE+FCB
  20 36KW    SAFR           +0                  [TO HOLD START ADDR. OF FILERING 
  21 375G    RBACK          +0                  [TO HOLD INDICATOR IF BREAK IN RING  
  21 37K6    RELE           +0                  [TO HOLD CURRENT ADDR. IN FILERING   
  20 384Q    RBACKPR        +0                  [TO HOLD START ADDR. OF PREVIOUS 
  21 38JB                                       [BLOCK IN FILERING USED BY RSEARCH   
  14 3942                                       [ROUTS.  
   8 39HL    SPACE          #20  
   9 3=3=    MASK           #17777777
   9 3=GW    MASK1          #77400000
   8 3?2G    MODEIND        +0   
   9 3?G6    NONE           4HNONE   
   4 3?_Q    #   
  13 3#FB    #     TAPE OF FILE OPEN MODE INDICATORS 
   4 3#_2    #   
   5 3*DL    MODETAB 
   9 3*Y=          PMFMODE  0,READ   
   9 3BCW          PMFMODE  1,READR  
   9 3BXG          PMFMODE  2,APPEND 
   9 3CC6          PMFMODE  3,WRITE  
   9 3CWQ          PMFMODE  4,GENERAL
   9 3DBB          PMFMODE  5,COPY   
   9 3DW2          PMFMODE  6,CLEAN  
  10 3F*L    MODETABEND     +MODETABEND  
   4 3FT=    #   
  19 3G#W    #     ROUTINE TO GET ADDRESS OF NEXT BLOCK IN CHAIN WHEN FORWARD
   7 3GSG    #     CHAINING  
  13 3H#6    #     ENTRY  X2=ADDRESS OF CURRENT BLOCK
  17 3HRQ    #     EXIT 0 &  IF FORWARD AND BACKWARD POINTERS CORRECT
  13 3J?B    #         X2,X3=ADDRESS OF NEXT BLOCK   
   8 3JR2    #            X0=LINK
  14 3K=L    #     EXIT 0 0  IF BREAK IN CHAIN DETECTED  
  13 3KQ=    #            X3=ADDRESS OF NEXT BLOCK   
  16 3L9W    #     (SEARCHA:ENTRY POINT FOR FIRST BLOCK ON CHAIN 
   4 3LPG    #   
   5 3M96    SEARCH  
  17 3MNQ          LDX   3  BPTR(2)             [J IF BPTR IN CURRENT
  16 3N8B          TXU   3  XBACKPR(1)          [BLOCK INCORRECT 
   8 3NN2          BCS      S1   
   5 3P7L    SEARCHA 
  18 3PM=          LDX   3  FPTR(2)             [GET ADD. OF NEXT BLOCK  
  20 3Q6W    S2    STO   2  XBACKPR(1)          [STORE ADDRESS OF CURRENT BLOCK  
   7 3QLG     PMCORES 3,S1   
  16 3R66          TXL   3  X45(1)              [J IF ADDR. < 45 
   8 3RKQ          BCS      S1   
   7 3S5B          LDX   2  3
   7 3SK2          EXIT  0  1
  16 3T4L    S1    EXIT  0  0                   [BREAK IN CHAIN  
   4 3TJ=    #   
  20 3W3W    #     ROUTINE TO GET ADDRESS OF NEXT BLOCK IN CHAIN, WHEN BACKWARD  
   7 3WHG    #     CHAINING  
  10 3X36    #     ENTRY & EXIT AS SEARCH
  16 3XGQ    #     (SEARCHC:ENTRY POINT FOR FIRST BLOCK ON CHAIN 
   4 3Y2B    #   
   5 3YG2    SEARCHB 
  17 3Y_L          LDX   3  FPTR(2)             [J IF FPTR IN CURRENT
  16 3_F=          TXU   3  XBACKPR(1)          [BLOCK INCORRECT 
   8 3_YW          BCS      S1   
   5 42DG    SEARCHC 
  18 42Y6          LDX   3  BPTR(2)             [GET ADD. OF NEXT BLOCK  
   8 43CQ          BRN      S2   
   4 43XB    #   
  20 44C2    #     ROUTINE TO GET ADDR. OF NEXT RING ELEMENT WHEN FORWARD RINGING
  14 44WL    #     ENTRY    X2=ADDR. OF CURRENT ELEMENT  
  13 45B=    #     EXIT 0 1 IF FPTR & BPTR CORRECT   
  13 45TW    #           X2,X3=ADDR. OF NEXT ELEMENT 
  14 46*G    #     EXIT 0 0 IF BREAK IN CHAIN DETECTED   
  13 46T6    #              X3=ADDR. OF NEXT ELEMENT 
  17 47#Q    #     (RSEARCHA:ENTRY POINT FOR INITIAL ELEMENT ADDR.)  
   4 47SB    #   
   5 48#2    RSEARCH 
   8 48RL          LDX   3  1(2) 
  18 49?=          TXU   3  RBACKPR(1)          [J IF BACKWARD PNTR. TO  
  19 49QW          BCS      R1                  [CURRENT ELEMENT INCORRECT   
   5 4==G    RSEARCHA
  17 4=Q6          LDX   3  0(2)                [GET ADDR. OF NEXT   
  20 4?9Q    R2    STO   2  RBACKPR(1)          [STORE ADDRESS OF CURRENT ELEMENT
   7 4?PB     PMCORES 3,R1   
   9 4#92          TXL   3  X45(1)   
   8 4#NL          BCS      R1   
   7 4*8=          LDX   2  3
   7 4*MW          EXIT  0  1
  16 4B7G    R1    EXIT  0  0                   [BREAK IN CHAIN  
   4 4BM6    #   
  21 4C6Q    #     ROUTINE TO GET ADDR. OF NEXT RING ELEMENT WHEN BACKWARD RINGING   
  12 4CLB    #     ENTRY & EXIT AS FOR RSEARCH   
  17 4D62    #     (RSEARCHC:ENTRY POINT FOR INITIAL ELEMENT ADDR.   
   4 4DKL    #   
   5 4F5=    RSEARCHB
  18 4FJW          LDX   3  0(2)                [J IF BACKWARD POINTER OF
  19 4G4G          TXU   3  RBACKPR(1)          [CURRENT ELEMENT INCORRECT   
   8 4GJ6          BCS      R1   
   5 4H3Q    RSEARCHC
  18 4HHB          LDX   3  1(2)                [NEXT RING ELEMENT ADDR. 
   8 4J32          BRN      R2   
   4 4JGL    #   
   4 4K2=    #   
  20 4KFW    #     ROUTINE TO GET CURRENT JOB AND USER NAME AND STORE IN OUTPUT  
   7 4K_G    #     MESSAGES  
   8 4LF6    #     EXIT   X0=LINK
  16 4LYQ    #            X3=NO OF CHARS. IN JOB NAME,:USER NAME 
  20 4MDB    #              JOB & USER NAMES INSERTED IN OUTPUT MESSAGES STARTING
  12 4MY2    #              AT XHEADJ & XHEADK   
  17 4NCL    #              'NONE' INSERTED IF NO JOB OR USER NAME   
  13 4NX=    #            ALL ACCUMULATORS UNDEFINED 
   4 4PBW    #   
   5 4PWG    USERJOB 
  15 4QB6          STO   0  XLINK(1)            [STORE LINK  
   8 4QTQ          LDX   3  FX2  
   7 4R*B     PMCORES 3,U5   
  16 4RT2          LDCH  2  ATYPE(3)            [GET TYPE VALUE  
  15 4S#L          LDX   7  JOBNO(3)            [J IF JOBNO=0
   8 4SS=          BZE   7  U5   
  18 4T?W          TXL   2  TACT(1)             [TEST AND J IF FX2 DOES  
  20 4TRG          BCS      U5                  [NOT POINT AT AN ACTIVITY BLOCK  
   9 4W?6          TXU   2  TAMOP(1) 
  17 4WQQ          BCC      U5                  [J IF AMOP ACTIVITY  
   9 4X=B          TXU   2  TBAT(1)  
  17 4XQ2          BCC      U5                  [J IF BAT ACTIVITY   
  19 4Y9L          LDN   2  BJOBQ               [GET BASE ADDRESS OF CHAIN   
  10 4YP=          STOZ     XBACKCH(1)   
   9 4_8W          CALL  0  SEARCHA  
  17 4_NG          BRN      U6                  [J IF BREAK IN CHAIN 
   8 5286          BRN      U3   
   9 52MQ    U1    LDN   3  SEARCH(1)
  10 537B          LDX   7  XBACKCH(1)   
  18 53M2          BZE   7  U2                  [J IF FORWARD CHAINING   
  10 546L          LDN   3  SEARCHB(1)   
  21 54L=    U2    CALL  0  (3)                 [ROUTINE TO GET ADD. OF NEXT BLOCK   
  17 555W          BRN      U6                  [J IF BREAK IN CHAIN 
   9 55KG    U3    TXU   2  XBJOBQ(1)
  18 5656          BCC      U5                  [J IF END OF JOBQ REACHED
  18 56JQ          LDX   7  JOBNUM(2)           [TEST IF JOB BLOCK FOR   
   8 574B          SMO      FX2  
  16 57J2          TXU   7  JOBNO               [CURRENT ACTIVIY 
  14 583L          BCS      U1                  [J IF NOT
  16 58H=          LDX   1  XHJ(1)              [OUTPUT BUFFER   
   8 592W          ADX   1  FXPM1
  14 59GG          LDN   3  JNAME(2)            [JOB NAME
  15 5=26          LDN   6  12                  [CHAR. COUNT 
   8 5=FQ    U8    LDCH  5  0(3) 
   8 5=_B          SMO      FXPM1
  19 5?F2          TXU   5  SPACE               [J IF SPACE CHAR. ENCOUNTERED
   8 5?YL          BCC      U4   
  20 5#D=          DCH   5  0(1)                [INSERT JOB NAME IN OUTPUT BUFFER
   7 5#XW          BCHX  1  /
   7 5*CG          BCHX  3  /
  18 5*X6          BCT   6  U8                  [J IF NOT END OF JOB NAME
   8 5BBQ    U4    SBN   6  26   
  21 5BWB          NGX   3  6                   [COUNT OF CHARS. IN JOB,:USER NAME   
   8 5CB2          SMO      FXPM1
  19 5CTL          LDN   0  XCOMCOL             [MOVE ',:' INTO OUTPUT BUFFER
   7 5D*=          MVCH  0  2
  21 5DSW          LDN   0  JUSER(2)            [MOVE USER NAME INTI OUTPUT BUFFER   
   8 5F#G          MVCH  0  12   
   8 5FS6          LDX   1  FXPM1
  15 5G?Q    U7    LDX   0  XLINK(1)            [RESTORE LINK
   7 5GRB          EXIT  0  0
   9 5H?2    U5    LDN   4  NONE(1)  
  16 5HQL          LDX   5  XHJ(1)              [MOVE 'NONE' INTO
   7 5J==          ADX   5  1
  16 5JPW          MVCH  4  4                   [OUTPUT BUFFER   
  16 5K9G          LDN   3  4                   [COUNT OF CHARS. 
   8 5KP6          BRN      U7   
  10 5L8Q    U6    LDX   7  XBACKCH(1)   
  20 5LNB          BNZ   7  U5                  [J IF ALREADY BACKWARD CHAINING  
   7 5M82          LDN   7  1
  20 5MML          STO   7  XBACKCH(1)          [OTHERWISE SET BACKWARD CHAINING 
  20 5N7=          LDN   2  BJOBQ               [INDICATOR AND START S_ARCHING   
  17 5NLW          CALL  0  SEARCHC             [FROM BACK OF CHAIN  
  16 5P6G          BRN      U5                  [BREAK IN CHAIN  
   8 5PL6          BRN      U3   
   4 5Q5Q    #   
  14 5QKB    #     ROUTINE TO SET UP 1ST LINE OF SUMMARY 
   9 5R52    #     ENTRY    X0=LINK  
  13 5RJL    #           JPMOD=PRINT BUFFER MODIFIER 
  12 5S4=    #     EXIT     ALL ACCS. UNDEFINED  
  20 5SHW    #              1ST LINE OF SUMMARY SET UP IN CURRENT PRINT BUFFER   
  15 5T3G    #           JPMOD=UPDATE PRINT BUFFER MODIFIER  
   4 5TH6    #   
   5 5W2Q    SUMLINE 
  15 5WGB          STO   0  XLINK(1)            [STORE LINK  
   9 5X22          LDX   5  GONRDUMP 
   9 5XFL          ANDX  5  MASK(1)  
   8 5X_=          BZE   5  SUM1 
   7 5YDW          SBN   5  1
  19 5YYG    SUM1  STO   5  XK(1)               [STORE MASKED VERSION OF K0-1
  20 5_D6          STO   5  XKX(1)              [STORE ADDRESS TO BE RELATIVISED 
   9 5_XQ          LDN   3  XHEADC(1)
  16 62CB          LDX   4  JPMOD               [MOVE FIRST HALF 
  16 62X2          ADN   4  1                   [OF NEXT HEADING 
  17 63BL          MVCH  3  28                  [INTO PRINT BUFFER   
  18 63W=          STO   4  JPMOD               [UPDATE PRINT BUFFER MOD.
   8 64*W          CALL  7  (JUP)
   8 64TG                   +1   
  21 65*6    #              BUFFER MOD POINTS TO START OF BREAK ADDRESS IN HEADING   
   7 65SQ          LDX   3  5
   7 66#B     PMCORES 3,SF3  
  19 66S2 ...      TXL   3  ENDFIX            [TEST ADDRESS IS IN FIXED CORE 
  18 67?L          BCS      SF1                 [J IF ADD IN FIXED CORE  
   4 67R=    #   
  17 68=W    #     CODING TO FIND NAME OF CHAPTER CONTAINING BREAK   
   4 68QG    #   
   8 69=6          LDN   2  BCHAP
  21 69PQ          CALL  0  SEARCHA             [GET ADD. OF FIRST BLOCK IN CHAPTER  
  19 6=9B          BRN      SUM6                [CHAIN. J IF BREAK IN CHAIN  
   8 6=P2          BRN      SUM4 
   9 6?8L    SUM2  LDN   3  SEARCH(1)
  10 6?N=          LDX   7  XBACKCH(1)   
  18 6#7W          BZE   7  SUM3                [J IF FORWARD CHAINING   
  10 6#MG          LDN   3  SEARCHB(1)   
  21 6*76    SUM3  CALL  0  (3)                 [GET ADDR  OF NEXT BLOCK IN CHAPTER  
  20 6*LQ          BRN      SUM6                [CHAIN AND J IF BREAK IN CHAIN   
   9 6B6B    SUM4  TXU   2  XBCHAP(1)
  19 6BL2          BCC      SUM7                [J IF POINTS TO BASE IN CHAIN
  19 6C5L          ADN   3  A1-1                [GET START ADD. OF CHAPTER   
  18 6CK=          TXL   3  XK(1)               [J IF K0-1 POINTS BEFORE 
   8 6D4W          BCC      SUM2 
   8 6DJG          SBN   3  A1-1 
  18 6F46          ADX   3  ASIZE(2)            [GET END ADD OF CHAPTER  
   9 6FHQ          ANDX  3  MASK(1)  
  18 6G3B          TXL   3  XK(1)               [J IF K0-1 POINTS AFTER  
  14 6GH2          BCS      SUM2                [CHAPTER 
   8 6H2L          LDN   4  A1(2)
  18 6HG=          SBS   4  XKX(1)              [RELATIVISE BREAK ADDRESS
  15 6H_W    SUM5  LDX   5  JOZ                 [MOVE CHAPTER
  15 6JFG          ADN   5  3                   [NAME INTO   
  15 6J_6          BCHX  5  /                   [PRINT BUFFER
   7 6KDQ          MVCH  4  8
   8 6KYB          LDX   3  XK(1)
   8 6LD2          BRN      SUM8 
  10 6LXL    SUM6  LDX   7  XBACKCH(1)   
  20 6MC=          BNZ   7  SUM7                [J IF ALREADY BACKWARD CHAINING  
   7 6MWW          LDN   7  1
  20 6NBG          STO   7  XBACKCH(1)          [SET BACKWARD CHAINING INDICATOR 
  21 6NW6          LDN   2  BCHAP               [GET POINTER TO LAST BLOCK IN CHAIN  
   9 6P*Q          CALL  0  SEARCHC  
   8 6PTB          BRN      SUM7 
   8 6Q*2          BRN      SUM4 
   9 6QSL    SUM7  LDN   4  XHEADF(1)
   8 6R#=          BRN      SUM5 
   4 6RRW    #   
  19 6S?G    #     CODING TO FIND OUT WHAT FIXED CORE ROUTINE CONTAINS BREAK 
   4 6SR6    #   
   9 6T=Q    SF1   STO   3  XLINK3(1)
  17 6TQB          ADS   1  SEGSFS(1)           [ DATUMISE ADDRESS   
  21 6W=2          LDX   2  SEGSFS(1)           [GET START ADD OF FIXED STORE SEGS   
  14 6WPL                                       [TABLE   
  19 6X9=          PMOVE    FIXINT,2           [TEST IF END OF TABLE REACHED 
   8 6XNW          LDX   1  FXPM1
   9 6Y8G          LDX   2  SEGSFS(1)
   9 6YN6          LDX   3  XLINK3(1)
   8 6_7Q    SF2   LDX   4  0(2) 
  14 6_MB          BNZ   4  SF5                 [J IF NOT
  21 7272    SF3   LDN   5  XHEADF(1)           [MOVE 8H???????? INTO PRINT BUFFER   
   8 72LL          BRN      SF6  
  17 736=    SF4   ADN   2  4                   [GET NEXT SEG ENTRY  
   8 73KW          BRN      SF2  
  21 745G    SF5   ANDX  4  MASK(1)            [GET DRUM ADD. OF NEXT SEG IN TABLE   
  21 74K6          ADX   4  REL(1)              [RELATIVISE DRUM ADD. TO CORE ADD.   
   7 754Q          TXL   3  4
  21 75JB          BCS      SF4                 [J IF BREAK ADD. LESS THAN START OF  
  13 7642                                       [SEG.
  16 76HL          ADX   4  1(2)                [END ADD OF SEG  
  21 773=          TXL   3  4                   [J IF BREAK ADD. MORE THAN END OF SEG
   8 77GW          BCC      SF4  
   8 782G          LDN   5  2(2) 
   8 78G6    SF6   LDX   6  JOZ  
   7 78_Q          ADN   6  3
   7 79FB          BCHX  6  /
  20 79_2          MVCH  5  8                   [MOVE SEG NAME INTO PRINT BUFFER 
   7 7=DL     PMCORES 3,,SF61
   9 7=Y=          LDX   0  XLINK(1) 
   7 7?CW          EXIT  0  0
  19 7?XG    SF61  TXL   3  XEIGHT(1)           [TEST IF ADD AN ACCUMULATOR  
  14 7#C6          BCC      SF7                 [J IF NOT
   9 7#WQ          LDN   3  JACC(3)  
   8 7*BB          BRN      SUM8 
   9 7*W2    SF7   PMDLGET  SPARE,5  
  21 7B*L          ADX   3  5                   [READ DOWN CONTENTS OF ADD. IN K0-1  
  21 7BT=          LDN   5  3                   [PLUS CONTENTS OF FOLLOWING 2 WORDS  
  12 7C#W          PMBSADD GEO,0,5,PMSUMEND(1),3 
   8 7CSG          LDX   1  FXPM1
  10 7D#6          LDX   3  PMSUMEND(1)  
  21 7DRQ    SUM8  LDX   5  XKX(1)              [PICK UP BREAK ADDRESS (REL OR ABS)  
  15 7F?B          STO   3  X3(1)               [PRESERVE X3 
  21 7FR2          CALL  7  (JDECN)               [CONVERT BREAK ADDRESS INTO BUFFER 
  15 7G=L          LDX   3  X3(1)               [RELOAD X3   
  21 7GQ=          LDN   4  XHEADD(1)           [LOAD START ADDRESS OF 2ND HEADING   
   4 7H9W    #   
  20 7HPG    #     CODING TO INSERT CHAPTER OF FIXED CORE SEGMENT NAME IN PRINT  
   6 7J96    #     BUFFER
   4 7JNQ    #   
  20 7K8B          LDX   5  JPMOD               [MOVE SECOND HALF OF HEADING INTO
   7 7KN2          BCHX  5  /
  15 7L7L          MVCH  4  8                   [PRINT BUFFER
   4 7LM=    #   
  20 7M6W    #     CODING TO INSERT GEOERR NAME OR INSTR. THAT GEORGE BROVE ON IN
   6 7MLG    #     BUFFER
   4 7N66    #   
   8 7NKQ          LDX   7  0(3) 
  20 7P5B          SMO      PMSUMEND(1)         [STORE CONTENTS OF BREAK ADDR. IF
  15 7PK2          STO   7  0                   [IN A CHAPTER
   8 7Q4L          SRL   7  14   
  16 7QJ=          SBN   7  #1770               [SEST IF GEOERR  
  14 7R3W          BNZ   7  SUM9                [J IF NOT
   9 7RHG          LDN   4  XHEADE(1)
  21 7S36          MVCH  4  8                   [INSERT GEOERR CHAR STRING IN HEADING
   8 7SGQ          LDN   4  1(3) 
   7 7T2B          MOVE  4  2
   9 7TG2          LDX   0  XLINK(1) 
   7 7T_L          EXIT  0  0
  20 7WF=    SUM9  LDN   4  XHEADA(1)           [MOVE 'INSTR' INTO PRINT BUFFER  
   7 7WYW          MVCH  4  7
   7 7XDG          BCHX  5  /
   8 7XY6          STO   5  JPMOD
  10 7YCQ          LDX   4  PMSUMEND(1)  
   7 7YXB          ADN   4  3
  10 7_C2 ...      PMOVE    PMINPRIN,4   
   8 7_WL          LDX   1  FXPM1
  10 82B=          SMO      PMSUMEND(1)  
   7 82TW          LDX   5  0
  21 83*G          CALL  7  (JCON1)               [CONVERT CONTENTS TO INSTRUCTION   
  13 83T6          LDX   0  XLINK(1)           [ EXIT
   7 84#Q          EXIT  0  0
   4 84SB    #   
   6 85#2    XK1PMSUMA   
   4 85RL    #   
  14 86?=    #     ENSURE A LP IS AVAILABLE FOR SUMMARY  
   4 86QW    #   
   8 87=G          LDX   1  FXPM1
   6 87Q6    #UNS  JPMDA 
   4 889Q    #SKI
   4 88PB    (   
   9 8992          SMO      FXPMDR   
   9 89NL          LDX   0  JUNITNO  
  17 8=8=          BNG   0  (JPMSEG)            [J IF NO LP AVAILABLE
   4 8=MW    )   
  10 8?7G          ADS   1  MODETABEND(1)
  21 8?M6          CALL  7  (JPRINTX)             [MAKE SURE LP BUFFER SPACE FILLED  
   4 8#6Q    #   
  13 8#LB    #     CODING TO PRINT GENERAL HEADING   
   4 8*62    #   
   9 8*KL          LDX   5  GVERSION 
  17 8B5=          SRL   5  12                  [OBTAIN MARK NUMBER  
   8 8BJW          SMO      FXPM1
  18 8C4G          DCH   5  XHEADT+3            [AND INSERT IN PM HEADING
   9 8CJ6          LDX   6  GVERSION 
  17 8D3Q          ANDN  6  #7777               [OBTAIN ISSUE NUMBER 
  19 8DHB          CALL  7  (JGNO1)               [CONVERT TO DECIMAL CHARS. 
  18 8F32          DSA   5  XHEADT+5(1)         [AND INSERT IN PM HEADING
   9 8FGL          LDX   6  XHT(1)   
   7 8G2=          ADX   6  1
  20 8GFW          LDX   7  JOZ                 [SET UP 'G3 MK ISS PM' HEADING   
   7 8G_G          ADN   7  1
   8 8HF6          MVCH  6  32   
   9 8HYQ          LDN   2  IDENTITY 
  10 8JDB          LDN   3  XHEADU+3(1)  
   7 8JY2          MVCH  2  8
   7 8KCL          ADN   3  5
   7 8KX=          BCHX  3  /
   7 8LBW          BCHX  3  /
   7 8LWG          MVCH  2  8
   7 8MB6          ADN   3  1
   7 8MTQ          BCHX  3  /
   7 8N*B          MVCH  2  8
   6 8NT2    #UNS  JPMDA 
   4 8P#L    (   
   9 8PS=          SMO      FXPMDR   
  21 8Q?W          LDX   0  JUNITNO             [J IF NO LP AVAILABLE. CONDITION MAY 
  21 8QRG          BNG   0  XTW                   [OCCUR WITH ^DUMP^OPERATOR DIRECTIV
   4 8R?6    )   
   9 8RQQ          LDN   6  XHEADU(1)
  20 8S=B          ADN   7  2                   [MOVE IDENTITY,TIME AND DATE INTO
  17 8SQ2          MVCH  6  64                  [PRINT BUFFER AREA   
  19 8T9L          CALL  7  (JPRINT)              [PRINT POSTMORTEM HEADING  
   4 8TP=    #   
  20 8W8W    #     CODING TO SET UP AND PRINT FIRST LINE OF SUMMARY INFORMATION  
   4 8WNG    #   
   9 8X86          LDN   6  XHEADB(1)
   8 8XMQ          LDX   7  JOZ  
   7 8Y7B          ADN   7  1
   7 8YM2          MVCH  6  7
  19 8_6L          CALL  7  (JPRINT2)             [PRINT 'SUMMARY' HEADING   
  10 8_L=          ADS   1  PMSUMEND(1)  
   8 8_LB ...      FSHCODE  AORB 
   4 8_LG ...(   
   9 8_LL ...      SMO      FXPMDR   
   9 8_LQ ...      LDEX  7  ERRORTYPE
   4 8_LW ...)   
   7 8_M2 ...      FSHSKIP   
   7 8_M9 ...      LDX   7  9
  19 8_N8 ...      ANDN  7  #77                   [GET LAST CHAR OF WORD 9   
  17 8_P7 ...      BZE   7  POSTF5                [J IF NO CHARACTER 
  10 8_Q6 ...      ORS   7  XSYSER+3(1)  
   9 8_R5 ...      LDN   6  XSYSER(1)
   5 8_S4 ...TRANSFER
   8 8_T3 ...      LDX   7  JOZ  
   7 8_W2 ...      ADN   7  1
   8 8_W_ ...      MVCH  6  16   
  20 8_XY ...      CALL  7  (JPRINT2)             [PRINT SYSTEM ERROR INFORMATION
   8 8_YX ...      BRN      SUMA1
   5 8__W ...POSTF5  
   9 922T ...      LDN   6  XF5PST(1)
   9 923S ...      BRN      TRANSFER 
   5 924T ...SUMA1   
  19 925W          CALL  0  SUMLINE             [SET UP 1ST LINE OF SUMMARY  
  16 92KG          CALL  7  (JPRINT2)             [PRINT 1ST LINE
   4 9356    #   
  19 93JQ    #     CODING TO SET UP AND PRINT ACTIVITY BLOCK TYPE MNEMONICS  
   4 944B    #   
   8 94J2          LDX   3  FX2  
   7 953L     PMCORES 3,,T2  
  18 95H=          LDN   4  XHEADG(1)           [PRINT MESSAGE THAT FX2  
  15 962W          LDN   3  6                   [IS CORRUPTED
   8 96GG    T1    LDX   5  JPMOD
   7 9726          ADN   5  1
   8 97FQ          MOVE  4  0(3) 
   9 97_B          CALL  7  (JPRINT2)
  19 98F2          BRN      (JPMSEG)              [CEASE PM SUMMARY LISTING  
  18 98YL    T2    LDX   5  PMSUMEND(1)         [CALL DOWN TABLE OF TYPES
   9 99D=          PMOVE   PMTYPES,5 
   8 99XW          LDX   1  FXPM1
   8 9=CG          LDX   3  FX2  
  21 9=X6          LDCH  2  ATYPE(3)            [GET TYPE VALUE FROM CURRENT ACTIVITY
   9 9?BQ          TXL   2  TACT(1)  
  17 9?WB          BCC      T3                  [J IF ACTIVITY  BLOCK
  19 9#B2          LDN   4  XHEADH(1)           [PRINT MESSAGE THAT FX2 DOES 
  20 9#TL          LDN   3  10                  [NOT POINT TO AN ACTIVITY BLOCK  
   8 9**=          BRN      T1   
   8 9*SW    T3    CALL  7  (JUP)
   8 9B#G                   +10  
  21 9BS6          LDN   5  XHEADI(1)           [SET UP 'CURRENT ACTIVITY' HEADING   
   8 9C?Q          MVCH  5  18   
   7 9CRB          STO   2  3
   7 9D?2          ADX   2  3
   7 9DQL          ADX   2  3
  10 9F==          SMO      PMSUMEND(1)  
   8 9FPW          LDN   5  0(2) 
  20 9G9G          MVCH  5  8                   [MOVE ACTIVITY TYPE MNEMONIC INTO
  20 9GP6          CALL  7  (JPRINT2)             [PRINT BUFFER AND PRINT A LINE 
   4 9H8Q    #   
  18 9HNB    #     CODING TO SET UP AND PRINT NUMBER OF CURRENT ACTIVITY 
   4 9J82    #   
   8 9JML          CALL  7  (JUP)
   8 9K7=                   +14  
   9 9KLW          LDN   5  XHEADL(1)
  20 9L6G          MVCH  5  15                  [SET UP 'ACTIVITY NO.' HEADING   
   8 9LL6          CALL  7  (JUP)
   8 9M5Q                   +11  
   8 9MKB          LDX   3  FX2  
  17 9N52          LDCH  2  ATYPE(3)            [GET TYPE OF BLOCK   
  18 9NJL          TXU   2  TBAT(1)             [J IF NOT BAT ACTIVITY   
   8 9P4=          BCS      T4   
   8 9PHW          CALL  7  (JUP)
   8 9Q3G                   +3   
  18 9QH6          LDN   5  NONE(1)             [INSERT 'NONE' IN PRINT  
  14 9R2Q          MVCH  5  4                   [BUFFER  
   8 9RGB          BRN      T5   
  21 9S22    T4    LDX   5  ACTNUM(3)           [CONVERT ACTIVITY NO. TO DECIMAL AND 
   8 9SFL          CALL  7  (JUP)
   8 9S_=                   +2   
  18 9TDW          CALL  7  (JDECN)               [INSERT IN PRINT BUFFER
  16 9TYG    T5    CALL  7  (JPRINT1)             [PRINT A LINE  
   4 9WD6    #   
  13 9WXQ    #     CODING TO PRINT JOB AND USER NAME 
   4 9XCB    #   
   9 9XX2          CALL  0  USERJOB  
   8 9YBL          CALL  7  (JUP)
   8 9YW=                   +7   
   9 9_*W          LDN   5  XHEADJ(1)
   8 9_TG          MVCH  5  47   
  19 =2*6          CALL  7  (JPRINT1)             [PRINT JOB NAME,:USER NAME 
   4 =2SQ    #   
  16 =3#B    #     CODING TO LIST FILES OPEN TO CURRENT ACTIVITY 
   4 =3S2    #   
  20 =4?L    #     CODING TO FIND OUT IF FILES ARE OPEN TO THE CURRENT ACTIVITY  
   4 =4R=    #   
   9 =5=W          LDN   4  XHEADM(1)
   8 =5QG          LDX   5  JPMOD
  18 =6=6          ADN   5  1                   [SET UP 'FILES OPEN TO   
  16 =6PQ          MVCH  4  24                  [ACTIVITY' HEADER
   8 =79B          LDX   2  FX2  
  16 =7P2          LDCH  6  ATYPE(2)            [GET TYPE VALUE  
   9 =88L          TXU   6  TAMOP(1) 
  17 =8N=          BCC      XF1                 [J IF AMOP ACTIVITY  
   9 =97W          TXU   6  TBAT(1)  
  17 =9MG          BCC      XF1                 [J IF BAT ACTIVITY   
   9 ==76          TXU   6  TAPET(1) 
  20 ==LQ          BCS      XF3                 [FALL THROUGH IF APET ACTIVITY   
   9 =?6B    XF1   LDN   4  NONE(1)  
   7 =?L2          MVCH  4  4
   9 =#5L    XF2   CALL  7  (JPRINT1)
   9 =#K=          BRN      (JPMSEG) 
  10 =*4W    XF3   LDN   2  FILERING(2)  
  20 =*JG          LDX   6  0(2)                [GET ADDR. 1ST ELEMENT ON RING   
   7 =B46          TXU   6  2
  20 =BHQ          BCC      XF1                 [J IF FILERING POINTS AT ITSELF  
  17 =C3B          STO   2  SAFR(1)             [START ADDR. OF RING 
  20 =CH2          CALL  7  (JPRINT1)             [PRINT 'FILES OPEN    ' HEADING
   8 =D2L          CALL  7  (JUP)
   8 =DG=                   +17  
   9 =D_W          LDN   5  XHEADN(1)
   8 =FFG          MVCH  5  56   
   9 =F_6          CALL  7  (JPRINT1)
   9 =GDQ          CALL  7  (JPRINT1)
   4 =GYB    #   
  14 =HD2    #     GET ADDRESS OF NEXT ELEMENT ON RING   
   4 =HXL    #   
  10 =JC=          LDN   3  RSEARCHA(1)  
   8 =JWW          BRN      XF4  
  10 =KBG    XF5   LDN   3  RSEARCH(1)   
   9 =KW6          LDX   0  RBACK(1) 
  17 =L*Q          BZE   0  XF4                 [J IF FORWARD RINGING
  10 =LTB          LDN   3  RSEARCHB(1)  
  20 =M*2    XF4   CALL  0  (3)                 [GET ADDR. NEXT ELEMENT ON RING  
  17 =MSL          BRN      XFB                 [J IF BREAK IN RING  
   9 =N#=          TXU   2  SAFR(1)  
  17 =NRW          BCC      (JPMSEG)              [J IF END OF RING  
  10 =P?G          LDX   7  FGENERAL1(2) 
  18 =PR6          STO   7  MODEIND(1)          [MODE FILE IS OPENED IN  
  10 =Q=Q          ADX   3  FBACKPOINT(2)
   7 =QQB     PMCORES 3,XFC  
  20 =R=2          LDX   3  BPTR(3)             [ADDR. OF ASSOCIATED FCB BLOCK   
   7 =RPL     PMCORES 3,XFC  
   9 =S9=          TXL   3  X45(1)   
  15 =SNW          BCS      XFC                 [J IF INVALID
   9 =T8G          LDX   7  ATYPE(3) 
   8 =TN6          SRL   7  12   
   9 =W7Q          TXU   7  TFCB(1)  
  17 =WMB          BCS      XFC                 [J IF NOT A FCB BLOCK
   4 =X72    #   
  18 =XLL    #     CODING TO SET UP FILE AND LOCAL NAMES IN PRINT BUFFER 
   4 =Y6=    #   
  20 =YKW          STO   2  RELE(1)             [ADDR. OF CURRENT RING ELEMENT   
   8 =_5G          CALL  7  (JUP)
   8 =_K6                   +12  
   7 ?24Q          LDX   2  6
   8 ?2JB          LDN   5  #12  
  19 ?342          DCH   5  0(2)                [STORE ':' IN PRINT BUFFER   
   7 ?3HL          BCHX  6  /
   9 ?43=          LDX   5  COMM(3)  
  17 ?4GW          BPZ   5  UL2                 [J IF NOT A DIRECTORY
   9 ?52G          LDN   5  FME1(3)  
  21 ?5G6          MVCH  5  12                  [MOVE DIRECTORY NAME INTO PRINT BUFF.
   8 ?5_Q          CALL  7  (JUP)
   8 ?6FB                   +57  
   8 ?6_2          BRN      UL4  
   9 ?7DL    UL2   LDN   5  FUSER1(3)
  20 ?7Y=          MVCH  5  12                  [MOVE USER NAME INTO PRINT BUFF. 
   7 ?8CW          LDX   2  6
   8 ?8XG    UL    LDCH  5  0(2) 
   9 ?9C6          TXU   5  SPACE(1) 
  21 ?9WQ          BCS      UL1                 [BACKSPACE TO LAST 'NON-SPACE' CHAR. 
   7 ?=BB          SLC   2  2
   7 ?=W2          SBN   2  1
   7 ??*L          SRC   2  2
   8 ??T=          BRN      UL   
   7 ?##W    UL1   BCHX  2  /
   8 ?#SG          LDN   5  #36  
  19 ?*#6          DCH   5  0(2)                [DUMP '.' INTO PRINT BUFFER  
   7 ?*RQ          STO   2  6
   7 ?B?B          BCHX  6  /
  21 ?BR2          LDN   5  FLOC1(3)            [MOVE LOCAL NAME INTO PRINT BUFFER   
   8 ?C=L          MVCH  5  12   
   4 ?CQ=    #   
  21 ?D9W    #     TO SET UP FILE REEL AND GENERATION NOS AND LANGUAGE IN PRINT BUFF 
   4 ?DPG    #   
   8 ?F96          CALL  7  (JUP)
   8 ?FNQ                   +30  
   9 ?G8B          LDX   5  FREEL(3) 
   7 ?GN2          STO   3  2
  21 ?H7L          CALL  7  (JDECN)               [INSERT REEL NO. IN PRINT BUFFER   
   8 ?HM=          CALL  7  (JUP)
   8 ?J6W                   +2   
   9 ?JLG          LDX   5  FGEN(2)  
  20 ?K66          CALL  7  (JDECN)               [INSERT GEN NO. IN PRINT BUFFER
   8 ?KKQ          CALL  7  (JUP)
   8 ?L5B                   +3   
   9 ?LK2          LDX   5  FLAN(2)  
  21 ?M4L          CALL  7  (JCHA)                [INSERT LANGUAGE IN PRINT BUFFER   
   8 ?MJ=          CALL  7  (JUP)
   8 ?N3W                   +4   
   4 ?NHG    #   
  16 ?P36    #     CODING TO SET UP MODE OF FILE IN PRINT BUFFER 
   4 ?PGQ    #   
  10 ?Q2B    UL4   LDN   3  MODETAB(1)   
  10 ?QG2    UL3   LDX   7  MODEIND(1)   
  14 ?Q_L          ANDX  7  MASK1(1)            [GET MODE
  19 ?RF=          TXU   3  MODETABEND(1)       [TEST IF END OF TABLE REACHED
  14 ?RYW          BCS      UL5                 [J IF NOT
  21 ?SDG          LDN   5  XHEADF(1)           [INSERT '????????' IN PRINT BUFFER   
   8 ?SY6          BRN      UL7  
   8 ?TCQ    UL5   ERX   7  0(3) 
  17 ?TXB          BZE   7  UL6                 [J IF CORRECT ENTRY  
  17 ?WC2          ADN   3  3                   [UPDATE TABLE POINTER
   8 ?WWL          BRN      UL3  
   8 ?XB=    UL6   LDN   5  1(3) 
  18 ?XTW    UL7   MVCH  5  8                   [MOVE MODE INTO PR BUFFER
  16 ?Y*G    UL8   CALL  7  (JPRINT1)             [PRINT A LINE  
  18 ?YT6          LDX   2  RELE(1)             [ADDR. OF CURRENT ELEMENT
   8 ?_#Q          BRN      XF5  
   4 ?_SB    #   
  10 #2#2    #     IF BREAK IN FILERING  
   4 #2RL    #   
   9 #3?=    XFB   LDX   7  RBACK(1) 
  19 #3QW          BNZ   7  (JPMSEG)              [J IF ALREADY BACKRINGING  
   8 #4=G          CALL  7  (JUP)
   8 #4Q6                   +12  
   9 #59Q          LDN   5  XHEADW(1)
   8 #5PB          MVCH  5  17   
  20 #692          CALL  7  (JPRINT1)             [PRINT 'BREAK IN RING' MESSAGE 
   7 #6NL    XFB1  LDN   7  1
  18 #78=          STO   7  RBACK(1)            [SET BACKRING INDICATOR  
   9 #7MW          LDX   2  SAFR(1)  
  10 #87G          LDN   3  RSEARCHC(1)  
   8 #8M6          BRN      XF4  
   4 #96Q    #   
  12 #9LB    #     IF UNABLE TO FIND FCB BLOCK   
   4 #=62    #   
   8 #=KL    XFC   CALL  7  (JUP)
   8 #?5=                   +12  
   9 #?JW          LDN   5  XHEADX(1)
   8 ##4G          MVCH  5  19   
  21 ##J6          CALL  7  (JPRINT1)             [PRINT 'FCB BLOCK NOT FOUND' MESSAG
   8 #*3Q          BRN      XF5  
   4 #*HB    #   
   6 #B32    #UNS  JPMDA 
   4 #BGL    (   
  21 #C2=    #     CODING TO OUTPUT TIME,DATE,AND IDENTITY ON CONSOLE IF NOT GIVING  
  10 #CFW    #     A POSTMORTEM LISTING  
   4 #C_G    #   
  15 #DF6    XTW   LDN   4  20                  [LOAD COUNT  
  18 #DYQ          STO   4  XHEADT+8(1)          [STORE IN FRONT OF MESS 
   8 #FDB          LDN   4  #5612
   8 #FY2          SLL   4  12   
  15 #GCL          ORS   4  XHEADU(1)            [INSERT _*  
  10 #GX=          ORS   4  XHEADU+5(1)  
  10 #HBW          LDN   3  XHEADT+8(1)  
  17 #HWG          CALL  7  (JCONOUT)              [OUTPUT IDENTITY  
  15 #JB6          LDN   4  44                   [LOAD COUNT 
  10 #JTQ          STO   4  XHEADU+4(1)  
  10 #K*B          LDN   3  XHEADU+4(1)  
   9 #KT2          CALL  7  (JCONOUT)
   9 #L#L          BRN      (JPMSEG) 
   4 #LS=    )   
   4 #M?W    #   
   6 #MRG    XK2PMSUMA   
   4 #N?6    #   
  21 #NQQ    #     ENTRY POINT TO OUTPUT CURRENT JOB AND USER NAME ON CONSOLE T/W.   
  15 #P=B    #     ENTERED FROM #SEG PMJOBS VIA #MAC PMACROSS
   4 #PQ2    #   
   8 #Q9L          LDX   1  FXPM1
  21 #QP=          CALL  0  USERJOB             [INSERT JOB & USER NAMES IN MESSAGES 
   9 #R8W          LDN   5  XHEADV(1)
   8 #RNG          CALL  7  (JUP)
   8 #S86                   +5   
  20 #SMQ          MVCH  5  32                  ['CURRENT JOB' INTO PRINT BUFFER 
   7 #T7B          ADN   6  1
   9 #TM2          LDX   5  XHJ(1)   
   7 #W6L          ADX   5  1
  20 #WL=          MVCH  5  0(3)                [JOB,:USER NAME INTO PRINT BUFFER
   8 #X5W          ADN   3  36   
   8 #XKG          LDX   2  JOZ  
   7 #Y56          BCHX  2  /
   8 #YJQ          STO   3  0(2) 
   7 #_4B          LDX   3  2
   9 #_J2          CALL  7  (JCONOUT)
  18 *23L          CALL  7  (JPRINTX)             [SPACEFILL PRINT BUFFER
   9 *2H=          BRN      (JPMSEG) 
   4 *32W    #   
   6 *3GG    XK3PMSUMA   
   4 *426    #   
  20 *4FQ    #     ENTRY POINT TO OUTPUT CURRENT JOB AND USER NAME ON LP PRIOR TO
  21 *4_B    #     POSTMORTEM LISTING. ENTERED FROM #SEG PMJOBS VIA PMACROSS MACRO   
   4 *5F2    #   
   8 *5YL          LDX   1  FXPM1
  19 *6D=          CALL  0  USERJOB             [GET CURRENT JOB & USER NAME 
  20 *6XW          LDN   5  XHEADV(1)           ['CURRENT JOB' INTO PRINT BUFFER 
   7 *7CG          BCHX  5  /
   7 *7X6          BCHX  5  /
   8 *8BQ          LDX   6  JOZ  
   7 *8WB          ADN   6  1
   8 *9B2          MVCH  5  30   
   7 *9TL          ADN   6  1
   9 *=*=          LDX   5  XHJ(1)   
   7 *=SW          ADX   5  1
  20 *?#G          MVCH  5  0(3)                [JOB,:USER NAME INTO PRINT BUFFER
   9 *?S6          CALL  7  (JPRINT2)
  18 *#?Q          CALL  7  (JPRINT)              [THROW TO TOP OF FORM  
   9 *#RB          BRN      (JPMSEG) 
   4 **?2    #   
   6 **QL    XK4PMSUMA   
   4 *B==    #   
  21 *BPW    #     ENTRY POINT TO OUTPUT 1ST LINE OF SUMMARY INFOMATION ON CONSOLE   
  12 *C9G    #     T/W IMMEDIATELY ON ENTRY TO PM
  20 *CP6    #     BUT FIRST CHECKS TO SEE IF THE GEORGE BREAK WAS CAUSED BY A   
  20 *D8Q    #     GEOSTOP AND IF SO OUTPUTS THE NECESSARY MESSAGE TO THE CONSOLE
  15 *DNB    #     AND FORGETS ABOUT PRINTING A POSTMORTEM   
   4 *F82    #   
   8 *FML          LDX   1  FXPM1
  10 *G7=          ADS   1  PMSUMEND(1)  
   8 *GLW          LDX   2  K0-1 
   9 *H6G          ANDX  2  MASK(1)  
   7 *HL6          SBN   2  1
  21 *J5Q     PMCORES 2,XK4B                    [J IF ADDR. OF LAST INSTR. ILLEGAL   
   9 *JKB ...      TXL   2  ENDFIX   
  18 *K52          BCC      XK4C                [J IF NOT IN FIXED STORE 
   7 *KJL          LDN   4  1
   9 *L4=          PMDLGET  SPARE,6  
   7 *LHW          ADX   2  6
  12 *M3G          PMBSADD  GEO,0,4,PMSUMEND(1),2
   8 *MH6          LDX   1  FXPM1
  10 *N2Q          LDX   2  PMSUMEND(1)  
  19 *NGB    XK4C  LDX   2  0(2)                [GET LAST INSTRUCTION OBEYED 
  15 *P22          SRL   23 14                  [X & F IN X2 
   8 *PFL          SBN   2  #1570
  17 *P_=          BNZ   2  XK4B                [J IF NOT A GEOSTOP  
  14 *QDW          SLL   23 2                   [M IN X2 
  14 *QYG          SRL   3  12                  [N IN X3 
  16 *RD6          BZE   2  XK4D                [J IF NO MODIFIER
   9 *RXQ          ADX   3  JACC(2)  
   9 *SCB    XK4D  ANDX  3  MASK(1)  
   7 *SX2     PMCORES 3,XK4B 
  18 *TBL ...      TXL   3  ENDFIX            [IF ADDRESS OF OPERAND IS  
  16 *TW=          BCC      XK4E                [IN FIXED CORE   
   9 *W*W          PMDLGET  SPARE,5  
   7 *WTG          ADX   3  5
   8 *X*6          LDN   4  20   
  12 *XSQ          PMBSADD  GEO,0,4,PMSUMEND(1),3
   8 *Y#B          LDX   1  FXPM1
  10 *YS2          LDX   3  PMSUMEND(1)  
   8 *_?L    XK4E  LDN   4  64   
   8 *_R=          TXL   4  0(3) 
  20 B2=W          BCS      XK4B                [J IF TOO MANY CHARS. IN MESSAGE 
  19 B2QG          STO   3  MESSAGE(1)          [STORE START ADDR. OF MESSAGE
   9 B3=6          LDN   3  XHEADY(1)
   9 B3PQ          CALL  7  (JCONOUT)
  10 B49B          LDX   3  MESSAGE(1)   
   9 B4P2          CALL  7  (JCONOUT)
   9 B58L          LDN   3  XHEADZ(1)
  18 B5N=          CALL  7  (JCONOUT)              ['POSTMORTEM ENTERED' 
   7 B67W          LDN   4  1
   9 B6MG          SMO      FXPMDR   
  17 B776          STO   4  ALLPOST             [NO POSTMORTEM AT ALL
   9 B7LQ          STO   4  ARELOAD  
   9 B86B          BRN      (JPMSEG) 
  19 B8L2    XK4B  CALL  0  SUMLINE             [SET UP 1ST LINE OF SUMMARY  
   7 B95L          LDN   1  5
  18 B9K=          LDX   2  JOZ                 [SET TO OUTPUT 1ST HALF  
  17 B=4W          ADN   2  1                   [OF LINE ON CONSOLE  
   8 B=JG    XK4A  SMO      FXPM1
   9 B?46          LDX   3  PMSUMEND 
   8 B?HQ          SMO      FXPM1
  17 B#3B          STO   3  MESSAGE             [FOR JCONOUT ROUT.   
   8 B#H2          SMO      FXPM1
   9 B*2L          LDN   4  XHEADY+1 
  18 B*G=          ADN   1  34                  [NO. OF CHARS. IN MESSAGE
   8 B*_W          STO   1  0(3) 
   7 BBFG          ADN   3  1
   7 BB_6          LDX   5  3
   7 BCDQ          MVCH  4  2
   7 BCYB          SBN   1  2
   7 BDD2          LDX   3  5
  18 BDXL          MVCH  2  0(1)                [SET UP MESSAGE FOR TWOUT
   8 BFC=          SMO      FXPM1
   9 BFWW          LDX   3  MESSAGE  
  16 BGBG          CALL  7  (JCONOUT)              [OUTPUT TO T/W
   8 BGW6          SBN   1  37   
  19 BH*Q          BZE   1  XK4A                [J TO OUTPUT 2ND HALF OF LINE
   8 BHTB          LDX   1  FXPM1
  18 BJ*2          LDX   5  XK(1)               [MASKED VERSI.N OF K0-1  
  18 BJSL ...      TXL   5  ENDFIX            [TEST ADDRESS IN FIXED CORE
  18 BK#=          BCS      XK4G                [J IF INSIDE FIXED CORE  
   8 BKRW          LDX   3  JOZ  
   7 BL?G          BCHX  3  /
   8 BLR6          LDX   5  3(3) 
  17 BM=Q          TXU   5  XHEADF(1)           [BROKE IN '????????' 
  14 BMQB          BCS      XK4H                [J IF NOT
   8 BN=2    XK4G  LDX   3  FX1  
  18 BNPL          BZE   3  XK4H                [J IF NO CURRENT CHAPTER 
  17 BP9=          PMCORES  3,XK4H              [J IF OUTSIDE CORE   
  10 BPNW          LDN   4  XHEADK+6(1)  
   7 BQ8G          MOVE  3  2
   9 BQN6          LDN   3  XHEADK(1)
  20 BR7Q          CALL  7  (JCONOUT)              [OUTPUT CURRENT CHAPTER NAME  
  20 BRMB    XK4H  CALL  7  (JPRINTX)             [SPACEFILL PRINT BUFFER AREA   
   9 BS72          BRN      (JPMSEG) 
   4 BSLL    #   
   4 BT6=    #   
   5 BTKW    ZPMSUMA 
   4 BW5G    #   
   4 BWK6    #END
   6 ____ ...257720050001
