 COMMENT THIS F IS PATCHES FOR TSS DUMP/ANALYZE;                        00020000
  PROGRAM TO RUN ON THE TIMESHARING SYSTEM AND PRODUCE                  00030000
  COHERANT RESULTS. THERE IS A CORRESPONDING PATCH TO FILL/PRT          00040000
  TO SET UP THE ARRAY PRTS FOR DUMP/ANALYZE. DOCUMENTATION              00050000
  IS INCLUDED IN THE PATCH.                                             00060000
BEGIN                                                                   00070000
    BOOLEAN COMMON,PRTOK;                                               00080000
    INTEGER I;                                                          00090000
    REAL R;                                                             00100000
    ARRAY PRTS[0:64];                                                   00110000
                                                                        00120000
    ARRAY NAME[129:778];                                                00130000
              ARRAY NAMS[0:844];                                        00140000
    ARRAY INAMS,                                                        00150000
          INAME[0:194];                                                 00160000
    REAL VJOBNUM,VBED;                                                  00170000
    ARRAY STAX[0:255]; INTEGER BEDSTK,MAXSTK;                           00180000
    ARRAY MEMORY[0:63,0:511];                                           00190000
    DEFINE M=MEMORY#, %                                                 00200000
           ROW=[33:6]#, %                                               00210000
           COL=[39:9]#; %                                               00220000
     DEFINE MIXMAX = 29#;                                               00230000
     DEFINE FENCE          = PRTS[00]#,                                 00240000
             FORKQUE          = PRTS[01]#,                              00250000
            SQ               = PRTS[02]#,                               00260000
           ESPBIT           = PRTS[03]#,                                00270000
             BED              = PRTS[04]#,                              00280000
            BED1             = PRTS[05]#,                               00290000
            STATABLE        = PRTS[06]#,                                00300000
            LINETABLE       = PRTS[07]#,                                00310000
             TOGLE            = PRTS[08]#,                              00320000
               SPACER                =  PRTS[09]#,                      00330000
               LOGLINE               =  PRTS[10]#,                      00340000
               INTRGATCTR            =  PRTS[11]#,                      00350000
           PRT              = PRTS[12]#,                                00360000
           JAR              = PRTS[13]#,                                00370000
           INTRNSC          = PRTS[14]#,                                00380000
           SHEET            = PRTS[15]#,                                00390000
            MEMROW           = PRTS[16]#,                               00400000
            TANKS            = PRTS[17]#,                               00410000
            SEQARRAY         = PRTS[18]#,                               00420000
           ISTACK           = PRTS[19]#,                                00430000
               INPUTANK              =  PRTS[20]#,                      00440000
            UV               = PRTS[21]#,                               00450000
           CHANNEL          = PRTS[22]#,                                00460000
           FINALQUE         = PRTS[23]#,                                00470000
           LOCATQUE         = PRTS[24]#,                                00480000
           IOQUEAVAIL       = PRTS[25]#,                                00490000
           IOQUE            = PRTS[26]#,                                00500000
           UNIT             = PRTS[27]#,                                00510000
           TINU             = PRTS[28]#,                                00520000
           WAITQUE          = PRTS[29]#,                                00530000
           NEXTWAIT         = PRTS[30]#,                                00540000
           FIRSTWAIT        = PRTS[31]#,                                00550000
           LABELTABLE       = PRTS[32]#,                                00560000
           MULTITABLE       = PRTS[33]#,                                00570000
           RDCTABLE         = PRTS[34]#,                                00580000
           OPTION           = PRTS[35]#,                                00590000
           MESSAGEHOLDER    = PRTS[36]#,                                00600000
           PRNTABLE         = PRTS[37]#,                                00610000
           INITIALIZE       = PRTS[38]#,                                00620000
        SPACESTACK    = PRTS[39]#,                                      00630000
        P1MIX=    PRTS[40]#,                                            00631000
        P2MIX=    PRTS[41]#,                                            00632000
      STACKQ=    PRTS[42]#,                                             00633000
        LOGARRAY=    PRTS[43]#,                                         00634000
               DATE                  =  (119)#,                         00635000
               CLOCK                 =  (120)#,                         00636000
               XCLOCK                =  (121)#,                         00637000
               WORKERSTACK           =  PRTS[44]#,                      00638000
           PRTMAX           = PRTS[63]#,                                00640000
           INTMAX           = PRTS[64]#;                                00650000
INTEGER TIMEANALYZED,DATEANALYZED,TIMETAKEN,DATETAKEN,                  00650050
TIMELASTHL,SINCSLASTHL,MINUTES,SECONDS,DAYS,YEARS;                      00650100
REAL DATX,XCLOCX,CLOCX,TEMP,KINDS,MCPVERSION;                           00650150
FORMAT OUT FMXX("DATE ANALYZED ",I2,"/",I2,"/",I2/                      00650200
"TIME ANALYZED ",I2,":",I2,":",I2),                                     00650250
X1("MCP VERSION NUMBER ",A*/                                            00650300
"DATE TAKEN   ",I2,"/",I2,"/",I2/                                       00650350
"TIME TAKEN    ",I2,":",I2,":",I2),                                     00650400
FMX2("TIME OF THE LAST HALT-LOAD ",I2,":",I2,":",I2),                   00650450
FMX3("TIME SINCE LAST HALT-LOAD ",I2,":",I2,":",I2);                    00650500
  FORMAT BADBED("********* BAD BED ENTRY *********");                   00650550
 FORMAT BADDATE ("BAD DATE TAKEN ....."),                               00650600
        BADXCLOCK ("BAD TIME TAKEN ....."),                             00650650
        BADCLOCK("BAD TIME OF H/L");                                    00650700
    FORMAT BADCELL3("WORD 3 HAS THE FLAG BIT ON.....");                 00650750
PROCEDURE TIMES (WHEN,HRS,MIN,SEC);                                     00650800
REAL WHEN;  INTEGER SEC,MIN,HRS;                                        00650850
BEGIN                                                                   00650900
REAL TIMESTORAGE;                                                       00650950
       TIMESTORAGE := WHEN.[9:39]/60;                                   00651000
         SEC := TIMESTORAGE MOD 60 - .5;                                00651050
         TIMESTORAGE := TIMESTORAGE / 60;                               00651100
         MIN := TIMESTORAGE MOD 60 - .5;                                00651150
         HRS := TIMESTORAGE DIV 60 - .5;                                00651200
         END OF PROCEDURE TIMES;                                        00651250
PROCEDURE DATES(ADATE,MONTH,DAY,YEAR);                                  00651300
VALUE ADATE;                                                            00651350
ALPHA ADATE;                                                            00651400
INTEGER MONTH,DAY,YEAR ;                                                00651450
   BEGIN                                                                00651500
     REAL Y,D,M;                                                        00651550
     LABEL ON;                                                          00651600
     ARRAY DAYTABLE [0:11];                                             00651650
     STREAM PROCEDURE CONV (YEAR,DAY,DAT );                             00651700
      VALUE DAT ;                                                       00651750
      BEGIN                                                             00651800
SI := LOC DAT;                                                          00651850
SI := SI + 3;                                                           00651900
DI := YEAR; DS := 2 OCT;                                                00651950
DI := DAY; DS := 3 OCT;                                                 00652000
      END;                                                              00652050
     FILL DAYTABLE [*] WITH                                             00652100
      0,31,59,90,120,151,181,212,243,273,304,334;                       00652150
     CONV (Y,D,ADATE);                                                  00652200
     IF ((Y MOD 4)=0) AND (Y!0) THEN                                    00652250
       BEGIN                                                            00652300
         IF D =60 THEN                                                  00652350
           BEGIN                                                        00652400
M := 1; GO TO ON;                                                       00652450
           END;                                                         00652500
         IF D > 60 THEN D:=D-1;                                         00652550
       END;                                                             00652600
FOR M := 0 STEP 1 UNTIL 11 DO                                           00652650
       IF DAYTABLE [M] } D THEN GO TO ON;                               00652700
     ON:                                                                00652750
MONTH := M;                                                             00652800
 IF M=0 THEN D:=0 ELSE %GO AHEAD                        %RCC            00652850
DAY := D - DAYTABLE[M-1];                                               00652900
YEAR:=Y;                                                                00652950
   END OF PROCEDURE DATE;                                               00653000
    FILE P 4(3,15);                                                     00660000
    PROCEDURE NEXTPAGE;                                                 00670000
    WRITE(P[PAGE]);                                                     00680000
    FORMAT STARS(20("******"));                                         00690000
    PROCEDURE NEXTITEM;                                                 00700000
    BEGIN                                                               00710000
        WRITE(P);                                                       00720000
        WRITE(P[DBL],STARS);                                            00730000
    END;                                                                00740000
                                                                        00750000
    BOOLEAN ARRAY MODON[0:7];                                           00760000
    INTEGER MAXMOD,MAXCOR;                                              00770000
                                                                        00780000
    DEFINE FF=[18:15]#, %                                               00790000
           CF=[33:15]#; %                                               00800000
   BOOLEAN LNKSOK,AVALNKOK;                                             00810000
    % UTILITY PROCEDURES                                                00820000
    REAL PROCEDURE OCTAL(N); %                                          00830000
        VALUE N; %                                                      00840000
        INTEGER N; %                                                    00850000
        % N.[1:23]=0 SO THAT IF N CONTAINS AT MOST A HALF-WORD THEN     00860000
        % OCTAL IF PRINTED USING O FORMAT, OR A FORMAT FOR FEWER OCTADES00870000
        % WILL BE THE OCTAL REPRESENTATION OF N                         00880000
    OCTAL:=N.[45:3]&(IF N>7 THEN OCTAL(N.[24:21]) ELSE 0)[3:9:39];      00890000
    REAL STREAM PROCEDURE CHRS(AT,SKIPPING,MANY);                       00900000
        VALUE SKIPPING,MANY; %                                          00910000
        % RETURNING THE 7 OR LESS CHRS REQUIRED                         00920000
    BEGIN                                                               00930000
        SI:=AT; SI:=SI+SKIPPING;                                        00940000
        DI:=LOC CHRS; DS:=8 LIT"0"; DI:=DI-MANY;                        00950000
        DS:=MANY CHR;                                                   00960000
    END CHRS;                                                           00970000
    INTEGER PROCEDURE HIHALF(LOC);                                      00980000
        VALUE LOC;                                                      00990000
        INTEGER LOC; %                                                  01000000
    HIHALF:=CHRS(M[LOC.ROW,LOC.COL],0,4); %                             01010000
    INTEGER PROCEDURE LOHALF(LOC); %                                    01020000
        VALUE LOC;                                                      01030000
        INTEGER LOC; %                                                  01040000
    LOHALF:=CHRS(M[LOC.ROW,LOC.COL],4,4); %                             01050000
    BOOLEAN STREAM PROCEDURE FLGBIT(WORD);                              01060000
    BEGIN                                                               01070000
        SI:=WORD; %                                                     01080000
        IF SB THEN TALLY:=1; %                                          01090000
        FLGBIT:=TALLY; %                                                01100000
    END FLGBIT; %                                                       01110000
    PROCEDURE PRINT(FROM,TOO); %                                        01120000
        VALUE FROM,TOO; %                                               01130000
        INTEGER FROM,TOO; %                                             01140000
    BEGIN %                                                             01150000
        BOOLEAN STREAM PROCEDURE EQUAL(ONE,TWO); %                      01160000
        BEGIN %                                                         01170000
            SI:=ONE; DI:=TWO; %                                         01180000
            IF 8 SC=DC THEN TALLY:=1; %                                 01190000
            EQUAL:=TALLY; %                                             01200000
        END EQUAL; %                                                    01210000
    DEFINE OCTADE = (DS:=3 RESET;3(IF SB THEN DS:=SET ELSE              01220000
                     DS:=RESET;SKIP SB))# ;                             01230000
    ALPHA ARRAY ALINE[0:17];                                            01240000
    STREAM PROCEDURE BUILD (FROM,LINE,XA,NA,XB,NB,NC);                  01250000
           VALUE   FROM,NA,NB,NC;                                       01260000
         BEGIN  DI:=LINE;SI:=LOC FROM;SI:=SI+5;SKIP 3SB ;               01270000
                5 OCTADE;DS:=LIT" ";SI:=XA;                             01280000
                NA(DS:=LIT" ";2(DS:=LIT" ";8 OCTADE));SI:=XB;           01290000
                NB(DS:=LIT" ";2(DS:=LIT" ";8 OCTADE));                  01300000
                NC(DS:=19 LIT" ");END BUILD;                            01310000
        BOOLEAN PREV,THIS,STARD; %                                      01320000
        INTEGER I,R,C; %                                                01330000
        IF TOO>FROM THEN %                                              01340000
        DO %                                                            01350000
        BEGIN %                                                         01360000
            IF THIS:=(TOO-FROM>6) THEN % NOT THE LAST LINE              01370000
            BEGIN %                                                     01380000
                R:=(I:=FROM).ROW; %                                     01390000
                C:=I.COL; %                                             01400000
                WHILE %                                                 01410000
                    (FROM+5>I:=I+1) AND %                               01420000
                (THIS:=EQUAL(M[R,C],M[I.ROW,I.COL])) DO; %              01430000
                IF PREV THEN %                                          01440000
                PREV:=EQUAL(M[R,C],M[(FROM-1).ROW,(FROM-1).COL]); %     01450000
            END; %                                                      01460000
            IF PREV AND THIS THEN %                                     01470000
                IF STARD THEN %                                         01480000
                ELSE %                                                  01490000
                BEGIN %                                                 01500000
                    WRITE(P,STARS); %                                   01510000
                    STARD:=TRUE; %                                      01520000
                END %                                                   01530000
            ELSE %                                                      01540000
            BEGIN %                                                     01550000
                STARD:=FALSE; %                                         01560000
                PREV:=THIS; %                                           01570000
         R:=MIN(6,TOO-FROM);                                            01580000
         IF(FROM+R).ROW NEQ FROM.ROW THEN % CROSS ROW ROUND             01590000
         BUILD(FROM,ALINE[*],M[FROM.ROW,FROM.COL],512-FROM.COL,         01600000
               M[(FROM+R).ROW,0],(FROM+R).COL,IF R LSS 6 THEN           01610000
               6-R ELSE 0) ELSE % STILL IN SAME ROW OF M ARRAY          01620000
         BUILD(FROM ,ALINE[*],M[FROM.ROW,FROM.COL],R,                   01630000
               M[0,0],0,IF R LSS 6 THEN 6-R ELSE 0);                    01640000
         WRITE(P,18,ALINE[*]);                                          01650000
            END; %                                                      01660000
        END UNTIL (FROM:=FROM+6)}TOO; %                                 01670000
        WRITE(P); %                                                     01680000
    END PRINT; %                                                        01690000
    FORMAT ITEM(A5," = ",2(O,X1),A5);                                   01700000
    ARRAY LINE[0:14];                                                   01710000
    STREAM PROCEDURE MOVE(S,D,W);                                       01720000
        VALUE W;                                                        01730000
    BEGIN                                                               01740000
        SI:=S; DI:=D; DS:= W WDS;                                       01750000
    END MOVE;                                                           01760000
    PROCEDURE DISPLAY(WHAT,RANGE);                                      01770000
        VALUE WHAT,RANGE;                                               01780000
        INTEGER WHAT;                                                   01790000
        BOOLEAN RANGE;                                                  01800000
    BEGIN                                                               01810000
        INTEGER H,L;                                                    01820000
        WRITE(LINE[*],ITEM,OCTAL(WHAT),                                 01830000
                OCTAL(H:=HIHALF(WHAT)),                                 01840000
                OCTAL(L:=LOHALF(WHAT)),                                 01850000
                IF RANGE THEN OCTAL(H.[32:10]+L.CF-1)                   01860000
                ELSE "     ");                                          01870000
        IF 129{WHAT AND WHAT{PRTMAX THEN                                01880000
        MOVE(NAMS[NAME[WHAT].CF],LINE[4],                               01890000
                 NAME[WHAT].FF);                                        01900000
        WRITE(P[DBL],7,LINE[*]);                                        01910000
    END DISPLAY; %                                                      01920000
    BOOLEAN PROCEDURE OPERAND(AT,WHAT); %                               01930000
        VALUE AT; %                                                     01940000
        INTEGER AT; %                                                   01950000
        REAL WHAT; %                                                    01960000
    BEGIN %                                                             01970000
        INTEGER R,C; %                                                  01980000
        IF FLGBIT(M[R:=AT.ROW,C:=AT.COL]) THEN %                        01990000
        OPERAND:=FALSE %                                                02000000
        ELSE %                                                          02010000
        BEGIN %                                                         02020000
            WHAT:=M[R,C]; %                                             02030000
            OPERAND:=TRUE; %                                            02040000
        END; %                                                          02050000
    END OPERAND; %                                                      02060000
    BOOLEAN PROCEDURE DESCRIPTOR(AT,WHAT,KIND);                         02070000
        VALUE AT;                                                       02080000
        INTEGER AT;                                                     02090000
        REAL WHAT,KIND;                                                 02100000
    BEGIN                                                               02110000
        INTEGER R,C;                                                    02120000
        IF (KIND:=OCTAL(CHRS(M[R:=AT.ROW,C:=AT.COL],0,1)))}"40" THEN    02130000
        BEGIN                                                           02140000
            DESCRIPTOR:=TRUE;                                           02150000
            WHAT:=CHRS(M[R,C],1,7);                                     02160000
        END;                                                            02170000
    END DESCRIPTOR;                                                     02180000
    BOOLEAN PROCEDURE PDATADESC(AT,WHAT);                               02190000
        VALUE AT;                                                       02200000
        INTEGER AT;                                                     02210000
        REAL WHAT;                                                      02220000
    BEGIN                                                               02230000
        INTEGER KIND;                                                   02240000
        IF DESCRIPTOR(AT,WHAT,KIND) AND                                 02250000
           KIND="50"     THEN                                           02260000
        PDATADESC:=TRUE;                                                02270000
    END;                                                                02280000
    INTEGER MINLNK,MINBAD,MAXBAD,MAXLNK; %                              02290000
  ARRAY COMMT[0:19]; BOOLEAN COMNT;                                     02300000
          PROCEDURE MCPENTRIES;                                         02300100
         BEGIN                                                          02300200
         ARRAY MCPHOLDER[0:25];                                         02300300
FORMAT OUT ENTROUT(4(A6,X14)/4(O,X1,O,X3)//A6,X14 ,2A6,X8,A6,A1/        02300400
3(O,X1,O,X3)//);                                                        02300500
         DEFINE A = MCPHOLDER#;                                         02300600
         A[0] := "P1MIX ";  A[1] := "BED   ";  A[2] := "ISTACK"; A[3] :=02300700
        "LOGARY"; A[12]:= "P2MIX ";    A[13] :="STACKQ";                02300800
         A[14] := "      "; A[15] := "SPACER";  A[16] := "AREAS ";      02300900
                                                                        02301000
                                                                        02301100
A[4 ] := OCTAL(R:=HIHALF(P1MIX ));  A[5 ] := OCTAL(R:=LOHALF(P1MIX));   02301200
A[6 ] := OCTAL(R:=HIHALF(BED   ));  A[7 ] :=  OCTAL(R:=LOHALF(BED   )); 02301300
A[8 ] := OCTAL(R:=HIHALF(ISTACK));  A[9 ] :=  OCTAL(R:=LOHALF(ISTACK)); 02301400
A[10] := OCTAL(R:=HIHALF(LOGARRAY));A[11] := OCTAL(R:=LOHALF(LOGARRAY));02301500
 A[17] := OCTAL(R:= HIHALF(P2MIX)); A[18] := OCTAL(R:= LOHALF(P2MIX));  02301600
A[19] := OCTAL(R:=HIHALF(STACKQ)); A[20] := OCTAL(R:=LOHALF(            02301700
STACKQ));                                                               02301800
A[21] := OCTAL(R:=HIHALF(SPACER)); A[22] := OCTAL(R:=LOHALF(SPACER));   02301900
WRITE(P,ENTROUT, FOR I := 0 STEP 1 UNTIL 22 DO MCPHOLDER[I]);           02302000
        DISPLAY(INTRGATCTR,FALSE);                                      02302100
        DISPLAY(LOGLINE,FALSE);                                         02302200
        DISPLAY(FENCE,FALSE);                                           02302300
         DISPLAY (PRT,FALSE);                                           02302400
         DISPLAY (JAR,FALSE);                                           02302500
       DISPLAY (SPACESTACK,FALSE);                                      02302600
         END;                                                           02302700
PROCEDURE GETPRTENTRIES; %3/3/69                                        02302800
 BEGIN                                                                  02302900
    REAL ADR,WC,PRTROW,L;                                               02303000
 REAL ADRR;                                                             02303100
     INTEGER I,K;                                                       02303200
     ARRAY MIX[0:40];                                                   02303300
 FORMAT PRTOUT(                                                         02303400
        X10,"PRT LOCATIONS:"/                                           02303500
        X20,"MIX",X20,"PRT"/),                                          02303600
  F1(   X20, A2,X20, A5);                                               02303700
   FORMAT BADPRT("********BAD PRT DESCRIPTOR*******");                  02303800
 LABEL XIT;                                                             02303900
    LABEL NEXT;                                                         02304000
  IF PDATADESC(PRT,L) THEN ELSE BEGIN                                   02304100
      WRITE (P,BADPRT); GO XIT END;                                     02304200
 ADR:= L.[33:15];                                                       02304300
 WC:= L.[8:10];                                                         02304400
 K:=-1;                                                                 02304500
FOR I:= 1 STEP 1 UNTIL (WC-1) DO BEGIN                                  02304600
IF DESCRIPTOR(ADR+I,PRTROW,L) AND L.[39:3]=5 THEN ELSE PRTROW:=0;       02304700
    IF PRTROW = 0 THEN                                                  02304800
      GO TO NEXT;                                                       02304900
   K:=K+1;                                                              02305000
   MIX[K]:= I; % SAVE MIX NUMBER                                        02305100
   MIX[K:=K+1]:= PRTROW;                                                02305200
   NEXT:                                                                02305300
                                                                        02305400
    END;% OF FINDING PRTS & VALID MIXES;                                02305500
 WRITE(P,PRTOUT);                                                       02305600
 WRITE (P,F1, FOR I:=0 STEP 1 UNTIL K DO OCTAL(MIX[I].[33:15]));        02305700
  XIT:                                                                  02305800
END OF GETPRTENTRIES;                                                   02305900
    PROCEDURE LOAD;                                                     02310000
    BEGIN                                                               02320000
        FILE IN MDUMP 2(2,513); LABEL EOT;                              02330000
        FILE IN DISK DISK SERIAL "TSS""PRT"(1,65);                      02340000
  COMMENT ... FILE NAME CHANGED TO TSS/PRT TO                           02350000
         PERMIT PERMIT AN MCP/PRT FOR BOTH BATCH                        02360000
         AND TSS TO EXIST AT SAME TIME....... ;                         02370000
        ARRAY A[0:512];                                                 02380000
        FORMAT F(X8,"MEMORY MODS: ",8I1);                               02390000
        STREAM PROCEDURE MOVE(S,D);                                     02400000
        BEGIN                                                           02410000
            SI:=S; DI:=D;                                               02420000
            16(DS:=32 WDS);                                             02430000
        END MOVE;                                                       02440000
        STREAM PROCEDURE MOVER(S,D,W);                                  02441000
        VALUE W;                                                        02442000
        BEGIN                                                           02443000
             SI:=S;DI:=D;5(DS:=W WDS);                                  02444000
        END MOVER;                                                      02445000
        INTEGER I;                                                      02450000
  COMNT :=FALSE;                                                        02460000
  FOR I:=0 STEP 1 UNTIL 63 DO                                           02470000
        BEGIN                                                           02480000
            READ(MDUMP,513,A[*])[EOT];                                  02490000
            IF NOT BOOLEAN(A[0].[1:1]) THEN                             02500000
            BEGIN                                                       02510000
                MODON[A[0].[33:3]]:=TRUE;                               02520000
                MOVE(A[1],M[A[0].ROW,0]);                               02530000
            END;                                                        02540000
        END;                                                            02550000
    READ(MDUMP,20,COMMT[*])[EOT];                                       02560000
    COMNT := TRUE;                                                      02570000
        EOT: CLOSE(MDUMP);                                              02580000
        IF COMMON THEN                                                  02590000
        ELSE                                                            02600000
        BEGIN                                                           02610000
            READ(DISK,65,PRTS[*]);                                      02620000
            READ(DISK,65,NAME[*]);                                      02630000
            FOR I:=65 STEP 65 UNTIL 649                                 02631000
            DO BEGIN                                                    02632000
                    READ(DISK,65,A[*]);                                 02633000
                    MOVER(A[0],NAME[I+129],13);                         02634000
               END;                                                     02635000
            READ(DISK,65,NAMS[*]);                                      02636000
            FOR I:=65 STEP 65 UNTIL 844                                 02637000
            DO BEGIN                                                    02638000
                    READ(DISK,65,A[*]);                                 02639000
                    MOVER(A[0],NAMS[I],13);                             02640000
               END;                                                     02641000
            READ(DISK,65,INAME[*]);                                     02642000
            READ(DISK,65,A[*]);                                         02643000
            MOVER(A[0],INAME[65],13);                                   02644000
            READ(DISK,65,A[*]);                                         02644100
            MOVER(A[0],INAME[130],13);                                  02644200
            READ(DISK,65,INAMS[*]);                                     02645000
            READ(DISK,65,A[*]);                                         02650000
            MOVER(A[0],INAMS[65],13);                                   02660000
            READ(DISK,65,A[*]);                                         02661000
            MOVER(A[0],INAMS[130],13);                                  02662000
            CLOSE(DISK);                                                02670000
        END;                                                            02680000
        WRITE(P[DBL],F,FOR I:=0 STEP 1 UNTIL 7 DO                       02690000
                [IF MODON[I] THEN I ELSE 10]);                          02700000
        MAXMOD:=7; %                                                    02710000
        WHILE NOT MODON[MAXMOD] DO MAXMOD:=MAXMOD-1;                    02720000
        MAXCOR:=4096|(MAXMOD+1)-1; %                                    02730000
        FOR I:=0 STEP 1 UNTIL 63 DO PRTS[I]:=PRTS[I]+129;               02740000
    END LOAD;                                                           02750000
  ARRAY MEMLOC[0:30], LINKLOC[0:30];                                    02760000
  COMMENT .....  MEMLOC[I] HOLDS THE START CELL AND LAST                02770000
         CELL ADDRESSES FOR MEMORY AREA I ....                          02780000
     MEMLOC[I].[3:1] -- 0,TH LINK IN AREA I IS BAD.                     02790000
              .[5:1] -- BAD LINK(S) IN AREA, LAST GOOD                  02800000
                        LINK IS IN LINKLOC[I].                          02810000
              .[4:1] -- LAST LINK IN AREA I IS BAD.                     02820000
      .[2:1] -- STATUS OF AVAILABLE LINKS.                              02830000
     .[13:5] -- MIX INDEX FOR AREA I                                    02840000
              .[18:15] -- ADDRESS OF LAST CELL OF AREA.                 02850000
              .[33:15] -- ADDRESS OF O,TH LINK IN AREA.                 02860000
     LINKLOC[I] HOLDS ADDRESSES OF LAST GOOD LINKS                      02870000
                  IN FORWARD SEARCH IN LINKLOC[I].[33:15],              02880000
                  IN BACK SEARCH IN LINKLOC[I].[18:15]  ;               02890000
  REAL MSTART,MEND,VFENCE,PRT0;                                         02900000
  COMMENT ... MSTART  IS THE ADDRESS OF THE                             02910000
         O,TH MEM LINK (ALSO THE FIRST CELL) OF AN AREA.                02920000
         MEND IS THE ADDRESS OF THE LAST CELL OF AN AREA,               02930000
         THESE VALUES ARE HELD IN MEMLOC. ...;                          02940000
 BOOLEAN PROCEDURE CHECKMEMORYLINKS;                                    02950000
    BEGIN %                                                             02960000
  COMMENT .... THIS PROCEDURE HAS BEEN CHANGED TO CHECK                 02970000
           MEM LINKS IN ALL AREAS IN CORE. FIRST WE ACCESS              02980000
           SQ TO DETERMINE WHICH JOBS ARE ACTUALLY IN CORE              02990000
           WE THEN COMPUTE THE ADDRESS OF THE FIRST                     03000000
           CELL AND THE LAST CELL IN A MEMORY AREA AND                  03010000
           STORE THESE VALUES IN MEMLOC. THE MEMLOC                     03020000
           ENTRIES ARE THEN ARRANGED IN ASCENDING                       03030000
           SEQUENCE. WE THEN PERFORM THE NORMAL MEMORY                  03040000
           LINK CHECKING PROCEDURE MAKING ENTRIES IN                    03050000
           MEMLOC AND LINKLOC TO REFLECT VARIOUS PROBLEMS               03060000
           IN THE LINKS FOR USE IN PRINTING OUT CORE.  ;                03070000
        BOOLEAN ZEROK; REAL V0; %                                       03080000
        BOOLEAN MSTARTOK; REAL VMSTART; %                               03090000
        REAL LINK,VLINK,PREVLINK;                                       03100000
        INTEGER AVAILN,AVAILT,AVAILM;                                   03110000
        DEFINE TYPMAX=22#; %                                            03120000
        BOOLEAN PROCEDURE LINKOK(WORD); %                               03130000
            VALUE WORD; %                                               03140000
            REAL WORD; %                                                03150000
        LINKOK:=WORD.[3:6]{TYPMAX AND %                                 03160000
  WORD.[9:6] LEQ MIXMAX      AND                                        03170000
  WORD.[15:3]=0;  %                                                     03180000
  BOOLEAN PROCEDURE FENCEOK(F);                                         03190000
  VALUE F;  REAL F;                                                     03200000
    FENCEOK:=F.[38:10]=0 AND F!0;                                       03210000
        FORMAT RANGE(X8,"LINKS FROM ",A5," TO ",A5," ARE OK"),          03220000
               BAD(X8,A6," LINK AT ",A5," IS NOT OK"),                  03230000
               AVLBAD(X8,"AVAILABLE STORAGE TOTALS DO NOT CROSS CHECK"),03240000
               AVL(X8,"AVAILABLE LINKS ARE OK, TOTALING",               03250000
                   I4,"(DECIMAL) AREAS OF ",A5," WORDS UP TO ",         03260000
                   A5," WORDS EACH");                                   03270000
  ARRAY A[0:3];                                                         03280000
  REAL SQPTR,DUMY,AVAIL,                                                03290000
        LEFTLIT,CNTR,SQPTR1;                                            03300000
  INTEGER N,T,M1,I,J;                                                   03310000
         FORMAT TELLM(X5,"END OF MEMORY LINK CHECK FOR AREA",           03320000
                 X1,I2);                                                03330000
         DEFINE S = SQPTR1.ROW,SQPTR1.COL#;                             03340000
    PROCEDURE PRINTIT(ADDR,NAME);                                       03350000
     VALUE ADDR; REAL ADDR,NAME;                                        03360000
     BEGIN                                                              03370000
      INTEGER DUMY,DUM1;                                                03380000
      FORMAT ITEM1(A5," = ",2(O,X1),X5);                                03390000
      WRITE(LINE[*],ITEM1,OCTAL(ADDR),                                  03400000
       OCTAL(DUMY:=HIHALF(ADDR)),OCTAL(DUM1:=LOHALF(ADDR)));            03410000
      MOVE(NAME,LINE[4],1);                                             03420000
      WRITE(P[DBL],7,LINE[*]);                                          03430000
                 END PRINTIT;                                           03440000
    FILL A[*] WITH " MSTART "," LEFTLIT"," AVAIL  ",                    03450000
                   " MEND   ";                                          03460000
   CNTR:=0;                                                             03470000
  IF NOT (ZEROK:=OPERAND(FENCE,VFENCE) AND FENCEOK(VFENCE))             03480000
 THEN IF NOT (ZEROK:=(OPERAND(2,VFENCE) AND                             03490000
    FENCEOK(VFENCE:=VFENCE.CF+2))) THEN                                 03500000
   ZEROK:=OPERAND(0,VFENCE) AND FENCEOK(VFENCE:=VFENCE.FF+3);           03510000
 CHECKMEMORYLINKS:=ZEROK;                                               03520000
 IF PDATADESC(SQ,SQPTR) THEN  BEGIN  SQPTR:=SQPTR.CF;                   03530000
       FOR I:=0 STEP 1 UNTIL 30 DO BEGIN                                03540000
     SQPTR1:=SQPTR + I;                                                 03550000
  DUMY:=CHRS(M[S],3,1); IF OPERAND(SQPTR1,V0) AND V0!0 AND              03560000
 BOOLEAN(V0.[1:1]) THEN IF DUMY=0 OR DUMY=1 OR DUMY=4 OR DUMY=5 OR      03570000
         DUMY=16 OR DUMY=32 THEN BEGIN                                  03580000
          MSTART:=VFENCE +1024|CHRS(M[S],6,1);                          03590000
           IF ( MEND:= VFENCE+1024+1024|CHRS(M[S],5,1)-3 )              03600000
                    GTR 1024+ VFENCE THEN                               03610000
 %****THE ABOVE TESTS FOR JOBS BELOW THE FENCE;                         03620000
 MEMLOC[CNTR:=CNTR+1]:=MSTART&I[13:43:5]&MEND[18:33:15];                03630000
  END; END; END; MEMLOC[CNTR+1]:=-7;                                    03640000
  FOR I:=1 STEP 1 UNTIL CNTR-1 DO                                       03650000
    FOR J:=I+1 STEP 1 UNTIL CNTR DO                                     03660000
      IF MEMLOC[I].CF GTR MEMLOC[J].CF THEN                             03670000
      BEGIN                                                             03680000
      V0:=MEMLOC[I];MEMLOC[I]:=MEMLOC[J];                               03690000
      MEMLOC[J]:=V0; END;                                               03700000
    FOR I :=0 STEP 1 UNTIL CNTR DO                                      03710000
     BEGIN                                                              03720000
 AVAILN:=AVAILT:=AVAILM:=N:=T:=M1:=0;                                   03730000
      PREVLINK:=MSTART:= MEMLOC[I].CF; MEND:= MEMLOC[I].FF;             03740000
      LEFTLIT:= MSTART+1; AVAIL:= MSTART+2;                             03750000
  IF I=0 THEN                                                           03760000
      MEMLOC[0].FF:=MEND:=VFENCE-3;                                     03770000
      PRINTIT(MSTART,A[0]);                                             03780000
      PRINTIT(LEFTLIT,A[1]);                                            03790000
      PRINTIT(AVAIL,A[2]);                                              03800000
      PRINTIT(MEND,A[3]);                                               03810000
                                                                        03820000
      IF AVALNKOK:=LNKSOK:=MSTARTOK:= OPERAND(MSTART,V0) AND            03830000
            V0.[1:2]=1              AND                                 03840000
   V0.[3:12] = MEMLOC[I].[13:5]    AND                                  03850000
      V0.FF = (MAXLNK:=MEND )  THEN MINLNK:=LINK:=V0.CF ELSE            03860000
     MEMLOC[I]:=MEMLOC[I] & 1[3:47:1];                                  03870000
        WHILE LNKSOK AND MAXLNK>PREVLINK DO %                           03880000
        IF LNKSOK:=(OPERAND(LINK,VLINK) AND                             03890000
                    LINKOK(VLINK)       AND %                           03900000
                    VLINK.FF=PREVLINK   AND %                           03910000
                   (IF LINK=MAXLNK                                      03920000
                THEN VLINK.CF = MSTART %                                03930000
                    ELSE VLINK.CF>LINK))THEN                            03940000
        BEGIN %                                                         03950000
            PREVLINK:=LINK; %                                           03960000
            LINK:=VLINK.CF; %                                           03970000
            IF AVALNKOK THEN %                                          03980000
            IF BOOLEAN(VLINK.[1:1]) THEN %                              03990000
            IF AVALNKOK:=MAXLNK>PREVLINK THEN %                         04000000
            IF AVALNKOK:=(OPERAND(PREVLINK+1,VLINK) AND %               04010000
                          VLINK.[1:17]=0) THEN %                        04020000
            BEGIN %                                                     04030000
                AVAILN:=AVAILN+1; %                                     04040000
                AVAILT:=AVAILT+VLINK.FF; %                              04050000
                AVAILM:=MAX(AVAILM,VLINK.FF); %                         04060000
            END; %                                                      04070000
        END; %                                                          04080000
        IF LNKSOK THEN WRITE(P,RANGE,OCTAL(MINLNK),OCTAL(MAXLNK)) ELSE  04090000
        BEGIN %                                                         04100000
      IF MSTARTOK THEN                                                  04110000
            BEGIN %                                                     04120000
                WRITE(P,RANGE,OCTAL(MINLNK),OCTAL(PREVLINK)); %         04130000
                WRITE(P,BAD,"MEMORY",OCTAL(LINK)); %                    04140000
      LINKLOC[I]:= 0 & PREVLINK[33:33:15];                              04150000
            END; %                                                      04160000
            MINBAD:=LINK; %                                             04170000
       PREVLINK:=MSTART;                                                04180000
            LINK:=MAXLNK; %                                             04190000
            WHILE OPERAND(LINK,VLINK) AND %                             04200000
                LINKOK(VLINK)         AND                               04210000
                VLINK.CF=PREVLINK     AND %                             04220000
                LINK>VLINK.FF         DO %                              04230000
            BEGIN %                                                     04240000
                PREVLINK:=LINK; %                                       04250000
                LINK:=VLINK.FF; %                                       04260000
            END; %                                                      04270000
    IF PREVLINK=MSTART THEN MEMLOC[I]:=MEMLOC[I]&1[4:47:1]              04280000
     ELSE   BEGIN                                                       04290000
            WRITE(P,RANGE,OCTAL(MAXLNK),OCTAL(MAXBAD:=PREVLINK)); %     04300000
            WRITE(P,BAD,"MEMORY",OCTAL(LINK)); %                        04310000
      MEMLOC[I]:=MEMLOC[I] & 1[5:47:1];                                 04320000
      LINKLOC[I]:=LINKLOC[I] & PREVLINK[18:33:15];                      04330000
    END;                                                                04340000
        END; %                                                          04350000
        IF AVALNKOK:=AVALNKOK AND LNKSOK THEN %                         04360000
        IF AVALNKOK:=(OPERAND(AVAIL,PREVLINK) AND                       04370000
            PREVLINK=MAXLNK+1       AND %                               04380000
            OPERAND(PREVLINK,VLINK) AND %                               04390000
            VLINK.[1:17]=0          AND %                               04400000
            VLINK.FF=32767)         THEN %                              04410000
        BEGIN %                                                         04420000
            WHILE AVALNKOK AND %                                        04430000
                  AVAILN>N AND %                                        04440000
                  AVAILT>T AND %                                        04450000
      AVAILM GEQ M1 DO                                                  04460000
      IF AVALNKOK:=(MEND>LINK:=VLINK.CF AND LINK>0) THEN %              04470000
            IF AVALNKOK:=(OPERAND(LINK-1,VLINK) AND %                   04480000
                LINKOK(VLINK)        AND %                              04490000
                BOOLEAN(VLINK.[1:1])  AND %                             04500000
                OPERAND(LINK+1,VLINK) AND %                             04510000
                VLINK=PREVLINK        AND %                             04520000
                OPERAND(LINK,VLINK)   AND %                             04530000
                VLINK.[1:17]=0        AND %                             04540000
                VLINK.CF!LINK)        THEN %                            04550000
            BEGIN %                                                     04560000
                N:=N+1;                                                 04570000
                T:=T+VLINK.FF; %                                        04580000
     M1:= MAX(M1,VLINK.FF);                                             04590000
                PREVLINK:=LINK; %                                       04600000
            END; %                                                      04610000
            IF NOT AVALNKOK THEN WRITE(P,BAD,"AVALBL",OCTAL(LINK)) ELSE 04620000
            IF NOT(AVALNKOK:=                                           04630000
                AVAILN=N AND %                                          04640000
                AVAILT=T AND %                                          04650000
     AVAILM= M1 AND                                                     04660000
                VLINK.CF=MAXLNK+1) THEN WRITE(P,AVLBAD) ELSE %          04670000
 BEGIN WRITE(P,AVL,N,OCTAL(T),OCTAL(M1)); MEMLOC[I].[2:1]:=1;           04680000
  END; END;                                                             04690000
        WRITE(P[DBL]); %                                                04700000
    WRITE(P,TELLM,I);                                                   04710000
    WRITE(P,STARS);                                                     04720000
    END;                                                                04730000
    END; %                                                              04740000
    ARRAY MIXSTK[0:MIXMAX];                                             04750000
 BOOLEAN PROCEDURE CONTROLDESC(AT,WHAT);                                04760000
  VALUE AT; INTEGER AT; REAL WHAT;                                      04770000
   BEGIN                                                                04780000
    INTEGER TYP;                                                        04790000
    CONTROLDESC:=DESCRIPTOR(AT,WHAT,TYP) AND TYP.[40:1]=1;              04800000
   END  CONTROLDESC;                                                    04810000
 BOOLEAN PROCEDURE RCWMSCWSEARCH(TOS,BOS,ANS);                          04820000
 VALUE TOS,BOS; REAL TOS,BOS,ANS;                                       04830000
  BEGIN                                                                 04840000
       REAL ADR,B;  LABEL UP;  ADR:=TOS;                                04850000
      UP:  IF CONTROLDESC(ADR,B) THEN                                   04860000
       IF (B:=B.FF)=0 THEN RCWMSCWSEARCH:=TRUE                          04870000
       ELSE IF ADR:=B>BOS AND TOS>B                                     04880000
       THEN GO TO UP;                                                   04890000
       ANS:=ADR;                                                        04900000
 END RCW MSCW SEARCH;                                                   04910000
 INTEGER SSTACK, SSTACKINX;                                             04920000
 PROCEDURE SPACESTACKFIND(TOS);                                         04930000
  VALUE TOS;  REAL TOS;                                                 04940000
   BEGIN                                                                04950000
    REAL BOS,B;                                                         04960000
   IF OPERAND(SPACESTACK,BOS) AND (BOS:=BOS.CF+1) LSS TOS               04970000
    AND TOS LEQ BOS + 80 THEN BEGIN                                     04980000
    STAX[MAXSTK].FF:=BOS;                                               04990000
    IF CONTROLDESC(BOS,B) THEN STAX[0]:=B.FF;                           05000000
    SSTACKINX:=MAXSTK;                                                  05010000
   END;  END SPACE STACK FIND;                                          05020000
    PROCEDURE GETSTACKSFROMTHEBED;                                      05030000
    BEGIN                                                               05040000
  COMMENT .... THIS PROCEDURE HAS BEEN REWRITTEN TO                     05050000
         REFLECT THE MANNER IN WHICH THE BED IS KEPT IN                 05060000
         THE TIMESHARING SYSTEM.  ESSENTIALLY WE LINK                   05070000
         THROUGH THE BED FORWARD, PICKING UP STACKS                     05080000
         UNTIL WE FIND A BAD LINK OF FINISH SEARCHING.                  05090000
         IF WE FIND A BAD LINK WE START LINKING BACKWARD                05100000
         UNTIL WE REACH A BAD LINK.  THIS PERMITS US TO                 05110000
         GET THE MAX INFO OUT OF THE BED WHEN PART OF IT                05120000
         IS CLOBBERED.  .......... FGB.......... ;                      05130000
  REAL BEDLNK,VBEDLNK,PREVLNK,VPREVLNK;                                 05140000
        INTEGER MIX;                                                    05150000
  LABEL FWDBLOWUP,BKWDBLOWUP;                                           05160000
  IF (OPERAND(BED,VBED) AND                                             05170000
     (VBED.[2:1]=1) AND (VBED.[9:9]=511) AND                            05180000
     (BEDLNK:=VBED.CF)!BED) THEN                                        05190000
  BEGIN                                                                 05200000
    PREVLNK:=BED;                                                       05210000
    WHILE BEDLNK!BED DO                                                 05220000
    IF ( OPERAND(BEDLNK,VBEDLNK) AND                                    05230000
        (VBEDLNK.[2:1]=1) AND (VBEDLNK.[9:9]=511) AND                   05240000
       PDATADESC(BEDLNK+1,VPREVLNK) AND                                 05250000
       (VPREVLNK:=VPREVLNK.CF)= PREVLNK AND                             05260000
       OPERAND(BEDLNK+2,MIX)) THEN                                      05270000
    BEGIN                                                               05280000
      MAXSTK:=MAXSTK+1;                                                 05290000
      IF MIX GTR 0 THEN MIXSTK[MIX]:=MAXSTK;                            05300000
      STAX[MAXSTK]:= (BEDLNK+1) &(REAL(MIX GTR 0))[7:47:1];             05310000
  PREVLNK:=BEDLNK; BEDLNK:=VBEDLNK.CF;                                  05320000
 SPACESTACKFIND(PREVLNK); END ELSE GO TO FWDBLOWUP;                     05330000
  END ELSE                                                              05340000
  BEGIN                                                                 05350000
  FWDBLOWUP:                                                            05360000
  IF (PDATADESC(BED1,VBED) AND                                          05370000
     (VBED.[9:9]=511) AND (VBED.FF>63) AND                              05380000
      (BEDLNK:=VBED.CF +1)!BED1) THEN                                   05390000
    BEGIN                                                               05400000
      PREVLNK:=BED;                                                     05410000
      WHILE BEDLNK!BED DO                                               05420000
    IF (PDATADESC(BEDLNK,VBEDLNK) AND                                   05430000
        (VBEDLNK.[9:9]=511) AND                                         05440000
         OPERAND(BEDLNK-1,VPREVLNK) AND                                 05450000
        (VPREVLNK.[2:1]=1) AND (VPREVLNK.[9:9]=511) AND                 05460000
         (VPREVLNK:=VPREVLNK.CF)=PREVLNK AND                            05470000
       OPERAND(BEDLNK+1,MIX)) THEN                                      05480000
      BEGIN                                                             05490000
      MAXSTK:=MAXSTK+1;                                                 05500000
        IF MIX GTR 0 THEN MIXSTK[MIX]:=MAXSTK;                          05510000
  STAX[MAXSTK]:=(BEDLNK)&(REAL(MIX GTR 0))[7:47:1];                     05520000
   PREVLNK:=BEDLNK-1;   BEDLNK:=VBEDLNK.CF+1;                           05530000
 SPACESTACKFIND(PREVLNK); END ELSE GO TO BKWDBLOWUP;                    05540000
  END;END;                                                              05550000
BKWDBLOWUP:  BEDSTK:=MAXSTK;                                            05560000
    END GETSTACKSFROMTHEBED;                                            05570000
    PROCEDURE DUMPMEMORYANDNOTESTACKS(FROM,TOO);                        05580000
        VALUE FROM,TOO;                                                 05590000
        INTEGER FROM,TOO;                                               05600000
    BEGIN                                                               05610000
        BOOLEAN BEDDED;                                                 05620000
        REAL L;                                                         05630000
      FORMAT ITEM(X2,A3," =",2(X4,A5));                                 05638000
      REAL R,ADR,Q,LL; BOOLEAN INTR,QT;                                 05639000
        INTEGER N,STK;                                                  05640000
        FORMAT PRTAVAIL(X27,"**** AVAILABLE.");                     %00405641000
        FORMAT MIXUSE  (X27,"MIX=",I2,X1,A6);                       %00405642000
        FORMAT MCPUSE  (X27,"MCP--",A6,X82);                            05643000
        ARRAY  ATP[0:15];                                           %00405644000
      INTR:=PDATADESC(INTRNSC,ADR) AND I=0;                             05645000
      ADR:=ADR.CF;  FILL ATP[*] WITH                                    05646000
            "UNKNWN","CODE  ","DATA  ","IO-BUF",                    %00405647000
            "ALGFIB","INQBUF","COBFIB","INTSEG",                    %00405648000
            "FILHDR","     9","    10","    11",                        05648500
            "STACK ","SCRDIR";                                          05649000
        WHILE FROM<TOO DO                                               05650000
        BEGIN                                                           05660000
            N:=(L:=M[FROM.ROW,FROM.COL]).CF;                            05670000
            IF BOOLEAN(L.[1:1]) THEN                                    05680000
          BEGIN WRITE(P[DBL],PRTAVAIL);                                 05685000
                PRINT(FROM,IF AVALNKOK THEN FROM+3 ELSE N)              05690000
          END                                                           05695000
            ELSE                                                        05700000
            BEGIN                                                       05710000
      QT:=OPERAND(FROM+1,Q);                                            05711000
      IF R:=L.[9:6]!0 THEN WRITE(P[DBL],MIXUSE,R,ATP[L.[5:4]]) ELSE     05711100
      IF R:=L.[3:6]=1 AND QT THEN DISPLAY(Q.CF,FALSE) ELSE IF           05711200
       R=7 AND QT AND INTR AND OPERAND(ADR+(LL:=Q.[8:10]),R)            05711300
      AND R:=R.CF>1023 AND LL LEQ INTMAX THEN BEGIN                     05711400
      WRITE(LINE[*],ITEM,OCTAL(LL),OCTAL(R),OCTAL(R+Q.FF-1));           05711500
      MOVE(INAMS[INAME[LL].CF],LINE[4],INAME[LL].FF);                   05711600
      WRITE(P[DBL],7,LINE[*]); END ELSE                                 05711700
      BEGIN WRITE(LINE[*],MCPUSE,ATP[LL:=L.[5:4]]);                     05711800
           IF LL = 12  THEN  %STACK, FIND PROCESS NAME                  05711900
           IF OPERAND(FROM+2,LL) AND (LL:=LL.[8:10]) LEQ PRTMAX THEN    05712000
           MOVE(NAMS[NAME[LL].CF],LINE[5],NAME[LL].FF);                 05712100
           WRITE(P[DBL],15,LINE[*]);                                    05712200
      END;                                                              05712300
        STK:=-1;   BEDDED:=FALSE;                                       05720000
                WHILE BEDSTK}STK:=STK+1 AND NOT BEDDED DO               05730000
                IF BEDDED:=                                             05740000
       (L:=STAX[STK].CF>FROM AND N>L) THEN                              05750000
  IF STAX[STK].FF=0 THEN STAX[STK].FF:=FROM+2;                          05760000
                PRINT(FROM,N);                                          05770000
            END;                                                        05780000
            IF NOT BEDDED AND M[FROM.ROW,FROM.COL].[1:8]=76 THEN        05781000
            STAX[MAXSTK:=MAXSTK+1]:=(N-1)&(FROM+2)[18:33:15];           05782000
            FROM:=N;                                                    05790000
        END;                                                            05800000
   SSTACK:=STAX[0];                                                     05810000
    END DUMP MEMORY AND NOTE STACKS;                                    05820000
    ARRAY MCPROG[0:255];                                                05830000
    INTEGER MAXMCPROG,ESP;                                              05840000
    PROCEDURE SEQUENCE(ARAY,LIM);                                       05850000
        VALUE LIM;                                                      05860000
        ARRAY ARAY[0];                                                  05870000
        INTEGER LIM;                                                    05880000
    BEGIN                                                               05890000
        INTEGER T,L;                                                    05900000
        REAL V;                                                         05910000
        STREAM PROCEDURE MOVE(S,D,D32,M32);                             05920000
            VALUE D32,M32;                                              05930000
        BEGIN                                                           05940000
            SI:=S; DI:=D;                                               05950000
            D32(DS:=32 WDS);                                            05960000
            DS:=M32 WDS;                                                05970000
        END MOVE;                                                       05980000
        T:=LIM;                                                         05990000
        WHILE (T:=T-1)}0 DO                                             06000000
        BEGIN                                                           06010000
            I:=LIM;                                                     06020000
            L:=(V:=ARAY[T]).CF;                                         06030000
            WHILE ARAY[I].CF>L DO                                       06040000
                I:=I-1;                                                 06050000
            IF (L:=I-T)>0 THEN                                          06060000
            BEGIN                                                       06070000
                MOVE(ARAY[T+1],ARAY[T],L.[37:6],L.[43:5]);              06080000
                ARAY[I]:=V;                                             06090000
            END;                                                        06100000
        END;                                                            06110000
    END SEQUENCE;                                                       06120000
    PROCEDURE GETSORTANDLISTMCPROG;                                     06130000
    BEGIN                                                               06140000
        REAL R;                                                         06150000
        INTEGER TYP;                                                    06160000
        FORMAT F(X8,"PRESENT MCP PROGRAM SEGMENTS"//                    06170000
                "PRT",X5,"DESCRIPTOR",X8,"THRU"//);                     06180000
        IF DESCRIPTOR(ESPBIT,R,TYP) AND TYP="75" THEN                   06190000
        MCPROG[MAXMCPROG]:=                                             06200000
            (ESP:=R.CF)&                                                06210000
            (ESP+R.[8:10]-1)[18:33:15]&                                 06220000
            ESPBIT[8:38:10]                                             06230000
        ELSE MAXMCPROG:=-1;                                             06240000
        FOR I:=129 STEP 1 UNTIL PRTMAX DO                               06250000
        IF DESCRIPTOR(I,R,TYP) AND                                      06260000
           (TYP="75" OR TYP="77") AND                                   06270000
           R.CF!ESP          THEN                                       06280000
        MCPROG[MAXMCPROG:=MAXMCPROG+1]:=                                06290000
            R.CF&                                                       06300000
            (R.CF+R.[8:10]-1)[18:33:15]&                                06310000
            I[8:38:10];                                                 06320000
        SEQUENCE(MCPROG,MAXMCPROG);                                     06330000
        NEXTPAGE;                                                       06340000
        WRITE(P,F);                                                     06350000
        FOR I:=0 STEP 1 UNTIL MAXMCPROG DO                              06360000
        DISPLAY(MCPROG[I].[8:10],TRUE);                                 06370000
    END GET SORT AND LIST PRESENT MCP PROGRAM SEGMENTS;                 06380000
    ARRAY INTSP[0:63];                                                  06390000
    INTEGER INTSPMAX;                                                   06400000
    PROCEDURE GETSORTANDLISTINTRINSICS;                                 06410000
    BEGIN                                                               06420000
        INTEGER IMAX;                                                   06430000
        REAL ADR,R,L;                                                   06440000
        FORMAT ITEM(X2,A3," =",2(X4,A5)),                               06450000
                F(X8,"PRESENT INTRINSICS"/                              06460000
                  "INDEX",X7,"FROM",X5,"THRU"/);                        06470000
        INTSPMAX:=-1;                                                   06480000
       IF PDATADESC(INTRNSC,ADR) THEN                                   06490000
        BEGIN                                                           06500000
            IMAX:=ADR.[8:10]-1;                                         06510000
            ADR:=ADR.CF;                                                06520000
            FOR I:=1 STEP 1 UNTIL IMAX DO                               06530000
            IF OPERAND(ADR+I,R) AND R.CF>1023 THEN                      06540000
            INTSP[INTSPMAX:=INTSPMAX+1]:=                               06550000
                R.CF&                                                   06560000
                (IF OPERAND(R.CF-1,L) AND                               06570000
                    0<(L:=L.FF) AND                                     06580000
                    L{1023 THEN                                         06590000
                R.CF+L-1 ELSE R.CF)[18:33:15]&                          06600000
                I[8:38:10];                                             06610000
        END;                                                            06620000
        IF INTSPMAX}0 THEN                                              06630000
        BEGIN                                                           06640000
            NEXTPAGE;                                                   06650000
            DISPLAY(INTRNSC,TRUE);                                      06660000
            WRITE(P,F);                                                 06670000
            SEQUENCE(INTSP,INTSPMAX);                                   06680000
            FOR I:=0 STEP 1 UNTIL INTSPMAX DO                           06690000
            BEGIN                                                       06700000
                WRITE(LINE[*],ITEM,OCTAL(L:=INTSP[I].[8:10]),           06710000
                      OCTAL(INTSP[I].CF),                               06720000
                      OCTAL(INTSP[I].FF));                              06730000
                IF L{INTMAX THEN                                        06740000
                MOVE(INAMS[INAME[L].CF],LINE[4],                        06750000
                           INAME[L].FF);                                06760000
                WRITE(P[DBL],7,LINE[*]);                                06770000
            END;                                                        06780000
        END;                                                            06790000
    END GET SORT AND LIST PRESENT INTRINSICS;                           06800000
    STREAM PROCEDURE MOVC(S,SP,D,DP,W,C);                               06810000
        VALUE SP,DP,W,C;                                                06820000
    BEGIN                                                               06830000
        SI:=S; SI:=SI+SP;                                               06840000
        DI:=D; DI:=DI+DP;                                               06850000
        W(DS:=8 CHR); DS:=C CHR;                                        06860000
    END MOVC;                                                           06870000
    BOOLEAN PROCEDURE WITHIN(ARAY,AMAX,ITEM,RESULT,PLUS);               06880000
        VALUE AMAX,ITEM;                                                06890000
        ARRAY ARAY[0];                                                  06900000
        INTEGER AMAX,ITEM,RESULT,PLUS;                                  06910000
    BEGIN                                                               06920000
        BOOLEAN FOUND;                                                  06930000
        LABEL EXIT;                                                     06940000
        IF AMAX}0 THEN                                                  06950000
        FOR I:=0 STEP 1 UNTIL AMAX DO                                   06960000
        IF FOUND:=                                                      06970000
            (ARAY[I].CF{ITEM AND ITEM {ARAY[I].FF) THEN                 06980000
        BEGIN                                                           06990000
            RESULT:=ARAY[I].[8:10];                                     07000000
            PLUS:=ITEM-ARAY[I].CF;                                      07010000
            GO TO EXIT;                                                 07020000
        END;                                                            07030000
        EXIT: WITHIN:=FOUND;                                            07040000
    END WITHIN;                                                         07050000
    ARRAY PROGS[0:3,0:255]; INTEGER PROWS;                              07060000
 BOOLEAN PROCEDURE PRUNLNK(TOS,BOS,C);                                  07070000
  VALUE TOS,BOS;  REAL TOS,BOS,C;                                       07080000
  BEGIN                                                                 07090000
   REAL R,F; BOOLEAN OK; R:=TOS;                                        07100000
   WHILE NOT OK AND R GTR BOS DO                                        07110000
   IF OK:=RCWMSCWSEARCH(R,BOS,F) THEN                                   07120000
   WHILE NOT(CONTROLDESC(R+1,F)) AND R!TOS DO                           07130000
   R:=R+1  ELSE R:=R-1;                                                 07140000
  C:=R; PRUNLNK:=OK;                                                    07150000
  END PRUNLNK;                                                          07160000
    PROCEDURE DUMPSTACK(INX);                                           07170000
        VALUE INX;                                                      07180000
        INTEGER INX;                                                    07190000
    BEGIN                                                               07200000
        INTEGER TOS,BOS,SEG,ADR,H,L,PRO,I;                              07210000
        REAL V,R;                                                       07220000
        BOOLEAN NORMAL,FOUND;                                           07230000
        FORMAT HD(X8,"STACK FROM ",A5," DOWN TO ",A5),                  07240000
    S(X8,"BED ENTRY AT ",A5,X2,"=",2(X1,O),                             07250000
      ", ","MASK AT ",A5,X2,"=",2(X1,O)),                               07260000
               C(X8,3A6,A4,"  + ",A4,"(",I4,")");                       07270000
        NEXTITEM;                                                       07280000
        WRITE(P[DBL],HD,                                                07290000
                OCTAL(TOS:=STAX[INX].CF),                               07300000
                IF (BOS:=STAX[INX].FF)=0 THEN "*****"                   07310000
                ELSE OCTAL(BOS));                                       07320000
        NORMAL:=BOOLEAN(STAX[INX].[7:1]);                               07330000
        IF INX=0 OR INX>BEDSTK THEN                                     07340000
        BEGIN                                                           07350000
            IF OPERAND(TOS,V) THEN                                      07360000
                BEGIN                                                   07370000
                       WRITE ( P[DBL],ITEM,OCTAL( TOS),                 07380000
                               OCTAL( H:= HIHALF(TOS) ),                07390000
                               OCTAL( L:= LOHALF( TOS) ),               07400000
                               "     " );                               07410000
                      TOS := TOS- 1 ;                                   07420000
           IF OPERAND(TOS,V) THEN ;% TO GET IN NEW TOS                  07430000
            IF(V=0) OR                                                  07440000
            ((V="[[[["&"[[[["[1:25:23]) AND                             07450000
                    NORMAL)            THEN                             07460000
            WHILE OPERAND(TOS-1,R) AND R=V DO                           07470000
            TOS:=TOS-1;                                                 07480000
           END;                                                         07490000
        END                                                             07500000
        ELSE                                                            07510000
        BEGIN                                                           07520000
    WRITE(P,S,OCTAL(V:=(STAX[INX].CF -1)),                              07530000
              OCTAL(HIHALF(V)),                                         07540000
                    OCTAL(LOHALF(V)),                                   07550000
              OCTAL(V-2),                                               07560000
                    OCTAL(R:=HIHALF(V-2)),                              07570000
                    OCTAL(H:=LOHALF(V-2)));                             07580000
      TOS:=TOS+4;                                                       07590000
            IF OCTAL(R.[24:6])="74" AND CONTROLDESC(V-1,V) THEN         07600000
            IF WITHIN(MCPROG,MAXMCPROG,V:=V.CF,SEG,ADR) THEN            07610000
            BEGIN                                                       07620000
                WRITE(LINE[*],C,"COMPLE","X SLEE","P AT  ",             07630000
                    OCTAL(SEG),OCTAL(ADR),ADR);                         07640000
                MOVE(NAMS[NAME[SEG].CF], LINE[6],                       07650000
                          NAME[SEG].FF);                                07660000
                WRITE(P[DBL],15,LINE[*]);                               07670000
            END                                                         07680000
            ELSE WRITE(P);                                              07690000
        END;                                                            07700000
        IF BOS=0 THEN BOS:=MAX(0,TOS-128) ELSE                          07710000
        IF BOS>TOS THEN BOS:=MAX(0,TOS-1);                              07720000
        FOR I:=TOS STEP -1 UNTIL BOS DO                                 07730000
        BEGIN                                                           07740000
            WRITE(P[DBL],ITEM,OCTAL(I),                                 07750000
                    OCTAL(H:=HIHALF(I)),                                07760000
                    OCTAL(L:=LOHALF(I)),"     ");                       07770000
            PRO:=-1;                                                    07780000
            IF (H.[24:2]=3) AND ((L:=L.CF)>0) THEN                      07790000
            BEGIN                                                       07800000
                IF FOUND:=                                              07810000
                    WITHIN(MCPROG,MAXMCPROG,L,SEG,ADR) AND              07820000
                    SEG!INITIALIZE          THEN                        07830000
                BEGIN                                                   07840000
                    WRITE(LINE[*],C,"MCP SE","GMENT ","AT    ",         07850000
                            OCTAL(SEG),OCTAL(ADR),ADR);                 07860000
                    MOVE(NAMS[NAME[SEG].CF],LINE[6],                    07870000
                              NAME[SEG].FF);                            07880000
                END                                                     07890000
                ELSE                                                    07900000
                IF FOUND:=WITHIN(INTSP,INTSPMAX,L,SEG,ADR) THEN         07910000
                BEGIN                                                   07920000
                    WRITE(LINE[*],C,"INTRIN","SIC NU","MBER  ",         07930000
                            OCTAL(SEG),OCTAL(ADR),ADR);                 07940000
                    MOVE(INAMS[INAME[SEG].CF],LINE[6],                  07950000
                               INAME[SEG].FF);                          07960000
                END                                                     07970000
                ELSE                                                    07980000
                IF NORMAL THEN                                          07990000
                WHILE (PRO:=PRO+1){PROWS AND NOT FOUND DO               08000000
                IF FOUND:=WITHIN(PROGS[PRO,*],PROGS[PRO,255],           08010000
                    L,SEG,ADR)            THEN                          08020000
                WRITE(LINE[*],C,"SEGMEN","T NUMB","ER    ",             08030000
                        OCTAL(SEG),OCTAL(ADR),ADR);                     08040000
                IF FOUND THEN                                           08050000
                WRITE(P[DBL],10,LINE[*]);                               08060000
            END;                                                        08070000
        END;                                                            08080000
    END DUMPING A STACK;                                                08090000
      PROCEDURE DUMPSPACESTACK(INX,I);                                  08100000
      VALUE INX;  REAL INX,I;                                           08110000
      BEGIN                                                             08120000
      FORMAT SSHD(X8,"THIS STACK IS A SPACESTACK.  IT LINKS ",          08130000
                  "DIRECTLY TO THE NEXT STACK PRINTED.");               08140000
       NEXTITEM;                                                        08150000
      WRITE (P[DBL],SSHD);                                              08160000
      DUMPSTACK(INX);                                                   08170000
      STAX[I:=0]:=SSTACK;                                               08180000
      END DUMP SPACESTACK;                                              08190000
    INTEGER PROCEDURE SPREAD(AT,F,C);                                   08200000
        VALUE AT;                                                       08210000
        INTEGER AT,F,C;                                                 08220000
    BEGIN                                                               08230000
        SPREAD:=CHRS(M[AT.ROW,AT.COL],0,3);                             08240000
        C:=(F:=CHRS(M[AT.ROW,AT.COL],3,5)).CF;                          08250000
        F:=F.FF;                                                        08260000
    END SPREAD;                                                         08270000
    PROCEDURE DUMPROGRAMS;                                              08280000
    BEGIN                                                               08290000
        INTEGER MIX,TYP,PRTH,PRTF,H,F,C,FPB,SD,AIT,S;                   08300000
        INTEGER A;                                                      08310000
        REAL JAR00;                                                     08320000
  REAL STARS, JAR0;  BOOLEAN SQOK;                                      08330000
        FORMAT HD(A5," = ",A6,2(X1,A5),X2,A1,X1,*A6),                   08340000
               H1(X8,"PROGRAM:",X8,"/",X7,", MIX = ",I2);               08350000
        INTEGER PCOL,SIZ,RO,CL,RP;                                      08360000
        REAL SEGS,SGM;                                                  08370000
        REAL SEG,ADR;                                                   08380000
        ARRAY LSTD[0:3];                                                08390000
        FORMAT SEGH(X8,"PRESENT PROGRAM SEGMENTS"//                     08400000
                    "SEGMENT SIZE  AT    THRU"//),                      08410000
                SEGMENT(X3,2(A4,X1),2(X1,A5),*("  INTRINSIC ",A3)),     08420000
                PD(A5," = ",A6,X1,2(A5,X1),", R+",A4,", +",A4);         08430000
        STARS:="****"; STARS.[6:18]:=STARS.[24:18];                     08440000
       IF PDATADESC(JAR,JAR0) THEN                                      08450000
        JAR0:=JAR0.CF;                                                  08460000
  IF (PRTOK:=PDATADESC(PRT,PRT0)) THEN                                  08470000
  PRTH:=SPREAD(PRT,PRTF,PRT0);                                          08480000
   IF PRT0>0 AND (SQOK:=PDATADESC(SQ,TYP) AND TYP:=TYP.CF>0) THEN       08490000
        FOR MIX:=1 STEP 1 UNTIL MIXMAX DO                               08500000
     IF (R:=TYP +MIX) GTR 0 AND OPERAND(R,R) AND BOOLEAN(R.[1:1]) AND   08510000
     R!0 AND (R:=R.[18:6])!63 AND                                       08520000
     (R=0 OR R=1 OR R=4 OR R=5 OR R=16 OR R=32) THEN                    08530000
      IF PDATADESC(PRT0+MIX,R) THEN                                     08540000
        BEGIN                                                           08550000
        NEXTPAGE;                                                       08560000
            WRITE(LINE[*],H1,MIX);                                      08570000
IF JAR0!0 AND DESCRIPTOR(JAR0+MIX,JAR00,F) AND F.[39:3]=5               08580000
                AND JAR00.CF>0                   THEN                   08590000
            BEGIN                                                       08600000
                MOVC(M[(A:=JAR00).ROW,A.COL],1,                         08610000
                     LINE[2],1,0,7);                                    08620000
                MOVC(M[(A:=A+1).ROW,A.COL],1,                           08630000
                     LINE[3],1,0,7);                                    08640000
            END                                                         08650000
            ELSE                                                        08660000
            BEGIN                                                       08670000
                MOVC(STARS,1,LINE[2],1,0,7);                            08680000
                MOVC(STARS,1,LINE[3],1,0,7);                            08690000
            END;                                                        08700000
            WRITE(P[DBL],15,LINE[*]);                                   08710000
            NEXTITEM;                                                   08720000
            WRITE(P,HD,                                                 08730000
                                                                        08740000
                OCTAL(PRT),                                             08750000
                OCTAL(PRTH),OCTAL(PRTF),OCTAL(PRT0)," ",                08760000
                2,"PRT[*,","*]    ",                                    08770000
                                                                        08780000
                OCTAL(PRT0+MIX),                                        08790000
                OCTAL(SPREAD(PRT0+MIX,F,R)),OCTAL(F),OCTAL(R),          08800000
                IF F=0 THEN " " ELSE "*",                               08810000
                3,"PRT[MI","X,*], ","CF=R  ",                           08820000
                                                                        08830000
                OCTAL(R+3),                                             08840000
                OCTAL(H:=SPREAD(R+3,F,FPB)),OCTAL(F),OCTAL(FPB),        08850000
                IF OCTAL(H.[30:6])="50" THEN " " ELSE "*",              08860000
                2,"R+3, F","PB    ",                                    08870000
                                                                        08880000
                OCTAL(R+4),                                             08890000
                OCTAL(H:=SPREAD(R+4,F,SD)),OCTAL(F),OCTAL(SD),          08900000
                IF OCTAL(H.[30:6])="50" THEN " " ELSE "*",              08910000
                4,"R+4, S","EGMENT"," DICTI","ONARY ",                  08920000
                                                                        08930000
                OCTAL(R+6),                                             08940000
                OCTAL(H:=SPREAD(R+6,F,AIT)),OCTAL(F),OCTAL(AIT),        08950000
                IF BOOLEAN(H.[30:1]) THEN " " ELSE "*",                 08960000
                2,"R+6, A","IT    ",                                    08970000
                                                                        08980000
                OCTAL(R+7),                                             08990000
                OCTAL(H:=SPREAD(R+7,F,C)),OCTAL(F),OCTAL(C),            09000000
                IF H.[30:2]=3 AND F<R AND C=0 THEN " " ELSE "*",        09010000
                7,"R+7, L","AST MS","CW FOR"," WHICH"," MSFF ",         09020000
                  "WAS FA","LSE   ",                                    09030000
                                                                        09040000
                OCTAL(R+8),                                             09050000
                OCTAL(H:=SPREAD(R+8,F,C)),OCTAL(F),OCTAL(C),            09060000
                " ",                                                    09070000
                2,"R+10, ","INCW  ",                                    09080000
                                                                        09090000
                OCTAL(R+9),                                             09100000
                OCTAL(H:=SPREAD(R+9,F,C)),OCTAL(F),OCTAL(C),            09110000
                IF H=0 AND F=0 THEN " " ELSE "*",                       09120000
                9,"R+11, ","LITERA","L FOR ","LAST C","OMMUNI",         09130000
                  "CATE OR"," PROGR","AM REL","EASE  ",                 09140000
                                                                        09150000
                OCTAL(R+10),                                            09160000
                OCTAL(H:=SPREAD(R+10,S,C)),OCTAL(S),OCTAL(C),           09170000
 IF OCTAL(H.[30:6])="50" AND S>0 AND R=C AND (R:=R-1)>(S:=S-1)          09180000
   THEN " " ELSE IF (S:=0)=0 THEN "*" ELSE "*",                         09190000
                5,"R+12, ","FF = B","OTTOM ","OF THE"," STACK");        09200000
            NEXTITEM;                                                   09210000
            PROGS[PROWS:=0,255]:=PCOL:=-1;                              09220000
   IF PDATADESC(R+5,SD) THEN                                            09230000
            IF OPERAND(SD:=SD.CF,SEGS) AND SEGS.[1:32]=0 THEN           09240000
            BEGIN                                                       09250000
                WRITE(P,SEGH);                                          09260000
                FOR SEG:=1 STEP 1 UNTIL SEGS DO                         09270000
                IF OPERAND(SD+SEG,SGM) AND                              09280000
                    (ADR:=SGM.FF)>1023 THEN                             09290000
                BEGIN                                                   09300000
                    SIZ:=                                               09310000
                        IF OPERAND(ADR-1,SIZ) AND                       09320000
 (SIZ.[1:17]=0 OR (OPERAND(ADR-2,H) AND H.[3:6]=7)) AND                 09330000
                        SIZ.CF =  SEG  THEN                             09340000
                        SIZ.FF ELSE 0;                                  09350000
                    IF BOOLEAN(SGM.[2:1]) THEN                          09360000
                    WRITE(P,SEGMENT,OCTAL(SEG),OCTAL(SIZ),OCTAL(ADR),   09370000
                            IF SIZ=0 THEN STARS ELSE OCTAL(ADR+SIZ-1),  09380000
                            1,OCTAL(SGM.CF))                            09390000
                    ELSE                                                09400000
                    BEGIN                                               09410000
                        IF (PCOL:=PCOL+1)=255 THEN                      09420000
                        BEGIN                                           09430000
                            PROGS[PROWS,255]:=254;                      09440000
                            PROWS:=PROWS+1;                             09450000
                            PCOL:=0;                                    09460000
                        END;                                            09470000
                        PROGS[PROWS,PCOL]:=                             09480000
                            ADR&                                        09490000
                            (IF SIZ=0 THEN 0 ELSE ADR+SIZ-1)[18:33:15]& 09500000
                            SEG[8:38:10];                               09510000
                    END;                                                09520000
                END;                                                    09530000
                IF (PROGS[PROWS,255]:=PCOL)}0 THEN                      09540000
                BEGIN                                                   09550000
                    FOR RO:=0 STEP 1 UNTIL PROWS DO                     09560000
                    SEQUENCE(PROGS[RO,*],PROGS[RO,255]);                09570000
                    SEGS:=PROWS+1;                                      09580000
                    FOR I:=0 STEP 1 UNTIL PROWS DO                      09590000
                    BEGIN                                               09600000
                        SEGS:=SEGS+PROGS[I,255];                        09610000
                        LSTD[I]:=0;                                     09620000
                    END;                                                09630000
                    FOR SEG:=1 STEP 1 UNTIL SEGS DO                     09640000
                    BEGIN                                               09650000
                        RO:=0;                                          09660000
                        IF PROWS>0 THEN                                 09670000
                        FOR I:=1 STEP 1 UNTIL PROWS DO                  09680000
                        IF LSTD[RO]=255 OR                              09690000
                            (LSTD[I]<255 AND                            09700000
                            PROGS[I,LSTD[I]].CF<PROGS[RO,LSTD[RO]].CF)  09710000
                                                             THEN       09720000
                        RO:=I;                                          09730000
                        WRITE(P,SEGMENT,                                09740000
                                OCTAL((SGM:=PROGS[RO,LSTD[RO]]).[8:10]),09750000
                                IF SGM.FF=0 THEN STARS ELSE             09760000
                                    OCTAL(SGM.FF-SGM.CF+1),             09770000
                                OCTAL(SGM.CF),OCTAL(SGM.FF));           09780000
                        LSTD[RO]:=LSTD[RO]+1;                           09790000
                    END;                                                09800000
                END;                                                    09810000
            END;                                                        09820000
  IF (H:=MIXSTK[MIX])=0 THEN BEGIN                                      09830000
 IF S!0 THEN IF PRUNLNK(R,S,C) THEN R:=C;                               09840000
STAX[0]:=R&S[18:33:15]&1[7:47:1]; END                                   09850000
 ELSE BEGIN MIXSTK[MIX]:=0;                                             09860000
      IF H=SSTACKINX THEN DUMPSPACESTACK(H,H);                          09870000
 IF STAX[H].FF=0 THEN STAX[H].FF:=S; END;                               09880000
  DUMPSTACK(H);                                                         09890000
        END;                                                            09900000
  IF PRTOK AND SQOK THEN                                                09910000
  FOR MIX:=1 STEP 1 UNTIL MIXMAX DO                                     09920000
  IF H:=MIXSTK[MIX]!0 THEN STAX[H].[7:1]:=0;                            09930000
    END DUMPING NORMAL STATE PROGRAM INFO;                              09940000
    PROCEDURE DUMPCONTROLSTACKS;                                        09950000
    BEGIN                                                               09960000
        FORMAT H(X8,"CONTROL STATE STACKS");                            09970000
        REAL V,R,A,I; LABEL LOW,UN,NONE,DUMPIT,BOT;                     09980000
        INTEGER INX,K; ARRAY MCPST[0:3];                                09990000
        NEXTPAGE;                                                       10000000
        WRITE(P[DBL],H);                                                10010000
        IF OPERAND(I:=111,R) AND                                        10020000
            R="EEEE"&"EEEE"[1:25:23] THEN                               10030000
        WHILE OPERAND(I-1,V) AND V=R DO                                 10040000
        I:=I-1;                                                         10050000
        STAX[0]:=I&64[18:33:15];                                        10060000
        DUMPSTACK(0);                                                   10070000
        NEXTPAGE;                                                       10080000
        % THIS NEXT PART TRIES TO FIND THE MCP STACKS IN THE AREA       10085000
        % JUST BELOW THE FENCE. (STACKQ,WORKERSTACK,ISTACK)             10086000
        % TO FIND STACKQ THIS PRESUMES PUNT IS 11 WORDS LONG            10087000
        % NUMSTACK = 2, AND STANDARDSTACK=128.                          10088000
        I:=-1;                                                          10090000
        K:=VFENCE - 142; % BOTTOM OF FIRST STACKQ                       10095000
        V:=K - 128;      % BOTTOM OF SECOND STACKQ                      10100000
        IF OPERAND(STACKQ,R) AND R.[1:32]=0 AND VFENCE>R THEN           10105000
        IF R = K THEN                                                   10110000
        BEGIN                                                           10115000
            K:=V; V:=R; GO TO LOW;                                      10120000
        END ELSE IF R = V THEN                                          10125000
        BEGIN                                                           10130000
LOW:       IF OPERAND(V,R) AND R.[1:32]=0 AND R=K                       10135000
           THEN GO TO NONE ELSE GO TO UN;                               10140000
        END;                                                            10145000
        MCPST[I:=I+1]:=(V+127)&V[18:33:15];                             10150000
UN:     MCPST[I:=I+1]:=(K+127)&K[18:33:15];                             10155000
NONE:   IF OPERAND(WORKERSTACK,R) AND R>PRT0 AND VFENCE>R THEN          10160000
        IF (NOT OPERAND(TOGLE,A)) OR BOOLEAN(A.[33:1]) THEN             10165000
        MCPST[I:=I+1]:=(R+127)&R[18:33:15]; % WORKERSTACK               10170000
        IF PDATADESC(ISTACK,R) AND (V:=R.[8:10])>0 AND (R:=R.CF)>0 THEN 10175000
        IF A.[44:1]=0 THEN MCPST[I:=I+1]:=(R+V-1)&R[18:33:15];          10180000
        % NOW DUMP OUT THE BEDDED STACKS                                10184000
        FOR INX:=1 STEP 1 UNTIL BEDSTK DO                               10185000
        IF NOT BOOLEAN((R:=STAX[INX]).[7:1]) THEN                       10190000
        BEGIN R:=R.CF;                                                  10195000
            IF (K:=INX)  = SSTACKINX THEN                               10200000
            BEGIN                                                       10205000
                DUMPSPACESTACK(K,K); R:=STAX[0].CF+2;                   10210000
            END;                                                        10215000
            IF R>PRT0 AND VFENCE>R THEN                                 10220000
            BEGIN                                                       10225000
                FOR A:=0 STEP 1 UNTIL I DO                              10230000
                IF (V:=MCPST[A]).CF>R AND R>(V:=V.FF) THEN              10235000
                BEGIN STAX[K].FF:=V;                                    10240000
                    MCPST[A]:=0; GO TO DUMPIT;                          10245000
                END;                                                    10250000
                V:=PRT0; GO TO BOT;                                     10255000
            END;                                                        10260000
            IF STAX[K].FF = (V:=0) THEN                                 10265000
BOT:        STAX[K].FF:=IF RCWMSCWSEARCH(R-2,V,R) THEN (R-1) ELSE 0;    10270000
DUMPIT:     DUMPSTACK(K);                                               10275000
        END;                                                            10280000
        % MOVE UNBEDDED MCP STACKS TO MCP LIST                          10284000
        FOR A:=0 STEP 1 UNTIL I DO                                      10285000
        IF MCPST[A]!0 THEN STAX[MAXSTK:=MAXSTK+1]:=MCPST[A];            10290000
        FOR INX:=(BEDSTK+1) STEP 1 UNTIL MAXSTK DO                      10295000
        BEGIN                                                           10300000
            IF PRUNLNK(STAX[INX].CF,STAX[INX].FF,R)                     10305000
            THEN STAX[INX].CF:=R;                                       10310000
            DUMPSTACK(INX);                                             10315000
        END;                                                            10320000
    END DUMPING CONTROL STATE STACKS;                                   10330000
    REAL VFORK,FORKLNK,PREVLNK,FORKPRO,FQPARAM;                         10340000
    PROCEDURE DUMPMCPINFO;                                              10350000
    BEGIN                                                               10360000
        REAL R,A,N,L,TA,TS,MA,MS,LA,LS,RA,RS,PA,PS;                     10370000
        INTEGER TYP,S,C;                                                10380000
        STREAM PROCEDURE MOVD(S,D,W);                                   10390000
            VALUE W;                                                    10400000
        BEGIN                                                           10410000
            LABEL EXIT;                                                 10420000
            SI:=S; DI:=D;                                               10430000
            W(8(IF SC="~" THEN JUMP OUT 2 TO EXIT; DS:=CHR));           10440000
            SI:=SI-1; DI:=DI-1;                                         10450000
            EXIT: DS:=CHR;                                              10460000
        END MOVD;                                                       10470000
        FORMAT SE(A3," = ",2(O,X1),X24,"(",O,X1,O,")"),                 10480000
                TF(X8,"BIT ",I2," = ",I1,", ",*A6/);                    10490000
        BOOLEAN STREAM PROCEDURE BITON(W,B);                            10500000
            VALUE B;                                                    10510000
        BEGIN                                                           10520000
            SI:=W; SKIP B SB;                                           10530000
            IF SB THEN TALLY:=1;                                        10540000
            BITON:=TALLY;                                               10550000
        END;                                                            10560000
        ARRAY TB[0:61];                                                 10570000
        REAL UA,US,IA,IS,FA,FS;                                         10580000
        FORMAT LUN(A3),                                                 10590000
            FT(A1,X1,A2,X1,A1,X1,A3,X1,A2,X1,A1,X1,A2,X1,A3),           10600000
            RT(A3,X1,A2,X1,A4,X1,A6,X1,A3),                             10610000
            PT(A1,X1,A1,X1,A5,X1,A5,X1,A6),                             10620000
            IOATH(X8,"FIELDS OF WORDS IN THE I/O ASSIGNMENT TABLES:"//  10630000
            X8,"TINU"/                                                  10640000
            X12,"  [0:3]"/                                              10650000
            X12,"1 [3:5]   HARDWARE UNIT NUMBER"/                       10660000
            X12,"  [8:3]"/                                              10670000
            X12,"2 [11:7]  POWER OF 2"/                                 10680000
            X12,"  [18:6]"/                                             10690000
            X12,"3 [24:1]  IN=0, OUT=1"/                                10700000
            X12,"  [25:5]"/                                             10710000
            X12,"4 [30:18] UNIT MNEMONIC"//                             10720000
            X8,"RDCTABLE"/                                              10730000
            X12,"  [0:8]"/                                              10740000
            X12,"1 [8:6]   MIX INDEX IF ASSIGNED"/                      10750000
            X12,"2 [14:10] REEL NUMBER"/                                10760000
            X12,"3 [24:17] CREATION DATE"/                              10770000
            X12,"4 [41:7]  CYCLE"//                                     10780000
            X8,"PRNTABLE"/                                              10790000
            X12,"  [0:1]"/                                              10800000
            X12,"1 [1:1]   IF WRITE RING PRESENT"/                      10810000
            X12,"  [2:13]"/                                             10820000
            X12,"2 [15:15] ADDRESS OF TOP I/O DESCRIPTOR"/              10830000
            X12,"3 [30:18] PHYSICAL REEL NUMBER"//                      10840000
            "LUN",X6,                                                   10850000
            "TINU",X24,                                                 10860000
            "MULTITABLE",X4,                                            10870000
            "LABELTABLE",X4,                                            10880000
            "RDCTABLE",X24,                                             10890000
            "PRNTABLE"/                                                 10900000
            X9,                                                         10910000
            X2,"1",X4,"2",X6,"3",X4,"4",X8,                             10920000
            X14,X14,                                                    10930000
            X4,"1",X2,"2",X4,"3",X6,"4",X8,                             10940000
            X2,"1",X7,"2",X5,"3",X5);                                   10950000
        BOOLEAN PROCEDURE VERIFY(WHAT,A,S);                             10960000
            VALUE WHAT;                                                 10970000
            INTEGER WHAT;                                               10980000
            REAL A,S;                                                   10990000
        BEGIN                                                           11000000
            DISPLAY(WHAT,FALSE);                                        11010000
            VERIFY:=                                                    11020000
     PDATADESC(WHAT,A) AND                                              11030000
                (S:=A.[8:10])>0 AND                                     11040000
                (A:=A.CF)>0 AND                                         11050000
                (A+S-1)<MAXCOR;                                         11060000
        END VERIFY;                                                     11070000
        FORMAT IOQSH("FIELDS OF WORDS IN THE I/O-QUEUE TABLES"//        11080000
            X8,"UNIT"/                                                  11090000
            X12,"  [0:1]"/                                              11100000
            X12,"1 [1:4]   UNIT TYPE"/                                  11110000
            X12,"2 [5:8]   ERROR FIELD"/                                11120000
            X12,"3 [13:1]  UNIT NOT READY"/                             11130000
            X12,"4 [14:1]  ERROR FLAG"/                                 11140000
            X12,"5 [15:1]  WAITING FOR AN I/O CHANNEL"/                 11150000
            X12,"6 [16:2]  I/O IN PROCESS"/                             11160000
            X12,"7 [18:15] INDEX OF FIRST I/O REQUEST"/                 11170000
            X12,"8 [33:15] INDEX OF LAST I/O REQUEST"//                 11180000
            X8,"LOCATQUE"/                                              11190000
            X12,"  [0:3]   = 5, DESCRIPTOR BITS"/                       11200000
            X12,"1 [3:5]   MIX INDEX"/                                  11210000
            X12,"  [8:4]"/                                              11220000
            X12,"2 [12:6]  LOGICAL UNIT NUMBER"/                        11230000
            X12,"3 [18:15] INDEX OF NEXT I/O REQUEST"/                  11240000
            X12,"4 [33:15] ADDRESS OF I/O DESCRIPTOR"//                 11250000
            "LUN/",X8,                                                  11260000
            "UNIT",X31,                                                 11270000
            "IOQUE",X19,                                                11280000
            "LOCATQUE",X21,                                             11290000
            "FINALQUE",X11/                                             11300000
            "INDEX",X7,                                                 11310000
            X2,"1",X2,"2",X3,"3",X1,"4",X1,"5",                         11320000
                X1,"6",X1,"7",X5,"8",X11,X24,                           11330000
            X2,"1",X5,"2",X2,"3",X5,"4"//),                             11340000
            IFO(A5),                                                    11350000
            UFO(A1,X1,A2,X1,A3,4(X1,A1),2(X1,A5)),                      11360000
            WFO(O,X1,O),                                                11370000
            LFO(A1,3(X1,A2),2(X1,A5));                                  11380000
  LABEL FQBAD, FQEND, Q;                                                11390000
   PROCEDURE WRITEFORKQUE;                                              11400000
     BEGIN                                                              11410000
   FORMAT FQITEM(X48,2(X1,O),X6);                                       11420000
          PREVLNK:=FORKLNK; FQPARAM:=FORKLNK+2;                         11430000
          WRITE(LINE[*],FQITEM,OCTAL(HIHALF(FQPARAM)),                  11440000
                OCTAL(LOHALF(FQPARAM)));                                11450000
          MOVE(NAMS[NAME[FORKPRO].CF],LINE[2],                          11460000
                    NAME[FORKPRO].FF);                                  11470000
    WRITE (P[DBL],9,LINE[*]);                                           11480000
     FORKLNK:=VFORK.CF;                                                 11490000
       END WRITE FORKQUE;                                               11500000
  FORMAT FQEMPTY(X8," THE FORK QUEUE IS EMPTY"),                        11510000
         FQHD(X8,"THE FORK QUEUE CONTENTS ARE :"//                      11520000
              X16," (INDEPENDENT RUNNERS WAITING ",                     11530000
              "TO BE STARTED BY THE MCP )"//                            11540000
              X16,"PROCEDURE NAME",X18,                                 11550000
              "PARAMETER TO BE PASSED TO PROCEDURE"//);                 11560000
  FORMAT SQBAD(X24,"THE SQ IS NOT CORRECT."),                           11570000
         SQOUT(X8,I2,X8,A4,X1,A1,X1,A1,5(X1,A2),X4,2A6),                11580000
         SQHD(X8,"FIELDS OF THE WORDS IN THE SQ:"//,X8,"SQ"/            11590000
       ,X12,"  [0:12]"/                                                 11600000
       ,X12,"1 [12:3] FLAGS FOR EXPANDING A JOBS AREA."/                11610000
       ,X12,"2 [15:3] NUMBER OF SWAPS FOR JOB."/                        11620000
       ,X12,"3 [18:6] STATUS OF JOB."/                                  11630000
       ,X12,"4 [24:6] (NUMBER OF CHUNKS POSSESSED BY JOB)-1."/          11640000
       ,X12,"5 [30:6] CHUNK NUMBER OF LAST CHUNK FOR JOB."/             11650000
       ,X12,"6 [36:6] CHUNK NUMBER OF FIRST CHUNK FOR JOB."/            11660000
       ,X12,"7 [42:6] MIX INDEX OF JOB FOLLOWING IN",                   11670000
              " THE SWAP OR READY QUE."//,X7,"MIX",X13,"1",             11680000
        X1,"2",X2,"3",X2,"4",X2,"5",X2,"6",X2,"7",X4,"STATUS"/);        11690000
  FORMAT FQBD("******"," THE FORKQUE IS BROKEN.  A BACKWARDS ",         11700000
        "SEARCH WILL BE MADE AND EVERYTHING THAT CAN BE FOUND",         11710000
       " WILL BE PRINTED.");                                            11720000
        NEXTPAGE;                                                       11730000
        DISPLAY(TOGLE,FALSE);                                           11740000
        IF OPERAND(TOGLE,R) THEN                                        11750000
        BEGIN                                                           11760000
            FOR I:=1,2,3,5 STEP 1 UNTIL 20,25 STEP 1 UNTIL 31,35 DO     11770000
            IF BITON(R,I) THEN                                          11780000
            WRITE(P,TF,I,1,-1);                                         11790000
            FILL TB[*] WITH                                             11800000
                "CANDEI","NPUTRE","ADY   ",                             11810000
                "WORKIN","G     ","      ",                             11820000
                "INTFRE","E     ","      ",                             11830000
                "QTRDY ","      ","      ",                             11840000
                "NOBACK","TALK  ","      ",                             11850000
                "KEYBOA","RDREAD","Y     ",                             11860000
                "NEEDSE","LECT  ","      ",                             11870000
                "SYSDIS","KTOG  ","      ",                             11880000
                "NSECON","DREADY","      ",                             11890000
                "HOLDFR","EE    ","      ",                             11900000
                "USERDI","SKREAD","Y     ",                             11910000
                "AREARD","Y     ","      ",                             11920000
                "STACKU","SE    ","      ",                             11930000
                "SHEETF","REE   ","      ",                             11940000
                "STATUS","BIT   ","      ",                             11950000
                "HP2TOG","      ","      ";                             11960000
            WRITE(P,TF,4,R.[4:1],1,"PBUSY ");                           11961000
            WRITE(P,TF,21,R.[21:1],1,"CDFREE");                         11962000
            WRITE(P,TF,22,R.[22:1],3,"FINDIN","GADDRE","SS    ");       11963000
            WRITE(P,TF,23,R.[23:1],4,"SCRATC","HDIREC","TORYRE",        11964000
                                     "ADY   ");                         11965000
            WRITE(P,TF,24,R.[24:1],2,"MCPFRE","E     ");                11966000
            FOR I:=32,33,34,36,37,39 STEP 1 UNTIL 47 DO                 11970000
            WRITE(P,TF,I,REAL(BITON(R,I)),3,FOR N:=0 STEP 1 UNTIL 2 DO  11980000
                [TB[3|(I-32)+N]]);                                      11990000
        END;                                                            12000000
        NEXTITEM;                                                       12010000
        DISPLAY(OPTION,FALSE);                                          12020000
        IF OPERAND(OPTION,R) THEN                                       12030000
        BEGIN                                                           12040000
            FOR I:=1,3 STEP 1 UNTIL 16 DO                               12050000
            IF BITON(R,I) THEN                                          12060000
            WRITE(P,TF,I,1,-1);                                         12070000
            FILL TB[*] WITH                                             12080000
                "USEDRA","      ",                                      12090000
                "USEDRB","      ",                                      12100000
                "BOJMES","S     ",                                      12110000
                "EOJMES","S     ",                                      12120000
                "OPNMES","S     ",                                      12130000
                "TERMGO","      ",                                      12140000
                "GIVEDA","TE    ",                                      12150000
                "GIVETI","ME    ",                                      12160000
                "HALTSE","T     ",                                      12170000
                "AUTOPR","INT   ",                                      12180000
                "REMOTE","      ",                                      12190000
                "CANDYM","ESS   ",                                      12200000
                "COPNME","SS    ",                                      12210000
                "CLOSEM","ESS   ",                                      12220000
                "ERRORM","SG    ",                                      12230000
                "RETMSG","      ",                                      12240000
                "LIBMSG","      ",                                      12250000
                "SCHEDM","SG    ",                                      12260000
                "SECMSG","      ",                                      12270000
                "DSKTOG","      ",                                      12280000
                "RELTOG","      ",                                      12290000
                "PBDREL","      ",                                      12300000
                "CHECK ","      ",                                      12310000
                "DISKMS","G     ",                                      12320000
                "DKLOG ","      ",                                      12330000
                "LIBERR","      ",                                      12340000
                "USEPBD","      ",                                      12350000
                "SVPBT ","      ",                                      12360000
                "RSTOG ","      ",                                      12370000
                "AUTOUN","LD    ",                                      12380000
                "BATCHT","OG    ";                                      12385000
            WRITE(P,TF,2,R.[2:1],2,"MOD3IO","S     ");                  12390000
            FOR I:=17 STEP 1 UNTIL 47 DO                                12400000
            WRITE(P,TF,I,REAL(BITON(R,I)),2,                            12410000
                TB[A:=2|(47-I)],TB[A+1]);                               12420000
        END;                                                            12430000
        NEXTITEM;                                                       12440000
        DISPLAY(MESSAGEHOLDER,FALSE);                                   12450000
    I:=0;                                                               12460000
        IF OPERAND(MESSAGEHOLDER,R) AND (R:=R.CF)!0 THEN                12470000
        DO                                                              12480000
        BEGIN                                                           12490000
            WRITE(LINE[*],ITEM,OCTAL(R),                                12500000
                OCTAL(HIHALF(R)),OCTAL(LOHALF(R)),"     ");             12510000
            MOVD(M[(R+1).ROW,(R+1).COL],LINE[4],MIN(9,MAXCOR-R));       12520000
            WRITE(P,15,LINE[*]);                                        12530000
        END                                                             12540000
        UNTIL                                                           12550000
            (I:=I+1)>40 OR                                              12560000
            NOT OPERAND(R,R) OR                                         12570000
            (R:=R.FF)=0;                                                12580000
        NEXTITEM;                                                       12590000
  COMMENT ... THE FOLLOWING SECTION PRINTS THE CONTENTS                 12600000
           OF THE FORK QUEUE SINCE THE FORKQUE HAS                      12610000
           REPLACED THE SLATE. THE QUE CONTAINS A 5                     12620000
           WORD ENTRY FOR EACH PROCEDURE. THESE ENTRIES                 12630000
           ARE DISJOINT AND ARE LINKED BY THE FIRST                     12640000
                               WORD IN EACH ENTRY. THE HEAD AND TAIL OF 12650000
           QUE ARE KEPT IN FORKQUE.  THIS QUE IS                        12660000
           ANALYZED LIKE THE BED BUT ONLY A FORWARD                     12670000
           SEARCH IS DONE. ........ FGB ........,                       12680000
  HAH ... THERE IS A BACKWARD SEARCH ... WPM......;                     12690000
  IF ( PDATADESC(FORKQUE,VFORK) AND                                     12700000
      (VFORK.[9:9]=511) AND                                             12710000
      (FORKLNK:=VFORK.CF)!FORKQUE ) THEN                                12720000
      BEGIN                                                             12730000
       WRITE(P,FQHD);                                                   12740000
       PREVLNK:=FORKQUE;                                                12750000
       WHILE FORKLNK!FORKQUE DO                                         12760000
     IF (OPERAND(FORKLNK,VFORK) AND                                     12770000
           VFORK.FF=PREVLNK AND                                         12780000
           OPERAND(FORKLNK+1,FORKPRO) AND                               12790000
                               (FORKPRO:=FORKPRO.CF) GEQ 129 AND        12800000
         FORKPRO LEQ PRTMAX) THEN                                       12810000
   WRITEFORKQUE                                                         12820000
          ELSE GO TO FQBAD;                                             12830000
      END ELSE WRITE(P,FQEMPTY); GO TO FQEND;                           12840000
  FQBAD:   PREVLNK:=FORKQUE;                                            12850000
  IF ( PDATADESC(FORKQUE,VFORK) AND                                     12860000
      (VFORK.[9:9]=511) AND                                             12870000
      (FORKLNK:=VFORK.FF)!FORKQUE ) THEN                                12880000
       WHILE FORKLNK!FORKQUE DO                                         12890000
     IF (OPERAND(FORKLNK,VFORK) AND                                     12900000
           VFORK.CF=PREVLNK AND                                         12910000
           OPERAND(FORKLNK+1,FORKPRO) AND                               12920000
                               (FORKPRO:=FORKPRO.CF) GEQ 129 AND        12930000
         FORKPRO LEQ PRTMAX) THEN BEGIN                                 12940000
   PREVLNK:=FORKLNK;  FORKLNK:=VFORK.FF;  END ELSE GO TO Q;             12950000
Q: WRITE (P,FQBD);  FORKLNK:=PREVLNK;                                   12960000
     WHILE FORKLNK!FORKQUE  DO                                          12970000
      WRITEFORKQUE;                                                     12980000
    FQEND:                                                              12990000
        NEXTITEM; NEXTPAGE;                                             13000000
        IF VERIFY(TINU,TA,TS) AND                                       13010000
           VERIFY(MULTITABLE,MA,MS) AND                                 13020000
           VERIFY(LABELTABLE,LA,LS) AND                                 13030000
           VERIFY(RDCTABLE,RA,RS) AND                                   13040000
           VERIFY(PRNTABLE,PA,PS) THEN                                  13050000
        BEGIN                                                           13060000
            S:=MAX(TS,MS,LS,RS,PS)-1;                                   13070000
            WRITE(P,IOATH);                                             13080000
            FOR I:=0 STEP 1 UNTIL S DO                                  13090000
            BEGIN                                                       13100000
            WRITE(TB[*],LUN,OCTAL(I));                                  13110000
            IF I<TS THEN                                                13120000
            BEGIN                                                       13130000
                WRITE(LINE[*],FT,                                       13140000
                    (A:=HIHALF(TA+I)).[24:3],                           13150000
                    OCTAL(A.[27:5]),                                    13160000
                    A.[32:3],                                           13170000
                    OCTAL(A.[35:7]),                                    13180000
                    OCTAL(A.[42:6]),                                    13190000
                    (A:=LOHALF(TA+I)).[24:1],                           13200000
                    OCTAL(A.[25:5]),                                    13210000
                    A.[30:18]);                                         13220000
                MOVC(LINE[0],0,TB[1],1,2,6);                            13230000
            END;                                                        13240000
            IF I<MS THEN                                                13250000
                MOVC(M[(MA+I).ROW,(MA+I).COL],0,TB[4],5,1,0);           13260000
            IF I<LS THEN                                                13270000
                MOVC(M[(LA+I).ROW,(LA+I).COL],0,TB[6],3,1,0);           13280000
                IF I<RS THEN                                            13290000
                BEGIN                                                   13300000
                    WRITE(LINE[*],RT,                                   13310000
                    OCTAL((A:=HIHALF(RA+I)).[24:8]),                    13320000
                    OCTAL(A.[32:6]),                                    13330000
                    OCTAL(A.[38:10]),                                   13340000
                    OCTAL((A:=LOHALF(RA+I)).[24:17]),                   13350000
                    OCTAL(A.[41:7]));                                   13360000
                    MOVC(LINE[0],0,TB[8],1,2,6);                        13370000
                END;                                                    13380000
                IF I<PS THEN                                            13390000
                BEGIN                                                   13400000
                    WRITE(LINE[*],PT,                                   13410000
                    (A:=HIHALF(PA+I)).[24:1],                           13420000
                    A.[25:1],                                           13430000
                    OCTAL(A.[26:13]),                                   13440000
                    OCTAL((A:=LOHALF(PA+I)&A[15:39:9]).[15:15]),        13450000
                    OCTAL(A.[30:18]));                                  13460000
                    MOVC(LINE[0],0,TB[11],5,2,6);                       13470000
                END;                                                    13480000
                WRITE(P,15,TB[*]);                                      13490000
            END;                                                        13500000
        END;                                                            13510000
        NEXTPAGE;                                                       13520000
        DISPLAY(IOQUEAVAIL,FALSE);                                      13530000
        IF  VERIFY(UNIT,UA,US) AND                                      13540000
            VERIFY(IOQUE,IA,IS) AND                                     13550000
            VERIFY(LOCATQUE,LA,LS) AND                                  13560000
            VERIFY(FINALQUE,FA,FS) THEN                                 13570000
        BEGIN                                                           13580000
            S:=MAX(US,IS,LS,FS)-1;                                      13590000
            WRITE(P,IOQSH);                                             13600000
            FOR I:=0 STEP 1 UNTIL S DO                                  13610000
            BEGIN                                                       13620000
                WRITE(TB[*],IFO,OCTAL(I));                              13630000
                IF I<US THEN                                            13640000
                BEGIN                                                   13650000
                    WRITE(LINE[*],UFO,                                  13660000
                    (A:=HIHALF(UA+I)).[24:1],                           13670000
                    OCTAL(A.[25:4]),                                    13680000
                    OCTAL(A.[29:8]),                                    13690000
                    A.[37:1],                                           13700000
                    A.[38:1],                                           13710000
                    A.[39:1],                                           13720000
                    A.[40:2],                                           13730000
                    OCTAL((A:=LOHALF(UA+I)&A[18:42:6]).[18:15]),        13740000
                    OCTAL(A.[33:15]));                                  13750000
                    MOVC(LINE[0],0,TB[1],4,3,4);                        13760000
                END;                                                    13770000
                IF I<IS THEN                                            13780000
                BEGIN                                                   13790000
                    WRITE(LINE[*],WFO,                                  13800000
                    OCTAL(HIHALF(IA+I)),                                13810000
                    OCTAL(LOHALF(IA+I)));                               13820000
                    MOVC(LINE[0],0,TB[5],7,2,1);                        13830000
                END;                                                    13840000
                IF I<LS THEN                                            13850000
                BEGIN                                                   13860000
                    WRITE(LINE[*],LFO,                                  13870000
                    (A:=HIHALF(LA+I)).[24:3],                           13880000
                    OCTAL(A.[27:5]),                                    13890000
                    OCTAL(A.[32:4]),                                    13900000
                    OCTAL(A.[36:6]),                                    13910000
                    OCTAL((A:=LOHALF(LA+I)&A[18:42:6]).[18:15]),        13920000
                    OCTAL(A.[33:15]));                                  13930000
                    MOVC(LINE[0],0,TB[8],7,2,6);                        13940000
                END;                                                    13950000
                IF I<FS THEN                                            13960000
                BEGIN                                                   13970000
                    WRITE(LINE[*],WFO,                                  13980000
                    OCTAL(HIHALF(FA+I)),                                13990000
                    OCTAL(LOHALF(FA+I)));                               14000000
                    MOVC(LINE[0],0,TB[12],4,2,1);                       14010000
                END;                                                    14020000
                WRITE(P,15,TB[*]);                                      14030000
            END;                                                        14040000
        END;                                                            14050000
  NEXTPAGE;  DISPLAY(SQ,FALSE);                                         14060000
  IF PDATADESC(SQ,A) AND (A:=A.CF)>0 THEN BEGIN                         14070000
   WRITE (P,SQHD);                                                      14080000
    FILL TB[*] WITH                                                     14090000
      "TIMEND","      ",                                                14100000
      "WAITSW","AP    ",                                                14110000
      "BOJSTA","TE    ",                                                14120000
      "SATISF","Y     ",                                                14130000
      "EOJSTA","TE    ",                                                14140000
      "FORCES","WAP   ",                                                14150000
      "TRANSI","T     ",                                                14160000
      "WAITST","ATE   ",                                                14170000
      "READYS","TATE  ",                                                14180000
      "RDYRPT","      ",                                                14190000
      "READYB","      ",                                                14200000
      "RUNNIN","G     ",                                                14210000
      "SELECT","ING   ",                                                14220000
      "STABLE","      ",                                                14230000
      "*BAD S","TATUS*";                                                14240000
    FOR S:=1 STEP 1 UNTIL MIXMAX DO                                     14250000
    IF OPERAND(A+S,R) AND R!0 AND BOOLEAN(R.[1:1]) THEN BEGIN           14260000
     N:=L:=R.[18:6];                                                    14270000
   IF N>6 THEN IF (N:=N-1)>10 THEN IF N=15 THEN N:=11                   14280000
   ELSE IF N=31 THEN N:=12 ELSE IF N=55 THEN N:=13 ELSE N:=14;          14290000
   WRITE (P,SQOUT,S,OCTAL(CHRS(R,0,2)),OCTAL(R.[12:3]),                 14300000
          OCTAL(R.[15:3]),OCTAL(L),OCTAL(R.[24:6]),                     14310000
          OCTAL(R.[30:6]),OCTAL(R.[36:6]),OCTAL(R.[42:6]),              14320000
          TB[N:=N+N],TB[N+1]);                                          14330000
   END; END ELSE                                                        14340000
    WRITE (P[DBL],SQBAD);                                               14350000
    END DUMPING MCP INFO;                                               14360000
     INTEGER STREAM PROCEDURE MCPCNT(A); VALUE A;                       14361000
     BEGIN LOCAL N; SI:=LOC A;                                          14362000
     8(IF TOGGLE THEN TALLY:=TALLY+1 ELSE                               14363000
      IF SC!"0" THEN TALLY:=TALLY+1; SI:=SI+1);                         14364000
      N:=TALLY; SI:=LOC N;                                              14365000
      DI:=LOC MCPCNT; DS:=WDS; END;                                     14366000
  LABEL LINKSGOOD,LINKSBROKEN,MAXLNKBAD,MSTARTBAD,                      14370000
          ALLBAD,ENDER,DUH;                                             14380000
  REAL HIGOOD,LOGOOD;                                                   14390000
    LOAD;                                                               14400000
 IF NOT OPERAND(3,MCPVERSION) THEN BEGIN I:=1;WRITE(P,BADCELL3);END     14400200
   ELSE I:=MCPCNT(MCPVERSION);                                          14400400
  IF FLGBIT(M[DATE.ROW,DATE.COL]) THEN WRITE(P,BADDATE) ELSE BEGIN      14400600
DATX := M[DATE.ROW,DATE.COL];                                           14400800
DATES(DATX,DATETAKEN,DAYS,YEARS);                                       14401000
  END; %   OF DATE                                                      14401200
 IF FLGBIT(M[XCLOCK.ROW,XCLOCK.COL]) THEN WRITE(P,BADXCLOCK)ELSE BEGIN  14401400
XCLOCX := M[XCLOCK.ROW,XCLOCK.COL];                                     14401600
TIMES(XCLOCX,TIMETAKEN,MINUTES,SECONDS);                                14401800
  END;   %  OF XCLOCK                                                   14402000
WRITE(P,X1,I,MCPVERSION,DATETAKEN,DAYS,YEARS,TIMETAKEN,MINUTES,SECONDS);14402200
DATES(TIME(0),DATEANALYZED,DAYS,YEARS);                                 14402400
TIMES(TIME(1),TIMEANALYZED,MINUTES,SECONDS);                            14402600
WRITE(P,FMXX,DATEANALYZED,DAYS,YEARS ,TIMEANALYZED,MINUTES,SECONDS);    14402800
 IF FLGBIT(M[CLOCK.ROW,CLOCK.COL]) THEN WRITE(P,BADCLOCK)ELSE BEGIN     14403000
CLOCX ~ M[CLOCK.ROW,CLOCK.COL];                                         14403200
TIMES(XCLOCX - CLOCX,TIMELASTHL,MINUTES,SECONDS);                       14403400
WRITE(P,FMX2,TIMELASTHL,MINUTES,SECONDS);                               14403600
 TIMES(CLOCX,SINCSLASTHL,MINUTES,SECONDS);                              14403800
WRITE(P[DBL],FMX3,SINCSLASTHL,MINUTES,SECONDS);                         14404000
    END;  % OF CLOCK                                                    14404200
  MCPENTRIES;                                                           14404400
      GETPRTENTRIES; NEXTPAGE;                                          14404600
    IF NOT COMMON THEN                                                  14410000
 IF CHECKMEMORYLINKS THEN GETSTACKSFROMTHEBED                           14420000
 ELSE BEGIN                                                             14430000
 COMMON:=TRUE; GO TO DUH;                                               14440000
    END;                                                                14450000
  COMMENT THIS NEXT SECTION PRINTS OUT CORE AND ANY                     14460000
          REMARK WHICH MIGHT APPEAR ON THE MDUMP TAPE.                  14470000
          THE INFO NEEDED IS OBTAINED FROM MEMLOC                       14480000
          AND LINKLOC WHICH ARE SET UP BY THE MEM                       14490000
          LINK CHECK PROCEDURE. ..... FGB .....;                        14500000
  IF COMNT THEN BEGIN                                                   14510000
    WRITE(P[DBL],STARS);                                                14520000
     WRITE(P,10,COMMT[*]);                                              14530000
    MOVE(COMMT[10],COMMT[0],10);                                        14540000
    WRITE(P,10,COMMT[*]);                                               14550000
    WRITE(P[PAGE],STARS);                                               14560000
  END;                                                                  14570000
 IF NOT COMMON THEN                                                     14575000
  FOR I:=0 STEP 1 WHILE MEMLOC[I]!-7 DO                                 14580000
   BEGIN                                                                14590000
    MSTART:=MEMLOC[I].CF; MAXLNK:=MEMLOC[I].FF;                         14600000
    HIGOOD:=LINKLOC[I].CF; LOGOOD:=LINKLOC[I].FF;                       14610000
   MEND:=MAXLNK+2; AVALNKOK:=BOOLEAN(MEMLOC[I].[2:1]);                  14620000
    CASE MEMLOC[I].[3:3] OF                                             14630000
     BEGIN                                                              14640000
      GO TO LINKSGOOD;                                                  14650000
      GO TO LINKSBROKEN;                                                14660000
      GO TO MAXLNKBAD;                                                  14670000
      GO TO ENDER;                                                      14680000
      GO TO ENDER;                                                      14690000
      GO TO MSTARTBAD;                                                  14700000
      GO TO ALLBAD;                                                     14710000
      GO TO ENDER;                                                      14720000
     END;                                                               14730000
    LINKSGOOD:                                                          14740000
       DUMPMEMORYANDNOTESTACKS(MSTART,MAXLNK);                          14750000
       PRINT(MAXLNK,MEND+1); GO TO ENDER;                               14760000
    LINKSBROKEN:                                                        14770000
       DUMPMEMORYANDNOTESTACKS(MSTART,HIGOOD);                          14780000
       IF HIGOOD!LOGOOD THEN PRINT(HIGOOD,LOGOOD);                      14790000
       DUMPMEMORYANDNOTESTACKS(LOGOOD,MAXLNK);                          14800000
       PRINT(MAXLNK,MEND+1);                                            14810000
       GO TO ENDER;                                                     14820000
    MAXLNKBAD:                                                          14830000
       DUMPMEMORYANDNOTESTACKS(MSTART,HIGOOD);                          14840000
       PRINT(HIGOOD,MEND+1); GO TO ENDER;                               14850000
    MSTARTBAD:                                                          14860000
       PRINT(MSTART,LOGOOD);                                            14870000
       DUMPMEMORYANDNOTESTACKS(LOGOOD,MAXLNK);                          14880000
       PRINT(MAXLNK,MEND+1); GO TO ENDER;                               14890000
    ALLBAD:                                                             14900000
       PRINT(MSTART,MEND+1);                                            14910000
    ENDER:                                                              14920000
   END ELSE                                                             14930000
      DUH:                                                              14935000
    PRINT(0,MAXCOR+1);                                                  14940000
    IF NOT COMMON THEN                                                  14950000
    BEGIN                                                               14960000
        GETSORTANDLISTMCPROG;                                           14970000
        DUMPMCPINFO;                                                    14980000
        GETSORTANDLISTINTRINSICS;                                       14990000
        DUMPROGRAMS;                                                    15000000
        DUMPCONTROLSTACKS;                                              15010000
    END;                                                                15020000
END.                                                                    15030000
END;END.        LAST CARD ON 0CRDING TAPE                               99999999
