BEGIN                                                                   00001000
DEFINE   USERS  = 16#                                                   00002000
        ,SZ     = 51#                                                   00003000
        ,BUFIN  =  2 | USERS#                                           00004000
        ,BUFOUT =  3#                                                   00005000
        ,BUFSIZ =  5#;                                                  00006000
%                                                                       00007000
% *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   00008000
%                                                                       00009000
%   THE VALUE OF BUFSIZ MUST BE AT LEAST ONE WORD LARGER THAN THE       00010000
%   LARGEST B487 TERMINAL BUFFER THAT IS BEING USED WITH INTERP. IF     00011000
%   THIS REQUIREMENT IS NOT OBSERVED, A DATA COMMUNICATIONS READ OF     00012000
%   A FULL BUFFER EXCEEDING BUFSIZ WILL DESTROY A MEMORY LINK WORD      00013000
%   CAUSING THE SYSTEM TO HANG. BUFSIZ = 5 IS ASSUMED FOR 28 CHAR       00014000
%   PING-PING OR FIXED BUFFER SIZES.                                    00015000
%                                                                       00016000
% *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   00017000
%                                                                       00018000
    COMMENT   USERS IS THE MAXIMUM NUMBER THAT CAN TIME SHARE INTERP,   00019000
              SZ IS THE NUMBER OF DISK SEGMENTS RESERVED FOR EACH USER  00020000
              FOR TEMPORARY STORAGE,                                    00021000
              BUFIN IS THE NUMBER OF DATACOM INPUT BUFFERS PER USER,    00022000
              BUFOUT IS THE NUMBER OF OUTPUT BUFFERS PER USER,          00023000
              BUFSIZ IS THE SIZE IN WORDS OF THE SIZE OF THE LARGEST    00024000
              TERMINAL BUFFER AND MUST ALSO INCLUDE ONE WORD FOR THE    00025000
              STATUS WORD;                                              00026000
ARRAY DATA[0:BUFSIZ];  % ALL DATA COMM READS ARE MADE INTO THIS ARRAY   00027000
INTEGER DIV63, MOD63;                                                   00028000
SAVE ARRAY LOGGEDIN [0:USERS];   % CONTAINS USERID OR TU/BUF            00029000
INTEGER DUMMY;                                                          00029900
ARRAY USERSTACK[0:1019];                                                00030000
ARRAY USERPRT [0:409];                                                  00030100
ARRAY USERSARRAY [0:USERS,0:768];                                       00031000
LABEL EOJ;                                                              00032000
INTEGER  PRTI,          COMMENT A UTILITY INDEX FOR PRT ARRAY;          00033000
         LOCALPRTI,     COMMENT USED TO PRESERVE PRTI AT A LOCAL LEVEL; 00034000
         NEXTPRTI,      COMMENT THE NEXT AVAILABLE LOCATION FOR AN ID;  00035000
         STACKI,        COMMENT A PERMANENT PRTI FOR INDEXING STACK     00036000
                        PORTION OF PRT;                                 00037000
         ARRAYI,        COMMENT AN ARRAY COUNTER FOR THIS USER;         00038000
         DOI,           COMMENT A PERMANENT INDEX FOR THE PRT DO STACK; 00039000
         FORMI,         COMMENT THE FORM INDEX;                         00040000
         NCR,           COMMENT CONTAINS CHARACTER [30:3] AND WORD      00041000
                        [33:15] OF THE NEXT CHARACTER TO BE READ;       00042000
         NCRT,          COMMENT TEMPORARY NCR;                          00043000
         FIRSTOUT,                                                      00044000
         LASTOUT,       COMMENT THE FIRST AND LAST INPUT CHARACTERS     00045000
                        THAT ARE TO BE OUTPUTTED. SEE NCR;              00046000
         PART,                                                          00047000
         STPP,          COMMENT THE PART AND STEP NUMBERS FOR THE       00048000
                        STATEMENT THAT IS CURRENTLY BEING INTERPRETED;  00049000
         STEPI,         COMMENT  THE INITIAL STACK I FOR THIS STEP;     00050000
         STEPN,         COMMENT  THE FINAL   STACK I FOR THIS STEP;     00051000
         USER,          COMMENT THE REMOTE ORIGINATOR OF THE REQUEST    00052000
                        CURRENTLY BEING PROCESSED;                      00053000
         TOTALUSERS,    COMMENT THE TOTAL NUMBER OF CURRENT USERS;      00054000
         LASTUSER,      COMMENT USER THAT WAS LAST PROCESSED;           00054100
         ELAPSEDMIN,    COMMENT TOTAL SHARED TIME MINUTES;              00055000
         ELAPSEDSEC,    COMMENT REMAINDER OF SHARED TIME SECONDS;       00056000
         IFPARTNO,      COMMENT THE PART NO. (S) IN AN IF STATEMENT;    00057000
         IFSTEPNO;      COMMENT THE STEP NO. (S) IN AN IF STATEMENT;    00058000
ALPHA    BLANKS,        COMMENT "      ";                               00059000
         EQUALS,        COMMENT " = ";                                  00060000
         CRLF ,         COMMENT   "{!";                                 00061000
         CR   ,         COMMENT   "{";                                  00062000
         LFD  ,         COMMENT   "!";                                  00063000
         XON  ,         COMMENT   ">";                                  00064000
         GM    ;        COMMENT  "~" ;                                  00065000
INTEGER DOPRTT, DOSTPP;                                                 00066000
REAL SVLINK, SVDOLINK;                                                  00066100
BOOLEAN SVTOGGLES, SVFINIS, SVDOFINIS;                                  00066200
ALPHA    COMMA, NOW, NEXT;             COMMENT USED IN NUMBER;          00067000
ALPHA WORD;                                                             00068000
INTEGER LBLANK, LEQUALS, LCRLF, LCR, LLFD, LXON,LGM;                    00069000
INTEGER  LNOW, LCOMMA, LNEXT;                                           00070000
INTEGER  LWORD;  COMMENT USED IN STACKOUT;                              00071000
                        COMMENT THE INTEGERS ABOVE CONTAIN AN INDEX TO  00072000
                        THE FIRST SIGNIFICANT CHARACTER OF THE PRECEDING00073000
                        ALPHA VARIABLES;                                00074000
REAL REPLACE, REPLACELOW; COMMENT CONTAINS := ACCEPTABLE TO EVALUATE;   00075000
REAL GROUPMARK;  COMMENT CONTAINS ~ IN A FORM ACCEPTABLE TO EVALUATE;   00076000
ARRAY    PARTS [0:USERS];   COMMENT  CONTAINS THE FIRST LINK WORD FOR A 00077000
                            USERS PROGRAM. INDEXED BY USER;             00078000
ARRAY    STEPS [0: 7, 0: 511];  COMMENT THE LINK WORD ARRAY.  INDEXED BY00079000
                            PARTS [USER] AND ITSELF;                    00080000
DEFINE   MAXFLAG  = 9#;  COMMENT THE MAXIMUM NUMBER OF ERRORS THAT CAN  00081000
                         BE OUTPUT FOR A STATEMENT;                     00082000
ARRAY    FLAGS [0:MAXFLAG];  COMMENT CONTAINS TWO VALUES TO SELECT      00083000
                             THE PROPER SWITCH FORMAT AND THE PROPER    00084000
                             FORMAT WITHIN THE SELECTED SWITCH FORMAT;  00085000
INTEGER  FLAGI;         COMMENT CONTAINS THE NEXT AVAILABLE PAIR OF     00086000
                        LOCATIONS IN FLAGS;                             00087000
 INTEGER      TIGHTLOOPCHECK ;                                          00088000
DEFINE MAXLOOP = 50 #;  % LIMITS OF STORED DO OR TO STATEMENTS          00089000
DEFINE   RECURSEMAX =  8#;                                              00090000
BOOLEAN RETURNSTK;                                                    %100091000
ARRAY ACCUMULATOR [0:9];  % CONTAINS THE MOST RECENTLY SCANNED QUANTITY 00092000
ALPHA    ACCUM1;        COMMENT ACCUMULATOR [1];                        00093000
SAVE ARRAY SCRATCH [0:15];   % USED BY WRITER FOR OUTPUTTING            00094000
SAVE ARRAY PROGEDIT[0:9];  % USED TO EDIT STORED PROGRAMS               00095000
ARRAY SORTIT[0:150];  % USED TO EDIT STORED PROGRAMS                    00096000
INTEGER  SCRATCHO; COMMENT CONTAINS THE ABSOLUT ADDRESS OF SCRATCH     ;00097000
DEFINE   MAXRESULTS = 99#;  COMMENT THE MAXIMUM NUMBER OF RESULTS THAT  00098000
                            ARE EXPECTED FOR A GIVEN STATEMENT;         00099000
ARRAY    RESULTS [0: MAXRESULTS];  COMMENT USED TO HOLD THE SINGLE      00100000
                                   VALUED RESULT OF A STATEMENT;        00101000
INTEGER  RESULTI;       COMMENT CONTAINS THE NEXT AVAILABLE LOCATION    00102000
                        IN RESULTS;                                     00103000
ARRAY    PHRASES [0: 2, 0:121];  COMMENT INDICES FOR SUPERFORMAT;       00104000
DEFINE   MAXFORMS =  8#;  % THE MAXIMUM NUMBER OF FORMS PER USER        00105000
ARRAY    FORMATS[0:USERS | MAXFORMS,0:20];                              00106000
         COMMENT   EACH ROW CONTAINS THE FORMAT/STRING FOR ONE FORM;    00107000
DEFINE   MAXRESERVED = 50#;                                             00108000
ARRAY    RESERVEDWORDS [0:MAXRESERVED];  % TABLE OF RESERVED WORDS      00109000
SAVE ARRAY STATOS[0:USERS];                                             00110000
    % BIT [ 1: 1]  IS THE INPUT REQUIRED FLAG                           00111000
    % BIT [ 2: 1]  IS THE OUTPUT REQUIRED FLAG                          00112000
    % BIT [ 3: 1]  IS THE READ SEEK ON FLAG                             00113000
    % BIT [ 4: 1]  IS ON WHEN EDITING IS NOT REQUIRED                   00114000
    % BIT [ 5: 1]  IS ON WHEN A DO STATEMENT HAS CONTROL                00115000
    % BIT [ 6: 1]  IS THE USERS RESTART ALLOWED BIT WHEN OFF            00116000
    % BIT [ 9: 4]  IS THE TERMINAL NUMBER                               00117000
    % BIT [14: 4]  IS THE BUFFER NUMBER                                 00118000
    % BIT [18: 6]  IS BUFFER SIZE - MAX FULL BUFFER CANNOT EXCEED 56    00119000
    % BIT [24: 6]  IS NUMBER OF CHARS ALREADY XFRD TO TEMPIN[USER,*]    00120000
    % BIT [30: 9]  IS THE NUMBER OF BUFFER LOADS IN THE OUTPUT TANK     00121000
    % BIT [39: 9]  IS THE NEXT BUFFER TO OUTPUT FROM THE TANK           00122000
DEFINE MAXROWS = 20#;                                                   00123000
ARRAY TANK  [0:MAXROWS | (USERS+1), 0:99];                              00124000
ARRAY TINFO [0:USERS];                                                  00125000
    % FIELD [ 8: 8]  IS THE ROW POINTER FOR TANKWRITER                  00126000
    % FIELD [16: 8]  IS THE TANK BUFFER POINTER FOR TANKWRITER          00127000
    % FIELD [24: 8]  IS ROW POINTER FOR FORMATTER                       00128000
    % FIELD [32: 8]  IS TANK BUFFER POINTER FOR FORMATTER               00129000
    % FIELD [40: 8]  IS CHARACTER POINTER FOR FORMATTER                 00130000
    COMMENT   EACH USER HAS AS MANY OUTPUT TANK ROWS AS ESTABLISHED BY  00131000
              THE DEFINE MAXROWS. EACH TANK ROW CONTAINS 25 BUFFER      00132000
              LOADS CONTAINING 27 CHARACTERS AND A GROUP MARK. THE      00133000
              TINFO ARRAY CONTAINS THE NECESSARY INDICIES REQUIRED BY   00134000
              FORMATTER AND TANKWRITER;                                 00135000
SAVE ARRAY DATAOUT[0:4];  % THIS ARRAY IS USED FOR DATA COMM WRITES     00136000
ARRAY FILECHECK[0:6];   %  USED TO SEARCH THE DIRECTORY FOR FILES       00137000
ARRAY CONTROLS [0:USERS];                                               00138000
ARRAY STACK, TSTACK [ 0: 59];                                           00139000
BOOLEAN  FOUND,         COMMENT TELLS IF AN IDENTIFER HAS BEEN FOUND;   00140000
         DEFINED,       COMMENT TELLS IF AN IDENTIFER HAS BEEN ASSIGNED 00141000
                        A VALUE;                                        00142000
         CHECKER,  COMMENT USED BY SCAN AND EXPRESSION;                 00143000
         SUBSCRIPTED, COMMENT TELLS IF VARIABLE IS SUBSCRIPTED;         00144000
         FLAG, FLAGT,   COMMENT FLAG IS TRUE IF AN ERROR HAS BEEN SEEN. 00145000
                        FLAGT MAY BE RESET LOCALLY;                     00146000
         STEPFLAG,      COMMENT TRUE IF ERROR WAS SEEN DURING CURRENT   00147000
                        STEP.  SET BY FLAGIT, RESET BY TANKWRITER;      00148000
         TERMINATE,     COMMENT TRUE FOR CODE STACK OVERFLOW;           00149000
         IFPARTTOG,     COMMENT TRUE IF IF STATEMENT ASKS FOR PART;     00150000
         IFSTEPTOG,     COMMENT TRUE IF IF STATEMENT ASKS FOR STEP;     00151000
         DODOSTEP,      COMMENT TRUE IF STEP IS BEING DONE;             00152000
         DONE;     COMMENT OVERALL EOJ CONTROL;                         00153000
INTEGER RESTARTUSER;                                                    00154000
REAL PREFIX, SUFFIX;                                                    00155000
BOOLEAN  ARRAY TOGGLE  [0: USERS + USERS];                              00156000
BOOLEAN ARRAY RESTART[0:USERS];                                         00157000
BOOLEAN        ALLTOGS                                                  00158000
              ,IFTOG                                                    00159000
              ,TYPETOG                                                  00160000
              ,SETTOG                                                   00161000
              ,DOTOG                                                    00162000
              ,ALLVALUES                                                00163000
              ,FORMTOG                                                  00164000
              ,THENPROG                                                 00165000
              ,ELSEPROG                                                 00166000
              ,STOREPROG                                                00167000
              ,RESTARTTOG                                               00168000
              ,SAVETOG                                                  00169000
              ,RECALLTOG                                                00170000
              ,LISTTOG                                                  00171000
              ,ENDTOG                                                   00172000
              ,DOING                                                    00173000
              ,ABORTTOG                                                 00174000
              ,SECURETOG                                                00175000
              ;                                                         00176000
REAL     THENX,         ELSEX;                                          00177000
DEFINE   ALLSTEPTOGS =  TOGGLE  [USER]#,                                00178000
         ALLPERMTOGS =  TOGGLE  [USER + USERS]#,                        00179000
         REMARK2  = ALLPERMTOGS.[47:1]#, REMARK3 = ALLPERMTOGS.[46:1]#, 00180000
         ONESTEP  = ALLSTEPTOGS.[47:1]#, ONEPART = ALLSTEPTOGS.[46:1]#, 00181000
         ONEFORM  = ALLSTEPTOGS.[45:1]#, ALLPARTS= ALLSTEPTOGS.[44:1]#, 00182000
         ALLSTEPS = ALLSTEPTOGS.[43:1]#, ALLFORMS= ALLSTEPTOGS.[42:1]#; 00183000
BOOLEAN PROGRAMTOG, PROCEDURETOG, TEACHER, JOSSTOG, QUITTOG, ERASETOG;  00184000
BOOLEAN PARITYERR, ENDDISK, DISCONNECT, FIRSTINPUT;                     00185000
ALPHA    LISTVAR, LISTID;    COMMENT UTILITY LIST VARIABLES;            00186000
REAL     LISTREAL, LISTSTEP; COMMENT UTILITY LIST VARIABLES;            00187000
REAL     MARK, MARKOP, MARKID;                                          00188000
REAL     LINK;          COMMENT THE CURRENT LINK WORD;                  00189000
SAVE ARRAY INPUT [0:9];  % CONTAINS LATEST FULL LINE OF INPUT OF USER   00190000
ARRAY THREECARDS [0:USERS,0:31]; % USED WHENEVER DISK IS BEING USED     00191000
ARRAY STATIONS [0:2 | USERS];     % USED TO DETERMINE USERS ATTACHED    00192000
ARRAY TEMPIN [0:USERS,0:9];  % 0=INPUT ROW,USER=PACKING AREA ROW        00193000
FILE STORAGE DISK RANDOM "INTERPS" "SAVFILE" (1,30);                    00194000
FILE TEMP DISK RANDOM[1:51] (1,30);                                     00195000
FILE STACKFILE DISK RANDOM [1:USERS + 1] (1,1020);                      00195100
FILE PRTFILE DISK RANDOM [1:USERS + 1] (1,410);                         00195200
BOOLEAN ARRAY USERSET[0:USERS];                                         00196000
ALPHA FILE IN NEWUSER 14 (1,BUFSIZ);                                    00197000
ALPHA FILE IN DCOMIN  14 (BUFIN,BUFSIZ);                                00198000
ALPHA FILE OUT OWNMSG 14(BUFOUT,5);                                     00199000
ALPHA FILE OUT O1  14(BUFOUT,5)                                         00200000
              ,O2  14(BUFOUT,5)                                         00201000
              ,O3  14(BUFOUT,5)                                         00202000
              ,O4  14(BUFOUT,5)                                         00203000
              ,O5  14(BUFOUT,5)                                         00204000
              ,O6  14(BUFOUT,5)                                         00205000
              ,O7  14(BUFOUT,5)                                         00206000
              ,O8  14(BUFOUT,5)                                         00207000
              ,O9  14(BUFOUT,5)                                         00208000
              ,O10 14(BUFOUT,5)                                         00209000
              ,O11 14(BUFOUT,5)                                         00210000
              ,O12 14(BUFOUT,5)                                         00211000
              ,O13 14(BUFOUT,5)                                         00212000
              ,O14 14(BUFOUT,5)                                         00213000
              ,O15 14(BUFOUT,5)                                         00214000
              ,O16 14(BUFOUT,5)                                         00215000
              ;                                                         00216000
SWITCH FILE DCOMOUT ~ OWNMSG, O1, O2, O3, O4, O5, O6, O7, O8, O9, O10,  00217000
                      O11, O12, O13, O14, O15, O16;                     00218000
SWITCH FORMAT SUPERFORMAT ~                                             00219000
                   (I12)                                                00220000
                  ,(R18.11)                                             00221000
    ,    (A6, X4, I13, X1)                                              00222000
    ,    (A6, R17.10,  X1)                                              00223000
,(I1),(I2),(I3),(I4),(I5),(I6),(I7),(I8),(I9),(I10),(I11),(I12),(I13)   00224000
,(E 7.1 ),(E 8.1 ),(E 9.2 ),(E10.3 ),(E11.4),(E12.5),(E13.6),(E14.7)    00225000
,(E15.8 ),(E16.9 ),(E17.10),(E18.11),(E19.12)                           00226000
,(F 4.1 ),(F 5.1 ),(F 5.2 ),(F 6.1 ),(F 6.2 ),(F6.3  ),(R7.1  ),(F7.2  )00227000
,(F7.3  ),(F7.4  ),(R8.1  ),(F8.2  ),(F8.3  ),(F8.4  ),(F8.5  ),(R9.1  )00228000
,(R9.2  ),(F9.3  ),(F9.4  ),(F9.5  ),(F9.6  ),(R10.1 ),(R10.2 ),(R10.3 )00229000
,(F10.4 ),(F10.5 ),(F10.6 ),(F10.7 ),(R11.1 ),(R11.2 ),(R11.3 ),(R11.4 )00230000
,(F11.5 ),(F11.6 ),(F11.7 ),(F11.8 ),(R12.1 ),(R12.2 ),(R12.3 ),(R12.4 )00231000
,(R12.5 ),(F12.6 ),(F12.7 ),(F12.8 ),(F12.9 ),(R13.1 ),(R13.2 ),(R13.3 )00232000
,(R13.4 ),(R13.5 ),(R13.6 ),(F13.7 ),(F13.8 ),(F13.9 ),(F13.10),(R14.1 )00233000
,(R14.2 ),(R14.3 ),(R14.4 ),(R14.5 ),(R14.6 ),(R14.7 ),(F14.8 ),(F14.9 )00234000
,(F14.10),(F14.11),(F3.1),(F4.2),(F5.3),(F6.4),(F7.5),(F8.6),(F9.7)     00235000
,(F10.8),(F11.9),(F12.10),(F13.11)                                      00236000
                  ;                                                     00237000
DEFINE   NEXTPRTIP = PARTS [USER].[26:10]#,                             00238000
         STACKIP  =  PARTS [USER].[16:10]#,                             00239000
         ARRAYIP =      PARTS [USER].[ 9:3]#,                           00240000
         DOIPERM   =    PARTS [USER].[12:4]#                            00241000
                   COMMENT THE PERMANENT REQUEST TO REQUEST LOCATIONS   00242000
                   FOR STACKI, NEXTPRTI, AND DOIPERM            ;       00243000
         ;                                                              00244000
ALPHA FILE OUT SPO 11 (1,10);                                           00245000
FORMAT OUT EOJFMT ("INTERP TERMINATED BECAUSE USERS EXCEEDS 29.~");     00246000
SWITCH FORMAT TEACH ~                                                   00247000
    ("    INTERP INCORPORATES SET, TYPE, IF, TO, STEP, PART, AND DO{!") 00248000
   ,("STATEMENTS. IN THE CALCULATOR MODE OF OPERATION YOU MAY DO SET{") 00249000
   ,("!AND TYPE STATEMENTS. THE STORED PROGRAM MODE IS INITIATED BY{!") 00250000
   ,("PRECEEDING EACH STATEMENT WITH A PART AND STEP NUMBER (IE. 1.05") 00251000
   ,("{!WHERE 1 IS THE PART NUMBER AND .05 IS THE STEP WITHIN PART 1)") 00252000
   ,("{!AN EXAMPLE OF A STORED PROGRAM FOLLOWS:{!    1.01 SET X = SQR") 00253000
   ,("T ( N ){!    1.05 TYPE N; X{!    1.1  SET N = N + 1{!!ANY STEP ") 00254000
   ,("OR ANY PART CAN BE EXECUTED BY TYPING IN DO STEP OR DO{!PART FO") 00255000
   ,("LLOWED BY THE DESIRED PART OR STEP NUMBER.{!!    ALL STATEMENTS") 00256000
   ,(" MUST BE FOLLOWED WITH THE LEFT-POINTING ARROW.{!ALL NAMES MUST") 00257000
   ,(" START WITH A LETTER AND BE UNIQUE IN THE FIRST{!FIVE CHARACTER") 00258000
   ,("S OR ITS LENGTH. NUMBERS MAY BE ENTERED AS:{!!   123, -123, 1.2") 00259000
   ,("3, 1.23@+03, 1.23@03, 1.23@-03, @-03, @03{!!    ARITHMETIC OPER") 00260000
   ,("ATORS ARE:{!!    +  ADD{!    -  SUBTRACT{!    |  MULTIPLY (SHIF") 00261000
   ,("T AND L KEY){!    /  REAL DIVIDE{!   DIV INTEGER DIVIDE{!  MOD ") 00262000
   ,("REMAINDER DIVIDE{!    *  POWER OPERATOR{!!    STANDARD FUNCTION") 00263000
   ,("S ARE:{!!  SQRT     SQUARE ROOT{!  SIN      SINE OF RADIAN ANGL") 00264000
   ,("E{!  COS      COSINE OF RADIAN ANGLE{!  ARCTAN   ARCTANGENT OF ") 00265000
   ,("RADIAN ANGLE{!  LN       NATURAL LOG{!  EXP      POWER OF NATUR") 00266000
   ,("AL LOG{!  ABS      ABSOLUTE VALUE{!  IP       RETURNS INTEGER V") 00267000
   ,("ALUE LESS THAN REAL VALUE{!  SIGN     RETURNS -1, 0, OR +1 DEPE") 00268000
   ,("NDING ON THE VALUE OF ARGUMENT{!!    RELATIONAL OPERATORS ARE:{") 00269000
   ,("!  LSS   LESS THAN{!  LEQ   LESS THAN OR EQUAL{!  EQU   EQUAL{!") 00270000
   ,("  EQL   EQUAL{!  GEQ   GREATER THAN OR EQUAL{!  GTR   GREATER T") 00271000
   ,("HAN{!  NEQ   NOT EQUAL{!!    BOOLEAN OPERATORS ARE:{!!  AND{!  ") 00272000
   ,("OR{!  NOT{!!    ALL CHARACTERS IN AN EXISTING BUFFER CAN BE ERA") 00273000
   ,("SED BY{!USING THE CONTROL KEY AND THE L KEY. SINGLE CHARACTERS ") 00274000
   ,("CAN BE{!ERASED BY USING THE SHIFT KEY AND THE , KEY FOR EACH CH") 00275000
   ,("ARACTER.{!    IF YOU INPUT QUIT IT WILL TERMINATE YOU AS AN INT") 00276000
   ,("ERP USER.{!    SPECIFICS ARE IN THE INTERP MANUAL.{!!!!!~      ") 00277000
   ;                                                                    00278000
FORMAT UTILITY ("EOJ: YOUR TOTAL SHARED TIME WAS:",I4," MINUTES AND ",  00279000
                 I2," SECONDS.{!!!!!");                                 00280000
DEFINE DSKMSG = 1#, RUNERR = 2#, STMTERR = 3#, OTHER = 4#, TCHR = 5#;   00281000
SWITCH FORMAT DISKMSG ~                                                 00282000
    ("0000000*","YOU DO NOT HAVE ANY STORED PROGRAM ON DISK.")          00283000
   ,("0000000 ","THE PROGRAM ID MUST FOLLOW THE FORM NAME1/NAME2.")     00284000
   ,("0000000M","YOUR PROGRAM HAS BEEN SAVED ON DISK.")                 00285000
   ,("0000000;","A PROGRAM WITH THAT ID EXISTS ON DISK ALREADY.")       00286000
   ,("0000000;","THE REQUESTED PROGRAM IS NOT IN THE DIRECTORY.")       00287000
   ,("0000000;","THE REQUESTED PROGRAM BELONGS TO ANOTHER USER.")       00288000
   ,("0000000R","THE PROGRAM ON DISK HAS A BAD INPUT LINE.")            00289000
   ,("0000000/","YOUR DISK FILE IS FULL. ONLY 150 LINES PERMITTED.")    00290000
   ,("0000000R","A DISK FILE PARITY OCCURRED ON YOUR FILE.")            00291000
   ,("0000000;","YOUR DISK FILE HAS BEEN READ. YOU MAY PROCEED.")       00292000
   ,("0000000F","DISK FILE IS NOW FULL.")                               00293000
   ,("0000000)","ATTEMPTED TO USE A FORM WHICH DOES NOT EXIST.")        00294000
   ,("0000000V","MISSING QUOTE OR OVER 63 CHARACTERS IN FORMAT STRING.")00295000
   ,("0000000J","SET OR TYPE CAN ONLY APPEAR ONCE.")                    00296000
   ,("0000000O","YOU MUST SET A VARIABLE TO SOME VALUE.")               00297000
   ,("0000000R","YOU CANNOT USE A RESERVED WORD AS A NAME.")            00297100
   ;                                                                    00298000
SWITCH FORMAT RUNERRORS ~                                               00299000
    ("0000000Q","AN UNKNOWN OPERATOR EXISTS IN STEP: ",F4.2)            00300000
   ,("0000000)",A5," IS AN IDENTIFIER THAT HAS NOT BEEN SET.")          00301000
   ,("0000000T",A5,"MAX. ITERATIONS OR BRANCHES HAS BEEN EXCEEDED.")    00302000
   ,("0000000 ",A5,"YOU HAVE RECURSED BEYOND THE LIMIT ALLOWED.")       00303000
   ,("0000000$","IMPROPER OR MISSING OPERATOR IN STEP: ",F4.2)          00304000
   ,("0000000N","DIVIDE BY ZERO OCCURRED IN STEP: ",F4.2)               00305000
   ,("0000000*","AN EXPONENT OVERFLOW OCCURRED IN STEP: ",F4.2)         00306000
   ,("0000000$","AN INTEGER OVERFLOW OCCURRED IN STEP: ",F4.2)          00307000
   ,("0000000*","A NEGATIVE INTRINSIC ARGUMENT IN STEP: ",F4.2)         00308000
   ,("0000000;","SQUARE ROOT ARGUMENT IS NEGATIVE IN STEP: ",F4.2)      00309000
   ,("0000000*","EXPONENT ARGUMENT EXCEEDS 158 IN STEP: ",F4.2)         00310000
   ,("0000000W",A5,"ATTEMPTING TO EXECUTE A STEP THAT WAS NOT STORED.") 00311000
   ,("0000000)","EXCEEDED THE POWER OF TEN TABLE IN STEP: ",F4.2)       00312000
   ,("0000000V",A5,"ONLY LINE,STRINGS,AND THE I,E,F FORMATS ALLOWED.")  00312100
   ;                                                                    00313000
SWITCH FORMAT STATEMENTERRS ~                                           00314000
    ("0000000S","THE STATEMENT HAS AN ERROR THAT CANNOT BE DEFINED.")   00315000
   ,("0000000 ","A STATEMENT TYPE OR AN INTERP VERB WAS EXPECTED.")     00316000
   ,("0000000$","AN INPUT LINE IS LIMITED TO 72 CHARACTERS.")           00317000
   ,("0000000*","PARENTHESES OR BRACKETS ARE NOT IN BALANCE.")          00318000
   ,("0000000T","DO MUST BE FOLLOWED BY PART OR STEP AND THE NUMBER.")  00319000
   ,("0000000*","TO STATEMENT IS: TO STEP M.NN OR TO PART M.")          00320000
   ,("0000000N","AN IMPROPER DO STATEMENT WAS ENTERED.")                00321000
   ,("0000000*","ONLY NINE (9) STORED DO STATEMENTS ALLOWED.")          00322000
   ,("0000000S","THE FORM NUMBER CAN ONLY HAVE A VALUE OF 1 THRU 8.")   00323000
   ,("0000000T","THE PART NUMBER CAN ONLY HAVE A NUMBER OF 1 THRU 9.")  00324000
   ,("0000000S","THE EQUAL SIGN CAN ONLY BE USED IN SET STATEMENTS.")   00325000
   ,("0000000S","FOLLOW THEN/ELSE BY SET,TYPE,TO,OR PART STATEMENT.")   00326000
   ,("0000000Q","COULD NOT FIND A ",""","THEN","""," IN IF STATEMENT.") 00327000
   ,("0000000R","COULD NOT FIND AN ",""","ELSE","""," IN IF STATEMENT.")00328000
   ,("0000000Q","MINIMUM FORMATS ARE: I, F.F, AND EEEEEEE")             00329000
   ;                                                                    00330000
SWITCH FORMAT OTHERMSGS ~                                               00331000
    ("0000000M","A NUMBER CONTAINS AN IMBEDDED BLANK.")                 00332000
   ,("0000000M","IMPROPER EXPRESSION WAS ENCOUNTERED.")                 00333000
   ,("0000000T","THE CODE TABLE IS FULL. CANNOT ACCEPT MORE PROGRAM.")  00334000
   ,("0000000|","ONLY THREE ARRAYS ARE PERMITTED.")                     00335000
   ,("0000000J","INTEGER NUMBER EXCEEDS 11 DIGITS.")                    00336000
   ,("0000000$","WARNING *** LESS THAN 50 WORDS LEFT IN CODE TABLE.")   00337000
   ,("0000000$","WARNING *** LESS THAN 10 WORDS LEFT IN NAME TABLE.")   00338000
   ,("0000000J","THE DO LOOP HAS BEEN DEACTIVATED.")                    00339000
   ,("0000000R","A SUBSCRIPTED VARIABLE MUST USE BRACKETS.")            00340000
   ,("0000000Q","A SIMPLE VARIABLE CANNOT BE SUBSCRIPTED.")             00341000
   ,("0000000;","THE USERS TABLE IS NOW FULL. PLEASE TRY LATER.")       00342000
   ,("0000000*","PLEASE REPEAT YOUR LAST MESSAGE. THANK YOU.")          00343000
   ,("0000000U","ONLY SET/TYPE STATEMENTS ALLOWED IN CALCULATOR MODE.") 00344000
   ,("0000000U","YOU CANNOT ENTER A FORM OR AN INTERP VERB AS A STEP.") 00345000
   ,("0000000/","A TIGHT LOOP HAS OCCURRED. CHECK YOUR STATEMENTS.")    00346000
   ;                                                                    00347000
% * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 00348000
COMMENT  THE FOLLOWING IS A DESCRIPTION OF THE GLOBALLY UNDERSTOOD      00349000
         PARTIAL WORD FIELDS:                                           00350000
    BIT       000000000011111111112222222222333333333344444444          00351000
DESIGNATOR:   012345678901234567890123456789012345678901234567          00352000
    MARK    = 011111111111111111111111111111111111111111111111          00353000
    MARKOP  = 011111111000000000000000000000000000000000000000     [1:8]00354000
    MARKID  = 011111111100COUNT*FIRST CHARS OF ID LT JUST IN BLANKS[1:9]00355000
    MARKID  = 011111111101        DITTO - VALUE ASSIGNED          [11:1]00356000
    MARKID  = 011111111111               DITTO - SUBSCRIPTED      [10:1]00357000
RESERVEDWORDS                                                           00358000
    PRIORITY= 0XXX00000000SAME AS MARKID                           [1:3]00359000
    OPCODE  = 0000XXXXX000   DITTO                                 [4:5]00360000
         THE IDENTIFIER [12:24]  AND MARKOP ARE ALSO IN THE RESULT      00361000
         THE RESULT OF SEARCHRESERVED IS A REAL NUMBER WITH             00362000
         PRIORITY IN [40:3] AND OPCODE IN [43:5] OR ZERO                00363000
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *;00364000
COMMENT THIS SECTION CONTAINS GLOBAL DEFINES;                           00365000
DEFINE   PRTBASE   =      0#,     PRTMAX    =    199#,                  00366000
         IDBASE    =    200#,     IDMAX     =    399#,                  00367000
         STKBASE   =      0#,     STKMAX    =   1019#,                  00368000
         DOBASE    =    400#,     DOMAX     =    409#,                  00369000
         PRTLOC    =   USERSARRAY[USER,PRTI]#,                          00370000
         STKLOC    =    USERSTACK [PRTI]#,                              00371000
         IDLOC     =    USERPRT [IDBASE + NEXTPRTI]#,                   00372000
         PRTVAL    =    USERPRT [PRTI]#,                                00373000
         DOLOC     =    USERPRT [DOBASE + DOI]#,                        00374000
         TERMINATOR  =  ACCUM1 =  "1~    "#,                            00375000
         TERMINATORS =  (ACCUM1 = "1;    " OR ACCUM1 = "1~    ")#,      00376000
         BOOLESTOP = ACCUM1 = "4THEN "#,                                00377000
         THENSTOP  = ACCUM1 = "4ELSE "#,                                00378000
         PHONYBOOLE =   USERPRT [0]#,                                   00379000
         FORID     =    FOR PRTI ~ IDBASE STEP 1 WHILE PRTI { IDMAX#,   00380000
         BUMPNEXT  =    NEXTPRTI ~ NEXTPRTI + 1#,                       00381000
         BUMPPRTI  =    PRTI ~ PRTI + 1#,                               00382000
         BUMPSTACKI=    STACKI ~ STACKI + 1#,                           00383000
         ASSIGNED  =    IDLOC.[9:1]#,                                   00384000
         PENDING   =    USERPRT [DOBASE].[3:1]#,                        00385000
         PENDTOG = BOOLEAN (PENDING)#;                                  00386000
DEFINE SETLISTREAL = LISTSTEP ~ IF NOT DOING THEN 0 ELSE                00387000
                                (DOPRTT | 100 + DOSTPP) / 100 #;        00388000
PROCEDURE DISKWRITER;     FORWARD;                                      00389000
PROCEDURE EDIT;     FORWARD;                                            00390000
PROCEDURE LINKUP;       FORWARD;                                        00391000
REAL PROCEDURE NUMBER; FORWARD;                                         00392000
PROCEDURE ERASE;                                                        00393000
    BEGIN                                                               00394000
ALPHA STREAM PROCEDURE EXAMIN(NCR); VALUE NCR;                          00395000
    BEGIN SI ~ NCR; DI ~ LOC EXAMIN; DI ~ DI + 7; DS ~ CHR END EXAMIN;  00396000
STREAM PROCEDURE ZEROPRT(DEST1,DEST2);                                  00397000
    BEGIN                                                               00398000
         DI ~ DEST1;                                                    00399000
         DS ~ 8 LIT "0"; SI ~ DEST1; 16(DS ~ 63 WDS); DS ~ 11 WDS;      00400000
         DI ~ DEST2;                                                    00401000
         DS ~ 8 LIT "0"; SI ~ DEST2; 6(DS ~ 63 WDS);                    00402000
         DS ~ 21 WDS;                                                   00403000
    END OF ZEROPRT;                                                     00404000
    STREAM PROCEDURE ZEROARRAY(ARRY);                                   00405000
         BEGIN DI ~ ARRY; DS ~ 8 LIT "0"; SI ~ ARRY;                    00406000
               16(DS ~ 48 WDS) END OF ZEROARRAY;                        00407000
    REAL T;                                                             00408000
    INTEGER I, J;                                                       00409000
    IF ONESTEP OR ONEPART AND EXAMIN(NCR) { 9 THEN                      00410000
         BEGIN                                                          00411000
              T ~ NUMBER; T ~ T | 100 + .001;                           00412000
              PART ~ T DIV 100;                                         00413000
              STPP ~ T MOD 100;                                         00414000
              ENDTOG ~ TRUE; DISKWRITER;                                00415000
              LINKUP; EDIT;                                             00416000
         END ELSE                                                       00417000
         BEGIN                                                          00418000
    ZEROPRT(USERSTACK[0],USERPRT[0]);                                   00419000
IF LOGGEDIN[USER] = 0 OR QUITTOG THEN                                   00419100
    BEGIN                                                               00419200
         WRITE(STACKFILE[USER]);                                        00419300
         WRITE(PRTFILE[USER]);                                          00419400
    END;                                                                00419500
IF ARRAYI ! 0 THEN ZEROARRAY(USERSARRAY[USER,0]);                       00420000
    PARTS[USER] ~ 0;                                                    00421000
    STACKI ~ 0;                                                         00422000
    NEXTPRTI ~ 0;                                                       00423000
    ARRAYI ~ 0;                                                         00424000
    DOI ~ 0;                                                            00425000
    STATOS[USER] ~ STATOS[USER] & 0[2:47:1] & 0[4:47:1] & 0[30:30:18];  00426000
    FOR I ~ 0 STEP 1 UNTIL MAXFORMS - 1 DO                              00427000
         FOR J ~ 0 STEP 1 UNTIL 20 DO                                   00428000
              FORMATS[USER|MAXFORMS+I,J] ~ 0;                           00429000
    ALLSTEPTOGS ~ FALSE;                                                00430000
    ALLPERMTOGS ~ FALSE;                                                00431000
IF NOT RESTARTTOG THEN                                                  00432000
              BEGIN                                                     00433000
FOR I ~ 0 STEP 1 UNTIL 31 DO THREECARDS[USER,I] ~ 0;                    00434000
WRITE(STORAGE[(USER-1) | SZ],30,THREECARDS[USER,*]);                    00435000
              END;                                                      00436000
         END;                                                           00437000
    END OF ERASE;                                                       00438000
INTEGER PROCEDURE SCAN;                                                 00439000
         COMMENT   THE RESULTS OF SCAN ARE  1 = ALPHA,                  00440000
                   2 = SPECIAL CHARACTER, 3 = NUMERIC;                  00441000
    BEGIN                                                               00442000
STREAM PROCEDURE SCANNER(NCR,COUNTV,ACCUM,COMCOUNT,RESULT,RESULTV,      00443000
                         COUNT,ST2,NCRV,ST1) ;                          00444000
         VALUE COUNTV,COMCOUNT,RESULTV,ST2,NCRV,ST1;                    00445000
         BEGIN                                                          00446000
         LABEL DEBLANK,NUMBERS,IDBLDR,GNC,K,EXIT,FINIS,L,ERROR,         00447000
              COMMENTS,COMMANTS;                                        00448000
         DI ~ RESULT; DI ~ DI+7;                                        00449000
         SI ~ NCRV;                                                     00450000
         COMMENT  SETUP DI TO CHANGE RESULT AND SI TO LOOK AT BUFFER;   00451000
         CI ~ CI+RESULTV;   COMMENT SWITCH ON VALUE OF RESULT;          00452000
         GO TO DEBLANK;   COMMENT 0 IS INITIAL CODE;                    00453000
         GO TO IDBLDR;   COMMENT 1 IS ID CODE;                          00454000
         GO TO FINIS;     COMMENT 2 IS SPECIAL CHARACTER CODE;          00455000
         GO TO NUMBERS;   COMMENT 3 IS NUMBER CODE;                     00456000
         GO TO FINIS;     COMMENT 4 IS ERROR CODE;                      00457000
         GO TO GNC;     COMMENT 5 IS GET NEXT CHARACTOR CODE;           00458000
         GO TO COMMANTS; COMMENT 6 IS COMMENT CODE;                     00459000
                   COMMENT 7 IS DEBLANK ONLY CODE;                      00460000
              IF SC=" " THEN                                            00461000
         BEGIN K:  SI ~ SI+1;                                           00462000
              IF SC =" "  THEN GO TO K                                  00463000
         END;                                                           00464000
              GO TO FINIS;                                              00465000
DEBLANK:   IF SC = " " THEN                                             00466000
                   BEGIN L: SI ~SI+1; IF SC = " " THEN GO TO L END;     00467000
         COMMENT  IF WE ARRIVE HERE WE HAVE A NON-BLANK CHARACTER;      00468000
              NCRV ~ SI;                                                00469000
              IF SC } "0" THEN GO TO NUMBERS;                           00470000
              IF SC = ALPHA THEN GO TO IDBLDR;                          00471000
         COMMENT  IF WE ARRIVE HERE WE HAVE A SPECIAL CHARACTER OR(GNC);00472000
GNC:          DS ~ LIT "2";                                             00473000
              TALLY ~ 1; SI ~ SI +1; GO TO EXIT;                        00474000
COMMANTS:     IF SC ! ";" THEN BEGIN                                    00475000
COMMENTS:     SI ~ SI+1;                                                00476000
              IF SC > "%" THEN GO TO COMMENTS;                          00477000
              IF SC < ";" THEN GO TO COMMENTS;                          00478000
         COMMENT  CHARACTERS BETWEEN % AND SEMICOLON ARE HANDLED BY THE 00479000
                  WORD MODE PART OF COMMENT ROUTINE;                    00480000
              END;                                                      00481000
              GO TO FINIS;                                              00482000
IDBLDR:       TALLY ~ 63; DS ~ LIT "1";                                 00483000
              COMCOUNT( TALLY~ TALLY+1;                                 00484000
                   IF SC = ALPHA THEN SI~SI+1 ELSE JUMP OUT TO EXIT);   00485000
              TALLY ~ TALLY+1; IF SC = ALPHA THEN BEGIN                 00486000
ERROR:        DI ~ DI-1; DS ~ LIT "4"; GO TO EXIT;                      00487000
              END ELSE GO TO EXIT;                                      00488000
         COMMENT  IF WE ARRIVE HERE WE HAVE MORE THAN 63 CHARACTERS     00489000
                  IN AN IDENTIFIER OR NUMBER;                           00490000
NUMBERS:      TALLY ~ 63; DS ~ LIT "3";                                 00491000
                   COMCOUNT( TALLY ~ TALLY+1;                           00492000
                   IF SC <"0"THEN JUMP OUT TO EXIT; SI~SI+1);           00493000
              GO TO ERROR;                                              00494000
EXIT:         ST1 ~ TALLY;     COMMENT ST1 CONTAINS NUMBER OF CHAR-     00495000
                             ACTORS WE ARE GOING TO MOVE INTO THE       00496000
                             ACCUMULATOR;                               00497000
              TALLY ~ TALLY+COUNTV; ST2 ~ TALLY;                        00498000
              DI ~ COUNT; SI ~ LOC ST2; DS ~ WDS;                       00499000
         COMMENT  THIS CODE UPDATED COUNT;                              00500000
              DI ~ ACCUM; SI ~ SI - 3; DS ~ 3 CHR;                      00501000
         COMMENT  THIS CODE PLACES COUNT IN ACCUM;                      00502000
              DI ~ DI + COUNTV;   COMMENT POSITION DI PAST CHARACTERS   00503000
                                            IN ACCUM, IF ANY;           00504000
              SI ~ NCRV; DS ~ ST1 CHR;                                  00505000
         COMMENT  MOVE CHARACTERS INTO ACCUM;                           00506000
FINIS:        DI ~ NCR; ST1 ~ SI; SI ~ LOC ST1; DS ~ WDS;               00507000
         COMMENT  RESET NCR TO LOCATION OF NEXT CHARACTER TO BE SCANNED;00508000
         END OF SCANNER ;                                               00509000
INTEGER STREAM PROCEDURE INDEXNCR(N,I); VALUE N,I;                      00510000
    BEGIN DI ~ N; DI ~ DI + I; INDEXNCR ~ DI END OF INDEXNCR;           00511000
ALPHA STREAM PROCEDURE EXAMIN(NCR); VALUE NCR;                          00512000
    BEGIN SI ~ NCR; DI~LOC EXAMIN; DI ~ DI + 7; DS ~ CHR END EXAMIN;    00513000
INTEGER RESULT, COUNT;                                                  00514000
DEFINE ACCUM = ACCUMULATOR[1]#;                                         00515000
ACCUM ~ BLANKS;                                                         00516000
WHILE EXAMIN(NCR) = 12 DO NCR ~ INDEXNCR(NCR,1);                        00517000
SCANNER(NCR,COUNT,ACCUM,63,RESULT,RESULT,COUNT,0,NCR,0);                00518000
ACCUM1 ~ ACCUM;                                                         00519000
IF CHECKER THEN                                                         00520000
    IF RESULT = 2 AND ACCUM1 = "1=    " THEN                            00521000
              BEGIN                                                     00522000
         RESULT ~ 4;                                                    00523000
         ACCUM1 ~ "2:=   ";                                             00524000
              END;                                                      00525000
SCAN ~ RESULT;                                                          00526000
WHILE EXAMIN(NCR) = " " DO NCR ~ INDEXNCR(NCR,1);                       00527000
    END OF SCAN;                                                        00528000
INTEGER PROCEDURE DELTANCR (START, STOP);                               00529000
         VALUE     START, STOP;                                         00530000
         INTEGER   START, STOP;                                         00531000
    BEGIN                                                               00532000
INTEGER STRT, STP;                                                      00533000
STRT ~ 0 & START [30:33:15] & START [45:30:3];                          00534000
STP ~ 0 & STOP [30:33:15] & STOP [45:30:3];                             00535000
DELTANCR ~ STP - STRT                                                   00536000
    END DELTANCR;                                                       00537000
PROCEDURE MOVE (FROM, DEST, N);                                         00538000
         INTEGER FROM, DEST, N;                                         00539000
    BEGIN                                                               00540000
STREAM PROCEDURE MOVER(SORC,DEST,N);                                    00541000
    VALUE SORC,DEST,N;                                                  00542000
    BEGIN SI ~ SORC; DI ~ DEST; DS ~ N CHR END OF MOVER;                00543000
INTEGER STREAM PROCEDURE INDEXNCR(N,I); VALUE N,I;                      00544000
    BEGIN DI ~ N; DI ~ DI + I; INDEXNCR ~ DI END OF INDEXNCR;           00545000
INTEGER T;                                                              00546000
WHILE N > 63 DO                                                         00547000
         BEGIN                                                          00548000
    MOVER (FROM, DEST, 63);                                             00549000
    FROM ~ INDEXNCR (FROM, 63);                                         00550000
    DEST ~ INDEXNCR (DEST, 63);                                         00551000
    N ~ N - 63;                                                         00552000
         END;                                                           00553000
MOVER (FROM, DEST, N);                                                  00554000
    END DRIVER FOR MOVER;                                               00555000
% * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 00556000
COMMENT DOCUMENT                                                        00557000
              ALL (9) STREAM PROCEDURES AND ANY (3) ASSOCIATED WORD MODE00558000
         DRIVERS ARE DISCUSSED AS A GROUP.                              00559000
              STREAM PROCEDURE SCANNER AND INTEGER PROCEDURE SCAN.      00560000
         SCANNER IS THE COMPLETE AND UNCHANGED (NAME EXCEPTED) SCAN     00561000
         PROCEDURE FROM THE ALGOL COMPILER.  SCANNER IS DRIVEN BY SCAN  00562000
         AND ALWAYS ENTERED WITH RESULT = 0.  THE VALUE OF RESULT UPON  00563000
         EXIT IS STORED IN SCAN.  SCAN DOES NOT GIVE CONSIDERATION TO   00564000
         END OF CARD BREAK (I.E. COMCOUNT = 63), AND ACCUM1 IS ALWAYS   00565000
         SET TO 6 BLANKS.  A QUESTION MARK (S) GIVES ERRATIC ACTION BUT 00566000
         DOES NOT POSE ANY PARTICULAR PROBLEM.  DE-BLANKING IS HANDLED  00567000
         BY SCAN.                                                       00568000
              STREAM PROCEDURE MOVER AND PROCEDURE MOVE.                00569000
         MOVER MOVES N CHARACTERS FROM THE SOURCE TO THE DESTINATION.   00570000
         MOVE PERMITS N TO BE LARGER THAN 63.                           00571000
              ALL INDICES FOR STREAM PROCEDURES ARE CARRIED WITH THE    00572000
         CHARACTER IN [30:3] AND WORD IN [33:15] (SEE ALGOL AND INTERP  00573000
         NCR) OF A SINGLE INTEGER VARIABLE.                             00574000
              INTEGER STREAM PROCEDURE INDEXNCR AND INTEGER PROCEDURE   00575000
         DELTANCR.  INDEXNCR INCREASES A STREAM PROCEDURE INDEX BY N    00576000
         CHARACTERS AND RETURNS WITH THE INCREMENTED INDEX.  DELTANCR   00577000
         RETURNS WITH THE DIFFERENCE BETWEEN 2 STREAM PROCEDURE INDICES.00578000
              INTEGER STREAM PROCEDURE MKABS.  MKABS RETURNS WITH THE   00579000
         ABSOLUTE ADDRESS OF THE NAME PARAMETER N. (SEE ALGOL)          00580000
              STREAM PROCEDURE STARS PLACES N + 1 WORDS OF "*" IN THE   00581000
         DESTINATION STRING.                                            00582000
              STREAM PROCEDURE BLANKN PLACES N + 1 WORDS OF BLANK       00583000
         CHARACTERS IN THE DESTINATION STRING AND IS THE REASON MOST    00584000
         ARRAYS ARE DECLARE AT LEAST 1 WORD LONGER THAN NECESSARY.      00585000
         FEWER THAN 8 CHARACTERS ARE USUALLY BLANKED USING THE ALPHA    00586000
         VARIABLE BLANKS AND A PARTIAL WORD FIELD.                      00587000
              ALPHA STREAM PROCEDURE EXAMIN RETURNS WITH THE CHARACTER  00588000
         THAT IS POINTED AT BY THE VALUE PARAMETER.  (SEE ALGOL)        00589000
    ;                                                                   00590000
PROCEDURE FLAGIT(FRMT,ERROR);                                           00591000
    VALUE FRMT, ERROR;                                                  00592000
    INTEGER FRMT, ERROR;                                                00593000
         COMMENT   FLAGIT IS AN ERROR HANDLING PROCEDURE. THE VALUE     00594000
                   OF FRMT SELECTS WHICH SWITCH FORMAT IS TO BE USED    00595000
                   WHILE THE VALUE OF ERROR SELECTS THE PROPER ERROR    00596000
                   MESSAGE WITHIN THE SWITCH FORMAT. THESE TWO VALUES   00597000
                   ARE PLACED IN FIELDS [36:6] AND [42:6] RESPECTIVELY  00598000
                   OF THE EVEN WORDS OF FLAG. ACCUM1 IS PLACED IN THE   00599000
                   ODD NUMBERED WORDS OF FLAG;                          00600000
         BEGIN                                                          00601000
REAL DUMMY;                                                             00602000
    FLAGS[FLAGI] ~ 0 & FRMT[36:42:6] & ERROR[42:42:6];                  00603000
    IF FLAGI < MAXFLAG THEN FLAGI ~ FLAGI + 1;                          00604000
    FLAG ~ FLAGT ~ STEPFLAG ~ TRUE;                                     00605000
    STOREPROG ~ FALSE;                                                  00606000
         END OF FLAGIT;                                                 00607000
BOOLEAN PROCEDURE NUMBERS (S, N, MINUS);                                00608000
         INTEGER S, N;                                                  00609000
         BOOLEAN   MINUS;                                               00610000
    BEGIN                                                               00611000
DEFINE   ACCEQ     = ACCUM1 = #,                                        00612000
         NISNUMBER = (N } 0 AND N { 9)#,                                00613000
         AT        = "1@    "#,                                         00614000
         DECIMAL   = "1.    "#;                                         00615000
IF S = 3 OR (S = 2 AND                                                  00616000
         ((ACCEQ AT AND (N = "+" OR N = "-" OR NISNUMBER)) OR           00617000
                   ACCEQ DECIMAL)) THEN                                 00618000
         BEGIN NUMBERS ~ TRUE; NCR ~ NCRT END ELSE                      00619000
                   NUMBERS ~ MINUS ~ FALSE;                             00620000
    END DETERMINING IF NUMBER IS NEXT;                                  00621000
REAL PROCEDURE NUMBER;                                                  00622000
COMMENT DOCUMENT                                                        00623000
              PROCEDURES NUMBERS AND NUMBER.  NUMBERS USES THE          00624000
         PARAMETERS S (RESULT OF SCAN) AND N (RESULT OF EXAMIN) TO      00625000
         DETERMINE IF A NUMBER IS NEXT IN THE INPUT STRING.  THE        00626000
         PARAMETER MINUS IS NOT USED.   NUMBER HANDLES THE INPUT        00627000
         CONVERSION OF AN ALPHA NUMBER BY MOVING IT CHARACTER AT A TIME 00628000
         TO A SCRATCH ARRAY AND THEN READ FREE-FORM INTO A REAL         00629000
         VARIABLE X.  IF A DECIMAL OR @ SIGN WAS SEEN DURING THE SCAN   00630000
         X IS STORED UNCHANGED IN NUMBER OTHERWISE IS ENTIERED AND      00631000
         STORED.  AN INTEGER LARGER THAN 11 DIGITS IS AN ERROR.         00632000
;                                                                       00633000
    BEGIN                                                               00634000
INTEGER STREAM PROCEDURE INDEXNCR(N,I); VALUE N,I;                      00635000
    BEGIN DI ~ N; DI ~ DI + I; INDEXNCR ~ DI END OF INDEXNCR;           00636000
ALPHA STREAM PROCEDURE EXAMIN(NCR); VALUE NCR;                          00637000
    BEGIN SI ~ NCR; DI~LOC EXAMIN; DI ~ DI + 7; DS ~ CHR END EXAMIN;    00638000
ALPHA    LAST;                                                          00639000
INTEGER  NOWNCR, DELTA, LSCRATCH;                                       00640000
REAL X;                                                                 00641000
BOOLEAN DECIMAL,ERROR,DEC1,AT1;                                         00642000
DEFINE   DEC =   = "."#,  AT = = "@"#,  PLUS = = "+"#,  NEG = = "-"#;   00643000
DEFINE NOWISNUMBER = (NOW } 0 AND NOW { 9)#,                            00644000
       NEXTISNUMBER = (NEXT } 0 AND NEXT { 9)#;                         00645000
LABEL INDEXERR,EXIT;                                                    00646000
MONITOR INDEX;                                                          00647000
INDEX ~ INDEXERR;                                                       00648000
IF EXAMIN(NCR) = " " THEN                                               00649000
    BEGIN                                                               00650000
         FLAGIT(OTHER,0);                                               00651000
         GO TO EXIT;                                                    00652000
    END;                                                                00653000
LSCRATCH ~ SCRATCHO;                                                    00654000
MOVE (NCR, LNOW, 1);                                                    00655000
NOWNCR ~ NCR;                                                           00656000
NCR ~ INDEXNCR (NCR, 1);                                                00657000
MOVE (NCR, LNEXT, 1);                                                   00658000
WHILE NOWISNUMBER                                                       00659000
   OR (NOW DEC AND NOT DEC1)                                            00660000
   OR (NOW AT AND NOT AT1 AND (NEXT PLUS OR NEXT NEG OR NEXTISNUMBER))  00661000
   OR (LAST AT AND (NOW PLUS OR NOW NEG OR NOWISNUMBER))                00662000
         DO                                                             00663000
              BEGIN                                                     00664000
         IF NOW DEC THEN DECIMAL ~ DEC1 ~ TRUE;                         00665000
         IF NOW AT THEN DECIMAL ~ AT1 ~ TRUE;                           00666000
         LAST ~ NOW;                                                    00667000
         DELTA ~ DELTA + 1;                                             00668000
         NOW ~ NEXT;                                                    00669000
         NCR ~ INDEXNCR (NCR, 1);                                       00670000
         MOVE (NCR, LNEXT, 1);                                          00671000
              END;                                                      00672000
MOVE (NOWNCR, LSCRATCH, DELTA);                                         00673000
LSCRATCH ~ INDEXNCR (LSCRATCH, DELTA);                                  00674000
MOVE (LCOMMA, LSCRATCH, 1);                                             00675000
IF DELTA > 11 AND NOT DECIMAL THEN                                      00676000
    BEGIN                                                               00677000
         FLAGIT(OTHER,4);                                               00678000
         GO TO EXIT;                                                    00679000
    END;                                                                00680000
READ(SCRATCH[*],/,X);                                                   00681000
X ~ IF DECIMAL OR X >  2 * 39 - 1 THEN X ELSE ENTIER (X + .0000001);    00682000
NUMBER ~ X;                                                             00683000
NCR ~ INDEXNCR (NOWNCR, DELTA);                                         00684000
GO TO EXIT;                                                             00685000
INDEXERR:                                                               00686000
         IF PROGRAMTOG THEN                                             00687000
         LISTSTEP ~ (PART | 100 + STPP) / 100 ELSE                      00688000
         SETLISTREAL;                                                   00689000
         FLAGIT(RUNERR,12);                                             00690000
EXIT:                                                                   00691000
    END INPUT CONVERSION OF A NUMBER;                                   00692000
REAL    PROCEDURE SEARCHRESERVED (IDENTIFIER);                          00693000
    VALUE IDENTIFIER;                                                   00694000
    REAL  IDENTIFIER;                                                   00695000
    BEGIN                                                               00696000
INTEGER I;                                                              00697000
BOOLEAN DONE;                                                           00698000
FOR I ~ 0 STEP 1 WHILE I { MAXRESERVED AND NOT DONE DO                  00699000
    IF IDENTIFIER = RESERVEDWORDS [I].[12:36] THEN                      00700000
         BEGIN                                                          00701000
    SEARCHRESERVED ~ 0 & RESERVEDWORDS [I] [37: 1:11]                   00702000
                       & RESERVEDWORDS [I] [12:12:24]                   00703000
                       & MARK              [ 1: 1: 8];                  00704000
              COMMENT ALL RESERVED WORDS ARE TREATED AS OPERATORS IF    00705000
                        FOUND BY SEARCHID;                              00706000
    DONE ~ TRUE;                                                        00707000
         END;                                                           00708000
    END SEARCH FOR RESERVED WORD OR SYMBOL;                             00709000
BOOLEAN PROCEDURE ITISRESERVED (IDENTIFIER);                            00709100
    VALUE IDENTIFIER;                                                   00709110
    REAL  IDENTIFIER;                                                   00709120
    BEGIN                                                               00709130
INTEGER I;                                                              00709140
BOOLEAN DONE;                                                           00709150
FOR I ~ 0 STEP 1 WHILE I { MAXRESERVED AND NOT DONE DO                  00709160
    IF IDENTIFIER = RESERVEDWORDS[I].[12:36] THEN                       00709170
         IF RESERVEDWORDS[I].[1:5] = 22 THEN DONE ~ TRUE;               00709180
ITISRESERVED ~ DONE;                                                    00709190
    END OF ITISRESERVED;                                                00709200
REAL PROCEDURE SEARCHID (IDENTIFIER);  VALUE IDENTIFIER;                00710000
COMMENT DOCUMENT                                                        00711000
              SEARCHRESERVED PERFORMS A SEQUENTIAL SEARCH OF THE TABLE  00712000
         OF RESERVED WORDS USING THE PARAMETER IDENTIFIER AS AN         00713000
         ARGUMENT.  IF THE SEARCH IS SATISFIED, SEARCHRESERVED RETURNS  00714000
         WITH A WORD THAT IS SUITABLE FOR STORING IN THE PSEDO-PRT AND  00715000
         CONTAINING OPERATION CODE, OPERATOR PRIORITY AND MARKED AS AN  00716000
         OPERATOR (I.E. [1:8] ON.).                                     00717000
              SEARCHID PERFORMS A SEQUENTIAL SEARCH OF THE IDENTIFIER   00718000
         PORTION OF THE PSEUDO-PRT AND RETURNS WITH AN INDEX FOR THE    00719000
         VALUE THAT IS CURRENTLY ASSIGNED TO THAT IDENTIFIER IF THE     00720000
         IDENTIFIER IS FOUND.                                           00721000
                                                                       ;00722000
REAL IDENTIFIER;                                                        00723000
    BEGIN                                                               00724000
ALPHA STREAM PROCEDURE EXAMIN(NCR); VALUE NCR;                          00725000
    BEGIN SI ~ NCR; DI~LOC EXAMIN; DI ~ DI + 7; DS ~ CHR END EXAMIN;    00726000
REAL T;                                                                 00727000
INTEGER I;         ALPHA N;                                             00728000
DEFINE   PRTLOC = USERPRT[PRTI]#;                                       00729000
LABEL EXIT;                                                             00730000
LOCALPRTI ~ PRTI;                                                       00731000
FOUND ~ DEFINED ~ SUBSCRIPTED ~ FALSE;                                  00732000
FORID AND NOT FOUND DO                                                  00733000
    IF T ~ PRTLOC ! 0 THEN                                              00734000
    IF T.[12:36] = IDENTIFIER.[12:36] THEN                              00735000
         BEGIN                                                          00736000
    I ~ PRTI - IDBASE;                                                  00737000
    FOUND ~ TRUE;                                                       00738000
    SUBSCRIPTED ~ BOOLEAN (T.[10:1]);                                   00739000
    IF SUBSCRIPTED AND N ~ EXAMIN(NCR) ! "[" THEN                       00740000
         BEGIN                                                          00741000
              FLAGIT(OTHER,8);                                          00742000
              GO TO EXIT;                                               00743000
         END ELSE                                                       00744000
    IF NOT SUBSCRIPTED AND N = "[" THEN                                 00745000
         BEGIN                                                          00746000
              FLAGIT(OTHER,9);                                          00747000
              GO TO EXIT;                                               00748000
         END;                                                           00749000
         N ~ IF SUBSCRIPTED THEN 3 ELSE 0;                              00750000
    T ~ I & MARK [1:1:9] & N [10:46:2];                                 00751000
         END;                                                           00752000
IF NOT FOUND THEN                                                       00753000
         BEGIN                                                          00754000
    I ~ PRTI ~ NEXTPRTI;                                                00755000
    IF EXAMIN (NCR) = "[" THEN                                          00756000
              BEGIN                                                     00757000
         IF ARRAYI ~ ARRAYI + 1 < 4                                     00758000
              THEN PRTVAL ~ 0 & 2047 [1:37:11] & (ARRAYI - 1) [37:45:3] 00759000
              ELSE BEGIN                                                00760000
                        FLAGIT(OTHER,3);                                00761000
                        GO TO EXIT;                                     00762000
                   END;                                                 00763000
         SUBSCRIPTED ~ TRUE;                                            00764000
         N ~ 3;                                                         00765000
              END;                                                      00766000
    IF NOT FLAG THEN                                                    00767000
              BEGIN                                                     00768000
         T ~ IDLOC ~ IDENTIFIER & MARK [1:1:9] & N [10:46:2];           00769000
         T ~ I & T [1:1:11];                                            00770000
         BUMPNEXT;                                                      00771000
              END;                                                      00772000
         END;                                                           00773000
PRTI ~ LOCALPRTI;                                                       00774000
SEARCHID ~ T;                                                           00775000
EXIT:                                                                   00776000
    END SEARCH OF IDENTIFIERS FOR PRT INDEX;                            00777000
PROCEDURE ASSIGNMENT (IDENTIFIER, RESULT);                              00778000
COMMENT DOCUMENT                                                        00779000
              ASSIGNMENT SEARCHES THE TABLE OF IDENTIFIERS FOR THE      00780000
         PARAMETER IDENTIFIER.  IF IT IS FOUND, THE NEW RESULT IS       00781000
         ASSIGNED OTHERWISE A NEW IDENTIFIER LOCATION IS ESTABLISHED    00782000
         AND THE RESULT IS ASSIGNED.                                    00783000
                                                                       ;00784000
              VALUE   IDENTIFIER, RESULT;                               00785000
              REAL    IDENTIFIER, RESULT;                               00786000
    BEGIN                                                               00787000
INTEGER I;                                                              00788000
LOCALPRTI ~ PRTI;                                                       00789000
PRTI ~ IDENTIFIER .[33:15];                                             00790000
IF IDENTIFIER < 0 THEN PRTLOC ~ RESULT ELSE                             00791000
         BEGIN                                                          00792000
    PRTVAL ~ RESULT;                                                    00793000
    USERPRT[IDBASE + PRTI].[11:1] ~ 1;                                  00794000
         END;                                                           00795000
PRTI ~ LOCALPRTI;                                                       00796000
    END ASSIGNING VALUE TO AN IDENTIFIER;                               00797000
PROCEDURE SIMPLEOUTPUT;     FORWARD;                                    00798000
REAL PROCEDURE GETVALUE (IDENTIFIER);                                   00799000
COMMENT DOCUMENT                                                        00800000
              GETVALUE FIRST CHECKS THE PARAMETER IDENTIFIER TO SEE IF  00801000
         IT IS AN IDENTIFIER.  IF IT IS NOT THEN IT IS EITHER A NUMERIC 00802000
         CONSTANT OR AN OPERATOR AND GETVALUE RETURNS WITH THE VALUE OF 00803000
         IDENTIFIER OTHERWISE SEARCHID IS CALLED AND GETVALUE RETURNS   00804000
         WITH THE CURRENTLY ASSIGNED VALUE.  IF AN IDENTIFIER IS        00805000
         UNDEFINED AT EVALUATION TIME, IT IS FLAGGED BY GETVALUE.       00806000
              THE POSSIBILITY OF A NUMERIC CONSTANT BEING MARKED AS     00807000
         AN IDENTIFIER ([1:9] ON) IS A POTENTIAL TROUBLE SPOT, BUT      00808000
         EFFORTS TO CREATE THIS CONDITION HAVE BEEN UNSUCCESSFUL, AND   00809000
         GETVALUE WILL PROBABLY FLAG IT AS BEING UNDEFINED.             00810000
                                                                       ;00811000
         VALUE IDENTIFIER;                                              00812000
         REAL IDENTIFIER;                                               00813000
    BEGIN                                                               00814000
INTEGER I;                                                              00815000
ALPHA A;                                                                00816000
DEFINE   MARKID    =  MARK.[ 1: 9]#;                                    00817000
DEFINE   IDLOC = USERPRT[IDBASE + PRTI]#;                               00818000
LOCALPRTI ~ PRTI;                                                       00819000
PRTI ~ IDENTIFIER.[33:15];                                              00820000
IF IDENTIFIER.[1:9] ! MARKID THEN GETVALUE ~ IDENTIFIER ELSE            00821000
         BEGIN                                                          00822000
    IF IDENTIFIER.[11:1] ! 1 THEN                                       00823000
              BEGIN                                                     00824000
         IF IDLOC.[11:1] = 1 THEN GETVALUE ~PRTVAL ELSE                 00825000
                   BEGIN                                                00826000
              LISTID ~ IDLOC.[12:36]; FLAGIT(RUNERR,1);                 00827000
              SIMPLEOUTPUT;                                             00828000
                   END                                                  00829000
              END       ELSE                                            00830000
         IF IDENTIFIER.[10:1] = 0 THEN GETVALUE ~ PRTLOC                00831000
                                  ELSE GETVALUE ~ PRTVAL;               00832000
         END;                                                           00833000
PRTI ~ LOCALPRTI;                                                       00834000
    END SEARCHING IDENTIFIERS AND RETURNING CURRENTLY ASSIGNED VALUE;   00835000
% * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 00836000
COMMENT  THE FOLLOWING DECLARATIONS AND DEFINES PERTAIN TO THE EVALUATE 00837000
         PROCEDURE.  THIS PROCEDURE PERFORMS THE ACTUAL EVALUATION OF A 00838000
         STRING OF ALTERNATING OPERANDS AND OPERATORS AS FOUND IN A     00839000
         USERS PSEUDO PRT BETWEEN THE INDICES START AND STOP.  THE FINAL00840000
         RESULT IS PLACED IN RESULTS. THE PROCEDURE IS BASED ON AN      00841000
         ARTICLE BY DE KNUTH IN THE DECEMBER, 1962 ISSUE OF             00842000
         COMPUTERS AND AUTOMATION.                                     ;00843000
% * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 00844000
PROCEDURE EVALUATE (START, STOP);                                       00845000
         VALUE START, STOP;                                             00846000
         INTEGER START, STOP;                                           00847000
    BEGIN                                                               00848000
REAL     TSI;                                                           00849000
BOOLEAN OMARK, SMARK;   % TRUE WHEN O OR S FIELD [1:9] = 510            00850000
ALPHA SALF;             % CONTAINS FIELD [12:12] OF OPERATOR            00851000
DEFINE   RIGHTPAREN = (SALF = "1)" AND SMARK)#,                         00852000
         RIGHTBRACKET = (SALF = "1]" AND SMARK)#,                       00853000
         LEFTPARENS = (S.PRIORITY=0 AND S.[12:12]="1(" AND SMARK)#,     00854000
         PRIORITY = [36:6]#,                                            00855000
         OPERATOR = O.[42:6]#,                                          00856000
         OPERATION = (O.PRIORITY {10 AND OMARK)#,                       00857000
         BINARYOS=(S.PRIORITY > 0 AND S.PRIORITY < 8 AND SMARK)#,       00858000
         NODEA = GO TO INTRINSICS#,                                     00859000
         NODEB = GO TO BINARY#,                                         00860000
         LEFTPAREN = (O.[12:12] = "1(" AND OMARK ~ O.[1:9] = 510)#,     00861000
         CHANGESI = SI ~ SI#,                                           00862000
         AREG     = STACK [SI    ]#,                                    00863000
         O        = STACK [SI - 1]#,        B = BOOLEAN#,               00864000
         OPREG = O#,                                                    00865000
         BREG     = STACK [SI - 2]#,                                    00866000
         REPLACEMENT = (O.[12:18] = "2:=" AND OMARK)#,                  00867000
         TAILEND = ((SALF = "1;" OR SALF = "1~") AND SMARK)#;           00868000
REAL S;                                                                 00869000
INTEGER I, SI, PAREN;                                                   00870000
LABEL    ADD ,SUB ,MPY ,RDV ,DIVO,MODO,AST ,MINU,SQT ,SN, CS, AN, NULL, 00871000
         ANDOP, OROP, NOTOP,                                            00872000
         LOG ,EP  ,AB  ,SGN ,EQU ,NEQ ,LEQ ,GEQ ,LSS ,GTR ,IP,BKT,COM;  00873000
SWITCH OPERATORS ~ ADD, SUB, MPY, RDV, DIVO, MODO, AST, NULL, NULL,NULL,00874000
                   SQT, IP,  SN,  CS,  AN,   LOG,  EP,  AB,   SGN , BKT,00875000
                   COM,MINU,ANDOP,OROP,NOTOP,EQU,NEQ,LEQ,GEQ,LSS,       00876000
                   GTR;                                                 00877000
LABEL    LOOP, NEXT, BINARY,  DONE, REPLACE, INTRINSICS;                00878000
LABEL    EXIT, RETURN, STUFFIT;                                         00879000
MONITOR INTOVR, EXPOVR, ZERO, INDEX;                                    00880000
LABEL INTTOOBIG, EXPTOOBIG, DIVBYZERO, TOOMANYRESULTS;                  00881000
         INTOVR ~ INTTOOBIG;                                            00882000
         EXPOVR ~ EXPTOOBIG;                                            00883000
         ZERO   ~ DIVBYZERO;                                            00884000
         INDEX ~ TOOMANYRESULTS;                                        00885000
         I ~ SI ~ 1;                                                    00886000
         PRTI ~ START - 1;                                              00887000
         S ~ MARK;                                                      00888000
LOOP: IF NOT (BINARYOS OR RIGHTPAREN OR RIGHTBRACKET OR TAILEND) THEN   00889000
                   STACK [CHANGESI + 1] ~ S  ELSE                       00890000
              BEGIN                                                     00891000
NEXT:    IF S.PRIORITY { OPREG.PRIORITY THEN                            00892000
                   BEGIN                                                00893000
              IF LEFTPAREN THEN                                         00894000
                   BEGIN OPREG ~ AREG ; CHANGESI - 1 END ELSE           00895000
              IF OPERATION THEN                                         00896000
                        BEGIN                                           00897000
                   GO TO OPERATORS [OPERATOR];                          00898000
                   IF REPLACEMENT THEN GO TO REPLACE;                   00899000
              NULL: SETLISTREAL; FLAGIT(RUNERR,0);                      00900000
                   GO TO EXIT;                                          00901000
                        END   ELSE                                      00902000
              IF OPREG = MARK THEN GO TO DONE;                          00903000
                   END ELSE                                             00904000
STUFFIT:      STACK[CHANGESI + 1] ~ S;                                  00905000
              END;                                                      00906000
         IF SI < 1 OR SI = 59 THEN                                      00907000
              BEGIN                                                     00908000
                   SETLISTREAL;                                         00909000
                   FLAGIT(RUNERR,4);                                    00910000
                   GO TO EXIT;                                          00911000
              END;                                                      00912000
         IF BUMPPRTI { STOP THEN                                        00913000
                   BEGIN                                                00914000
              S ~ GETVALUE (STKLOC);                                    00915000
              SMARK ~ S.[1:9] = 510;                                    00916000
              SALF ~ S.[12:12];                                         00917000
                   END  ELSE                                            00918000
RETURN:  BEGIN IF PAREN ~ PAREN + 1 < 1000 THEN GO TO NEXT ELSE         00919000
                   BEGIN SETLISTREAL;FLAGIT(RUNERR,4);GO TO EXIT END    00920000
              END;                                                      00921000
         GO TO LOOP;                                                    00922000
COMMENT       BINARY OPERATORS ARE HANDLED AT THE LABEL BINARY.         00923000
              SOME PRECAUTION IS TAKEN IN REGARDS TO EXPONENT OVERFLOW  00924000
              AND DIVISION BY ZERO;                                     00925000
         ADD : TSI ~ BREG + AREG; NODEB;                                00926000
         SUB : TSI ~ BREG - AREG; NODEB;                                00927000
         MPY : TSI ~ BREG | AREG; NODEB;                                00928000
         RDV : TSI ~ BREG / AREG; NODEB;                                00929000
         AST : IF BREG < 0 AND AREG MOD 1 ! 0 THEN                      00930000
                   BEGIN                                                00931000
                        SETLISTREAL;                                    00932000
                        FLAGIT(RUNERR,8);                               00933000
                        GO TO EXIT;                                     00934000
                   END;                                                 00935000
               IF BREG = 0 THEN BEGIN TSI ~ 0; NODEB END;               00936000
               IF ABS(AREG | LN(ABS(BREG))) > 158 THEN                  00937000
                   BEGIN                                                00938000
                        SETLISTREAL;                                    00939000
                        FLAGIT(RUNERR,10);                              00940000
                        GO TO EXIT;                                     00941000
                   END;                                                 00942000
               TSI ~ BREG * AREG;   NODEB;                              00943000
         DIVO: TSI ~ BREG DIV AREG; NODEB;                              00944000
         MODO: TSI ~ BREG MOD AREG; NODEB;                              00945000
         COM: TSI ~ 0 & BREG [40:44:4] & AREG [44:44:4];   NODEB;       00946000
         BKT: IF NOT RIGHTBRACKET THEN GO TO STUFFIT;                   00947000
              TSI ~ BREG & AREG[40:40:8] & 0[10:47:1];                  00948000
              STACK[CHANGESI - 2] ~ TSI;                                00949000
              IF BUMPPRTI { STOP THEN                                   00950000
                        BEGIN                                           00951000
                   S ~GETVALUE(STKLOC);                                 00952000
                   SMARK ~ S.[1:9] = 510;                               00953000
                   SALF ~ S.[12:12];                                    00954000
                        END ELSE GO TO RETURN;                          00955000
              IF NOT (SMARK AND SALF = "2:") THEN AREG ~ GETVALUE(TSI); 00956000
              GO TO LOOP;                                               00957000
         EQU: TSI ~ REAL (BREG = AREG);   NODEB;                        00958000
         NEQ: TSI ~ REAL (BREG ! AREG);   NODEB;                        00959000
         LEQ: TSI ~ REAL (BREG { AREG);   NODEB;                        00960000
         GEQ: TSI ~ REAL (BREG } AREG);   NODEB;                        00961000
         LSS: TSI ~ REAL (BREG < AREG);   NODEB;                        00962000
         GTR: TSI ~ REAL (BREG > AREG);   NODEB;                        00963000
       ANDOP: TSI ~ REAL(B(AREG) AND B(BREG)); NODEB;                   00964000
       OROP : TSI ~ REAL(B(AREG) OR  B(BREG)); NODEB;                   00965000
       NOTOP: TSI ~ REAL(NOT B(AREG));         NODEA;                   00966000
         SQT: IF AREG < 0 THEN                                          00967000
                   BEGIN                                                00968000
                        SETLISTREAL;                                    00969000
                        FLAGIT(RUNERR,9);                               00970000
                        GO TO EXIT;                                     00971000
                   END;                                                 00972000
              TSI ~ SQRT (AREG);  NODEA;                                00973000
         IP:       TSI ~ ENTIER   (AREG);             NODEA;            00974000
         SN:       TSI ~ SIN      (AREG);             NODEA;            00975000
         CS:       TSI ~ COS      (AREG);             NODEA;            00976000
         AN:       TSI ~ ARCTAN   (AREG);             NODEA;            00977000
         LOG: IF AREG { 0 THEN                                          00978000
                   BEGIN                                                00979000
                        SETLISTREAL;                                    00980000
                        FLAGIT(RUNERR,8);                               00981000
                        GO TO EXIT;                                     00982000
                   END;                                                 00983000
              TSI ~ LN (AREG);    NODEA;                                00984000
         EP : IF ABS(AREG) > 158 THEN                                   00985000
                   BEGIN                                                00986000
                        SETLISTREAL;                                    00987000
                        FLAGIT(RUNERR,10);                              00988000
                        GO TO EXIT;                                     00989000
                   END;                                                 00990000
              TSI ~ EXP (AREG);   NODEA;                                00991000
         AB:       TSI ~ ABS      (AREG);             NODEA;            00992000
         SGN:      TSI ~ SIGN     (AREG);             NODEA;            00993000
         MINU:     TSI ~ 0 - AREG;                    NODEA;            00994000
         BINARY:        CHANGESI - 1;                                   00995000
         INTRINSICS:    STACK [CHANGESI - 1] ~ TSI;                     00996000
                        I ~ I + 1;                                      00997000
                        GO TO NEXT;                                     00998000
DIVBYZERO: SETLISTREAL; FLAGIT(RUNERR,5); GO TO EXIT;                   00999000
EXPTOOBIG: SETLISTREAL; FLAGIT(RUNERR,6); GO TO EXIT;                   01000000
INTTOOBIG: SETLISTREAL; FLAGIT(RUNERR,7); GO TO EXIT;                   01001000
TOOMANYRESULTS: FLAGIT(OTHER,14); GO TO EXIT;                           01002000
REPLACE: ASSIGNMENT (BREG, AREG);                                       01003000
         TSI ~ BREG ~ AREG;                                             01004000
         CHANGESI - 2;                                                  01005000
         I ~ I + 1;                                                     01006000
         GO TO NEXT;                                                    01007000
DONE:    RESULTS[RESULTI] ~ TSI;                                        01008000
         RESULTI ~ RESULTI + 1;                                         01009000
EXIT:                                                                   01010000
    END EVALUATION OF PRT LOCATIONS BETWEEN START AND STOP;             01011000
PROCEDURE EXPRESSION;                                                   01012000
    BEGIN                                                               01013000
ALPHA STREAM PROCEDURE EXAMIN(NCR); VALUE NCR;                          01014000
    BEGIN SI ~ NCR; DI~LOC EXAMIN; DI ~ DI + 7; DS ~ CHR END EXAMIN;    01015000
BOOLEAN MINUS, LAST, FIRST, RTBRACKET;                                  01016000
INTEGER S, N, PARENS, BRACKETS;                                         01017000
REAL KEY;                                                               01018000
INTEGER  LASTSTACKI;                                                    01019000
REAL R, LASTSTACK;                                                      01020000
BOOLEAN OPERATOR;                                                       01021000
BOOLEAN FUNCTION, OPERATION;                                            01021100
LABEL EXIT;                                                             01022000
DEFINE   STKLOCBUMP = STKLOC ~ R; BUMPPRTI; OPERATOR ~ TRUE;            01023000
         LASTSTACK ~ 0;#;                                               01024000
    IF NOT TERMINATORS THEN LASTOUT ~ NCR;                              01025000
FIRST ~ CHECKER ~ TRUE;                                                 01026000
OPERATOR ~ SETTOG;                                                      01027000
IF TYPETOG THEN                                                         01028000
         BEGIN                                                          01029000
    R ~ 0; STKLOCBUMP;                                                  01030000
    R ~ REPLACELOW;   STKLOCBUMP;                                       01031000
         END;                                                           01032000
WHILE NOT (LAST OR FLAG) DO                                             01033000
         BEGIN                                                          01034000
    NCRT ~ NCR;                                                         01035000
    S ~ SCAN;                                                           01036000
    N ~ EXAMIN (NCR);                                                   01037000
IF BOOLESTOP OR THENSTOP OR (FORMTOG ~ ACCUM1 = "4FORM ") THEN          01038000
         BEGIN R ~ SEARCHRESERVED ("1;    "); STKLOCBUMP; LAST ~ TRUE   01039000
         END ELSE                                                       01040000
IF S = 1 THEN                                                           01041000
    IF FIRST AND (ACCUM1 = "3SET  " OR ACCUM1 = "4TYPE " ) THEN         01042000
              BEGIN                                                     01043000
         FLAGIT(DSKMSG,13);                                             01044000
         GO TO EXIT;                                                    01045000
              END ELSE                                                  01046000
    IF ITISRESERVED(ACCUM1) THEN                                        01046100
              BEGIN                                                     01046200
         FLAGIT(DSKMSG,15);                                             01046300
         GO TO EXIT;                                                    01046400
              END ELSE                                                  01046500
    IF R ~ SEARCHRESERVED(ACCUM1) ! 0 THEN                              01047000
         BEGIN FUNCTION ~ TRUE; OPERATION ~ FALSE; STKLOCBUMP END ELSE  01047100
              BEGIN                                                     01048000
    IF OPERATOR THEN                                                    01049000
                   BEGIN                                                01050000
    LASTSTACK ~ STKLOC ~ SEARCHID (ACCUM1);                             01051000
                    FUNCTION~OPERATION~FALSE;                           01051100
         IF FLAG THEN GO TO EXIT;                                       01052000
         BUMPPRTI;                                                      01053000
         OPERATOR ~ FALSE;                                              01054000
                   END ELSE                                             01055000
                BEGIN                                                   01056000
                   FLAGIT(STMTERR,0);                                   01057000
                   GO TO EXIT;                                          01058000
                END                                                     01059000
              END  ELSE                                                 01060000
IF NUMBERS (S, N, MINUS) THEN                                           01061000
    IF FIRST AND SETTOG THEN                                            01062000
              BEGIN                                                     01063000
         FLAGIT(DSKMSG,14);                                             01064000
         GO TO EXIT;                                                    01065000
              END ELSE                                                  01066000
              BEGIN                                                     01067000
    IF OPERATOR THEN                                                    01068000
                   BEGIN                                                01069000
         STKLOC ~ NUMBER;                                               01070000
         OPERATOR ~ FALSE;                                              01071000
         OPERATION ~ FALSE;                                             01071100
         FUNCTION ~ FALSE;                                              01071200
         LASTSTACK ~ 0;                                                 01072000
         BUMPPRTI                                                       01073000
                   END ELSE                                             01074000
                BEGIN                                                   01075000
                   FLAGIT(STMTERR,0);                                   01076000
                   GO TO EXIT;                                          01077000
                END                                                     01078000
              END  ELSE                                                 01079000
IF S = 2 THEN                                                           01080000
         BEGIN                                                          01081000
    KEY ~ ACCUM1.[18:6];                                                01082000
    IF FIRST THEN IF NOT (KEY = "(" OR KEY = "-") THEN                  01083000
         BEGIN                                                          01084000
              FLAGIT(OTHER,1);                                          01085000
              GO TO EXIT;                                               01086000
         END;                                                           01087000
    IF TERMINATORS AND (FUNCTION OR OPERATION) THEN                     01087100
              BEGIN                                                     01087200
         FLAGIT(OTHER,1);                                               01087300
         GO TO EXIT;                                                    01087400
              END ELSE                                                  01087500
    IF TERMINATORS THEN LAST ~ TRUE ELSE                                01088000
    IF (OPERATOR OR FIRST) AND KEY = "-" THEN ACCUM1 ~ "5MINUS" ELSE    01089000
              BEGIN                                                     01090000
         IF KEY = "]" THEN                                              01091000
              BEGIN BRACKETS ~ BRACKETS - 1; RTBRACKET ~ TRUE END;      01092000
         BRACKETS ~ BRACKETS + REAL (KEY = "[");                        01093000
         PARENS ~ PARENS + REAL (KEY = "(");                            01094000
              END;                                                      01095000
    R ~ SEARCHRESERVED (ACCUM1);                                        01096000
    FUNCTION ~ FALSE;                                                   01096100
    IF NOT (KEY = ")" OR KEY = "]") THEN OPERATION ~ TRUE;              01096200
    STKLOCBUMP;                                                         01097000
    OPERATOR ~ OPERATOR AND NOT RTBRACKET;                              01098000
    RTBRACKET ~ FALSE;                                                  01099000
    IF KEY =  ")" THEN BEGIN OPERATOR ~ FALSE; PARENS ~PARENS-1 END ELSE01100000
         END       ELSE                                                 01101000
IF S = 4 THEN                                                           01102000
         BEGIN                                                          01103000
    IF TYPETOG THEN BEGIN FLAGIT(STMTERR,10); GO TO EXIT END;           01104000
    IF LASTSTACK!0 THEN USERSTACK[PRTI-1] ~ LASTSTACK & 0[1:1:11];      01105000
    R ~ REPLACELOW;                                                     01106000
    STKLOCBUMP;                                                         01107000
         END ELSE                                                       01108000
    IF FLAGI = 9 THEN LAST ~ TRUE ELSE                                  01109000
         BEGIN                                                          01110000
              FLAGIT(OTHER,1);                                          01111000
              GO TO EXIT;                                               01112000
         END;                                                           01113000
IF PRTI } STKMAX - STKBASE THEN                                         01114000
         BEGIN                                                          01115000
    TERMINATE ~ LAST ~ TRUE;                                            01116000
    FLAGIT(OTHER,2);                                                    01117000
    GO TO EXIT;                                                         01118000
         END;                                                           01119000
LASTOUT ~ NCRT;                                                         01120000
FIRST ~ FALSE;                                                          01121000
         END;                                                           01122000
STACKI ~ PRTI;                                                          01123000
CHECKER ~ FALSE;                                                        01124000
IF PARENS + BRACKETS ! 0 THEN FLAGIT(STMTERR,3);                        01125000
EXIT:                                                                   01126000
    END PLACING THE COMPONENTS OF AN EXPRESSION IN THE STACK;           01127000
PROCEDURE EVALUATOR;                                                    01128000
COMMENT DOCUMENT                                                        01129000
              THE EVALUATE PROCEDURE PERFORMS THE ACTUAL EVALUATION OF A01130000
         STRING OF ALTERNATING OPERANDS AND OPERATORS AS FOUND IN A     01131000
         USERS PSEDO-PRT BETWEEN THE PARAMETERS START AND STOP.  THE    01132000
         SINGLE-VALUE RESULT OF THE EXPRESSION IS STORED IN THE RESULTS 01133000
         ARRAY AND ASSIGNED TO AS MANY LEFT-PARTS AS EXIST.  DURING THE 01134000
         EVALUATION OF THE EXPRESSION THE CURRENT OPERATOR IS COMPARED  01135000
         WITH THE PREVIOUS OPERATOR AND THE ONE WITH THE HIGHEST        01136000
         PRIORITY IS EXECUTED FIRST.  ALL OF THE STANDARD ALGOL         01137000
         OPERATORS AND INTRINSICS ARE USED.  CARE IS TAKEN TO AVOID MCP 01138000
         TERMINATIONS AND A REMARK IS PASSED IF AN IMAGINARY ROOT IS    01139000
         EXTRACTED.  THE EVALUATE PROCEDURE IS BASED ON AN ARTICLE BY   01140000
         D. E. KNUTH IN THE DECEMBER, 1962 ISSUE OF COMPUTERS AND       01141000
         AUTOMATION.                                                    01142000
              THE EXPRESSION PROCEDURE PLACES THE VARIOUS COMPONENTS OF 01143000
         AN EXPRESSION IN THE STACK PORTION OF A USERS PSEDO-PRT.  IT   01144000
         ALSO PROVIDES THE LEFT-PART LIST FOR A NON-PROGRAM MODE "TYPE" 01145000
         STATEMENT (I.E. "4PHONY" AND "2:=    ").  EACH COMPONENT ("(", 01146000
         "+", CONSTANT OR IDENTIFIER) REQUIRES ONE WORD IN THE STACK.   01147000
              EVALUATOR PERFORMS COMMON FUNCTIONS FOR THE TYPE AND SET  01148000
         PROCEDURES.                                                    01149000
;                                                                       01150000
    BEGIN                                                               01151000
INTEGER START, STOP;                                                    01152000
REAL S, N;                                                              01153000
IF NOT FLAGT THEN                                                       01154000
         BEGIN                                                          01155000
    START ~ STACKI;                                                     01156000
    EXPRESSION;                                                         01157000
    STEPN ~ STOP ~ PRTI;                                                01158000
    IF NOT PROGRAMTOG AND NOT FLAG THEN EVALUATE (START,STOP);          01159000
         END;                                                           01160000
IF FLAGT THEN                                                           01161000
         BEGIN                                                          01162000
    WHILE NOT TERMINATORS DO S ~ SCAN;                                  01163000
    FLAGT ~ FALSE;                                                      01164000
         END;                                                           01165000
    END EVALUATION OF ONE SINGLE VALUED EXPRESSION;                     01166000
PROCEDURE FORMATTER(FROM,N,LF);                                         01167000
         VALUE N, LF;                                                   01168000
         INTEGER FROM,N;                                                01169000
         BOOLEAN LF;                                                    01170000
    BEGIN                                                               01171000
INTEGER STREAM PROCEDURE INDEXNCR(N,I); VALUE N,I;                      01172000
    BEGIN DI ~ N; DI ~ DI + I; INDEXNCR ~ DI END OF INDEXNCR;           01173000
STREAM PROCEDURE FILLTANK (S,D,SKIPP,X);   VALUE S,SKIPP,X;             01174000
    BEGIN SI~S; DI~D; DI~DI+SKIPP; DS~X CHR; DS~ LIT "~" END FILLTANK;  01175000
INTEGER ROWI,TANKI,CHARI,ROW,NOBUF,FROMT,C;                             01176000
DEFINE SETINDICIES =                                                    01177000
         IF TANKI > 96 THEN                                             01178000
              BEGIN                                                     01179000
                   ROWI ~ IF ROWI = MAXROWS THEN 0 ELSE ROWI + 1;       01180000
                   ROW ~ MAXROWS | USER + ROWI;                         01181000
                   TANKI ~ 0;                                           01182000
              END #;                                                    01183000
LABEL EXIT, WILLFIT;                                                    01184000
IF STOREPROG THEN GO TO EXIT;                                           01185000
    STATOS[USER].[2:1] ~ 1;                                             01186000
    NOBUF ~ STATOS[USER].[30:9];                                        01187000
    FROMT ~ FROM;                                                       01188000
    ROWI  ~ TINFO[USER].[24:8];                                         01189000
    TANKI ~ TINFO[USER].[32:8];                                         01190000
    CHARI ~ TINFO[USER].[40:8];                                         01191000
    ROW   ~ MAXROWS | USER + ROWI;                                      01192000
IF LF THEN                                                              01193000
    BEGIN                                                               01194000
         IF CHARI < 26 THEN                                             01195000
              BEGIN                                                     01196000
                   FILLTANK(LCRLF,TANK[ROW,TANKI],CHARI,2);             01197000
                   CHARI ~ CHARI + 2;                                   01198000
              END ELSE                                                  01199000
         IF CHARI = 26 THEN                                             01200000
              BEGIN                                                     01201000
                   FILLTANK(LCR,TANK[ROW,TANKI],CHARI,1);               01202000
                   CHARI ~ 0;                                           01203000
                   TANKI ~ TANKI + 4;                                   01204000
                   NOBUF ~ NOBUF + 1;                                   01205000
                   SETINDICIES;                                         01206000
                   FILLTANK(LLFD,TANK[ROW,TANKI],0,1);                  01207000
                   CHARI ~ 1;                                           01208000
              END;                                                      01209000
    END;                                                                01210000
IF CHARI = 27 THEN                                                      01211000
    BEGIN                                                               01212000
         CHARI ~ 0;                                                     01213000
         TANKI ~ TANKI + 4;                                             01214000
         NOBUF ~ NOBUF + 1;                                             01215000
         SETINDICIES;                                                   01216000
    END;                                                                01217000
IF N < C ~ 27 - CHARI THEN GO TO WILLFIT;                               01218000
    FILLTANK(FROMT,TANK[ROW,TANKI],CHARI,C);                            01219000
    CHARI ~ 0;                                                          01220000
    TANKI ~ TANKI + 4;                                                  01221000
    NOBUF ~ NOBUF + 1;                                                  01222000
    SETINDICIES;                                                        01223000
    FROMT ~ INDEXNCR(FROMT,C);                                          01224000
    N ~ N - C;                                                          01225000
WHILE N } 27 DO                                                         01226000
    BEGIN                                                               01227000
         FILLTANK(FROMT,TANK[ROW,TANKI],0,27);                          01228000
         TANKI ~ TANKI + 4;                                             01229000
         NOBUF ~ NOBUF + 1;                                             01230000
         SETINDICIES;                                                   01231000
         FROMT ~ INDEXNCR(FROMT,27);                                    01232000
         N ~ N - 27;                                                    01233000
    END;                                                                01234000
WILLFIT:                                                                01235000
    IF N ! 0 THEN                                                       01236000
         BEGIN                                                          01237000
              FILLTANK(FROMT,TANK[ROW,TANKI],CHARI,N);                  01238000
              CHARI ~ CHARI + N;                                        01239000
         END;                                                           01240000
IF CHARI = 27 THEN                                                      01241000
    BEGIN                                                               01242000
         CHARI ~ 0;                                                     01243000
         TANKI ~ TANKI + 4;                                             01244000
         NOBUF ~ NOBUF + 1;                                             01245000
         SETINDICIES;                                                   01246000
    END;                                                                01247000
TINFO[USER].[24:8] ~ ROWI;                                              01248000
TINFO[USER].[32:8] ~ TANKI;                                             01249000
TINFO[USER].[40:8] ~ CHARI;                                             01250000
STATOS[USER].[30:9] ~ NOBUF;                                            01251000
EXIT:                                                                   01252000
    END OF FORMATTER;                                                   01253000
PROCEDURE TANKWRITER; FORWARD;                                          01254000
PROCEDURE SIMPLEOUTPUT;                                                 01255000
COMMENT DOCUMENT                                                        01256000
              ALSO SEE TANKWRITER.                                      01257000
              THE WRITER PROCEDURE PROVIDES A CONVENIENT MEANS OF       01258000
         WRITING VARIOUS FORMATS AND LISTS TO THE SCRATCH ARRAY.        01259000
              THE SINGLE ALL-IMPORTANT RULE FOR INTERP OUTPUT IS AS     01260000
         FOLLOWS:                                                       01261000
                   IF INFORMATION IS WRITTEN ON A REMOTE DEVICE,        01262000
                   TANKWRITER WRITES IF FROM THE TANK ARRAY, AND IF     01263000
                   INFORMATION GETS TO THE TANK, FORMATTER - REPEAT -   01264000
                   FORMATTER PUTS IT THERE.                             01265000
         FORMATTER MOVES N CHARACTERS STARTING AT ABSOLUTE LOCATION FROM01266000
         THE SAVE ARRAY SCRATCH OR SPECIAL VARIABLES TO TANK IN 28      01267000
         CHARACTER JUNKS. EACH 28 CHARACTER JUNK IN THE TANK IS IN A    01268000
         FOUR WORD INCREMENT INDEXED BY FIELD [30:8] OF STATOS ARRAY.   01269000
              SIMPLEOUTPUT SERVES AS A DRIVER FOR FORMATTER FOR VARIOUS 01270000
         PROCEDURES.  ITS MAIN FUNCTIONS ARE ERROR OUTPUTTING, TYPE     01271000
         STATEMENT OUTPUT AND BOSS TEACH OUTPUT.  OUTPUT LINE WIDTH IS  01272000
         CONTROLLED WITH A DEFINE.  THE "{!" IN FORMATS TEACH AND ERROR 01273000
         ARE NOT USED.                                                  01274000
;                                                                       01275000
    BEGIN                                                               01276000
INTEGER STREAM PROCEDURE INDEXNCR(N,I); VALUE N,I;                      01277000
    BEGIN DI ~ N; DI ~ DI + I; INDEXNCR ~ DI END OF INDEXNCR;           01278000
REAL X;                                                                 01279000
BOOLEAN  REEL;                                                          01280000
INTEGER F,J,S,N,L,R,I,FI,FMT,FSZ;                                       01281000
DEFINE  LINE  =  69#;                                                   01282000
S ~ F ~ SCRATCHO;                                                       01283000
IF FLAG       THEN                                                      01284000
         BEGIN                                                          01285000
    FLAG ~ FLAGT ~ FALSE;                                               01286000
    IF NOT TEACHER THEN F ~ F + 1;                                      01287000
    FLAGI ~ 0;                                                          01288000
    DO        BEGIN                                                     01289000
         FMT ~ FLAGS[J].[36:6];                                         01290000
         FI ~ FLAGS[J].[42:6];                                          01291000
         CASE FMT OF                                                    01292000
              BEGIN                                                     01293000
                   ;                                                    01294000
                   WRITE(SCRATCH[*],DISKMSG[FI]);                       01295000
                   IF FI = 1 THEN                                       01296000
                        WRITE(SCRATCH[*],RUNERRORS[1],LISTID)           01297000
                             ELSE                                       01298000
                   IF LISTSTEP = 0 THEN                                 01299000
                             BEGIN                                      01300000
                        LISTVAR ~ BLANKS;                               01301000
                        WRITE(SCRATCH[*],RUNERRORS[FI],LISTVAR)         01302000
                             END ELSE                                   01303000
                        WRITE(SCRATCH[*],RUNERRORS[FI],LISTSTEP);       01304000
                   WRITE(SCRATCH[*],STATEMENTERRS[FI]);                 01305000
                   WRITE(SCRATCH[*],OTHERMSGS[FI]);                     01306000
                   WRITE(SCRATCH[*],TEACH[FI]);                         01307000
              END OF CASE STATEMENT;                                    01308000
         FLAGS [J] ~ 0;                                                 01309000
         J ~ J + 1;                                                     01310000
         IF NOT TEACHER THEN FSZ ~ SCRATCH[0];                          01311000
         IF TEACHER THEN FORMATTER(F,63,FALSE) ELSE                     01312000
              FORMATTER(F,FSZ,TRUE);                                    01313000
              END UNTIL J = MAXFLAG OR FLAGS[J] = 0;                    01314000
         IF NOT TEACHER THEN FORMATTER(LXON,1,TRUE);                    01315000
         END  ELSE                                                      01316000
IF QUITTOG THEN                                                         01317000
         BEGIN                                                          01318000
    WRITE(SCRATCH[*],UTILITY,ELAPSEDMIN,ELAPSEDSEC);                    01319000
    FORMATTER(S,67,TRUE);                                               01320000
    TANKWRITER;                                                         01321000
         END       ELSE                                                 01322000
IF TYPETOG AND RESULTI ! 0 AND NOT PROGRAMTOG THEN                      01323000
         BEGIN                                                          01324000
    F ~ FIRSTOUT;                                                       01325000
    L ~ LASTOUT;                                                        01326000
    N ~ DELTANCR (F,L);                                                 01327000
    IF RESULTI ! 0 THEN X ~ RESULTS [RESULTI - 1];                      01328000
WHILE N > LINE DO                                                       01329000
         BEGIN                                                          01330000
    FORMATTER(F,LINE,TRUE);                                             01331000
    F ~ INDEXNCR(F,63);                                                 01332000
    F ~ INDEXNCR(F, 6);                                                 01333000
    N ~ N - LINE;                                                       01334000
         END;                                                           01335000
IF N ! 0 THEN                                                           01336000
    FORMATTER(F,N,TRUE);                                                01337000
R ~ LINE - N;                                                           01338000
IF TYPETOG THEN                                                         01339000
    BEGIN                                                               01340000
FORMATTER(LEQUALS,3,R < 3);                                             01341000
R ~ R - 3;                                                              01342000
    END;                                                                01343000
    REEL ~ X.[3:6] ! 0;                                                 01344000
    WRITE (SCRATCH [*], SUPERFORMAT [REAL (REEL)], X);                  01345000
    N ~ IF REEL THEN 18 ELSE 12;                                        01346000
    FORMATTER(S,N,R<N);                                                 01347000
    FORMATTER(LXON,1,TRUE);                                             01348000
         END;                                                           01349000
    END SIMPLEOUTPUT;                                                   01350000
PROCEDURE SET;                                                          01351000
COMMENT DOCUMENT                                                        01352000
              THE SET PROCEDURE IS PRIMARILY CONCERNED WITH LEFT-PART   01353000
         ANALYSIS.  THE INPUT "=" IS CONVERTED TO A ":=".  EVALUATOR AND01354000
         SIMPLEOUTPUT ARE CALLED TO HANDLE THE EXPRESSION AND ERRORS.   01355000
         THE CALL ON DEBUGGER IS FOR THE BENEFIT OF CARD INPUT.  THE    01356000
         PROCEDURES SET, TYPE AND TYPELIST ARE ALL DONE UNTIL A         01357000
         TERMINATOR (DEFINED AS "~") APPEARS IN ACCUM1.  EXPRESSION IS  01358000
;%       DONE UNTIL TERMINATORS (DEFINED AS ";" OR "~") APPEAR IN ACCUM101359000
    BEGIN REAL DUMMY;                                                   01360000
STEPI ~ STACKI;                                                         01361000
FIRSTOUT ~ NCR;                                                         01362000
DO       BEGIN                                                          01363000
    PRTI ~ STACKI;                                                      01364000
    FLAGT ~ FALSE;                                                      01365000
    EVALUATOR;                                                          01366000
         END UNTIL TERMINATOR OR THENSTOP OR FLAG;                      01367000
    END SET;                                                            01368000
PROCEDURE TYPEVALUES;                                                   01369000
    BEGIN                                                               01370000
INTEGER STREAM PROCEDURE MKABS(N);                                      01371000
    BEGIN DI ~ N; MKABS ~ DI END OF MKABS;                              01372000
INTEGER STREAM PROCEDURE INDEXNCR(N,I); VALUE N,I;                      01373000
    BEGIN DI ~ N; DI ~ DI + I; INDEXNCR ~ DI END OF INDEXNCR;           01374000
DEFINE   IDLOC = USERPRT[IDBASE + PRTI]#;                               01375000
LOCALPRTI ~ PRTI;                                                       01376000
FIRSTOUT ~ INDEXNCR (MKABS(LISTVAR), 3);                                01377000
LASTOUT ~ INDEXNCR (FIRSTOUT, 5);                                       01378000
     IF NEXTPRTI { 1 THEN SIMPLEOUTPUT ELSE                             01379000
FOR PRTI ~ 1 STEP 1 UNTIL NEXTPRTI - 1 DO                               01380000
    IF IDLOC . [10:2] = 1 THEN                                          01381000
         BEGIN                                                          01382000
    LISTVAR ~ IDLOC;                                                    01383000
    RESULTI ~ 1;                                                        01384000
    RESULTS [0] ~ PRTVAL;                                               01385000
    SIMPLEOUTPUT;                                                       01386000
         END;                                                           01387000
PRTI ~ LOCALPRTI;                                                       01388000
    END TYPEING ALL CURRENTLY ASSIGNED VALUES;                          01389000
PROCEDURE TYPELIST;                                                     01390000
    BEGIN                                                               01391000
LABEL EXIT;                                                             01392000
INTEGER S, SN;                                                          01393000
IF ONEFORM THEN BEGIN FORMI ~ NUMBER - 1; S ~ SCAN END;                 01394000
IF FORMI < 0 OR FORMI } MAXFORMS THEN                                   01395000
    BEGIN                                                               01396000
         FLAGIT(STMTERR,8);                                             01397000
         GO TO EXIT;                                                    01398000
    END;                                                                01399000
IF NOT(ALLVALUES OR ONEFORM) THEN                                       01400000
DO       BEGIN                                                          01401000
    EXPRESSION;                                                         01402000
    STEPN ~ PRTI;                                                       01403000
    IF FORMTOG THEN FORMI ~ NUMBER - 1;                                 01404000
    IF FORMI < 0 OR FORMI } MAXFORMS THEN                               01405000
         BEGIN                                                          01406000
              FLAGIT(STMTERR,8);                                        01407000
              GO TO EXIT;                                               01408000
         END;                                                           01409000
    IF FORMTOG AND IFTOG THEN S ~ SCAN;                                 01410000
         END UNTIL TERMINATOR OR FORMTOG OR FLAG OR THENSTOP;           01411000
SIMPLEOUTPUT;                                                           01412000
STACKI ~ PRTI;                                                          01413000
EXIT:                                                                   01414000
    END PLACING IDENTIFIERS TO BE TYPED IN STACK;                       01415000
PROCEDURE TYPE;                                                         01416000
COMMENT DOCUMENT                                                        01417000
              TYPEVALUES HANDLES THE STATEMENT "TYPE ALL VALUES"  BY    01418000
         GETTING AN IDENTIFIER AND ITS ASSOCIATED VALUE AND CALLING     01419000
         SIMPLEOUTPUT.                                                  01420000
              TYPELIST HANDLES THE PROGRAMMED TYPE STATEMENT BY PLACING 01421000
         THE IDENTIFIERS IN THE CODE STACK.                             01422000
              THE PROCEDURE TYPE SERVES AS A TRAFFIC DIRECTOR FOR ALL   01423000
         TYPE STATEMENTS AND HANDLES THE CASE WHERE AN EXPRESSION AND   01424000
         ITS RESULT ARE TO BE TYPED.  THE DEBUGGER IS FOR THE BENEFIT OF01425000
         CARD INPUT.                                                    01426000
                                                                       ;01427000
    BEGIN                                                               01428000
INTEGER S;                                                              01429000
PRTI ~ STEPI ~ STACKI;                                                  01430000
IF PROGRAMTOG THEN TYPELIST ELSE IF ALLVALUES THEN TYPEVALUES ELSE      01431000
DO       BEGIN                                                          01432000
    FIRSTOUT ~ NCR;                                                     01433000
    PRTI ~ STACKI;                                                      01434000
    EVALUATOR;                                                          01435000
    SIMPLEOUTPUT;                                                       01436000
         END UNTIL TERMINATOR OR FLAG;                                  01437000
    END OF TYPE;                                                        01438000
PROCEDURE DISCONNECTED(I); VALUE I; INTEGER I;                          01439000
    BEGIN                                                               01440000
STREAM PROCEDURE MOVEWORDS(SORC,DEST,NOWDS); VALUE NOWDS;               01441000
    BEGIN SI ~ SORC; DI ~ DEST; DS ~ NOWDS WDS END OF MOVEWORDS;        01442000
STREAM PROCEDURE ZEROOUT (WHO);                                         01443000
    BEGIN DI ~ WHO; DS ~ 8 LIT "0"; SI ~ WHO; DS ~ 29 WDS END ZEROOUT;  01444000
USER ~ I;                                                               01445000
RELEASE(STATOS[I]);                                                     01446000
LOGGEDIN[I] ~ 0;                                                        01447000
CONTROLS[I] ~ 0;                                                        01448000
ONEPART ~ FALSE;                                                        01449000
ONESTEP ~ FALSE;                                                        01450000
ERASE;                                                                  01451000
TOTALUSERS ~ TOTALUSERS - 1;                                            01452000
DONE ~ TOTALUSERS = 0;                                                  01453000
TINFO[I] ~ 0;                                                           01454000
STATOS[I] ~ 0;                                                          01455000
IF NOT DONE THEN                                                        01456000
    BEGIN                                                               01457000
         ZEROOUT(THREECARDS[0,0]);                                      01458000
         MOVEWORDS(LOGGEDIN[0],THREECARDS[0,0],USERS + 1);              01459000
         WRITE(STORAGE[SZ | USERS + 1],30,THREECARDS[0,*]);             01460000
    END;                                                                01461000
    END OF DISCONNECTED;                                                01462000
PROCEDURE TANKWRITER;                                                   01463000
    BEGIN                                                               01464000
STREAM PROCEDURE MOVEWORDS(SORC,DEST,NOWRDS); VALUE NOWRDS;             01465000
    BEGIN SI ~ SORC; DI ~ DEST; DS ~ NOWRDS WDS END OF MOVEWORDS;       01466000
INTEGER ROWI,TANKI,ROW,I,J,K;                                           01467000
REAL STATWRD;                                                           01468000
LABEL NEXT,NOGO,STPOUT;                                                 01469000
LABEL CLEAROUT;                                                         01470000
FOR I ~ 0 STEP 1 UNTIL USERS DO                                         01471000
    BEGIN                                                               01472000
      IF STATOS[I].[2:1] = 0 THEN GO TO NEXT;                           01473000
      J ~ STATOS[I].[30:9];                                             01474000
      K ~ STATOS[I].[39:9];                                             01475000
      ROWI  ~ TINFO[I].[ 8:8];                                          01476000
      TANKI ~ TINFO[I].[16:8];                                          01477000
      ROW ~ MAXROWS | I + ROWI;                                         01478000
      DATAOUT[0] ~ 0 & STATOS[I][9:9:9];                                01479000
      WHILE J > K DO                                                    01480000
         BEGIN                                                          01481000
              MOVEWORDS(TANK[ROW,TANKI],DATAOUT[1],4);                  01482000
              WRITE(DCOMOUT[I](DATAOUT[0],0),5,DATAOUT[*])[NOGO:STPOUT];01483000
              K ~ K + 1;                                                01484000
              TANKI ~ TANKI + 4;                                        01485000
              IF TANKI > 96 THEN                                        01486000
                        BEGIN                                           01487000
                   ROWI ~ IF ROWI = MAXROWS THEN 0 ELSE ROWI + 1;       01488000
                   TANKI ~ 0;                                           01489000
                   ROW ~ MAXROWS | I + ROWI;                            01490000
                        END;                                            01491000
         END;                                                           01492000
      IF TINFO[I].[40:8] ! 0 THEN                                       01493000
         BEGIN                                                          01494000
              MOVEWORDS(TANK[ROW,TANKI],DATAOUT[1],4);                  01495000
              WRITE(DCOMOUT[I](DATAOUT[0],0),5,DATAOUT[*])[NOGO:STPOUT];01496000
         END;                                                           01497000
      GO TO CLEAROUT;                                                   01498000
STPOUT:  STATOS[I].[5:1] ~ 0;                                           01499000
CLEAROUT:                                                               01500000
      STATOS[I].[2:1] ~ 0;                                              01501000
      STATOS[I].[30:18] ~ 0;                                            01502000
     TINFO[I] ~ 0;                                                      01503000
      GO TO NEXT;                                                       01504000
NOGO:                                                                   01505000
      TINFO[I].[ 8:8] ~ ROWI;                                           01506000
      TINFO[I].[16:8] ~ TANKI;                                          01507000
      STATOS[I].[39:9] ~ K;                                             01508000
      STATWRD ~ STATUS(DATAOUT[0],0);                                   01509000
      IF STATWRD.[24:1] = 1 OR                                          01510000
         STATWRD.[28:1] = 1 OR                                          01511000
         STATWRD.[29:1] = 1 THEN GO TO NEXT;                            01512000
      IF STATWRD.[23:2] = 3 OR                                          01513000
         STATUS(DATAOUT[0],1).[30:1] = 1 THEN DISCONNECTED(I);          01514000
NEXT:                                                                   01515000
    END;                                                                01516000
    END OF TANKWRITER;                                                  01517000
INTEGER PROCEDURE WHOISIT (STA);                                        01518000
    VALUE STA;                                                          01519000
    REAL  STA;                                                          01520000
    BEGIN                                                               01521000
STREAM PROCEDURE MOVEWORDS (SORC,DEST,NOWRDS); VALUE NOWRDS;            01522000
    BEGIN SI ~ SORC; DI ~ DEST; DS ~ NOWRDS WDS END OF MOVEWORDS;       01523000
STREAM PROCEDURE ZEROOUT (WHO);                                         01524000
    BEGIN DI ~ WHO; DS ~ 8 LIT "0"; SI ~ WHO; DS ~ 29 WDS END ZEROOUT;  01525000
INTEGER I;                                                              01526000
REAL USERID;                                                            01527000
LABEL SETUSER,WRITELOG,FULL,EXIT;                                       01528000
IF ABORTTOG THEN   % RESTART CONDITION EXISTS                           01529000
    BEGIN                                                               01530000
         IF SECURETOG THEN   % OPERATING UNDER FILE-SECURITY SYSTEM     01531000
              BEGIN                                                     01532000
                   USERID ~ STATUS(STA);                                01533000
                   FOR I ~ 1 STEP 1 UNTIL USERS DO                      01534000
                        IF LOGGEDIN[I] = USERID THEN GO TO SETUSER;     01535000
              END ELSE                                                  01536000
                   FOR I ~ 1 STEP 1 UNTIL USERS DO                      01537000
                        IF LOGGEDIN[I].[9:9] = STA.[9:9] THEN           01538000
                             GO TO SETUSER;                             01539000
    END;      COMMENT  THE PRECEDING CODE HAS ASSIGNED THE PREVIOUS     01540000
                       USER INDEX BUT CAN ONLY BE POSITIVE IF THE       01541000
                       SYSTEM IS OPERATING UNDER FILE-SECURITY;         01542000
IF SECURETOG THEN                                                       01543000
    BEGIN                                                               01544000
         USERID ~ STATUS(STA);                                          01545000
         FOR I ~ 1 STEP 1 UNTIL USERS DO                                01546000
              BEGIN                                                     01547000
                   IF LOGGEDIN[I] = 0 THEN                              01548000
                        BEGIN                                           01549000
                             LOGGEDIN[I] ~ USERID;                      01550000
                             GO TO WRITELOG;                            01551000
                        END                                             01552000
              END                                                       01553000
    END ELSE                                                            01554000
    BEGIN                                                               01555000
         FOR I ~ 1 STEP 1 UNTIL USERS DO                                01556000
              BEGIN                                                     01557000
                   IF LOGGEDIN[I] = 0 THEN                              01558000
                        BEGIN                                           01559000
                             LOGGEDIN[I] ~ 0 & STA[9:9:9];              01560000
                             GO TO WRITELOG;                            01561000
                        END                                             01562000
              END                                                       01563000
    END;                                                                01564000
FULL:    COMMENT ARRIVAL HERE MEANS THE USER TABLE IS FULL;             01565000
         WHOISIT ~ 0;                                                   01566000
         USER ~ 0;                                                      01567000
         STATOS[0] ~ 0 & STA[9:9:9];                                    01568000
         FLAGIT(OTHER,10);                                              01569000
         SIMPLEOUTPUT;                                                  01570000
         TANKWRITER;                                                    01571000
         GO TO EXIT;                                                    01572000
WRITELOG:                                                               01573000
         ZEROOUT(THREECARDS[0,0]);                                      01574000
         MOVEWORDS(LOGGEDIN[0],THREECARDS[0,0],USERS+1);                01575000
         WRITE(STORAGE[SZ|USERS+1],30,THREECARDS[0,*]);                 01576000
SETUSER:                                                                01577000
         CONTROLS[I] ~ TIME(1);                                         01578000
         TOTALUSERS ~ TOTALUSERS + 1;                                   01579000
         THREECARDS[I,30] ~ 0;                                          01580000
         THREECARDS[I,31] ~ 0;                                          01581000
         STATOS[I] ~ 0 & STA[9:9:9];                                    01582000
         WHOISIT ~ I;                                                   01583000
EXIT:                                                                   01584000
    END OF WHOISIT;                                                     01585000
PROCEDURE CHECKSTATUS;                                                  01586000
    BEGIN                                                               01587000
INTEGER I;                                                              01588000
REAL STATWRD;                                                           01589000
LABEL NEXT;                                                             01590000
    FOR I ~ 1 STEP 1 UNTIL USERS DO                                     01591000
              BEGIN                                                     01592000
         IF LOGGEDIN[I] ! 0 AND STATOS[I] ! 0 THEN   % THIS IS A USER   01593000
                   BEGIN                                                01594000
              STATWRD ~ STATUS(STATOS[I],0);                            01595000
              IF STATWRD.[23:8] = 32 THEN GO TO NEXT;  % NO ERRORS      01596000
              IF STATWRD.[27:1] = 1 THEN   % WRITE READY SO CLEAR IT    01597000
                        BEGIN                                           01598000
                   USER ~ I;                                            01599000
                   FORMATTER(LGM,1,FALSE);                              01600000
                   GO TO NEXT;                                          01601000
                        END OF WRITE READY;                             01602000
              IF STATWRD.[28:1] = 1 THEN   % BUFFER OVERFLOW            01603000
                        BEGIN                                           01604000
                   USER ~ I;                                            01605000
                   FLAGIT(OTHER,11);                                    01606000
                   SIMPLEOUTPUT;                                        01607000
                   STATOS[USER] ~ STATOS[USER] & 0[1:47:1] & 0[24:42:6];01608000
                   GO TO NEXT;                                          01609000
                        END OF BUFFER OVERFLOW;                         01610000
              IF STATWRD.[23:2] = 3 OR STATUS(STATOS[I],1).[30:1] = 1   01611000
              THEN DISCONNECTED(I);                                     01612000
                   END;                                                 01613000
NEXT:         END OF FOR LOOP TO CHECK ALL STATIONS ATTACHED;           01614000
    END OF CHECKSTATUS;                                                 01615000
PROCEDURE DODO (DOI); VALUE DOI; INTEGER DOI;     FORWARD;              01616000
PROCEDURE FILLREQUEST;                                                  01617000
         BEGIN                                                          01618000
STREAM PROCEDURE MOVEWORDS(SORC,DEST,N);  VALUE N;                      01619000
    BEGIN SI ~ SORC; DI ~ DEST; DS ~ N WDS END OF MOVEWORDS;            01620000
STREAM PROCEDURE MOVECHARS(SORC,DEST,N,SKP);  VALUE N,SKP;              01621000
    BEGIN SI ~ SORC; DI ~ DEST; DI ~ DI + SKP; DS ~ N CHR END;          01622000
INTEGER STREAM PROCEDURE HOWBIG(SORC,M,N);  VALUE M,N;                  01623000
    BEGIN                                                               01624000
LABEL OK;                                                               01625000
    SI ~ SORC; TALLY ~ 0;                                               01626000
    M(63(IF SC = "&" THEN JUMP OUT 2 TO OK; TALLY~TALLY+1; SI~SI+1));   01627000
    N(IF SC = "&" THEN JUMP OUT 1 TO OK; TALLY~TALLY+1; SI~SI+1);       01628000
    TALLY ~ 1;                                                          01629000
OK: HOWBIG ~ TALLY;                                                     01630000
    END OF HOWBIG;                                                      01631000
INTEGER STREAM PROCEDURE MSGSIZE(SORC,M,N);  VALUE M,N;                 01632000
    BEGIN                                                               01633000
LABEL FINIS;                                                            01634000
    SI ~ SORC; TALLY ~ 1;                                               01635000
    M(63(IF SC = "~" THEN JUMP OUT 2 TO FINIS;TALLY~TALLY+1;SI~SI+1));  01636000
    N(IF SC = "~" THEN JUMP OUT 1 TO FINIS; TALLY~TALLY+1; SI~SI+1);    01637000
FINIS: MSGSIZE ~ TALLY;                                                 01638000
    END OF MSGSIZE;                                                     01639000
STREAM PROCEDURE AMPERSANDS(DEST,N);  VALUE N;                          01640000
    BEGIN DI ~ DEST; DS ~ 8 LIT "&"; SI ~ DEST; DS ~ N WDS END;         01641000
PROCEDURE GENERRMSG;                                                    01642000
         BEGIN                                                          01643000
    STATOS[USER] ~ STATOS[USER] & 0[1:47:1] & 0[24:42:6];               01644000
    FLAGIT(STMTERR,2);                                                  01645000
    SIMPLEOUTPUT;                                                       01646000
         END OF GENERRMSG;                                              01647000
STREAM PROCEDURE CHKPRBIT (A,B);                                        01647100
    BEGIN SI ~ A; DI ~ B END;                                           01647200
INTEGER WT,I,BUFCNT,NOXFRD,LASTMSG,NK;                                  01648000
REAL STATWORD;                                                          01649000
OWN INTEGER K;                                                          01650000
LABEL GENREAD,RECYCLE,NONE,ERR1,EXIT,NOIN,DATACHK,ERR2;                 01651000
BOOLEAN PENDING;                                                        01652000
    USER ~ 0;                                                           01652100
    IF TOTALUSERS = 0 THEN GO TO GENREAD;                               01653000
RECYCLE:                                                                01654000
    WT ~ IF PENDING THEN 0 ELSE 1;                                      01655000
GENREAD:                                                                01656000
    AMPERSANDS(DATA[0],BUFSIZ);                                         01657000
    READ(NEWUSER(0,0),BUFSIZ,DATA[*])[NONE:NONE];                       01658000
    STATWORD ~ DATA[0];                                                 01659000
    USER ~ WHOISIT(STATWORD);                                           01660000
    IF USER = 0 THEN GO TO NONE;                                        01661000
    SEEK(DCOMIN(STATWORD));                                             01662000
    WHEN(5);                                                            01662100
    IF STATWORD.[25:1] = 1 THEN   % NO GROUP MARK RECEIVED              01663000
              BEGIN                                                     01664000
         BUFCNT ~ HOWBIG(DATA[1],DIV63,MOD63);                          01665000
         IF BUFCNT = 32 THEN BUFCNT ~ 28;                               01666000
         IF BUFCNT > 72 OR BUFCNT = 1 THEN   % MESSAGE TOO LARGE        01667000
                   BEGIN                                                01668000
ERR1:         GENERRMSG;                                                01669000
              GO TO NONE;                                               01670000
                   END;                                                 01671000
         MOVECHARS(DATA[1],TEMPIN[USER,1],BUFCNT,0);                    01672000
         STATOS[USER] ~ STATOS[USER] & 1[1:47:1] & BUFCNT[18:42:6]      01673000
                        & BUFCNT[24:42:6];                              01674000
         GO TO NONE;                                                    01675000
              END OF NO GROUP MARK LOGIC;                               01676000
    IF MSGSIZE(DATA[1],DIV63,MOD63) > 72 THEN GO TO ERR1;               01677000
    INPUT[0] ~ USER;                                                    01678000
    MOVEWORDS(DATA[1],INPUT[1],IF BUFSIZ > 9 THEN 9 ELSE BUFSIZ);       01679000
    GO TO EXIT;                                                         01680000
NONE:                                                                   01681000
    USER ~ 0;                                                           01681100
    IF TOTALUSERS = 0 THEN GO TO GENREAD;                               01682000
    AMPERSANDS(DATA[0],BUFSIZ);                                         01683000
    READ(DCOMIN(0,WT),BUFSIZ,DATA[*])[NOIN:NOIN];                       01684000
    STATWORD ~ DATA[0];                                                 01685000
    FOR I ~ 1 STEP 1 UNTIL USERS DO                                     01686000
              BEGIN                                                     01687000
         IF STATWORD.[9:9] = STATOS[I].[9:9] THEN   % I IS THE USER     01688000
                   BEGIN                                                01689000
              USER ~ I;                                                 01690000
              GO TO DATACHK;                                            01691000
                   END                                                  01692000
              END;                                                      01693000
    GO TO RECYCLE;   % MESSAGE WAS NOT FROM LOGGEDIN USER SO IGNORE IT  01694000
DATACHK:                                                                01695000
    IF STATWORD.[25:1] = 1 THEN   % NO GROUP MARK RECEIVED              01696000
              BEGIN                                                     01697000
         IF STATOS[USER].[18:6] = 0 THEN   % BUFFER SIZE UNKNOWN        01698000
                   BEGIN                                                01699000
              BUFCNT ~ HOWBIG(DATA[1],DIV63,MOD63);                     01700000
              IF BUFCNT = 32 THEN BUFCNT ~ 28;                          01701000
              IF BUFCNT > 72 OR BUFCNT = 1 THEN   % MESSAGE TOO LARGE   01702000
                        BEGIN                                           01703000
ERR2:              GENERRMSG;                                           01704000
                   GO TO RECYCLE;                                       01705000
                        END;                                            01706000
              MOVECHARS(DATA[1],TEMPIN[USER,1],BUFCNT,0);               01707000
              STATOS[USER] ~ STATOS[USER] & 1[1:47:1] & BUFCNT[18:42:6] 01708000
                             & BUFCNT[24:42:6];                         01709000
              GO TO RECYCLE;                                            01710000
                   END ELSE                                             01711000
                   BEGIN                                                01712000
              IF STATOS[USER].[24:6] = 56 THEN GO TO ERR2;              01713000
              BUFCNT ~ STATOS[USER].[18:6];                             01714000
              NOXFRD ~ STATOS[USER].[24:6];                             01715000
              MOVECHARS(DATA[1],TEMPIN[USER,1],BUFCNT,NOXFRD);          01716000
              STATOS[USER].[1:1] ~ 1;                                   01717000
              STATOS[USER].[24:6] ~ BUFCNT + NOXFRD;                    01718000
              GO TO RECYCLE;                                            01719000
                   END                                                  01720000
              END OF NO GROUP MARK LOGIC;                               01721000
    IF STATOS[USER].[18:6] = 0 THEN                                     01722000
         IF MSGSIZE(DATA[1],DIV63,MOD63) > 72 THEN GO TO ERR2;          01723000
    IF STATOS[USER].[1:1] = 0 THEN                                      01724000
              BEGIN                                                     01725000
         INPUT[0] ~ USER;                                               01726000
         MOVEWORDS(DATA[1],INPUT[1],IF BUFSIZ > 9 THEN 9 ELSE BUFSIZ);  01727000
         GO TO EXIT;                                                    01728000
              END;                                                      01729000
COMMENT ARRIVAL HERE MEANS THAT THE TERMINAL BUFFER LOAD WAS RECEIVED;  01730000
    BUFCNT ~ STATOS[USER].[18:6];                                       01731000
    NOXFRD ~ STATOS[USER].[24:6];                                       01732000
    LASTMSG ~ MSGSIZE(DATA[1],DIV63,MOD63);                             01733000
    IF NOXFRD + LASTMSG > 72 THEN GO TO ERR2;                           01734000
    MOVECHARS(DATA[1],TEMPIN[USER,1],LASTMSG,NOXFRD);                   01735000
    INPUT[0] ~ USER;                                                    01736000
    MOVEWORDS(TEMPIN[USER,1],INPUT[1],9);                               01737000
    STATOS[USER] ~ STATOS[USER] & 0[1:47:1] & 0[24:42:6];               01738000
    GO TO EXIT;                                                         01739000
NOIN:                                                                   01740000
    CHECKSTATUS;                                                        01741000
    IF DONE THEN GO TO EXIT;                                            01742000
    TANKWRITER;    % SEE IF ANY USER HAS DATA TO OUTPUT                 01743000
    PENDING ~ FALSE;                                                    01744000
         TIGHTLOOPCHECK ~ 0;                                            01745000
    FOR I ~ K + 1 STEP 1 UNTIL USERS DO                                 01746000
              BEGIN                                                     01747000
         IF STATOS[I].[5:1] = 1 THEN                                    01748000
                   BEGIN                                                01749000
              DOING ~ TRUE;                                             01750000
              PENDING ~ TRUE;                                           01751000
              USER ~ I;                                                 01752000
              IF LASTUSER ! USER AND USER ! 0 THEN                      01752100
                        BEGIN                                           01752200
                   IF LASTUSER ! 0 THEN                                 01752210
                        BEGIN                                           01752220
                   WRITE(STACKFILE[LASTUSER]);                          01752300
                   WRITE(PRTFILE[LASTUSER]);                            01752400
                        END;                                            01752410
                   READ(STACKFILE[USER]);                               01752500
                   READ(PRTFILE[USER]);                                 01752600
                   LASTUSER ~ USER;                                     01752700
                        END;                                            01752800
              CHKPRBIT(STACKFILE(0),PRTFILE(0));                        01752900
              DODO(0);                                                  01753000
              ALLSTEPS ~ ALLVALUES ~ ALLTOGS ~ FALSE;                   01753100
              SETTOG ~ TYPETOG ~ FORMTOG ~ IFTOG ~ DOTOG ~ FALSE;       01753200
              IF RETURNSTK THEN                                         01754000
                        BEGIN                                           01755000
                   RETURNSTK ~ FALSE;                                   01756000
                   STATOS[USER].[5:1] ~ 0;                              01757000
                   USERPRT[DOBASE] ~ 0;                                 01758000
                        END;                                            01759000
              DOING ~ FALSE;                                            01760000
              IF STEPFLAG THEN BEGIN SIMPLEOUTPUT;STEPFLAG~FALSE END;   01761000
              K ~ K + 1;                                                01762000
              FOR NK ~ K + 1 STEP 1 UNTIL USERS DO                      01763000
                   IF STATOS[NK].[5:1] = 1 THEN GO TO RECYCLE           01764000
                        ELSE K ~ K + 1;                                 01765000
              K ~ IF K + 1 } USERS THEN 0 ELSE K;                       01766000
              GO TO RECYCLE;                                            01767000
                   END                                                  01768000
              END OF DODO LOOP CHECK;                                   01769000
    GO TO RECYCLE;                                                      01770000
EXIT:                                                                   01771000
    END OF FILLREQUEST;                                                 01772000
PROCEDURE INITIALIZE;                                                   01773000
COMMENT DOCUMENT                                                        01774000
             THE MAIN FUNCTIONS OF THE INITIALIZE PROCEDURE ARE (1) FILL01775000
         BUFFSIZE ARRAY WITH THE NUMBER OF CHARACTERS THAT ARE AVAILABLE01776000
         IN TERMINAL UNITS, (2) MAKE INITIAL CALL ON FILLREQUEST AND    01777000
         (3) INITIALIZE THE RESERVEDWORDS ARRAY.  THE FOLLOWING TABLE   01778000
         SHOWS THE PRIORITY [1:3], OPERATION CODE [4:5] AND THE         01779000
         CHARACTERS THAT ARE FILLED TO ACHIEVE THE PROPER BIT           01780000
         CONFIGURATION.                                                 01781000
              OPERATOR       PRIORITY       OPCODE         FILL         01782000
;%               ;               0             0            00          01783000
COMMENT DOCUMENT                                                        01784000
                 ~               0             0            00          01785000
                 :=              0             0            00          01786000
                 (               0             0            00          01787000
                 )               0             0            00          01788000
                 +               1             1            48          01789000
                 -               1             2            4+          01790000
                 |               2             3            8H          01791000
                 /               2             4            8|          01792000
                 DIV             2             5            8Q          01793000
                 MOD             2             6            8   *       01794000
                 *               3             7                **      01795000
                 SQRT            4            11            AH          01796000
                 SIN             4            13            AQ          01797000
                 ARCTAN          4            15            AY          01798000
                 COS             4            14            A           01799000
                 EXP             4            17            B8          01800000
                 LN              4            16            B0          01801000
                 SIGN            4            19            BH          01802000
                 IP              4            12            A|          01803000
                 ABS             4            18            B+          01804000
                 MINUS           4            22            B   ***     01805000
         *    AN EMPTY COLUMN UNDER FILL IS A BLANK.                    01806000
         **   THE CHARACTERS FOR EXPONENTIATION ARE QUESTION-MARK AND Y.01807000
         ***  THIS IS THE UNARY MINUS OPERATOR.                         01808000
;                                                                       01809000
    BEGIN                                                               01810000
STREAM PROCEDURE MOVEWORDS(SORC,DEST,NOWRDS); VALUE NOWRDS;             01811000
    BEGIN SI ~ SORC; DI ~ DEST; DS ~ NOWRDS WDS END OF MOVEWORDS;       01812000
INTEGER STREAM PROCEDURE MKABS(N);                                      01813000
    BEGIN DI ~ N; MKABS ~ DI END OF MKABS;                              01814000
INTEGER STREAM PROCEDURE INDEXNCR(N,I); VALUE N,I;                      01815000
    BEGIN DI ~ N; DI ~ DI + I; INDEXNCR ~ DI END OF INDEXNCR;           01816000
STREAM PROCEDURE ZEROOUT(WHO,N); VALUE N;                               01817000
    BEGIN DI ~ WHO; DS ~ 8 LIT "0"; SI ~ WHO; DS ~ N WDS END ZEROOUT;   01818000
STREAM PROCEDURE SETDESCADDR (DMY,STK,PRT);                             01818010
    BEGIN                                                               01818020
         LOCAL TSTK,TPRT,TA1,TA2;                                       01818030
         DI ~ LOC TSTK; SI ~ DMY; SI ~ SI + 8; DS ~ 1 WDS;              01818040
         DI ~ LOC TPRT; DS ~ 1 WDS;                                     01818050
         SI ~ STK; TA1 ~ SI;                                            01818060
         SI ~ PRT; TA2 ~ SI;                                            01818070
         DI ~ LOC TSTK; SKIP 2 DB; DS ~ 1 SET; DI ~ DI + 4; SKIP 3 DB;  01818080
         SI ~ LOC TA1; SI ~ SI + 5; SKIP 3 SB;                          01818090
         3(IF SB THEN DS ~ 1 SET ELSE DS ~ 1 RESET; SKIP 1 SB);         01818100
         DS ~ 2 CHR; SI ~ LOC TSTK; DI ~ DMY; DI ~ DI + 8; DS ~ 1 WDS;  01818110
         DI ~ LOC TPRT; SKIP 2 DB; DS ~ 1 SET; DI ~ DI + 4; SKIP 3 DB;  01818120
         SI ~ LOC TA2; SI ~ SI + 5; SKIP 3 SB;                          01818130
         3(IF SB THEN DS ~ 1 SET ELSE DS ~ 1 RESET; SKIP 1 SB);         01818140
         DS ~ 2 CHR; SI ~ LOC TPRT; DI ~ DMY; DI ~ DI + 16; DS ~ 1 WDS; 01818150
    END OF SETTING DESCRIPTORS TO A FILE ADDRESS;                       01818160
INTEGER I;                                                              01819000
ARRAY SETBUF [0:1019];                                                  01819100
BOOLEAN NOFILE;                                                         01820000
FILE SECURE DISK SERIAL "REMOTE" "USERS" (1,30);                        01821000
SCRATCH [0] ~ 0;                                                        01822000
SCRATCHO ~ MKABS (SCRATCH [0]);                                         01823000
LWORD ~ INDEXNCR (MKABS(WORD), 2);                                      01824000
CRLF ~ "{!";  LCRLF ~ INDEXNCR ( MKABS (CRLF ), 6);                     01825000
CR   ~ "{";   LCR   ~ INDEXNCR ( MKABS ( CR  ), 7);                     01826000
LFD  ~ "!";   LLFD  ~ INDEXNCR ( MKABS ( LFD ), 7);                     01827000
XON  ~ ">";   LXON  ~ INDEXNCR ( MKABS ( XON ), 7);                     01828000
GM     ~ "  ~";    LGM     ~ INDEXNCR (MKABS (   GM  ), 7);             01829000
EQUALS ~ " = ";    LEQUALS ~ INDEXNCR (MKABS ( EQUALS), 5);             01830000
BLANKS ~ "      "; LBLANK ~ INDEXNCR(MKABS(BLANKS), 2);                 01831000
COMMA ~ ",";       LCOMMA ~ INDEXNCR (MKABS (COMMA), 7);                01832000
LNOW ~ INDEXNCR (MKABS (NOW), 7);                                       01833000
LNEXT ~ INDEXNCR (MKABS (NEXT), 7);                                     01834000
MARK ~ REAL (NOT FALSE);                                                01835000
MARKOP ~ 0 & MARK [1:1:8];                                              01836000
MARKID ~ 0 & MARK [1:1:9];                                              01837000
FILL PHRASES [0,*] WITH 4,4,5,6,7,8,9,10,11,12,13,14,15,16;             01838000
FILL PHRASES [1,*] WITH 17,17,17,17,17,17,17,17,18,19,20,21,22,23,24,25,01839000
                        26,27,28,29,30;                                 01840000
FILL PHRASES [2,*] WITH 30,97,96, 0, 0, 0, 0, 0, 0, 0, 0,               01841000
                        31,32,98, 0, 0, 0, 0, 0, 0, 0, 0,               01842000
                        33,34,35,99, 0, 0, 0, 0, 0, 0, 0,               01843000
                        36,37,38,39,100,0, 0, 0, 0, 0, 0,               01844000
                        40,41,42,43,44,101,0, 0, 0, 0, 0,               01845000
                        45,46,47,48,49,50,102,0, 0, 0, 0,               01846000
                        51,52,53,54,55,56,57,103,0, 0, 0,               01847000
                        58,59,60,61,62,63,64,65,104,0, 0,               01848000
                        66,67,68,69,70,71,72,73,74,105,0,               01849000
                        75,76,77,78,79,80,81,82,83,84,106,              01850000
                        85,86,87,88,89,90,91,92,93,94,95;               01851000
FILL RESERVEDWORDS [*] WITH                                             01852000
         "511+    ","521-    ","631|    ","641/    ","8@4SQRT "         01853000
    ,    "8:3SIN  ","8>3COS  ","8}6ARCTA","653DIV  ","663MOD  "         01854000
    ,    "8 2IP   ","F 2TO   ","F 2IF   ","8+2LN   ","8A3EXP  "         01855000
    ,    "8C4SIGN ","F 4TYPE ","F 3SET  ","F 5ERASE","F 4PART "         01856000
    ,    "2G3AND  ","1H2OR   ","001(    ","001)    ","4&3LEQ  "         01857000
    ,    "4[3NEQ  ","4(3GEQ  ","4.3EQU  ","4<3LSS  ","4~3GTR  "         01858000
    ,    "F 4FORM ","771*    ","9D1[    ","001]    ","F 2DO   "         01859000
    ,    "F 4QUIT ","001;    ","001~    ","8B3ABS  ","002:=   "         01860000
    ,    "#E1,    ","8F5MINUS","4.3EQL  ","3I3NOT  ","F 5TEACH"         01861000
    ,    "F 4STOP ","F 4SAVE ","F 6RECAL","F 4LIST ","F 4STEP "         01861100
    ;                                                                   01862000
COMMENT            THE "F" IN HIGH ORDER IS TO INHIBIT FLAG BITS;       01863000
RESERVEDWORDS[10].[6:6] ~ 12;   % SET THE IP OPERATOR VALUE             01864000
DIV63 ~ BUFSIZ | 8 DIV 63;                                              01865000
MOD63 ~ BUFSIZ | 8 MOD 63;                                              01866000
SEARCH(STORAGE,FILECHECK[*]);                                           01867000
NOFILE ~ TRUE;                                                          01868000
IF FILECHECK[0] > 0 THEN                                                01869000
    BEGIN                                                               01870000
         NOFILE ~ FALSE;                                                01871000
         READ(STORAGE[SZ | USERS + 1],30,THREECARDS[0,*]);              01872000
         MOVEWORDS(THREECARDS[0,0],LOGGEDIN[0],USERS + 1);              01873000
         ABORTTOG ~ TRUE;                                               01874000
    END;                                                                01875000
USER ~ 0;                                                               01876000
REPLACE ~ SEARCHRESERVED ("2:=   ");                                    01877000
REPLACELOW ~ REPLACE & 0 [37:43:5];                                     01878000
GROUPMARK ~ SEARCHRESERVED ("1~    ");                                  01879000
IF NOFILE THEN                                                          01880000
    BEGIN                                                               01881000
    INTEGER ADR;                                                        01882000
    REAL X;                                                             01883000
    FILE SVD DISK RANDOM[1:SZ|USERS+3]"INTERPS""SAVFILE" (1,30,SAVE 1); 01884000
         ZEROOUT(THREECARDS[0,0],29);                                   01885000
         FOR ADR ~ 0 STEP 1 UNTIL USERS DO                              01886000
              WRITE(SVD[ADR | SZ],30,THREECARDS[0,*]);                  01887000
         WRITE (SVD[SZ | USERS + 1],30,THREECARDS[0,*]);                01887100
         WRITE(SVD[SZ | USERS + 2],30,THREECARDS[0,*]);                 01888000
         X ~ STATUS(STATOS[USER],3);                                    01889000
         LOCK(SVD);                                                     01890000
         X ~ STATUS(STATOS[USER],4);                                    01891000
    END;                                                                01892000
SEARCH(SECURE,FILECHECK[*]);                                            01893000
IF FILECHECK[0] } 0 THEN SECURETOG ~ TRUE;                              01894000
FOR I ~ 1 STEP 1 UNTIL USERS DO                                         01894010
    BEGIN                                                               01894020
         WRITE(STACKFILE[I],1020,SETBUF[*]);                            01894030
         WRITE(PRTFILE[I],420,SETBUF[*]);                               01894040
    END;                                                                01894050
SETDESCADDR(DUMMY,STACKFILE(0),PRTFILE(0));                             01894060
    END INITIALIZATION;                                                 01895000
PROCEDURE DISKWRITER;                                                   01896000
    BEGIN                                                               01897000
STREAM PROCEDURE MOVEWORDS(SORC,DEST,NOWRDS); VALUE NOWRDS;             01898000
    BEGIN SI ~ SORC; DI ~ DEST; DS ~ NOWRDS WDS END OF MOVEWORDS;       01899000
STREAM PROCEDURE ZEROOUT(WHO,N); VALUE N;                               01900000
    BEGIN DI ~ WHO; DS ~ 8 LIT "0"; SI ~ WHO; DS ~ N WDS END ZEROOUT;   01901000
LABEL EXIT;                                                             01902000
INTEGER INDEX, ARRAYI, NOCARDS;                                         01903000
REAL X;                                                                 01904000
X ~ STATUS(STATOS[USER],0);                                             01905000
    NOCARDS ~ THREECARDS[USER,30];                                      01906000
    IF ENDTOG AND NOCARDS = 0 THEN BEGIN ENDTOG ~ FALSE; GO EXIT END;   01907000
    IF ENDTOG AND NOCARDS MOD 3 ! 0 THEN                                01908000
         BEGIN                                                          01909000
              ENDTOG ~ FALSE;                                           01910000
              INDEX ~ ((USER-1) |SZ) + (NOCARDS DIV 3) + 1;             01911000
              WRITE(STORAGE[INDEX],30,THREECARDS[USER,*]);              01912000
              ZEROOUT(THREECARDS[USER,0],29);                           01913000
              THREECARDS[USER,0] ~ NOCARDS;                             01914000
              INDEX ~ (USER-1) | SZ;                                    01915000
              WRITE(STORAGE[INDEX],30,THREECARDS[USER,*]);              01916000
              FORMATTER(LXON,1,TRUE);                                   01917000
              GO TO EXIT;                                               01918000
         END ELSE                                                       01919000
         IF ENDTOG THEN                                                 01920000
              BEGIN                                                     01921000
                   ZEROOUT(THREECARDS[USER,0],29);                      01922000
                   THREECARDS[USER,0] ~ NOCARDS;                        01923000
                   INDEX ~ (USER-1) | SZ;                               01924000
                   WRITE(STORAGE[INDEX],30,THREECARDS[USER,*]);         01925000
                   ENDTOG ~ FALSE;                                      01926000
                   FORMATTER(LXON,1,TRUE);                              01927000
                   GO TO EXIT;                                          01928000
              END;                                                      01929000
    NOCARDS ~ NOCARDS + 1;                                              01930000
    IF NOCARDS > 3 | (SZ - 1) THEN                                      01931000
         BEGIN                                                          01932000
         FLAGIT(DSKMSG,7);                                              01933000
              GO TO EXIT;                                               01934000
         END;                                                           01935000
    ARRAYI ~ ((NOCARDS-1) MOD 3) | 10;                                  01936000
    IF NOCARDS MOD 3 = 0 THEN                                           01937000
         BEGIN                                                          01938000
              MOVEWORDS(INPUT[1],THREECARDS[USER,ARRAYI],9);            01939000
              INDEX ~ ((USER-1) | SZ) + (NOCARDS DIV 3);                01940000
              WRITE(STORAGE[INDEX],30,THREECARDS[USER,*]);              01941000
              ZEROOUT(THREECARDS[USER,0],29);                           01942000
              THREECARDS[USER,0] ~ NOCARDS;                             01943000
              WRITE(STORAGE[(USER-1)|SZ],30,THREECARDS[USER,*]);        01944000
              THREECARDS[USER,0] ~ 0;                                   01945000
              IF NOCARDS = 3 | (SZ - 1) THEN                            01946000
                BEGIN                                                   01947000
                   THREECARDS[USER,0] ~ NOCARDS;                        01948000
                   INDEX ~ (USER-1) | SZ;                               01949000
                   WRITE(STORAGE[INDEX],30,THREECARDS[USER,*]);         01950000
                   FLAGIT(DSKMSG,10);                                   01951000
                   GO TO EXIT;                                          01952000
                END;                                                    01953000
              GO TO EXIT;                                               01954000
         END;                                                           01955000
    MOVEWORDS(INPUT[1],THREECARDS[USER,ARRAYI],9);                      01956000
EXIT:                                                                   01957000
    THREECARDS[USER,30] ~ IF NOCARDS > 3 | (SZ - 1) THEN 3 | (SZ - 1)   01958000
         ELSE NOCARDS;                                                  01958100
    END OF DISKWRITER;                                                  01959000
PROCEDURE DISKREAD;                                                     01960000
    BEGIN                                                               01961000
STREAM PROCEDURE MOVEWORDS(SORC,DEST,NOWRDS); VALUE NOWRDS;             01962000
    BEGIN SI ~ SORC; DI ~ DEST; DS ~ NOWRDS WDS END OF MOVEWORDS;       01963000
INTEGER STREAM PROCEDURE MKABS(N);                                      01964000
    BEGIN DI ~ N; MKABS ~ DI END OF MKABS;                              01965000
INTEGER NOCARDS,NOREAD,  AINDX,DINDX,MSGSZ,SENDER,T56,T72;              01966000
REAL X;                                                                 01967000
BOOLEAN SIZERR;                                                         01968000
LABEL EXIT,ERR;                                                         01969000
STREAM PROCEDURE MSGLNGTH(MSG,X,Y);                                     01970000
    BEGIN                                                               01971000
         LABEL L56,L72;                                                 01972000
         LOCAL T1;                                                      01973000
         SI ~ MSG;                                                      01974000
         TALLY ~ 0;                                                     01975000
         56(IF SC="~" THEN JUMP OUT 1 TO L56; TALLY~TALLY+1; SI~SI+1);  01976000
         TALLY ~ 0;                                                     01977000
         16(IF SC="~" THEN JUMP OUT 1 TO L72; TALLY~TALLY+1; SI~SI+1);  01978000
         TALLY ~ TALLY + 1;                                             01979000
    L72: T1 ~ TALLY;                                                    01980000
         SI ~ LOC T1;                                                   01981000
         DI ~ Y;                                                        01982000
         DS ~ 1 WDS;                                                    01983000
         TALLY ~ 56;                                                    01984000
    L56: T1 ~ TALLY;                                                    01985000
         SI ~ LOC T1;                                                   01986000
         DI ~ X;                                                        01987000
         DS ~ 1 WDS;                                                    01988000
    END OF MSGLNGTH;                                                    01989000
X ~ STATUS(STATOS[USER],0);                                             01990000
IF RESTARTTOG THEN                                                      01991000
    BEGIN                                                               01992000
         NEXTPRTIP ~ NEXTPRTI;                                          01993000
         STACKIP ~ STACKI;                                              01994000
         DOIPERM ~ DOI;                                                 01995000
         ARRAYIP ~ ARRAYI;                                              01996000
    END;                                                                01997000
    NOCARDS ~ THREECARDS[USER,30];                                      01998000
   IF NOCARDS = 0 THEN      % NO STORED PROGRAM EXISTS                  01999000
         BEGIN                                                          02000000
              FLAGIT(DSKMSG,0);                                         02001000
              LISTTOG ~ FALSE;                                          02002000
              GO TO EXIT;                                               02003000
         END  ;                                                         02004000
    NOREAD ~ IF LISTTOG THEN 1 ELSE THREECARDS[USER,31] + 1;            02005000
    IF NOREAD > NOCARDS THEN                                            02006000
         BEGIN                                                          02007000
              ENDDISK ~ NOT LISTTOG ;                                   02008000
              GO TO EXIT;                                               02009000
         END;                                                           02010000
    IF NOT LISTTOG THEN                                                 02011000
         BEGIN                                                          02012000
              AINDX ~ ((NOREAD - 1) MOD 3) | 10;                        02013000
              IF NOREAD MOD 3 = 1 THEN                                  02014000
                BEGIN                                                   02015000
                   DINDX ~ ((USER-1) | SZ) + (NOREAD DIV 3) + 1;        02016000
                   READ(STORAGE[DINDX],30,THREECARDS[USER,*])[:ERR];    02017000
                END;                                                    02018000
              MOVEWORDS(THREECARDS[USER,AINDX],INPUT[1],9);             02019000
              THREECARDS[USER,31] ~ NOREAD;                             02020000
              GO TO EXIT;                                               02021000
         END;                                                           02022000
    SENDER ~ MKABS(INPUT[1]);                                           02023000
    WHILE NOREAD { NOCARDS DO                                           02024000
         BEGIN                                                          02025000
              AINDX ~ ((NOREAD - 1) MOD 3) | 10;                        02026000
              IF NOREAD MOD 3 = 1 THEN                                  02027000
                BEGIN                                                   02028000
              DINDX ~ ((USER-1) | SZ) + (NOREAD DIV 3) + 1;             02029000
                   READ(STORAGE[DINDX],30,THREECARDS[USER,*])[:ERR];    02030000
                END;                                                    02031000
              MOVEWORDS(THREECARDS[USER,AINDX],INPUT[1],9);             02032000
              T56 ~ 0;                                                  02033000
              T72 ~ 0;                                                  02034000
              MSGLNGTH(INPUT[1],T56,T72);                               02035000
              MSGSZ ~ T56 + T72;                                        02036000
              IF SIZERR ~ MSGSZ } 72 THEN GO TO ERR;                    02037000
              FORMATTER(SENDER,MSGSZ,TRUE);                             02038000
              NOREAD ~ NOREAD + 1;                                      02039000
         END;                                                           02040000
    FORMATTER(LXON,1,TRUE);                                             02041000
    LISTTOG ~ FALSE;                                                    02042000
    GO TO EXIT;                                                         02043000
ERR:                                                                    02044000
    IF SIZERR THEN                                                      02045000
         BEGIN                                                          02046000
              LISTTOG ~ FALSE;                                          02047000
              FLAGIT(DSKMSG,6);                                         02048000
              GO TO EXIT;                                               02049000
         END;                                                           02050000
    FLAGIT(DSKMSG,8);                                                   02051000
    PARITYERR ~ TRUE;                                                   02052000
EXIT:                                                                   02053000
    END OF DISKREAD;                                                    02054000
STREAM PROCEDURE XFRID(SOURCE,PRE,SUFF,CNTRL);                          02055000
BEGIN                                                                   02056000
  LOCAL SSI1,T1,SSI2,T2;                                                02057000
  LABEL DBLNK1,BYPASS,DBLNK2,FRSTID,SCNDID,ERRXIT,XIT;                  02058000
    SI~SOURCE; DI~PRE; DS~8 LIT " "; DI~SUFF; DS~8 LIT " ";             02059000
  DBLNK1: IF SC=" " THEN BEGIN SI~SI+1; GO TO DBLNK1 END;               02060000
  BYPASS: IF SC=ALPHA THEN BEGIN SI~SI+1; GO TO BYPASS END;             02061000
  DBLNK2: IF SC=" " THEN BEGIN SI~SI+1; GO TO DBLNK2 END;               02062000
    TALLY ~ 0; SSI1~SI;                                                 02063000
  FRSTID: IF SC=ALPHA THEN BEGIN TALLY~TALLY+1; SI~SI+1;                02064000
          GO TO FRSTID END;                                             02065000
          IF SC!"/" THEN GO TO ERRXIT;                                  02066000
          SI~SI+1; SSI2~SI; T1~TALLY; SI~LOC T1; SI~SI+7;               02067000
          IF SC>"7" THEN GO TO ERRXIT;                                  02068000
          SI~SSI2; TALLY~0;                                             02069000
  SCNDID: IF SC=ALPHA THEN BEGIN TALLY~TALLY+1; SI~SI+1;                02070000
          GO TO SCNDID END;                                             02071000
          T2~TALLY; SI~LOC T2; SI~SI+7; IF SC>"7" THEN GO TO ERRXIT;    02072000
    DI~PRE; SI~SSI1; DS~1 LIT"0"; DS~T1 CHR;                            02073000
    DI~SUFF; SI~SSI2; DS~1 LIT "0"; DS~T2 CHR; GO TO XIT;               02074000
  ERRXIT: TALLY~1; T1~TALLY; SI~LOC T1; DI~CNTRL; DS~1 WDS;             02075000
  XIT:                                                                  02076000
END OF XFRID;                                                           02077000
PROCEDURE SAVEDISK;                                                     02078000
  BEGIN                                                                 02079000
STREAM PROCEDURE ZEROOUT(WHO,N); VALUE N;                               02080000
    BEGIN DI ~ WHO; DS ~ 8 LIT "0"; SI ~ WHO; DS ~ N WDS END ZEROOUT;   02081000
  INTEGER NOCARDS,NOSEG,INDX,I;                                         02082000
  REAL ID1,ID2;                                                         02083000
  BOOLEAN IDERROR;                                                      02084000
  LABEL FINIS,PAR;                                                      02085000
  REAL X;                                                               02086000
    X ~ STATUS(STATOS[USER],0);                                         02087000
    NOCARDS ~ THREECARDS[USER,30];                                      02088000
    NOSEG ~ NOCARDS DIV 3 + 1;                                          02089000
    IF NOCARDS MOD 3 ! 0 THEN NOSEG ~ NOSEG + 1;                        02090000
    IDERROR~FALSE;                                                      02091000
    XFRID(INPUT[1],ID1,ID2,IDERROR);                                    02092000
    IF IDERROR THEN BEGIN FLAGIT(DSKMSG,1); GO TO FINIS END;            02093000
BEGIN                                                                   02094000
    FILE SVDSK DISK SERIAL[1:NOSEG] "ONE" "TWO" (1,30,SAVE 30);         02095000
    FILL SVDSK WITH ID1,ID2;                                            02096000
    SEARCH(SVDSK,FILECHECK[*]);                                         02097000
    IF FILECHECK[0] } 0 THEN    % DUPLICATE FILE-ID ON DISK             02098000
         BEGIN                                                          02099000
         FLAGIT(DSKMSG,3);                                              02100000
              GO TO FINIS;                                              02101000
         END;                                                           02102000
  INDX ~ (USER - 1) | SZ;                                               02103000
  ZEROOUT(THREECARDS[USER,0],29);                                       02104000
  THREECARDS[USER,0] ~ NOCARDS;                                         02105000
  WRITE(SVDSK,30,THREECARDS[USER,*])[FINIS];                            02106000
    FOR I ~ 1 STEP 1 UNTIL NOSEG - 1 DO                                 02107000
         BEGIN                                                          02108000
              INDX ~ INDX + 1;                                          02109000
              READ(STORAGE[INDX],30,THREECARDS[USER,*])[:PAR];          02110000
              WRITE(SVDSK,30,THREECARDS[USER,*])[FINIS];                02111000
         END;                                                           02112000
    LOCK(SVDSK);                                                        02113000
    FLAGIT(DSKMSG,2);                                                   02114000
    GO TO FINIS;                                                        02115000
  END;                                                                  02116000
PAR:                                                                    02117000
    FLAGIT(DSKMSG,8);                                                   02118000
FINIS:                                                                  02119000
  END OF SAVEDISK;                                                      02120000
PROCEDURE RECALL;                                                       02121000
  BEGIN                                                                 02122000
  INTEGER I,INDX;                                                       02123000
  REAL ID1,ID2;                                                         02124000
  BOOLEAN IDERR;                                                        02125000
  LABEL EXIT,PAR,EOF;                                                   02126000
  FILE IN RCLDSK DISK SERIAL "ONE" "TWO" (2,30);                        02127000
  REAL X;                                                               02128000
    X ~ STATUS(STATOS[USER],0);                                         02129000
    IDERR~FALSE;                                                        02130000
    XFRID(INPUT[1],ID1,ID2,IDERR);                                      02131000
    IF IDERR THEN BEGIN FLAGIT(DSKMSG,1); GO TO EXIT END;               02132000
    FILL RCLDSK WITH ID1,ID2;                                           02133000
    SEARCH(RCLDSK,FILECHECK[*]);                                        02134000
    IF FILECHECK[0] < 0 THEN                                            02135000
         BEGIN                                                          02136000
              FLAGIT(DSKMSG,4);                                         02137000
              GO TO EXIT;                                               02138000
         END ELSE                                                       02139000
    IF FILECHECK[0] = 0 THEN                                            02140000
         BEGIN                                                          02141000
         FLAGIT(DSKMSG,5);                                              02142000
              GO TO EXIT;                                               02143000
         END;                                                           02144000
    READ(RCLDSK,30,THREECARDS[USER,*])[EOF:PAR];                        02145000
    THREECARDS[USER,30] ~ THREECARDS[USER,0];                           02146000
    INDX ~ (USER - 1) | SZ;                                             02147000
    WRITE(STORAGE[INDX],30,THREECARDS[USER,*]);                         02148000
    FOR I ~ 1 STEP 1 UNTIL SZ - 1 DO                                    02149000
      BEGIN                                                             02150000
       INDX ~ INDX + 1;                                                 02151000
         READ(RCLDSK,30,THREECARDS[USER,*])[EOF:PAR];                   02152000
         WRITE(STORAGE[INDX],30,THREECARDS[USER,*]);                    02153000
      END;                                                              02154000
  EOF: RESTARTUSER~USER; RESTARTTOG~RESTART[USER]~TRUE;                 02155000
         THREECARDS[USER,31] ~ 0;                                       02156000
       GO TO EXIT;                                                      02157000
PAR: FLAGIT(DSKMSG,8);                                                  02158000
EXIT: STATOS[USER].[4:1] ~ 1;                                           02159000
END OF RECALL;                                                          02160000
PROCEDURE EDIT;                                                         02161000
BEGIN                                                                   02162000
STREAM PROCEDURE MOVEWORDS(SORC,DEST,NOWRDS); VALUE NOWRDS;             02163000
    BEGIN SI ~ SORC; DI ~ DEST; DS ~ NOWRDS WDS END OF MOVEWORDS;       02164000
INTEGER STREAM PROCEDURE MKABS(N);                                      02165000
    BEGIN DI ~ N; MKABS ~ DI END OF MKABS;                              02166000
INTEGER STREAM PROCEDURE INDEXNCR(N,I); VALUE N,I;                      02167000
    BEGIN DI ~ N; DI ~ DI + I; INDEXNCR ~ DI END OF INDEXNCR;           02168000
STREAM PROCEDURE ZEROOUT(WHO,N); VALUE N;                               02169000
    BEGIN DI ~ WHO; DS ~ 8 LIT "0"; SI ~ WHO; DS ~ N WDS END ZEROOUT;   02170000
ALPHA STREAM PROCEDURE EXAMIN(NCR); VALUE NCR;                          02171000
    BEGIN SI ~ NCR; DI~LOC EXAMIN; DI ~ DI + 7; DS ~ CHR END EXAMIN;    02172000
LABEL EOF,PAR,EXIT,NEXT1,NEXTI,NEXTJ,AGAIN,NOREAD,CHK;                  02173000
INTEGER INDEX,NOCARDS,NOSEG,AI,I,J,K,N,S,TNCR,PRTT,STPT,CARDNO,CARDOUT; 02174000
INTEGER INCARD,LSTSEG,OUTINX,AII,AIO,NEXTCRD,CONTROL;                   02175000
REAL X;                                                                 02176000
LABEL SKIPIT,REPEAT;                                                    02177000
    INDEX ~ (USER-1) | SZ;                                              02178000
    AI ~ 1; CARDOUT ~ 0; LSTSEG ~ 0;                                    02179000
    TNCR ~ MKABS(PROGEDIT[0]);                                          02180000
    READ(STORAGE[INDEX],30,THREECARDS[USER,*])[EOF:PAR];                02181000
    NOCARDS ~ THREECARDS[USER,0];                                       02182000
    IF NOCARDS = 0 THEN GO TO EXIT;                                     02183000
    CONTROL ~ NOCARDS;                                                  02184000
    NOSEG ~ IF NOCARDS MOD 3=0 THEN NOCARDS DIV 3 ELSE NOCARDS DIV 3 +1;02185000
    FOR I ~ 1 STEP 1 UNTIL NOSEG DO                                     02186000
      BEGIN                                                             02187000
         READ(STORAGE[INDEX+I],30,THREECARDS[USER,*])[EOF:PAR];         02188000
         IF I < NOSEG THEN K ~ 2 ELSE                                   02189000
           K ~ IF NOCARDS MOD 3=0 THEN 2 ELSE NOCARDS MOD 3 - 1;        02190000
         FOR J ~ 0 STEP 1 UNTIL K DO                                    02191000
           BEGIN                                                        02192000
              MOVEWORDS(THREECARDS[USER,J|10],PROGEDIT[0],9);           02193000
              NCR ~ TNCR;                                               02194000
              S ~ SCAN;                                                 02195000
              IF S = 3 THEN   % INPUT HAS A PART AND STEP NUMBER        02196000
                 BEGIN                                                  02197000
                   NCR ~ TNCR;                                          02198000
                   WHILE EXAMIN(NCR)=" " DO NCR ~ INDEXNCR(NCR,1);      02199000
                   X ~ NUMBER;                                          02200000
                   N ~ ENTIER(X | 100 + 0.001);                         02201000
                   PRTT ~ N DIV 100;                                    02202000
                   STPT ~ N MOD 100;                                    02203000
IF ERASETOG AND ((ONESTEP AND PART = PRTT AND STPP = STPT) OR           02204000
                 (ONEPART AND PART = PRTT)) THEN                        02205000
                             BEGIN                                      02206000
                                  SORTIT[AI] ~ 0;                       02207000
                                  CONTROL ~ CONTROL - 1;                02208000
                             END ELSE                                   02209000
              IF PRTT > 9 THEN                                          02210000
                      BEGIN                                             02211000
                        SORTIT[AI] ~ 0;                                 02212000
                        CONTROL ~ CONTROL - 1;                          02213000
                      END ELSE                                          02214000
                        BEGIN                                           02215000
                   SORTIT[AI].[21:9] ~ PRTT;                            02216000
                   SORTIT[AI].[30:9] ~ STPT;                            02217000
                   SORTIT[AI].[39:9] ~ AI;                              02218000
                        END;                                            02219000
                   AI ~ AI + 1;                                         02220000
                 END ELSE          % THIS INPUT IS A FORM               02221000
                 BEGIN                                                  02222000
                   WHILE EXAMIN(NCR)=" " DO NCR ~ INDEXNCR(NCR,1);      02223000
                   N ~ NUMBER - 1;                                      02224000
                   IF N } MAXFORMS THEN                                 02225000
                      BEGIN                                             02226000
                        SORTIT[AI] ~ 0;  % FORM NUMBER TOO LARGE        02227000
                        CONTROL ~ CONTROL - 1;                          02228000
                        AI ~ AI + 1;                                    02229000
                      END ELSE                                          02230000
                           BEGIN                                        02231000
                             SORTIT[AI].[21:9] ~ 511;  % FORMS WILL     02232000
                             SORTIT[AI].[30:9] ~ N;    % ALWAYS FOLLOW  02233000
                             SORTIT[AI].[39:9] ~ AI;   % THE LAST PART  02234000
                             AI ~ AI + 1;                               02235000
                           END                                          02236000
                 END                                                    02237000
            END                                                         02238000
       END;                                                             02239000
    FOR I ~ 1 STEP 1 UNTIL NOCARDS DO                                   02240000
       BEGIN                                                            02241000
         IF SORTIT[I] = 0 THEN GO TO NEXT1;                             02242000
         FOR J ~ I+1 STEP 1 UNTIL NOCARDS DO                            02243000
            BEGIN                                                       02244000
              IF SORTIT[J] = 0 THEN GO TO SKIPIT;                       02245000
              IF SORTIT[I].[21:18] = SORTIT[J].[21:18] THEN             02246000
                 BEGIN                                                  02247000
                   SORTIT[I] ~ SORTIT[J];                               02248000
                   SORTIT[J] ~ 0;                                       02249000
                   CONTROL ~ CONTROL - 1;                               02250000
                 END;                                                   02251000
SKIPIT:     END;                                                        02252000
         SORTIT[I].[12:9] ~ SORTIT[I].[39:9];                           02253000
NEXT1: END;    % THIS TAKES CARE OF REPLACEMENTS                        02254000
REPEAT:                                                                 02255000
    FOR I ~ 1 STEP 1 UNTIL NOCARDS DO                                   02256000
       BEGIN                                                            02257000
         K ~ 0;                                                         02258000
         IF SORTIT[I] = 0 THEN GO TO NEXTI;                             02259000
         FOR J ~ I+1 STEP 1 UNTIL NOCARDS DO                            02260000
            BEGIN                                                       02261000
              IF SORTIT[J] = 0 THEN GO TO NEXTJ;                        02262000
              IF SORTIT[I].[21:18] > SORTIT[J].[21:18] THEN GO TO CHK;  02263000
              GO TO NEXTJ;                                              02264000
CHK:          K ~ J;                                                    02265000
              FOR J ~ K+1 STEP 1 UNTIL NOCARDS DO                       02266000
                 BEGIN                                                  02267000
                   IF SORTIT[J] = 0 THEN GO TO AGAIN;                   02268000
                   IF SORTIT[K].[21:18] > SORTIT[J].[21:18] THEN        02269000
                      GO TO CHK;                                        02270000
AGAIN:           END;                                                   02271000
NEXTJ:      END;                                                        02272000
         IF I = NOCARDS AND SORTIT[I]!0 THEN                            02273000
              SORTIT[I].[12:9] ~ SORTIT[I].[39:9];                      02274000
         CARDNO ~ IF K = 0 THEN I ELSE K;                               02275000
         INCARD ~ SORTIT[CARDNO].[12:9];                                02276000
         IF INCARD = 0 THEN GO TO NEXTI;                                02277000
         NOSEG ~ IF INCARD MOD 3 = 0 THEN INCARD DIV 3                  02278000
                 ELSE INCARD DIV 3 + 1;                                 02279000
         IF NOSEG = LSTSEG THEN GO TO NOREAD;                           02280000
         READ(STORAGE[INDEX+NOSEG],30,THREECARDS[USER,*])[EOF:PAR];     02281000
         LSTSEG ~ NOSEG;                                                02282000
NOREAD:  IF CARDOUT ! 0 AND CARDOUT MOD 3 = 0 THEN                      02283000
            BEGIN                                                       02284000
              OUTINX ~ CARDOUT DIV 3;                                   02285000
              WRITE(TEMP[OUTINX],30,THREECARDS[0,*]);                   02286000
              ZEROOUT(THREECARDS[0,0],29);                              02287000
            END; NEXTCRD ~ CARDOUT + 1;                                 02288000
         AII ~ IF INCARD MOD 3 = 0 THEN 20 ELSE (INCARD MOD 3 - 1)|10;  02289000
         AIO ~ IF NEXTCRD MOD 3=0 THEN 20 ELSE (NEXTCRD MOD 3 - 1)|10;  02290000
         MOVEWORDS(THREECARDS[USER,AII],THREECARDS[0,AIO],10);          02291000
         CARDOUT ~ CARDOUT + 1;                                         02292000
         SORTIT[CARDNO] ~ 0;                                            02293000
         CONTROL ~ CONTROL - 1;                                         02294000
         I ~ IF K = 0 THEN I ELSE I - 1;                                02295000
NEXTI: END;                                                             02296000
    IF CONTROL ! 0 THEN GO TO REPEAT;                                   02297000
    OUTINX ~ IF CARDOUT MOD 3=0 THEN CARDOUT DIV 3 ELSE CARDOUT DIV 3+1;02298000
    WRITE(TEMP[OUTINX],30,THREECARDS[0,*]);                             02299000
    NOSEG ~ IF CARDOUT MOD 3=0 THEN CARDOUT DIV 3 ELSE CARDOUT DIV 3 +1;02300000
    ZEROOUT(THREECARDS[0,0],29);                                        02301000
    THREECARDS[0,0] ~ CARDOUT;                                          02302000
    THREECARDS[USER,30] ~ CARDOUT;                                      02303000
    WRITE(TEMP[0],30,THREECARDS[0,*]);                                  02304000
    FOR I ~ 0 STEP 1 UNTIL NOSEG DO                                     02305000
       BEGIN                                                            02306000
         READ(TEMP[I],30,THREECARDS[USER,*])[EOF:PAR];                  02307000
         WRITE(STORAGE[INDEX+I],30,THREECARDS[USER,*]);                 02308000
       END;                                                             02309000
    GO TO EXIT;                                                         02310000
EOF: PAR: FLAGIT(DSKMSG,8);                                             02311000
EXIT:                                                                   02312000
      STATOS[USER].[4:1] ~ 1;                                           02313000
END OF EDIT;                                                            02314000
PROCEDURE INITIALIZEUSER;                                               02315000
COMMENT DOCUMENT                                                        02316000
              PERMANENT INDICES FOR THE LAST USER ARE STORED, THE NEW   02317000
         USER (PRT AND PARTS ARRAY INDEX) IS ESTABLISHED                02318000
         (USER ~ INPUT [0]) AND TEMPORARY INDICES ARE ESTABLISHED.      02319000
         CHECK IS MADE FOR RESTART, SAVE, AND RECALL. THE PROGRAM MODE  02320000
         DECISION IS BASED ON THE PRESENCE OF A NUMBER IN THE FIRST NON-02321000
         BLANK INPUT CHARACTER - AND, IF TRUE, THE PART AND STEP NUMBER 02322000
         ARE DETERMINED.;                                               02323000
    BEGIN                                                               02324000
INTEGER STREAM PROCEDURE MKABS(N);                                      02325000
    BEGIN DI ~ N; MKABS ~ DI END OF MKABS;                              02326000
INTEGER STREAM PROCEDURE INDEXNCR(N,I); VALUE N,I;                      02327000
    BEGIN DI ~ N; DI ~ DI + I; INDEXNCR ~ DI END OF INDEXNCR;           02328000
ALPHA STREAM PROCEDURE EXAMIN(NCR); VALUE NCR;                          02329000
    BEGIN SI ~ NCR; DI~LOC EXAMIN; DI ~ DI + 7; DS ~ CHR END EXAMIN;    02330000
STREAM PROCEDURE CHKPRBIT (A,B);                                        02330100
    BEGIN SI ~ A; DI ~ B END;                                           02330200
INTEGER I, S, TNCR, TS;                                                 02331000
REAL N;                                                                 02332000
LABEL EXIT,ERROR;                                                       02333000
IF PARITYERR THEN                                                       02334000
    BEGIN                                                               02335000
         PARITYERR ~ FALSE;                                             02336000
         GO TO ERROR;                                                   02337000
    END;                                                                02338000
IF DISCONNECT THEN                                                      02339000
    BEGIN                                                               02340000
         DISCONNECT ~ FALSE;                                            02341000
         GO TO EXIT;                                                    02342000
    END;                                                                02343000
IF ENDDISK THEN                                                         02344000
    BEGIN                                                               02345000
         ENDDISK ~ FALSE;                                               02346000
         FLAGIT(DSKMSG,9);                                              02347000
         GO TO ERROR;                                                   02348000
    END;                                                                02349000
IF RESTARTTOG THEN USER ~ INPUT[0] ~ RESTARTUSER ELSE                   02350000
    USER ~ INPUT [0];                                                   02351000
IF LASTUSER ! USER AND USER ! 0 THEN                                    02351100
         BEGIN                                                          02351200
    IF LASTUSER ! 0 THEN                                                02351210
         BEGIN                                                          02351220
    WRITE(STACKFILE[LASTUSER]);                                         02351300
    WRITE(PRTFILE[LASTUSER]);                                           02351400
         END;                                                           02351410
    READ(STACKFILE[USER]);                                              02351500
    READ(PRTFILE[USER]);                                                02351600
    LASTUSER ~ USER;                                                    02351700
         END;                                                           02351800
    CHKPRBIT(STACKFILE(0),PRTFILE(0));                                  02351900
    NEXTPRTI ~ NEXTPRTIP;                                               02352000
STEPI ~ STACKI ~ STACKIP;                                               02353000
    DOI ~ DOIPERM;                                                      02354000
    ARRAYI ~ ARRAYIP;                                                   02355000
    IF NEXTPRTI < 1 THEN                                                02356000
              BEGIN                                                     02357000
         IDLOC ~ "4PHONY" & MARK [1:1:9]; BUMPNEXT;                     02358000
              END;                                                      02359000
    I ~ NCR ~ MKABS (INPUT [1]);                                        02360000
    S ~ SCAN;                                                           02361000
    IF NOT RESTARTTOG THEN IF ACCUM1 = "7RESTA" THEN                    02362000
      BEGIN                                                             02363000
         RESTARTUSER ~ USER ~ INPUT[0];                                 02364000
         RESTARTTOG ~ TRUE;                                             02365000
         ENDTOG ~ TRUE;                                                 02366000
         DISKWRITER;                                                    02367000
         ERASE;                                                         02368000
         RESTART[USER] ~ TRUE;                                          02369000
         FIRSTINPUT ~ TRUE;                                             02370000
         THREECARDS[USER,31] ~ 0;                                       02371000
         READ(STORAGE[(USER - 1) | SZ],30,THREECARDS[0,*]);             02372000
         THREECARDS[USER,30] ~ THREECARDS[0,0];                         02373000
         IF THREECARDS[0,0] = 0 THEN                                    02374000
                   BEGIN                                                02375000
              RESTART[USER] ~ FALSE;                                    02376000
              FIRSTINPUT ~ FALSE;                                       02377000
              RESTARTTOG ~ FALSE;                                       02378000
              FLAGIT(DSKMSG,0);                                         02379000
                   END;                                                 02380000
         GO TO EXIT;                                                    02381000
      END;                                                              02382000
IF NOT RESTARTTOG AND NOT USERSET[USER] THEN                            02383000
         USERSET[USER] ~ TRUE;                                          02384000
IF ACCUM1 = "4SAVE " THEN                                               02385000
    BEGIN                                                               02386000
      ENDTOG ~ TRUE;                                                    02387000
      DISKWRITER;                                                       02388000
      IF STATOS[USER].[4:1] = 0 THEN EDIT;                              02389000
      SAVEDISK;                                                         02390000
      SAVETOG ~ TRUE;                                                   02391000
      GO TO EXIT;                                                       02392000
    END;                                                                02393000
IF ACCUM1 = "6RECAL" THEN                                               02394000
    BEGIN                                                               02395000
      ERASE;                                                            02396000
      RECALL;                                                           02397000
      RECALLTOG ~ TRUE;                                                 02398000
      GO TO EXIT;                                                       02399000
    END;                                                                02400000
IF ACCUM1 = "4STOP " THEN                                               02400100
         BEGIN                                                          02400200
    STATOS[USER].[5:1] ~ 0;                                             02400300
    USERPRT[DOBASE] ~ 0;                                                02400400
    RECALLTOG ~ TRUE;                                                   02400500
    FLAGIT(OTHER,7);                                                    02400550
    GO TO EXIT;                                                         02400600
         END;                                                           02400700
IF (S=3 OR ACCUM1="4FORM ") AND NOT RESTART[USER] THEN                  02401000
              BEGIN                                                     02402000
         STOREPROG ~ TRUE;                                              02403000
         STATOS[USER].[6:1] ~ 1;                                        02404000
              END;                                                      02405000
IF ACCUM1 = "4FORM " THEN                                               02406000
    BEGIN                                                               02407000
         TNCR ~ NCR;                                                    02408000
         N ~ NUMBER - 1;                                                02409000
         IF N < 0 OR N } MAXFORMS THEN                                  02410000
              BEGIN                                                     02411000
                   FLAGIT(STMTERR,8);                                   02412000
                   GO TO EXIT;                                          02413000
              END;                                                      02414000
         NCR ~ TNCR                                                     02415000
    END;                                                                02416000
IF S = 3 THEN                                                           02417000
              BEGIN                                                     02418000
         NCR ~ I;                                                       02419000
    WHILE EXAMIN (NCR) = " " DO NCR ~ INDEXNCR (NCR, 1);                02420000
         N ~ NUMBER;                                                    02421000
         N ~ ENTIER (N | 100 + .001);                                   02422000
         PART ~ N DIV 100;                                              02423000
         IF PART > 9 THEN BEGIN FLAGIT(STMTERR,9); GO TO EXIT END;      02424000
         STPP ~ N MOD 100;                                              02425000
         PROGRAMTOG ~ TRUE;                                             02426000
              END ELSE                                                  02427000
              BEGIN                                                     02428000
         NCR ~ I;                                                       02429000
              END;                                                      02430000
GO TO EXIT;                                                             02431000
ERROR:                                                                  02432000
         RESTARTTOG ~ FALSE;                                            02433000
         RESTART[USER] ~ FALSE;                                         02434000
         USERSET[USER] ~ FALSE;                                         02435000
EXIT:                                                                   02436000
    END INITIALIZEUSER;                                                 02437000
PROCEDURE QUIT;                                                         02438000
    BEGIN                                                               02439000
INTEGER ELAPSED;                                                        02440000
STREAM PROCEDURE MOVEWORDS(SORC,DEST,NOWRDS); VALUE NOWRDS;             02441000
    BEGIN SI ~ SORC; DI ~ DEST; DS ~ NOWRDS WDS END OF MOVEWORDS;       02442000
STREAM PROCEDURE ZEROOUT (WHO);                                         02443000
    BEGIN DI ~ WHO; DS ~ 8 LIT "0"; SI ~ WHO; DS ~ 29 WDS END ZEROOUT;  02444000
TOTALUSERS ~ TOTALUSERS - 1;                                            02445000
DONE ~ TOTALUSERS = 0;                                                  02446000
ELAPSED ~ TIME(1) - CONTROLS[USER];                                     02447000
ELAPSEDMIN ~ ELAPSED DIV 3600;                                          02448000
ELAPSEDSEC ~ (ELAPSED MOD 3600) / 60;                                   02449000
SIMPLEOUTPUT;                                                           02450000
ERASE;                                                                  02451000
CONTROLS[USER] ~ 0;                                                     02452000
RELEASE(STATOS[USER]);                                                  02453000
STATOS[USER] ~ 0;                                                       02454000
LOGGEDIN[USER] ~ 0;                                                     02455000
IF NOT DONE THEN                                                        02456000
    BEGIN                                                               02457000
         ZEROOUT(THREECARDS[0,0]);                                      02458000
         MOVEWORDS(LOGGEDIN[0],THREECARDS[0,0],USERS + 1);              02459000
         WRITE(STORAGE[SZ | USERS + 1],30,THREECARDS[0,*]);             02460000
    END;                                                                02461000
TERMINATE ~ FALSE;                                                      02462000
    END OF EOF PROCESSING;                                              02463000
PROCEDURE JOSS;                                                         02464000
    BEGIN                                                               02465000
INTEGER I;                                                              02466000
ALPHA A;                                                                02467000
A ~ ACCUM1; ACCUM1 ~ BLANKS;                                            02468000
TEACHER ~ TRUE;                                                         02469000
FORMATTER(LCRLF,2,FALSE);                                               02470000
FOR I ~ 0 STEP 1 UNTIL 29 DO                                            02471000
         BEGIN                                                          02472000
    FLAGIT(TCHR,I);                                                     02473000
    SIMPLEOUTPUT;                                                       02474000
         END;                                                           02475000
ACCUM1 ~ A;                                                             02476000
FORMATTER(LXON,1,TRUE);                                                 02477000
TEACHER ~ FALSE;                                                        02478000
    END OF JOSS;                                                        02479000
PROCEDURE SETTOGGLES;                                                   02480000
    BEGIN                                                               02481000
COMMENT DOCUMENT                                                        02482000
              SETTOGGLES DETERMINES WHAT THE CURRENT REQUEST IS TO DO,  02483000
         AND CHECKS FOR THE POSSIBILITY OF AN ERRONEOUS CALL-OUT WHICH  02484000
         RESULTS IN THE IMMEDIATE TERMINATION OF THIS USERS INTERP      02485000
         PROGRAM. IF IT IS DESIRED TO CHANGE AN INTERP RESERVED NAME    02486000
         (I.E. "SET" TO "LET", FOR INSTANCE) THE ONLY REQUIRED PROGRAM  02487000
         CHANGE IS IN SETTOGGLES.                                       02488000
;                                                                       02489000
INTEGER S;                                                              02490000
BOOLEAN ALL, SCANKILL;                                                  02491000
DEFINE   IS  =  ~ ACCUM1 = #;                                           02492000
TYPETOG  IS   "4TYPE ";                                                 02493000
SETTOG   IS   "3SET  ";                                                 02494000
QUITTOG  IS   "4QUIT ";                                                 02495000
ERASETOG IS   "5ERASE";                                                 02496000
DOTOG    IS   "2DO   ";                                                 02497000
FORMTOG  IS   "4FORM ";                                                 02498000
JOSSTOG IS   "5TEACH";                                                  02499000
ALLVALUES IS "2TO   ";  COMMENT TYPE AND TO ARE MUTUALLY EXCLUSIVE;     02500000
IFPARTTOG IS "4PART ";                                                  02501000
IFSTEPTOG IS "4STEP ";                                                  02502000
IFTOG     IS "2IF   ";                                                  02503000
LISTTOG   IS "4LIST ";                                                  02504000
PROCEDURETOG ~ IFPARTTOG OR IFSTEPTOG;                                  02505000
NCRT ~ NCR;                                                             02506000
IF TYPETOG OR ERASETOG THEN                                             02507000
         BEGIN                                                          02508000
    S ~ SCAN;                                                           02509000
    ALL IS "3ALL  ";                                                    02510000
    IF ALL THEN                                                         02511000
              BEGIN                                                     02512000
         S ~ SCAN;                                                      02513000
         SCANKILL ~ TRUE;                                               02514000
              END;                                                      02515000
         ALLVALUES IS   "6VALUE";                                       02516000
         ALLPARTS  IS   "5PARTS";                                       02517000
         ALLSTEPS  IS   "5STEPS";                                       02518000
         ALLFORMS  IS   "5FORMS";                                       02519000
         ONEPART   IS   "4PART ";                                       02520000
         ONESTEP   IS   "4STEP ";                                       02521000
         ONEFORM   IS   "4FORM ";                                       02522000
         IF ONEPART OR ONESTEP OR ONEFORM THEN NCRT ~ NCR;              02523000
         IF ERASETOG AND NOT (ONEPART OR ONESTEP) THEN SCANKILL ~ TRUE; 02524000
         END;                                                           02525000
IF LISTTOG THEN                                                         02526000
    BEGIN                                                               02527000
         ENDTOG ~ TRUE;                                                 02528000
         DISKWRITER;                                                    02529000
         IF STATOS[USER].[4:1] = 0 THEN EDIT;                           02530000
    END;                                                                02531000
IF NOT SCANKILL THEN NCR ~ NCRT;                                        02532000
    END SETTING TOGGLES;                                                02533000
PROCEDURE DOSET (LINK);                                                 02534000
              VALUE LINK;                                               02535000
              REAL LINK;                                                02536000
    BEGIN                                                               02537000
INTEGER  START, STOP, STEPX;                                            02538000
DEFINE   MARKOP    =    STKLOC.[1:9] = 510#,                            02539000
         STACKEND  =    (MARKOP AND STKLOC.[12:12] = "1~")#,            02540000
         STACKENDS =    (STACKEND OR (MARKOP AND STKLOC.[12:12]="1;"))#;02541000
PRTI ~ START ~ LINK.[16:10];                                            02542000
STEPX ~ LINK.[26:10] - 1;                                               02543000
WHILE BUMPPRTI { STEPX                 DO                               02544000
         BEGIN                                                          02545000
    IF STACKENDS THEN                                                   02546000
              BEGIN                                                     02547000
         STOP ~ LOCALPRTI ~ PRTI;                                       02548000
         EVALUATE (START, STOP);                                        02549000
         PRTI ~ LOCALPRTI;                                              02550000
         START ~ PRTI + 1;                                              02551000
         IF STACKEND THEN PRTI ~ STEPX + 1;                             02552000
              END;                                                      02553000
         END;                                                           02554000
    END  DOSET;                                                         02555000
INTEGER  PROCEDURE LIMIT (START, STOP);                                 02556000
         VALUE     START;                        COMMENT   LIMIT;       02557000
         INTEGER   START, STOP;                                         02558000
    BEGIN                                                               02559000
DEFINE   STACKENDS = STKLOC.[1:9] = 510 AND (X ~ STKLOC.[12:12] = "1;"  02560000
                                             OR X = "1~")#;             02561000
ALPHA X;                                                                02562000
BOOLEAN  LIMITED;                                                       02563000
PRTI ~ START;                                                           02564000
WHILE BUMPPRTI { STOP AND NOT LIMITED DO                                02565000
    IF STACKENDS THEN                                                   02566000
              BEGIN                                                     02567000
         LIMIT ~ PRTI;                                                  02568000
         LIMITED ~ TRUE;                                                02569000
              END                                                       02570000
    END FINDING THE LAST STACK LOCATION FOR AN EXPRESSION;              02571000
PROCEDURE STACKOUT (START, STOP, EQUAL, CHARS);                         02572000
         VALUE START, STOP, EQUAL;                                      02573000
         INTEGER START, STOP, CHARS;                                    02574000
         BOOLEAN EQUAL;            FORWARD;                             02575000
PROCEDURE DOTYPE (LINK, TOGGLES);                                       02576000
              VALUE LINK, TOGGLES;                                      02577000
              REAL LINK;                                                02578000
              BOOLEAN TOGGLES;                                          02579000
COMMENT DOCUMENT                                                        02580000
              PROCEDURES DOSET AND DOTYPE HANDLE SET AND TYPE STATEMENTS02581000
         THAT ARE BEING DONE UNDER CONTROL OF A DO STATEMENT.  DOSET IS 02582000
         DONE UNTIL A STACKEND ("1~" = TERMINATOR) IS FOUND IN THE STACK02583000
         AND TYPE IS DONE UNTIL THE LINK INDEX IS EXCEDED.  IF THE      02584000
         ALLVALUES TOGGLE IS ON, TYPEVALUES IS CALLED.                  02585000
;                                                                       02586000
    BEGIN                                                               02587000
STREAM PROCEDURE SKIPSIMOVE(SORC,DEST,NOCHAR,SKIPSI);                   02588000
    VALUE NOCHAR,SKIPSI;                                                02589000
    BEGIN SI~SORC; SI~SI+SKIPSI; DI~DEST; DS~NOCHAR CHR END;            02590000
STREAM PROCEDURE BLANKN(DEST,N); VALUE DEST,N;                          02591000
    BEGIN DI ~ DEST; DS ~ 8 LIT " "; SI ~ DEST; DS ~ N WDS END BLANKN;  02592000
INTEGER STEPX, N, FROM, I;                                              02593000
INTEGER  MAX, START, STOP;                                              02594000
DEFINE     FORMLOC =  FORMATS [FORMI, I]#,                              02595000
              TYPE =  FORMLOC.[ 2: 4]#,                                 02596000
              CHAR =  FORMLOC.[12: 6]#,                                 02597000
              WORD =  FORMLOC.[ 6: 6]#;                                 02598000
DEFINE   FORMTOG   = TOGGLES.[6:1]#,                                    02599000
         ALLVALUES = TOGGLES.[5:1]#;                                    02600000
INTEGER SCRATCHOT;                                                      02601000
REAL X;                                                                 02602000
BOOLEAN REEL;                                                           02603000
LABEL EXIT;                                                             02604000
TYPETOG ~ TRUE;                                                         02605000
X ~ 72;                                                                 02606000
SCRATCHOT ~ SCRATCHO;                                                   02607000
PRTI ~ START ~ LINK.[16:10];                                            02608000
STEPX ~ LINK.[26:10] - 1;                                               02609000
IF FORMTOG OR ONEFORM THEN                                              02610000
         BEGIN                                                          02611000
    X ~ 0;                                                              02612000
    FORMI ~ REAL (TOGGLES).[7:3];                                       02613000
    IF FORMI } MAXFORMS THEN                                            02614000
         BEGIN                                                          02615000
              FLAGIT(STMTERR,8);                                        02616000
              GO TO EXIT;                                               02617000
         END;                                                           02618000
    FORMI ~ USER | MAXFORMS + FORMI;                                    02619000
    MAX ~ FORMLOC.[36:12];                                              02620000
    N ~   FORMLOC.[12:12];                                              02621000
    IF FORMLOC = 0 THEN                                                 02622000
         BEGIN                                                          02623000
              FLAGIT(DSKMSG,11);                                        02624000
              GO TO EXIT;                                               02625000
         END ELSE                                                       02626000
    DO BEGIN                                                            02627000
         I ~ I + 1;                                                     02628000
         IF TYPE > 2 THEN                                               02629000
              BEGIN                                                     02630000
         SKIPSIMOVE(FORMLOC,SCRATCH[0],CHAR,3);                         02631000
         FORMATTER(SCRATCHO,CHAR,FALSE);                                02632000
         I ~ I +WORD;                                                   02633000
         SCRATCHO ~ SCRATCHOT ;                                         02634000
              END ELSE                                                  02635000
              BEGIN                                                     02636000
         STOP ~ LIMIT (START, STEPX);                                   02637000
         EVALUATE (START, STOP);                                        02638000
         START ~ STOP + 1;                                              02639000
         LISTREAL ~ PHONYBOOLE;                                         02640000
         X ~ X + 1;                                                     02641000
         BLANKN (SCRATCHO, CHAR DIV 8);                                 02642000
WRITE(SCRATCH[*],SUPERFORMAT[FORMLOC.[36:12]],LISTVAR,LISTREAL);        02643000
         FORMATTER(SCRATCHO,CHAR,FALSE);                                02644000
         SCRATCHO ~ SCRATCHOT;                                          02645000
         BUMPPRTI;                                                      02646000
              END                                                       02647000
         END UNTIL I = MAX;                                             02648000
    IF X ! N THEN                                                       02649000
         BEGIN                                                          02650000
              FLAGIT(DSKMSG,11);                                        02651000
              GO TO EXIT;                                               02652000
         END                                                            02653000
         END ELSE                                                       02654000
IF ALLVALUES THEN TYPEVALUES ELSE                                       02655000
DO       BEGIN                                                          02656000
    STOP ~ LIMIT (START, STEPX);                                        02657000
    STACKOUT (START +2, STOP, TRUE, X);                                 02658000
    EVALUATE (START, STOP);                                             02659000
    START ~ STOP + 1;                                                   02660000
    STACKOUT (0, 0, FALSE, X);                                          02661000
         END  UNTIL START } STEPX;                                      02662000
EXIT:                                                                   02663000
    END TYPING VARIABLES IN DO LOOP;                                    02664000
PROCEDURE FORMS;                                                        02665000
    BEGIN                                                               02666000
STREAM PROCEDURE MOVEFROMABS(SORC,DEST,NOCHAR,SKIPDI);                  02667000
    VALUE SORC,NOCHAR,SKIPDI;                                           02668000
    BEGIN SI~SORC; DI~DEST; DI~DI+SKIPDI; DS~NOCHAR CHR END;            02669000
INTEGER STREAM PROCEDURE INDEXNCR(N,I); VALUE N,I;                      02670000
    BEGIN DI ~ N; DI ~ DI + I; INDEXNCR ~ DI END OF INDEXNCR;           02671000
ALPHA STREAM PROCEDURE EXAMIN(NCR); VALUE NCR;                          02672000
    BEGIN SI ~ NCR; DI~LOC EXAMIN; DI ~ DI + 7; DS ~ CHR END EXAMIN;    02673000
INTEGER J, N, S, T, CHAR, C, G, K;                                      02674000
LABEL EXIT;                                                             02675000
ALPHA    A;                                                             02676000
DEFINE   FORMLOC   =    FORMATS [N, J ~ J + 1]#,                        02677000
         FTYPE     =    ACCUM1.[18: 6] = "F"#,                          02678000
         ETYPE     =    ACCUM1.[18: 6] = "E"#,                          02679000
         ITYPE     =    ACCUM1.[18: 6] = "I"#,                          02680000
         ATYPE     =    ACCUM1.[18: 6] = """#,                          02681000
         X         =    ACCUM1.[12: 6]#,                                02682000
         LINE      =    ACCUM1 = "4LINE "#,                             02683000
         LINEFEED  =    FORMLOC ~ 0 & 4 [ 2:44: 4] & 2 [12:42: 6]       02684000
                        & CRLF [18:36:12]#;                             02685000
FORMI ~ N ~ NUMBER - 1;                                                 02686000
IF N < 0 OR N } MAXFORMS THEN                                           02687000
    BEGIN                                                               02688000
         FLAGIT(STMTERR,8);                                             02689000
         GO TO EXIT;                                                    02690000
    END;                                                                02691000
N ~ USER | MAXFORMS + N;                                                02692000
WHILE EXAMIN (NCR) = " " DO NCR ~ INDEXNCR (NCR, 1);                    02693000
NCRT ~ NCR;                                                             02694000
LINEFEED;                                                               02695000
S ~ SCAN;                                                               02696000
DO       BEGIN                                                          02697000
    IF ITYPE THEN BEGIN T ~0; CHAR ~ IF X > 13 THEN 13 ELSE X END ELSE  02698000
    IF ETYPE THEN BEGIN T ~ 1; CHAR ~ IF X > 20 THEN 20 ELSE X END ELSE 02699000
    IF FTYPE THEN BEGIN                                                 02700000
         T ~ 2; CHAR ~ IF X > 12  THEN 12 ELSE X;                       02701000
         IF EXAMIN (NCR) = "." THEN BEGIN S ~SCAN; S ~ SCAN END         02702000
              ELSE BEGIN FLAGIT(STMTERR,14); GO TO EXIT END;            02703000
         IF NOT FTYPE THEN BEGIN FLAGIT(STMTERR,14); GO TO EXIT END;    02704000
         IF CHAR > 1 AND CHAR + X > 14 THEN X ~ 14 - CHAR;              02705000
         CHAR ~ (CHAR + X - 3) | 11 + X - 1;                            02706000
         IF CHAR = -11 THEN CHAR ~ 2;                                   02707000
         IF CHAR > 120 THEN CHAR ~ 120;                                 02708000
                   END ELSE                                             02709000
    IF ATYPE THEN BEGIN                                                 02710000
         IF A ~ EXAMIN (NCR) ! """ OR                                   02711000
              (A = """ AND INDEXNCR (NCRT, 1) = NCR) THEN               02712000
         DO S ~ SCAN UNTIL EXAMIN (NCR) = """ OR TERMINATOR;            02713000
         NCRT ~ INDEXNCR (NCRT, 1);                                     02714000
         K ~ CHAR ~ DELTANCR (NCRT, NCR);                               02715000
         IF CHAR > 63 OR TERMINATOR THEN                                02716000
              BEGIN                                                     02717000
                   FLAGIT(DSKMSG,12);                                   02718000
                   GO TO EXIT;                                          02719000
              END;                                                      02720000
         G ~ (K + 2) DIV 8;                                             02721000
         T ~ 3;                                                         02722000
         FORMLOC ~ 0 & T [ 2:44: 4] & G [ 6:42 : 6] & K [12:42: 6];     02723000
         MOVEFROMABS(NCRT,FORMATS[N,J],K,3);                            02724000
         J ~ J + G;                                                     02725000
         S ~ SCAN;                                                      02726000
                   END ELSE                                             02727000
    IF LINE THEN BEGIN LINEFEED; T ~ 4 END ELSE                         02728000
         BEGIN LISTSTEP ~ 0; FLAGIT(RUNERR,13);                         02729000
               FLAGIT(STMTERR,14); GO TO EXIT END;                      02729100
    K ~ DELTANCR (NCRT, NCR);                                           02730000
    IF T = 0 AND CHAR > 0 OR                                            02731000
       T = 1 AND CHAR > 6 OR                                            02732000
       T = 2 AND CHAR > 0 THEN                                          02733000
              BEGIN                                                     02734000
         C ~ C + 1;                                                     02735000
         FORMLOC ~ 0 & T [ 2:44: 4] & K [12:42: 6]                      02736000
                     & PHRASES [T, CHAR] [36:36:12];                    02737000
              END ELSE                                                  02738000
                   IF T < 3 THEN BEGIN FLAGIT(STMTERR,14); GO EXIT END; 02739000
    NCRT ~ NCR;                                                         02740000
    S ~ SCAN;                                                           02741000
         END UNTIL TERMINATOR OR FLAG;                                  02742000
FORMATS [N, 0] ~ IF FLAG THEN 0 ELSE J & C [12:36:12];                  02743000
EXIT:                                                                   02744000
    END BUILDING FORMATS;                                               02745000
PROCEDURE DIRECTOR;                                                     02746000
    BEGIN                                                               02747000
LABEL EXIT;                                                             02748000
ALLVALUES ~ FORMTOG ~ FALSE;                                            02749000
NCRT ~ SCAN;                                                            02750000
SETTOGGLES;                                                             02751000
IFTOG ~ TRUE;                                                           02752000
STACKI ~ PRTI;                                                          02753000
FORMI ~ 0;                                                              02754000
IF ALLVALUES AND NOT TYPETOG THEN                                       02755000
         BEGIN                                                          02756000
    IFPARTTOG ~ SCAN = 1 AND (ACCUM1 = "4PART " OR ACCUM1 = "4STEP ");  02757000
    IF NOT IFPARTTOG THEN BEGIN FLAGIT(STMTERR,5); GO TO EXIT END;      02758000
         END;                                                           02759000
IF SETTOG     THEN SET       ELSE                                       02760000
IF TYPETOG    THEN TYPE      ELSE                                       02761000
IF IFPARTTOG THEN                                                       02762000
         BEGIN                                                          02763000
    IFSTEPNO   ~ (NUMBER + .001) | 100;                                 02764000
    IFPARTNO ~ IFSTEPNO DIV 100;                                        02765000
    IFSTEPNO ~ IFSTEPNO MOD 100;                                        02766000
    NCRT ~ SCAN;                                                        02767000
         END ELSE BEGIN FLAGIT(STMTERR,11); GO TO EXIT END;             02768000
FORMTOG ~ FORMTOG OR ONEFORM;                                           02769000
EXIT:                                                                   02770000
    END  DIRECTING IF STATEMENT TRAFFIC;                                02771000
PROCEDURE IFS;                                                          02772000
    BEGIN                                                               02773000
INTEGER  STEPIT, STEPNT;                                                02774000
LABEL EXIT;                                                             02775000
TYPETOG ~ TRUE;                                                         02776000
PRTI ~ STEPIT ~ STACKI;                                                 02777000
EXPRESSION;                                                             02778000
TYPETOG ~ FALSE;                                                        02779000
IF NOT FLAG THEN                                                        02780000
         BEGIN                                                          02781000
    IF BOOLESTOP THEN                                                   02782000
              BEGIN                                                     02783000
         PRTI ~ PRTI - 1;                                               02784000
         STKLOC ~ GROUPMARK;                                            02785000
         STEPNT ~ BUMPPRTI;                                             02786000
              END ELSE BEGIN FLAGIT(STMTERR,12); GO TO EXIT END;        02787000
    IF NOT FLAG THEN                                                    02788000
              BEGIN                                                     02789000
         DIRECTOR;                                                      02790000
         IF(THENSTOP OR TERMINATOR)AND NOT FLAG THEN                    02791000
                   BEGIN                                                02792000
              STKLOC ~ GROUPMARK;                                       02793000
              THENPROG ~ IFPARTTOG OR IFSTEPTOG;                        02794000
              THENX ~ IF THENPROG THEN IFSTEPNO & IFPARTNO [37:44:4]    02795000
                                  ELSE PRTI;                            02796000
              BUMPPRTI;                                                 02797000
              ALLTOGS ~ FALSE & TRUE [1:47:1] & SETTOG  [10:47:1]       02798000
                          & TYPETOG [11:47:1] & ALLVALUES [13:47:1]     02799000
                          & THENPROG[12:47:1] & FORMTOG   [14:47:1]     02800000
                          & BOOLEAN (THENX) [18:37:11]                  02801000
                          & BOOLEAN (FORMI) [15:45: 3];                 02802000
                   END ELSE IF NOT FLAG THEN                            02803000
                        BEGIN FLAGIT(STMTERR,13); GO TO EXIT END;       02804000
              END;                                                      02805000
         IF NOT (TERMINATOR OR FLAG) THEN                               02806000
                   BEGIN                                                02807000
              DIRECTOR;                                                 02808000
              IF NOT FLAG THEN                                          02809000
                        BEGIN                                           02810000
                   ELSEPROG ~ IFPARTTOG OR IFSTEPTOG;                   02811000
              ELSEX ~ IF ELSEPROG THEN IFSTEPNO & IFPARTNO [37:44:4]    02812000
                                       ELSE PRTI;                       02813000
                   ALLTOGS ~ ALLTOGS & ALLVALUES [32:47:1]              02814000
                                     & SETTOG    [29:47:1]              02815000
                                     & TYPETOG   [30:47:1]              02816000
                                     & ELSEPROG  [31:47:1]              02817000
                                     & FORMTOG   [33:47:1]              02818000
                                     & BOOLEAN (ELSEX) [37:37:11]       02819000
                                     & BOOLEAN (FORMI) [34:45: 3];      02820000
                        END;                                            02821000
                   END;                                                 02822000
         END;                                                           02823000
STEPI ~ STEPIT;                                                         02824000
STEPN ~ STEPNT;                                                         02825000
TYPETOG ~ SETTOG ~ DOTOG ~ FALSE;                                       02826000
FORMI ~ 0;                                                              02827000
EXIT:                                                                   02828000
    END INTERPRETATION OF IF STATEMENTS;                                02829000
PROCEDURE TOS;                                                          02830000
    BEGIN                                                               02831000
INTEGER P, S;                                                           02832000
IF SCAN = 1 AND (ACCUM1 = "4PART " OR ACCUM1 = "4STEP ") THEN           02833000
         BEGIN                                                          02834000
    S ~ (NUMBER + .001) | 100;                                          02835000
    P ~ S DIV 100;                                                      02836000
    S ~ S MOD 100;                                                      02837000
    ALLTOGS ~ FALSE & BOOLEAN (P) [18:44:4] & BOOLEAN (S) [22:41:7];    02838000
         END ELSE FLAGIT(STMTERR,5);                                    02839000
    END SETTING LINKS FOR UNCONDITIONAL CHANGE IN CONTROL;              02840000
PROCEDURE PROCEDURES;                                                   02841000
    BEGIN                                                               02842000
INTEGER P, S;                                                           02843000
S ~ (NUMBER + .001) | 100;                                              02844000
P ~ S DIV 100;                                                          02845000
S ~ S MOD 100;                                                          02846000
ALLTOGS ~ FALSE & BOOLEAN (P) [18:44:4] & BOOLEAN (S) [22:41:7];        02847000
FORMTOG ~ TRUE;                                                         02848000
    END SETTING LINKS FOR EXECUTION OF PARTS;                           02849000
PROCEDURE STACKOUT (START, STOP, EQUAL, CHARS);                         02850000
         VALUE START, STOP, EQUAL;               COMMENT   STACKOUT;    02851000
         INTEGER START, STOP, CHARS;                                    02852000
         BOOLEAN EQUAL;                                                 02853000
    BEGIN                                                               02854000
STREAM PROCEDURE MOVER(SORC,DEST,N);                                    02855000
    VALUE SORC,DEST,N;                                                  02856000
    BEGIN SI ~ SORC; DI ~ DEST; DS ~ N CHR END OF MOVER;                02857000
INTEGER STREAM PROCEDURE INDEXNCR(N,I); VALUE N,I;                      02858000
    BEGIN DI ~ N; DI ~ DI + I; INDEXNCR ~ DI END OF INDEXNCR;           02859000
INTEGER COUNT, KEY, O, LWORDT;                                          02860000
REAL STACK, W;                                                          02861000
PRTI ~ START;                                                           02862000
LWORDT ~ LWORD;                                                         02863000
DO       BEGIN                                                          02864000
    STACK ~ STKLOC;                                                     02865000
    IF START ! STOP THEN KEY ~ STACK.[1:9];                             02866000
    WORD ~ " " & STACK [12:18:30];                                      02867000
    IF KEY = 510 THEN                                                   02868000
              BEGIN                                                     02869000
         COUNT ~ STACK.[12:6];                                          02870000
         IF O ~ STACK.[42: 6] = 0 OR COUNT > 3 THEN                     02871000
                   BEGIN                                                02872000
              W ~ STACK.[18:6];                                         02873000
              IF ((W = ";" OR W = "~") AND EQUAL) OR W = ":" THEN       02874000
                        BEGIN                                           02875000
                   WORD ~ "=     ";                                     02876000
                   COUNT ~ 1;                                           02877000
                        END  ELSE                                       02878000
              IF W = "~" THEN WORD ~ ";     "  ELSE                     02879000
              IF O ! 0 THEN                                             02880000
                        BEGIN                                           02881000
                   WORD ~ IF O = 11 THEN "SQRT  " ELSE                  02882000
                          IF O = 15 THEN "ARCTAN" ELSE                  02883000
                          IF O = 19 THEN "SIGN  " ELSE                  02884000
                                         BLANKS & STACK [12:18:30];     02885000
                   IF O = 22 THEN BEGIN WORD ~ "-     "; COUNT ~ 1 END; 02886000
                        END;                                            02887000
                   END;                                                 02888000
              END  ELSE                                                 02889000
    IF KEY = 511 THEN                                                   02890000
              BEGIN                                                     02891000
    WORD ~ 0 & USERPRT[IDBASE + STACK.[33:15]] [6:12:36];               02892000
         IF COUNT ~ WORD .[ 6:6] > 5 THEN COUNT ~ 5;                    02893000
              END  ELSE                                                 02894000
              BEGIN                                                     02895000
         IF START = STOP THEN STACK ~ PHONYBOOLE;                       02896000
         LISTREAL ~ STACK;                                              02897000
         IF STACK.[3:6] ! 0 THEN                                        02898000
                   BEGIN                                                02899000
              O ~ 91;                                                   02900000
              COUNT ~ 14;                                               02901000
                   END  ELSE                                            02902000
                   BEGIN                                                02903000
              COUNT ~ IF O ~ ABS (STACK) < 1000 THEN 4 ELSE             02904000
                      IF O < 10000000 THEN 8 ELSE 13;                   02905000
              O ~ COUNT + 3;                                            02906000
                   END;                                                 02907000
         WRITE(SCRATCH[*],SUPERFORMAT[O],LISTVAR,LISTREAL);             02908000
         LWORDT ~ SCRATCHO;                                             02909000
              END;                                                      02910000
FORMATTER(LWORDT,COUNT,CHARS ~ CHARS + COUNT > 71);                     02911000
LWORDT ~ LWORD;                                                         02912000
CHARS ~ IF CHARS > 71 THEN CHARS - 71 ELSE CHARS;                       02913000
         END  UNTIL BUMPPRTI > STOP;                                    02914000
FORMATTER(LBLANK,1,FALSE);                                              02915000
CHARS ~ IF CHARS > 71 THEN CHARS - 71 ELSE CHARS + 1;                   02916000
    END FORMATTING THE CONTENTS OF THE STACK BETWEEN START AND STOP;    02917000
PROCEDURE LINKUP;                                                       02918000
         BEGIN                                                          02919000
OWN INTEGER I;                                                          02920000
INTEGER JKTT, JK;                                                       02921000
REAL STEPT, ALLTOGST, JKT;                                              02922000
LABEL EXIT;                                                             02923000
DEFINE   J =  JK.[36:3]#, K = JK.[39: 9]#,                              02924000
         EVERYTHING =  0 & PART [5:44:4] & STPP [9:41:7]                02925000
                          & DOI [1:44:4]                                02926000
                         & STEPI [16:38:10] & STEPN [26:38:10]#,        02927000
         NOWSTEP   =    STEPS [J,K]#,                                   02928000
         PARTX     =    STEPS [J,K].[5:4]#,                             02929000
         STEPX     =    STEPS [J,K].[9:7]#,                             02930000
         TWELVE    =    [36:12]#,                                       02931000
         TAGALONG  =    JK ~ I+1; STEPS [J,K] ~  REAL (ALLTOGS);  #;    02932000
IF PART > 9 THEN BEGIN FLAGIT(STMTERR,9); GO TO EXIT END ELSE           02933000
         BEGIN                                                          02934000
PROGRAMTOG ~ FALSE;                                                     02935000
FORMTOG ~ FORMTOG OR ONEFORM;                                           02936000
ALLTOGS ~ ALLTOGS &     TYPETOG   [ 4:47:1]                             02937000
                  &     SETTOG    [ 3:47:1]                             02938000
                  &     DOTOG     [ 2:47:1]                             02939000
                  &     ALLVALUES [ 5:47:1]                             02940000
                  &     FORMTOG   [ 6:47:1]                             02941000
                  &BOOLEAN (FORMI)[ 7:45: 3];                           02942000
FORMI ~ 0;                                                              02943000
IF PARTS [USER].TWELVE = 0 THEN                                         02944000
         BEGIN                                                          02945000
    IF I = 0 THEN NOWSTEP ~ MARK & I [36:36:12];                        02946000
    I ~ JK ~ IF I = 0 THEN 2 ELSE I;                                    02947000
    PARTS [USER].TWELVE ~ I                                             02948000
         END  ELSE JK ~ PARTS [USER].TWELVE;                            02949000
WHILE NOWSTEP.TWELVE ! 0 AND PARTX < PART DO                            02950000
    BEGIN JKT ~ JK; JK ~ NOWSTEP.TWELVE END;                            02951000
WHILE NOWSTEP.TWELVE ! 0 AND PARTX { PART AND STEPX < STPP DO           02952000
    BEGIN JKT ~ JK; JK ~ NOWSTEP.TWELVE END;                            02953000
IF ERASETOG                                                             02954000
THEN BEGIN                                                              02955000
         IF ONESTEP                                                     02956000
         THEN BEGIN                                                     02957000
                   IF STEPX ! STPP                                      02958000
                   THEN BEGIN LISTSTEP ~ 0; FLAGIT(RUNERR,11);          02959000
                              GO TO EXIT END                            02960000
              END                                                       02961000
         ELSE IF ONEPART                                                02962000
              THEN BEGIN                                                02963000
                        IF PART = PARTX                                 02964000
                        THEN WHILE PART = PARTX DO                      02965000
                             BEGIN                                      02966000
                                  JKTT ~ JK;                            02967000
                                  JK ~ NOWSTEP.TWELVE;                  02968000
                             END                                        02969000
                        ELSE BEGIN LISTSTEP ~ 0; FLAGIT(RUNERR,11);     02970000
                                   GO TO EXIT END;                      02971000
                        JK ~ JKTT;                                      02972000
                   END                                                  02973000
              ELSE BEGIN LISTSTEP ~ (PART | 100 + STPP) / 100;          02974000
                         FLAGIT(RUNERR,0); GO TO EXIT END;              02975000
         IF ONEPART OR ONESTEP AND NOT STEPFLAG                         02976000
         THEN BEGIN                                                     02977000
                   STEPT ~ NOWSTEP.TWELVE;                              02978000
                   JK ~ JKT;                                            02979000
                   IF JKT = 0                                           02980000
                   THEN PARTS [USER].TWELVE ~ STEPT                     02981000
                   ELSE NOWSTEP.TWELVE ~ STEPT;                         02982000
              END                                                       02983000
    END                                                                 02984000
ELSE                                                                    02985000
IF NOWSTEP.TWELVE = 0 AND (PARTX  < PART OR                             02986000
                          (PARTX = PART AND STEPX < STPP)) THEN         02987000
         BEGIN                         COMMENT ADD NEW LINK            ;02988000
    NOWSTEP.TWELVE ~ I;                                                 02989000
    JK ~ I;                                                             02990000
    NOWSTEP ~ EVERYTHING;                                               02991000
    TAGALONG;                                                           02992000
    I ~ I + 2;                                                          02993000
         END  ELSE                                                      02994000
IF PARTX = PART AND STEPX = STPP THEN  COMMENT EXCHANGE LINKS          ;02995000
         BEGIN                                                          02996000
    STEPT ~ EVERYTHING;                                                 02997000
    STEPT.TWELVE ~ NOWSTEP.TWELVE;                                      02998000
    NOWSTEP ~ STEPT;                                                    02999000
    JK ~ JK + 1;                                                        03000000
    STEPS [J,K] ~ REAL (ALLTOGS);                                       03001000
         END  ELSE                                                      03002000
         BEGIN                         COMMENT INSERT LINK             ;03003000
WHILE PARTX { PART AND STEPX < STPP DO JK ~ NOWSTEP.TWELVE;             03004000
    STEPT ~ NOWSTEP;                                                    03005000
    NOWSTEP ~ EVERYTHING & I [36:36:12];                                03006000
    JK ~ JK + 1;                                                        03007000
    ALLTOGST ~ NOWSTEP;                                                 03008000
    NOWSTEP ~ REAL (ALLTOGS);                                           03009000
    JK ~ I;                                                             03010000
    NOWSTEP ~ STEPT;                                                    03011000
    JK ~ JK + 1;                                                        03012000
    NOWSTEP ~ ALLTOGST;                                                 03013000
    I ~ I + 2;                                                          03014000
         END                                                            03015000
         END                                                            03016000
;EXIT:                                                                  03017000
    END LINK UP;                                                        03018000
PROCEDURE GETLINK (PART, STPP, LAST, TOGGLES, FINIS, LINK);             03019000
COMMENT DOCUMENT                                                        03020000
              LINKUP AND GETLINK PERFORM ALL OF THE REQUIRED LINK-LIST  03021000
         FUNCTIONS.  LINKUP IS CALLED BY THE CONTROLLER WHEN PROGRAMTOG 03022000
         IS TRUE AND STEPFLAG IS FALSE.  PARTS [USER](INITIALLY ZERO)   03023000
         IS BUILT UP:  [12:4] = PERMANENT DO INDEX (DOIPERM),           03024000
                      [16:10] = PERMANENT ID INDEX (NEXTPRTIP),         03025000
                      [26:10] = PERMANENT STACK INDEX (STACKIP) AND THE 03026000
         INDICES FOR THIS USERS FIRST LINK WORD IN THE STEPS ARRAY:     03027000
         ROW = [36: 3] AND COLUMN [39: 9].  THE LINK WORD (LINK)        03028000
         CONTAINS: [5:4] THE PART NO FOR THIS STEP (PART),              03029000
                   [9:7] THE STEP NO FOR THIS STEP (STPP),              03030000
                   [16:10] THE INITIAL STACK INDEX FOR THIS STEP (STEPI)03031000
                   [26:10] THE FINAL   STACK INDEX FOR THIS STEP (STEPN)03032000
              AND A ROW AND COLUMN INDEX FOR THE NEXT LINK [36:3],[39:9]03033000
         HIGH-ORDER BITS ARE RESERVED FOR A DO INDEX.                   03034000
         THE COLUMN + 1 WORD OF STEPS CONTAINS ALL TOGGLE SETTINGS FOR A03035000
         PARTICULAR STEP.                                               03036000
              GETLINK SEARCHES STEPS FOR THE LINK AND TOGGLES AGREEING  03037000
         WITH THE PARAMETERS "PART" & "STPP".  "LAST" IS ZERO WHEN A    03038000
         LINK WORD IS FIRST REQUESTED. "TOGGLES"ACCEPTS THE TOGGLE WORD 03039000
         FOR A PARTICULAR STEP.  AND "FINIS" IS TRUE IF A PART OR STEP  03040000
         IS COMPLETE.                                                   03041000
;                                                                       03042000
         VALUE     PART, STPP;                                          03043000
         INTEGER   PART, STPP;                                          03044000
         REAL LAST, LINK;                                               03045000
         BOOLEAN   TOGGLES, FINIS;                                      03046000
    BEGIN                                                               03047000
INTEGER  JK;                                                            03048000
REAL LINKT;                                                             03049000
LABEL EXIT;                                                             03050000
DEFINE   J =  JK.[36:3]#,   K  =  JK.[39:9]#,                           03051000
         TWELVE =  [36:12]#,                                            03052000
         PARTX  =  STEPS [J,K].[5:4]#, STEPX  =  STEPS [J,K].[9:7]#,    03053000
         NOWSTEP = STEPS [J,K]#;                                        03054000
IF LAST ! 0 THEN JK ~ LAST.TWELVE ELSE IF PARTS [USER].TWELVE = 0       03055000
    THEN BEGIN LISTSTEP ~ 0; FLAGIT(RUNERR,11); GO TO EXIT END          03056000
         ELSE JK ~ PARTS[USER].TWELVE;                                  03057000
LINKT ~ LINK;                                                           03058000
IF NOT FLAGT THEN                                                       03059000
         BEGIN                                                          03060000
    WHILE PARTX < PART DO JK ~ NOWSTEP.TWELVE;                          03061000
    IF PART = PARTX AND (STPP = 0 OR STPP = STEPX)                      03062000
         THEN BEGIN  LINK ~ NOWSTEP;                                END 03063000
         ELSE IF DODOSTEP AND PARTX = PART THEN                         03064000
                   BEGIN                                                03065000
              WHILE STPP > STEPX AND JK ! 0 AND PARTX = PART            03066000
                   DO JK ~ NOWSTEP.TWELVE;                              03067000
              IF STPP = STEPX AND PARTX = PART                          03068000
                        THEN BEGIN                                      03069000
                        LINK ~ NOWSTEP;                                 03070000
                             END ELSE                                   03071000
                        BEGIN LISTSTEP~0;FLAGIT(RUNERR,11);GO EXIT END; 03072000
                   END ELSE                                             03073000
              BEGIN LISTSTEP ~ 0; FLAGIT(RUNERR,11); GO EXIT END;       03074000
         END;                                                           03075000
IF LINK ! LINKT THEN BEGIN JK ~ JK + 1; TOGGLES ~ BOOLEAN (NOWSTEP) END;03076000
JK ~ LINK.TWELVE;                                                       03077000
                                                                        03078000
EXIT:                                                                   03079000
FINIS ~  LINK = LINKT OR JK = 0 OR FLAG OR PARTX > PART;                03080000
    END GETTING LINKWORD AND TOGGLES;                                   03081000
PROCEDURE DODO (DOI);                                                   03082000
              VALUE DOI;    INTEGER DOI;         FORWARD;               03083000
PROCEDURE DOIF (LINK, TOGGLES, PART, STPP, DOFINIS, DOLINK, FINIS);     03084000
              VALUE TOGGLES;                                            03085000
              REAL LINK, DOLINK;                                        03086000
              INTEGER PART,STPP;                                        03087000
              BOOLEAN TOGGLES, DOFINIS, FINIS;             FORWARD;     03088000
PROCEDURE DRIVER (PART, STPP, LINK, TOGGLES, DOLINK, DOFINIS, FINIS);   03089000
         INTEGER PART, STPP;                                            03090000
         REAL LINK, DOLINK;                                             03091000
         BOOLEAN   TOGGLES, FINIS, DOFINIS;                             03092000
    BEGIN                                                               03093000
INTEGER P, S;                                                           03094000
OWN INTEGER RECURSE;                                                    03095000
BOOLEAN DONE, DTOGGLES;                                                 03096000
REAL LAST, DLINK;                                                       03097000
LABEL STKERR;                                                         %103098000
RESULTI ~ 0;                                                            03098100
IF RETURNSTK THEN GO TO STKERR;                                       %103099000
IF RECURSE ~ RECURSE + 1 > RECURSEMAX THEN                              03100000
         BEGIN LISTSTEP ~ 0; FLAGIT(RUNERR,3); RECURSE ~ 0;             03101000
               RETURNSTK ~ TRUE; GO TO STKERR         END ELSE        %103102000
IF   TOGGLES.[3:1] THEN DOSET (LINK)                               ELSE 03103000
IF   TOGGLES.[4:1] THEN DOTYPE (LINK, TOGGLES)                     ELSE 03104000
IF   TOGGLES.[1:1] THEN                                                 03105000
         DOIF (LINK, TOGGLES, PART, STPP, DOFINIS, DOLINK, FINIS)  ELSE 03106000
IF   TOGGLES.[5:1] THEN                                                 03107000
         BEGIN                                                          03108000
    PART ~ REAL (TOGGLES).[18:4];      STPP ~ REAL (TOGGLES.[22:7]);    03109000
    LINK ~ DOLINK ~ 0;       DOFINIS ~ FALSE;     FINIS ~ TRUE;         03110000
    TIGHTLOOPCHECK ~ TIGHTLOOPCHECK + 1;                                03111000
         END                                                       ELSE 03112000
IF   TOGGLES.[6:1] THEN                                                 03113000
         BEGIN                                                          03114000
    P ~ REAL (TOGGLES).[18:4];        S ~ REAL (TOGGLES).[22:7];        03115000
    DO        BEGIN                                                     03116000
         GETLINK (P, S, LAST, DTOGGLES, DONE, DLINK);                   03117000
         DONE ~ S ! 0 OR DONE OR STEPFLAG;                              03118000
         DRIVER (P, S, DLINK, DTOGGLES, LINK, DOFINIS, DONE);           03119000
         IF RETURNSTK THEN GO TO STKERR;                              %103120000
         LAST ~ DLINK;                                                  03121000
              END  UNTIL DONE OR STEPFLAG;                              03122000
    PART ~ DOPRTT; STPP ~ DOSTPP; LINK ~ SVLINK; DOLINK ~ SVDOLINK;     03122100
    TOGGLES ~ SVTOGGLES; FINIS ~ SVFINIS; DOFINIS ~ SVDOFINIS;          03122200
         END                                                       ELSE 03123000
IF   TOGGLES.[2:1] THEN DODO (LINK.[1:4])                          ELSE 03124000
IF NOT STEPFLAG THEN FLAGIT(STMTERR,0);                                 03125000
IF NOT RETURNSTK THEN RECURSE ~ RECURSE - 1;                          %103126000
STKERR:                                                               %103127000
    END  DIRECTING TRAFFIC TO VARIOUS STATEMENT TYPES;                  03128000
PROCEDURE DOIF (LINK, TOGGLES, PART, STPP, DOFINIS, DOLINK, FINIS);     03129000
              VALUE TOGGLES;                                            03130000
              REAL LINK, DOLINK;                                        03131000
              INTEGER PART,STPP;                                        03132000
              BOOLEAN TOGGLES, DOFINIS, FINIS;                          03133000
    BEGIN                                                               03134000
REAL IFLINK, LAST;                                                      03135000
INTEGER THENSTART, ELSESTART, PNO, SNO;                                 03136000
BOOLEAN  IFTOGGLES, GOGO, PROGRAM;                                      03137000
LABEL STKERR;                                                         %103138000
DOPRTT ~ PART; DOSTPP ~ STPP; SVLINK ~ LINK; SVDOLINK ~ DOLINK;         03138100
SVTOGGLES ~ TOGGLES; SVFINIS ~ FINIS; SVDOFINIS ~ DOFINIS;              03138200
EVALUATE (LINK.[16:10], THENSTART ~ LINK.[26:10]);                      03139000
IF GOGO ~ BOOLEAN (PHONYBOOLE) THEN                                     03140000
         BEGIN     COMMENT BOOLEAN IS TRUE - THEN BRANCH;               03141000
    IF PROGRAM ~ TOGGLES.[12:1]        THEN                             03142000
              BEGIN                                                     03143000
         PNO ~ REAL (TOGGLES).[18:4];                                   03144000
         SNO ~ REAL (TOGGLES).[22:7];                                   03145000
         IF TOGGLES . [13:1] THEN                                       03146000
              IFTOGGLES ~ FALSE&TOGGLES [3:10:2]&TOGGLES[5:13:5] ;      03147000
              END                      ELSE                             03148000
              BEGIN                                                     03149000
         IFTOGGLES ~ FALSE & TOGGLES [3:10:2] & TOGGLES [5:13:5];       03150000
         IFLINK    ~ 0 & THENSTART   [16:38:10]                         03151000
                   & REAL (TOGGLES)  [26:19:10];                        03152000
              END                                                       03153000
         END                 ELSE                                       03154000
IF GOGO ~ (REAL (TOGGLES).[29:19] ! 0) THEN                             03155000
         BEGIN  COMMENT BOOLEAN IS FALSE - ELSE IS PRESENT;             03156000
    IF PROGRAM ~ TOGGLES.[31:1]   THEN                                  03157000
              BEGIN                                                     03158000
         PNO ~ REAL (TOGGLES).[37:4];                                   03159000
         SNO ~ REAL (TOGGLES).[41:7];                                   03160000
         IF TOGGLES . [32:1] THEN                                       03161000
              IFTOGGLES ~ FALSE & TOGGLES [3:29:2] & TOGGLES [5:32:5] ; 03162000
              END                      ELSE                             03163000
              BEGIN                                                     03164000
         IFTOGGLES ~ FALSE & TOGGLES [3:29:2] & TOGGLES [5:32:5];       03165000
         ELSESTART ~ IF TOGGLES.[12:1] THEN LINK.[26:10]                03166000
                                       ELSE REAL (TOGGLES).[19:10] + 1; 03167000
         IFLINK ~ 0 & ELSESTART [16:38:10] & REAL (TOGGLES) [26:38:10]; 03168000
              END;                                                      03169000
         END;                                                           03170000
IF GOGO THEN                                                            03171000
    IF REAL (IFTOGGLES.[4:2]) = 1 THEN                                  03172000
              BEGIN                                                     03173000
         PART ~ PNO;                                                    03174000
         STPP ~ SNO;                                                    03175000
         LINK ~ DOLINK ~ 0;                                             03176000
         DOFINIS ~ FALSE;                                               03177000
         FINIS ~ TRUE;                                                  03178000
         TOGGLES ~ IFTOGGLES;                                           03178100
         TIGHTLOOPCHECK ~ TIGHTLOOPCHECK + 1;                           03178200
              END                ELSE                                   03179000
DO       BEGIN                                                          03180000
    IF PROGRAM THEN                                                     03181000
              BEGIN                                                     03182000
         GETLINK (PNO, SNO, LAST, IFTOGGLES, FINIS, IFLINK);            03183000
         FINIS ~ FINIS OR SNO ! 0 OR STEPFLAG;                          03184000
              END  ELSE FINIS ~ TRUE;                                   03185000
    DRIVER(PART,STPP,IFLINK,IFTOGGLES,DOLINK,DOFINIS,FINIS);            03185900
    IF RETURNSTK THEN GO TO STKERR;                                   %103186000
    PNO ~ PART;    SNO ~ STPP;                                          03187000
         LAST ~ IFLINK;                                                 03188000
         END UNTIL FINIS OR STEPFLAG;                                   03189000
STKERR:                                                               %103190000
    END  EVALUATION AND EXECUTION OF IF STATEMENT;                      03191000
PROCEDURE DODO (DOI);                                                   03192000
         VALUE DOI; INTEGER DOI;                                        03193000
         COMMENT                                                        03194000
          DOI IS USED IN THE DEFINITION OF DOLOC;                       03195000
BEGIN                                                                   03196000
REAL DOSCRIPTOR, LAST, LINK;                                            03197000
INTEGER COUNTER, PNO, SNO;                                              03198000
BOOLEAN  FINIS, VOID, PENDTOG;                                          03199000
BOOLEAN TOTOG;                                                          03200000
DEFINE   LOOP =    DOSCRIPTOR.[ 4: 1]#,                                 03201000
         PART =    DOSCRIPTOR.[ 5: 4]#,                                 03202000
         STPP =    DOSCRIPTOR.[ 9: 7]#,                                 03203000
         DOSTEP =  DOSCRIPTOR.[2:1]#,                                   03204000
         START=    DOSCRIPTOR.[16:10]#,                                 03205000
         STOP =    DOSCRIPTOR.[26:10]#;                                 03206000
LABEL STKERR;                                                         %103207000
DOSCRIPTOR ~ DOLOC;                                                     03208000
PNO ~ PART;   SNO ~ STPP;                                               03209000
WHILE NOT FINIS DO                                                      03210000
         BEGIN                                                          03211000
    DODOSTEP ~ BOOLEAN (DOSTEP) OR TOTOG;                               03212000
    GETLINK (PNO , SNO,  LAST, ALLTOGS, FINIS, LINK);                   03213000
    IF TOTOG THEN BEGIN SNO ~ 0; DODOSTEP ~ BOOLEAN (DOSTEP) END;       03214000
    DRIVER  (PNO, SNO,   LINK, ALLTOGS, LINK , FINIS, VOID);            03215000
    IF RETURNSTK THEN GO TO STKERR;                                   %103216000
    TOTOG ~ FALSE & ALLTOGS [47:5:1];                                   03217000
    LAST ~ LINK;                                                        03218000
    IF FINIS AND LOOP = 1 THEN                                          03219000
              BEGIN                                                     03220000
         EVALUATE (START, STOP);                                        03221000
         PENDTOG ~ BOOLEAN (PHONYBOOLE + 1);                            03222000
         IF DOI ! 0 THEN                                                03223000
                   BEGIN                                                03224000
              COUNTER ~ COUNTER + 1;                                    03225000
              FINIS ~ NOT PENDTOG;                                      03226000
                   END;                                                 03227000
         LAST ~ LINK ~ RESULTI ~ 0;                                     03228000
         PNO ~ PART;    SNO ~ STPP;                                     03229000
              END;                                                      03230000
    IF TIGHTLOOPCHECK > MAXLOOP OR COUNTER > MAXLOOP THEN               03231000
              BEGIN                                                     03232000
         PENDTOG ~ FALSE;                                               03233000
         TIGHTLOOPCHECK ~ 0;                                            03234000
         LISTSTEP ~ 0;                                                  03235000
         FLAGIT(RUNERR,2);                                              03236000
         FINIS ~ TRUE;                                                  03237000
              END ;                                                     03238000
    FINIS ~ FINIS OR STEPFLAG OR DODOSTEP;                              03239000
    DODOSTEP ~ FALSE;                                                   03240000
         END;                                                           03241000
IF STEPFLAG OR (DOI = 0 AND NOT PENDTOG) THEN                           03242000
    BEGIN                                                               03243000
         STATOS[USER].[5:1] ~ 0;                                        03244000
         DOLOC ~ 0;                                                     03245000
         FORMATTER(LCRLF,2,FALSE);                                      03246000
    END;                                                                03247000
STKERR:                                                               %103248000
    END DOING DO LOOP DESCRIBED BY DOSCRIPTOR;                          03249000
PROCEDURE DOCONTROLLER;                                                 03250000
    BEGIN                                                               03251000
INTEGER S, PNO, SNO, NCRT;                                              03252000
DEFINE   DIRECTDO  = USERPRT[DOBASE]#,                                  03253000
         LOOP      = DIRECTDO.[ 4: 1]#,                                 03254000
         PART      = DIRECTDO.[ 5: 4]#,                                 03255000
         STPP      = DIRECTDO.[ 9: 7]#,                                 03256000
         DOSTEP =  DIRECTDO  .[2:1]#,                                   03257000
         START     = DIRECTDO.[16:10]#,                                 03258000
         STOP      = DIRECTDO.[26:10]#;                                 03259000
DEFINE   TYPETOGT= ALLTOGS.[4:1]#,                                      03260000
         SETTOGT = ALLTOGS.[3:1]#,                                      03261000
         DOTOGT  = ALLTOGS.[2:1]#,                                      03262000
         TOTOGT  = REAL (ALLTOGS.[4:2]) = 1#,                           03263000
         IFTOGT  = ALLTOGS.[1:1]#;                                      03264000
REAL N;                                                                 03265000
REAL LAST , LINK;                                                       03266000
LABEL EXIT;                                                             03267000
BOOLEAN DOPART, SIMPLE, FINIS, VOID, ALLTOGST;                          03268000
S ~ SCAN;                                                               03269000
DOPART ~ ACCUM1 = "4PART ";                                             03270000
DOSTEP ~ REAL(ACCUM1 = "4STEP ");                                       03271000
IF NOT (DOPART OR BOOLEAN (DOSTEP) OR PENDTOG) THEN                     03272000
    BEGIN FLAGIT(STMTERR,4); GO TO EXIT END ELSE                        03273000
         BEGIN                                                          03274000
      IF DOPART OR BOOLEAN (DOSTEP) THEN                                03275000
              BEGIN                                                     03276000
         N ~ NUMBER;                                                    03277000
         PNO ~ ENTIER (N | 100 + .001);                                 03278000
         SNO ~ PNO MOD 100;                                             03279000
         PNO ~ PNO DIV 100;                                             03280000
         PART ~ PNO;         STPP ~ SNO;                                03281000
         S ~ SCAN;                                                      03282000
              END;                                                      03283000
    SIMPLE ~ TERMINATOR OR PENDTOG;                                     03284000
    LAST ~ 0;                                                           03285000
    ALLTOGST ~ ALLTOGS;                                                 03286000
    ALLTOGS ~ FALSE;                                                    03287000
    IF ACCUM1 = "5UNTIL" THEN                                           03288000
              BEGIN                                                     03289000
         START ~ PRTI  ~ STACKI;                                        03290000
         TYPETOG ~ TRUE;        LOOP ~ 1;                               03291000
         EXPRESSION;                                                    03292000
         STOP ~ PRTI;                                                   03293000
         TYPETOG ~ FALSE;                                               03294000
              END       ELSE                                            03295000
    IF NOT SIMPLE THEN BEGIN FLAGIT(STMTERR,6); GO TO EXIT END;         03296000
         END;                                                           03297000
IF PROGRAMTOG AND NOT STEPFLAG THEN                                     03298000
         BEGIN                                                          03299000
    IF DOI ~ DOI + 1 > 9 THEN BEGIN FLAGIT(STMTERR,7); GO TO EXIT END;  03300000
    DOLOC ~ DIRECTDO;                                                   03301000
    STACKI ~ PRTI;                                                      03302000
         END ELSE                                                       03303000
    IF NOT STEPFLAG THEN STATOS[USER].[5:1] ~ 1;                        03304000
EXIT:                                                                   03305000
    END  DOCONTROLLER;                                                  03306000
PROCEDURE CONTROLLER;                                                   03307000
COMMENT DOCUMENT                                                        03308000
              DOCONTROLLER AND CONTROLLER SERVE AS DRIVERS FOR THE      03309000
         PREVIOUSLY DISCUSSED PROCEDURES AND THE FIRST AND ONLY         03310000
         EXECUTABLE PROGRAM STATEMENT IS A CALL ON CONTROLLER.         ;03311000
    BEGIN                                                               03312000
INTEGER  S, N;                                                          03313000
LABEL USERERROR;                                                        03314000
LABEL DISKIO;                                                           03315000
INITIALIZE;                                                             03316000
FILLREQUEST;                                                            03317000
WHILE NOT DONE DO                                                       03318000
         BEGIN                                                          03319000
    INITIALIZEUSER;                                                     03320000
IF DISCONNECT THEN                                                      03321000
  BEGIN                                                                 03322000
    DISCONNECT ~ FALSE;                                                 03323000
    GO TO USERERROR;                                                    03324000
  END;                                                                  03325000
IF SAVETOG OR RECALLTOG THEN                                            03326000
    BEGIN                                                               03327000
      SAVETOG ~ RECALLTOG ~ FALSE;                                      03328000
      GO TO DISKIO;                                                     03329000
    END;                                                                03330000
IF FLAG THEN BEGIN SIMPLEOUTPUT; GO TO USERERROR END;                   03331000
IF RESTARTTOG AND FIRSTINPUT THEN                                       03332000
    BEGIN                                                               03333000
         FIRSTINPUT ~ FALSE;                                            03334000
         SIMPLEOUTPUT;                                                  03335000
         GO TO USERERROR                                                03336000
    END;                                                                03337000
    S ~ SCAN;                                                           03338000
IF PENDTOG AND TERMINATORS THEN DOTOG ~ TRUE ELSE                       03339000
  IF TERMINATORS THEN BEGIN IF NOT RESTARTTOG THEN SIMPLEOUTPUT END ELSE03340000
    IF S ! 1 THEN                                                       03341000
         BEGIN                                                          03342000
              FLAGIT(STMTERR,0);                                        03343000
              GO TO USERERROR;                                          03344000
         END ELSE                                                       03345000
              SETTOGGLES;                                               03346000
IF NOT RESTARTTOG AND NOT STOREPROG AND ((NOT TYPETOG AND ALLVALUES)    03347000
    OR IFTOG OR PROCEDURETOG) THEN                                      03348000
         BEGIN                                                          03349000
              FLAGIT(OTHER,12);                                         03350000
              GO TO USERERROR;                                          03351000
         END;                                                           03352000
IF PROGRAMTOG AND (ERASETOG OR QUITTOG OR JOSSTOG OR                    03353000
                  LISTTOG OR FORMTOG) THEN                              03354000
         BEGIN                                                          03355000
              FLAGIT(OTHER,13);                                         03356000
              GO TO USERERROR;                                          03357000
         END;                                                           03358000
         IF TYPETOG     THEN TYPE      ELSE                             03359000
         IF SETTOG      THEN SET       ELSE                             03360000
         IF ALLVALUES   THEN TOS       ELSE                             03361000
         IF PROCEDURETOG THEN PROCEDURES ELSE                           03362000
         IF QUITTOG     THEN QUIT      ELSE                             03363000
         IF JOSSTOG     THEN JOSS      ELSE                             03364000
         IF FORMTOG     THEN FORMS     ELSE                             03365000
         IF IFTOG       THEN IFS       ELSE                             03366000
         IF DOTOG       THEN DOCONTROLLER   ELSE                        03367000
         IF LISTTOG     THEN DISKREAD ELSE                              03368000
         IF ERASETOG    THEN ERASE ELSE                                 03369000
         IF NOT TERMINATORS OR (TERMINATORS AND STOREPROG) THEN         03370000
              BEGIN                                                     03371000
                 IF TERMINATOR THEN ACCUM1 ~ BLANKS ;                   03372000
                 FLAGIT(STMTERR,1);                                     03373000
                 GO TO USERERROR;                                       03374000
              END ;                                                     03375000
DISKIO:                                                                 03376000
    IF STACKI > STKMAX - 50 THEN FLAGIT(OTHER,5);                       03377000
    IF NEXTPRTI > PRTMAX - 10 THEN FLAGIT(OTHER,6);                     03378000
    IF TERMINATE THEN QUIT;                                             03379000
    IF PROGRAMTOG AND NOT STEPFLAG THEN LINKUP ELSE STACKI ~ STEPI;     03380000
USERERROR:                                                              03381000
IF STOREPROG THEN                                                       03382000
    BEGIN                                                               03383000
         STOREPROG ~ FALSE;                                             03384000
         STATOS[USER].[4:1] ~ 0;                                        03385000
         DISKWRITER;                                                    03386000
    END;                                                                03387000
IF FLAG THEN SIMPLEOUTPUT                                               03388000
    ELSE IF QUITTOG THEN QUITTOG ~ FALSE                                03389000
    ELSE IF NOT RESTARTTOG AND USER ! 0 THEN FORMATTER(LXON,1,TRUE);    03390000
RESULTI ~ 0;  STEPFLAG ~ FALSE;                                         03391000
ALLSTEPTOGS ~ PROGRAMTOG ~ FALSE;                                       03392000
ALLVALUES ~ FORMTOG ~ ALLTOGS ~ FALSE;                                  03393000
TYPETOG ~ SETTOG ~ JOSSTOG ~ IFTOG ~ DOTOG ~ FALSE;                     03394000
NEXTPRTIP ~ NEXTPRTI;   STACKIP ~ STACKI;                               03395000
DOIPERM ~ DOI;          ARRAYIP ~ ARRAYI;                               03396000
IF NOT DONE THEN IF RESTARTTOG THEN                                     03397000
         DISKREAD                                                       03398000
    ELSE FILLREQUEST;                                                   03399000
         END                                                            03400000
    END CONTROLLER;                                                     03401000
IF USERS > 29 THEN                                                      03402000
    BEGIN                                                               03403000
         WRITE(SPO,EOJFMT);                                             03404000
         GO TO EOJ;                                                     03405000
    END;                                                                03406000
CONTROLLER;                                                             03407000
CLOSE(STORAGE,PURGE);                                                   03408000
BEGIN                                                                   03408010
    STREAM PROCEDURE DELINK (WHO);                                      03408020
         BEGIN                                                          03408030
    DI ~ WHO; DI ~ DI + 8; SKIP 2 DB; DS ~ 1 RESET;                     03408040
    DI ~ DI + 4; SKIP 3 DB; DS ~ 15 RESET; SKIP 2 DB;                   03408050
    DS ~ 1 RESET; DI ~ DI + 4; SKIP 3 DB; DS ~ 15 RESET;                03408060
         END OF DELINK;                                                 03408070
    DELINK(DUMMY);                                                      03408080
END;                                                                    03408090
EOJ:                                                                    03409000
END.                                                                    03410000
END;END.        LAST CARD ON 0CRDING TAPE                               99999999
