BEGIN REAL COMMON;                                                      00010000
%.............CANDE PAPER TAPE PROGRAM - SOURCE VERSION - 2/70.....     00010100
FILE TWX 14 (2,10);                                                     00010200
FILE SOURCE DISK SERIAL          (2,10,300       ); % SOURCE FILE       00010300
FILE PATCH  DISK SERIAL [20:600] (2,10,300,SAVE 1); % PATCH FILE        00010400
FILE WRKFIL DISK SERIAL [20:600] (2,10,300,SAVE 1); % WORK FILE         00010500
FILE NEWTAB DISK SERIAL [20: 30] (2,30,300,SAVE 1); % TAB FILE          00010600
SAVE ARRAY  SORTA,MERGE[0:512],  A,B,N[0:30],  T[0:10];                 00010700
ARRAY SORTAA,SORTBB[0:96,0:32];                                         00010800
LABEL  COMPARE,  ENDMERGE,  EOF1,  EOF2,  EOF3,  EOF4,  EOF5,  EXIT,    00010900
NEXTP,  PCYCLE,  READ1,  READ2,  READ3,  STARTMERGE,  SKIP,             00011000
TLOOP,  WRITENEW;                                                       00011100
BOOLEAN  BFULL,  BRAAK,  CKSEQ,  ERRTOG,  EQLTOG,  MERGTOG,             00011200
SEQMODE,  SFLG,  SORTOG;                                                00011300
REAL  A1,  A2,  A3,  A4,  AAPTR,  AASEQ,  AAWORD,  ASEQ,                00011400
AWORD,  B1,  B2,  B3,  B4,  B5,  BASE,  BLNKCNT,  CODE,                 00011500
EOFMARK,  ERRCNT,  I,  IA,  IAA,  IBB,  INCR,  J,  LINE,                00011600
NCT,  NPTR,  NSEQ,  NWORD,  O1,  O2,  PATCNT,                           00011700
N1,  N2,  PPTR,  PREV,  PSEQ,  PWORD,  RECSZ,  SEQ,  SNAME,             00011800
SZN,  SZO,  TSEQ,  TRNCNT,  USER;                                       00011900
DEFINE LEFTARROW="~"#;                                                  00012000
%***********************************************************************00012100
STREAM PROCEDURE MOVE(N,A,B); VALUE N; % MOVE N WDS FROM A TO B         00012200
%***********************************************************************00012300
   BEGIN LOCAL M;                                                       00012400
   SI:=LOC N; DI:=LOC M; DI:=DI+1; DS:=7 CHR;                           00012500
   SI:=A; DI:=B; DS:=N WDS; M(DS:=32 WDS; DS:=32 WDS);                  00012600
   END;                                                                 00012700
%***********************************************************************00012800
PROCEDURE SORT(L,U); % RECURSIVE SORT ROUTINE                           00012900
%***********************************************************************00013000
VALUE L,U;                                                              00013100
REAL L,U;                                                               00013200
   BEGIN REAL I,J,K,M;                                                  00013300
   LABEL AGAIN,TOP,BOTTOM,EXIT;                                         00013400
   IF L NEQ U THEN                                                      00013500
   IF L+1=U THEN                                                        00013600
      BEGIN IF SORTA[L].[21:27] GTR SORTA[U].[21:27] THEN               00013700
      DOUBLE(SORTA[L],SORTA[U],~,SORTA[U],SORTA[L]);                    00013800
      END                                                               00013900
   ELSE                                                                 00014000
      BEGIN M:=(U+L) DIV 2;                                             00014100
      SORT(L,M); SORT(M+1,U);                                           00014200
      J:=M+1;                                                           00014300
      FOR L:=L STEP 1 WHILE SORTA[L].[21:27] LSS SORTA[J].[21:27] DO;   00014400
      IF L LEQ M THEN                                                   00014500
         BEGIN I:=K:=L;                                                 00014600
AGAIN:   IF I GTR M THEN GO TO TOP;                                     00014700
         IF J GTR U THEN GO TO BOTTOM;                                  00014800
         IF SORTA[I].[21:27] LEQ SORTA[J].[21:27] THEN GO TO BOTTOM;    00014900
TOP:     MERGE[K]:=SORTA[J];                                            00015000
         J:=J+1;                                                        00015100
         IF K:=K+1 LEQ U THEN GO TO AGAIN ELSE GO EXIT;                 00015200
BOTTOM:  MERGE[K]:=SORTA[I];                                            00015300
         I:=I+1;                                                        00015400
         IF K:=K+1 LEQ U THEN GO TO AGAIN;                              00015500
EXIT:    MOVE(U-L+1,MERGE[L],SORTA[L]);                                 00015600
         END                                                            00015700
      END                                                               00015800
   END SORT;                                                            00015900
%***********************************************************************00016000
PROCEDURE DISKWAIT(I,A,S,D);                                            00016100
VALUE I,S,D; REAL I,S,D; ARRAY A[*]; COMMUNICATE(-8);                   00016200
%***********************************************************************00016300
PROCEDURE TWXOUT(A,N,T);                                                00016400
%***********************************************************************00016500
VALUE N,T;                                                              00016600
REAL A,N,T;                                                             00016700
   BEGIN  COMMUNICATE(-11);                                             00016800
   BRAAK := BOOLEAN(T); % MCP RETURNS 1 IF BREAK OCCURRED.              00016900
   END;                                                                 00017000
%***********************************************************************00017100
PROCEDURE MSG(NO,SEQ); VALUE NO,SEQ; REAL NO,SEQ;                       00017200
%***********************************************************************00017300
   BEGIN REAL SIZ,SZ;                                                   00017400
   REAL STREAM PROCEDURE NCONV(N,SIZ); VALUE N;                         00017500
      BEGIN                                                             00017600
      SI:=LOC N; DI:=LOC NCONV; DS:=8DEC; DI:=DI-8; DS:=7FILL;          00017700
      DI:=LOC NCONV; SI:=LOC NCONV; IF SC=" " THEN                      00017800
         BEGIN                                                          00017900
         8(IF SC=" " THEN SI:=SI+1 ELSE                                 00018000
            BEGIN DS:=CHR; TALLY:=TALLY+1; END);                        00018100
         END ELSE TALLY:=8;                                             00018200
      N:=TALLY; SI:=LOC N; DI:=SIZ; DS:=WDS;                            00018300
      END PROCEDURE NCONV;                                              00018400
   %....................................................................00018500
   REAL STREAM PROCEDURE M1(A,N,SIZ); VALUE N,SIZ;                      00018600
      BEGIN                                                             00018700
      DI:=A; DS:=7LIT"RECORD "; SI:=LOC N; DS:= SIZ CHR;                00018800
      DS:=9 LIT " DELETED."; TALLY:=16; M1:=TALLY;                      00018900
      END STREAM PROCEDURE M1;                                          00019000
   %....................................................................00019100
   REAL STREAM PROCEDURE M2(A,N,SIZ); VALUE N,SIZ;                      00019200
      BEGIN                                                             00019300
      DI:=A; DS:=7LIT"RECORD "; SI:=LOC N; DS:=SIZ CHR;                 00019400
      DS:=21LIT" IS NOT IN YOUR FILE."; TALLY:=28; M2:=TALLY;           00019500
      END STREAM PROCEDURE M2;                                          00019600
   %....................................................................00019700
   REAL STREAM PROCEDURE M3(A,N,SIZ); VALUE N,SIZ;                      00019800
      BEGIN                                                             00019900
      DI:=A; DS:=24LIT"IMPROPER FIX FOR RECORD ";                       00020000
      SI:=LOC N; DS:= SIZ CHR; TALLY:=24; M3:=TALLY;                    00020100
      END STREAM PROCEDURE M3;                                          00020200
   %....................................................................00020300
   REAL STREAM PROCEDURE M4(A,N,SIZ); VALUE N,SIZ;                      00020400
      BEGIN                                                             00020500
      DI:=A; DS:=33LIT"MISSING GROUP MARK IN FIX RECORD ";              00020600
      SI:=LOC N; DS:=SIZ CHR; TALLY:=33; M4:=TALLY;                     00020700
      END STREAM PROCEDURE M4;                                          00020800
   %....................................................................00020900
   REAL STREAM PROCEDURE M5(A,N,SIZ); VALUE N,SIZ;                      00021000
      BEGIN                                                             00021100
      DI:=A; DS:=41LIT"CANNOT LOCATE YOUR FIX STRING FOR RECORD ";      00021200
      SI:=LOC N; DS:= SIZ CHR; TALLY:=41; M5:=TALLY;                    00021300
      END STREAM PROCEDURE M5;                                          00021400
   %....................................................................00021500
   REAL STREAM PROCEDURE M6(A,N,SIZ); VALUE N,SIZ;                      00021600
      BEGIN                                                             00021700
      DI:=A; DS:=39LIT"NOT ENOUGH ROOM FOR YOUR FIX IN RECORD ";        00021800
      SI:=LOC N; DS:= SIZ CHR; TALLY:=39; M6:=TALLY;                    00021900
      END STREAM PROCEDURE M6;                                          00022000
   %....................................................................00022100
   REAL STREAM PROCEDURE M7(A,N,SIZ); VALUE N,SIZ;                      00022200
      BEGIN                                                             00022300
      DI:=A; SI:=LOC N; DS:=SIZ CHR;                                    00022400
      DS:=25LIT" EMPTY RECORDS DISCARDED."; TALLY:=25; M7:=TALLY;       00022500
      END STREAM PROCEDURE M7;                                          00022600
   %....................................................................00022700
   REAL STREAM PROCEDURE M8(A,N,SIZ); VALUE N,SIZ;                      00022800
      BEGIN                                                             00022900
      DI:=A; SI:=LOC N; DS:= SIZ CHR;                                   00023000
      DS:=46LIT" RECORDS DISCARDED (MISSING SEQUENCE NUMBERS).";        00023100
      TALLY:=46; M8:=TALLY;                                             00023200
      END STREAM PROCEDURE M8;                                          00023300
   %....................................................................00023400
   REAL STREAM PROCEDURE M9(A,N,SIZ); VALUE N,SIZ;                      00023500
      BEGIN                                                             00023600
      DI:=A; SI:=LOC N; DS:= SIZ CHR;                                   00023700
      DS:=30LIT" RECORDS TRUNCATED (TOO LONG)."; TALLY:=30; M9:=TALLY;  00023800
      END STREAM PROCEDURE M9;                                          00023900
   %....................................................................00024000
   REAL STREAM PROCEDURE M10(A);                                        00024100
         BEGIN DI:=A; DS:=5LIT"WAIT."; TALLY:=5; M10:=TALLY; END;       00024200
   %....................................................................00024300
   SEQ := NCONV(SEQ,SIZ);                                               00024400
   IF NO=1 THEN SZ:=M1(A,SEQ,SIZ) ELSE                                  00024500
   IF NO=2 THEN SZ:=M2(A,SEQ,SIZ) ELSE                                  00024600
   IF NO=3 THEN SZ:=M3(A,SEQ,SIZ) ELSE                                  00024700
   IF NO=4 THEN SZ:=M4(A,SEQ,SIZ) ELSE                                  00024800
   IF NO=5 THEN SZ:=M5(A,SEQ,SIZ) ELSE                                  00024900
   IF NO=6 THEN SZ:=M6(A,SEQ,SIZ) ELSE                                  00025000
   IF NO=7 THEN SZ:=M7(A,SEQ,SIZ) ELSE                                  00025100
   IF NO=8 THEN SZ:=M8(A,SEQ,SIZ) ELSE                                  00025200
   IF NO=9 THEN SZ:=M9(A,SEQ,SIZ) ELSE                                  00025300
      BEGIN SZ:=M10(A); SIZ:=0; END;                                    00025400
   TWXOUT(A[0],(SIZ+SZ),1);                                             00025500
   END PROCEDURE MSG;                                                   00025600
%***********************************************************************00025700
DEFINE TRB=(IF SB THEN DS:=SET ELSE DS:=RESET;SKIP SB)#;                00025800
DEFINE FTC=SI:=SI+3; DI:=DI+5; SKIP 3 DB;15TRB#;                        00025900
DEFINE CTF=SI:=SI+5; SKIP 3 SB; DI:=DI+3;15TRB#;                        00026000
%***********************************************************************00026100
STREAM PROCEDURE RETURN(A,B);                                           00026200
%***********************************************************************00026300
   BEGIN LOCAL AT,BT;                                                   00026400
   SI:=LOC A; DI:=LOC AT; FTC;                                          00026500
   SI:=LOC B; DI:=LOC BT; FTC;                                          00026600
   SI:=LOC BT; DI:=LOC A; CTF;                                          00026700
   SI:=LOC AT; DI:=LOC B; CTF;                                          00026800
   DI:=AT; SI:=LOC B; DS:=WDS;                                          00026900
   DI:=BT; SI:=LOC A; DS:=WDS;                                          00027000
   END;                                                                 00027100
%***********************************************************************00027200
PROCEDURE SWAP;                                                         00027300
%***********************************************************************00027400
   BEGIN                                                                00027500
   ARRAY TS,TM[0:1];                                                    00027600
   RETURN(SORTA,TS); RETURN(MERGE,TM);                                  00027700
   END PROCEDURE SWAP;                                                  00027800
%***********************************************************************00027900
REAL STREAM PROCEDURE DECONV(X); VALUE X;                               00028000
   BEGIN SI:=LOC X; DI:=LOC DECONV; DS:= 8 DEC; END;                    00028100
%***********************************************************************00028200
REAL STREAM PROCEDURE OCTCONV(X);                                       00028300
   BEGIN SI:=X; DI:=LOC OCTCONV; DS:=8 OCT; END;                        00028400
%***********************************************************************00028500
REAL STREAM PROCEDURE WHEREIS(X); % GET ADDRESS OF "X"                  00028600
   BEGIN SI:=X; WHEREIS:=SI; END;                                       00028700
%***********************************************************************00028800
REAL PROCEDURE SIZ(A1,A2); VALUE A1,A2; REAL A1,A2; % GET SIZE FROM ADRS00028900
SIZ:=(A2.[33:15]-A1.[33:15])|8+A2.[30:3]-A1.[30:3];                     00029000
%***********************************************************************00029100
REAL STREAM PROCEDURE INPSCAN(A1,A3,B1,B4,CKSEQ,PTSEQ,SEQ);             00029200
%***********************************************************************00029300
VALUE A1,B1,B4,CKSEQ,PTSEQ;                                             00029400
   BEGIN LOCAL AR,SV,DV,T,FIXTOG; LABEL L0,L1,FIXCHK,EXIT;              00029500
   COMMENT ROUTINE TO SCAN PAPER TAPE INPUT RECORDS .                   00029600
   A1 IS ADDRESS OF A[0], A3 IS ADDRESS OF LEFTARROW IN INPUT RECORD,   00029700
   B1 IS ADDRESS OF B[0], B4 IS ADDRESS OF B[10] IF DATA, B[9] IF NOT   00029800
   CKSEQ IS TRUE IF SEQ. NO. SHOULD APPEAR IN RECORD,                   00029900
   PTSEQ IS TRUE IF SEQ. NO. IS TO BE PLACED IN SEQ. FIELD,             00030000
   SEQ IS OCTAL VALUE OF SEQ. NUMBER .                                  00030100
   VALUE RETURNED TO INPSCAN IS:                                        00030200
   0 = SEQUENCE NUMBER FOUND IN RECORD, OR CKSEQ IS FALSE               00030300
   IF CKSEQ:::                                                          00030400
   .....1 = DELETE ( SEQ. NUMBER FOLLOWED BY LEFT ARROW ),              00030500
   .....2 = SEQUENCE NUMBER NOT FOUND IN RECORD,                        00030600
   .....3 = FIX INSTRUCTION,                                            00030700
   4 = EMPTY RECORD, (1ST. CHR IS LEFT ARROW)                           00030800
   IF CKSEQ:::                                                          00030900
   .....5 = INCORRECT FIX,                                              00031000
   6 = QMK INPUT ( 1ST. CHR IS QUESTION MARK )                          00031100
   END OF COMMENT;                                                      00031200
   SI:=A1; 2(SI:=SI+40); % POINT TO END OF INPUT RECORD                 00031300
   2(40(SI:=SI-1; IF SC=LEFTARROW THEN JUMP OUT 2 TO L0));              00031400
L0: AR:=SI; SI:=LOC AR; SI:=SI+5; DI:=LOC A1; DI:=DI+5;                 00031500
   IF 3SC=DC THEN % THIS IS AN EMPTY RECORD                             00031600
      BEGIN                                                             00031700
      TALLY:=4; INPSCAN:=TALLY; GO TO EXIT;                             00031800
      END;                                                              00031900
   SI:=LOC AR; DI:=A3; DS:=WDS; % RETURN ADDRESS OF LAST LEFT ARROW     00032000
   SI:=A1; % POINT TO START OF TAPE RECORD                              00032100
   IF SC GTR "9" THEN % QUESTION MARK IS 1ST. CHARACTER                 00032200
      BEGIN                                                             00032300
      TALLY:=6; INPSCAN:=TALLY; GO TO EXIT;                             00032400
      END;                                                              00032500
   CKSEQ( % ENTER THIS LOOP IF LOOKING FOR SEQ. NO. OR "FIX"            00032600
   63(IF SC=" " THEN SI:=SI+1 ELSE JUMP OUT); % SCAN TO CHR.            00032700
   IF SC="*" THEN GO TO FIXCHK; % "FIX" INSTRUCTION                     00032800
   IF SC="F" THEN % POSSIBLE "FIX" INSTRUCTION                          00032900
      BEGIN                                                             00033000
      SV:=SI; SI:=SI+1; IF SC="I" THEN                                  00033100
         BEGIN                                                          00033200
         SI:=SI+1; IF SC="X" THEN                                       00033300
            BEGIN                                                       00033400
FIXCHK:     SI:=SI+1; TALLY:=1; FIXTOG:=TALLY;                          00033500
            TALLY:=3; INPSCAN:=TALLY; % "FIX" CODE                      00033600
            10(IF SC=" " THEN SI:=SI+1 ELSE JUMP OUT);                  00033700
            SV:=SI; % KEEP THIS LOCATION IF A "FIX"                     00033800
            END;                                                        00033900
         END;                                                           00034000
      SI:=SV; % IF NOT A "FIX"                                          00034100
      END;                                                              00034200
   IF SC GEQ "0" THEN IF SC LEQ "9" THEN ; % TEST FOR NUMBER            00034300
   IF TOGGLE THEN % NEXT CHR. IS A DIGIT                                00034400
      BEGIN                                                             00034500
      SV:=SI; TALLY:=1; SI:=SI+1;                                       00034600
      7(IF SC LSS "0" THEN JUMP OUT; IF SC GTR "9" THEN JUMP OUT;       00034700
      TALLY:=TALLY+1; SI:=SI+1);                                        00034800
      SI:=SV; T:=TALLY; DI:=SEQ; DS:= T OCT; % PUT SEQ. NO. IN "SEQ"    00034900
      IF SC=LEFTARROW THEN % CHECK FOR END OF RECORD                    00035000
         BEGIN                                                          00035100
         SV:=SI; SI:=LOC SV; SI:=SI+5; DI:=LOC AR; DI:=DI+5;            00035200
         IF 3SC=DC THEN % END OF RECORD                                 00035300
            BEGIN                                                       00035400
            TALLY:=1; FIXTOG(TALLY:=5); INPSCAN:=TALLY;                 00035500
            JUMP OUT TO EXIT;                                           00035600
            END;                                                        00035700
         SI:=SV;                                                        00035800
         END; % IF LEFTARROW                                            00035900
      JUMP OUT;                                                         00036000
      END; % IF SEQUENCE NUMBER IN INPUT RECORD                         00036100
   TALLY := 2;  FIXTOG(TALLY:=5); INPSCAN := TALLY;                     00036200
   ); % END CKSEQ LOOP                                                  00036300
   SV:=SI; DI:=B1; DS:=8LIT" "; SI:=B1; DS:=9 WDS; SI:=SV; DI:=B1;      00036400
   2(40(IF SC=LEFTARROW THEN % CHECK FOR END OF RECORD                  00036500
           BEGIN                                                        00036600
           SV:=SI; SI:=LOC SV; SI:=SI+5;                                00036700
           DV:=DI; DI:=LOC AR; DI:=DI+5;                                00036800
           IF 3SC=DC THEN % END OF RECORD                               00036900
              BEGIN                                                     00037000
              SI:=SV; DI:=DV; JUMP OUT 2 TO L1;                         00037100
              END;                                                      00037200
           SI:=SV; DI:=DV;                                              00037300
           END; % IF LEFTARROW                                          00037400
        DS:=CHR));                                                      00037500
L1: FIXTOG(DS:=LIT LEFTARROW); % KEEP LEFT ARROW IF A "FIX"             00037600
   PTSEQ(SI:=SEQ; DI:=B4; DS:=8 DEC); % PUT SEQ.NO. IN SEQ. FIELD       00037700
EXIT:                                                                   00037800
   END INPSCAN;                                                         00037900
%***********************************************************************00038000
BOOLEAN STREAM PROCEDURE FIXCHK(A1,O1,O2,N1,N2,A3); VALUE A1,A3;        00038100
%***********************************************************************00038200
COMMENT A1 IS ADDRESS OF A[0],                                          00038300
O1,O2 ARE START/FINISH ADDRESS OF "OLD STRING",                         00038400
N1,N2 ARE START/FINISH ADDRESS OF "NEW STRING".                         00038500
A3 IS ADDRESS OF LAST LEFT ARROW IN RECORD                              00038600
ROUTINE EXAMINES "FIX" SYNTAX AND ESTABLISHES VALUES FOR                00038700
O1,O2,N1 AND N2;                                                        00038800
   BEGIN LOCAL SV,D; LABEL EXIT;                                        00038900
   DI:=A3; DS:=LIT LEFTARROW; SI:=A1; DI:=LOC D;                        00039000
   20(IF SC EQL " " THEN SI:=SI+1 ELSE JUMP OUT); % SCAN TO CHAR.       00039100
   IF TOGGLE THEN GO TO EXIT; % EMPTY FIELD                             00039200
   DI:=LOC D; DI:=DI+7; DS:=CHR; % SAVE DELIMITER                       00039300
   IF SC=D THEN GO TO EXIT; % NO STRING                                 00039400
   IF SC = LEFTARROW THEN                                               00039500
      BEGIN                                                             00039600
      SV:=SI; SI:=LOC SV; SI:=SI+5; DI:=LOC A3; DI:=DI+5;               00039700
      IF 3SC=DC THEN % LEFT ARROW REPLACEMENT                           00039800
         BEGIN                                                          00039900
         SI:=SI-1; SV:=SI; SI:=LOC SV; DI:=O1; DS:=WDS; SI:=SV;         00040000
         SI:=SI+1; SV:=SI; SI:=LOC SV; DI:=O2; DS:=WDS;                 00040100
         SI:=LOC SV; DI:=N1; DS:=WDS; SI:=SV;                           00040200
         SI:=SI+1; SV:=SI; SI:=LOC SV; DI:=N2; DS:=WDS;                 00040300
         TALLY:=1; FIXCHK:=TALLY; GO TO EXIT;                           00040400
         END LEFT ARROW REPLACEMENT;                                    00040500
      SI:=SV;                                                           00040600
      END; % IF LEFTARROW                                               00040700
   SV:=SI; SI:=LOC SV; DI:=O1; DS:=WDS; SI:=SV; % START OF OLD STRING   00040800
   63(IF SC=LEFTARROW THEN % CHECK FOR END OF RECORD                    00040900
         BEGIN                                                          00041000
         SV:=SI; SI:=LOC SV; SI:=SI+5; DI:=LOC A3; DI:=DI+5;            00041100
         IF 3SC=DC THEN JUMP OUT TO EXIT;                               00041200
         SI:=SV;                                                        00041300
         END;                                                           00041400
      IF SC NEQ D THEN SI:=SI+1 ELSE JUMP OUT);                         00041500
   IF TOGGLE THEN GO TO EXIT; % MISSING 2ND DELIMITER                   00041600
   SV:=SI; SI:=LOC SV; DI:=O2; DS:=WDS; SI:=SV; %END OLD STRING         00041700
   SI:=SI+1; SV:=SI; SI:=LOC SV; DI:=N1; DS:=WDS; SI:=SV; % NEW STRING  00041800
   63(IF SC=LEFTARROW THEN % CHECK FOR END OF RECORD                    00041900
         BEGIN                                                          00042000
         SV:=SI; SI:=LOC SV; SI:=SI+5; DI:=LOC A3; DI:=DI+5;            00042100
         IF 3SC=DC THEN JUMP OUT ELSE SI:=SV;                           00042200
         END;                                                           00042300
      SI:=SI+1);                                                        00042400
   SI:=LOC SV; DI:=N2; DS:=WDS; % END NEW STRING                        00042500
   TALLY:=1; FIXCHK:=TALLY;                                             00042600
EXIT:                                                                   00042700
   END STREAM PROCEDURE FIXCHK;                                         00042800
%***********************************************************************00042900
BOOLEAN STREAM PROCEDURE LOCATE(B1,B2,B3,B4,L,O1,SZO);                  00043000
%***********************************************************************00043100
COMMENT B1 IS ADDRESS OF B[0],                                          00043200
B2 IS ADDRESS OF START OF "EXISTING" STRING,                            00043300
B3 IS ADDRESS OF CHARACTER FOLLOWING LAST NON-BLANK CHR. IN RECORD,     00043400
B4 IF ADDRESS OF B[9] IF NOT TYPE DATA, OF B[10] IF TYPE DATA           00043500
L IS RECORD SIZE,(2|)36 CHR. IF NOT TYPE DATA, (2|)40 CHR. IF TYPE DATA.00043600
ROUTINE MATCHES "OLD STRING" AT ADDRESS O1,LENGTH SZO WITH              00043700
CONTENTS OF RECORD FOR "FIX" STATEMENT,AND SETS B2 AND B3 IF MATCHED;   00043800
VALUE B1,B4,L,O1,SZO;                                                   00043900
   BEGIN LOCAL SV,D; LABEL L1,L2,EXIT;                                  00044000
   SI:=O1; DI:=LOC D; DI:=DI+7; DS:=CHR; % SAVE FIRST CHARACTER         00044100
   SI:=B1;                                                              00044200
   2(L(IF SC=D THEN                                                     00044300
      BEGIN                                                             00044400
      SV:=SI; DI:=O1; IF SZO SC = DC THEN                               00044500
         BEGIN                                                          00044600
         SI:=LOC SV; DI:=B2; DS:=WDS; JUMP OUT 2 TO L1;                 00044700
         END;                                                           00044800
      SI:=SV;                                                           00044900
      END;                                                              00045000
   SI:=SI+1));                                                          00045100
   GO TO EXIT;                                                          00045200
L1: SI:=B4; SI:=SI-1;                                                   00045300
   2(L(IF SC=" " THEN SI:=SI-1 ELSE JUMP OUT 2 TO L2));                 00045400
L2: SI:=SI+1; SV:=SI; SI:=LOC SV; DI:=B3; DS:=WDS;                      00045500
   TALLY:=1; LOCATE:=TALLY;                                             00045600
EXIT:                                                                   00045700
   END STREAM PROCEDURE LOCATE;                                         00045800
%***********************************************************************00045900
STREAM PROCEDURE EDIT(B2,B4,B5,SZO,N1,SZN,SFLG);                        00046000
%***********************************************************************00046100
COMMENT B2 IS STARTING ADDRES OF "EXISTING" STRING,                     00046200
B4 IS ADDRESS OF B[9] IF NOT TYPE DATA, OF B[10] IF TYPE DATA,          00046300
B5 IS ADDRESS OF B[20],                                                 00046400
SZO IS LENGTH OF "EXISTING" STRING,                                     00046500
N1 IS STARTING ADDRESS OF REPLACEMENT STRING,                           00046600
SZN IS LENGTH OF REPLACEMENT STRING,                                    00046700
SFLG IS TRUE IF NOT TYPE DATA FILE.                                     00046800
ROUTINE REPLACES "OLD" STRING WITH "NEW" STRING FOR "FIX";              00046900
VALUE B2,B4,B5,SZO,N1,SZN,SFLG;                                         00047000
   BEGIN LOCAL SEQ;                                                     00047100
   SFLG(SI:=B4; DI:=LOC SEQ; DS:=WDS); % SAVE SEQUENCE NO.              00047200
   DI:=B4; 2(DS:=40LIT" ");                                             00047300
   SI:=B2; SI:=SI+SZO; DI:=B5; 2(DS:=40CHR);                            00047400
   SI:=N1; DI:=B2; DS:=SZN CHR;                                         00047500
   SI:=B5; 2(DS:=40CHR);                                                00047600
   SFLG(SI:=LOC SEQ; DI:=B4; DS:=WDS);                                  00047700
   END STREAM PROCEDURE EDIT;                                           00047800
%***********************************************************************00047900
STREAM PROCEDURE OUTFORMAT(A1,B1,B4,SQSH,SFLG);                         00048000
%***********************************************************************00048100
COMMENT A1 IS ADDRESS OF A[0], B1 IS ADDRESS OF B[0],                   00048200
B4 IS ADDRESS OF B[9] IF NOT TYPE DATA, OF B[10] IF TYPE DATA,          00048300
SQSH IS TRUE IF "SQUASHED" OPTION SET.                                  00048400
SFLG IS TRUE IF NOT TYPE DATA FILE,                                     00048500
ROUTINE REFORMATS RECORD FOR OUTPUT TO REMOTE STATION;                  00048600
VALUE A1,B1,B4,SQSH,SFLG;                                               00048700
   BEGIN LOCAL SV,SEQ; LABEL EXIT;                                      00048800
   DI:=A1; DS:=8LIT" "; SI:=A1; DS:=9WDS; DI:=A1;                       00048900
   SFLG(SI:=B4; DI:=LOC SEQ; DS:=WDS; % SAVE SEQ. NUMBER                00049000
   DI:=LOC SEQ; DS:= 7 FILL; SI:=LOC SEQ; DI:=A1;                       00049100
   8(IF SC=" " THEN SI:=SI+1 ELSE DS:=CHR);                             00049200
   DS:=LIT" "; SV:=DI; DI:=B4; DS:=8LIT" "; DI:=SV);                    00049300
   SI:=B1;                                                              00049400
   SQSH(                                                                00049500
   2(40( IF SC=" " THEN                                                 00049600
      BEGIN SI:=SI+1; IF SC NEQ " " THEN DS:=LIT" "; END                00049700
   ELSE DS:=CHR));                                                      00049800
   JUMP OUT TO EXIT);                                                   00049900
   2(DS:=40CHR); DS:=LIT" ";                                            00050000
EXIT:                                                                   00050100
   END STREAM PROCEDURE OUTFORMAT;                                      00050200
%***********************************************************************00050300
%***********************************************************************00050400
EOFMARK:=100000000;                                                     00050500
A[0]:=0; A1:=WHEREIS(A[0]); % SET "A" ADDRESSES                         00050600
DISKWAIT(1,A,30,COMMON); % GET ESP RECORD                               00050700
LINE:=DECONV(A[1].[40:8]); % DECIMAL VALUE OF LINE NO                   00050800
SNAME := "  " & "1S"[6:36:12] & LINE[18:30:18];                         00050900
SFLG := A[1].[3:1]=0; % ON IF TYPE DATA FILE                            00051000
A4:=WHEREIS(A[10-REAL(SFLG)]);                                          00051100
B[0]:=0; B1:=WHEREIS(B[0]); % "B" ADDRESSES                             00051200
B4:=WHEREIS(B[10-REAL(SFLG)]); B5:=WHEREIS(B[20]);                      00051300
RECSZ:= 40 - 4 | REAL(SFLG); % 1/2 RECORD LENGTH                        00051400
USER := A[2];                                                           00051500
IF SEQMODE := A[7] GTR 0 THEN % SEQUENCE MODE OPERATION                 00051600
   BEGIN                                                                00051700
   INCR := A[8].[21:27]; % SEQUENCE INCREMENT                           00051800
   BASE := A[7].[21:27] - INCR;                                         00051900
   END;                                                                 00052000
FILL NEWTAB WITH SNAME & "T"[12:42:6],USER; % "1T" TAB FILE             00052100
FILL PATCH  WITH SNAME,USER; % "1S" PATCH FILE                          00052200
FILL WRKFIL WITH SNAME,USER; % "1S" WORK FILE                           00052300
FILL SOURCE WITH  A[3],USER; % SOURCEFILE NAME                          00052400
IF NOT SFLG THEN % TYPE DATA FILE                                       00052500
   BEGIN                                                                00052600
      DO BEGIN % TRANSFER RECORDS FROM SOURCE, IF ANY                   00052700
      READ(SOURCE,10,A[*])[EOF1];                                       00052800
      WRITE(WRKFIL,10,A[*]);                                            00052900
      END UNTIL FALSE;                                                  00053000
                                                                        00053100
EOF1:                                                                   00053200
                                                                        00053300
   CLOSE(SOURCE);                                                       00053400
                                                                        00053500
READ2:                                                                  00053600
                                                                        00053700
   READ(TWX[STOP],10,A[*]); % READ PAPER TAPE RECORDS                   00053800
   IF N1:=INPSCAN(A1,A3,B1,B4,FALSE,FALSE,SEQ)=6 THEN GO TO EOF2;       00053900
   IF N1=4 THEN GO TO READ2; % EMPTY RECORD                             00054000
   WRITE(WRKFIL,10,A[*]);                                               00054100
   GO TO READ2;                                                         00054200
                                                                        00054300
EOF2:                                                                   00054400
                                                                        00054500
   TWXOUT(A[0],0,1); MSG(10,0); % "WAIT."                               00054600
   LOCK(WRKFIL);                                                        00054700
   GO TO EXIT;                                                          00054800
   END; % IF TYPE DATA FILE                                             00054900
PPTR := PATCNT := PREV := -1;                                           00055000
CKSEQ   := IF SEQMODE THEN FALSE ELSE TRUE;                             00055100
ERRTOG  := SORTOG := MERGTOG := FALSE;                                  00055200
BLNKCNT := ERRCNT := TRNCNT :=  0;                                      00055300
%.....                                                                  00055400
READ3:                                                                  00055500
%.....                                                                  00055600
READ(TWX[STOP],10,A[*]); % READ PAPER TAPE RECORDS                      00055700
IF SEQMODE THEN IF NOT ERRTOG THEN SEQ:=BASE:=BASE+INCR;                00055800
IF N1:=INPSCAN(A1,A3,B1,B4,CKSEQ,TRUE,SEQ)=6 THEN GO TO EOF3;           00055900
IF N1=2 OR N1 GTR 3 THEN % ERROR                                        00056000
   BEGIN                                                                00056100
   IF N1=2 THEN ERRCNT:=ERRCNT+1 % MISSING SEQUENCE NUMBER              00056200
   ELSE IF N1=4 THEN BLNKCNT:=BLNKCNT+1 % EMPTY RECORD                  00056300
   ELSE IF N1=5 THEN ERRCNT:=ERRCNT+1; % MISSING SEQ. NO. IN FIX        00056400
   ERRTOG:=TRUE; % DONT BUMP SEQUENCE NUMBER IF IN SEQ. MODE            00056500
   GO TO READ3; % SKIP THIS RECORD                                      00056600
   END;                                                                 00056700
IF A3.[33:15] GTR A4 THEN TRNCNT:=TRNCNT+1; % TRUNCATED RECORD          00056800
PWORD:=SEQ & (PATCNT:=PATCNT+REAL(N1 NEQ 1))[4:32:16] & N1[1:46:2];     00056900
IF N1 NEQ 1 THEN WRITE(PATCH,10,B[*]); % DONT SAVE DELETE RECORDS       00057000
PPTR := PPTR + 1;                                                       00057100
ERRTOG := FALSE;                                                        00057200
IF N1 GTR 0 THEN MERGTOG := TRUE; % MERGE WILL BE REQD.                 00057300
SORTAA[PPTR.[35:8],PPTR.[43:5]] := PWORD;                               00057400
IF NOT SEQMODE THEN IF SEQ LSS PREV THEN SORTOG := TRUE;                00057500
PREV := SEQ;                                                            00057600
GO TO READ3;                                                            00057700
%....                                                                   00057800
EOF3:                                                                   00057900
%....                                                                   00058000
TWXOUT(A[0],0,1); MSG(10,0); % "WAIT."                                  00058100
IF BLNKCNT GTR 0 THEN MSG(7,BLNKCNT); % "EMPTY RECORDS DISCARDED"       00058200
IF ERRCNT  GTR 0 THEN MSG(8,ERRCNT);  % "MISSING SEQ. NUMBERS"          00058300
IF TRNCNT  GTR 0 THEN MSG(9,TRNCNT);  % "TRUNCATED RECORDS"             00058400
IF NOT SORTOG THEN GO TO STARTMERGE; % NO SORT REQUIRED                 00058500
% .......................START SORT ROUTINE........................     00058600
AAPTR := IF PPTR GTR 511 THEN 511 ELSE PPTR;                            00058700
FOR I := 0 STEP  32  UNTIL  AAPTR  DO                                   00058800
FOR J := 0 STEP   1  UNTIL  31     DO                                   00058900
SORTA[I+J]:=SORTAA[I.[35:8],J]; % MOVE TO SORTA, 512 WDS. MAX           00059000
SORT(0,AAPTR); % CALL SORT ROUTINE                                      00059100
FOR I := 0 STEP 1 UNTIL  AAPTR DO                                       00059200
SORTAA[ I.[35:8] , I.[43:5] ] := SORTA[I]; % MOVE BACK TO SORTAA        00059300
WHILE AAPTR LSS PPTR DO % SORT/MERGE REMAINDER IF PPTR GTR 511          00059400
   BEGIN                                                                00059500
   N2 := (N1:=AAPTR+1) + 511;                                           00059600
   IF N2 GTR PPTR THEN N2 := PPTR;                                      00059700
   FOR I := N1  STEP  32  UNTIL N2 DO                                   00059800
   FOR J := 0   STEP   1  UNTIL 31 DO                                   00059900
   SORTA[I+J-N1] := SORTAA[ I.[35:8] , J ]; % MOVE TO SORTA             00060000
   SORT(0,(N2:=N2-N1));                                                 00060100
   IA := IAA := 0; IBB := -1; % MERGE SORTA WITH SORTAA                 00060200
   ASEQ   := (AWORD := SORTA[IA]) .[21:27];                             00060300
   AASEQ := (AAWORD := SORTAA[ IAA.[35:8] , IAA.[43:5] ] ) .[21:27];    00060400
      DO BEGIN                                                          00060500
      IF AASEQ LEQ ASEQ THEN % USER OLDEST ONE FIRST                    00060600
         BEGIN                                                          00060700
         SORTBB[ (IBB:=IBB+1).[35:8] , IBB.[43:5] ] := AAWORD;          00060800
         IF IAA:=IAA+1 GTR AAPTR THEN AASEQ:=EOFMARK ELSE               00060900
         AASEQ:=(AAWORD:=SORTAA[ IAA.[35:8] , IAA.[43:5] ] ) .[21:27];  00061000
         END                                                            00061100
      ELSE                                                              00061200
         BEGIN                                                          00061300
         SORTBB[ (IBB:=IBB+1).[35:8] , IBB.[43:5] ] := AWORD;           00061400
         IF IA:=IA+1 GTR N2 THEN ASEQ:=EOFMARK ELSE                     00061500
         ASEQ := (AWORD := SORTA[IA]) .[21:17];                         00061600
         END;                                                           00061700
      END UNTIL ASEQ = EOFMARK AND AASEQ = EOFMARK;                     00061800
   AAPTR := AAPTR + N2 + 1; % TOTAL NO. IN SORTAA                       00061900
   FOR I:=0 STEP 32 UNTIL AAPTR DO % MOVE BACK TO SORTAA                00062000
   READ(SORTBB[I.[35:8] , *] , 32 , SORTAA[I.[35:8] , *]);              00062100
   END WHILE STATEMENT;                                                 00062200
SWAP; % RETURN CORE SPACE                                               00062300
%..........                                                             00062400
STARTMERGE:                                                             00062500
%..........                                                             00062600
SORTAA[ (PPTR:=PPTR+1).[35:8], PPTR.[43:5] ] := EOFMARK;                00062700
READ(SOURCE[NO],10,T[*])[EOF4]; % TEST EOF POINTER                      00062800
GO TO SKIP;                                                             00062900
%....                                                                   00063000
EOF4: % NO RECORDS IN SOURCE FILE ( EOF POINTER = -1 );                 00063100
%....                                                                   00063200
IF NOT (SORTOG OR MERGTOG) THEN % NO ALTERATIONS REQUIRED               00063300
   BEGIN                                                                00063400
   CLOSE(SOURCE); LOCK(PATCH); % PATCH := WORKFILE                      00063500
   N[0]:=PPTR-1; % WORKFILE EOF POINTER                                 00063600
   FOR I:=0 STEP 1 UNTIL PPTR DO % BUILD TAB FILE                       00063700
      BEGIN                                                             00063800
      IF NPTR:=NPTR+1 GTR 29 THEN % WRITE TABFILE SEGMENT ON DISK       00063900
         BEGIN                                                          00064000
         WRITE(NEWTAB,30,N[*]);                                         00064100
         NPTR:=0;                                                       00064200
         END;                                                           00064300
      N[NPTR]:=SORTAA[I.[35:8],I.[43:5]].[21:27] & I[4:32:16];          00064400
      END ILOOP;                                                        00064500
   WRITE(NEWTAB,30,N[*]); LOCK(NEWTAB);                                 00064600
   GO TO EXIT;                                                          00064700
   END; % IF PATCH FILE BECOMES WORKFILE                                00064800
%....                                                                   00064900
SKIP:                                                                   00065000
%....                                                                   00065100
PSEQ:=(PWORD:=SORTAA[0,0]).[21:27]; % 1ST SEQ. NUMBER IN "1P" FILE      00065200
CODE:=PWORD.[1:2]; PPTR:=0;                                             00065300
NCT := -1;                                                              00065400
REWIND(PATCH); PATCNT := -1;                                            00065500
%.....                                                                  00065600
TLOOP:                                                                  00065700
%.....                                                                  00065800
READ(SOURCE,10,T[*])[EOF5];                                             00065900
TSEQ := OCTCONV(T[9]);                                                  00066000
GO TO COMPARE;                                                          00066100
%....                                                                   00066200
EOF5:  TSEQ := EOFMARK;                                                 00066300
%....                                                                   00066400
%.......                                                                00066500
COMPARE:                                                                00066600
%.......                                                                00066700
IF TSEQ LSS PSEQ THEN % NO CHANGE TO THIS RECORD                        00066800
   BEGIN                                                                00066900
   WRITE(WRKFIL,10,T[*]);                                               00067000
   EQLTOG:=TRUE; SEQ:=TSEQ; GO TO WRITENEW;                             00067100
   END;                                                                 00067200
EQLTOG := TSEQ=PSEQ; % NEW RECORD SEQ. MATCHES OLD                      00067300
%......                                                                 00067400
PCYCLE:                                                                 00067500
%......                                                                 00067600
IF PSEQ=EOFMARK THEN GO TO ENDMERGE;                                    00067700
IF CODE=1 THEN % DELETE CODE                                            00067800
   BEGIN                                                                00067900
   BFULL:=FALSE;                                                        00068000
   PREV:=PSEQ; % SAVE CURRENT PSEQ NUMBER                               00068100
   PPTR:=PPTR+1; % GET THE NEXT PSEQ NUMBER                             00068200
   PSEQ:=(PWORD:=SORTAA[PPTR.[38:5],PPTR.[43:5]]).[21:27];              00068300
   CODE:=PWORD.[1:2];                                                   00068400
   IF PSEQ=PREV AND CODE.[47:1]=0 THEN GO PCYCLE; % NEW RECORD FOLLOWS  00068500
   IF EQLTOG THEN GO TO TLOOP ELSE GO TO COMPARE;                       00068600
   END; % IF CODE = 1                                                   00068700
IF CODE=3 THEN % FIX CODE, CHECK FOR RECORD FIRST                       00068800
   BEGIN                                                                00068900
   IF NOT (EQLTOG OR BFULL) THEN % NO SUCH RECORD                       00069000
      BEGIN                                                             00069100
      MSG(2,PSEQ); % "NOT IN YOUR FILE"                                 00069200
      GO TO NEXTP;                                                      00069300
      END;                                                              00069400
   END;                                                                 00069500
IF PATCNT := PATCNT + 1 NEQ PWORD.[4:16] THEN % OUT OF ORDER            00069600
READ SEEK (PATCH[PATCNT:=PWORD.[4:16]]);                                00069700
IF CODE NEQ 3 THEN % NOT A FIX COMMAND                                  00069800
   BEGIN                                                                00069900
   READ(PATCH,10,B[*]);                                                 00070000
   BFULL := TRUE;                                                       00070100
   GO TO NEXTP;                                                         00070200
   END;                                                                 00070300
READ(PATCH,10,A[*]);                                                    00070400
IF NOT FIXCHK(A1,O1,O2,N1,N2,A3) THEN % "FIX" SYNTAX ERROR              00070500
   BEGIN                                                                00070600
   MSG(3,PSEQ); % "IMPROPER FIX"                                        00070700
   GO TO NEXTP;                                                         00070800
   END;                                                                 00070900
IF N2.[33:15] GTR A4 THEN % SHOULD NOT BE HERE                          00071000
   BEGIN                                                                00071100
   MSG(4,PSEQ); % "MISSING GROUP MARK"                                  00071200
   GO TO NEXTP;                                                         00071300
   END;                                                                 00071400
IF NOT BFULL THEN % GET RECORD TO BE "FIXED"                            00071500
   BEGIN                                                                00071600
   MOVE(10,T,B);                                                        00071700
   BFULL:=TRUE;                                                         00071800
   END;                                                                 00071900
IF NOT LOCATE(B1,B2,B3,B4,RECSZ,O1,SZO:=SIZ(O1,O2)) THEN                00072000
   BEGIN                                                                00072100
   MSG(5,PSEQ); % "CANNOT FIND FIX STRING"                              00072200
   GO TO NEXTP;                                                         00072300
   END;                                                                 00072400
IF SIZ(B3,B4) LSS (SZN:=SIZ(N1,N2))-SZO THEN                            00072500
   BEGIN                                                                00072600
   MSG(6,PSEQ); % "NOT ENOUGH ROOM FOR FIX"                             00072700
   GO TO NEXTP;                                                         00072800
   END;                                                                 00072900
EDIT(B2,B4,B5,SZO,N1,SZN,SFLG); % REPLACE OLD STRING WITH NEW STRING    00073000
%.....                                                                  00073100
NEXTP: % LOOK AT NEXT "1P" WORD                                         00073200
%.....                                                                  00073300
PREV:=PSEQ; % SAVE CURRENT "1P" SEQUENCE NUMBER                         00073400
PPTR:=PPTR+1; % CHECK NEXT "1P" WORD                                    00073500
PSEQ:=(PWORD:=SORTAA[PPTR.[38:5],PPTR.[43:5]]).[21:27]; % NEXT "1P" WD. 00073600
CODE:=PWORD.[1:2];                                                      00073700
IF PREV=PSEQ THEN GO TO PCYCLE; % DUPLICATE, MORE TO BE DONE            00073800
IF NOT BFULL THEN GO TO COMPARE; % IGNORE LAST INPUT                    00073900
WRITE(WRKFIL,10,B[*]);                                                  00074000
SEQ:=PREV; % USING THIS SEQ. NUMBER                                     00074100
%........                                                               00074200
WRITENEW:                                                               00074300
%........                                                               00074400
IF NPTR:=NPTR+1 GTR 29 THEN % SEGMENT IS FILLED                         00074500
   BEGIN                                                                00074600
   WRITE(NEWTAB,30,N[*]); % OUTPUT TO DISK                              00074700
   NPTR:=0;                                                             00074800
   END;                                                                 00074900
N[NPTR]:=0&SEQ[21:21:27]&(NCT:=NCT+1)[4:32:16];                         00075000
BFULL:=FALSE;                                                           00075100
IF EQLTOG THEN GO TLOOP ELSE GO COMPARE;                                00075200
%........                                                               00075300
ENDMERGE:                                                               00075400
%........                                                               00075500
IF NPTR:=NPTR+1 GTR 29 THEN % SEGMENT IS FILLED                         00075600
   BEGIN                                                                00075700
   WRITE(NEWTAB,30,N[*]); % OUTPUT TO DISK                              00075800
   NPTR:=0;                                                             00075900
   END;                                                                 00076000
FOR I:=NPTR STEP 1 UNTIL 29 DO N[I]:=EOFMARK;                           00076100
WRITE(NEWTAB,30,N[*]);                                                  00076200
READ(NEWTAB[0],30,N[*]);                                                00076300
N[0]:=NCT; % EOF POINTER                                                00076400
WRITE(NEWTAB[0],30,N[*]);                                               00076500
CLOSE(SOURCE); CLOSE(PATCH);                                            00076600
LOCK(NEWTAB,*); LOCK(WRKFIL,*);                                         00076700
%....                                                                   00076800
EXIT:                                                                   00076900
%....                                                                   00077000
END PROGRAM.                                                            00077100
END;END.        LAST CARD ON 0CRDING TAPE                               99999999
