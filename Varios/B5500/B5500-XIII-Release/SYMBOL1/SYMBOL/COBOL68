BEGIN                                                                   00000000
% * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 00000100
%        LASCIATE OGNI SPERANZA VOI CH ENTRATE                          00000200
%                                      DANTE                            00000300
% * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 00000400
    DEFINE                                                              00000500
         CURRENTLEVEL =  % LEVEL OF CURRENT COMPILER                    00000600
         0                                                              00000700
         #,                                                             00000800
         LOCALEVEL    =  % LOCAL PATCH LEVEL                            00000900
              0                                                         00001000
         #;                                                             00001100
    COMMENT COMPILIER DIRECTORY BY 1ST DIGIT OF SEQUENCE NUMBER         00001200
         0    COMPILIER GLOBALS                                         00001300
         1    GLOBALS FOR PASS 1                                        00001400
              12 READACARD STUFF                                        00001500
              13 SCANNER STUFF                                          00001600
              16 MACRO DISKOUT STUFF                                    00001700
              18 OPERAND STUFF                                          00001800
              19 EXPRESSION STUFF                                       00001900
         2    START, IDENTIFICATION, AND ENVIRONMENT DIVISIONS - PASS 1 00002000
         3    DATA DIVISION - PASS 1                                    00002100
              31 ITEM ELEMITEM PICTUREPROCESS                           00002200
              32 RECORDDEC                                              00002300
              33 FSE FILE SKELETION                                     00002400
              34 WSE WORKING STORAGE                                    00002500
              35 RSR REPORT WRITER                                      00002600
              39 START OF EXECUTABLES                                   00002700
         4    PROCEDURE DIVISION - PASS 1                               00002800
              40 GENERAL PURPOSE STUFF                                  00002900
              41 DATA MANIPULATION STUFF                                00003000
                        EXAMINEP                                        00003100
                        MOVEP                                           00003200
                        SETP                                            00003300
                        ARITHMETICP                                     00003400
                        COMPUTEP                                        00003500
                        DIVIDEP                                         00003600
              42 PROGRAM CONTROL STUFF                                  00003700
                        LBCHK                                           00003800
                        LABELSCAN                                       00003900
                        CONDITIONALSTMT                                 00004000
                        ALTERP                                          00004100
                        GOP                                             00004200
                        IFP                                             00004300
                        PERFORMP                                        00004400
                        SEARCHP                                         00004500
                        STOPP                                           00004600
              43 SORT STUFF                                             00004700
                        RELEASEP                                        00004800
                        RETURNP                                         00004900
                        SORTP                                           00005000
              44 I-O STUFF                                              00005100
                        ACCEPTP                                         00005200
                        CLOSEP                                          00005300
                        DISPLAYP                                        00005400
                        OPENP                                           00005500
                        READP                                           00005600
                        SEEKP                                           00005700
                        WRITEP                                          00005800
              45 REPORT WRITER                                          00005900
              46 SEPARATELY COMPILED STUFF                              00006000
              47 DIAGNOSTIC STUFF                                       00006100
                        DUMPP                                           00006200
                        MONITORP                                        00006300
              48 DECLARATIVE STUFF                                      00006400
                        USEP                                            00006500
              49 PASS1 PROCEDURE DIVISION DRIVER PROCEDURES             00006600
                        STATEMENT                                       00006700
                        PARAGRAPH                                       00006800
                        SECTION                                         00006900
         6    GLOBALS FOR PASS 2                                        00007000
              61 EMITTERS                                               00007100
              62 ERRORS                                                 00007200
              63 PASSMAC                                                00007300
              64 ARRAYDEC SEGSTART SEGEND                               00007400
              65 GETDATA WRITEDATA                                      00007500
         7    FIRST THREE DIVISIONS - PASS 2                            00007600
         8    PROCEDURE DIVISION - PASS 2                               00007700
              80 GENERAL PURPOSE STUFF                                  00007800
              81 MOVE STUFF                                             00007900
              82 ARITH STUFF                                            00008000
              83 CONTROL STUFF                                          00008100
                        LBCHK                                           00008200
                        EXAMINEP                                        00008300
                        LBLDECK                                         00008400
                        BRANCHGEN                                       00008500
              84 SORT STUFF                                             00008600
                        SRTP                                            00008700
                        RELP                                            00008800
                        RETP                                            00008900
              85 CONTROL STUFF                                          00009000
                        SWCHP                                           00009100
                        ALTRP                                           00009200
                        ALGOP                                           00009300
                        ENDPAR                                          00009400
                        PERFORMP                                        00009500
              86 I-O STUFF                                              00009600
              87 REPORT WRITER                                          00009700
              88 SEPARATELY COMPILED STUFF                              00009800
              89 PASS2 PROCEDURE DIVISION DRIVER                        00009900
                        MACRO                                           00010000
         9    COMPILIER WRAP-UP                                         00010100
                                                                       ;00010200
DEFINE FIL0=                                                            00010300
     FILL MESSRAY[ 0,*] WITH                                            00010400
"UNRECOGN","IZED CON","STRUCT* ","        ","        ",  1,         %00000010500
"IDENTIFI","ER EXCEE","DS 30 CH","ARACTERS","*       ","        ",  %00100010600
"STRING G","REATER T","HEN 256 ","CHARACTE","RS*     ","        ",  %00200010700
"NUMBER >"," 23 DIGI","TS*     ","        ","        ","        ",  %00300010800
"INTEGER ","> 23 DIG","ITS*    ","        ","        ","        ",  %00400010900
"CANNOT S","TART IN ","MARGIN A","*       ","        ","        ",  %00500011000
"STRING C","ONTINUAT","ION INCO","RRECT*  ","        ","        ",  %00600011100
"IMPROPER"," LIBRARY"," NAME*  ","        ","        ","        ",  %00700011200
"SEGMENT ","SIZE > 1","023 WORD","S*      ","        ","        ",  %00800011300
"MEMORY S","IZE ! IN","TEGER*  ","        ","        ","        ",  %00900011400
"DISK SIZ","E ! INTE","GER OR N","UMBER*  ","        ","        ",  %01000011500
"MUST STA","RT IN MA","RGIN A* ","        ","        ","        ",  %01100011600
"DISK SOR","T REQUIR","ES 3 TO ","5 TAPES*","        ","        ",  %01200011700
"MUST BE ","INTEGER*","        ","        ","        ","        ",  %01300011800
"TAPE SOR","T REQUIR","ES 3 TO ","5 TAPES*","        ","        ",  %01400011900
"ILLEGAL ","HARDWARE"," TYPE*  ","        ","        ","        ";  %01500012000
         #,FIL1=                                                        00012100
     FILL MESSRAY[ 1,*] WITH                                            00012200
"MUST BE ","SINGLE A","LPHA CHA","RACTER* ","        ",  1,         %01600012300
"ILLEGAL ","FILE NAM","E*      ","        ","        ","        ",  %01700012400
"MUST BE ","DATA NAM","E*      ","        ","        ","        ",  %01800012500
"SORT FIL","E MUST H","AVE 2 BU","FFERS*  ","        ","        ",  %01900012600
"BLOCK SH","OULD BE ","MULTIPLE"," OF RECO","RD SIZE*","        ",  %02000012700
"        ","        ","        ","        ","        ","        ",  %02100012800
"        ","        ","        ","        ","        ","        ",  %02200012900
"RERUN NO","T ALLOWE","D ON SOR","T FILE* ","        ","        ",  %02300013000
"RERUN OF"," THIS TY","PE REQUI","RES [ON ","TAPE] PH","RASE*   ",  %02400013100
"FILE NOT"," SELECTE","D*      ","        ","        ","        ",  %02500013200
"DUPLICAT","E FD FOR"," THIS FI","LE*     ","        ","        ",  %02600013300
"DUPLICAT","E CLAUSE","*       ","        ","        ","        ",  %02700013400
"CLAUSE N","OT LEGAL"," IN SD* ","        ","        ","        ",  %02800013500
"INCORREC","T CARD C","ONTINUAT","ION*    ","        ","        ",  %02900013600
"AREA NAM","E MUST B","E UNIQUE","*       ","        ","        ",  %03000013700
"        ","        ","        ","        ","        ","        ";  %03100013800
         #,FIL2=                                                        00013900
     FILL MESSRAY[ 2,*] WITH                                            00014000
"FILE MUS","T BE BLO","CKED*   ","        ","        ",  1,         %03200014100
"MIN RECO","RD SIZE ","MUST BE ","LESS THA","N MAX SI","ZE*     ",  %03300014200
" MIN BLO","CK SIZE ","MUST BE ","LESS THA","N MAX SI","ZE*     ",  %03400014300
"DISK FIL","E RECORD","S MUST B","E FIXED ","LENGTH* ","        ",  %03500014400
"SORT & M","ERGE FIL","ES REQUI","RE FIXED"," LENGTH ","RECORDS*",  %03600014500
" MIN BLO","CK SIZE ","LESS THA","N MIN RE","CORD SIZ","E*      ",  %03700014600
"DISK MUS","T BE LAB","ELED*   ","        ","        ","        ",  %03800014700
"DATA-NAM","E CONTAI","NING ID ","NOT CORR","ECT PICT","URE     ",  %03900014800
"TRUNCATI","ON OF ID"," AND/OR ","MFID TO ","7 CHARAC","TERS*   ",  %04000014900
"SAVE FAC","TOR > 99","9*      ","        ","        ","        ",  %04100015000
"MUST BE ","LEVEL 1*","        ","        ","        ","        ",  %04200015100
"FILLER M","UST BE E","LEMENTAR","Y*      ","        ","        ",  %04300015200
"MAXIMUM ","BLOCK SI","ZE MUST ","BE}MAXIM","UM RECOR","D SIZE* ",  %04400015300
"MUST BE ","LEVEL 66","*       ","        ","        ","        ",  %04500015400
" QUALIFI","ER OR NA","ME HAS N","OT APPEA","RD BEFOR","E*      ",  %04600015500
"MISSING ","QUALIFIC","ATION*  ","        ","        ","        ";  %04700015600
         #,FIL3=                                                        00015700
     FILL MESSRAY[ 3,*] WITH                                            00015800
"QUALIFIC","ATION FO","UND NOTH","ING UNIQ","UE*     ",  1,         %04800015900
"QUALIFIC","ATION IS"," NOT UNI","QUE*    ","        ","        ",  %04900016000
"NAME HAS"," NOT APP","EARED BE","FORE*   ","        ","        ",  %05000016100
"RENAMED ","LEVEL NU","MBER IS ","ILLEGAL*","        ","        ",  %05100016200
"RENAMED ","ITEM CAN","NOT HAVE"," OCCURS*","        ","        ",  %05200016300
"RENAMED ","CANNOT B","E VARIAB","LE SIZE*","        ","        ",  %05300016400
"RENAMES ","DN3 PRIO","R TO DN2","*       ","        ","        ",  %05400016500
"RENAMES ","NOT NEXT"," TO RENA","MED AREA","*       ","        ",  %05500016600
"ILLEGAL-","DUPLICAT","E NAME* ","        ","        ","        ",  %05600016700
"        ","        ","        ","        ","        ","        ",  %05700016800
"REDEFINE","S-CANNOT"," HAVE VA","LUE*    ","        ","        ",  %05800016900
"REDEFINE","S-CANNOT"," BE VARI","ABLE SIZ","E*      ","        ",  %05900017000
"REDEFINE","S-CANNOT"," HAVE OC","CURS*   ","        ","        ",  %06000017100
"MUST BE ","ELEMENTA","RY ITEM*","        ","        ","        ",  %06100017200
"INVALID ","LEVEL NU","MBER*   ","        ","        ","        ",  %06200017300
"SIZE ERR","OR-GROUP"," VS ELEM","ENTARY* ","        ","        ";  %06300017400
         #,FIL4=                                                        00017500
     FILL MESSRAY[ 4,*] WITH                                            00017600
"REDEFINE","D AREA N","OT SAME ","SIZE*   ","        ",  1,         %06400017700
"REDEFINE","S NOT AD","JCENT TO"," AREA*  ","        ","        ",  %06500017800
"SECTION ","REQUIRED"," AFTER D","ECLARTAT","IVES*   ","       ",   %06600017900
"PICTURE ","STRING E","RROR*   ","        ","        ","        ",  %06700018000
"RIGHT PA","RENTHESI","S EXPECT","ED*     ","        ","        ",  %06800018100
"OPERAND ","EXPECTED","*       ","        ","        ","        ",  %06900018200
"        ","        ","        ","        ","        ","        ",  %07000018300
"PICTURE ","STRING E","XCEEDS 3","0 CHARAC","TERS*   ","        ",  %07100018400
"BY EXPEC","TED*    ","        ","        ","        ","        ",  %07200018500
"ILLEGAL ","EXPRESSI","ON STRUC","TURE*   ","        ","        ",  %07300018600
"FROM, = ",", OR EQU","ALS EXPE","CTED*   ","        ","        ",  %07400018700
"DATA-NAM","E EXPECT","ED*     ","        ","        ","        ",  %07500018800
"STATEMEN","T CANNOT"," BEGIN W","ITH THIS"," ITEM*  ","        ",  %07600018900
"FIELD SI","ZE EXCEE","DS 8184 ","CHARACTE","RS*     ","        ",  %07700019000
"TO EXPEC","TED*    ","        ","        ","        ","        ",  %07800019100
"PERIOD R","EQUIRED ","AFTER PA","RAGRAPH ","NAME*   ","        ";  %07900019200
         #,FIL5=                                                        00019300
     FILL MESSRAY[ 5,*] WITH                                            00019400
"PERIOD R","EQUIRED ","AFTER SE","CTION HE","ADING*  ",  1,         %08000019500
"MISSING ","PERIOD* ","        ","        ","        ","        ",  %08100019600
"DECLARAT","IVE SENT","ENCE MUS","T BE USE"," OR INCL","UDE*    ",  %08200019700
"PARAGRAP","H NAME R","EQUIRED*","        ","        ","        ",  %08300019800
"SECTION ","NAME REQ","UIRED*  ","        ","        ","        ",  %08400019900
"PERIOD R","EQUIRED ","AFTER DE","CLARATIV","ES HEADI","NG*     ",  %08500020000
"SEQUENCE"," ERROR* ","        ","        ","        ","        ",  %08600020100
"COMPUTAT","IONAL IT","EM MUST ","BE NUMER","IC*     ","        ",  %08700020200
"ELEMENTA","RY ITEM ","MUST HAV","E SIZE* ","        ","        ",  %08800020300
"SCALE EX","CEEDS 31","*       ","        ","        ","        ",  %08900020400
"NUMERIC ","ITEM EXC","EEDS 23 ","DIGITS* ","        ","        ",  %09000020500
"CLASS - ","CLAUSE C","ONFLICT*","        ","        ","        ",  %09100020600
"USAGE - ","CLAUSE C","ONFLICT*","        ","        ","        ",  %09200020700
"J OR S N","OT ALLOW","ED IN ED","ITED NUM","ERIC*   ","        ",  %09300020800
"CANNOT B","E VARIAB","LE SIZE*","        ","        ","        ",  %09400020900
"COMPUTAT","IONAL RE","QUIRES N","UMERIC C","LASS*   ","        ";  %09500021000
         #,FIL6=                                                        00021100
     FILL MESSRAY[ 6,*] WITH                                            00021200
"        ","        ","        ","        ","        ",  1,         %09600021300
"ONLY ONE"," TYPE OF"," FLOAT/I","NSERT AL","LOWED*  ","        ",  %09700021400
"MULTIPLE"," SIGNS S","PECIFIED"," IN PICT","URE*    ","        ",  %09800021500
"        ","        ","        ","        ","        ","        ",  %09900021600
"INVALID ","OPTION E","LEMENT* ","        ","        ","        ",  %10000021700
"SUBSCRIP","TS REQUI","RED*    ","        ","        ","        ",  %10100021800
"ILLEGAL ","SUBSCRIP","T*      ","        ","        ","        ",  %10200021900
"NOT ENOU","GH SUBSC","RIPTS*  ","        ","        ","        ",  %10300022000
"INDEX-NA","MES AND ","DATA-NAM","ES MAY N","OT BE MI","XED*    ",  %10400022100
"GIVING C","LAUSE IL","LEGAL IN"," THIS CO","NTEXT*  ","        ",  %10500022200
"FROM EXP","ECTED*  ","        ","        ","        ","        ",  %10600022300
"GIVING E","XPECTED*","        ","        ","        ","        ",  %10700022400
"INTO OR ","BY EXPEC","TED*    ","        ","        ","        ",  %10800022500
"ELSE EXP","ECTED*  ","        ","        ","        ","        ",  %10900022600
"LABEL RE","QUIRED* ","        ","        ","        ","        ",  %11000022700
"DEPENDIN","G EXPECT","ED*     ","        ","        ","        ";  %11100022800
         #,FIL7=                                                        00022900
     FILL MESSRAY[ 7,*] WITH                                            00023000
"SIZE CAN","NOT EXCE","ED 256 C","HARACTER","S*      ",  1,         %11200023100
"STATEMEN","T NOT IM","PLEMENTE","D*      ","        ","        ",  %11300023200
"        ","        ","        ","        ","        ","        ",  %11400023300
"CONFLICT","ING CLAS","S*      ","        ","        ","        ",  %11500023400
"ILLEGAL ","FOR FILL","ER ITEM*","        ","        ","        ",  %11600023500
"LITERAL ","SIZE EXC","EEDS DEC","LARED SI","ZE*     ","        ",  %11700023600
"COPY MUS","T BE ON ","01 LEVEL","*       ","        ","       ",   %11800023700
"TIMES EX","PECTED* ","        ","        ","        ","        ",  %11900023800
"UNTIL EX","PECTED* ","        ","        ","        ","        ",  %12000023900
"END OF S","TATEMENT"," EXPECTE","D*      ","        ","        ",  %12100024000
"ALPHANUM","ERIC STR","ING ILLE","GAL FOR ","ALPHABET","IC DN*  ",  %12200024100
"ITEM MAY"," NOT BE ","USED WIT","H THIS F","IGURATIV","E*      ",  %12300024200
"REDEFINE","S NOT AL","LOWED FO","R FILE 0","1 LEVELS","*       ",  %12400024300
"        ","        ","        ","        ","        ","        ",  %12500024400
"CANNOT C","HAIN RED","EFINES* ","        ","        ","        ",  %12600024500
"VALUE NO","T ALLOWE","D IN FIL","E OR LIN","KAGE SEC","TIONS*  ";  %12700024600
         #,FIL8=                                                        00024700
     FILL MESSRAY[ 8,*] WITH                                            00024800
"VALUE SP","ECIFIED ","IN PRIOR"," LEVEL* ","        ",  1,         %12800024900
"TOO MANY"," LEFT PA","RENTHESE","S*      ","        ","        ",  %12900025000
"CONSTANT"," SECTION"," REQUIRE","S VALUE*","        ","        ",  %13000025100
"VALUE NO","T ALLOWE","D*      ","        ","        ","        ",  %13100025200
"        ","        ","        ","        ","        ","        ",  %13200025300
"VALUE NO","T ALLOWE","D FOR IT","EM WITHI","N OCCURS","*       ",  %13300025400
"USE CONF","LICT BET","WEEN LEV","ELS*    ","        ","        ",  %13400025500
"ILLEGAL ","CLAUSE U","SED WITH"," INDEX U","SAGE*   ","        ",  %13500025600
"INDEXED ","DATA ITE","M CANNOT"," BE COND","ITIONAL*","        ",  %13600025700
"ILLEGAL ","COMPARIS","ON OF TW","O OPERAN","DS*     ","        ",  %13700025800
"ILLEGAL ","LOGICAL ","OPERATIO","N*      ","        ","        ",  %13800025900
"MISSING ","SUBJECT ","OF RELAT","ION*    ","        ","        ",  %13900026000
"LEFT PAR","ENTHESIS"," EXPECTE","D*      ","        ","        ",  %14000026100
"CANNOT B","E USED A","S BOTH D","ATA-NAME"," AND LAB","EL*     ",  %14100026200
"        ","        ","        ","        ","        ","        ",  %14200026300
"CONDITIO","N DID NO","T RESULT"," IN TRUT","H VALUE*","        ";  %14300026400
         #,FIL9=                                                        00026500
     FILL MESSRAY[ 9,*] WITH                                            00026600
"        ","        ","        ","        ","        ",  1,         %14400026700
"CONDITIO","N REQUIR","ED AFTER"," IF*    ","        ","        ",  %14500026800
"        ","        ","        ","        ","        ","        ",  %14600026900
"CONDITIO","N REQUIR","ED AFTER"," UNTIL* ","        ","        ",  %14700027000
"MORE THA","N 3 DIME","NSIONS* ","        ","        ","        ",  %14800027100
"INDEX NA","ME MUST ","BE UNIQU","E*      ","        ","        ",  %14900027200
"JUSTIFIE","D NOT AL","LOWED*  ","        ","        ","        ",  %15000027300
"        ","        ","        ","        ","        ","        ",  %15100027400
"LEVEL 77"," NOT ALL","OWED*   ","        ","        ","        ",  %15200027500
"RECORD S","IZE CONF","LICT*   ","        ","        ","        ",  %15300027600
"NO DATA ","RECORD D","ESCRIPTI","ON*     ","        ","        ",  %15400027700
"TRUNCATI","ON OF SI","GNIFICAN","T DIGITS","*       ","        ",  %15500027800
"        ","        ","        ","        ","        ","        ",  %15600027900
"INVALID ","ITEM CLA","USE FOR ","GROUP CO","NDITIONA","L NAME* ",  %15700028000
"ILLEGAL ","LEVEL NU","MBER WIT","H OCCURS"," CLAUSE*","        ",  %15800028100
"MISSING ","LABEL*  ","        ","        ","        ","        ";  %15900028200
         #,FIL10=                                                       00028300
     FILL MESSRAY[10,*] WITH                                            00028400
"LITERAL ","LENGTH S","HOULD BE"," 1. USE ","1ST CHR*",  1,         %16000028500
"        ","        ","        ","        ","        ","        ",  %16100028600
"DUPLICAT","E LABEL*","        ","        ","        ","        ",  %16200028700
"ALTER VE","RB - INC","ORRECT U","SAGE*   ","        ","        ",  %16300028800
"MUST BE ","NUMERIC ","VALUE*  ","        ","        ","        ",  %16400028900
"ILLEGAL ","ARITHMET","IC STATE","MENT STR","UCTURE* ","        ",  %16500029000
"NO CORRE","SPONDING"," ITEMS* ","        ","        ","        ",  %16600029100
"TO OR UP"," BY OR D","OWN BY E","XPECTED*","        ","        ",  %16700029200
"ITEM CAN","NOT BE Z","ERO SIZE","*       ","        ","        ",  %16800029300
"J NOT AL","LOWED FO","R COMP* ","        ","        ","        ",  %16900029400
"ILLEGAL ","KEY ITEM","*       ","        ","        ","        ",  %17000029500
"IDENTIFI","ER MUST ","HAVE OCC","URS CLAU","SE*     ","        ",  %17100029600
"IDENTIFI","ER MUST ","HAVE IND","EXED BY ","CLAUSE* ","        ",  %17200029700
"WHEN PHR","ASE REQU","IRED*   ","        ","        ","        ",  %17300029800
"        ","        ","        ","        ","        ","        ",  %17400029900
"        ","        ","        ","        ","        ","        ";  %17500030000
         #,FIL11=                                                       00030100
     FILL MESSRAY[11,*] WITH                                            00030200
"DIAGNOST","IC MUST ","BE A UNI","QUE NAME","*       ",  1,         %17600030300
"MUST BE ","ASSIGNED"," TO MERG","E*      ","        ","        ",  %17700030400
"IDENTIFI","ER MAY N","OT BE MO","NITORED*","        ","        ",  %17800030500
"        ","        ","        ","        ","        ","        ",  %17900030600
"EXIT MUS","T BE ONL","Y STATEM","ENT IN P","ARAGRAPH","*       ",  %18000030700
"EXIT MUS","T FOLLOW"," PARAGRA","PH NAME*","        ","        ",  %18100030800
"IMPROPER"," WORD FO","RMAT*   ","        ","        ","        ",  %18200030900
"ILLEGAL ","CODE VAL","UE*     ","        ","        ","        ",  %18300031000
"NAME MUS","T BE UNI","QUE*    ","        ","        ","        ",  %18400031100
"MUST BE ","REPORT N","AME*    ","        ","        ","        ",  %18500031200
"ILLEGAL ","LINE VAL","UE*     ","        ","        ","        ",  %18600031300
"MUST BE ","DETAIL* ","        ","        ","        ","        ",  %18700031400
"ILLEGAL ","CHANNEL ","VALUE*  ","        ","        ","        ",  %18800031500
"REPORT E","NTRY MUS","T CONTAI","N REPORT"," GROUP* ","        ",  %18900031600
"REPORT N","AME WITH","OUT RD* ","        ","        ","        ",  %19000031700
"PAGE EXP","ECTED*  ","        ","        ","        ","        ";  %19100031800
         #,FIL12=                                                       00031900
   FILL MESSRAY[12,*] WITH                                              00032000
"MAY ONLY"," APPEAR ","AT LEVEL"," 1*     ","        ",  1,         %19200032100
"GROUP EX","PECTED* ","        ","        ","        ","        ",  %19300032200
"        ","        ","        ","        ","        ","        ",  %19400032300
"CONTROL ","LEVEL EX","PECTED* ","        ","        ","        ",  %19500032400
"ILLEGAL ","CONTROL ","LEVEL*  ","        ","        ","        ",  %19600032500
"FOOTING ","OR HEADI","NG*     ","        ","        ","        ",  %19700032600
"ILLEGAL ","DUPLICAT","E TYPE G","ROUP*   ","        ","        ",  %19800032700
"ILLEGAL ","GROUP TY","PE*     ","        ","        ","        ",  %19900032800
"        ","        ","        ","        ","        ","        ",  %20000032900
"FILE NOT"," ASSIGNE","D TO TAP","E OR DIS","K*      ","        ",  %20100033000
"ROUTINE ","NOT APPL","ICABLE T","O ANY FI","LE*     ","        ",  %20200033100
"FILE NOT"," ASSIGNE","D TO DIS","K*      ","        ","        ",  %20300033200
"NOT A LA","BELED FI","LE*     ","        ","        ","        ",  %20400033300
"FILE NOT"," ASSIGNE","D TO TAP","E*      ","        ","        ",  %20500033400
"ILLEGAL ","READ ACT","ION*    ","        ","        ","        ",  %20600033500
"ILLEGAL ","RECORD N","AME*    ","        ","        ","        ";  %20700033600
         #,FIL13=                                                       00033700
         FILL MESSRAY[13,*] WITH                                        00033800
"CHANNEL ","OR LINE ","NUMBER E","XPECTED*","        ",  1,         %20800033900
"MUST BE ","ASSIGNED"," TO SORT","*       ","        ","        ",  %20900034000
"ILLEGAL ","PROGRAM-","NAME*   ","        ","        ","        ",  %21000034100
"ILLEGAL ","CLOSE AC","TION*   ","        ","        ","        ",  %21100034200
"ILLEGAL ","OPEN ACT","ION*    ","        ","        ","        ",  %21200034300
"DISPLAY ","MESSAGE ","TOO LARG","E*      ","        ","        ",  %21300034400
"REPORT-N","AME OR D","ETAIL-GR","OUP-NAME"," EXPECTE","D*      ",  %21400034500
"REPORT-N","AME OR A","LL EXPEC","TED*    ","        ","        ",  %21500034600
"MUST BE ","RECORD N","AME OF S","D*      ","        ","        ",  %21600034700
"MUST BE ","SORT FIL","E NAME* ","        ","        ","        ",  %21700034800
"KEY ILLE","GAL OR I","MPROPER ","QUALIFIC","ATION*  ","        ",  %21800034900
"CANNOT H","AVE OCCU","RS*     ","        ","        ","        ",  %21900035000
"NO SORT ","KEYS SPE","CIFIED* ","        ","        ","        ",  %22000035100
"INPUT PR","OCEDURE ","NOT ALLO","WED IN M","ERGE*   ","        ",  %22100035200
"ONLY ONE"," FILE AL","LOWED*  ","        ","        ","        ",  %22200035300
"MUST BE ","A TAPE F","ILE*    ","        ","        ","        ";  %22300035400
         #,FIL14=                                                       00035500
         FILL MESSRAY[14,*] WITH                                        00035600
"ILLEGAL ","WRITE AC","TION*   ","        ","        ",  1,         %22400035700
"FPB OVER","FLOW*   ","        ","        ","        ","        ",  %22500035800
"ILLEGAL ","SEEK ACT","ION*    ","        ","        ","        ",  %22600035900
"EVERY TA","BLE DIME","NSION MU","ST HAVE ","INDEXED ","CLAUSE* ",  %22700036000
"ILLEGAL ","REFERENC","E TO CON","STANT*  ","        ","        ",  %22800036100
"ALL FILE"," RECORDS"," MUST BE"," SAME SI","ZE*     ","        ",  %22900036200
"SORT PRO","CEDURE M","UST BE C","ONTIGUOU","S*      ","        ",  %23000036300
"SORT PRO","CEDURE M","UST NOT ","CONTAIN ","SORT VER","B*      ",  %23100036400
"RELEASE ","MUST APP","EAR IN I","NPUT PRO","CEDURE* ","        ",  %23200036500
"RETURN M","UST APPE","AR IN OU","TPUT PRO","CEDURE* ","        ",  %23300036600
"INVALID ","TRANSFER"," OF CONT","ROL*    ","        ","        ",  %23400036700
"INVALID ","OVERLAPP","ING OR N","ONCONTIG","UOUS PRO","CEDURE*",   %23500036800
"ILLEGAL ","DATA STR","UCTURE F","OR CORRE","SPONDING","*       ",  %23600036900
"        ","        ","        ","        ","        ","        ",  %23700037000
"LITERAL ","MUST BE ","GREATER ","THAN PRE","DECESSOR","*       ",  %23800037100
"SPECIAL ","NAMES LI","MIT EXCE","EDED*   ","        ","        ";  %23900037200
         #,FIL15=                                                       00037300
         FILL MESSRAY[15,*] WITH                                        00037400
"OPERAND ","COMPOSIT","E SIZE E","RROR*   ","        ",  1,         %24000037500
"OPERAND ","SIZE ERR","OR*     ","        ","        ","        ",  %24100037600
"NUMERIC ","LITERAL ","EXCEEDS ","SPECIFIE","D LIMITS","*       ",  %24200037700
"ILLEGAL ","USE OF F","IGURATIV","E*      ","        ","        ",  %24300037800
"INCOMPLE","TE SORT ","PROCEDUR","E*      ","        ","       ",   %24400037900
"DATA NAM","E OPERAN","D EXPECT","ED*     ","        ","       ",   %24500038000
"LITERAL ","OPERAND ","EXPECTED","*       ","        ","       ",   %24600038100
"ARITHMET","IC OPERA","ND EXPEC","TED*    ","        ","       ",   %24700038200
"MOVE SEN","DING FIE","LD OPERA","ND EXPEC","TED*    ","        ",  %24800038300
"SET RECE","IVING FI","ELD OPER","AND EXPE","CTED*   ","       ",   %24900038400
"SET SEND","ING FIEL","D OPERAN","D EXPECT","ED*     ","       ",   %25000038500
"NUMERIC ","DATA NAM","E OPERAN","D EXPECT","ED*     ","       ",   %25100038600
"NUMERIC ","LITERAL ","OPERAND ","EXPECTED","*       ","       ",   %25200038700
"NUMERIC ","SENDING ","FIELD OP","ERAND EX","PECTED* ","       ",   %25300038800
"NUMERIC ","RECEIVIN","G FIELD ","OPERAND ","EXPECTED","*       ",  %25400038900
"FIGURATI","VE OR IN","TRINSIC ","OPERAND ","EXPECTED","*       ";  %25500039000
         #,FIL16=                                                       00039100
         FILL MESSRAY[16,*] WITH                                        00039200
"DUPLICAT","E LABEL ","RECORD D","ESCRIPTI","ON*     ",  1,         %25600039300
"MISSING ","LABEL RE","CORD DEC","LARATION","*       ","        ",  %25700039400
"USERS PO","RTION OF","LABEL TO","O LARGE*","        ","        ",  %25800039500
"A DIAL F","IELD EXC","EEDED 47"," BITS*  ","        ","        ",  %25900039600
"RANDOM D","ISK FILE"," MUST HA","VE ACTUA","L KEY*  ","        ",  %26000039700
"MUST BE ","PROGRAM ","NAME*   ","        ","        ","        ",  %26100039800
"INVALID ","PROGRAM ","ID SPECI","FICATION","*       ","        ",  %26200039900
"        ","        ","        ","        ","        ","        ",  %26300040000
"REPLACIN","G TABLE ","LIMIT EX","CEEDED* ","        ","        ",  %26400040100
"MISSING ","BY IN RE","PLACING ","STATEMEN","T*      ","        ",  %26500040200
"        ","        ","        ","        ","        ","        ",  %26600040300
"INVALID ","LIBRARY ","COPY*   ","        ","        ","        ",  %26700040400
"INVALID ","COPY TER","MINUS*  ","        ","        ","        ",  %26800040500
"VALUE (A","TTRIBUTE",") ERROR*","        ","        ","       ",   %26900040600
"INVALID ","ATTRIBUT","E NAME* ","        ","        ","       ",   %27000040700
"INVALID ","SET STRI","NG*     ","        ","        ","        ";  %27100040800
         #,FIL17=                                                       00040900
         FILL MESSRAY[17,*] WITH                                        00041000
"PERFORM ","RANGE CO","NFLICT* ","        ","        ",  1,         %27200041100
"INVALID ","USE OF G","ENERALIZ","ED FILE ","SPECIFIE","R*      ",  %27300041200
"PRT GREA","TER THAN"," 1023*  ","        ","        ","        ",  %27400041300
"TOO MANY"," IDENTIF","ICATIONS","--TWO MA","XIMUM*  ","        ",  %27500041400
"COMPILER"," GOOF   "," GENERAL"," ERROR  ","*       ","        ",  %27600041500
"COMPILER"," ERROR M","IXED MOD","E*      ","        ","        ",  %27700041600
"COMPILER"," ERROR B","RANCH TO","O FAR-EM","ITBRANCH"," OR JUMP",  %27800041700
"COMPILER"," ERROR O","FLOW-DIC","T,INFO O","R INXR- ","        ",  %27900041800
"LINAGE C","LAUSE MU","ST BE PR","ESENT FO","R END-OF","-PAGE*  ",  %28000041900
"MISSING ","END DECL","ARATIVES","*       ","        ","        ",  %28100042000
"ILLEGAL ","ACCESS O","F USER L","ABEL REC","ORD*    ","        ",  %28200042100
"INEFFICI","ENT USE ","OF DISK ","SPACE*  ","        ","        ",  %28300042200
"BLOCK SI","ZE MUST ","BE IN CH","ARACTERS","*       ","        ",  %28400042300
"COMPUTAT","IONAL FI","ELD NOT ","ALLOWED ","IN DISPL","AY FILE*",  %28500042400
"ACTUAL K","EY MUST ","BE LEVEL"," 77 COMP","-1*     ","        ",  %28600042500
"FREE FIE","LD CARD ","TRUNCAT1","0N*     ","        ","        ",  %28700042600
         0 ;#;                                                          00042700
         DEFINE  % INDICES INTO OPERATOR ARRAY                          00042800
  LITX=  0#,OPDC=  2#,DESC=  3#,ADD =  4#,SUBT=  5#,MULT=  6#,DIVD=  7#,00042900
  IDIV=  8#,RDIV=  9#,CBD = 10#,CBN = 11#,CFD = 12#,CFN = 13#,DLA = 14#,00043000
  DLS = 15#,DLM = 16#,DLD = 17#,LAND= 18#,LOR = 19#,LQV = 20#,LNOT= 21#,00043100
  LESS= 22#,GREQ= 23#,GRTR= 24#,LSEQ= 25#,EQUL= 26#,NEQL= 27#,BFW = 28#,00043200
  BBW = 29#,BFC = 30#,BBC = 31#,BRTX= 32#,LFU = 33#,LBU = 34#,LFC = 35#,00043300
  LBC = 36#,STD = 37#,SND = 38#,ISD = 39#,ISN = 40#,CID = 41#,CND = 42#,00043400
  NOP = 43#,FCE = 44#,FCL = 45#,MOP = 46#,MDS = 47#,TOP = 48#,SSP = 49#,00043500
  SSN = 50#,CHSN= 51#,ISO = 52#,CTC = 53#,CTF = 54#,FTC = 55#,FTF = 56#,00043600
  MKS = 57#,EXIT= 58#,RTN = 59#,RTS = 60#,CMN = 61#,EXCH= 62#,DUP = 63#,00043700
  DEL = 64#,LODD= 65#,INX = 66#,COC = 67#,CDC = 68#,COM = 69#,ZP1 = 70#,00043800
  XRT = 71#,TRS = 72#,TRP = 73#,TRZ = 74#,TRN = 75#,TRW = 76#,TBN = 77#,00043900
  TLS = 78#,TEG = 79#,TGR = 80#,TEL = 81#,TEQ = 82#,TNE = 83#,TAN = 84#,00044000
  BIT = 85#,CLS = 86#,CEG = 87#,CGR = 88#,CEL = 89#,CEQ = 90#,CNE = 91#,00044100
  JFW = 92#,JRV = 93#,JFC = 94#,JRC = 95#,BNS = 96#,ENS = 97#,JNS = 98#,00044200
  JNC = 99#,SFS =100#,SRS =101#,SFD =102#,SRD =103#,BSD =104#,BSS =105#,00044300
  SSA =106#,SDA =107#,SCA =108#,RSA =109#,RDA =110#,RCA =111#,SES =112#,00044400
  SED =113#,TSA =114#,TDA =115#,FAD =116#,FSU =117#,ICV =118#,OCV =119#,00044500
  SEC =120#,INC =121#,STC =122#,BIR =123#,BIS =124#,CRF =125#,EXC =126#,00044600
  CMX =127#,DIA =128#,DIB =129#,TRB =130#,SSF =131#,                    00044700
         % PSUDO OP CODES ARE NEXT                                      00044800
    ENTR=132#,VARI=133#,                                                00044900
         %  FORMAT FOR OPERATOR ARRAY                                   00045000
         CHARMODE  =[01:01] #, % 1= CHARACTER MODE OPERATOR             00045100
         INSERT    =[08:04] #, % # BITS REQUIRED ON INSERT FIELD        00045200
         OCTOPF    =[12:12] #, % OCTAL OPERATOR                         00045300
         %MIMONIC  =[24:24] #, % MIMONIC FOR OPERATOR                   00045400
         % MCP TRANS TABLES AND TRUTH SETS                              00045500
         TRUTHSET = 38#,                                                00045600
              BCLAN = 24#,                                              00045700
              BCLAL = 26#,                                              00045800
              BCLNM = 28#,                                              00045900
              OCTTOBCL = 0#;                                            00046000
              % DEFINES  FOR  RESERVED WORDS                            00046100
%% RSW                                                                  00046200
         DEFINE                                                         00046300
         ABSV                 =  10#,    ACCESSV              =  11#,   00046400
         ACTUAL               =  12#,    ADDRESS              =  13#,   00046500
         ADVANCING            =  14#,    AFTER                =  15#,   00046600
         ALL                  =  16#,    ALPHABETIC           =  17#,   00046700
         ALPHANUMERIC         =  18#,    ALPHANUMERICEDITED   =  19#,   00046800
         ALTERNATE            =  20#,    APPLY                =  21#,   00046900
         ARCTANV              =  22#,    ARE                  =  23#,   00047000
         AREA                 =  24#,    ASCENDING            =  25#,   00047100
         ASSIGN               =  26#,    AT                   =  27#,   00047200
         AUTHOR               =  28#,    B5500                =  29#,   00047300
         BEFORE               =  30#,    BEGINNING            =  31#,   00047400
         BLANK                =  32#,    BLOCK                =  33#,   00047500
         BUSYV                =  34#,    BYV                  =  35#,   00047600
         CAUSEV               =  36#,    CDV                  =  37#,   00047700
         CF                   =  38#,    CH                   =  39#,   00047800
         CHANNEL              =  40#,    CHARACTERV           =  41#,   00047900
         CHARACTERS           =  42#,    CLOCKUNITS           =  43#,   00048000
         COBOL                =  44#,    CODEV                =  45#,   00048100
         COLUMN               =  46#,    COMMAV               =  47#,   00048200
         COMPUTATIONAL        =  48#,    COMP1                =  49#,   00048300
         COMP2                =  50#,    COMP3                =  51#,   00048400
         CONFIGURATION        =  52#,    CONSTANT             =  53#,   00048500
         CONTAINS             =  54#,    CONTROL              =  55#,   00048600
         CORRESPONDING        =  56#,    COSV                 =  57#,   00048700
         COUNTV               =  58#,    CRUNCHV              =  59#,   00048800
         CURRENCY             =  60#,    DATA                 =  61#,   00048900
         DATEV                =  62#,    DATECOMP             =  63#,   00049000
         DATEWRTN             =  64#,    DAYV                 =  65#,   00049100
         DEBUGCONTENTS        =  66#,    DEBUGITEM            =  67#,   00049200
         DEBUGLINE            =  68#,    DEBUGNAME            =  69#,   00049300
         DEBUGSUB1            =  70#,    DEBUGSUB2            =  71#,   00049400
         DEBUGSUB3            =  72#,    DEBUGGING            =  73#,   00049500
         DCMLPNT              =  74#,    DECLARATIVES         =  75#,   00049600
         DELIMITEDV           =  76#,    DELIMITERV           =  77#,   00049700
         DEPENDING            =  78#,    DEPTHV               =  79#,   00049800
         DESCENDING           =  80#,    DESTINATIONV         =  81#,   00049900
         DETAIL               =  82#,    DIRECTV              =  83#,   00050000
         DIRECTEDV            =  84#,    DISPLAY1             =  85#,   00050100
         DIVISION             =  86#,    DOWN                 =  87#,   00050200
         ELSEV                =  88#,    EMIV                 =  89#,   00050300
         ENDV                 =  90#,    ENDPAGE              =  91#,   00050400
         ENDING               =  92#,    ENVIRONMENT          =  93#,   00050500
         ERROR                =  94#,    ESIV                 =  95#,   00050600
         ETIV                 =  96#,    EVENTV               =  97#,   00050700
         EVERY                =  98#,    EXPV                 =  99#,   00050800
         EXPOVRV              = 100#,    FD                   = 101#,   00050900
         FILEV                = 102#,    FILECNTRL            = 103#,   00051000
         FILELIMIT            = 104#,    FILLER               = 105#,   00051100
         FINAL                = 106#,    FIRST                = 107#,   00051200
         FIRSTONEV            = 108#,    FLAGV                = 109#,   00051300
         FOOTING              = 110#,    FORV                 = 111#,   00051400
         FREEV                = 112#,    FROM                 = 113#,   00051500
         GIVING               = 114#,    GROUP                = 115#,   00051600
         HEADING              = 116#,    HEREV                = 117#,   00051700
         HIGHV                = 118#,    IOCNTRL              = 119#,   00051800
         ID                   = 120#,    INV                  = 121#,   00051900
         INDEX                = 122#,    INDEXED              = 123#,   00052000
         INDICATE             = 124#,    INITIALV             = 125#,   00052100
         INPUT                = 126#,    IO                   = 127#,   00052200
         INSTALLATION         = 128#,    INTOVRV              = 129#,   00052300
         INTO                 = 130#,    INVALID              = 131#,   00052400
         INVINDXV             = 132#,    ISV                  = 133#,   00052500
         JUSTIFIED            = 134#,    KEYS                 = 135#,   00052600
         LABELV               = 136#,    LAST                 = 137#,   00052700
         LEADING              = 138#,    LEFT                 = 139#,   00052800
         LENGTHV              = 140#,    LIBRARYV             = 141#,   00052900
         LIMIT                = 142#,    LINAGE               = 143#,   00053000
         LNAGECNT             = 144#,    LINEV                = 145#,   00053100
         LINECNT              = 146#,    LINKAGE              = 147#,   00053200
         LNV                  = 148#,    LOCATEV              = 149#,   00053300
         LOCKV                = 150#,    LOCKEDV              = 151#,   00053400
         LOWV                 = 152#,    MAXV                 = 153#,   00053500
         MEMORY               = 154#,    MESSAGEV             = 155#,   00053600
         MINV                 = 156#,    MODE                 = 157#,   00053700
         MODV                 = 158#,    MULTIPLE             = 159#,   00053800
         NEGATIVE             = 160#,    NEXT                 = 161#,   00053900
         NO                   = 162#,    NONSTANDARD          = 163#,   00054000
         NOTV                 = 164#,    NUMBER               = 165#,   00054100
         NUMERIC              = 166#,    NUMERICEDITED        = 167#,   00054200
         OBJCOMP              = 168#,    OBJECTPROGRAM        = 169#,   00054300
         OCCURS               = 170#,    OFV                  = 171#,   00054400
         OFF                  = 172#,    OH                   = 173#,   00054500
         OMITTED              = 174#,    ON                   = 175#,   00054600
         ONESV                = 176#,    OPTIONAL             = 177#,   00054700
         OV                   = 178#,    OVERFLOWV            = 179#,   00054800
         OUTPUT               = 180#,    PACKEDV              = 181#,   00054900
         PAGE                 = 182#,    PAGECNT              = 183#,   00055000
         PF                   = 184#,    PH                   = 185#,   00055100
         PICTUREV             = 186#,    PLUSV                = 187#,   00055200
         POINTERV             = 188#,    POSITION             = 189#,   00055300
         POSITIVE             = 190#,    PREPARED             = 191#,   00055400
         PRIORITY             = 192#,    PROCEDUREV           = 193#,   00055500
         PROCEED              = 194#,    PROCESSING           = 195#,   00055600
         PROGRAM              = 196#,    PROGRAMID            = 197#,   00055700
         PURGEV               = 198#,    QUEUEV               = 199#,   00055800
         QUOTE                = 200#,    RANDOMV              = 201#,   00055900
         RANGE                = 202#,    RD                   = 203#,   00056000
         RECORD               = 204#,    RECORDS              = 205#,   00056100
         RECORDING            = 206#,    REDEFINES            = 207#,   00056200
         REEL                 = 208#,    REELNUMBER           = 209#,   00056300
         REFERENCES           = 210#,    REMAINDER            = 211#,   00056400
         REMARKS              = 212#,    RENAMES              = 213#,   00056500
         REPLACING            = 214#,    REPORT               = 215#,   00056600
         REPORTING            = 216#,    RESERVE              = 217#,   00056700
         RESET                = 218#,    REVERSED             = 219#,   00056800
         REWINDV              = 220#,    RF                   = 221#,   00056900
         RH                   = 222#,    RIGHT                = 223#,   00057000
         ROUNDED              = 224#,    SA                   = 225#,   00057100
         SAMEV                = 226#,    SD                   = 227#,   00057200
         SAVEFACTOR           = 228#,    SECTION              = 229#,   00057300
         SECURITY             = 230#,    SEGMENTV             = 231#,   00057400
         SEGLMT               = 232#,    SELECT               = 233#,   00057500
         SELECTED             = 234#,    SELFV                = 235#,   00057600
         SENTENCE             = 236#,    SEPARATEV            = 237#,   00057700
         SEQUENTIAL           = 238#,    SIGNV                = 239#,   00057800
         SINV                 = 240#,    SIZE                 = 241#,   00057900
         SOURCE               = 242#,    SRCECOMP             = 243#,   00058000
         SPACEV               = 244#,    SPCLNAME             = 245#,   00058100
         SQRTV                = 246#,    STANDARD             = 247#,   00058200
         STATUS               = 248#,    SUM                  = 249#,   00058300
         SUPERVISOR           = 250#,    SYMBOLICV            = 251#,   00058400
         SYNCHRONIZED         = 252#,    TABLEV               = 253#,   00058500
         TALLY                = 254#,    TALLYING             = 255#,   00058600
         TERMINALV            = 256#,    TEXTV                = 257#,   00058700
         THAN                 = 258#,    THENV                = 259#,   00058800
         THRUV                = 260#,    TIMEV                = 261#,   00058900
         TIMES                = 262#,    TOV                  = 263#,   00059000
         TODAYSDATE           = 264#,    TRAILINGV            = 265#,   00059100
         TYPE                 = 266#,    UNIT                 = 267#,   00059200
         UNLOCKV              = 268#,    UNTILV               = 269#,   00059300
         UP                   = 270#,    UPON                 = 271#,   00059400
         UPPERB               = 272#,    USAGE                = 273#,   00059500
         USING                = 274#,    VALUEV               = 275#,   00059600
         VARYING              = 276#,    WHEN                 = 277#,   00059700
         WITHV                = 278#,    WORDSV               = 279#,   00059800
         WORKSTRG             = 280#,    ZEROV                = 281#,   00059900
         COMMA                = 282#,    SEMI                 = 283#,   00060000
         LEFTPAREN            = 284#,    RIGHTPAREN           = 285#,   00060100
         ANDV                 = 286#,    ORV                  = 287#,   00060200
         PLUSCHR              = 288#,    MINUSCHR             = 289#,   00060300
         STAR                 = 290#,    AMODV                = 291#,   00060400
         SLASH                = 292#,    DIVV                 = 293#,   00060500
         EXPSTAR              = 294#,    GREATER              = 295#,   00060600
         GRCHAR               = 296#,    LESSV                = 297#,   00060700
         LSCHAR               = 298#,    EQUAL                = 299#,   00060800
         EQCHAR               = 300#,    EQUALS               = 301#,   00060900
         UNEQUAL              = 302#,    EXCEEDS              = 303#,   00061000
         RTBRKT               = 304#,    COLON                = 305#,   00061100
         LFTBRKT              = 306#,    ACCEPT               = 501#,   00061200
         ADDV                 = 502#,    ALTER                = 503#,   00061300
         CALL                 = 504#,    CANCEL               = 505#,   00061400
         CLOSEV               = 506#,    COMPUTE              = 507#,   00061500
         COPY                 = 508#,    DISABLEV             = 509#,   00061600
         DISPLAY              = 510#,    DIVIDE               = 511#,   00061700
         DUMPV                = 512#,    ENABLEV              = 513#,   00061800
         ENTERV               = 514#,    EXAMINE              = 515#,   00061900
         EXITV                = 516#,    FORGETV              = 517#,   00062000
         GENERATE             = 518#,    GOV                  = 519#,   00062100
         HOLD                 = 520#,    IFV                  = 521#,   00062200
         INITIALIZEV          = 522#,    INITIATEV            = 523#,   00062300
         INSPECTV             = 524#,    MERGE                = 525#,   00062400
         MONITORV             = 526#,    MOVEV                = 527#,   00062500
         MULTIPLY             = 528#,    NOTE                 = 529#,   00062600
         OPENV                = 530#,    PERFORM              = 531#,   00062700
         PROCESSV             = 532#,    READV                = 533#,   00062800
         RECEIVEV             = 534#,    RELEASEV             = 535#,   00062900
         RERUN                = 536#,    RETURN               = 537#,   00063000
         RUN                  = 538#,    SEARCHV              = 539#,   00063100
         SEEKV                = 540#,    SENDV                = 541#,   00063200
         SETV                 = 542#,    SORTV                = 543#,   00063300
         STOP                 = 544#,    STRINGV              = 545#,   00063400
         SUBTRACT             = 546#,    SUSPEND              = 547#,   00063500
         TERMINATEV           = 548#,    UNSTRINGV            = 549#,   00063600
         USE                  = 550#,    WAITV                = 551#,   00063700
         WRITEV               = 552#,    BACKUP               = 553#,   00063800
         DISKV                = 554#,    DISPLAYV             = 555#,   00063900
         KEYBOARD             = 556#,    PTPUNCH              = 557#,   00064000
         PTREADER             = 558#,    PRINTER              = 559#,   00064100
         PUNCHV               = 560#,    READER               = 900#,   00064200
         REMOTEV              = 901#,    SORTTAPE             = 902#,   00064300
         SYSTEMV              = 903#,    TAPEV                = 904#,   00064400
         TAPE9                = 905#,    ACCESSAT             =   0#,   00064500
         AREASAT              =   1#,    AREASIZEAT           =   2#,   00064600
         CYCLEAT              =   3#,    DATEAT               =   4#,   00064700
         MYUSEAT              =   5#,    OTHERUSEAT           =   6#,   00064800
         REELAT               =   7#,    SAVEFACTORAT         =   8#,   00064900
         TYPEAT               =   9#;                                   00065000
DEFINE                                                                  00065100
         IF0[A] = INFO[(IIX ~ (A)   ).[34:6],IIX.[40:8]]#,              00065200
         IF1[A] = INFO[(IIX ~((A)+1)).[34:6],IIX.[40:8]]#,              00065300
         IF2[A] = INFO[(IIX ~((A)+2)).[34:6],IIX.[40:8]]#,              00065400
         IF3[A] = INFO[(IIX ~((A)+3)).[34:6],IIX.[40:8]]#,              00065500
         IF4[A] = INFO[(IIX ~((A)+4)).[34:6],IIX.[40:8]]#,              00065600
         IF5[A] = INFO[(IIX ~((A)+5)).[34:6],IIX.[40:8]]#,              00065700
         DRCT[A]= DICT[(IIX ~(A)).[33:6],IIX.[39:9]]#;                  00065800
DEFINE                                                                  00065900
         SIZEF = [01:11]#, % LOC OF SIZE OF ITEM                        00066000
         SIZEFF = [1:37:11]#, % FOR CONCATENATES                        00066100
         NXF = [33:15]#,     % INDEX TO NEXT ENTRY IN DICT              00066200
         NXFF = [33:33:15]#,                                            00066300
         NXIF = [18:15]#,    % INDEX IN DICT OR ACCUM TO INFO           00066400
         IR = [33:6]#,       % ROW FIELD OF INDEX                       00066500
         IRF = [33:42:6]#,                                              00066600
         IC  = [39:9]#,       % COLUMN PART OF INDEX                    00066700
         RSWDUSG = [30:3]#,                                             00066800
         RR = [34:6]#,       % ROW FIELD OF INFO INDEX                  00066900
         CC = [40:8]#,       % COLUMN FIELD OF INFO INDEX               00067000
         SCF = [03:5]#,      % SUB-CLASS OF IDENTIFIER OR RESERVED WORD 00067100
         SCFF = [3:43:5]#,   % FOR CONCATENATES                         00067200
         ITF = [18:12]#,     % SCALE OF LITERAL, KEY OF RESERVED WORD   00067300
         ITFF = [18:36:12]#,                                            00067400
         LSZ = [30:10]#,     % LITERAL SIZE (FROM ACCUM[1].SIZEF)       00067500
         PWR = [40:6]#,       % LITERAL POWER (LEFT SCALE)              00067600
         LSGF= [46:2]#,       % SIGN-0=NON,1=MINUS,2=PLUS               00067700
         REPSF = [08:10]#,   % POINTS TO REPLACING INFO IF PRESENT      00067800
         REPSFF = [8:38:10]#,                                           00067900
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%00068000
%                            DATA-NAME INFO ENTRY                      %00068100
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%00068200
                   % INFO WORD 0                                        00068300
         REDF  = [01:1]#,    % TRUE IF REDEFINED                        00068400
         REDFF = [1:47:1]#,   % FOR CONCATENATES                        00068500
         BRDF  = [02:1]#,    % TRUE IF AREA WAS REDEFINED               00068600
         BRDFF = [2:47:1]#,   % FOR CONCATENATES                        00068700
        %SCF                                                            00068800
         LVLF = [08:7]#,     COMMENT LEVEL-NUMBER (88 IS THE LARGEST);  00068900
         LVLFF = [8:41:7]#,   % FOR CONCATENATES                        00069000
         MONI = [15:1]#,     COMMENT MONITORED IF = 1;                  00069100
         L88F = [16:1]#,     % TRUE IF LEVEL 88 HIGH-VALUE TEST OCCURS  00069200
         SCOPE = [18:15]#,   % SCOPE OF ITEM                            00069300
         SCOPEF= [18:33:15]#,                                           00069400
         SNL = [33:15]#,     % SAME NAME LINK                           00069500
                   % INFO WORD 1                                        00069600
         LGHF = [3:15]#,     % ACTUAL (MEMORY) SIZE IN CHARACTERS       00069700
         LGHFF = [3:33:15]#,                                            00069800
         OCCF = [18:15]#,    % OCCURS FIELD                             00069900
         OFSF = [33:15]#,    % OFFSET FROM FRONT OF RECORD IN CHARACTERS00070000
         OFSFF= [33:33:15]#,                                            00070100
                   % INFO WORD 2                                        00070200
         GRPF  = [01:1]#,    % 1 (TRUE) IF GROUP                        00070300
         DPLF = [2:1]#,      % 1 IF ACTUAL POINT IS RIGHT OF HRDW POINT 00070400
         DPLFF = [2:47:1]#,                                             00070500
         CLF = [3:3]#,       % CLASS                                    00070600
         CLFF = [3:45:3]#,                                              00070700
         USF = [6:3]#,       % USAGE                                    00070800
         USFF = [6:45:3]#,                                              00070900
         OSTK = [09:1]#,     % 1 IF OPERAND IS IN STACK                 00071000
         OSTKF = [9:47:1]#,                                             00071100
         PCTF  = [10:1]#,    % 1 IF EDIT TABLE                          00071200
         BWZF  = [11:1]#,    % 1 IF BLANK WHEN ZERO                     00071300
         VARF  = [12:1]#,    % 1 UF SIZE DEPENDING                      00071400
         OCDV  = [13:1]#,    % 1 IF OCCURS DEPENDING                    00071500
         SCMP = [14:1]#,     COMMENT 1 = GROUP CONTAINS COMP;           00071600
         SCMPF = [14:47:1]#,                                            00071700
         JSTF = [15:1]#,     COMMENT 0 = NORMAL  1 = RIGHT;             00071800
         SGTF = [16:2]#, % 0 = NO SIGN, 1 = S, 2 = J                    00071900
         FSZF = [18:6]#,     % # OF DIGITS BETWEEN HRDW & ACTUAL POINTS 00072000
         WRDOF = [24:1]#, % TRUE IF WORD ORIENTED                       00072100
         WRDOFF = [24:47:1]#,                                           00072200
         RWSF  = [25:1]#,                                               00072300
         SUBF = [27:6]#,     % NUMBER OF SUBSCRIPTS REQUIRED            00072400
         SZF = [33:15]#,     % LOGICAL (PICTURE) SIZE                   00072500
         SZFF= [33:33:15]#,                                             00072600
                   % INFO WORD 3                                        00072700
         DDSC  = [01:3]#,    % DATA DIVISION SECTION                    00072800
         DDSCF = [1:45:3]#,                                             00072900
         HLNO  = [04:6]#,    % HIERARCHIAL LEVEL NUMBER                 00073000
         HLNOF = [4:42:6]#,                                             00073100
         NRNO  = [10:6]#,    % NESTED REDEFINES NUMBER                  00073200
         NRNOF = [10:42:6]#,                                            00073300
         LRF = [17:1]#,      % 1 IF LABEL RECORD                        00073400
         RWLF = [18:15]#,                                               00073500
         SZDF = [18:15]#,    % SIZE DEPENDING LINK                      00073600
         BADDF = [33:15]#,   % ADDRESS OF RECORD                        00073700
         BADDFF = [33:33:15]#,                                          00073800
                   % INFO WORD 4                                        00073900
         OCLF  = [01:7]#,    % BACK LINK TO PRIOR OCCURS ITEM           00074000
         % OPEN = [8=10]#,    % AVAILABLE                               00074100
         EDTF = [18:15]#,    % BASE ADDRESS OF EDIT TABLE               00074200
         FLLNK = [33:15]#,   % LINK TO FILE                             00074300
                             % LEVEL-88: PRT OF CONDITION NAME SEGMENT  00074400
                   % INFO WORD 5                                        00074500
         KEYRL = [01:7]#,    COMMENT LINK TO KEY ARRAY;                 00074600
         INXRL = [08:8]#,    COMMENT LINK TO INDEX-NAME ARRAY;          00074700
         OCDF = [18:15]#,    % OCCURS DEPENDING LINK                    00074800
         DUMPRTF = [18:15]#, % IF DUMPI=1 THEN PRT OF DUMP ROUTINE      00074900
         CNADF = [18:15]#,   % LEVEL-88: WORD OFFSET INTO CN SEGMENT    00075000
         DLNKF = [33:15]#,   % LINK TO DICTIONARY                       00075100
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%00075200
%                       LABEL INFO ENTRY                               %00075300
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%00075400
              % WORD 0                                                  00075500
         PRF    = [1:1]   #,      % IF PRT ENTRY REQUIRED               00075600
         TPF = [02:1]#,      % 1 IF PERFORM TERMINUS                    00075700
         % SCF                                                          00075800
         CALF = [08:1]#,     % TRUE IF CANDIDATE FOR ALTER VERB         00075900
         SNLF = [09:1]#,     % 1 IF SECTION NAME                        00076000
         SNLFF = [9:47:1]#,                                             00076100
         EXTF = [10:1]#,     COMMENT EXIT PARAGRAPH;                    00076200
         % SCOPE                                                        00076300
         % SNL                                                          00076400
              % WORD 1                                                  00076500
         LCNTF = [01:12]#,   % LABEL COUNT                              00076600
         SOPF = [13:1]#,     % START OF OUTPUT PROCEDURE                00076700
         EIPF = [14:1]#,     % END OF INPUT PROCEDURE                   00076800
         SIPF = [15:1]#,     % START OF INPUT PROCEDURE                 00076900
         IOPF = [16:1]#,     % WITHIN INPUT OR OUTPUT PROCEDURE         00077000
         EOPF = [17:1]#,     % END OF OUTPUT PROCEDURE                  00077100
         SEGF = [18:15]#,    % SEGMENT NUMBER                           00077200
       % BADDF               % PRT LOC OF LABEL                         00077300
              % WORD 2                                                  00077400
         DMPF = [1:1]#,      % =1 IF DUMP CONTROL LABEL                 00077500
         NCNTF = [8:10]#,    % PRT OF COUNTER FOR MNTR,DUMP OR DUMP CTRL00077600
         FXF = [18:15]#,                                                00077700
         LBADR = [33:15]#,   % CODE ADDRESS LABEL POINTS AT             00077800
              % WORD 3                                                  00077900
         ALSF = [01:1]#,     % TRUE IF ALTERED                          00078000
         ALTDF= [02:14]#,    % ADDRESS OF ALTER VARIABLE                00078100
         ALINKF = [18:15]#,  % LINK TO PRIOR ALTERED PARAGRAPH          00078200
         AINFF = [33:15]#,   % INFO OF INITIAL LABEL                    00078300
              % WORD 4                                                  00078400
         PSNOF = [01:10] #,  % UNIQUE NO FOR PRIV ROUTINES              00078500
         SPERF = [17:1]#,    % SECTION. 1 IF PERFORM PRESENT            00078600
         LBLSTRTF = [18:15]#,% LINKS LABELS FOR FIX-UP                  00078700
         SILKF = [33:15]#,   % LINK TO SECTION NAME                     00078800
              % WORD 5                                                  00078900
         DNPF = [1:1]#,      % 1 IF DUMP CONTROL MAXIMUM IS DATA-NAME   00079000
         DNPFF = [1:47:1]#,                                             00079100
         DMAXF = [3:15]#,    % VALUE OR INFO INX OF MAXIMUM FOR DUMP CTL00079200
         DMAXFF = [3:33:15]#,                                           00079300
         DUMPF = [18:15]#,   % PRT OF DUMP ROUTINE                      00079400
         DUMPFF = [18:33:15]#,                                          00079500
       % DLNKF                                                          00079600
                   % * * * DEFINES FOR REPORT-NAME IN INFO * * * * * * *00079700
              % WORD 0                                                  00079800
         MODT= [01:1]#,      % 1 IF MORE THAN ONE DETAIL GROUP          00079900
         % SCF                                                          00080000
         CODN= [08:8]#,      % CONTAINS CODE VALUE                      00080100
         % SCOPE                                                        00080200
         % SNL                                                          00080300
              % WORD 1                                                  00080400
         DFLT= [01:1]#,      % 1 IF NO PAGE LIMITS CLAUSE               00080500
         PGLT= [04:8]#,      % PAGE LIMIT                               00080600
         HCHN= [12:1]#,      % 1 IF CHANNEL NO. FOR HEADING             00080700
         HDNG= [13:8]#,      % HEADING                                  00080800
         HGRP= [12:9]#,                                                 00080900
         HS  = 35#,                                                     00081000
         DCHN= [21:1]#,      % 1 IF CHANNEL NO. FOR FIRST DETAIL        00081100
         FRST= [22:8]#,      % FIRST DETAIL                             00081200
         FDGP= [21:9]#,                                                 00081300
         FDS = 26#,                                                     00081400
         LCHN= [30:1]#,      % 1 IF CHANNEL NO. FOR LAST DETAIL         00081500
         LST = [31:8]#,      % LAST DETAIL                              00081600
         LDGP= [30:9]#,                                                 00081700
         LDS = 17#,                                                     00081800
         FCHN= [39:1]#,       % 1 IF CHANNEL NO. FOR FOOTING            00081900
         FOOT= [40:8]#,       % FOOTING                                 00082000
         FGRP= [39:9]#,                                                 00082100
         FSS = 8#,                                                      00082200
              % WORD 2                                                  00082300
         GINC= [04:14]#,     % IRW TO GENERAL INCREMENT ROUTINE         00082400
         CTRL= [18:14]#,     % ICW TO CONTROL ROUTINE                   00082500
         % SZF                                                          00082600
              % WORD 3                                                  00082700
         RHIN=[01:15]#,     % REPORT HEADING INFO INDEX                 00082800
         RFIN= [16:16]#,     % REPORT FOOTING INFO INDEX                00082900
         % BADDF                                                        00083000
              % WORD 4                                                  00083100
         PHIN=[01:15]#,     % PAGE HEADING INFO INDEX                   00083200
         PFIN= [16:16]#,     % PAGE FOOTING INFO INDEX                  00083300
         % FLLNK                                                        00083400
              % WORD 5                                                  00083500
        STARTOFREPORT = 000#;                                           00083600
DEFINE                                                                  00083700
                 %   I N F O   W O R D   0    **RNIF       ****         00083800
         %        =[01:1]#,                                             00083900
         %        =[02:1]#,                                             00084000
         % SCF    =[03:5]#,  % RPN                                      00084100
         %        =[08:7]#,                                             00084200
         % MONI   =[15:1]#,                                             00084300
         % SCOPE  =[16:16]#,                                            00084400
         % SNL    =[32:16]#,                                            00084500
                 %   I N F O   W O R D    1                             00084600
           RPLF   =[01:1]#,  % 1  IF PAGE LIMITS CLAUSE FOR RPT.        00084700
       RPTSPACTYP =[02:4]#, %TYPES OF LINE SPACING SEEN IN RPT LINES    00084800
           RCHN   =[02:1]#,%    TRUE IF ANY CHAN SPECS                  00084900
           RNPF   =[03:1]#, %   TRUE IF ANY NEXT PAGE SPECS             00085000
           RABF   =[04:1]#, %   TRUE IF ANY ABSOLUTE                    00085100
           RELF   =[05:1]#, %   TRUE IF ANY RELATIVE                    00085200
           RNGF   =[06:1]#, %   TRUE IF ANY NEXT GROUP CLAUSE           00085300
           PFIL   =[07:1]#,  % 1  IF ASSIGNED TO PRINTER FILE           00085400
           RCODN  =[08:8]#,  % RPT CODE IS  ...                         00085500
           RPCIF  =[16:16]#, % LINK TO PCIF  IF ANY,FOR THIS RPT        00085600
           RLCIF  =[32:16]#, % LINK TO LCIF  IF ANY,FOR THIS RPT        00085700
                 %   I N F O   W O R D    2                             00085800
           RFINL  =[01:15]#, % LINK TO RLVIF FOR FINAL LEVEL [00:16]    00085900
           RMAJL  =[16:16]#, % LINK TO RLVIF FOR MAJOR LEVEL            00086000
           RMINL  =[32:16]#, % LINK TO RLVIF FOR MINOR LEVEL            00086100
                 %   I N F O   W O R D    3                             00086200
           RCTLF  =[01:1]#,  % 1 IF CONTROLS CLAUSE                     00086300
           RFINF  =[02:1]#,  % 1 IF FINAL LEVEL                         00086400
           RLEVF  =[03:1]#,  % 1 IF ANY LEVELS, OTHER THAN FINAL        00086500
           RDETF  =[04:1]#,  % 1 IF ANY DETAIL RPT GRP DECLARED         00086600
           RMDTF  =[05:1]#,  % 1 IF MORE THAN ONE DET RPT GRP DECLARED  00086700
           RGRNF  =[06:1]#,  % 1 IF ANY GEN.RPT-NAM  STMT               00086800
           RGDTF  =[07:1]#,  % 1 IF ANY GEN.DETAIL RPT.GRP STMT         00086900
           RINTF  =[08:1]#,  % 1 IF ANY INITIATE STMT FOR RPT           00087000
           RTERF  =[09:1]#,  % 1 IF ANY TERMINATE STMT FOR RPT          00087100
           RGRNC = [10:1]#,  % 1 IF CODE ALREADY SETUP FOR GEN R-N.     00087200
           RINTC = [11:1]#,  % 1 IF CODE ALREADY SETUP FOR INIT R-N.    00087300
           RTERC = [12:1]#,  % 1 IF CODE ALREADY SETUP FOR TERM R-N.    00087400
           STAT  =[13:1]#, % ON IF SUBTOTAL ANY                         00087500
         RHDGT   = [14:1]#,  % ON IF ANY RPT HEADING GRP                00087600
         RFTGT   = [15:1]#,  % ON IF ANY  RPT FOOTING                   00087700
    %             =[16:2]#,  %                                          00087800
           RCBTE = [18:14]#, % ADR OF CBT  SUBR.                        00087900
         % BADDF = [32:16]#, % BASE ADR OF RECORD                       00088000
                 %   I N F O    W O R D   4                             00088100
           RSCIX = [01:15]#, % FIRST SUM CTR OF RPT                     00088200
         %        =[01:1]#,                                             00088300
          RSTAE   =[02:14]#, % ADR OF  SUBTOTAL ANY DET SUBR            00088400
          RDEGL   =[16:16]#, % LINK TO INFO ENTRY OF FIRST DETAIL GRP   00088500
         % FLLNK  =[32:16]#, % LINK TO FILE INFO ENTRY                  00088600
                 %   I N F O    W O R D   5                             00088700
           RHIL   =[01:15]#,% LINK TO RPT HDG UNTIL END P2 RPT SECT     00088800
           TERMA  =[01:15]#, % ADR OF TERM RN SUBR            [00:16]   00088900
           RFIL   =[16:16]#,% LINK TO RPT FTG UNTIL END P2 RPT SECT     00089000
           GENA   =[16:16]#, % ADR OF GEN  RN SUBR                      00089100
         % DLNKF  =[32:16]#, % LINK TO DICT ENTRY FOR RPT-NAME          00089200
                 %   I N F O   W O R D    0    **RLVIF     ****         00089300
         %        =[01:1]#,                                             00089400
         %        =[02:1]#,                                             00089500
         % SCF    =[03:5]#,                                             00089600
         %        =[08:7]#,                                             00089700
         % MONI   =[15:1]#,                                             00089800
         % SCOPE  =[16:16]#,                                            00089900
         % SNL    =[32:16]#,                                            00090000
                 %   I N F O   W O R D    1                             00090100
         % LGHF   =[01:15]#, %                                          00090200
         % OCCF   =[16:16]#, %  0                                       00090300
         % OFSF   =[32:16]#, %                                          00090400
                 %   I N F O   W O R D    2                             00090500
         % GRPF   =[01:1]#,  %  0                                       00090600
         % CLF    =[02:3]#,  %                                          00090700
         % USF    =[05:3]#,                                             00090800
         % DPLF   =[08:1]#,                                             00090900
         % 0STK   =[09:1]#,                                             00091000
         % PCTF   =[10:1]#,                                             00091100
         % BWZF   =[11:1]#,  %  0                                       00091200
         % VARF   =[12:1]#,  %  0                                       00091300
         % 0CDV   =[13:1]#,  %  0                                       00091400
         % SCMP   =[14:1]#,                                             00091500
         % JSTF   =[15:1]#,                                             00091600
         % SGTF   =[16:2]#,                                             00091700
         % FSZF   =[18:6]#,                                             00091800
         % WRDOF  =[24:1]#,                                             00091900
           CSA    =[25:1]#, %  AT THIS LEVEL  RESET SUM CTRS            00092000
         % SUBF   =[26:6]#,  % 0                                        00092100
         % SZF    =[32:16]#,                                            00092200
                 %   I N F O  W O R D    3                              00092300
         % DDSC   =[01:3]#,                                             00092400
           CHT   =[04:1]#,                                              00092500
           CFT   =[05:1]#,                                              00092600
           NXHLT =[06:1]#,                                              00092700
           NXLLT =[07:1]#,                                              00092800
           RLVNOF =[08:8]#,  % ASSIGNED RPT CTL. LEVEL NUMBER           00092900
           RESL   =[16:16]#, % RESET SUM LINK                           00093000
         % BADDF  =[32:16]#, % ADR OF CTL FIELD (PRIOR VALUE)           00093100
                 %   I N F O   W O R D    4                             00093200
           RNXHL  =[01:15]#, % LINK TO NEXT HIGHER CTL.LEV.  [00:16]    00093300
           RNXLL  =[16:16]#, % LINK TO NEXT LOWER  CTL.LEV.             00093400
           RLVPCL =[32:16]#, % LINK TO INFO ENTRY FOR CURR CTL.FIELD    00093500
                 %   I N F O   W O R D    5                             00093600
           RCHGL  =[01:15]#, % LINK TO CH RPT.GRP INFO ENTRY [00:16]    00093700
           RCFGL  =[16:16]#, % LINK TO CF RPT GRP INFO ENTRY            00093800
         % DLNKF  =[32:16]#, % LINK TO RNIF                             00093900
                 %   I N F O   W O R D    0    **PCIF      ****         00094000
         %        =[01:1]#,  %                                          00094100
         %        =[02:1]#,                                             00094200
         % SCF    =[03:5]#,                                             00094300
         %        =[08:7]#,                                             00094400
         % MONI   =[15:1]#,                                             00094500
         % SCOPE  =[16:16]#,                                            00094600
         % SNL    =[32:16]#,                                            00094700
                 %   I N F O   W O R D    1                             00094800
         % LGHF   =[01:15]#,                                            00094900
         % OCCF   =[16:16]#, % 0                                        00095000
         % OFSF   =[32:16]#,                                            00095100
                 %   I N F O   W O R D    2                             00095200
         % GRPF   =[01:1]#,  % 0  ELEM                                  00095300
         % CLF    =[02:3]#,  % NM                                       00095400
         % USF    =[05:3]#,  % CMP1                                     00095500
         % DPLF   =[08:1]#,  % 0                                        00095600
         % OSTK   =[09:1]#,  %                                          00095700
         % PCTF   =[10:1]#,  %                                          00095800
         % BWZF   =[11:1]#,  % 0                                        00095900
         % VARF   =[12:1]#,  % 0                                        00096000
         % OCDV   =[13:1]#,  % 0                                        00096100
         % SCMP   =[14:1]#,  % 0                                        00096200
         % JSTF   =[15:1]#,  % 0                                        00096300
         % SGTF   =[16:2]#,                                             00096400
         % FSZF   =[18:6]#,                                             00096500
         % WRDOF  =[24:1]#,                                             00096600
         %        =[25:1]#,                                             00096700
         % SUBF   =[26:6]#,  % 0                                        00096800
         % SZF    =[32:16]#,                                            00096900
                 %   I N F O    W O R D   3                             00097000
         % DDSC   =[01:3]#,  % RSECT                                    00097100
         %        =[04:28]#,                                            00097200
         % BADDF  =[32:16]#, % ADR OF PAGE-CTR (OBJ.TIME)               00097300
                 %   I N F O    W O R D   4                             00097400
         %                                                              00097500
         %                                                              00097600
           RNIFL  =[32:16]#, % LINK TO RNIF  RPT NAM INFO               00097700
         RNIFLF = [32:32:16]#,                                          00097800
                 %   I N F O    W O R D   5                             00097900
           RPHIL  =[01:15]#, % LINK TO PH RPT GRP INFO       [00:16]    00098000
           RPFIL  =[16:16]#, % LINK TO PF RPT GRP INFO                  00098100
         % DLNKF  =[32:16]#, % LINK TO DICT ENTRY                       00098200
                 %   I N F O   W O R D    0    **LCIF      ****         00098300
         %        =[01:1]#,                                             00098400
         %        =[02:1]#,                                             00098500
         % SCF    =[03:5]#,                                             00098600
         %        =[08:7]#,                                             00098700
         % MONI   =[15:1]#,                                             00098800
         % SCOPE  =[16:16]#,                                            00098900
         % SNL    =[32:16]#,                                            00099000
                 %   I N F O   W O R D    1                             00099100
         % LGHF   =[01:15]#,                                            00099200
         % OCCF   =[16:16]#, % 0                                        00099300
         % OFSF   =[32:16]#,                                            00099400
                 %   I N F O   W O R D    2                             00099500
         % GRPF   =[01:1]#,  % 0  ELEM                                  00099600
         % CLF    =[02:3]#,                                             00099700
         % USF    =[05:3]#,                                             00099800
         % DPLF   =[08:1]#,                                             00099900
         % OSTK   =[09:1]#,                                             00100000
         % PCTF   =[10:1]#,                                             00100100
         % BWZF   =[11:1]#,                                             00100200
         % VARF   =[12:1]#,  % 0                                        00100300
         % OCDV   =[13:1]#,  % 0                                        00100400
         % SCMP   =[14:1]#,  % 0                                        00100500
         % JSTF   =[15:1]#,  % 0                                        00100600
         % SGTF   =[16:2]#,                                             00100700
         % FSZF   =[18:6]#,                                             00100800
         % WRDOF  =[24:1]#,                                             00100900
         %        =[25:1]#,                                             00101000
         % SUBF   =[26:6]#,   0                                         00101100
         % SZF    =[32:16]#,                                            00101200
                 %   I N F O   W O R D    3                             00101300
         % DDSC   =[01:3]#,  %RSECT                                     00101400
         %        =[04:12]#                                             00101500
           SVNGSA =[16:16]#, %ADR OF SAVED NXT GRP SPACING FIELD        00101600
         % BADDF  =[32:16]#, %ADR OF LINE-CTR(OBJ.TIME)                 00101700
                 %   I N F O   W O R D    4                             00101800
         %                                                              00101900
         %                                                              00102000
           LPGLM  =[04:8]#,  % PAGE LIMIT                               00102100
           LHDCHN =[12:1]#,  % 1 IF CHANNEL # FOR HEADING LINE          00102200
           LHD2   =[13:8]#,  % LINE # FOR FIRST HDG LINE                00102300
           LDTCHN =[21:1]#,  % 1 IF CHANNEL # FOR (FIRST) DET.LINE      00102400
           LFD3   =[22:8]#,  % LINE # FOR FIRST DET LINE OF PAGE        00102500
           LLDCHN =[30:1]#,  % 1 IF CHANNEL # FOR LAST DET LINE         00102600
           LLD4   =[31:8]#,  % LINE # LIMIT FOR LAST DET LINE           00102700
           LFTCHN =[39:1]#,   % 1 IF CHANNEL # FOR FIRST LINE PG.FTG.   00102800
           LFT5   =[40:8]#,   % LINE # FOR FIRST PF LINE                00102900
                 %   I N F O    W O R D   5                             00103000
           LRNIF  =[16:16]#, % LINK TO RPT NAME INFO                    00103100
         LRNIFF = [16:32:16]#,                                          00103200
         % DLNKF  =[32:16]#, % LINK TO DICT ENTRY                       00103300
                 %   I N F O   W O R D   0     **RGIF      ****         00103400
         %        =[01:1]#,                                             00103500
         %        =[02:1]#,                                             00103600
         % SCF    =[03:5]#,  %SCF                                       00103700
         % LVLF   =[08:7]#,                                             00103800
         % MONI   =[15:1]#,                                             00103900
         % SCOPE  =[16:16]#,                                            00104000
         % SNL    =[32:16]#,                                            00104100
                 %   I N F O   W O R D   1                              00104200
           RGPLT  =[01:1]#,  %1 IF ANY PERTINENT PAGE LIMIT PARAMETER   00104300
           RGLIMS =[02:8]#, %  LIMIT-FIRST LINE OF GRP                  00104400
           RGLIME =[10:8]#, %  LIMIT-LAST  LINE OF GRP                  00104500
           RGNGST =[18:1]#, %  1 IF NEXT GROUP SPACING SPECIFIED        00104600
       RGNGSTYP   =[19:4]#, % TYPE OF NEXT GROUP SPACING                00104700
           RGNCHN =[19:1]#, %   TRUE IF CHANNEL NUMBER                  00104800
           RGNGNP =[20:1]#, %   TRUE IF NEXT PAGE OPTION                00104900
           RGNABS =[21:1]#, %   TRUE IF ABSOLUTE SPACING                00105000
           RGNREL =[22:1]#, %   TRUE IF RELATIVE SPACING                00105100
           RGNGVAL=[23:8]#,% VALUE OF NEXT GROUP SPACING                00105200
           RGMUL  =[31:1]#, % TRUE IF MORE THAN 1 LINE IN THI S RPT GRP 00105300
         RGSPACTYP=[32:4]#,  %TYPES OF LINE SPECS WITHIN THIS RPT GRP   00105400
           RGLCT  =[32:1]#, %     TRUE IF CHANNEL NUMBER                00105500
           RGLNPT =[33:1]#, %     TRUE IF ON NEXT PAGE OPTION           00105600
           RGLAT  =[34:1]#, %     TRUE IF ABSOLUTE                      00105700
           RGLRT  =[35:1]#, %     TRUE IF RELATIVE                      00105800
    %              [36:1]#, %                                           00105900
           RGMDT  =[37:1]#,%TRUE IF ANOTHER DET GRP VIA IF5.RGLVL LNK   00106000
           RGPRT  =[38:1]#, % TRUE IF ANY PRINTABLE LINE IN RPT GRP     00106100
           RGURT =[39:1]#, % IF USE PROC                                00106200
           RGXFT =[40:1]#, % IF CROSSFOOT SUMS                          00106300
           RGRST =[41:1]#, % IF ROLL SUMS                               00106400
           RGCST =[42:1]#, % IF (LEVEL) SUMS                            00106500
           RGSUMT =[43:1]#, % ON IF ANY SUM SPECS                       00106600
           RGTYPF =[44:4]#, % TYPE OF RPT GRP                           00106700
                 %    I N F O   W O R D    2                            00106800
         RGNOLINS =[08:8]#,  % TOTAL NUMBER OFPRINT LINES IN RPT GROUP  00106900
           LNXLINL=[16:16]#, %LINK TO INFO FOR FIRST PRT LIN OF GRP     00107000
         % SZF    =[32:16]#, %                                          00107100
                 %    I N F O   W O R D    3                            00107200
           RGXFA  =[01:15]#, % ADR OF XF SUMS IF CF GRP                 00107300
           RGROLA =[16:16]#, % ADR-SUBTOTAL IF DET, ROLL SUMS IF CF     00107400
         % BADDF  =[32:16]#, %                                          00107500
                %    I N F O   W O R D    4                             00107600
           RGURA  =[01:15]#, % ADR OF USE BEFORE REPORTING SUBR         00107700
           RGPROCA=[16:16]#, % ADR OF PROCESS RPT GRPX SUBR             00107800
         % RNIFL  =[32:16]#, % LINK TO RNIF                             00107900
                %    I N F O   W O R D    5                             00108000
         %        =[01:15]#, %                                          00108100
           RGLVL  =[16:16]#, % LINK TO RLVIF(PRIOR)IF NOT DET,          00108200
                             %  ELSE LINK TO ANOTHER DET TYPE GROUP     00108300
         % DLNKF  =[32:16]#, % LINK TO DICT IF ANY D-N FOR THIS GRP     00108400
                 %   I N F O   W O R D    0    **RLIF      ****         00108500
         %        =[01:1]#,  %                                          00108600
         %        =[02:1]#,                                             00108700
         % SCF    =[03:5]#,                                             00108800
         % LVLF   =[08:7]#,                                             00108900
         % MONI   =[15:1]#,                                             00109000
         % SCOPE  =[16:16]#,                                            00109100
         % SNL    =[32:16]#,                                            00109200
                 %   I N F O   W O R D    1                             00109300
                 %   I N F O   W O R D    2                             00109400
           LNXLIN =[16:16]#, % LINK TO NEXT PRINT LINE OF THIS GRP      00109500
           RLPRT =[32:1]#, % ON  IF ANY  PRINT ITEMS FOR LINE           00109600
                 %   I N F O   W O R D    3                             00109700
           RLSPT  =[01:1]#,  %    RPT LINE SPACING TOG                  00109800
       RLSPACTYP  =[02:4]#,% TYPE OF LINE SPACING SPECIFIED             00109900
           RLCHNF =[02:1]#,%      TRUE IF CHANNEL NUMBER                00110000
           RLNXPF =[03:1]#,%      TRUE IF ON NEXT PAGE OPTION           00110100
           RLABSF =[04:1]#,%      TRUE IF ABSOLUTE                      00110200
           RLRELF =[05:1]#,%      TRUE IF RELATIVE                      00110300
           RLSPAC =[06:8]#,  %      VALUE OF SPACING SPECIFIED          00110400
       % BADDF    =[32:16]#,                                            00110500
                 %   I N F O   W O R D     4                            00110600
           RLRPIFL=[01:15]#, % LINK TO FIRST PRINT FIELD IN LIN [00:16] 00110700
           LRGIF  =[16:16]#, % LINK TO RGIF                             00110800
         LRGIFF =[16:32:16]#,                                           00110900
         % RNIFL  =[32:16]#, % LINK TO RNIF                             00111000
                 %   I N F O   W O R D     5                            00111100
           LFRST  =[01:1]#,  % 1 IF FIRST LINE OF RPT GRP               00111200
          LLAST   =[02:1]#,  % 1 IF LAST  LINE OF RPT GRP               00111300
         %                                                              00111400
           RLFMTA =[16:16]#, % ADR OF LINE FORMATTER                    00111500
         % DLNKF  =[32:16]#, % LINK TO DICT IF ANY D-N FOR LINE         00111600
                 %   I N F O   W O R D   0     **RSIF      ****         00111700
         %        =[01:1]#,                                             00111800
         %        =[02:1]#,                                             00111900
         % SCF    =[03:5]#,  % ITM                                      00112000
         % LVLF   =[08:7]#,                                             00112100
         % MONI   =[15:1]#,                                             00112200
         % SCOPE  =[16:16]#,                                            00112300
         % SNL    =[32:16]#,                                            00112400
                 %   I N F O    W O R D   1                             00112500
         % LGHF   =[01:15]#,                                            00112600
         % OCCF   =[16:15]#, %  0                                       00112700
         % OFSF   =[32:16]#,                                            00112800
                 %   I N F O    W O R D    2                            00112900
         % GRPF   =[01:1]#,  %  0  ELEM                                 00113000
         % CLF    =[02:3]#,  %  NM                                      00113100
         % USF    =[05:3]#,  %  CMP1                                    00113200
         % DPLF   =[08:1]#,                                             00113300
         % OSTK   =[09:1]#,                                             00113400
         % PCTF   =[10:1]#,                                             00113500
         % BWZF   =[11:1]#,  % 0                                        00113600
         % VARF   =[12:1]#,  % 0                                        00113700
         % OCDV   =[13:1]#,  % 0                                        00113800
         % SCMP   =[14:1]#,                                             00113900
         % JSTF   =[15:1]#,  % 0                                        00114000
         % SGTF   =[16:2]#,                                             00114100
         % FSZF   =[18:6]#,                                             00114200
         % WRDOF  =[24:1]#,                                             00114300
         %        =[25:1]#,                                             00114400
         % SUBF   =[26:6]#, %0   NO  SUBSCRIPTS                         00114500
         % SZF    =[32:16]#,                                            00114600
                 %   I N F O   W O R D    3                             00114700
         % DDSC   =[01:3]#,  %RSECT                                     00114800
         %        =[04:4]#,                                             00114900
         % RLVNOF =[08:8]#,  % ASSIGNED RPT.CTL.LEVEL NUMBER            00115000
         % RESL   =[16:16]#, % RESET SUM LINK                           00115100
         % BADDF  =[32:16]#,                                            00115200
                 %   I N F O   W O R D    4                             00115300
         RSUPF    =[14:1]#, % ON IF ANY UPON CLAUSE                     00115400
         RMSCF    =[15:1]#,  % ON IF MULTIPLE SUM CLAUSES               00115500
         %                                                              00115600
           RSCLVIF=[16:16]#, % LINK TO RLVIF                            00115700
         RSCLVIFF= [16:32:16]#,                                         00115800
         % RNIFL  =[32:16]#, % LINK TO RNIF                             00115900
                 %   I N F O   W O R D    5                             00116000
           RSPIFL =[01:15]#, %LINK TO RPIF IF SUM PRINTED     [00:16]   00116100
         %        =[16:16]#, %                                          00116200
         % DLNKF  =[32:16]#, %LINK TO DICT IF ANY D-N FOR SUM-CTR       00116300
                 %   I N F O    W O R D   0    **RPIF      ****         00116400
         %        =[01:1]#,                                             00116500
         %        =[02:1]#,                                             00116600
         % SCF    =[03:5]#,                                             00116700
         % LVLF   =[08:7]#,                                             00116800
         % MONI   =[15:1]#,                                             00116900
         % SCOPE  =[16:16]#,                                            00117000
         % SNL    =[32:16]#,                                            00117100
                 %   I N F O    W O R D   1                             00117200
         % LGHF   =[01:15]#,                                            00117300
         % OCCF   =[16:15]#, % 0                                        00117400
         % OFSF   =[32:16]#, % COLUMN #                                 00117500
                 %   I N F O    W O R D   2                             00117600
         % GRPF   =[01:1]#,  % 0 ELEM                                   00117700
         % CLF    =[02:3]#,                                             00117800
         % USF    =[05:3]#,                                             00117900
         % DPLF   =[08:1]#,                                             00118000
         % OSTK   =[09:1]#,  % 0  NO                                    00118100
         % PCTF   =[10:1]#,  % 1  YES                                   00118200
         % BWZF   =[11:1]#,                                             00118300
         % VARF   =[12:1]#,  % 0                                        00118400
         % OCDV   =[13:1]#,  % 0                                        00118500
         % SCMP   =[14:1]#,  % 0                                        00118600
         % JSTF   =[15:1]#,                                             00118700
         % SGTF   =[16:1]#,                                             00118800
         % FSZF   =[18:6]#,                                             00118900
         % WRDOF  =[24:1]#,                                             00119000
           GINDT  =[25:1]#,  % ON IF GRP INDICATE                       00119100
         % SUBF   =[26:6]#,  % 0   NO SUBSCRIPTS                        00119200
         % SZF    =[32:16]#,                                            00119300
                 %   I N F O   W O R D   3                              00119400
         % DDSC   =[01:3]#,  % RSECT                                    00119500
         % HLNO   =[04:6]#,                                             00119600
         %        =[10:2]#,  %                                          00119700
           SFSST  =[12:1]#,  % TRUE IF SF SUBSCRIPTED                   00119800
           SFTYP  =[13:3]#,  % TYP OF SF                                00119900
           SFINFX =[16:16]#, % INFO OF SF                               00120000
           SFSS   =[32:16]#, % LINK TO SUBSCRIPTS                       00120100
                 %   I N F O    W O R D  4                              00120200
         %        =[01:7]#,                                             00120300
         % ETIF   =[08:10]#, % INDEX  INTO  EDIT TBLE                   00120400
         % EDTF   =[18:14]#, % BASE ADR OF  EDIT TBLE                   00120500
         % FLLNK  =[32:16]#,                                            00120600
                 %   I N F O    W O R D  5                              00120700
           RPLIFL =[01:15]#, %LINK TO RLIF                              00120800
           NPIFL  =[16:16]#, % LINK TO INFO OF NEXT PRINT ITEM IN LINE  00120900
         % DLNKF  =[32:16]#,                                            00121000
      ENDOFREPORT = 999#;                                               00121100
    DEFINE                                                              00121200
      STRTRS  = 0#, % START OF RPT SECT                                 00121300
      STRTRD  =  1#, % START OF RPT DESCRIPTION                         00121400
         SORG = 4#,% RPTM    START OF RPT GROUP                         00121500
      ENDRD  = 8#, % END OF RPT DESCRIPTION                             00121600
      ENDRS  = 9#; % END OF RPT SECT                                    00121700
DEFINE                                                                  00121800
    PFSTRT  = 0#,                                                       00121900
    PFERR   = 0#,                                                       00122000
    PFLIT   = 2#,                                                       00122100
    PFDN    = 3#,                                                       00122200
    PFSPECR = 4#,                                                       00122300
    PFINTR  = 6#,                                                       00122400
    PFSUM   = 7#,                                                       00122500
    PFX8    = 8#,                                                       00122600
    PFEND   = 9#;                                                       00122700
DEFINE                                                                  00122800
    SUMSTRT = 0#,  %    V2                                              00122900
    SUMTYP  = 1#,  %    V2                                              00123000
    SUMDN   = 1#,  % V1                                                 00123100
    SUMLT   = 2#,  % V1                                                 00123200
    SUMTLY  = 3#,  % V1                                                 00123300
    SUMERR  = 4#,  % V1                                                 00123400
    SUPOP   = 5#,  % V1 IS OPERAND OF UPON   V2 = 5                     00123500
    NUPON   = 6#,  % V2 NULL CASE OF UPON                               00123600
    SUPON   = 7#,  % V2 , SINGLE OPERAND IN V1                          00123700
    MUPON   = 8#,  % V2 MULTIPLE OPERANDS OF UPON   V1 = 0              00123800
    SUMEND  = 9#;  % V2                                                 00123900
    DEFINE                   %  TYPE  OF  REPORT GROUP          ***     00124000
         ERRTYP = 0#,                                                   00124100
         DET  = 1#,          % TYPE CODES ASSIGNED FOR RGTYPE   ***     00124200
         CFG  = 2#,                                                     00124300
         CHG  = 3#,                                                     00124400
         PFG  = 4#,                                                     00124500
         PHG  = 5#,                                                     00124600
         RFG  = 6#,                                                     00124700
         RHG  = 7#;                                                     00124800
    DEFINE              %   TYPE OF  LINE SPACING  ***                  00124900
         ERRSPAC=  0#,  % ERROR IN TYPE SPACING                         00125000
         RELS   =  1#,  % RELATIVE LINE SPACING                         00125100
         ABSL   =  2#,  % ABSOLUTE                                      00125200
         NXPG   =  4#,  % NEXT PAGE                                     00125300
         CHAN   =  8#,  % CHANNEL NUMBER                                00125400
         ABNP   =  6#,  % ABSOLUTE LINE NUMBER ON NEXT PAGE             00125500
         ABCH   = 10#,  % ABSOLUTE LINE #  WITH CHANNEL #               00125600
         ABCHNP = 14#;  % ABS LINE # WITH CHAN # ON NEXT PAGE           00125700
    DEFINE                                                              00125800
         GENRN = 1#,                                                    00125900
         GENRDG= 2#;                                                    00126000
         DEFINE RPTLVI = 2#,                                            00126100
                RPTPC = 3#,                                             00126200
                RPTLC = 4#,                                             00126300
                RPTRGI = 5#,                                            00126400
                RPTLNI = 6#,                                            00126500
                RPTPFI = 7#,                                            00126600
                RPTSC = 8#,                                             00126700
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%00126800
%                  FILE DICTIONARY AND INFO ENTRIES                    %00126900
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%00127000
              % DICT 0                                                  00127100
         FIBF = [8:8]#,      % FIB INDEX                                00127200
         FIBFF = [8:40:8]#,                                             00127300
         SRTLD = [08:1]#, % DICT0 =1 IF LABEL DEALS WITH SORT PROCEDURE 00127400
         SRTLDF = [8:47:1]#,                                            00127500
         SRTID = [09:1]#, % DICT0 =1 IF INPUT PROCEDURE                 00127600
         SRTIDF = [9:47:1]#,                                            00127700
         SOPD = [01:1]#,  % DICT0 = 1 IF START OF PROCEDURE             00127800
         SOPDF = [1:47:1]#,  % FOR CONCATENATES                         00127900
         EOPD = [02:1]#,  % DICT0 =1 IF END OF PROCEDURE                00128000
         EOPDF = [2:47:1]#,                                             00128100
         FPSNOD =[10:6]#, % DICT0 UNIQUE NO FOR FORWARD PROCEDURES      00128200
%%%%%%%%%%%%%%%%%%%%%%%%%%%%% FILE INFO %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%00128300
              % WORD 0                                                  00128400
       % SCF                                                            00128500
       % FIBF                                                           00128600
       % SCOPE                                                          00128700
       % SNL                                                            00128800
              % WORD 1                                                  00128900
         USPRF = [2:1]#,     % =1 IF FILE USE ROUTINE PRESENT           00129000
         LBLUSF = [3:1]#,    % =1 IF USE ROUTINE ACCESSES USERS LABEL   00129100
         DCRS = [33:15]#,    % DECLARED RECORD SIZE                     00129200
         ULBRS = [18:15]#,   % SIZE OF USER PORTION OF LABEL            00129300
         FCHRSZ=[12:4]#,                                                00129400
         RENO = [30:8]#,     % NUMBER OF REPORTS FOR THIS FILE          00129500
         RAIX= [38:10]#,      % RAY INDEX OF FIRST REPORT               00129600
              % WORD 2                                                  00129700
         PGF = [1:1]#,       % =1 IF LINAGE CLAUSE PRESENT              00129800
         PGLMF = [33:15]#,   % INFO INDEX OF LINAGE LIMIT DATA-NAME     00129900
              % WORD 3                                                  00130000
         DAYF = [1:1]#,      % TRUE IF ADCM IS TO DECLARE ARRAY         00130100
         CMPADRF=[18:15]#,   % ADDRESS OF 77-COMP ARRAY DESC            00130200
         CMPADRFF=[18:33:15]#,                                          00130300
         WREADF = [16:2]#,   % 0=READ ONLY, 1=WRITE ONLY,2=READ OR WRITE00130400
         BCLADRF=[33:15]#,   % ADDRESS OF 77-BCL-ARRAY OR 01-LEVEL DESC 00130500
         BCLADRFF=[33:33:15]#,                                          00130600
       % BADDF = BCLADRF                                                00130700
              % WORD 4                                                  00130800
         RCLNK = [18:15]#,   % LINK TO FIRST RECORD IN INFO             00130900
       % FLLNK                 PTR TO PTR TO FIB (TANK POINTER)         00131000
              % WORD 5                                                  00131100
       % DLNKF                 LINK TO DICTIONARY                       00131200
         ACCDF = [18:15]#,   % PRT OF ACCIDENTAL ENTRY FOR TECH-C READ  00131250
         IFSZ =6#,           % NUMBER OF WORDS PER ENTRY IN INFO        00131300
         SBLF  = [01:39]#;   % SCRAMBLE FIELD                           00131400
DEFINE   TONXF = 32:32:16#,                                             00131500
         TOIR = 30:39:9#,                                               00131600
         TOIC = 32:41:7#,                                               00131700
         TOSIZEF = 01:37:11#,                                           00131800
         TOSCF = 03:43:5#,                                              00131900
         TOLVLF = 08:41:7#,                                             00132000
         TOCLF = 02:45:3#,                                              00132100
         TOBADDF = 32:32:16#,                                           00132200
         TOFLLNK = 32:32:16#,                                           00132300
         TOLNSF = 01:37:11#;                                            00132400
DEFINE        % USAGE                                                   00132500
           CMP   = 1#,       % COMPUTATIONAL                            00132600
           CMP1  = 2#,       % COMPUTATIONAL (77 LEVEL)                 00132700
           BCL   = 5#,       % DISPLAY-1 (BCL)                          00132800
           IXDN  = 6#,       % INDEX                                    00132900
              % CLASS                                                   00133000
           AB  =1#,     % ALPHABETIC                                    00133100
           AN  =2#,     % ALPHA-NUMERIC                                 00133200
           EA  =3#,     % EDITED - ALPHA                                00133300
           NM  =4#,     % NUMERIC                                       00133400
           EN =5#;      % EDITED - NUMERIC                              00133500
                   % DEFINES FOR SCANTYPE                               00133600
DEFINE        RESVWD =  0#,       % RESERVED WORD                       00133700
              PERIOD = 1#,        % THE CHARACTER "."                   00133800
              LITV   =  2#,       % LITERALS                            00133900
                        % SUB-CLASS OF LITERALS                         00134000
                        ITGRV = 10#,   % INTEGER                        00134100
                        NUMV  = 11#,   % REAL NUMBER                    00134200
                        STRNGV= 12#,   % STRING                         00134300
              IDV    =  3#,       % IDENTIFIER                          00134400
                        % SUB-CLASS OF IDENTIFIERS                      00134500
                        UNKID = 20#,   % UNKNOWN ID                     00134600
                        SDV   = 21#,   % SORT FILE                      00134700
                        FDV   = 22#,   % FILE                           00134800
                        SAV   = 23#,   % SAVE AREA                      00134900
                        ITM   = 24#,   % RECORD ITEM                    00135000
                        CDN   = 25#,   % CONDITION NAME                 00135100
                        IXN   = 26#,   % INDEX NAME                     00135200
                   PNV  = 27#,    % PROCEDURE NAME                      00135300
                   RPN  = 28#,    % REPORT NAME                         00135400
         RPI  = 29#,         % REPORT ITEM                              00135500
         PID  = 30#;         % PROGRAM ID                               00135600
    DEFINE                                                              00135700
         ALLFF = [2:47:1]#,                                             00135800
         ALLF = [02:1]#;% Q ENTRY INDICATING "ALL" BEFORE LITERAL       00135900
              % DEFINE OF SUB-CLASS FOR RESERVED WORDS                  00136000
DEFINE                                                                  00136100
         SECTIONNAME = 1#,                                              00136200
         FIGURATIVE  = 2#,                                              00136300
         HARDWARENAME =3#,                                              00136400
         SPECIALREG = 4#,                                               00136500
         STMTBEGIN  = 5#,                                               00136600
         INTRINSIC  = 6#,                                               00136700
         LIBRTEXT   = 7#;                                               00136800
DEFINE        % ATTRIBUTE DEFINES                                       00136900
         ATYPF = [30:2]#,                                               00137000
         ATRVF = [08:10]#,                                              00137100
         ATRDF = [02:1]#,                                               00137200
              % ATTRIBUTE SUB CLASS                                     00137300
         ATNAME = 8#,                                                   00137400
         ATVALUE = 9#;                                                  00137500
              % DEFINES FOR DATA DIVISION SECTION COMPILED IN           00137600
DEFINE                                                                  00137700
         FSECT = 1#,    % FILE SECTION                                  00137800
         WSECT = 2#,    % WORKING-STORAGE SECTION                       00137900
         CSECT = 3#,    % CONSTANT SECTION                              00138000
         LSECT = 4#,    % LINKAGE SECTION                               00138100
         RSECT = 5#;    % REPORT SECTION                                00138200
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%00138300
%                       P R T                                          %00138400
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%00138500
DEFINE   %         =1 #,% 1  USED ON BRANCHES TO NON-PRESENT CODE SEGMTS00138600
         MEM       =2 #,% 2  MEMORY DESC                                00138700
         FPB       =3 #,% 3  FILE PARAMETER BLOCK                       00138800
         PTRSEGDICT=4 #,% 4  SEGMENT DICTIONARY                         00138900
         ARRYDECINT=5 #,% 5  BLOCK  CONTROL INTRINSIC                   00139000
         AITX      =6 #,% 6  ARRAY INFORMATION TABLE                    00139100
         % HARDWARE=7 #,% 7  MSCW                                       00139200
         % HARDWARE=8 #,%10  INCW                                       00139300
         % HARDWARE=9 #,%11  COM / PRL  CELL                            00139400
         PRTPTR    =10#,%12  POINTER TO PRT IE BASE OF STACK            00139500
         ONSIZERROR=11#,%13  POINTS TO ON SIZE ERROR PRT LOCATION       00139600
         COBOLFCR  =12#,%14  COBOL FILE CONTROL INTRINSICS              00139700
         PERFORMGEN=13#,%15  HANDLES GENERATION OF F+CELLS              00139800
         COBOLIO   =14#,%16  COBOL SERIAL I-O INTRINSICS                00139900
         COBOLRANDM=15#,%17  COBOL DISK INTRINSICS                      00140000
         BLOCKCTR  =16#,%20  BLOCK COUNTER                              00140100
         PRTJUNK   =17#,%21  JUNK CELL FOR INTEGER STORES               00140200
         INCONVERTS=18#,%22  INPUT CONVERT INTRINSIC                    00140300
         PRTJUNK2  =19#,%23  SECOND PRTJUNK CELL (DBL PREC CONVERT&EXCH)00140400
         ATTRIBUTE =20#,%24  ATTRIBUTE ROUTINE                          00140500
         OUTCONVERT=22#,%26  OUTPUT CONVERT                             00140700
         POWERTEN  =23#,%27  POWER OF TEN ARRAY                         00140800
         PGUSER    =24#,%30  GENERAL USE ROUTINE ARRAY (SEE PGUSE)      00140900
         DMOD      =25#,%31  DOUBLE PRECISION MOD INTRINSIC             00140950
         ASSIGNHERE=26#;%32  MUST BE FIRST ASSIGNABLE PRT LOCATION      00141000
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%00141100
%                                 FIB                                  %00141200
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%00141300
DEFINE        % WORD 0            BEGINNING USE ROUTINES                00141400
       % BF                       BEFORE BEGINNING FILE USE ROUTINE     00141500
       % AF                       AFTER BEGINNING FILE USE ROUTINE      00141600
       % BRR                      BEFORE BEGINNING REEL USE ROUTINE     00141700
       % ARR                      AFTER BEGINNING REEL USE ROUTINE      00141800
              % WORD 1            LINE LIMIT (PRINTER)(NEG:DATA-NAME)   00141900
              %                   FILE LIMITS LOW (DISK)(NEG: DATA-NAME)00142000
              % WORD 2            ENDING USE ROUTINES                   00142100
       % BF                       BEFORE ENDING FILE USE ROUTINE        00142200
       % AF                       AFTER ENDING FILE USE ROUTINE         00142300
       % BRR                      BEFORE ENDING REEL USE ROUTINE        00142400
       % ARR                      AFTER ENDING REEL USE ROUTINE         00142500
              % WORD 3            FILE LIMITS HIGH (DISK)(NEG:DATA-NAME)00142600
                        % PRINTER FILE: PRT ADDRESS OF LINAGE COUNTER   00142700
              % WORD 4                                                  00142800
         USEF  = [1:1]#,          % TRUE IF USE ROUTINES PRESENT        00142900
         LBLF  = [2:1]#,          % TRUE IF LABELS OMITTED              00143000
         RERUNF= [3:2]#,          % RERUN : 0=NONE,                     00143100
                                  % 1=ON SYSTEM TAPE (NO ON TAPE PHRASE)00143200
                                  % 2=ON PROGRAM TAPE (ON TAPE PHRASE)  00143300
         OTPF = [5:1]#,           % TRUE IF OPTIONAL FILE               00143400
         FILTYF = [7:5]#,         % FILE TYPE                           00143500
              CR = 0#,                 % CARD READER                    00143600
              MT = 2#,                 % MAGNETIC TAPE                  00143700
              CP = 3#,                 % CARD PUNCH  (LATER SET TO 0)   00143800
              PP = 7#,                 % PAPER TAPE PUNCH               00143900
              PR = 8#,                 % PAPER TAPE READER              00144000
              DK = 10#,                % DISK                           00144100
              SPO= 11#,                % SUPERVISORY PRINTER            00144200
              DSP= 14#,                % NOT IN USE                     00144300
              REM= 19#,                % REMOTE                         00144400
              LPO= 1#,                 % PRINTER NO BACKUP              00144500
              LOT= 4#,                 % PRINTER OR TAPE                00144600
              LOD=17#,                 % PRINTER OR DISK                00144700
              LDT=18#,                 % PRINTER OR TAPE OR DISK        00144800
              BUT = 6#,                % BACKUP TAPE                    00144900
              BUD=15#,                 % BACKUP DISK                    00145000
              BTD=16#,                 % BACKUP TAPE OR DISK            00145100
              PUT=20#,                 % PUNCH BACKUP TAPE              00145200
              POT=21#,                 % PUNCH OR TAPE                  00145300
              PUD=22#,                 % PUNCH BACKUP DISK              00145400
              POD=23#,                 % PUNCH OR DISK                  00145500
              PBTD=24#,                % PUNCH BACKUP TAPE OR DISK      00145600
              PTD=25#,                 % PUNCH TAPE OR DISK             00145700
              TPS=29#,                 % TAPE SORT                      00145800
              DTS=30#,                 % ITD SORT                       00145900
              MRG=31#,                 % MERGE                          00146000
         IFLG = [12:1]#,          % ON SIGNIFIES [13:11] IS FPB INDEX   00146100
         FPBXF = [13:11]#,        % FPB INDEX                           00146200
         AMF   = [27:3]#,         % ACCESS MODE: 0=SERIAL 1=RANDOM      00146300
         SVFF  = [30:18]#,        % SAVE FACTOR                         00146400
              % WORD 5                                                  00146500
         NSTDLF= [6:1]#,          % NONSTANDARD LABELS                  00146600
         NUNITSF=[12:4]#,         % NO. OF FILES FOR SORT OR MERGE-TEMP 00146700
         BLKF  = [45:3]#,         % 0 = UNBLOCKED                       00146800
                                  % 1 = TECH A                          00146900
                                  % 3 = TECH C                          00147000
              % WORD 6                                                  00147100
         TANKF= [18:15]#,         % TEMP FOR TANK POINTER               00147200
       % DLNKF= [33:15]             TEMP FOR DICT LINK                  00147300
              % WORD 8                                                  00147400
         SZROWS = [25:23]#,       % SIZE OF ROWS (DISK)                 00147500
         NROWS = [20:5]#,         % NUMBER OF ROWS (DISK)               00147600
              % WORD 9                                                  00147700
         RRNL  = [3:45]#,         % RERUN CONTROL (NUMBER OF RECORDS)   00147800
              % WORD 11           NUMBER OF RECORDS PER BLOCK           00147900
              % WORD 13                                                 00148000
         NBUFF = [1:9]#,          % NUMBER OF BUFFERS                   00148100
         RMODF = [24:1]#,         % RECORDING MODE-1=BINARY 0=ALPHA     00148200
              % WORD 15                                                 00148300
       % BF                       PARITY ERROR USE ROUTINE              00148400
         ACKF = [12:10]#,         % PRT ADDRESS OF ACTUAL KEY (DISK)    00148500
              % WORD 16           % COMPILE TIME TEMP FOR MIN&MAX BLK SZ00148600
         MIBS = [18:15]#,         % TEMP FOR MINIMUM BLOCK SIZE         00148700
         MXBS = [33:15]#,         % TEMP FOR MAXIMUM BLOCK SIZE         00148800
              % WORD 18                                                 00148900
         BUFSZF=[3:15]#,          % BUFFER LENGTH                       00149000
         MINRS = [18:15]#,        % MINUMUM RECORD SIZE                 00149100
         MAXRS = [33:15]#;        % MAXIMUM RECORD LENGTH               00149200
              % WORD 19           LINK TO ACTUAL KEY                    00149300
              % WORD 20        MULTI-FILE ID                            00149400
              % WORD 21        FILE ID (SIGN BIT ON: INFO INX OF DN)    00149500
              % STATEMENT DEFINES                                       00149600
DEFINE STEPS  = JUNK ~ SCTRL #,                                         00149700
       STEPP  = JUNK ~ DNSCAN#,                                         00149800
         CMACHK = BEGIN IF KEY = COMMA THEN KEY ~ DNSCAN;               00149900
                        IF KEY = ANDV THEN KEY ~ DNSCAN  END#,          00150000
         SMICHK    =    IF KEY = SEMI THEN STEPS#,                      00150100
         MARGINA = BOOLEAN(XACUM[0].[01:1])#,                           00150200
         WCOL8 = BOOLEAN(Q.[01:1])#,                                    00150300
         CHECKWAS8 =    IF NOT WCOL8 THEN ERR(-11)#,                    00150400
         CHECKNOT8 =    IF WCOL8 THEN ERR(-5)#,                         00150500
         SCANTOCOL8=    WHILE NOT MARGINA OR EOFTOG DO STEPS#,          00150600
         CHECKCOL8 =    IF NOT MARGINA THEN ERR(-11)#,                  00150700
         IS(IS1,IS2)= REAL(BOOLEAN(IS1)EQV BOOLEAN(IS2))=REAL(NOT FALSE)00150800
                   #,   % USED FOR LOGICAL EQUIVALANCE                  00150900
         PRNTSEGSTUFF =                                                 00151000
         BEGIN                                                          00151100
               IF LPAS1 THEN WRITE(LINE,15,TMP[*]);                     00151200
         IF LISTOG THEN DISKOUT(TMP[0],1,7,0,2);                        00151300
         END#;                                                          00151400
DEFINE                                                                  00151500
              % MACRO FILE STUFF   [20|DISKAREAS]|MAXDISKWDS = 120K     00151600
         CARDMAX = 42000#,                                              00151700
         DISKDEX = DISKRAY[CODEINDEX]#,    %  SEE DISKRAY ARRAY         00151800
         DISKAREAS = 20#,                                               00151900
         MAXDISKWDS = 300#,                                             00152000
         TOCNTLF = 1:46:2#,  TOWDSZF = 3:42:6#,  TOMACNF = 9:41:7#,     00152100
         CNTL2F = [01:2]#,  WDSZ2F = [03:6]#,  MACN2F = [09:7]#,        00152200
         VARU2F = [16:32]#,                                             00152300
         DICTMX = 16383#,     % MAX SIZE IN WORDS OF DICTIONARY         00152400
         FIBMX = 25#,         % MAX # OF FILES IS 204                   00152450
         INFOMX = 13056#,     % MAX SIZE IN WORDS OF INFO (MOD IFSZ=0)  00152500
         DOLF = [47:1]#,      % $ OPTION LIST   FIELD IN DOLOPTWORD     00152600
         DOMF = [46:1]#,      % $ OPTION PRT    FIELD IN DOLOPTWORD     00152700
         DOCF = [45:1]#,      % $ OPTION CODE   FIELD IN DOLOPTWORD     00152800
         DOKF = [44:1]#,      % $ OPTION PAGE   NOT CARRIED IN DOLOPTWOR00152900
         DOSF = [43:1]#,      % $ OPTION SPEC   FIELD IN DOLOPTWORD     00153000
         DOFF = [42:1]#,      % $ OPTION FIB    FIELD IN DOLOPTWORD     00153100
         DOPF = [41:1]#,      % $ OPTION PUNCH  FIELD IN DOLOPTWORD     00153200
         DOIF = [40:1]#,      % $ OPTION INFO   FIELD IN DOLOPTWORD     00153300
         DO1F = [39:1]#,      % $ OPTION SINGLE FIELD IN DOLOPTWORD     00153400
         DODF = [38:1]#,      % $ OPTION DEBUG  FIELD IN DOLOPTWORD     00153500
         DOEF = [37:1]#,     % $ OPTION ERRLIM FIEKD IN DOLOPTWORD      00153600
         DOBF = [36:1]#,  % $ OPTION SEGMENT NOT CARRIED IN DOLOPTWORD  00153650
         DOXF = [35:1]#,      % $ OPTION XREF FIELD IN DOLOPTWORD       00153675
         CURRENTSEQ = WREAD[0]#,       % CURRENT SEQUENCE NUMBER        00153700
         LASTERR = WREAD[12]#,         % SEQ NB. OF LAST ERROR          00153800
              %   CONSTANT POOL                                         00153900
         POOLMAX = 255#,     % ROW SIZEOF CONSTANT POOL                 00154000
              % PARAMETERS FOR INDEX NAME CONTROL                       00154100
         IXMAX = 50#,   % MAX NUMBER OF INDEX NAMES                     00154200
         IXBASE = [02:14]#, % BASE OF INDEX NAME                        00154300
         DCTIX = [18:15]#,   % DICT INDEX OF INDEX-NAME                 00154400
         DNIX = [33:15]#,    % INFO INDEX OF DN TO BE INDEXED           00154500
         SIGNBIT = 01:1 #,                                              00154600
              % IT SHOULD DOUBLE SPACE                                  00154700
         W1X = [33:12]#,     % WORD INDEX                               00154800
         WIX = [33:12]#,     % WORD INDEX                               00154900
         C1X = [45:3]#,      % CHARACTER INDEX                          00155000
         CIX = [45:3]#,      % CHARACTER INDEX                          00155100
         RITE = LINE[DBL]#;       % SEE FILE LINE                       00155200
DEFINE   ASNTOG = PROMASK.[47:1] #,  % TRUE IF COMP ASYNC PROCEDURE     00155300
         DECLTOG = PROMASK.[46:1] #, % TRUE IF COMP DECL SECTION        00155400
         OUTPTOG = PROMASK.[45:1] #, % TRUE IF COMP OUTPUT PROCEDURE    00155500
         INPTOG = PROMASK.[44:1] #;  % TRUE IF COMP INPUT PROCEDURE     00155600
DEFINE   RELTOG = PROMASK.[43:1] #,  % TRUE IF RELEASE FOUND            00155700
         RETTOG = PROMASK.[42:1] #;  % TRUE IF RETURN FOUND             00155800
DEFINE   FSGTOG = PROMASK.[41:1] #;  % TRUE UNTIL FIRST EXEC SEG FOUND  00155900
REAL     ERRORCOUNT, % MUST BE FIRST DECLARATION                        00156000
         SAVETIME, % MUST BE SECOND DECLARATION                         00156100
         CARDNUMBER,%SEQUENCE NUMBER FROM CARD                          00156200
         CARDCOUNT,% COUNT OF CARDS COMPILED                            00156300
         CODEINDEX,% DISK WORDS OUT COUNTER  0 { CODEINDEX { MAXDISKWDS 00156400
         ESZ,      % NEXT AVAILABLE EDIT TABLE ENTRY                    00156500
         GLCMMA,   % ","                                                00156600
         GLDOL,    % "$"                                                00156700
         GLPRDV ,  % "."                                                00156800
         NXTPRTLOC,% NEXT AVAILABLE PRT LOCATION                        00156900
         NFIB,     % NEXT AVAILABLE ENTRY IN FIB                        00157000
         NNX,      % NEXT AVAILABLE ENTRY IN IXNR                       00157100
         NXI,      % NEXT AVAILABLE ENTRY IN INFO                       00157200
         OPPCWX,   % ADDRESS OF OUTPUT PROCEDURE ENTRY                  00157300
         PSCNT,                                                         00157400
         PSCNTD,   % VALUE OF PSCNT WHEN EXITING DECLARATIVES           00157500
         Q,        % COPY OF ACCUM[0]                                   00157600
         T1,       % GLOBAL TEMPORARY                                   00157700
         USEPRT,             % PRT LOC OF USE ROUTINE                   00157800
         T;        % GLOBAL TEMPORARY                                   00157900
INTEGER  I,        % GLOBAL INTEGER TEMPORARY                           00158000
         JUNK,     % UNIVERSAL JUNK CELL - NEVER ANY GOOD INFORMATION   00158100
         IIX;      % USE TO INSURE  INTEGER INFO INDEX                  00158200
BOOLEAN  CODETOG,  % TRUE WHEN LISTING OF CODE IS REQUESTED             00158300
         DCOMM,    % TRUE WHEN ON TIME SHARING                          00158400
         DEBUGTOG, % TRUE WHEN TRACE REQUESTED                          00158500
         ERRORTOG, % TRUE IF ERRORS                                     00158600
         FIBTOG,   % TRUE IF FIB IS TO BE DUMPED                        00158700
         INFOTOG,  % TRUE TO TRACE DICT AND INFO                        00158800
         LISTOG,   % TRUE WHEN LISTING  REQUESTED                       00158900
         PUNCHTOG,      %TRUE WHEN UNCONDITIONAL PUNCH REQUESTED,       00159000
                        % UNRELATED TO PUNCHTOG  OF PASS 2.             00159100
         PRODFLG,            % TRUE IF COMPILING PROCEDURE DIVISION     00159200
         PROMASK,  % BOOLEAN MASK FOR SPECIAL PROCEDURES                00159300
         XREFTOG,  % TRUE IF CROSS-REFERENCE REQUESTED                  00159350
         PRINTEROPEN,% TRUE IF PRINT FILE IS OPEN                       00159400
         PRTOG,    % PRINT ADDRESS ASSIGNMENTS                          00159500
         SINGLETOG,% SINGLE SPACE THE LISTING                           00159600
         MB,       % MASTER BOOLEAN FOR LITTLE USED BOOLEANS            00159700
         SPECTOG;  % WARNING MESSAGES SUPPRESSED                        00159800
FILE     LINE 1 (2,15),                                                 00159900
         DSK DISK SERIAL [20:CARDMAX DIV 20] "XDSK" (2,2,150),          00159950
         TWX 19(2,10),                                                  00160000
         CARDIMAGE DISK SERIAL [20:CARDMAX DIV 20] (2,10,90),           00160100
         PASS1 DISK SERIAL [20:DISKAREAS] "CBLPS1" (2,MAXDISKWDS);      00160200
DEFINE                                                                  00160300
         ERRORLIMIT = TG[0]#,% NUMBER OF ERRORS THAT WILL STOP COMPILE  00160400
         ESTCORE    = TG[1]#,% ESTIMATE OF CORE REQUIRED                00160500
         DBLWORD    = TG[2]#,% ICVI  WILL RETURN DOUBLE PRECISION WORD  00160600
         DISKSIZE   = TG[3]#,% DECLARED DISK SIZE  (SORT)               00160700
         IPPCWX     = TG[4]#,% ADDRESS OF INPUT PROCEDURE               00160800
         LSUB       = TG[5]#,% LARGEST NUMBER OF SUBS MONITORED         00160900
         MEMORYSIZE = TG[6].[33:15]#, % DECLARED MEMORY SIZE (SORT)     00161000
         SORTTAPES  = TG[6].[18:15]#, % NUMBER OF TAPES (SORT)          00161100
         MONIFIL    = TG[7]#,% FIB INDEX OF MONITORED FILE              00161200
         MXSEGSZ    = TG[8]#,% MAX SEGMENT SIZE                         00161300
         SHORTAPE   = TG[10]#,%DO A CLOSE WITH CRUNCH                   00161400
         TALLYADR   = TG[9]#,% ADDRESS OF TALLY (COMP-1)                00161500
         %            TG[11] = NO. OF LABELS FOR GO TO DEPENDING        00161600
         DATAMAX    =TG[12]#, % SIZE OF LONGEST DATA ARRAY SO FAR       00161650
         TI         = TG[23]#,% USED TO COMPUTE COMPILE TIME            00161700
         TI2            = TG[24]#,% USED TO COMPUTE PROCESSOR TIME      00161750
        % * * * * * * * * LITTLE USED BOOLEANS * * * * * * * * * *      00161800
         FREETOG    = MB.[47:1]#,% $ FREE REFOMATS CARD FILE TO CABOL   00161900
         SEQXEQT    = MB.[46:1]#,% $ SEQXEQ  RETURNS SEQUENCE #         00162000
         TSSEDIT    = MB.[45:1]#,% $ TSSEDIT REFORMAT NEWTAPE TO CANDE  00162100
         SVEOFTOG   = MB.[44:1]#,% TEMP FOR EOFTOG                      00162200
         NOTOG      = MB.[42:1]#,% TRUE IF NOTE IS FIRST VERB IN PARA.  00162300
         TSSMERG    = MB.[41:1]#,% $ TSSMERGE REFORMATS MERGE FILE RECS 00162400
         XREVER     = MB.[40:1]#,% TRUE IF XREFTOG EVER SET             00162480
         SVXREFTOG  = MB.[39:1]#,% SAVE XREFTOG                         00162485
         LONG       = MB.[38:1]#,% TRUE IF LONG COMPILE REQUIRED        00162486
         FIRST1     = NOTOG#, % USED IN XREFOUT                         00162498
        % * * * * * * * * * * ARRAY DEFINES * * * * * * * * * * * * * * 00162500
         WREAD    = GLOBARRAY1   #,             % FOR POINTERS          00162600
         TG[I] = GLOBARRAY1[13+I]#,      % GLOBAL LITTLE USED CELLS     00162700
         ATSTACK    = REDEFARRAY1#,                                     00162800
         ISUBJA     = REDEFARRAY1#,                                     00162900
         REPIFO     = REDEFARRAY2#,                                     00163000
         CONSTANTPOOL=REDEFARRAY2#,                                     00163100
         STACKHEAD[I]=REDEFARRAY3[4+I]#,                                00163200
         BRT        = REDEFARRAY3#,                                     00163300
         SAVENRS    = REDEFARRAY4#,                                     00163400
         SAVECURRENT[I]=REDEFARRAY4[20+I]#,                             00163500
         MNRY       = REDEFARRAY4#,                                     00163600
         GARB[I]    = REDEFARRAY4[22+I]#,                               00163700
         OP[I]      = REDEFARRAY5[I]#,                                  00163800
         SAC        = REDEFARRAY6#,                                     00163900
         ERROX      = REDEFARRAY6#,                                     00164000
         INTRIN[I]  = REDEFARRAY6[16+I]#,                               00164100
         RPLCINGA[I]= RSWD[4,I]#,                                       00164200
         XBUF       = SAVREDEF1#,                                       00164300
         UL[I]      = SAVREDEF1[11+I]#,  % ALL UL ARRAY ENTRIES IN USE  00164400
         PS         = SAVREDEF1#;                                       00164500
    ARRAY                                                               00164600
         TEN[0:53],  %POWERS OF TEN     GLOBAL USE                      00164700
         GLOBARRAY1[0:37],                                              00164800
              % WREAD   = 1ST 13 WORDS FOR POINTERS                     00164900
              % TG      = NXT 25 WDS:GLOBOL LITTLE USED CELLS-GLOBAL USE00165000
         INXR,     % IXMAX=50 MAX : INDEX NAMES             - GLOBAL USE00165100
         KEYR,     % KYMAX=50 MAX : KEY ENTRIES             - PASS 1 USE00165200
         RAY       % RAYSZ=50 MAX : HOLDS REPORTS DECL. IN FD-PASS 1 USE00165300
            [0:50],                                                     00165400
         XARRAY [0:1],  % 2 WORDS FOR DSK  I.E. XREF                    00165450
         REDEFARRAY1[0:43],                                             00165500
         % SEE INFOMX --INFO MAX MAY BE ENLARGED TO 0:63 BUT NO LARGER  00165600
              % ATSTACK = 1ST 40 WDS : ATTRIBUTE STACK HEADS -PASS 1 USE00165700
              % ISUBJA  = 1ST 44 WDS : HOLDS NON-NUM LITS AS IMP. SUBJS 00165800
              %                                          - PASS 2 PD USE00165900
         REDEFARRAY2[0:255],                                            00166000
              % REPIFO  = 256 WDS : INFO ABOUT REPLACING OPTN- PASS1 USE00166100
              % CONSTANTPOOL=256 WDS: CONSTANT POOL ARRAY   - PASS 2 USE00166200
         REDEFARRAY3[0:129],                                            00166300
              % LIBNAME   = 1ST 4 WDS                       - PASS 1 USE00166400
              % STACKHEAD = NXT 126 WDS : SCRAMBLER         - PASS 1 USE00166500
              % BRT       = 129 WDS: LOCAL BRANCH CONTROL- PASS 2 PD USE00166600
         REDEFARRAY4[0:33],                                             00166700
              % SAVENRS     = 1ST 20 WDS                    - PASS 1 USE00166800
              % SAVECURRENT = NXT 10 WDS                    - PASS 1 USE00166900
              % MNRY = 1ST 22 WDS:MONITOR PSEUDO-STK MNEMONICS-PASS2 PD 00167000
              % GARB = NXT 11 WDS:EXAMINE USES 1ST 6        - PASS 2 USE00167100
         REDEFARRAY5,                                                   00167200
              % OP      = 100 WDS : EXPRESSION STACK        - PASS 1 USE00167300
              % BRT     = 100 WDS : USED ONLY IN PERFORMP   - PASS 2 USE00167400
         BR,       %    FOR BRANCH CONTROL               - PASS 1 PD USE00167500
         UNBR,     %    USED FOR NESTED IFS              - PASS 1 PD USE00167600
         MACROOPS  %    DEBUGN MACRO NAMES                  - GLOBAL USE00167700
                 [0:99],                                                00167800
         REDEFARRAY6[0:26],                                             00167900
              % SAC         = 1ST 20 WDS : USED IN DOLOPT   - PASS 1 USE00168000
              % ERROX       = 1ST 16 WDS:USED TO PRINT DEBUGN-PASS 2 USE00168100
              % INTRIN      = NXT 11 WDS:ARRAY FOR INTRINSICS-PASS 2 USE00168200
         STK,      %    FOR QUALIFICATION   - GLOBAL USE                00168300
         CSTPOOL   %    C-REL CONSTANT POOL & PASS 1 TEMP   - GLOBAL USE00168400
                [0:64],                                                 00168500
         TMP[0:32],             % WORK AREA                 - GLOBAL USE00168600
         PGUSE[0:11],           % USE PRT-S FOR GEN FILE CASE-GLOBAL USE00168700
         RWSTACK[0:125],        % RESERVED WORDS            - PASS 1 USE00168800
         RSWD[0:4,0:511],       % RESERVED WORDS : ROWS 0-3 - PASS 1 USE00168900
                                % RPLCINGA = ROW 4          - PASS 1 USE00169000
         DICT      % HOLDS IDENTIFIERS IN SCRAMBLED FORM    - GLOBAL USE00169100
              [0:31,0:511],                                             00169200
              % SEE DICTMX--DICT MAX MAY BE ENLARGED TO 0:63 - NO LARGER00169300
         INFO      % HOLDS ATTRIBUTES OF IDENTIFIERS        - GLOBAL USE00169400
              [0:50,0:255],                                             00169500
         FIB[0:FIBMX,0:21],% FILE INFORMATION BECOMES FIB   - GLOBAL USE00169600
         EDITABLE  % EDIT TABLE FOR TEED                    - GLOBAL USE00170100
             [0:10,0:127];                                              00170600
SAVE ARRAY                                                              00170700
         DISKRAY[0:MAXDISKWDS],% MACRO DRIVER ARRAY         - GLOBAL USE00170800
         OPERATOR[0:133],    % ARRAY OF MACHINE OPERATORS   - GLOBAL USE00170900
         SAVREDEF1[0:51];                                               00171100
              % XBUF    = 1ST 11 WDS - HOLDS TAPE IMAGE     - PASS 1 USE00171200
              % UL      = NXT 41 WDS: GLOBALS               - PASS 1 USE00171300
              % PS      = 1ST 52 WDS - PSEUDO STACK         - PASS 2 USE00171400
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%00171500
%                            PGUSE                                     %00171600
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%00171700
DEFINE                                                                  00171800
      BF = [1:11]#   ,AF = [12:12]#  ,BRR = [24:12]# ,ARR = [36:12]#;   00171900
% WORD                                                                  00172000
%  0  BFR BEG IN FILE,AFT BEG IN FILE,BFR BEG IN REEL,AFT BEG IN REEL;  00172100
%  1  BFR END IN FILE,AFT END IN FILE,BFR END IN REEL,AFT END IN REEL;  00172200
%  2  BFR BEG OT FILE,AFT BEG OT FILE,BFR BEG OT REEL,AFT BEG OT REEL;  00172300
%  3  BFR END OT FILE,AFT END OT FILE,BFR END OT REEL,AFT END OT REEL;  00172400
%  4  BFR BEG IO FILE,AFT BEG IO FILE,  INPUT ERROR  ,  I-O  ERROR   ;  00172500
%  5  BFR END IO FILE,AFT END IO FILE,  OUTPUT ERROR ,    EMPTY      ;  00172600
         COMMENT   WREAD[0] IS CURRENTSEQ                               00172700
                   WREAD[1] IS ALTERNTSEQ                               00172800
                   WREAD[2] IS VOIDSEQ                                  00172900
                   WREAD[3] IS LASTSEQ                                  00173000
                   WREAD[4] IS USED AS GETACARD TEMPORARY               00173100
                   WREAD[9] IS COMMENTID                                00173200
                   WREAD[10,11] IS SEGMENT AND RELADDR OF CODE          00173300
                   WREAD[12]    IS SEQ NB. OF LAST ERROR;               00173400
LABEL    GLOBALEND; % LABEL AT END OF COMPILER                          00173500
FORMAT   COMPT("COMPILATION TIME =",I5," SECONDS ELAPSED, ",I5,         00173600
              " SECONDS PROCESSOR"/                                     00173610
         "TOTAL NUMBER INPUT IMAGES =",I5/                              00173700
         "PRT SIZE =",I4/                                               00173800
         "TOTAL SEGMENT SIZE =",I6," WORDS"/                            00173900
         "DISK SIZE =",I6," SEGMENTS"/                                  00174000
         "NUMBER OF PROGRAM SEGMENTS =",I4/                             00174100
         "ESTIMATED CORE STORAGE =",I6," WORDS"),                       00174200
         COMPTOK("COMPILED OK"),                                        00174300
         XRFHEAD ("CROSS REFERENCE LISTING"),                           00174330
         XRFCH ("CROSS REFERENCE CHARGES: ",I5," SECONDS, ",I5,         00174350
                " OF WHICH CONSTITUTE PROCESSOR TIME."),                00174370
         COMPTERR("DID NOT COMPILE"/                                    00174400
         "NUMBER OF ERRORS DETECTED =",I4/                              00174500
         "LAST ERROR AT ",A6),                                          00174600
         GETDATAFMT("PRT=(",A4,")" ),                                   00174700
         SCTRLFMT(X80,"NEXT = ",I2,"-",A6," KEY = ",I3,"CLASS = "I3),   00174800
         ARRAYFMT("ARRAY AT ",A4," DIMENSION SIZES ",I4," , ",I4),      00174900
         PASS2HEADING(X10,"B - 5 7 0 0      C O D A S Y L - 6 8   ",    00175000
                      "   C O B O L      C O M P I L E R",X10,          00175100
                   "LEVEL XIII.",I2,".",I2,//),                         00175200
         SEGENDFMT(X72,"END OF SEGMENT ",I4,"       SIZE =",            00175300
         I5," WORDS"),                                                  00175400
         SEGSTARTFMT(X80,"START OF SEGMENT ",I4,"       ********"),     00175500
         WRITEDATAFMT(X82," DATA SEGMENT, SIZE =",I5," WORDS"),         00175600
         DUMPINFOFMT(X10,"INFO-LINK = ",I5,"       DICT-LINK = ",I5);   00175700
DEFINE   %    ***** MACROS *****                                        00175800
         KBLSM = 0#,    % COBOL SECTION                                 00175900
                             % V1 = SECTION NAME                        00176000
         XTHRM = 1#,    % EXIT HERE                                     00176100
         CNEM  = 2#,    % CONDITION NAME                                00176200
         ACKM  = 3#,    % ACTUAL KEY CHECK                              00176300
         ODPM  = 4#,    % OCCURS DEPENDING CHECK                        00176400
         SDPM  = 5#,    % SIZE DEPENDING CHECK                          00176500
         FLLM  = 6#,    % FILE LIMITS LOW CHECK                         00176600
         FLHM  = 7#,    % FILE LIMITS HIGH CHECK                        00176700
         SVAM  = 8#,    % INITIALIZE FROM CONSTANT AND                  00176800
                        % SAVE CONSTANT POOL INDEX                      00176900
         ADCM  = 9#,    % ARRAY DEC                                     00177000
         IFMMM = 10#,   % SETS IFTOG WHEN COMPILING AN IF STATEMENT     00177100
         CLASM = 11#,   % COMPARE DN AGAINST FIGURATIVE CONSTANTS       00177200
         KEYM  = 12#,   % KEY IS                                        00177300
         STOSM = 13#,   % STORE UNSPLIT SUBSCRIPT                       00177400
         CNAM  = 14#,   % CONSTANT IN                                   00177500
         QUAL  = 15#,   % QUALIFIER OR NAME                             00177600
         LITC  = 16#,   % NUMERIC LITERALS                              00177700
         VALDM = 17#,   % GET BINARY VALUE                              00177800
         %VALN = 18#,   % AVAILABLE    ***                              00177900
         NAMDM = 19#,   % GET ADDRESS                                   00178000
         STO9M = 20#,   % STORE NUMERIC                                 00178100
         STOXM = 21#,   % STORE ALPHANUMERIC                            00178200
         JONKM = 22#,   % PUT JUNKA ADDRESS ON STACK                    00178300
         OPSZM = 23#,   % OPERAND SIZE                                  00178400
         SZERM = 24#,   % SIZE ERROR                                    00178500
         DEFLM = 25#,   % DEFINES OCCURENCE AND DECLARES A LABEL        00178600
                             % V1 = DICT INDEX OF LABEL                 00178700
         DEFPM = 26#,   % DEFINES POINT FOR BRANCH FIX-UP               00178800
              % IN THE NEXT 3 MACROS                                    00178900
              % V1 = DICT INDEX OF LABEL                                00179000
              % V2 = DICT INDEX OF QUALIFIER                            00179100
         BRFLM = 27#,   % STATIC BRANCH FALSE                           00179200
         BRTLM = 28#,   % STATIC BRANCH TRUE                            00179300
         BUNLM = 29#,   % STATIC BRANCH UNCONDITIONAL                   00179400
              % IN THE NEXT 3 MACROS                                    00179500
              % IF V1 = 0 BRANCH FROM RELADDR                           00179600
              % IF V1 ! 0 BRANCH FROM BRT[V1]                           00179700
              % IF V2 = 0 BRANCH TO RELADDR                             00179800
              % IF V2 ! 0 BRANCH TO BRT[V2]                             00179900
         BRFPM = 30#,   % DYNAMIC BRANCH FALSE                          00180000
         BRTPM = 31#,   % DYNAMIC BRANCH TRUE                           00180100
         BRUPM = 32#,   % DYNAMIC BRANCH UNCONDITIONAL                  00180200
         STSBM = 33#,   % DEFINES A POINT TO BRANCH TO                  00180300
         CASBM = 34#,   % SUBROUTINE CALL                               00180400
         ENDSM = 35#,   % END OF SECTION                                00180500
                             % V1 = DICT INDEX OF SECTION NAME          00180600
         ENDPM = 36#,   % END OF PARAGRAPH                              00180700
                             % V1 = DICT INDEX OF PARAGRAPH NAME        00180800
         ALTRM = 37#,   % CHECKS LABEL V1 OF V2 FOR ALTER               00180900
         ALTGM = 38#,   % GENERATES CODE FOR ALTER VERB                 00181000
         ALGOM = 39#,   % GENERATES CODE FOR ALTERED LABEL              00181100
         EXPRM = 40#,   % START OF EXPRESSION                           00181200
         ENDXM = 41#,   % END OF EXPRESSION                             00181300
         STMTE = 42#,   % END OF STATEMENT                              00181400
         MNAMM = 43#,   % MONITOR NAME                                  00181500
         BOOLM = 44#,   % BOOLEAN AND RELATIONAL OPERATORS              00181600
         STRTS = 45#,   % START SUBSCRIPTS                              00181700
         FINSM = 46#,   % END SUBSCRIPTS                                00181800
         XXXXM = 47#,   % GENERAL PURPOSE                               00181900
         PWSMM = 48#,   % PARTIAL WORD FIELD MOVE STACK MANIPULATION    00182000
         SZRSM = 49#,   % SIZE ERROR START                              00182100
         SZRFM = 50#,   % SIZE ERROR FINAL                              00182200
         MABSM = 51#,   % ABS FUNCTION                                  00182300
         MSGNM = 52#,   % SIGN FUNCTION                                 00182400
         MINTM = 53#,   % INTRINSIC FUNCTION                            00182500
         DELMM = 54#,   % DELETE                                        00182600
         SWCH  = 55#,   % GO TO DEPENDING                               00182700
         XCHMM = 56#,   % EXCHANGE                                      00182800
         FGCNM = 57#,   % FIGURATIVE CONSTANT                           00182900
         DUPMM = 58#,   % DUPLICATE                                     00183000
         PFRMM = 59#,   % PERFORM CALL                                  00183100
                             % V1 = DICT INDEX OF PROCEDURE NAME        00183200
                             % V2 = DICT INDEX OF QUALIFIER             00183300
         ADSTM = 60#,   % ADJUST STACK ERROR                            00183400
         MATH  = 61#,   % ARITHMETIC BOOLEAN OR RELATIONAL OPS          00183500
         DUMPM = 62#,   % DUMP                                          00183600
                             % O = FIB INDEX                            00183700
                             % 1 = DATA NAME                            00183800
                             % 2 = INDEX NAME                           00183900
                             % 3 = LABEL                                00184000
                             % 4 = PROCEDURE NAME                       00184100
         EXAM  = 63#,   % EXAMINE                                       00184200
         MHPWM = 64#,   % MARKS LABEL DRCT[V1] FOR PRT                  00184300
         PFTMM = 65#,   % MARKS LABEL DRCT[V1] AS PERFORM TERMINUS      00184400
         CHKLM = 66#,   % CHECKS MONITORED LABEL FOR OCCURRENCE         00184500
         SPCNT = 67#,   % SORT INPUT OUTPUT CONTROL                     00184600
                             % V1 = SECTION NAME                        00184700
         RLMCO = 68#,   % RELEASE                                       00184800
         RTMCO = 69#,   % RETURN                                        00184900
         SWMCO = 70#,   % SET SWITCH                                    00185000
                             % V1 DETERMINES SWITCH                     00185100
                             % V2 DETERMINES SETTING                    00185200
         SCALM = 71#,   % TURNS LITERAL SCALING OFF AND ON              00185300
         INCIM = 72#,   % INCREMENT INDEX NAME                          00185400
         SETMM = 73#,   % SET                                           00185500
         RMNDR = 74#,   % REMAINDER OPTION OF DIVIDE                    00185600
         IOMAC = 75#,   % I/O MACRO                                     00185700
         ISUBJ = 76#,   % IMPLIED SUBJECT OF RELATIONALS                00185800
         PNMCO = 77#,   % PROGRAM NAME MACRO                            00185900
         STOPM = 78#,   % STOP OR STOP RUN                              00186000
         MKSMM = 79#,   % MARK THE STACK                                00186100
                             % V1 = 1  EMIT A ZERO BEFORE               00186200
                             % V1 > 1  THEN STORE MEMORY IN PRT CELL    00186300
                             % V2 = 1  IGNORE MKSFF AND DO MKS          00186400
         RPTM  = 80#,   % RPT                                           00186500
         RPFM  = 81#,   % RPT PRINT FILED                               00186600
         RSUM  = 82#,   % RPT SUM                                       00186700
         RINT  = 83#,   % RPT INITIATE                                  00186800
         RGEN  = 84#,   % RPT GENERATE                                  00186900
         RTRM  = 85#,   % RPT TERMINATE                                 00187000
         USMVM = 86#,   % POSSIBLE LABEL MOVE IN USE PROCEDURE          00187100
         FIDM  = 87#,   % FILE ID MACRO                                 00187200
         PGLM  = 88#,   % PAGE LIMIT MACRO                              00187300
         PROCM = 89#,   % CALL AND RUN MACROS                           00187400
                             % V1 = 0 - RUN, 1 IS CALL SYSTEM           00187500
                             % V2 = INFO INDEX OF NAME                  00187600
         THEND = 90#;   % THE END                                       00187700
STREAM PROCEDURE PUSHOVER(D,N,S,SN,P);                                  00187800
         VALUE  N,SN,P;                                                 00187900
    BEGIN                                                               00188000
         SI~ S; SI ~ SI + SN;                                           00188100
         DI~ D; DI ~ DI +  N;                                           00188200
         DS~ P CHR;                                                     00188300
    END PUSHOVER;                                                       00188400
STREAM PROCEDURE FILLWITHCHR (D,A,C,N);                                 00188500
         VALUE  A,C,N;                                                  00188600
    BEGIN                                                               00188700
         DI ~ D; DI ~ DI+ A;                                            00188800
         SI ~ LOC N;                % EAGLE CODE NOT BUG                00188900
         N(SI~ SI-1; DS ~ CHR);                                         00189000
    END FILLWITHCHR;                                                    00189100
INTEGER STREAM PROCEDURE  MKABS (A);                                    00189200
    BEGIN                                                               00189300
         SI ~ A;  MKABS ~ SI;                                           00189400
    END  MKABS;                                                         00189500
STREAM PROCEDURE  BLAND(B,W);                                           00189600
         VALUE W;                                                       00189700
    BEGIN                                                               00189800
         DI ~ B;                                                        00189900
         W ( DS~ 8 LIT " ");                                            00190000
    END BLAND;                                                          00190100
STREAM PROCEDURE LITPTR(D,DIF,L,N); % N MUST BE LSS 7                   00190200
         VALUE  L,N,DIF;                                                00190300
    BEGIN                                                               00190400
         SI ~ LOC N;                                                    00190500
         SI~ SI - N;                                                    00190600
         DI~ D;     DI ~ DI + DIF;                                      00190700
         DS~ N CHR;                                                     00190800
    END LITPTR;                                                         00190900
DEFINE LITRL(LITRL1,LITRL2,LITRL3)=LITPTR(LITRL1,0,LITRL2,LITRL3)#;     00191000
DEFINE GETC(GETC1,GETC2)=GETCHARS(GETC1,0,GETC2)#;                      00191100
BOOLEAN  STREAM PROCEDURE  COMPEQ (S,DELTA,D,N);  VALUE  DELTA,N;       00191200
    BEGIN                                                               00191300
         SI ~ S; SI ~ SI + DELTA; DI ~ D;                               00191400
         IF N SC=DC THEN TALLY ~ 1; COMPEQ ~ TALLY;                     00191500
    END COMPEQ;                                                         00191600
INTEGER STREAM PROCEDURE GETCHARS(SPTR,NI,N);                           00191700
                            VALUE SPTR,NI,N;                            00191800
    BEGIN                                                               00191900
         SI ~ SPTR; SI ~ SI+NI;                                         00192000
         DI ~ LOC GETCHARS;DI ~ DI+8; DI ~ DI-N;                        00192100
         DS ~ N CHR;                                                    00192200
    END GETCHARS;                                                       00192300
INTEGER STREAM PROCEDURE GETCHARFRN(S,NI,N);                            00192400
                                VALUE NI,N;                             00192500
    BEGIN                                                               00192600
         SI:=S; SI:=SI+NI;                                              00192700
         DI:=LOC GETCHARFRN; DI:=DI+8;                                  00192800
         DI:=DI-N; DS:=N CHR;                                           00192900
    END GETCHARFRN;                                                     00193000
STREAM PROCEDURE MOVE (D,S,N);                                          00193100
         VALUE N;                                                       00193200
    BEGIN                                                               00193300
         DI ~ D;  SI ~ S;  DS~ N WDS;                                   00193400
    END MOVE;                                                           00193500
STREAM PROCEDURE ZEROER(A,W); VALUE W;                                  00193600
    BEGIN                                                               00193700
         DI ~ A;                                                        00193800
         W(DS ~ 8 LIT "0");                                             00193900
    END ZEROER;                                                         00194000
REAL PROCEDURE BTO(I);  % RETURNS ALPHA OF OCTAL IN I;                  00194100
    VALUE I; INTEGER I;                                                 00194200
         BTO ~ 0&(I~I)[09:27:3]&I[15:30:3]&I[21:33:3]&I[27:36:3]&       00194300
                  I[33:39:3]&I[39:42:3]&I[45:45:3];                     00194400
INTEGER PROCEDURE QUALCHECK(ES,SS,DI); % COUNTS OCCURENCES OF QUALIFIER 00194500
    VALUE ES,SS,DI; REAL ES,SS,DI;     % IN STK[DI] IS CONTAINED WITIN  00194600
    BEGIN                              % THE SCOPE RANGE SS TO ES       00194700
         REAL I,CNT;                                                    00194800
         LABEL LPA,XIT;                                                 00194900
         IF ES = 0 THEN ES ~ NXI;                                       00195000
         I ~ STK[DI];      % START OF LIST OF QUALIFIERS OF SAME NAME   00195100
    LPA:                                                                00195200
         IF I > SS AND I < ES THEN                                      00195300
              % QUALIFIER IS IN SCOPE                                   00195400
         IF DI = 0 THEN   % LAST QUALIFIER IN STK                       00195500
    BEGIN                                                               00195600
         CNT ~ CNT + 1;                                                 00195700
         Q.NXIF ~ I;      % ADDRESS OF QUALIFIER;                       00195800
         Q.SCF ~ IF0(I).SCF;   % SUB-CLASS                              00195900
    END  ELSE             % CHECK NEXT QUALIFIER TO BE WITHIN SCOPE     00196000
                          % OF CURRENT ONE                              00196100
         CNT ~ CNT + QUALCHECK(IF0(I).SCOPE,I,DI-1);                    00196200
         IF CNT > 1 THEN GO TO XIT;  % CANNOT BE UNIQUE                 00196300
         IF (I ~ IF0(I).SNL) ! 0 THEN GO TO LPA; % NOT END OF SAME      00196400
                                                   %  NAME LINKS        00196500
    XIT:                                                                00196600
         QUALCHECK ~ CNT;                                               00196700
    END QUALCHECK;                                                      00196800
STREAM PROCEDURE OCTWRD(D,S);                                           00196900
    BEGIN                                                               00197000
         DI ~ D; SI ~ S;                                                00197100
         DS ~ 6 LIT "      ";                                           00197200
         2(8(DS ~ 3 RESET; 3(IF SB THEN DS ~ 1 SET ELSE DS ~ 1 RESET;   00197300
              SKIP 1 SB)); DS ~ LIT " ";);                              00197400
    END OCTWRD;                                                         00197500
PROCEDURE DUMPINFO;                                                     00197600
    BEGIN                                                               00197700
         REAL IIX,L,I,K;                                                00197800
         IF PRINTEROPEN THEN WRITE(LINE[1]);                            00197900
         PRINTEROPEN ~ TRUE;                                            00198000
         FOR L ~ IFSZ STEP IFSZ UNTIL NXI-IFSZ DO                       00198100
    BEGIN                                                               00198200
         I ~ IF5[L].DLNKF;                                              00198300
         BLAND(TMP[0],15);                                              00198400
         PUSHOVER(TMP[0],0,DRCT[I+1],2,DRCT[I+1].SIZEF);                00198500
         WRITE(RITE,15,TMP[*]);                                         00198600
         WRITE(LINE,DUMPINFOFMT,L,I);                                   00198700
         BLAND(TMP[0],15);                                              00198800
         FOR K ~ 0 STEP 1 UNTIL 4 DO                                    00198900
              OCTWRD(TMP[3|K],INFO[(IIX~L+K).RR,IIX.CC]);               00199000
         WRITE(LINE,15,TMP[*]);                                         00199100
         BLAND(TMP[0],15);                                              00199200
         OCTWRD(TMP[0],INFO[(IIX~L+5).RR,IIX.CC]);                      00199300
         WRITE(RITE,15,TMP[*]);                                         00199400
    END;                                                                00199500
    END DUMPINFO;                                                       00199600
PROCEDURE MONOCTL2(HEADING,ARY2,SZ,I);                                  00199700
         VALUE HEADING,SZ,I;                                            00199800
         REAL SZ,I,HEADING; ARRAY ARY2[0,0];                            00199900
    BEGIN                                                               00200000
         DEFINE TOROWF = [36:43:5]#,   IX = W.[36:5],W.[41:7]#;         00200100
         REAL W,W1,K; INTEGER S1,S;                                     00200200
         REAL J;                                                        00200300
         BLAND(TMP[0],15);                                              00200400
         PUSHOVER(TMP[0],0,HEADING,1,7);                                00200500
         IF I>0 THEN PUSHOVER(TMP[1],0,DRCT[J~(FIB[I,6].DLNKF+1)],2,    00200600
              DRCT[J].SIZEF);                                           00200700
         WRITE(RITE,15,TMP[*]);                                         00200800
         BLAND(TMP[0],1);                                               00200900
         IF S1 ~ (SZ DIV 5)!0 THEN                                      00201000
    BEGIN                                                               00201100
         S ~ 5|(S1-1);                                                  00201200
         IF I>0 THEN BEGIN W1 ~ 0&I TOROWF; S ~ S&I TOROWF; END;        00201300
         W1 ~ W1-5;                                                     00201400
         WHILE W1 ~ W1+5{S DO                                           00201500
    BEGIN                                                               00201600
         FOR K ~ 0 STEP 1 UNTIL 4 DO                                    00201700
    BEGIN                                                               00201800
         W ~ W1+K;                                                      00201900
         OCTWRD(TMP[3|K],ARY2[IX]);                                     00202000
    END;                                                                00202100
         WRITE(LINE,15,TMP[*]);                                         00202200
    END;                                                                00202300
    END;                                                                00202400
         IF S ~ (SZ MOD 5)!0 THEN                                       00202500
    BEGIN                                                               00202600
         S1 ~ S - 1;                                                    00202700
         BLAND(TMP[0],15);                                              00202800
         W ~ SZ-S-1;                                                    00202900
         IF I>0 THEN W ~ W&I TOROWF;                                    00203000
         FOR K ~ 0 STEP 1 UNTIL S1 DO                                   00203100
    BEGIN                                                               00203200
         W ~ W+1;                                                       00203300
         OCTWRD(TMP[3|K],ARY2[IX]);                                     00203400
    END;                                                                00203500
         WRITE(LINE,15,TMP[*]);                                         00203600
    END;                                                                00203700
    END MONOCTL2;                                                       00203800
PROCEDURE MONOCTL1(HEADING,ARY1,SZ);                                    00203900
         VALUE HEADING,SZ;                                              00204000
         REAL HEADING,SZ; ARRAY ARY1[0];                                00204100
    BEGIN                                                               00204200
         REAL I,J; INTEGER N1,N;                                        00204300
         BLAND(TMP[0],15);                                              00204400
         PUSHOVER(TMP[0],0,HEADING,1,7);                                00204500
         WRITE(RITE,15,TMP[*]);                                         00204600
         BLAND(TMP[0],1);                                               00204700
         IF N1 ~ (SZ DIV 5)!0 THEN                                      00204800
         FOR I ~ 0 STEP 5 UNTIL 5|(N1-1) DO                             00204900
    BEGIN                                                               00205000
         FOR J ~ 0 STEP 1 UNTIL 4 DO OCTWRD(TMP[3|J],ARY1[I+J]);        00205100
         WRITE(LINE,15,TMP[*]);                                         00205200
    END;                                                                00205300
         IF N ~ (SZ MOD 5)!0 THEN                                       00205400
    BEGIN                                                               00205500
         BLAND(TMP[0],15);                                              00205600
         FOR J ~ 0 STEP 1 UNTIL N-1 DO OCTWRD(TMP[3|J],ARY1[5|N1+J]);   00205700
         WRITE(LINE,15,TMP[*]);                                         00205800
    END;                                                                00205900
    END MONOCTL1;                                                       00206000
STREAM PROCEDURE MACROFORMAT(MACRO,NUMB,ADDR,SW1,SW2,SW3,DEST);         00206100
         VALUE MACRO,NUMB,ADDR,SW1,SW2,SW3;                             00206200
    BEGIN                              % MACROS                         00206300
         LABEL     L1,L2,L3,L4;                                         00206400
         SI ~ DEST;     DI ~ DEST;                                      00206500
         DS ~ 8 LIT " ";                                                00206600
         DS ~ 2 WDS;                                                    00206700
         SW1(JUMP OUT TO L1);                                           00206800
         DS ~ 4 WDS;                                                    00206900
         DI ~ DI - 1;                                                   00207000
L1:      SI ~ LOC MACRO;                                                00207100
         SI ~ SI + 3;                                                   00207200
         DS ~ 5 CHR;                                                    00207300
         CI ~ CI + SW2;                                                 00207400
         GO TO L2;      % 0                                             00207500
         GO TO L3;      % 1                                             00207600
         GO TO L4;      % 2                                             00207700
         SI ~ DEST;     % 3                                             00207800
         DS ~ 4 CHR;                                                    00207900
         GO TO L2;                                                      00208000
L4:      DS ~ 2 LIT" ";                                                 00208100
         DS ~ 8 DEC;                                                    00208200
         DEST ~ DI;                                                     00208300
         DI ~ DI - 9;                                                   00208400
         DS ~ 8 FILL;                                                   00208500
         DI ~ DEST ;                                                    00208600
         SW3(JUMP OUT TO L2);                                           00208700
L3:      SI ~ LOC ADDR;                                                 00208800
         DS ~ 5 LIT " ";                                                00208900
         DEST ~ DI;                                                     00209000
         DS ~ 5 DEC;                                                    00209100
         DS ~ 7 LIT " ";                                                00209200
         DI ~ DEST;                                                     00209300
         DS ~ 4 FILL;                                                   00209400
L2: END MACROFORMAT;                                                    00209500
PROCEDURE DCERR;                                                        00209600
    BEGIN                                                               00209700
STREAM PROCEDURE NDIDLE(SEQNUM,DEST);                                   00209800
         VALUE SEQNUM;                                                  00209900
    BEGIN                                                               00210000
         SI ~ LOC SEQNUM;                                               00210100
         DI ~ DEST;     DI ~ DI + 1;                                    00210200
         DS ~ 6 DEC;                                                    00210300
    END NDIDDLE;                                                        00210400
         NDIDLE(CARDNUMBER,ERROX[0]);                                   00210500
         WRITE(TWX,10,ERROX[*]);                                        00210600
    END DC ERR;                                                         00210700
COMMENT  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *10000000
         * P A S S   O N E   B L O C K   O F   C O M P I L I E R       *10000100
         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * ;10000200
    BEGIN                                                               10000300
REAL                                                                    10000400
         CDMSK,    % MASK FOR $B5700,$CODASYL OPTIONS                   10000500
         COUNT,    % NUMBER OF COLUMNS LEFT TO BE SCANNED               10000600
         DOLOPTWORD,         % HOLDS $ OPTIONS CURRENTLY IN USE         10000700
         ENDBUF,   % END OF CURRENT BUFFER                              10000800
         FLINFO,   % INFO ADDRESS OF I/O BUFFER                         10000900
         FPSCNT,                                                        10001000
         GIX,                % INDEX CARRY (OPERAND)                    10001100
         GTP,                % TYPE  CARRY (OPERAND)                    10001200
         GW2,                % INFO2 CARRY (OPERAND)                    10001300
         GSER,     % ERROR NUMBER OF ERRORS DETECTED BY SCTRL           10001400
         JUNKCLASS,          % CLASS OF SUBJECT OF ABBREVIATION (EXP)   10001500
         KNX,           COMMENT NEXT AVAILABLE ENTRY IN KEYR;           10001600
         LIBNMSZ,                                                       10001700
         NOREPS,        % NUMBER OF REPLACING CLAUSES PRESENT IN COPY   10001800
         SSVCOUNT,                                                      10001900
         SVCOUNT,                                                       10002000
         NXD,      % NEXT AVAILABLE ENTRY IN DICT                       10002100
         NSPE,     % NEXT MNENOMIC NAME IN RSWD                         10002200
         NXKEY,    % TYPE OF ITEM ABOUT TO BE SCANNED                   10002300
         OPX,                % OPERATOR INDEX INTO OP   (EXP)           10002400
         RDX,                % OPERAND  INDEX INTO OP   (EXP)           10002500
         RWNO,     % SAVE NUMBER OF DUMP ROW                            10002600
         RWSZ,     % SAVE LARGEST OF DUMP ROW SIZE                      10002700
         SEQBEGIN, % FIRST RESEQUENCE NUMBER                            10002800
         SEQINC,   % RESEQUENCE INCREMENT                               10002900
         OPRNDSCL,           % OPERAND SCALE                            10003000
         OPRNDSZ,            % COMPONENT OF OPERAND SIZE                10003100
         KEY;      % TYPE OF ITEM JUST SCANNED                          10003200
DEFINE   NXTSAVAIL= UL[26]#, % POINTS TO NEXT AVAIL RECORD IN SVFILE    10003300
         FROMHERE = UL[27]#, % RECORD POINTER TO  SVFILE WHEN RECALL    10003400
         SVI      = UL[29]#, % RESV FOR SPECIAL $ OPTION                10003500
         SVOPT    = UL[40]#,                                            10003600
         IFTOG    = BUL[22]#,  % TRUE IF COMPILING AN IF STATEMENT      10003700
         MOVETOG  = BUL[36]#, % TRUE IF COMPILING A MOVE STATEMENT      10003800
         SVOPTP   = BUL[33]#, % SAVE PRT OPTION WHEN SCODE              10003900
         SVOPTC   = BUL[34]#, %SAVE CODE OPTION WHEN SCODE              10004000
         ARITHSIGN= BUL[35]#, % SPLIT SIGN FROM LITERAL FOR ARITH EXP   10004100
         PDLY     = BUL[6]#; % TRUE TO DELAY SOURCE CARD PRINTING       10004200
BOOLEAN CDNTOG,    % TRUE WHEN EXPRESSION CALLS ARITHEXP                10004300
         SCALTOG,            % TRUE TO EMIT OPSZM TO SCALE REC FIELDS   10004400
         FUNNYDP,            % FUNNY (RIGHT) DECIMAL POINT              10004500
         CLM8,     % TRUE WHEN MARGIN A ! BLANK                         10004600
         CTOG,     % TRUE WHEN CARD IS CONTINUED                        10004700
         COMMENTOG, % TRUE IF COMMENT ADDED TO IMAGE                    10004800
         DECTOG,   % TRUE IF SCANNER SHOULD SCRAMBLE NEW IDENTIFIERS    10004900
                   %   INTO DICT                                        10005000
         VBTOG,         % FOR SPECIAL CODE OPTION                       10005100
         SVTOG,         % FOR SPECIAL CODE OPTION                       10005200
         SPCLTOG,       % FOR SPECIAL CODE OPTION                       10005300
         EOCARD,   % TRUE IF EOF AT THE CARD READER                     10005400
         EOFTOG,   % TRUE WHEN INPUT DECK IS EXAUSTED                   10005500
         FRSTOG,   % TRUE IF CARD HAS NOT BEEN PRINTED                  10005600
         LASTAPE,  % TRUE IF CURRENT IMAGE IS FROM TAPE                 10005700
         LES,      % TRUE IF LESS = 2 IF CARD AND TAPE ARE =            10005800
         LIBTOG,        % TRUE IF COPYING FROM LIBRARY                  10005900
         COPTOG,        % TRUE IF OK TO COPY PER CODASYL-68             10006000
         LPAS1,         % TRUE IF LIST PASS1                            10006100
         REPTOG,             % TRUE IF REPLACING                        10006200
         MONITR,   % TRUE IF MONITORING                                 10006300
         MNTR,               % DO MONITORING                            10006400
         MONITORS,           % STATEMENT MONITORABLE                    10006500
         NEWTAPETOG, % TRUE IF GENERATION OF NEW SOURCE IS REQUESTED    10006600
         PDT,      % MISSING PERIOD TOG                                 10006700
         RELTOG,                                                        10006800
         RESEQ,    % TRUE IF RESEQUENCE OPTION                          10006900
         SMONITR,  % TRUE IF IN MONITORP OR DUMPP                       10007000
         TAPETOG,  % TRUE IF MERGING CARD WITH TAPE SOURCE              10007100
         TAPECLOSE,% TRUE IF SOURCE TAPE IS UNOPENED                    10007200
         NOMKS,      % SUPPRESSES MKSMM WHEN TRUE                       10007300
         VOIDTOG;  % TRUE IF A VOIDING SITUATION                        10007400
BOOLEAN  SAVETOG,     % TRUE IF "SAVE" $ OPTION IS SET                  10007500
         FROMTOG,     % TRUE IF "FROM" $ OPTION IS CALLED               10007600
         DOLLARTOG,   % TRUE IF PRINTING CONTROL CARDS                  10007700
         VOIDTAPETOG, % TRUE IF VOIDING FROM SECONDARY INPUT ONLY       10007800
         RECALLING,   % TRUE IF RECALLING FROM A SAVE AREA              10007900
         SAVING,      % TRUE IF STORING INPUT IN A SAVE AREA            10008000
         SEQERRTOG;   % TRUE IF SEQ ERRS ARE ERRORS INSTEAD OF WARNINGS 10008100
INTEGER                                                                 10008200
         BSEQN,         % BEGINNING SEQUENCE NO. FOR COPY               10008300
         ESEQN,         % ENDING SEQUENCE NO. FOR COPY                  10008400
         PBS,      % NEXT TO BE SCANNED OFF CARD IMAGE                  10008500
         PIDX,     % CHAR 2 OF XACUM[1]                                 10008600
         PTOBUFFER,          % TO START OF IMAGE                        10008700
         PTOCOMMENTID,       % TO COMMENTID  USED FOR IMAGE COMMENT     10008800
         PTOLASTSEQ,         % TO LAST SEQUENCE NB.                     10008900
         PTOVOIDSEQ,         % USED IN VOIDING SITUATIONS               10009000
         PTOLBUF,            % TO CARD IMAGE                            10009100
         PTOXBUF,            % TO TAPE IMAGE                            10009200
         SVPTOBUFFER,                                                   10009300
         SVPBS,                                                         10009400
         SSVPBS;             % TEMP FOR PBS          $ OPTN             10009500
% * * * OPERAND DEFINES * * * * * * * * * * * * * * * * * * * * * * * * 10009600
DEFINE   DTNM  = OPTYPE.[47:1]#,   % NORMAL DATA-NAME (NOT USAGE INDEX) 10009700
         NMDN  = OPTYPE.[46:1]#,   % NUMERIC DATA-NAME                  10009800
         INDN  = OPTYPE.[44:1]#,   % DATA-NAME WITH USAGE INDEX         10009900
         NEDN  = OPTYPE.[45:1]#,   % NUMERIC EDITED DATA-NAME           10010000
         INXN  = OPTYPE.[43:1]#,   % INDEX-NAME                        110010100
         NLIT  = OPTYPE.[42:1]#,   % NUMERIC LITERAL                   310010200
         XLIT  = OPTYPE.[41:1]#,   % NON-NUMERIC LITERAL               610010300
         FIGN  = OPTYPE.[40:1]#,   % FIGURATIVE CONSTANT              1210010400
         INTN  = OPTYPE.[39:1]#,   % INTRINSIC                        2510010500
         CNDN  = OPTYPE.[38:1]#,   % CONDITION-NAME                   5110010600
          SPRG  = OPTYPE.[37:1]#,  % SPECIAL REGS                   102410010700
    % * * * GENERAL SETS * * *                                          10010800
         ANYTYP= NOT FALSE#,                                            10010900
         ANYDN = BOOLEAN(15)#,                                          10011000
         ANYLIT= BOOLEAN(96)#,                                          10011100
         ARTHTYP = BOOLEAN(1442)#,                                      10011200
          MOVESF = BOOLEAN(1263)#,                                      10011300
         SETRF = BOOLEAN(26)#,                                          10011400
         SETSF = BOOLEAN(58)#,                                          10011500
         SETSTRNG = BOOLEAN(65)#,                                       10011600
         NUMDN= BOOLEAN(2)#,                                            10011700
         EXAMDM = BOOLEAN(7)#,                                          10011800
         NUMLT = BOOLEAN(32)#,                                          10011900
         NUMSF = BOOLEAN(1058)#,                                        10012000
         NUMRF = BOOLEAN(6)#,                                           10012100
         FUNVLU = BOOLEAN(1408)#,                                       10012200
    % * * * TYPE OF CALL * * *                                          10012300
         NAME = 0#,                                                     10012400
         BVALUE=2#,                                                     10012500
         NANDBV=3#,                                                     10012600
         STONBV=6#,                                                     10012700
         SBONLY=100#;                                                   10012800
DEFINE   % FOR LIBRARY COPY                                             10012900
         CSCF = [07:5] #,    % SAVED SUB CLADD                          10013000
         CSCFF = [7:43:5]#,                                             10013100
         CTLF = [38:10] #,    % LENGTH OF TEXT                          10013200
         CTLFF = [38:38:10]#,                                           10013300
         CSLF = [24:14] #,   % STARTING LOC                             10013400
         CSLFF = [24:34:14]#,                                           10013500
         CLBF = [12:12] #,   % LINK BACK TO RSVWD                       10013600
         CLBFF = [12:36:12]#,                                           10013700
         CRWF = [6:1] #,     % RSWD BUT                                 10013800
         CRWFF = [6:47:1]#;                                             10013900
DEFINE                                                                  10014000
         ALTERNTSEQ = WREAD[1]#,       % ALTERNATE SEQUENCE NUMBER      10014100
         VOIDSEQ    = WREAD[2]#,       % VOID THRU SEQUENCE NUMBER      10014200
         LASTSEQ    = WREAD[3]#,       % LAST SEQUENCE NUMBER           10014300
         COMMENTID  = WREAD[9]#,       % FOR COMMENTS ON IMAGE          10014400
         FIGCON = 15#,       % FIGURATIVE CONSTANT                      10014500
         MOP = MACROOPS#,                                               10014600
         MAC2 = EMITMACROPAIR#,                                         10014700
         MAC1 = EMITMACRO#,                                             10014800
         PUTANAME = OPERAND(ANYDN,NAME)#,                               10014900
         PUTAVALUE = OPERAND(NUMSF,BVALUE)#,                            10015000
         PUTAZERO = IF KEY=ZEROV THEN BEGIN Q.SCF ~ ITGRV; KEY ~ LITV;  10015010
                    ACCUM[1] ~ 0 & 1 SIZEFF; END#,                      10015020
    % * * * KEY ENTRY STUFF * * *                                       10015100
         KYMAX = 50#,   COMMENT MAX NUMBER OF KEY ENTRIES;              10015200
         KYDIR = [01:1]#,    % IF = 1 THEN ASCENDING                    10015300
         KYDIRF = [1:47:1]#,                                            10015400
         KYDCT = [16:16]#,   % KEY DICTIONARY ENTRY                     10015500
         KYDCTF = [32:32:16]#,                                          10015600
         KYDN  = [32:16]#;   COMMENT INFO INDEX OF ASSOCIATED DATA-NAME;10015700
FILE     CARD(2,10,150),     % SOURCE FILE ON CARDS                     10015800
         PUNCH1 0(2,10),                                                10015900
         LIBRARY DISK SERIAL (2,10,150),                                10016000
         TAPE DISK SERIAL "COBOL""IMAGE" (2,10,150);                    10016100
     FILE SAVEFILE DISK SERIAL [20:2000] "COBOL" "SAVE"                 10016200
                   (2,10,30,SAVE 2);                                    10016300
SAVE FILE NEWTAPE DISK SERIAL [20:3000] "COBOL" "IMAGE"                 10016400
              (2,10,150,SAVE 99);                                       10016500
SAVE ARRAY                                                              10016600
         XACUM[0:40],                                                   10016700
         ACCUM[0:40],        % HOLDS SCANNED ENTITY                     10016800
         LBUF[0:10],    % HOLDS CARD IMAGE                              10016850
         LIBUF[0:10];                                                   10016900
BOOLEAN ARRAY BUL[0:36];% USED FOR OWN BOOLEANS                         10017000
              % ALL BUL CELLS ARE IN USE                                10017100
BOOLEAN PROCEDURE DICTSRCH(A); ARRAY A[0]; FORWARD;                     10017200
PROCEDURE DISKOUT(SOURCE,CNTL,SIZE,VARY,MACNB);                         10017300
         VALUE     CNTL,SIZE,VARY,MACNB,SOURCE;                         10017400
         REAL      CNTL,SIZE,VARY,MACNB,SOURCE;                         10017500
         FORWARD;                                                       10017600
PROCEDURE DEBLANK;                     FORWARD;                         10017700
PROCEDURE DOLOPT;                FORWARD;                               10017800
INTEGER PROCEDURE GETPRTLOC;       FORWARD;                             10017900
REAL PROCEDURE INCONV(A,B); VALUE A;BOOLEAN A; INTEGER B; FORWARD;      10018000
DEFINE ICVI(T) = INCONV(T,JUNK)#;                                       10018100
BOOLEAN PROCEDURE RSWDSRCH;      FORWARD;                               10018200
BOOLEAN PROCEDURE ATWDSRCH; FORWARD;                                    10018300
PROCEDURE SCRAMBLEIT;            FORWARD;                               10018400
INTEGER PROCEDURE SCTRL;         FORWARD;                               10018500
PROCEDURE ARITHEXP;     FORWARD;                                        10018600
REAL PROCEDURE EXPRESSION(BEXP);  VALUE BEXP;  BOOLEAN BEXP;  FORWARD;  10018700
PROCEDURE OPERAND(OPTYPE,TYPE);                                         10018800
    VALUE OPTYPE,TYPE; BOOLEAN OPTYPE; REAL TYPE; FORWARD;              10018900
PROCEDURE SETSAVESEQ; FORWARD;                                          10019000
BOOLEAN PROCEDURE FINDFROMSEQ; FORWARD;                                 10019100
PROCEDURE SAVIT;   FORWARD;                                             10019200
PROCEDURE RECALL;  FORWARD;                                             10019300
PROCEDURE COPYP; FORWARD;                                               10019400
PROCEDURE ERR(ERNUM);   VALUE ERNUM;    REAL ERNUM;                     10019500
    BEGIN                                                               10019600
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%10019700
%                  VENI, VEDI, VICTUS SUM                              %10019800
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%10019900
         DEFINE ERBUF = ERROX#;                                         10020000
         BOOLEAN T;                                                     10020100
         REAL S;                                                        10020200
STREAM PROCEDURE ERRFMT(ERBUF,T,ERNUM,PIDS,SZ,LSTER,CURSQ);             10020300
         VALUE T, ERNUM,SZ;                                             10020400
    BEGIN % THIS IS THE ERROR FORMAT;                                   10020500
          LABEL  WARN,ER,WNG,EROUT;                                     10020600
          DI~ERBUF; DS~8 LIT " "; SI~ERBUF;DS ~ 14 WDS;                 10020700
          DI~ERBUF;CI ~CI +T; GO TO WARN; DS~8 LIT "ERROR   ";GO TO ER; 10020800
    WARN: DS~8 LIT "WARNING ";                                          10020900
    ER:   SI~LOC ERNUM; DS~ 3 DEC; DS~2 LIT ": ";                       10021000
          SI~PIDS; SI~SI+2; DS ~ SZ CHR;                                10021100
          DI~ERBUF; DI~DI+50;DI~DI+50;                                  10021200
          CI~CI+T; GO TO WNG; SI~LSTER;DS ~ 8 CHR; DS~8 LIT "XXXXXXXX"; 10021300
          DI~LSTER; SI ~CURSQ ; DS ~ 6 CHR; GO TO EROUT;                10021400
    WNG:  DS ~16 LIT "        WWWWWWWW";                                10021500
    EROUT:                                                              10021600
    END OF ERRFMT;                                                      10021700
          IF T ~ ERNUM } 0 THEN ERRORCOUNT ~ ERRORCOUNT+1               10021800
          ELSE ERNUM ~ ABS(ERNUM);                                      10021900
         IF S ~ (ACCUM[1].SIZEF+9) DIV 8 > 4 THEN                       10022000
    BEGIN                                                               10022100
         S ~ 4; ACCUM[1].SIZEF ~ 30;                                    10022200
    END;                                                                10022300
         IF T OR NOT SPECTOG THEN                                       10022400
         DISKOUT(0,1,S,ERNUM,REAL(NOT T));                              10022500
         S ~ REAL(T);                                                   10022600
         IF DCOMM OR T ~(LPAS1 AND(NOT SPECTOG OR T)) THEN              10022700
    BEGIN                                                               10022800
         IF ERNUM = 287 THEN                                            10022900
         ERRFMT(ERBUF[0],S,ERNUM,JUNK,5,LASTERR,CURRENTSEQ)             10023000
    ELSE                                                                10023100
         ERRFMT(ERBUF[0],S,ERNUM,ACCUM[1],ACCUM[1].SIZEF,               10023200
                LASTERR,CURRENTSEQ);                                    10023300
         IF T THEN                                                      10023600
    BEGIN                                                               10023700
         PRINTEROPEN ~ TRUE;                                            10023800
         WRITE (RITE,15,ERBUF[*]);                                      10023900
    END;                                                                10024000
    END;                                                                10024100
    END ERR;                                                            10024200
PROCEDURE DATIME;                                                       10024300
    BEGIN                                                               10024400
         INTEGER HR,MN;                                                 10024500
REAL STREAM PROCEDURE DODATE(PBS,DAY,DATES,HR,MN,REST,MERIDIAN);        10024600
         VALUE PBS,DAY,DATES,HR,MN,REST,MERIDIAN;                       10024700
    BEGIN                                                               10024800
         DI ~ PBS;                                                      10024900
         SI ~ LOC DAY;       SI ~ SI +2;                                10025000
         DS ~ 2 LIT". ";                                                10025100
         DS ~ 6 CHR;         DS ~ 5 LIT"DAY, ";  SI~SI + 2;%DAY OF WEEK 10025200
         2(DS~2 CHR; DS~LIT"/";);      DS~ 2 CHR; DS~2 LIT", "; %DATE   10025300
         DS ~ 2 DEC; DS~LIT":"; SI~SI+6;    DS~ 2 CHR; DS~ LIT" ";% TIME10025400
         SI ~ LOC MERIDIAN;  SI ~ SI + 6;   DS~ 2 CHR;     %MERIDIAN    10025500
         DODATE ~ DI;                                      % SAVE OFF   10025600
         DS ~ 2 LIT". ";                                                10025700
         REST(DS~ LIT" ";);                                             10025800
    END DODATE;                                                         10025900
         HR ~ IF (MN~TI DIV 216000) > 12 THEN MN-12 ELSE MN;            10026000
         MN~(MN~(TI DIV 3600)MOD 60)MOD 10+(MN DIV 10)|64;              10026100
         PBS ~ DODATE(PBS,TIME(6),TIME(5),HR,MN,(COUNT~COUNT-31),       10026200
         IF TI DIV 216000 > 11 THEN "PM" ELSE "AM");                    10026300
    END DATIME;                                                         10026400
COMMENT * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 12000000
        *                                                             * 12000100
        *               CARD/TAPE READINGS                            * 12000200
        *                                                             * 12000300
        * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * ; 12000400
STREAM PROCEDURE MOVECHARFRP(D,SPTR,SZ);                                12000500
         VALUE     SPTR,SZ;                                             12000600
    BEGIN                                                               12000700
         SI ~ SPTR;                                                     12000800
         DI ~ D;                                                        12000900
         DS ~ SZ CHR;                                                   12001000
    END MOVECHARFRP;                                                    12001100
BOOLEAN STREAM PROCEDURE COMPLSS (D,S);                                 12001200
     BEGIN                                                              12001300
         SI ~ S;                                                        12001400
         DI ~ D;                                                        12001500
         IF 6 SC>DC THEN TALLY ~ 1                                      12001600
    ELSE BEGIN                                                          12001700
         SI ~ S;                                                        12001800
         DI ~ D;                                                        12001900
         IF 6 SC = DC THEN TALLY ~ 2;                                   12002000
    END;                                                                12002100
         COMPLSS ~ TALLY;                                               12002200
    END COMPLSS;                                                        12002300
PROCEDURE SEQUENCEERROR;                                                12002400
    BEGIN                                                               12002500
         IF GETCHARS(PTOBUFFER,0,1) ! "$" THEN                          12002600
    BEGIN                                                               12002700
         MOVE(ACCUM[38],ACCUM[ 1],2);                                   12002800
         ACCUM[1].SIZEF ~ 13;                                           12002900
         PUSHOVER(ACCUM[01],2,LASTSEQ,0,6);                             12003000
         ACCUM[2] ~ 0 & ">" [1:43:5];                                   12003100
         PUSHOVER(ACCUM[2],1,CURRENTSEQ,0,6);                           12003200
         ERR( IF SEQERRTOG THEN 86 ELSE -86);                           12003300
         MOVE(ACCUM[ 1],ACCUM[38],2);                                   12003400
    END;                                                                12003500
    END OF SEQUENCE ERROR;                                              12003600
BOOLEAN STREAM PROCEDURE REFORM(DZ,CARD,ERROR);                         12003700
    BEGIN          LOCAL DT;                                            12003800
         SI ~ CARD;     TALLY ~ 2;                                      12003900
         DI ~ DZ;       DI ~ DI + 6;                                    12004000
         IF SC = "$" THEN DS ~ 5 CHR                                    12004100
    ELSE IF SC = "*" THEN DS ~ 5 CHR                                    12004200
    ELSE IF SC = "-" THEN DS ~ 5 CHR                                    12004300
    ELSE IF SC ! " " THEN BEGIN                                         12004400
         DS ~ LIT " ";                                                  12004500
         DS ~ 4 CHR;                                                    12004600
         TALLY ~ TALLY + 1;                                             12004700
    END ELSE BEGIN                                                      12004800
         TALLY ~ TALLY + 4;                                             12004900
         DS ~ 5 LIT " ";                                                12005000
         SI ~ SI + 1;                                                   12005100
    END;                                                                12005200
         DS ~ 32 CHR;                                                   12005300
         DS ~ 32 CHR;                                                   12005400
         DT ~ TALLY;    TALLY ~ 0;                                      12005500
         DI ~ ERROR;    DI ~ DI+2;                                      12005600
         IF SC! " " THEN IF SC! """ THEN TALLY ~ 1;                     12005700
         DS ~ CHR;                                                      12005800
         DT ( IF SC! " " THEN TALLY ~ 1;                                12005900
              DS ~ CHR; );                                              12006000
         REFORM ~ TALLY;                                                12006100
         DI ~ DZ;                                                       12006200
         SI ~ SI + 2;                                                   12006300
         DS ~ 6 CHR;                                                    12006400
         SI ~ DZ;                                                       12006500
         DI ~ CARD;                                                     12006600
         DS ~ 9  WDS;     DS ~ 8 LIT " ";                               12006700
    END REFORM;                                                         12006800
STREAM PROCEDURE REMAKE(START,ENDE,FINISH);                             12006900
         VALUE START;                                                   12007000
    BEGIN                                                               12007100
         LABEL L1,L2;                                                   12007200
         DI ~ FINISH;  DS ~ 8 LIT " ";                                  12007300
         SI ~ FINISH;  DS ~ 8 WDS;                                      12007400
         DI ~ FINISH;                                                   12007500
         SI ~ START;    SI ~ SI + 6;                                    12007600
         TALLY ~ 5;                                                     12007700
         5(IF SC ! " " THEN JUMP OUT TO L1;                             12007800
         SI ~ SI + 1;                                                   12007900
         TALLY ~ TALLY + 63);                                           12008000
         DI ~ DI +1;                                                    12008100
         GO TO L2;                                                      12008200
    L1:                                                                 12008300
         FINISH ~ TALLY;                                                12008400
         DS ~ FINISH CHR;                                               12008500
    L2:                                                                 12008600
         DS ~ 61 CHR;                                                   12008700
         DI ~ ENDE;                                                     12008800
         SI ~ START;                                                    12008900
         DS ~ 2 LIT "0";                                                12009000
         DS ~ 6 NUM;                                                    12009100
    END REMAKE;                                                         12009200
PROCEDURE PRINTCARD;                                                    12009300
    BEGIN                                                               12009400
         LABEL XIT;                                                     12009500
         FRSTOG ~ FALSE;                                                12009600
         IF EOFTOG THEN GO TO XIT;                                      12009700
         IF LPAS1 OR PUNCHTOG OR LIBTOG THEN                            12009800
    BEGIN                                                               12009900
         IF LIBTOG THEN MOVE(TMP,LIBUF,11)                              12010000
    ELSE                                                                12010100
         IF LASTAPE THEN MOVE(TMP,XBUF,11)                              12010200
    ELSE                                                                12010300
         MOVE(TMP,LBUF,11);                                             12010400
         WRITE(CARDIMAGE,10,TMP[*]);                                    12010500
         IF LPAS1 THEN IF SINGLETOG THEN WRITE(LINE,11,TMP[*])          12010600
                                    ELSE WRITE(RITE,11,TMP[*]);         12010700
         IF PUNCHTOG THEN WRITE(PUNCH1,10,TMP[*]);                      12010800
    END ELSE                                                            12010900
         IF LASTAPE THEN WRITE(CARDIMAGE,10,XBUF[*])                    12011000
                    ELSE WRITE(CARDIMAGE,10,LBUF[*]);                   12011100
         DISKOUT(0,1,0,CARDNUMBER,                                      12011200
              (IF LIBTOG THEN "L" ELSE IF FROMTOG THEN "S" ELSE         12011300
               IF TAPETOG THEN IF REAL(LES)=2 THEN "P" ELSE             12011400
               IF LASTAPE THEN "T" ELSE "C" ELSE " "));                 12011500
    XIT:                                                                12011600
END PRINTCARD;                                                          12011700
PROCEDURE GETACARD;    % MERGES CARD IMAGES WITH TAPE IMAGES            12011800
BEGIN LABEL EOTL,EOCL,XIT;                                              12011900
STREAM PROCEDURE SWISH(A,B,D);         VALUE D;                         12012000
    BEGIN                                                               12012100
         SI ~ A;   DI ~ LOC D; DS ~ WDS;                                12012200
         DI ~ A;   DS ~ WDS;                                            12012300
         SI ~LOC D;DS ~ WDS;                                            12012400
    END;                                                                12012500
         IF LASTAPE THEN                                                12012600
    BEGIN                                                               12012700
         READ(TAPE,10,XBUF[*])[EOTL];                                   12012800
         IF TSSMERG THEN IF REFORM(TMP,XBUF,JUNK) THEN ERR(-287);       12012900
    END ELSE BEGIN                                                      12013000
         READ(CARD,10,LBUF[*])[EOCL];                                   12013100
         IF FREETOG THEN IF REFORM(TMP,LBUF,JUNK) THEN ERR(-287);       12013200
    END;                                                                12013300
    MOVECHARFRP(CURRENTSEQ,PTOBUFFER,6);                                12013400
    IF TAPETOG THEN IF NOT EOCARD THEN                                  12013500
    BEGIN                                                               12013600
         IF LES ~ COMPLSS(CURRENTSEQ,ALTERNTSEQ) THEN GO TO XIT;        12013700
         IF REAL(LES) = 2 THEN    % EQUAL SEQ                           12013800
         BEGIN IF LASTAPE THEN                                          12013900
              BEGIN LASTAPE ~ FALSE;                                    12014000
              ENDBUF ~ (PTOBUFFER~PTOLBUF)+9;                           12014100
              END;                                                      12014200
              READ(TAPE,10,XBUF[*])[EOTL];                              12014300
              IF TSSMERG THEN IF REFORM(TMP,XBUF,JUNK) THEN ERR(-287);  12014350
               MOVECHARFRP(ALTERNTSEQ,PTOXBUF,6);                       12014400
               GO TO XIT;                                               12014500
         EOTL: IF EOFTOG ~ EOCARD THEN                                  12014600
                   GO TO XIT;                                           12014700
                LES ~ LASTAPE ~ TAPETOG ~ FALSE;                        12014800
                CLOSE(TAPE,RELEASE);                                    12014900
         ENDBUF ~ (PTOBUFFER ~ PTOLBUF) + 9;                            12015000
               GO TO XIT;                                               12015100
         EOCL: IF EOFTOG ~ NOT TAPETOG THEN                             12015200
                   GO TO XIT;                                           12015300
                LES ~ LASTAPE ~ EOCARD  ~ TRUE;                         12015400
                CLOSE(CARD,RELEASE);                                    12015500
         ENDBUF ~ (PTOBUFFER~PTOXBUF)+9;                                12015600
    END ELSE BEGIN      % CURRENT SEQUENCE > ALTERNATE SEQUENCE         12015700
         SWISH(CURRENTSEQ,ALTERNTSEQ,0);                                12015800
         PTOBUFFER  ~ IF LASTAPE~NOT LASTAPE THEN PTOXBUF ELSE PTOLBUF; 12015900
         ENDBUF ~ PTOBUFFER + 9;                                        12016000
    END;                                                                12016100
     END;                                                               12016200
XIT:                                                                    12016300
END GETACARD;                                                           12016400
PROCEDURE READACARD;                                                    12016500
BEGIN                                                                   12016600
STREAM PROCEDURE NINEFILL(DPTR);                                        12016700
                   VALUE  DPTR;                                         12016800
    BEGIN                                                               12016900
         DI ~ DPTR;                                                     12017000
         DS ~ 8 LIT "999999 .";                                         12017100
         DS ~ 8 LIT " ";                                                12017200
         SI ~ DPTR; SI ~ SI+8;                                          12017300
         DS ~ 8 WDS;                                                    12017400
    END NINEFILL;                                                       12017500
STREAM PROCEDURE MTP(DPTR,S);     VALUE DPTR;                           12017600
    BEGIN                                                               12017700
         DI ~ DPTR; SI ~ S;                                             12017800
         DS ~ 1 WDS;                                                    12017900
    END;                                                                12018000
STREAM PROCEDURE CONVERT(PTR,NUMM,CTL);                                 12018100
         VALUE     PTR,CTL;                                             12018200
    BEGIN                                                               12018300
         LABEL XIT,DCX;                                                 12018400
         CI ~ CI + CTL;                                                 12018500
         GO TO DCX;                                                     12018600
         DI ~ NUMM;                                                     12018700
         SI ~ PTR;                                                      12018800
         DS ~ 6 OCT;                                                    12018900
         GO TO XIT;                                                     12019000
    DCX:                                                                12019100
         DI ~ PTR;                                                      12019200
         SI ~ NUMM;                                                     12019300
         DS ~ 6 DEC;                                                    12019400
    XIT:                                                                12019500
    END CONVERT;                                                        12019600
PROCEDURE READLIB;                                                      12019700
    BEGIN                                                               12019800
LABEL EOLL,READMORE,XIT;                                                12019900
    READMORE:                                                           12020000
         READ(LIBRARY,10,TMP[*])[EOLL];                                 12020100
         IF (T1 ~ REAL (COMPLSS(BSEQN,TMP))) = 1 OR T1 = 2 THEN         12020200
         IF (T1 ~ REAL (COMPLSS(TMP,ESEQN))) = 1 OR T1 = 2 THEN         12020300
    BEGIN                                                               12020400
         MOVE(LIBUF,TMP,10);                                            12020500
         IF FREETOG THEN IF REFORM(TMP,LIBUF,JUNK) THEN ERR(-287);      12020600
    END ELSE GO TO EOLL ELSE GO TO READMORE;                            12020700
         GO TO XIT;                                                     12020800
         EOLL: CLOSE (LIBRARY,RELEASE);                                 12020900
               LIBTOG ~ FALSE;                                          12021000
         FRSTOG ~ FALSE;                                                12021100
         EOFTOG ~ SVEOFTOG;                                             12021200
         ENDBUF ~ (PTOBUFFER ~ SVPTOBUFFER) + 9;                        12021300
         PBS ~ SVPBS;                                                   12021400
         COUNT ~ SVCOUNT;                                               12021500
    XIT:                                                                12021600
    END;                                                                12021700
    LABEL LO,XIT,STR,SETID;                                             12021800
    ALPHA SAME,I,ALSO;                                                  12021900
    STR:                                                                12022000
         IF FRSTOG THEN PRINTCARD;                                      12022100
         IF LIBTOG THEN                                                 12022200
    BEGIN                                                               12022300
         READLIB;                                                       12022400
         IF NOT LIBTOG THEN GO TO XIT;                                  12022500
    END ELSE                                                            12022600
    BEGIN                                                               12022700
         PUSHOVER(LASTSEQ,0,CURRENTSEQ,0,6);                            12022800
LO:      IF FROMTOG THEN                                                12022900
    BEGIN                                                               12023000
         RECALL;                                                        12023100
         IF FROMTOG THEN GO TO SETID;                                   12023200
    END;                                                                12023300
         GETACARD;                                                      12023400
         IF EOFTOG THEN                                                 12023500
    BEGIN                                                               12023600
         NINEFILL(PTOBUFFER);                                           12023700
         PBS ~ PTOBUFFER & 7[18:33:15];                                 12023800
         COUNT ~ 10;                                                    12023900
         GO TO XIT;                                                     12024000
    END;                                                                12024100
         IF NOT SAVETOG THEN                                            12024200
              IF COMPLSS(CURRENTSEQ,LASTSEQ) THEN                       12024300
                   SEQUENCEERROR;                                       12024400
    END;                                                                12024500
         COUNT ~ 65;                                                    12024600
         PBS ~ PTOBUFFER&(SAME~IF GETCHARS(PTOBUFFER,0,1)="$" THEN 1    12024700
               ELSE 7) [18:33:15];                                      12024800
         I ~ GETCHARS(PTOBUFFER,SAME-1  ,5);     %GET COLS 7,8,9,10,11  12024900
         IF (SAME ~ I.[18:6])= "$" THEN                                 12025000
    BEGIN                                                               12025100
         SAME ~ KEY;                                                    12025200
         ALSO ~ NXKEY;                                                  12025300
         DOLOPT;                                                        12025400
         KEY ~ SAME;                                                    12025500
         NXKEY ~ ALSO;                                                  12025600
         IF DOLLARTOG THEN                                              12025700
    BEGIN                                                               12025800
         CARDCOUNT ~ CARDCOUNT + 1;                                     12025900
         PRINTCARD;                                                     12026000
    END;                                                                12026100
          GO TO LO                                                      12026200
    END ELSE                                                            12026300
         IF SAME="/" THEN                                               12026310
    BEGIN                                                               12026320
         IF LPAS1 THEN WRITE(LINE[1]);                                  12026330
         IF LISTOG THEN DISKOUT(0,1,0,8,0);                             12026340
    END;                                                                12026350
         IF VOIDTOG THEN GO TO LO;                                      12026400
         IF VOIDTAPETOG THEN                                            12026500
              IF LASTAPE THEN GO TO LO;                                 12026600
         IF SAVETOG THEN SAVIT;                                         12026700
SETID:                                                                  12026800
         FRSTOG ~ TRUE;                                                 12026900
         IF COMMENTOG THEN MTP(ENDBUF,WREAD[9]);                        12027000
         IF RESEQ THEN                                                  12027100
    BEGIN                                                               12027200
         CONVERT(PTOBUFFER,SEQBEGIN,0);                                 12027300
         SEQBEGIN ~ SEQBEGIN + SEQINC;                                  12027400
    END;                                                                12027500
         IF NOT LIBTOG THEN                                             12027600
         IF NEWTAPETOG THEN                                             12027700
         IF TSSEDIT THEN                                                12027800
    BEGIN                                                               12027900
         REMAKE(PTOBUFFER,TMP[9],TMP[0]);                               12028000
         WRITE(NEWTAPE,10,TMP[*]);                                      12028100
    END ELSE                                                            12028200
         IF LASTAPE THEN WRITE(NEWTAPE,10,XBUF[*])                      12028300
    ELSE                 WRITE(NEWTAPE,10,LBUF[*]);                     12028400
         CARDCOUNT ~ CARDCOUNT + 1;                                     12028500
         IF SAME="*" OR SAME="/" THEN GO TO STR;                        12028600
         CONVERT(PTOBUFFER,CARDNUMBER,1);                               12028700
         IF I.[18:12] = "  " THEN                                       12028800
    BEGIN                                                               12028900
         COUNT ~ IF CLM8~I!"     " THEN 63 ELSE 61;                     12029000
         PBS ~(PTOBUFFER+1) &(IF COUNT=63 THEN 0 ELSE 3)[18:33:15];     12029100
         CTOG~ FALSE;                                                   12029200
    END ELSE BEGIN                                                      12029300
         IF NOT (CTOG ~ SAME="-") THEN                                  12029400
         CLM8 ~ I.[24:24] ! "    ";                                     12029500
    END;                                                                12029600
    XIT:                                                                12029700
    END READACARD;                                                      12029800
PROCEDURE SAVIT;                                                        12029900
    BEGIN                                                               12030000
         LABEL XIT;                                                     12030100
         IF SAVING THEN                                                 12030200
    BEGIN                                                               12030300
         IF LASTAPE THEN WRITE(SAVEFILE,10,XBUF[*])                     12030400
              ELSE WRITE(SAVEFILE,10,LBUF[*]);                          12030500
              NXTSAVAIL ~ NXTSAVAIL + 1;                                12030600
    END  ELSE                                                           12030700
    BEGIN                                                               12030800
         IF LASTAPE THEN WRITE(SAVEFILE[NXTSAVAIL],10,XBUF[*])          12030900
              ELSE WRITE(SAVEFILE[NXTSAVAIL],10,LBUF[*]);               12031000
         NXTSAVAIL ~ NXTSAVAIL + 1;                                     12031100
         SAVING ~ TRUE;                                                 12031200
    END;                                                                12031300
    END SAVIT;                                                          12031400
PROCEDURE RECALL;                                                       12031500
    BEGIN                                                               12031600
         LABEL XIT;                                                     12031700
         IF LASTAPE THEN READ(SAVEFILE,10,XBUF[*])                      12031800
              ELSE READ(SAVEFILE,10,LBUF[*]);                           12031900
         FROMHERE ~ FROMHERE + 1;                                       12032000
         IF GETCHARS(PTOBUFFER,0,6)="RESET$" THEN                       12032100
    BEGIN                                                               12032200
              FROMTOG ~ FALSE;  GO TO XIT                               12032300
    END;                                                                12032400
         MOVECHARFRP(CURRENTSEQ,PTOBUFFER,6);                           12032500
         IF COMPLSS(CURRENTSEQ,LASTSEQ) THEN SEQUENCEERROR;             12032600
    XIT:                                                                12032700
    END RECALL;                                                         12032800
PROCEDURE DOLOPT;                                                       12032900
BEGIN ALPHA HOLDOPS,OPTION,K;                                           12033000
         LABEL XIT,LOOP,MISS,DONE,LP,L;                                 12033100
      BOOLEAN TORF,SDEC,B,LP1,LP2,PR1,CD1,RECALLTOG,NOOPTACT;           12033200
DEFINE                                                                  12033300
         RESETSAVE = LITRL(TMP[0],"RESET$",6);                          12033400
                     WRITE(SAVEFILE[NXTSAVAIL],10,TMP[*]);              12033500
                     NXTSAVAIL~ NXTSAVAIL + 1 #,                        12033600
         FILLPTR(A)= PYSHT(0,A)#,                                       12033700
         FILLNAM(A)= PYSHT(1,A)#,                                       12033800
         PTRLIT(A) = PYSHT(2,A)#;                                       12033900
STREAM PROCEDURE PYSHT(BRNCH,DEST);                                     12034000
         VALUE BRNCH,DEST;                                              12034100
    BEGIN                                                               12034200
         LABEL  PTR,NAM,EGRESS;                                         12034300
         DI ~ DEST;                                                     12034400
         CI ~ CI + BRNCH;                                               12034500
         GO TO PTR;                                                     12034600
         GO TO NAM;                                                     12034700
         DI ~ DI + 4;                                                   12034800
         DS ~ 4 LIT ". . ";                                             12034900
         GO TO EGRESS;                                                  12035000
PTR:     DS ~ 2LIT " R";                                                12035100
         GO TO EGRESS;                                                  12035200
NAM:     DS ~ 8 LIT " T      ";                                         12035300
EGRESS:                                                                 12035400
    END PYSHT;                                                          12035500
MOVE(SAC[0],XACUM[0],10); MOVE(SAC[10],ACCUM[0],10);                    12035600
         PTRLIT(PBS+7);                                                 12035700
SDEC ~ DECTOG;  DECTOG ~ FALSE;                                         12035800
         HOLDOPS ~ DOLOPTWORD;  TORF ~ NOOPTACT ~ TRUE;                 12035900
         LP2~LISTOG; LP1~LPAS1; CD1~CODETOG; PR1~PRTOG;                 12036000
DEBLANK;  STEPS;                                                        12036100
LOOP: STEPS;                                                            12036200
MISS: IF KEY = PERIOD THEN GO TO XIT;                                   12036300
      IF OPTION ~ ACCUM[1].[01:29] = "4FRO" THEN                        12036400
    BEGIN                                                               12036500
         IF RECALLTOG THEN ERR(-100) ELSE                               12036600
         IF SCTRL ! LITV OR (K ~ ACCUM[1].SIZEF) > 6 THEN ERR(-100) ELSE12036700
         IF FINDFROMSEQ THEN                                            12036800
    BEGIN                                                               12036900
              SAVETOG ~ FALSE;                                          12037000
                   FROMTOG ~ RECALLTOG ~ TRUE; GO TO LOOP               12037100
    END  ELSE BEGIN ERR(-100);  GO TO MISS  END;                        12037200
    END  ELSE                                                           12037300
      IF OPTION = "4PAG"  THEN                                          12037400
    BEGIN                                                               12037500
         IF LPAS1 THEN WRITE(LINE[1]);                                  12037600
         IF LISTOG THEN DISKOUT(0,1,0,8,0);                             12037700
         GO TO LOOP;                                                    12037800
    END  ELSE                                                           12037900
      IF OPTION = "5LIM"  THEN                                          12038000
        IF TORF THEN                                                    12038100
    BEGIN                                                               12038200
         DOLOPTWORD.DOEF ~ 1;                                           12038300
         IF SCTRL ! LITV THEN                                           12038400
    BEGIN                                                               12038500
              ERR(-100);                                                12038600
         DOLOPTWORD.DOEF ~ 0;                                           12038700
              GO TO MISS                                                12038800
    END  ELSE                                                           12038900
         IF Q.SCF = ITGRV THEN                                          12039000
    BEGIN                                                               12039100
         ERRORLIMIT ~ ICVI(FALSE);                                      12039200
         GO TO LOOP;                                                    12039300
    END  ELSE BEGIN ERR(-100); GO TO MISS END;                          12039400
    END  ELSE                                                           12039500
        DOLOPTWORD.DOEF ~ 0 ELSE                                        12039600
      IF (B ~ (OPTION = "3SET")) OR OPTION = "5RES" THEN                12039700
    BEGIN                                                               12039800
         TORF ~ B;                                                      12039900
         NOOPTACT ~ FALSE;                                              12040000
         GO TO LOOP;                                                    12040100
    END;                                                                12040200
      IF NOOPTACT THEN                                                  12040300
    BEGIN                                                               12040400
         NOOPTACT ~ FALSE;                                              12040500
         TAPETOG~LP1~NEWTAPETOG~RESEQ~PR1~VOIDTOG~VOIDTAPETOG~          12040600
         SEQERRTOG~CD1~SPCLTOG~SINGLETOG~COMMENTOG~SPECTOG~SAVETOG~     12040700
         DOLLARTOG ~ DEBUGTOG ~ INFOTOG ~ PUNCHTOG ~ XREFTOG ~ FALSE;   12040800
         DOLOPTWORD ~ 1;                                                12040900
    END;                                                                12041000
      IF OPTION = "4CAR" THEN TAPETOG ~ FALSE ELSE                      12041100
         IF OPTION = "5MER" OR OPTION = "4TAP" THEN                     12041200
    BEGIN                                                               12041300
         TAPETOG ~ TORF;                                                12041400
    END  ELSE                                                           12041500
      IF OPTION = "4LIS"  THEN                                          12041600
         LP2 ~ TORF ELSE                                                12041700
      IF OPTION = "5LIS"  THEN                                          12041800
         LP1 ~ TORF ELSE                                                12041900
      IF OPTION = "3NEW"  THEN                                          12042000
              BEGIN IF NEWTAPETOG~TORF THEN SHORTAPE ~ 1 END ELSE       12042100
      IF OPTION = "3SEQ"  THEN                                          12042200
         IF RESEQ ~ TORF THEN                                           12042300
    BEGIN                                                               12042400
         SEQBEGIN ~ 0;  SEQINC ~ 10;                                    12042500
    L:                                                                  12042600
         IF SCTRL = PLUSCHR THEN        % ACCEPTS BASE AND INCREMENT    12042700
              IF SCTRL ! LITV THEN      % IN EITHER ORDER. INCREMENT    12042800
                   GO TO MISS  ELSE     % MAY HAVE SPACE BETWEEN + AND  12042900
              IF Q.SCF = ITGRV  THEN    % INTEGER.                      12043000
    BEGIN                                                               12043100
                   SEQINC ~ ICVI(FALSE); GO TO L;                       12043200
    END  ELSE ELSE                                                      12043300
         IF KEY ! LITV THEN                                             12043400
              GO TO MISS ELSE                                           12043500
         IF Q.SCF = ITGRV THEN                                          12043600
              IF Q.LSGF = 2  THEN                                       12043700
    BEGIN                                                               12043800
                   SEQINC ~ ICVI(FALSE); GO TO L;                       12043900
    END       ELSE                                                      12044000
    BEGIN                                                               12044100
              SEQBEGIN ~ ICVI(FALSE); GO TO L;                          12044200
    END                                                                 12044300
    END ELSE  ELSE                                                      12044400
      IF OPTION = "5STA" OR OPTION = "3PRT" THEN                        12044500
         PR1 ~ TORF ELSE                                                12044600
      IF OPTION = "4VOI"  THEN                                          12044700
         VOIDTOG ~ TORF ELSE                                            12044800
      IF OPTION = "5VOI"  THEN                                          12044900
         VOIDTAPETOG ~ TORF ELSE                                        12045000
         IF OPTION = "5SQE" THEN                                        12045100
         SEQERRTOG ~ TORF ELSE                                          12045200
      IF OPTION = "4COD" OR OPTION = "6DEB" THEN                        12045300
         CD1 ~ TORF ELSE                                                12045400
      IF OPTION = "5SCO" THEN                                           12045500
    BEGIN                                                               12045600
         IF NOT (SPCLTOG ~ TORF) THEN GO TO LOOP;                       12045700
    LP:  I ~ XACUM[0].NXF;                                              12045800
         IF NXKEY } 10 THEN IF XACUM[0].SCF = STMTBEGIN THEN            12045900
              RSWD[I.IR,I.IC]:=XACUM[0]&1[2:47:1]&SVI NXFF;             12046000
         IF NXKEY = PERIOD THEN GO TO XIT;                              12046100
         IF NXKEY < 10 THEN GO TO LOOP;                                 12046200
         STEPS; GO TO LP;                                               12046300
    END  ELSE                                                           12046400
         IF OPTION = "6SIN" OR OPTION = "3SGL" THEN                     12046500
         DOLOPTWORD.DO1F  ~  REAL(SINGLETOG ~ TORF) ELSE                12046600
      IF OPTION = "5PUN"  THEN                                          12046700
         DOLOPTWORD.DOPF  ~  REAL(TORF) ELSE                            12046800
      IF OPTION = "6PUN" THEN                                           12046900
         PUNCHTOG ~ TORF ELSE                                           12047000
         IF OPTION = "5CDS" THEN                                        12047100
    BEGIN                                                               12047200
            CDMSK ~ 1;                                                  12047300
    END ELSE                                                            12047400
         IF OPTION = "5B57" THEN                                        12047500
            CDMSK ~ 7 ELSE                                              12047600
      IF OPTION = "5NEW"  THEN                                          12047700
         IF COMMENTOG ~ TORF THEN                                       12047800
           IF SCTRL ! LITV OR Q.SCF ! STRNGV OR (K ~ ACCUM[1].SIZEF) > 812047900
         THEN ERR(-100) ELSE BEGIN PUSHOVER(WREAD[9],0,ACCUM[1],2,K);   12048000
                             FILLWITHCHR(WREAD[9],K," ",8-K);           12048100
                             END ELSE ELSE                              12048200
      IF OPTION = "4SPE"  THEN                                          12048300
         DOLOPTWORD.DOSF  ~  REAL(SPECTOG ~ TORF) ELSE                  12048400
         IF OPTION = "7SEG" THEN DISKOUT(0,1,0,2048,0) ELSE             12048450
      IF OPTION = "4SAV"  THEN                                          12048500
              BEGIN     RESETSAVE;                                      12048600
                        IF (SAVETOG ~TORF) THEN                         12048700
                           SETSAVESEQ;                                  12048800
              END  ELSE                                                 12048900
      IF OPTION  =  "1$00"  THEN                                        12049000
         DOLLARTOG ~ TORF ELSE                                          12049100
         IF OPTION = "4XRE" THEN                                        12049110
    BEGIN                                                               12049120
         DOLOPTWORD.DOXF ~ REAL(XREFTOG ~ TORF);                        12049130
         XREVER ~ TRUE;                                                 12049140
    END ELSE                                                            12049150
      IF OPTION = "5DEB" THEN DOLOPTWORD.DODF ~ REAL(TORF) ELSE         12049200
      IF OPTION = "5TRA" THEN DEBUGTOG ~ TORF ELSE                      12049300
      IF OPTION = "4INF" THEN DOLOPTWORD.DOIF ~ REAL(INFOTOG ~ TRUE)    12049400
         ELSE                                                           12049500
      IF OPTION = "3FIB" THEN DOLOPTWORD.DOFF ~ REAL(TORF) ELSE         12049600
         IF TORF THEN   %  THESE CANNOT BE RESET                        12049700
         IF OPTION = "4FRE" THEN  FREETOG ~ TRUE ELSE                   12049800
         IF OPTION = "6SEQ" THEN  SEQXEQT ~ TRUE ELSE                   12049900
         IF OPTION = "7TSS" THEN  TSSEDIT ~ TRUE ELSE                   12050000
         IF OPTION = "8TSS" THEN  TSSMERG ~ TRUE ELSE                   12050100
         ERR(-100) ELSE                                                 12050200
      ERR(-100);                                                        12050300
      GO TO LOOP;                                                       12050400
    XIT: IF NOT(LPAS1 EQV LP1) THEN                                     12050500
         IF NOT LP1 THEN                                                12050600
    BEGIN                                                               12050700
         DEBUGTOG ~ LPAS1 ~ FALSE;                                      12050800
    END  ELSE LPAS1 ~ TRUE;                                             12050900
         IF NOT(LISTOG EQV LP2) THEN                                    12051000
         IF NOT LP2 THEN                                                12051100
    BEGIN                                                               12051200
         DOLOPTWORD.DOLF ~ REAL(LISTOG ~ FALSE);                        12051300
         DOLOPTWORD.DOMF ~ 0;                                           12051400
         DOLOPTWORD.DOCF ~ 0;                                           12051500
         DOLOPTWORD.DODF ~ 0;                                           12051600
    END  ELSE DOLOPTWORD.DOLF ~ REAL(LISTOG ~ TRUE);                    12051700
         IF DEBUGTOG THEN LPAS1 ~ CD1 ~ PR1 ~ TRUE;                     12051800
              IF (CODETOG ~ CD1) THEN                                   12051900
    BEGIN                                                               12052000
                   DOLOPTWORD.DOCF ~ REAL(LISTOG);                      12052100
                   PR1 ~ CD1;                                           12052200
    END       ELSE DOLOPTWORD.DOCF ~ REAL(CODETOG ~ FALSE);             12052300
              IF (PRTOG ~ PR1)  THEN                                    12052400
    BEGIN                                                               12052500
                   DOLOPTWORD.DOMF ~ REAL(LISTOG);                      12052600
    END ELSE DOLOPTWORD.DOMF ~ REAL(PRTOG  ~ FALSE);                    12052700
         IF NOT LONG THEN LONG~((DOLOPTWORD.DOCF+DOLOPTWORD.DODF) > 0); 12052750
         IF DOLOPTWORD ! HOLDOPS THEN DISKOUT(0,1,0,DOLOPTWORD,0);      12052800
    DONE:                                                               12052900
         IF TAPETOG THEN                                                12053000
         IF TAPECLOSE THEN                                              12053100
    BEGIN                                                               12053200
         LASTAPE  ~ TRUE;                                               12053300
         TAPETOG  ~ FALSE;                                              12053400
         GETACARD; % THIS FILLS THE BUFFERS                             12053500
         MOVECHARFRP(ALTERNTSEQ,PTOXBUF~MKABS(XBUF[0]),6);              12053600
         TAPETOG  ~ TRUE;                                               12053700
         TAPECLOSE ~ LASTAPE ~ FALSE;                                   12053800
         FILLPTR(PTOLBUF+10);                                           12053900
         FILLNAM(PTOXBUF+10);                                           12054000
    END;                                                                12054100
              MOVE(XACUM[0],SAC[0],10);                                 12054200
              MOVE(ACCUM[0],SAC[10],10);                                12054300
         DECTOG ~ SDEC;                                                 12054400
    END DOLOPT;                                                         12054500
PROCEDURE SETSAVESEQ;                                                   12054600
    BEGIN                                                               12054700
         REAL I;                                                        12054800
         LABEL XIT,STR;                                                 12054900
    STR: I ~ -1; WHILE I { 15 DO                                        12055000
    BEGIN                                                               12055100
              I ~ I + 2;                                                12055200
              IF SAVENRS [I] = 0 THEN                                   12055300
    BEGIN                                                               12055400
                   SAVENRS[I] ~ NXTSAVAIL;                              12055500
                   I ~ I-1;                                             12055600
                   MOVECHARFRP(SAVENRS[I],PTOBUFFER,6);                 12055700
                   GO TO XIT;                                           12055800
    END;                                                                12055900
    END;                                                                12056000
         WRITE (SAVEFILE[NXTSAVAIL],10,SAVENRS[*]);                     12056100
              MOVE(SAVENRS[0],SAVENRS[10],10);                          12056200
         WRITE(SAVEFILE[NXTSAVAIL +1],10,SAVENRS[*]);                   12056300
         NXTSAVAIL ~ NXTSAVAIL + 2;                                     12056400
         ZEROER(SAVENRS[0],17);                                         12056500
         SAVENRS[19] ~ NXTSAVAIL - 2;                                   12056600
         GO TO STR;                                                     12056700
    XIT: SAVING ~ FALSE;                                                12056800
    END SETSAVESEQ;                                                     12056900
BOOLEAN PROCEDURE FINDFROMSEQ;                                          12057000
    BEGIN                                                               12057100
         REAL I;                                                        12057200
         LABEL L,STR,XIT;                                               12057300
         BOOLEAN HIDERAYTOG;                                            12057400
         I ~ ACCUM[1].SIZEF;                                            12057500
         IF I < 6 THEN                                                  12057600
              FILLWITHCHR(TMP[0],0,"0",6-I);                            12057700
         PUSHOVER(TMP[0],6-I,ACCUM[1],2,I);                             12057800
    STR: I ~ -2; WHILE I { 14 DO                                        12057900
    BEGIN                                                               12058000
              I ~ I + 2;                                                12058100
              IF COMPEQ(TMP[0],0,SAVENRS[I],6) THEN                     12058200
    BEGIN                                                               12058300
                   FROMHERE ~ SAVENRS[I + 1];                           12058400
                   GO TO L                                              12058500
    END;                                                                12058600
    END;                                                                12058700
         IF I ~ SAVENRS [19] = 0 THEN                                   12058800
    BEGIN                                                               12058900
              FINDFROMSEQ ~ FALSE;                                      12059000
              GO TO XIT                                                 12059100
    END;                                                                12059200
         IF NOT HIDERAYTOG THEN                                         12059300
    BEGIN                                                               12059400
              HIDERAYTOG ~ TRUE;                                        12059500
              WRITE (SAVEFILE[1],10,SAVENRS[*]);                        12059600
              MOVE(SAVENRS[0],SAVENRS[10],10);                          12059700
              WRITE(SAVEFILE[2],10,SAVENRS[*]);                         12059800
    END;                                                                12059900
         READ(SAVEFILE[I + 1],10,SAVENRS[*]);                           12060000
         MOVE(SAVENRS[10],SAVENRS[0],10);                               12060100
         READ(SAVEFILE[I],10,SAVENRS[*]);                               12060200
         GO TO STR;                                                     12060300
    L:    IF HIDERAYTOG THEN                                            12060400
    BEGIN                                                               12060500
              READ(SAVEFILE[2],10,SAVENRS[*]);                          12060600
              MOVE(SAVENRS[10],SAVENRS[0],10);                          12060700
              READ(SAVEFILE[1],10,SAVENRS[*]);                          12060800
    END;                                                                12060900
              FINDFROMSEQ ~ TRUE;                                       12061000
                   READ(SAVEFILE[FROMHERE]);                            12061100
    XIT:                                                                12061200
    END FINDROMSEQ;                                                     12061300
COMMENT * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 13000000
        *                                                             * 13000100
        *                    THE  SCANNER                             * 13000200
        *                                                             * 13000300
        * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * ; 13000400
PROCEDURE DEBLANK;                                                      13000500
    BEGIN                                                               13000600
    LABEL XIT,LA;                                                       13000700
         INTEGER JUNK,T;                                                13000800
INTEGER STREAM PROCEDURE DEBLANKER(PBS);                                13000900
         VALUE PBS;                                                     13001000
    BEGIN                                                               13001100
         LABEL LOOPER,GRINCH;                                           13001200
         SI ~ PBS;                                                      13001300
         IF SC = " " THEN                                               13001400
    BEGIN                                                               13001500
         SI ~ SI +1;                                                    13001600
         IF SC=" " THEN                                                 13001700
    BEGIN                                                               13001800
    LOOPER:                                                             13001900
         SI ~ SI + 1;                                                   13002000
         IF SC =" " THEN GO TO LOOPER;                                  13002100
    END ELSE BEGIN                                                      13002200
         DEBLANKER ~ SI;                                                13002300
         DI ~ LOC DEBLANKER;                                            13002400
         DS ~ LIT "+";                                                  13002500
         GO TO GRINCH;                                                  13002600
    END;                                                                13002700
    END;                                                                13002800
         DEBLANKER ~ SI;                                                13002900
    GRINCH:                                                             13003000
    END DEBLANKER;                                                      13003100
    LA:                                                                 13003200
         IF (JUNK~DEBLANKER(PBS)).[33:15] } ENDBUF THEN                 13003300
    BEGIN                                                               13003400
         READACARD;                                                     13003500
         GO TO LA;                                                      13003600
    END;                                                                13003700
         IF JUNK = PBS THEN GO TO XIT;                                  13003800
         COUNT ~ COUNT - ( IF JUNK LSS 0 THEN 1 ELSE                    13003900
           (((8|(T~JUNK-PBS.[33:15]).[33:15])+T.[18:15])- PBS.[18:15]));13004000
         PBS ~ ABS(JUNK);                                               13004100
    XIT:                                                                13004200
    END DEBLANK;                                                        13004300
INTEGER PROCEDURE SCTRL;                                                13004400
    BEGIN                                                               13004500
         LABEL          NUMBER,SPCLCHR,DONE,XIT,IDA,IDB,STA,STB,        13004600
                   STC,STD,STE,STF,CDN,NUA,NUB,NUC,NUD,NUE,PRD2,        13004700
                   SPCA;                                                13004800
         REAL      RC,TC,GT1,GT2,CHRS,PAC;                              13004900
         BOOLEAN   NUMTOG;                                              13005000
STREAM PROCEDURE ACXFER(F,T,SZ,B,A);                                    13005100
    VALUE F,T,SZ;                                                       13005200
    BEGIN                                                               13005300
         SI ~ F;        DI ~ T;                                         13005400
         DS ~ SZ CHR;                                                   13005500
         F ~ SI;        SI ~ LOC F;                                     13005600
         T ~ DI;                                                        13005700
         DI ~ B;        DS ~ WDS;                                       13005800
         DI ~ A;        DS ~ WDS;                                       13005900
    END ACXFER;                                                         13006000
INTEGER STREAM PROCEDURE SKP(BLOC,SZ);                                  13006100
         VALUE BLOC,SZ;                                                 13006200
    BEGIN                                                               13006300
         SI ~ BLOC;                                                     13006400
         SI ~ SI + SZ;                                                  13006500
         SKP ~ SI;                                                      13006600
    END SKP;                                                            13006700
INTEGER STREAM PROCEDURE SCANNHER(T,PBS,PACV);                          13006800
         VALUE PBS,T,PACV;                                              13006900
    BEGIN                                                               13007000
         LABEL     AN,NNL,NU,ANCNT,ENDER;                               13007100
         SI ~ PBS;                                                      13007200
         DI ~ PACV;                                                     13007300
         CI ~ CI + T;                                                   13007400
         GO TO AN;           % ALPHANUMERIC SCAN                        13007500
         GO TO NNL;          % NON NUMERIC LITERAL                      13007600
    NU:                      % NUMERIC                                  13007700
         IF SC } "0" THEN                                               13007800
    BEGIN                                                               13007900
         DS ~ CHR;                                                      13008000
         GO TO NU;                                                      13008100
    END;                                                                13008200
         GO TO ENDER;                                                   13008300
    NNL: PACV(                                                          13008400
         IF SC ! """ THEN SI ~ SI+1 ELSE JUMP OUT TO ENDER);            13008500
         GO TO ENDER;                                                   13008600
    AN:  IF SC = ALPHA THEN                                             13008700
    BEGIN                                                               13008800
    ANCNT:                                                              13008900
         DS ~ CHR;                                                      13009000
         GO TO AN;                                                      13009100
    END;                                                                13009200
         IF SC = "-" THEN GO TO ANCNT;                                  13009300
    ENDER:                                                              13009400
         SCANNHER ~ SI;                                                 13009500
    END SCANNHER;                                                       13009600
BOOLEAN PROCEDURE CARDSPLIT;                                            13009700
    BEGIN                                                               13009800
         READACARD;                                                     13009900
         DEBLANK;                                                       13010000
         CARDSPLIT ~ CTOG;                                              13010100
    END CARDSPLIT;                                                      13010200
STREAM PROCEDURE OCTV(D,S); VALUE S;                                    13010300
    BEGIN                                                               13010400
         DI ~ D; DI ~ DI+2; SI ~ LOC S; DS ~ 4 DEC;                     13010500
    END;                                                                13010600
INTEGER STREAM PROCEDURE GNCH(BUFLOC);      % [42:6] = SWITCH INDEX     13010700
         VALUE BUFLOC;                      % [36:6] = CHARACTER        13010800
    BEGIN                                   % [30:6] = LAST CHAR        13010900
         SI ~ BUFLOC;                                                   13011000
         IF SC GEQ "0" THEN TALLY ~ 1       % NUMERIC                   13011100
    ELSE                                                                13011200
         IF SC = ALPHA THEN TALLY~ 2        % ALPHABETIC                13011300
    ELSE                                                                13011400
         TALLY ~ 3;                         % SPECIAL CHAR              13011500
         GNCH ~ TALLY;                                                  13011600
         SI ~ SI - 1;                                                   13011700
         DI ~ LOC GNCH;      DI ~ DI + 5;                               13011800
         DS ~ 2 CHR;                                                    13011900
    END GNCH;                                                           13012000
          IF PDLY THEN PDLY ~ FALSE                                     13012100
          ELSE IF FRSTOG THEN PRINTCARD;                                13012200
              % MOVE XACUM TO ACCUM                                     13012300
         MOVE( ACCUM, XACUM,( XACUM[1].SIZEF + 17).[28:17]);            13012400
         KEY ~ NXKEY;                                                   13012500
         VBTOG ~ SVTOG;                                                 13012600
         IF GSER ! 0 THEN                                               13012700
    BEGIN                                                               13012800
         ERR(GSER);                                                     13012900
         GSER ~ 0;                                                      13013000
    END;                                                                13013100
         PAC ~ PIDX;                                                    13013200
         IF PDT THEN                                                    13013300
    BEGIN                                                               13013400
         XACUM[1].[01:17] ~ "01.";                                      13013500
         NXKEY ~ PERIOD;                                                13013600
         PDT ~ FALSE;                                                   13013700
         GO TO XIT;                                                     13013800
    END;                                                                13013900
         IF GNCH(PBS).[36:6] = " " OR COUNT { 0 THEN DEBLANK;           13014000
         TC ~ RC ~ XACUM[0] ~ XACUM[1] ~ NXKEY ~ 0;                     13014100
         IF CLM8 THEN                                                   13014200
    BEGIN                                                               13014300
         XACUM[0].[01:1] ~ 1;                                           13014400
         CLM8 ~ FALSE ;                                                 13014500
         IF KEY !   PERIOD THEN GSER ~ -81;                             13014600
    END;                                                                13014700
         IF XREFTOG THEN XARRAY[1] ~ GETCHARS(PTOBUFFER,0,6);           13014750
         CHRS~ (GT1 ~ GNCH(PBS)).[36:6];                                13014800
         IF (GT2~GT1.[42:6])=1 THEN GO TO NUMBER;                       13014900
         IF GT2=2 THEN GO TO IDA;                                       13015000
         GO TO SPCLCHR;                                                 13015100
    IDA:                                                                13015200
         IF (TC~SCANNHER(0,PBS,PAC)).[33:15] } ENDBUF THEN              13015300
    BEGIN                                                               13015400
         RC ~ RC + (GT2 ~ COUNT);                                       13015500
         IF COUNT < 6 THEN LITPTR(XACUM[1],COUNT+2,0,6 - COUNT);        13015600
         IF CARDSPLIT THEN                                              13015700
    BEGIN                                                               13015800
    IDB:                                                                13015900
         CTOG ~ FALSE;                                                  13016000
         PAC ~ SKP(PAC,GT2);                                            13016100
         GO TO IDA;                                                     13016200
    END;                                                                13016300
         GT1 ~ GNCH(SKP(PAC,GT2));                                      13016400
    END ELSE BEGIN                                                      13016500
         RC ~ RC + (GT2 ~                                               13016600
         (((8|(GT1~TC-PBS.[33:15]).[33:15])+GT1.[18:15])-PBS.[18:15])); 13016700
         GT1 ~ GNCH(PBS~TC);                                            13016800
         COUNT ~ COUNT - GT2;                                           13016900
         DEBLANK;                                                       13017000
         IF CTOG THEN GO TO IDB;                                        13017100
    END;                                                                13017200
         IF RC > 30 THEN BEGIN GSER ~ 1; RC ~ 30 END;                   13017300
         XACUM[1].SIZEF ~ RC;                                           13017400
         IF GT1.[30:6] = "-" THEN GSER ~ 182;                           13017500
         GO TO XIT;                                                     13017600
    NUMBER:                                                             13017700
         NUMTOG ~ FALSE;                                                13017800
    NUA:                                                                13017900
         IF (TC~SCANNHER(2,PBS,PAC)).[33:15] } ENDBUF THEN % NUMERIC    13018000
    BEGIN                                                               13018100
         RC ~ RC + (GT2 ~ COUNT);                                       13018200
         IF CARDSPLIT THEN                                              13018300
    BEGIN                                                               13018400
    NUE:                                                                13018500
         CTOG ~ FALSE;                                                  13018600
         PAC ~ SKP(PAC,GT2);                                            13018700
         GO TO NUA;                                                     13018800
    END;                                                                13018900
         IF NUMTOG THEN GO TO NUD ELSE GO TO NUC;                       13019000
    END;                                                                13019100
         RC ~ RC+ ( GT2 ~                                               13019200
         (((8|(GT1~TC-PBS.[33:15]).[33:15])+GT1.[18:15])-PBS.[18:15])); 13019300
         PBS ~ TC ;                                                     13019400
         COUNT ~ COUNT - GT2;                                           13019500
         DEBLANK;                                                       13019600
         IF CTOG THEN GO TO NUE;                                        13019700
         IF NUMTOG THEN GO TO NUD;                                      13019800
    NUB:                                                                13019900
              % INTEGER OR LEFT PART OF REAL NUMBER                     13020000
              % EXAMINE FOLLOWING CHARACTER                             13020100
         IF (GT1 ~ GNCH(PBS)).[30:6] = " " THEN                         13020200
    BEGIN     % HAVE INTEGER                                            13020300
    NUC:                                                                13020400
         NXKEY ~ LITV;                                                  13020500
         XACUM[1].SIZEF ~ RC;                                           13020600
         XACUM[0].SCF ~ ITGRV;                                          13020700
         GO TO XIT;                                                     13020800
    END;                                                                13020900
         IF GT1.[36:6] = "." THEN                                       13021000
    BEGIN                                                               13021100
         PBS ~ SKP(PBS,1); COUNT ~ COUNT-1;                             13021200
         IF COUNT { 0 THEN                                              13021300
    BEGIN                                                               13021400
         IF NOT CARDSPLIT THEN BEGIN PDT ~ TRUE; GO NUC END;            13021500
         IF GNCH(PBS).[42:6] ! 1 THEN  % NOT NUMERIC                    13021600
    BEGIN                                                               13021700
         GSER ~ 29;                                                     13021800
         PDT ~ TRUE;                                                    13021900
         GO TO NUC;                                                     13022000
    END;                                                                13022100
    END;                                                                13022200
         IF (GT1 ~ GNCH(PBS)).[42:6]=1 THEN  %IF NUMERIC                13022300
    BEGIN                                                               13022400
         XACUM[1].SIZEF ~ RC;                                           13022500
         RC ~ 0; NUMTOG ~ TRUE;                                         13022600
         GO TO NUE;                                                     13022700
    END;                                                                13022800
         IF GT1.[36:6] ! " " THEN GSER ~ 182;                           13022900
         PDT ~ TRUE; GO TO NUC;                                         13023000
    NUD:                % HAVE FRACTION PART OF REAL NUMBER             13023100
         NXKEY ~LITV;                                                   13023200
         XACUM[0].SCF ~NUMV;                                            13023300
         XACUM[1].SIZEF ~ XACUM[1].SIZEF + RC; % TOTAL NUMBER OF DIGITS 13023400
         XACUM[0].ITF ~ RC;   % SIZE OF FRACTION PART                   13023500
         GO TO XIT;                                                     13023600
    END;                                                                13023700
         IF (GT1 ~GNCH(PBS)).[42:6]=2 OR GT1.[36:6]="-" THEN            13023800
         IF XACUM[0].LSGF ! 0 THEN GSER ~ 182 ELSE                      13023900
         GO TO IDB;                                                     13024000
         GO TO NUC;                                                     13024100
    SPCLCHR:                                                            13024200
         PBS ~ SKP(PBS,1);                                              13024300
         COUNT ~ COUNT - 1;                                             13024400
         XACUM[1] ~ "1000000"& GT1 [12:36:6];                           13024500
         IF T~GT1.[36:6] ! """ THEN                                     13024600
    BEGIN                                                               13024700
         IF T = "+" OR T ="-" THEN                                      13024800
    BEGIN                                                               13024900
         IF COUNT { 0 THEN IF NOT CARDSPLIT THEN GO TO SPCA;            13025000
         IF ARITHSIGN THEN GO TO SPCA;                                  13025100
         IF (GT1~GNCH(PBS)).[42:6]=1 THEN  % IF NUMERIC                 13025200
    BEGIN                                                               13025300
         XACUM[0].LSGF ~ IF T="-" THEN 1 ELSE 2;                        13025400
         GO TO NUMBER;                                                  13025500
    END ELSE                                                            13025600
         IF GT1.[36:6]="."  THEN % IF IS A PERIOD COULD BE FRACTION     13025700
         IF NUMTOG ~  GNCH(SKP(PBS,1)).[42:6]=1 THEN  % IT IS A FRACTION13025800
    BEGIN                                                               13025900
         XACUM[0].LSGF ~ IF T="-" THEN 1 ELSE 2;                        13026000
         XACUM[1].SIZEF ~ RC ~ 0;                                       13026100
         PBS ~ SKP(PBS,1);  COUNT ~ COUNT-1;  % SKIP  PERIOD            13026200
         GO TO NUA                                                      13026300
    END;                                                                13026400
    SPCA:     % SIGN NOT FOLLOWED BY A DIGIT                            13026500
         NXKEY ~ IF T = "+" THEN PLUSCHR ELSE MINUSCHR;                 13026600
         GO TO XIT;                                                     13026700
    END;                                                                13026800
         IF T =";" THEN NXKEY ~ SEMI ELSE                               13026900
         IF T = "," THEN NXKEY ~ COMMA ELSE                             13027000
         IF T ="."THEN                                                  13027100
    BEGIN     % CHECK FOR DIGIT AFTER PERIOD                            13027200
         IF COUNT { 0 THEN IF NOT CARDSPLIT THEN GO TO PRD2;            13027300
         IF GNCH(PBS).[42:6]=1 THEN  % A NUMBER                         13027400
    BEGIN                                                               13027500
         NUMTOG ~ TRUE;                                                 13027600
         XACUM[1].SIZEF ~ RC ~ 0;                                       13027700
         GO TO NUA;                                                     13027800
    END;                                                                13027900
    PRD2:                                                               13028000
         NXKEY ~ PERIOD;                                                13028100
         GO TO XIT;                                                     13028200
    END ELSE                                                            13028300
         IF T = "*" THEN                                                13028400
    BEGIN                                                               13028500
         IF COUNT { 0 THEN IF CARDSPLIT THEN;                           13028600
         IF GNCH(PBS).[36:6]! "*" THEN NXKEY ~ STAR ELSE                13028700
    BEGIN                                                               13028800
         COUNT ~ COUNT -1;                                              13028900
         XACUM[1] ~ "2**0000";                                          13029000
         PBS ~ SKP(PBS,1);                                              13029100
         NXKEY ~ EXPSTAR;                                               13029200
    END;                                                                13029300
    END;                                                                13029400
         GO TO XIT;                                                     13029500
    END;                                                                13029600
         IF COUNT{0 THEN GO TO STC;                                     13029700
         ACXFER(PBS,PAC,1,PBS,PAC);           %  MOVE IT OVER           13029800
         RC ~ 1;                                                        13029900
         IF COUNT ~ COUNT -1 { 0 THEN GO TO STC;                        13030000
    STA:      % STRING CONTROL                                          13030100
         IF (TC~SCANNHER(1,PBS,COUNT)).[33:15] } ENDBUF THEN   % NNL    13030200
    BEGIN                                                               13030300
         IF (RC~RC+COUNT)> 256 THEN GO TO STB;                          13030400
         ACXFER(PBS,PAC,COUNT,PBS,PAC);                                 13030500
    STC:                                                                13030600
         IF NOT CARDSPLIT OR GNCH(PBS).[36:6] ! """ THEN                13030700
    BEGIN                                                               13030800
    STE:                                                                13030900
         GSER ~ 6;                                                      13031000
         GO TO STB;                                                     13031100
    END;                                                                13031200
    STD: CTOG ~ FALSE;                                                  13031300
         PBS ~ SKP(PBS,1); COUNT ~ COUNT-1; % SKIP CONTINUATION "       13031400
         IF COUNT GTR 63 THEN                                           13031500
    BEGIN                                                               13031600
         COUNT ~ COUNT - 1;                                             13031700
         IF GNCH(PBS).[36:6] ! """ THEN                                 13031800
    BEGIN                                                               13031900
         RC ~ RC + 1;                                                   13032000
         ACXFER(PBS,PAC,1,PBS,PAC);                                     13032100
    END ELSE                                                            13032200
         GO TO STF;                                                     13032300
    END;                                                                13032400
         GO TO STA;                                                     13032500
    END;                                                                13032600
         IF RC ~ RC +(TC ~                                              13032700
         (((8|(GT1~TC-PBS.[33:15]).[33:15])+GT1.[18:15])-PBS.[18:15]))  13032800
           > 256 THEN GO TO STB;                                        13032900
         ACXFER(PBS,PAC,TC,PBS,PAC);                                    13033000
         COUNT ~ COUNT -TC-1;                                           13033100
    STF:                                                                13033200
         PBS ~ SKP(PBS,1);           % BP PASS ENDING "                 13033300
         DEBLANK;                                                       13033400
         IF CTOG THEN IF GNCH(PBS).[36:6]!"""THEN GO STE ELSE GO STD;   13033500
    STB:                                                                13033600
         IF CLM8 THEN IF GNCH(PBS).[36:6] = "." THEN CLM8 ~ FALSE;      13033700
         IF RC > 256 THEN BEGIN GSER ~ 2; RC ~ 256 END;                 13033800
         XACUM[1].SIZEF~RC;                                             13033900
         NXKEY ~ LITV;                                                  13034000
         XACUM[0].SCF ~ STRNGV;                                         13034100
    XIT:                                                                13034200
         IF DECTOG THEN    % PUT IN DICT IF REQUESTED & NOT ALREADY     13034210
              IF KEY=IDV THEN                                           13034220
                   IF ACCUM[0].NXF=0                                    13034230
                        THEN SCRAMBLEIT;                                13034240
         IF NXKEY = 0 THEN                                              13034300
    BEGIN                                                               13034400
         IF RSWDSRCH THEN                                               13034500
    BEGIN                                                               13034600
         NXKEY ~ XACUM[0].ITF;                                          13034700
    END  ELSE                                                           13034800
    BEGIN                                                               13034900
         IF NOT DICTSRCH(XACUM) THEN XACUM[0].SCF ~ UNKID;              13035000
         NXKEY ~ IDV;                                                   13035100
    END;                                                                13035200
    END;                                                                13035300
         Q ~ ACCUM[0];                                                  13035800
         IF DEBUGTOG THEN                                               13035900
         WRITE(RITE,SCTRLFMT,ACCUM[1].SIZEF,ACCUM[1],KEY,Q.SCF);        13036000
         IF KEY = COPY THEN IF LIBTOG THEN ERR(267) ELSE                13036025
         IF NOT COPTOG THEN IF CDMSK ! 7 THEN ERR(267) ELSE             13036050
         COPYP ELSE COPYP;                                              13036075
         IF (SCTRL~KEY) = VALUEV THEN                                   13036100
         IF DECLTOG OR PRODFLG THEN                                     13036200
    BEGIN                                                               13036300
         STEPS;                                                         13036400
         IF ATWDSRCH AND (T~ACCUM[0]).SCF = ATVALUE THEN                13036500
    BEGIN                                                               13036600
         OCTV(ACCUM[1],T.ATRVF);                                        13036700
         ACCUM[1].SIZEF ~ 4;                                            13036800
         Q ~ XACUM[0] ~ 0 & ITGRV SCFF;                                 13036900
         KEY ~ LITV;                                                    13037000
    END  ELSE                                                           13037100
    BEGIN                                                               13037200
         ERR(269);                                                      13037300
         ACCUM[0] ~ Q;                                                  13037400
    END;                                                                13037500
    END;                                                                13037600
         CTOG ~ FALSE;                                                  13037700
    END SCTRL;                                                          13038100
BOOLEAN PROCEDURE DICTSRCH(XACUM); % SEARCHES DICT FOR SCANNED ITEM     13038200
    ARRAY XACUM[0];                                                     13038300
    BEGIN                                                               13038400
    INTEGER I;          REAL J,K;                                       13038500
    LABEL XIT,LP;       BOOLEAN SHORT;                                  13038600
BOOLEAN  STREAM PROCEDURE COMPEQ  (DEST,START,SZ1);     VALUE SZ1;      13038700
    BEGIN                                                               13038800
         SI ~ START;    DI ~ DEST;                                      13038900
         IF SZ1 SC=DC THEN TALLY ~ 1; COMPEQ ~  TALLY;                  13039000
    END;                                                                13039100
         I ~ STACKHEAD[(K ~ XACUM[1]).SBLF MOD 125];                    13039200
         IF NOT (SHORT~ (J~K.SIZEF) { 6) THEN J ~ J - 6;                13039300
         DO                                                             13039400
         IF K = DICT[I.IR,(I+1).IC] THEN                                13039500
              IF SHORT THEN GO TO LP ELSE                               13039600
                   IF COMPEQ(XACUM[2],DICT[I.IR,(I+2).IC],J) THEN GO LP 13039700
         UNTIL (I~DRCT[I].NXF) = 0;                                     13039800
         GO TO XIT;                                                     13039900
LP:      % EUREKA                                                       13040000
         XACUM[0] ~ DRCT[I]&I NXFF & XACUM[0][1:1:1];                   13040100
         IF XREFTOG THEN                                                13040110
     BEGIN                                                              13040120
         XARRAY[0] ~ 0 & (I+1) NXFF;                                    13040130
         WRITE(DSK,2,XARRAY[*]);                                        13040140
    END;                                                                13040150
         DICTSRCH ~ TRUE;                                               13040200
    XIT:                                                                13040300
    END DICTSRCH;                                                       13040400
PROCEDURE SCRAMBLEIT;        % SCRAMBLES IDENTIFIERS INTO DICT          13040500
    BEGIN                                                               13040600
         INTEGER I,J,K;                                                 13040700
         I ~ STACKHEAD[J ~ ACCUM[1].SBLF MOD 125];                      13040800
         IF ( K ~ (ACCUM[1].SIZEF + 17).[28:17])                        13040900
          + NXD.IC GTR 511 THEN NXD:=0&(NXD.IR+1) IRF;                  13041000
         ACCUM[0].NXF ~ I;                                              13041100
         ACCUM[0].[01:1]~0;                                             13041200
         MOVE(DRCT[NXD],ACCUM ,K);                                      13041300
         IF XREFTOG THEN                                                13041310
    BEGIN                                                               13041320
         XARRAY[0] ~ 0 & (NXD+1) NXFF;                                  13041330
         WRITE(DSK,2,XARRAY[*]);                                        13041340
    END;                                                                13041350
         ACCUM[0].NXF ~ NXD;                                            13041400
         NXD ~ (STACKHEAD[J] ~ NXD) + K;                                13041500
         IF NXD > DICTMX THEN BEGIN NXD~0; ERR(279) END;                13041600
    END SCRAMBLEIT;                                                     13041700
INTEGER PROCEDURE SCRAMBLENM;                                           13041800
    BEGIN                                                               13041900
         INTEGER I,J,K;                                                 13042000
         REAL    T;                                                     13042100
         LABEL XIT;                                                     13042200
         I ~ RWSTACK[J ~ (T~ACCUM[1]).SBLF MOD 125];                    13042300
         K ~ (T.SIZEF+17).WIX;                 % SIZE IN WORDS          13042400
         IF RSWD[(IIX~NSPE-K).IR,IIX.IC] ! 0   % NO MORE ROOM           13042500
          THEN BEGIN SCRAMBLENM ~ -1; GO TO XIT END;                    13042600
         NSPE ~ NSPE - K;                                               13042700
         ACCUM[0] ~ ABS(ACCUM[0]) & I NXFF;                             13042800
         MOVE(RSWD[NSPE.IR,NSPE.IC],ACCUM ,K);                          13042900
         ACCUM[0].NXF ~ RWSTACK[J] ~ SCRAMBLENM ~ NSPE;                 13043000
    XIT:                                                                13043100
    END SCRAMBLENM;                                                     13043200
BOOLEAN PROCEDURE RSWDSRCH;  % SEARCHS RSWD FOR RESERVED WORDS          13043300
    BEGIN                                                               13043400
    INTEGER I;          REAL J,K;                                       13043500
    LABEL XIT,LP;       BOOLEAN SHORT;                                  13043600
BOOLEAN STREAM PROCEDURE  COMPEQ(DEST,START,SZ1);  VALUE SZ1;           13043700
    BEGIN                                                               13043800
         SI ~ START;    DI ~ DEST;                                      13043900
         IF SZ1 SC=DC THEN TALLY ~ 1; COMPEQ ~ TALLY;                   13044000
    END;                                                                13044100
         I ~   RWSTACK[(K ~ XACUM[1]).SBLF MOD 125];                    13044200
         IF NOT (SHORT~ (J~K.SIZEF) { 6) THEN J ~ J - 6;                13044300
         DO                                                             13044400
         IF K =  RSWD[I.IR,(I+1).IC] THEN                               13044500
              IF SHORT THEN GO TO LP ELSE                               13044600
                   IF COMPEQ(XACUM[2],RSWD[I.IR,(I+2).IC],J) THEN GO LP 13044700
         UNTIL (I~RSWD[I.IR,I.IC].NXF) = 0;                             13044800
         GO TO XIT;                                                     13044900
LP:      % EUREKA                                                       13045000
         IF REAL (BOOLEAN((J~RSWD[I.IR,I.IC]).RSWDUSG) AND              13045100
                 BOOLEAN(CDMSK)) = 0 THEN GO TO XIT;                    13045200
         SVI ~ J.NXIF;                                                  13045300
         SVTOG ~ BOOLEAN(J.[02:1]);                                     13045400
         XACUM[0] ~ J&I NXFF & 0[2:47:1]&XACUM[0][1:1:1];               13045500
         RSWDSRCH ~ TRUE;                                               13045600
    XIT:                                                                13045700
    END RSWDSRCH;                                                       13045800
BOOLEAN PROCEDURE ATWDSRCH;  % SEARCHES RSWD FOR ATTRIBUTE NAME/VALUE   13045900
    BEGIN                                                               13046000
         LABEL LP,XIT,LQ;                                               13046100
         INTEGER I; REAL J,K;                                           13046200
BOOLEAN STREAM PROCEDURE COMPEQ (D,S,N);  VALUE N;                      13046300
    BEGIN                                                               13046400
         SI ~ S;        DI ~ D;                                         13046500
         IF N SC=DC THEN TALLY~1; COMPEQ~TALLY;                         13046600
    END COMPEQ;                                                         13046700
         I ~ ATSTACK[ACCUM[1].SBLF MOD 39];                             13046800
    LP:                                                                 13046900
         IF NOT IS(J~ACCUM[1],RSWD[K~I.IR,I.IC+1]) THEN GO TO LQ;       13047000
         IF (J~J.SIZEF - 6) > 0 THEN   % IF THERE IS MORE CHECK IT      13047100
         IF NOT COMPEQ( XACUM[2],RSWD[K,I.IC+2],J) THEN                 13047200
    LQ:                                                                 13047300
         IF I~RSWD[K,I.IC].NXF!0 THEN GO TO LP ELSE GO TO XIT;          13047400
         ACCUM[0] ~ RSWD[K,I.IC] & I NXFF;                              13047500
         ATWDSRCH ~ TRUE;                                               13047600
    XIT:                                                                13047700
    END ATWDSRCH;                                                       13047800
INTEGER PROCEDURE INFOENTER(I);   % DECLARES ENTRIES IN INFO            13047900
    VALUE I; INTEGER I; % I = DICT INDEX                                13048000
    BEGIN                                                               13048100
         LABEL XIT;     % TO FORCE SEGMENT                              13048200
         IF NXI > INFOMX THEN BEGIN NXI~0; ERR(279) END;                13048300
         IF2[NXI]~IF1[NXI]~IF3[NXI]~IF4[NXI]~0;                         13048400
         IF0[NXI] ~ DRCT[I].NXIF;                                       13048500
         DRCT[I].NXIF ~ INFOENTER ~ NXI;                                13048600
         IF5[NXI] ~ I;                                                  13048700
         NXI ~ NXI + IFSZ;                                              13048800
    END INFOENTER;                                                      13048900
BOOLEAN STREAM PROCEDURE SCANFID (ACCUM1, FIB20,FIB21,SZI);             13049000
         VALUE SZI;                                                     13049100
    BEGIN                                                               13049200
         LABEL L1,L2,L3,XIT;                                            13049300
         DI ~ ACCUM1; DI ~ DI+2; DI ~ DI+SZI; DS ~ LIT ".";             13049400
         SI ~ ACCUM1; SI ~ SI+2; DI ~ FIB20; DI ~ DI+1;                 13049500
         SZI(IF SC!" " THEN JUMP OUT 1 TO L1 ELSE SI ~ SI+1);           13049600
    L1:  7(IF SC="/" THEN DS ~ LIT " " ELSE IF SC="." THEN DS ~ LIT " " 13049700
           ELSE DS ~ 1 CHR);                                            13049800
        SZI(IF SC="/" THEN JUMP OUT 1 TO L2 ELSE IF SC="." THEN JUMP OUT13049900
            1 TO L3 ELSE BEGIN SI ~ SI+1;TALLY ~ 1;END);                13050000
         IF SC!"/" THEN                                                 13050100
    BEGIN                                                               13050200
    L3:  SI ~ FIB20; DI ~ FIB21; DS ~ 1 WDS; DI ~ FIB20; DS ~ 8 LIT "0";13050300
         GO TO XIT;                                                     13050400
    END;                                                                13050500
    L2:  SI ~ SI+1;                                                     13050600
         DI ~ FIB21;                                                    13050700
         DI ~ DI+1;                                                     13050800
         7(IF SC="." THEN DS ~ LIT " " ELSE DS ~ 1 CHR);                13050900
    XIT:                                                                13051000
         SCANFID ~ TALLY;                                               13051100
    END SCANFID;                                                        13051200
REAL PROCEDURE DNSCAN;  % SCANS NEXT ENTITY.  IF IDENTIFIER THEN        13051300
                        % RESOLVES QUALIFICATION                        13051400
    BEGIN                                                               13051500
         REAL S, CNT, I;                                                13051600
         LABEL LB, XIT, LPA, DONE;                                      13051700
              %***********                                              13051800
         IF (DNSCAN~SCTRL) ! IDV OR Q.SCF = IXN THEN GO TO DONE;        13051900
         IF SMONITR THEN IF Q.SCF=UNKID OR Q.SCF=PNV THEN GO TO DONE;   13052000
         S ~ -1;                                                        13052100
         WHILE KEY = IDV DO                                             13052200
    BEGIN                                                               13052300
         IF Q.SCF = UNKID THEN ERR(46) ELSE                             13052400
         STK[S~S+1] ~ Q.NXIF;                                           13052500
         IF NXKEY ! OFV AND NXKEY ! INV THEN GO TO LB;                  13052600
         STEPS;  % SKIP "OF" OR "IN"                                    13052700
         STEPS;  % NEXT QUALIFIER                                       13052800
    END;                                                                13052900
    LB:                                                                 13053000
         IF S < 0 THEN GO TO XIT;                                       13053100
         IF S = 0 THEN                                                  13053200
    BEGIN     % CHECK IF UNIQUE                                         13053300
         IF IF0[Q.NXIF].SNL ! 0                                         13053400
          THEN ERR(47);  % REQUIRES QUALIFICATION                       13053500
         GO TO XIT;                                                     13053600
    END;                                                                13053700
                   % CHECK QUALIFICATION                                13053800
         IF (CNT ~ QUALCHECK(0,0,S)) ! 1                                13053900
          THEN IF CNT > 1 THEN ERR(49) ELSE ERR(48);                    13054000
         ACCUM[0] ~ Q;             % Q HAS CORRECT INFO INDEX           13054100
    XIT:                                                                13054200
         Q.SCF ~ IF0[Q.NXIF].SCF;                                       13054300
    DONE:                                                               13054400
    END DNSCAN;                                                         13054500
BOOLEAN PROCEDURE SDNSCAN(SS,ES,BOO);                                   13054600
    VALUE SS,ES,BOO; REAL SS,ES; BOOLEAN BOO;                           13054700
    BEGIN     % * * * RESOLVES QUALIFICATION OF IDV                     13054800
                   % SS IS STARTING INFO (-1)                           13054900
                   % ES IS ENDING INFO                                  13055000
                   % BOO IS TRUE IF CALLED FROM RSE                     13055100
    REAL      CNT,S,SQ;                                                 13055200
    LABEL STRT,XIT;                                                     13055300
         SQ~Q;                                                          13055400
         S~-1;                                                          13055500
         WHILE KEY=IDV DO                                               13055600
    BEGIN                                                               13055700
         IF Q.SCF = UNKID THEN                                          13055800
              IF SDNSCAN~NOT BOO THEN BEGIN ERR(46);GO TO XIT END       13055900
              ELSE GO TO XIT                                            13056000
         ELSE STK[S~S+1]~Q.NXIF;                                        13056100
         IF NXKEY ! OFV AND NXKEY ! INV THEN GO TO STRT;                13056200
         STEPS;                                                         13056300
         STEPS                                                          13056400
    END;                                                                13056500
    STRT:                                                               13056600
         IF SDNSCAN~CNT~QUALCHECK(ES,SS,S)!1 THEN                       13056700
         IF SDNSCAN~CNT>1 THEN BEGIN ERR(49);SDNSCAN~BOOLEAN(2) END ELSE13056800
         IF NOT BOO THEN ERR(48);                                       13056900
    XIT:                                                                13057000
         Q~SQ;                                                          13057100
    END  SDNSCAN;                                                       13057200
REAL PROCEDURE INCONV(FLG,VLU2);   % CONVERTS INTEGERS TO OCTAL         13057300
         VALUE FLG; BOOLEAN FLG; INTEGER VLU2;                          13057400
    BEGIN                                                               13057500
         REAL SZ,VLU,VLU3,PWR1;                                         13057600
INTEGER STREAM PROCEDURE CONVERT(SZ,SOURC,N);                           13057700
         VALUE SZ,N;                                                    13057800
    BEGIN                                                               13057900
         SI ~ SOURC; SI ~ SI+N;                                         13058000
         DI ~ LOC CONVERT;                                              13058100
         DS ~ SZ OCT;                                                   13058200
    END CONVERT  ;                                                      13058300
         IF SZ ~ ACCUM[1].SIZEF>8 THEN                                  13058400
         IF SZ<11 THEN                                                  13058500
         VLU ~ CONVERT(8,ACCUM[1],2)|(JUNK~TEN[SZ~SZ-8])                13058600
              +CONVERT(SZ,ACCUM[2],2)                                   13058700
         ELSE                                                           13058800
    BEGIN                              % SZ>11                          13058900
         VLU ~ CONVERT(8,ACCUM[1],2)|1000 + CONVERT(3,ACCUM[2],2);      13059000
         SZ ~ SZ-11;                                                    13059100
         VLU2 ~ CONVERT(IF SZ>6 THEN 6 ELSE SZ,ACCUM[2],5);             13059200
         IF (PWR1~SZ-6)>0 THEN VLU3 ~ CONVERT(PWR1,ACCUM[3],3);         13059300
         IF PWR1>0 THEN                                                 13059400
         DOUBLE(VLU,0,TEN[SZ],0,|,VLU2,0,TEN[PWR1],0,|,+,VLU3,0,+,~,    13059500
                VLU,VLU2) ELSE                                          13059600
         DOUBLE(VLU,0,TEN[SZ],0,|,VLU2,0,+,~,VLU,VLU2);                 13059700
    END ELSE VLU ~ CONVERT(SZ,ACCUM[1],2);                              13059800
         SZ ~ IF FLG THEN VLU / TEN[Q.ITF] ELSE VLU ;                   13059900
         INCONV ~ SZ & ACCUM[0][1:47:1];  % IF ACCUM[0].LSGF=1          13060000
    END ICVI;                                                           13060100
% * * * * * * * * * MACRO EMISSION AND CONTROL * * * * * * * * * * * * *16000000
PROCEDURE DISKOUT(SOURCE,CNTL,SIZE,VARY,MACNB);                         16000100
         VALUE CNTL,SIZE,VARY,MACNB,SOURCE;                             16000200
         REAL  CNTL,SIZE,VARY,MACNB,SOURCE;                             16000300
     BEGIN    % ACCUMULATES PASS 1 CODE AND WRITES INPUT TO PASS 2      16000400
COMMENT                                                                 16000500
SOURCE TYPES                                                            16000600
0   =    LOOK IN ACCUM[1]                                               16000700
1   =    LOOK IN TMP[0]                                                 16000800
ELSE=    VALUE IF SIZE = -1                                             16000900
CNTL TYPES                             CNTL WORD FORMAT                 16001000
0   MACRO                              46:2    TYPE                     16001100
1   PRINT STUFF                        44:6    NB. WORDS                16001200
2   BLOCK STUFF                        38:7    MACRO NB.                16001300
                                       31:32   VARIABLE USE             16001400
;                                                                       16001500
         LABEL XIT;     % TO FORCE SEGMENT                              16001600
         IF CODEINDEX+ABS(SIZE)+2 > MAXDISKWDS THEN                     16001700
    BEGIN                                                               16001800
         DISKDEX ~ 1 & 2 [TOCNTLF];                                     16001900
         WRITE(PASS1,MAXDISKWDS,DISKRAY[*]);                            16002000
         CODEINDEX ~ 0;                                                 16002100
    END;                                                                16002200
         DISKDEX ~ VARY&CNTL[TOCNTLF]& SIZE[TOWDSZF]& MACNB[TOMACNF];   16002300
         CODEINDEX ~ CODEINDEX + 1;                                     16002400
         IF SIZE ! 0 THEN    % MORE TO PASS                             16002500
    BEGIN                                                               16002600
         IF SIZE < 0 THEN DISKDEX ~ SOURCE                              16002700
    ELSE                                                                16002800
         IF SOURCE = 1 THEN MOVE(DISKDEX,TMP,SIZE)                      16002900
    ELSE                                                                16003000
         MOVE(DISKDEX,ACCUM[1],SIZE);                                   16003100
         CODEINDEX ~ CODEINDEX + ABS(SIZE);                             16003200
    END ELSE                                                            16003300
         IF CNTL = 2 THEN WRITE(PASS1,MAXDISKWDS,DISKRAY[*]);           16003400
END DISKOUT;                                                            16003500
PROCEDURE EMITMACROPAIR(MACRO,I);  % EMITS PASS 2 MACRO  PAIRS          16003600
    VALUE MACRO,I; REAL MACRO,I;                                        16003700
    BEGIN                                                               16003800
         DISKOUT(0,0,0,I,MACRO);                                        16003900
         IF CODETOG AND LPAS1 THEN                                      16004000
    BEGIN                                                               16004100
         MACROFORMAT(IF MACRO=MATH AND I{27 THEN OPERATOR[I]            16004200
              &" "[18:42:6] ELSE MACROOPS[MACRO],0,I,0,1,0,TMP);        16004300
         WRITE(LINE,9,TMP[*]);                                          16004400
    END;                                                                16004500
    END EMITMACROPAIR;                                                  16004600
PROCEDURE EMITMACRO(MACRO);  % EMITS SINGLE PASS 2 MACRO                16004700
         VALUE MACRO; REAL MACRO;                                       16004800
    BEGIN                                                               16004900
         DISKOUT(0,0,0,0,MACRO);                                        16005000
         IF CODETOG AND LPAS1 THEN                                      16005100
    BEGIN                                                               16005200
         MACROFORMAT(MACROOPS[MACRO],0,0,0,0,0,TMP);                    16005300
         WRITE(LINE,8,TMP[*]);                                          16005400
    END;                                                                16005500
    END EMITMACRO;                                                      16005600
PROCEDURE MACROGEN(MACRO,LOC,FRST);  % MACRO REQUIRING QUAL CHECK       16005700
         VALUE MACRO,LOC,FRST; REAL MACRO,LOC,FRST;                     16005800
    BEGIN                                                               16005900
         LABEL XIT;                                                     16006000
         EMITMACROPAIR(MACRO,LOC);                                      16006100
         EMITMACROPAIR(QUAL,FRST);                                      16006200
         WHILE NXKEY = OFV OR NXKEY = INV DO                            16006300
    BEGIN                                                               16006400
         KEY ~ SCTRL;   % SKIP OF OR IN                                 16006500
         IF SCTRL ! IDV THEN BEGIN ERR(18);  GO TO XIT END;             16006600
         EMITMACROPAIR(QUAL,Q.NXF);                                     16006700
    END;                                                                16006800
    XIT:                                                                16006900
         MAC1(XXXXM);                                                   16007000
    END MACROGEN;                                                       16007100
PROCEDURE MACRO(M, P1, P2); VALUE M, P1, P2; REAL M, P1, P2;            16007200
BEGIN                                                                   16007300
         LABEL XIT;     % TO FORCE SEGMENT                              16007400
         DISKOUT(0,0,0,P1&P2[16:32:16],M);                              16007500
         IF LPAS1 THEN IF CODETOG THEN                                  16007600
    BEGIN                                                               16007700
         MACROFORMAT(IF M=MATH THEN OPERATOR[P1]&" "[18:42:6]           16007800
                        ELSE MOP[M],P1,P2,0,2,0,TMP);                   16007900
         WRITE(LINE,10,TMP[*]);                                         16008000
    END;                                                                16008100
END MACRO;                                                              16008200
PROCEDURE FCDEC(OPT,LOC,NUMUNITS,FILTYPE,NBUF,FLL,FLH,ACSMODE,AKEY);    16008300
    VALUE  OPT,LOC,NUMUNITS,FILTYPE,NBUF,FLL,FLH,ACSMODE,AKEY;          16008400
    REAL OPT,LOC,NUMUNITS,FILTYPE,NBUF,FLL,FLH,ACSMODE,AKEY;            16008500
    BEGIN                                                               16008600
         REAL WRD4;                                                     16008700
         DRCT[LOC].FIBF ~ NFIB ~ NFIB + 1;                              16008800
         IF NFIB GTR FIBMX THEN BEGIN NFIB ~ 0; ERR(225); END;          16008900
         IF FILTYPE}20 THEN                         % SORT OR MERGE     16009000
    BEGIN                                                               16009100
         DRCT[LOC].SCF ~ SDV;                                           16009200
         FIB[NFIB,5].NUNITSF ~ NUMUNITS;                                16009300
    END ELSE                                                            16009400
    BEGIN                                                               16009500
         DRCT[LOC].SCF ~ FDV;                                           16009600
         FIB[NFIB,6].TANKF ~ GETPRTLOC;     % TANK POINTER              16009700
    END;                                                                16009800
         IF FILTYPE=DK THEN                                             16009900
    BEGIN                                                               16010000
         IF NUMUNITS!0 THEN FIB[NFIB,8] ~ NUMUNITS; % SZ.ROWS,NO.OF ROWS16010100
         WRD4.AMF ~ ACSMODE;                                            16010200
         FIB[NFIB,1] ~ FLL;                                             16010300
         FIB[NFIB,3] ~ FLH;                                             16010400
         IF AKEY!0 THEN FIB[NFIB,19] ~ AKEY;                            16010500
    END;                                                                16010600
         FIB[NFIB,13].NBUFF ~ NBUF;                                     16010700
         FIB[NFIB,6].DLNKF ~ LOC;           % TEMP FOR DICT LINK        16010800
         WRD4.OTPF ~ OPT;                                               16010900
         WRD4.FILTYF ~ FILTYPE;                                         16011000
         FIB[NFIB,4] ~ WRD4;                                            16011100
    END FCDEC;                                                          16011200
INTEGER PROCEDURE GETPRTLOC;   % ASSIGNS PRT SPACE                      16011300
    BEGIN                                                               16011400
         IF PRTOG THEN                                                  16011500
    BEGIN                                                               16011600
         WRITE(TMP[*],GETDATAFMT,BTO(NXTPRTLOC));                       16011700
         DISKOUT(1,1,2,0,2);                                            16011800
         IF LPAS1 THEN WRITE(LINE,15,TMP[*]);                           16011900
    END;                                                                16012000
         IF(NXTPRTLOC~(GETPRTLOC~NXTPRTLOC)+1)>1023 THEN ERR(274);      16012100
    END GETPRTLOC;                                                      16012200
PROCEDURE COPYP;                                                        16012300
    BEGIN                                                               16012400
         REAL REPLOC,L;                                                 16012500
         LABEL RLP,RECOV,XIT;                                           16012600
PROCEDURE DOREP(REPLOC,L); REAL REPLOC,L;                               16012700
    BEGIN                                                               16012800
          IF KEY = LITV THEN                                            16012900
    BEGIN                                                               16013000
         IF Q.SCF = STRNGV THEN                                         16013100
    BEGIN                                                               16013200
         FILLWITHCHR(RPLCINGA[REPLOC.W1X],REPLOC.C1X,""",               16013300
                    (T~ACCUM[1].SIZEF)+2);                              16013400
         PUSHOVER(RPLCINGA[(REPLOC~REPLOC+1).W1X],REPLOC.CIX,           16013500
                  ACCUM[1],2,T);                                        16013600
         REPLOC ~ REPLOC +2;                                            16013700
    END  ELSE                                                           16013800
    BEGIN                                                               16013900
          IF Q.LSGF ! 0 THEN                                            16014000
    BEGIN                                                               16014100
         FILLWITHCHR(RPLCINGA[REPLOC.W1X],REPLOC.C1X,                   16014200
                    (T~IF BOOLEAN(Q.LSGF) THEN "-" ELSE "+"),1);        16014300
          REPLOC ~ REPLOC +1;                                           16014400
    END;                                                                16014500
          IF Q.SCF = ITGRV THEN                                         16014600
         PUSHOVER(RPLCINGA[REPLOC.W1X],REPLOC.C1X,ACCUM[1],2,           16014700
              ACCUM[1].SIZEF)                                           16014800
          ELSE                                                          16014900
    BEGIN                                                               16015000
         PUSHOVER(RPLCINGA[REPLOC.W1X],REPLOC.C1X,ACCUM[1],2,           16015100
               (T:=ACCUM[1].SIZEF-Q.ITF));                              16015200
         FILLWITHCHR(RPLCINGA[(L~REPLOC+T).W1X],L.C1X,".",1);           16015300
         PUSHOVER(RPLCINGA[(L~L+1).W1X],L.C1X,ACCUM[(T~T+10).W1X],T.C1X,16015400
                  Q.ITF );                                              16015500
         REPLOC ~ REPLOC +1;                                            16015600
    END;                                                                16015700
    END;                                                                16015800
    END  ELSE                                                           16015900
         PUSHOVER(RPLCINGA[REPLOC.W1X],REPLOC.C1X,ACCUM[1],2,           16016000
                 (T~ACCUM[1].SIZEF));                                   16016100
         FILLWITHCHR(RPLCINGA[(T~REPLOC+T).W1X],T.C1X," ",1);           16016200
         REPLOC ~ T + 1;                                                16016300
    END DOREP;                                                          16016400
         FILLWITHCHR(BSEQN,0," ",6);                                    16016500
         FILLWITHCHR(ESEQN,0,"9",6);                                    16016600
         STEPS;                                                         16016700
         IF SCANFID(ACCUM[1],T,T1,ACCUM[1].SIZEF) THEN ERR(-40);        16016800
         FILL LIBRARY WITH T,T1;                                        16016900
         NOREPS ~ -1;                                                   16017000
         IF NXKEY = FROM THEN                                           16017100
    BEGIN                                                               16017200
         STEPS;                                                         16017300
         STEPS;                                                         16017400
         IF ACCUM[1].SIZEF ! 6 THEN ERR(267) ELSE                       16017500
         IF ACCUM[0].SCF ! ITGRV THEN ERR(252) ELSE                     16017600
         PUSHOVER(BSEQN,0,ACCUM[1],2,6);                                16017700
    END;                                                                16017800
         IF NXKEY = THRUV  THEN                                         16017900
    BEGIN                                                               16018000
         STEPS;                                                         16018100
         STEPS;                                                         16018200
         IF ACCUM[1].SIZEF ! 6 THEN ERR(267) ELSE                       16018300
         IF ACCUM[0].SCF ! ITGRV THEN ERR(252) ELSE                     16018400
         PUSHOVER(ESEQN,0,ACCUM[1],2,6);                                16018500
    END;                                                                16018600
         IF NXKEY = REPLACING THEN                                      16018700
    BEGIN                                                               16018800
         STEPS;                                                         16018900
         REPLOC ~ 0;                                                    16019000
         STEPS;                                                         16019100
    RLP:                                                                16019200
         IF KEY } 10 THEN                                               16019300
    BEGIN                                                               16019400
         REPIFO[NOREPS:=NOREPS+1]:=0 & 1 CRWFF & Q.SCF CSCFF &          16019500
              (L:=Q.NXF) CLBFF& REPLOC CSLFF;                           16019600
         RSWD[L.IR,L.IC]:=RSWD[L.IR,L.IC]&LIBRTEXT SCFF&NOREPS REPSFF   16019700
    END  ELSE                                                           16019800
         ACCUM[0]:=0&(NOREPS:=NOREPS+1) REPSFF&LIBRTEXT SCFF;           16019900
    BEGIN                                                               16020000
         IF (L~SCRAMBLENM) < 0 THEN BEGIN ERR(264); GO TO RECOV END;    16020100
         REPIFO[NOREPS]:=0 & L CLBFF & REPLOC CSLFF;                    16020200
    END;                                                                16020300
         IF SCTRL ! BYV THEN BEGIN ERR(265); GO TO RECOV END;           16020400
         STEPS;                                                         16020500
         WHILE (NXKEY ! PERIOD AND NXKEY ! BYV) DO                      16020600
    BEGIN                                                               16020700
         IF KEY NEQ COMMA THEN DOREP(REPLOC,L);                         16020800
         STEPS;                                                         16020900
    END;                                                                16021000
         IF NXKEY = PERIOD THEN                                         16021100
         DOREP(REPLOC,L);                                               16021200
         REPIFO[NOREPS]:=(T:=REPIFO[NOREPS])&(REPLOC-T.CSLF) CTLFF;     16021300
         IF NXKEY ! PERIOD THEN GO TO RLP;                              16021400
    END;                                                                16021500
         IF NXKEY ! PERIOD THEN                                         16021600
    BEGIN                                                               16021700
         STEPS;                                                         16021800
         ERR(268);                                                      16021900
         GO TO RECOV;                                                   16022000
    END;                                                                16022100
         IF FRSTOG THEN PRINTCARD;                                      16022200
         LIBTOG ~ TRUE;                                                 16022300
         SVEOFTOG ~ EOFTOG;                                             16022400
         EOFTOG ~ FALSE;                                                16022500
         SVPTOBUFFER ~ PTOBUFFER;                                       16022600
         SVPBS ~ PBS;                                                   16022700
         SVCOUNT ~ COUNT;                                               16022800
         PBS ~ (PTOBUFFER~MKABS(LIBUF))&7[18:33:15];                    16022900
         ENDBUF ~ PTOBUFFER + 9;                                        16023000
         COUNT ~ 65;                                                    16023100
         READACARD;                                                     16023200
         STEPS;                                                         16023300
         GO TO XIT;                                                     16023400
    RECOV:                                                              16023500
         WHILE KEY ! PERIOD DO STEPS;                                   16023600
    XIT:  STEPS;                                                        16023700
    END COPYP;                                                          16023800
COMMENT  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *18000000
         *                                                             *18000100
         *            OPERAND STUFF   -  EXPRESSION                    *18000200
         *                                                             *18000300
         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * ;18000400
PROCEDURE SUBSCRIPTS (NMBR); VALUE NMBR; REAL NMBR;                     18000500
BEGIN    COMMENT                                                        18000600
    SUBSCRIPTS IS CALLED BY VARIABLE.                                   18000700
    IT IS ASSUMED THAT SCTRL WILL PRODUCE A "(";                        18000800
DEFINE                                                                  18000900
      IXF     = [18:15]#,                                               18001000
      ODF     = [33:15]#;                                               18001100
BOOLEAN ADDOFFSET,DNREQ,FAKETOG,INREQ;                                  18001200
REAL T,J;                                                               18001300
LABEL CMN,XIT;                                                          18001400
PROCEDURE SUBS(INDEX,NMBR,I,DNREQ,FAKETOG,INREQ);                       18001500
         VALUE INDEX,NMBR,I;                                            18001600
         REAL  INDEX,NMBR,I;                                            18001700
         BOOLEAN            DNREQ,FAKETOG,INREQ;                        18001800
    BEGIN                                                               18001900
    BOOLEAN   P;                                                        18002000
         REAL NIX;                                                      18002100
         LABEL OOT;                                                     18002200
         IF I>1 THEN SUBS(INDEX-IFSZ|IF4[INDEX].OCLF,NMBR,I-1,DNREQ,    18002300
                          FAKETOG,INREQ);                               18002400
         IF FAKETOG THEN MACRO(VALDM,0,4) ELSE                          18002500
         IF FAKETOG~(KEY=RIGHTPAREN AND I!NMBR) THEN                    18002600
    BEGIN                                                               18002700
         ERR(103);                                    % NOT ENOUGH SUBS 18002800
         MACRO(VALDM,0,4)                                               18002900
    END  ELSE                                                           18003000
         IF Q.SCF=IXN THEN                                              18003100
    BEGIN     % * * * INDEX-NAME * * *                                  18003200
         IF (T1~INXR[Q.NXIF].DNIX)!INDEX THEN                           18003300
    BEGIN                                                               18003400
         NIX ~ INDEX;                                                   18003500
         WHILE IF0[NIX].LVLF=88 DO                                      18003600
              IF NIX ~ NIX-IFSZ = T1 THEN GO TO OOT;                    18003700
         ERR(102);                                    % ILLEGAL SUBS    18003800
    END;                                                                18003900
    OOT:                                                                18004000
         IF INREQ~NOT DNREQ THEN ELSE ERR(104);       % IXN AND DN      18004100
         MACRO(XXXXM,Q.NXIF,REAL(MNTR));              % 0&1 ARE IXN     18004200
         IF (P ~ DNSCAN = PLUSCHR) OR KEY = MINUSCHR THEN               18004300
    BEGIN                                                               18004400
         MACRO(XXXXM,5,REAL(P));                                        18004500
         STEPP;                                                         18004600
         OPERAND(NUMLT,BVALUE);                                         18004700
         STEPP                                                          18004800
    END                                                                 18004900
    END  ELSE                                                           18005000
    BEGIN                                                               18005100
         MACRO(XXXXM,INDEX,REAL(MNTR)+2);             % 2&3 ARE D-N     18005200
         IF NOT(Q.SCF=ITGRV AND NOT(NXKEY}PLUSCHR AND NXKEY{EXPSTAR))   18005300
              THEN IF NOT(DNREQ~NOT INREQ) THEN ERR(104);               18005400
         P ~ SCALTOG;                                                   18005500
         SCALTOG ~ FALSE;                                               18005600
         ARITHEXP;                                                      18005700
         SCALTOG ~ P;                                                   18005800
    END;                                                                18005900
         IF I ! 1 THEN MACRO(XXXXM,0,5);                                18006000
         CMACHK                                                         18006100
    END SUBS;                                                           18006200
         IF NXKEY ! LEFTPAREN THEN                                      18006300
    BEGIN                                                               18006400
         ERR(101);                                    % SUBSCRIPTS REQD 18006500
         MAC2(STRTS,2);                               % V1=0 IS ERROR   18006600
         GO TO XIT                                                      18006700
    END;                                                                18006800
         MAC2(STRTS,1);                                                 18006900
         IF ADDOFFSET~IF1[(J~T~Q.NXIF)].OCCF=0THEN J~T-IFSZ|IF4[T].OCLF;18007000
              % ITEM WITHOUT OCCURS IS PART OF SUBSCRIPTED GROUP NAME   18007100
         STEPS;                                       % "("             18007200
         STEPP;                                                         18007300
         SUBS(J,NMBR,NMBR,DNREQ,FAKETOG,INREQ);                         18007400
         IF ADDOFFSET THEN MACRO(XXXXM,T,4);                            18007500
         DNREQ ~ INREQ ~ FAKETOG ~ FALSE;                               18007600
         IF KEY!RIGHTPAREN THEN ERR(68);                                18007700
    XIT:                                                                18007800
         MAC2(FINSM,0)                                % END SUBSCRIPTS  18007900
END SUBSCRIPTS;                                                         18008000
PROCEDURE VARIABLE (INDEX, TYPE); VALUE INDEX, TYPE; REAL INDEX, TYPE;  18008100
BEGIN    COMMENT                                                        18008200
    VARIABLE IS CALLED BY OPERAND.                                      18008300
    THE ARGUMENT INDEX SPECIFIES THE SOURCE OF INFORMATION.             18008400
    THE ARGUMENT TYPE SPECIFIES THE TYPE OF CALL:                       18008500
         0 = NAME                                                       18008600
         1 = (CHARACTER STRING)                                         18008700
         2 = VALUE (BINARY)                                             18008800
         3 = NAME AND (OPERAND) VALUE                                   18008900
         6 = NAME(STORED IN JUNK) AND (OPERAND) VALUE;                  18009000
         DEFINE SGW2 = UL[38]#;        % THIS IS SET IN MOVE            18009100
    REAL I,T;                                                           18009200
    IF INDEX > 0 THEN                                                   18009300
         BEGIN     COMMENT * * * DATA-NAME * * * ;                      18009400
         IF SGW2.SGTF!0 THEN IF IF2[INDEX].SGTF=0 THEN MAC1(MABSM);     18009500
         IF MNTR THEN MAC1(MNAMM);                                      18009600
              IF I ~ (T ~IF2[INDEX]).SUBF ! 0 THEN SUBSCRIPTS(I);       18009800
              IF MNTR THEN IF (I+1)>LSUB THEN LSUB ~ I+1;               18009900
              GTP ~ ITM;     GW2 ~ T;  ;    GIX ~ INDEX;                18010000
              IF TYPE = 0 THEN                                          18010100
                   BEGIN                                                18010200
                        IF NOMKS THEN ELSE MACRO(MKSMM,0,0);            18010300
                        MACRO(NAMDM,INDEX,0)                            18010400
                   END                                                  18010500
              ELSE IF TYPE = 100 THEN                                   18010600
              ELSE IF TYPE > 1 THEN                                     18010700
                   BEGIN                                                18010800
                        IF T.CLF ! NM THEN ERR(164);                    18010900
                                  IF MNTR AND (TYPE=3 OR TYPE=6) THEN   18011000
                                       MACRO(MNAMM,0,0);                18011100
                                  MACRO(VALDM,INDEX,TYPE)               18011200
                   END                                                  18011300
                   ELSE BEGIN                                           18011400
                        IF NOMKS THEN ELSE MACRO(MKSMM,0,0);            18011500
                        MAC2(NAMDM,INDEX);                              18011600
                        END                                             18011700
         END  ELSE                                                      18011800
         BEGIN     COMMENT * * * INDEX-NAME * * * ;                     18011900
              GTP~IXN;GW2~INXR[ABS(INDEX)];GIX~INDEX;                   18012000
              IF TYPE = 0 THEN MACRO(NAMDM,INDEX,1) ELSE                18012100
              IF TYPE=100 THEN ELSE IF TYPE=1 THEN MACRO(VALDM,INDEX,0) 18012200
                   ELSE MACRO(VALDM,INDEX,IF TYPE<5 THEN TYPE-2 ELSE 11)18012300
         END;                                                           18012400
         IF INDEX>0 THEN                                                18012500
         IF BOOLEAN(IF3[INDEX].LRF) THEN                                18012600
    BEGIN                                                               18012700
         IF NOT (BOOLEAN(IF2[I~IF4[INDEX].FLLNK].USPRF) AND DECLTOG)    18012800
              THEN ERR(282);                                            18012900
         IF2[I].LBLUSF ~ 1;                                             18013000
    END;                                                                18013100
         MNTR ~ FALSE;                                                  18013200
END VARIABLE;                                                           18013300
PROCEDURE NMLTRL  (TYP,WRD); VALUE TYP,WRD; BOOLEAN TYP; REAL WRD;      18013400
BEGIN    % * * * HANDLES NUMERIC LITERALS ONLY                          18013500
         %    TYP = TRUE : EMIT WORD AS IS                              18013600
         %    WRD = VALUE TO BE EMITED                                  18013700
    BOOLEAN   PRNT,PWRR,RL,SZR,ZR;                                      18013800
         LABEL CMN,DBL;                                                 18013900
INTEGER STREAM PROCEDURE DEZERO (S, C,N,DOWHAT);                        18014000
         VALUE  C,N,DOWHAT;                                             18014100
    BEGIN                                                               18014200
         SI ~ S;  SI ~ SI + C;                                          18014300
         N( IF SC="0" THEN TALLY~TALLY+1 ELSE JUMP OUT;                 18014400
            SI ~ SI+1;                                                  18014500
            DOWHAT (SI ~ SI-2));                                        18014600
         DEZERO ~ TALLY;                                                18014700
    END DEZERO;                                                         18014800
         REAL I,R,T,TI,P,LOW;                                           18014900
         PRNT~LPAS1 AND CODETOG;                                        18015000
         GTP~LITV;                                                      18015100
         IF TYP THEN                                                    18015200
    BEGIN     % C REL STUFF                                             18015300
         DISKOUT(WRD,0,-1,0,LITC);                                      18015400
         IF PRNT THEN                                                   18015500
    BEGIN                                                               18015600
         MACROFORMAT(MOP[LITC],0,0,0,3,0,TMP);                          18015700
         OCTWRD(TMP[8],WRD);                                            18015800
         WRITE(LINE,11,TMP[*]);                                         18015900
    END;                                                                18016000
    END  ELSE                                                           18016100
    BEGIN                                                               18016200
         IF GIX~WRD<0 THEN                                              18016300
    BEGIN     % ZERO,LITC,OR C REL                                      18016400
    CMN:                                                                18016500
         GW2~0;                                                         18016600
         DISKOUT(0,0,0,WRD,LITC);                                       18016700
         IF PRNT THEN                                                   18016800
    BEGIN                                                               18016900
         MACROFORMAT(MOP[LITC],WRD,0,0,2,1,TMP);                        18017000
         WRITE(RITE,9,TMP[*]);                                          18017100
    END;                                                                18017200
    END  ELSE                                                           18017300
    BEGIN     % IN ACCUM[1]                                             18017400
         P ~ DEZERO(ACCUM[1],2,T1~((T~ACCUM[1].SIZEF)-(IF RL~Q.SCF=NUMV 18017500
                    THEN R~Q.ITF ELSE 0)),0) + 10;                      18017600
         I ~ T1 - P + 10;                                               18017700
         IF ZR~(I=0 AND NOT RL) THEN ELSE                               18017800
         IF I=0 THEN IF T>11 THEN GO TO DBL ELSE                        18017900
    BEGIN     % NO INTEGRAL PART                                        18018000
         P ~ (I~DEZERO(ACCUM[P.WIX],P.CIX,T~R,0)) + P;                  18018100
         I ~  T - I;                                                    18018200
         IF ZR~I=0 THEN ELSE                                            18018300
    BEGIN     % REDUCE FRACTION SIZE                                    18018400
         PUSHOVER(ACCUM[1],2,ACCUM[P.WIX],P.CIX,T~I);                   18018500
         IF T>1 THEN                                                    18018600
    BEGIN                    % ELIMINATE TRAILING ZEROS                 18018700
         I ~ DEZERO(ACCUM[(P~9+T).WIX],P.CIX,T,1);                      18018800
         IF I!0 THEN                                                    18018900
    BEGIN                                                               18019000
         T ~ T - I;                                                     18019100
         Q.ITF ~ R ~ R-I;                                               18019200
    END;                                                                18019300
    END;                                                                18019400
    END                                                                 18019500
    END  ELSE                                                           18019600
    BEGIN     % INTEGER PART                                            18019700
         IF I!TI THEN PUSHOVER(ACCUM[1],2,ACCUM[P.WIX],P.CIX,T~I+R);    18019800
         IF T>11 THEN BEGIN I ~ 0; GO TO DBL; END;                      18019900
         T ~ T-(I ~ DEZERO(ACCUM[(P~T+ 9).WIX],P.CIX,T,1));             18020000
         IF PWRR ~ I>0 THEN IF RL THEN                                  18020100
              IF PWRR ~ I>R THEN BEGIN I ~ I-R; R ~ 0; END ELSE         18020200
                                 BEGIN R ~ R-I; I ~ 0; END;             18020300
    END;                                                                18020400
    DBL:                                                                18020500
         ACCUM[1].SIZEF~T;                                              18020600
         IF T > 11 THEN                                                 18020700
    BEGIN                                                               18020800
         IF T>23 THEN ERR(3);                                           18020900
         GIX ~ INCONV(FALSE,LOW);                                       18021000
    END ELSE GIX ~ ICVI(FALSE);                                         18021100
         IF SZR ~(ABS(GIX)>65535 OR T>11) THEN                          18021200
    BEGIN                                                               18021300
         RL ~ BOOLEAN(-1);                                              18021400
         P ~ GIX;                                                       18021500
         GIX ~ 0;                                                       18021600
    END ELSE RL ~ FALSE;                                                18021700
         GW2~GIX&Q[16:47:1]&T[17:43:5]&R[22:43:5]&(IF PWRR THEN I ELSE 018021800
              )[27:43:5];                                               18021900
         IF SZR THEN GIX ~ P;                                           18022000
         Q.ITF~IF ZR THEN 0 ELSE R;                                     18022100
         Q.LSZ~IF ZR THEN 0 ELSE T;                                     18022200
         Q.PWR~IF ZR THEN 0 ELSE I;                                     18022300
         IF ZR THEN BEGIN WRD~0;GO TO CMN END;                          18022400
         IF T>11 THEN DISKOUT(LOW,0,-1,0&31 [17:43:5],LITC);            18022500
         DISKOUT(GIX,0,REAL(RL),GW2,LITC);                              18022600
         IF PRNT THEN                                                   18022700
    BEGIN                                                               18022800
         BLAND(TMP[0],8);                                               18022900
         FILLWITHCHR(TMP[8],0," ",1);                                   18023000
         LITPTR(TMP[6],7,"LITCM ",6);                                   18023100
         BLAND(TMP[8],2);                                               18023200
         PUSHOVER(TMP[7],7,ACCUM[1],2,IF T>19 THEN 19 ELSE T);          18023300
         IF BOOLEAN(Q.LSGF) THEN FILLWITHCHR(TMP[7],6,"-",1);           18023400
         TMP[11]~BTO(R);                                                18023500
         FILLWITHCHR(TMP[10],0," ",1);                                  18023600
         LITPTR(TMP[10],1," SCALE",6);                                  18023700
         LITPTR(TMP[10],7," =  ",4);                                    18023800
         TMP[13]~BTO(I);                                                18023900
         FILLWITHCHR(TMP[12],0," ",1);                                  18024000
         LITPTR(TMP[12],1," POWER",6);                                  18024100
         LITPTR(TMP[12],7," =  ",4);                                    18024200
         WRITE(RITE,14,TMP[*])                                          18024300
    END;                                                                18024400
         IF (T~(IF PWRR THEN I ELSE 0)-R)>0 THEN GIX ~ GIX|TEN[T]       18024500
              ELSE IF T < 0 THEN GIX ~ GIX/TEN[ABS(T)];                 18024600
         IF BOOLEAN(Q) AND GIX>0 THEN GIX ~ -GIX;                       18024700
    END;                                                                18024800
    END;                                                                18024900
END NMLTRL;                                                             18025000
PROCEDURE VALUEOUT;                                                     18025100
BEGIN    % * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *18025200
         %    VALUEOUT PASSES A LITERAL TO PASS 2 VIA THE "CNAM" MACRO. 18025300
         %    THE CONSTRUCT "ALL LITERAL", WHERE LITERAL IS A NONNUMERIC18025400
         %    LITERAL, IS ALSO HANDLED.  A CHECK IS MADE FOR LEADING AND18025500
         %    TRAILING SPACES. IF A NONNUMERIC LITERAL IS COMPOSED      18025600
         %    ENTIRELY OF SPACES, THE FIGURATIVE CONSTANT MACRO FOR     18025700
         %    SPACES IS GENERATED.  AN ATTEMPT IS MADE TO KEEP LEADING  18025800
         %    AND TRAILING SPACES FROM GOING INTO THE CONSTANT POOL.    18025900
         % * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *18026000
    BOOLEAN   AHL,LDNG,SAHL,TRLNG;                                      18026100
    LABEL     CMN;                                                      18026200
INTEGER STREAM PROCEDURE ALLSAME (S,N,SZ);                              18026300
         VALUE N,SZ;                                                    18026400
    BEGIN                                                               18026500
         SI ~ S; SI ~ SI + N; N ~ SI ; SI ~ SI + 1;                     18026600
         DI ~ N;                                                        18026700
         SZ (IF SC=DC THEN TALLY ~ TALLY + 1 ELSE JUMP OUT );           18026800
         ALLSAME ~ TALLY;                                               18026900
    END  ALLSAME;                                                       18027000
INTEGER STREAM PROCEDURE CHECKCLASS(S,SINC,N64,N1);                     18027100
         VALUE SINC,N64,N1;                                             18027200
%%%%%    RETURNS 0 FOR NUMERIC,1 FOR ALPHA,2 FOR ALPHANUMERIC           18027300
    BEGIN                                                               18027400
         LABEL XIT,L1,L2;                                               18027500
         SI ~ S; SI ~ SI+SINC;                                          18027600
         S ~ SI;                                                        18027700
         N64(2(32(IF SC=ALPHA THEN                                      18027800
                        IF SC<"0" THEN SI ~ SI+1                        18027900
                                  ELSE JUMP OUT 3 TO L1                 18028000
                   ELSE IF SC=" " THEN SI ~ SI+1                        18028100
                                  ELSE JUMP OUT 3 TO L1)));             18028200
               N1(IF SC=ALPHA THEN                                      18028300
                        IF SC<"0" THEN SI ~ SI+1                        18028400
                                  ELSE JUMP OUT 1 TO L1                 18028500
                   ELSE IF SC=" " THEN SI ~ SI+1                        18028600
                                  ELSE JUMP OUT 1 TO L1);               18028700
         TALLY ~ 1;                                                     18028800
         GO TO XIT;                                                     18028900
    L1:  SI ~ S;                                                        18029000
         N64(2(32(IF SC}"0" THEN SI ~ SI+1 ELSE JUMP OUT 3 TO L2)));    18029100
         N1(IF SC}"0" THEN SI ~ SI+1 ELSE JUMP OUT 1 TO L2);            18029200
         GO TO XIT;                                                     18029300
    L2:  TALLY ~ 2;                                                     18029400
    XIT: CHECKCLASS ~ TALLY;                                            18029500
    END CHECKCLASS;                                                     18029600
INTEGER STREAM PROCEDURE  SCAN (STWD,STCHR,SZ,FWD);VALUE STCHR,SZ,FWD;  18029700
    BEGIN          LABEL BACK,EGRESS;                                   18029800
         SI ~ STWD; SI ~ SI + STCHR;                                    18029900
         SZ ( IF SC= " " THEN TALLY~TALLY+1 ELSE JUMP OUT TO EGRESS;    18030000
              SI ~ SI+1; FWD(SI~SI-2););                                18030100
         DI ~ LOC SCAN; DS ~ 8 LIT "+0000001";                          18030200
         GO TO BACK;                                                    18030300
EGRESS:                                                                 18030400
         SCAN ~ TALLY;                                                  18030500
    BACK:                                                               18030600
    END;                                                                18030700
STREAM PROCEDURE MOVEMASS(DEST,DINC,FROMME,FINC,MOST,REST);             18030800
         VALUE     FINC,DINC,MOST,REST;                                 18030900
    BEGIN                                                               18031000
         SI ~ FROMME;   SI ~ SI + FINC;                                 18031100
         DI ~ DEST;     DI ~ DI + DINC;                                 18031200
         MOST( DS ~ 32 CHR;  DS ~ 32 CHR; );                            18031300
         DS ~ REST CHR;                                                 18031400
    END MOVE MASSES;                                                    18031500
         REAL R,S,T,V;                                                  18031600
         INTEGER I;                                                     18031700
         REAL T1,P;                                                     18031800
         T~ACCUM[1].SIZEF;                                              18031900
         P ~ 10;                                                        18032000
         IF AHL~KEY=ALL THEN BEGIN STEPS; T~ACCUM[1].SIZEF;             18032100
              GO TO CMN END ELSE                                        18032200
         IF AHL~BOOLEAN(Q.LSGF) THEN GO TO CMN;                         18032300
         IF(LDNG:=GETCHARFRN(ACCUM[1],2,1)=" ") THEN                    18032400
    BEGIN                                                               18032500
         WHILE (V~SCAN(ACCUM[P.WIX],P.CIX,V~IF T>63 THEN 63 ELSE T,0))<018032600
              AND T>63                                                  18032700
    DO BEGIN                                                            18032800
         P ~ P + 63;                                                    18032900
         T ~ T - 63;                                                    18033000
    END;                                                                18033100
         IF SAHL ~ (V<0) THEN BEGIN T ~ ACCUM[1].SIZEF; GO TO CMN; END; 18033200
         MOVEMASS(ACCUM[1],2,ACCUM[(P~P+V).WIX],P.CIX,(T~T-V).[36:6],T);18033300
         V ~ P - 10;         % V = NUMBER OF LEADING SPACES             18033400
         P ~ 10;             % SET P TO BEGINNING OF FIELD              18033500
    END  ELSE                                                           18033600
         IF T!1 THEN                                                    18033700
    BEGIN                                                               18033800
         WHILE (V~ALLSAME(ACCUM[P.WIX],P.CIX,V~IF T>64 THEN 63 ELSE T-1)18033900
              )=63 AND T>64 DO                                          18034000
    BEGIN                                                               18034100
         P ~ P+63;                                                      18034200
         T ~ T-63;                                                      18034300
    END;                                                                18034400
         IF SAHL ~ (V ~ T-(V+1)) = 0 THEN GO TO CMN ELSE V ~ 0;         18034500
    END  ELSE BEGIN SAHL~TRUE;GO TO CMN END;                            18034600
         WHILE (R~SCAN(ACCUM[(P~P+T-1).WIX],P.CIX,R~IF T>63 THEN 63     18034700
              ELSE T,1))<0 AND T>63                                     18034800
    DO BEGIN                                                            18034900
         P ~ P - 63; S ~ S + 63;                                        18035000
         T ~ T - 63;                                                    18035100
    END;                                                                18035200
         T ~ T - R;                                                     18035300
         TRLNG ~ (R~S+R)!0;                                             18035400
         Q.LSZ~T;                                                       18035500
    CMN:                                                                18035600
         Q.LSGF~1;                                                      18035700
         I~-1;                                                          18035800
         Q.LSGF ~ CHECKCLASS(ACCUM[1],2,I~T.[36:6],T);                  18035900
         WREAD[4]~ IF AHL THEN "*ALL*" ELSE IF SAHL THEN "*ALLL"        18036000
                          ELSE "*NNL*";                                 18036100
         IF CODETOG THEN                                                18036200
    BEGIN                                                               18036300
         FILLWITHCHR(TMP,0," ",55);                                     18036400
         PUSHOVER(TMP[6],7,WREAD[4],3,5);                               18036500
         FILLWITHCHR(TMP[7],4," ",4);                                   18036600
         PUSHOVER(TMP[8],0,ACCUM[1],2,T1~IF T>40 THEN 40 ELSE T);       18036700
         IF T1<40 THEN                                                  18036800
         FILLWITHCHR(TMP[(P~T1+64).W1X],P.C1X," ",P~40-T1);             18036900
         TMP[13] ~ BTO(V);                                              18037000
         LITRL(TMP[13]," L =",4);                                       18037100
         TMP[14] ~ BTO(R);                                              18037200
         LITRL(TMP[14]," T =",4);                                       18037300
         IF LPAS1 THEN                                                  18037400
         WRITE(RITE,15,TMP[*]);                                         18037500
         IF LISTOG THEN                                                 18037600
         DISKOUT(1,1,13,0,2);                                           18037700
    END;                                                                18037800
         DISKOUT(0)"SOURCE IS ACCUM[1]"(0)"CONTROL CODE"(               18037900
              IF AHL AND T=1 THEN 0 ELSE                                18038000
                   IF SAHL THEN 0 ELSE                                  18038100
                   (9+T) DIV 8                        )"SIZE"(          18038200
                   IF AHL AND T=1 THEN GETCHARFRN(ACCUM[1],2,1)&        18038300
                              1[16:47:1] ELSE                           18038400
                   IF SAHL THEN GETCHARFRN(ACCUM[1],2,1)&1[17:47:1]&    18038500
                              T[18:28:20] ELSE                          18038600
                   T&V[27:38:10]&R[18:39:9]&REAL(AHL)[16:47:1])"V USE"( 18038700
                   CNAM);                                               18038800
END VALUEOUT;                                                           18038900
PROCEDURE FGRTV;      % HANDLES [ALL] FIGURATIVES                       18039000
         IF KEY = ALL THEN                                              18039100
         IF NXKEY=LITV THEN VALUEOUT ELSE MAC2(FGCNM,STEPS)             18039200
         ELSE MAC2(FGCNM,Q.ITF);                                        18039300
PROCEDURE INTRNSC;                                                      18039400
BEGIN    COMMENT                                                        18039500
    INTRNSC IS HANDLED BY OPERAND AND HANDLES SPECIAL-REGS & INTRINSICS.18039600
    THE PROCEDURE GENERATES ONE MACRO FOR INTRINSICS OTHER THAN "SIGN"  18039700
    AND "ABS" WHICH HAVE THEIR OWN MACROS BECAUSE THEY ARE GENERATED    18039800
    IN LINE;                                                            18039900
REAL I,T;                                                               18040000
BOOLEAN B;                                                              18040100
         IF KEY=DATA OR KEY=TIMEV THEN                                  18040200
    BEGIN   % TIME INTRINSIC                                            18040300
         IF SCTRL ! LEFTPAREN THEN ERR(140);                            18040400
         IF MOVETOG THEN MAC1(MKSMM);                                   18040500
         STEPP;                                                         18040600
         B ~ KEY=LITV AND Q.SCF=ITGRV AND NXKEY=RIGHTPAREN;             18040700
         ARITHEXP;                                                      18040800
         IF KEY!RIGHTPAREN THEN ERR(68);                                18040900
         MACRO(VALDM,I~REAL(B AND (GIX}1 AND GIX{4)),10);               18041000
                             % V1=1 IF NUMERIC (ELSE ALPHA)             18041100
         GW2 ~ 0 & (IF BOOLEAN(I) THEN CMP ELSE BCL ) USFF              18041200
                 & (IF BOOLEAN(I) THEN NM ELSE AN) CLFF;                18041300
         GTP ~ TIMEV;                                                   18041400
    END  ELSE                                                           18041500
         IF KEY=TODAYSDATE THEN                                         18041600
    BEGIN                                                               18041700
         MAC1(MKSMM);                                                   18041800
         MACRO(VALDM,5,10);                                             18041900
         GW2 ~ 0 & BCL USFF & AN CLFF;                                  18042000
         GTP ~ TIMEV;                                                   18042100
    END ELSE                                                            18042200
         IF Q.SCF = FDV OR KEY = FILEV THEN                             18042300
    BEGIN                                                               18042400
         MACRO(VALDM,IF KEY = FILEV THEN 0 ELSE Q.NXIF,9);              18042500
         IF SCTRL ! LEFTPAREN THEN ERR(140);                            18042600
         STEPS;                                                         18042700
         IF NOT (ATWDSRCH AND (Q~ACCUM[0]).SCF = ATNAME) THEN ERR(270); 18042800
         MACRO(XXXXM,Q.ITF,Q.ATYPF);                                    18042900
         IF SCTRL ! RIGHTPAREN THEN ERR(68);                            18043000
    END  ELSE                                                           18043100
    BEGIN                                                               18043200
         IF I~KEY!ABSV AND I!SIGNV AND I!EXPSTAR THEN MACRO(MKSMM,0,1); 18043300
              IF NXKEY = LEFTPAREN THEN                                 18043400
                   BEGIN                                                18043500
                        STEPS;                                          18043600
                        STEPS;                                          18043700
                        ARITHEXP;                                       18043800
                        IF KEY ! RIGHTPAREN THEN ERR(68);               18043900
                   END                                                  18044000
              ELSE BEGIN                                                18044100
                        ERR(140);                                       18044200
                        MACRO(VALDM,0,4)                                18044300
                   END;                                                 18044400
              IF I=ABSV THEN MACRO(MABSM,0,0) ELSE                      18044500
         IF I=SIGNV THEN MAC1(MSGNM) ELSE MACRO(MINTM,I,0);             18044600
    END;                                                                18044700
END INTRNSC;                                                            18044800
PROCEDURE OPERAND(OPTYPE,TYPE);                                         18044900
    VALUE OPTYPE,TYPE; BOOLEAN OPTYPE; REAL TYPE;                       18045000
BEGIN                                                                   18045100
    DEFINE    VRBL = BEGIN IF T<0THEN ERR(61);VARIABLE(Q.NXIF,TYPE)END#;18045200
    LABEL     ERL;                                                      18045300
    REAL     T;                                                         18045400
PROCEDURE OPERANDERR(OPTYPE);   VALUE OPTYPE; BOOLEAN OPTYPE;           18045500
    BEGIN                                                               18045600
         REAL T;                                                        18045700
         ERR(IF(T~REAL(OPTYPE)) = REAL(ANYTYP) THEN 69 ELSE             18045800
             IF T = REAL(ANYDN) THEN 245 ELSE                           18045900
             IF T = REAL(NUMDN) THEN 251 ELSE                           18046000
             IF T = REAL(ARTHTYP) THEN 247 ELSE                         18046100
             IF T = REAL(MOVESF) THEN 248 ELSE                          18046200
             IF T = REAL(NUMSF) THEN 253 ELSE                           18046300
             IF T = REAL(NUMRF) THEN 254 ELSE                           18046400
             IF T = REAL(SETRF) THEN 249 ELSE                           18046500
             IF T = REAL(SETSF) THEN 250 ELSE                           18046600
             IF T = REAL(NUMLT) THEN 252 ELSE                           18046700
             IF T = REAL(ANYLIT) THEN 246 ELSE 255);                    18046800
    END OPERANDERR;                                                     18046900
         IF Q.SCF=ITM THEN                            % DATA-NAME       18047000
    BEGIN                                                               18047100
              IF IF3[Q.NXIF].DDSC=CSECT THEN IF TYPE!BVALUE AND         18047200
                   REAL(OPTYPE)!REAL(MOVESF) AND                        18047300
                   REAL(OPTYPE)!REAL(EXAMDM) THEN ERR(228);             18047400
         IF MONITORS THEN MNTR ~ BOOLEAN(IF0[Q.NXIF].MONI)              18047450
              AND TYPE!BVALUE AND REAL(OPTYPE)!REAL(MOVESF);            18047460
              IF OPTYPE THEN VARIABLE(Q.NXIF,TYPE) ELSE                 18047500
              IF (T~IF2[Q.NXIF]).CLF=NM AND T.USF!IXDN AND NMDN         18047600
                   THEN                                                 18047700
              BEGIN                                                     18047800
                   VRBL;                                                18047900
                   IF (IF BOOLEAN(T.DPLF)THEN T.SZF+T.FSZF ELSE         18048000
                   MAX(T.FSZF,T.SZF))>23 THEN ERR(241);                 18048100
              END  ELSE                                                 18048200
              IF T.USF=IXDN AND INDN THEN VRBL ELSE                     18048300
              IF T.CLF=EN AND NEDN THEN VARIABLE(Q.NXIF,TYPE) ELSE      18048400
              BEGIN                                                     18048500
                   IF Q.NXIF=0 THEN GO TO ERL;                          18048600
         OPERANDERR(OPTYPE);                                            18048700
                   VARIABLE(Q.NXIF,TYPE)                                18048800
              END                                                       18048900
    END                                                                 18049000
         ELSE                                                           18049100
         IF Q.SCF=IXN THEN                            % INDEX-NAME      18049200
              IF INXN THEN VARIABLE(-Q.NXIF,TYPE) ELSE                  18049300
              GO TO ERL                                                 18049400
         ELSE                                                           18049500
         IF KEY=LITV THEN                             % LITERAL         18049600
              IF Q.SCF=STRNGV AND XLIT THEN VALUEOUT ELSE               18049700
              IF NLIT THEN NMLTRL(FALSE,0) ELSE                         18049800
              GO TO ERL                                                 18049900
         ELSE                                                           18050000
         IF Q.SCF=FIGURATIVE OR KEY=ALL THEN          % FIGURATIVE CNST 18050100
              IF FIGN OR (((T~REAL(OPTYPE))=REAL(NUMSF)                 18050200
                      OR T=REAL(NUMDN)) AND KEY=ZEROV)                  18050300
              THEN FGRTV ELSE                                           18050400
              GO TO ERL                                                 18050500
         ELSE                                                           18050600
         IF Q.SCF=INTRINSIC THEN                      % INTRINSIC FUNCTN18050700
              IF INTN THEN INTRNSC ELSE                                 18050800
              GO TO ERL                                                 18050900
         ELSE                                                           18051000
         IF Q.SCF = SPECIALREG OR Q.SCF = FDV THEN                      18051100
               IF SPRG THEN INTRNSC ELSE                                18051200
              GO TO ERL                                                 18051300
         ELSE                                                           18051400
    BEGIN                                                               18051500
    ERL:                                                                18051600
         OPERANDERR(OPTYPE);                                            18051700
         IF TYPE=0 THEN MACRO(NAMDM,0,3) ELSE                           18051800
         IF TYPE=100 THEN ELSE                                          18051900
         MACRO(VALDM,0,IF TYPE=3 THEN 5 ELSE 4);                        18052000
         GIX~0;                                                         18052100
         GTP~ITM;                                                       18052200
         GW2:=6&BCL CLFF&NM USFF;                                       18052300
    END;                                                                18052400
END OPERAND;                                                            18052500
PROCEDURE ARITHEXP;     % COMPILES ARITHMETIC EXPRESSIONS               19000000
    BEGIN                                                               19000100
         LABEL GETOPERAND,FOUNDOPERAND,LOOPED,NOTLOOPED;                19000200
LABEL L0,L1,L2,L3,L4,L5,L6;                                             19000300
LABEL XIT;                                                              19000400
SWITCH      SWLST := L0,L1,L2,L3,L4,L5,L6;                              19000500
         BOOLEAN UNMINUS;                                               19000600
         REAL SRDX,OPR,T;                                               19000700
         DEFINE OPCODEF=[37:8]#,PREC=[45:3]#,OPCODE=[37:40:8]#;         19000800
         SRDX ~ RDX;                                                    19000900
         OP[RDX~RDX+1] ~ 0;                                             19001000
         MACRO(EXPRM,0,0);                                              19001100
         ARITHSIGN ~ TRUE;                                              19001200
         IF CDNTOG THEN BEGIN CDNTOG~FALSE; GO FOUNDOPERAND END;        19001300
    GETOPERAND:                                                         19001400
         IF KEY = LEFTPAREN THEN                                        19001500
    BEGIN                                                               19001600
         STEPP;                                                         19001700
         ARITHEXP;                                                      19001800
         IF KEY ! RIGHTPAREN THEN ERR(129);                             19001900
         STEPP;                                                         19002000
         GO TO FOUNDOPERAND;                                            19002100
    END;                                                                19002200
         IF KEY = PLUSCHR OR KEY = MINUSCHR THEN                        19002300
    BEGIN                                                               19002400
         IF UNMINUS.[46:1] THEN ERR(69);                                19002500
         UNMINUS ~ KEY = MINUSCHR;                                      19002600
         UNMINUS.[46:1] ~ TRUE;        % THIS IS FOR THE +++-+ CASE     19002700
         STEPP;                                                         19002800
         GO TO GETOPERAND;                                              19002900
    END;                                                                19003000
         PUTAZERO;                                                      19003050
         OPERAND(ARTHTYP,2);                                            19003100
         IF SCALTOG THEN                                                19003200
    BEGIN                                                               19003300
         SCALTOG ~ FALSE;                                               19003400
         MAC2(OPSZM,OPRNDSZ&OPRNDSCL[17:33:15]&REAL(FUNNYDP)[16:47:1]); 19003500
    END;                                                                19003600
         STEPP;                                                         19003700
    FOUNDOPERAND:                                                       19003800
         IF UNMINUS THEN MAC2(MATH,CHSN);                               19003900
         UNMINUS ~ FALSE;                                               19004000
         IF KEY } PLUSCHR AND KEY { EXPSTAR THEN                        19004100
    BEGIN     % ARITMETIC OP                                            19004200
     GO TO SWLST [KEY-ORV];                                             19004300
L0:                                                                     19004400
         OPR~ 1 & ADD OPCODE;  % +                                      19004500
         GO TO XIT;                                                     19004600
L1:                                                                     19004700
         OPR~ 1 &SUBT OPCODE;  % -                                      19004800
         GO TO XIT;                                                     19004900
L2:                                                                     19005000
         OPR~ 2 &MULT OPCODE;  % *                                      19005100
         GO TO XIT;                                                     19005200
L3:                                                                     19005300
         OPR~ 2 &RDIV OPCODE;  % MOD                                    19005400
         GO TO XIT;                                                     19005500
L4:                                                                     19005600
         OPR~ 2 &DIVD OPCODE;  % /                                      19005700
         GO TO XIT;                                                     19005800
L5:                                                                     19005900
         OPR~ 2 &IDIV OPCODE;  % DIV                                    19006000
         GO TO XIT;                                                     19006100
L6:                                                                     19006200
         OPR~ 3 &VARI OPCODE;  % **                                     19006300
XIT:;                                                                   19006400
    LOOPED:                                                             19006500
         IF OPR.PREC > OP[RDX].PREC THEN                                19006600
    BEGIN                                                               19006700
         OP[RDX~RDX+1] ~ OPR;                                           19006800
         GO TO NOTLOOPED;                                               19006900
    END;                                                                19007000
         MACRO(MATH,OP[RDX].OPCODEF,0);                                 19007100
         RDX ~ RDX-1;                                                   19007200
         GO TO LOOPED;                                                  19007300
    NOTLOOPED:                                                          19007400
         STEPP;                                                         19007500
         GO GETOPERAND;                                                 19007600
    END;                                                                19007700
         WHILE (T ~OP[RDX]) ! 0 DO                                      19007800
    BEGIN                                                               19007900
         MACRO(MATH,T.OPCODEF,0);                                       19008000
         RDX~RDX-1;                                                     19008100
    END;                                                                19008200
         RDX~SRDX;                                                      19008300
         MACRO(ENDXM,0,0);                                              19008400
         ARITHSIGN ~ FALSE;                                             19008500
    END ARITHEXP;                                                       19008600
REAL PROCEDURE EXPRESSION(BEXP);   VALUE BEXP;   BOOLEAN BEXP;          19008700
% * * * * * * * * * * TELLS IT LIKE IT IS * * * * * * * * * * * * * * * 19008800
    BEGIN     % COMPILES CONDITIONS                                     19008900
LABEL M0,M1,M2,    M4,M5,M6,M7;                                         19009000
LABEL XIT1;                                                             19009100
         DEFINE                                                         19009200
         ARITHCK = NXKEY } PLUSCHR AND NXKEY { EXPSTAR #,               19009300
         RELOPCK = KEY } GREATER AND KEY { EXCEEDS #;                   19009400
DEFINE                                                                  19009500
      ABB3    = BUL[4]#,                                                19009600
      AB3CT   = UL[10]#,                                                19009700
      CNTWRD  = UL[11]#,                                                19009800
      EMITTED = UL[12]#,                                                19009900
      IFX     = UL[13]#,                                                19010000
      IRLO    = UL[14]#,                                                19010100
      LAST    = UL[15]#,                                                19010200
      M       = UL[16]#,                                                19010300
      NOTRO   = BUL[5]#,                                                19010400
      OPRTR   = UL[18]#,                                                19010500
      PARENCT = UL[19]#,                                                19010600
      PREC    = UL[20]#,                                                19010700
      R       = UL[21]#,                                                19010800
      RELATION= UL[22]#,                                                19010900
      RLOP    = UL[23]#,                                                19011000
      T       = UL[24]#,                                                19011100
      TYPE    = UL[25]#,                                                19011200
                        % DEFINES FOR TYPES                             19011300
         EXPT = 1#,     % ARITHMETIC EXPRESSION                         19011400
         ANLIT= 2#,     % AN LITERAL                                    19011500
         NMLIT= 3#,     % NUMERIC LITERAL                               19011600
         IXT  = 4#,     % INDEX                                         19011700
         ABOP = 5#,     % AB OPERAND                                    19011800
         ANOP = 6#,     % AN OPERAND                                    19011900
         NMOP = 7#,     % NUMERIC OPERAND                               19012000
         IXNT = 8#,     % ITEM USAGE INDEX                              19012100
         BOOL = 9#,     % BOOLEAN OR CONDITION                          19012200
         FIGT =10#,     % FIGURATIVE                                    19012300
         TYPEF= [42:6]#, % (AS ABOVE)                                   19012400
         TYPEFF = [42:42:6]#,     % FOR CONCATENATES                    19012500
         IFXF = [26:16]#, % INFO INDEX                                  19012600
         IFXFF  = [26:32:16]#,    % FOR CONCATENATES                    19012700
         EMTDF= [25:1]#,  % 1 IF MACRO EMITTED                          19012800
         EMTDFF = [25:47:1]#,     % FOR CONCATENATES                    19012900
         MACF = [12:12]#, % OPERATOR BETWEEN OPERANDS                   19013000
         MACFF = [12:36:12]#,                                           19013100
         PRESF= [09:3]#,  % OPERATOR PRESCEDENCE                        19013200
         PRESFF = [9:45:3]#,                                            19013300
         GTYPE= [03:6]#,  % GENERAL TYPE                                19013400
         GTYPEF = [3:42:6]#,                                            19013500
                % DEFINES FOR GTYPE                                     19013600
         AE   =  1#,    % ARITHMETIC EXPRESSION                         19013700
         DN   =  2#,    % DATA NAME                                     19013800
         LT   = 3#,     % LITERALS                                      19013900
         RLO  = 4#,     % RELATION OPERATOR                             19014000
         LC   = 5#,     % LOGICAL-CONECTORS                             19014100
         BINRY= 6#,     % CONDITION NAMES                               19014200
         FGC  = 7#,     % FIGURATIVE                                    19014300
         LPAR = 8#;     % LEFTPAREN                                     19014400
         LABEL A,B,C,D,FINI,OPL;                                        19014500
PROCEDURE CMPIT; FORWARD;                                               19014600
SWITCH      SWLZT :=M0,M1,M2,OPL,   M4,M5,M6,M7;                        19014700
REAL PROCEDURE REVRLO(A); VALUE A; REAL A; FORWARD;                     19014800
PROCEDURE MACOUT(R,M);    VALUE R,M;   REAL R,M;                        19014900
COMMENT STACKS OR EMITS OPERATORS BY THEIR PRESCEDENCE;                 19015000
BEGIN LABEL XIT,LOOP,JUMP;                                              19015100
      REAL V,T;                                                         19015200
LOOP: IF R { (V~(T~OP[RDX-1]).PRESF) THEN    % OPERATE                  19015300
BEGIN IF R = V THEN IF R=0 THEN GO TO XIT ELSE IF R=3 THEN GO TO JUMP;  19015400
      IF RDX { 1 THEN BEGIN ERR(73);  GO TO XIT END;                    19015500
         IF OP[RDX].TYPEF ! BOOL OR T.TYPEF ! BOOL THEN ERR(138);       19015600
      MACRO(MATH,T.MACF,0);                                             19015700
            OP[RDX:=RDX-1]:=0 & BOOL TYPEFF& BINRY GTYPEF;              19015800
      GO TO LOOP                                                        19015900
END;                                                                    19016000
    JUMP:                                                               19016100
         OP[RDX]:=OP[RDX]&R PRESFF&M MACFF;                             19016200
XIT:                                                                    19016300
END MACOUT;                                                             19016400
REAL PROCEDURE GETROP(NOTRY);  BOOLEAN NOTRY;                           19016500
BEGIN COMMENT  FETCHES MNEMONIC OF RELATIONAL OPERATOR;                 19016600
      REAL T;                                                           19016700
      LABEL D,E;                                                        19016800
LABEL L0,L1,L2,L3,L4,L5,L6,L7,L8;                                       19016900
LABEL XIT;                                                              19017000
SWITCH      SWLST := L0,L1,L2,L3,L4,L5,L6,L7,L8;                        19017100
         DEFINE THANCK = IF NXKEY = THAN THEN STEPS #,                  19017200
              TOCK =  IF NXKEY = TOV THEN STEPS #;                      19017300
         GO TO SWLST[KEY-EXPSTAR];                                      19017400
L0:                                                   % GREATER         19017500
         T ~ GRTR;                                                      19017600
D:       THANCK;                                                        19017700
         GO TO XIT;                                                     19017800
L2:                                                   % LESSV           19017900
         T ~ LESS;                                                      19018000
         GO TO D;                                                       19018100
L3:                                                   % LSCHAR          19018200
         T ~ LESS;                                                      19018300
         GO TO XIT;                                                     19018400
L4:                                                   % EQUAL           19018500
         T ~ EQUL;                                                      19018600
E:       TOCK;                                                          19018700
         GO TO XIT;                                                     19018800
L5:                                                   % EQCHAR          19018900
L6:                                                   % EQUALS          19019000
         T ~ EQUL;                                                      19019100
         GO TO XIT;                                                     19019200
L7:                                                   % UNEQUAL         19019300
         T ~ NEQL;                                                      19019400
         GO TO E;                                                       19019500
L8:                                                   % EXCEEDS         19019600
L1:                                                   % GRCHAR          19019700
         T ~ GRTR;                                                      19019800
XIT:                                                                    19019900
            IF NOTRY THEN                                               19020000
            BEGIN T ~ (IF BOOLEAN(LESS + T) THEN -1 ELSE 1) + T;        19020100
                  NOTRY ~ FALSE                                         19020200
            END;                                                        19020300
      GETROP ~ T                                                        19020400
END GETROP;                                                             19020500
PROCEDURE SAVESUBJ;                                                     19020600
    BEGIN                                                               19020700
         RELATION ~ CNTWRD;                                             19020800
         IF T ! FGC THEN                                                19020900
         IF T ! DN OR IF2[IFX].SUBF ! 0 THEN                            19021000
    BEGIN                                                               19021100
         MACRO(ISUBJ,0,IF T=DN THEN 2 ELSE IF CNTWRD.TYPEF=ANLIT THEN 4 19021200
               ELSE 3);                                                 19021300
         RELATION ~ - RELATION;                                         19021400
    END;                                                                19021500
    END SAVESUBJ;                                                       19021600
PROCEDURE CMPIT;                                                        19021700
    BEGIN                                                               19021800
         IF TYPE!IXT THEN                                               19021900
         IF T = DN THEN                                                 19022000
    BEGIN                                                               19022100
         IF (T1~IF2[IFX].SUBF)! 0 THEN                                  19022200
    BEGIN                                                               19022300
         SUBSCRIPTS(T1);                                                19022400
         IF ARITHCK THEN                                                19022500
    BEGIN                                                               19022600
         MACRO(VALDM,IFX,2);      % WANT NUMERIC VALUE                  19022700
         STEPP;    % STEP OFF SUBSCRIPT LEFT PAREN                      19022800
         CDNTOG ~ TRUE;           % SPECIAL WAY TO ENTER ARITHEXP;      19022900
         ARITHEXP;                                                      19023000
         CNTWRD:=0&(T:=EXPT) TYPEFF& AE GTYPEF;                         19023100
    END;                                                                19023200
         CNTWRD.EMTDF ~ 1;                                              19023300
    END;                                                                19023400
    END  ELSE                                                           19023500
         IF T = LT AND CNTWRD.TYPEF ! FIGT THEN                         19023600
    BEGIN                                                               19023700
         IF TYPE = ANLIT THEN VALUEOUT ELSE NMLTRL(FALSE,0);            19023800
         CNTWRD.EMTDF ~ 1;                                              19023900
    END;                                                                19024000
END CMPIT;                                                              19024100
PROCEDURE EMITSUBJ(OPS); VALUE OPS; REAL OPS;                           19024200
         % MACRO FOR IMPLIED SUBJECT                                    19024300
         MACRO(ISUBJ,1,IF OPS.GTYPE=DN THEN 2 ELSE IF OPS.TYPEF=ANLIT   19024400
               THEN 4 ELSE 3);                                          19024500
PROCEDURE INSERTSUBJ;                                                   19024600
    BEGIN                                                               19024700
         IF RELATION = -1 THEN ERR(139) ELSE                            19024800
         OP[RDX~RDX+1] ~ RELATION;                                      19024900
    END INSERTSUBJ;                                                     19025000
PROCEDURE INSERTRLO(RLO,DELT);                                          19025100
    VALUE RLO,DELT;  REAL RLO; BOOLEAN DELT;                            19025200
    BEGIN                                                               19025300
         IF RLO = -1 THEN BEGIN ERR(73); RLO ~ EQUL END;                19025400
         IF DELT THEN   % "NOT" RELATION                                19025500
         RLO ~ RLO + (IF BOOLEAN(LESS+RLO) THEN -1 ELSE 1);             19025600
         OP[RDX].MACF ~ RLO;                                            19025700
    END INSERTRLO;                                                      19025800
INTEGER PROCEDURE GETINT;                                               19025900
    BEGIN                                                               19026000
         LABEL ANL,NML,ARL,ARLA,S,XIT,FGCL;                             19026100
         LABEL INTL;                                                    19026200
         TYPE ~ EMITTED ~ R ~ 0;                                        19026300
    S:   IF KEY = IDV THEN                                              19026400
    BEGIN                                                               19026500
         GETINT ~ DN;   % ID                                            19026600
         IFX ~ Q.NXIF;                                                  19026700
         IF T!IXN AND IFX}6 THEN                                        19026800
         IF BOOLEAN(IF3[IFX].LRF) THEN                                  19026900
    BEGIN                                                               19027000
         IF NOT (BOOLEAN(IF2[I~IF4[IFX].FLLNK].USPRF) AND DECLTOG)      19027100
              THEN ERR(282);                                            19027200
         IF2[I].LBLUSF ~ 1;                                             19027300
    END;                                                                19027400
         IF (T~Q.SCF) = CDN THEN                                        19027500
    BEGIN                                                               19027600
         MACRO(NAMDM,IFX,4);                                            19027700
         NOMKS ~ TRUE;                                                  19027800
         VARIABLE(IFX,IF IF2[IFX].CLF=NM THEN 2 ELSE 1);                19027900
         NOMKS ~ FALSE;                                                 19028000
         GETINT ~ BINRY;                                                19028100
         TYPE ~ BOOL;                                                   19028200
    END ELSE                                                            19028300
         IF T=IXN THEN TYPE ~ IXT ELSE                                  19028400
         IF Q.SCF=FDV OR KEY =FILEV THEN GO TO INTL ELSE                19028500
         IF T ! ITM THEN ERR(69) ELSE                                   19028600
         IF IF2[IFX] <0 THEN                                            19028700
    BEGIN     % GROUP ITEM                                              19028800
    ANL:                                                                19028900
         TYPE ~ ANOP;                                                   19029000
    END  ELSE                                                           19029100
              % ELEMENTARY                                              19029200
          IF IF2[IFX].USF = BCL THEN                                    19029300
    BEGIN                                                               19029400
         IF (T1~IF2[IFX].CLF) = AB THEN                                 19029500
           BEGIN TYPE ~ ABOP; GO TO XIT END;                            19029600
         IF T1 ! NM THEN GO TO ANL;                                     19029700
    NML:                                                                19029800
         IF ARITHCK THEN                                                19029900
    BEGIN                                                               19030000
    ARLA:                                                               19030100
         ARITHEXP;                                                      19030200
         IF KEY = RIGHTPAREN AND ARITHCK THEN                           19030300
    BEGIN                                                               19030400
         STEPP;                                                         19030500
         NOTRO ~ BOOLEAN( OP[RDX].MACF);                                19030600
         LAST~ OP[RDX].IFXF;                                            19030700
         RDX ~ RDX -1;                                                  19030800
         PARENCT ~ PARENCT -1;                                          19030900
         CDNTOG ~ TRUE;                                                 19031000
         GO TO ARLA;                                                    19031100
    END;                                                                19031200
    ARL: GETINT ~ AE;   % ARITHMETIC EXPRESSION                         19031300
         IFX ~ 0;                                                       19031400
         TYPE ~ EXPT;                                                   19031500
         EMITTED ~ 1;                                                   19031600
         GO TO XIT;                                                     19031700
    END  ELSE BEGIN TYPE ~ NMOP; GO TO XIT END;                         19031800
    END  ELSE                                                           19031900
              % NOT DISPLAY                                             19032000
         IF IF2[IFX].USF ! IXDN THEN GO TO NML ELSE                     19032100
         TYPE ~ IXNT;   % USAGE INDEX                                   19032200
    END  ELSE      % NOT ID                                             19032300
         IF KEY = LITV THEN                                             19032400
    BEGIN                                                               19032500
         GETINT~LT;     % LITERAL                                       19032600
         IF Q.SCF = STRNGV THEN                                         19032700
         TYPE ~ ANLIT ELSE                                              19032800
    BEGIN                                                               19032900
         TYPE ~ NMLIT;                                                  19033000
         IF ARITHCK THEN GO ARLA;                                       19033100
    END                                                                 19033200
    END  ELSE                                                           19033300
         IF KEY}10 THEN                                                 19033400
    BEGIN                                                               19033500
         IF KEY = ALL THEN                                              19033600
    BEGIN     % DN RLO ALL "X"                                          19033700
         IF NXKEY!LITV THEN                                             19033800
    BEGIN                                                               19033900
         STEPS;                                                         19034000
         IF Q.SCF=FIGURATIVE THEN BEGIN IFX ~ KEY; GO TO FGCL; END ELSE 19034100
    BEGIN                                                               19034200
         ERR(73);                                                       19034300
         GO TO S;                                                       19034400
    END;                                                                19034500
    END;                                                                19034600
         IF XACUM[0].SCF = STRNGV THEN                                  19034700
          IF XACUM[1].SIZEF ! 1 THEN                                    19034800
    BEGIN     % ALL "X---X"                                             19034900
         GETINT ~ LT;                                                   19035000
         TYPE ~ ANLIT;                                                  19035100
         GO TO XIT;                                                     19035200
    END;                                                                19035300
         STEPS;                                                         19035400
         IF Q.SCF ! STRNGV THEN ERR(137);                               19035500
         IFX:=GETCHARFRN(ACCUM[1],2,1)&1[32:47:1];                      19035600
    FGCL:                                                               19035700
         TYPE ~ FIGT;                                                   19035800
         GETINT ~ IF KEY = ZEROV AND LAST = DN THEN FGC ELSE LT;        19035900
         GO TO XIT;                                                     19036000
    END ELSE                                                            19036100
         IF KEY=SPACEV OR KEY=ZEROV OR KEY=QUOTE OR KEY=HIGHV OR        19036200
              KEY=LOWV OR KEY=UPPERB THEN                               19036300
          BEGIN IFX ~ KEY; GO TO FGCL END ELSE                          19036400
         IF Q.SCF = INTRINSIC OR Q.SCF = SPECIALREG THEN                19036500
    BEGIN                                                               19036600
    INTL:                                                               19036700
         OPERAND(FUNVLU,BVALUE);                                        19036800
         IF ARITHCK THEN BEGIN CDNTOG:=TRUE; STEPP; GO TO ARLA END;     19036900
         STEPP;                                                         19037000
         GO TO ARL;                                                     19037100
    END  ELSE                                                           19037200
         IF KEY   = POSITIVE OR KEY = NEGATIVE OR                       19037300
          KEY = NUMERIC OR KEY = ALPHABETIC THEN                        19037400
    BEGIN                                                               19037500
         GETINT ~ FGC;                                                  19037600
         IFX ~ KEY;                                                     19037700
    END  ELSE                                                           19037800
         IF KEY = MINUSCHR OR KEY = PLUSCHR THEN GO TO ARLA ELSE        19037900
         IF KEY = NOTV THEN                                             19038000
    BEGIN                                                               19038100
         NOTRO ~ TRUE;                                                  19038200
         STEPP;                                                         19038300
         GO TO S;                                                       19038400
    END  ELSE                                                           19038500
         IF RELOPCK THEN                                                19038600
    BEGIN                                                               19038700
         GETINT ~ RLO;                                                  19038800
    END  ELSE                                                           19038900
         IF KEY = ORV OR KEY = ANDV THEN                                19039000
    BEGIN                                                               19039100
         IFX ~ KEY;                                                     19039200
         GETINT ~ LC;                                                   19039300
    END  ELSE                                                           19039400
         IF KEY=ISV OR KEY=COMMA THEN BEGIN STEPP; GO TO S END;         19039500
    END;                                                                19039600
    XIT:                                                                19039700
    END GETINT;                                                         19039800
PROCEDURE NMCOMPARE;                                                    19039900
    BEGIN                                                               19040000
         REAL OPS;                                                      19040100
         IF(OPS~OP[RDX]) < 0 THEN EMITSUBJ(OPS)ELSE                     19040200
         IF OPS.GTYPE = DN AND CNTWRD.GTYPE = AE THEN                   19040300
    BEGIN                                                               19040400
         IF CNTWRD > 0 THEN                                             19040500
         IF IF2[OPS.IFXF].SUBF!0 THEN MACRO(XCHMM,1,0); % SUBSCRIPT     19040600
         OPS.MACF ~ REVRLO(OPS.MACF);                                   19040700
    END;                                                                19040800
         IF OPS.GTYPE = DN THEN MACRO(VALDM,OPS.IFXF,2);                19040900
         IF CNTWRD < 0 THEN EMITSUBJ(CNTWRD) ELSE CMPIT;                19041000
         IF CNTWRD.GTYPE = DN THEN MACRO(VALDM,CNTWRD.IFXF,2);          19041100
         MACRO(MATH,OPS.MACF,1);   % WORD COMPARE                       19041200
         IF IFTOG THEN MACRO(MATH,SFS,0);%CAUSES INSERTION OF BOOL LINKS19041300
    END NMCOMPARE;                                                      19041400
PROCEDURE CVCOMPARE;                                                    19041500
    BEGIN                                                               19041600
         REAL OPS;                                                      19041700
                   % SUBJECT                                            19041800
         IF (OPS ~ OP[RDX]).TYPEF = IXT THEN                            19041900
    BEGIN                                                               19042000
         VARIABLE(-OPS.IFXF,11-9|REAL(CNTWRD.TYPEF=IXNT));              19042100
    END  ELSE                                                           19042200
    BEGIN                                                               19042300
         IF OPS < 0 THEN EMITSUBJ(OPS);                                 19042400
         IF OPS.GTYPE = DN THEN MACRO(VALDM,OPS.IFXF,2);                19042500
    END;                                                                19042600
                   % OBJECT                                             19042700
         IF CNTWRD < 0 THEN EMITSUBJ(CNTWRD) ELSE CMPIT;                19042800
         IF CNTWRD.TYPEF=IXT THEN VARIABLE(-CNTWRD.IFXF,11-9|           19042900
              REAL(OPS.TYPEF=IXNT)) ELSE                                19042950
         IF CNTWRD.GTYPE = DN THEN MACRO(VALDM,CNTWRD.IFXF,2);          19043000
         MACRO(MATH,OPS.MACF,1);  % WORD COMPARE                        19043100
         IF IFTOG THEN MACRO(MATH,SFS,0);%CAUSES INSERTION OF BOOL LINKS19043200
    END  CVCOMPARE;                                                     19043300
PROCEDURE CMCOMPARE;                                                    19043400
    BEGIN                                                               19043500
         REAL OPS;                                                      19043600
                   % SUBJECT                                            19043700
         IF NOT((OPS~OP[RDX]).TYPEF = ANLIT                             19043800
                OR CNTWRD.TYPEF = ANLIT) THEN                           19043900
    BEGIN     % COMPARING TWO NON-LITERALS                              19044000
         IF IF2[OPS.IFXF].USF ! IF2[CNTWRD.IFXF].USF                    19044100
          THEN ERR(137)                                                 19044200
    END;                                                                19044300
         MACRO(MKSMM,0,0);                                              19044400
         IF OPS < 0 THEN EMITSUBJ(OPS);                                 19044500
         IF OPS.GTYPE = DN THEN MACRO(NAMDM,OPS.IFXF,0);                19044600
                   % OBJECT                                             19044700
         IF CNTWRD < 0 THEN EMITSUBJ(CNTWRD) ELSE CMPIT;                19044800
         IF CNTWRD.GTYPE = DN THEN MACRO(NAMDM,CNTWRD.IFXF,0);          19044900
         MACRO(MATH,OPS.MACF,2);  % CHARACTER COMPARE                   19045000
         IF IFTOG THEN MACRO(MATH,SFS,0);%CAUSES INSERTION OF BOOL LINKS19045100
    END CMCOMPARE;                                                      19045200
REAL PROCEDURE REVRLO(RLO);  VALUE RLO; REAL RLO;                       19045300
         IF (REVRLO~RLO) ! EQUL AND RLO ! NEQL THEN                     19045400
         REVRLO ~                                                       19045500
               IF RLO=LESS THEN GRTR ELSE IF RLO=GREQ THEN LSEQ ELSE    19045600
         IF RLO=GRTR THEN LESS ELSE GREQ;                               19045700
PROCEDURE EVAL;                                                         19045800
    BEGIN                                                               19045900
         REAL SUBT,OBJT,T;                                              19046000
         LABEL ERP;                                                     19046100
LABEL L0,L1,L2,L3,L4,L5,L6,L7,L8,L9,L10,     L11,L12,L13,L14,L15,L16,   19046200
      L17,L18,L19,L20,     L21,L22,L23,L24,L25,L26,L27,L28,L29,L30,     19046300
      L31,L32,L33,L34,L35,L36,L37,L38,L39,L40,     L41,L42,L43,L44,     19046400
       L45,L46,L47,L48;                                                 19046500
LABEL XIT;                                                              19046600
SWITCH      SWLST := L0,L1,L2,L3,L4,L5,L6,L7,L8,L9,L10,  L11,L12,L13,   19046700
         L14,L15,L16,L17,L18,L19,L20,     L21,L22,L23,L24,L25,L26,L27,  19046800
         L28,L29,L30,     L31,L32,L33,L34,L35,L36,L37,L38,L39,L40,      19046900
         L41,L42,L43,L44,L45,L46,L47,L48;                               19047000
         IF (SUBT ~ OP[RDX].TYPEF) = IXNT THEN                          19047100
    BEGIN                                                               19047200
         IF (OBJT ~ CNTWRD.TYPEF) !  IXNT AND OBJT ! IXT THEN GO ERP;   19047300
         CVCOMPARE;                                                     19047400
    END  ELSE                                                           19048000
         IF (OBJT ~ CNTWRD.TYPEF) = IXNT THEN                           19048100
    BEGIN                                                               19048200
         IF SUBT!IXNT AND SUBT!IXT THEN GO TO ERP;                      19048300
         CVCOMPARE;                                                     19048400
    END  ELSE                                                           19049000
         IF SUBT = FIGT THEN                                            19049100
    BEGIN                                                               19049200
         MACRO(CLASM,CNTWRD.IFXF,OP[RDX].IFXF);                         19049300
         MACRO(XXXXM,REAL(NOTRO),REVRLO(OP[RDX].MACF));                 19049400
         IF IFTOG THEN MACRO(MATH,SFS,0);%CAUSES INSERTION OF BOOL LINKS19049500
         NOTRO ~ FALSE;                                                 19049600
    END  ELSE                                                           19049700
         IF OBJT = FIGT THEN                                            19049800
    BEGIN                                                               19049900
         MACRO(CLASM,OP[RDX].IFXF,CNTWRD.IFXF);                         19050000
         MACRO(XXXXM,REAL(NOTRO),OP[RDX].MACF);                         19050100
         IF IFTOG THEN MACRO(MATH,SFS,0);%CAUSES INSERTION OF BOOL LINKS19050200
         NOTRO ~ FALSE;                                                 19050300
    END  ELSE                                                           19050400
         IF (T~(SUBT|7)+OBJT-8) < 0 OR T >48 THEN GO ERP ELSE           19050500
     GO TO SWLST[T+1];                                                  19050600
     GO TO XIT;                                                         19050700
                   % EXPRESSION V.S.                                    19050800
%L0:     %EXP                                                           19050900
%L1:    %ANLIT                                                          19051000
%L2:     %NMLIT                                                         19051100
%L3:     %INDEX                                                         19051200
%L4:     %ABOP                                                          19051300
%L5:     %ANOP                                                          19051400
%L6:     %NMOP                                                          19051500
                   % AN LIT V.S.                                        19051600
%L7:     %EXP                                                           19051700
%L8:     %ANLIT                                                         19051800
%L9:     %NMLIT                                                         19051900
%L10:    %INDEX                                                         19052000
%L11:    %ABOP                                                          19052100
%L12:    %ANOP                                                          19052200
%L13:    %NMOP                                                          19052300
                   % NMLIT V.S.                                         19052400
%L14:    %EXP                                                           19052500
%L15:    %ANLIT                                                         19052600
%L16:    %NMLIT                                                         19052700
%L17:    %INDEX                                                         19052800
%L18:    %ABOP                                                          19052900
%L19:    %ANOP                                                          19053000
%L20:    %NMOP                                                          19053100
                   % INDEX V.S.                                         19053200
%L21:    %EXP                                                           19053300
%L22:    %ANLIT                                                         19053400
%L23:    %NMLIT                                                         19053500
%L24:    %INDEX                                                         19053600
%L25:    %BOP                                                           19053700
%L26:    %ANOP                                                          19053800
%L27:    %NMOP                                                          19053900
                   % ABOP V.S.                                          19054000
%L28:    %EXP                                                           19054100
%L29:    %ANLIT                                                         19054200
%L30:    %NMLIT                                                         19054300
%L31:    %INDEX                                                         19054400
%L32:    %ABOP                                                          19054500
%L33:    %ANOP                                                          19054600
%L34:    %NMOP                                                          19054700
                   % ANOP V.S.                                          19054800
%L35:    %EXP                                                           19054900
%L36:    %ANLIT                                                         19055000
%L37:    %NMLIT                                                         19055100
%L38:    %INDEX                                                         19055200
%L39:    %ABOP                                                          19055300
%L40:    %ANOP                                                          19055400
%L41:    %NMOP                                                          19055500
                   % NMOP V.S.                                          19055600
%L42:    %EXP                                                           19055700
%L43:    %ANLIT                                                         19055800
%L44:    %NMLIT                                                         19055900
%L45:    %INDEX                                                         19056000
%L46:    %ABOP                                                          19056100
%L47:    %ANOP                                                          19056200
%L48:    %NMOP                                                          19056300
L0:L2:L6:L14:L20:L42:L44:L48:                                           19056400
         NMCOMPARE;                                                     19056500
         GO TO XIT;                                                     19056600
L3: L17:L21:L23:L24:L27:L45:                                            19056700
         CVCOMPARE;                                                     19056800
         GO TO XIT;                                                     19056900
L11:L12:L13:L29:L32:L33:L36:L39:L40:L41:L47:                            19057000
         CMCOMPARE;                                                     19057100
XIT: ;                                                                  19057200
         IF FALSE THEN                                                  19057300
L1:L4:L5:L7:L8:L9:L10:L15:L16:L18:L19:L22:L25:L26:L28:L30:L31:L34:L35:  19057400
L37:L38:L43:L46:ERP:                                                    19057500
    BEGIN     %                                                         19057600
         ERR(137);                                                      19057700
         IF IFTOG THEN MACRO(MATH,SFS,0);                               19057800
         IF OP[RDX].EMTDF =1   % FIX PASS 2 PSUEDO STACK                19057900
          THEN MACRO(DELMM,0,0);                                        19058000
         IF CNTWRD.EMTDF = 1 THEN MACRO(DELMM,0,0);                     19058100
    END;                                                                19058200
         OP[RDX]:=0 & BOOL TYPEFF & BINRY GTYPEF;                       19058300
    END EVAL;                                                           19058400
COMMENT * * * * * * *  START OF EXPRESSION EXECUTABLES * * * * * * * * ;19058500
         R~T~AB3CT~PARENCT~TYPE~EMITTED~IFX~OPRTR~PREC~RLOP~LAST        19058600
         ~CNTWRD~IRLO~M~RELATION~0;                                     19058700
         NOTRO ~ ABB3 ~ FALSE;                                          19058800
MACRO(EXPRM,REAL(BEXP),0);                                              19058900
         OP[RDX~1] ~ 0;                                                 19059000
GO TO B;                                                                19059100
    A:   IF T NEQ AE THEN STEPP;                                        19059200
    B:   T ~ GETINT;                                                    19059300
         CNTWRD ~ 0&TYPE TYPEFF&IFX IFXFF&EMITTED EMTDFF&T GTYPEF;      19059400
C:   GO TO SWLZT[T+1];                                                  19059500
M0:                                                                     19059600
         IF KEY = LEFTPAREN THEN                           % 0          19059700
    BEGIN                                                               19059800
         PARENCT ~ PARENCT +1;                                          19059900
        OP[RDX~RDX+1] ~ 0&REAL(NOTRO) MACFF&LAST IFXFF&LPAR GTYPEF;     19060000
         LAST ~ LPAR;                                                   19060100
         NOTRO ~ FALSE;                                                 19060200
         GO TO A;                                                       19060300
    END  ELSE                                                           19060400
         IF KEY = RIGHTPAREN THEN                                       19060500
    BEGIN                                                               19060600
         T1 ~ OP[RDX-1].IFXF;                                           19060700
         PARENCT ~ PARENCT - 1;                                         19060800
         IF (CNTWRD ~ OP[RDX]).GTYPE { LT AND OP[RDX-1].GTYPE =LPAR     19060900
         AND (T1 = LPAR OR T1 = 0) THEN                                 19061000
    BEGIN                                                               19061100
         OP[RDX~RDX-1] ~ CNTWRD;                                        19061200
         GO TO A;                                                       19061300
    END  ELSE                                                           19061400
         IF LAST { LT AND OP[RDX-1].GTYPE = LPAR THEN                   19061500
    BEGIN                                                               19061600
         LAST ~ T1;                                                     19061700
         RDX ~ RDX -2;                                                  19061800
         GO TO OPL;                                                     19061900
    END  ELSE                                                           19062000
         IF CNTWRD.GTYPE = BINRY THEN                                   19062100
    BEGIN                                                               19062200
         MACOUT(0,0);                                                   19062300
         IF BOOLEAN(OP[RDX-1]).MACF THEN MAC2(MATH,LNOT);               19062400
         OP[RDX~RDX-1] ~ CNTWRD;                                        19062500
         LAST ~ BINRY;                                                  19062600
         GO TO A;                                                       19062700
    END  ELSE                                                           19062800
         IF (T1~OP[RDX-1].MACF) = LAND OR T1 = LOR THEN                 19062900
    BEGIN                                                               19063000
         T ~ LC;                                                        19063100
         PARENCT ~ PARENCT +1;                                          19063200
         GO TO FINI;                                                    19063300
    END                                                                 19063400
         ELSE ERR(73);                                                  19063500
    END  ELSE                                                           19063600
         GO TO FINI;                                                    19063700
%M1:     GO TO OPL;                                         % 1 EXP     19063800
%M2:     GO TO OPL;                                         % 2 DN      19063900
                                                            % 3 LITERAL 19064000
M1:M2:OPL:         % OPERAND                                            19064100
         IF LAST = BINRY THEN                                           19064200
    BEGIN               % MUST BE ABR-3                                 19064300
         ABB3 ~ TRUE;                                                   19064400
         AB3CT ~ AB3CT +1; % COUNT MISSING LOGICAL-CONNECTORS           19064500
         INSERTSUBJ;    % SUPPLY SUBJECT                                19064600
         INSERTRLO(IRLO,NOTRO); % SUPPLY INPLIED RELATIONAL             19064700
         NOTRO ~ FALSE;                                                 19064800
         EVAL;          % SYNTAX CHECK-EMIT CODE FOR RELATIONAL CHECK   19064900
         OP[RDX].PRESF ~ 3; % INSERT IMPLIED LOGICAL-CONNECTOR          19065000
         LAST ~ BINRY;                                                  19065100
         GO TO A;                                                       19065200
    END  ELSE                                                           19065300
         IF LAST = RLO THEN % LAST WAS RELATIONAL-OPERATOR              19065400
    BEGIN                                                               19065500
         EVAL;                                                          19065600
         LAST ~ BINRY;                                                  19065700
         GO TO A;                                                       19065800
    END  ELSE                                                           19065900
         IF LAST = LC OR LAST = LPAR OR LAST = 0 THEN                   19066000
    BEGIN                                                               19066100
         CMPIT;         % COMPILE SUBJECT SUBSCRIPTS OR LITERALS        19066200
         OP[RDX~RDX+1] ~ CNTWRD; % STACK OPERAND                        19066300
         LAST ~ DN;                                                     19066400
         GO TO A;                                                       19066500
    END  ELSE                                                           19066600
    BEGIN IF IFTOG THEN MACRO(MATH,SFS,0); ERR(73); END;                19066700
         GO TO XIT1;                                                    19066800
              % *** RELATIONAL OPERATOR                    % 4          19066900
M4:                                                                     19067000
         IF LAST = DN THEN   % OPERAND                                  19067100
    BEGIN                                                               19067200
         T ~ (CNTWRD~OP[RDX]).GTYPE; SAVESUBJ;                          19067300
    D:   IRLO ~ GETROP(FALSE);                                          19067400
         INSERTRLO(IRLO,NOTRO);                                         19067500
         NOTRO ~ FALSE;                                                 19067600
         T ~ LAST ~ RLO;                                                19067700
         GO TO A;                                                       19067800
    END  ELSE                                                           19067900
         IF LAST = LC OR LAST = LPAR THEN                               19068000
    BEGIN                                                               19068100
         INSERTSUBJ;    % ABR-1                                         19068200
         GO TO D;                                                       19068300
    END  ELSE                                                           19068400
         ERR(73);                                                       19068500
         GO TO XIT1;                                                    19068600
              % *** LOGICAL CONNECTOR                      % 5          19068700
M5:                                                                     19068800
    BEGIN                                                               19068900
         IF IFX = ORV                                                   19069000
          THEN BEGIN M ~ LOR; R ~ 1 END                                 19069100
          ELSE BEGIN M ~ LAND;R ~ 2 END;                                19069200
         IF ABB3 THEN                                                   19069300
    BEGIN                                                               19069400
         RDX ~ RDX - AB3CT;   % NUMBER OF IMPLIED RELATIONALS           19069500
         DO MACRO(MATH,M,0) UNTIL AB3CT~AB3CT-1 = 0;                    19069600
         OP[RDX]:=OP[RDX]& R PRESFF&M MACFF;  % STACK LOGICAL           19069700
         INSERTSUBJ;         % IMPLIED SUBJECT                          19069800
         INSERTRLO(IRLO,NOTRO); % IMPLIED RELATIONAL                    19069900
         NOTRO ~ FALSE;         % RESET NOT                             19070000
         IRLO ~ RELATION ~ -1;                                          19070100
         ABB3 ~ FALSE;          % END OF ABR-3                          19070200
         LAST ~ RLO;                                                    19070300
         GO TO A;                                                       19070400
    END  ELSE                                                           19070500
         IF LAST = BINRY THEN                                           19070600
    BEGIN                                                               19070700
         MACOUT(R,M);                                                   19070800
         LAST ~ LC;                                                     19070900
         GO TO A;                                                       19071000
    END  ELSE                                                           19071100
         IF LAST = DN THEN                                              19071200
    BEGIN               % MUST BE ABR-2 ,SUBJ & OBJECT REVERSED         19071300
         INSERTSUBJ;    % IMPLIED SUBJECT                               19071400
         CNTWRD ~ RELATION; RDX ~ RDX - 1;                              19071500
         T1 ~ REVRLO(IRLO); % SUBT-OBJT REVERSED, REVERSE RELATIONAL    19071600
         INSERTRLO(T1,NOTRO);   % IMPLIED RELATIONAL                    19071700
         NOTRO ~ FALSE;                                                 19071800
         T ~ CNTWRD.GTYPE; IFX ~ CNTWRD.IFXF; TYPE ~ CNTWRD.TYPEF;      19071900
         EVAL;                                                          19072000
         MACOUT(R,M);                                                   19072100
         T ~ LAST ~ LC;                                                 19072200
         GO TO A;                                                       19072300
    END  ELSE ERR(73);                                                  19072400
    END;                                                                19072500
         GO TO XIT1;                                                    19072600
              % *** CONDITION NAME                         % 6          19072700
M6:                                                                     19072800
    BEGIN                                                               19072900
         OP[RDX:=RDX+1]:=0&BINRY GTYPEF& BOOL TYPEFF;                   19073000
         IF IFTOG THEN MACRO(MATH,SFS,0);%CAUSES INSERTION OF BOOL LINKS19073100
         IF TYPE ! FGC THEN                                             19073200
         IRLO ~ RELATION ~ -1;                                          19073300
         IF NOTRO THEN BEGIN MAC2(MATH,LNOT); NOTRO ~ FALSE END;        19073400
         LAST ~ BINRY;                                                  19073500
         GO TO A;                                                       19073600
    END;                                                                19073700
         GO TO XIT1;                                                    19073800
              % *** SIGN OR CLASS TEST                     % 7          19073900
M7:                                                                     19074000
    BEGIN                                                               19074100
         IF LAST ! DN THEN ERR(73);                                     19074200
         MACRO(CLASM,OP[RDX].IFXF,IFX );                                19074300
         MACRO(XXXXM,REAL(NOTRO),0);                                    19074400
         IF IFTOG THEN MACRO(MATH,SFS,0);%CAUSES INSERTION OF BOOL LINKS19074500
         NOTRO ~ FALSE;                                                 19074600
         IRLO ~ RELATION ~ -1;                                          19074700
         OP[RDX]:=0&BINRY GTYPEF & BOOL TYPEFF;                         19074800
         LAST ~ BINRY;                                                  19074900
         GO TO A;                                                       19075000
    END;                                                                19075100
XIT1:;                                                                  19075200
    FINI:                                                               19075300
         IF LAST = DN THEN                                              19075400
    BEGIN                                                               19075500
         INSERTSUBJ;                                                    19075600
         CNTWRD ~ RELATION; RDX ~ RDX - 1;                              19075700
         T1 ~ REVRLO(IRLO);                                             19075800
         INSERTRLO(T1,NOTRO);                                           19075900
         NOTRO ~ FALSE;                                                 19076000
         T ~ CNTWRD.GTYPE; IFX ~ CNTWRD.IFXF; TYPE ~ CNTWRD.TYPEF;      19076100
         EVAL;                                                          19076200
         IF KEY = RIGHTPAREN THEN BEGIN T ~ 0; GO TO C END;             19076300
    END;                                                                19076400
         MACOUT(0,0);    % EMPTY STACK                                  19076500
         IF NOTRO THEN MACRO(MATH,LNOT,0);                              19076600
         IF OP[RDX].GTYPE ! BINRY  THEN ERR(143) ELSE                   19076700
         IF RDX ! 2 THEN ERR(73);                                       19076800
         IF PARENCT ! 0 THEN ERR(129);                                  19076900
         MACRO(ENDXM,0,0);                                              19077000
         EXPRESSION ~ -1;                                               19077100
END EXPRESSION;                                                         19077200
%***********************************************************************20000000
%***********************************************************************20000100
%*********************** CAVEAT EMPTOR *********************************20000200
%***********************************************************************20000300
%***********************************************************************20000400
         TI ~ TIME(1);  TI2 ~ TIME(2);                                  20000500
         FILL TEN[*] WITH                                               20000600
    OCT1141000000000000,    OCT1131200000000000,    OCT1121440000000000,20000700
    OCT1111750000000000,    OCT1102342000000000,    OCT1073032400000000,20000800
    OCT1063641100000000,    OCT1054611320000000,    OCT1045753604000000,20000900
    OCT1037346545000000,    OCT1011124027620000,    OCT0001351035564000,20001000
    OCT0011643245121000,    OCT0022214116345200,    OCT0032657142036440,20001100
    OCT0043432772446150,    OCT0054341571157602,    OCT0065432127413542,20001200
    OCT0076740555316473,    OCT0111053071060221,    OCT0121265707274265,20001300
    OCT0131543271153342,    OCT0142074147406233,    OCT0152513201307702,20001400
    OCT0163236041571663,    OCT0174105452130240,    OCT0205126764556310,20001500
    OCT0000000000000000,    OCT0000000000000000,    OCT0000000000000000,20001600
    OCT0000000000000000,    OCT0000000000000000,    OCT0000000000000000,20001700
    OCT0000000000000000,    OCT0000000000000000,    OCT0000000000000000,20001800
    OCT0000000000000000,    OCT0000000000000000,    OCT0000000000000000,20001900
    OCT0000000000000000,    OCT0000000000000000,    OCT0000000000000000,20002000
    OCT0000000000000000,    OCT0000000000000000,    OCT0004000000000000,20002100
    OCT0001000000000000,    OCT0001720000000000,    OCT0004304000000000,20002200
    OCT0007365000000000,    OCT0005262200000000,    OCT0004536640000000,20002300
    OCT0001666410000000,    OCT0000244112000000,    OCT0000315134400000;20002400
%% STK                                                                  20002500
         FILL RWSTACK[*] WITH                                           20002600
OCT1635, OCT1641, OCT1756, OCT1322, OCT1557, OCT1601, OCT1736, OCT1507, 20002700
OCT1344, OCT1745, OCT1667, OCT1452, OCT1415, OCT1772, OCT1564, OCT0,    20002800
OCT65, OCT1226, OCT1723, OCT0, OCT2000, OCT1701, OCT1663, OCT1606,      20002900
OCT1643, OCT1312, OCT235, OCT1220, OCT1537, OCT1357, OCT1112, OCT1566,  20003000
OCT1474, OCT1747, OCT1733, OCT1466, OCT1171, OCT564, OCT1342, OCT1612,  20003100
OCT1703, OCT712, OCT1442, OCT1173, OCT2027, OCT2031, OCT1752, OCT743,   20003200
OCT1731, OCT546, OCT2006, OCT1215, OCT1421, OCT1351, OCT1625, OCT2025,  20003300
OCT1413, OCT1271, OCT1140, OCT1765, OCT1326, OCT1127, OCT572, OCT1246,  20003400
OCT2016, OCT2011, OCT1570, OCT1677, OCT1251, OCT1362, OCT1460, OCT1543, 20003500
OCT1243, OCT1476, OCT1146, OCT1661, OCT1505, OCT1027, OCT1671, OCT0,    20003600
OCT1025, OCT1770, OCT1462, OCT1727, OCT1007, OCT1653, OCT1206, OCT2023, 20003700
OCT1513, OCT1013, OCT0, OCT1404, OCT1665, OCT1725, OCT2003, OCT1503,    20003800
OCT1273, OCT1236, OCT2021, OCT1333, OCT703, OCT1267, OCT1470, OCT1762,  20003900
OCT1575, OCT1721, OCT1253, OCT1320, OCT2013, OCT1041, OCT255, OCT1535,  20004000
OCT1541, OCT1673, OCT1515, OCT1175, OCT1365, OCT1106, OCT146, OCT1630,  20004100
OCT1646, OCT415, OCT1231, OCT1426, OCT1375, OCT0;                       20004200
         FILL ATSTACK[*] WITH                                           20004300
OCT0, OCT0, OCT0, OCT0, OCT0, OCT2037, OCT0, OCT0, OCT0, OCT2055,       20004400
OCT2042, OCT0, OCT2060, OCT0, OCT0, OCT0, OCT2033, OCT2044, OCT0, OCT0, 20004500
OCT2053, OCT0, OCT0, OCT0, OCT0, OCT0, OCT0, OCT0, OCT0, OCT0, OCT0,    20004600
OCT0, OCT0, OCT0, OCT0, OCT2035, OCT0, OCT0, OCT2050, OCT0;             20004700
%% END                                                                  20004800
                   % RESERVED WORD SCRAMBLE TABLE                       20004900
%% DCT                                                                  20005000
                   FILL RSWD[000,*] WITH                                20005100
OCT0,     %KEY LINK      WORD                                  RSWD[N,M]20005200
OCT0140000012600000,    "03ABS000",                           %[0,00001]20005300
OCT0020000013700000,    "06ACCESS",                           %[0,00003]20005400
OCT0020000014700000,    "06ACTUAL",                           %[0,00005]20005500
OCT0000000015700000,    "07ADDRES","S0000000",                %[0,00007]20005600
OCT0000000016700000,    "09ADVANC","ING00000",                %[0,00012]20005700
OCT0000000017700000,    "05AFTER0",                           %[0,00015]20005800
OCT0000000020700000,    "03ALL000",                           %[0,00017]20005900
OCT0000000021700000,    "0#ALPHAB","ETIC0000",                %[0,00021]20006000
OCT0000000022700000,    "0?ALPHAN","UMERIC00",                %[0,00024]20006100
OCT0000000023700000,    "0CALPHAN","UMERIC-E","DITED000",     %[0,00027]20006200
OCT0060000024700000,    "09ALTERN","ATE00000",                %[0,00033]20006300
OCT0020000025700000,    "05APPLY0",                           %[0,00036]20006400
OCT0140000026600000,    "06ARCTAN",                           %[0,00040]20006500
OCT0000000027700000,    "03ARE000",                           %[0,00042]20006600
OCT0000000030700000,    "04AREA00",                           %[0,00044]20006700
OCT0000000030700000,    "05AREAS0",                           %[0,00046]20006800
OCT0000000031700000,    "09ASCEND","ING00000",                %[0,00050]20006900
OCT0000000032700000,    "06ASSIGN",                           %[0,00053]20007000
OCT0000000033700027,    "02AT0000",                           %[0,00055]20007100
OCT0020000034700000,    "06AUTHOR",                           %[0,00057]20007200
OCT0000000035700000,    "06B-5500",                           %[0,00061]20007300
OCT0000000035700000,    "06B-5700",                           %[0,00063]20007400
OCT0000000035700042,    "06B-6500",                           %[0,00065]20007500
OCT0000000035700000,    "06B-6700",                           %[0,00067]20007600
OCT0000000035700000,    "06B-7500",                           %[0,00071]20007700
OCT0000000035700000,    "06B-7700",                           %[0,00073]20007800
OCT0000000035700000,    "06B-5000",                           %[0,00075]20007900
OCT0000000036700000,    "06BEFORE",                           %[0,00077]20008000
OCT0000000037700000,    "09BEGINN","ING00000",                %[0,00101]20008100
OCT0020000040700000,    "05BLANK0",                           %[0,00104]20008200
OCT0020000041700000,    "05BLOCK0",                           %[0,00106]20008300
OCT0000000042400000,    "04BUSY00",                           %[0,00110]20008400
OCT0000000043700000,    "02BY0000",                           %[0,00112]20008500
OCT0000000044400007,    "05CAUSE0",                           %[0,00114]20008600
OCT0000000045700000,    "02CD0000",                           %[0,00116]20008700
OCT0260000046700000,    "02CF0000",                           %[0,00120]20008800
OCT0300000047700000,    "02CH0000",                           %[0,00122]20008900
OCT0000000050700000,    "07CHANNE","L0000000",                %[0,00124]20009000
OCT0000000051700021,    "09CHARAC","TER00000",                %[0,00127]20009100
OCT0000000052700057,    "0#CHARAC","TERS0000",                %[0,00132]20009200
OCT0000000053700000,    "0@CLOCK-","UNITS000",                %[0,00135]20009300
OCT0000000054700000,    "05COBOL0",                           %[0,00140]20009400
OCT0000000055700000,    "04CODE00",                           %[0,00142]20009500
OCT0020000056700000,    "06COLUMN",                           %[0,00144]20009600
OCT0000000057700000,    "05COMMA0",                           %[0,00146]20009700
OCT0000000060700000,    "0:COMPUT","ATIONAL0",                %[0,00150]20009800
OCT0000000060700000,    "04COMP00",                           %[0,00153]20009900
OCT0000000060200000,    "03CMP000",                           %[0,00155]20010000
OCT0000000061700077,    "0}COMPUT","ATIONAL-","10000000",     %[0,00157]20010100
OCT0000000061700000,    "06COMP-1",                           %[0,00163]20010200
OCT0000000061200061,    "05CMP-10",                           %[0,00165]20010300
OCT0000000062700157,    "0}COMPUT","ATIONAL-","20000000",     %[0,00167]20010400
OCT0000000062700163,    "06COMP-2",                           %[0,00173]20010500
OCT0000000062200165,    "05CMP-20",                           %[0,00175]20010600
OCT0000000063700167,    "0}COMPUT","ATIONAL-","30000000",     %[0,00177]20010700
OCT0000000063700173,    "06COMP-3",                           %[0,00203]20010800
OCT0000000063200175,    "05CMP-30",                           %[0,00205]20010900
OCT0020000064700000,    "0:CONFIG","URATION0",                %[0,00207]20011000
OCT0020000065700205,    "08CONSTA","NT000000",                %[0,00212]20011100
OCT0000000066700000,    "08CONTAI","NS000000",                %[0,00215]20011200
OCT0320000067700000,    "07CONTRO","L0000000",                %[0,00220]20011300
OCT0320000067700000,    "08CONTRO","LS000000",                %[0,00223]20011400
OCT0000000070700000,    "0:CORRES","PONDING0",                %[0,00226]20011500
OCT0000000070700000,    "04CORR00",                           %[0,00231]20011600
OCT0140000071600046,    "03COS000",                           %[0,00233]20011700
OCT0000000072700135,    "05COUNT0",                           %[0,00235]20011800
OCT0000000073600000,    "06CRUNCH",                           %[0,00237]20011900
OCT0000000073600003,    "06KRUNCH",                           %[0,00241]20012000
OCT0020000074700000,    "08CURREN","CY000000",                %[0,00243]20012100
OCT0100000075700000,    "04DATA00",                           %[0,00246]20012200
OCT0000000076700000,    "04DATE00",                           %[0,00250]20012300
OCT0020000077700243,    "0:DATE-C","OMPILED0",                %[0,00252]20012400
OCT0020000100700177,    "0?DATE-W","RITTEN00",                %[0,00255]20012500
OCT0000000101700000,    "03DAY000",                           %[0,00260]20012600
OCT0000000102100000,    "0>DEBUG-","CONTENTS",                %[0,00262]20012700
OCT0000000103100071,    "0#DEBUG-","ITEM0000",                %[0,00265]20012800
OCT0000000104100265,    "0#DEBUG-","LINE0000",                %[0,00270]20012900
OCT0000000105100270,    "0#DEBUG-","NAME0000",                %[0,00273]20013000
OCT0000000106100000,    "0@DEBUG-","SUB-1000",                %[0,00276]20013100
OCT0000000107100276,    "0@DEBUG-","SUB-2000",                %[0,00301]20013200
OCT0000000110100301,    "0@DEBUG-","SUB-3000",                %[0,00304]20013300
OCT0000000111100000,    "09DEBUGG","ING00000",                %[0,00307]20013400
OCT0020000112700203,    "0:DECIMA","L-POINT0",                %[0,00312]20013500
OCT0020000113700000,    "0?DECLAR","ATIVES00",                %[0,00315]20013600
OCT0000000114700000,    "09DELIMI","TED00000",                %[0,00320]20013700
OCT0000000115700320,    "09DELIMI","TER00000",                %[0,00323]20013800
OCT0000000116700114,    "09DEPEND","ING00000",                %[0,00326]20013900
OCT0000000117700000,    "05DEPTH0",                           %[0,00331]20014000
OCT0000000120700000,    "0#DESCEN","DING0000",                %[0,00333]20014100
OCT0000000121700331,    "0@DESTIN","ATION000",                %[0,00336]20014200
OCT0240000122700000,    "06DETAIL",                           %[0,00341]20014300
OCT0240000122700050,    "02DE0000",                           %[0,00343]20014400
OCT0000000123400273,    "06DIRECT",                           %[0,00345]20014500
OCT0000000124400000,    "08DIRECT","ED000000",                %[0,00347]20014600
OCT0000000125700055,    "09DISPLA","Y-100000",                %[0,00352]20014700
OCT0000000126700127,    "08DIVISI","ON000000",                %[0,00355]20014800
OCT0000000127700000,    "04DOWN00",                           %[0,00360]20014900
OCT0000000130700312,    "04ELSE00",                           %[0,00362]20015000
OCT0000000130200000,    "09OTHERW","ISE00000",                %[0,00364]20015100
OCT0000000131700005,    "03EMI000",                           %[0,00367]20015200
OCT0000000132700323,    "03END000",                           %[0,00371]20015300
OCT0000000133700220,    "0@END-OF","-PAGE000",                %[0,00373]20015400
OCT0000000133700000,    "03EOP000",                           %[0,00376]20015500
OCT0000000134700124,    "06ENDING",                           %[0,00400]20015600
OCT0020000135700364,    "0@ENVIRO","NMENT000",                %[0,00402]20015700
OCT0000000136700212,    "05ERROR0",                           %[0,00405]20015800
OCT0000000137700000,    "03ESI000",                           %[0,00407]20015900
OCT0000000140700000,    "03ETI000",                           %[0,00411]20016000
OCT0000000141400000,    "05EVENT0",                           %[0,00413]20016100
OCT0000000142700304,    "05EVERY0",                           %[0,00415]20016200
OCT0140000143600101,    "03EXP000",                           %[0,00417]20016300
OCT0000000144600000,    "0AEXPONE","NT-OVERF","LOW00000",     %[0,00421]20016400
OCT0000000144600000,    "06EXPOVR",                           %[0,00425]20016500
OCT0020000145700000,    "02FD0000",                           %[0,00427]20016600
OCT0000000145200250,    "02MD0000",                           %[0,00431]20016700
OCT0020000146700000,    "04FILE00",                           %[0,00433]20016800
OCT0020000147700000,    "0?FILE-C","ONTROL00",                %[0,00435]20016900
OCT0020000150700000,    "0#FILE-L","IMIT0000",                %[0,00440]20017000
OCT0020000150700352,    "0@FILE-L","IMITS000",                %[0,00443]20017100
OCT0000000151700000,    "06FILLER",                           %[0,00446]20017200
OCT0000000152700000,    "05FINAL0",                           %[0,00450]20017300
OCT0000000153700402,    "05FIRST0",                           %[0,00452]20017400
OCT0140000154400425,    "08FIRSTO","NE000000",                %[0,00454]20017500
OCT0000000155200000,    "08FLAG-B","IT000000",                %[0,00457]20017600
OCT0000000156700000,    "07FOOTIN","G0000000",                %[0,00462]20017700
OCT0000000157700116,    "03FOR000",                           %[0,00465]20017800
OCT0000000160400315,    "04FREE00",                           %[0,00467]20017900
OCT0000000161700000,    "04FROM00",                           %[0,00471]20018000
OCT0000000162700053,    "06GIVING",                           %[0,00473]20018100
OCT0020000163700155,    "05GROUP0",                           %[0,00475]20018200
OCT0000000164700000,    "07HEADIN","G0000000",                %[0,00477]20018300
OCT0000000165400000,    "04HERE00",                           %[0,00502]20018400
OCT0040000166700467,    "0#HIGH-V","ALUE0000",                %[0,00504]20018500
OCT0040000166700142,    "0@HIGH-V","ALUES000",                %[0,00507]20018600
OCT0020000167700427,    "0@I-O-CO","NTROL000",                %[0,00512]20018700
OCT0000000170600462,    "02ID0000",                           %[0,00515]20018800
OCT0000000170700355,    "0>IDENTI","FICATION",                %[0,00517]20018900
OCT0000000171700000,    "02IN0000",                           %[0,00522]20019000
OCT0000000172700443,    "05INDEX0",                           %[0,00524]20019100
OCT0020000173700504,    "07INDEXE","D0000000",                %[0,00526]20019200
OCT0000000174700000,    "08INDICA","TE000000",                %[0,00531]20019300
OCT0000000175700000,    "07INITIA","L0000000",                %[0,00534]20019400
OCT0000000176700405,    "05INPUT0",                           %[0,00537]20019500
OCT0020000177700473,    "0?INPUT-","OUTPUT00",                %[0,00541]20019600
OCT0020000177700531,    "03I-O000",                           %[0,00544]20019700
OCT0020000200700000,    "0?INSTAL","LATION00",                %[0,00546]20019800
OCT0000000201600417,    "0+INTEGE","R-OVERFL","OW000000",     %[0,00551]20019900
OCT0000000201600000,    "06INTOVR",                           %[0,00555]20020000
OCT0000000202700433,    "04INTO00",                           %[0,00557]20020100
OCT0000000203700000,    "07INVALI","D0000000",                %[0,00561]20020200
OCT0000000204600075,    "0:INVALI","D-INDEX0",                %[0,00564]20020300
OCT0000000204600140,    "07INVDIN","X0000000",                %[0,00567]20020400
OCT0000000205700517,    "02IS0000",                           %[0,00572]20020500
OCT0020000206700333,    "09JUSTIF","IED00000",                %[0,00574]20020600
OCT0020000206700044,    "04JUST00",                           %[0,00577]20020700
OCT0000000206200577,    "02JS0000",                           %[0,00601]20020800
OCT0000000207700000,    "03KEY000",                           %[0,00603]20020900
OCT0000000207700015,    "04KEYS00",                           %[0,00605]20021000
OCT0020000210700000,    "05LABEL0",                           %[0,00607]20021100
OCT0000000211700226,    "04LAST00",                           %[0,00611]20021200
OCT0000000212700073,    "07LEADIN","G0000000",                %[0,00613]20021300
OCT0000000213700371,    "04LEFT00",                           %[0,00616]20021400
OCT0000000214700112,    "06LENGTH",                           %[0,00620]20021500
OCT0000000215700341,    "07LIBRAR","Y0000000",                %[0,00622]20021600
OCT0000000216700326,    "05LIMIT0",                           %[0,00625]20021700
OCT0000000216700122,    "06LIMITS",                           %[0,00627]20021800
OCT0020000217700252,    "06LINAGE",                           %[0,00631]20021900
OCT0000000220700544,    "0>LINAGE","-COUNTER",                %[0,00633]20022000
OCT0020000221700557,    "04LINE00",                           %[0,00636]20022100
OCT0000000221700376,    "05LINES0",                           %[0,00640]20022200
OCT0100000222700435,    "0?LINE-C","OUNTER00",                %[0,00642]20022300
OCT0020000223700551,    "07LINKAG","E0000000",                %[0,00645]20022400
OCT0140000224200001,    "02LN0000",                           %[0,00650]20022500
OCT0000000225400000,    "06LOCATE",                           %[0,00652]20022600
OCT0000000226700237,    "04LOCK00",                           %[0,00654]20022700
OCT0000000227400336,    "06LOCKED",                           %[0,00656]20022800
OCT0040000230700215,    "09LOW-VA","LUE00000",                %[0,00660]20022900
OCT0040000230700153,    "0#LOW-VA","LUES0000",                %[0,00663]20023000
OCT0040000230700524,    "0@LOWER-","BOUND000",                %[0,00666]20023100
OCT0040000230700642,    "0?LOWER-","BOUNDS00",                %[0,00671]20023200
OCT0140000231600601,    "03MAX000",                           %[0,00674]20023300
OCT0020000232700645,    "06MEMORY",                           %[0,00676]20023400
OCT0000000233700000,    "07MESSAG","E0000000",                %[0,00700]20023500
OCT0140000234600000,    "03MIN000",                           %[0,00703]20023600
OCT0000000235700347,    "04MODE00",                           %[0,00705]20023700
OCT0000000236700622,    "07MODULE","S0000000",                %[0,00707]20023800
OCT0000000236200666,    "04MODS00",                           %[0,00712]20023900
OCT0020000237700475,    "08MULTIP","LE000000",                %[0,00714]20024000
OCT0000000240700000,    "08NEGATI","VE000000",                %[0,00717]20024100
OCT0020000241700633,    "04NEXT00",                           %[0,00722]20024200
OCT0000000242700000,    "02NO0000",                           %[0,00724]20024300
OCT0000000243600000,    "0?NON-ST","ANDARD00",                %[0,00726]20024400
OCT0000000244700000,    "03NOT000",                           %[0,00731]20024500
OCT0000000245700555,    "06NUMBER",                           %[0,00733]20024600
OCT0000000246700000,    "07NUMERI","C0000000",                %[0,00735]20024700
OCT0000000247700722,    "0>NUMERI","C-EDITED",                %[0,00740]20024800
OCT0020000250700000,    "0}OBJECT","-COMPUTE","R0000000",     %[0,00743]20024900
OCT0000000251700400,    "0>OBJECT","-PROGRAM",                %[0,00747]20025000
OCT0020000252700104,    "06OCCURS",                           %[0,00752]20025100
OCT0000000252200367,    "02OC0000",                           %[0,00754]20025200
OCT0000000253700223,    "02OF0000",                           %[0,00756]20025300
OCT0000000254700000,    "03OFF000",                           %[0,00760]20025400
OCT0000000255700526,    "02OH0000",                           %[0,00762]20025500
OCT0000000256700000,    "07OMITTE","D0000000",                %[0,00764]20025600
OCT0000000257700534,    "02ON0000",                           %[0,00767]20025700
OCT0140000260400246,    "04ONES00",                           %[0,00771]20025800
OCT0000000261700036,    "08OPTION","AL000000",                %[0,00773]20025900
OCT0000000000000000,    "00000000";                           %[0,00776]20026000
                   FILL RSWD[001,*] WITH                                20026100
OCT0000000262700671,    "02OV0000",                           %[1,00000]20026200
OCT0000000263700754,    "08OVERFL","OW000000",                %[1,00002]20026300
OCT0000000264700700,    "06OUTPUT",                           %[1,00005]20026400
OCT0000000265600307,    "06PACKED",                           %[1,00007]20026500
OCT0400000266700413,    "04PAGE00",                           %[1,00011]20026600
OCT0100000267700740,    "0?PAGE-C","OUNTER00",                %[1,00013]20026700
OCT0360000270700605,    "02PF0000",                           %[1,00016]20026800
OCT0340000271700000,    "02PH0000",                           %[1,00020]20026900
OCT0020000272700231,    "07PICTUR","E0000000",                %[1,00022]20027000
OCT0020000272700000,    "03PIC000",                           %[1,00025]20027100
OCT0000000272200705,    "02PC0000",                           %[1,00027]20027200
OCT0000000273700717,    "04PLUS00",                           %[1,00031]20027300
OCT0000000274400000,    "07POINTE","R0000000",                %[1,00033]20027400
OCT0000000275700652,    "08POSITI","ON000000",                %[1,00036]20027500
OCT0000000276701036,    "08POSITI","VE000000",                %[1,00041]20027600
OCT0000000277700773,    "08PREPAR","ED000000",                %[1,00044]20027700
OCT0000000300700150,    "08PRIORI","TY000000",                %[1,00047]20027800
OCT0020000301700454,    "09PROCED","URE00000",                %[1,00052]20027900
OCT0000000301701031,    "0#PROCED","URES0000",                %[1,00055]20028000
OCT0000000302701033,    "07PROCEE","D0000000",                %[1,00060]20028100
OCT0000000303701055,    "0#PROCES","SING0000",                %[1,00063]20028200
OCT0000000304700616,    "07PROGRA","M0000000",                %[1,00066]20028300
OCT0020000305700000,    "0#PROGRA","M-ID0000",                %[1,00071]20028400
OCT0000000306600760,    "05PURGE0",                           %[1,00074]20028500
OCT0000000307400724,    "05QUEUE0",                           %[1,00076]20028600
OCT0040000310700012,    "05QUOTE0",                           %[1,00100]20028700
OCT0040000310700714,    "06QUOTES",                           %[1,00102]20028800
OCT0000000311700260,    "06RANDOM",                           %[1,00104]20028900
OCT0020000312700537,    "05RANGE0",                           %[1,00106]20029000
OCT0020000313700625,    "02RD0000",                           %[1,00110]20029100
OCT0020000314700574,    "06RECORD",                           %[1,00112]20029200
OCT0000000315700106,    "07RECORD","S0000000",                %[1,00114]20029300
OCT0020000316701002,    "09RECORD","ING00000",                %[1,00117]20029400
OCT0000000317700752,    "09REDEFI","NES00000",                %[1,00122]20029500
OCT0000000320701022,    "04REEL00",                           %[1,00125]20029600
OCT0000000321600144,    "0@REEL-N","UMBER000",                %[1,00127]20029700
OCT0000000322701104,    "0#REFERE","NCES0000",                %[1,00132]20029800
OCT0000000323700747,    "09REMAIN","DER00000",                %[1,00135]20029900
OCT0000000324200607,    "07REMARK","S0000000",                %[1,00140]20030000
OCT0000000325700663,    "07RENAME","S0000000",                %[1,00143]20030100
OCT0000000326700707,    "09REPLAC","ING00000",                %[1,00146]20030200
OCT0460000327700000,    "06REPORT",                           %[1,00151]20030300
OCT0460000327701135,    "07REPORT","S0000000",                %[1,00153]20030400
OCT0000000330700000,    "09REPORT","ING00000",                %[1,00156]20030500
OCT0000000331700731,    "07RESERV","E0000000",                %[1,00161]20030600
OCT0000000332700067,    "05RESET0",                           %[1,00164]20030700
OCT0000000333701114,    "08REVERS","ED000000",                %[1,00166]20030800
OCT0000000334700450,    "06REWIND",                           %[1,00171]20030900
OCT0440000335700676,    "02RF0000",                           %[1,00173]20031000
OCT0420000336701074,    "02RH0000",                           %[1,00175]20031100
OCT0000000337700611,    "05RIGHT0",                           %[1,00177]20031200
OCT0000000340700674,    "07ROUNDE","D0000000",                %[1,00201]20031300
OCT0020000341700024,    "02SA0000",                           %[1,00204]20031400
OCT0020000342700000,    "04SAME00",                           %[1,00206]20031500
OCT0020000343700654,    "02SD0000",                           %[1,00210]20031600
OCT0020000344600613,    "0@SAVE-F","ACTOR000",                %[1,00212]20031700
OCT0000000345700561,    "07SECTIO","N0000000",                %[1,00215]20031800
OCT0020000346700407,    "08SECURI","TY000000",                %[1,00220]20031900
OCT0000000347700040,    "07SEGMEN","T0000000",                %[1,00223]20032000
OCT0020000350700241,    "0:SEGMEN","T-LIMIT0",                %[1,00226]20032100
OCT0020000351701000,    "06SELECT",                           %[1,00231]20032200
OCT0000000352700507,    "08SELECT","ED000000",                %[1,00233]20032300
OCT0000000353400567,    "04SELF00",                           %[1,00236]20032400
OCT0000000354700411,    "08SENTEN","CE000000",                %[1,00240]20032500
OCT0000000355701212,    "08SEPARA","TE000000",                %[1,00243]20032600
OCT0000000356701240,    "0#SEQUEN","TIAL0000",                %[1,00246]20032700
OCT0140000357700207,    "04SIGN00",                           %[1,00251]20032800
OCT0140000360600000,    "03SIN000",                           %[1,00253]20032900
OCT0020000361701156,    "04SIZE00",                           %[1,00255]20033000
OCT0020000361600452,    "02SZ0000",                           %[1,00257]20033100
OCT0020000362700233,    "06SOURCE",                           %[1,00261]20033200
OCT0020000363700631,    "0}SOURCE","-COMPUTE","R0000000",     %[1,00263]20033300
OCT0040000364700471,    "05SPACE0",                           %[1,00267]20033400
OCT0040000364701071,    "06SPACES",                           %[1,00271]20033500
OCT0020000365701110,    "0:SPECIA","L-NAMES0",                %[1,00273]20033600
OCT0140000366600110,    "04SQRT00",                           %[1,00276]20033700
OCT0000000367701066,    "08STANDA","RD000000",                %[1,00300]20033800
OCT0000000370700650,    "06STATUS",                           %[1,00303]20033900
OCT0020000371700603,    "03SUM000",                           %[1,00305]20034000
OCT0000000372701257,    "0#SUPERV","ISOR0000",                %[1,00307]20034100
OCT0000000373700620,    "08SYMBOL","IC000000",                %[1,00312]20034200
OCT0020000374700017,    "0?SYNCHR","ONIZED00",                %[1,00315]20034300
OCT0020000374700515,    "04SYNC00",                           %[1,00320]20034400
OCT0000000374201255,    "02SY0000",                           %[1,00322]20034500
OCT0000000375700132,    "05TABLE0",                           %[1,00324]20034600
OCT0100000376701016,    "05TALLY0",                           %[1,00326]20034700
OCT0000000377700000,    "08TALLYI","NG000000",                %[1,00330]20034800
OCT0000000400701204,    "08TERMIN","AL000000",                %[1,00333]20034900
OCT0000000401700000,    "04TEXT00",                           %[1,00336]20035000
OCT0000000402700726,    "04THAN00",                           %[1,00340]20035100
OCT0000000403200000,    "04THEN00",                           %[1,00342]20035200
OCT0000000404700457,    "04THRU00",                           %[1,00344]20035300
OCT0000000404700345,    "07THROUG","H0000000",                %[1,00346]20035400
OCT0100000405701330,    "04TIME00",                           %[1,00351]20035500
OCT0000000406701005,    "05TIMES0",                           %[1,00353]20035600
OCT0000000407701233,    "02TO0000",                           %[1,00355]20035700
OCT0100000410601132,    "0@TODAYS","-DATE000",                %[1,00357]20035800
OCT0000000411700000,    "08TRAILI","NG000000",                %[1,00362]20035900
OCT0020000412700000,    "04TYPE00",                           %[1,00365]20036000
OCT0000000413700000,    "04UNIT00",                           %[1,00367]20036100
OCT0000000414400762,    "06UNLOCK",                           %[1,00371]20036200
OCT0000000415700627,    "05UNTIL0",                           %[1,00373]20036300
OCT0000000416700656,    "02UP0000",                           %[1,00375]20036400
OCT0000000417701346,    "04UPON00",                           %[1,00377]20036500
OCT0040000420701151,    "0@UPPER-","BOUND000",                %[1,00401]20036600
OCT0040000420701153,    "0?UPPER-","BOUNDS00",                %[1,00404]20036700
OCT0020000421700421,    "05USAGE0",                           %[1,00407]20036800
OCT0020000422700440,    "05USING0",                           %[1,00411]20036900
OCT0020000423700640,    "05VALUE0",                           %[1,00413]20037000
OCT0020000423700771,    "06VALUES",                           %[1,00415]20037100
OCT0000000423201315,    "02VA0000",                           %[1,00417]20037200
OCT0000000424701373,    "07VARYIN","G0000000",                %[1,00421]20037300
OCT0000000425700000,    "04WHEN00",                           %[1,00424]20037400
OCT0000000426700343,    "04WITH00",                           %[1,00426]20037500
OCT0000000427701367,    "05WORDS0",                           %[1,00430]20037600
OCT0020000430700465,    "0}WORKIN","G-STORAG","E0000000",     %[1,00432]20037700
OCT0040000431700660,    "04ZERO00",                           %[1,00436]20037800
OCT0040000431700764,    "05ZEROS0",                           %[1,00440]20037900
OCT0040000431700000,    "06ZEROES",                           %[1,00442]20038000
OCT0000000432700636,    "01,00000",                           %[1,00444]20038100
OCT0000000433700000,    "01;00000",                           %[1,00446]20038200
OCT0000000434700735,    "01(00000",                           %[1,00450]20038300
OCT0000000435701417,    "01)00000",                           %[1,00452]20038400
OCT0000000436700000,    "03AND000",                           %[1,00454]20038500
OCT0000000437701446,    "02OR0000",                           %[1,00456]20038600
OCT0000000440700512,    "01+00000",                           %[1,00460]20038700
OCT0000000441701210,    "01-00000",                           %[1,00462]20038800
OCT0000000442701076,    "01*00000",                           %[1,00464]20038900
OCT0000000443600360,    "03MOD000",                           %[1,00466]20039000
OCT0000000444700033,    "01/00000",                           %[1,00470]20039100
OCT0000000445601060,    "03DIV000",                           %[1,00472]20039200
OCT0000000446701052,    "02**0000",                           %[1,00474]20039300
OCT0000000447701047,    "07GREATE","R0000000",                %[1,00476]20039400
OCT0000000450701261,    "01>00000",                           %[1,00501]20039500
OCT0000000451701336,    "04LESS00",                           %[1,00503]20039600
OCT0000000452700431,    "01<00000",                           %[1,00505]20039700
OCT0000000453701020,    "05EQUAL0",                           %[1,00507]20039800
OCT0000000454701436,    "01=00000",                           %[1,00511]20039900
OCT0000000455701444,    "06EQUALS",                           %[1,00513]20040000
OCT0000000456700262,    "07UNEQUA","L0000000",                %[1,00515]20040100
OCT0000000456200502,    "01!00000",                           %[1,00520]20040200
OCT0000000457700477,    "07EXCEED","S0000000",                %[1,00522]20040300
OCT0000000460601305,    "01]00000",                           %[1,00525]20040400
OCT0000000461601432,    "01:00000",                           %[1,00527]20040500
OCT0000000462601307,    "01[00000",                           %[1,00531]20040600
OCT0120000765701276,    "06ACCEPT",                           %[1,00533]20040700
OCT0120000766701166,    "03ADD000",                           %[1,00535]20040800
OCT0120000767701464,    "05ALTER0",                           %[1,00537]20040900
OCT0120000770701044,    "04CALL00",                           %[1,00541]20041000
OCT0120000771701520,    "06CANCEL",                           %[1,00543]20041100
OCT0120000772701527,    "05CLOSE0",                           %[1,00545]20041200
OCT0120000773701501,    "07COMPUT","E0000000",                %[1,00547]20041300
OCT0120000774700373,    "04COPY00",                           %[1,00552]20041400
OCT0120000775701117,    "07DISABL","E0000000",                %[1,00554]20041500
OCT0120000776700362,    "07DISPLA","Y0000000",                %[1,00557]20041600
OCT0120000777701324,    "06DIVIDE",                           %[1,00562]20041700
OCT0120001000601533,    "04DUMP00",                           %[1,00564]20041800
OCT0120001001701223,    "06ENABLE",                           %[1,00566]20041900
OCT0120001002701263,    "05ENTER0",                           %[1,00570]20042000
OCT0120001003700767,    "07EXAMIN","E0000000",                %[1,00572]20042100
OCT0120001004700446,    "04EXIT00",                           %[1,00575]20042200
OCT0120001005600063,    "06FORGET",                           %[1,00577]20042300
OCT0120001006701430,    "08GENERA","TE000000",                %[1,00601]20042400
OCT0120001007701450,    "02GO0000",                           %[1,00604]20042500
OCT0120001010701554,    "04HOLD00",                           %[1,00606]20042600
OCT0120001011701525,    "02IF0000",                           %[1,00610]20042700
OCT0120001012701531,    "0#INITIA","LIZE0000",                %[1,00612]20042800
OCT0120001013700000,    "08INITIA","TE000000",                %[1,00615]20042900
OCT0120001014701371,    "07INSPEC","T0000000",                %[1,00620]20043000
OCT0120001015601547,    "05MERGE0",                           %[1,00623]20043100
OCT0120001016601610,    "07MONITO","R0000000",                %[1,00625]20043200
OCT0120001017701201,    "04MOVE00",                           %[1,00630]20043300
OCT0120001020701102,    "08MULTIP","LY000000",                %[1,00632]20043400
OCT0120001021201511,    "04NOTE00",                           %[1,00635]20043500
OCT0120001021201440,    "05NOTES0",                           %[1,00637]20043600
OCT0120001022701632,    "04OPEN00",                           %[1,00641]20043700
OCT0120001023701577,    "07PERFOR","M0000000",                %[1,00643]20043800
OCT0120001024701472,    "07PROCES","S0000000",                %[1,00646]20043900
OCT0120001025701604,    "04READ00",                           %[1,00651]20044000
OCT0120001026701411,    "07RECEIV","E0000000",                %[1,00653]20044100
OCT0120001027701177,    "07RELEAS","E0000000",                %[1,00656]20044200
OCT0120001030701424,    "05RERUN0",                           %[1,00661]20044300
OCT0120001031701651,    "06RETURN",                           %[1,00663]20044400
OCT0120001032701656,    "03RUN000",                           %[1,00665]20044500
OCT0120001033701401,    "06SEARCH",                           %[1,00667]20044600
OCT0120001034701620,    "04SEEK00",                           %[1,00671]20044700
OCT0120001035701063,    "04SEND00",                           %[1,00673]20044800
OCT0120001036701164,    "03SET000",                           %[1,00675]20044900
OCT0120001037701340,    "04SORT00",                           %[1,00677]20045000
OCT0120001040701353,    "04STOP00",                           %[1,00701]20045100
OCT0120001041701377,    "06STRING",                           %[1,00703]20045200
OCT0120001042701522,    "08SUBTRA","CT000000",                %[1,00705]20045300
OCT0120001043701637,    "07SUSPEN","D0000000",                %[1,00710]20045400
OCT0120001044701011,    "09TERMIN","ATE00000",                %[1,00713]20045500
OCT0120001045701300,    "08UNSTRI","NG000000",                %[1,00716]20045600
OCT0120001046700120,    "03USE000",                           %[1,00721]20045700
OCT0120001047601562,    "04WAIT00",                           %[1,00723]20045800
OCT0120001050701710,    "05WRITE0",                           %[1,00725]20045900
OCT0060001051701161,    "06BACKUP",                           %[1,00727]20046000
OCT0060001052701675,    "04DISK00",                           %[1,00731]20046100
OCT0060001053701355,    "0?DISPLA","Y-UNIT00",                %[1,00733]20046200
OCT0060001054700756,    "08KEYBOA","RD000000",                %[1,00736]20046300
OCT0060001054701407,    "0}MESSAG","E-PRINTE","R0000000",     %[1,00741]20046400
OCT0060001054601303,    "03SPO000",                           %[1,00745]20046500
OCT0060001054701545,    "07CONSOL","E0000000",                %[1,00747]20046600
OCT0060001055701572,    "0+PAPER-","TAPE-PUN","CH000000",     %[1,00752]20046700
OCT0060001056701615,    "0APAPER-","TAPE-REA","DER00000",     %[1,00756]20046800
OCT0060001057701705,    "07PRINTE","R0000000",                %[1,00762]20046900
OCT0060001057700541,    "08PRINTE","RS000000",                %[1,00765]20047000
OCT0060001060701143,    "05PUNCH0",                           %[1,00770]20047100
OCT0060001060700733,    "0#CARD-P","UNCH0000",                %[1,00772]20047200
OCT0060001604701716,    "06READER",                           %[1,00775]20047300
OCT0000000000000000;                                          %[1,00777]20047400
                   FILL RSWD[002,*] WITH                                20047500
OCT0060001604701122,    "07READER","S0000000",                %[2,00000]20047600
OCT0060001604700522,    "0@CARD-R","EADER000",                %[2,00003]20047700
OCT0060001604701552,    "0?CARD-R","EADERS00",                %[2,00006]20047800
OCT0060001605601456,    "06REMOTE",                           %[2,00011]20047900
OCT0060001606701125,    "09SORT-T","APE00000",                %[2,00013]20048000
OCT0060001606701775,    "0#SORT-T","APES0000",                %[2,00016]20048100
OCT0060001607701454,    "06SYSTEM",                           %[2,00021]20048200
OCT0060001610701623,    "04TAPE00",                           %[2,00023]20048300
OCT0060001610601713,    "05TAPES0",                           %[2,00025]20048400
OCT0060001610701741,    "05TAPE70",                           %[2,00027]20048500
OCT0060001611501100,    "05TAPE90",                           %[2,00031]20048600
OCT0200030000000000,    "06ACCESS",                           %[2,00033]20048700
OCT0217770001000000,    "05AREAS0",                           %[2,00035]20048800
OCT0200000002000000,    "08AREASI","ZE000000",                %[2,00037]20048900
OCT0200000003000000,    "05CYCLE0",                           %[2,00042]20049000
OCT0200000004000000,    "04DATE00",                           %[2,00044]20049100
OCT0200030005000000,    "05MYUSE0",                           %[2,00046]20049200
OCT0200030006000000,    "08OTHERU","SE000000",                %[2,00050]20049300
OCT0200000007000000,    "04REEL00",                           %[2,00053]20049400
OCT0217470010002046,    "0#SAVEFA","CTOR0000",                %[2,00055]20049500
OCT0200000011000000,    "04TYPE00";                           %[2,00060]20049600
%% END                                                                  20049700
FILL OPERATOR[*] WITH                                                   20049800
   OCT0012000043316323, 0, OCT0012000246472423,    OCT0012000324256223, 20049900
   OCT0000010121242460,    OCT0000030162642260,    OCT0000040144644363, 20050000
   OCT0000100124316524,    OCT0000300131246560,    OCT0000700151246560, 20050100
   OCT0004035123222460,    OCT0004015123224560,    OCT0004025123262460, 20050200
   OCT0004005123264560,    OCT0000010524432160,    OCT0000030524436260, 20050300
   OCT0000040524434460,    OCT0000100524432460,    OCT0000041543452460, 20050400
   OCT0000021543465160,    OCT0000101543506560,    OCT0000011543452760, 20050500
   OCT0000422543626260,    OCT0000012527255060,    OCT0000022527635160, 20050600
   OCT0000412543255060,    OCT0000442525504360,    OCT0000042545255043, 20050700
   OCT0000423122266660,    OCT0000413122226660,    OCT0000023122262360, 20050800
   OCT0000013122222360,    OCT0000013522516360,    OCT0000623143266460, 20050900
   OCT0000613143226460,    OCT0000223143262360,    OCT0000213143222360, 20051000
   OCT0000042162632460,    OCT0000102162452460,    OCT0000412131622460, 20051100
   OCT0000422131624560,    OCT0000012123312460,    OCT0000022123452460, 20051200
   OCT0000005545464760,    OCT0006007526232560,    OCT0006007126234360, 20051300
   OCT0000201544464760,    OCT0000401544246260,    OCT0000203163464760, 20051400
   OCT0000443162624760,    OCT0000043162624560,    OCT0000103123306260, 20051500
   OCT0006004531624660,    OCT0000542523632360,    OCT0000742523632660, 20051600
   OCT0000142526632360,    OCT0000342526632660,    OCT0000044144426260, 20051700
   OCT0000043567316360,    OCT0000023551634560,    OCT0000123551636260, 20051800
   OCT2000444123444560,    OCT0000102567233060,    OCT0000202524644760, 20051900
   OCT0000006524254360,    OCT0000202143462460,    OCT0000014131456760, 20052000
   OCT0000024123462360,    OCT0000124123242360,    OCT0000101123464460, 20052100
   OCT0000241171470160,    OCT0000006167516360,    OCT2006007763516260, 20052200
   OCT2006007463514760,    OCT2006007663517160,    OCT2006007563514560, 20052300
   OCT2006000563516660,    OCT2006001263224560,    OCT2006003563436260, 20052400
   OCT2006002663252760,    OCT2006002763275160,    OCT2006003463254360, 20052500
   OCT2006002463255060,    OCT2006002563452560,    OCT2006003663214560, 20052600
   OCT2006003722316360,    OCT2006007123436260,    OCT2006006223252760, 20052700
   OCT2006006323275160,    OCT2006007023254360,    OCT2006006023255060, 20052800
   OCT2006006123452560,    OCT2006004741266660,    OCT2006005741516560, 20052900
   OCT2006004541262360,    OCT2006005541512360,    OCT2006005222456260, 20053000
   OCT2006005125456260,    OCT2006004641456260,    OCT2006004441452360, 20053100
   OCT2006003162266260,    OCT2006003062516260,    OCT2006001662262460, 20053200
   OCT2006001762512460,    OCT2006000222622460,    OCT2006000322626260, 20053300
   OCT2006001562622160,    OCT2006001462242160,    OCT2006005462232160, 20053400
   OCT2006005351622160,    OCT2006000451242160,    OCT2006005051232160, 20053500
   OCT2006002262256260,    OCT2006000662252460,    OCT2006005663622160, 20053600
   OCT2006000763242160,    OCT2006007326212460,    OCT2006007226626460, 20053700
   OCT2006006731236560,    OCT2006006646236560,    OCT2006004262252360, 20053800
   OCT2006004031452360,    OCT2006004162632360,    OCT2006006522315160, 20053900
   OCT2006006422316260,    OCT2006004323512660,    OCT2000000025672360, 20054000
   OCT2000010023446760,    OCT0006005524312160,    OCT0006006124312260, 20054100
   OCT0006006563512260,    OCT0000214162622660,                         20054200
    "ENTR","VARI";                                                      20054300
         FILL MACROOPS[*] WITH "KBLSM",                                 20054400
         "XTHRM","CNEMM","ACKMM","ODPMM","SDPMM",                       20054500
         "FLLMM","FLHMM","SVAMM","ADCMM","IFMMM",                       20054600
         "CLASM","KEYMM","STOSM","CNAMM","QUALM",                       20054700
         "LITCM","VALUE","*****","NAME ","STO9M",                       20054800
         "STOXM","JONKM","OPSZM","SZERM","DEFLM",                       20054900
         "DEFPM","BRFLM","BRTLM","BUNLM","BRFPM",                       20055000
         "BRTPM","BRUPM","STSBM","CASBM","ENDSM",                       20055100
         "ENDPM","ALTRM","ALTGM","ALGOM","*EXP*",                       20055200
         "*END*","STMTE","MNAMM","BOOLM","*SUB*",                       20055300
         "*FIN*","XXXXM","PWSMM","SZRSM","SZRFM",                       20055400
         "MABSM","MSGNM","MINTM","DELMM","SWCHM",                       20055500
         "XCHMM","FGCNM","DUPMM","PFRMM","ADSTM",                       20055600
         "MATHM","DUMPM","EXAMM","MHPWM","PFTMM",                       20055700
         "CHKLM","SPCNT","RLMCO","RTMCO","SWMCO",                       20055800
         "SCALM","INCIM","SETMM","RMNDR","*I/O*",                       20055900
         "ISUBJ","PNMCO","STOPM","MKSMM","RPTM ",                       20056000
         "RPFM ","RSUM ","RINT ","RGEN ","RTRM ",                       20056100
         "USMVM","FIDMM","PGLMM","PROCM","THEND";                       20056200
         CDMSK ~ 4;                                                     20056300
         NXD ~ 2;                                                       20056400
         NFIB ~ 0;                                                      20056500
         NSPE ~ 2047;                                                   20056600
         NXTPRTLOC ~ ASSIGNHERE;                                        20056700
         CARDCOUNT ~ - 1;    % SO THAT RANDOM PASS1 COMES BACK RIGHT    20056800
         NXI ~ IFSZ;                                                    20056900
         LISTOG ~ DECTOG ~ TAPECLOSE ~ TRUE;                            20057000
         IF ERRORCOUNT ! 0 THEN                                         20057100
    BEGIN                                                               20057200
         ERRORCOUNT ~ 0;                                                20057300
         DCOMM ~ TRUE;                                                  20057400
         FREETOG ~ TRUE;                                                20057500
         SEQXEQT ~ TRUE;                                                20057600
         DOLOPTWORD ~ 0;                                                20057700
         LISTOG ~ FALSE;                                                20057800
         SPECTOG ~ TRUE;                                                20057900
    END ELSE                                                            20058000
         DOLOPTWORD~1;                                                  20058100
         NXTSAVAIL ~ 3;                                                 20058200
         WRITE(SAVEFILE);                                               20058300
         ACCUM[0].[08:10] ~ PERIOD; XACUM[0].[08:10] ~ PERIOD;          20058400
         MEMORYSIZE ~ ERRORLIMIT ~ 5000;                                20058500
         DISKSIZE ~ 600000;                                             20058600
         SORTTAPES ~ 3;                                                 20058700
         KEY ~ NXKEY ~ PERIOD;                                          20058800
         PIDX ~ (MKABS(XACUM[1]))& 2[18:33:15];                         20058900
         ACCUM[1] ~ XACUM[1] ~ 0&"1."[01:31:17];                        20059000
         DRCT[1].[01:17] ~ "01 ";                                       20059100
         GLPRDV ~ ".";                                                  20059200
         GLDOL ~ "$";                                                   20059300
         GLCMMA ~ ",";                                                  20059400
         PTOBUFFER ~ PTOLBUF ~ MKABS(LBUF[0]);                          20059500
              % SET UP JUNKS                                            20059600
         BLAND(CURRENTSEQ,13);                                          20059700
         BLAND(LBUF[10],1);                                             20059800
         BLAND(LIBUF[10],1);                                            20059900
         LITPTR(LIBUF[10],1,"L",1);                                     20060000
         MXSEGSZ ~ 2048;                                                20060100
         ARITHSIGN ~ FALSE;                                             20060200
         ENDBUF ~ PBS ~ PTOBUFFER + 9;                                  20060300
         DEBLANK;  PDLY ~ TRUE;  STEPS;                                 20060400
%*******    I D E N T I F I C A T I O N    D I V I S I O N   *******    20060500
    BEGIN                                                               20060600
         LABEL XIT,LP;                                                  20060700
         BUL[0] ~ MARGINA;                                              20060800
         MACRO(KBLSM,ID,0);                                             20060900
         DECTOG ~ FALSE;                                                20061000
         IF SCTRL!ID THEN DO                                            20061100
    BEGIN                                                               20061200
                                                                        20061300
         GSER ~ 0 ;                                                     20061400
         BUL[0] ~ MARGINA;                                              20061500
    END                                                                 20061600
         UNTIL SCTRL=ID OR KEY=ENVIRONMENT OR KEY=DATA OR EOFTOG;       20061700
         IF BUL[0] THEN BUL[0] ~ FALSE ELSE ERR(-11);                   20061800
         IF KEY=ENVIRONMENT OR KEY=DATA OR EOFTOG THEN                  20061900
    BEGIN                                                               20062000
         ERR(0);                                                        20062100
         IF NOT EOFTOG THEN GO TO XIT;                                  20062200
         BLAND(TMP,15);                                                 20062210
         LITPTR(TMP[0],0,"ERROR: ",7);                                  20062220
         LITPTR(TMP[1],0,"MISSING",7);                                  20062230
         LITPTR(TMP[2],0,"PROGRAM",7);                                  20062240
         WRITE(RITE,15,TMP[*]);                                         20062250
         GO TO GLOBALEND;                                               20062260
    END;                                                                20062300
         IF SCTRL ! DIVISION THEN ERR(0) ELSE                           20062400
         IF NXKEY ! PERIOD THEN ERR(-81);                               20062500
LP:      READACARD;                                                     20062600
         IF GETCHARS(PTOBUFFER,7,4) = "    " THEN GO TO LP ELSE STEPS;  20062700
          IF NXKEY = DATECOMP THEN DATIME;                              20062800
          STEPS;                                                        20062900
         IF KEY   = PROGRAMID THEN GO TO LP;                            20063000
         IF KEY   = AUTHOR  THEN GO TO LP;                              20063500
         IF KEY   = INSTALLATION THEN GO TO LP;                         20063600
         IF KEY   = DATEWRTN THEN GO TO LP;                             20063700
         IF KEY   = DATECOMP THEN GO TO LP;                             20063800
         IF KEY   = SECURITY THEN GO TO LP;                             20063900
         IF KEY   = REMARKS THEN GO TO LP;                              20064000
         IF KEY   = ENVIRONMENT THEN GO TO XIT;                         20064100
         IF KEY=DATA OR EOFTOG THEN GO TO XIT;                          20064200
         ERR(0);                                                        20064300
         GO TO LP;                                                      20064400
    XIT:                                                                20064500
         DECTOG ~ TRUE;                                                 20064600
    END IDENTIFICATION DIVISION;                                        20064700
%*******    E N V I R O N M E N T    D I V I S I O N         *******    20064800
    BEGIN                                                               20064900
         LABEL L0,L1,L2,L3,L4,L5,L6,L7,L8,L9,XIT,ERP;                   20065000
PROCEDURE SCE;     % HANDLES SOURCE-COMPUTER ENTRY                      20065100
    BEGIN                                                               20065200
         STEPS;                                                         20065300
         IF LIBTOG THEN                                                 20065400
    BEGIN                                                               20065500
         IF KEY = SRCECOMP THEN                                         20065600
         IF SCTRL = PERIOD THEN STEPS ELSE ERR(81);                     20065700
    END;                                                                20065800
         IF KEY ! B5500 THEN ERR(0);                                    20065900
         WHILE KEY ! PERIOD DO STEPS;                                   20066000
    END SCE;                                                            20066100
PROCEDURE OCE;     % HANDLES OBJECT-COMPUTER ENTRY                      20066200
    BEGIN                                                               20066300
         STEPS;                                                         20066400
         IF LIBTOG THEN                                                 20066500
    BEGIN                                                               20066600
         IF KEY = OBJCOMP THEN                                          20066700
         IF SCTRL = PERIOD THEN STEPS ELSE ERR(81);                     20066800
    END;                                                                20066900
         IF KEY !B5500 THEN ERR(0);                                     20067000
         STEPS;                                                         20067100
         CMACHK;                                                        20067200
         IF KEY=MEMORY THEN                                             20067300
    BEGIN                                                               20067400
         CHECKNOT8;                                                     20067500
         IF SCTRL = SIZE THEN STEPS;                                    20067600
         IF KEY ! LITV OR ACCUM[0].SCF ! ITGRV THEN ERR(9) ELSE         20067700
          MEMORYSIZE ~ ICVI(FALSE);                                     20067800
         IF SCTRL = MODV    THEN MEMORYSIZE ~ MEMORYSIZE | 16384        20067900
         ELSE IF KEY ! WORDSV THEN ERR(0);                              20068000
         IF MEMORYSIZE > 28000 THEN MEMORYSIZE ~ 28000   ELSE           20068100
         IF MEMORYSIZE < 5000 THEN MEMORYSIZE ~ 5000;                   20068200
         STEPS;                                                         20068300
    END;                                                                20068400
         CMACHK;                                                        20068500
         IF KEY = DISKV THEN                                            20068600
    BEGIN                                                               20068700
         CHECKNOT8;                                                     20068800
         IF SCTRL = SIZE THEN STEPS;                                    20068900
         IF KEY ! LITV THEN ERR(10) ELSE                                20069000
         IF ACCUM[0].SCF = ITGRV                                        20069100
           THEN DISKSIZE ~ ICVI(FALSE)                                  20069200
           ELSE IF ACCUM[0].SCF = NUMV                                  20069300
           THEN DISKSIZE ~ ICVI(TRUE)                                   20069400
           ELSE ERR(10);                                                20069500
         IF SCTRL = MODV                                                20069600
          THEN DISKSIZE ~ DISKSIZE | 1200000                            20069700
         ELSE IF KEY ! WORDSV THEN ERR(0)                               20069800
         ELSE IF KEY = WORDSV OR KEY = MODV THEN STEPS;                 20069900
    END;                                                                20070000
         CMACHK;                                                        20070100
         IF KEY = SEGLMT THEN                                           20070200
    BEGIN                                                               20070300
         IF SCTRL = ISV THEN STEPS;                                     20070400
         IF KEY = LITV THEN % IF A NUMBER                               20070500
              IF MXSEGSZ ~ ICVI(FALSE) > 900 THEN                       20070600
    BEGIN                                                               20070700
              ERR(-8);                                                  20070800
              MXSEGSZ ~ 2048;                                           20070900
    END ELSE                                                            20071000
              MXSEGSZ ~ MXSEGSZ | 8                                     20071100
    ELSE                                                                20071200
         ERR(13);                                                       20071300
         STEPS;                                                         20071400
    END;                                                                20071500
         WHILE KEY ! PERIOD DO STEPS;                                   20071600
    END OCE;                                                            20071700
PROCEDURE SNE;     % HANDLES SPECIAL-NAMES ENTRY                        20071800
    BEGIN                                                               20071900
         INTEGER I,SKEY;                                                20072000
         REAL PINX;                                                     20072100
         LABEL XIT,LP,PLP,RECOV;                                        20072200
         IF MARGINA THEN GO TO XIT;                                     20072300
         STEPS;                                                         20072400
         IF LIBTOG THEN                                                 20072500
    BEGIN                                                               20072600
         IF KEY = SPCLNAME THEN                                         20072700
         IF SCTRL = PERIOD THEN STEPS ELSE ERR(81);                     20072800
    END;                                                                20072900
    LP:                                                                 20073000
         IF KEY } 10 AND Q.SCF = HARDWARENAME THEN                      20073100
    BEGIN                                                               20073200
         SKEY ~ KEY;                                                    20073300
         PINX ~ RSWD[(I~ACCUM[0].NXF).IR,I.IC].RSWDUSG;                 20073400
         IF SCTRL = ISV THEN STEPS;                                     20073500
         IF KEY ! IDV OR Q.SCF ! UNKID                                  20073600
          THEN BEGIN ERR(56); GO TO XIT END;                            20073700
           % ENTER MNEMONIC NAME AS HARDWARE NAME                       20073800
         IF (I ~ SCRAMBLENM) < 0                                        20073900
          THEN BEGIN ERR(239); GO TO XIT END;  % TABLE FULL             20074000
         RSWD[I.IR,I.IC]:=RSWD[I.IR,I.IC]&HARDWARENAME SCFF             20074100
         & SKEY ITFF & PINX [30:45:3];                                  20074200
         STEPS; CMACHK;                                                 20074300
         GO TO LP;                                                      20074400
    END  ELSE                                                           20074500
         IF KEY = PROGRAM THEN                                          20074600
    BEGIN                                                               20074700
         IF SCTRL ! IDV OR Q.SCF ! UNKID THEN                           20074800
    BEGIN                                                               20074900
         ERR(261);                                                      20075000
         GO TO RECOV;                                                   20075100
    END;                                                                20075200
         PINX ~ INFOENTER(Q.NXF);                                       20075300
         DRCT[Q.NXF].SCF ~ PID;                                         20075400
         IF0[PINX].SCF ~ PID ;                                          20075500
         IF SCTRL = ISV THEN STEPS;                                     20075600
         IF KEY = IDV THEN                                              20075700
    BEGIN                                                               20075800
         MACROGEN(PNMCO,PINX,Q.NXF);                                    20075900
         STEPS;                                                         20076000
    END  ELSE                                                           20076100
    BEGIN                                                               20076200
    PLP:                                                                20076300
         IF KEY ! LITV OR Q.SCF ! STRNGV OR ACCUM[1].SIZEF > 7 THEN     20076400
    BEGIN                                                               20076500
         ERR(262);                                                      20076600
         GO TO RECOV;                                                   20076700
    END;                                                                20076800
         IF3[PINX] ~ "       ";                                         20076900
         PUSHOVER(IF3[PINX],1,ACCUM[1],2,ACCUM[1].SIZEF);               20077000
         PINX ~ PINX+ 1;                                                20077100
         IF SCTRL = SLASH THEN BEGIN STEPS; GO TO PLP END;              20077200
    END;                                                                20077300
         CMACHK;                                                        20077400
         GO TO LP;                                                      20077500
    RECOV:                                                              20077600
         WHILE NOT (KEY = PERIOD OR KEY = CURRENCY OR KEY = DCMLPNT OR  20077700
           KEY = CODEV OR KEY = PROGRAM OR KEY } 10 AND Q.SCF =         20077800
           HARDWARENAME) DO STEPS;                                      20077900
         GO TO LP;                                                      20078000
    END  ELSE                                                           20078100
         IF KEY = CURRENCY AND GLDOL = "$" THEN                         20078200
    BEGIN                                                               20078300
         CHECKNOT8;                                                     20078400
         IF SCTRL = SIGNV THEN STEPS;                                   20078500
         IF KEY = ISV THEN STEPS;                                       20078600
         IF KEY ! LITV OR ACCUM[0].SCF ! STRNGV OR ACCUM[1].SIZEF ! 1   20078700
          THEN ERR(16)                                                  20078800
          ELSE GLDOL ~ ACCUM[1].[12:6];                                 20078900
         STEPS;                                                         20079000
         GO TO LP;                                                      20079100
    END;                                                                20079200
         CMACHK;                                                        20079300
         IF KEY = DCMLPNT AND GLCMMA = "," THEN                         20079400
    BEGIN                                                               20079500
         CHECKNOT8;                                                     20079600
         IF SCTRL = ISV THEN STEPS;                                     20079700
         IF KEY = COMMAV THEN                                           20079800
         BEGIN T1 ~ GLCMMA; GLCMMA ~ GLPRDV; GLPRDV ~ T1; END           20079900
         ELSE ERR(0);                                                   20080000
         STEPS;                                                         20080100
         GO TO LP;                                                      20080200
    END;                                                                20080300
         CMACHK;                                                        20080400
         IF KEY = CODEV THEN                                            20080500
         %%%% USED WITH REPORT WRITER %%%%                              20080600
    BEGIN                                                               20080700
         CHECKNOT8;                                                     20080800
         STEPS;                                                         20080900
         IF(Q.SCF=ITGRV OR Q.SCF=STRNGV)AND ACCUM[1].SIZEF = 1 THEN     20081000
% CHAR SIZE PROBLEM                                                     20081100
              T~ACCUM[1].[06:6] ELSE ERR(183);                          20081200
         IF SCTRL!IDV OR Q.SCF!UNKID THEN ERR(184) ELSE                 20081300
         DRCT[Q.NXF]~DRCT[IIX]&SPECIALREG[03:43:5]&T[16:32:16];         20081400
         STEPS;                                                         20081500
% NEED DEFINES                                                          20081600
    END  CODE STUFF;                                                    20081700
         IF KEY = PERIOD THEN GO TO XIT;                                20081800
         ERR(0);                                                        20081900
         WHILE NOT(KEY=IO OR KEY=FILECNTRL OR KEY=DATA OR EOFTOG)       20082000
              DO STEPS;                                                 20082100
    XIT:                                                                20082200
    END SNE;                                                            20082300
PROCEDURE FCE;     % HANDLES SYNTAX OF FILE-CONTROL                     20082400
    BEGIN                                                               20082500
         REAL OPT,LOC,NUMUNITS,FILTYPE,NBUF,FLL,FLH,ACSMODE,AKEY;       20082600
         LABEL XIT,RECOV,LP,SELC,RESERVEL,FILELIMITL,ACCESSL,           20082700
              ACTUALL;                                                  20082800
         BOOLEAN SELMSK;                                                20082900
         DEFINE RESTOG = SELMSK.[47:1] #,                               20083000
                FILTOG = SELMSK.[46:1] #,                               20083100
                ACCTOG = SELMSK.[45:1] #,                               20083200
                ACTTOG = SELMSK.[44:1] #,                               20083300
                SYMTOG = SELMSK.[43:1] #,                               20083400
                FCDECD = FCDEC(OPT,LOC,NUMUNITS,FILTYPE,NBUF,FLL,       20083500
                             FLH,ACSMODE,AKEY) #;                       20083600
INTEGER PROCEDURE HARDWARE(NUNITS); REAL NUNITS;                        20083700
    BEGIN                                                               20083800
         LABEL XIT,XITA;                                                20083900
         BOOLEAN ORB,BACKUPB;                                           20084000
         IF SCTRL = TOV THEN STEPS;                                     20084100
         IF KEY = LITV THEN                                             20084200
    BEGIN                                                               20084300
         IF ACCUM[0].SCF ! ITGRV THEN ERR(13);                          20084400
         NUNITS ~ ICVI(FALSE);                                          20084500
         IF SCTRL = SORTTAPE THEN                                       20084600
    BEGIN                                                               20084700
         IF NUNITS < 3 OR NUNITS > 5 THEN ERR(14);                      20084800
         SORTTAPES ~ NUNITS;                                            20084900
         HARDWARE ~ TPS;                                                20085000
         GO TO XIT;                                                     20085100
    END ELSE                                                            20085200
         IF KEY=STAR THEN IF SCTRL!LITV OR Q.SCF!ITGRV THEN ERR(113)    20085300
              ELSE                                                      20085400
    BEGIN                                                               20085500
         IF NUNITS > 20 OR NUNITS < 1 THEN ERR(242);                    20085600
         NUNITS.NROWS ~ NUNITS;                                         20085700
         NUNITS.SZROWS ~ ICVI(FALSE);                                   20085800
         STEPS;                                                         20085900
    END ELSE                                                            20086000
         IF KEY!DISKV THEN ERR(0) ELSE IF NUNITS<1 THEN ERR(0);         20086100
    END;                                                                20086200
         IF KEY=READER THEN HARDWARE ~ CR ELSE                          20086300
         IF KEY = TAPEV THEN HARDWARE ~ MT ELSE                         20086400
         IF KEY = PUNCHV THEN                                           20086500
    BEGIN                                                               20086600
         IF ORB ~ SCTRL=ORV THEN STEPS;                                 20086700
         IF BACKUPB ~ KEY=BACKUP THEN STEPS;                            20086800
         IF (HARDWARE ~ IF KEY=TAPEV THEN                               20086900
                           IF ORB THEN POT ELSE PUT ELSE                20087000
                           IF KEY=DISKV THEN                            20087100
                           IF ORB THEN POD ELSE PUD ELSE                20087200
                           IF BACKUPB THEN                              20087300
                           IF ORB THEN PTD ELSE PBTD ELSE               20087400
                           IF ORB THEN 0 ELSE CP) = 0 THEN ERR(15);     20087500
         IF KEY=TAPEV OR KEY = DISKV THEN GO TO XIT;                    20087600
         GO TO XITA;                                                    20087700
    END ELSE                                                            20087800
         IF KEY=REMOTEV THEN HARDWARE ~ REM ELSE                        20087900
         IF KEY = DISKV THEN                                            20088000
    BEGIN                                                               20088100
         HARDWARE ~ T1 ~ DK;                                            20088200
         IF NUNITS < 1 THEN NUNITS ~ 1;                                 20088300
         IF NUNITS.NROWS < 1 THEN NUNITS.NROWS ~ 1;                     20088400
    END  ELSE                                                           20088500
         IF KEY = KEYBOARD THEN HARDWARE ~ SPO ELSE                     20088600
         IF KEY = DISPLAYV THEN HARDWARE ~ DSP ELSE                     20088700
         IF KEY = MERGE THEN HARDWARE ~ MRG ELSE                        20088800
         IF KEY = SORTV THEN                                            20088900
    BEGIN                                                               20089000
         IF ESTCORE = 0 THEN ESTCORE ~ MEMORYSIZE;                      20089100
         IF SCTRL = DISKV THEN STEPS;                                   20089200
         IF KEY = PERIOD THEN BEGIN HARDWARE ~ DTS; GO TO XITA END;     20089300
         IF KEY = ANDV THEN STEPS;                                      20089400
         IF KEY ! LITV THEN ERR(13) ELSE                                20089500
    BEGIN                                                               20089600
         IF (ACCUM[0].SCF ! ITGRV) THEN ERR(13)                         20089700
         ELSE NUNITS ~ ICVI(FALSE);                                     20089800
    END;                                                                20089900
         IF NUNITS ! 0 THEN                                             20090000
          IF NUNITS < 3  OR NUNITS > 5 THEN ERR(12);                    20090100
         SORTTAPES ~ NUNITS;                                            20090200
         HARDWARE ~ DTS;                                                20090300
         IF (SCTRL = TAPEV OR KEY = SORTTAPE) THEN STEPS;               20090400
         GO TO XITA;                                                    20090500
    END  ELSE                                                           20090600
         IF KEY = PRINTER THEN                                          20090700
    BEGIN                                                               20090800
         IF ORB ~SCTRL = ORV THEN STEPS;                                20090900
         IF BACKUPB ~ KEY = BACKUP THEN STEPS;                          20091000
         IF (HARDWARE ~ IF KEY = TAPEV THEN                             20091100
                        IF ORB THEN LOT ELSE BUT ELSE                   20091200
                        IF KEY = DISKV THEN                             20091300
                        IF ORB THEN LOD ELSE BUD ELSE                   20091400
                        IF BACKUPB THEN                                 20091500
                        IF ORB THEN LDT ELSE BTD ELSE                   20091600
                        IF ORB THEN 0 ELSE LPO) = 0 THEN ERR(15);       20091700
         IF KEY = TAPEV OR KEY = DISKV THEN GO TO XIT;                  20091800
         GO TO XITA;                                                    20091900
    END  ELSE ERR(15);                                                  20092000
    XIT:                                                                20092100
         IF T1!DK THEN IF NUNITS.SZROWS!0 THEN ERR(15);                 20092200
         KEY ~ SCTRL;                                                   20092300
    XITA:                                                               20092400
    END HARDWARE;                                                       20092500
         STEPS;                                                         20092600
         IF LIBTOG THEN                                                 20092700
    BEGIN                                                               20092800
         IF KEY = FILECNTRL THEN                                        20092900
         IF SCTRL = PERIOD THEN STEPS ELSE ERR(81);                     20093000
    END;                                                                20093100
    LP:                                                                 20093200
         CMACHK;                                                        20093300
         IF KEY   ! SELECT THEN GO TO XIT;                              20093400
         SELMSK ~ FALSE;                                                20093500
         NUMUNITS~FLL~FLH~ACSMODE~0;                                    20093600
         AKEY~0;                                                        20093700
         NBUF~2;                                                        20093800
         CHECKNOT8;                                                     20093900
         IF BOOLEAN(OPT ~ REAL(SCTRL=OPTIONAL)) THEN STEPS;             20094000
         IF KEY ! IDV THEN BEGIN ERR(17); GO TO RECOV END;              20094100
         IF ACCUM[0].SCF ! UNKID THEN BEGIN ERR(17); GO TO RECOV END;   20094200
         LOC ~ ACCUM[0].NXF;                                            20094300
         IF SCTRL!ASSIGN THEN BEGIN ERR(0); GO TO RECOV END             20094400
         ELSE FILTYPE ~ HARDWARE(NUMUNITS);                             20094500
    SELC:                                                               20094600
         IF KEY=PERIOD OR KEY=SELECT THEN                               20094700
    BEGIN                                                               20094800
         IF ACSMODE = 2 AND NOT ACTTOG THEN ERR(260);                   20094900
         FCDECD;                                                        20095000
         IF KEY=PERIOD THEN STEPS;                                      20095100
         GO TO LP;                                                      20095200
    END;                                                                20095300
         CMACHK;                                                        20095400
         IF KEY = RESERVE THEN GO TO RESERVEL;                          20095500
         IF KEY = FILELIMIT THEN GO TO FILELIMITL;                      20095600
         IF KEY = ACCESSV THEN GO TO ACCESSL;                           20095700
         IF KEY = ACTUAL THEN GO TO ACTUALL;                            20095800
         IF KEY=PROCESSING THEN                                         20095900
    BEGIN                            % NOT IMPLEMENTED                  20096000
         IF SCTRL=MODE THEN STEPS;                                      20096100
         IF KEY!ISV THEN BEGIN ERR(0); GO TO RECOV; END;                20096200
         STEPS;                                                         20096300
         IF NOT(KEY=SEQUENTIAL OR KEY=RANDOMV) THEN BEGIN ERR(0);       20096400
              GO TO RECOV; END;                                         20096500
         IF KEY=SEQUENTIAL THEN BEGIN STEPS; GO TO SELC; END;           20096600
         IF SCTRL=FORV THEN STEPS;                                      20096700
         IF KEY!LITV OR ACCUM[0].SCF!ITGRV THEN BEGIN ERR(13);          20096800
              GO TO RECOV; END;                                         20096900
         IF SCTRL!RECORD THEN BEGIN ERR(0); GO TO RECOV; END;           20097000
         STEPS;                                                         20097100
         GO TO SELC;                                                    20097200
    END;                                                                20097300
         ERR(0); FCDECD; GO TO RECOV;                                   20097400
    RESERVEL:                                                           20097500
%%% HOW ABOUT IDENTIFIER ALTERNATE AREAS                                20097600
    BEGIN                                                               20097700
         IF RESTOG THEN ERR(27) ELSE RESTOG ~ TRUE;                     20097800
         IF SCTRL = NO  THEN NBUF ~ 1 ELSE                              20097900
         IF KEY ! LITV OR ACCUM[0].SCF ! ITGRV THEN ERR(13) ELSE        20098000
          NBUF  ~ ICVI(FALSE) + 1;                                      20098100
         IF SCTRL = ALTERNATE THEN STEPS;                               20098200
         IF KEY = AREA THEN STEPS;                                      20098300
         IF FILTYPE } 50 AND NBUF ! 2 THEN                              20098400
    BEGIN                                                               20098500
         NBUF ~ 2;                                                      20098600
         ERR(-19);                                                      20098700
    END;                                                                20098800
         GO TO SELC;                                                    20098900
    END;                                                                20099000
    FILELIMITL:                                                         20099100
%%% WHAT IF MORE THAN ONE PAIR                                          20099200
    BEGIN                                                               20099300
         IF FILTOG THEN ERR(27) ELSE FILTOG ~ TRUE;                     20099400
         IF SCTRL = ARE OR KEY = ISV THEN STEPS;                        20099500
         IF KEY = IDV THEN                                              20099600
         MACROGEN(FLLM,LOC,Q.NXF)      % LOW FILE LIMIT                 20099700
         ELSE                                                           20099800
         IF KEY = LITV THEN                                             20099900
    BEGIN                                                               20100000
         IF ACCUM[0].SCF ! ITGRV THEN ERR(13) ELSE                      20100100
          FLL ~ ICVI(FALSE);                                            20100200
    END                                                                 20100300
         ELSE ERR(0);                                                   20100400
         IF SCTRL ! THRUV THEN BEGIN ERR(0); GO TO RECOV END;           20100500
         IF SCTRL = IDV THEN                                            20100600
         MACROGEN(FLHM,LOC,Q.NXF)      % HIGH FILE LIMIT                20100700
         ELSE                                                           20100800
         IF KEY = ENDV THEN                                             20100900
         ELSE                                                           20101000
         IF KEY = LITV THEN                                             20101100
    BEGIN                                                               20101200
         IF ACCUM[0].SCF ! ITGRV THEN ERR(13) ELSE                      20101300
         FLH ~ ICVI(FALSE);                                             20101400
    END;                                                                20101500
         STEPS;                                                         20101600
         GO TO SELC;                                                    20101700
    END FILELIMITS;                                                     20101800
    ACCESSL:                                                            20101900
    BEGIN                                                               20102000
         IF ACCTOG THEN ERR(27) ELSE ACCTOG ~ TRUE;                     20102100
         IF FILTYPE!DK THEN ERR(15);                                    20102200
         IF SCTRL = MODE THEN KEY ~ SCTRL;                              20102300
         IF KEY = ISV THEN STEPS;                                       20102400
         IF KEY=SEQUENTIAL THEN ACSMODE ~ 0 ELSE                        20102500
         IF KEY = RANDOMV THEN ACSMODE ~ 1 ELSE ERR(0);                 20102600
         STEPS;                                                         20102700
         GO TO SELC;                                                    20102800
    END;                                                                20102900
    ACTUALL:                                                            20103000
    BEGIN                                                               20103100
         IF ACTTOG THEN ERR(27) ELSE ACTTOG ~ TRUE;                     20103200
         IF FILTYPE!DK THEN ERR(15);                                    20103300
         IF SCTRL = KEYS THEN STEPS;                                    20103400
         IF KEY = ISV THEN STEPS;                                       20103500
         IF KEY ! IDV THEN ERR(18) ELSE                                 20103600
         MACROGEN(ACKM,LOC,Q.NXF);     % ACTUAL KEY                     20103700
         AKEY~1;                                                        20103800
         STEPS;                                                         20103900
         GO TO SELC;                                                    20104000
    END;                                                                20104100
    RECOV:                                                              20104200
         WHILE KEY ! PERIOD DO STEPS;                                   20104300
         STEPS;                                                         20104400
         IF NOT EOFTOG THEN GO TO LP;                                   20104500
    XIT:                                                                20104600
    END FCE;                                                            20104700
PROCEDURE IOCE;  % HANDLES SYNTAX OF I-O CONTROL ENTRY                  20104800
    BEGIN                                                               20104900
         REAL TECH,RERN;                                                20105000
         BOOLEAN NOHANG;                                                20105100
         LABEL LP,RECOV,RECOVA,LE,XIT;                                  20105200
LABEL LX;                                                               20105300
              % ******                                                  20105400
         STEPS;                                                         20105500
         IF LIBTOG THEN                                                 20105600
    BEGIN                                                               20105700
         IF KEY = IOCNTRL THEN                                          20105800
         IF SCTRL ! PERIOD THEN ERR(81) ELSE STEPS;                     20105900
    END;                                                                20106000
    LP:                                                                 20106100
         IF KEY = DATA THEN GO TO XIT;                                  20106200
         CHECKNOT8;                                                     20106300
         IF KEY = APPLY THEN                                            20106400
    BEGIN                                                               20106500
         NOHANG ~ TRUE;                                                 20106600
         WHILE NOT(SCTRL=MULTIPLE OR KEY=SAMEV OR KEY=RERUN OR          20106700
                   KEY = PERIOD) DO;                                    20106800
    END;                                                                20106900
         SMICHK;                                                        20107000
         IF KEY = MULTIPLE THEN                                         20107100
    BEGIN                                                               20107200
         NOHANG ~ TRUE;                                                 20107300
         IF SCTRL ! FILEV THEN GO TO RECOV;                             20107400
         IF SCTRL = TAPEV THEN STEPS;                                   20107500
         IF KEY = CONTAINS THEN STEPS;                                  20107600
         WHILE KEY = IDV DO                                             20107700
    BEGIN                                                               20107800
         IF Q.SCF ! FDV THEN ERR(17);                                   20107900
         IF SCTRL = POSITION THEN                                       20108000
         IF SCTRL ! LITV AND Q.SCF ! ITGRV THEN ERR(13) ELSE STEPS;     20108100
         CMACHK;                                                        20108200
    END;                                                                20108300
    END;                                                                20108400
         SMICHK;                                                        20108500
         IF KEY = SAMEV THEN                                            20108600
    BEGIN     % XXXXX  TO BE IMPLEMENTED                                20108700
         NOHANG ~ TRUE;                                                 20108800
         IF SCTRL = RECORD OR KEY = SORTV THEN STEPS;                   20108900
         IF KEY = AREA THEN STEPS;                                      20109000
         IF KEY = FORV THEN STEPS;                                      20109100
         WHILE KEY = IDV DO BEGIN STEPS; CMACHK END;                    20109200
    END;                                                                20109300
         SMICHK;                                                        20109400
         IF KEY = RERUN THEN                                            20109500
    BEGIN                                                               20109600
         NOHANG ~ TRUE;                                                 20109700
         TECH ~ 0;                                                      20109800
         RERN ~ 1;                                                      20109900
         IF SCTRL= ON THEN IF SCTRL!TAPEV THEN ERR(0) ELSE RERN ~2;     20110000
         IF KEY = EVERY THEN STEPS;                                     20110100
         IF KEY = ENDV THEN STEPS;                                      20110200
         IF KEY = OFV THEN STEPS;                                       20110300
         IF KEY = REEL THEN STEPS                                       20110400
    ELSE BEGIN                                                          20110500
         IF KEY ! LITV THEN ERR(0) ELSE                                 20110600
         IF Q.SCF ! ITGRV THEN ERR(13) ELSE                             20110700
    BEGIN                                                               20110800
         TECH ~ ICVI(FALSE);                                            20110900
         IF SCTRL = CLOCKUNITS THEN ERR(113);                           20111000
         IF KEY = RECORDS THEN STEPS;                                   20111100
         IF RERN ! 2 THEN ERR(24);                                      20111200
    END;                                                                20111300
    END;                                                                20111400
         IF KEY = OFV THEN STEPS;                                       20111500
         IF KEY = IDV THEN                                              20111600
         IF Q.SCF = SDV THEN ERR(23) ELSE                               20111700
         IF FIB[Q.FIBF,4].FILTYF ! MT AND RERN = 1 THEN ERR(24) ELSE    20111800
         IF Q.SCF ! FDV THEN ERR(17) ELSE                               20111900
    BEGIN                                                               20112000
         FIB[Q.SCF,9].RRNL ~ TECH;     % NUMBER OF RECORDS FOR BREAK    20112100
         FIB[Q.SCF,4].RERUNF ~ IF TECH ! 0 THEN 0 ELSE RERN;            20112200
    END ELSE                                                            20112300
         ERR(0);                                                        20112400
         STEPS;                                                         20112500
    END RERUN;                                                          20112600
         IF KEY = PERIOD THEN STEPS;                                    20112700
         IF NOT NOHANG THEN GO TO XIT;                                  20112800
         NOHANG ~ FALSE;                                                20112900
         GO TO LP;                                                      20113000
    RECOV:                                                              20113100
         ERR(0);                                                        20113200
    RECOVA:                                                             20113300
         IF KEY = PERIOD THEN GO TO LP;                                 20113400
         IF KEY < 10 OR Q.SCF ! 1 THEN                                  20113500
    BEGIN                                                               20113600
         STEPS;                                                         20113700
         IF NOT EOFTOG THEN GO TO RECOVA ELSE GO TO XIT;                20113800
    END;                                                                20113900
         GO TO LP;                                                      20114000
    XIT:                                                                20114100
    END IOCE;                                                           20114200
%******************ENVIRONMENT DIVISION DRIVER STARTS HERE**************20114300
         IF SCTRL ! DIVISION THEN GO TO ERP;                            20114400
         IF SCTRL ! PERIOD THEN GO TO ERP;                              20114500
         IF SCTRL ! CONFIGURATION THEN GO TO ERP;                       20114600
    L1:  CHECKWAS8;                                                     20114700
         IF SCTRL ! SECTION THEN GO TO ERP;                             20114800
         IF SCTRL ! PERIOD THEN GO TO ERP;                              20114900
         IF SCTRL ! SRCECOMP THEN GO TO ERP;                            20115000
    L2:  CHECKWAS8;                                                     20115100
         IF SCTRL ! PERIOD THEN GO TO ERP;                              20115200
         COPTOG ~ TRUE;                                                 20115300
         SCE;                                                           20115400
         COPTOG ~ FALSE;                                                20115500
         IF SCTRL ! OBJCOMP THEN GO TO ERP;                             20115600
    L3:  CHECKWAS8;                                                     20115700
         IF SCTRL ! PERIOD THEN GO TO ERP;                              20115800
         COPTOG ~ TRUE;                                                 20115900
         OCE;                                                           20116000
         COPTOG ~ FALSE;                                                20116100
         IF SCTRL = SPCLNAME THEN                                       20116200
    BEGIN                                                               20116300
    L4:  CHECKWAS8;                                                     20116400
         IF SCTRL ! PERIOD THEN GO TO ERP;                              20116500
         COPTOG ~ TRUE;                                                 20116600
         SNE;                                                           20116700
         COPTOG ~ FALSE;                                                20116800
         IF KEY = PERIOD THEN STEPS;                                    20116900
    END;                                                                20117000
         IF KEY = IO THEN                                               20117100
    BEGIN                                                               20117200
    L5:  CHECKWAS8;                                                     20117300
         IF SCTRL ! SECTION THEN GO TO ERP;                             20117400
         IF SCTRL ! PERIOD THEN GO TO ERP;                              20117500
         IF SCTRL ! FILECNTRL THEN GO TO ERP;                           20117600
    L6:  IF SCTRL ! PERIOD THEN GO TO ERP;                              20117700
    L8:  COPTOG ~ TRUE;   FCE;                                          20117800
         COPTOG ~ FALSE;                                                20117900
         IF KEY = IOCNTRL THEN                                          20118000
    BEGIN                                                               20118100
    L7:  CHECKWAS8;                                                     20118200
         IF SCTRL ! PERIOD THEN GO TO ERP;                              20118300
    L9:  COPTOG ~ TRUE;   IOCE;                                         20118400
         COPTOG ~ FALSE;                                                20118500
    END;                                                                20118600
    END;                                                                20118700
         IF KEY = DATA THEN GO TO XIT;                                  20118800
    ERP: ERR(0);                                                        20118900
    L0:  IF KEY = DATA THEN GO TO XIT;                                  20119000
         IF KEY = CONFIGURATION THEN GO TO L1;                          20119100
         IF KEY = SRCECOMP THEN GO TO L2;                               20119200
         IF KEY = OBJCOMP THEN GO TO L3;                                20119300
         IF KEY = SPCLNAME THEN GO TO L4;                               20119400
         IF KEY = IO THEN GO TO L5;                                     20119500
         IF KEY = FILECNTRL THEN GO TO L6;                              20119600
         IF KEY = IOCNTRL THEN GO TO L7;                                20119700
         IF NXKEY = SELECT THEN GO TO L8;                               20119800
         IF NXKEY = APPLY THEN GO TO L9;                                20119900
         IF SCTRL!PROCEDUREV AND NOT EOFTOG THEN GO TO L0;              20120000
    XIT:                                                                20120100
    END ENVIRONMENT DIVISION;                                           20120200
%*******      D A T A   D I V I S I O N  ********                       30000000
    BEGIN                                                               30000100
REAL     OFSET,    % POSITION IN RECORD AT WHICH ITEM STARTS            30000200
         STI,      % NUMBER OF PICTURE GROUPS IN STK                    30000300
         ASIZE,    % ACTUAL SIZE OF ITEM                                30000400
         CW , DW ,      % USED FOR 77 LEVELS                            30000500
         PSIZE,    % SIZE SPECIFIED BY PICTURE STRING                   30000600
         BADR,     % BASE ADDRESS OF RECORD                             30000700
         RDBADR,   % BADDF OF REDEFINED DATA-NAME                       30000800
         SINFO,    % LOCATION OF ITEM IN INFO                           30000900
         OCCI,     % INFO INDEX OF LAST ITEM TO HAVE OCCURS             30001000
         SDICT,    % LOCATION OF ITEM NAME IN DICT                      30001100
         NLVL,     % LEVEL NUMBER OF NEXT ITEM TO BE PROCESSED          30001200
         RDLVL,    % REDEFINES LIMIT LEVEL NUMBER                       30001300
         LBLR,                                                          30001400
         RDNI,     % INFO INDEX OF NAME  BEING REDEFINED                30001500
         HLVL,     % HIERARCHIAL LEVEL                                  30001600
         NRDF,     % NESTED REDEFINES                                   30001700
         SECT,     % INDICATES WHICH SECTION BEING COMPILED             30001800
         LCLASS,   % DECLARED USAGE                                     30001900
         LUSE,     % DECLARED CLASS                                     30002000
         LSYN,     % 1=SYNC LEFT, 2=SYNC RIGHT                          30002100
         LTRLQ,    % Q FOR LITERAL                                      30002200
         LJST,     % 1=JUST LEFT, 2=JUST RIGHT                          30002300
         LILT,     % FLOAT LEAVING OR ZS  LEAVING                       30002400
         LPLT;     % + = POINT LEFT, - = POINT RIGHT                    30002500
BOOLEAN  IM,       % ITEM MASK                                          30002600
         LBLRTOG,                                                       30002700
         FLRT,     % TRUE IF FILLER                                     30002800
         LV77T,    % TRUE WHEN OK TO DO LEVEL 77                        30002900
         PCMASK,   % MASK OF CHARACTERS IN PICTURE                      30003000
         WRDO,     % TRUE IF WORD ORIENTED                              30003100
         GRPCDN,        % TRUE IF GROUP HAS CONDITION-NAME              30003200
         GRDT;     % TRUE IF PROCESSING IN REDEFINES RANGE              30003300
DEFINE   RAYSZ = 50#,        COMMENT   MAXIMUM NUMBER OF REPORTS;       30003400
         FLIN  = [18:15]#,         % FILE INFO INDEX                    30003500
         RDCT  = [33:15]#;         % REPORT DICT INDEX                  30003600
REAL     NOR;                COMMENT   NUMBER OF REPORTS;               30003700
DEFINE   CMACHK = BEGIN IF KEY=COMMA THEN STEPS;                        30003800
                        IF KEY=ANDV THEN STEPS END#;                    30003900
DEFINE   GETSS = FOR T1~SINFO STEP -IFSZ WHILE IF0[T1].LVLF!1 DO#;      30004000
              % STUFF TO HANDLE PICTURE                                 30004100
                   % DEFINES FOR CONTENTS OF PICTURE MASK               30004200
DEFINE                                                                  30004300
         PCX = PCMASK.[47:1]#,     % X                                  30004400
         PCA = PCMASK.[46:1]#,     % A                                  30004500
         PCB = PCMASK.[45:1]#,     % B                                  30004600
         PC0 = PCMASK.[44:1]#,     % 0 (ZERO)                           30004700
         PC9 = PCMASK.[43:1]#,     % 9                                  30004800
         PCV = PCMASK.[42:1]#,     % V                                  30004900
         PCS = PCMASK.[41:1]#,     % S OR J                             30005000
         PCP = PCMASK.[40:1]#,     % P                                  30005100
         PCZ = PCMASK.[39:1]#,     % Z                                  30005200
         PCDP= PCMASK.[38:1]#,     % .                                  30005300
        PCAST= PCMASK.[37:1]#,    % *                                   30005400
        PCPLS= PCMASK.[36:1]#,    % +                                   30005500
         PCMN= PCMASK.[35:1]#,    % -                                   30005600
         PCDB= PCMASK.[34:1]#,    % DB                                  30005700
         PCCR= PCMASK.[33:1]#,    % CR                                  30005800
        PCCMA= PCMASK.[32:1]#,    % ,                                   30005900
         PCDOL = PCMASK.[31:1]#,  % $                                   30006000
         PCIC = PCMASK.[30:1] #,  % INSERT CHAR                         30006100
         PCL = PCMASK.[26:1]#,    % L                                   30006200
         PCDPSPEC = PCMASK.[30:1]#;  %SPECIAL DECIMAL POINT FOR ASTERSK 30006300
              % DEFINES FOR STK WHEN HOLDING PICTURE                    30006400
DEFINE   CHF = [42:6]#,    % EDIT CHARACTER                             30006500
         CNTF= [18:15]#,  % # OF OCCURENES                              30006600
         TOCNTF = 18:33:15#;                                            30006700
DEFINE             % DEFINES FOR CLASSES AS INDICATED BY MASK           30006800
         ABTYPE =       % ALPHABETIC                                    30006900
                    REAL(PCMASK.[27:21])=2#,                            30007000
         ANTYPE =       % ALPHANUMERIC                                  30007100
                   (REAL(PCMASK.[46:2]) ! 0)                            30007200
              AND (REAL(PCMASK.[27:16]) = 0)                            30007300
              AND  (REAL(PCMASK.[44:2]) = 0)#,                          30007400
         EATYPE =       % EDITED ALPHA                                  30007500
                   (REAL(PCMASK.[43:5]) ! 0)                            30007600
              AND (REAL(PCMASK.[27:16]) = 0)#,                          30007700
         NMTYPE  =      % NUMERIC - NO EDIT TABLE                       30007800
                   (REAL(PCMASK.[40:4]) ! 0)                            30007900
              AND (REAL(PCMASK.[27:13]) = 0)                            30008000
              AND  (REAL(PCMASK.[44:4]) = 0)#,                          30008100
         NMPTYPE =      % NUMERIC - WITH EDIT TABLE                     30008200
                   (REAL(PCMASK.[40:5]) ! 0)                            30008300
              AND (REAL(PCMASK.[27:13]) = 0)                            30008400
              AND  (REAL(PCMASK.[45:3]) = 0)#,                          30008500
         ENTYPE  =      % EDITED NUMERIC                                30008600
                   (REAL(PCMASK.[27:19]) ! 0)                           30008700
              AND  (REAL(PCMASK.[46:2]) = 0)#;                          30008800
DEFINE                                                                  30008900
              % ELEMENTARY THINGS                                       30009000
         PCT = IM.[47:1]#,    % PICTURE                                 30009100
         BWZT = IM.[46:1]#,   % BLANK WHEN ZERO                         30009200
         SYCT = IM.[45:1]#,   % SYNCHRONIZED                            30009300
         JST = IM.[43:1]#,    % JUSTIFIED                               30009400
              % EITHER GROUP OR ELEMENTARY                              30009500
         VAT = IM.[32:1]#,   % VALUE                                    30009600
         OCCT= IM.[31:1]#,   % OCCURS                                   30009700
         SZVT= IM.[30:1]#,   % VARIABLE SIZE                            30009800
         SZT = IM.[29:1]#,   % FIXED SIZE                               30009900
         RDT = IM.[27:1]#,   % REDEFINES                                30010000
         RNT = IM.[26:1]#,   % RENAMES                                  30010100
         UST =IM.[24:1]#;    % USAGE                                    30010200
PROCEDURE RNCPY;   % HANDLES SYNTAX AND SET-UP OF RENAMES               30010300
    BEGIN                                                               30010400
                   % SINFO = INFO OF DN1                                30010500
    REAL DN2,      % INFO OF DN2                                        30010600
         DN3,      % INFO OF DN3                                        30010700
         LI,                                                            30010800
         LSIZE;                                                         30010900
    BOOLEAN DNG;                                                        30011000
    LABEL XIT,LP,LPA,LPB;                                               30011100
         ASIZE ~ 0;                                                     30011200
         DECTOG~FALSE;                                                  30011300
         STEPS;                                                         30011400
         GETSS;                                                         30011500
         T~REAL(SDNSCAN(T1-1,0,FALSE));                                 30011600
         DECTOG~TRUE;                                                   30011700
         IF KEY!IDV THEN BEGIN ERR(18);GO TO XIT END;                   30011800
         IF Q.SCF ! ITM   THEN BEGIN ERR(50); GO TO XIT END;            30011900
         DN2 ~ Q.NXIF;                                                  30012000
         IF (T~IF0[DN2].LVLF) = 1 OR T = 66 OR                          30012100
          T = 77 OR T = 88 THEN BEGIN ERR(51); GO TO XIT END;           30012200
         IF IF3[DN2].BADDF ! IF3[SINFO].BADDF THEN ERR(55);             30012300
         IF IF1[DN2].OCCF ! 0 THEN ERR(52);                             30012400
         IF DNSCAN = THRUV THEN                                         30012500
    BEGIN                                                               30012600
         DECTOG~FALSE;                                                  30012700
         STEPS;                                                         30012800
         T~REAL(SDNSCAN(T1-1,0,FALSE));                                 30012900
         DECTOG ~ TRUE                                                  30013000
    END;                                                                30013100
         IF KEY = IDV THEN                                              30013200
    BEGIN               % FORM DN1 RENAMES DN2 THRU DN3                 30013300
         IF Q.SCF ! ITM  THEN BEGIN ERR(50); GO TO XIT END;             30013400
         DN3 ~ Q.NXIF;                                                  30013500
         IF (T ~ IF0[DN3].LVLF) = 1 OR T = 66 OR                        30013600
          T = 77 OR T = 88 THEN BEGIN ERR(51); GO TO XIT END;           30013700
         IF IF3[DN3].BADDF ! IF3[SINFO].BADDF THEN ERR(55);             30013800
         IF  IF1[DN3].OCCF ! 0 THEN ERR(52);                            30013900
         IF2[SINFO].GRPF ~ 1;                                           30014000
         LI ~ DN2;                                                      30014100
         IF DN2 } DN3 THEN BEGIN ERR(54); GO TO XIT END;                30014200
         DNG ~ IF2[DN3].GRPF = 1;                                       30014300
         LSIZE ~ 0;                                                     30014400
    LP:            % SUM UP SIZE OF RENAMED AREA                        30014500
         IF BOOLEAN(IF2[LI].VARF) THEN ERR(53);                         30014600
         T ~ IF1[LI];                                                   30014700
         IF BOOLEAN(IF2[LI].GRPF)                                       30014800
          THEN IF T.OCCF > 1                                            30014900
              THEN LSIZE ~ LSIZE + ((T.OCCF-1) | T.LGHF)                30015000
              ELSE                                                      30015100
          ELSE IF T.OCCF ! 0                                            30015200
              THEN LSIZE ~ LSIZE + (T.OCCF | T.LGHF)                    30015300
              ELSE LSIZE ~ LSIZE + T.LGHF;                              30015400
         LI ~ LI + IFSZ;   % POINT AT NEXT ITEM                         30015500
         IF LI { DN3 THEN GO TO LP;                                     30015600
         IF DNG THEN IF IF2[LI].GRPF=0                                  30015700
          THEN GO TO LP;                                                30015800
         STEPS;                                                         30015900
         GO TO XIT;                                                     30016000
    END;                                                                30016100
                   % FORM DN1 RENAMES DN2                               30016200
         LSIZE ~ IF1[DN2].LGHF;                                         30016300
         IF (T ~IF2[DN2]).VARF = 1 THEN ERR(53);                        30016400
         IF T.SUBF ! 0 THEN ERR(52);                                    30016500
    XIT:                                                                30016600
         T ~ IF1[SINFO]; T.LGHF ~ LSIZE; T.OFSF ~ IF1[DN2].OFSF;        30016700
         IF1[SINFO] ~ T;                                                30016800
         T ~ IF2[SINFO];                                                30016900
         T1 ~ 0;                                                        30017000
         T1.GRPF ~ T.GRPF;                                              30017100
         T1.USF ~ IF2[DN2].USF;                                         30017200
         T1.SZF~LSIZE;                                                  30017300
         T1.CLF ~ AN;                                                   30017400
         IF2[SINFO]~T1;                                                 30017500
         IF KEY ! PERIOD THEN ERR(0);                                   30017600
         WHILE KEY !PERIOD DO STEPS;                                    30017700
    END RNCPY;                                                          30017800
PROCEDURE PICTUREPROCESS;    % SCANS AND SETS UP PICTURE CHARACTERS     31000000
    BEGIN                                                               31000100
INTEGER SO;                                                             31000200
    LABEL LA,DONE,NUMOUT;                                               31000300
    REAL PCSIZE,T,CNT,CHR;                                              31000400
    BOOLEAN DONETOG;                                                    31000500
    LABEL XIT,LP,LSJ,PERR;                                              31000600
INTEGER STREAM PROCEDURE REBILD(D,DN,S,N,SN);                           31000700
         VALUE  DN,S,N;                                                 31000800
    BEGIN LABEL L,L1,L3;                                                31000900
         DI ~ D; DI ~ DI+DN;                                            31001000
         SI ~ S;                                                        31001100
         SI ~ SI-1;                                                     31001200
         IF SC=" " THEN                                                 31001300
    BEGIN                                                               31001400
         DS ~ CHR;                                                      31001500
         GO TO L3;                                                      31001600
    END;                                                                31001700
         SI ~ SI+1;                                                     31001800
         N (IF SC=" " THEN JUMP OUT;                                    31001900
            TALLY ~ TALLY +1;                                           31002000
            DS ~ CHR; );                                                31002100
         DI ~ DI - 1; D ~ DI;                                           31002200
         S ~ SI; DI ~ SN; SI ~ LOC S; DS ~ WDS; % SAVE PBS              31002300
         SI ~ D;                                                        31002400
         IF SC=";" THEN GO TO L1 ELSE                                   31002500
         IF SC="." THEN                                                 31002600
    BEGIN                                                               31002700
    L1:                                                                 31002800
         REBILD ~ TALLY;                                                31002900
         DI ~ LOC REBILD;                                               31003000
         IF SC=";" THEN DS ~ LIT"8" ELSE DS ~ LIT"+";                   31003100
         GO TO L;                                                       31003200
    END ELSE SI ~ SI+1;                                                 31003300
         REBILD ~ TALLY;                                                31003400
    L:                                                                  31003500
         S ~SI; DI ~ S; DS ~ LIT " ";                                   31003600
    L3:                                                                 31003700
    END REBILD;                                                         31003800
INTEGER STREAM PROCEDURE SCANOUT(S,INC);%SCANS PICTURE STRINGS,RETURN   31003900
         VALUE INC;                     %NUMBER OF SAME-CONSECTIVE CHRS 31004000
    BEGIN                               %IN [42:6] THE ACTUAL CHR [36:6]31004100
         TALLY ~ 1;                                                     31004200
         SI ~ S; SI ~ SI + INC;                                         31004300
         IF SC= " " THEN TALLY ~ 1 ELSE                                 31004400
    BEGIN                                                               31004500
         INC ~ SI;  DI ~ INC; DI ~ DI +1;                               31004600
         30 (IF SC=DC THEN TALLY ~ TALLY + 1 ELSE JUMP OUT);            31004700
    END;                                                                31004800
         SCANOUT ~ TALLY;                                               31004900
         DI ~ LOC SCANOUT;                                              31005000
         IF SC = " " THEN DS ~ LIT "+"  ELSE DI ~ DI+1;                 31005100
         DI ~ DI + 5;                                                   31005200
         SI ~ SI-1; DS ~ CHR;                                           31005300
    END SCANOUT;                                                        31005400
         GSER ~ PCSIZE ~ 0;                                             31005500
         STI ~ -1;                                                      31005600
         PCMASK ~ FALSE;                                                31005700
         SO ~ 10;  % 1 ST CHR OF ENTRY IN XACCUM                        31005800
         IF NXKEY = ISV THEN STEPS;                                     31005900
         IF NXKEY = LITV THEN                                           31006000
         IF (T~XACUM[0].LSGF) ! 0 THEN                                  31006100
    BEGIN                                                               31006200
         STK[STI~STI+1] ~ (IF BOOLEAN(T) THEN "-" ELSE "+")&1[TOCNTF];  31006300
         IF BOOLEAN(T) THEN PCMN~TRUE ELSE PCPLS ~ TRUE;                31006400
         PCSIZE ~ PCSIZE + 1;                                           31006500
    END;                                                                31006600
         IF XACUM[0].SCF = NUMV THEN                                    31006700
    BEGIN     % RESTORE PERIOD REMOVED BY SCANNER                       31006800
         PUSHOVER(TMP[0],0, XACUM[(CNT~SO+(T~ XACUM[1].SIZEF) -         31006900
                        (T1 ~ XACUM[0].ITF)).WIX],CNT.CIX,T1);          31007000
         FILLWITHCHR( XACUM[CNT.WIX],CNT.CIX,".",1);                    31007100
         PUSHOVER( XACUM[(CNT~CNT+1).WIX],CNT.CIX,TMP[0],0,T1);         31007200
         SO ~ SO + 1;                                                   31007300
         PCSIZE ~ PCSIZE + 1;                                           31007400
    END;                                                                31007500
         SO ~ SO +  XACUM[1].SIZEF;  % SKIP PART OF                     31007600
                                       % STRING ALREADY                 31007700
                                   %    IN XACUM                        31007800
         PCSIZE ~ PCSIZE + XACUM[1].SIZEF;                              31007900
    LA:       % SCAN REST OF PICTURE IN TO XACCUM                       31008000
         IF PDT THEN IF GETC(PBS,1) ! " " THEN                          31008100
    BEGIN                                                               31008200
         PDT ~ FALSE;        % TAKE CARE OF CASE 99.. WHERE SCANNER     31008300
         PBS ~ ((T~(8|PBS.[33:15])+PBS.[18:15]-1)DIV 8)&T[30:45:3];     31008400
                             % SKIPS OVER FIRST ".", SETTING PDT TRUE.  31008500
         COUNT ~ COUNT+1;                                               31008600
    END;                     % (SEE CODASYL 6.31.5 P-5, EDITING RULES)  31008700
         CNT ~ REBILD( XACUM[SO.WIX],SO.CIX,PBS,COUNT,PBS);             31008800
         T ~ IF BOOLEAN(CNT.[1:1]) THEN "." ELSE " ";                   31008900
         COUNT ~ COUNT-CNT.[42:6];                                      31009000
         SO ~ SO+(CNT~CNT.[42:6]-REAL(CNT.[1:2]!0));                    31009100
         PCSIZE ~ PCSIZE + CNT;                                         31009200
         IF COUNT{0 THEN                                                31009300
    BEGIN     % CARD SPLIT-MAYBE                                        31009400
         CTOG ~ TRUE;                                                   31009500
         READACARD;                                                     31009600
         DEBLANK;                                                       31009700
         IF CTOG THEN GO TO LA;                                         31009800
    END;                                                                31009900
         IF T = "." OR PDT THEN        % TERMINATING PERIOD             31010000
              BEGIN PDT ~ FALSE; NXKEY ~ PERIOD; END ELSE               31010100
         NXKEY ~ -1;                                                    31010200
         IF PCSIZE  > 30 THEN ERR(71);                                  31010300
         SO ~ 10;                                                       31010400
    LP:  WHILE NOT DONETOG DO                                           31010500
    BEGIN                                                               31010600
         DONETOG ~ (T ~ SCANOUT( XACUM[SO.WIX],SO.CIX))<0;              31010700
         SO ~ SO +(CNT ~ T.[42:6]);                                     31010800
         CHR~T.[36:6];                                                  31010900
         PUSHOVER(T, 7   , XACUM[SO.WIX],SO.CIX,T~1);                   31011000
         IF T = "(" THEN                                                31011100
    BEGIN    % PAREN                                                    31011200
         DONETOG ~ (T ~ SCANOUT(XACUM[SO.WIX],SO.CIX)) LSS 0;           31011300
         SO ~ SO + T.[42:6];                                            31011400
         IF T.[42:6] ! 1 THEN                                           31011500
         BEGIN ACCUM[1] ~ 0&1 SIZEFF & T[12:36:6];  ERR(67); END;       31011600
         T1~CNT;                                                        31011700
         CNT ~ 0;                                                       31011800
NUMOUT:  PUSHOVER(T,7,XACUM[SO.WIX],SO.CIX,T ~ 1);                      31011900
         IF T { 9 THEN                                                  31012000
    BEGIN    % CONVERT REPEAT FIELD                                     31012100
         SO ~ SO + 1;                                                   31012200
         CNT ~ (CNT|10) + T;                                            31012300
         GO TO NUMOUT;                                                  31012400
    END;                                                                31012500
         CNT~CNT+T1-1;                                                  31012600
         DONETOG ~ ( T ~ SCANOUT( XACUM[SO.WIX],SO.CIX))<0;             31012700
         SO ~ SO + T.[42:6];                                            31012800
         IF T.[36:6] ! ")" OR T.[42:6] ! 1 THEN                         31012900
         BEGIN ACCUM[1] ~ 0&1 SIZEFF & T[12:36:6];  ERR(67); END;       31013000
    END;                                                                31013100
         IF CHR = "S" THEN                                              31013200
    BEGIN                                                               31013300
    LSJ: IF PCS OR CNT! 1 THEN GO TO PERR;                              31013400
         PCS ~ TRUE;                                                    31013500
    END  ELSE                                                           31013600
         IF CHR = "L" THEN                                              31013700
    BEGIN     % PICTURE IS VARIABLE SIZE                                31013800
         IF PCL OR CNT ! 1 THEN GO TO PERR;                             31013900
         PCL ~ TRUE;                                                    31014000
         GO TO LP;                                                      31014100
    END  ELSE                                                           31014200
         IF CHR = "J" THEN GO TO LSJ ELSE                               31014300
         IF CHR = "9" THEN PC9 ~ TRUE ELSE                              31014400
         IF CHR = "X" THEN PCX ~ TRUE ELSE                              31014500
         IF CHR = "A" THEN PCA ~ TRUE ELSE                              31014600
         IF CHR = "B" THEN PCB ~ TRUE ELSE                              31014700
         IF CHR = "0" THEN PC0 ~ TRUE ELSE                              31014800
         IF CHR = "V" THEN                                              31014900
    BEGIN                                                               31015000
         IF PCV OR PCDP OR CNT !1 THEN GO TO PERR;                      31015100
         PCV ~ TRUE;                                                    31015200
    END  ELSE                                                           31015300
         IF CHR = "P" THEN                                              31015400
    BEGIN                                                               31015500
         IF PCP THEN GO TO PERR;                                        31015600
         PCP ~ TRUE;                                                    31015700
    END  ELSE                                                           31015800
         IF CHR = "Z" THEN PCZ ~ TRUE ELSE                              31015900
         IF CHR = GLPRDV THEN                                           31016000
    BEGIN                                                               31016100
         IF PCV OR PCDP OR CNT !1 THEN GO TO PERR;                      31016200
         CHR ~ ".";                                                     31016300
         PCDP ~ TRUE;                                                   31016400
    END  ELSE                                                           31016500
         IF CHR = "*" THEN PCAST ~ TRUE ELSE                            31016600
         IF CHR = "$" THEN PCDOL ~ TRUE ELSE                            31016700
         IF CHR = "+" THEN PCPLS ~ TRUE ELSE                            31016800
         IF CHR = "-" THEN PCMN ~ TRUE ELSE                             31016900
         IF CHR = GLCMMA THEN                                           31017000
    BEGIN                                                               31017100
         CHR ~ ",";                                                     31017200
         PCCMA ~ TRUE;                                                  31017300
    END  ELSE                                                           31017400
         IF CHR = "D" THEN                                              31017500
    BEGIN                                                               31017600
         DONETOG ~ ( T ~ SCANOUT( XACUM[SO.WIX],SO.CIX))<0;             31017700
         SO ~ SO + T.[42:6];                                            31017800
         IF T.[36:6] ! "B" THEN GO TO PERR;                             31017900
         IF PCDB OR NOT DONETOG THEN GO TO PERR;                        31018000
         CNT ~ 2;                                                       31018100
         PCDB ~ TRUE;                                                   31018200
    END  ELSE                                                           31018300
         IF CHR = "C" THEN                                              31018400
    BEGIN                                                               31018500
         DONETOG ~ ( T ~ SCANOUT( XACUM[SO.WIX],SO.CIX))<0;             31018600
         SO ~ SO + T.[42:6];                                            31018700
         IF T.[36:6] ! "R" THEN GO TO PERR;                             31018800
         IF PCCR OR NOT DONETOG THEN GO TO PERR;                        31018900
         CNT ~ 2;                                                       31019000
         PCCR ~ TRUE;                                                   31019100
    END  ELSE                                                           31019200
         PCIC ~ TRUE;                                                   31019300
         IF CNT GTR 8184 THEN BEGIN CNT~1; ERR(77); END;                31019400
         STK[STI ~ STI +1] ~ CHR&CNT[TOCNTF];                           31019500
         GO TO LP;                                                      31019600
    PERR:                                                               31019700
         ACCUM[1]:=0&1 SIZEFF & CHR[12:42:6];                           31019800
         ERR(67);                                                       31019900
    END;                                                                31020000
         IF (PCAST OR PCDOL OR PCPLS OR PCMN OR PCZ) AND PCDP THEN      31020100
         PCDPSPEC ~ TRUE;                                               31020200
         STK[STI~STI+1] ~  "~";    % CNTF = 0 ALREADY                   31020300
         IF NXKEY <0 THEN STEPS;                                        31020400
         CNT ~ 0;                                                       31020500
         FOR I ~ 0 STEP 1 UNTIL STI DO                                  31020600
    BEGIN                                                               31020700
         IF NOT (T ~ STK[I].CHF = "V" OR T = "J" OR T = "S"             31020800
              OR T = "P" OR T = "L")                                    31020900
          THEN CNT ~ CNT + STK[I].CNTF;                                 31021000
    END;                                                                31021100
         ASIZE ~ CNT;                                                   31021200
         IF CNT =0 THEN ERR(168);                                       31021300
    END PICTUREPROCESS;                                                 31021400
PROCEDURE LEVEL88;                                                      31021500
BEGIN    % * * * VALUE IS/VALUES ARE LITERAL-1 [THRU/THROUGH LITERAL-2] 31021600
         %         [, LITERAL-3 [THRU/THROUGH LITERAL-4]]...            31021700
         BOOLEAN SCND,ZER,THRUTOG,CCTOG,FSTOG;                          31021800
% NEED CHECK FOR ONLY ONE LITERAL (FOR SEARCH FORMAT 2)                 31021900
    LABEL     ERP,RCV,SKP,XIT;                                          31022000
         REAL T,TGIX,T1,FIGC,SVQ;                                       31022100
         DEFINE ALLFF = [32:47:1]#;                                     31022200
PROCEDURE EMITFIGM(RLO,FIGC); VALUE RLO; REAL RLO,FIGC;                 31022300
    BEGIN                                                               31022400
         MACRO(CLASM,SINFO,FIGC);                                       31022500
         MACRO(XXXXM,2,RLO);                                            31022600
         IF IF2[SINFO].CLF=NM AND (FIGC=HIGHV OR FIGC=UPPERB)           31022700
              THEN IF0[SINFO].L88F ~ 1;                                 31022750
         FIGC ~ 0;                                                      31022800
    END EMITFIGC;                                                       31022900
         IF0[SINFO].SCF~CDN;                                            31023000
         MACRO(CNEM,SINFO,ENTR);                                        31023100
         IF SCTRL ! VALUEV THEN BEGIN ERR(123);GO TO RCV END;           31023200
         IF SCTRL = ARE OR KEY = ISV THEN STEPS;                        31023300
         IF NOT(KEY=LITV OR (KEY>10 AND(Q.SCF=FIGURATIVE OR KEY=ALL)))  31023400
           THEN GO TO ERP;                                              31023500
         IF (T~IF2[SINFO]).CLF = NM THEN                                31023600
         DO                                                             31023700
    BEGIN                                                               31023800
         IF FSTOG THEN MAC2(CNEM,ENTR) ELSE FSTOG ~ TRUE;               31023900
         IF KEY=ALL AND NXKEY=ZEROV THEN STEPS;                         31024000
         IF ZER ~ (KEY=ZEROV OR KEY=HIGHV OR KEY=LOWV OR KEY=UPPERB)    31024100
              THEN                                                      31024200
              BEGIN FIGC ~ KEY; GIX ~ 0; END ELSE                       31024300
         IF Q.SCF!NUMV AND Q.SCF!ITGRV THEN BEGIN ERR(91);GO RCV END    31024400
         ELSE                                                           31024500
         NMLTRL(FALSE,0);                                               31024600
         SVQ ~ Q;                                                       31024700
         IF SCND AND NXKEY = THRUV THEN GO TO ERP;                      31024800
         IF SCND AND TGIX}GIX THEN BEGIN ERR(238);GO TO RCV END;        31024900
         IF SCND ~ SCTRL = THRUV THEN                                   31025000
    BEGIN                                                               31025100
         TGIX~GIX;                                                      31025200
         THRUTOG ~ TRUE;                                                31025300
         IF FIGC ! 0 THEN EMITFIGM(GREQ,FIGC) ELSE                      31025400
         MACRO(CNEM,GREQ,1);                                            31025500
         STEPS                                                          31025600
    END  ELSE                                                           31025700
    BEGIN                                                               31025800
         IF THRUTOG THEN                                                31025900
    BEGIN                                                               31026000
         THRUTOG ~ FALSE;                                               31026100
         IF FIGC ! 0 THEN EMITFIGM(LSEQ,FIGC) ELSE                      31026200
         MACRO(CNEM,LSEQ,1);                                            31026300
         MACRO(CNEM,LAND,0);                                            31026400
    END  ELSE                                                           31026500
         IF FIGC ! 0 THEN EMITFIGM(EQUL,FIGC) ELSE                      31026600
         MACRO(CNEM,EQUL,1);                                            31026700
         IF CCTOG THEN MACRO(CNEM,LOR,0) ELSE CCTOG ~ TRUE;             31026800
    END;                                                                31026900
         IF ZER THEN GO TO SKP;                                         31027000
         IF BOOLEAN(Q.LSGF) AND T.SGTF=0 THEN ERR(91);                  31027100
         IF BOOLEAN(T.DPLF) THEN                                        31027200
    BEGIN     % PC 999PPP CASE ...                                      31027300
         IF T.SZF<SVQ.LSZ THEN ERR(-117);                               31027400
         IF T.FSZF<SVQ.PWR THEN ERR(-155);                              31027500
    END  ELSE                                                           31027600
    BEGIN                                                               31027700
         IF T.SZF<SVQ.LSZ THEN ERR(-117);                               31027800
         IF T.FSZF<SVQ.ITF THEN ERR(-155);                              31027900
         IF (T.SZF-T.FSZF)<(SVQ.LSZ-SVQ.ITF) THEN ERR(-155);            31028000
    END;                                                                31028100
    SKP:                                                                31028200
         CMACHK                                                         31028300
    END  UNTIL KEY=PERIOD                                               31028400
    ELSE DO                                                             31028500
    BEGIN                                                               31028600
         IF FSTOG THEN MAC2(CNEM,ENTR) ELSE FSTOG ~ TRUE;               31028700
         IF ZER ~ (Q.SCF = FIGURATIVE OR KEY = ALL) THEN                31028800
         IF KEY = ALL THEN                                              31028900
         IF XACUM[0].SCF = STRNGV  AND XACUM[1].SIZEF = 1 THEN          31029000
    BEGIN                                                               31029100
         STEPS;                                                         31029200
         FIGC:=GETCHARFRN(ACCUM[1],2,1)&1 ALLFF;                        31029300
    END  ELSE                                                           31029400
         IF XACUM[0].SCF = FIGURATIVE THEN                              31029500
         BEGIN STEPS; FIGC ~ KEY END                                    31029600
         ELSE FGRTV                                                     31029700
         ELSE FIGC ~ KEY                                                31029800
         ELSE                                                           31029900
         IF Q.SCF!STRNGV THEN BEGIN ERR(91);GO TO RCV END ELSE          31030000
         IF ACCUM[1].SIZEF = 1 AND IF1[SINFO].LGHF = 1 THEN             31030100
         FIGC ~ GETCHARFRN(ACCUM[1],2,1) & 1 ALLFF                      31030200
         ELSE VALUEOUT;                                                 31030300
         IF NOT ZER THEN                                                31030400
              IF ACCUM[1].SIZEF>IF1[SINFO].LGHF THEN ERR(-155);         31030500
         IF SCND AND NXKEY = THRUV THEN GO TO ERP;                      31030600
         IF SCND ~ SCTRL = THRUV THEN                                   31030700
% SHOULD BE SOME COMPARISON HERE                                        31030800
    BEGIN                                                               31030900
         THRUTOG ~ TRUE;                                                31031000
         IF FIGC ! 0 THEN EMITFIGM(GREQ,FIGC) ELSE                      31031100
         MACRO(CNEM,GREQ,2);                                            31031200
         STEPS                                                          31031300
    END  ELSE                                                           31031400
    BEGIN                                                               31031500
         IF THRUTOG THEN                                                31031600
    BEGIN                                                               31031700
         THRUTOG ~ FALSE;                                               31031800
         IF FIGC ! 0 THEN EMITFIGM(LSEQ,FIGC) ELSE                      31031900
         MACRO(CNEM,LSEQ,2);                                            31032000
         MACRO(CNEM,LAND,0);                                            31032100
    END  ELSE                                                           31032200
         IF FIGC ! 0 THEN EMITFIGM(EQUL,FIGC) ELSE                      31032300
         MACRO(CNEM,EQUL,2);                                            31032400
         IF CCTOG THEN MACRO(CNEM,LOR,0) ELSE CCTOG ~ TRUE;             31032500
    END;                                                                31032600
         CMACHK                                                         31032700
    END  UNTIL KEY=PERIOD;                                              31032800
         GO TO XIT;                                                     31032900
    ERP:                                                                31033000
         ERR(0);                                                        31033100
    RCV:                                                                31033200
         WHILE KEY ! PERIOD DO STEPS;                                   31033300
    XIT:                                                                31033400
         MAC2(CNEM,EXIT);                                               31033500
END LEVEL88;                                                            31033600
PROCEDURE ELEMITEM;     % SETS UP ELEMENTARY ITEM DESCRIPTION           31033700
    BEGIN                                                               31033800
    BOOLEAN   PTOG,NMPT;                                                31033900
    REAL      LSCL,LSZ,WRD2,DL2,BASE;                                   31034000
    LABEL     XIT,NMG,ENL,NNPL,NRP,NRP1,NRPA,NMGRESS;                   31034100
DEFINE                                                                  31034200
         EDITEND   = EDIT[ESZ].[1:1] ~ 1 #,                             31034300
         EDIT2(A,B)= EDIT[ESZ~ESZ+1] ~ 0 & B [18:33:15]& A [9:39:9]#,   31034400
         EDITB(A,B)= EDIT[ESZ~ESZ+1] ~ B & A [9:39:9]#,                 31034500
         EDIT3(A,B,C)=EDIT[ESZ~ESZ+1]~ C & B [18:33:15]& A [9:39:9]#,   31034600
         EDITC(A,B,C,D)=EDIT3(A,B,D)&C[36:42:6]#,                       31034700
         EDITENDF(A,B,C,D,E)=EDIT3(A,B,D)&C[36:42:6]&REAL(E)[33:47:1]#, 31034800
         EDITFLOT(A,B,C,D,E,F)=EDITENDF(A,B,C,D,E)&REAL(F)[34:47:1]#,   31034900
         EDIT[A]=EDITABLE[(A).[36:5],ESZ.[41:7]]#;                      31035000
         BASE ~ ESZ;    % SAVE OFF EDITABLE INDEX                       31035100
         LSZ ~ (WRD2 ~ IF2[SINFO]).SZF;                                 31035200
         IF NOT PCT THEN GO TO XIT;                                     31035300
         IF (NMPT ~ ABTYPE) OR ANTYPE THEN                              31035400
    BEGIN                                                               31035500
         LCLASS ~ IF NMPT THEN AB ELSE AN ;                             31035600
         GO TO XIT;                                                     31035700
    END;                                                                31035800
         LSZ ~ I ~ 0 ;                                                  31035900
         IF NMTYPE THEN GO TO NMG;                                      31036000
         WRD2.PCTF ~ 1;                                                 31036100
         IF BOOLEAN(WRD2.VARF) THEN ERR(94);                            31036200
         IF NMPT ~ NMPTYPE THEN GO TO NMG;                              31036300
         IF NMPT ~ ENTYPE THEN GO TO ENL;                               31036400
         IF NOT (NMPT ~ EATYPE) THEN                                    31036500
    BEGIN                                                               31036600
         LSZ ~ WRD2.SZF;                                                31036700
         ERR(67);                                                       31036800
         GO TO XIT;                                                     31036900
    END;                                                                31037000
         %%%%%%%%%%%%%%%%%%%%%%%% EDITED ALPHA %%%%%%%%%%%%%%%%%%%%%%%%%31037100
         LCLASS ~ EA;                                                   31037200
         WHILE STK[I] ! "~" DO                                          31037300
    BEGIN                                                               31037400
         DL2 ~ 0;                                                       31037500
         WHILE JUNK~(T~STK[I]).CHF = "A" OR JUNK="X" OR JUNK="9" DO     31037600
    BEGIN                                                               31037700
         DL2 ~ DL2 + T.CNTF;                                            31037800
         I ~ I + 1;                                                     31037900
    END;                                                                31038000
         IF DL2 ! 0 THEN                                                31038100
    BEGIN                                                               31038200
         LSZ ~ LSZ + DL2;                                               31038300
         EDIT2(TRS,DL2);                                                31038400
    END;                                                                31038500
         IF T!"~" THEN                                                  31038600
    BEGIN                                                               31038700
         EDIT3(TRP,T.CNTF,(IF JUNK= "B" THEN " " ELSE JUNK));           31038800
         I ~ I+1;                                                       31038900
    END;                                                                31039000
    END;                                                                31039100
         EDITEND;                                                       31039200
         GO TO XIT;                                                     31039300
NMG:     %%%%%%%%%%%%%%%%%%%%%%%% NUMERIC %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%31039400
         LCLASS ~ NM;                                                   31039500
         IF (T~ STK[I]).CHF = "S" THEN % S SIGN                         31039600
    BEGIN                                                               31039700
         WRD2.SGTF ~ 1;                                                 31039800
         T ~ STK[I~I+1];                                                31039900
    END ELSE                                                            31040000
         IF T.CHF = "J" THEN  % J SIGN                                  31040100
    BEGIN                                                               31040200
         WRD2.SGTF ~ 2;                                                 31040300
         IF LUSE { CMP1 THEN ERR(169);                                  31040400
         T ~ STK[I~I+1];                                                31040500
    END;                                                                31040600
         IF T.CHF  = "P" THEN GO TO NRP1;                               31040700
         IF FALSE THEN                                                  31040800
NNPL:         T ~ STK[I~I+1];                                           31040900
         IF T.CHF  = "P" THEN                                           31041000
    BEGIN                                                               31041100
         PTOG ~ TRUE;                                                   31041200
         WRD2.DPLF ~ 1;                                                 31041300
         IF (LSCL~T.CNTF) + LSZ > 31 THEN ERR(89);                      31041400
         JUNK ~ (T ~ STK[I~I+1]).CHF;                                   31041500
         GO TO NMGRESS;                                                 31041600
    END;                                                                31041700
         IF JUNK ~T.CHF = "9" THEN                                      31041800
    BEGIN                                                               31041900
         LSZ ~ LSZ + T.CNTF;                                            31042000
         IF NMPT THEN EDIT2(TRN,T.CNTF);                                31042100
         GO TO NNPL;                                                    31042200
    END;                                                                31042300
         IF JUNK = 0 THEN                                               31042400
    BEGIN                                                               31042500
         EDIT3(TRP,T.CNTF,0);                                           31042600
         GO TO NNPL;                                                    31042700
    END;                                                                31042800
         IF JUNK = "V" THEN                                             31042900
              GO TO NRPA;                                               31043000
         GO TO NMGRESS;                                                 31043100
              %%%%%%%%%%% AFTER V %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%31043200
NRP:                                                                    31043300
         IF LSCL ~ LSCL + T.CNTF > 31 THEN ERR(89);                     31043400
NRPA:                                                                   31043500
         T ~ STK[I ~ I + 1];                                            31043600
         IF JUNK ~ T.CHF = "9" THEN                                     31043700
    BEGIN                                                               31043800
         LSZ ~ LSZ + T.CNTF;                                            31043900
         IF NMPT THEN EDIT2(TRN,T.CNTF);                                31044000
         PTOG ~ TRUE;                                                   31044100
         GO TO NRP;                                                     31044200
    END;                                                                31044300
         IF JUNK = 0 THEN                                               31044400
    BEGIN                                                               31044500
         EDITB(TRP,T);                                                  31044600
         GO TO NRP;                                                     31044700
    END;                                                                31044800
         IF JUNK = "P" THEN                                             31044900
    BEGIN                                                               31045000
NRP1:                                                                   31045100
         IF PTOG THEN                                                   31045200
    BEGIN                                                               31045300
         ERR(67);                                                       31045400
         GO TO XIT;                                                     31045500
    END;                                                                31045600
         PTOG ~ TRUE;                                                   31045700
         GO TO NRP;                                                     31045800
    END;                                                                31045900
NMGRESS:                                                                31046000
         IF JUNK ! "~" THEN ERR(67);                                    31046100
         IF NMPT THEN EDITEND;                                          31046200
         GO TO XIT;                                                     31046300
         %%%%%%%%%%%%%%%%%%%%%%%% EDITED NUMERIC %%%%%%%%%%%%%%%%%%%%%%%31046400
ENL:                                                                    31046500
    BEGIN                                                               31046600
         LABEL     RPB,PCWRAP,RP,LPA,FSL,PF,ZL,RPA,LP,RP9,RPC,RPS,RPT;  31046700
         REAL      FLSZ,FLCHR,DL3,S;                                    31046800
         BOOLEAN   STOG,FLT,FLPLUS,FLMINUS,FLDOL,FLAST,FLZS,NINETOG;    31046900
         LCLASS ~ EN;                                                   31047000
         %    WHAT A DUMB PLACE FOR A COMMENT                           31047100
         IF JUNK~(T~STK[I]).CHF ="S"OR JUNK= "J" THEN ERR(93);          31047200
         IF JUNK = "P" THEN GO TO RPB;                                  31047300
         IF FALSE THEN  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% LEFT OF POINT   31047400
LP:           JUNK ~ (T ~ STK[I~I+1]).CHF ;                             31047500
         IF JUNK = "P" THEN                                             31047600
    BEGIN                                                               31047700
         PTOG ~ TRUE;                                                   31047800
         WRD2.DPLF ~ 1;                                                 31047900
         IF (LSCL ~ T.CNTF)+LSZ > 31 THEN ERR (89);                     31048000
         IF JUNK ~ (T ~ STK[I ~ I+1]).CHF ! "~" THEN ERR(67);           31048100
         GO TO PCWRAP;                                                  31048200
    END;                                                                31048300
         IF JUNK = "V" THEN                                             31048400
    BEGIN                                                               31048500
         FLT ~ FALSE;                                                   31048600
         GO TO RP;                                                      31048700
    END;                                                                31048800
         IF JUNK = "." THEN                                             31048900
    BEGIN                                                               31049000
         IF FLT THEN                                                    31049100
    BEGIN                                                               31049200
         IF PCDPSPEC AND FLAST THEN                                     31049300
    BEGIN                                                               31049400
         EDIT3(TRP,1,GLPRDV);                                           31049500
         GO TO RP;                                                      31049600
    END;                                                                31049700
         FLT ~ FALSE                                                    31049800
    END;                                                                31049900
         EDIT3(TRP,1,GLPRDV);                                           31050000
         GO TO RP;                                                      31050100
    END;                                                                31050200
         IF JUNK = "9" THEN                                             31050300
    BEGIN                                                               31050400
         NINETOG ~ TRUE;                                                31050500
         LSZ ~ LSZ + T.CNTF;                                            31050600
         FLT ~ FALSE;                                                   31050700
         EDIT2(TRN,T.CNTF);                                             31050800
         GO TO LP;                                                      31050900
    END;                                                                31051000
         IF JUNK = "B" THEN                                             31051100
    BEGIN                                                               31051200
         JUNK ~ " ";                                                    31051300
LPA:                                                                    31051400
         EDITFLOT(TRP,T.CNTF,FLCHR,JUNK,FALSE,FLT);                     31051500
         GO TO LP;                                                      31051600
    END;                                                                31051700
         IF JUNK = "0" THEN GO TO LPA;                                  31051800
         IF FALSE THEN                                                  31051900
    BEGIN                                                               31052000
FSL:                                                                    31052100
         IF FLT THEN                                                    31052200
    BEGIN                                                               31052300
         EDITFLOT(TRP,T.CNTF,DL2,DL3,TRUE,TRUE);                        31052400
         LSZ ~ LSZ + T.CNTF;                                            31052500
         GO TO LP;                                                      31052600
    END;                                                                31052700
         IF T.CNTF > 1 THEN                                             31052800
    BEGIN                                                               31052900
PF:                                                                     31053000
         LSZ ~ LSZ +(JUNK ~ T.CNTF-1); % % -1 FOR FLOAT CHARACTER       31053100
         IF DL3 = "+" THEN FLPLUS ~ TRUE ELSE                           31053200
         IF DL2 = "-" THEN FLMINUS~ TRUE ELSE                           31053300
                           FLDOL  ~ TRUE;                               31053400
         EDITFLOT(TRP,1,DL2,DL3,FALSE,TRUE);                            31053500
         EDITFLOT(TRP,JUNK,DL2,DL3,TRUE,(FLT ~ TRUE));                  31053600
         GO TO LP;                                                      31053700
    END;                                                                31053800
         %%%%%%%%%%%%%%%%% CHECK FOR ANY MORE CHARACTERS                31053900
         S ~ I;                                                         31054000
         WHILE JUNK ~ (T ~ STK[S~S+1]).CHF ! 9 AND S { STI DO           31054100
              IF JUNK = DL2 THEN GO TO PF;                              31054200
         EDITENDF(TRP,1,DL2,DL3,(DL2="-"))&REAL(DL2="-" AND NOT NINETOG)31054300
                  [35:47:1]; % TRUE IF LEADING UNARY SIGN               31054400
         GO TO LP;                                                      31054500
    END;                                                                31054600
         IF JUNK = "+" THEN                                             31054700
    BEGIN                                                               31054800
         IF FLT THEN                                                    31054900
         IF NOT FLPLUS THEN ERR(97) ELSE ELSE                           31055000
               IF STOG THEN ERR(98) ELSE STOG ~ TRUE;                   31055100
         DL2 ~ "-";                                                     31055200
         DL3 ~ "+";                                                     31055300
         GO TO FSL;                                                     31055400
    END;                                                                31055500
         IF JUNK = "-" THEN                                             31055600
    BEGIN                                                               31055700
         IF FLT THEN                                                    31055800
         IF NOT FLMINUS THEN ERR(97) ELSE ELSE                          31055900
               IF STOG  THEN ERR(98) ELSE STOG ~ TRUE;                  31056000
         DL2 ~ "-";                                                     31056100
         DL3 ~ " ";                                                     31056200
         GO TO FSL;                                                     31056300
    END;                                                                31056400
         IF JUNK = "$" THEN                                             31056500
    BEGIN                                                               31056600
         IF NINETOG THEN ERR(67) ELSE                                   31056700
         IF FLT AND NOT FLDOL THEN ERR(97);                             31056800
         DL2 ~ DL3 ~ GLDOL;                                             31056900
         GO TO FSL;                                                     31057000
    END;                                                                31057100
         IF JUNK = "Z" THEN                                             31057200
    BEGIN                                                               31057300
         S ~ -1;                                                        31057400
         FLCHR ~ " ";                                                   31057500
         IF FLT AND NOT FLZS THEN ERR(97);                              31057600
         IF NOT FLT THEN FLT ~ FLZS ~ TRUE;                             31057700
         WHILE S~S+1 { STI DO IF STK[S].CHF = 9 THEN GO TO ZL;          31057800
         WRD2.BWZF ~ 1;                                                 31057900
ZL:                                                                     31058000
         IF NINETOG THEN ERR(67);                                       31058100
         LSZ ~ LSZ + T.CNTF;                                            31058200
         EDIT3(TBN,T.CNTF,FLCHR);                                       31058300
         GO TO LP;                                                      31058400
    END;                                                                31058500
         IF JUNK = "*" THEN                                             31058600
    BEGIN                                                               31058700
         FLCHR ~ "*";                                                   31058800
         IF FLT AND NOT FLAST THEN ERR(97);                             31058900
         IF NOT FLT THEN FLT ~ FLAST ~ TRUE;                            31059000
         WRD2.BWZF ~ 0;                                                 31059100
         GO TO ZL;                                                      31059200
    END;                                                                31059300
         IF JUNK = "," THEN                                             31059400
    BEGIN                                                               31059500
         EDITFLOT(TRP,T.CNTF,FLCHR,GLCMMA,FALSE,FLT);                   31059600
         GO TO LP;                                                      31059700
    END;                                                                31059800
         IF JUNK = "~" THEN                                             31059900
    BEGIN                                                               31060000
         IF FLT AND NOT (FLZS OR FLAST) THEN                            31060100
    BEGIN                                                               31060200
         WRD2.BWZF ~ 1;                                                 31060300
         EDIT2(TRN,1);                                                  31060400
    END;                                                                31060500
         GO TO PCWRAP;                                                  31060600
    END;                                                                31060700
         IF JUNK ! "C" AND JUNK ! "D" THEN  % MUST BE INSERT            31060800
    BEGIN                                                               31060900
         EDITB(TRP,T);                                                  31061000
         GO TO LP;                                                      31061100
    END;                                                                31061200
         IF FALSE THEN                                                  31061300
RP:      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% RIGHT SIDE OF POINT  31061400
              JUNK ~ (T ~ STK[I ~ I + 1]).CHF;                          31061500
         IF JUNK = "P"  THEN                                            31061600
    BEGIN                                                               31061700
RPB:                                                                    31061800
         IF PTOG THEN ERR(67) ELSE PTOG ~ TRUE;                         31061900
         IF LSCL ~ LSCL + T.CNTF > 31 THEN ERR(89);                     31062000
         GO TO RP;                                                      31062100
    END;                                                                31062200
         IF JUNK = "B" THEN                                             31062300
    BEGIN                                                               31062400
         JUNK ~ " ";                                                    31062500
RPA:                                                                    31062600
         EDIT3(TRP,T.CNTF,JUNK);                                        31062700
         GO TO RP;                                                      31062800
    END;                                                                31062900
         IF JUNK = "0" THEN GO TO RPA;                                  31063000
         IF JUNK = "9" THEN                                             31063100
    BEGIN                                                               31063200
RP9:                                                                    31063300
         EDITB(TRN,T);                                                  31063400
         LSZ ~ LSZ + T.CNTF;                                            31063500
         LSCL~ LSCL+ T.CNTF;                                            31063600
         GO TO RP;                                                      31063700
    END;                                                                31063800
         IF JUNK="," THEN                                               31063900
    BEGIN                                                               31064000
         EDIT3(TRP,T.CNTF,GLCMMA);                                      31064100
         GO TO RP;                                                      31064200
    END;                                                                31064300
         IF JUNK = "C" THEN                                             31064400
    BEGIN                                                               31064500
         JUNK ~ "4CR";  % THIS SETS CONDITIONAL INSERT FLAG             31064600
RPC:                                                                    31064700
         IF STOG THEN ERR(98) ELSE STOG ~ TRUE;                         31064800
         EDIT3(TRP,2,JUNK);                                             31064900
         GO TO RP;                                                      31065000
    END;                                                                31065100
         IF JUNK = "D" THEN                                             31065200
    BEGIN                                                               31065300
         JUNK ~ "4DB";                                                  31065400
         GO TO RPC;                                                     31065500
    END;                                                                31065600
         IF JUNK = "+" THEN                                             31065700
    BEGIN                                                               31065800
         IF T.CNTF = 1 AND NOT FLPLUS THEN                              31065900
    BEGIN                                                               31066000
         EDIT3(TRP,1,"4-+");  % SETS CONDITIONAL INSERT FLAG            31066100
RPS:                                                                    31066200
         IF STOG THEN ERR(98);                                          31066300
         IF JUNK~STK[I+1].CHF!"P" AND JUNK!"~" THEN ERR(67);            31066400
         GO TO RP;                                                      31066500
    END;                                                                31066600
RPT:     FOR S ~ I + 1 STEP 1 UNTIL STI DO                              31066700
              IF STK[S].CHF = 9 THEN ERR(67) ELSE                       31066800
              IF JUNK ! "*" THEN WRD2.BWZF ~ 1;                         31066900
         GO TO RP9;                                                     31067000
    END;                                                                31067100
         IF JUNK = "-" THEN                                             31067200
    BEGIN                                                               31067300
         IF T.CNTF = 1 AND NOT FLMINUS THEN                             31067400
    BEGIN                                                               31067500
         EDIT3(TRP,1,"4- ");                                            31067600
         GO TO RPS;                                                     31067700
    END;                                                                31067800
         GO TO RPT;                                                     31067900
    END;                                                                31068000
         IF JUNK = "*" THEN                                             31068100
              IF NOT FLAST THEN ERR(97) ELSE GO TO RPT ELSE             31068200
         IF JUNK = "Z" THEN                                             31068300
              IF NOT FLZS  THEN ERR(97) ELSE GO TO RPT ELSE             31068400
         IF JUNK = "$" THEN                                             31068500
              IF NOT FLDOL THEN ERR(97) ELSE GO TO RPT ELSE             31068600
         IF JUNK ! "~" THEN                                             31068700
    BEGIN                                                               31068800
         EDITB(TRP,T);                                                  31068900
         GO TO RP;                                                      31069000
    END;                                                                31069100
PCWRAP:                                                                 31069200
         EDITEND;                                                       31069300
    END;                                                                31069400
         % WRAP-UP TIME                                                 31069500
XIT:                                                                    31069600
         IF BWZT THEN                                                   31069700
    BEGIN                                                               31069800
         IF BOOLEAN(WRD2.VARF) THEN ERR(94);                            31069900
         IF LCLASS < NM THEN ERR(91) ELSE LCLASS ~ EN;                  31070000
    END;                                                                31070100
         IF JST THEN                                                    31070200
              IF BOOLEAN(WRD2.VARF)OR BOOLEAN(WRD2.OCDV)THEN ERR(150)   31070300
                   ELSE WRD2.JSTF ~ LJST;                               31070400
         IF NMPT THEN IF4[SINFO].EDTF ~ BASE ELSE ESZ ~ BASE;           31070500
         WRD2.CLF ~ LCLASS;                                             31070600
         WRD2.SZF ~ LSZ ~ IF LUSE=IXDN THEN 8 ELSE LSZ;                 31070700
         WRD2.FSZF ~ LSCL;                                              31070800
         IF2[SINFO] ~ WRD2;                                             31070900
         IF WRD2.USF { CMP1 AND LCLASS ! NM THEN ERR(87);               31071000
         IF LSZ=0 THEN ERR(168);                                        31071100
    END ELEMITEM;                                                       31071200
PROCEDURE ITEM;    % HANDLES SYNTAX OF ITEM                             31071300
    BEGIN                                                               31071400
         REAL LI;                                                       31071500
         BOOLEAN DIR;                                                   31071600
         LABEL CMN;                                                     31071700
         LABEL ERP,RECOV,LPA,LPB,LPC,LPD,LPE,LPF,LPS,XIT,LPG;           31071800
         LABEL FINI;                                                    31071900
         IM ~ FALSE;                                                    31072000
         LSYN~LJST~LILT~LPLT~ASIZE~PSIZE~LTRLQ~0;                       31072100
    LPS: COPTOG ~ TRUE; STEPS;                                          31072200
         SMICHK;                                                        31072300
              % *** COPY                                                31072400
         IF LIBTOG THEN                                                 31072500
    BEGIN                                                               31072600
         IF NLVL ! 1 THEN IF CDMSK ! 7 THEN ERR(118);                   31072700
         IF KEY = LITV AND Q.SCF = ITGRV THEN BEGIN STEPS; STEPS END;   31072800
    END  COPY;                                                          31072900
         COPTOG ~ FALSE;                                                31073000
         IF KEY = RENAMES THEN                                          31073100
    BEGIN                                                               31073200
         IF NLVL ! 66 THEN ERR(45);                                     31073300
         RNCPY;                                                         31073400
         GO TO FINI;                                                    31073500
    END RENAMES;                                                        31073600
              % *** REDEFINES                                           31073700
         IF KEY = REDEFINES THEN                                        31073800
    BEGIN                                                               31073900
         IF FLRT THEN ERR(116);                                         31074000
         DECTOG ~ FALSE;                                                31074100
         STEPS;                                                         31074200
         IF NXKEY = OFV OR NXKEY = INV THEN                             31074300
    BEGIN                                                               31074400
         GETSS;                                                         31074500
         T~REAL(SDNSCAN(T1-1,0,FALSE))                                  31074600
    END;                                                                31074700
         DECTOG ~ TRUE;                                                 31074800
         IF KEY ! IDV THEN GO TO ERP;                                   31074900
         IF Q.SCF ! ITM THEN BEGIN ERR(50); GO TO RECOV END;            31075000
         IF Q.SCF ! UNKID AND Q.SCF ! ITM                               31075100
            THEN BEGIN ERR(18); GO TO RECOV END;                        31075200
         IF NLVL = 1                                                    31075300
         AND SECT = FSECT THEN ERR(62) ELSE                             31075400
         IF NLVL ! (T ~ IF0[Q.NXIF].LVLF) THEN ERR(62);                 31075500
         IF T = 66 OR T = 88 THEN ERR(62);                              31075600
         RDT ~ TRUE;                                                    31075700
         RDNI ~ LI ~ Q.NXIF;                                            31075800
         IF BOOLEAN((T~IF0[RDNI]).REDF) THEN ERR(126);                  31075900
         IF0[RDNI].BRDF ~ 1;                                            31076000
         RDBADR ~ IF3[RDNI].BADDF;                                      31076100
         IF IF2[RDNI].SUBF ! 0 THEN ERR(60);                            31076200
         WHILE LI < SINFO DO                                            31076300
    BEGIN                                                               31076400
         IF IF0[LI].LVLF < NLVL THEN BEGIN LI ~ SINFO; ERR(65) END;     31076500
         IF NLVL ! (T ~ IF0[Q.NXIF].LVLF) THEN ERR(62) ELSE             31076600
         IF BOOLEAN((T ~ IF2[LI]).VARF) OR BOOLEAN(T.OCDV)              31076700
          THEN ERR(59);                                                 31076800
         LI ~ LI + IFSZ;                                                31076900
    END;                                                                31077000
         STEPS;                                                         31077100
    END;                                                                31077200
    LPA:                                                                31077300
         SMICHK;                                                        31077400
         IF KEY = PERIOD THEN GO TO XIT;                                31077500
              % *** SIZE                                                31077600
         IF KEY = SIZE THEN                                             31077700
    BEGIN                                                               31077800
         IF SCTRL = ISV THEN STEPS;                                     31077900
         IF KEY ! LITV OR Q.SCF ! ITGRV                                 31078000
          THEN BEGIN ERR(13); GO TO RECOV END;                          31078100
         ASIZE ~ ICVI(FALSE);                                           31078200
         IF SZT OR SZVT THEN ERR(27);                                   31078300
         LI ~ 0;                                                        31078350
         IF SCTRL ! TOV THEN SZT ~ TRUE ELSE                            31078400
    BEGIN                                                               31078500
         SZVT ~ TRUE;                                                   31078600
         IF SCTRL ! LITV OR Q.SCF ! ITGRV                               31078700
          THEN BEGIN ERR(13); GO TO RECOV; END;                         31078800
         LI ~ ASIZE;                                                    31078850
         ASIZE ~ ICVI(FALSE);                                           31078900
         IF LI>ASIZE THEN ERR(238);                                     31078950
         STEPS;                                                         31079000
    END;                                                                31079100
         IF KEY ! CHARACTERS THEN                                       31079200
    BEGIN                                                               31079300
    LPB:                                                                31079400
         IF KEY = COMPUTATIONAL THEN BEGIN LUSE ~ CMP; GO TO LPD END;   31079500
         IF KEY = COMP1 THEN BEGIN LUSE ~ CMP1; GO TO LPD END;          31079600
         IF KEY=DISPLAY1 OR KEY=DISPLAY THEN                            31079700
              BEGIN LUSE~BCL; GO TO LPD; END;                           31079800
         IF KEY=INDEX THEN BEGIN LUSE ~ IXDN; GO TO LPD; END;           31079900
         IF KEY = COMP2 THEN GO TO ERP ELSE IF KEY = COMP3 THEN         31080000
              BEGIN ERR(113); GO TO RECOV; END;                         31080100
         GO TO LPE;                                                     31080200
    LPD: IF UST THEN ERR(27) ELSE UST ~ TRUE;                           31080300
         STEPS; GO TO LPB;                                              31080400
    END;                                                                31080500
    LPE: IF KEY = CHARACTERS THEN STEPS;                                31080600
         IF KEY = DEPENDING THEN                                        31080700
    BEGIN                                                               31080800
         SZVT ~ TRUE;                                                   31080900
         IF SCTRL = ON THEN STEPS;                                      31081000
         IF KEY ! IDV THEN BEGIN ERR(18); GO TO RECOV END;              31081100
         MACROGEN(SDPM,SINFO,Q.NXF);                                    31081200
         IF NLVL=1 AND SECT=FSECT THEN                                  31081300
    BEGIN                                                               31081310
         IF3[SINFO].SZDF ~ Q.NXF;      % TEMP FOR USE IN OPENP          31081320
         FIB[IF0[IF4[SINFO].FLLNK].FIBF,18].MINRS ~ IF LI!0 THEN        31081330
              (LI+7).WIX ELSE 1;                                        31081335
    END;                                                                31081340
         IF2[SINFO].VARF ~ 1;                                           31081400
         STEPS;                                                         31081500
    END;                                                                31081600
         GO TO LPA;                                                     31081700
    END SIZE;                                                           31081800
              % *** PICTURE                                             31081900
    IF KEY = PICTUREV THEN                                              31082000
    BEGIN                                                               31082100
         IF PCT THEN ERR(27) ELSE PCT ~ TRUE;                           31082200
         PICTUREPROCESS;                                                31082300
         STEPS;                                                         31082400
         IF KEY < 0 THEN STEPS;                                         31082500
         IF PCL THEN    % PICTURE OF VARIABLE SIZE                      31082600
    BEGIN                                                               31082700
         IF KEY = DEPENDING THEN GO TO LPE;                             31082800
         ERR(111);                                                      31082900
    END;                                                                31083000
         GO TO LPA;                                                     31083100
    END;                                                                31083200
         IF KEY = USAGE THEN                                            31083300
    BEGIN                                                               31083400
         IF SCTRL = ISV THEN STEPS; GO TO LPB;                          31083500
    END;                                                                31083600
              % *** OCCURS                                              31083700
         IF KEY = OCCURS THEN                                           31083800
    BEGIN                                                               31083900
         IF OCCT THEN ERR(27) ELSE OCCT ~ TRUE;                         31084000
         IF (T ~ IF0[SINFO].LVLF) = 1 OR T = 77 THEN ERR(158);          31084100
         IF OCCI ! 0 THEN                                               31084200
         IF IF2[OCCI].SUBF = 3 THEN ERR(-148);                          31084300
         IF FLRT THEN ERR(116);                                         31084400
         IF SCTRL ! LITV OR Q.SCF ! ITGRV                               31084500
          THEN BEGIN ERR(13); GO TO RECOV END;                          31084600
         LI ~ ICVI(FALSE);                                              31084700
         IF SCTRL = TOV THEN                                            31084800
    BEGIN                                                               31084900
         IF SCTRL ! LITV OR Q.SCF ! ITGRV                               31085000
          THEN BEGIN ERR(13); GO TO RECOV END;                          31085100
         LI ~ ICVI(FALSE);                                              31085200
         STEPS;                                                         31085300
    END;                                                                31085400
         IF KEY = TIMES THEN KEY ~ SCTRL;                               31085500
         IF1[SINFO].OCCF ~ LI;                                          31085600
         IF KEY = DEPENDING THEN                                        31085700
    BEGIN                                                               31085800
         IF SCTRL = ON THEN STEPS;                                      31085900
         IF KEY ! IDV THEN BEGIN ERR(18); GO TO RECOV END;              31086000
         MACROGEN(ODPM,SINFO,Q.NXF);                                    31086100
         IF2[SINFO].OCDV ~ 1;                                           31086200
         STEPS;                                                         31086300
    END;                                                                31086400
         IF KEY=ASCENDING OR KEY=DESCENDING THEN                        31086500
    BEGIN     COMMENT * * *                                             31086600
              (ASCENDING OR DESCENDING) KEY IS DATA-NAME ...           ;31086700
         IF5[SINFO].KEYRL ~ KNX + 1;                                    31086800
         GO TO CMN;                                                     31086900
         WHILE KEY = IDV OR KEY = ASCENDING OR KEY = DESCENDING DO      31087000
    BEGIN                                                               31087100
         IF KEY=ASCENDING OR KEY=DESCENDING THEN                        31087200
    BEGIN                                                               31087300
    CMN: DIR ~ KEY=DESCENDING;                                          31087400
         IF SCTRL = KEYS THEN STEPS;                                    31087500
         IF KEY   = ISV THEN STEPS;                                     31087600
    END;                                                                31087700
         IF KEY ! IDV THEN BEGIN ERR(18);GO TO RECOV END;               31087800
         MACROGEN(KEYM,SINFO,Q.NXF);                                    31087900
         KEYR[KNX:=KNX+1]:=SINFO&REAL(DIR) KYDIRF&Q.NXF KYDCTF;         31088000
         STEPS;                                                         31088100
         CMACHK                                                         31088200
    END;                                                                31088300
    END KEY IS STUFF;                                                   31088400
         IF KEY = INDEXED THEN                                          31088500
     BEGIN                                                              31088600
         IF SCTRL = BYV THEN STEPS;                                     31088700
         IF KEY ! IDV THEN GO TO ERP;                                   31088800
         IF OCCI ! 0 THEN IF IF5[OCCI].INXRL=0 THEN ERR(227);           31088900
         DIR~FALSE;                                                     31089000
         WHILE KEY = IDV DO                                             31089100
    BEGIN                                                               31089200
         IF Q.SCF!UNKID THEN BEGIN ERR(149);GO TO RECOV END;            31089300
         I ~ Q.NXF;                                                     31089400
         DRCT[I].SCF ~ IXN;                                             31089500
         DRCT[I].NXIF ~ (NNX ~ NNX + 1);                                31089600
         IF NNX > IXMAX  THEN BEGIN NNX~0; ERR(279) END;                31089700
         INXR[NNX] ~ SINFO;                                             31089800
         INXR[NNX].IXBASE ~ GETPRTLOC;                                  31089900
         INXR[NNX].DCTIX ~ I;                                           31090000
         IF NOT DIR THEN                                                31090100
    BEGIN                                                               31090200
         IF5[SINFO].INXRL ~ NNX;                                        31090300
         DIR~TRUE;                                                      31090400
    END;                                                                31090500
         IF SCTRL = COMMA THEN STEPS;                                   31090600
         IF KEY = ANDV THEN STEPS;                                      31090700
    END;                                                                31090800
    END  ELSE IF OCCI ! 0 THEN IF IF5[OCCI].INXRL!0 THEN ERR(227);      31090900
         GO TO LPA;                                                     31091000
    END OCCURS;                                                         31091100
              % *** SYNCHRONIZED                                        31091200
         IF KEY = SYNCHRONIZED THEN                                     31091300
    BEGIN                                                               31091400
         IF SYCT THEN ERR(27) ELSE SYCT ~ TRUE;                         31091500
         IF SCTRL = LEFT THEN LSYN ~ 1 ELSE                             31091600
         IF KEY   = RIGHT THEN LSYN ~ 2 ELSE                            31091700
         GO TO ERP;                                                     31091800
         STEPS;                                                         31091900
         GO TO LPA;                                                     31092000
    END;                                                                31092100
               % **** JUSTIFIED                                         31092200
         IF KEY = JUSTIFIED THEN                                        31092300
    BEGIN                                                               31092400
         IF JST THEN ERR(27) ELSE JST ~ TRUE;                           31092500
         IF SCTRL = RIGHT THEN LJST ~ 1 ELSE                            31092600
         GO TO ERP;                                                     31092700
         STEPS;                                                         31092800
         GO TO LPA                                                      31092900
    END;                                                                31093000
              % *** RANGE                                               31093100
         IF KEY = RANGE THEN                                            31093200
    BEGIN                                                               31093300
         IF SCTRL ! LITV OR Q.SCF ! ITGRV THEN                          31093400
          BEGIN ERR(13); GO TO RECOV END;                               31093500
         IF SCTRL ! THRUV THEN GO TO ERP;                               31093600
         IF SCTRL ! LITV OR Q.SCF ! ITGRV THEN                          31093700
          BEGIN ERR(13); GO TO RECOV END;                               31093800
         STEPS;                                                         31093900
    END;                                                                31094000
              % *** BLANK WHEN ZERO                                     31094100
         IF KEY = BLANK THEN                                            31094200
    BEGIN                                                               31094300
         IF SCTRL = WHEN THEN STEPS;                                    31094400
         IF SCTRL = ZEROV THEN STEPS;                                   31094500
    LPG: IF2[SINFO].BWZF ~1;                                            31094600
         IF BWZT THEN ERR(27) ELSE BWZT ~ TRUE;                         31094700
         GO TO LPA;                                                     31094800
    END;                                                                31094900
         IF KEY = VALUEV THEN                                           31095000
    BEGIN     % * * * VALUE IS LITERAL                                  31095100
         IF VAT THEN ERR(27) ELSE VAT ~ TRUE;                           31095200
         IF SCTRL = ISV THEN STEPS;                                     31095300
         IF KEY ! ZEROV AND NOT(KEY = ALL AND NXKEY = ZEROV) THEN       31095400
    BEGIN                                                               31095500
         MACRO(MKSMM,0,0);   % MAKE A MARK STACK                        31095600
         MACRO(NAMDM,SINFO,0);                                          31095700
         IF DIR~Q.SCF=STRNGV THEN VALUEOUT ELSE                         31095800
         IF Q.SCF=FIGURATIVE OR KEY=ALL THEN                            31095900
              BEGIN FGRTV; DIR ~ TRUE; END ELSE                         31096000
         IF Q.SCF=ITGRV OR Q.SCF=NUMV                                   31096100
              THEN NMLTRL(FALSE,0) ELSE GO TO ERP;                      31096200
         MACRO(IF DIR THEN STOXM ELSE STO9M,0,REAL(DIR));               31096300
    END ELSE                                                            31096400
         IF KEY = ALL THEN STEPS;                                       31096500
         LTRLQ~Q;                                                       31096600
         STEPS;                                                         31096700
         GO TO LPA;                                                     31096800
    END;                                                                31096900
         IF KEY = PERIOD THEN GO TO XIT;                                31097000
         IF KEY = COMPUTATIONAL                                         31097100
         OR KEY = COMP1                                                 31097200
         OR KEY = DISPLAY                                               31097300
         OR KEY = DISPLAY1                                              31097400
         OR KEY = COMP2                                                 31097500
         OR KEY = COMP3                                                 31097600
         OR KEY = INDEX                                                 31097700
          THEN GO TO LPB;                                               31097800
    ERP: ERR(0);                                                        31097900
    RECOV:                                                              31098000
         IF KEY = PERIOD THEN GO TO XIT;                                31098100
         STEPS;                                                         31098200
         WHILE KEY < 10 AND KEY ! PERIOD DO STEPS;                      31098300
         IF Q.SCF = 1 THEN GO TO LPA ELSE GO TO RECOV;                  31098400
    XIT:                                                                31098500
    FINI:                                                               31098600
    END ITEM;                                                           31098700
PROCEDURE RECORDDEC(GUSE,GVT,SECMP);   % RECORD DESCRIPTION             32000000
    VALUE GUSE,GVT;                                                     32000100
         REAL GUSE;                                                     32000200
         BOOLEAN GVT,SECMP;                                             32000300
    BEGIN                                                               32000400
         DEFINE DUPF = [31:1] #;                                        32000500
         DEFINE  OFSETD = OFSET.[33:15] #;                              32000600
         REAL LLUSE;                                                    32000700
         REAL SLVL,LINFO,CNLVL,SOCC,SOFS;                               32000800
         BOOLEAN TGRDT,TVAT;                                            32000900
         BOOLEAN TGRPCDN;                                               32001000
         BOOLEAN LSECMP;                                                32001100
         REAL TOFSET,TRDLVL;                                            32001200
         LABEL XIT,ERP,RECOV,LA,LB,LE,S;                                32001300
         LABEL CNL,LN66;                                                32001400
    LABEL RET88;                                                        32001500
PROCEDURE LVL77(WRD,SZ,CI);                                             32001600
    VALUE     SZ,CI;                                                    32001700
    REAL      SZ,CI,WRD;                                                32001800
    BEGIN                                                               32001900
         IF WRD = 0 THEN                                                32002000
    BEGIN                                                               32002100
         IF3[CI].DAYF ~ 1;                                              32002200
         WRD ~ CI;                                                      32002300
         MACRO(ADCM,1,CI);             % MAKE AN ARRAY DONT CARE TYPE   32002400
         IF1[CI].OFSF ~ 0;                                              32002500
         IF3[CI].BADDF ~ GETPRTLOC;                                     32002600
    END  ELSE                                                           32002700
    BEGIN                                                               32002800
         IF3[CI].BADDF ~ IF3[WRD].BADDF;                                32002900
         IF1[CI].OFSF ~ IF1[WRD].OFSF;                                  32003000
    END;                                                                32003100
         IF1[WRD].OFSF ~ (T~IF1[WRD].OFSF+SZ);                          32003200
         IF T ~ ((T+7) DIV 8)>128 THEN                                  32003300
    BEGIN                                                               32003310
         IF T>DATAMAX THEN DATAMAX ~ T;                                 32003320
         WRD ~ 0;                      % GET NEW 77 ARRAY NEXT TIME     32003330
    END;                                                                32003340
    END LVL77;                                                          32003400
         SOCC ~ OCCI;        % SAVE NO. OF SUBSCRIPTS REQUIRED          32003500
    S:   SLVL ~ NLVL;                                                   32003600
         FLRT ~ FALSE;                                                  32003700
         IF SCTRL = IDV THEN                                            32003800
    BEGIN                                                               32003900
         SDICT ~ Q.NXF; % DICT ENTRY                                    32004000
         IF Q.SCF ! UNKID AND Q.SCF ! ITM                               32004100
          THEN ERR(56);                                                 32004200
         IF (SECT=WSECT OR SECT=CSECT OR SECT=LSECT)                    32004300
          AND (SLVL = 1 OR SLVL = 77) THEN                              32004400
    BEGIN     % NAME MUST BE UNIQUE                                     32004500
         IF Q.SCF ! UNKID THEN ERR(56);                                 32004600
    END;                                                                32004700
         DRCT[SDICT].SCF ~ ITM;                                         32004800
         SINFO ~ LINFO ~ INFOENTER(SDICT);                              32004900
         IF0[SINFO] ~ IF0[SINFO]&SLVL LVLFF&ITM SCFF;                   32005000
         IF3[SINFO] ~ 0 & SECT DDSCF &HLVL HLNOF & NRDF NRNOF;          32005100
         IF SLVL!1 THEN IF LBLRTOG THEN IF3[SINFO].LRF ~ 1;             32005200
         IF SECT = FSECT THEN                                           32005300
    BEGIN                                                               32005400
         IF4[SINFO].FLLNK ~ FLINFO;                                     32005500
         IF LBLRTOG AND SLVL=1 THEN IF IF5[SINFO].DLNKF!LBLR THEN       32005600
    BEGIN                                                               32005700
         LBLRTOG ~ FALSE;                                               32005800
         ERR(257);                                                      32005900
    END ELSE IF3[SINFO].LRF ~ 1;                                        32006000
    END;                                                                32006100
    END  ELSE                                                           32006200
         IF (FLRT ~ KEY = FILLER) THEN                                  32006300
    BEGIN     % ***** FILLER                                            32006400
         SINFO ~ LINFO ~ NXI;                                           32006500
         IF2[NXI] ~ IF3[NXI] ~ IF4[NXI] ~ 0;                            32006600
         IF0[NXI] ~ 0 & ITM SCFF & NLVL LVLFF;                          32006700
    END  ELSE                                                           32006800
         BEGIN ERR(18); GO TO RECOV END;                                32006900
                        % PROCESS ITEM                                  32007000
         LLUSE ~ LUSE;                                                  32007100
         LUSE ~ GUSE;                                                   32007200
         ITEM;                                                          32007300
         IF GUSE=0 THEN                % CANT BE LEVEL 77               32007400
    BEGIN                                                               32007500
         GUSE ~ LUSE;                                                   32007600
         IF BADR=0 THEN                % MUST BE WS 01                  32007700
         IF RDT THEN BADR ~ RDBADR ELSE                                 32007800
    BEGIN                                                               32007900
         IF3[SINFO].DAYF ~ 1;          % SET FLAG TO GENERATE ARRAY     32008000
         BADR ~ GETPRTLOC;                                              32008100
    END;                                                                32008200
    END;                                                                32008300
         IF GRPCDN THEN                                                 32008400
         IF SYCT OR JST OR LUSE!BCL                                     32008500
         THEN ERR(157);                                                 32008600
         IF VAT THEN                                                    32008700
    BEGIN                                                               32008800
         IF SECT=FSECT OR SECT=LSECT THEN BEGIN ERR(127);VAT~FALSE END  32008900
         ELSE                                                           32009000
         IF GVT THEN BEGIN ERR(128); VAT ~ FALSE END;                   32009100
         IF OCCT OR OCCI!0 THEN                                         32009200
           BEGIN ERR(133); VAT ~ FALSE END;                             32009300
         IF SZVT THEN                                                   32009400
         BEGIN ERR(131);VAT ~ FALSE END;                                32009500
         IF FLRT THEN NXI ~ NXI + IFSZ; % FILLER WITH VALUE NEEDS INFO  32009600
    END;                                                                32009700
         IF SLVL = 1 OR SLVL = 77 THEN                                  32009800
    BEGIN                                                               32009900
         IF NOT UST THEN LUSE ~ BCL;                                    32010000
         WRDO ~ (GUSE~LUSE) = CMP OR GUSE=CMP1 OR LUSE= IXDN;           32010100
    END;                                                                32010200
         IF NOT UST THEN LUSE ~ GUSE;                                   32010300
         IF LUSE < 3 THEN   %  COMP,COMP-1                              32010400
    BEGIN     IF LUSE=2 AND SLVL!77 THEN ERR(92);                       32010500
         IF SECT=FSECT THEN                                             32010600
              IF ((T~FIB[T1~IF0[FLINFO].FIBF,4].FILTYF){BUT AND T!MT)   32010700
                 OR (T}15 AND T{18) OR (T=MT AND                        32010800
                 BOOLEAN(FIB[T1,5].NSTDLF)) THEN ERR(285);              32010900
              IF LUSE !0 THEN LCLASS ~ NM;                              32011000
    END ELSE                                                            32011100
         IF LUSE >3 AND LUSE!6 THEN  % BCL                              32011200
    BEGIN     IF GUSE!BCL THEN ERR(92);                                 32011300
              LCLASS ~ AN;                                              32011400
    END ELSE                                                            32011500
         IF LUSE = 6 AND GUSE=IXDN THEN % INDEX NAME                    32011600
    BEGIN                                                               32011700
         IF REAL(IM.[29:2])!0 OR REAL(IM.[32:16])!0 THEN ERR(135);      32011800
         LCLASS ~ NM;                                                   32011900
    END ELSE                                                            32012000
         ERR(92);                                                       32012100
         IF1[SINFO].OFSF   ~ OFSET;                                     32012200
         IF3[SINFO].BADDF  ~ BADR;                                      32012300
         T1 ~ IF2[SINFO];                                               32012400
         T1.SZF ~ ASIZE;  % LOGICIAL SIZE                               32012500
         T1.WRDOF ~ REAL(WRDO);                                         32012600
         T1.USF ~ LUSE;                                                 32012700
         T1.VARF~REAL(SZVT);                                            32012800
         T1.SUBF ~ IF OCCI = 0 THEN REAL(OCCT) ELSE                     32012900
              IF2[OCCI].SUBF + REAL(OCCT);                              32013000
         IF2[SINFO] ~ T1;                                               32013100
         IF OCCI ! 0 THEN                                               32013200
    BEGIN     COMMENT  INSIDE OCCURS GROUP. NEEDS OCLF BACK LINK;       32013300
         IF4[SINFO].OCLF ~ (SINFO - OCCI) DIV IFSZ;                     32013400
    END;                                                                32013500
              % CHECK FOR REDEFINES                                     32013600
         IF RDT THEN                                                    32013700
    BEGIN                                                               32013800
         IF SECT = FSECT AND SLVL =1 THEN ERR(124);                     32013900
         TGRDT ~ GRDT;                                                  32014000
         IF SLVL = 1 THEN TOFSET ~ IF1[RDNI].LGHF ELSE                  32014100
         TOFSET ~ OFSET;                                                32014200
         TRDLVL ~ RDLVL;                                                32014300
         NRDF~NRDF+1;                                                   32014400
         OFSET ~ IF (RDLVL ~ IF0[RDNI].LVLF)=77 AND                     32014500
              BOOLEAN(IF3[RDNI].DAYF) THEN 0 ELSE IF1[RDNI].OFSF;       32014600
         IF1[SINFO].OFSF ~ OFSET;                                       32014700
         IF0[SINFO].REDF ~1;                                            32014800
         IF3[SINFO].NRNO~NRDF;                                          32014900
         GRDT ~ TRUE;                                                   32015000
         RDT ~ FALSE;                                                   32015100
    END;                                                                32015200
         IF NOT GRDT THEN GO TO LA;       % NO REDEFINES                32015300
                   % IN REDEFINES RANGE                                 32015400
         IF VAT THEN BEGIN ERR(58); VAT ~ FALSE END;                    32015500
         IF SZVT OR IF2[SINFO].OCDV = 1 THEN ERR(59);                   32015600
    LA:                                                                 32015700
         PDLY ~ TRUE;                                                   32015800
         IF SCTRL = LITV THEN                                           32015900
    BEGIN                                                               32016000
         IF Q.SCF ! ITGRV THEN BEGIN ERR(13); GO RECOV END;             32016100
         NLVL ~ ICVI(FALSE);                                            32016200
    END  ELSE                                                           32016300
         IF WCOL8 OR EOFTOG OR KEY = PROCEDUREV THEN NLVL~ -1 ELSE      32016400
    BEGIN                                                               32016500
         ERR(0);                                                        32016600
         DO STEPS UNTIL KEY = PERIOD OR MARGINA;                        32016700
         GO TO LA;                                                      32016800
    END;                                                                32016900
    RET88: IF NLVL{SLVL OR NLVL>50 THEN GO TO LE;                       32017000
         IF FLRT THEN ERR(43);                                          32017100
         IF VAT THEN    % VALUE IS CLAUSE ON THE GROUP LEVEL            32017200
              IF LTRLQ.SCF!STRNGV AND LTRLQ.SCF!FIGURATIVE THEN ERR(91);32017300
         IF2[LINFO].GRPF ~ 1;     % TURN ON GROUP FLAG                  32017400
         IF REAL(IM.[38:10])!0 THEN ERR(61);                            32017500
         TVAT ~ VAT;                                                    32017600
         IF OCCT THEN                                                   32017700
    BEGIN                                                               32017800
         OCCI ~ SINFO;                                                  32017900
         SOFS ~ OFSET;                                                  32018000
         OFSET ~ 0;                                                     32018100
    END ELSE SOFS ~ 0;                                                  32018200
         LSECMP ~ SECMP;                                                32018300
         SECMP~FALSE;                                                   32018400
         HLVL~HLVL+1;                                                   32018500
         RECORDDEC(LUSE,VAT OR GVT,SECMP);   % RECURSE IN               32018600
         OFSET ~ OFSET + SOFS;                                          32018700
         OCCI ~ SOCC;        % RESTORE NO. OF SUBSCRIPTS REQUIRED       32018800
         HLVL~HLVL-1;                                                   32018900
         T ~ OFSET - (T1 ~IF1[LINFO]).OFSF;  % T = GROUP SIZE           32019000
         T1.LGHF ~ T; IF1[LINFO] ~ T1;                                  32019100
         T1 ~IF2[LINFO];                                                32019200
         T1.SCMP~REAL(SECMP OR T1.USF{CMP1);                            32019300
         SECMP~LSECMP OR BOOLEAN(T1.SCMP);                              32019400
         T1.CLF ~ AN;                                                   32019500
         IF T1.SZF!0 AND T1.SZF!T THEN ERR(-63);                        32019600
         T1.SZF ~ T; IF2[LINFO] ~ T1;                                   32019700
         IF (T ~IF1[LINFO]).OCCF !0 THEN                                32019800
          OFSET ~ T.OFSF + (T.OCCF | T.LGHF);                           32019900
         IF0[LINFO].SCOPE ~ NXI;                                        32020000
         IF NLVL > SLVL THEN IF NLVL ! 66 THEN ERR(62);                 32020100
         IF TGRPCDN THEN GRPCDN~FALSE;                                  32020200
         GO TO LB;                                                      32020300
    LE:                                                                 32020400
         IF LUSE ! IXDN THEN                                            32020500
         IF ASIZE = 0 THEN ERR(88);                                     32020600
         ELEMITEM;                                                      32020700
         IF VAT THEN                                                    32020800
    BEGIN     % VALUE IS CLAUSE FOR ELEMENTARY                          32020900
         IF LTRLQ.SCF=FIGURATIVE THEN IF LCLASS=NM AND LTRLQ.ITF!ZEROV  32021000
              THEN ERR(91) ELSE ELSE                                    32021100
         IF LTRLQ.SCF!STRNGV EQV (LCLASS=NM OR LCLASS=EN)               32021200
           THEN ELSE ERR(91);                                           32021300
         IF LCLASS=NM AND LTRLQ.SCF!FIGURATIVE THEN                     32021400
    BEGIN                                                               32021500
         IF LTRLQ.LSGF>0 AND (T~IF2[SINFO]).SGTF=0                      32021600
              AND LUSE=BCL THEN ERR(91);                                32021700
         IF BOOLEAN(T.DPLF) THEN                                        32021800
         IF T.SZF + T.FSZF < LTRLQ.LSZ + LTRLQ.PWR THEN ERR(-117) ELSE  32021900
                                                                   ELSE 32022000
    BEGIN                                                               32022100
         IF T.FSZF<LTRLQ.ITF THEN ERR(-155);                            32022200
         IF T.SZF<LTRLQ.LSZ THEN ERR(-117);                             32022300
         IF T1 ~ T.SZF-T.FSZF>0 THEN                                    32022400
         IF T1 < LTRLQ.LSZ-LTRLQ.ITF THEN ERR(-155);                    32022500
    END;                                                                32022600
% 909V909 CASE                                                          32022700
    END  ELSE                                                           32022800
    BEGIN                                                               32022900
         IF LTRLQ.SCF!FIGURATIVE THEN                                   32023000
              IF LTRLQ.LSZ>IF2[SINFO].SZF THEN ERR(-155);               32023100
         IF LCLASS=AB AND NOT BOOLEAN(LTRLQ.LSGF) THEN ERR(122)         32023200
    END;                                                                32023300
    END;                                                                32023400
         IF LUSE { CMP1 THEN                                            32023500
    BEGIN                                                               32023600
         IF ASIZE > 23 THEN ERR(90);                                    32023700
    END;                                                                32023800
         IF WRDO THEN                                                   32023900
    BEGIN                                                               32024000
         ASIZE ~ IF ASIZE > 11 THEN 16 ELSE 8;                          32024100
    END  ELSE                                                           32024200
    BEGIN                                                               32024300
         IF LUSE = CMP THEN                                             32024400
    BEGIN                                                               32024500
          ASIZE := IF ASIZE LEQ 11 THEN 8 ELSE 16;                      32024600
    END;                                                                32024700
         IF SYCT THEN                                                   32024800
    BEGIN     % INSERT FILLER IF NECESSARY                              32024900
         IF LSYN!1                                                      32025000
         THEN WHILE (OFSET + ASIZE) MOD 8 ! 0 DO OFSET~OFSET+1  % RIGHT 32025100
         ELSE WHILE OFSET MOD 8 ! 0 DO OFSET ~ OFSET + 1; % SYNC LEFT   32025200
         IF1[SINFO].OFSF ~ OFSET;                                       32025300
    END;                                                                32025400
         IF LUSE=IXDN THEN IF NOT BOOLEAN(IF2[LINFO].GRPF) THEN ASIZE~8;32025500
    END;                                                                32025600
         T ~IF2[SINFO];                                                 32025700
         T.SCMP~REAL(SECMP OR T.USF{CMP1);                              32025800
         SECMP~LSECMP OR BOOLEAN(T.SCMP);                               32025900
         IF2[SINFO] ~ T;                                                32026000
         IF1[SINFO].LGHF ~ ASIZE;                                       32026100
         IF OCCT THEN ASIZE ~ ASIZE | IF1[LINFO].OCCF;                  32026200
         IF SECT = CSECT THEN                                           32026300
         IF NOT GRDT THEN                                               32026400
          IF NOT(GVT OR VAT) THEN ERR(130);                             32026500
         IF GVT THEN                                                    32026600
          IF JST OR SYCT OR LUSE!BCL THEN ERR(131);                     32026700
         IF0[LINFO].SCOPE ~ NXI;                                        32026800
         IF (OFSET ~ OFSET + ASIZE) GTR 8184 THEN                       32026900
           BEGIN OFSET ~ 0; ERR(77); END;                               32027000
                   % CHECK IF END OF REDEFINES RANGE                    32027100
    LB:                                                                 32027200
         IF GRDT AND SLVL = RDLVL THEN                                  32027300
    BEGIN                                                               32027400
         IF SLVL = 77 THEN IF IF1[RDNI].LGHF ! IF1[SINFO].LGHF THEN     32027500
         ERR(64) ELSE ELSE                                              32027600
         IF SLVL=01 THEN IF (T~IF1[LINFO].LGHF) > IF1[RDNI].LGHF        32027700
              THEN IF1[RDNI].LGHF ~ T ELSE                              32027800
         ELSE IF OFSET!TOFSET THEN ERR(64);                             32027900
         OFSET ~ IF SLVL = 1 THEN 0 ELSE TOFSET;                        32028000
         RDLVL ~ TRDLVL;                                                32028100
         GRDT ~ TGRDT;                                                  32028200
         NRDF~NRDF-1;                                                   32028300
    END;                                                                32028400
         IF NLVL=66 AND HLVL=1 THEN                                     32028500
    BEGIN       % RENAMES                                               32028600
    LN66:                                                               32028700
         IF SCTRL ! IDV THEN BEGIN ERR(18); GO TO RECOV END;            32028800
         SINFO ~ INFOENTER((I ~ Q.NXF));                                32028900
         IF Q.SCF ! UNKID THEN                                          32029000
          IF Q.SCF ! ITM AND Q.SCF ! CDN                                32029100
           THEN BEGIN ERR(56); GO TO RECOV END;                         32029200
         DRCT[I].SCF ~ ITM;                                             32029300
         IF0[SINFO]~0&NXI SCOPEF&NLVL LVLFF&ITM SCFF;                   32029400
         IF1[SINFO].OFSF ~ OFSET;                                       32029500
         IF3[SINFO] ~ BADR;                                             32029600
         IF SECT = FSECT THEN IF4[SINFO].FLLNK ~ FLINFO;                32029700
         ITEM;                                                          32029800
         PDLY ~ TRUE;                                                   32029900
         IF SCTRL ! LITV THEN NLVL ~ -1 ELSE                            32030000
    BEGIN                                                               32030100
         IF Q.SCF ! ITGRV THEN BEGIN ERR(13); GO TO RECOV END;          32030200
         IF (NLVL ~ ICVI(FALSE)) = 66 THEN GO TO LN66;                  32030300
    END;                                                                32030400
    END LEVEL66;                                                        32030500
         IF SLVL = 77 THEN                                              32030600
    BEGIN                                                               32030700
         IF NOT LV77T THEN ERR(152);                                    32030800
         IF LUSE = CMP1 OR LUSE = IXDN THEN                             32030900
    BEGIN     % PUT IN STACK AS SIMPLE VARIABLE                         32031000
         IF2[SINFO].OSTK ~ 1;                                           32031100
         IF1[SINFO].OFSF ~ 0;                                           32031200
         IF3[SINFO].BADDF ~ IF GRDT THEN RDBADR ELSE GETPRTLOC;         32031300
         IF ASIZE = 16 THEN T ~ GETPRTLOC;                              32031400
    END  ELSE                                                           32031900
         IF BOOLEAN(IF0[SINFO].REDF) THEN IF3[SINFO].BADDF ~ RDBADR ELSE32032000
         IF LUSE=CMP THEN LVL77(CW,ASIZE,SINFO)                         32032100
    ELSE                  LVL77(DW,ASIZE,SINFO);                        32032200
         OFSET ~ 0;                                                     32032300
         GUSE ~ LUSE;                                                   32032400
         IF NLVL = 77 THEN GO TO S;                                     32032500
         IF CW!0 THEN IF T~(IF1[CW].OFSF+7).WIX>DATAMAX THEN DATAMAX~T; 32032510
         IF DW!0 THEN IF T~(IF1[DW].OFSF+7).WIX>DATAMAX THEN DATAMAX~T; 32032520
         IF NLVL ! 88 THEN GO TO XIT;                                   32032600
    END LEVEL77;                                                        32032700
         IF NLVL = 88 THEN                                              32032800
    BEGIN     % CONDITION NAME                                          32032900
         CNLVL ~ SINFO;                                                 32033000
         IF IF2[SINFO].USF = IXDN THEN ERR(136);                        32033100
    CNL:                                                                32033200
         IF SCTRL ! IDV THEN BEGIN ERR(18); GO TO RECOV END;            32033300
         SINFO ~ INFOENTER((I~Q.NXF));                                  32033400
         IF Q.SCF ! UNKID THEN                                          32033500
          IF Q.SCF ! ITM AND Q.SCF ! CDN                                32033600
           THEN BEGIN ERR(56); GO TO RECOV END;                         32033700
         DRCT[I].SCF ~ ITM;                                             32033800
         IF1[SINFO] ~ IF1[CNLVL];                                       32033900
         IF2[SINFO] ~ IF2[CNLVL];                                       32034000
         IF3[SINFO] ~ IF3[CNLVL];                                       32034100
         IF4[SINFO] ~ (T~IF4[CNLVL]) & (IF T.OCLF!0 THEN                32034200
              IF4[SINFO-IFSZ].OCLF+1 ELSE 0) [1:41:7];                  32034250
         LEVEL88;                                                       32034300
         IF0[SINFO] ~ IF0[SINFO]&NXI SCOPEF &88 LVLFF;                  32034400
         IF0[CNLVL].SCOPE ~ NXI;                                        32034500
         PDLY ~ TRUE;                                                   32034600
         IF SCTRL ! LITV THEN NLVL ~ -1 ELSE                            32034700
    BEGIN                                                               32034800
         IF Q.SCF ! ITGRV THEN BEGIN ERR(13); GO TO RECOV END;          32034900
         IF (NLVL ~ ICVI(FALSE)) =88 THEN GO TO CNL;                    32035000
         IF NLVL>SLVL THEN                                              32035100
    BEGIN                                                               32035200
         TGRPCDN~GRPCDN~TRUE;                                           32035300
         GO TO RET88                                                    32035400
    END;                                                                32035500
         SINFO ~ CNLVL;                                                 32035600
    END;                                                                32035700
    END LEVEL88;                                                        32035800
         IF NLVL = SLVL AND NLVL ! 1 THEN GO TO S;                      32035900
         GO TO XIT;                                                     32036000
    ERP: ERR(0);                                                        32036100
    RECOV:                                                              32036200
         WHILE KEY ! PERIOD DO STEPS;                                   32036300
         IF SCTRL!PROCEDUREV AND KEY!WORKSTRG AND KEY!CONSTANT AND      32036400
            KEY  !REPORT     AND KEY!LINKAGE  AND NOT EOFTOG THEN GO S; 32036500
    XIT:                                                                32036600
         IF NLVL=1 THEN GRPCDN~FALSE;                                   32036700
         LV77T ~ FALSE;                                                 32036800
         SINFO ~ LINFO;                                                 32036900
    END RECORDDEC;                                                      32037000
PROCEDURE FSE;          % SYNTAX OF FILE SKELETION                      33000000
    BEGIN                                                               33000100
         REAL FCLASS,CFIB,LOC,DI,FILTYPE,WRD,T;                         33000200
         LABEL IDLP;                                                    33000300
         BOOLEAN M,SECMP,GOTFIRST;                                      33000400
         DEFINE RT =M.[47:1]#, FT=M.[46:1]#,AMT=M.[45:1]#,BCT=M.[44:1]#,33000500
              RCT=M.[43:1]#,LRT=M.[42:1]#,VT=M.[41:1],SFT=M.[40:1]#,    33000600
              DRT=M.[39:1] #,SQT=M.[38:1]#,LNT=M.[37:1]#,ACT=M.[36:1]#, 33000700
              FLT=M.[35:1]#,SKT=M.[34:1]#,RNT=M.[33:1]#;                33000800
         LABEL ERP,RECOV,LP,VCL,SFL,DNS,RCDL;                           33000900
         LABEL XIT,S,RNS,CMC;                                           33001000
         KEY ~ SCTRL;                                                   33001100
    S:                                                                  33001200
         OFSET ~ OCCI ~0;                                               33001300
         M ~ GOTFIRST ~ FALSE;                                          33001400
         CHECKWAS8;  % LEVEL INDICATOR                                  33001500
         IF KEY = FD THEN FCLASS ~ FDV ELSE                             33001600
         IF KEY = SD THEN FCLASS ~ SDV ELSE                             33001700
         IF KEY = SA THEN FCLASS ~ SAV ELSE                             33001800
         GO TO XIT;                                                     33001900
              % FILE NAME OR AREA NAME                                  33002000
         COPTOG ~ TRUE;                                                 33002100
         IF SCTRL ! IDV THEN BEGIN ERR(17); GO TO RECOV END;            33002200
         DI ~ Q.NXF;                                                    33002300
         IF FCLASS = SAV THEN                                           33002400
    BEGIN                                                               33002500
         IF Q.SCF ! UNKID THEN ERR(30);                                 33002600
         BADR ~ GETPRTLOC;                                              33002700
         DRCT[DI].SCF ~ SAV;                                            33002800
         LOC ~ INFOENTER(DI);                                           33002900
         IF0[LOC].SCF ~ SAV;                                            33003000
         IF3[LOC] ~ BADR;                                               33003100
         STEPS;                                                         33003200
         GO TO LP;                                                      33003300
    END;                                                                33003400
         IF Q.SCF ! FCLASS THEN ERR(25);                                33003500
         IF Q.NXIF ! 0 THEN ERR(26);                                    33003600
         CFIB ~ DRCT[DI].FIBF;                                          33003700
         FLINFO ~ LOC ~ INFOENTER(DI);                                  33003800
         IF0[LOC] ~ IF0[LOC]&FCLASS SCFF&CFIB FIBFF;                    33003900
         IF3[LOC].WREADF ~ IF (T~FIB[CFIB,4].FILTYF = 0 OR T=8) THEN 0  33004000
              ELSE IF (T{7 AND T!2) OR (T}15 AND T{18) THEN 1 ELSE 2;   33004100
         IF3[LOC]~ BADR ~ GETPRTLOC;                                    33004300
         IF3[LOC].DAYF ~ 1;                                             33004400
         MACRO(IF FCLASS=SDV THEN MKSMM ELSE ADCM,LOC,0);               33004500
         IF4[LOC].FLLNK ~ FIB[CFIB,6].TANKF;                            33004600
         WRD ~ FIB[CFIB,4];                                             33004700
                   % SET RECORDING MODE TO STANDARD                     33004800
         FIB[CFIB,13].RMODF ~ REAL(WRD.FILTYF=MT OR WRD.FILTYF}TPS);    33004900
         STEPS;                                                         33005000
         IF LIBTOG THEN                                                 33005100
    BEGIN                                                               33005200
         IF KEY = FD OR KEY = SD OR KEY = SA THEN                       33005300
              BEGIN STEPS; STEPS END;                                   33005400
    END;                                                                33005500
         COPTOG ~ FALSE;                                                33005600
    LP:  IF KEY = PERIOD THEN GO TO RCDL;                               33005700
         SMICHK;                                                        33005800
         CHECKNOT8;                                                     33005900
         IF FCLASS = SDV THEN IF NOT(KEY = DATA OR KEY = RECORD) THEN   33005930
         ERR(28);                                                       33005970
         IF FCLASS = SAV THEN IF KEY = AREA THEN                        33006000
    BEGIN                                                               33006100
         IF ACT THEN ERR(27) ELSE ACT ~ TRUE;                           33006200
         IF SCTRL = CONTAINS THEN STEPS;                                33006300
         IF KEY ! LITV OR Q.SCF ! ITGRV THEN ERR(13) ELSE               33006400
         T ~ ICVI(FALSE);                                               33006500
         IF SCTRL = CHARACTERS THEN                                     33006600
    BEGIN                                                               33006700
         T ~ -T;                                                        33006800
         STEPS;                                                         33006900
    END  ELSE                                                           33007000
         IF KEY = RECORDS THEN STEPS;                                   33007100
         GO TO LP                                                       33007200
    END;                                                                33007300
         IF KEY = RECORD THEN                                           33007400
    BEGIN                                                               33007500
         IF RCT THEN ERR(27) ELSE RCT ~ TRUE;                           33007600
         IF SCTRL = CONTAINS THEN STEPS;                                33007700
         IF KEY ! LITV OR Q.SCF ! ITGRV                                 33007800
          THEN BEGIN ERR(13); GO TO RECOV END;                          33007900
         T ~ ICVI(FALSE);                                               33008000
         IF SCTRL = TOV THEN                                            33008100
    BEGIN                                                               33008200
         IF FIB[CFIB,4].FILTYF=DK THEN ERR(35);                         33008300
         T.MINRS ~ T;                                                   33008400
         IF SCTRL ! LITV OR Q.SCF ! ITGRV                               33008500
          THEN BEGIN ERR(13); GO TO RECOV END;                          33008600
         T.MAXRS ~ ICVI(FALSE);                                         33008700
         IF T.MINRS>T.MAXRS THEN ERR(33);                               33008800
         IF1[LOC].DCRS ~ T.MAXRS;                                       33008900
         T.MAXRS ~ (T.MAXRS+7).WIX;         % CONVERT MAX AND MIN RECORD33009000
         IF T.MINRS!0 THEN T.MINRS ~ (T.MINRS+7).WIX;  % SIZES TO WORDS 33009100
         STEPS;                                                         33009200
    END ELSE                                                            33009300
    BEGIN                                                               33009400
         IF1[LOC].DCRS ~ T.MAXRS;                                       33009500
         T ~ (T+7).WIX;                                                 33009600
    END;                                                                33009700
         FIB[CFIB,18] ~ T;                                              33009800
         IF KEY = CHARACTERS THEN STEPS;                                33009900
         GO TO LP;                                                      33010000
    END;                                                                33010100
         IF FCLASS = SAV THEN GO TO ERP;                                33010200
         IF KEY = DATA THEN                                             33010300
    BEGIN                                                               33010400
         IF DRT OR RNT THEN ERR(27) ELSE DRT~TRUE;                      33010500
         DECTOG ~ FALSE;                                                33010600
         IF NOT (SCTRL = RECORD OR KEY = RECORDS) THEN GO TO ERP;       33010700
         IF SCTRL = ARE OR KEY = ISV THEN STEPS;                        33010800
    DNS: IF KEY ! IDV THEN GO TO ERP;                                   33010900
         IF SCTRL = COMMA OR KEY = ANDV THEN                            33011000
    BEGIN                                                               33011100
         CMACHK; IF KEY ! IDV THEN GO TO ERP;                           33011200
    END;                                                                33011300
         IF KEY = IDV THEN GO TO DNS;                                   33011400
         DECTOG ~ TRUE;                                                 33011500
         GO TO LP;                                                      33011600
    END;                                                                33011700
         IF FCLASS ! FDV THEN GO TO ERP;                                33011800
         IF KEY = REPORT THEN                                           33011900
    BEGIN     COMMENT * * *                                             33012000
              REPORT/REPORTS IS/ARE REPORT-NAME-1 [,REPORT-NAME-2]...  ;33012100
         IF SCTRL = ARE OR KEY = ISV THEN STEPS;                        33012200
         IF DRT OR RNT THEN ERR(27) ELSE RNT~TRUE;                      33012300
    RNS: IF KEY ! IDV THEN GO TO ERP;                                   33012400
         IF Q.SCF ! UNKID THEN BEGIN ERR(184); GO TO RECOV END;         33012500
%%%%     LINK TO FILE INFO                                              33012600
         RAY[NOR~NOR+1]~Q.NXF&LOC[16:32:16];                            33012700
         DRCT[Q.NXF]~DRCT[IIX]&RPN[03:43:5]&NOR[08:40:8];               33012800
         IF SCTRL = COMMA OR KEY = ANDV THEN                            33012900
    BEGIN                                                               33013000
         CMACHK; IF KEY ! IDV THEN GO TO ERP                            33013100
    END;                                                                33013200
         IF KEY = IDV THEN GO TO RNS;                                   33013300
         GO TO LP                                                       33013400
    END REPORT STUFF;                                                   33013500
         IF KEY   = RECORDING THEN                                      33013600
    BEGIN     % RECORDING MODE                                          33013700
         IF RT THEN ERR(27) ELSE RT ~ TRUE;                             33013800
         IF SCTRL =MODE THEN STEPS;                                     33013900
         IF KEY = ISV THEN STEPS;                                       33014000
         IF KEY = STANDARD THEN STEPS;                                  33014100
         IF KEY = NONSTANDARD THEN                                      33014200
    BEGIN                                                               33014300
         KEY ~ SCTRL;                                                   33014400
         IF WRD.FILTYF=MT THEN FIB[CFIB,13].RMODF ~ 0;                  33014500
   END;                                                                 33014600
         GO TO LP;                                                      33014700
    END;                                                                33014800
         IF KEY = BLOCK THEN                                            33014900
    BEGIN                                                               33015000
         IF BCT THEN ERR(27) ELSE BCT ~ TRUE;                           33015100
         IF SCTRL =CONTAINS THEN STEPS;                                 33015200
         IF KEY ! LITV OR Q.SCF ! ITGRV THEN BEGIN ERR(13);GO RECOV END;33015300
         T ~ ICVI(FALSE);                                               33015400
         IF SCTRL = TOV THEN                                            33015500
    BEGIN                                                               33015600
         IF FIB[CFIB,4].FILTYF=DK THEN ERR(35);                         33015700
         T.MIBS ~ T;                                                    33015800
         IF SCTRL ! LITV OR Q.SCF ! ITGRV                               33015900
          THEN BEGIN ERR(13); GO TO RECOV; END                          33016000
          ELSE T.MXBS ~ ICVI(FALSE);                                    33016100
         STEPS;                                                         33016200
    END;                                                                33016300
         IF KEY = RECORDS THEN                                          33016400
    BEGIN                                                               33016500
         T ~ - T;                                                       33016600
         STEPS;                                                         33016700
    END  ELSE                                                           33016800
         IF KEY = CHARACTERS THEN STEPS;                                33016900
         FIB[CFIB,16] ~ T;                                              33017000
         IF T.MXBS{T.MIBS THEN ERR(34);                                 33017100
         GO TO LP;                                                      33017200
    END;                                                                33017300
         IF KEY = LABELV THEN                                           33017400
    BEGIN                                                               33017500
         IF LRT THEN ERR(256) ELSE LRT~ TRUE;                           33017600
         IF SCTRL =RECORD OR KEY = RECORDS THEN STEPS                   33017700
           ELSE GO TO ERP;                                              33017800
         IF KEY = ARE OR KEY = ISV THEN STEPS;                          33017900
         IF KEY=OMITTED OR KEY=NONSTANDARD THEN                         33018000
    BEGIN                                                               33018100
         WRD.LBLF ~ 1;                                                  33018200
         IF WRD.FILTYF=DK THEN ERR(38);                                 33018300
         IF KEY=NONSTANDARD THEN FIB[CFIB,5].NSTDLF ~ 1;                33018400
    END  ELSE                                                           33018500
         IF KEY!STANDARD THEN                                           33018600
         IF KEY!IDV THEN GO TO ERP ELSE                                 33018700
    BEGIN                                                               33018800
         LBLRTOG ~ TRUE;                                                33018900
         LBLR ~ Q.NXF;                                                  33019000
    END;                                                                33019100
         STEPS;                                                         33019200
         GO TO LP;                                                      33019300
    END;                                                                33019400
         IF KEY = VALUEV THEN                                           33019500
    BEGIN                                                               33019600
         IF SCTRL = OFV THEN STEPS;                                     33019700
         IF KEY = ID THEN                                               33019800
    BEGIN                                                               33019900
         IF2[LOC] ~ 1;                                                  33020000
         IF SCTRL = ISV THEN STEPS;                                     33020100
         IF KEY=IDV THEN                                                33020200
    BEGIN                                                               33020300
         MACROGEN(FIDM,DI,Q.NXF);                                       33020400
         STEPS;                                                         33020500
         GO TO CMC;                                                     33020600
    END ELSE                                                            33020700
    IDLP:                                                               33020800
         IF KEY=LITV AND Q.SCF=STRNGV THEN                              33020900
         IF SCANFID(ACCUM[1],FIB[CFIB,20],FIB[CFIB,21],ACCUM[1].SIZEF)  33021000
         THEN ERR(-40) ELSE                                             33021100
         ELSE                                                           33021200
    BEGIN                                                               33021300
         ERR(17);                                                       33021400
         GO TO RECOV;                                                   33021500
    END;                                                                33021600
         STEPS;                                                         33021700
         IF KEY=SLASH THEN                                              33021800
    BEGIN                                                               33021900
         STEPS;                                                         33022000
     IF NXKEY = SLASH THEN ERR(275);                                    33022100
         GO TO IDLP;                                                    33022200
    END;                                                                33022300
    END;                                                                33022400
    CMC:                                                                33022500
         IF KEY = COMMA OR KEY = ANDV THEN                              33022600
    BEGIN                                                               33022700
         CMACHK; IF KEY ! IDV AND KEY !SAVEFACTOR THEN GO TO ERP;       33022800
    END;                                                                33022900
    SFL: IF KEY = SAVEFACTOR THEN                                       33023000
    BEGIN                                                               33023100
         IF SCTRL = ISV THEN STEPS;                                     33023200
         IF KEY ! LITV OR Q.SCF ! ITGRV                                 33023300
          THEN BEGIN ERR(13); GO TO RECOV END;                          33023400
         IF ICVI(FALSE) > 999 THEN ERR(41);                             33023500
         WRD.SVFF~ IF T~ACCUM[1].SIZEF = 1 THEN ACCUM[1].[12:6] ELSE    33023600
                   IF T = 2 THEN ACCUM[1].[12:12] ELSE ACCUM[1].[12:18];33023700
         STEPS;                                                         33023800
    END;                                                                33023900
    VCL:                                                                33024000
         IF KEY = COMMA OR KEY = ANDV THEN                              33024100
    BEGIN                                                               33024200
         CMACHK; IF KEY ! IDV THEN GO TO ERP;                           33024300
    END;                                                                33024400
         IF KEY ! IDV THEN GO TO LP;                                    33024500
% *** TO BE IMPLEMENTED                                                 33024600
         STEPS;    % DATA-NAME                                          33024700
         IF NOT (KEY = LITV OR KEY = IDV)                               33024800
          THEN GO TO ERP;                                               33024900
         GO TO VCL;                                                     33025000
    END VALUE;                                                          33025100
         IF KEY = SAVEFACTOR THEN GO TO SFL;                            33025200
         IF KEY=LINAGE THEN                                             33025300
    BEGIN                                                               33025400
         IF SCTRL=ISV THEN STEPS;                                       33025500
         IF KEY=LITV AND Q.SCF=ITGRV THEN                               33025600
    BEGIN                                                               33025700
         FIB[CFIB,1] ~ ACCUM[1].[12:18];                                33025800
    END ELSE IF KEY=IDV THEN                                            33025900
    BEGIN                                                               33026000
         MACROGEN(PGLM,DI,Q.NXF);                                       33026100
         FIB[CFIB,1] ~ -1;                                              33026200
    END ELSE ERR(13);                                                   33026300
         IF2[LOC].PGF ~ 1;                                              33026400
         FILL XACUM[*] WITH 0,"0>LINAGE","-COUNTER";                    33026500
         XACUM[0] ~ 0&ITM SCFF;                                         33026600
         MOVE(ACCUM[0],XACUM[0],3);                                     33026700
         SCRAMBLEIT;                                                    33026800
         T ~ INFOENTER(ACCUM[0].NXF);                                   33026900
         STEPS;                                                         33027000
         IF0[T] ~ 0&ITM SCFF&77 LVLFF&NXI SCOPEF;                       33027100
         IF1[T].LGHF ~ 8;                                               33027200
         IF2[T] ~ 0&NM CLFF&CMP1 USFF&8 SZFF&1 OSTKF&1 WRDOFF;          33027300
         IF3[T].BADDF ~ FIB[CFIB,3] ~ GETPRTLOC;                        33027400
         STEPS;                                                         33027500
         GO TO LP;                                                      33027600
    END;                                                                33027700
    ERP: ERR(0);                                                        33027800
         DECTOG ~ TRUE;                                                 33027900
    RECOV:                                                              33028000
         IF KEY = PERIOD THEN GO TO RCDL; STEPS;                        33028100
         IF KEY < 10 OR Q.SCF ! 1 AND KEY ! DATA THEN                   33028200
         GO TO RECOV;                                                   33028300
         GO TO LP;                                                      33028400
    RCDL:                                                               33028500
         FIB[CFIB,4] ~ WRD;                                             33028600
         STEPS;                                                         33028700
         IF KEY ! LITV THEN                                             33028800
    BEGIN                                                               33028900
         IF NOT RNT  THEN ERR(42);                                      33029000
         IF KEY =FD OR KEY = SD OR KEY = SA THEN GO TO S;               33029100
    END;                                                                33029200
         WHILE KEY = LITV AND Q.SCF = ITGRV DO                          33029300
    BEGIN                                                               33029400
         IF (NLVL ~ ICVI(FALSE)) ! 01 THEN ERR(42);                     33029500
         OCCI~OFSET~HLVL~NRDF~0;                                        33029600
         SECMP ~ FALSE;                                                 33029700
         RECORDDEC(0,FALSE,SECMP);                                      33029800
              % SINFO IS NOW INFO OF 01 LEVEL                           33029900
              % RECORD SIZE HANDLING                                    33030000
         IF LBLRTOG THEN                                                33030100
    BEGIN                                                               33030200
         LBLRTOG ~ FALSE;                                               33030300
         IF (T~IF1[SINFO].LGHF)>8 AND ((FILTYPE~FIB[CFIB,4].FILTYF)=CR  33030400
              OR FILTYPE=CP) OR T>56 AND (FILTYPE=LPO OR FILTYPE=BUT OR 33030500
              FILTYPE=LOT OR (FILTYPE}BUD AND FILTYPE{LDT))             33030600
              THEN ERR(258);                                            33030700
    END ELSE                                                            33030800
         IF NOT GOTFIRST THEN                                           33030900
    BEGIN     % FIRST DATA RECORD                                       33031000
         GOTFIRST ~ TRUE;                                               33031100
         IF4[LOC].RCLNK ~ SINFO;                                        33031200
         IF IF1[LOC].FCHRSZ = 0 THEN                                    33031300
         IF1[LOC].FCHRSZ ~ IF2[SINFO].USF;                              33031400
         IF FCLASS=SD THEN                                              33031600
    BEGIN                                                               33031700
         IF BOOLEAN(IF2[SINFO].VARF) THEN ERR(36);                      33031800
         IF1[LOC].DCRS ~ IF1[SINFO].LGHF;                               33031900
    END ELSE                                                            33032000
    BEGIN                                                               33032100
         IF NOT RCT THEN                                                33032200
    BEGIN     % NO RECORD CONTAINS                                      33032300
         IF1[LOC].DCRS ~ (T~IF1[SINFO].LGHF);                           33032400
         FIB[CFIB,18].MAXRS ~ (T+7).WIX;                                33032500
    END  ELSE                                                           33032600
         IF IF1[LOC].DCRS  NEQ IF1[SINFO].LGHF THEN ERR(153);           33032700
              % SET UP BLOCKING                                         33032800
         IF (WRD~FIB[CFIB,16])<0 THEN  % CONVERT BLOCK SIZE TO WORDS    33032900
    BEGIN                              % BLOCK SIZE NOW IN RECORDS      33033000
         IF (T1~WRD.MIBS)!0 THEN WRD.MIBS ~ IF (T~FIB[CFIB,18]).MINRS!0 33033100
              THEN T1|T.MINRS ELSE T1|T;                                33033200
         WRD.MXBS ~ WRD.MXBS|FIB[CFIB,18].MAXRS;                        33033300
         FIB[CFIB,16] ~ WRD;                                            33033400
    END ELSE IF WRD>0 THEN             % CONVERT BLOCK SIZE TO WORDS    33033500
    BEGIN                              % BLOCK SIZE NOW IN CHARACTERS   33033600
         IF WRD.MXBS<IF1[SINFO].LGHF THEN ERR(44);                      33033650
         WRD.MXBS ~ (WRD.MXBS+7).WIX;                                   33033700
         IF WRD.MIBS!0 THEN WRD.MIBS ~ (WRD.MIBS+7).WIX;                33033800
    END ELSE WRD ~ FIB[CFIB,18].MAXRS;                                  33033900
         T1 ~ IF (T1~FIB[CFIB,18].MAXRS)=0 THEN 0 ELSE WRD.MXBS DIV T1; 33034000
         FIB[CFIB,11] ~ T1 ~ IF T1=0 THEN 1 ELSE T1;       % NUMREC     33034100
         IF WRD}0 AND WRD.MIBS!0 AND (T~FIB[CFIB,18]).MINRS=0 THEN      33034150
              FIB[CFIB,18].MINRS ~ 1;                                   33034160
         FIB[CFIB,5].BLKF ~ REAL(WRD.MXBS>T.MAXRS AND (JUNK~T.MINRS)=0) 33034200
              +3|REAL(JUNK!0);                                          33034300
         IF WRD.MIBS!0 THEN IF WRD.MIBS<T.MINRS THEN ERR(37);           33034350
         IF WRD<0 THEN IF T.MINRS!0 THEN IF T.MINRS<T.MAXRS             33034400
              THEN ERR(284);                                            33034450
         T ~ WRD.MXBS;                                                  33034500
         IF T = 0 THEN T ~ FIB[CFIB,18].MAXRS;                          33034600
         FIB[CFIB,18].BUFSZF ~ T;                                       33034800
         IF FIB[CFIB,4].FILTYF=DK THEN                                  33034900
              IF (T MOD 30)!0 OR (FIB[CFIB,8].SZROWS MOD T1)!0          33035000
              THEN ERR(-283);                                           33035100
         IF FIB[CFIB,5].BLKF=1 THEN IF (T ~ FIB[CFIB,18].MAXRS)! 0 THEN 33035200
         IF WRD.MXBS MOD T ! 0 THEN ERR(-20);                           33035300
    END;                                                                33035400
    END  ELSE                                                           33035500
    BEGIN     % NOT FIRST RECORD                                        33035600
         IF (T~IF1[LOC].DCRS)!(T1~IF1[SINFO].LGHF) THEN                 33035700
    BEGIN                                                               33035800
         IF T1>T THEN                                                   33035900
    BEGIN                                                               33035905
         IF1[IF4[LOC].RCLNK].LGHF ~ T1;                                 33035910
         FIB[CFIB,18].MAXRS ~ T1 ~ (T1+7).WIX;                          33035920
         IF T1>FIB[CFIB,18].BUFSZF THEN FIB[CFIB,18].BUFSZF ~ T1;       33035940
    END;                                                                33035950
         ERR(-229);                                                     33036000
    END;                                                                33036100
         IF BOOLEAN(IF2[SINFO].VARF) THEN                               33036150
              IF NOT BOOLEAN(IF2[IF4[LOC].RCLNK].VARF) THEN ERR(22);    33036160
    END;                                                                33036200
         IF0[LOC].SCOPE ~ NXI;                                          33036300
    END;                                                                33036400
         IF (T~FIB[CFIB,18].MAXRS)>DATAMAX THEN DATAMAX ~ T;            33036450
         IF NOT GOTFIRST THEN ERR(154);                                 33036500
         IF4[LOC].FLLNK ~ FIB[CFIB,6].TANKF;            % TANK POINTER  33036600
         GO TO S;                                                       33036700
    XIT:                                                                33036800
         IF NOT(KEY =WORKSTRG OR KEY = CONSTANT OR KEY= LINKAGE         33036900
             OR KEY = REPORT OR KEY = PROCEDUREV) THEN                  33037000
    BEGIN                                                               33037100
         DO STEPS UNTIL MARGINA OR EOFTOG;                              33037200
         IF SCTRL=FD OR KEY=SD OR KEY=SA THEN GO TO S                   33037300
              ELSE IF NOT EOFTOG THEN GO TO XIT;                        33037400
    END;                                                                33037500
    END FSE;                                                            33037600
PROCEDURE WSE;  % SYNTAX  AND SET UP OF WORKING STORAGE SECTION         34000000
    BEGIN                                                               34000100
         REAL SXI;                                                      34000150
         BOOLEAN SECMP;                                                 34000200
         LABEL ERP,L77,LN77,ERP7,XIT,RECOV;                             34000300
    L77: IF SCTRL ! LITV THEN GO TO XIT;                                34000400
         BADR~OCCI~OFSET~HLVL~NRDF~0;                                   34000500
         CW ~ DW ~ 0;                                                   34000600
         IF Q.SCF ! ITGRV THEN BEGIN ERR(13); GO TO RECOV END;          34000700
         IF (NLVL ~ ICVI(FALSE)) ! 77 THEN GO TO LN77;                  34000800
         LV77T ~ TRUE;                                                  34000900
         SECMP ~ FALSE;                                                 34001000
         RECORDDEC(BCL,FALSE,SECMP);                                    34001100
         IF KEY = LITV THEN GO TO LN77                                  34001200
                       ELSE GO TO XIT;                                  34001300
    ERP7:                                                               34001400
         ERR(0);                                                        34001500
    RECOV:                                                              34001600
         WHILE KEY ! PERIOD DO STEPS;                                   34001700
         GO TO L77;                                                     34001800
    LN77:                                                               34001900
         IF NLVL ! 1 THEN ERR(42);                                      34002000
         BADR~OCCI~OFSET~HLVL~NRDF~0;                                   34002100
         EMITMACROPAIR(ADCM,NXI);                                       34002200
         SXI ~ NXI;                                                     34002250
         SECMP ~ FALSE;                                                 34002300
         RECORDDEC(0,FALSE,SECMP);                                      34002400
         IF T~(IF1[SXI].LGHF+7).WIX>DATAMAX THEN DATAMAX ~ T;           34002450
         IF KEY ! LITV THEN GO TO XIT;                                  34002500
         IF Q.SCF ! ITGRV THEN                                          34002600
    BEGIN                                                               34002700
         ERR(13);                                                       34002800
         WHILE KEY ! PERIOD DO STEPS;                                   34002900
         GO TO LN77;                                                    34003000
    END;                                                                34003100
         NLVL ~ ICVI(FALSE);                                            34003200
         GO TO LN77;                                                    34003300
    XIT:                                                                34003400
         IF NOT(KEY = CONSTANT OR KEY = LINKAGE OR KEY = REPORT         34003500
             OR KEY = PROCEDUREV) THEN                                  34003600
    BEGIN                                                               34003700
         ERR(0);                                                        34003800
         DO STEPS UNTIL MARGINA OR EOFTOG;                              34003900
         IF SCTRL=LITV THEN GO TO LN77 ELSE IF NOT EOFTOG THEN GO XIT;  34004000
    END;                                                                34004100
    END WSE;                                                            34004200
PROCEDURE RSE;                                                          35000000
 BEGIN                                                                  35000100
    DEFINE   TRUB = 1#,  FALSB = 0#;                                    35000200
    DEFINE                                                              35000300
      RCODET = M.[47:1]#,     % CODE        ** RD CLAUSES **            35000400
         CNT = M.[46:1]#,     % CONTROL                                 35000500
         PLT = M.[45:1]#,     % PAGE LIMITS                             35000600
         HT  = M.[44:1]#,     %   HEADING                               35000700
         FDT = M.[43:1]#,     %   FIRST DETAIL                          35000800
         LDT = M.[42:1]#,     %   LAST  DETAIL                          35000900
         FT  = M.[41:1]#;     %   FOOTING                               35001000
    DEFINE                                                              35001100
         DEGT =M.[37:1]#,    % DETAIL      ** TYPES OF REPORT GROUPS    35001200
         CFGT =M.[36:1]#,    % CONTROL FOOTING                          35001300
         CHGT =M.[35:1]#,    % CONTROL HEADING                          35001400
         PFGT =M.[34:1]#,    % PAGE FOOTING                             35001500
         PHGT =M.[33:1]#,    % PAGE HEADING                             35001600
         RFGT =M.[32:1]#,    % REPORT FOOTING                           35001700
         RHGT =M.[31:1]#;    % REPORT HEADING                           35001800
    DEFINE                                                              35001900
         RCMACHK  = IF KEY = COMMA THEN KEY := DNSCAN#;                 35002000
    REAL                                                                35002100
         CNO,      % NUMBER OF RPT CONTROL LEVELS (EXCLUDING FINAL)     35002200
         PGLMT,                                                         35002300
         HDG,                                                           35002400
         FRSTDTL,                                                       35002500
         LSTDTL,                                                        35002600
         FTNG,                                                          35002700
         HLVIF,    % INFO INDEX OF NEXT HIGHER RPT CONTROL LEVEL        35002800
         RMXRS,                                                         35002900
         RMIRS,                                                         35003000
         CFIB,     % INDEX TO FIB FOR FILE OF CURRENT RPT               35003100
         RAI,      % INDEX TO RAY                                       35003200
         RZ,       % TEMP  FOR RNIF                                     35003300
         WZ,                                                            35003400
         W1,                                                            35003500
         W2,                                                            35003600
         W3,                                                            35003700
         W4,                                                            35003800
         W5,                                                            35003900
         LCIF,                                                          35004000
         RSGIF;                                                         35004100
    DEFINE                   % REALS                                    35004200
         DNO    = UL[7]#,    % # OF TYPE DETAIL RPT GROUPS              35004300
         RGTYPE = UL[9]#,    % TYPE OF CURRENT RPT GROUP                35004400
         SPACTYP= UL[10]#,   % TYPE OF LINE SPACING BY LINE OF RPT. GRP 35004500
         LSPAC  = UL[11]#,   % VALUE FROM LINE CLAUSE                   35004600
         NGSPAC = UL[12]#,   % VALUE FROM NEXT GROUP SPACING CLAUSE GRP 35004700
         NGSPOP = UL[13]#,   % TYPE OF LINE SPACING OPT FROM NXT GRP CL 35004800
         GUSE   = UL[14]#,   % USAGE OF RPT                             35004900
         COLNO  = UL[15]#,   % COLUMN NUMBER                            35005000
         RNDI   = UL[16]#,   % RPT NAME DICT INDEX                      35005100
         RSAI   = UL[17]#,   % FIRST SUM CTR DECLARED IN SUM ARRAY      35005200
         R1     = UL[18]#,                                              35005300
         R2     = UL[19]#,                                              35005400
         R3     = UL[20]#,                                              35005500
         R4     = UL[21]#,                                              35005600
         R5     = UL[22]#,                                              35005700
         PDRGIF = UL[23]#,                                              35005800
         PRPIF  = UL[24]#,                                              35005900
         RNIF   = UL[25]#,                                              35006000
         RLVIF  = UL[26]#,                                              35006100
         PCIF   = UL[27]#,                                              35006200
         RGIF   = UL[28]#,                                              35006300
         RLIF   = UL[29]#,                                              35006400
         RPIF   = UL[30]#,                                              35006500
         RSIF   = UL[31]#;                                              35006600
    DEFINE         % REPORT ELEMENTARY SPECS                            35006700
    %    PCT  = IM.[47:1]#,  % PICTURE CLAUSE                           35006800
    %    BWZT = IM.[46:1]#,  % BLANK WHEN ZERO                          35006900
%                  45:1                          NOT USED               35007000
%                          44:1                         NOT USED        35007100
    %    JST  = IM.[43:1]#,  % JUSTIFIED                                35007200
%                  42:1                                 NOT USED        35007300
         RGIT = IM.[41:1]#,  % GROUP INDICATE                           35007400
         RCOT = IM.[40:1]#,  % COLUMN                                   35007500
         RUPT = IM.[39:1]#, % TRUE IF UPON OPTION FOR CURRENT SUM CLAUSE35007600
         RSET = IM.[38:1]#,  % RESET                                    35007700
         RSUT =IM.[37:1]#,  % SUM                                       35007800
         RSOT =IM.[36:1]#,  % SOURCE                                    35007900
    %                                                                   35008000
    %    VAT  =IM.[32:1]#,  % VALUE IS                                  35008100
                   % REPORT GROUP SPECS                                 35008200
    %             [31:1]    % OCCT          NOT USED                    35008300
    %             [30:1]    % SZVT          NOT USED                    35008400
    %             [29:1]    % SZT           NOT USED                    35008500
    %    CDT     =[28:1]    % LIBRARY COPY                              35008600
%                  27:1                          NOT USED               35008700
%                  26:1                          NOT USED               35008800
%                  25:1                          NOT USED               35008900
    %    UST      [24:1]#,  % USAGE                                     35009000
%                  23:1                          NOT USED               35009100
         RDNT    =IM.[22:1]#,%DATA NAME  APPEARED                       35009200
         RDNAT   =IM.[21:1]#,%DN IS ASSIGNED (DICT LINKED TO INFO)      35009300
         RLNT    =IM.[20:1]#,%LINE CLAUSE                               35009400
         RNGT    =IM.[19:1]#,%NEXT GROUP CLAUSE                         35009500
         RTYPT   =IM.[18:1]#;%TYPE OF REPORT GROUP                      35009600
    DEFINE                   % REALS                                    35009700
         LINFO  = UL[32]#,                                              35009800
         SVSNL  = UL[33]#,   % SAVE NXIF FROM DICT FOR SNL IN INFO LATER35009900
         RUSE   = UL[34]#,                                              35010000
         S      = UL[35]#,                                              35010100
         V1     = UL[36]#,                                              35010200
         V2     = UL[37]#,                                              35010300
         T1     = UL[38]#,                                              35010400
         T2     = UL[39]#,                                              35010500
         PRLIF  = UL[8]#;    % PRIOR LINE(IF ANY) OF THIS RPT GRP       35010600
    DEFINE                   % BOOLEANS                                 35010700
         M      = BUL[23]#,                                             35010800
         RLCUT  = BUL[24]#,                                             35010900
         RPCUT  = BUL[25]#,                                             35011000
         FRSTLIN= BUL[26]#,  % TRUE UNTIL 1ST PRINT LINE OF GRP IS SEEN 35011100
         RLIFT  = BUL[27]#,  % TRUE IF RLIF HAS BEEN DECLARED           35011200
         RPIFT  = BUL[28]#,  % TRUE IF RPIF HAS BEEN DECLARED           35011300
         RSIFT  = BUL[29]#,  % TRUE IF RSIF HAS BEEN DECLARED           35011400
         RAUPT  = BUL[30]#,  % TRUE IF UPON OPT FOR ANY SUM OF THIS ENT 35011500
         SFU    = BUL[31]#,  % SOURCE FIELD UNKNOWN                     35011600
         RMSUT  = BUL[32]#;  % TRUE IF >1 SUM CLAUSE IN THIS ENTRY      35011700
PROCEDURE CHNL(FB);VALUE FB; INTEGER FB;                                35011800
    BEGIN                                                               35011900
    END;                                                                35012000
STREAM PROCEDURE ZEROER(A,W); VALUE W;                                  35012100
    BEGIN                                                               35012200
         DI ~ A;                                                        35012300
         W(DS ~ 8 LIT "0");                                             35012400
    END;                                                                35012500
PROCEDURE REPITEM;      % PROCESS CLAUSES WITHIN A RPT ENTRY            35012600
 BEGIN                                                                  35012700
   DEFINE                                                               35012800
    CHKLEVID =                                                          35012900
      IF NOT BOOLEAN(IF2[Q.NXIF].RWSF) THEN GO TO E195;                 35013000
      RLVIF := IF3[Q.NXIF].RWLF;                                        35013100
     IF IF0[RLVIF].SCF NEQ RPI THEN                                     35013200
        BEGIN ERR(196); GO RCVR  END;#;                                 35013300
    BOOLEAN                                                             35013400
              MUPO,     % TRUE IF MULTIPLE OPERANDS OF UPON SUBCLAUSE   35013500
              UPONO,    % TRUE IF AT LEAST ONE OPERAND OF UPON          35013600
         DIR;                                                           35013700
     REAL                                                               35013800
         SUPO; % DICT INDEX OF (LAST) OPERAND OF UPON CLAUSE            35013900
    LABEL  LUP,CFL,E195,CHL,PHL,PFL,RHL,RFL,PFX,NXUO,RSTERR,RSTAL;      35014000
    LABEL     WRP,RCVR,ERP,TRCV,STRT,XIT;                               35014100
PROCEDURE ROPERAND;                                                     35014200
 BEGIN                                                                  35014300
         LABEL  SI,NXK,ROXIT;                                           35014400
  DECTOG := TRUE;                                                       35014500
  SFU := FALSE;                                                         35014600
  S := -1;                                                              35014700
   SI:   IF NOT SFU THEN SFU := (Q.SCF = UNKID);                        35014800
     STK[S:=S+1] := Q.NXIF;    % INFO INDEX                             35014900
     MAC2(QUAL,Q.NXF);         % DICT INDEX                             35015000
 NXK: IF NXKEY  NEQ OFV AND NXKEY  NEQ INV THEN GO TO ROXIT;            35015100
     STEPS;                    % SKIPS OF OR IN                         35015200
     IF SCTRL = IDV THEN GO TO SI                                       35015300
                    ELSE BEGIN  ERR(75);GO TO NXK  END;                 35015400
 ROXIT:  MAC1(XXXXM);          % DELIMITER                              35015500
  DECTOG := FALSE;                                                      35015600
 END;    % OF ROPERAND                                                  35015700
PROCEDURE RSPECREG;                                                     35015800
 BEGIN                                                                  35015900
         REAL      SVKEY;                                               35016000
         BOOLEAN   LICT,PACT;                                           35016100
         LABEL     SFPLC;                                               35016200
  IF (LICT := KEY=LINECNT) OR (PACT := KEY=PAGECNT) THEN                35016300
   BEGIN                                                                35016400
    SVKEY:= KEY;                                                        35016500
    IF NXKEY=OFV OR NXKEY=INV THEN                                      35016600
     BEGIN                                                              35016700
      STEPS;                                                            35016800
      IF SCTRL  NEQ IDV OR Q.SCF  NEQ RPN                               35016900
         THEN BEGIN ERR(215); T:= RNDI; GO TO SFPLC  END                35017000
         ELSE BEGIN T := Q.NXF;         GO TO SFPLC  END;               35017100
     END ELSE T := RNDI;                                                35017200
 SFPLC: IF T = RNDI THEN                                                35017300
          IF LICT THEN RLCUT := TRUE                                    35017400
                  ELSE RPCUT := TRUE;                                   35017500
         IF3[RPIF].SFTYP := PFSPECR;                                    35017600
      MACRO(RPFM,RNDI,SVKEY);                                           35017700
         MACRO(RPFM,0,PFX8);      %****                                 35017800
   END ELSE                                                             35017900
    IF KEY = TODAYSDATE THEN                                            35018000
        BEGIN                                                           35018100
         IF3[RPIF].SFTYP := PFSPECR;                                    35018200
               MACRO(RPFM,0,KEY);                                       35018300
         MACRO(RPFM,0,PFX8);      %****                                 35018400
        END;                                                            35018500
  END;   % OF RSPECREG                                                  35018600
PROCEDURE RSUBSCRIPTS;                                                  35018700
 BEGIN                                                                  35018800
         LABEL     SUBERR;                                              35018900
         REAL DNIF,CNT;                                                 35019000
  IF SFU THEN GO TO SUBERR;                                             35019100
    IF S = 0 THEN DNIF := STK[0]                                        35019200
     ELSE BEGIN                                                         35019300
             IF (CNT := QUALCHECK(0,0,S))  NEQ 1 THEN                   35019400
              IF CNT > 1 THEN ERR(49)                                   35019500
                         ELSE ERR(48);                                  35019600
           ACCUM[0] := Q;                                               35019700
           DNIF := Q.NXIF;                                              35019800
          END;                                                          35019900
    IF I :=(T :=IF2[DNIF]).SUBF  NEQ 0 THEN SUBSCRIPTS(I)               35020000
       ELSE BEGIN                                                       35020100
 SUBERR:      ERR(101);                                                 35020200
              MAC2(STRTS,2);                                            35020300
              MAC2(FINSM,0);                                            35020400
            END;                                                        35020500
 END;    % OF RSUBSCRIPTS                                               35020600
         %* * * * *  BEGINNING OF REPITEM *  * * * * * *                35020700
    IM.[32:16] := FALSE;                                                35020800
         RPIFT := RSIFT := RAUPT := RMSUT := FALSE;                     35020900
    STEPS;                                                              35021000
 LUP:         %* * * BEGINNING OF CLAUSE SYNTAX CHECKS * * *            35021100
              % PTR TO IP TXT UPDATED TO NXT BY STEPS AT END OF CLAUSES 35021200
    SMICHK;                                                             35021300
    IF KEY = PERIOD THEN GO TO WRP;                                     35021400
    IF KEY = RD OR KEY = PROCEDUREV THEN BEGIN ERR(81);GO WRP  END;     35021500
    IF KEY = LINEV THEN % LINE NUMBER IS   INTEGER         * * * * * *  35021600
     BEGIN              %                  INTEGER(CHANNEL)             35021700
                        %                  INTEGER ON NEXT PAGE         35021800
                        %                  INTEGER(CHANNEL)ON NEXT PAGE 35021900
                        %                  PLUS INTEGER                 35022000
      IF RLNT THEN ERR(27) ELSE RLNT := TRUE;                           35022100
      IF SCTRL = NUMBER THEN STEPS;                                     35022200
      IF KEY = ISV THEN STEPS;                                          35022300
      IF KEY = PLUSV THEN                                               35022400
       BEGIN       % ***  RELATIVE LINE SPACING                         35022500
         STEPS;                                                         35022600
         IF Q.SCF  NEQ ITGRV THEN BEGIN ERR(13); GO TO RCVR END;        35022700
         SPACTYP := RELS;                                               35022800
         LSPAC :=  ICVI(FALSE);                                         35022900
       END ELSE                                                         35023000
      IF KEY = LITV THEN                                                35023100
       BEGIN       % ***  ABSOLUTE LINE SPACING                         35023200
         IF Q.SCF  NEQ ITGRV THEN BEGIN ERR(13); GO TO RCVR END;        35023300
         SPACTYP := ABSL;                                               35023400
         LSPAC := ICVI(FALSE);                                          35023500
    %    IF NXKEY = LEFTPAREN THEN BEGIN SPACTYP~ABCH;                  35023600
    %                                    CHNL(LS);     END ELSE STEPS;  35023700
         IF KEY = ON  THEN STEPS;                                       35023800
         IF KEY = NEXT THEN                                             35023900
           BEGIN                                                        35024000
             IF SCTRL  NEQ PAGE THEN ERR(191) ELSE STEPS;               35024100
             IF SPACTYP=ABCH THEN SPACTYP:=ABCHNP                       35024200
                             ELSE SPACTYP:=ABNP;                        35024300
           END;                                                         35024400
       END ELSE                                                         35024500
         BEGIN                                                          35024600
           ERR(208); GO TO RCVR                                         35024700
         END;                                                           35024800
       STEPS;                                                           35024900
       GO TO LUP                                                        35025000
     END OF LINE CLAUSE;                                                35025100
    IF KEY = NEXT THEN                                                  35025200
     BEGIN              % NEXT GROUP IS  INTEGER           * * * * * *  35025300
                        %                INTEGER(CHANNEL)               35025400
                        %                PLUS INTEGER                   35025500
                        %                NEXT PAGE                      35025600
      IF RNGT THEN ERR(27) ELSE RNGT := TRUE;                           35025700
      IF SCTRL  NEQ GROUP THEN ERR(193) ELSE STEPS;                     35025800
      IF KEY = ISV THEN STEPS;                                          35025900
      IF HLVL  NEQ 0 THEN BEGIN ERR(192); GO TO RCVR END;               35026000
      IF KEY = PLUSV THEN                                               35026100
       BEGIN                      % NXT GRP  RELATIVE SPACING           35026200
         STEPS;                                                         35026300
         IF Q.SCF  NEQ ITGRV THEN BEGIN ERR(13); GO TO RCVR END;        35026400
         NGSPAC := ICVI(FALSE);                                         35026500
         NGSPOP := RELS;        % NXT GRP SPACING OPTION                35026600
       END ELSE                                                         35026700
      IF KEY = LITV THEN                                                35026800
       BEGIN                      % NXT GRP ABSOLUTE SPACING            35026900
         IF Q.SCF  NEQ ITGRV THEN BEGIN ERR(13); GO TO RCVR END;        35027000
         NGSPAC := ICVI(FALSE);                                         35027100
         NGSPOP := ABSL;                                                35027200
%        IF NXKEY = LEFTPAREN THEN BEGIN NGSPOP ~ ABCH;                 35027300
%                                        CHNL(SNG); END;                35027400
       END ELSE                                                         35027500
      IF KEY = NEXT THEN                                                35027600
       BEGIN                     % NXT GRP   NEXT PAGE                  35027700
         IF SCTRL  NEQ PAGE THEN ERR(191);                              35027800
         NGSPOP := NXPG;                                                35027900
       END ELSE  BEGIN ERR(186); GO TO RCVR END;                        35028000
     STEPS;                                                             35028100
     GO TO LUP                                                          35028200
    END OF NEXT GROUP CLAUSE;                                           35028300
IF KEY = TYPE           % TYPE IS RH / PH / DE / PF / RF /      * * * * 35028400
 THEN                   %         CH CONTROL-LEVEL-IDENTIFIER/ FINAL    35028500
  BEGIN                 %         CF CONTROL-LEVEL-IDENTIFIER/ FINAL    35028600
    IF RTYPT THEN ERR(27) ELSE RTYPT := TRUE;                           35028700
    IF NXKEY = ISV THEN STEPS;                                          35028800
    IF HLVL  NEQ 0  THEN BEGIN ERR(192); GO TO RCVR END;                35028900
    IF SCTRL = DETAIL                                                   35029000
     THEN                                                               35029100
      BEGIN                                                             35029200
        IF NOT BOOLEAN(R3.RDETF)                                        35029300
          THEN R4.RDEGL :=  RGIF            % FIRST DET GRP             35029400
          ELSE                                                          35029500
            BEGIN                                                       35029600
              IF5[PDRGIF].RGLVL := RGIF;                                35029700
              IF1[PDRGIF].RGMDT  := TRUB;                               35029800
            END;                                                        35029900
        R3.RMDTF := R3.RDETF;                                           35030000
        R3.RDETF := TRUB;                                               35030100
        DNO := DNO +1;                                                  35030200
        RGTYPE := DET;                                                  35030300
      END                                                               35030400
     ELSE                                                               35030500
    IF KEY = CF THEN GO TO CFL ELSE                                     35030600
    IF KEY = CH THEN GO TO CHL ELSE                                     35030700
    IF KEY = CONTROL THEN                                               35030800
     BEGIN                                                              35030900
       IF SCTRL = FOOTING                                               35031000
         THEN                                                           35031100
          BEGIN                                                         35031200
 CFL:       DECTOG := FALSE;                                            35031300
         % CHECK IDENTIFIER TO VERIFY THAT                              35031400
        % ITS A RPT CONTROL LEVEL IDENTIFIER                            35031500
        % OR ITS CONTROL LEVEL FINAL                                    35031600
    IF SCTRL=IDV AND Q.SCF=ITM THEN BEGIN CHKLEVID END ELSE             35031700
   IF KEY=FINAL THEN BEGIN RLVIF:=R2.RFINL END ELSE                     35031800
      BEGIN                                                             35031900
E195:       ERR(195); GO TO RCVR                                        35032000
      END;                                                              35032100
        IF BOOLEAN(IF3[RLVIF].CFT)THEN ERR(198)                         35032200
                                  ELSE IF3[RLVIF].CFT := TRUB;          35032300
                IF5[RGIF].RGLVL := RLVIF;                               35032400
                IF5[RLVIF].RCFGL := RGIF;  RGTYPE := CFG;               35032500
          END                                                           35032600
         ELSE                                                           35032700
       IF KEY = HEADING                                                 35032800
         THEN                                                           35032900
          BEGIN                                                         35033000
 CHL:       DECTOG := FALSE;                                            35033100
        % CHECK CONTROL LEVEL IDENTIFIER                                35033200
       % OR FINAL                                                       35033300
     IF SCTRL=IDV AND Q.SCF=ITM THEN BEGIN CHKLEVID END ELSE            35033400
 IF KEY=FINAL THEN BEGIN RLVIF:=R2.RFINL END ELSE GO E195;              35033500
    IF BOOLEAN(IF3[RLVIF].CHT)THEN ERR(198)                             35033600
                              ELSE IF3[RLVIF].CHT := TRUB;              35033700
            IF5[RGIF].RGLVL := RLVIF;                                   35033800
            IF5[RLVIF].RCHGL := RGIF;                                   35033900
            RGTYPE := CHG;                                              35034000
          END                                                           35034100
         ELSE BEGIN ERR(197); GO TO RCVR END;                           35034200
     END % TYPE IS CONTROL HEADING / FOOTING                            35034300
    ELSE                                                                35034400
    IF KEY = PH THEN GO TO PHL ELSE                                     35034500
    IF KEY = PF THEN GO TO PFL ELSE                                     35034600
    IF KEY = PAGE THEN                                                  35034700
      BEGIN IF SCTRL = HEADING THEN                                     35034800
       BEGIN                                                            35034900
 PHL:  IF PHGT THEN ERR(198) ELSE PHGT := TRUE;                         35035000
       IF NOT BOOLEAN(R1.RPLF) THEN       ERR(199)                      35035100
                               ELSE IF5[PCIF].RPHIL := RGIF;            35035200
       RGTYPE := PHG                                                    35035300
      END ELSE                                                          35035400
      IF KEY = FOOTING THEN                                             35035500
       BEGIN                                                            35035600
 PFL:   IF PFGT THEN ERR(198) ELSE PFGT := TRUE;                        35035700
        IF NOT BOOLEAN(R1.RPLF) THEN       ERR(199)                     35035800
                                ELSE IF5[PCIF].RPFIL := RGIF;           35035900
        RGTYPE := PFG;                                                  35036000
       END ELSE BEGIN ERR(197); GO TO RCVR END;                         35036100
      END %TYPE PAGE HEADING / FOOTING                                  35036200
    ELSE                                                                35036300
    IF KEY = RH THEN GO TO RHL ELSE                                     35036400
    IF KEY = RF THEN GO TO RFL ELSE                                     35036500
    IF KEY = REPORT THEN                                                35036600
     BEGIN                                                              35036700
      IF SCTRL = HEADING THEN                                           35036800
       BEGIN                                                            35036900
 RHL:   IF RHGT THEN ERR(198) ELSE RHGT := TRUE;                        35037000
        RGTYPE := RHG;                                                  35037100
        R5.RHIL := RGIF;                                                35037200
         R3.RHDGT := 1;                                                 35037300
       END ELSE                                                         35037400
      IF KEY = FOOTING THEN                                             35037500
       BEGIN                                                            35037600
 RFL:   IF RFGT THEN ERR(198) ELSE RFGT := TRUE;                        35037700
        RGTYPE := RFG;                                                  35037800
        R5.RFIL := RGIF;                                                35037900
         R3.RFTGT := 1;                                                 35038000
       END ELSE BEGIN ERR(197); GO TO RCVR END;                         35038100
     END %TYPE IS REPORT HEADING / FOOTING                              35038200
    ELSE BEGIN ERR(199); GO TO RCVR END;                                35038300
     STEPS;                                                             35038400
     GO TO LUP                                                          35038500
  END;%TYPE IS CLAUSE;                                                  35038600
  IF KEY = DISPLAY OR KEY=DISPLAY1 OR KEY=USAGE THEN    %**** USAGE *** 35038700
  BEGIN                 % * * * *[USAGE IS] DISPLAY / DISPLAY-1         35038800
    IF KEY=USAGE THEN IF SCTRL=ISV THEN STEPS;                          35038900
    IF UST THEN ERR(27)   ELSE UST := TRUE;                             35039000
   IF KEY = DISPLAY OR KEY = DISPLAY1 THEN LUSE ~ BCL ELSE              35039100
     BEGIN ERR(92);GO TO RCVR  END;                                     35039200
    IF HLVL = 1 THEN GUSE := LUSE ELSE IF GUSE NEQ LUSE THEN ERR(134);  35039300
  END;  %USAGE STUFF;                                                   35039400
  IF KEY =   COLUMN THEN     %***  COLUMN  NUMBER IS   INTEGER ****     35039500
  BEGIN                                                                 35039600
    IF RCOT THEN ERR(27) ELSE RCOT := TRUE;                             35039700
    IF SCTRL = NUMBER THEN STEPS;                                       35039800
    IF KEY = ISV THEN STEPS;                                            35039900
    IF KEY  NEQ LITV OR Q.SCF NEQ ITGRV THEN BEGIN ERR(13);GO TO RCVR   35040000
    END;                                                                35040100
    COLNO := ICVI(FALSE);                                               35040200
    STEPS;                                                              35040300
    GO TO LUP;                                                          35040400
  END;  %COLUMN CLAUSE                                                  35040500
  IF KEY   = GROUP THEN                     % *** GROUP INDICATE ****   35040600
  BEGIN                                                                 35040700
    IF RGIT THEN ERR(27) ELSE RGIT := TRUE;                             35040800
    IF SCTRL = INDICATE THEN STEPS;                                     35040900
    GO TO LUP;                                                          35041000
  END;  %  GROUP INDIC  CLAUSE                                          35041100
  IF KEY   = BLANK THEN                     % *** BLANK WHEN ZERO ****  35041200
  BEGIN                                                                 35041300
    IF SCTRL = WHEN  THEN STEPS;                                        35041400
    IF SCTRL = ZEROV THEN STEPS;                                        35041500
    IF BWZT THEN ERR(27) ELSE BWZT := TRUE;                             35041600
    GO TO LUP;                                                          35041700
  END;                                                                  35041800
  IF KEY =   JUSTIFIED THEN      %*** JUSTIFIED / JUST  RIGHT   ****    35041900
  BEGIN                                                                 35042000
    IF JST THEN ERR(27) ELSE JST := TRUE;                               35042100
    IF SCTRL = RIGHT THEN LJST := 2     ELSE GO TO ERP;                 35042200
    STEPS;                                                              35042300
    GO TO LUP;                                                          35042400
  END;                                                                  35042500
  IF KEY = PICTUREV THEN                         %**** PICTURE  ****    35042600
  BEGIN                                                                 35042700
    IF PCT THEN ERR(27) ELSE PCT := TRUE;                               35042800
    PICTUREPROCESS;                                                     35042900
    STEPS;                                                              35043000
    IF KEY < 0 THEN STEPS;                                              35043100
    GO TO LUP;                                                          35043200
  END;                                                                  35043300
  IF KEY = VALUEV THEN                           %**** VALUE IS  ****   35043400
  BEGIN                                                                 35043500
    IF VAT THEN ERR(27) ELSE VAT := TRUE;                               35043600
    IF SCTRL = ISV THEN STEPS;                                          35043700
    IF NOT RPIFT THEN                                                   35043800
       BEGIN  RPIFT := TRUE;                                            35043900
              RPIF :=  NXI;                                             35044000
         IF0[RPIF] := 0 &RPI SCFF& RPTPFI LVLFF;                        35044100
              NXI := NXI + IFSZ;                                        35044200
         IF0[RPIF].SCOPE := NXI;                                        35044300
         IF3[RPIF].BADDF := BADR;                                       35044400
       END;                                                             35044500
    MACRO(RPFM,RPIF,PFSTRT);      %****                                 35044600
         IF3[RPIF].SFTYP := PFLIT;                                      35044700
    MACRO(NAMDM,RPIF,0);                                                35044800
    IF DIR := Q.SCF = STRNGV THEN  VALUEOUT  ELSE                       35044900
    IF Q.SCF = FIGURATIVE  OR KEY = ALL                                 35045000
      THEN BEGIN  FGRTV;DIR:= KEY NEQ ZEROV  END ELSE                   35045100
    IF Q.SCF = ITGRV OR Q.SCF = NUMV                                    35045200
      THEN  NMLTRL(FALSE,0) ELSE  GO TO ERP;                            35045300
    MACRO(IF DIR THEN STOXM ELSE STO9M,0,1);                            35045400
    LTRLQ := Q;                                                         35045500
    STEPS;                                                              35045600
         MACRO(RPFM,0,PFX8);         % ******                           35045700
    GO TO LUP;                                                          35045800
  END;                                                                  35045900
IF KEY = SOURCE THEN         % ************      ** SOURCE      **      35046000
 BEGIN                                                                  35046100
  IF RSOT THEN ERR(27) ELSE RSOT := TRUE;                               35046200
  DECTOG := TRUE;                                                       35046300
  IF NOT RPIFT THEN BEGIN RPIFT := TRUE;   %RESERVE INFO ENTRY          35046400
                           RPIF := NXI;                                 35046500
         IF0[RPIF] :=0 &RPI SCFF& RPTPFI  LVLFF;                        35046600
                           NXI := NXI + IFSZ;                           35046700
              IF0[RPIF].SCOPE := NXI;                                   35046800
         IF3[RPIF].BADDF := BADR;                                       35046900
                    END;                                                35047000
    MACRO(RPFM,RPIF,PFSTRT);      %****                                 35047100
  IF SCTRL = ISV THEN STEPS;                                            35047200
  IF KEY = IDV THEN                                                     35047300
   BEGIN                                                                35047400
         IF3[RPIF].SFTYP := PFDN;                                       35047500
    ROPERAND;                                                           35047600
    IF NXKEY = LEFTPAREN THEN RSUBSCRIPTS;                              35047700
         MACRO(RPFM,0,PFX8);       %****                                35047800
   END ELSE                                                             35047900
  IF Q.SCF = SPECIALREG THEN RSPECREG  ELSE                             35048000
  IF Q.SCF = INTRINSIC  THEN BEGIN                                      35048100
         IF3[RPIF].SFTYP := PFINTR;                                     35048200
                                    INTRNSC;                            35048300
         MACRO(RPFM,0,PFX8); END  %****                                 35048400
  ELSE BEGIN MACRO(RPFM,0,PFERR);    ERR(245); END;                     35048500
 PFX: STEPS; GO TO LUP;                                                 35048600
 END;    % OF SOURCE CLAUSE                                             35048700
IF KEY = SUM THEN            % **********        **  SUM   **           35048800
 BEGIN                                                                  35048900
  RMSUT :=  RSUT;                                                       35049000
  RSUT := TRUE;                                                         35049100
  RAUPT  :=  RUPT;                                                      35049200
  RUPT := MUPO := UPONO := FALSE;                                       35049300
  IF NOT RSIFT THEN                                                     35049400
    BEGIN  RSIFT := TRUE;                                               35049500
           RSIF := NXI;                                                 35049600
         IF0[RSIF] :=0&ITM SCFF&RPTSC LVLFF;                            35049700
           IF1[RSIF] := 0;                                              35049800
           IF2[RSIF] := 0;                                              35049900
           IF3[RSIF] := 0 & RSECT DDSCF;                                35050000
         IF4[RSIF]~ RNIF& RLVIF RSCLVIFF;                               35050100
           NXI :=  NXI + IFSZ;                                          35050200
              IF0[RSIF].SCOPE := NXI;                                   35050300
    END;                                                                35050400
         MACRO(RSUM,RSIF,SUMSTRT);                                      35050500
%%%  RESERVE  SPACE FOR UPON OPTION MACRO                               35050600
% SVCODEINDEX ~ CODEINDEX;                                              35050700
% SWAP(TDISRAY,DISKRAY);                                                35050800
% CODEINDEX ~ 0;                                                        35050900
  DECTOG := TRUE;                                                       35051000
  STEPS;                                                                35051100
  DECTOG := FALSE;                                                      35051200
  IF KEY = IDV THEN                                                     35051300
   BEGIN                                                                35051400
    WHILE KEY = IDV DO                                                  35051500
     BEGIN                                                              35051600
      MACRO(RSUM,SUMDN,SUMTYP);                                         35051700
       ROPERAND;                                                        35051800
       IF NXKEY = LEFTPAREN THEN RSUBSCRIPTS;                           35051900
       STEPS;                                                           35052000
       RCMACHK;                                                         35052100
     END;                                                               35052200
   END    % KEY IS IDV                                                  35052300
  ELSE IF KEY = LITV THEN                                               35052400
   BEGIN                                                                35052500
    IF Q.SCF  NEQ ITGRV OR Q.SCF  NEQ NUMV THEN BEGIN ERR(252);GO RCVR  35052600
    END                                                                 35052700
      ELSE BEGIN                                                        35052800
           MACRO(RSUM,SUMLT,SUMTYP);                                    35052900
            NMLTRL(FALSE,0);   %LITC  NUMLIT                            35053000
            STEPS;                                                      35053100
           END;                                                         35053200
   END                                                                  35053300
  ELSE IF KEY = TALLY THEN                                              35053400
         BEGIN MACRO(RSUM,SUMTLY,SUMTYP);   STEPS; END                  35053500
  ELSE  BEGIN  MACRO(RSUM,0,SUMERR);                                    35053600
                ERR(245);                                               35053700
        END;                                                            35053800
 IF KEY = UPON THEN                              % **** UPON  ***       35053900
  BEGIN                                                                 35054000
   IF RUPT THEN ERR(27) ELSE RUPT := TRUE;                              35054100
   UPONO := FALSE;                                                      35054200
   DECTOG := TRUE;                                                      35054300
   WHILE KEY =IDV DO                                                    35054400
    BEGIN                                                               35054500
     MUPO := UPONO;                                                     35054600
     UPONO := TRUE;                                                     35054700
     MACRO(RSUM,SUPO := Q.NXF,SUPOP);                                   35054800
     IF NXKEY  NEQ OFV AND NXKEY  NEQ INV THEN GO TO NXUO;              35054900
     STEPS;                                                             35055000
     IF SCTRL =IDV AND Q.SCF = RPN AND Q.NXIF = RNIF THEN               35055100
        ELSE ERR(215);      % REJECT QUALIFIER                          35055200
 NXUO: STEPS;                                                           35055300
     RCMACHK;                                                           35055400
    END;                                                                35055500
  DECTOG:= FALSE;                                                       35055600
  IF UPONO THEN  ELSE ERR(245);                                         35055700
  END;                                                                  35055800
    IF KEY = RESET  THEN                         % ***  RESET ***       35055900
     BEGIN                                                              35056000
       IF RSET THEN ERR(27) ELSE RSET := TRUE;                          35056100
       IF DNSCAN = ON  THEN STEPP;                                      35056200
       IF KEY = FINAL THEN                                              35056300
         BEGIN                                                          35056400
           T2 := R2.RFINL;                                              35056500
          GO TO RSTAL;                                                  35056600
         END ELSE                                                       35056700
       IF KEY =IDV AND Q.SCF =ITM THEN                                  35056800
         BEGIN                                                          35056900
          T := Q.NXIF;                                                  35057000
          IF NOT BOOLEAN(IF2[T].RWSF) THEN                              35057100
            BEGIN                                                       35057200
        RSTERR: ERR(195);                                               35057300
                T2 := RLVIF;  % FORCE IT TO BE CURRENT LEVEL            35057400
            END  ELSE                                                   35057500
          T2 := IF3[T].RWLF;  % FETCH INFO INDEX TO RLVIF               35057600
    RSTAL:     % T2 IS RLVIF OF LEVEL AT WHICH ACTION IS TO OCCUR       35057700
          IF3[RSIF].RESL :=    IF3[T2].RESL;% LINKS LAST TO PRIOR ENTRY 35057800
             IF3[T2].RESL := RSIF; % LINK TO NEWEST ENTRY INTO LIST     35057900
         END ELSE GO TO RSTERR;                                         35058000
       STEPS;                                                           35058100
    END;     % OF RESET SUBCLAUSE                                       35058200
%   SVLNGMS ~ CODEINDEX;                                                35058300
%   SWAP(TDISRAY,DISKRAY);   % REVERT TO ORIGINAL                       35058400
%   CODEINDEX ~ SVCODEINDEX;                                            35058500
         V2 :=  IF MUPO THEN (T:= MUPON)                                35058600
                 ELSE IF UPONO THEN(T := SUPON)                         35058700
                 ELSE(T := NUPON);                                      35058800
                         V1 :=    IF T= SUPON THEN(T1 := SUPO)          35058900
                                             ELSE(T1 := 0);             35059000
         MACRO(RSUM,V1,V2);   %***                                      35059100
%   REPLACE  DISKRAY    BY  TDISRAY;                                    35059200
%   DISKOUT(TDISRAY[0],0,TOTSZ,P1&P2[16:32:16],RSUM);                   35059300
  MACRO(RSUM,0,SUMEND);                                                 35059400
%  STEPS;                                                               35059500
   GO TO LUP;                                                           35059600
 END OF SUM CLAUSE;                                                     35059700
 ERP:  ERR(0);                                                          35059800
 RCVR:                                                                  35059900
    IF KEY = PERIOD THEN GO TO XIT;                                     35060000
    STEPS;                                                              35060100
    WHILE KEY < 10           % NOT A RSWD                               35060200
       AND  KEY  NEQ PERIOD  DO STEPS;                                  35060300
    IF Q.SCF = 1 THEN GO TO LUP       % Q.SCF=1  IS A CLAUSE BEGINNER   35060400
                 ELSE GO TO RCVR;                                       35060500
 TRCV:                                                                  35060600
    DO STEPS UNTIL KEY = PERIOD OR KEY= RD OR KEY=PROCEDUREV;           35060700
    IF KEY  NEQ PERIOD THEN ERR(81);                                    35060800
    GO TO XIT;                                                          35060900
 WRP:                                                                   35061000
 XIT:                                                                   35061100
END REPITEM;                                                            35061200
PROCEDURE RPTLEV;                                                       35061300
 BEGIN                                                                  35061400
    BOOLEAN  RLIFLVT;  % TRUE IF LINE CLAUSE AT THIS LEVEL              35061500
         REAL SLVL;                                                     35061600
    LABEL  STRT,RLA,RB,ERP,RECOV,XIT,RPTELEM;                           35061700
PROCEDURE RSUMRY(BIX,FLDSZ,UNITLNGTH,INFX);                             35061800
         VALUE       FLDSZ,UNITLNGTH,INFX;                              35061900
         REAL    BIX,FLDSZ,UNITLNGTH,INFX;                              35062000
 BEGIN                                                                  35062100
    IF BIX = 0 THEN                                                     35062200
      BEGIN                                                             35062300
         IF4[INFX].OCLF := 1;                                           35062400
         BIX := INFX;             % SAVE FIRST RSIF INDEX               35062500
         IF R4.RSCIX = 0 THEN                                           35062600
         R4.RSCIX := INFX;                                              35062700
         IF1[INFX].OFSF := 0;                                           35062800
         IF3[INFX].BADDF := GETPRTLOC;                                  35062900
      END ELSE                                                          35063000
      BEGIN                       % RETRIEVE SPECS FROM FIRST SUM INFO  35063100
         IF3[INFX].BADDF := IF3[BIX].BADDF;                             35063200
         IF1[INFX].OFSF := IF1[BIX].OFSF;                               35063300
      END;                                                              35063400
    IF1[BIX].OFSF :=(T:=IF1[BIX].OFSF + FLDSZ)%UPDATE BASE INFO         35063500
    ;                                                                   35063600
    IF ((T + UNITLNGTH -1) DIV UNITLNGTH) > 128 THEN BIX := 0;          35063700
 END RSUMRY;                                                            35063800
  STRT:                                                                 35063900
    RLIFLVT := IM := FALSE;                                             35064000
    SLVL := NLVL;                                                       35064100
    DECTOG := TRUE;                                                     35064200
    IF NXKEY = IDV                                                      35064300
         THEN BEGIN                                                     35064400
                RDNT := SCTRL =IDV;                                     35064500
                SDICT := Q.NXF;                                         35064600
                SVSNL := Q.NXIF;                                        35064700
              END                                                       35064800
         ELSE BEGIN                                                     35064900
               RDNT := FALSE;                                           35065000
               RDNAT := FALSE;                                          35065100
              END;                                                      35065200
    IF HLVL = 0 THEN    % RPT.GRP 01 ENTRY                              35065300
     BEGIN                                                              35065400
      IF RDNT THEN                                                      35065500
        BEGIN                                                           35065600
         DRCT[SDICT].SCF := RPI;                                        35065700
         RGIF := INFOENTER(SDICT);                                      35065800
        END                                                             35065900
      ELSE BEGIN                                                        35066000
         RGIF := NXI;                                                   35066100
         IF5[NXI]:= IF4[NXI]:=IF3[NXI]:=IF2[NXI]:=IF1[NXI]:=IF0[NXI]:=0;35066200
         NXI := NXI+IFSZ;                                               35066300
        END;                                                            35066400
         IF0[RGIF]:=IF0[RGIF]&RPI SCFF& RPTRGI LVLFF;                   35066500
      IF3[RGIF] := 0 & BADR BADDFF;                                     35066600
      IF4[RGIF] := RNIF;                                                35066700
         MACRO(RPTM,RGIF,SORG);       % START OF RPT GROUP              35066800
     END ELSE                                                           35066900
       BEGIN                                                            35067000
         RDNAT := FALSE;                                                35067100
       END;                                                             35067200
    REPITEM;            % PROCESS CLAUSES WITHIN   RPT.ENTRY            35067300
         IF UST THEN RUSE := LUSE;                                      35067400
   IF HLVL = 0 THEN % CHECK CLAUSE COMBOS OF 01 RPT GRP                 35067500
     BEGIN                                                              35067600
      IF NOT RTYPT THEN                                                 35067700
        BEGIN                                                           35067800
         ERR(199); RGTYPE := ERRTYP;                                    35067900
       END;                                                             35068000
      IF1[RGIF].RGTYPF := RGTYPE;                                       35068100
      IF RNGT THEN                                                      35068200
       BEGIN                                                            35068300
        IF1[RGIF].RGNGST := TRUB;                                       35068400
       R1.RNGF := TRUB;                                                 35068500
       IF1[RGIF].RGNGVAL:= NGSPAC;                                      35068600
       IF1[RGIF].RGNGSTYP := NGSPOP;                                    35068700
     END;                                                               35068800
       IF REAL(IM.[32:16])  NEQ 0 THEN ERR(061);                        35068900
    END ELSE   %%%% ITS SUBORDINATE LEVEL                               35069000
    BEGIN                                                               35069100
     IF RTYPT THEN ERR(042);                                            35069200
     IF RNGT THEN ERR(042);                                             35069300
    END;                                                                35069400
    IF RLNT THEN                                                        35069500
     BEGIN                                                              35069600
      RLIF := NXI;                                                      35069700
      RLIFT := TRUE;                                                    35069800
      NXI := NXI  + IFSZ;                                               35069900
        %      INITIALIZE RLIF ****                                     35070000
         IF0[RLIF]:=0&RPI SCFF&RPTLNI LVLFF;                            35070100
      IF3[RLIF] := IF2[RLIF] := IF1[RLIF] := 0;                         35070200
         IF3[RLIF].BADDF := BADR;                                       35070300
      IF4[RLIF] := 0 & RGIF LRGIFF& RNIF RNIFLF;                        35070400
      IF5[RLIF] := 0;                                                   35070500
    RLIFLVT := TRUE;                                                    35070600
      IF FRSTLIN THEN                                                   35070700
       BEGIN                                                            35070800
         FRSTLIN := FALSE;                                              35070900
         IF5[RLIF].LFRST := TRUB;                                       35071000
         IF2[RGIF].LNXLINL := RLIF;                                     35071100
       END ELSE                                                         35071200
       BEGIN                                                            35071300
         IF5[RLIF].LFRST :=  FALSB;                                     35071400
         IF1[RGIF].RGMUL := TRUB;                                       35071500
         IF5[PRLIF].LLAST := FALSB;                                     35071600
         IF2[PRLIF].LNXLIN := RLIF;                                     35071700
         IF0[PRLIF].SCOPE := RLIF;                                      35071800
       END;                                                             35071900
      IF2[RGIF].RGNOLINS := IF2[RGIF].RGNOLINS + 1;                     35072000
      IF5[RLIF].LLAST := TRUB;                                          35072100
      IF3[RLIF].RLSPT := TRUB;                                          35072200
      IF3[RLIF].RLSPACTYP := SPACTYP;                                   35072300
      IF3[RLIF].RLSPAC := LSPAC;                                        35072400
      IF1[RGIF].RGSPACTYP := REAL(BOOLEAN(IF1[RGIF].RGSPACTYP)       OR 35072500
         BOOLEAN(SPACTYP));                                             35072600
      R1.RPTSPACTYP := REAL(BOOLEAN(R1.RPTSPACTYP)    OR                35072700
         BOOLEAN(SPACTYP));                                             35072800
      PRLIF := RLIF;                                                    35072900
     END;                                                               35073000
    IF RPIFT THEN                                                       35073100
      BEGIN                                                             35073200
       IF RCOT THEN                                                     35073300
         BEGIN                                                          35073400
          IF NOT PCT THEN ERR(00);                                      35073500
          IF5[RPIF].RPLIFL := RLIF;                                     35073600
          IF BOOLEAN(IF2[RLIF].RLPRT)                                   35073700
            THEN IF5[PRPIF].NPIFL := RPIF                               35073800
            ELSE BEGIN                                                  35073900
                  IF4[RLIF].RLRPIFL := RPIF;                            35074000
                  IF2[RLIF].RLPRT := TRUB;                              35074100
         IF1[RGIF].RGPRT := 1;                                          35074200
                 END;                                                   35074300
         IF1[RPIF].OFSF := COLNO;                                       35074400
          LCLASS := AN;                                                 35074500
         IF2[RPIF].SZF := ASIZE;                                        35074600
         IF2[RPIF].USF := LUSE;                                         35074700
         PRPIF := RPIF;                                                 35074800
         END;                                                           35074900
      END ELSE                                                          35075000
     BEGIN                                                              35075100
         IF RCOT THEN IF NOT RSUT THEN ERR(-0);                         35075200
      END;                                                              35075300
    IF RGIT THEN                                                        35075400
         IF2[RPIF].GINDT := TRUB;                                       35075500
      IF RSOT THEN                                                      35075600
         BEGIN                                                          35075700
           IF  VAT THEN ERR(00);                                        35075800
           IF RSUT THEN ERR(00);                                        35075900
           IF RSET THEN ERR(00);                                        35076000
         END;                                                           35076100
    IF RSUT THEN                                                        35076200
       BEGIN                                                            35076300
         IF RGTYPE  NEQ CFG THEN ERR(199)                               35076400
           ELSE IF4[RSIF].RSCLVIF := RLVIF;                             35076500
         IF RSUT THEN IF RDNT THEN IF NOT RDNAT THEN                    35076600
              BEGIN                                                     35076700
                   IF5[RSIF].DLNKF:=SDICT; %LINK INFO TO DICT           35076800
                   IF0[RSIF].SNL :=SVSNL; %UPDATE SNL IN INFO           35076900
                   DRCT[SDICT].NXIF:=RSIF; % LINK DICT TO INFO          35077000
                   RDNAT := TRUE;                                       35077100
              END;                                                      35077200
         IF4[RSIF].RSUPF := REAL(RAUPT);                                35077300
         IF4[RSIF].RMSCF := REAL(RMSUT);                                35077400
         IF1[RGIF].RGSUMT := TRUB;                                      35077500
         IF3[RSIF].RLVNOF := IF3[RLVIF].RLVNOF;                         35077600
           %    SET UP IF2    ***************                           35077700
         IF RCOT THEN                                                   35077800
           IF5[RSIF].RSPIFL := RPIF;                                    35077900
         IF VAT THEN ERR(00);                                           35078000
         IF RSOT THEN ERR(00);                                          35078100
       END;                                                             35078200
         % IF NO EXPLICIT RESET THEN SET UP IN RESET LIST FOR LEV       35078300
    IF  RSUT AND NOT RSET THEN                                          35078400
      BEGIN                                                             35078500
       IF3[RSIF].RESL := IF3[RLVIF].RESL;                               35078600
       IF3[RLVIF].RESL := RSIF;                                         35078700
      END;                                                              35078800
   RLA:                                                                 35078900
         PDLY :=TRUE;                                                   35079000
    IF SCTRL = LITV THEN                                                35079100
     BEGIN                                                              35079200
      IF Q.SCF  NEQ ITGRV THEN BEGIN ERR(13); GO TO RECOV END;          35079300
      NLVL :=ICVI(FALSE);                                               35079400
     END ELSE                                                           35079500
      IF WCOL8 THEN NLVL := -1                                          35079600
               ELSE BEGIN ERR(0);                                       35079700
                     DO STEPS UNTIL KEY = PERIOD OR MARGINA;            35079800
                     GO TO RLA                                          35079900
                    END;                                                35080000
    IF NLVL  LEQ SLVL THEN GO TO RPTELEM;                               35080100
                                       %FINISH NON-ELEMENTARYLEVEL      35080200
         IF REAL(IM.[38:10])!0 THEN ERR(61);%CLAUSE MUST BE AT ELEM LVL 35080300
    HLVL := HLVL+1;                                                     35080500
    RPTLEV;             %RECURSE TO PROCESS NEXT LOWER LEVEL            35080600
                       %ALL LOWER LEVELS HAVE BEEN PROCESSED            35080700
                       %COMPLETE THIS GROUP LEVEL                       35080800
    HLVL := HLVL-1;                                                     35080900
    IF RLIFLVT THEN IF0[RLIF].SCOPE := NXI;                             35081000
    IF NLVL > SLVL THEN ERR(62);                                        35081100
    GO TO RB;                                                           35081200
   RPTELEM:        % CLAUSES HAVE BEEN SCANNED FOR ELEMENTARY LEVEL     35081300
                   % USE SPECS TO COMPLETE  INFO ENTRIES                35081400
    IF RPIFT THEN                                                       35081500
      BEGIN             % COMPLETE INFO FOR PRINT FIELD                 35081600
         IF ASIZE = 0 THEN ERR(88);                                     35081700
         SINFO := RPIF;                                                 35081800
         ELEMITEM;      % SET UP IF2                                    35081900
         MACRO(RPFM,0,PFEND);                                           35082000
         IF1[RPIF].LGHF := ASIZE;                                       35082100
         IF VAT THEN                                                    35082200
          BEGIN         % CHK VALUE SPECS VS PRINT FIELD SPECS          35082300
           IF LTRLQ.SCF  NEQ FIGURATIVE THEN                            35082400
              IF LTRLQ.LSZ>IF2[SINFO].SZF THEN ERR(-155);               35082500
          END;                                                          35082600
      END;                                                              35082700
    IF RSIFT THEN                                                       35082800
     BEGIN                                                              35082900
         IF ASIZE = 0 THEN ERR(88);                                     35083000
         ASIZE := IF ASIZE > 11 THEN 2 ELSE 1;                          35083100
         IF1[RSIF].LGHF := ASIZE;                                       35083200
         IF2[RSIF].USF := CMP;                                          35083300
         IF2[RSIF].SCMP := 1;                                           35083400
         IF2[RSIF].CLF := NM;                                           35083500
         IF2[RSIF].SGTF := 1;  % S  SIGN                                35083600
              % DERIVE DPLF,FSZF,SZF  FROM PICTURE     ******           35083700
         IF RPIFT THEN                                                  35083800
           BEGIN                                                        35083900
              IF2[RSIF].DPLF := IF2[RPIF].DPLF;                         35084000
              IF2[RSIF].FSZF := IF2[RPIF].FSZF;                         35084100
              IF2[RSIF].SZF := IF2[RPIF].SZF;                           35084200
           END ELSE                                                     35084300
           BEGIN                                                        35084400
              IF NOT NMTYPE THEN                                        35084500
                BEGIN ERR(095); IF2[RSIF].SZF := 11; END ELSE           35084600
           END;                                                         35084700
         RSUMRY(RSAI,ASIZE,1,RSIF);                                     35084800
     END;                                                               35084900
 RB:                                                                    35085000
    IF NLVL = SLVL AND NLVL  NEQ 1 THEN GO TO STRT;                     35085100
    GO TO XIT;                                                          35085200
  ERP: ERR(0);                                                          35085300
  RECOV: WHILE KEY  NEQ PERIOD DO STEPS;                                35085400
         STEPS;                                                         35085500
         GO TO STRT;                                                    35085600
  XIT:                                                                  35085700
      SINFO := LINFO;                                                   35085800
 END;% OF RPTLEV                                                        35085900
         % * * * * BEGINNING OF RSE  * * * *                            35086000
    LABEL  STRT,LUP,NXCC,SLUP,WRP,RCV,XIT,GCLX;                         35086100
         STEPS;                                                         35086200
         ZEROER(UL[8],32); ZEROER(BUL[23],10);                          35086300
   MACRO(RPTM,0,STRTRS);        %****                                   35086400
  STRT:                                                                 35086500
    CHECKWAS8;                                                          35086600
    IF KEY  NEQ RD THEN GO TO XIT;                                      35086700
    M := FALSE;                                                         35086800
    IF SCTRL  NEQ IDV OR Q.SCF  NEQ RPN THEN BEGIN ERR(185);GO TO RCV   35086900
    END;                                                                35087000
    IF Q.NXIF  NEQ 0 THEN ERR(184); % RPT NAME MUST BE UNIQUE           35087100
    RAI:=DRCT[Q.NXF].FIBF;% GET INDEX(ACTUALLY NOR)TO RAY FROM DICT     35087200
    RNIF := INFOENTER(RNDI := Q.NXF);                                   35087300
    IF0[RNIF].SCF := RPN;                                               35087400
    IF4[RNIF].FLLNK := RAY[RAI].FLIN;%FETCH INFO INDEX OF FILE          35087500
    RZ := IF0[RNIF];                                                    35087600
    R1 := IF1[RNIF];                                                    35087700
    R2 := IF2[RNIF];                                                    35087800
    R3 := IF3[RNIF];                                                    35087900
    R4 := IF4[RNIF];                                                    35088000
    R5 := IF5[RNIF];                                                    35088100
    RSAI := 0;                                                          35088200
         RUSE := BCL;                                                   35088300
         RMXRS := 120;                                                  35088400
   MACRO(RPTM,RNIF,STRTRD);        %****                                35088500
    STEPS;                                                              35088600
  LUP:  IF KEY = PERIOD THEN GO TO WRP;                                 35088700
    SMICHK;                                                             35088800
    CHECKNOT8;                                                          35088900
    IF KEY = CODEV THEN                %         ** C O D E  **         35089000
      BEGIN                                                             35089100
      IF RCODET THEN ERR(27) ELSE RCODET := TRUE;                       35089200
         IF SCTRL = LITV AND Q.SCF = STRNGV                             35089300
            THEN BEGIN                                                  35089400
                   IF ACCUM[1].SIZEF  NEQ 1 THEN ERR(183)               35089500
                        ELSE        RZ.RCODN := ACCUM[1].[06:8]         35089600
                 END                                                    35089700
              ELSE ERR(039);                                            35089800
% CHAR SIZE PROBLEM                                                     35089900
         STEPS;                                                         35090000
         GO TO LUP                                                      35090100
      END  CODE CODE;                                                   35090200
    IF KEY = CONTROL THEN              %         ** C O N T R O L  **   35090300
      BEGIN   % CONTROL/CONTROLS   (IS/ARE)                             35090400
              %                  FINAL                                  35090500
              %                  FINAL, IDENTIFIER-1 [,IDENTIFIER-2]... 35090600
              %                  IDENTIFIER-1 [,IDENTIFIER-2]...        35090700
         IF CNT THEN ERR(27) ELSE CNT := TRUE;                          35090800
         STEPP;                   % DNSCAN                              35090900
         IF KEY = ISV OR KEY = ARE THEN STEPP;                          35091000
         R3.RCTLF := TRUB;                                              35091100
         IF KEY = FINAL THEN                                            35091200
          BEGIN                                                         35091300
            R3.RFINF := TRUB;                                           35091400
            R2.RFINL := NXI;                                            35091500
              IF0[ NXI]:=0& RPI SCFF&RPTLVI LVLFF;                      35091600
            IF1[NXI] := 0;                                              35091700
            IF2[NXI] := 0;                                              35091800
            IF3[NXI] := 0 & RSECT  DDSCF;                               35091900
            IF4[NXI] := 0;                                              35092000
            IF5[NXI] := RNIF;                                           35092100
            NXI := NXI + IFSZ;                                          35092200
              IF0[R2.RFINL].SCOPE := NXI;                               35092300
            STEPP;                                                      35092400
            RCMACHK                                                     35092500
          END;                                                          35092600
    WHILE KEY = IDV DO                                                  35092700
     BEGIN  IF Q.SCF  NEQ ITM THEN ERR(061);                            35092800
         IF BOOLEAN(IF2[Q.NXIF].RWSF)                                   35092900
         THEN BEGIN ERR(196); GO TO NXCC END   % ILLEGAL DUPLICATE USE  35093000
           ELSE IF2[Q.NXIF].RWSF:=1;                                    35093100
         IF IF3[Q.NXIF].DDSC=RSECT THEN ERR(196);                       35093200
         IF BOOLEAN(IF3[Q.NXIF].VARF) THEN ERR(94);                     35093300
       W5 := W4 := W3 := W2 := W1 :=     0;                             35093400
         WZ:=0 &RPI SCFF&RPTLVI LVLFF;                                  35093500
       W5 := RNIF;                                                      35093600
       W3 :=  0 & RSECT DDSCF;                                          35093700
       IF NOT BOOLEAN(R3.RLEVF) THEN                                    35093800
         BEGIN                            % ITS MAJOR LEVEL             35093900
                 W3.RLVNOF := 1;                                        35094000
           R2.RMAJL := NXI;                                             35094100
           R3.RLEVF := TRUB;                                            35094200
          IF BOOLEAN(R3.RFINF)                                          35094300
           THEN BEGIN                                                   35094400
                 W3.NXHLT := TRUB;                                      35094500
                 W4.RNXHL := T := R2.RFINL% LINK MAJOR TO FINAL         35094600
                 ;                                                      35094700
                 IF4[T].RNXLL := NXI;     % LINK FINAL TO MAJOR         35094800
                 IF3[T].NXLLT := TRUB;                                  35094900
                END                                                     35095000
           ELSE  W3.NXHLT := FALSB;                                     35095100
         END ELSE BEGIN  IF4[HLVIF].RNXLL := NXI;                       35095200
                        W3.RLVNOF := IF3[HLVIF].RLVNOF +  1;            35095300
                         W4.RNXHL := HLVIF;                             35095400
                         W3.NXHLT := TRUB;                              35095500
                         IF3[HLVIF].NXLLT := TRUB;                      35095600
                  END;                                                  35095700
         W4.RLVPCL := Q.NXIF;   IF3[Q.NXIF].RWLF := NXI;                35095800
        R2.RMINL := HLVIF := NXI;                                       35095900
         IF0[NXI] := WZ;     %% COPY SPECS FROM Q.NXIF                  35096000
         IF1[NXI] := W1;                                                35096100
         IF2[NXI] := W2;                                                35096200
         IF3[NXI] := W3;                                                35096300
         IF4[NXI] := W4;                                                35096400
         IF5[NXI] := W5;                                                35096500
              NXI := (T:=NXI) + IFSZ;                                   35096600
              IF0[T].SCOPE := NXI;                                      35096700
    NXCC: STEPS;                                                        35096800
          RCMACHK;                                                      35096900
     END;                                                               35097000
       GO TO LUP;                                                       35097100
    END  CONTROLS CLAUSE;                                               35097200
    IF KEY = PAGE THEN                                                  35097300
     BEGIN                                                              35097400
       IF SCTRL = LIMIT THEN STEPS;                                     35097500
       IF KEY = ISV OR KEY = ARE THEN STEPS;                            35097600
       IF PLT THEN ERR(27)                                              35097700
              ELSE BEGIN                                                35097800
                               PLT := TRUE;                             35097900
                               R1.RPLF := TRUB;                         35098000
           R1.RPCIF:= PCIF := NXI; NXI := NXI + IFSZ;                   35098100
              IF0[PCIF] := 0&ITM SCFF&RPTPC LVLFF&NXI SCOPEF;           35098200
            IF1[PCIF] := 0 & 1 LGHFF;                                   35098300
            IF2[PCIF] := 0 &NM CLFF&CMP USFF&1 SCMPF&11 SZFF;           35098400
            IF3[PCIF] := 0 & RSECT DDSCF;                               35098500
            IF4[PCIF] := RNIF;                                          35098600
            IF5[PCIF] := 0;                                             35098700
           R1.RLCIF:= LCIF := NXI; NXI := NXI + IFSZ;                   35098800
              IF0[LCIF] := 0&ITM SCFF&RPTLC LVLFF&NXI SCOPEF;           35098900
            IF1[LCIF] := 0 & 1 LGHFF;                                   35099000
            IF2[LCIF] := 0 &NM CLFF&CMP USFF&1 SCMPF&11 SZFF;           35099100
            IF3[LCIF] := 0 & RSECT DDSCF;                               35099200
            IF4[LCIF] := 0;                                             35099300
            IF5[LCIF] := 0 & RNIF LRNIFF;                               35099400
                   END;                                                 35099500
       IF Q.SCF = ITGRV  THEN  IF4[LCIF].LPGLM := PGLMT := ICVI(FALSE)  35099600
                         ELSE ERR(13);                                  35099700
       IF PGLMT > 255 THEN ERR(186);                                    35099800
       IF SCTRL = LINEV THEN STEPS;                                     35099900
   SLUP:                                                                35100000
       CMACHK;                                                          35100100
       IF KEY = PERIOD OR KEY = SEMI OR KEY = CODEV OR KEY = CONTROL    35100200
         THEN GO TO LUP;                                                35100300
    IF KEY = HEADING THEN                                               35100400
      BEGIN                                                             35100500
        IF HT THEN ERR(27) ELSE HT := TRUE;                             35100600
        STEPS;                                                          35100700
        IF Q.SCF = ITGRV THEN IF4[LCIF].LHD2 := HDG := ICVI(FALSE)      35100800
                         ELSE ERR(13);                                  35100900
        IF HDG > PGLMT THEN ERR(186);                                   35101000
%       IF NXKEY = LEFTPAREN THEN BEGIN  IF4[LCIF].LHDCHN~ TRUE;        35101100
%                                        CHNL(HS); END;         %%%%    35101200
        STEPS;                                                          35101300
        GO TO SLUP                                                      35101400
      END;                                                              35101500
    IF KEY = FIRST THEN                                                 35101600
      BEGIN                                                             35101700
        IF SCTRL = DETAIL THEN STEPS ELSE ERR(187);                     35101800
        IF FDT THEN ERR(27) ELSE FDT := TRUE;                           35101900
        IF Q.SCF = ITGRV THEN IF4[LCIF].LFD3 := FRSTDTL := ICVI(FALSE)  35102000
                         ELSE ERR(13);                                  35102100
        IF FRSTDTL > PGLMT THEN ERR(186);                               35102200
%       IF NXKEY = LEFTPAREN THEN BEGIN IF4[LCIF].LDTCHN~ TRUE;         35102300
%                                       CHNL(FDS); END;      %%%%%      35102400
        STEPS;                                                          35102500
        GO TO SLUP                                                      35102600
      END;                                                              35102700
    IF KEY = LAST THEN                                                  35102800
      BEGIN                                                             35102900
        IF SCTRL = DETAIL THEN STEPS ELSE ERR(187);                     35103000
        IF LDT THEN ERR(27) ELSE LDT := TRUE;                           35103100
        IF Q.SCF = ITGRV THEN IF4[LCIF].LLD4 := LSTDTL := ICVI(FALSE)   35103200
                         ELSE ERR (13);                                 35103300
        IF LSTDTL > PGLMT THEN ERR(186);                                35103400
%       IF NXKEY = LEFTPAREN THEN BEGIN  IF4[LCIF].LLDCHN ~ TRUE;       35103500
%                                        CHNL(LDS); END;                35103600
        STEPS;                                                          35103700
        GO TO SLUP                                                      35103800
      END;                                                              35103900
    IF KEY = FOOTING THEN                                               35104000
      BEGIN                                                             35104100
        IF FT THEN ERR(27) ELSE  FT := TRUE;                            35104200
            STEPS;                                                      35104300
        IF Q.SCF = ITGRV THEN IF4[LCIF].LFT5 := FTNG := ICVI(FALSE)     35104400
                         ELSE ERR(13);                                  35104500
        IF FTNG > PGLMT THEN ERR(186);                                  35104600
%       IF NXKEY = LEFTPAREN THEN BEGIN IF4[LCIF].LFTCHN ~ TRUE;        35104700
%                                       CHNL(FDS]; END;                 35104800
        STEPS;                                                          35104900
        GO TO SLUP                                                      35105000
      END;                                                              35105100
    END PAGE LIMITS CLAUSE;                                             35105200
      ERR(0);                                                           35105300
      GO TO RCV;                                                        35105400
   WRP:            % * * *  WRAPUP CLAUSES OF RD  * * *                 35105500
    IF PLT THEN                                                         35105600
      BEGIN                                                             35105700
        IF NOT HT THEN  IF4[LCIF].LHD2 := HDG := 1;                     35105800
        IF NOT FDT THEN IF4[LCIF].LFD3 := FRSTDTL := HDG                35105900
                   ELSE IF FRSTDTL < HDG THEN ERR(186);                 35106000
        IF NOT LDT AND NOT FT THEN                                      35106100
         BEGIN                                                          35106200
          IF4[LCIF].LLD4 := LSTDTL := PGLMT;                            35106300
          IF4[LCIF].LFT5 := FTNG := PGLMT;                              35106400
         END ELSE                                                       35106500
        IF NOT LDT THEN                                                 35106600
          BEGIN                                                         35106700
           IF FTNG  LEQ FRSTDTL THEN ERR(186);                          35106800
           IF4[LCIF].LLD4 := LSTDTL := FTNG                             35106900
          END ELSE                                                      35107000
        IF NOT FT THEN                                                  35107100
          BEGIN                                                         35107200
           IF NOT LSTDTL > FRSTDTL THEN ERR(186);                       35107300
           IF4[LCIF].LFT5 := FTNG := LSTDTL                             35107400
          END ELSE                                                      35107500
          BEGIN                                                         35107600
           IF NOT LSTDTL > FRSTDTL THEN ERR(186);                       35107700
           IF FTNG < LSTDTL THEN ERR(186);                              35107800
          END                                                           35107900
      END                                                               35108000
    ELSE ;                      % DEFAULT OPTION INSTEAD OF PAGE CLAUSE 35108100
    FLINFO := RAY[NOR].FLIN;  % FLINFO IS THE FILE INFO INDEX           35108200
           CFIB := IF0[FLINFO].FIBF; % GET FIB INDEX                    35108300
         BADR ~ IF3[FLINFO].BCLADRF;   % GET STK LOC OF RECORD POINTER  35108400
    STEPS;                                                              35108500
    IF KEY  NEQ LITV OR Q.SCF  NEQ ITGRV                                35108600
       THEN BEGIN ERR(189); GO TO RCV END; %RPT MUST CONTAIN RPT GROUP  35108700
    WHILE KEY = LITV AND Q.SCF = ITGRV DO                               35108800
      BEGIN                                                             35108900
       OFSET := HLVL        := 0;                                       35109000
    FRSTLIN := TRUE;   %TRUE UNTIL FIRST LINE CLAUSE,OF GRP,DETECTED    35109100
       IF (NLVL := ICVI(FALSE)) NEQ 01 THEN ERR(42);                    35109200
       RPTLEV;                                                          35109300
              IF RLIFT THEN IF0[RLIF].SCOPE := NXI;                     35109400
              IF0[RGIF].SCOPE := NXI;                                   35109500
        PDRGIF := RGIF;                                                 35109600
      END;                                                              35109700
       IF BOOLEAN(R3.RLEVF)THEN                                         35109800
         BEGIN                                                          35109900
              T := R2.RMAJL;                                            35110000
         GCLX:                                                          35110100
              T1 := IF4[T].RLVPCL;                                      35110200
              IF2[T1].RWSF := 0;                                        35110300
              IF3[T1].RWLF := 0;                                        35110400
              IF BOOLEAN(IF3[T].NXLLT)THEN                              35110500
                BEGIN                                                   35110600
                  T := IF4[T].RNXLL; GO TO GCLX                         35110700
                END;                                                    35110800
         END;                                                           35110900
         R1.RCODN := RUSE;                                              35111000
       IF0[RNIF] := RZ & NXI SCOPEF;                                    35111100
       IF1[RNIF] := R1;                                                 35111200
       IF2[RNIF] := R2;                                                 35111300
       IF3[RNIF] := R3;                                                 35111400
       IF4[RNIF] := R4;                                                 35111500
       IF5[RNIF] := R5;                                                 35111600
      MACRO(RPTM,RNIF,ENDRD);      %****                                35111700
         IF          IF1[FLINFO].FCHRSZ = 0                             35111800
             THEN    IF1[FLINFO].FCHRSZ := RUSE                         35111900
             ELSE IF IF1[FLINFO].FCHRSZ  NEQ RUSE THEN ERR(153);        35112000
         IF IF1[FLINFO].DCRS <     RMXRS THEN                           35112100
            IF1[FLINFO].DCRS := RMXRS;                                  35112200
         IF FIB[CFIB,18].MAXRS<RMXRS THEN                               35112300
         FIB[CFIB,18].MAXRS ~ RMXRS;                                    35112400
       GO TO STRT;                                                      35112500
RCV:     WHILE NOT(MARGINA OR KEY=RD OR KEY=PROCEDUREV OR EOFTOG)       35112600
        DO STEPS;                                                       35112700
      IF KEY = RD THEN GO TO STRT;                                      35112800
 XIT:                                                                   35112900
    I := 0;                                                             35113000
    WHILE I:=I+1  LEQ NOR DO IF RAY[I] < 0 THEN ERR(190);               35113100
    IF KEY = RD THEN GO TO STRT;                                        35113200
      MACRO(RPTM,0,ENDRS);      %***                                    35113300
END RSE;                                                                35113400
%*********************DATA DIVISION DRIVER STARTS HERE******************39000000
LABEL LP;                                                               39000100
         CHECKWAS8;                                                     39000200
         IF KEY = DATA THEN                                             39000300
    BEGIN                                                               39000400
         IF NOT (SCTRL = DIVISION AND SCTRL = PERIOD)                   39000500
          THEN ERR(0);                                                  39000600
         IF NOT MARGINA THEN IF SCTRL = PREPARED THEN SCANTOCOL8;       39000700
         CHECKCOL8; STEPS;                                              39000800
    END;                                                                39000900
    LP:                                                                 39001000
         IF KEY = FILEV THEN                                            39001100
    BEGIN    % FILE SECTION PRESENT                                     39001200
         IF (SCTRL = SECTION AND SCTRL = PERIOD)                        39001300
          THEN BEGIN SECT ~ FSECT; FSE; END ELSE ERR(0);                39001400
    END;                                                                39001500
         CHECKWAS8;                                                     39001600
         IF KEY = WORKSTRG THEN                                         39001700
    BEGIN                                                               39001800
         IF (SCTRL = SECTION AND SCTRL = PERIOD)                        39001900
          THEN BEGIN SECT ~ WSECT; WSE; END ELSE ERR(0);                39002000
    END;                                                                39002100
         CHECKWAS8;                                                     39002200
         IF KEY = CONSTANT THEN                                         39002300
    BEGIN                                                               39002400
         IF (SCTRL = SECTION AND SCTRL = PERIOD)                        39002500
          THEN BEGIN SECT ~ CSECT; WSE; END ELSE ERR(0);                39002600
    END;                                                                39002700
         CHECKWAS8;                                                     39002800
         IF KEY = LINKAGE THEN                                          39002900
    BEGIN                                                               39003000
         IF SCTRL = SECTION THEN IF SCTRL = PERIOD THEN                 39003100
              BEGIN SECT~LSECT; WSE END ELSE ERR(0) ELSE ERR(0)         39003200
    END;                                                                39003300
         CHECKWAS8;                                                     39003400
         IF KEY = REPORT THEN                                           39003500
    BEGIN                                                               39003600
         IF SCTRL = SECTION THEN IF SCTRL = PERIOD THEN                 39003700
              BEGIN SECT ~ RSECT; RSE END ELSE ERR(0) ELSE ERR(0)       39003800
    END;                                                                39003900
         IF KEY ! PROCEDUREV THEN                                       39004000
    BEGIN                                                               39004100
         ERR(0);                                                        39004200
         WHILE NOT(KEY = FILEV OR KEY = WORKSTRG OR KEY = CONSTANT      39004300
              OR KEY=LINKAGE OR KEY=REPORT OR EOFTOG)                   39004400
              DO STEPS;                                                 39004500
         IF NOT EOFTOG THEN GO TO LP;                                   39004600
    END;                                                                39004700
    END DATA DIVISION;                                                  39004800
         IF INFOTOG THEN DUMPINFO;                                      39004900
COMMENT  ***************************************************************40000000
         * P R O C E D U R E   D I V I S I O N   P A S S   #   1       *40000100
         **************************************************************;40000200
    BEGIN                                                               40000300
PROCEDURE STATEMENT; FORWARD;                                           40000400
PROCEDURE CONDITIONALSTMT; FORWARD;                                     40000500
BOOLEAN PROCEDURE GOP(TRU,MAC); VALUE TRU,MAC; BOOLEAN TRU; REAL MAC;   40000600
              FORWARD;                                                  40000700
DEFINE   LABELID = IDV OR (KEY = LITV AND Q.SCF = ITGRV)#,              40000800
         NLABELID = IDV AND (KEY!LITV OR Q.SCF!ITGRV)#,                 40000900
         NXBR = BPTX ~ BPTX +1#,                                        40001000
         TERMINATEP=INITIATEP#,                                         40001100
         EDITABLE=CSTPOOL#,  % USED AS A TEMPORARY DONT CONFUSE WITH OTH40001200
         ERRM(ERRM1) = BEGIN ERR(ERRM1);ERRECOV;GO TO XIT END#,         40001300
         CMCK=BEGIN IF KEY=COMMA THEN STEPS;IF KEY=ANDV THEN STEPS END#,40001400
         SEMICHK = IF KEY = SEMI THEN STEPP #;                          40001500
LABEL    SECT,                                                          40001600
         XIT;                                                           40001700
REAL     BPTX,               % INDEX INTO BR                            40001800
         JUNKCTR,            % JUNK COUNTER                             40001900
         LBCOUNT,            % LABEL COUNT FOR PERFORM                  40002000
        NEXTSENTENCE,        % USED WITH "ELSE NEXT SENTENCE" ...       40002100
         PARINFO,            % DICT INDEX OF CURRENT PARAGRAPH          40002200
         PTMP,     % PROCEDURE TEMP CELL  DOES AWAY WITH MANY F REL     40002300
         PTMP2,    % TEMP                                               40002400
         SAVELABEL,          % CURRENT LABEL                            40002500
         SECINFO,            % DICT INDEX OF CURRENT SECTION            40002600
         TALLYINFO,          % INFO INDEX OF TALLY                      40002700
         UNBX;                                                          40002800
BOOLEAN       PARTOG,        % PARAGRAPH REQUIRED NOT SECTIONS          40002900
         PSTOG,              % TRUE IF PRIV SECTION IS BEING COMPILED   40003000
         BTMP,     % BOOLEAN TEMP                                       40003100
         SRCHTOG;            % COMPILING SEARCH                         40003200
% * * * * * * * * * GENERAL PURPOSE STUFF * * * * * * * * * * * * * * * 40003300
BOOLEAN PROCEDURE SZRR;                                                 40003400
    BEGIN                                                               40003500
    LABEL XIT;                                                          40003600
         SEMICHK;                                                       40003700
         IF KEY=ON THEN IF SCTRL!SIZE THEN ERR(0) ELSE ELSE             40003800
         IF NOT SZRR~KEY=SIZE THEN GO TO XIT;                           40003900
         IF SCTRL!ERROR THEN ERR(0);                                    40004000
         SZRR~SCTRL=KEY;                                                40004100
    XIT:                                                                40004200
    END SZRR;                                                           40004300
BOOLEAN PROCEDURE ENDOFSTATEMENT;                                       40004400
    BEGIN                                                               40004500
         ENDOFSTATEMENT~KEY=PERIOD OR KEY=SEMI OR KEY=ELSEV OR MARGINA  40004600
              OR Q.SCF=STMTBEGIN;                                       40004700
         IF MARGINA AND KEY!PERIOD THEN BEGIN ERR(81);KEY~PERIOD END;   40004800
    END  ENDOFSTATEMENT;                                                40004900
BOOLEAN PROCEDURE ATEND;                                                40005000
    BEGIN                                                               40005100
    LABEL XIT;                                                          40005200
         SEMICHK;                                                       40005300
         IF KEY=AT THEN IF SCTRL!ENDV THEN ERR(0) ELSE ELSE             40005400
         IF NOT ATEND~KEY=ENDV THEN GO TO XIT;                          40005500
         ATEND~SCTRL=KEY;                                               40005600
    XIT:                                                                40005700
    END  ATEND;                                                         40005800
PROCEDURE ERRECOV;                                                      40005900
    BEGIN     COMMENT * * *                                             40006000
         TRIES TO RECOVER FROM ERRORS WITH DUE CONSIDERATION TO         40006100
              PSEUDO-STACK;                                             40006200
         DO STEPS UNTIL KEY=PERIOD OR KEY=ELSEV;                        40006300
         MAC1(ADSTM)                                                    40006400
    END;                                                                40006500
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%40006600
%                       CORRESPONDING                                  %40006700
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%40006800
PROCEDURE FINDCORRESPONDING (SF,RF,SK,RND,SZR);                         40006900
    VALUE SF,RF,SK,RND,SZR; REAL SF,RF,SK; BOOLEAN RND,SZR;             40007000
BEGIN    COMMENT * * * FINDS CORRESPONDING ITEMS (ITEMS WITH SAME NAME, 40007100
              ETC) IN TWO GROUPS;                                       40007200
              % SF = SENDING FIELD                                      40007300
              % RF = RECEIVING FIELD                                    40007400
              % SK = STATEMENT KIND                                     40007500
              % RND = ROUNDED       % TEMP                              40007600
              % SZR = SIZE ERROR    % TEMP                              40007700
    BOOLEAN ANY,MOV,SWTCH;                                              40007800
    DEFINE    IXF = [32:16]#, LVF = [16:16]#, LVFF = [16:32:16]#;       40007900
    LABEL CHK,CMN,LOOP,NEXT,OT,XIT;                                     40008000
    REAL      CSFI,I,LSFI,SFI,SFHLN,SFNRN,SFSCP,SFSUB,SQSCF,ST,RFI,     40008100
              RFHLN,RFNRN,RFSCP,RFSUB,RT,T,T1,TL,X;                     40008200
    REAL PROCEDURE SQUALCHK(SS,ES,DI,MAX);                              40008300
         VALUE SS,ES,DI,MAX; REAL SS,ES,DI,MAX;                         40008400
    BEGIN                                                               40008500
         LABEL     XIT;                                                 40008600
    REAL CNT,                                                           40008700
         I;                                                             40008800
              IF ES=0 THEN ES~NXI;                                      40008900
              I~STK[DI].IXF;                                            40009000
              WHILE I!0 DO                                              40009100
         BEGIN                                                          40009200
              IF I>SS AND I<ES THEN                                     40009300
              IF DI=MAX THEN                                            40009400
         BEGIN                                                          40009500
              CNT~CNT+1;                                                40009600
              Q.NXIF~I                                                  40009700
         END  ELSE                                                      40009800
              CNT~CNT+SQUALCHK(I,IF0[I].SCOPE,DI+1,MAX);                40009900
              IF CNT>1 THEN GO TO XIT;                                  40010000
              I~IF0[I].SNL                                              40010100
         END;                                                           40010200
         XIT:                                                           40010300
              SQUALCHK~CNT                                              40010400
    END  SQUALCHK;                                                      40010500
         % * * * INITIALIZATION * * * * * * * * * * * * * * * * * * * * 40010600
         SQSCF~Q;                      % QUALCHECK SCREWS UP Q          40010700
         IF ANY~IF3[RF].DDSC=CSECT THEN BEGIN ERR(228);GO TO XIT END;   40010800
         SFHLN ~ IF3[SF].HLNO;         % HIERARCHIAL LEVEL NUMBER       40010900
         SFNRN ~ IF3[SF].NRNO;         % NESTED REDEFINES NUMBER        40011000
         SFSUB~IF2[SF].SUBF;                                            40011100
         RFHLN ~ IF3[RF].HLNO;                                          40011200
         RFNRN ~ IF3[RF].NRNO;                                          40011300
         RFSUB~IF2[RF].SUBF;                                            40011400
         IF SWTCH~SF<RF THEN BEGIN T~SF;SF~RF;RF~T END;                 40011500
              % POINT SAME-NAME LINKS CORRECTLY BY MAKING SF GREATEST   40011600
              % INFO INDEX                                              40011700
         MOV~SK=0;                                                      40011800
         SFSCP ~ IF0[SF].SCOPE;        % SCOPE                          40011900
         RFSCP ~ IF0[RF].SCOPE;                                         40012000
         STK[0].LVF~IF0[SF].LVLF;                     % LEVEL NUMBER    40012100
         STK[0].IXF~RF;      % IN EFFECT, RF IS ALWAYS LAST QUALIFIER   40012200
                             % FOR SF ITEMS                             40012300
         CSFI ~ (LSFI~SF) + IFSZ;      % INCREASE CURRENT SENDING FIELD 40012400
                        % ITEM BY INFO SIZE SAVING LAST CSFI            40012500
         % * * * ASSEMBLE QUALIFIER STRINGS * * * * * * * * * * * * * * 40012600
    LOOP:                                                               40012700
         IF CSFI } SFSCP THEN GO TO CHK;     % FINISHED WITH SF GROUP   40012800
         IF TL~IF0[CSFI].LVLF { STK[X].LVF  % LSFI IS ELEMENTARY ITEM   40012900
              OR MOV    % IN MOVE CORRESPONDING CAN HAVE A GROUP        40013000
              THEN GO TO CHK;                                           40013100
    NEXT:                                                               40013200
         STK[X~X+1]~CSFI&TL LVFF;                                       40013300
         CSFI ~ (LSFI~CSFI) + IFSZ;                                     40013400
         GO TO LOOP;                                                    40013500
         % * * * DOES QUALIFIER STRING LOCATE SOMETHING UNIQUE IN RF GRP40013600
    CHK:                                                                40013700
         RFI ~ 0;                                                       40013800
         IF SQUALCHK(RF-1,RFSCP,0,X)=1 THEN                             40013900
              % I.E. DOES THE STRING OF QUALIFIERS LOCATED IN           40014000
              %    STK[1 THRU X] REPRESENT A SINGLE ENTITY FOUND WITHIN 40014100
              %    THE INFO RANGE RF-1 THRU RFSCP                       40014200
    BEGIN                                                               40014300
         RFI ~ Q.NXIF;  % INFO INDEX OF ENTITY LOCATED                  40014400
         IF SWTCH THEN BEGIN SFI~RFI;RFI~LSFI END ELSE SFI~LSFI;        40014500
         IF IF3[SFI].HLNO-SFHLN!IF3[RFI].HLNO-RFHLN THEN GO TO OT;      40014600
              % EVEN THOUGH QUALIFICATION IS THE "SAME" THE TWO ITEMS   40014700
              % MAY HAVE DIFFERENT HIERARCHIAL STRUCTURE                40014800
         IF IF3[SFI].NRNO!SFNRN OR IF3[RFI].NRNO!RFNRN THEN GO TO OT;   40014900
              % THE GROUPS MAY BE SUBORDINATE TO REDEFINES BUT NO ITEMS 40015000
              % WITHIN THEM THAT HAVE REDEFINES... WILL BE CONSIDERED   40015100
         IF RT~IF0[RFI].LVLF=66 OR RT=77 OR RT=88 OR                    40015200
              ST~IF0[SFI].LVLF=66 OR ST=77 OR ST=88 THEN GO TO OT;      40015300
              % FORBIDDEN LEVEL NUMBERS                                 40015400
         IF IF2[RFI].USF=IXDN OR IF2[SFI].USF=IXDN THEN GO TO OT;       40015500
         IF IF2[RFI].SUBF!RFSUB OR IF2[SFI].SUBF!SFSUB THEN GO TO OT;   40015600
              % THE GROUPS MAY BE SUBORDINATE TO OCCURS BUT NO ITEMS    40015700
              % WITHIN THEM THAT HAVE OCCURS ... WILL BE CONSIDERED     40015800
         STK[0].IXF~SF;                                                 40015900
         IF SQUALCHK(SF-1,SFSCP,0,X)!1 THEN                             40016000
              BEGIN STK[0].IXF~RF;ERR(236);GO TO OT END;                40016100
                        % ILLEGAL DATA STRUCTURE FOR CORRESPONDING      40016200
         STK[0].IXF~RF;                                                 40016300
         IF MOV THEN                                                    40016400
    BEGIN     % * * * MOVE CORRESPONDING CODE * * * * * * * * * * * * * 40016500
         IF NOT(RT~IF2[RFI]>0 OR ST~IF2[SFI]>0)THEN GO TO OT;           40016600
         IF ST.CLF=NM THEN                                              40016700
              IF ANY ~ (T1~RT.CLF)=AB OR (T1<NM AND ST.FSZF!0) THEN     40016800
                   BEGIN ERR(115);GO TO OT END   % CONFLICTING CLASS    40016900
              ELSE                                                      40017000
         ELSE                                                           40017100
         IF ANY ~ (RT.USF!BCL) THEN BEGIN ERR(115); GO TO OT; END ELSE  40017200
         IF ANY~((ST.CLF!NM AND ST.CLF!AN)AND RT.CLF}NM) THEN           40017300
              BEGIN ERR(115);GO TO OT END;                              40017400
         MAC1(MKSMM);                                                   40017500
         IF RFSUB!0 THEN                                                40017600
    BEGIN                                                               40017700
         MACRO(STOSM,2,4);                                              40017800
         MACRO(XXXXM,RFI,0);                                            40017900
    END;                                                                40018000
         MACRO(NAMDM,RFI,0);      % PUT AN ADDRESS IN THE STACK         40018100
         IF SFSUB!0 THEN                                                40018200
    BEGIN                                                               40018300
         MACRO(STOSM,1,4);                                              40018400
         MACRO(XXXXM,SFI,0);                                            40018500
    END;                                                                40018600
         MACRO(IF ANY ~ (ST>0 AND RT>0 AND (ST.USF!BCL  OR (ST.CLF=NM   40018700
              AND RT.CLF}NM))) THEN VALDM ELSE NAMDM,SFI,2|REAL(ANY));  40018800
         MACRO(IF ANY ~ ANY AND RT.CLF}NM THEN STO9M ELSE STOXM,        40018900
              0,IF ANY THEN 0 ELSE IF ST<0 OR RT<0 THEN 1 ELSE          40019000
              IF (T1~RT.CLF)}NM THEN 3 ELSE IF ST.USF!BCL  THEN 6 ELSE  40019100
              IF T1=EA THEN 2 ELSE 1);                                  40019200
         ANY ~ TRUE;                                                    40019300
    END  ELSE                                                           40019400
    BEGIN     % * * * ADD AND SUBTRACT CORRESPONDING CODE * * * * * * * 40019500
         IF NOT(RT~IF2[RFI]>0 AND ST~IF2[SFI]>0)THEN GO TO OT;          40019600
         IF ANY~NOT(RT.CLF=NM AND ST.CLF=NM)THEN                        40019700
              BEGIN ERR(164);GO TO OT END;  % MUST BE NUMERIC VALUE     40019800
         IF RFSUB!0 THEN                                                40019900
    BEGIN                                                               40020000
         MACRO(STOSM,2,4);                                              40020100
         MACRO(XXXXM,RFI,0);                                            40020200
    END;                                                                40020300
         MACRO(VALDM,RFI,3);      % PUT AN ADDRESS AND A (BINARY) VALUE 40020400
                                  % IN THE STACK                        40020500
         IF SFSUB!0 THEN                                                40020600
    BEGIN                                                               40020700
         MACRO(STOSM,1,4);                                              40020800
         MACRO(XXXXM,SFI,0);                                            40020900
    END;                                                                40021000
         MACRO(VALDM,SFI,2);      % PUT A BINARY VALUE IN THE STACK     40021100
         MACRO(MATH,SK,0);        % ADD OR SUBTRACT                     40021200
         MACRO(IF SZR THEN SZERM ELSE STO9M,0,REAL(RND));               40021300
              % STORE NUMERIC WITH OR WITHOUT SIZE ERROR ACTION ...     40021400
         ANY~TRUE                                                       40021500
    END;                                                                40021600
         IF LISTOG AND NOT SPECTOG THEN                                 40021700
    BEGIN     % * * * "$ SPEC" CAUSES SUPPRESSION OF CORRESPONDING NAMES40021800
         BLAND (TMP,15);                                                40021900
         PUSHOVER(TMP[0],7,DRCT[(T~IF5[RFI].DLNKF+1)],2,T~DRCT[T].SIZEF)40022000
         ; LITPTR(TMP[(T:=T+8).WIX],T.CIX,"IN",2);                      40022100
         PUSHOVER(TMP[(T~T+3).WIX],T.CIX,DRCT[(T1~IF5[(IF SWTCH THEN SF 40022200
                  ELSE RF)].DLNKF+1)],2,T1~DRCT[T1].SIZEF);             40022300
         DISKOUT(1,1,((7+T+T1)DIV 8),0,2);                              40022400
         IF LPAS1 THEN WRITE(RITE,15,TMP[*])                            40022500
    END;                                                                40022600
    END;                                                                40022700
         % * * * WRAP-UP * * * * * * * * * * * * * * * * * * * * * * * *40022800
    OT:                                                                 40022900
         IF CSFI } SFSCP THEN GO TO XIT;                                40023000
         IF MOV AND TL{STK[X].LVF OR NOT MOV THEN                       40023100
              DO X~X-1 UNTIL STK[X].LVF<TL;           % CUT BACK HIERCHY40023200
         GO TO NEXT;                                                    40023300
    XIT:                                                                40023400
         Q~SQSCF;                                                       40023500
         IF NOT ANY THEN ERR(166)           % NO CORRESPONDING ITEMS    40023600
END FINDCORRESPONDING;                                                  40023700
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%41000000
%                                                                      %41000100
%                            DATA MOVEMENT STATEMENTS                  %41000200
%                                                                      %41000300
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%41000400
PROCEDURE EXAMINEP;                                                     41000500
    BEGIN                                                               41000600
         REAL CHR,SVIF2,TYPE;                                           41000700
         BOOLEAN LITCHR,REP,REPUF;                                      41000800
         LABEL ERP1,ERP,XIT;                                            41000900
         DEFINE EXAMBF = [46:1]#;                                       41001000
PROCEDURE PUTACHAR(SVIF2,LITCHR,CHR);    % COMPILES AN EXAMINE CHARACTER41001100
         VALUE SVIF2;                                                   41001200
         BOOLEAN LITCHR;                                                41001300
         REAL CHR,SVIF2;                                                41001400
    BEGIN                                                               41001500
         IF (LITCHR :=(STEPP = LITV OR Q.SCF = FIGURATIVE)) OR          41001600
              KEY = IDV THEN                                            41001700
    BEGIN                                                               41001800
         IF LITCHR THEN                                                 41001900
    BEGIN                                                               41002000
         IF KEY = LITV THEN                                             41002100
    BEGIN                                                               41002200
         IF ACCUM[1].SIZEF  NEQ 1 THEN ERR(160);                        41002300
         CHR ~ ACCUM[1].[12:6];                                         41002400
    END  ELSE                                                           41002500
         IF CHR ~ (IF KEY = ZEROV THEN "0" ELSE                         41002600
              IF KEY = SPACEV THEN " " ELSE                             41002700
              IF KEY = QUOTE THEN """ ELSE                              41002800
              IF KEY = HIGHV THEN "9" ELSE                              41002900
              IF KEY = UPPERB THEN                                      41003000
              IF SVIF2.CLF=AB THEN "Z" ELSE "9" ELSE                    41003100
              IF KEY = LOWV THEN                                        41003200
              IF SVIF2.CLF = NM THEN "0" ELSE " " ELSE                  41003300
              IF KEY = ENDV THEN "~" ELSE -1) < 0 THEN ERR(0);          41003400
         IF SVIF2.CLF = AB THEN                                         41003500
              % CHECK IF IN ALPHA SET                                   41003600
         ELSE                                                           41003700
         IF SVIF2 = NM THEN                                             41003800
              IF CHR < 0 THEN ERR(115);                                 41003900
    END ELSE                                                            41004000
    BEGIN                                                               41004100
         OPERAND(EXAMDM,NAME);                                          41004200
         IF IF1[GIX].LGHF  NEQ 1 THEN ERR(160);                         41004300
         IF SVIF2.CLF = AB OR SVIF2.CLF = NM THEN                       41004400
              IF SVIF2.CLF  NEQ IF2[GIX].CLF THEN ERR(115) ELSE         41004500
         ELSE IF IF2[GIX].USF ! BCL THEN ERR(115);                      41004600
    END;                                                                41004700
    END  ELSE                                                           41004800
    BEGIN                                                               41004900
         LITCHR := TRUE;                                                41005000
         ERR(0);                                                        41005100
    END;                                                                41005200
         STEPS;                                                         41005300
    END  PUTACHAR;                                                      41005400
%%%%  START OF EXAMINE EXECUTABLES %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%41005500
         NOMKS ~ TRUE;                                                  41005600
         STEPP;                                                         41005700
         PUTANAME;                                                      41005800
         IF GW2.USF ! BCL THEN ERR(115);                                41005900
         IF NOT(REP := SCTRL = REPLACING) THEN                          41006000
         IF KEY  NEQ TALLYING THEN GO TO ERP;                           41006100
         IF SCTRL = ALL THEN TYPE := 1 ELSE                             41006200
         IF KEY = LEADING THEN TYPE := 2 ELSE                           41006300
         IF KEY = UNTILV THEN                                           41006400
    BEGIN                                                               41006500
         IF SCTRL  NEQ FIRST THEN GO TO ERP;                            41006600
         REPUF := TRUE;                                                 41006700
         TYPE := 2;                                                     41006800
    END  ELSE                                                           41006900
         IF KEY = FIRST THEN                                            41007000
         IF NOT REP THEN GO TO ERP ELSE                                 41007100
         ELSE  GO TO ERP;                                               41007200
         SVIF2 := GW2;                                                  41007300
         MACRO(EXAM,TYPE,REAL(REP) & REAL(REPUF) [46:47:1]);            41007400
         PUTACHAR(SVIF2,LITCHR,CHR);                                    41007500
         IF KEY = REPLACING THEN                                        41007600
    BEGIN                                                               41007700
         IF REP THEN GO TO ERP1;                                        41007800
         REP := TRUE;                                                   41007900
         STEPS;                                                         41008000
    END;                                                                41008100
         MACRO(XXXXM,CHR,REAL(LITCHR) & REAL(REP)[46:47:1]);            41008200
         IF KEY  NEQ BYV THEN                                           41008300
         IF REP THEN GO TO ERP1                                         41008400
         ELSE GO TO XIT;                                                41008500
         IF NOT REP THEN GO TO ERP;                                     41008600
         PUTACHAR(SVIF2,LITCHR,CHR);                                    41008700
         MACRO(XXXXM,CHR,REAL(LITCHR) & REAL(REP) [46:47:1]);           41008800
         GO TO XIT;                                                     41008900
    ERP1:                                                               41009000
         MACRO(XXXXM,0,2);                                              41009100
    ERP:                                                                41009200
         ERR(0);                                                        41009300
         DO STEPS UNTIL ENDOFSTATEMENT;                                 41009400
    XIT:                                                                41009500
         NOMKS ~ FALSE;                                                 41009600
    END EXAMINEP;                                                       41009700
PROCEDURE MOVEP;                                                        41009800
BEGIN    % * * * SYNTAX * * * * * * * * * * * * * * * * * * * * * * * * 41009900
         %    FORMAT 1:                                                 41010000
         %         MOVE [CORRESPONDING] (IDENTIFIER/LITERAL) TO         41010100
         %              IDENTIFIER ...                                  41010200
         %    FORMAT 2:      * EXTENSION *                              41010300
         %         MOVE [IDENTIFIER TO IDENTIFIER]                      41010400
         %    FORMAT 3:      * EXTENSION *                              41010500
         %         MOVE IDENTIFIER TO IDENTIFIER                        41010600
         %              [EXPRESSION:EXPRESSION:EXPRESSION]              41010700
         % * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *41010800
    BOOLEAN DUPTOG;                                                     41010900
DEFINE                                                                  41011000
      NDPTOG  = BUL[7]#,                                                41011100
      SFNUM   = BUL[8]#,                                                41011200
      SFGRP   = BUL[9]#,                                                41011300
      RFGRP   = BUL[10]#;                                               41011400
         BOOLEAN SFCMP,NAMSAV,JUNKSAV;                                  41011500
    DEFINE    ANOTHER = IF NOT NDPTOG THEN IF NDPTOG~KEY=IDV THEN 1     41011600
                   ELSE 2 ELSE 0#,                                      41011700
              MCMACHK = BEGIN  IF KEY = COMMA OR    KEY = ANDV  THEN    41011800
                              IF NXKEY } 10 THEN                        41011900
                                  BEGIN  ERR(121);                      41012000
                                         GO TO XIT;                     41012100
                                  END ELSE                              41012200
                                  KEY ~ DNSCAN;                         41012300
                       END;#,                                           41012400
              NUMERICFIELD = SFNUM~(T.CLF=NM AND T.SZF{23)#,            41012500
         FRMT = IF J.CLF=EA AND NOT SFCMP THEN 2 ELSE                   41012600
                IF SFGRP OR RFGRP THEN 1 ELSE IF J.CLF}NM THEN 3 ELSE   41012700
                IF SFCMP THEN 6 ELSE 1#,                                41012800
              NFRMT = 0#;                                               41012900
         LABEL CORR,FRMT2,HR,THR,XIT;                                   41013000
   REAL SGIX;                                                           41013100
DEFINE                                                                  41013200
      I       = UL[34]#,   SGTP = UL[37]#,                              41013300
      J       = UL[35]#,   SGW2 = UL[38]#,                              41013400
      P       = UL[36]#,   T    = UL[33]#;                              41013500
    PROCEDURE FRMT3;                                                    41013600
         BEGIN     COMMENT * * * FORMAT 3 * * * ;                       41013700
LABEL ZIT;                                                              41013800
              STEPS;                                                    41013900
              IF SGTP!ITM OR (SGW2.USF>CMP1 OR IF2[GIX].USF>CMP1)       41014000
              THEN BEGIN                                                41014100
                        ERR(115);                                       41014200
                        DO STEPS UNTIL KEY=RTBRKT OR ENDOFSTATEMENT;    41014300
                        STEPP;                                          41014400
                       BEGIN  IF KEY = COMMA OR    KEY = ANDV  THEN     41014500
                              IF NXKEY } 10 THEN                        41014600
                                  BEGIN  ERR(121);                      41014700
                                         GO TO ZIT;                     41014800
                                  END ELSE                              41014900
                                  KEY ~ DNSCAN;                         41015000
                       END;                                             41015100
                        MAC2(STO9M,ANOTHER)                             41015200
                   END                                                  41015300
              ELSE BEGIN                                                41015400
                        MAC2(PWSMM,IF NDPTOG THEN 0 ELSE 1);            41015500
                        I ~ 0;                                          41015600
                        DO   BEGIN                                      41015700
                                  STEPP;                                41015800
                                  ARITHEXP;                             41015900
                                  I~I+1                                 41016000
                             END                                        41016100
                        UNTIL KEY!COLON;                                41016200
                        IF KEY!RTBRKT THEN ERR(0) ELSE STEPP;           41016300
                       BEGIN  IF KEY = COMMA OR    KEY = ANDV  THEN     41016400
                              IF NXKEY } 10 THEN                        41016500
                                  BEGIN  ERR(121);                      41016600
                                         GO TO ZIT;                     41016700
                                  END ELSE                              41016800
                                  KEY ~ DNSCAN;                         41016900
                       END;                                             41017000
                        IF I ! 3 THEN                                   41017100
                             BEGIN                                      41017200
                                  ERR(0);                               41017300
                                  MAC2(XXXXM,3); % ERR EXIT             41017400
                                  FOR P~1 STEP 1 UNTIL I DO MAC1(DELMM);41017500
                                  MAC1(XCHMM);                          41017600
                                  MAC1(DELMM);                          41017700
                                  MAC2(STO9M,ANOTHER)                   41017800
                             END                                        41017900
                        ELSE BEGIN                                      41018000
                                  MAC2(XXXXM,ANOTHER);                  41018100
                             END;                                       41018200
                   END;                                                 41018300
ZIT:                                                                    41018400
         END  FRMT3;                                                    41018500
    PROCEDURE LTRLSTR;                                                  41018600
    BEGIN                                                               41018700
LABEL ZIT;                                                              41018800
    BOOLEAN AHL,NON,STRNG6,ZER,LOWW;                                    41018900
    DEFINE FRMT = IF J.CLF}NM THEN 3 ELSE IF J.CLF=EA THEN 2 ELSE 1#;   41019000
    INTEGER P;                                                          41019100
         IF NOT SFNUM~(T=ITGRV OR T=NUMV OR                             41019200
              ZER~(KEY=ZEROV OR (AHL~KEY=ALL) AND NXKEY=ZEROV)) THEN    41019300
              NON ~ Q.SCF!FIGURATIVE;                                   41019400
         LOWW ~ KEY=LOWV;                                               41019500
         IF AHL THEN                                                    41019600
    BEGIN                                                               41019700
         STEPS;                                                         41019800
         IF (P~Q.SCF) ! STRNGV  AND (NON~ P!FIGURATIVE) THEN ERR(0);    41019900
    END;                                                                41020000
         MOVE(EDITABLE,ACCUM[0],P~(17+(T~ACCUM[1].SIZEF)) DIV 8);       41020100
         SGW2~EDITABLE[0];                                              41020200
         IF DNSCAN ! TOV THEN ERR(78) ELSE STEPP;                       41020300
         DO                                                             41020400
    BEGIN                                                               41020500
         PUTANAME;                                                      41020600
         RFGRP~(J~IF2[GIX]<0);                                          41020700
         MOVE(ACCUM,EDITABLE,P);                                        41020800
         Q~ACCUM[0];                                                    41020900
         IF NON THEN Q.LSGF~REAL(AHL);                                  41021000
         IF ZER THEN                                                    41021100
              IF GW2.CLF}NM THEN MACRO(STO9M,0,2)                       41021200
              ELSE BEGIN FGRTV;MACRO(STOXM,0,FRMT) END                  41021300
         ELSE                                                           41021400
         IF LOWW AND GW2.CLF}NM THEN MACRO(STO9M,0,2)                   41021500
         ELSE                                                           41021600
         IF SFNUM THEN                                                  41021700
              IF RFGRP OR J.CLF<NM THEN                                 41021800
                   BEGIN                                                41021900
                        IF J.CLF=AB THEN ERR(115);                      41022000
                        IF NOT RFGRP THEN IF SGW2.ITF!0 THEN ERR(13);   41022100
                        VALUEOUT;                                       41022200
                        MACRO(STOXM,0,FRMT)                             41022300
                   END                                                  41022400
              ELSE BEGIN                                                41022500
                        NMLTRL(FALSE,0);                                41022600
                        MAC1(STO9M)                                     41022700
                   END                                                  41022800
         ELSE                                                           41022900
    BEGIN                                                               41023000
         IF NON THEN                                                    41023100
    BEGIN                                                               41023200
         IF STRNG6 THEN MAC2(SVAM,1) ELSE             % ALREADY IN POOL 41023300
    BEGIN                                                               41023400
         VALUEOUT;                                                      41023500
         IF Q.LSZ > 16 THEN                                             41023600
    BEGIN                                                               41023700
         MAC2(SVAM,0);                                % SET UP POOL DESC41023800
         STRNG6~TRUE                                                    41023900
    END;                                                                41024000
    END;                                                                41024100
    END  ELSE FGRTV;                                                    41024200
         IF GW2.CLF=AB THEN IF Q.SCF=FIGURATIVE                         41024300
              THEN IF (T1~Q.ITF)!SPACEV AND T1!UPPERB AND T1!LOWV       41024400
              THEN ERR(115);                                            41024500
         IF GW2.CLF } NM THEN IF NON THEN ERR(115) ELSE                 41024600
         IF (T ~ Q.ITF)=SPACEV OR T=QUOTE OR T=ENDV THEN                41024700
              ERR(IF CDMSK=7 THEN -115 ELSE 115);                       41024800
         MACRO(STOXM,0,FRMT)                                            41024900
    END;                                                                41025000
         STEPP;                                                         41025100
                       BEGIN  IF KEY = COMMA OR    KEY = ANDV  THEN     41025200
                              IF NXKEY } 10 THEN                        41025300
                                  BEGIN  ERR(121);                      41025400
                                         GO TO ZIT;                     41025500
                                  END ELSE                              41025600
                                  KEY ~ DNSCAN;                         41025700
                       END;                                             41025800
    END UNTIL ENDOFSTATEMENT;                                           41025900
ZIT:                                                                    41026000
    END  LTRLSTR;                                                       41026100
    COMMENT * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *;41026200
         MOVETOG ~ TRUE;                                                41026300
         MONITORS~MONITR;                                               41026400
         NDPTOG ~ SFNUM ~ SFGRP ~ RFGRP ~ FALSE;                        41026500
         IF NXKEY=LFTBRKT THEN GO TO FRMT2;                             41026600
         IF DNSCAN=CORRESPONDING THEN GO TO CORR;                       41026700
         IF T~Q.SCF!ITM AND T!SPECIALREG AND T!FDV AND KEY!FILEV THEN   41026800
    BEGIN                                                               41026900
         IF KEY!LITV AND KEY!ALL AND T!FIGURATIVE THEN ERRM(69);        41027000
         LTRLSTR;                                                       41027100
         GO TO XIT                                                      41027200
    END;                                                                41027300
         IF(SFNUM ~ (T=SPECIALREG OR T=FDV OR KEY=FILEV) OR             41027400
                    (NOT(SFGRP~(T~IF2[Q.NXIF]<0)) AND NUMERICFIELD))    41027500
              AND NOT (SFCMP ~ T.USF!BCL AND NOT SFGRP) THEN            41027600
    BEGIN          % MAY NEED NAME OR VALUE DEPENDING ON RECEIVING FIELD41027700
         MACRO(STOSM,1,1);                                              41027800
         OPERAND(MOVESF,SBONLY);                                        41027900
    END ELSE OPERAND(MOVESF,IF SFCMP THEN BVALUE ELSE NAME);            41028000
         SGTP~GTP;      % SAVE "TYPE"                                   41028100
         IF SFNUM THEN SFGRP ~ FALSE;                                   41028200
         SGW2 ~ GW2;                                                    41028300
         SGIX~GIX;      % SAVE "INDEX"                                  41028400
         IF DNSCAN ! TOV THEN ERR(78) ELSE STEPP;     % "TO EXPECTED"   41028500
         IF GTP=TIMEV THEN                                              41028600
    BEGIN                              % TIME FUNCTION AS SENDING FIELD 41028700
         SFGRP ~ SFCMP ~ FALSE;                                         41028800
         DO                                                             41028900
    BEGIN                                                               41029000
         IF NOT DUPTOG THEN                                             41029100
    BEGIN                                                               41029200
         PUTANAME; J ~ GW2;                                             41029300
         STEPP; MCMACHK;                                                41029400
         DUPTOG ~ KEY=IDV;                                              41029500
         IF (SFNUM ~ SGW2.CLF=NM) AND GW2.CLF}NM AND NOT (RFGRP ~ GW2<0)41029600
         THEN                                                           41029700
    BEGIN                                                               41029800
         IF DUPTOG THEN MACRO(STO9M,5,0);                               41029900
         MACRO(STO9M,2,0);                                              41030000
    END ELSE                                                            41030100
         IF (NOT SFNUM AND (GW2.CLF<NM OR RFGRP)) OR (SFNUM AND         41030200
              GW2.CLF!AB) THEN                                          41030300
    BEGIN                                                               41030400
         IF SFNUM THEN MACRO(MKSMM,0,2);         % VOID MKS             41030500
         IF DUPTOG THEN                    % STORE VALUE IN JUNK NON-DES41030600
    BEGIN                                                               41030700
         IF SFNUM THEN MAC1(XCHMM); MACRO(STO9M,5,0);                   41030800
         IF SFNUM THEN MAC1(XCHMM);                                     41030900
    END;                                                                41031000
         MACRO(STOXM,3,IF SFNUM THEN 6 ELSE FRMT);                      41031100
    END ELSE ERR(115);                                                  41031200
    END ELSE                                                            41031300
    BEGIN                                                               41031400
         PUTANAME; J ~ GW2;                                             41031500
         STEPP; MCMACHK;                                                41031600
         MACRO(VALDM,0,13-REAL(SFNUM));                                 41031700
         IF SFNUM AND GW2.CLF}NM AND NOT RFGRP ~ GW2<0                  41031800
              THEN MACRO(STO9M,0,0)                                     41031900
         ELSE IF NOT SFNUM AND (GW2.CLF<NM OR RFGRP)                    41032000
              THEN MACRO(STOXM,0,FRMT)                                  41032100
         ELSE IF SFNUM AND GW2.CLF!AB THEN MACRO(STOXM,0,6)             41032200
         ELSE ERR(115);                                                 41032300
    END;                                                                41032400
    END UNTIL ENDOFSTATEMENT;                                           41032500
         GO TO XIT;                                                     41032600
    END;                                                                41032700
         DO                                                             41032800
    BEGIN                                                               41032900
         IF SFNUM AND NOT SFCMP THEN                                    41033000
    BEGIN                                                               41033100
         MACRO(STOSM,2,1);                                              41033200
         OPERAND(ANYDN,SBONLY);                                         41033300
         MACRO(STOSM,0,1);             % RESTORE STORSUB                41033400
    END ELSE PUTANAME;                                                  41033500
         J ~ GW2;                                                       41033600
         IF SFGRP THEN  % SENDING FIELD IS A GROUP                      41033700
    HR:                                                                 41033800
              IF DUPTOG THEN                % RETRIEVE SENDING FIELD    41033900
                   BEGIN                    % VALUE OR NAME FROM JUNK   41034000
                        IF NDPTOG ~ SFNUM THEN MACRO(VALDM,0,4) ELSE    41034100
                             MACRO(NAMDM,0,5);   % GET NAME FROM JUNK   41034200
    THR:                STEPP;                                          41034300
                        MCMACHK;                                        41034400
                        MACRO(STOXM,0,FRMT)                             41034500
                   END                                                  41034600
              ELSE BEGIN                                                41034700
                        STEPP;                                          41034800
                        MCMACHK;                                        41034900
                        IF DUPTOG ~ (KEY = IDV) THEN MACRO(STOXM,1,FRMT)41035000
                        ELSE MACRO(STOXM,3,FRMT)                        41035100
                   END                                                  41035200
         ELSE                                                           41035300
         IF SFNUM THEN  % SENDING FIELD IS NUMERIC                      41035400
              IF (RFGRP ~ J<0) OR J.CLF<NM THEN                         41035500
                   BEGIN     COMMENT * * * HANDLE AS ALPHA MOVE;        41035600
                        IF J.CLF=AB THEN ERR(115); % CONFLICTING CLASS  41035700
                        IF NOT RFGRP THEN                               41035800
                             IF SGW2.FSZF!0 THEN ERR(13);%MUST BE INTGR 41035900
                        IF SFCMP THEN                                   41036000
                        BEGIN                                           41036100
                        IF NOT(JUNKSAV OR NDPTOG) THEN                  41036200
                             BEGIN                                      41036300
                             STEPP; MCMACHK;                            41036400
                             JUNKSAV ~ NDPTOG ~ KEY=IDV;                41036500
                             MACRO(STOXM,4|REAL(NDPTOG),6);             41036600
                             END ELSE IF JUNKSAV THEN                   41036700
                             BEGIN                                      41036800
                             MAC1(MKSMM);                               41036900
                             MAC1(JONKM); % GET SOURCE=JUNKA ON STACK   41037000
                             STEPP;                                     41037100
                             MCMACHK;                                   41037200
                             MACRO(STOXM,3,1);  % EXCHANGE & STORE      41037300
                             END ELSE                                   41037400
                             BEGIN     % NDPTOG TRUE                    41037410
                             STEPP; MCMACHK;                            41037420
                             JUNKSAV ~ KEY=IDV;                         41037430
                             MACRO(VALDM,0,12);                         41037440
                             MACRO(STOXM,0,6);                          41037450
                             END;                                       41037460
                        END                                             41037500
                        ELSE                                            41037600
                        IF NOT NAMSAV THEN                              41037700
                             BEGIN                                      41037800
                             MAC1(MKSMM);                               41037900
                             IF SGW2.SUBF!0 THEN MACRO(STOSM,1,2);      41038000
                             MACRO(NAMDM,SGIX,0);                       41038100
                             IF  GW2.SUBF!0 THEN MAC2(STOSM,2);         41038200
                             MACRO(NAMDM,GIX,0);                        41038300
                             STEPP; MCMACHK;                            41038400
                             MACRO(STOXM,3-2|REAL(NAMSAV~(KEY=IDV)),    41038500
                                   FRMT);   % EXCHANGE AND STORE        41038600
                             END ELSE                                   41038700
                             BEGIN                                      41038800
                             MAC1(MKSMM);                               41038900
                             IF  GW2.SUBF!0 THEN MACRO(STOSM,2,2);      41039000
                             MACRO(NAMDM,GIX,0);                        41039100
                             MACRO(NAMDM,0,5);   % GET NAME FROM JUNK   41039200
                             GO TO THR;                                 41039300
                             END;                                       41039400
                   END                                                  41039500
              ELSE BEGIN                                                41039600
                        IF NDPTOG THEN % PREVIOUSLY STORED VALUE IN JUNK41039700
                             BEGIN                                      41039800
                                  IF NOT SFCMP THEN                     41039900
                                       BEGIN                            41040000
                                       MAC1(MKSMM);                     41040100
                                       IF GW2.SUBF!0 THEN               41040200
                                            MACRO(STOSM,2,2);           41040300
                                       MACRO(NAMDM,GIX,0);              41040400
                                       END;                             41040500
                                  MACRO(VALDM,0,4);                     41040600
                                  IF NXKEY=LFTBRKT THEN FRMT3           41040700
                                  ELSE BEGIN                            41040800
                                       STEPP; MCMACHK;                  41040900
                                       MACRO(STO9M,0,0);  % EXCHANGE    41041000
                                       END;                             41041100
                             END                                        41041200
                        ELSE BEGIN                                      41041300
                                  IF NOT SFCMP THEN                     41041400
                                       BEGIN                            41041500
                                       IF SGW2.SUBF!0 THEN              41041600
                                            MAC2(STOSM,1);              41041700
                                       MACRO(VALDM,SGIX,2);             41041800
                                       MAC1(MKSMM);                     41041900
                                       IF GW2.SUBF!0 THEN               41042000
                                            MACRO(STOSM,2,2);           41042100
                                       MACRO(NAMDM,GIX,0);              41042200
                                       END;                             41042300
                                  IF NXKEY=LFTBRKT THEN FRMT3           41042400
                                  ELSE BEGIN                            41042500
                                            STEPP; MCMACHK;             41042600
                                            IF NDPTOG~(KEY=IDV) THEN    41042700
                                                 MACRO(STO9M,1,NFRMT)   41042800
                                            ELSE MACRO(STO9M,2,NFRMT)   41042900
                                       END; % SAVE IN JUNK AND STORE    41043000
                             END;           % OR JUST STORE             41043100
                   END                      % AND STORE                 41043200
         ELSE           % SOME FORM OF NON-NUMERIC MOVE                 41043300
         IF ((SGTP=ITM AND SGW2.CLF!AN) AND J.CLF}NM                    41043400
                        % NE,EA OR AB TO NM OR NME                      41043500
              OR   J.CLF=AB AND SGW2.CLF=EN)% NE TO AB                  41043600
         THEN BEGIN                                                     41043700
                   ERR(115);                                            41043800
                   GO TO HR                                             41043900
              END                                                       41044000
         ELSE GO TO HR;                                                 41044100
    END  UNTIL ENDOFSTATEMENT;                                          41044200
         GO TO XIT;                                                     41044300
         COMMENT * * * * * * * * * * * * * * * * * * * * * * * * * * * ;41044400
    FRMT2:                                                              41044500
         STEPS;                                                         41044600
         STEPP;                                                         41044700
         OPERAND(ANYDN,NAME);                                           41044800
         IF DNSCAN!TOV THEN ERR(78) ELSE STEPP;                         41044900
         OPERAND(NUMDN,NAME);                                           41045000
         IF GW2.USF=BCL THEN                                            41045100
              BEGIN                                                     41045200
                   MACRO(STOXM,3,1);                                    41045300
                   ERR(115);                                            41045400
              END                                                       41045500
         ELSE MACRO(STOXM,3,8);                                         41045600
         IF SCTRL!RTBRKT THEN ERR(0) ELSE STEPS;                        41045700
         GO TO XIT;                                                     41045800
         COMMENT * * * * * * * * * * * * * * * * * * * * * * * * * * * ;41045900
    CORR:                                                               41046000
         STEPP;                                                         41046100
         MACRO(STOSM,1,1);             % STORE SUBSCRIPT, IF ANY        41046200
         OPERAND(ANYDN,SBONLY);                                         41046300
         MACRO(STOSM,0,1);             % RESET STORSUB                  41046400
         IF GTP=ITM THEN                                                41046500
    BEGIN                                                               41046600
         T~GIX                                                          41046700
    END ELSE ERRM(236);                                                 41046800
         IF DNSCAN!TOV THEN ERR(78) ELSE STEPP;                         41046900
         DO                                                             41047000
    BEGIN                                                               41047100
         MACRO(STOSM,2,1);                                              41047200
         OPERAND(ANYDN,SBONLY);                                         41047300
         MACRO(STOSM,0,1);             % RESET STORSUB                  41047400
         IF GTP=ITM THEN                                                41047500
              FINDCORRESPONDING(T,GIX,0,FALSE,FALSE) ELSE               41047600
         ERRM(236);                                                     41047700
         STEPP;                                                         41047800
         MCMACHK;                                                       41047900
    END  UNTIL ENDOFSTATEMENT;                                          41048000
    XIT:                                                                41048100
         SGW2 ~ 0;                                                      41048200
         MONITORS ~ MOVETOG ~ FALSE;                                    41048300
END MOVEP;                                                              41048400
PROCEDURE NOTEP;                                                        41048405
    BEGIN                                                               41048410
LABEL LP,LP1;                                                           41048415
REAL STREAM PROCEDURE PDCK(PBS,COUNT);                                  41048420
         VALUE COUNT,PBS;                                               41048422
    BEGIN                                                               41048423
         SI ~ PBS;                                                      41048424
         COUNT( IF SC = "." THEN BEGIN SI ~ SI+1;IF SC = " " THEN       41048426
                BEGIN SI~SI-1; PDCK~SI; JUMP OUT END ELSE SI~SI+1 END   41048427
                ELSE SI ~ SI + 1);                                      41048428
    END;                                                                41048435
         IF NOTOG THEN                                                  41048440
    BEGIN                                                               41048445
LP:      READACARD;                                                     41048450
         IF GETCHARS(PTOBUFFER,7,4) = "    " THEN GO TO LP ELSE         41048454
                                    BEGIN NXKEY ~ PERIOD; STEPS END;    41048456
    END ELSE IF NXKEY = PERIOD THEN STEPS ELSE                          41048460
    BEGIN                                                               41048465
LP1:     IF (T ~ PDCK(PBS,COUNT)) ! 0 THEN                              41048470
    BEGIN PBS ~ T;    STEPS; STEPS; END ELSE                            41048475
    BEGIN  READACARD; GO TO LP1; END;                                   41048480
    END;                                                                41048485
         NOTOG ~ FALSE;                                                 41048487
    END NOTEP;                                                          41048490
PROCEDURE SETP;                                                         41048500
BEGIN    % * * * SYNTAX * * * * * * * * * * * * * * * * * * * * * * * * 41048600
         %    FORMAT 1:                                                 41048700
         %         SET (INDEX-NAME/IDENTIFIER) ... TO                   41048800
         %              (INDEX-NAME/IDENTIFIER/LITERAL)                 41048900
         %    FORMAT 2:                                                 41049000
         %         SET INDEX-NAME ... (UP BY/DOWN BY)                   41049100
         %              (IDENTIFIER/LITERAL)                            41049200
         % * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *41049300
    DEFINE                                                              41049400
              ACTN   = UL[ 0]#,                                         41049500
              CNT    = UL[ 1]#,                                         41049600
              LITSGN = GW2.[16:1]#,                                     41049700
              LITSZ  = GW2.[17:5]#,                                     41049800
              LITITF = GW2.[22:5]#,                                     41049900
              LITPWR = GW2.[27:5]#,                                     41050000
              LITVAL = GW2.[32:16]#;                                    41050100
    PROCEDURE SETT;                                                     41050200
    BEGIN                                                               41050300
         REAL SGIX,SGTP,SGW2;                                           41050400
         LABEL XIT;                                                     41050500
              OPERAND(SETRF,SBONLY);                                    41050600
              SGW2~GW2;SGIX~GIX;SGTP~GTP;                               41050700
              STEPP;                                                    41050800
              CMACHK;                                                   41050900
              CNT~CNT+1;                                                41051000
              IF KEY=IDV THEN SETT ELSE                                 41051100
         BEGIN                                                          41051200
              IF ENDOFSTATEMENT THEN                                    41051300
         BEGIN                                                          41051400
         ERR(167);                                                      41051500
              ACTN~TOV;                                                 41051600
              GIX~0;                                                    41051700
              GTP~IXN;                                                  41051800
              GW2~6;                                                    41051900
              MACRO(VALDM,0,4)                                          41052000
         END  ELSE                                                      41052100
         BEGIN                                                          41052200
              IF ACTN~KEY!TOV AND ACTN!UP AND ACTN!DOWN THEN            41052300
    BEGIN ERR(167); ACTN ~ TOV;END ELSE                                 41052400
         IF ACTN!TOV THEN IF DNSCAN!BYV THEN ERR(167) ELSE STEPS        41052500
              ELSE STEPP;                                               41052600
              OPERAND(IF ACTN=TOV THEN SETSF ELSE NUMSF,BVALUE);        41052700
              STEPS                                                     41052800
         END;                                                           41052900
              MACRO(SETMM,CNT,ACTN);                                    41053000
         END;                                                           41053100
              IF ACTN=TOV THEN                                          41053200
              IF SGTP=IXN THEN                                          41053300
         BEGIN     % * * * INDEX-NAME RF * * *                          41053400
              IF GTP=LITV THEN                                          41053500
         BEGIN     % * * * NUMERIC LITERAL SF * * *                     41053600
              IF LITITF!0 THEN ERR(13);                                 41053700
              IF LITSZ+LITPWR>5 OR BOOLEAN(LITSGN) OR                   41053800
                   LITVAL=0 OR LITVAL>IF1[INXR[ABS(SGIX)].DNIX].OCCF    41053900
                   THEN ERR(242);                                       41054000
              MACRO(XXXXM,0,SGIX)                     % 0 = NUMERIC LTRL41054100
         END  ELSE                                                      41054200
              IF GTP=ITM THEN                                           41054300
         BEGIN                                                          41054400
              IF GW2.FSZF!0 THEN ERR(13);                               41054500
              MACRO(XXXXM,REAL(GW2.USF=IXDN)+1,SGIX)  % 1 = DN,2 = IXDN 41054600
         END  ELSE                                                      41054700
              MACRO(XXXXM,3,SGIX)                     % 3 = IXN         41054800
         END  ELSE                                                      41054900
              IF SGW2.USF=IXDN THEN                                     41055000
         BEGIN     % * * * DATA-NAME WITH USAGE INDEX * * *             41055100
              IF GTP!IXN AND(GTP!ITM OR GW2.USF!IXDN) THEN ERR(115);    41055200
              MACRO(XXXXM,4,SGIX)                     % IXDN ~ IXN V ITM41055300
         END  ELSE                                                      41055400
         BEGIN     % * * * NUMERIC DATA-NAME * * *                      41055500
              IF GTP!IXN THEN ERR(115);                                 41055600
              IF SGW2.FSZF!0 THEN ERR(13);                              41055700
              MACRO(XXXXM,5,SGIX)                     % ITM ~ IXN       41055800
         END                                                            41055900
    ELSE                                                                41056000
         BEGIN     % * * * UP BY / DOWN BY * * *                        41056100
         IF SGTP!IXN THEN                                               41056200
    BEGIN                                                               41056300
         ERR(115);                                                      41056400
         MACRO(XXXXM,8,0);                                              41056500
         GO TO XIT;                                                     41056600
    END;                                                                41056700
         IF GTP = LITV THEN                                             41056800
    BEGIN                                                               41056900
         IF LITITF ! 0 THEN ERR(13);                                    41057000
         IF LITSZ+LITPWR > 5 OR BOOLEAN(LITSGN) OR                      41057100
              LITVAL=0 OR LITVAL>IF1[INXR[ABS(SGIX)].DNIX].OCCF         41057200
              THEN ERR(242)                                             41057300
    END  ELSE                                                           41057400
         IF GW2.FSZF!0 THEN ERR(13);                                    41057500
              MACRO(XXXXM,REAL(GTP=ITM)+6,SGIX)       % IXN +/- LIT V DN41057600
         END;                                                           41057700
    XIT:                                                                41057800
    END  SETT;                                                          41057900
         UL[0] ~ UL[1] ~ 0;                                             41058000
         MONITORS~MONITR;                                               41058100
         STEPP;                                                         41058200
         IF KEY=IDV AND Q.SCF=FDV OR KEY=FILEV THEN                     41058300
    BEGIN                                                               41058400
         MACRO(SETMM,IF KEY=FILEV THEN 0 ELSE Q.NXIF,FILEV);            41058500
         IF SCTRL ! LEFTPAREN THEN ERR(140);                            41058600
         STEPS;                                                         41058700
         IF NOT (ATWDSRCH AND (Q~ACCUM[0]).SCF = ATNAME) THEN ERR(270); 41058800
         MACRO(XXXXM,Q.ITF,CNT~Q.ATYPF);                                41058900
         IF SCTRL ! RIGHTPAREN THEN ERR(68);                            41059000
         IF SCTRL ! TOV THEN ERR(78);                                   41059100
         STEPP;                                                         41059200
         IF CNT = 2 THEN                                                41059300
    BEGIN                                                               41059400
         OPERAND(SETSTRNG,NAME);                                        41059500
         IF NOT(GTP = LITV AND Q.SCF = STRNGV) THEN                     41059600
         IF GW2.USF ! BCL THEN ERR(271);                                41059700
    END  ELSE                                                           41059800
         OPERAND(ARTHTYP,BVALUE);                                       41059900
         MACRO(XXXXM,SETV,EXIT);                                        41060000
         STEPS;                                                         41060100
    END  ELSE                                                           41060200
         SETT;                                                          41060300
         MONITORS~FALSE                                                 41060400
END SETP;                                                               41060500
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%41060600
%                                                                      %41060700
%                       ARITHMETIC STATEMENTS                          %41060800
%                                                                      %41060900
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%41061000
DEFINE   SZRL = IF SZR THEN MAC1(SZRFM); #,                             41061100
         SZRB = IF SZR THEN CONDITIONALSTMT; #,                         41061200
         SZRS = IF SZR ~ SZRR THEN MAC1(SZRSM)#, % CLEAR SIZE ERROR CELL41061300
         RANDEX(R) = MACRO(IF SZR THEN SZERM ELSE STO9M,0,REAL(R))#,%EX 41061800
         RANDIT(R) = MACRO(IF SZR THEN SZERM ELSE STO9M,2,REAL(R))#,%   41061900
         ROUNDD = RND:=DIALAWAY(JUNK:=REAL(RNDD),RND,M:=M+1,            41062000
                                1)#,  % PUT RNDD INTO RND               41062100
         NANDV = MACRO(VALDM,GIX,2+4|(T~REAL(IF2[GIX].USF!CMP1)));      41062200
                 MACRO(MATH,ADD,0); MACRO(NAMDM,GIX,2|T)#,              41062300
         NFRST = NOT FRST~(ENDOFSTATEMENT OR KEY=ON OR KEY=SIZE OR      41062400
              KEY=SEMI)#;                                               41062500
BOOLEAN STREAM PROCEDURE DIALAWAY(S,D,N,IO);   % 1=DIAL IN, 0=DIAL OUT  41062600
         VALUE N,IO,S;                                                  41062700
    BEGIN     LABEL OUTT,EGRESS;                                        41062800
         CI ~ CI + IO;                                                  41062900
         GO TO OUTT;                                                    41063000
         SI ~ D; DI ~ LOC DIALAWAY; DS ~ WDS; DI ~ DI-5;                41063100
         SKIP N DB;                                                     41063200
         S (DS~ SET);                                                   41063300
         GO TO EGRESS;                                                  41063400
OUTT:                                                                   41063500
         SI ~ D;                                                        41063600
         SI~SI+3;                                                       41063700
         SKIP N SB;                                                     41063800
         IF SB THEN TALLY ~ 1;                                          41063900
         DIALAWAY ~ TALLY;                                              41064000
EGRESS:                                                                 41064100
    END;                                                                41064200
DEFINE   RNDD = IF KEY=ROUNDED THEN DNSCAN=KEY ELSE FALSE#;             41064300
PROCEDURE MATHCORR(TYPE); VALUE TYPE; REAL TYPE;                        41064400
BEGIN                                                                   41064500
    BOOLEAN   RND,SZR;                                                  41064600
    LABEL     XIT;                                                      41064700
    REAL      R,T;                                                      41064800
         STEPP;                                                         41064900
         MACRO(STOSM,1,1);                                              41065000
         OPERAND(ANYDN,SBONLY);                                         41065100
         T ~ GIX;                                                       41065200
         MACRO(STOSM,0,1);             % RESET STORSUB                  41065300
         IF GTP ! ITM THEN BEGIN ERR(236); ERRECOV; GO TO XIT; END;     41065400
         IF DNSCAN!(IF TYPE=ADD THEN TOV ELSE FROM)THEN ERR(0)          41065500
              ELSE STEPP;                                               41065600
         MACRO(STOSM,2,1);                                              41065700
         OPERAND(ANYDN,SBONLY);                                         41065800
         MACRO(STOSM,0,1);             % RESET STORSUB                  41065900
         STEPP;                                                         41066000
         RND~RNDD;                                                      41066100
         SZRS;                                                          41066200
         FINDCORRESPONDING(T,GIX,TYPE,RND,SZR);                         41066300
         SZRL;                                                          41066400
         SZRB;                                                          41066500
    XIT:                                                                41066600
         MONITORS~FALSE                                                 41066700
END MATHCORRES;                                                         41066800
PROCEDURE MAXOPSIZE(T);VALUE T;REAL T;                                  41066900
BEGIN                                                                   41067000
         IF BOOLEAN(T.DPLF) THEN                      % FUNNY DECIMAL PT41067100
         IF FUNNYDP THEN                              % ALREADY SEEN    41067200
    BEGIN                                                               41067300
         OPRNDSZ~MAX(OPRNDSZ,T.SZF+T.FSZF);                             41067400
         OPRNDSCL~MIN(OPRNDSCL,T.FSZF)                                  41067500
    END  ELSE                                                           41067600
         IF FUNNYDP~OPRNDSZ=0 THEN                    % UNINITIALIZED   41067700
    BEGIN                                                               41067800
         OPRNDSZ~T.SZF+T.FSZF;                                          41067900
         OPRNDSCL~T.FSZF                                                41068000
    END  ELSE                                         % "NORMAL" OPERAND41068100
         OPRNDSZ ~ MAX(OPRNDSZ,T.SZF+T.FSZF)                            41068200
         ELSE                                                           41068300
         IF FUNNYDP THEN                                                41068400
    BEGIN                                                               41068500
         FUNNYDP~FALSE;                                                 41068600
         OPRNDSZ ~ MAX(OPRNDSZ,T.SZF-T.FSZF);                           41068700
         OPRNDSCL~T.FSZF                                                41068800
    END  ELSE                                                           41068900
         IF OPRNDSZ=0 THEN                                              41069000
    BEGIN                                                               41069100
         OPRNDSCL ~ T.SZF-T.FSZF;                                       41069200
         OPRNDSCL~T.FSZF                                                41069300
    END  ELSE                                                           41069400
    BEGIN                                                               41069500
         OPRNDSZ ~ MAX(OPRNDSZ,T.SZF-T.FSZF);                           41069600
         OPRNDSCL ~ MAX(OPRNDSCL,T.FSZF);                               41069700
    END;                                                                41069800
         IF OPRNDSZ + (IF FUNNYDP THEN -OPRNDSCL ELSE OPRNDSCL) > 23    41069900
              THEN ERR(240);    % COMPOSITE SIZE ERROR                  41070000
END MAXOPSIZE;                                                          41070100
PROCEDURE ARITHMETICP(TYPE);VALUE TYPE; REAL TYPE;                      41070200
BEGIN                                                                   41070300
          % * * * ADD, SUBTRACT, AND MULTIPLY % * * * * * * * * * * * * 41070400
    REAL      I,M,R,T,X;                                                41070500
    BOOLEAN   FRST,RND,SZR,TYP1,TYP2;                                   41070600
    LABEL     RECF,STRT,XIT;                                            41070700
         MONITORS~MONITR;                                               41070800
         MAC2(SCALM,1);                                                 41070900
         M~-1;                                                          41071000
         IF DNSCAN=CORRESPONDING THEN BEGIN MATHCORR(TYPE); GO XIT END; 41071100
         PUTAZERO;                                                      41071150
         PUTAVALUE;                                                     41071200
         IF FRST~TYP1~(DNSCAN=TOV AND TYPE=ADD OR KEY=FROM AND TYPE=SUBT41071300
              OR KEY=BYV AND TYPE=MULT) THEN                            41071400
    BEGIN                                                               41071500
         STEPP;                                                         41071600
         GO TO RECF                                                     41071700
    END  ELSE                                                           41071800
         IF TYPE = MULT THEN ERRM(72);                                  41071900
         CMACHK;                                                        41072000
         % * * * SENDING FIELDS * * * * * * * * * * * * * * * * * * * * 41072100
    STRT:                                                               41072200
         PUTAZERO;                                                      41072250
         OPERAND(NUMSF,SBONLY);                                         41072300
         STEPP;                                                         41072400
         IF FRST~TYP1~(KEY=TOV AND TYPE=ADD OR KEY=FROM AND TYPE=SUBT)  41072500
         THEN                                                           41072600
    BEGIN                                                               41072700
         STEPP;                                                         41072800
         IF GTP=ITM THEN MACRO(VALDM,GIX,2);                            41072900
         MAC2(MATH,ADD);                                                41073000
         GO TO RECF                                                     41073100
    END  ELSE                                                           41073200
         IF FRST~TYP2~(KEY=GIVING AND TYPE=ADD) THEN                    41073300
    BEGIN                                                               41073400
         STEPP;                                                         41073500
         IF GTP=ITM THEN MACRO(VALDM,GIX,2);                            41073600
         MAC2(MATH,ADD);                                                41073700
         GO TO RECF                                                     41073800
    END  ELSE                                                           41073900
         IF ENDOFSTATEMENT OR KEY=ROUNDED OR KEY=ON OR KEY=SIZE OR      41074000
              KEY=SEMI AND TYPE=ADD THEN                                41074100
    BEGIN                                                               41074200
         SMICHK;                                                        41074300
         IF GTP!ITM THEN ERRM(165);                                     41074400
         RND ~ RNDD;                                                    41074500
         SZRS;                                                          41074600
         NANDV;                                                         41074700
         RANDIT(RND);                                                   41074800
         SZRL;                                                          41074900
         GO TO XIT                                                      41075000
    END;                                                                41075100
         CMACHK;                                                        41075200
         IF GTP=ITM THEN MACRO(VALDM,GIX,2);                            41075300
         MAC2(MATH,ADD);                                                41075400
         GO TO STRT;                                                    41075500
         % * * * RECEIVING FIELDS * * * * * * * * * * * * * * * * * *  *41075600
    RECF:                                                               41075700
         PUTAZERO;                                                      41075740
         IF FRST THEN MACRO(STOSM,1,1);          % STORE AWAY SUBSCRIPT 41075750
         IF NOT FRST AND (NOT TYP1 OR TYP2) AND NOT NOMKS THEN          41075760
    BEGIN                                                               41075765
         NOMKS ~ TRUE;                                                  41075770
         MACRO(MKSMM,0,2);                                              41075780
    END;                                                                41075790
         OPERAND(IF TYP1 THEN IF TYPE=SUBT OR TYPE=MULT THEN NUMSF      41075800
              ELSE NUMDN ELSE NUMRF, IF FRST THEN SBONLY ELSE           41075900
              IF TYP1 AND NOT TYP2 THEN NANDBV ELSE NAME);              41076000
         IF NOMKS AND GW2.SUBF!0 THEN MACRO(MKSMM,0,2);   % VOID MKS    41076010
         IF FRST THEN MACRO(STOSM,0,1);          % RESET STORSUB        41076050
         STEPP;                                                         41076100
         ROUNDD;                                                        41076200
         CMACHK;                                                        41076300
         IF FRST THEN                                                   41076400
         IF TYP2~(KEY=GIVING AND (TYPE=SUBT OR TYPE=MULT)) THEN         41076500
    BEGIN                                                               41076600
         M ~ M-1;                                                       41076650
         IF GTP=ITM THEN                                                41076700
    BEGIN                                                               41076800
         IF GW2.CLF!NM THEN ERR(115);                                   41076900
         IF GW2.SUBF!0 THEN MACRO(STOSM,1,6);    % UNDO STORSUB         41076950
         MACRO(VALDM,GIX,2)                                             41077000
    END;                                                                41077100
         MACRO(MATH,TYPE,REAL(TYPE=SUBT));            % V2=1 MEANS EXCH 41077200
         STEPP;                                                         41077300
         OPERAND(NUMRF,SBONLY);                                         41077400
         STEPP;                                                         41077500
         ROUNDD;                                                        41077600
         CMACHK;                                                        41077700
         IF FRST ~ (ENDOFSTATEMENT OR KEY=ON OR KEY=SIZE) THEN          41077800
    BEGIN                                                               41077900
         SMICHK;                                                        41078000
         SZRS;                                                          41078100
         MACRO(NAMDM,GIX,0);                                            41078200
         RANDIT(DIALAWAY(0,RND,M,0));                                   41078300
         SZRL;                                                          41078400
         GO TO XIT                                                      41078500
    END  ELSE                                                           41078600
    BEGIN                                                               41078700
         IF GW2.SUBF=0 THEN                                             41078800
    BEGIN                                                               41078810
         MACRO(STO9M,3,0);                                              41078820
         MACRO(NAMDM,GIX,0);                                            41078830
    END ELSE                                                            41078840
    BEGIN                                                               41078850
         MACRO(NAMDM,GIX,0);                                            41078860
         MACRO(STO9M,3,0);                                              41078870
    END;                                                                41078880
         GO TO RECF                                                     41078900
    END                                                                 41079000
    END  ELSE                                                           41079100
    BEGIN                                                               41079200
         IF KEY = GIVING AND TYPE = ADD THEN ERRM(105);                 41079250
         IF GTP!ITM THEN ERRM(75);                                      41079300
         IF FRST ~ (ENDOFSTATEMENT OR KEY=ON OR KEY=SIZE) THEN          41079400
    BEGIN                                                               41079500
         SMICHK;                                                        41079600
         IF NOT TYP1 THEN SZRS;                                         41079700
         IF GW2.SUBF!0 THEN MACRO(STOSM,1,6);    % UNDO STORSUB         41079750
         MACRO(IF TYP1 THEN VALDM ELSE NAMDM,GIX,REAL(TYP1)|(2+4|       41079800
               REAL(IF2[GIX].USF!CMP1)));                               41079900
         IF TYP1 THEN                                                   41080000
    BEGIN                                                               41080100
         MACRO(MATH,TYPE,REAL(TYPE=SUBT));                              41080200
         SZRS;                                                          41080300
         MACRO(NAMDM,GIX,IF IF2[GIX].USF = CMP1 THEN 0 ELSE 2);         41080400
    END;                                                                41080500
         RANDIT(DIALAWAY(0,RND,0,0));                                   41080600
         SZRL;                                                          41080700
         GO TO XIT                                                      41080800
    END  ELSE                                                           41080900
    BEGIN                                                               41081000
         IF GW2.SUBF=0 THEN                                             41081100
    BEGIN                                                               41081110
         MACRO(STO9M,3,0);                                              41081120
         MACRO(IF TYP1 THEN VALDM ELSE NAMDM,GIX,3|REAL(TYP1));         41081130
    END ELSE IF TYP1 THEN                                               41081140
    BEGIN                                                               41081150
         MACRO(STO9M,3,0);                                              41081160
         MAC2(STOSM,1);                          % RECALL SUBSCRIPT     41081170
         MACRO(VALDM,GIX,3);                                            41081180
    END ELSE                                                            41081182
    BEGIN                                                               41081183
         MACRO(STO9M,3,0);                                              41081185
         MAC2(STOSM,1);                          % RECALL SUBSCRIPT     41081190
         MACRO(NAMDM,GIX,0);                                            41081192
    END;                                                                41081195
         GO TO RECF                                                     41081200
    END                                                                 41081300
    END;                                                                41081400
         IF ENDOFSTATEMENT OR KEY=ON OR KEY=SIZE THEN                   41081500
    BEGIN                                                               41081600
         SMICHK;                                                        41081700
         SZRS;                                                          41081800
         T~M+1;                                                         41081900
         WHILE T~T-1}0 DO                                               41082000
    BEGIN                                                               41082100
         MACRO(VALDM,0,4);                                              41082200
         IF NOT TYP2 AND TYPE!ADD OR TYPE=ADD AND TYP1 THEN             41082300
              MAC2(MATH,TYPE);                                          41082400
         MACRO(IF SZR THEN SZERM ELSE STO9M,0,REAL(DIALAWAY(0,RND,T,0)))41082500
           ;                                                            41082600
    END;                                                                41082700
         SZRL;                                                          41082800
         GO TO XIT                                                      41082900
    END;                                                                41083000
         GO TO RECF;                                                    41083100
         % * * * WRAP-UP                                                41083200
    XIT:                                                                41083300
         NOMKS ~ FALSE;                                                 41083350
         SZRB;                                                          41083400
         MAC1(SCALM);                                                   41083500
         MONITORS~FALSE                                                 41083600
END ARITHMETICP;                                                        41083700
PROCEDURE COMPUTEP;                                                     41083800
BEGIN         % * * * SYNTAX * * * * * * * * * * * * * * * * * * * * * *41083900
    BOOLEAN   RND,SZR;                                                  41084000
    BOOLEAN   TYP1;                                                     41084100
    LABEL     XIT;                                                      41084200
    REAL      I,M,R,T,X;                                                41084300
         MACRO(SZRFM,1,0);                                              41084400
         MONITORS~MONITR;                                               41084500
         MAC2(SCALM,1);                                                 41084600
         MAC2(DEFPM,T ~ NXBR);  % SAVE 3 SYLLABLE FOR POSSIBLE          41084700
                                % ON SIZE ERROR CELL CLEAR              41084800
         FUNNYDP~FALSE;                                                 41084900
         OPRNDSCL~OPRNDSZ~0;                                            41085000
         STEPP;                                                         41085100
         DO                                                             41085200
    BEGIN                                                               41085300
         NOMKS ~ TRUE;  % MUST CONFORM TO ADD,SUBTRACT,DIVIDE,MULTIPLY  41085400
         PUTANAME;                                                      41085500
         IF GW2.SUBF!0 THEN MACRO(MKSMM,0,2);        % VOID MKS         41085550
         NOMKS ~ FALSE;                                                 41085600
         MAXOPSIZE(GW2);                                                41085700
         IF GW2.CLF < NM THEN ERR(115);                                 41085800
         STEPP;                                                         41085900
         ROUNDD;                                                        41086000
         CMACHK                                                         41086100
    END  UNTIL KEY=EQUALS OR KEY=EQUAL OR KEY=EQCHAR OR KEY=FROM OR     41086200
         TYP1~(KEY=ON OR KEY=SIZE OR KEY=SEMI OR ENDOFSTATEMENT);       41086300
         IF TYP1 THEN ERRM(74);                                         41086400
         STEPP;                                                         41086500
         SCALTOG ~ TRUE;                                                41086600
         ARITHEXP;                                                      41086700
         MACRO(SZRSM,T,REAL(SZR ~ SZRR));                               41086800
         T~M+1;                                                         41086900
         WHILE T~T-1}1 DO                                               41087000
    BEGIN                                                               41087100
         IF T!M THEN MACRO(VALDM,0,4);                                  41087200
         MACRO(IF SZR THEN SZERM ELSE STO9M,                            41087300
         IF M=T THEN IF M=1 THEN 0 ELSE 4 ELSE 0,JUNK~REAL(DIALAWAY(0,  41087400
         RND,M,0)));                                                    41087500
    END;                                                                41087600
         SZRL;                                                          41087700
    XIT:                                                                41087800
         SZRB;                                                          41087900
         FUNNYDP~MONITORS~FALSE;                                        41088000
         OPRNDSCL~OPRNDSZ~0;                                            41088100
         MAC1(SCALM);                                                   41088200
         MACRO(SZRFM,0,1);                                              41088300
END COMPUTEP;                                                           41088400
PROCEDURE DIVIDEP;                                                      41088500
BEGIN    % * * * SYNTAX * * * * * * * * * * * * * * * * * * * * * * * * 41088600
         %    FORMAT 1:                                                 41088700
         %         DIVIDE (IDENTIFIER/LITERAL) INTO                     41088800
         %              INTO IDENTIFIER [ROUNDED] ...                   41088900
         %              [; ON SIZE ERROR IMPERATIVE STATEMENT]          41089000
         %    FORMAT 2:                                                 41089100
         %         DIVIDE (IDENTIFIER/LITERAL) INTO (IDENTIFIER/LITERAL)41089200
         %              GIVING IDENTIFIER [ROUNDED] ...                 41089300
         %              [; ON SIZE ERROR IMPERATIVE STATEMENT]          41089400
         %    OFRMAT 3:                                                 41089500
         %         DIVIDE (IDENTIFIER/LITERAL) BY (IDENTIFIER/LITERAL)  41089600
         %              GIVING IDENTIFIER [ROUNDED] ...                 41089700
         %              [; ON SIZE ERROR IMPERATIVE STATEMENT]          41089800
         %    FORMAT 4:                                                 41089900
         %         DIVIDE (IDENTIFIER/LITERAL) INTO (IDENTIFIER/LITERAL)41090000
         %              GIVING IDENTIFIER [ROUNDED] REMAINDER IDENTIFIER41090100
         %              [; ON SIZE ERROR IMPERATIVE STATEMENT]          41090200
         %    FORMAT 5:                                                 41090300
         %         DIVIDE (IDENTIFIER/LITERAL) BY (IDENTIFIER/LITERAL)  41090400
         %              GIVING IDENTIFIER [ROUNDED] REMAINDER IDENTIFIER41090500
         %              [; ON SIZE ERROR IMPERATIVE STATEMENT]          41090600
         % * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *41090700
DEFINE                                                                  41090800
      BOO   = BUL[11]#,          ID1X = UL[ 2]#,                        41090900
      FRMT1 = BUL[12]#,          ID2X = UL[ 3]#,                        41091000
      INT   = BUL[13]#,          SQ   = UL[ 9]#,                        41091100
      LIT1  = BUL[14]#,          X    = UL[17]#,                        41091200
      LIT2  = BUL[15]#,          P1   = 0 #,                            41091300
      RND   = BUL[16]#,          P2   = 10#,                            41091400
      SZR   = BUL[17]#;                                                 41091500
         REAL M,I,ID3X,P,R,SSUB,T,A;                                    41091600
LABEL    XIT;                                                           41091700
         BOOLEAN RD1;                                                   41091800
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%41091900
    PROCEDURE EXCHNG(P1,P2,ID1X,ID2X,LIT1,LIT2,T,I);                    41092000
         VALUE P1,P2,ID1X,ID2X,LIT1,LIT2,T,I;                           41092100
         REAL ID1X,ID2X,T,I;                                            41092200
         BOOLEAN LIT1,LIT2;                                             41092300
         INTEGER P1,P2;                                                 41092400
              % * * * PREPARES FOR DIVIDE * * * * * * * * * * * * * * * 41092500
    BEGIN                                                               41092600
         BOOLEAN X;                                                     41092700
         X ~ T=1;            % TRUE IF ID1X AND ID2X HAVE BEEN EXCHANGED41092800
         IF LIT2 THEN                                                   41092900
    BEGIN                                                               41093000
         SQ ~ Q;                                                        41093100
         PUSHOVER(ACCUM[0],0,EDITABLE[P2],0,EDITABLE[T].SIZEF+10);      41093200
         Q ~ ACCUM[0];                                                  41093300
         NMLTRL(FALSE,0);                                               41093400
         Q ~ SQ;                                                        41093500
    END ELSE                                                            41093600
    BEGIN                                                               41093700
         IF IF2[ID2X].SUBF!0 THEN MAC2(STOSM,2-REAL(X));                41093800
         MACRO(VALDM,ID2X,REAL(BOO)+2);                                 41093900
    END;                                                                41094000
         IF LIT1 THEN                                                   41094100
    BEGIN                                                               41094200
         SQ ~ Q;                                                        41094300
         PUSHOVER(ACCUM[0],0,EDITABLE[P1],0,EDITABLE[I].SIZEF+10);      41094400
         Q ~ ACCUM[0];                                                  41094500
         NMLTRL(FALSE,0);                                               41094600
         Q ~ SQ;                                                        41094700
    END ELSE                                                            41094800
    BEGIN                                                               41094900
         IF IF2[ID1X].SUBF!0 THEN MAC2(STOSM,1+REAL(X));                41095000
         MACRO(VALDM,ID1X,2);                                           41095100
    END;                                                                41095200
    END EXCHNG;                                                         41095300
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%41095400
    PROCEDURE DIVRF;                                                    41095500
    BEGIN     % * * * SETS UP DIVISION RECEIVING FIELDS * * * * * * * * 41095600
         BOOLEAN RND;                                                   41095700
         REAL      SGW2;                                                41095800
         REAL A;                                                        41095900
              OPERAND(IF FRMT1 THEN NUMDN ELSE NUMRF,IF FRMT1 THEN      41096000
                   NANDBV ELSE NAME);                                   41096100
              IF GW2.SUBF!0 AND NOT FRMT1 THEN MACRO(MKSMM,0,2);% VOID  41096150
              IF NOT FRMT1 THEN MAXOPSIZE(GW2) ELSE SGW2~GW2;           41096200
              STEPP;                                                    41096300
              RND~RNDD;                                                 41096400
              IF ENDOFSTATEMENT OR KEY=ON OR KEY=SIZE OR KEY=SEMI THEN  41096500
         BEGIN                                                          41096600
              SMICHK;                                                   41096700
              SZRS;                                                     41096800
              IF NOT FRMT1 THEN                       % GIVING - MULT RF41096900
         BEGIN                                                          41097000
              IF INT THEN EXCHNG(P1,P2,ID1X,ID2X,LIT1,LIT2,11,1) ELSE   41097100
                   EXCHNG(P2,P1,ID2X,ID1X,LIT2,LIT1,1,11);              41097200
              MAC2(OPSZM,OPRNDSZ&OPRNDSCL[17:33:15]&  % SET UP SCALING  41097300
                   REAL(FUNNYDP)[16:47:1]);                             41097400
              MAC2(MATH,DIVD);                                          41097500
              MACRO(IF SZR THEN SZERM ELSE STO9M,4,REAL(RND));          41097600
         END  ELSE                                                      41097700
         BEGIN                                        % INTO - MULT RF  41097800
              MAC2(OPSZM,SGW2.SZF&SGW2[26:18:6]&SGW2[16:08:1]);         41097900
              IF LIT1 THEN                                              41098000
         BEGIN                                                          41098100
         SQ ~ Q;                                                        41098150
              PUSHOVER(ACCUM[0],0,EDITABLE[0],0,EDITABLE[1].SIZEF+10);  41098200
              Q~ACCUM[0];                                               41098300
         NMLTRL(FALSE,0);                                               41098400
         Q ~ SQ;                                                        41098450
         END  ELSE                                                      41098500
         BEGIN                                                          41098600
              IF IF2[ID1X].SUBF!0 THEN MAC2(STOSM,1);                   41098700
              MACRO(VALDM,ID1X,2)                                       41098800
         END;                                                           41098900
              MAC2(STO9M,5);                                            41099000
              MAC2(MATH,DIVD);                                          41099100
              MACRO(IF SZR THEN SZERM ELSE STO9M,0,REAL(RND));          41099200
         END                                                            41099300
         END  ELSE                                                      41099400
         BEGIN                                                          41099500
              CMACHK;                                                   41099600
              DIVRF;                                                    41099700
              IF NOT FRMT1 THEN                                         41099800
         BEGIN                                                          41099900
              MACRO(VALDM,0,4);                       % RECALL RESULT   41100000
              MACRO(IF SZR THEN SZERM ELSE STO9M,0,REAL(RND))           41100100
         END  ELSE                                                      41100200
         BEGIN                                                          41100300
              MACRO(VALDM,0,4);                       % RECALL DIVISOR  41100400
              MAC2(OPSZM,SGW2.SZF&SGW2[26:18:6]&SGW2[16:08:1]);         41100500
              MAC2(MATH,DIVD);                                          41100600
              MACRO(IF SZR THEN SZERM ELSE STO9M,0,REAL(RND));          41100700
         END                                                            41100800
         END                                                            41100900
    END  DIVRF;                                                         41101000
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%41101100
         MACRO(SZRFM,1,0);                                              41101200
         MAC2(SCALM,1);                                                 41101300
         MONITORS ~ MONITR;                                             41101400
         RND ~ FUNNYDP ~ FALSE;                                         41101500
         OPRNDSZ~OPRNDSCL~0;                                            41101600
         STEPP;                                                         41101700
         IF KEY=ZEROV THEN                                              41101800
    BEGIN                                                               41101900
         Q.SCF ~ ITGRV;                                                 41102000
         ACCUM[1] ~ 0 & 1 SIZEFF;                                       41102100
    END;                                                                41102200
         IF LIT1~(Q.SCF=ITGRV OR Q.SCF=NUMV)                            41102300
              THEN PUSHOVER(EDITABLE,0,ACCUM[0],0,ACCUM[1].SIZEF+10)    41102400
         ELSE                                                           41102500
    BEGIN                                                               41102600
         MACRO(STOSM,1,1);                                              41102700
         OPERAND(NUMDN,SBONLY);                                         41102800
         ID1X ~ GIX;                                                    41102900
    END;                                                                41103000
         IF NOT ((INT ~ DNSCAN = INTO) OR KEY = BYV) THEN ERRM(108);    41103100
         STEPP;                                                         41103200
         IF KEY=ZEROV THEN                                              41103300
    BEGIN                                                               41103400
         Q.SCF ~ ITGRV;                                                 41103500
         ACCUM[1] ~ 0 & 1 SIZEFF;                                       41103600
    END;                                                                41103700
         IF LIT2~(Q.SCF=ITGRV OR Q.SCF=NUMV)                            41103800
              THEN PUSHOVER(EDITABLE[10],0,ACCUM,0,ACCUM[1].SIZEF+10)   41103900
         ELSE                                                           41104000
    BEGIN                                                               41104100
         MACRO(STOSM,2,1);                                              41104200
         OPERAND(NUMDN,SBONLY);                                         41104300
         ID2X ~ GIX;                                                    41104400
    END;                                                                41104500
         MACRO(STOSM,0,1);             % RESET STORSUB                  41104600
         IF BOO~FRMT1~(DNSCAN!GIVING AND INT) THEN                      41104700
    BEGIN     % * * * FORMAT 1 * * *                                    41104800
         IF LIT2 THEN ERRM(165);                                        41104900
         MAXOPSIZE(IF2[ID2X]);                                          41105000
         RD1 ~ RNDD;                                                    41105100
         CMACHK;                                                        41105200
         IF ENDOFSTATEMENT OR KEY=ON OR KEY=SIZE OR KEY=SEMI THEN       41105300
    BEGIN                                                               41105400
         SMICHK;                                                        41105500
         EXCHNG(P1,P2,ID1X,ID2X,LIT1,LIT2,11,1);                        41105600
         MAC2(OPSZM,OPRNDSZ&OPRNDSCL[17:33:15]&REAL(FUNNYDP)[16:47:1]); 41105700
         SZRS;                                                          41105800
         MAC2(MATH,DIVD);                                               41105900
         MACRO(IF SZR THEN SZERM ELSE STO9M,0,REAL(RD1));               41106000
         SZRL;                                                          41106100
         GO TO XIT                                                      41106200
    END;                                                                41106300
         IF IF2[ID2X].SUBF!0 THEN MACRO(STOSM,2,6); % UNDO STORSUB      41106350
         MACRO(VALDM,ID2X,3);                         % FIRST RF        41106400
              CMACHK;                                                   41106500
              DIVRF;                                                    41106600
         MACRO(VALDM,0,4);                            % RECALL DIVISOR  41106700
         MAC2(OPSZM,(T~IF2[ID2X]).SZF&T[26:18:6]&T[16:08:1]);           41106800
         SZRS;                                                          41106900
         MAC2(MATH,DIVD);                                               41107000
         MACRO(IF SZR THEN SZERM ELSE STO9M,0,REAL(RD1));               41107100
         SZRL;                                                          41107200
         GO TO XIT                                                      41107300
    END  ELSE                                                           41107400
    BEGIN     % * * * GIVING * * *                                      41107500
         IF KEY ! GIVING THEN ERRM(107);                                41107600
         STEPP;                                                         41107700
         OPERAND(NUMRF,NAME);                                           41107800
         MAXOPSIZE(GW2);                                                41107900
         STEPP;                                                         41108000
         RD1 ~ RNDD;                                                    41108100
         CMACHK;                                                        41108200
         IF ENDOFSTATEMENT OR KEY=ON OR KEY=SIZE OR KEY=SEMI THEN       41108300
    BEGIN                                                               41108400
         SMICHK;                                                        41108500
         IF INT THEN EXCHNG(P1,P2,ID1X,ID2X,LIT1,LIT2,11,1) ELSE        41108600
         EXCHNG(P2,P1,ID2X,ID1X,LIT2,LIT1,1,11);                        41108700
         MAC2(OPSZM,OPRNDSZ&OPRNDSCL[17:33:15]&REAL(FUNNYDP)[16:47:1]); 41108800
         SZRS;                                                          41108900
         MAC2(MATH,DIVD);                                               41109000
         RANDEX(RD1);                                                   41109100
         SZRL;                                                          41109200
         GO TO XIT                                                      41109300
    END  ELSE                                                           41109400
         IF KEY=REMAINDER THEN                                          41109500
    BEGIN                                                               41109600
         IF INT THEN EXCHNG(P1,P2,ID1X,ID2X,LIT1,LIT2,11,1) ELSE        41109700
              EXCHNG(P2,P1,ID2X,ID1X,LIT2,LIT1,1,11);                   41109800
         MAC2(OPSZM,OPRNDSZ&OPRNDSCL[17:33:15]&REAL(FUNNYDP)[16:47:1]); 41109900
         MAC2(DEFPM,T ~ NXBR);  % SAVE 3 SYLLABLE FOR POSSIBLE          41110000
                                % ON SIZE ERROR CELL CLEAR              41110100
         MACRO(MKSMM,0,2);                                    % VOID MKS41110150
         MAC1(RMNDR);                                                   41110200
         STEPP;                                                         41110300
         OPERAND(NUMRF,NAME);                                           41110400
         STEPS;                                                         41110500
         MACRO(IF SZR~SZRR THEN SZERM ELSE STO9M,2,0);                  41110600
         MACRO(SZRSM,T,REAL(SZR));                                      41110700
         RANDEX(RD1);                                                   41110800
         SZRL;                                                          41110900
         GO TO XIT                                                      41111000
    END  ELSE                                                           41111100
    BEGIN     % * * * GIVING OPTION WITH MULTIPLE RECEIVING FIELDS * * *41111200
         MACRO(MKSMM,0,2);                                    % VOID MKS41111240
         NOMKS ~ TRUE;                                                  41111250
         DIVRF;                                                         41111300
         NOMKS ~ FALSE;                                                 41111350
         MACRO(VALDM,0,4);                                              41111400
         MACRO(IF SZR THEN SZERM ELSE STO9M,0,REAL(RD1));               41111500
         SZRL;                                                          41111550
    END                                                                 41111600
    END;                                                                41111700
    XIT:                                                                41111800
         SZRB;                                                          41111900
         FUNNYDP~MONITORS~FALSE;                                        41112000
         MAC1(SCALM);                                                   41112100
         MACRO(SZRFM,0,1);                                              41112200
         MONITORS ~ FALSE;                                              41112300
         OPRNDSZ~OPRNDSCL~0                                             41112400
END DIVIDEP;                                                            41112500
         BOOLEAN RD1;                                                   41112600
% * * * * * * * * * PROCEDURE BRANCHING STUFF * * * * * * * * * * * * * 42000000
BOOLEAN PROCEDURE LBCHK(Q1,Q2,IFX);                                     42000100
    VALUE Q1,Q2; REAL Q1,Q2,IFX;                                        42000200
BEGIN    COMMENT * * * CHECKS IF LABEL HAS OCCURRED AND IS QUALIFIED    42000300
              CORRECTLY;                                                42000400
         LABEL XIT;                                                     42000500
         REAL DIX,SV,T,DIY;                                             42000600
         IF (LBCHK ~ Q1=0) THEN GO TO XIT;                              42000700
         IFX ~ 0;                                                       42000800
         IF (DIX ~ DICT[Q1.IR,Q1.IC].NXIF) = 0 THEN GO TO XIT;          42000900
         IF Q2 = 0 THEN                                                 42001000
    BEGIN                                                               42001100
         LBCHK ~ TRUE;                                                  42001200
         IFX ~ DIX;                                                     42001300
         GO TO XIT;                                                     42001400
    END;                                                                42001500
         IF (DIY ~ DICT[Q2.IR,Q2.IC].NXIF) = 0 THEN GO TO XIT;          42001600
         SV ~ ACCUM[0];                                                 42001700
         STK[0] ~ DIX;                                                  42001800
         STK[1] ~ DIY;                                                  42001900
         IF ( T ~ QUALCHECK(0,0,1)) ! 1 THEN                            42002000
          IF T = 0 THEN ERR(48) ELSE ERR(49);                           42002100
         IFX ~ Q.NXIF;                                                  42002200
         LBCHK ~ TRUE;                                                  42002300
         Q~ACCUM[0]~SV;                                                 42002400
         XIT:                                                           42002500
    END LBCHK;                                                          42002600
REAL PROCEDURE LABELSCAN;                                               42002700
BEGIN    COMMENT * * * SCANS A LABEL AND RETURNS ITS DICTIONARY INDEX   42002800
              AND THAT OF ITS QUALIFIER;                                42002900
         DEFINE A = PTMP#,                                              42003000
                B = BTMP#;                                              42003100
         LABEL CMN,ERROR,XIT;                                           42003200
         A ~ 0; B ~ FALSE;                                              42003300
    CMN: IF KEY = LITV AND Q.SCF = ITGRV AND Q.LSGF = 0 THEN            42003400
    BEGIN                                                               42003500
         IF NOT DICTSRCH(ACCUM) THEN ACCUM[0].SCF ~ PNV;                42003600
         KEY ~ IDV;                                                     42003700
    END  ELSE IF KEY ! IDV THEN GO TO ERROR;                            42003800
         IF ACCUM[0].NXF = 0 THEN SCRAMBLEIT;                           42003900
         Q~ACCUM[0];                                                    42004000
         IF T ~ Q.SCF ! PNV THEN                                        42004100
         IF T = UNKID THEN                                              42004200
         DRCT[(T:=Q.NXF)].SCF:=PNV ELSE                                 42004300
           GO TO ERROR;                                                 42004400
         IF B THEN                                                      42004500
    BEGIN                                                               42004600
         A.SNL ~ Q.NXF;                                                 42004700
         STEPS;                                                         42004800
         GO TO XIT                                                      42004900
    END  ELSE                                                           42005000
    BEGIN                                                               42005100
         A.SCOPE ~ Q.NXF;                                               42005200
         IF (B ~ NXKEY = OFV OR NXKEY = INV) THEN                       42005300
          BEGIN STEPS; STEPS; GO TO CMN END;                            42005400
         STEPS;                                                         42005500
         GO TO XIT                                                      42005600
    END;                                                                42005700
    ERROR:                                                              42005800
         ERR(110); STEPS;                                               42005900
    XIT:                                                                42006000
         LABELSCAN ~ A;                                                 42006100
END LABELSCAN;                                                          42006200
PROCEDURE ALTERP;   COMMENT ALTER VERB;                                 42006300
    BEGIN     COMMENT * * *                                             42006400
              ALTER PROCEDURE-NAME TO [PROCEED TO] PROCEDURE-NAME ... ; 42006500
         REAL  PN1A,PN2A,PN1B,PN2B;                                     42006600
         DEFINE T  = PTMP #,                                            42006700
                CN = PTMP2#;                                            42006800
         LABEL LOP;                                                     42006900
         DECTOG ~ TRUE;                                                 42007000
         STEPS;                                                         42007100
    LOP: T~LABELSCAN;                                                   42007200
         PN1A ~ T.SCOPE;                                                42007300
         PN1B ~ T.SNL;                                                  42007400
         IF KEY ! TOV THEN ERR(0) ELSE STEPS;                           42007500
         IF KEY = PROCEED THEN STEPS;                                   42007600
         IF KEY = TOV THEN STEPS;                                       42007700
         T ~ LABELSCAN;                                                 42007800
         PN2A ~ T. SCOPE    ;                                           42007900
         PN2B ~ T.SNL;                                                  42008000
         MACRO(ALTRM,PN1A,PN1B);                                        42008100
         MACRO(XXXXM,PN2A,PN2B);                                        42008200
         IF LBCHK(PN1A,PN1B,CN) THEN IF3[CN].ALSF ~ 1; % ALREADY SEEN   42008300
         IF LBCHK(PN2A,PN2B,CN) THEN IF0[CN].PRF ~ 1;  % ALREADY SEEN   42008400
         MACRO(ALTGM,PN1A,PN1B);                                        42008500
         MACRO(XXXXM,PN2A,PN2B);                                        42008600
         CMCK;                                                          42008700
         IF NOT ENDOFSTATEMENT THEN GO TO LOP;                          42008800
         DECTOG ~ FALSE;                                                42008900
    END ALTERP;                                                         42009000
PROCEDURE CONDITIONALSTMT;                                              42009100
COMMENT THIS ROUTINE COMPILES   <STATE> <REST>  WHERE                   42009200
      <STATE> ~ <STATEMENT> / <NEXT SENTENCE>                           42009300
      <REST > ~ <ELSE> <STATE> / < . >                                  42009400
    ROUTINE IS ENTERED WITH A BOOLEAN AT THE TOP OF STACK;              42009500
    BEGIN                                                               42009600
         REAL A;                                                        42009700
      LABEL DONE,NONGO1,NONGO2;                                         42009800
      BOOLEAN C,D;                                                      42009900
      DEFINE UPIT = UNBR[UNBX ~ UNBX + 1]#,                             42010000
             MACF = [24:12]#, TOMACF = 24:36:12#,                       42010100
             DEFPF = [36:12]#, BUMPTX = BPTX ~ BPTX + 1#;               42010200
DEFINE   GETAWAY(BRMAC) =                                               42010300
BEGIN MACRO(DEFPM,BUMPTX,0);                                            42010400
      UPIT ~ BPTX&BRMAC[TOMACF]                                         42010500
         END #;                                                         42010600
BOOLEAN PROCEDURE GOAWAY;                                               42010700
BEGIN BOOLEAN D;                                                        42010800
         LABEL DL;                                                      42010900
      D ~ KEY = IFV;                                                    42011000
         IF KEY=DEPENDING THEN                                          42011100
    BEGIN                    % FINISH COMPILING GO TO DEPENDING         42011200
         JUNK ~ REAL(GOP(FALSE,0));                                     42011300
         IF KEY=ELSEV OR KEY=PERIOD THEN GO TO DL;                      42011400
    END;                                                                42011500
      DO STATEMENT UNTIL KEY = ELSEV OR KEY = PERIOD;                   42011600
    DL:                                                                 42011700
      IF KEY = PERIOD THEN GOAWAY ~ TRUE                                42011800
                      ELSE IF  D THEN ELSE GETAWAY(BRUPM)               42011900
END GOAWAY;                                                             42012000
         IF IFTOG THEN BEGIN MACRO(MATH,SRS,0); IFTOG ~ FALSE; END;     42012100
              % CAUSES BACKSPACING OVER BOOLEAN LINKS (IF STATEMENT)    42012200
IF KEY = GOV THEN                                                       42012300
BEGIN IF GOP(TRUE,BRTLM) THEN GO TO NONGO1;  % TRUE IF GO TO DEPENDING  42012400
                                             % PARTIALLY COMPILED       42012500
      IF KEY = PERIOD THEN GO TO DONE                                   42012600
END ELSE                                                                42012700
IF KEY = NEXT THEN                                                      42012800
BEGIN IF STEPS = SENTENCE THEN STEPS ELSE ERR(0);                       42012900
      IF KEY = PERIOD THEN                                              42013000
    BEGIN                                                               42013100
         MACRO(DELMM,1,0);                            % DONT TOUCH PSX  42013200
            GO TO DONE                                                  42013300
      END;                                                              42013400
         IF KEY ! ELSEV THEN ERR(109);                                  42013500
      D ~ TRUE                                                          42013600
END ELSE                                                                42013700
NONGO1:                                                                 42013800
BEGIN MACRO(DEFPM,A ~ BUMPTX,0);                                        42013900
      IF GOAWAY THEN BEGIN MACRO(BRFPM,A,0);  GO TO DONE END;           42014000
      C ~ TRUE                                                          42014100
END;                                                                    42014200
IF STEPS = GOV THEN                                                     42014300
BEGIN IF C THEN MACRO(BRFPM,A,0);                                       42014400
      IF GOP(TRUE,IF D THEN BRFLM ELSE BUNLM) THEN GO TO NONGO2;        42014500
      IF KEY = PERIOD THEN                                              42014600
   DONE:    WHILE UNBX > 0 DO                                           42014700
            BEGIN MACRO((A ~ UNBR[UNBX]).MACF,A.DEFPF,0);               42014800
                  UNBX ~ UNBX - 1                                       42014900
            END ELSE IF D THEN GETAWAY(BRUPM)                           42015000
END ELSE                                                                42015100
IF KEY = NEXT THEN                                                      42015200
BEGIN IF STEPS = SENTENCE THEN STEPS ELSE ERR(0);                       42015300
         IF C THEN UPIT~A&BRFPM[TOMACF] ELSE IF D THEN MACRO(DELMM,1,0);42015400
      IF KEY = PERIOD THEN GO TO DONE;                                  42015500
      GETAWAY(BRUPM)                                                    42015600
END ELSE                                                                42015700
NONGO2:                                                                 42015800
BEGIN IF C THEN MACRO(BRFPM,A,0) ELSE IF D THEN GETAWAY(BRTPM);         42015900
      IF GOAWAY THEN GO TO DONE                                         42016000
END                                                                     42016100
END CONDITIONALSTMT;                                                    42016200
PROCEDURE EXITP;                                                        42016300
BEGIN    COMMENT * * *                                                  42016400
    SYNTAX:                                                             42016500
         FORMAT 1 -                                                     42016600
              EXIT.     % STANDARD COBOL EXIT PARAGRAPH                 42016700
              EXIT PROGRAM   % NOT IMPLIMENTED                          42016800
         FORMAT 2 -                                                     42016900
              EXIT HERE % BURROUGHS EXTENSION TO EXIT A PERFORM         42017000
                        % IN THE MIDDLE OF A PARAGRAPH                  42017100
         ;                                                              42017200
         LABEL LEAF;                                                    42017300
         IF SCTRL = HEREV THEN MACRO(XTHRM,0,0)                         42017400
    ELSE IF KEY = PROGRAM THEN ERR(113)                                 42017500
    ELSE BEGIN                                                          42017600
         IF PARINFO=0 OR KEY!PERIOD OR NOT(MARGINA OR EOFTOG) THEN      42017700
              BEGIN ERR(180);ERRECOV END;                               42017800
         IF IF0[PARINFO].SNLF = 1 THEN ERR(181);                        42017900
         IF0[PARINFO].EXTF ~ 1;                                         42018000
         GO TO LEAF;                                                    42018100
    END;                                                                42018200
         STEPS;                                                         42018300
    LEAF:                                                               42018400
END EXITP;                                                              42018500
BOOLEAN PROCEDURE GOP(FLG,MCRO);    % HANDLES LABEL GO TO               42018600
    VALUE FLG,MCRO; BOOLEAN FLG; REAL MCRO;                             42018700
BEGIN    COMMENT * * *                                                  42018800
    SYNTAX:                                                             42018900
         FORMAT 1 -                                                     42019000
              GO  [TO] [PROCEDURE-NAME]                                 42019100
         FORMAT 2 -                                                     42019200
              GO  [TO] PROCEDURE-NAME [, PROCEDURE-NAME] ...            42019300
              DEPENDING ON (IDENTIFIER OR FORMULA)                      42019400
    ;                                                                   42019500
         LABEL DEP,XIT;                                                 42019600
         DEFINE X = TG[11]#;                                            42019700
         DECTOG ~ TRUE;                                                 42019800
         IF KEY=DEPENDING THEN GO TO DEP  % COMING FROM CONDITIONALSTMT 42019900
              ELSE X ~ 0;                                               42020000
         IF SCTRL = TOV THEN KEY ~ SCTRL;                               42020100
         WHILE KEY = LABELID DO                                         42020200
    BEGIN                                                               42020300
         BR[X~X+1] ~ LABELSCAN;                                         42020400
         IF KEY = COMMA THEN KEY ~ SCTRL;                               42020500
    END;                                                                42020600
         DECTOG ~ FALSE;                                                42020700
         IF X { 1 THEN                                                  42020800
    BEGIN                                                               42020900
         IF PARINFO = 0 OR NOT MARGINA OR KEY ! PERIOD THEN             42021000
    BEGIN     COMMENT WAS NOT ONLY STATEMENT IN PARAGRAPH;              42021100
         IF X =0 THEN ERR(110)                                          42021200
          ELSE MACRO(MCRO,BR[1].SCOPE,BR[1].SNL);                       42021300
    END  ELSE                                                           42021400
    BEGIN                                                               42021500
         IF0[PARINFO].CALF ~ 1;                                         42021600
         IF X =0 THEN                                                   42021700
    BEGIN     COMMENT CAN ONLY BE ALTERED;                              42021800
         IF0[PARINFO].PRF ~ 1;                                          42021900
         IF3[PARINFO].ALSF ~ 1;                                         42022000
         MACRO(ALGOM,PARINFO,1);                                        42022100
    END                                                                 42022200
         ELSE                                                           42022300
    BEGIN     COMMENT MAY BE ALTERED;                                   42022400
         MACRO(ALGOM,PARINFO,0);                                        42022500
         MACRO(XXXXM,BR[1].SCOPE,BR[1].SNL);                            42022600
    END                                                                 42022700
    END                                                                 42022800
    END ELSE                                                            42022900
    BEGIN                                                               42023000
         IF GOP ~ FLG THEN GO TO XIT;   % EXIT TO CONDITIONALSTMT       42023100
         IF KEY !DEPENDING THEN ERR(0);                                 42023200
    DEP:                                                                42023300
         IF DNSCAN = ON THEN STEPP;                                     42023400
         ARITHEXP;                                                      42023500
         MACRO(SWCH, X, 0);                                             42023600
         FOR I ~ 1 STEP 1 UNTIL X DO                                    42023700
         MACRO(BUNLM,BR[I].SCOPE,BR[I].SNL);                            42023800
    END;                                                                42023900
    XIT:                                                                42024000
END GOP;                                                                42024100
PROCEDURE IFP;                                                          42024200
BEGIN KEY ~ DNSCAN;                                                     42024300
         IFTOG ~ TRUE;                                                  42024400
         MAC2(IFMMM,1);                                                 42024500
      IF EXPRESSION(TRUE) } 0 THEN ERR(145);                            42024600
         SEMICHK;                                                       42024700
         IF KEY = THENV THEN STEPS ELSE SEMICHK;                        42024800
      CONDITIONALSTMT                                                   42024900
         ; IFTOG ~ FALSE;                                               42025000
         MAC1(IFMMM);                                                   42025100
END IFP;                                                                42025200
PROCEDURE PERFORMP;                                                     42025300
BEGIN    COMMENT * * *                                                  42025400
    SYNTAX:                                                             42025500
         FORMAT 1:                                                      42025600
              PERFORM PROCEDURE-NAME [THRU PROCEDURE-NAME]              42025700
         FORMAT 2:                                                      42025800
              PERFORM PROCEDURE-NAME [THRU PROCEDURE-NAME]              42025900
                   (IDENTIFIER OR INTEGER) TIMES                        42026000
         FORMAT 3:                                                      42026100
              PERFORM PROCEDURE-NAME [THRU PROCEDURE-NAME] UNTIL        42026200
                   CONDITION                                            42026300
         FORMAT 4:                                                      42026400
              PERFORM PROCEDURE-NAME [THRU PROCEDURE-NAME]              42026500
                   VARYING (INDEX-NAME OR IDENTIFIER)                   42026600
                   FROM (INDEX-NAME OR IDENTIFIER OR FORMULA OR LITERAL)42026700
                   BY   (IDENTIFIER OR FORMULA OR LITERAL)              42026800
                   UNTIL CONDITION                                      42026900
              [    AFTER   (INDEX-NAME OR IDENTIFIER)                   42027000
                   FROM (INDEX-NAME OR IDENTIFIER OR FORMULA OR LITERAL)42027100
                   BY   (IDENTIFIER OR FORMULA OR LITERAL)              42027200
                   UNTIL CONDITION                                      42027300
                   [AFTER ... ] ]                                       42027400
         SEMANTICS:                                                     42027500
              1. SYNTAX EXTENDED TO PERMIT FORMULAS, EXCEPT IN THE CASE 42027600
                   WHERE THE CONTROLLED VARIABLE IS AN INDEX-NAME;      42027700
         LABEL VRY,UNT,XIT,LOP,HR,CMN;                                  42027800
         REAL T,PN1A,PN1B,PN2A,PN2B,CN;                                 42027900
         DEFINE SIMPLE = 0#;                                            42028000
         BOOLEAN INDXNM,B;                                              42028100
         KEY ~ SCTRL;                                                   42028200
         T ~ LABELSCAN;                                                 42028300
         PN1A ~ T.SCOPE;                                                42028400
         PN1B ~ T.SNL;                                                  42028500
         IF KEY = THRUV THEN                                            42028600
    BEGIN                                                               42028700
         KEY ~ SCTRL;                                                   42028800
         T ~ LABELSCAN;                                                 42028900
         PN2A ~ T.SCOPE;                                                42029000
         PN2B ~ T.SNL;                                                  42029100
    END;                                                                42029200
         IF (INDXNM ~ LBCHK(PN1A,PN1B,CN)) THEN                         42029300
    BEGIN                                                               42029400
         IF0[CN].PRF ~ 1;                                               42029500
         IF4[IF4[CN].SILKF].SPERF ~ 1;                                  42029600
    END;                                                                42029700
         MACRO(MHPWM,PN1A,PN1B);                                        42029800
         IF PN2A ! 0 THEN                                               42029900
    BEGIN                                                               42030000
         IF LBCHK(PN2A,PN2B,CN)                                         42030100
              THEN IF0[CN].TPF ~  1;                                    42030200
         MACRO(PFTMM,PN2A,PN2B);                                        42030300
    END  ELSE                                                           42030400
    BEGIN                                                               42030500
         IF INDXNM THEN IF0[CN].TPF ~ 1;                                42030600
         MACRO(PFTMM,PN1A,PN1B);                                        42030700
    END;                                                                42030750
         CMACHK;                                                        42030800
         IF KEY = VARYING THEN GO TO VRY;                               42030900
         IF KEY = UNTILV THEN GO TO UNT;                                42031000
         IF KEY ! LITV AND KEY ! IDV THEN                               42031100
    BEGIN     COMMENT * * * FORMAT 1 (SIMPLE)* * * * * * * * * * * * * ;42031200
         MACRO(PFRMM,SIMPLE,0);                                         42031300
         MACRO(XXXXM,PN2A,PN2B);                                        42031400
         MACRO(XXXXM,PN1A,PN1B);                                        42031500
         GO TO XIT;                                                     42031600
    END;                                                                42031700
         COMMENT * * * FORMAT 2 (TIMES) * * * * * * * * * * * * * * * *;42031800
         MACRO(PFRMM,TIMES,0);                                          42031900
         ARITHEXP;                                                      42032000
         IF KEY ! TIMES THEN ERR(119) ELSE STEPS;                       42032100
         MACRO(XXXXM,PN2A,PN2B);                                        42032200
         MACRO(XXXXM,PN1A,PN1B);                                        42032300
         GO TO XIT;                                                     42032400
         COMMENT * * * FORMAT 3 (UNTIL) * * * * * * * * * * * * * * * *;42032500
    UNT:                                                                42032600
         MACRO(PFRMM,UNTILV,0);                                         42032700
         STEPP;                                                         42032800
         IF EXPRESSION(TRUE) } 0 THEN ERR(147);                         42032900
         MACRO(XXXXM,PN2A,PN2B);                                        42033000
         MACRO(XXXXM,PN1A,PN1B);                                        42033100
         GO TO XIT;                                                     42033200
         COMMENT * * * FORMAT 4 (VARYING) * * * * * * * * * * * * * * *;42033300
    VRY:                                                                42033400
         MACRO(PFRMM,VARYING,0);                                        42033500
    LOP:                                                                42033600
         IF DNSCAN ! IDV THEN ERR(75);                                  42033700
         IF Q.SCF = IXN THEN                                            42033800
    BEGIN                                                               42033900
         MACRO(XXXXM,Q.NXIF,Q.SCF);                                     42034000
         STEPS;                                                         42034100
    END  ELSE                                                           42034200
    BEGIN                                                               42034300
         IF (T ~ IF2[Q.NXIF]) < 0                                       42034400
         OR T.CLF ! NM THEN ERR(164);                                   42034500
         IF T.USF = CMP1 THEN                                           42034600
    BEGIN                                                               42034700
         MACRO(XXXXM,Q.NXIF,CMP1);                                      42034800
         STEPS;                                                         42034900
    END  ELSE                                                           42035000
    BEGIN                                                               42035100
         MACRO(XXXXM,Q.NXIF,0);                                         42035200
         OPERAND(BOOLEAN(18),IF (B~IF2[Q.NXIF].SUBF!0) THEN SBONLY      42035300
                             ELSE NAME);                                42035400
         IF B THEN                                                      42035500
    BEGIN                                                               42035600
         MACRO(ISUBJ,0,2);                                              42035700
         MACRO(NAMDM,GIX,0);                                            42035800
    END;                                                                42035900
         STEPS;                                                         42036000
         MACRO(XXXXM,0,0);                                              42036100
    END;                                                                42036200
    END;                                                                42036300
              % ***** FROM                                              42036400
         IF KEY ! FROM THEN ERR(106) ELSE STEPP;                        42036500
         IF Q.SCF = IXN                                                 42036600
         THEN BEGIN MACRO(XXXXM,Q.NXIF,Q.SCF); STEPP END                42036700
         ELSE ARITHEXP;                                                 42036800
              % ****** BY                                               42036900
         IF KEY ! BYV THEN ERR(72);STEPS;                               42037000
         ARITHEXP;                                                      42037100
              % ***** UNTIL                                             42037200
         IF KEY ! UNTILV THEN ERR(120) ELSE STEPP;                      42037300
         IF EXPRESSION(TRUE) } 0 THEN ERR(147);                         42037400
              % ***** AFTER (MAY BE)                                    42037500
         IF KEY = AFTER                                                 42037600
         THEN BEGIN MACRO(XXXXM,AFTER,0); GO TO LOP END                 42037700
         ELSE MACRO(XXXXM,0,0);                                         42037800
         MACRO(XXXXM,PN2A,PN2B);                                        42037900
         MACRO(XXXXM,PN1A,PN1B);                                        42038000
    XIT:                                                                42038100
         MACRO(XXXXM,EXIT,0);                                           42038200
END PERFORMP;                                                           42038300
PROCEDURE SEARCHP;                                                      42038400
BEGIN    % * * * SYNTAX * * * * * * * * * * * * * * * * * * * * * * * * 42038500
         %    FORMAT 1:                                                 42038600
         %         SEARCH IDENTIFIER [VARYING (INDEX-NAME/IDENTIFIER)]  42038700
         %              [; AT END IMPERATIVE-STATEMENT]                 42038800
         %              ; WHEN CONDITION (IMPERATIVE-STATEMENT/NEXT     42038900
         %                   SENTENCE ...                               42039000
         %    FORMAT 2:                                                 42039100
         %         SEARCH ALL IDENTIFIER                                42039200
         %              [; AT END IMPERATIVE-STATEMENT]                 42039300
         %              ; WHEN CONDITION (IMPERATIVE-STATEMENT/NEXT     42039400
         %                   SENTENCE ...                               42039500
         %%%%%%% SEMANTICS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%42039600
         %    1. MAX VALUE GETS CALCULATED EVERY TIME SO IT CAN BE     %42039700
         %         ALTERED BY JUDICIOUS USE OF OCCURS DEPENDING NAME.  %42039800
         %    2. IF THE INDEX-DATA-NAME (VARIED) IS SUBSCRIPTED, THE   %42039900
         %         SUBSCRIPT GETS CALCULATED EVERY TIME.               %42040000
         %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%42040100
     BOOLEAN   AINX,AIXDN,ASTF,BOO,FRST;                                42040200
DEFINE   ASUB = BUL[18]#,         EOSR = BUL[19]#,                      42040300
         SALL = BUL[20]#;                                               42040400
    BOOLEAN FINI;                                                       42040500
    LABEL     SAL,XIT;                                                  42040600
    REAL   SUBL,WHENL,AINDXNM,ATENDL,DNI,FAILL,INDXNM,KYRINDX,          42040700
              T,TESTL,SGIX,W;                                           42040800
    REAL CHECKID;                                                       42040900
         % * * * START * * * * * * * * * * * * * * * * * * * * * * * * *42041000
         SRCHTOG~TRUE;                                %USED IN STATEMENT42041100
         IF SALL ~ DNSCAN=ALL THEN STEPS;                               42041200
         CHECKID~IF Q.SCF!ITM OR (T~IF2[(DNI~Q.NXIF)]).USF=IXDN THEN 0  42041300
              ELSE IF T.SUBF=0 THEN 101 ELSE       % SUBSCRIPTS REQD    42041400
              IF IF1[DNI].OCCF=0 THEN 171 ELSE     % OCCURS CLSE REQD   42041500
              IF INDXNM~(T~IF5[DNI]).INXRL=0 THEN  172  % INDEXED BY REQ42041600
              ELSE IF NXKEY=LEFTPAREN THEN 102 ELSE % ILLEGAL SUBSCRIPT 42041700
              IF SALL AND KYRINDX~T.KEYRL=0 THEN 174 % KEY IS CLSE REQD 42041800
              ELSE -1;                                                  42041900
         IF T ~ CHECKID}0 THEN ERRM(T);                                 42042000
         IF SCTRL = VARYING THEN                                        42042100
    BEGIN     % * * * VARYING * * *                                     42042200
         STEPP;                                                         42042300
         IF NOT ASTF~Q.SCF!IXN THEN                   % INDEX-NAME      42042400
              IF NOT AINX~INXR[AINDXNM~Q.NXIF].DNIX!DNI                 42042500
                   THEN INDXNM~AINDXNM ELSE           % OF SAME TABLE   42042600
         ELSE                                                           42042700
    BEGIN                                             % DATA-NAME       42042800
         IF Q.SCF=ITM AND IF2[Q.NXIF].SUBF!0 THEN     % SUBSCRIPTED     42042900
    BEGIN                                                               42043000
         MACRO(DEFPM,TESTL~NXBR,0);                                     42043100
         MACRO(STSBM,SUBL~NXBR,0);                                      42043200
         OPERAND(SETRF,NANDBV);                                         42043300
         MACRO(INCIM,GIX,4);                                            42043400
         MACRO(BRUPM,TESTL,0)                                           42043500
    END  ELSE                                                           42043600
         OPERAND(SETRF,SBONLY);                                         42043700
         SGIX ~ GIX;                                                    42043800
         IF GW2.FSZF!0 THEN ERR(13);                  % MUST BE INTEGER 42043900
         AIXDN~GW2.USF=IXDN;                                            42044000
         ASUB~GW2.SUBF!0                                                42044100
    END;                                                                42044200
         STEPS                                                          42044300
    END  VARYING STUFF;                                                 42044400
         IF NOT ASUB THEN MACRO(STSBM,TESTL~NXBR,0);  % USUALLY "BRUN"HR42044500
         MACRO(INCIM,DNI,0);                          % MAX OCCURS VALUE42044600
         MACRO(VALDM,INDXNM,0);                       % INDEX-NAME VALUE42044700
         MAC2(BOOLM,GREQ);                            % IS B } A        42044800
         MACRO(DEFPM,FAILL~NXBR,0);                   % "BRTR"          42044900
         IF FINI ~ ATEND THEN                                           42045000
    BEGIN                                                               42045100
         IF KEY=NEXT THEN IF SCTRL!SENTENCE THEN ERR(0) ELSE ELSE       42045200
    BEGIN                                                               42045300
         DO STATEMENT UNTIL (EOSR~(KEY=PERIOD OR KEY=ELSEV)) OR         42045400
              KEY=SEMI OR KEY=WHEN;                                     42045500
         IF EOSR THEN ERR(173);             % WHEN PHRASE REQD          42045600
    END;                                                                42045700
%        IF SALL THEN MACRO(STAGM,INDEX,0);                             42045800
         MACRO(DEFPM,ATENDL~NXBR,0);                                    42045900
         MACRO(BRTPM,FAILL,0)                                           42046000
    END;                                                                42046100
         T~BPTX;                                                        42046200
         DO                                                             42046300
    BEGIN     % * * * WHEN * * *                                        42046400
         SEMICHK;                                                       42046500
         IF NOT FRST AND NOT FRST~KEY=WHEN THEN                         42046600
              BEGIN ERR(173);GO TO XIT END;           % WHEN PHRASE REQD42046700
         STEPP;                                                         42046800
         IF EXPRESSION(TRUE) } 0 THEN ERR(73);        % ILLGL EXPRESSION42046900
         MACRO(DEFPM,WHENL~NXBR,0);                   % "BRFL"          42047000
         IF KEY=NEXT THEN IF SCTRL!SENTENCE THEN ERR(0) ELSE STEPS ELSE 42047100
         DO STATEMENT UNTIL KEY=PERIOD OR KEY=ELSEV OR KEY=SEMI OR      42047200
              KEY=WHEN;                                                 42047300
         MACRO(DEFPM,W~NXBR,0);                       % BRANCH POINT    42047400
         MACRO(BRFPM,WHENL,0)                                           42047500
    END  WHEN UNTIL KEY=PERIOD OR KEY=ELSEV;                            42047600
         % * * * INCREMENT INDEX-NAME * * *                             42047700
         MACRO(INCIM,INDXNM,1);                       % INCREMENT IXN   42047800
         IF AINX THEN MACRO(INCIM,AINDXNM,2) ELSE     % AND ALTERNATE   42047900
         IF ASTF THEN                                 % OR DATA-NAME    42048000
              IF ASUB THEN MACRO(BRUPM,0,SUBL) ELSE                     42048100
              MACRO(INCIM,SGIX,3);                                      42048200
         IF NOT ASUB THEN MACRO(BRUPM,0,TESTL);                         42048300
         IF FINI THEN MACRO(BRUPM,ATENDL,0)ELSE MACRO(BRFPM,FAILL,0);   42048400
         WHILE T~T+2 { W DO MACRO(BRUPM,T,0);                           42048500
         GO TO XIT;                                                     42048600
         % * * * FORMAT 2  * * * * * * * * * * * * * * * * * * * * * * *42048700
    SAL:                                                                42048800
         ERR(113);                                                      42048900
         ERRECOV;                                                       42049000
    XIT:                                                                42049100
         SRCHTOG~FALSE                                                  42049200
END SEARCHP;                                                            42049300
PROCEDURE STOPP;   COMMENT STOP LITERAL OR STOP RUN;                    42049400
    BEGIN                                                               42049500
DEFINE P2 = PTMP#,                                                      42049600
       CHR= PTMP2#;                                                     42049700
         IF SCTRL = LITV THEN                                           42049800
    BEGIN                                                               42049900
         IF Q.SCF=ITGRV THEN MACRO(STOPM,1,ICVI(FALSE)) ELSE            42050000
         IF Q.SCF=STRNGV THEN                                           42050100
    BEGIN                                                               42050200
         P2 ~ "       ";                                                42050300
         PUSHOVER(P2,3,ACCUM[1],2,IF T1 ~ (T~ACCUM[1].SIZEF)>5 THEN 5   42050400
                  ELSE T);                                              42050500
         MAC2(STOPM,P2);                                                42050600
    END ELSE IF (CHR ~ IF KEY=ZEROV THEN "0" ELSE IF KEY=QUOTE THEN """ 42050700
                 ELSE IF (KEY=HIGHV OR KEY=UPPERB) THEN "9"             42050800
                 ELSE IF (KEY=LOWV                                      42050900
                     OR KEY=SPACEV) THEN " " ELSE -1) ! -1 THEN         42051000
    BEGIN                                                               42051100
         P2 ~ "       " & CHR [42:42:6];                                42051200
    END;                                                                42051300
         STEPS;                                                         42051400
    END  ELSE                                                           42051500
         IF KEY = RUN THEN                                              42051600
    BEGIN                                                               42051700
         MACRO(STOPM,0,EXIT);                                           42051800
         STEPS;                                                         42051900
    END  ELSE                                                           42052000
         ERR(0);                                                        42052100
    END STOPP;                                                          42052200
%M**************  S O R T    S T U F F   *******************************43000000
PROCEDURE RELEASEP;                                                     43000100
     BEGIN                                                              43000200
         DEFINE  T = PTMP#;                                             43000300
         IF DNSCAN !IDV OR (T1~IF4[(T~Q.NXIF)].FLLNK)=0 OR IF0[T].LVLF!143000400
         THEN ERR(207)                                                  43000500
         ELSE                                                           43000600
         IF IF0[T1].SCF ! SDV THEN ERR(216);                            43000700
         IF SCTRL = FROM THEN                                           43000800
    BEGIN                                                               43000900
         MAC1(MKSMM);                                                   43001000
         MACRO(NAMDM,T,0);                                              43001100
         STEPP;                                                         43001200
         PUTANAME;                                                      43001300
         MACRO(STOXM,0,1);                                              43001400
         STEPS;                                                         43001500
    END;                                                                43001600
         MACRO(RLMCO,T,0);                                              43001700
    END RELEASEP;                                                       43001800
PROCEDURE RETURNP;                                                      43001900
    BEGIN                                                               43002000
         DEFINE  T  = PTMP #;                                           43002100
         IF SCTRL ! IDV OR Q.SCF ! SDV THEN ERR(217);                   43002200
         T~Q.NXIF;                                                      43002300
         IF NXKEY=RECORD THEN STEPS;                                    43002350
         IF SCTRL = INTO THEN                                           43002400
    BEGIN                                                               43002500
         MACRO(RTMCO,T,1);                                              43002600
         STEPP;                                                         43002700
         PUTANAME;                                                      43002800
         MACRO(XXXXM,EXIT,EXIT);                                        43002900
         STEPS;                                                         43003000
    END  ELSE                                                           43003100
         MACRO(RTMCO,T,0);                                              43003200
         IF ATEND THEN                                                  43003300
    BEGIN                                                               43003400
         CONDITIONALSTMT;                                               43003500
    END  ELSE ERR(206);                                                 43003600
    END RETURNP;                                                        43003700
PROCEDURE SORTP(FLG);        % SORT AND MERGE SYNTAX                    43003800
    VALUE FLG; BOOLEAN FLG;   % FLG IS TRUE FOR MERGE                   43003900
    BEGIN                                                               43004000
         REAL SDI,DNI,KEYCNT,NT,RECL;                                   43004100
DEFINE   I = PTMP2#,    IPTOG = UL[30] #;                               43004200
         LABEL LOP, DNLOP,ERP,ERP1,ENDKEY,FLLOP,XIT,OUTPRO;             43004300
DEFINE   B    = BUL[21]# ;                                              43004400
BOOLEAN PROCEDURE SPROPRC;                                              43004500
    BEGIN                                                               43004600
         BOOLEAN SP;                                                    43004700
         REAL SSECT,ESECT,HD,HPSC;                                      43004800
         LABEL ERP,XIT,ERP235;                                          43004900
PROCEDURE INSPSNOF(INFS,INFX); VALUE INFS,INFX; REAL INFS,INFX;         43005000
    BEGIN                                                               43005100
         REAL I,T;                                                      43005200
         LABEL XIT;                                                     43005300
         T~IF0[INFX].SCOPE;                                             43005400
         PSCNT~PSCNT+1;                                                 43005500
         FOR I~INFS STEP IFSZ WHILE I < T DO                            43005600
         IF IF4[I].PSNOF = 0 THEN                                       43005700
         IF4[I].PSNOF~PSCNT                                             43005800
         ELSE                                                           43005900
    BEGIN                                                               43006000
         ERR(235); GO TO XIT;                                           43006100
    END;                                                                43006200
    XIT:                                                                43006300
    END INSPSNOF;                                                       43006400
         IF SCTRL ! PROCEDUREV THEN BEGIN ERR(0); GO TO ERP END;        43006500
         IF SCTRL = ISV THEN STEPS;                                     43006600
         IF   KEY!NLABELID THEN BEGIN ERR(84); GO TO ERP; END;          43006700
         SSECT~LABELSCAN.SCOPE;                                         43006800
         B~LBCHK(SSECT,0,I);                                            43006900
         HD~DRCT[SSECT];                                                43007000
         MACRO(XXXXM,IF IPTOG=1 THEN 3 ELSE 5,SSECT);                   43007100
         IF HD.[01:2]=0 AND HD.[08:2]=0 THEN                            43007200
    BEGIN                                                               43007300
         HD:=HD&1 SRTLDF&IPTOG SRTIDF&1 SOPDF;                          43007400
         IF NOT B THEN HD.FPSNOD~(FPSCNT~FPSCNT+1);                     43007500
    END  ELSE                                                           43007600
    BEGIN                                                               43007700
         IF HD.SRTLD!1 OR HD.SOPD!1 OR HD.SRTID!IPTOG                   43007800
         THEN GO TO ERP235;                                             43007900
         HPSC~HD.FPSNOD;                                                43008000
         SP ~ TRUE;                                                     43008100
    END;                                                                43008200
         IF KEY = THRUV THEN                                            43008300
    BEGIN                                                               43008400
         IF SCTRL!NLABELID THEN BEGIN ERR(84); GO TO ERP; END;          43008500
         DRCT[SSECT]~HD;                                                43008600
         SSECT~I;                                                       43008700
         ESECT~LABELSCAN.SCOPE;                                         43008800
         MACRO(XXXXM,7,ESECT);                                          43008900
         HD~DRCT[ESECT];                                                43009000
         IF SP THEN                                                     43009100
    BEGIN                                                               43009200
         IF HD.SRTLD!1 OR HD.EOPD!1 OR HD.SRTID!IPTOG                   43009300
         THEN GO TO ERP235;                                             43009400
         IF B THEN                                                      43009500
         IF IF4[SSECT].PSNOF ! IF4[HD.NXIF].PSNOF                       43009600
         THEN GO TO ERP235                                              43009700
         ELSE ELSE                                                      43009800
         IF HD.FPSNOD!HPSC THEN GO TO ERP235;                           43009900
         GO TO XIT;                                                     43010000
    END;                                                                43010100
         IF HD.[01:2]!0 OR HD.[08:2]!0 THEN GO TO ERP235;               43010200
         IF B EQV LBCHK(ESECT,0,I) THEN                                 43010300
    BEGIN                                                               43010400
     HD:=HD&1 SRTLDF&IPTOG SRTIDF&1 EOPDF;                              43010500
         IF B THEN                                                      43010600
         IF I>SSECT THEN INSPSNOF(SSECT,I)                              43010700
         ELSE ERR(230)                                                  43010800
         ELSE HD.FPSNOD~FPSCNT;                                         43010900
    END  ELSE ERR(231);                                                 43011000
         DRCT[ESECT]~HD;                                                43011100
         GO TO XIT;                                                     43011200
    END;                                                                43011300
         IF SP THEN                                                     43011400
         IF HD.EOPD!1 THEN GO TO ERP235                                 43011500
         ELSE GO TO XIT;                                                43011600
         HD.EOPD~1;                                                     43011700
         IF B THEN INSPSNOF(I,I);                                       43011800
         DRCT[SSECT]~HD;                                                43011900
         GO TO XIT;                                                     43012000
    ERP235:                                                             43012100
         ERR(235);                                                      43012200
         GO TO XIT;                                                     43012300
    ERP:                                                                43012400
         SPROPRC~TRUE;                                                  43012500
    XIT:                                                                43012600
    END SPROPRC;                                                        43012700
         IF SCTRL ! IDV OR Q.SCF ! SDV THEN ERR(217);                   43012800
         SDI ~ Q.NXIF;                                                  43012900
         RECL ~ IF1[SDI].DCRS;                                          43013000
         IF FLG THEN                                                    43013100
         IF FIB[Q.FIBF,4].FILTYF ! MRG THEN ERR(177)                    43013200
         ELSE ELSE                                                      43013300
         IF (T~FIB[Q.FIBF,4].FILTYF)=DTS OR T=TPS THEN                  43013400
         ELSE ERR(209);                                                 43013500
         KEYCNT ~ 0;                                                    43013600
         STEPS;                                                         43013700
         MACRO(SPCNT,SDI,REAL(FLG));                                    43013800
    LOP:                                                                43013900
         IF KEY = ON THEN STEPS;                                        43014000
         IF NOT (KEY = DESCENDING OR (B ~ KEY = ASCENDING)) THEN        43014100
         GO TO ENDKEY;                                                  43014200
         MACRO(XXXXM,1,REAL(B));                                        43014300
         IF SCTRL =KEYS THEN STEPS;                                     43014400
    DNLOP:                                                              43014500
         I ~0;                                                          43014600
         IF KEY ! IDV THEN GO TO ERP;                                   43014700
         STK[0] ~ Q.NXIF;                                               43014800
         WHILE NXKEY = OFV OR NXKEY = INV DO                            43014900
    BEGIN                                                               43015000
         STEPS; STEPS;   % OFF ID AND IN OR OF                          43015100
         IF KEY ! IDV THEN GO TO ERP;                                   43015200
         STK[I~I+1] ~ Q.NXIF;                                           43015300
    END;                                                                43015400
         IF STK[I] ! SDI  % ADD SORT-FILE NAME AS LAST QUALIFIER        43015500
          THEN STK[I~I+1] ~ SDI;                                        43015600
         IF QUALCHECK(0,0,I) !1 THEN                                    43015700
          BEGIN ERR(218); GO TO ERP1; END;                              43015800
         IF IF2[(I~Q.NXIF)].SUBF ! 0 THEN ERR(219);                     43015900
         IF IF2[I].VARF ! 0 THEN ERR(94);                               43016000
         KEYCNT ~ KEYCNT + 1;                                           43016100
         MACRO(XXXXM,2,I);                                              43016200
         IF SCTRL = COMMA THEN BEGIN CMACHK; GO TO DNLOP END;           43016300
         IF KEY = IDV THEN GO TO DNLOP;                                 43016400
         GO TO LOP;                                                     43016500
    ENDKEY:                                                             43016600
         IF KEYCNT = 0 THEN ERR(220);                                   43016700
         IF KEY = INPUT THEN                                            43016800
    BEGIN                                                               43016900
         IF IPPCWX = 0 THEN IPPCWX ~ GETPRTLOC;                         43017000
         IPTOG~1;                                                       43017100
         IF FLG THEN ERR(221);      % MERGE CANNOT HAVE INPUT PROCEDURE 43017200
         IF SPROPRC THEN BEGIN IPTOG~0; GO TO ERP1 END;                 43017300
         IPTOG~0;                                                       43017400
    END  ELSE                                                           43017500
    BEGIN     % INPUT IS FILE                                           43017600
         IF KEY ! USING THEN GO TO ERP ELSE STEPS;                      43017700
         NT ~0;                                                         43017800
    FLLOP:                                                              43017900
         IF KEY !IDV                                                    43018000
         OR  Q.SCF ! FDV THEN BEGIN ERR(17); GO TO ERP1; END  ELSE      43018100
         IF IF1[Q.NXIF].DCRS ! RECL THEN ERR(153);                      43018200
         MACRO(XXXXM,4,Q.NXIF);                                         43018300
         NT ~ NT + 1;                                                   43018400
         IF SCTRL = COMMA THEN BEGIN CMACHK; GO TO FLLOP END;           43018500
         IF NOT (KEY=OUTPUT OR KEY=GIVING) THEN GO TO FLLOP;            43018600
         IF NT !1 AND NOT FLG THEN ERR(222);                            43018700
    END;                                                                43018800
    OUTPRO:   % OUTPUT FILE OR PROCEDURE                                43018900
         IF KEY = GIVING THEN                                           43019000
    BEGIN                                                               43019100
         IF SCTRL ! IDV                                                 43019200
         OR  Q.SCF ! FDV THEN BEGIN ERR(17); GO TO ERP1; END  ELSE      43019300
         IF IF1[Q.NXIF].DCRS ! RECL THEN ERR(153);                      43019400
         MACRO(XXXXM,6,Q.NXIF);                                         43019500
         STEPS;                                                         43019600
    END  ELSE                                                           43019700
    BEGIN     % OUTPUT PROCEDURE                                        43019800
         IF KEY ! OUTPUT THEN GO TO ERP;                                43019900
         IF OPPCWX = 0 THEN OPPCWX ~ GETPRTLOC;                         43020000
         IF SPROPRC THEN GO TO ERP1;                                    43020100
    END;                                                                43020200
         GO TO XIT;                                                     43020300
    ERP:                                                                43020400
         ERR(0);                                                        43020500
    ERP1:                                                               43020600
         IF SCTRL = PERIOD OR Q.SCF = STMTBEGIN THEN GO TO XIT;         43020700
         IF KEY = ON OR KEY = DESCENDING OR KEY = ASCENDING             43020800
          THEN GO TO LOP;                                               43020900
         IF KEY = USING OR KEY = INPUT THEN GO TO ENDKEY;               43021000
         IF KEY = GIVING OR KEY = OUTPUT THEN GO TO OUTPRO;             43021100
         GO TO ERP1;                                                    43021200
    XIT:                                                                43021300
         MACRO(XXXXM,0,EXIT);                                           43021400
    END SORTP;                                                          43021500
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%44000000
%                                                                      %44000100
%                            I/O STATEMENTS                            %44000200
%                                                                      %44000300
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%44000400
REAL     FIBX;                                                          44000500
DEFINE   FB[FB1] = FIB[FIBX,FB1]#,                                      44000600
         FILETYPE = FB[4].FILTYF#,                                      44000700
         BLOCKINGTYPE = FB[5].BLKF#,             % BLOCKING TECHNIQUE   44000800
         PRINTERCOM = (T~FILETYPE=LPO OR T=BUT OR T=LOT OR (T}BUD       44000900
                       AND T{LDT))#,                                    44001000
         SEQDEVICE =(PRINTERCOM OR T=MT OR T=CR OR T=CP OR T=DK)#;      44001100
PROCEDURE ACCEPTP;                                                      44001200
BEGIN    % * * * SYNTAX:                                                44001300
         %    ACCEPT DATA-NAME [FROM MNEMONIC-NAME/HARDWARE-NAME]       44001400
         % * * * SEMANTICS:                                             44001500
         %    1. MAXIMUM LENGTH IS                                      44001600
         %    2. "FROM" DISPLAY IS FROM A REMOTE TERMINAL               44001700
         %       ALL OTHERS ARE FROM THE SPO                            44001800
         % * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *44001900
         DEFINE  T  = PTMP #;                                           44002000
         STEPP;                                                         44002100
         PUTANAME;                                                      44002200
         T ~ IF DCOMM THEN 13 ELSE 16;                                  44002300
         IF SCTRL = FROM THEN                                           44002400
    BEGIN                                                               44002500
         STEPS;                                                         44002600
         IF Q.SCF ! HARDWARENAME OR KEY ! KEYBOARD AND KEY ! DISPLAYV   44002700
              THEN ERR(15);                      % ILLEGAL HARDWARE-NAME44002800
         T ~ IF KEY=DISPLAYV THEN 13 ELSE 16; % REMOTE ELSE SPO         44002900
         STEPS                                                          44003000
    END;                                                                44003100
         MACRO(IOMAC,0,T)                                               44003200
END ACCEPTP;                                                            44003300
PROCEDURE CLOSEP;                                                       44003400
BEGIN    % * * * SYNTAX:                                                44003500
         % 1. CLOSE FILE-NAME-1 [REEL] [WITH (CRUNCH/ LOCK/ NO REWIND/  44003600
         %                      [UNIT]        PURGE/ RELEASE)           44003700
         %        [, FILE-NAME-2 ...] ...                               44003800
         % 2. CLOSE HERE FILE-NAME-3 WITH NO REWIND                     44003900
         %       [, HERE FILE-NAME-4 ...] ... OR ABOVE                  44004000
         % * * * SEMANTICS:                                             44004100
         %                                                              44004200
         % 1. CRUNCH,PURGE,RELEASE ARE BURROUGHS EXTENSIONS             44004300
         % 2. CLOSE HERE IS EQUIVALENT TO THE COBOL-61 CONSTRUCT        44004400
         %    " CLOSE 1 FILE-NAME-3 WITH NO REWIND".                    44004500
         % * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *44004600
         BOOLEAN RL,HERE,WTH,CLREEL;                                    44004700
         LABEL   STRT,XIT;                                              44004800
         REAL    ACTN,FILQ,T;                                           44004900
         STEPS;                                                         44005000
STRT:                                                                   44005100
         IF HERE ~ KEY = HEREV THEN STEPS;                              44005200
    IF Q.SCF ! FDV THEN                % THEN NOT A FILE NAME           44005300
    BEGIN                                                               44005400
         ERR(17);                      % ILLEGAL FILE NAME              44005500
         GO TO XIT;                                                     44005600
    END;                                                                44005700
         FIBX ~ (FILQ ~ Q).FIBF;                                        44005800
         IF RL ~ (SCTRL=REEL OR KEY = UNIT) THEN                        44005900
    BEGIN                                                               44006000
         T ~ FILETYPE;                                                  44006100
         IF (CLREEL ~ KEY=REEL) THEN IF T!MT THEN ERR(205) ELSE ELSE    44006200
         IF KEY = UNIT THEN IF T ! DK THEN ERR(203);                    44006300
         STEPS;                                                         44006400
    END;                                                                44006500
         IF WTH ~ KEY = WITHV THEN STEPS;                               44006600
         IF KEY = CRUNCHV THEN                                          44006700
    BEGIN                                                               44006800
         IF CLREEL THEN ERR(211);                                       44006900
         ACTN ~ 18;                                                     44007000
         IF FILETYPE!DK OR FB[4].AMF=0 THEN ERR(211);                   44007100
         %  MUST BE DISK AND NOT RANDOM                                 44007200
         STEPS;                                                         44007300
    END ELSE                                                            44007400
         IF KEY=LOCKV THEN                                              44007500
    BEGIN                                                               44007600
         ACTN ~ 2;                                                      44007700
         IF FILETYPE=CR THEN ERR(211);                                  44007800
         STEPS;                                                         44007900
    END  ELSE                                                           44008000
         IF KEY=NO THEN                                                 44008100
    BEGIN                                                               44008200
         IF SCTRL ! REWINDV THEN ERR(0);                                44008300
         IF PRINTERCOM OR T=CR OR T=CP OR T=DK THEN ERR(211);           44008400
         ACTN ~ IF HERE THEN 17 ELSE 1;                                 44008500
         HERE ~ FALSE;                                                  44008600
         STEPS;                                                         44008700
    END  ELSE                                                           44008800
         IF KEY=PURGEV THEN                                             44008900
    BEGIN                                                               44009000
         IF CLREEL THEN ERR(211);                                       44009100
         ACTN ~ 4;                                                      44009200
         IF PRINTERCOM OR T=CR OR T=CP OR T=PP OR T=PR THEN ERR(211);   44009300
         STEPS;                                                         44009400
    END ELSE                                                            44009500
         IF KEY=RELEASEV AND WTH THEN                                   44009600
    BEGIN                                                               44009700
         IF CLREEL THEN ERR(211);                                       44009800
         ACTN ~ 7;                                                      44009900
         STEPS;                                                         44010000
    END ELSE IF KEY!PERIOD AND KEY!COMMA AND Q.SCF!STMTBEGIN            44010100
              AND KEY!IDV THEN ERR(0);                                  44010200
         IF HERE THEN ERR(211);                                         44010300
         CMACHK;                                                        44010400
         MACRO(IOMAC,1,FILQ.NXIF);                                      44010500
         MACRO(XXXXM,REAL(RL),ACTN);                                    44010600
         IF KEY=IDV THEN GO TO STRT;                                    44010700
XIT:                                                                    44010800
END CLOSEP;                                                             44010900
PROCEDURE DISPLAYP;                                                     44011000
BEGIN    % * * * SYNTAX:                                                44011100
         %    DISPLAY (LITERAL-1/ IDENTIFIER-1)                         44011200
         %         [, LITERAL-2/ IDENTIFIER-2] ...                      44011300
         %         [UPON (MNEMONIC-NAME/ HARDWARE-NAME)]                44011400
         % * * * SEMANTICS:                                             44011500
         %    1. MAXIMUM LENGTH IS 176 CHARACTERS                       44011600
         %    2. "UPON" DISPLAY GOES TO REMOTE TERMINAL (COBOL61=REMOTE)44011700
         %       ALL OTHERS GO TO THE SPO                               44011800
         % * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *44011900
    REAL      RUNSUM;                                                   44012000
         STEPP;                                                         44012100
         MAC2(IOMAC,2);                                                 44012200
         IF KEY=UPON THEN ERR(75);                                      44012300
         WHILE KEY=LITV OR KEY=IDV OR Q.SCF=FIGURATIVE OR KEY=ALL OR    44012400
         Q.SCF=SPECIALREG DO                                            44012500
    BEGIN                                                               44012600
         IF KEY=ALL THEN ERR(69);                     % OPERAND EXPECTED44012700
         OPERAND(MOVESF,IF ((T~Q.SCF)=SPECIALREG OR T=FDV OR KEY=FILEV) 44012800
                OR (NOT((T~IF2[Q.NXIF]) < 0) AND T.CLF=NM AND T.SZF{18) 44012900
                THEN BVALUE ELSE NAME);                                 44013000
         IF RUNSUM~RUNSUM+(IF GTP=STRNGV OR GTP=ITGRV OR GTP=NUMV THEN  44013100
              ACCUM[1].SIZEF+REAL(GTP!STRNGV) ELSE IF GTP=IDV THEN      44013200
              IF1[GIX].LGHF ELSE 1) > 176 THEN ERR(213);                44013300
         STEPP;                                                         44013400
         MAC1(XXXXM);                                                   44013500
         CMACHK                                                         44013600
    END;                                                                44013700
         T ~ IF DCOMM THEN 11 ELSE 15;                                  44013800
         IF KEY = UPON THEN                                             44013900
    BEGIN                                                               44014000
         STEPS;                                                         44014100
         IF Q.SCF ! HARDWARENAME OR KEY ! KEYBOARD AND KEY ! DISPLAYV   44014200
              THEN ERR(15);                      % ILLEGAL HARDWARE-NAME44014300
         T ~ IF KEY=DISPLAYV THEN 11 ELSE 15; % REMOTE ELSE SPO         44014400
         STEPS                                                          44014500
    END;                                                                44014600
         MAC2(XXXXM,T)                                                  44014700
END DISPLAYP;                                                           44014800
PROCEDURE OPENP;                                                        44014900
BEGIN    % * * * SYNTAX:                                                44015000
         %    FORMAT 1:                                                 44015100
         %         OPEN [INPUT FILE-NAME-1 [REVERSED/ WITH NO REWIND]..]44015200
         %              [OUTPUT FILE-NAME-2 [WITH NO REWIND]...]        44015300
         %    FORMAT 2:                                                 44015400
         %         OPEN I/O [REVERSED] FILE-NAME-3 ...                  44015500
         %    FORMAT 3:                                                 44015600
         %         OPEN INPUT/ OUTPUT FILE-NAME-4 REEL-NUMBER           44015700
         %              LITERAL/ DATA-NAME                              44015800
         % * * * SEMANTICS:                                             44015900
         %    1. FORMAT 4 DELETED AS UNNECESSARY (SET BY CLOSE).        44016000
         %    2. I/O REVERSED IS EXTENSION.                             44016100
         %    3. FORMAT 3 (& 4) IS B5500 EXTENSION.                     44016200
         % * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *44016300
    LABEL     CMN,STIO,STOI,STRT;                                       44016400
    LABEL     HR,THR;                                                   44016500
         REAL FLINFO,TYPE;                                              44016600
         DEFINE  T  = PTMP #,                                           44016700
                 I  = PTMP2#;                                           44016800
         STEPS;                                                         44016900
    STRT:                                                               44017000
         IF KEY=INPUT OR KEY=OUTPUT THEN                                44017100
    BEGIN                                                               44017200
         TYPE~REAL(KEY=OUTPUT)|4;                                       44017300
         STEPS;                                                         44017400
    STOI:                                                               44017500
         IF Q.SCF!FDV THEN ERR(17);                                     44017600
         MACRO(IOMAC,3,FLINFO~Q.NXIF);                                  44017700
         FIBX~IF0[FLINFO].FIBF;                                         44017800
         IF BLOCKINGTYPE=3 THEN                                         44017900
    BEGIN                                                  % TECH C     44018000
         T ~ IF4[FLINFO].RCLNK;                                         44018200
         I~IF3[T].SZDF;                                                 44018300
         WHILE T~IF0[T].SCOPE<IF0[FLINFO].SCOPE DO                      44018400
              IF IF3[T].SZDF!I THEN BEGIN ERR(212); GO TO THR; END;     44018500
    END;                                                                44018600
    THR:                                                                44018700
         STEPS;                                                         44018800
         I~TYPE+1;                                                      44018900
         IF PRINTERCOM AND NOT TYPE = 4 THEN ERR(15);                   44019000
         IF KEY=REELNUMBER THEN                                         44019100
    BEGIN                                                               44019200
         STEPS;                                                         44019300
         IF FILETYPE!MT THEN ERR(15);                                   44019400
         MACRO(XXXXM,TYPE+1,1);                                         44019500
         PUTAVALUE;                                                     44019600
         IF GTP=NUMV OR GTP=ITM AND GW2.FSZF!0 THEN ERR(13);            44019700
         IF FILETYPE!MT THEN ERR(15);                                   44019800
         MAC1(XXXXM);                                                   44019900
         STEPS;                                                         44020000
         GO TO HR                                                       44020100
    END  ELSE                                                           44020200
         IF KEY=REVERSED THEN                                           44020300
    BEGIN                                                               44020400
         STEPS;                                                         44020500
         IF FILETYPE ! MT THEN ERR(205);                                44020600
         IF TYPE>3 THEN ERR(212);                % ILLEGAL OPEN ACTION  44020700
         I~2                                                            44020800
    END  ELSE                                                           44020900
    BEGIN                                                               44021000
         IF KEY=WITHV THEN                                              44021100
              IF SCTRL!NO THEN ERR(0) ELSE                              44021200
    CMN:           IF SCTRL!REWINDV THEN ERR(0) ELSE                    44021300
    BEGIN                                                               44021400
         STEPS;                                                         44021500
         IF FILETYPE!MT THEN ERR(15);                                   44021600
         I~3+TYPE                                                       44021700
    END  ELSE                                                           44021800
         IF KEY=NO THEN GO TO CMN                                       44021900
    END;                                                                44022000
         MAC2(XXXXM,I);                                                 44022100
    HR:                                                                 44022200
         CMACHK;                                                        44022300
         IF KEY=IDV THEN GO TO STOI                                     44022400
    END  ELSE                                                           44022500
         IF KEY = IO THEN                                               44022600
    BEGIN                                                               44022700
         STEPS;                                                         44022800
    STIO:                                                               44022900
         IF Q.SCF!FDV THEN ERR(17);                                     44023000
         MACRO(IOMAC,3,FLINFO~Q.NXIF);                                  44023100
         FIBX~IF0[FLINFO].FIBF;                                         44023200
         IF FILETYPE!DK THEN ERR(15);                                   44023300
         STEPS;                                                         44023400
         CMACHK;                                                        44023500
         I~8;                                                           44023600
         IF KEY = REVERSED THEN BEGIN ERR(212); STEPS; END;             44023700
         MAC2(XXXXM,I);                                                 44023800
         IF KEY=IDV THEN GO TO STIO                                     44023900
    END  ELSE                                                           44024000
         ERR(0);                                                        44024100
         IF KEY=INPUT OR KEY=OUTPUT OR KEY=IO THEN GO TO STRT           44024200
END OPENP;                                                              44024300
PROCEDURE READP;                                                        44024400
BEGIN    % * * * SYNTAX:                                                44024500
         %    FORMAT 1:                                                 44024600
         %         READ FILE-NAME RECORD [INTO IDENTIFIER]              44024700
         %              ; AT END IMPERATIVE-STATEMENT                   44024800
         %    FORMAT 2:                                                 44024900
         %         READ FILE-NAME RECORD [INTO IDENTIFIER]              44025000
         %              ; INVALID KEY IMPERATIVE-STATEMENT              44025100
         % * * * SEMANTICS:                                             44025200
         % * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *44025300
    BOOLEAN   INTOO;                                                    44025400
    LABEL     CMN,XIT;                                                  44025500
    REAL      FILEQ;                                                    44025600
    REAL      T;                                                        44025700
         STEPP;                                                         44025800
         IF Q.SCF!FDV THEN ERR(17);                                     44025900
         FILEQ ~ Q.NXIF;                                                44026000
         FIBX~Q.FIBF;                                                   44026100
         IF BOOLEAN(IF3[FILEQ].WREADF) THEN                             44026200
    BEGIN                                                               44026300
         ERR(206);                                                      44026400
         GO TO XIT;                                                     44026500
    END;                                                                44026600
         IF SCTRL=RECORD THEN STEPS;                                    44026700
         IF INTOO~KEY=INTO THEN                                         44026800
    BEGIN                                                               44026900
         STEPP;                                                         44027000
         PUTANAME;                                                      44027100
         IF IF3[IF4[FILEQ].RCLNK].BADDF=IF3[GIX].BADDF THEN ERR(206);   44027200
         STEPS;                                                         44028800
    END  INTO PHRASE;                                                   44029000
         IF ATEND THEN                                                  44029100
    BEGIN                                                               44029200
         IF T~FILETYPE=CR OR T=MT OR T=DK THEN ELSE ERR(15);            44029300
         IF T=DK AND FB[4].AMF=1 THEN ERR(206);                         44029400
    END  ELSE                                                           44029500
         IF KEY=INVALID THEN                                            44029600
    BEGIN                                                               44029700
         IF SCTRL=KEYS THEN STEPS;                                      44029800
         IF FILETYPE!DK THEN ERR(15) ELSE                               44029900
         IF FB[4].AMF!1 OR FB[19]=0 THEN ERR(206);                      44030000
    END  ELSE                                                           44030100
    BEGIN                                                               44030200
         ERR(0);                                                        44030300
         GO TO XIT                                                      44030400
    END;                                                                44030500
         MACRO(IOMAC,4+REAL(INTOO),FILEQ);                              44030600
         CONDITIONALSTMT;                                               44030700
    XIT:                                                                44030800
END READP;                                                              44030900
PROCEDURE SEEKP;                                                        44031000
BEGIN    % * * * SYNTAX:                                                44031100
         %    SEEK FILE-NAME RECORD                                     44031200
         % * * * SEMANTICS:                                             44031300
         %    1. A SEEK IS PERMITTED FOR A MASS STORAGE FILE IN THE     44031400
         %         SERIAL ACCESS MODE, AN EXTENSION.                    44031500
         % * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *44031600
         STEPS;                                                         44031700
         IF Q.SCF!FDV THEN ERR(17);                                     44031800
         FIBX~IF0[Q.NXIF].FIBF;                                         44031900
         IF FILETYPE!DK THEN ERR(15) ELSE                               44032000
         IF FB[19]=0 THEN ERR(226);                                     44032100
         MACRO(IOMAC,6,Q.NXIF);                                         44032200
         IF SCTRL=RECORD THEN STEPS                                     44032300
END SEEKP;                                                              44032400
PROCEDURE XSUSPENDP;                                                    44032500
BEGIN    % * * * SYNTAX:                                                44032600
         %    SUSPEND  FILE-NAME-1/REPORT-NAME-1 [LITERAL-1/IDENTIFIER1]44032700
         %         [, FILE-NAME-2/REPORT-NAME-2 [LITERAL-2/IDENTIFIER-2]44032800
         %         ...]                                                 44032900
         % * * * SEMANTICS:                                             44033000
         %    1.INTERFACE WITH DISPLAYS POORLY DEFINED (10/1/68).       44033100
         %    2. REPORT-NAME TO BE IMPLEMENTED LATER.                   44033200
         % * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *44033300
    BOOLEAN   FLG;                                                      44033400
    LABEL     STRT;                                                     44033500
    REAL      FILQ;                                                     44033600
         STEPS;                                                         44033700
    STRT:                                                               44033800
         IF Q.SCF!FDV THEN ERR(17);                                     44033900
         FILQ~Q.NXIF;                                                   44034000
         FIBX~IF0[Q.NXIF].FIBF;                                         44034100
         IF FILETYPE!DSP THEN ERR(15);                                  44034200
         STEPP;                                                         44034300
         CMACHK;                                                        44034400
         IF FLG~Q.SCF!FDV THEN                                          44034500
    BEGIN                                                               44034600
         IF KEY=ALL THEN ERR(69);                                       44034700
         OPERAND(MOVESF,NAME);                                          44034800
         STEPS;                                                         44034900
         CMACHK                                                         44035000
    END;                                                                44035100
         MACRO(IOMAC,7+REAL(FLG),FILQ);                                 44035200
         IF Q.SCF=FDV THEN GO TO STRT                                   44035300
END SUSPENDP;                                                           44035400
PROCEDURE WRITEP;                                                       44035500
BEGIN    % * * * SYNTAX:                                                44035600
         %    FORMAT 1:                                                 44035700
         %         WRITE RECORD-NAME [FROM IDENTIFIER]                  44035800
         %              [BEFORE/AFTER ADVANCING (IDENTIFIER LINES/      44035900
         %                   INTEGER LINES/CHANNEL INTEGER)]            44036000
         %              [; AT END-OF-PAGE/EOP IMPERATIVE-STATEMENT]     44036100
         %    FORMAT 2:                                                 44036200
         %         WRITE RECORD-NAME [FROM IDENTIFIER]                  44036300
         %              ; INVALID KEY IMPERATIVE-STATEMENT              44036400
         %    FORMAT 3:                                                 44036500
         %         WRITE BLOCK RECORD-NAME                              44036600
         %    FORMAT 4:                                                 44036700
         %         WRITE RECORD-NAME [FROM IDENTIFIER] TO ALTERNATE     44036800
         % * * * SEMANTICS:                                             44036900
         %    1. FORMATS 3 & 4 ARE EXTENSIONS                           44037000
         %    2. CHANNEL INTEGER SHOULD BE MNEMONIC-NAME BUT THIS HAS   44037100
         %         NOT BEEN IMPLEMENTED IN SPECIAL-NAMES YET.           44037200
         % * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *44037300
         BOOLEAN CARR,CHNL,FRUM,ALTCP;                                  44037400
    BOOLEAN   AFTAH,ENDOP,LINT;                                         44037500
    LABEL     XIT;                                                      44037600
    REAL      FILQ,T;                                                   44037700
         IF DNSCAN = BLOCK THEN                                         44037800
    BEGIN                                                               44037900
         IF DNSCAN!IDV OR FILQ~IF4[(T~Q.NXIF)].FLLNK=0 OR IF0[T].LVLF!1 44038000
              OR IF0[FILQ].SCF!FDV THEN ERR(207);% ILLEGAL RECORD-NAME  44038100
         IF IF3[FILQ].WREADF=0 THEN BEGIN ERR(224); GO TO XIT; END;     44038200
         MACRO(IOMAC,11,FILQ);                                          44038300
         FIBX ~ IF0[FILQ].FIBF;                                         44038350
         IF FILETYPE!MT THEN ERR(15);                                   44038400
    % RUN TIME ERROR (Q)                                                44038500
         STEPS;                                                         44038600
         GO TO XIT                                                      44038700
    END;                                                                44038800
         IF Q.SCF!ITM OR FILQ~IF4[(T~Q.NXIF)].FLLNK=0 OR IF0[T].LVLF!1  44038900
              OR IF0[FILQ].SCF!FDV THEN ERR(207);                       44039000
         FIBX~IF0[FILQ].FIBF;                                           44039100
         IF FRUM~SCTRL=FROM THEN                                        44039200
    BEGIN                                                               44039300
         STEPP;                                                         44039400
         OPERAND(MOVESF,NAME);                                          44039500
         IF IF3[GIX].BADDF=IF3[T].BADDF THEN ERR(224);% ILLGL WRITE ACTN44039600
         STEPS                                                          44039700
    END;                                                                44039800
         IF (ALTCP ~ (KEY=TOV OR KEY=ALTERNATE)) OR FILETYPE=CP THEN    44039900
    BEGIN                                                               44040000
         IF KEY=TOV THEN IF SCTRL!ALTERNATE THEN ERR(0);                44040100
         IF FILETYPE!CP THEN ERR(15);                                   44040200
         MACRO(IOMAC,10,IF FRUM THEN FILQ & 1 [32:47:1] ELSE FILQ);     44040300
         MACRO(XXXXM,2,0);                                              44040400
         MACRO(XXXXM,1,REAL(ALTCP));  % PLACE 1 OR 0 IN CHANNEL SLOT    44040500
         IF KEY=ALTERNATE THEN STEPS;                                   44040550
         GO TO XIT;                                                     44040600
    END;                                                                44040700
         SEMICHK;                                                       44040800
         IF KEY = INVALID THEN                                          44040900
    BEGIN                                                               44041000
         IF FILETYPE!DK THEN ERR(15) ELSE                               44041100
         IF FB[4].AMF=1 AND FB[19]=0 THEN ERR(224);                     44041200
              % RANDOM ACCESS WITH NO ACTUAL KEY SPECIFICATION          44041300
         IF SCTRL=KEYS THEN STEPS;                                      44041400
         MACRO(IOMAC,10,IF FRUM THEN FILQ& 1[32:47:1] ELSE FILQ);       44041500
         MACRO(XXXXM,0,1);                                              44041600
         CONDITIONALSTMT;                                               44041700
         GO TO XIT                                                      44041800
    END ELSE IF FILETYPE=DK THEN ERR(224);                              44041900
         IF CARR~(KEY=BEFORE OR KEY=AFTER) THEN                         44042000
    BEGIN                                                               44042100
         IF NOT(PRINTERCOM) THEN ERR(15);                               44042200
         AFTAH ~ KEY=AFTER;                                             44042300
         IF DNSCAN=ADVANCING THEN STEPP;                                44042400
         IF CHNL~KEY=CHANNEL THEN                                       44042500
    BEGIN                                                               44042600
         STEPS;                                                         44042700
         IF Q.SCF !ITGRV THEN ERR(13) ELSE                              44042800
              IF T ~ ICVI(FALSE)<1 OR T>12 THEN ERR(188) ELSE STEPS;    44042900
    END  ELSE                                                           44043000
    BEGIN                                                               44043100
         LINT ~ TRUE;                                                   44043200
         MACRO(IOMAC,10,IF FRUM THEN FILQ& 1[32:47:1] ELSE FILQ);       44043300
         PUTAVALUE;                                                     44043400
         IF NOT(GTP=LITV AND Q.ITF=0 OR GTP=ITM AND GW2.FSZF=0)         44043500
              THEN ERR(13);                                             44043600
         IF SCTRL=LINEV THEN STEPS                                      44043700
    END                                                                 44043800
    END;                                                                44043900
         IF ENDOP ~ (KEY=AT OR KEY=ENDPAGE) THEN                        44044000
    BEGIN                                                               44044100
         IF KEY=AT THEN IF SCTRL!ENDPAGE THEN ERR(0);                   44044200
         STEPS;                                                         44044300
         IF NOT(PRINTERCOM) THEN ERR(15);                               44044400
         IF NOT BOOLEAN(IF2[FILQ].PGF) THEN ERR(280);                   44044500
         IF FB[1]=0 THEN ERR(224);                                      44044600
    END;                                                                44044700
         IF NOT LINT THEN MACRO(IOMAC,9+REAL(CARR OR ENDOP),            44044800
              IF FRUM THEN FILQ& 1[32:47:1] ELSE FILQ);                 44044900
         IF CARR OR ENDOP THEN                                          44045000
    BEGIN                                                               44045100
         MACRO(XXXXM,1 + REAL(CARR),2|REAL(AFTAH)+REAL(ENDOP));         44045200
         IF CARR THEN MACRO(XXXXM,REAL(CHNL),T);                        44045300
         IF ENDOP THEN CONDITIONALSTMT;                                 44045400
    END;                                                                44045500
    XIT:                                                                44045600
END WRITEP;                                                             44045700
% * * * * * * * * * REPORT WRITER STUFF * * * * * * * * * * * * * * * * 45000000
PROCEDURE XGENERATEP;                                                   45000100
    BEGIN                                                               45000200
END GENERATEP;                                                          45000300
PROCEDURE XINITIATEP;                                                   45000400
BEGIN    COMMENT * * *                                                  45000500
              INITIATE (REPORT-NAME-1 [,REPORT-NAME-2] .../ALL) * * *   45000600
              TERMINATE(REPORT-NAME-1 [,REPORT-NAME-2] .../ ALL) * * *; 45000700
         STEPP;                                                         45000800
         IF KEY=ALL THEN STEPS ELSE                                     45000900
         IF KEY=IDV AND Q.SCF=RPN THEN                                  45001000
         DO                                                             45001100
    BEGIN                                                               45001200
         STEPP;                                                         45001300
         CMACHK                                                         45001400
    END UNTIL KEY!IDV OR Q.SCF!RPN                                      45001500
         ELSE ERR(215);                                                 45001600
END INITIATEP;                                                          45001700
% * * * * * * * * * SEPARATELY COMPILED PROCEDURE STUFF * * * * * * * * 46000000
PROCEDURE NOTIMPLEMENTED; FORWARD;                                      46000100
PROCEDURE CALL(VAR); VALUE VAR; INTEGER VAR;                            46000200
    BEGIN                                                               46000300
         LABEL XIT;                                                     46000400
         IF VAR = 0 THEN      % RUN PROGRAM NAME                        46000500
              IF SCTRL ! IDV OR Q.SCF ! PID THEN ERR(210)               46000600
    ELSE     ELSE                                                       46000700
         IF VAR = 1 THEN        % CALL                                  46000800
              IF NXKEY = SYSTEMV THEN        %CALL SYSTEM WITH DATA-NAME46000900
    BEGIN                                                               46001000
              STEPP;                                                    46001100
              IF SCTRL = WITHV THEN STEPP;                              46001200
              IF KEY ! IDV OR IF0[Q.NXIF].LVLF ! 1 THEN ERR(42);        46001300
    END ELSE BEGIN                                                      46001400
              NOTIMPLEMENTED;                                           46001500
              GO TO XIT;                                                46001600
    END ELSE                                                            46001700
         ERR(0);                                                        46001800
         MACRO(PROCM,VAR,Q.NXIF);                                       46001900
         STEPP;                                                         46002000
    XIT:                                                                46002100
END CALLP;                                                              46002200
% * * * * * * * * * DIAGNOSTIC STUFF * * * * * * * * * * * * * * * * * *47000000
BOOLEAN PROCEDURE GETPRINTFILE;                                         47000100
BEGIN    COMMENT * * * USED BY MONITORP AND DUMPP;                      47000200
    LABEL XIT;                                                          47000300
         DEFINE PRINTERTYPE = ((T~FIB[ACCUM[0].FIBF,4].FILTYF)=LPO      47000400
              OR T=BUT OR T=LOT OR (T}BUD AND T{LDT))#;                 47000500
         GETPRINTFILE~FALSE;                                            47000600
         IF SCTRL=PRINTER THEN                                          47000700
    BEGIN     COMMENT * * * OUTPUT GOES ON BACK UP DISK;                47000800
         FILL ACCUM[*] WITH 0,"#DIAGNO","STIC    ";                     47000900
         IF DICTSRCH(ACCUM) THEN                                        47001000
         IF ACCUM[0].SCF=FDV AND PRINTERTYPE THEN                       47001100
              ELSE BEGIN ERR(176);ERRECOV;GO TO XIT END                 47001200
         ELSE                                                           47001300
    BEGIN                                                               47001400
         SVXREFTOG ~ XREFTOG; XREFTOG ~ FALSE;                          47001450
         SCRAMBLEIT;                                                    47001500
         XREFTOG ~ SVXREFTOG;                                           47001550
         FCDEC(0,ACCUM[0].NXF,0,BUD,2,0,0,0,0)                          47001600
    END;                                                                47001700
    END  ELSE                                                           47001800
         IF Q.SCF=FDV AND PRINTERTYPE THEN ELSE BEGIN ERR(17); ERRECOV; 47001900
              GO TO XIT END;                                            47002000
         GETPRINTFILE~TRUE;                                             47002100
    XIT:                                                                47002200
END GETPRINTFILE;                                                       47002300
PROCEDURE DUMPP;                                                        47002400
BEGIN    COMMENT * * * DUMP IS A DIAGNOSTIC (A BURROUGHS EXTENSION).    47002500
              DUMP (FILE-NAME OR PRINTER) ( (DATA-NAME OR               47002600
                   PROCEDURE-NAME) ... ) PARAGRAPH-NAME : (DATA-NAME OR 47002700
                   LITERAL) , ...  .                                    47002800
              ;                                                         47002900
         REAL FIBX,I,R,T;                                               47003000
    LABEL XIT,BTM,LUP;                                                  47003100
         SMONITR~TRUE;                                                  47003200
         LSUB ~ 3;                                                      47003300
         IF NOT GETPRINTFILE THEN GO TO XIT;                            47003400
         FIBX~DICT[(T~ACCUM[0].NXF).IR,T.IC].FIBF;                      47003500
         FIB[FIBX,18].BUFSZF ~ 15; FIB[FIBX,18].MAXRS ~ 15;             47003600
         I ~ INFOENTER(T);                                              47003700
         IF0[I] ~ 0 & FIBX FIBFF & FDV SCFF;                            47003800
         IF1[I].LGHF ~ 120;                                             47003900
         IF3[I] ~ GETPRTLOC;                                            47004000
         IF3[I].DAYF ~ 1;                                               47004100
         MACRO(ADCM,I,0);                                               47004200
         IF4[I] ~ 0 & FIB[FIBX,6] [33:18:15] & I [18:33:15];            47004300
         IF DNSCAN!LEFTPAREN THEN ERR(140) ELSE STEPP;                  47004400
    LUP: MACRO(DUMPM,FIBX,0);                                           47004500
         DO                                                             47004600
    BEGIN     COMMENT * * * EXAMINE ITEMS IN DUMP LIST;                 47004700
         IF Q.SCF=ITM THEN                                              47004800
    BEGIN                                                               47004900
         IF (T~IF2[R~Q.NXIF]).SUBF!0 THEN                               47005000
              BEGIN ERR(178);GO TO BTM END;                             47005100
         IF T<0 THEN                                                    47005200
    BEGIN                                                               47005300
         T~IF0[R].SCOPE;                                                47005400
         FOR I~R STEP IFSZ WHILE I<T DO                                 47005500
         IF (R~IF2[I]).SUBF=0 AND R>0 AND IF0[I].LVLF!88 THEN           47005600
              MACRO(DUMPM,I,1);                                         47005700
    END  ELSE                                                           47005800
         IF IF0[R].LVLF!88 THEN MACRO(DUMPM,R,1) ELSE                   47005900
              BEGIN ERR(178);GO TO BTM END;                             47006000
    END  ELSE                                                           47006100
         IF Q.SCF=IXN THEN MACRO(DUMPM,Q.NXIF,2) ELSE                   47006200
         IF (T~Q.SCF)=UNKID OR T=ITGRV OR T=PNV THEN                    47006300
    BEGIN                                                               47006400
         T~LABELSCAN;                                                   47006500
         MACRO(CHKLM,T.SCOPE,T.SNL);                                    47006600
    END  ELSE                                                           47006700
         ERR(178);                                                      47006800
    BTM: STEPP;                                                         47006900
         CMACHK                                                         47007000
    END UNTIL KEY=RIGHTPAREN OR ENDOFSTATEMENT;                         47007100
         IF KEY!RIGHTPAREN THEN BEGIN ERR(68);GO TO XIT END;            47007200
         STEPP;                                                         47007300
         IF (T~Q.SCF)=UNKID OR T=ITGRV OR T=PNV THEN                    47007400
    BEGIN                                                               47007500
         T~LABELSCAN;                                                   47007600
         MACRO(CHKLM,T.SCOPE&1 [32:47:1],T.SNL);                        47007700
    END  ELSE  BEGIN ERR(83);ERRECOV;GO TO XIT END;                     47007800
         CMACHK;                                                        47007900
         IF KEY=IDV THEN                                                47008000
    BEGIN                                                               47008100
         IF (T~IF2[I~Q.NXIF]).CLF!NM OR T.FSZF!0 THEN ERR(13);          47008200
         MACRO(XXXXM,I,1);                                              47008300
    END ELSE                                                            47008400
    BEGIN                                                               47008500
         IF KEY!LITV OR ACCUM[0].SCF!ITGRV THEN ERR(13);                47008600
         MACRO(XXXXM,ICVI(FALSE),0);                                    47008700
    END;                                                                47008800
         STEPS;                                                         47008900
         CMACHK;                                                        47009000
         IF KEY=LEFTPAREN THEN BEGIN STEPP;GO TO LUP END;               47009100
    XIT:                                                                47009200
         IF KEY!PERIOD THEN ERR(81);                                    47009300
         SMONITR~FALSE                                                  47009400
END DUMPP;                                                              47009500
PROCEDURE MERRIMAC;   % AS IN ALGOL THE MERRIMAC WILL HANDLE THE MONITOR47009600
BEGIN    COMMENT * * * MONITOR IS A DIAGNOSTIC (A BURROUGHS EXTENSION)  47009700
              MONITOR (FILE-NAME OR PRINTER) ( (DATA-NAME OR            47009800
                   PROCEDURE-NAME) ... ) .                              47009900
              ;                                                         47010000
    REAL T,R,I;                                                         47010100
    BOOLEAN CHEC;                                                       47010200
    LABEL XIT,BTM;                                                      47010300
    LABEL CMCK;                                                         47010400
         SMONITR~TRUE;                                                  47010500
         LSUB ~ 3;                                                      47010600
         IF NOT GETPRINTFILE THEN GO TO XIT;                            47010700
         COMMENT * * * SET GLOBALS;                                     47010800
         MONITR~TRUE;                                                   47010900
         MONIFIL~DICT[(T~ACCUM[0].NXF).IR,T.IC].FIBF;                   47011000
         FIB[MONIFIL,18].BUFSZF ~ 15; FIB[MONIFIL,18].MAXRS ~ 15;       47011100
         I ~ INFOENTER(T);                                              47011200
         IF0[I] ~ 0 & MONIFIL FIBFF & FDV SCFF;                         47011300
         IF1[I].LGHF ~ 120;                                             47011400
         IF3[I] ~ GETPRTLOC;                                            47011500
         IF3[I].DAYF ~ 1;                                               47011600
         MACRO(ADCM,I,0);                                               47011700
         IF4[I] ~ 0 & FIB[MONIFIL,6] [33:18:15] & I [18:33:15];         47011800
         IF DNSCAN!LEFTPAREN THEN ERR(140) ELSE STEPP;                  47011900
         DO                                                             47012000
    BEGIN     COMMENT * * * EXAMINE ITEMS IN MONITOR LIST;              47012100
         IF Q.SCF=ITM THEN                                              47012200
    BEGIN                                                               47012300
         IF (T~IF2[R~Q.NXIF]).SUBF! 0 THEN                              47012400
              BEGIN ERR(178);GO TO BTM END;                             47012500
         IF T<0 THEN                                                    47012600
    BEGIN                                                               47012700
         T~IF0[R].SCOPE;                                                47012800
         I ~ R-IFSZ;                                                    47012900
         WHILE I ~ I+IFSZ<T DO IF0[I].MONI ~ REAL(IF0[I].LVLF!88);      47013000
    END  ELSE                                                           47013100
         IF0[R].MONI ~ 1                                                47013200
    END  ELSE                                                           47013300
         IF Q.SCF=IXN THEN DRCT[Q.NXF].MONI ~ 1 ELSE                    47013400
         IF Q.SCF=UNKID OR Q.SCF=ITGRV THEN                             47013500
    BEGIN                                                               47013600
         T~LABELSCAN;                                                   47013700
         MACRO(CHKLM,T.SCOPE,T.SNL);                                    47013800
         ;                                                              47013900
         GO TO CMCK;                                                    47014000
    END  ELSE                                                           47014100
         ERR(178);                                                      47014200
    BTM: STEPP;                                                         47014300
    CMCK:CMACHK;                                                        47014400
    END  UNTIL KEY=RIGHTPAREN OR ENDOFSTATEMENT;                        47014500
      XIT:                                                              47014600
         IF KEY!RIGHTPAREN THEN ERR(68) ELSE STEPS;                     47014700
         IF KEY!PERIOD THEN ERR(81);                                    47014800
         SMONITR~FALSE                                                  47014900
    END MERRIMAC THE SOUTH WILL RISE AGAIN;                             47015000
% * * * * * * * * * DECLARATIVE STUFF * * * * * * * * * * * * * * * * * 48000000
PROCEDURE USEP;                                                         48000100
    BEGIN                                                               48000200
         LABEL LBLOP,XIT,XITS,REPTOP,NOPD;                              48000300
         BOOLEAN BEGINTOG,ENDTOG,REELTOG,BEFORETOG,INPUTTOG,            48000400
                 OUTPUTTOG,IOTOG,FILETOG;                               48000500
         DEFINE FT(FT1) = FIB[FT1,4].FILTYF#;                           48000600
         STEPS;                                                         48000700
         IF KEY!USE THEN BEGIN ERR(82); GO TO NOPD; END;                48000800
         IF SCTRL=AFTER THEN                                            48000900
    BEGIN                                                               48001000
         IF SCTRL=STANDARD THEN STEPS;                                  48001100
         IF KEY!ERROR THEN GO TO LBLOP;                                 48001200
         IF SCTRL!PROCEDUREV THEN GO TO NOPD ELSE STEPS;                48001300
         IF KEY=ON THEN STEPS;                                          48001400
         IF (INPUTTOG ~ KEY=INPUT) OR (OUTPUTTOG ~ KEY=OUTPUT) OR       48001500
            (IOTOG ~ KEY=IO) THEN                                       48001600
    BEGIN                                                               48001700
         IF NOT IOTOG THEN                                              48001800
         IF PGUSE[T ~ 4+REAL(OUTPUTTOG)].BRR=0 THEN PGUSE[T].BRR~USEPRT 48001900
            ELSE ERR(-27)                                               48002000
         ELSE                                                           48002100
         IF PGUSE[4].ARR=0 THEN PGUSE[4].ARR ~ USEPRT ELSE ERR(-27);    48002200
         GO TO XITS;                                                    48002300
    END;                                                                48002400
         WHILE Q.SCF=FDV DO                                             48002500
    BEGIN                                                               48002600
         IF T~FIB[Q.FIBF,4].FILTYF = MT OR T=DK THEN IF FIB[Q.FIBF,15]=048002700
         THEN FIB[Q.FIBF,15].BF ~ USEPRT ELSE ERR(-27) ELSE ERR(-201);  48002800
         STEPS; CMACHK;                                                 48002900
    END;                                                                48003000
         IF KEY!PERIOD THEN ERR(-17);                                   48003100
         GO TO XIT;                                                     48003200
    END;                                                                48003300
         IF KEY=BEFORE THEN                                             48003400
    BEGIN                                                               48003500
         IF SCTRL=REPORTING THEN GO TO REPTOP;                          48003600
         IF KEY=STANDARD THEN STEPS;                                    48003700
         BEFORETOG ~ TRUE;                                              48003800
    LBLOP:                                                              48003900
         IF KEY=BEGINNING THEN BEGIN BEGINTOG ~ TRUE; STEPS; END        48004000
         ELSE                                                           48004100
         IF KEY=ENDING THEN BEGIN ENDTOG ~ TRUE; STEPS; END;            48004200
         IF KEY=REEL THEN BEGIN REELTOG ~ TRUE; STEPS; END              48004300
         ELSE                                                           48004400
         IF KEY=FILEV THEN BEGIN FILETOG ~ TRUE; STEPS; END;            48004500
         IF KEY=LABELV THEN STEPS ELSE GO TO NOPD;                      48004600
         IF KEY=PROCEDUREV THEN STEPS ELSE GO TO NOPD;                  48004700
         IF KEY=ON THEN STEPS;                                          48004800
         IF (INPUTTOG ~ KEY=INPUT) OR (OUTPUTTOG ~ KEY=OUTPUT) OR       48004900
            (IOTOG ~ KEY=IO) THEN                                       48005000
    BEGIN                                                               48005100
         IF NOT IOTOG THEN                                              48005200
    BEGIN                                                               48005300
         T ~ 2|REAL(OUTPUTTOG) + REAL(ENDTOG);                          48005400
         IF NOT REELTOG THEN                                            48005500
         IF BEFORETOG THEN                                              48005600
    BEGIN                                                               48005700
         IF PGUSE[T].BF=0 THEN PGUSE[T].BF ~ USEPRT ELSE ERR(-27);      48005800
         IF NOT(ENDTOG OR BEGINTOG) THEN                                48005900
         IF PGUSE[T+1].BF=0 THEN PGUSE[T+1].BF ~ USEPRT ELSE ERR(-27);  48006000
    END ELSE                                                            48006100
    BEGIN                                                               48006200
         IF PGUSE[T].AF=0 THEN PGUSE[T].AF ~ USEPRT ELSE ERR(-27);      48006300
         IF NOT(ENDTOG OR BEGINTOG) THEN                                48006400
         IF PGUSE[T+1].AF=0 THEN PGUSE[T+1].AF ~ USEPRT ELSE ERR(-27);  48006500
    END;                                                                48006600
         IF NOT FILETOG THEN                                            48006700
         IF BEFORETOG THEN                                              48006800
    BEGIN                                                               48006900
         IF PGUSE[T].BRR=0 THEN PGUSE[T].BRR ~ USEPRT ELSE ERR(-27);    48007000
         IF NOT(ENDTOG OR BEGINTOG) THEN                                48007100
         IF PGUSE[T+1].BRR=0 THEN PGUSE[T+1].BRR ~ USEPRT ELSE ERR(-27);48007200
    END ELSE                                                            48007300
    BEGIN                                                               48007400
         IF PGUSE[T].ARR=0 THEN PGUSE[T].ARR ~ USEPRT ELSE ERR(-27);    48007500
         IF PGUSE[T+1].ARR=0 THEN PGUSE[T+1].ARR ~ USEPRT ELSE ERR(-27);48007600
    END;                                                                48007700
    END                                                                 48007800
         ELSE                                                           48007900
    BEGIN                                                               48008000
         T ~ 4+REAL(ENDTOG);                                            48008100
         IF BEFORETOG THEN                                              48008200
    BEGIN                                                               48008300
         IF PGUSE[T].BF=0 THEN PGUSE[T].BF ~ USEPRT ELSE ERR(-27);      48008400
         IF NOT(ENDTOG OR BEGINTOG) THEN                                48008500
         IF PGUSE[T+1].BF=0 THEN PGUSE[T+1].BF ~ USEPRT ELSE ERR(-27);  48008600
    END ELSE                                                            48008700
    BEGIN                                                               48008800
         IF PGUSE[T].AF=0 THEN PGUSE[T].AF ~ USEPRT ELSE ERR(-27);      48008900
         IF NOT(ENDTOG OR BEGINTOG) THEN                                48009000
         IF PGUSE[T+1].AF=0 THEN PGUSE[T+1].AF ~ USEPRT ELSE ERR(-27);  48009100
    END;                                                                48009200
    END;                                                                48009300
         GO TO XITS;                                                    48009400
    END;                                                                48009500
         WHILE Q.SCF=FDV DO                                             48009600
    BEGIN                                                               48009700
         IF2[Q.NXIF].USPRF ~ 1;                                         48009800
         MACRO(USMVM,Q.NXIF,0);                                         48009900
         T1 ~ Q.FIBF;                                                   48010000
         IF BOOLEAN(FIB[T1,4].LBLF) THEN ERR(-204);                     48010100
         IF REELTOG THEN IF FIB[T1,4].FILTYF!MT THEN ERR(-205);         48010200
         T ~ 2|REAL(ENDTOG);                                            48010300
         IF NOT REELTOG THEN                                            48010400
         IF BEFORETOG THEN                                              48010500
    BEGIN                                                               48010600
         IF FIB[T1,T].BF=0 THEN FIB[T1,T].BF ~ USEPRT ELSE ERR(-27);    48010700
         IF NOT(ENDTOG OR BEGINTOG) THEN                                48010800
         IF FIB[T1,2].BF = 0 THEN FIB[T1,2].BF ~ USEPRT ELSE ERR(-27);  48010900
    END ELSE                                                            48011000
    BEGIN                                                               48011100
         IF FIB[T1,T].AF=0 THEN FIB[T1,T].AF ~ USEPRT ELSE ERR(-27);    48011200
         IF NOT(ENDTOG OR BEGINTOG) THEN                                48011300
         IF FIB[T1,2].AF = 0 THEN FIB[T1,2].AF ~ USEPRT ELSE ERR(-27);  48011400
    END;                                                                48011500
         IF NOT FILETOG THEN                                            48011600
         IF BEFORETOG THEN                                              48011700
    BEGIN                                                               48011800
         IF FIB[T1,T].BRR=0 THEN FIB[T1,T].BRR ~ USEPRT ELSE ERR(-27);  48011900
         IF NOT(ENDTOG OR BEGINTOG) THEN                                48012000
         IF FIB[T1,2].BRR= 0 THEN FIB[T1,2].BRR~ USEPRT ELSE ERR(-27);  48012100
    END ELSE                                                            48012200
    BEGIN                                                               48012300
         IF FIB[T1,T].ARR=0 THEN FIB[T1,T].ARR ~ USEPRT ELSE ERR(-27);  48012400
         IF NOT(ENDTOG OR BEGINTOG) THEN                                48012500
         IF FIB[T1,2].ARR= 0 THEN FIB[T1,2].ARR~ USEPRT ELSE ERR(-27);  48012600
    END;                                                                48012700
         STEPS; CMACHK;                                                 48012800
    END;                                                                48012900
         GO TO XIT;                                                     48013000
    END;                                                                48013100
         IF KEY=FORV THEN STEPS;                                        48013200
         IF KEY=RANDOMV THEN                                            48013300
    BEGIN                                                               48013400
         IF SCTRL=PROCESSING THEN STEPS;                                48013500
         GO TO XIT;                                                     48013600
    END;                                                                48013700
         GO TO NOPD;                                                    48013800
                                                                        48013900
    REPTOP:                                                             48014000
         STEPS;                                                         48014100
         IF Q.SCF=RPI AND IF0[Q.NXIF].LVLF=1 THEN GO TO XITS;           48014200
         GO TO XIT;                                                     48014300
    NOPD:                                                               48014400
         IF KEY=PERIOD THEN ERR(0);                                     48014500
         GO TO XIT;                                                     48014600
    XITS:                                                               48014700
         STEPS;                                                         48014800
    XIT:                                                                48014900
         IF KEY!PERIOD THEN                                             48015000
    BEGIN                                                               48015100
         ERR(0);                                                        48015200
         DO STEPS UNTIL KEY=PERIOD OR Q.SCF=STMTBEGIN;                  48015300
    END;                                                                48015400
    END USEP;                                                           48015500
PROCEDURE NOTIMPLEMENTED;    %*****TEMPORARY********                    48015600
BEGIN                                                                   48015700
         ERR(113);                                                      48015800
         DO KEY ~ SCTRL UNTIL KEY = PERIOD OR                           48015900
         Q.SCF = STMTBEGIN;                                             48016000
END NOTIMPLEMENTED;                                                     48016100
DEFINE                                                                  48016200
         FORGETP             = NOTIMPLEMENTED#,                         48016300
         CALLP               = CALL(1)#,                                48016400
         CANCELP             = NOTIMPLEMENTED#,                         48016500
         SUSPENDP            = NOTIMPLEMENTED#,                         48016600
         RUNP                = CALL(0)#,                                48016700
         WAITP               = NOTIMPLEMENTED#,                         48016800
         INITIATEP           = NOTIMPLEMENTED#,                         48016900
         INSPECTP            = NOTIMPLEMENTED#,                         48017000
         DISABLEP            = NOTIMPLEMENTED#,                         48017100
         ENABLEP             = NOTIMPLEMENTED#,                         48017200
         ENTERP              = NOTIMPLEMENTED#,                         48017300
         INITIALIZEP         = NOTIMPLEMENTED#,                         48017400
         RECEIVEP            = NOTIMPLEMENTED#,                         48017500
         SENDP               = NOTIMPLEMENTED#,                         48017600
         STRINGP             = NOTIMPLEMENTED#,                         48017700
         UNSTRINGP           = NOTIMPLEMENTED#,                         48017800
         GENERATEP           = NOTIMPLEMENTED#,                         48017900
         HOLDP               = NOTIMPLEMENTED#,                         48018000
         PROCESSP            = NOTIMPLEMENTED#,                         48018100
         DUMMY               = NOTIMPLEMENTED#;                         48018200
PROCEDURE STATEMENT;                                                    49000000
BEGIN                                                                   49000100
         LABEL XIT;                                                     49000200
LABEL    L0,L1,L2,L3,L4,L5,L6,L7,L7A,L8,L9,L9A,L9B,L10,                 49000300
         L11,L12,L12A,L13,L14,L15,L16,L16A,                             49000400
         L17,L17A,L18,L19,L20,L21,L21A,L22,L23,L24,                     49000500
         L25,L25A,L26,L27,L28,L29,L29A,L30,L30A,L31,                    49000600
         L32,L33,L33A,L34,L35,L36,L36A,L37,L37A,L38;                    49000700
LABEL XIT1;                                                             49000800
SWITCH SWLST ~                                                          49000900
         L0,L1,L2,L3,L4,L5,L6,L7,L7A,L8,L9,L9A,L9B,L10,                 49001000
         L11,L12,L12A,L13,L14,L15,L16,L16A,                             49001100
         L17,L17A,L18,L19,L20,L21,L21A,L22,L23,L24,                     49001200
         L25,L25A,L26,L27,L28,L29,L29A,L30,L30A,L31,                    49001300
         L32,L33,L33A,L34,L35,L36,L36A,L37,L37A,L38;                    49001400
         IF Q.SCF ! STMTBEGIN THEN                                      49001500
    BEGIN                                                               49001600
         ERR(76);                                                       49001700
         GO TO XIT1;                                                    49001800
    END;                                                                49001900
         IF SPCLTOG THEN IF VBTOG THEN                                  49002000
    BEGIN                                                               49002100
         IF LPAS1 THEN                                                  49002200
    BEGIN                                                               49002300
         SVOPTP ~ PRTOG;                                                49002400
         SVOPTC ~ CODETOG;                                              49002500
         PRTOG ~ CODETOG ~ TRUE;                                        49002600
    END;                                                                49002700
         IF LISTOG THEN                                                 49002800
    BEGIN                                                               49002900
         T~SVOPT~DOLOPTWORD;                                            49003000
         DOLOPTWORD.DOLF ~ 1;                                           49003100
         DOLOPTWORD.DOMF ~ 1;                                           49003200
         DOLOPTWORD.DOCF ~ 1;                                           49003300
         IF DOLOPTWORD ! T THEN DISKOUT(0,1,0,DOLOPTWORD,0);            49003400
    END;                                                                49003500
    END;                                                                49003600
    GO TO SWLST[KEY - 500];  % VERBS START AT 501 (ACCEPT)              49003700
L0:                                                                     49003800
         ACCEPTP;                                                       49003900
         GO TO XIT;                                                     49004000
L1:                                                                     49004100
         ARITHMETICP(ADD);                                              49004200
         GO TO XIT;                                                     49004300
L2:                                                                     49004400
         ALTERP;                                                        49004500
         GO TO XIT;                                                     49004600
L3:                                                                     49004700
         CALLP;                                                         49004800
         GO TO XIT;                                                     49004900
L4:                                                                     49005000
         CANCELP;                                                       49005100
         GO TO XIT;                                                     49005200
L5:                                                                     49005300
         CLOSEP;                                                        49005400
         GO TO XIT;                                                     49005500
L6:                                                                     49005600
         COMPUTEP;                                                      49005700
         GO TO XIT;                                                     49005800
L7:                                                                     49005900
         GO TO XIT;                                                     49006000
L7A:                                                                    49006100
         DISABLEP;                                                      49006200
         GO TO XIT;                                                     49006300
L8:                                                                     49006400
         DISPLAYP;                                                      49006500
         GO TO XIT;                                                     49006600
L9:                                                                     49006700
         DIVIDEP;                                                       49006800
         GO TO XIT;                                                     49006900
L9A:                                                                    49007000
         ENABLEP;                                                       49007100
         GO TO XIT;                                                     49007200
L9B:                                                                    49007300
         ENTERP;                                                        49007400
         GO TO XIT;                                                     49007500
L10:     % DUMPP                                                        49007600
L19:     % MONITORP                                                     49007700
L37:     % USEP                                                         49007800
         ERR(0);                                                        49007900
         ERRORTOG ~ SCTRL = KEY ;                                       49008000
         GO TO XIT;                                                     49008100
L11:                                                                    49008200
         EXAMINEP;                                                      49008300
         GO TO XIT;                                                     49008400
L12:                                                                    49008500
         EXITP;                                                         49008600
         GO TO XIT;                                                     49008700
L12A:                                                                   49008800
         FORGETP;                                                       49008900
         GO TO XIT;                                                     49009000
L13:                                                                    49009100
         GENERATEP;                                                     49009200
         GO TO XIT;                                                     49009300
L14:                                                                    49009400
         JUNK ~ REAL(GOP(FALSE,BUNLM));                                 49009500
         GO TO XIT;                                                     49009600
L15:                                                                    49009700
         HOLDP;                                                         49009800
         GO TO XIT;                                                     49009900
L16:                                                                    49010000
         IFP;                                                           49010100
         GO TO XIT;                                                     49010200
L16A:                                                                   49010300
         INITIALIZEP;                                                   49010400
         GO TO XIT;                                                     49010500
L17:                                                                    49010600
         INITIATEP;                                                     49010700
         GO TO XIT;                                                     49010800
L17A:                                                                   49010900
         INSPECTP;                                                      49011000
         GO TO XIT;                                                     49011100
L18:     % MERGE                                                        49011200
L32:     % SORT                                                         49011300
         SORTP(KEY=MERGE);                                              49011400
         GO TO XIT;                                                     49011500
L20:                                                                    49011600
         MOVEP;                                                         49011700
         GO TO XIT;                                                     49011800
L21:                                                                    49011900
         ARITHMETICP(MULT);                                             49012000
         GO TO XIT;                                                     49012100
L21A:                                                                   49012200
         NOTEP;                                                         49012300
         GO TO XIT;                                                     49012400
L22:                                                                    49012800
         OPENP;                                                         49012900
         GO TO XIT;                                                     49013000
L23:                                                                    49013100
         PERFORMP;                                                      49013200
         GO TO XIT;                                                     49013300
L24:                                                                    49013400
         PROCESSP;                                                      49013500
         GO TO XIT;                                                     49013600
L25:                                                                    49013700
         READP;                                                         49013800
         GO TO XIT;                                                     49013900
L25A:                                                                   49014000
         RECEIVEP;                                                      49014100
         GO TO XIT;                                                     49014200
L26:                                                                    49014300
         RELEASEP;                                                      49014400
         GO TO XIT;                                                     49014500
L27:                                                                    49014600
         MACRO(PROCM,2,0);        % RERUN                               49014700
         STEPS;                                                         49014800
         GO TO XIT;                                                     49014900
L28:                                                                    49015000
         RETURNP;                                                       49015100
         GO TO XIT;                                                     49015200
L29:                                                                    49015300
         RUNP;                                                          49015400
         GO TO XIT;                                                     49015500
L29A:                                                                   49015600
         SEARCHP;                                                       49015700
         GO TO XIT;                                                     49015800
L30:                                                                    49015900
         SEEKP;                                                         49016000
         GO TO XIT;                                                     49016100
L30A:                                                                   49016200
         SENDP;                                                         49016300
         GO TO XIT;                                                     49016400
L31:                                                                    49016500
         SETP;                                                          49016600
         GO TO XIT;                                                     49016700
L33:                                                                    49016800
         STOPP;                                                         49016900
         GO TO XIT;                                                     49017000
L33A:                                                                   49017100
         STRINGP;                                                       49017200
         GO TO XIT;                                                     49017300
L34:                                                                    49017400
         ARITHMETICP(SUBT);                                             49017500
         GO TO XIT;                                                     49017600
L35:                                                                    49017700
         SUSPENDP;                                                      49017800
         GO TO XIT;                                                     49017900
L36:                                                                    49018000
         TERMINATEP;                                                    49018100
         GO TO XIT;                                                     49018200
L36A:                                                                   49018300
         UNSTRINGP;                                                     49018400
         GO TO XIT;                                                     49018500
L37A:                                                                   49018600
         WAITP;                                                         49018700
         GO TO XIT;                                                     49018800
L38:                                                                    49018900
         WRITEP;                                                        49019000
XIT: ;                                                                  49019100
         IF SPCLTOG THEN IF VBTOG THEN                                  49019200
    BEGIN                                                               49019300
         IF LPAS1 THEN                                                  49019400
    BEGIN                                                               49019500
         PRTOG ~ SVOPTP;                                                49019600
         CODETOG ~ SVOPTC;                                              49019700
    END;                                                                49019800
         IF LISTOG THEN                                                 49019900
    BEGIN                                                               49020000
         T ~ DOLOPTWORD;                                                49020100
         DOLOPTWORD.DOLF ~ 1;                                           49020200
         DOLOPTWORD.DOCF~SVOPT.DOCF;                                    49020300
         DOLOPTWORD.DOMF~SVOPT.DOMF;                                    49020400
         IF DOLOPTWORD ! T THEN DISKOUT(0,1,0,DOLOPTWORD,0);            49020500
    END;                                                                49020600
    END;                                                                49020700
         IF KEY = SEMI THEN STEPS ELSE                                  49020800
         IF KEY!PERIOD AND Q.SCF!STMTBEGIN AND KEY!ELSEV AND NOT        49020900
              (KEY=WHEN AND SRCHTOG) THEN                               49021000
    BEGIN                                                               49021100
XIT1:                                 ;                                 49021200
         IF NOT ERRORTOG THEN ERR(121);                                 49021300
         DO KEY ~ SCTRL UNTIL KEY = PERIOD OR Q.SCF = STMTBEGIN;        49021400
    END;                                                                49021500
         ERRORTOG ~ FALSE;                                              49021600
END STATEMENT;                                                          49021700
PROCEDURE USINGCLAUSE;                                                  49021800
BEGIN                                                                   49021900
         IF DNSCAN ! IDV THEN ERR(75);                                  49022000
         WHILE DNSCAN=IDV OR NOT EOFTOG DO;                             49022100
END USING CLAUSE;                                                       49022200
PROCEDURE PARAGRAPH;                                                    49022300
BEGIN                                                                   49022400
         REAL R,T,X;                                                    49022500
         LABEL L;                                                       49022600
         IF KEY ! PERIOD THEN ERR(79);                                  49022700
         IF NXKEY = NOTE THEN NOTOG ~ TRUE;                             49022750
         PARINFO ~                                                      49022800
         T ~ INFOENTER(R~SAVELABEL.SCOPE);                              49022900
         IF PSTOG THEN IF4[T].PSNOF ~ PSCNT;                            49023000
         MACRO(DEFLM,T,0);                                              49023100
         T1 ~ IF0[T];                                                   49023200
         T1.MONI ~ (X ~DRCT[R]).MONI;                                   49023300
         IF2[T].DMPF ~ X.CALF;                                          49023400
         IF X.MONI =1 OR X.CALF = 1 THEN IF2[T].NCNTF ~ GETPRTLOC;      49023500
         T1.SCF ~ PNV;                                                  49023600
         T1.SCOPE ~ NXI;                                                49023700
         IF SECINFO ! 0 THEN  % ALTER SCOPE OF SECTION NAME             49023800
         IF0[SECINFO].SCOPE ~ NXI;  % TO INCLUDE CURRENT PARAGRAPG      49023900
         IF0[T] ~ T1;                                                   49024000
         IF1[T].LCNTF ~ LBCOUNT ~ LBCOUNT + 1;                          49024100
         IF4[T].SILKF ~ SECINFO;                                        49024200
         WHILE NOT(MARGINA OR  EOFTOG) DO                               49024300
    BEGIN                                                               49024400
         IF KEY = PERIOD THEN STEPS;                                    49024500
    L:                                                                  49024900
         IF KEY ! GOV AND KEY ! EXITV THEN PARINFO ~ 0;                 49025000
         RELTOG ~ FALSE;                                                49025100
         NEXTSENTENCE ~ UNBX ~ OPX ~ RDX ~0;                            49025200
         DO STATEMENT UNTIL KEY=PERIOD;                                 49025300
         MACRO(STMTE,0,0);                                              49025400
         BPTX ~ 0;                                                      49025500
         IF NEXTSENTENCE ! 0 THEN MACRO(DEFPM,NEXTSENTENCE,0);          49025600
    END;                                                                49025700
         MACRO(ENDPM,T,0);                                              49025800
         IF NOT EOFTOG THEN                                             49025900
         IF SCTRL = LABELID THEN                                        49026000
    BEGIN                                                               49026100
         IF Q.SCF=ITM THEN ERR(141);                                    49026150
         SAVELABEL ~ LABELSCAN;                                         49026200
         IF EOFTOG THEN PARAGRAPH;     % DO DEFLM FOR SAVELABEL         49026250
    END  ELSE                                                           49026300
         IF KEY ! ENDV THEN                                             49026400
           IF NOT  EOFTOG THEN                                          49026500
    BEGIN                                                               49026600
         ERR(5);                                                        49026700
         GO TO L;                                                       49026800
    END;                                                                49026900
END PARAGRAPH;                                                          49027000
PROCEDURE SECTIONP(B); VALUE B; BOOLEAN B;                              49027100
BEGIN                                                                   49027200
         LABEL PAR;                                                     49027300
         REAL T,S;                                                      49027400
    REAL IPOPNO;             % INPUT OR OUTPUT PROCEDURE NUMBER         49027500
         IF NOT B THEN       % SAVELABEL IS SECTION NAME                49027600
    BEGIN                                                               49027700
         SECINFO ~                                                      49027800
         T ~ INFOENTER(S~SAVELABEL.SCOPE);                              49027900
         IF DRCT[S].SOPD = 1 THEN                                       49028000
         IF PSTOG THEN ERR(235) ELSE                                    49028100
    BEGIN                                                               49028200
         IPOPNO ~ DRCT[S].FPSNOD;                                       49028300
         PSCNT ~ PSCNT +1;                                              49028400
         PSTOG ~ TRUE;                                                  49028500
    END;                                                                49028600
         IF PSTOG THEN IF4[T].PSNOF ~ PSCNT;                            49028700
         IF0[T].PRF ~ 1;     % ALL SECTIONS REQUIRE PROGRAM DESC        49028800
         MACRO(DEFLM,T,1);                                              49028900
         IF1[T].LCNTF ~ LBCOUNT ~ LBCOUNT + 1;                          49029000
         IF4[T].SILKF ~ SECINFO;                                        49029100
         IF KEY = PERIOD THEN BEGIN CHECKCOL8; STEPS END ELSE ERR(80);  49029200
         SAVELABEL ~ LABELSCAN;                                         49029300
    END;                                                                49029400
         IF NOT EOFTOG THEN                                             49029450
    PAR:                                                                49029500
         PARAGRAPH;                                                     49029600
         IF NOT(KEY=ENDV OR KEY=SECTION OR EOFTOG) THEN                 49029700
              GO TO PAR;                                                49029800
         IF NOT B THEN                                                  49029900
    BEGIN                                                               49030000
         IF0[T] := IF0[T]&NXI SCOPEF&PNV SCFF&1 SNLFF;                  49030100
         MACRO(ENDSM,T,REAL(DECLTOG));                                  49030200
         IF DRCT[S].EOPD = 1 THEN                                       49030300
         IF NOT(PSTOG AND IPOPNO = DRCT[S].FPSNOD) THEN ERR(235)        49030400
         ELSE PSTOG ~ FALSE;                                            49030500
    END;                                                                49030600
END SECTIONP;                                                           49030700
PROCEDURE DECLSECTION;                                                  49030800
BEGIN                                                                   49030900
         REAL T;                                                        49031000
         IF SCTRL ! PERIOD THEN ERR(85);                                49031100
         CHECKCOL8;                                                     49031200
         IF SCTRL!NLABELID THEN ERR(84);                                49031300
         IF Q.SCF=ITM THEN ERR(141);                                    49031350
         SAVELABEL ~ LABELSCAN;                                         49031400
         DO                                                             49031500
    BEGIN                                                               49031600
         IF NOT (KEY = SECTION AND SCTRL = PERIOD) THEN ERR(0);         49031700
         USEPRT ~ GETPRTLOC;                                            49031800
         USEP;                                                          49031900
         DRCT[SAVELABEL.SCOPE] ~ DRCT[SAVELABEL.SCOPE]&1 SOPDF&1 EOPDF; 49032000
         SECTIONP(FALSE);                                               49032100
         IF1[SECINFO].BADDF ~ USEPRT;                                   49032200
    END UNTIL KEY=ENDV OR EOFTOG;                                       49032300
         IF NOT (SCTRL = DECLARATIVES AND SCTRL = PERIOD) THEN ERR(0);  49032400
END DECLSECTION;                                                        49032500
% * * * * * * * * * BEGINNING OF PROCEDURE DIVISION CODE * * * * * * * *49032600
         DECTOG ~ FALSE;                                                49032700
         PSTOG ~ FALSE;                                                 49032800
         BPTX ~ JUNKCTR ~ LBCOUNT ~ SECINFO ~ 0; % REASSIGNMENT PROBLMS 49032900
         IF NOT (KEY = PROCEDUREV AND SCTRL = DIVISION AND              49033000
              NXKEY = PERIOD) THEN ERR(0);                              49033100
         COPTOG ~ TRUE;                                                 49033200
         COMMENT * * * SET UP TALLY AS NUMERIC DATA-NAME * * * * * * * ;49033300
         XACUM[1]~0&"5TALLY"[06:12:36];                                 49033400
         IF RSWDSRCH THEN RSWD[(T~XACUM[0].NXF).IR,T.IC+1]~"5      ";   49033500
         COMMENT * * * REMOVE TALLY FROM DICTIONARY * * *;              49033600
         XACUM[0]:=0&ITM SCFF;                                          49033700
         MOVE (ACCUM[0], XACUM[0],2);                                   49033800
         SVXREFTOG ~ XREFTOG; XREFTOG ~ FALSE;                          49033850
         SCRAMBLEIT;                                                    49033900
         TALLYINFO~I~INFOENTER(ACCUM[0].NXF);                           49034000
         IF0[I]:=0&ITM SCFF&77 LVLFF&NXI SCOPEF;                        49034100
         IF1[I].LGHF ~ 8;                                               49034200
         IF2[I] ~ 0&NM CLFF&CMP1 USFF&8 SZFF&1 OSTKF&1 WRDOFF;          49034300
         IF3[I].BADDF ~ TALLYADR ~ GETPRTLOC;                           49034400
         XREFTOG ~ SVXREFTOG;                                           49034450
         STEPS;                                                         49034500
         CHECKCOL8;                                                     49034600
         IF SCTRL = USING THEN                                          49034700
    BEGIN                                                               49034800
         USINGCLAUSE;                                                   49034900
         CHECKCOL8;                                                     49035000
         KEY ~ SCTRL;                                                   49035100
    END;                                                                49035200
         IF KEY = MONITORV THEN                                         49035300
    BEGIN                                                               49035400
         MERRIMAC;      % THIS SHOULD HANDLE THE YANKEE MONITOR         49035500
         CHECKCOL8;                                                     49035600
         STEPS                                                          49035700
    END;                                                                49035800
         MACRO(KBLSM,PROCEDUREV,0);                                     49035900
         IF KEY = DUMPV THEN                                            49036000
    BEGIN                                                               49036100
         DUMPP;                                                         49036200
         CHECKCOL8;                                                     49036300
         STEPS                                                          49036400
    END;                                                                49036500
         IF KEY = DECLARATIVES THEN                                     49036600
    BEGIN                                                               49036700
         DECLTOG ~ TRUE;                                                49036800
         MACRO(SWMCO,1,1);                                              49036900
         DECLSECTION;                                                   49037000
         DECLTOG ~ FALSE;                                               49037100
         PSCNTD ~ PSCNT;                                                49037200
         MACRO(SWMCO,1,0);                                              49037300
         IF EOFTOG THEN                                                 49037400
    BEGIN                                                               49037500
         ERR(281);                                                      49037600
         GO TO XIT;                                                     49037700
    END;                                                                49037800
         CHECKCOL8;                                                     49037900
         IF SCTRL!NLABELID THEN ERR(84);                                49038000
         IF Q.SCF=ITM THEN ERR(141);                                    49038050
         SAVELABEL ~ LABELSCAN;                                         49038100
         IF (PARTOG ~ KEY!SECTION) THEN                                 49038200
    BEGIN                                                               49038300
         ERR(66);                                                       49038400
    END;                                                                49038500
         PRODFLG ~ TRUE;                                                49038600
         GO TO SECT;                                                    49038700
    END ELSE                                                            49038800
    BEGIN                                                               49038900
         IF   KEY!NLABELID THEN ERR(84);                                49039000
         IF Q.SCF=ITM THEN ERR(141);                                    49039050
         SAVELABEL ~ LABELSCAN;                                         49039100
    END;                                                                49039200
         IF (PARTOG ~ KEY ! SECTION)                                    49039300
              THEN MACRO(DEFLM,0,1);                                    49039400
         PRODFLG ~ TRUE;                                                49039500
    SECT:                                                               49039600
         IF KEY=SECTION THEN IF SCTRL = LITV THEN STEPS;                49039700
         SECTIONP(PARTOG);                                              49039800
         IF EOFTOG THEN GO TO XIT;                                      49039900
         IF PARTOG THEN                                                 49040000
    BEGIN     % PARAGRAPH REQUIRED NOT SECTIONS                         49040100
         ERR(83);                                                       49040200
         PARTOG ~ FALSE;                                                49040300
         MACRO(ENDSM,0,0);                                              49040400
    END;                                                                49040500
         GO TO SECT;                                                    49040600
    XIT:                                                                49040700
         IF PSTOG THEN ERR(244);                                        49040800
         MAC2(STOPM,2);      % GET INVALID EOJ IN CASE FALL THRU HERE   49040850
         IF PARTOG THEN MACRO(ENDSM,0,0);                               49040900
         DISKOUT(0,2,0,0,THEND);                                        49041000
         REWIND(PASS1);                                                 49041100
         REWIND(CARDIMAGE);                                             49041200
         IF SHORTAPE = 1 THEN LOCK(NEWTAPE,*);                          49041300
         IF PRINTEROPEN THEN WRITE(LINE[1]);                            49041400
         IF INFOTOG THEN DUMPINFO;                                      49041500
%***********************************************************************49041600
%                                                                      *49041700
%   YEA, FROM THE TABLE OF MY MEMORY I WILL WIPE AWAY ALL TRIVIAL      *49041800
%        FOND RECORDS.                                                 *49041900
%                       HAMLET, WILLIAM SHAKESPEARE                    *49042000
%                                                                      *49042100
%***********************************************************************49042200
    END OF PROCEDURE DIVISION ALSO END OF PASS ONE;                     49042300
COMMENT * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 60000000
        *                                                             * 60000100
        *             PASS 2 PORTION OF THE COMPILER                  * 60000200
        *                                                             * 60000300
        * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * ; 60000400
BEGIN                                                                   60000500
DEFINE   CHUNK = 1800#,      % MAX SIZE OF CODE FILE                    60000600
         DKSEGSZ = 30#,      % DISK SEGMENT SIZE                        60000700
         AITINDEX= AIT[0,0]#,     % ARRAY INFO TABLE INDEX              60000800
         IX = W.[36:5],W.[41:7]#,                                       60000900
         SUBSCRIPTS= EXPSUB(FINSM)#,                                    60001000
         EXPP      = EXPSUB(ENDXM)#,                                    60001100
         CURCARDNB = CARDCOUNT#,       % CURRENT CARD # (DISK ADDRESS)  60001200
         DIALER = 32#,  %  INTRINSIC NUMBER OF DYNAMIC DIAL             60001300
         JUNKV   =  -513#, % F + 1     OCTAL VALUE OR FIRST DBL PREC WD 60001400
         JUNKV2  =  -514#, % F + 2     SECOND WORD DOUBLE PRECISION     60001500
         JUNKN   =  -515#, % F + 3     DESC TO AREA([3:3]=STK GEN OFST) 60001600
         JUNKX   =  -516#, % F + 4     GENERAL F REL JUNK CELL          60001700
         JUNKEX1 =  -517#, % F + 5     USED BY EXCHNG                   60001800
         JUNKEX2 =  -518#, % F + 6     USED BY EXCHNG                   60001900
         JUNKNOF =  -519#, % F + 7     % OFF SET FOR JUNKN              60002000
         JUNKXOF =  -520#, % F + 8     % OFF SET FOR JUNKX              60002100
         FMAX    =     7#, % MAX FOR F REL CELLS ((# OF F+ REL) - 1)    60002200
         FMINUS1 = -897 #, % F -1                                       60002300
         FMINUS2 = -898 #, % F -2                                       60002400
         FMINUS3 = -899 #, % F -3                                       60002500
         FMINUS4 = -900 #, % F -4                                       60002600
         FMINUS5 = -901 #, % F -5                                       60002700
         POLYMERGE =INTRIN[7]#,% ADRESS OF MERGE INT DESC               60002800
         SORTER    =INTRIN[8]#,% ADRESS OF SORT INT DESC                60002900
         SEGEND(SZ) = SEGDUMP(SZ,EDOC,0)#,                              60003000
         EMITF     = FIXES(FALSE)#,                                     60003010
         EMITBFW   = FIXES(TRUE)#,                                      60003020
         MERGEINT  =23#,       %  POLYMERGE INTRINSIC # @ 27            60003100
         SORTINT = 4#,         % SORT INTRINSIC # @ 4                   60003200
         XCH(A,B)= DOUBLE(A,B,~,B,A)#, % THIS SWAPS TWO OPERANDS        60003300
%%%%%%%%%%%%%%%%%%%%%%%%%%%% DEFINES FOR WRAPUP %%%%%%%%%%%%%%%%%%%%%%%%60003400
         IFPB = GARB[4]#,                                               60003500
         FPBX = GARB[0]#,                                               60003600
         SEGDKR = CSTPOOL[0]#, % SEG 0: LOC OF SEGMENT DICT             60003700
         PRTDKR = CSTPOOL[2]#, % SEG 0: LOC OF PRT                      60003800
         FPBDKR = CSTPOOL[4]#, % SEG 0: LOC OF FPB                      60003900
         FPBSZ = CSTPOOL[5]#,  % SIZE OF FPB                            60004000
         SVDKADR = GARB[1]#,                                            60004100
         DXX = GARB[2]#,                                                60004200
         SVSGSIZ = GARB[3]#,                                            60004300
         PGUB = SVNNL#,        % TRUE IF PGUSE CONTAINS A NON-EMPTY CELL60004400
         NUMFILS = [33:15]#,   % SEG 0 WRD 7: NUMBER OF FILES           60004500
         LINESEGSIZE=18:33:15#,% SIZE OF LINE SEGMENT DUMPED            60004600
         LINESEQNUM =10:20:28#,% SEQUENCE NUMBER                        60004700
         LINEDICTADR=[18:15]#, % SEG 0 WRD 0: LOCATION OF LINE DICTIONRY60004800
         COREQ = [18:15]#;     % SEG 0 WRD 7: CORE ESTIMATE             60004900
    REAL BUFFMAX1, % LARGEST BUFFER ENCOUNTERED SO FAR                  60005000
         BUFFMAX2, % SECOND LARGEST BUFFER ENCOUNTERED SO FAR           60005100
         CNTL2,    % MACRO CONTROL FIELD                                60005200
         CNPRT,    % HOLDS PRT FOR CURRENT CONDITION NAME SEGMENT       60005300
         CNRELADDR,%HOLDS RELADDR FOR CONDITION NAME SEGMENTS           60005400
         CNSEGNO,  % HOLDS SEGNO FOR CONDITION NAME SEGMENTS            60005500
         CODEMAX1, % LARGEST CODE SEGMENT ENCOUNTERED SO FAR            60005600
         CODEMAX2, % SECOND LARGEST CODE SEGMENT ENCOUNTERED SO FAR     60005700
         CODEMAX3, %  THIRD LARGEST CODE SEGMENT ENCOUNTERED SO FAR     60005800
         CSECTIX,   % INFO INDEX OF SECTION BEING COMPILED              60005900
         CURCARDOR, % CURRENT CARD SOURCE(" ","R","T","L")              60006000
         DATAMAX1, % LARGEST DATA ARRAY ENCOUNTERED SO FAR              60006100
         DATAMAX2, % SECOND LARGEST DATA ARRAY ENCOUNTERED SO FAR       60006200
         DKADR,    % NEXT AVAILABLE  DISK SEGMENT                       60006300
         DYNAMICDIAL,   %  PRT LOCATION OF DYNAMICDIAL INTRINSIC        60006400
         ENDFILERTN,    % END OF FILE FOR RETURN                        60006500
         ERPNT,    % POINTER TO ITEM IN ERROR                           60006600
         DANGLEHEAD, % SYLL. PTR IN CODE FILE TO LAST DANGLING BOOLEAN  60006700
         FRSTSEG,  % SEGMENT NUMBER OF FIRST EXECUTABLE SEGMENT         60006800
         FUNNYALL, % NON 0 LEAVING GIVEMELITERAL WHEN ALL "ABC" > 256   60006900
         GALINK,   % LINK TO LIST OF ALTERED PARAGRAPH NAMES            60007000
         INITZE,   % INITILIZE CODE                                     60007100
         JUNKA,         % JUNK ARRAY FOR COMPAIRS.                      60007200
         JUNKM,         % JUNK CELL FOR MONITOR ARRAY(SUBSCIPTS)        60007300
         JUNKMON2,      % JUNK CELL FOR MONITOR SUBSCRIPT VALUE         60007400
         LBLSTRT,     % IFO INDEX OF 1ST LABEL IN LINKED LIST           60007500
         LSTCST,   % FIRST CSTPOOL ENTRY;                               60007600
         LASTENTRY,% NEXT OPENSLOT IN CSTPOOL                           60007700
         LINESEGINX,    % LINE SEGMENT    INDEX                         60007800
         LINETEMPREL,   % TEMP OF RELADDR                               60007900
         SEGDICTINX,     % SEGMENT DICTIONARY CONTROL                   60008000
         MACN2,    % MACRO CONTROL FIELD                                60008100
         ONSTACK,  % 1= IT IS ON THE STACK INSTEAD OF WHERE IT BELONGS  60008200
         PSX,      % PSUDO-STACK INDEX                                  60008300
         RETURNHERE,    % RETURN TO THIS PROGRAM DESC                   60008400
         SCURRENTPOOLADR,    % SAVE CURRENT CONSTANT POOL ADDRESS       60008500
         SEGCNT,   % NO PROGRAM SEGMENTS                                60008600
         SEGNO,    % SEGMENT CURRENTLY BEING COMPILED                   60008700
         SGSIZ,    % SUM OF SEGMENT SIZES IN WORDS                      60008800
         SPOOLINDEX,         % SAVE CONSTANT POOL INDEX                 60008900
         STORSUB,  % STORE UNSPLIT SUBSCRIPT IN JUNK CELL DEP ON VALUE  60009000
         TABLEBASE,% BASE ADDRESS OF EDIT TABLE                         60009100
         TEMPREL,  % TEMP STORE FOR RELADDR (FOR FIXUPS)                60009200
         COBOLVARSZ,  % VARIABLE MOVE,RELATE & SMEAR INTRINSIC          60009300
         VARU2,    % MACRO CONTROL FIELD                                60009400
         V1,       % MACRO CONTROL FIELD                                60009500
         V2,       % MACRO CONTROL FIELD                                60009600
         T,        % TEMPORARY                                          60009700
         VIXN,     % USED IN SEARCHP2 TO REMEMBER DATA-NAME             60009800
         W,        % TEMPORARY                                          60009900
         WDSZ2;    % MACRO CONTROL FIELD                                60010000
INTEGER  CURRENTPOOLADR,                                                60010100
         RELADDR,  % RELATIVE ADDRESS OF OUTPUT CODE                    60010200
         POOLINDEX;                                                     60010300
BOOLEAN                                                                 60010400
         AHL,                % ALL "X"- WHERE X IS MORE THAN 1 CHARACTER60010500
         CHRMODE,            % TRUE IF CHARACTER MODE                   60010600
         ERRSTART,           % TRUE IF ERR-STUFF INTIILIZED             60010700
         GOTACARD,                                                      60010800
         HEADPRINT,          % HEADING ON 2ND PASS NOT PRINTED          60010900
         MASK1,              % MASK USED TO BREAK UP INFO FROM PASS1    60011000
         MASK2,              % MASK USED TO BREAK UP INFO FROM PASS1    60011100
         LIMITOG,           % TRUE IF ERRORLIMIT EXISTS                 60011200
         MRCLEAN,            % IF ANYTHING IN CSTPOOL                   60011300
         MRCLEANTMP,         % TEMP FOR MR CLEAN                        60011400
         NOEXCH,             % TRUE TO INHIBIT EXCHANGE IN EMITSTRING   60011500
         PUNCHTOG,           % PUNCH OUT ERROR CARDS                    60011600
         SCALESTOP,          % STOP COMPILE-TIME SCALE OF LITERALS      60011700
         SORTOG,             % IF SORT OR MERGE IS PRESENT              60011800
         SVNNL,              % SAVED NON-NUMERIC LITERAL                60011900
         SEGTOG,    % IF TRUE THEN SEGMENT AT NEXT END-OF-STATEMENT     60011950
         SPECTOG;            % SUPPRESS WARNING MESSAGES                60012000
ARRAY                                                                   60012005
         AIT,           % ARRAY INFORMATION TABLE                       60012010
         EDOC,          % CODE ARRAY                                    60012020
         LINEDICT,      % LINE DICTIONARY ARRAY                         60012030
         LINESEG,       % LINE SEGMENT DICTIONARY                       60012040
         PRT,           % PROGRAM REFERENCE TABLE                       60012045
         SEGDICT,       % SEGMENT DICTIONARY                            60012050
         TDOC[0:9,0:127],%TEMP CODE FILE                                60012060
         MESSRAY[0:17,0:95];% ERROR MESSAGE ARRAY                       60012070
FILE OUT CODE DISK RANDOM [20:CHUNK] ( 9,DKSEGSZ,SAVE ABS(SAVETIME)),   60012100
         PUNCH 0(2,10);                                                 60012200
STREAM PROCEDURE SETFLG(A,RSET2);                                       60012300
         VALUE RSET2;                                                   60012400
    BEGIN                                                               60012500
         DI ~ A;                                                        60012600
         DS ~ 1 SET; RSET2(DS ~ 1 RESET);                               60012700
    END SETFLG;                                                         60012800
PROCEDURE ERR(ERNUM); VALUE ERNUM; REAL ERNUM; FORWARD;                 60012900
INTEGER PROCEDURE SEGDICTENT;      FORWARD;                             60013000
COMMENT * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 61000000
        *                                                             * 61000100
        *                    THE  EMITTERS                            * 61000200
        *                                                             * 61000300
        * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * ; 61000400
DEFINE LITOUT(LITOUT1)=0&LITOUT1[21:33:3]&LITOUT1[27:36:3]&LITOUT1      61000500
                        [33:39:3]&LITOUT1[39:42:3]&LITOUT1[45:45:3]#,   61000600
     ARROUND1= RELADDR + 6#, % BRANCH ARROUND 1 SYLLABLE                61000700
         ADJUST = WHILE RELADDR.CIX !0 DO EMITO(NOP)#, %ADJUST TO WORD  61000800
       ADDRESSOUT(ADDRESSOUT1)=832&ADDRESSOUT1[46:45:2]&                61000900
                        LITOUT(ADDRESSOUT1.WIX)[12:24:24] #;            61001000
DEFINE  NAMECALL(NAMECALL1)=EMITADDRESS(NAMECALL1,DESC) #,              61001100
        VALUCALL(VALUCALL1)=EMITADDRESS(VALUCALL1,OPDC) #,              61001200
        ADRSCALL(ADRSCALL1)=EMITADDRESS(ADRSCALL1,LITX) #;              61001300
STREAM PROCEDURE SWAP(EDOC,TDOC);                                       61001400
     BEGIN                                                              61001500
         LOCAL CTRL,U,V;                                                61001600
         LABEL L1,L2,L3,L4;                                             61001700
         SI~TDOC; U~SI;                                                 61001800
         SI ~ LOC EDOC;                                                 61001900
    L1:  SI~SI+3;       %COPY OUT PRT ADDRESS OF DESC.                  61002000
         DI~LOC V; DI~DI+5; SKIP 3 DB;                                  61002100
         15(IF SB THEN DS~SET ELSE DS~RESET; SKIP 1 SB);                61002200
         CTRL(JUMP OUT TO L2);                                          61002300
         SI~ LOC EDOC;                                                  61002400
    L3:  DI~ LOC U;                                                     61002500
         DS~ 5 CHR;     %CHANGE ALL BUT C FIELD                         61002600
          3(IF SB THEN DS~SET ELSE DS~RESET; SKIP 1 SB);                61002700
         DI~V;                                                          61002800
         SI~ LOC U;                                                     61002900
         DS~ WDS;                                                       61003000
         CTRL(JUMP OUT TO L4);                                          61003100
         TALLY ~ 1; CTRL ~ TALLY;                                       61003200
         SI~ EDOC; U~ SI;                                               61003300
         SI ~ LOC TDOC;                                                 61003400
         GO TO L1;                                                      61003500
    L2:  SI~LOC TDOC;                                                   61003600
         GO TO L3;                                                      61003700
    L4:                                                                 61003800
    END SWAP;                                                           61003900
PROCEDURE  DEBUG (LITERAL,OPER,SUGGESTION,DESCT,BRNCH);                 61004000
         VALUE    LITERAL,OPER,SUGGESTION,DESCT,BRNCH;                  61004100
         REAL     LITERAL,OPER,SUGGESTION,DESCT;  BOOLEAN BRNCH;        61004200
    BEGIN                                                               61004300
STREAM PROCEDURE ERRFMT(DEST,FIX,C,ADDRES,COMMAND,MIMONIC,OCTLIT,DESCT, 61004400
                 DECLIT,TOO,ADDRESBRN);                                 61004500
         VALUE  ADDRES,COMMAND,C,FIX,MIMONIC,OCTLIT,DESCT,DECLIT,TOO    61004600
               ,ADDRESBRN;                                              61004700
    BEGIN     % DEBUGN  ROUTINE                                         61004800
         DI ~ DEST;                                                     61004900
         DS ~ 8 LIT " ";                                                61005000
         SI ~ DEST;     DS~ 4 WDS;  DS ~2 CHR; % PREC. BLANKS           61005100
         SI ~ LOC FIX;  SI~ SI+3;   DS ~5 CHR; % *FIX*                  61005200
         SI ~ SI+7;                 DS ~1 CHR; %   C                    61005300
         DS ~ LIT " ";  SI~ SI+2;   DS ~6 CHR; % ADDRESS:S              61005400
         DS~2 LIT " ";  SI~ SI+4;   DS ~4 CHR; % COMMAND                61005500
         DS~2 LIT " ";  SI~ SI+4;   DS ~4 CHR; % MIMONIC                61005600
         DS~2 LIT " ";  SI~ SI+4;   DS ~4 CHR; % OCTAL                  61005700
         DS~2 LIT " ";  SI~ SI+4;   DS ~4 CHR; % ADDRESS TYPE           61005800
         DS~2 LIT " ";              DS ~4 DEC; % DEC EQU OF OCTAL       61005900
         DS~2 LIT " ";  SI ~ SI+6;  DS ~2 CHR; % TO                     61006000
         DS~  LIT " ";  SI ~SI+2;   DS ~6 CHR; %  ADDRESS:S             61006100
    END  ERRFMT;                                                        61006200
STREAM PROCEDURE  CRELOUT(DEST,ADDRESS,LIX);                            61006300
         VALUE     ADDRESS,LIX;                                         61006400
    BEGIN                                                               61006500
         DI ~ DEST ;  DS ~ 8 LIT " ";  SI ~ DEST;                       61006600
         DS ~ 5 WDS; DS ~ 1 CHR;                                        61006700
         SI ~ LOC ADDRESS; SI ~ SI+2; DS ~ 6 CHR;                       61006800
         SI ~ DEST;  DS ~ 14 CHR;                                       61006900
         SI ~ LOC LIX;                                                  61007000
          2(8(DS ~ 3 RESET;                                             61007100
           3(IF SB THEN DS ~ SET ELSE DS ~ RESET; SKIP SB));            61007200
              DS ~ LIT " ");                                            61007300
         SI ~ LOC LIX;       DS ~   LIT  " ";                           61007400
         DS ~ 8 CHR;                                                    61007500
         DS ~ LIT " ";                                                  61007600
    END  CRELOUT;                                                       61007700
         IF DESCT=0 THEN CRELOUT(ERROX[0],ADDRESSOUT(RELADDR),LITERAL)  61007800
              ELSE                                                      61007900
              ERRFMT(ERROX[0],IF TEMPREL>RELADDR THEN "*FIX*"ELSE"     "61008000
                    ,IF BOOLEAN(OPER.[1:1]) THEN "C" ELSE " ",          61008100
                     ADDRESSOUT(RELADDR),LITOUT(SUGGESTION) ,OPER,      61008200
                   IF BOOLEAN(LITERAL.[1:1])THEN "    "ELSE LITOUT      61008300
                   (LITERAL),DESCT,LITERAL.[38:10],                     61008400
                   IF BRNCH THEN "TO" ELSE "  ",                        61008500
                   IF BRNCH THEN ADDRESSOUT(REAL(BRNCH))ELSE "      "); 61008600
         IF BOOLEAN(LITERAL.[1:1]) THEN LITPTR(ERROX[10],1,"    ",4);   61008700
         WRITE(RITE,12,ERROX[*]);                                       61008800
    END DEBUG;                                                          61008900
PROCEDURE CONSTANTCLEAN;  FORWARD;                                      61009000
STREAM PROCEDURE EMIT (SUG,DEST,OFFSET);                                61009100
         VALUE     SUG,OFFSET;                                          61009200
    BEGIN                                                               61009300
         SI ~ LOC DEST; SI ~ SI - 2;   % NOW AT SUGGESTION              61009400
         DI ~ DEST;     DI ~ DI + OFFSET;                               61009500
         DS ~ 2 CHR;                                                    61009600
    END EMIT;                                                           61009700
PROCEDURE SEGSTART; FORWARD;                                            61009750
PROCEDURE EMITTER (SUGGESTION);                                         61009800
         VALUE     SUGGESTION;   REAL  SUGGESTION;                      61009900
    BEGIN                                                               61010000
         W ~ RELADDR.WIX;                                               61010100
         EMIT(SUGGESTION,EDOC[IX],RELADDR.CIX);                         61010200
         IF (RELADDR~RELADDR+2)}8184 THEN                               61010300
    BEGIN                                                               61010310
         MRCLEAN ~ FALSE;                                               61010320
         SEGSTART;                                                      61010330
         ERR(8);                                                        61010340
         T ~ LBLSTRT;                                                   61010355
         LBLSTRT ~ 0;                                                   61010360
         WHILE T!0 DO                                                   61010365
    BEGIN                                                               61010370
         IF2[T].FXF ~ 0;                                                61010373
         T ~ IF4[T].LBLSTRTF;                                           61010375
    END;                                                                61010390
    END;                                                                61010395
         IF REAL(SUGGESTION <0)!REAL(CHRMODE) THEN ERR(277);            61010400
         IF MRCLEAN THEN IF NOT CHRMODE THEN                            61010500
              IF TEMPREL { RELADDR THEN IF (RELADDR-LSTCST) } 602 THEN  61010600
    BEGIN                                                               61010700
         MRCLEAN ~ FALSE;                                               61010800
         CONSTANTCLEAN;                                                 61010900
    END;                                                                61011000
    END EMITTER;                                                        61011100
PROCEDURE EMITL(LITERIAL);                                              61011200
         VALUE  LITERIAL;    REAL LITERIAL;                             61011300
    BEGIN                                                               61011400
         IF CODETOG THEN DEBUG(LITERIAL,OPERATOR[LITX],4|LITERIAL,"DEC="61011500
                               ,FALSE);                                 61011600
         EMITTER (4|LITERIAL);                                          61011700
    END  EMITL;                                                         61011800
PROCEDURE EMITO(OPR);                                                   61011900
         VALUE  OPR;    REAL OPR;                                       61012000
    BEGIN                                                               61012100
         OPR ~ OPERATOR[OPR];                                           61012200
         IF CODETOG THEN DEBUG (-1,OPR,OPR.OCTOPF,"    ",FALSE);        61012300
         IF JUNK ~ OPR.OCTOPF = "MJ" THEN        % CMN                  61012400
              IF CHRMODE THEN ERR(276) ELSE CHRMODE~ TRUE;              61012500
         EMITTER(JUNK&OPR[1:1:1]);                                      61012600
         IF JUNK = 64 THEN                       % CMX                  61012700
              IF CHRMODE THEN CHRMODE ~ FALSE ELSE ERR(276);            61012800
    END  EMITO;                                                         61012900
PROCEDURE EMITADDRESS(LIT,OPR);                                         61013000
         VALUE     LIT,OPR;    REAL   LIT,OPR;                          61013100
    BEGIN                                                               61013200
         IF LIT GTR 511 THEN                                            61013300
              IF LIT LEQ 1023 THEN EMITO(XRT) ELSE % R REL PAST 511     61013400
                   LIT ~ -(LIT.[36:12]);           % F REL SORT         61013500
         IF ABS(LIT) GTR 1023 THEN ERR(274);                            61013600
         JUNK ~ ABS(4|LIT)+OPR;                                         61013700
         IF CODETOG THEN  DEBUG (IF LIT>0 THEN LIT ELSE IF LIT.[38:3]=7 61013800
              THEN ABS(LIT+896) ELSE IF LIT.[38:3]=6 THEN ABS(LIT+768)  61013900
              ELSE ABS(LIT+512),OPERATOR[OPR],JUNK,                     61014000
              IF LIT>0 THEN " R+ " ELSE IF LIT.[38:3]=7 THEN " F- " ELSE61014100
              IF LIT.[38:3]=6 THEN IF OPR=OPDC THEN " C+ " ELSE " R+ "  61014200
              ELSE " F+ ",FALSE);                                       61014300
         EMITTER(JUNK);                                                 61014400
    END EMITADDRESS;                                                    61014500
PROCEDURE PUTAWORD(LIT);                                                61014600
         VALUE LIT;     REAL LIT;                                       61014700
    BEGIN                                                               61014800
         IF RELADDR.CIX!0 THEN ADJUST;                                  61014900
         W ~ RELADDR.WIX;                                               61015000
         EDOC [IX] ~ LIT;                                               61015100
         IF CODETOG THEN  DEBUG (LIT,0,0,0,FALSE);                      61015200
         RELADDR ~ RELADDR + 8;                                         61015300
    END PUTAWORD;                                                       61015400
PROCEDURE EMITVAR(VAR,OPR);                                             61015500
         VALUE VAR,OPR; REAL VAR,OPR;                                   61015600
    BEGIN                                                               61015700
         OPR ~ OPERATOR[OPR];                                           61015800
         VAR ~ JUNK ~ VAR;                                              61015900
         JUNK~ REAL(BOOLEAN( 64|(IF     BOOLEAN(OPR.[10:1])THEN VAR ELSE61016000
                    4|VAR)) OR BOOLEAN(OPR.OCTOPF));                    61016100
         IF CODETOG THEN DEBUG(VAR,OPR,JUNK,IF OPR<0 THEN               61016200
                   IF (W~OPR.[24:6])="R" OR(W="S" AND JUNK.[42:6]!34 AND61016300
                   OPR.[30:6]!"F" AND OPR.[30:6]!"R")                   61016400
                        OR JUNK.[42:6]=35 THEN "RCW-" ELSE IF W="T" AND 61016500
                        (JUNK.[42:6] }20AND JUNK.[42:6] {31)THEN        61016600
                        " - -" & VAR[36:42:6] ELSE "DEC=" ELSE          61016700
                        "DEC=",IF  (NOT BOOLEAN(OPR.[10:1]))OR W="J"THEN61016800
                        BOOLEAN(2|(VAR&REAL(OPR.[30:6]="R")[1:1:1])+    61016900
                        RELADDR+3) ELSE FALSE);                         61017000
         EMITTER(JUNK&OPR[1:1:1]);                                      61017100
    END  EMITVAR;                                                       61017200
PROCEDURE EMITCHAR(CHAR,SIZE);         % SAME AS EMITPROGCHR BUT FOR    61017300
         VALUE CHAR,SIZE;              % ONE OR TWO CHARACTERS          61017400
         REAL  CHAR,SIZE;                                               61017500
    BEGIN                                                               61017600
         EMITVAR(SIZE,TRP);                                             61017700
         IF CODETOG THEN                                                61017800
              DEBUG(-1,(-"    "),CHAR,"-  -"&CHAR[30:36:12],FALSE);     61017900
         EMITTER(CHAR & 257 [1:39:9]); % SET SIGN - AND TURN ON BIT 9   61018000
    END EMITCHAR;                                                       61018100
REAL PROCEDURE  TAKASYL(ADR);                                           61018200
         VALUE  ADR;    REAL ADR;                                       61018300
    BEGIN                                                               61018400
         W ~ ADR.WIX;                                                   61018500
         TAKASYL ~ GETCHARFRN(EDOC[IX],ADR.CIX,2);                      61018600
    END TAKASYL;                                                        61018700
PROCEDURE  EMITD(A,B,N);  % DIAL A AND B THEN TFR BITS                  61018800
         VALUE A,B,N;   INTEGER A,B,N;                                  61018900
    BEGIN                                                               61019000
         EMITVAR((A~(A DIV 6)|8+(A MOD 6)),DIA);                        61019100
         EMITVAR((B~(B DIV 6)|8+(B MOD 6)),DIB);                        61019200
         EMITVAR( N,TRB);                                               61019300
    END  EMITD;                                                         61019400
PROCEDURE EMITISO(A,N);                                                 61019500
         VALUE  A,N;    INTEGER  A,N;                                   61019600
    BEGIN                                                               61019700
         LABEL  EXIT;   INTEGER  S,T,T1;                                61019800
         IF N=15 THEN                                                   61019900
              IF  A=33  OR  A=18 THEN                                   61020000
    BEGIN                                                               61020100
              EMITL(0);                                                 61020200
              EMITO(EXCH);                                              61020300
              EMITO(IF A=33 THEN CTC ELSE FTC);                         61020400
              GO TO EXIT;                                               61020500
    END  ELSE  ELSE                                                     61020600
         IF  N<11 AND (A+N)=48 THEN                                     61020700
    BEGIN                                                               61020800
         S ~ 0;                                                         61020900
         T ~ 1;                                                         61021000
         DO T ~ T | 2 UNTIL (S~S+1)=N;                                  61021100
         EMITL(T-1);                                                    61021200
         EMITO(LAND);                                                   61021300
         GO TO EXIT;                                                    61021400
    END;                                                                61021500
         IF (S~ (48-A-N) MOD 6)+N { 39 THEN                             61021600
    BEGIN                                                               61021700
         EMITVAR(T1~(T~A DIV 6)|8+(A MOD 6) ,DIA);                      61021800
         EMITVAR(((A+N-1)DIV 6-T+1)|8+S, ISO);                          61021900
    END ELSE BEGIN                                                      61022000
         EMITL(0);                                                      61022100
         EMITO(EXCH);                                                   61022200
         EMITD(A,48-A,N);                                               61022300
    END;                                                                61022400
    EXIT:                                                               61022500
    END  EMITISO;                                                       61022600
PROCEDURE EMITFIX(A);                                                   61022700
         VALUE A;  REAL A;                                              61022800
    BEGIN                                                               61022900
         IF (JUNK ~ ABS(A) ) = 16384 THEN JUNK ~ -JUNK;                 61023000
         IF CODETOG THEN                                                61023100
              DEBUG(-1,"LINK",JUNK,"****",BOOLEAN(2|JUNK) OR A<0);      61023200
         A ~ REAL(MRCLEAN);  MRCLEAN ~ FALSE;                           61023300
         EMITTER(JUNK);                                                 61023400
         MRCLEAN ~ BOOLEAN(A);                                          61023500
    END EMITFIX;                                                        61023600
PROCEDURE FIXES(BFW);                                                   61023700
         VALUE BFW;     BOOLEAN BFW;                                    61023750
    BEGIN                                                               61023800
         EMITFIX(0);                                                    61023900
         EMITFIX(0);                                                    61024000
         IF BFW THEN IF MRCLEAN THEN CONSTANTCLEAN;                     61024050
    END EMITF;                                                          61024100
PROCEDURE EMITPAIR(LIT,OPR);                                            61024200
         VALUE LIT,OPR;   REAL LIT,OPR;                                 61024300
    BEGIN                                                               61024400
         ADRSCALL(LIT);                                                 61024500
         EMITO   (OPR);                                                 61024600
    END EMITPAIR;                                                       61024700
PROCEDURE EMITNUM(C); VALUE C; REAL C; FORWARD;                         61024800
PROCEDURE EMITBRANCH(HERE,THERE,OP);                                    61024900
         VALUE HERE,OP,THERE;    REAL HERE,THERE,OP;                    61025000
    BEGIN                                                               61025100
         BOOLEAN EARLY;                                                 61025200
         REAL  BRNCH;                                                   61025300
         LABEL XIT;                                                     61025400
         IF EARLY~HERE!(TEMPREL~RELADDR) THEN                           61025500
    BEGIN                                                               61025600
         RELADDR~HERE;                                                  61025700
         EARLY.[1:1]~ MRCLEAN;                                          61025800
         MRCLEAN~FALSE;                                                 61025900
    END;                                                                61026000
         EARLY.[46:1] ~ ABS(OP) = BFW ;                                 61026100
         IF OP<0 THEN                                                   61026200
    BEGIN                                                               61026300
         EMITO(LNOT);                                                   61026400
         OP ~ ABS(OP);                                                  61026500
         HERE ~ RELADDR;                                                61026600
    END ELSE IF EARLY THEN IF TAKASYL(RELADDR+4)=2121 THEN              61026700
              BEGIN EMITO(NOP); HERE ~ RELADDR; END;                    61026800
         IF (BRNCH ~ THERE-HERE-4)<0 THEN OP ~ OP + 1; %BACKWARD BRANCH 61026900
         IF THERE.CIX=0  AND (BRNCH ~ ABS(BRNCH) DIV 2) GTR 3 THEN      61027000
              IF OP<32 THEN                                             61027100
    BEGIN                                                               61027200
              OP ~ OP+5; % CHANGE TO A WORD BRANCH                      61027300
         BRNCH ~ ABS(THERE.WIX-(HERE+2).WIX);                           61027400
    END;                                                                61027500
         IF BRNCH GTR 1023 THEN                                         61027600
         IF OP > 32 OR (BRNCH.[33:13]> 1023 AND OP<32) THEN ERR(278);   61027700
         IF BRNCH= 0 THEN        % IF BRANCH TO NEXT SYLLABLE FORGET    61027800
    BEGIN                                                               61027900
         IF NOT EARLY.[46:1] THEN EMITO(DEL) ELSE % CONDITIONAL         61028000
         IF EARLY THEN EMITO( NOP);                                     61028100
         IF EARLY THEN EMITO( NOP) ELSE GO TO XIT;                      61028200
    END ELSE BEGIN                                                      61028300
         IF CODETOG THEN DEBUG(ABS(BRNCH),OPERATOR[LITX],4|BRNCH,"DEC=",61028400
                        BOOLEAN(THERE+1));                              61028500
         IF BRNCH GTR 1023 THEN EMITNUM(BRNCH)ELSE EMITTER(4|BRNCH);    61028600
         EMITO(OP);                                                     61028700
    END;                                                                61028800
         IF MRCLEAN THEN IF EARLY.[46:1] THEN CONSTANTCLEAN;            61028900
         IF EARLY THEN                                                  61029000
    BEGIN                                                               61029100
         RELADDR ~ TEMPREL;                                             61029200
         MRCLEAN ~ EARLY.[1:1];                                         61029300
    END;                                                                61029400
    XIT:                                                                61029500
    END  EMITBRANCH;                                                    61029600
PROCEDURE EMITLINK(IX,TYPE);                                            61029700
         VALUE  IX,TYPE;  INTEGER IX,TYPE;                              61029800
    BEGIN                                                               61029900
         INTEGER ML;                                                    61030000
         IF TYPE < 0 THEN                                               61030100
    BEGIN                                                               61030200
         EMITO(LNOT);                                                   61030300
         TYPE ~ ABS(TYPE);                                              61030400
    END;                                                                61030500
         IF (ML~ IF2[IX].FXF)=0 THEN                                    61030600
    BEGIN                                                               61030700
         IF4[IX].LBLSTRTF ~ LBLSTRT;                                    61030800
         LBLSTRT ~ IX;                                                  61030900
    END;                                                                61031000
         IF2[IX].FXF ~ RELADDR;                                         61031100
         EMITFIX(-ML.[35:12]);                                          61031200
         EMITFIX(TYPE);                                                 61031300
    END EMITLINK;                                                       61031400
INTEGER PROCEDURE GETLINK(LINK,TYPE);                                   61031500
         VALUE  LINK;   REAL LINK,TYPE;                                 61031600
    BEGIN                                                               61031700
         GETLINK~ TAKASYL(LINK)|2;     % GET THE LINK BACK              61031800
         TYPE ~ TAKASYL(LINK+2);  % GET OLD BRANCH TYPE                 61031900
    END  GETLINK;                                                       61032000
PROCEDURE EMITNUM(C);                                                   61032100
         VALUE C;  REAL C;                                              61032200
    BEGIN                                                               61032300
         LABEL FOUND,FINISHED;  INTEGER N;                              61032400
         IF C.[2:36]=0 THEN                                             61032500
    BEGIN                                                               61032600
         EMITL(ABS(C));                                                 61032700
         IF BOOLEAN(C.[1:1])THEN EMITO(SSN);                            61032800
    END ELSE                                                            61032900
    BEGIN                                                               61033000
         FOR N~1 STEP 2 UNTIL LASTENTRY DO                              61033100
              IF IS(C,CSTPOOL[N])   THEN GO TO FOUND;                   61033200
         MRCLEAN ~ TRUE;                                                61033300
         CSTPOOL[LASTENTRY] ~RELADDR;                                   61033400
         CSTPOOL[LASTENTRY+1]~C;                                        61033500
         IF LASTENTRY = 0 THEN LSTCST ~ RELADDR;                        61033600
         EMITFIX(4095);                                                 61033700
         IF LASTENTRY~LASTENTRY+2} 64 THEN                              61033800
    BEGIN                                                               61033900
         MRCLEAN ~ FALSE;                                               61034000
         CONSTANTCLEAN;                                                 61034100
    END;                                                                61034200
         GO TO FINISHED;                                                61034300
FOUND:                                                                  61034400
         EMITFIX(-CSTPOOL[N-1].[35:12]); % LINK FOR CST                 61034500
         CSTPOOL[N-1] ~ RELADDR-2;                                      61034600
    END;                                                                61034700
FINISHED:                                                               61034800
    END EMITNUM;                                                        61034900
PROCEDURE CONSTANTCLEAN;                                                61035000
    BEGIN                                                               61035100
         DEFINE CREL = -768 #;                                          61035200
         INTEGER  J,D,LINK;       BOOLEAN CRELX;                        61035300
         IF NOT MRCLEAN THEN                                            61035400
    BEGIN                                                               61035500
         LSTCST ~ RELADDR;                                              61035600
         EMITF;                                                         61035700
    END ELSE BEGIN                                                      61035800
         LSTCST ~ 0;                                                    61035900
         MRCLEAN ~ FALSE ;                                              61036000
    END;                                                                61036100
         ADJUST;                                                        61036200
         FOR J ~ 1 STEP 2 UNTIL LASTENTRY DO                            61036300
    BEGIN                                                               61036400
         TEMPREL ~ RELADDR;                                             61036500
         RELADDR ~ CSTPOOL [J-1]; %ADDRES OF PLACE                      61036600
         CRELX~ FALSE;                                                  61036700
         DO                                                             61036800
    BEGIN                                                               61036900
         IF D~(TEMPREL-RELADDR+6)DIV 8}128 THEN                         61037000
    BEGIN                                                               61037100
         IF MESSRAY[17,5]=0 THEN FIL17;                                 61037200
         MESSRAY[17,26] ~ "STCLEN#"&"C"[1:43:5];                        61037300
         MESSRAY[17,27] ~ LITOUT(D)&"CREL-"[1:19:29];                   61037400
         ERR(276);                                                      61037500
         LINK ~ 8190;                                                   61037600
    END ELSE                                                            61037700
    BEGIN                                                               61037800
         LINK ~ TAKASYL(RELADDR) | 2;                                   61037900
         CRELX~ TRUE;                                                   61038000
         VALUCALL(CREL-D);                                              61038100
    END                                                                 61038200
    END UNTIL  RELADDR~ LINK = 8190;                                    61038300
         RELADDR ~ TEMPREL;                                             61038400
         IF CRELX THEN PUTAWORD(CSTPOOL[J]);                            61038500
    END;                                                                61038600
         IF LSTCST!0 THEN                                               61038700
    BEGIN                                                               61038800
         EMITBRANCH(LSTCST,RELADDR,BFW);                                61038900
         LSTCST ~ 0;                                                    61039000
    END;                                                                61039100
         LASTENTRY ~ 0;                                                 61039200
    END CONSTANTCLEAN;                                                  61039300
PROCEDURE EMITPROGCHR(SOURCE,SIZE);    % THIS EMITS STREAMS             61039400
         VALUE SIZE;                                                    61039500
         REAL  SIZE;                                                    61039600
         ARRAY SOURCE[0];                                               61039700
    BEGIN                                                               61039800
         INTEGER I;                                                     61039900
         LABEL L1;                                                      61040000
         EMITVAR(SIZE,TRP);                                             61040100
         IF BOOLEAN(SIZE) THEN                                          61040200
    BEGIN                                                               61040300
         JUNK ~ GETCHARFRN(SOURCE[0],0,1);                              61040400
         I ~ I + 1;                                                     61040500
    END ELSE                                                            61040600
    BEGIN                                                               61040700
    L1:  JUNK ~ GETCHARFRN(SOURCE[I.WIX],I.CIX,2);                      61040800
         I ~ I+2;                                                       61040900
    END;                                                                61041000
         IF CODETOG THEN                                                61041100
              DEBUG(-1,(-"    "),JUNK,"-  -"&JUNK[30:36:12],FALSE);     61041200
         EMITTER((-JUNK)& 1 [35:47:1]);     % IN CASE JUNK = 0          61041300
         IF I<SIZE THEN GO TO L1;                                       61041400
    END EMITPROGCHR;                                                    61041500
PROCEDURE  EMITJUMP(HERE,THERE,OP);  % HANDLES CHAR MODE BRANCHES       61041600
         VALUE      HERE,THERE,OP;                                      61041700
         REAL       HERE,THERE,OP;                                      61041800
    BEGIN                                                               61041900
         BOOLEAN  EARLY;                                                61042000
         IF EARLY ~HERE ! (TEMPREL~RELADDR) THEN  RELADDR ~ HERE;       61042100
         IF (HERE~THERE-HERE-2)<0 AND (OP=JFW OR OP=JFC) THEN OP~OP+1;  61042200
         IF  HERE~ABS(HERE)> 63 THEN ERR(278);                          61042300
         JUNK ~ REAL(BOOLEAN(32|HERE) OR BOOLEAN((OP ~ OPERATOR[OP])    61042400
                   .OCTOPF));                                           61042500
         IF CODETOG THEN DEBUG(HERE.[42:5],OP,JUNK,"DEC=",BOOLEAN(THERE 61042600
              +1));                                                     61042700
         EMITTER(-JUNK);                                                61042800
         IF EARLY THEN RELADDR ~ TEMPREL;                               61042900
    END EMITJUMP;                                                       61043000
BOOLEAN PROCEDURE DELINKCST(VAL);      % THIS REMOVES AN ITEM           61043100
    VALUE VAL;                         % FROM THE CSTPOOL               61043200
    REAL  VAL;                                                          61043300
    BEGIN                                                               61043400
LABEL    FOUND,XIT;                                                     61043500
REAL     N,LINK;                                                        61043600
         T1 ~ LASTENTRY-2;                                              61043700
         FOR N ~ 1 STEP 2 UNTIL T1 DO                                   61043800
              IF IS(VAL,CSTPOOL[N]) THEN GO TO FOUND;                   61043900
         GO TO XIT;     %  NOT FOUND                                    61044000
FOUND:                                                                  61044100
         TEMPREL ~ RELADDR;                                             61044200
         IF LINK ~ TAKASYL(RELADDR~CSTPOOL[N-1])!4095 THEN              61044300
              CSTPOOL[N-1] ~ LINK | 2                                   61044400
    ELSE                                                                61044500
         IF LASTENTRY~LASTENTRY-2 = 0 THEN                              61044600
    BEGIN                                                               61044700
         LSTCST ~ 0;                                                    61044800
         MRCLEAN ~ FALSE;                                               61044900
    END ELSE                                                            61045000
         FOR N~N-1 STEP 1 UNTIL LASTENTRY DO CSTPOOL[N] ~ CSTPOOL[N+2]; 61045100
         DELINKCST ~ TRUE;                                              61045200
    XIT:                                                                61045300
    END DELINKCST;                                                      61045400
% * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 62000000
%                                                                     * 62000100
%                     ERRORS - PASSMAC                                * 62000200
%                                                                     * 62000300
% * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 62000400
PROCEDURE WRITECARD;  % 2ND PASS CARD PRINTING                          62000500
BEGIN                                                                   62000600
STREAM PROCEDURE  FORMOUT(DEST,SEGNO,REL,SYL); VALUE SEGNO,REL,SYL;     62000700
    BEGIN                                                               62000800
         DI ~ DEST;     DS ~ 3 LIT " ";                                 62000900
         SI ~ LOC SEGNO;DS ~ 4 DEC; DS ~ LIT ":";                       62001000
                        DS ~ 4 DEC; DS ~ LIT ":";                       62001100
         SI~ SI +7;     DS ~ 1 CHR; DS ~ LIT " ";                       62001200
    END FORMOUT;                                                        62001300
         IF LISTOG THEN READ(CARDIMAGE,10,WREAD[*])                     62001400
                ELSE READ(CARDIMAGE[CURCARDNB],10,WREAD[*]);            62001500
      IF HEADPRINT THEN                                                 62001600
      BEGIN HEADPRINT ~ FALSE;                                          62001700
            IF PRINTEROPEN THEN WRITE(LINE[1]);                         62001800
            PRINTEROPEN ~ TRUE;                                         62001900
         WRITE(LINE,PASS2HEADING,CURRENTLEVEL,LOCALEVEL);               62002000
      END;                                                              62002100
         WREAD[11] ~ CURCARDOR;                                         62002200
         FORMOUT(WREAD[10],SEGNO.[36:12],RELADDR.[35:10],               62002300
                   RELADDR.[45:2]);                                     62002400
         BLAND(ERROX,1);                                                62002500
         MOVE(ERROX[1],WREAD,12);                                       62002600
         IF SINGLETOG THEN WRITE(LINE,13,ERROX[*]) ELSE                 62002700
                           WRITE(RITE,13,ERROX[*]);                     62002800
END WRITECARD;                                                          62002900
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%62003000
%                  S I C   F R I A T   C R U S T U L U M               %62003100
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%62003200
PROCEDURE  GENERR(ERNUM,I);                                             62003300
         VALUE  ERNUM,I;   REAL  ERNUM,I;                               62003400
    BEGIN                                                               62003500
         BOOLEAN T;                                                     62003600
         DEFINE TMP= ERROX#; % USE DEBUG PRINT ARRAY                    62003700
         REAL P,S;                                                      62003800
         LABEL XIT;                                                     62003900
    STREAM PROCEDURE LIMITPASSED(TEMP);                                 62004000
    BEGIN                                                               62004100
         DI ~ TEMP;                                                     62004200
         DS ~44 LIT "****** DID NOT COMPILE - COMPILE ERROR LIMIT";     62004300
         DS ~12 LIT " EXCEEDED **";                                     62004400
    END LIMITPASSED ;                                                   62004500
    REAL STREAM PROCEDURE ERRORMESS(TMP,T,LERR,CURS,MESSAGE,ERNUM);     62004600
         VALUE ERNUM,T;                                                 62004700
    BEGIN                                                               62004800
         LOCAL  L;                                                      62004900
         LABEL  ERR ,REST;                                              62005000
         DI ~ TMP; CI ~ CI + T; GO TO ERR;                              62005100
         DS~8 LIT "WARNING "; L ~ DI; DI ~ DI+50; DI~DI+50;             62005200
         DS~12 LIT "WWWWWWWW    "; GO TO REST;                          62005300
    ERR: DS~8 LIT "ERROR   "; L ~ DI; DI~DI+50;DI~DI+42;                62005400
         SI ~ LERR; DS ~ 8 CHR; DS~9 LIT "XXXXXXXX ";                   62005500
         SI ~ CURS; DI ~ LERR; DS ~ 6 CHR;                              62005600
    REST:                                                               62005700
         DI ~ L; SI ~ LOC ERNUM; DS ~ 3 DEC; DS~  LIT ": ";             62005800
         SI ~ MESSAGE; 48(IF SC="*"THEN JUMP OUT ELSE                   62005900
              BEGIN TALLY ~ TALLY+1; DS~ CHR; END; );                   62006000
         DS ~3 LIT "***";                                               62006100
         ERRORMESS ~ TALLY;                                             62006200
    END ERRORMESS;                                                      62006300
    STREAM PROCEDURE RESTOF(NUX,TMP,OFSET,DICT,EC,ETC);                 62006400
         VALUE  OFSET,NUX,EC;                                           62006500
    BEGIN                                                               62006600
         DI ~ TMP;  DI ~ DI + OFSET;                                    62006700
         SI ~ DICT; SI ~ SI + 2;                                        62006800
         DS ~ NUX CHR;                                                  62006900
         DI ~ ETC;   DI ~ DI+5;                                         62007000
         SI ~ LOC EC;  DS~3 DEC;                                        62007100
         DI ~ DI-3; DS ~ 3 FILL;                                        62007200
    END RESTOF;                                                         62007300
         IF NOT ERRSTART THEN                                           62007400
    BEGIN                                                               62007500
              ERRSTART ~ TRUE;                                          62007600
              ERRORCOUNT~ 0;                                            62007700
              LITRL (LASTERR,"      ",6);                               62007800
    END;                                                                62007900
         IF NOT BOOLEAN(MESSRAY[(P~ERNUM.[39:5]),5]) THEN               62008000
              CASE P OF                                                 62008100
    BEGIN     FIL0    FIL1        % FILL ONLY RIGHT ROW OF THE ARRAY    62008200
              FIL2    FIL3        % NO ; ARE NEEDED THEY ARE IN THE     62008300
              FIL4    FIL5        % DEFINES                             62008400
              FIL6    FIL7                                              62008500
              FIL8    FIL9                                              62008600
              FIL10   FIL11                                             62008700
              FIL12   FIL13                                             62008800
              FIL14   FIL15                                             62008900
              FIL16   FIL17                                             62009000
    END OF CASE;                                                        62009100
         IF T ~ ERNUM<0                                                 62009200
         THEN IF SPECTOG AND ERNUM<0                                    62009300
              THEN GO TO XIT                                            62009400
              ELSE ERNUM ~ ABS(ERNUM)                                   62009500
         ELSE ERRORCOUNT ~ ERRORCOUNT + 1;                              62009600
         IF NOT GOTACARD THEN                                           62009700
    BEGIN                                                               62009800
         GOTACARD ~ TRUE;                                               62009900
         IF NOT DCOMM OR LISTOG THEN WRITECARD;                         62010000
    END;                                                                62010100
         IF PUNCHTOG THEN WRITE(PUNCH,10,WREAD[*]);                     62010200
         BLAND(TMP[0],15);                                              62010300
         P ~ ERRORMESS(TMP[0],T,LASTERR,CURRENTSEQ,                     62010400
              MESSRAY[P,ERNUM.[44:4]|6],ERNUM);                         62010500
         IF I GTR 0 THEN RESTOF(S~IF S~DRCT[I].SIZEF < 48-P THEN S      62010600
              ELSE 48-P,TMP[(P~P+17).[41:4]],P.[45:3],DRCT[I],ERRORCOUNT62010700
              ,TMP[14]) ELSE RESTOF(S~IF S~DISKDEX.SIZEF < 48- P THEN   62010800
              S ELSE 48-P,TMP[(P~P+17).[41:4]],P.[45:3],DISKDEX,        62010900
              ERRORCOUNT,TMP[14]);                                      62011000
         IF DCOMM THEN                                                  62011100
    BEGIN                                                               62011200
         IF LISTOG THEN WRITE(RITE,15,TMP[*]);                          62011300
         DCERR;                                                         62011400
    END ELSE                                                            62011500
         WRITE(RITE,15,TMP[*]);                                         62011600
         IF ERNUM=277 THEN CHRMODE ~ (NOT CHRMODE).[47:1];              62011700
    XIT: IF LIMITOG THEN                                                62011800
              IF ERRORCOUNT } ERRORLIMIT THEN                           62011900
    BEGIN                                                               62012000
                   LIMITPASSED(TMP[0]);                                 62012100
                   CLOSE(CARDIMAGE,PURGE);                              62012200
                   IF DCOMM THEN WRITE(TWX,7,TMP[*]);                   62012300
                   IF NOT DCOMM OR LISTOG THEN WRITE(RITE,7,TMP[*]);    62012400
                   GO TO GLOBALEND;                                     62012500
    END;                                                                62012600
    END GENERR;                                                         62012700
PROCEDURE ERR(ERNUM); VALUE ERNUM; REAL ERNUM;                          62012800
    BEGIN                                                               62012900
         REAL I;                                                        62013000
         I ~ IF ERPNT > 0 THEN IF5[ERPNT].DLNKF+1 ELSE ABS(ERPNT)+1;    62013100
         GENERR(ERNUM,I);                                               62013200
    END ERR;                                                            62013300
%%%%%%%%%%%%%%%%%%%%%%%% PASS A MACRO %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%62013400
PROCEDURE PASSMAC;                                                      63000000
BEGIN COMMENT THIS PROCEDURE READS THE INPUT FILE AND RETURNS THE       63000100
      MACRO (MACN2) AND ITS ASSOCIATED VARIABLE(VARU2).  SOURCE         63000200
      STATEMENTS AND MESSAGES ARE PRINTED AS THEY OCCUR;                63000300
LABEL LOOP,LOO;                                                         63000400
         DEFINE TMP= ERROX#; % USE DEBUG PRINT ARRAY                    63000500
REAL T;                                                                 63000600
PROCEDURE SWITCHMODE;                                                   63000700
    BEGIN                                                               63000800
         REWIND(CARDIMAGE);                                             63000900
         IF (LISTOG ~ NOT LISTOG) THEN                                  63001000
    BEGIN     % TURNING LIST ON                                         63001100
         CARDIMAGE.ACCESS ~ SERIAL;                                     63001200
         READ(CARDIMAGE[CURCARDNB+1]);                                  63001300
    END  ELSE                                                           63001400
    BEGIN     % TURNING LIST OFF                                        63001500
         PRTOG ~ CODETOG ~ FALSE;                                       63001600
         CARDIMAGE.ACCESS ~ RANDOM;                                     63001700
    END;                                                                63001800
    END SWITCHMODE;                                                     63001900
    LOOP:                                                               63002000
         CODEINDEX ~ CODEINDEX + WDSZ2;                                 63002100
    LOO:                                                                63002200
         IF CNTL2 ~(T ~ DISKRAY[CODEINDEX]).CNTL2F = 2 AND              63002300
            BOOLEAN(VARU2 ~ REAL(BOOLEAN(T) AND MASK1)) THEN            63002400
    BEGIN               % READ THE NEXT CONTROL BLOCK                   63002500
         CODEINDEX ~ 0;                                                 63002600
         READ(PASS1,MAXDISKWDS,DISKRAY[*]);                             63002700
         GO TO LOO;                                                     63002800
    END;                                                                63002900
         MACN2 ~ T.MACN2F;                                              63003000
         WDSZ2 ~ T.WDSZ2F;                                              63003100
         CODEINDEX ~ CODEINDEX + 1;                                     63003200
         IF BOOLEAN(CNTL2)THEN             % CONTROL                    63003300
    BEGIN                                                               63003400
         IF WDSZ2 ! 0 THEN                 % MESSAGE OR ERROR           63003500
    BEGIN                                                               63003600
         IF MACN2 = 2 THEN                 % MESSAGE                    63003700
    BEGIN                                                               63003800
         MOVE(TMP,DISKDEX,WDSZ2);                                       63003900
         IF SINGLETOG THEN WRITE(LINE,WDSZ2,TMP[*])                     63004000
                      ELSE WRITE(RITE,WDSZ2,TMP[*]);                    63004100
    END ELSE                                                            63004200
         GENERR(VARU2&MACN2[1:47:1],-1);                                63004300
         GO TO LOOP;                                                    63004400
    END ELSE                               % CARD OR TOGGLE SETS        63004500
         IF MACN2 ! 0 THEN                 % CARD                       63004600
    BEGIN                                                               63004700
         CURCARDNB ~ CURCARDNB + 1;                                     63004800
         CURCARDOR ~ MACN2;                                             63004900
         CARDNUMBER ~ VARU2;                                            63005000
         IF GOTACARD ~ LISTOG THEN WRITECARD;                           63005100
         IF SEQXEQT THEN                                                63005200
         IF LINETEMPREL ! RELADDR AND ERRORCOUNT=0 THEN                 63005300
    BEGIN                                                               63005400
         LINESEGINX ~  W ~ LINESEGINX  + 1;                             63005500
         LINESEG[IX] ~ ((LINETEMPREL~RELADDR) DIV 8)                    63005600
                      &CARDNUMBER[LINESEQNUM];                          63005700
    END;                                                                63005800
    END ELSE                                                            63005900
         IF BOOLEAN(VARU2.DOBF) THEN SEGTOG ~ TRUE ELSE                 63005950
         IF BOOLEAN(VARU2.DOKF) THEN WRITE(LINE[1])                     63006000
    ELSE BEGIN                                                          63006100
         IF REAL(LISTOG)!VARU2.DOLF THEN SWITCHMODE;                    63006200
         PRTOG ~(BOOLEAN(VARU2.DOMF)AND LISTOG) OR                      63006300
                (CODETOG ~ BOOLEAN(VARU2.DOCF) AND LISTOG);             63006400
         DEBUGTOG ~ BOOLEAN(VARU2.DODF);                                63006500
         INFOTOG  ~ BOOLEAN(VARU2.DOIF);                                63006600
         SPECTOG  ~ BOOLEAN(VARU2.DOSF);                                63006700
         FIBTOG   ~ BOOLEAN(VARU2.DOFF);                                63006800
         PUNCHTOG ~ BOOLEAN(VARU2.DOPF);                                63006900
         SINGLETOG~ BOOLEAN(VARU2.DO1F);                                63007000
         LIMITOG  ~ BOOLEAN(VARU2.DOEF);                                63007100
         XREFTOG ~ BOOLEAN(VARU2.DOXF);                                 63007150
    END;                                                                63007200
         GO TO LOO;                                                     63007300
    END;                                                                63007400
         V1 ~ REAL(BOOLEAN(T)AND MASK2);                                63007500
         V2 ~ T.[16:16];                                                63007600
         IF CODETOG THEN                                                63007700
    BEGIN                                                               63007800
         IF HEADPRINT THEN                                              63007900
    BEGIN                                                               63008000
         HEADPRINT ~ FALSE;                                             63008100
         PRINTEROPEN ~ TRUE;                                            63008200
         WRITE(LINE,PASS2HEADING,CURRENTLEVEL,LOCALEVEL);               63008300
    END;                                                                63008400
         MACROFORMAT(MACROOPS[MACN2],V1,V2,1,2,0,TMP);                  63008500
         WRITE(LINE,7,TMP[*]);                                          63008600
    END;                                                                63008700
END PASSMAC;                                                            63008800
PROCEDURE ARRAYDEC (TYPE,MOM,SIZE,SIZE2);  % MAKES PHONEY AIT FOR       64000000
         VALUE TYPE,MOM,SIZE,SIZE2;        % SPECIAL 19 INTRINSIC CALL  64000100
         REAL   TYPE, % 0=ORDINARY,1=SAVE,[46:1]=OWN (VARY RARE)        64000200
                MOM,  % PRT LOCATION FOR ARRAY                          64000300
                SIZE, %  SIZE OF DIM 1                                  64000400
                SIZE2;%  SIZE OF DIM 2                                  64000500
    BEGIN                                                               64000600
         AITINDEX ~ W ~ AITINDEX + 1;                                   64000700
         AIT[IX] ~ TYPE & MOM [18:33:15] &(REAL(SIZE2>0)+1)[8:38:10];   64000800
         IF BOOLEAN(TYPE) THEN ESTCORE ~ ESTCORE+SIZE                   64002200
              ELSE IF SIZE>DATAMAX1 THEN                                64002300
    BEGIN                                                               64002400
         DATAMAX2 ~ DATAMAX1;                                           64002500
         DATAMAX1 ~ SIZE;                                               64002600
    END ELSE                                                            64002700
         IF SIZE > DATAMAX2 THEN DATAMAX2 ~ SIZE;                       64002800
         W ~ MOM;                                                       64002900
         PRT[IX] ~ SIZE & SIZE2 [18:33:15];                             64003000
         IF PRTOG THEN                                                  64003100
              WRITE(LINE,ARRAYFMT,BTO(JUNK~MOM),SIZE,SIZE2);            64003200
    END ARRAYDEC;                                                       64003300
PROCEDURE SEGSTART;            % SETS UP TO START A SEGMENT             64003400
    BEGIN                                                               64003500
         LABEL XIT;     % TO FORCE SEGMENT                              64003600
         SEGCNT ~ SEGCNT +1;                                            64003700
         IF LISTOG THEN                                                 64003800
    BEGIN                                                               64003900
         IF HEADPRINT THEN                                              64004000
    BEGIN                                                               64004100
         HEADPRINT ~ FALSE;                                             64004200
         IF PRINTEROPEN THEN WRITE(LINE[1]);                            64004300
         PRINTEROPEN ~ TRUE;                                            64004400
         WRITE(LINE,PASS2HEADING,CURRENTLEVEL,LOCALEVEL);               64004500
    END;                                                                64004600
         IF NOT PRTOG THEN WRITE(LINE,SEGSTARTFMT,SEGDICTINX);          64004700
    END;                                                                64004800
         SEGNO ~ SEGDICTENT;                                            64004900
         TEMPREL ~ RELADDR ~ 0;                                         64005000
    END SEGSTART;                                                       64005100
PROCEDURE SEGDUMP(SZ,EDOC,I);                                           64005200
              % WRITES OUT SEGMENT FROM A 2-DIMENTIONAL ARRAY           64005300
              % SZ<0 SIGNIFIES:                                         64005400
              %     1. SZ IS IN WORDS (OTHERWISE IN CHARACTERS).        64005500
              %     2. WRITE OUT ONLY                                   64005600
         VALUE SZ,I;                                                    64005700
         REAL SZ,I; ARRAY EDOC[0,0];                                    64005800
    BEGIN                                                               64005900
         REAL J,S;                                                      64006000
         DEFINE IX = W.[33:8],W.[41:7]#;                                64006100
         IF SZ > 0 THEN                          % SIZE IN CHARACTERS   64006200
    BEGIN                                                               64006300
         IF MRCLEAN THEN BEGIN CONSTANTCLEAN; SZ ~ RELADDR; END;        64006400
         IF SZ ~ (SZ+7).WIX > CODEMAX2 THEN                             64006500
    BEGIN                                                               64006600
         CODEMAX3 ~ CODEMAX2;                                           64006700
         IF SZ{CODEMAX1 THEN CODEMAX2 ~ SZ ELSE                         64006800
    BEGIN                                                               64006900
         CODEMAX2 ~ CODEMAX1;                                           64007000
         CODEMAX1 ~ SZ;                                                 64007100
    END;                                                                64007200
    END ELSE IF SZ>CODEMAX3 THEN CODEMAX3 ~ SZ;                         64007300
         IF (JUNK ~ CHUNK-(DKADR MOD CHUNK))<SZ THEN DKADR ~ DKADR+JUNK;64007350
         IF LISTOG THEN                                                 64007400
              WRITE(LINE,SEGENDFMT,SEGNO,SZ);                           64007500
         IF S~SZ>1023 THEN ERR(8);     % SEG SIZE IN WORDS              64007600
         SGSIZ ~ SGSIZ + S;                                             64007700
         IF SEQXEQT THEN     % BUILD LINE DICTIONARY ENTRY              64007800
    BEGIN                                                               64007900
         W ~ SEGNO;                                                     64008000
         LINESEGINX ~ LINESEGINX + 1;                                   64008100
         LINEDICT[IX] ~ DKADR & LINESEGINX [LINESEGSIZE];               64008200
         IF LINESEGINX GTR 0 THEN                                       64008300
         SEGDUMP(-LINESEGINX  ,LINESEG,0); % DUMP LINE SEGMENT          64008400
         LINESEGINX  ~ LINETEMPREL ~ -1                                 64008500
    END;                                                                64008600
              % BUILD SEGMENT DICTIONARY ENTRY                          64008700
         W ~ SEGNO;                                                     64008800
         SEGDICT[IX] ~ SEGDICT [IX] & DKADR[33:33:15]&S[18:33:15];      64008900
    END ELSE                                     % SIZE IN WORDS        64009000
    BEGIN                                                               64009050
         S ~ SZ ~ ABS(SZ);                                              64009100
         IF (JUNK ~ CHUNK-(DKADR MOD CHUNK))<SZ THEN DKADR ~ DKADR+JUNK;64009150
    END;                                                                64009160
         IF ERRORCOUNT = 0 THEN                                         64009200
    BEGIN     % WRITE OUT CODE ONLY IF NO ERRORS                        64009300
         S ~ S+I;                                                       64009400
         W ~ I;                                                         64009500
         WHILE W<S DO                                                   64009600
    BEGIN                                                               64009700
         IF (J~W.[41:7]){ 97 THEN  % 127 - DKSEGSZ                      64009800
    BEGIN                                                               64009900
         MOVE(STK[0],EDOC[IX],DKSEGSZ);  % WRITE OUT CODE               64010000
         W ~ W + DKSEGSZ;                                               64010100
    END                                                                 64010200
    ELSE BEGIN                                                          64010300
         MOVE(STK[0],EDOC[IX],J~128-J);      % MOVE ROW                 64010400
         W ~ W+J;           % ON TO NEXT ROW                            64010500
         MOVE(STK[J],EDOC[IX],J~DKSEGSZ - J); % MOVE IN REST            64010600
         W ~ W + J;                                                     64010700
    END;                                                                64010800
         WRITE(CODE[DKADR],DKSEGSZ, STK[*]);                            64010900
         DKADR ~ DKADR + 1;                                             64011000
    END;                                                                64011100
    END;                                                                64011200
    END SEGDUMP;                                                        64011300
INTEGER PROCEDURE SEGDICTENT;                                           65000000
    BEGIN                                                               65000100
         IF PRTOG THEN                                                  65000200
              WRITE(LINE,SEGSTARTFMT,SEGDICTINX);                       65000300
         W ~ SEGDICTINX ~ (SEGDICTENT ~ SEGDICTINX) + 1;                65000400
         IF SEQXEQT THEN LINEDICT[IX] ~ -1;                             65000500
    END SEGDICTENT;                                                     65000600
INTEGER PROCEDURE GETPRTLOC;    % ASSIGNS PRT SPACE                     65000700
    BEGIN                                                               65000800
         LABEL XIT;     % TO FORCE SEGMENT                              65000900
         IF PRTOG THEN                                                  65001000
         WRITE(LINE,GETDATAFMT,BTO(NXTPRTLOC));                         65001100
         IF NXTPRTLOC ~ (GETPRTLOC~NXTPRTLOC)+1 > 1023 THEN ERR(274);   65001200
    END GETPRTLOC;                                                      65001300
INTEGER  PROCEDURE BUILDSEGDICT(BASE,SEGDICTINX);                       65001400
         VALUE     BASE,SEGDICTINX;                                     65001500
         REAL      BASE,      % PRT ADDRESS                             65001600
                   SEGDICTINX;% SEGMENT NUMBER + SEGDICT INDEX          65001700
    BEGIN                                                               65001800
         REAL T;                                                        65001900
         BUILDSEGDICT ~ BASE ~ IF BASE=0 THEN GETPRTLOC ELSE BASE;      65002000
         W ~ SEGDICTINX;                                                65002100
         SEGDICT[IX] ~ (T~SEGDICT[IX]) & BASE [8:38:10];                65002200
         W ~ BASE;                                                      65002300
         IF T.[8:10]!BASE THEN                                          65002400
         PRT[IX] ~-((RELADDR.WIX)&    % WORD OFSET TO SEGMENT           65002500
                     SEGDICTINX[18:33:15]& % SEGDICT ENTRY              65002600
                    (IF T!0 THEN T.[8:10] ELSE                          65002700
                        SEGDICTINX) [7:37:11]&                          65002800
                   (REAL(T=0))[6:47:1]&%STOPPER                         65002900
                    5 [3:45:3]);                                        65003000
    END BUILDSEGDICT;                                                   65003100
PROCEDURE SEGWRAPUP;                                                    65003200
    BEGIN                                                               65003300
         REAL I,T,TYPE,X,LINK,SAVTEMPREL;                               65003400
         I ~ LBLSTRT;                                                   65003500
         ADJUST;        % JUST IN CASE WE MUST GO HERE                  65003600
         TEMPREL ~ RELADDR;                                             65003700
         IF ERRORCOUNT = 0 THEN        % DONT FIXUP IF UNECESS          65003750
         WHILE I ! 0 DO                                                 65003800
    BEGIN     % FIX UP BRANCH LINKS                                     65003900
         T ~ IF2[I].FXF;                                                65004000
         IF2[I].FXF ~ 0;                                                65004100
         WHILE (LINK ~ T) ! 0 DO                                        65004200
    BEGIN                                                               65004300
         T ~ GETLINK(LINK,TYPE);                                        65004400
         IF (X~IF1[I].BADDF)=0 THEN                                     65004500
         IF(BOOLEAN(T1~IF0[I].SNLF) OR BOOLEAN(IF0[I-IFSZ].SNLF)) AND   65004600
              (X~IF1[I + T1|IFSZ - (1-T1)|IFSZ].BADDF)!0                65004700
         THEN IF1[I].BADDF ~ X ELSE                                     65004800
    BEGIN                                                               65004900
         IF1[I].BADDF ~ X ~ GETPRTLOC;                                  65005000
         IF0[I].PRF ~ 1;                                                65005100
    END;                                                                65005200
         IF X>511 THEN  % YIPE - ONLY TWO SYLL AVAIL BRANCH TO END      65005400
    BEGIN               %        SO WE WILL HAVE ROOM FOR XRT.          65005500
         EMITBRANCH(LINK,SAVTEMPREL~TEMPREL,TYPE);                      65005600
         RELADDR ~ SAVTEMPREL;                                          65005700
         VALUCALL(X);   %THIS GENS THE XRT                              65005800
         EMITO(BFW);    ADJUST;                                         65005900
         TEMPREL ~ RELADDR;                                             65006000
    END ELSE                                                            65006100
    BEGIN                                                               65006200
         RELADDR ~ LINK;                                                65006250
         VALUCALL(X);                                                   65006300
         EMITO(TYPE);                                                   65006400
    END;                                                                65006500
    END;                                                                65006600
         I ~ IF4[I].LBLSTRTF;                                           65006700
    END ELSE                           % CLEAN UP TABLE ENTRIES         65006800
         WHILE I ! 0 DO                                                 65006810
    BEGIN                                                               65006820
         IF2[I].FXF ~ 0;                                                65006830
         I ~ IF4[I].LBLSTRTF;                                           65006840
    END;                                                                65006850
         LBLSTRT ~ 0;                                                   65006900
         RELADDR ~ TEMPREL;                                             65007000
    END SEGWRAPUP;                                                      65007100
PROCEDURE WRITEDATA(BASE,SZ,PRTLOC);   %MAKES TYPE TWO SEGMENTS         65007200
    VALUE     SZ,PRTLOC;               %WHICH ARE READ ONLY             65007300
    REAL      SZ,       % SIZE IN WORDS                                 65007400
              PRTLOC;   % PRT LOCATION FOR DATA BLOCK                   65007500
    ARRAY BASE[0]; % HOLDS DATA TO BE WRITTEN                           65007600
    BEGIN                                                               65007700
         INTEGER I;                                                     65007800
         DEFINE ADR = I#;                                               65007900
         W ~ ADR ~ SEGDICTENT;                                          65008000
         IF SZ>DATAMAX1 THEN DATAMAX1 ~ SZ;                             65008100
              % BUILD READ ONLY DESC IN SEGMENT DICTIONARY              65008200
         IF (JUNK ~ CHUNK-(DKADR MOD CHUNK))<SZ THEN DKADR ~ DKADR+JUNK;65008250
         SEGDICT[IX] ~ -(DKADR& SZ [18:33:15] & PRTLOC [8:38:10]);      65008300
         W ~ PRTLOC;                                                    65008400
         PRT[IX]~-(0 & ADR [18:33:15] & ADR[7:37:11]&9 [3:44:4]);       65008500
         SGSIZ ~ SGSIZ + SZ;                                            65008600
         IF LISTOG THEN WRITE(LINE,WRITEDATAFMT,SZ);                    65008700
         IF ERRORCOUNT = 0 THEN                                         65008800
    BEGIN                                                               65008900
         I ~ 0;                                                         65009000
         IF SZ { DKSEGSZ THEN                                           65009100
    BEGIN                                                               65009200
         WRITE(CODE[DKADR],DKSEGSZ,BASE[*]);                            65009300
         DKADR ~ DKADR +1;                                              65009400
    END  ELSE                                                           65009500
         WHILE SZ > 0 DO                                                65009600
    BEGIN                                                               65009700
         MOVE (STK[0],BASE[I],IF SZ>DKSEGSZ THEN DKSEGSZ ELSE SZ);      65009800
         WRITE(CODE[DKADR],DKSEGSZ, STK[*]);                            65009900
         DKADR ~ DKADR + 1;                                             65010000
         SZ ~ SZ - DKSEGSZ;                                             65010100
         I ~ I + DKSEGSZ;                                               65010200
    END;                                                                65010300
    END;                                                                65010400
    END WRITEDATA;                                                      65010500
PROCEDURE EXCHNG(PSUDOEXCH); VALUE PSUDOEXCH; BOOLEAN PSUDOEXCH;FORWARD;65010600
PROCEDURE EMITSTRING(SOURCE,SZ,FLG);                                    65010700
         VALUE  SZ,FLG;                                                 65010800
         REAL   SZ;     ARRAY SOURCE[0];  BOOLEAN FLG;                  65010900
    BEGIN                                                               65011000
         DEFINE ATYP = PS[PSX].[2:5]#, PST = [2:5]#, PSL = [20:13]#;    65011100
         % USED TO GET VALUE TO STK OR POINTER TO IT ON STACK           65011200
         IF SZ LSS 8 AND NOT FLG THEN                                   65011300
    BEGIN                                                               65011400
         IF ATYP=10 THEN PS[PSX].PSL ~ SZ ELSE PS[PSX-1].PSL ~ SZ;      65011500
         IF AHL THEN SOURCE[0] ~ GETCHARS(SOURCE,0,SZ);                 65011600
              EMITNUM(SOURCE[0]);                                       65011700
              ONSTACK ~ 1;                                              65011800
              IF NOEXCH THEN NOEXCH~FALSE ELSE EXCHNG(FALSE);           65011900
                        % SEE REALEXCH--GET DN ON TOP OF STACK          65012000
    END ELSE                                                            65012100
    BEGIN                                                               65012200
         IF ATYP=10  THEN PS[PSX].PST ~ 12  ELSE  PS[PSX-1].PST ~ 12;   65012300
                             % CHANGE NNL TO NNS (DESC TO C-POOL)       65012400
         IF POOLINDEX+SZ >(POOLMAX+1)|8 THEN                            65012500
    BEGIN                                                               65012600
         IF FIBTOG THEN MONOCTL1("CSTPOOL",CONSTANTPOOL,POOLINDEX.WIX); 65012700
         WRITEDATA(CONSTANTPOOL,POOLINDEX.WIX,CURRENTPOOLADR);          65012800
         CURRENTPOOLADR ~ GETPRTLOC;                                    65012900
         POOLINDEX ~ 0;                                                 65013000
    END ELSE                                                            65013100
         IF CURRENTPOOLADR=0 THEN CURRENTPOOLADR ~ GETPRTLOC;           65013200
         EMITL(POOLINDEX.WIX);                    % WORD OFSET          65013300
         NAMECALL(SCURRENTPOOLADR~CURRENTPOOLADR);% DESC CST POOL       65013400
         IF NOEXCH THEN NOEXCH ~ FALSE ELSE EXCHNG(FALSE);% SEE REALEXCH65013500
                                                 % GET DN ON TOP OF STK 65013600
         SVNNL ~ TRUE;                                                  65013700
         MOVE(CONSTANTPOOL[POOLINDEX.WIX], SOURCE[0],(SZ+7).WIX);       65013800
         POOLINDEX ~ (SPOOLINDEX ~ POOLINDEX) +              % MAKE SURE65013900
                     REAL(BOOLEAN(SZ+7) AND NOT BOOLEAN(7)); %WORD BOUND65014000
    END;                                                                65014100
END EMITSTRING;                                                         65014200
    DEFINE CALLINTRIN(NU) = CALLINTRINSIC(NU,0)#;                       65014300
REAL PROCEDURE CALLINTRINSIC(NUMBE,BASE);                               65014400
         VALUE NUMBE,BASE;                                              65014500
         REAL  NUMBE,BASE;                                              65014600
    BEGIN                                                               65014700
         CALLINTRINSIC ~ BUILDSEGDICT(BASE,JUNK~SEGDICTENT);            65014800
         % W IS SET IN BUILDSEGDICTENT                                  65014900
         PRT[IX] ~ PRT[IX] & 0[33:33:15];                               65015000
         W ~ JUNK;                                                      65015100
         SEGDICT[IX] ~ SEGDICT[IX] & NUMBE [33:33:15]& 1 [2:47:1];      65015200
    END CALLINTRINSIC;                                                  65015300
INTEGER PROCEDURE MACQUAL;   % CHECKS FOR QUALIFICATION - PASS 2        70000000
    BEGIN                                                               70000100
         REAL S,ADR,T;                                                  70000200
         LABEL XIT;                                                     70000300
         PASSMAC; S ~ -1;                                               70000400
         WHILE MACN2 ! XXXXM DO                                         70000500
    BEGIN                                                               70000600
         STK[S~S+1] ~ DICT[VARU2.IR,VARU2.IC].NXIF;                     70000700
         PASSMAC;                                                       70000800
    END;                                                                70000900
         ERPNT ~ STK[S];                                                70001000
         IF S = - 1 THEN GO TO XIT;                                     70001100
         IF S=0 THEN ADR ~ STK[0]                                       70001200
         ELSE                                                           70001300
    BEGIN                                                               70001400
         IF (T ~ QUALCHECK(0,0,S)) ! 1 THEN                             70001500
          IF T =0 THEN ERR(48) ELSE ERR(49);                            70001600
         ADR ~ Q.NXIF;                                                  70001700
    END;                                                                70001800
    XIT:                                                                70001900
         IF (MACQUAL ~ ADR) = 0 THEN ERR(47);                           70002000
    END MACQUAL;                                                        70002100
PROCEDURE DEPMP (INDEX); VALUE INDEX; REAL INDEX;                       70002200
    BEGIN     COMMENT * * * HANDLES:                                    70002300
                   OCCURS ... DEPENDING ON DATA-NAME                    70002400
                   SIZE IS ... DEPENDING ON DATA-NAME;                  70002500
    REAL T,I;                                                           70002600
         IF0[INDEX].OCDF ~ T ~ MACQUAL;                                 70002700
         IF (I~IF2[T]).SUBF!0 OR I.VARF=1 THEN                          70002800
              BEGIN ERPNT ~ T; ERR(94) END;                             70002900
         IF I.CLF!NM OR I.FSZF!0 THEN                                   70003000
              BEGIN ERPNT ~ T; ERR(13) END;                             70003100
         IF BOOLEAN(IF2[INDEX-3].VARF) THEN                             70003200
    BEGIN                                                               70003300
         INDEX ~ INDEX-3;                                               70003400
         WHILE IF0[INDEX~INDEX+6].LVLF=88 DO IF3[INDEX].SZDF ~ T;       70003500
    END;                                                                70003600
    END DEPMP;                                                          70003700
PROCEDURE KEYMP;                                                        70003800
    BEGIN     COMMENT * * * KEY IS DATA-NAME;                           70003900
    REAL T,I;                                                           70004000
         IF (T~VARU2) = (I~MACQUAL) OR I > T AND I < IF0[T].SCOPE THEN  70004100
         IF IF2[T].SUBF = IF2[I].SUBF THEN                              70004200
         ELSE BEGIN ERPNT~I; ERR(104) END                               70004300
         ELSE BEGIN ERPNT~I; ERR(170) END ;COMMENT ILLEGAL KEY ITEM;    70004400
    END  KEYMP;                                                         70004500
PROCEDURE ADCMP;   % DECLARES ARRAYS FROM ADCM MACRO                    70004600
    BEGIN                                                               70004700
         LABEL XIT;                                                     70004800
         REAL T1;                                                       70004900
         IF V2!0 THEN                                                   70005000
         IF V1=1 THEN   % 77 LEVEL ARRAYS                               70005100
    BEGIN                                                               70005200
         IF NOT BOOLEAN(IF3[V2].DAYF) THEN GO TO XIT;                   70005300
         ARRAYDEC(0,IF3[V2].BADDF,(IF1[V2].OFSF+7).WIX,0); %MAKE DECL   70005400
         IF1[V2].OFSF ~ 0;   % SET OFSET TO ZERO                        70005500
         IF3[V2].DAYF ~ 0;                                              70005600
    END ELSE ELSE  % 01 ARRAYS                                          70005700
         IF BOOLEAN (IF3[V1].DAYF) THEN                                 70005800
    BEGIN                                                               70005900
         ARRAYDEC(T1~REAL(IF0[V1].SCF=FDV),IF3[V1].BADDF,               70006000
                 (IF1[T ~IF BOOLEAN(T1) THEN IF4[V1].RCLNK ELSE V1].LGHF70006100
                 + 7).WIX,0);                                           70006200
         IF BOOLEAN (T1) THEN                                           70006300
    BEGIN                                                               70006400
         ARRAYDEC(1,V2~IF4[V1].FLLNK,27+(T1~FIB[IF0[V1].FIBF,13].NBUFF) 70006500
                   ,0);                                                 70006600
         EMITL(AITINDEX);    NAMECALL(AITX);     EMITO(DUP);            70006700
         EMITO(LODD); EMITO(CHSN);EMITO(EXCH); EMITO(STD);              70006800
         EMITL(T1~T1+5); NAMECALL(V2);                                  70006900
         EMITL(22);     EMITD(38,8,10);     EMITL(2); NAMECALL(V2);     70007000
         EMITO(SND);    EMITL(0); EMITO(LNOT);   EMITL(T1-2);           70007100
         NAMECALL(V2);  EMITO(STD);                                     70007200
         IF2[V1].FXF ~ T ~ SEGDICTENT;                                  70007300
         EMITL(T);      EMITL(7);      EMITO(COM);                      70007310
         EMITO(DEL); EMITO(DEL);                                        70007400
         IF BOOLEAN(IF3[T~V1+6].LRF) THEN                               70007500
              EMITNUM(((IF1[T].LGHF+7) DIV 8 + 8) | 1073741824)         70007600
         ELSE EMITNUM("+00000");                                        70007700
         EMITL(3); NAMECALL(V2);  EMITO(SND);                           70007800
         EMITL(4); NAMECALL(V2);  EMITO(STD);                           70007900
         EMITNUM("+000|00"); EMITO(MDS);                                70008000
         FOR V1~0 STEP 1 UNTIL T1-6 DO                                  70008100
    BEGIN                                                               70008200
         EMITL(5+V1);   NAMECALL(V2);  % MAKE DUMMY IOD                 70008300
         EMITO(SND);                                                    70008400
    END;                                                                70008500
         RELADDR ~ (TEMPREL ~ RELADDR) -2;                              70008600
         EMITO(STD);                                                    70008700
    END;                                                                70008800
    END;                                                                70008900
         IF RELADDR GTR 6400 THEN  % SEGMENT AT ABOUT 800 WORDS         70009000
    BEGIN                                                               70009100
              VALUCALL(T1~GETPRTLOC);   %SET UP BRANCH TO NEXT SEG      70009200
              EMITO(BFW);                                               70009300
              SEGEND(RELADDR);                                          70009400
              SEGSTART;                                                 70009500
              T1~ BUILDSEGDICT(T1,SEGNO);                               70009600
    END;                                                                70009700
    XIT:                                                                70009800
    END ADCMP;                                                          70009900
PROCEDURE KBLSTARTP;                                                    70010000
    BEGIN                                                               70010100
         LABEL XIT;       % TO FORCE SEGMENT;                           70010200
         SEGSTART;   % PROCEDURE TO GEN F+ CELLS                        70010600
         T ~BUILDSEGDICT(PERFORMGEN,SEGNO);                             70010700
         FOR I ~ 0 STEP 1 UNTIL FMAX DO EMITL(0); % F+1 THRU FMAX+1     70010800
         VALUCALL(FMINUS2);  % GET REAL PROCEDURE AND BRANCH            70010900
         EMITO(XRT);         % JUST IN CASE ITS IN THE OTHER HALF OF PRT70011000
         EMITO(LODD);                                                   70011100
         EMITO(BFW );                                                   70011200
         SEGEND(RELADDR);                                               70011300
         SEGSTART;                                                      70011400
         RELADDR ~ 16;            % TO BY PASS OUR PERFORM              70011500
         INITZE ~ BUILDSEGDICT(INITZE,SEGNO); % CODE TO INITILIZE ARRAYS70011600
         RELADDR ~ 0;                                                   70011700
         T ~ CALLINTRINSIC(  2,ARRYDECINT); %INTRINSIC INTRINSIC        70011800
         T ~ CALLINTRINSIC(115,COBOLRANDM); % COBOL DISK INTRINSIC      70011900
         T ~ CALLINTRINSIC( 21,COBOLFCR);   % COBOL FILE CONTROL        70012000
         T ~ CALLINTRINSIC(114,COBOLIO);    % COBOL NON-DISK IO         70012100
         T ~ CALLINTRINSIC(105,INCONVERTS); % DECIMAL TO OCTAL          70012200
         T ~ CALLINTRINSIC( 53,DMOD);       % DOUBLE PRECISION MOD      70012300
         T ~ CALLINTRINSIC(104,ATTRIBUTE);  % ATTRIBUTE HANDLING INT    70012400
         T ~ CALLINTRINSIC(106,OUTCONVERT); % OCTAL TO DECIMAL          70012500
         WRITEDATA(TEN, 54,POWERTEN);                                   70012600
         PSX ~ 2;  % SET PSUDO STACK TO 2                               70012700
         EMITO(MKS);              % SET SUB PROGRAM FF                  70012800
         EMITL(INITZE);           % BY PERFORMING INITALIZE             70012900
         EMITL(0);                % OF SET BUILT IN PROGRAM DESC        70013000
         VALUCALL(PERFORMGEN);    %                                     70013100
         EMITL(0);                % IF WE COME BACK GIVE AN INVALID     70013200
         EMITO(COM);              % END OF JOB TO THE PROGRAM           70013300
         RELADDR ~ 16;                                                  70013400
         PRT[0,BLOCKCTR] ~ 1;                                           70013500
         EMITO(MKS);              % DECLARE ALL                         70013600
         EMITL(19);               %             ARRAYS                  70013650
         VALUCALL(ARRYDECINT);    %                    AT ONCE          70013700
         IF LSUB ! 0 THEN ARRAYDEC(0,JUNKM~GETPRTLOC,LSUB,0);% MONITOR  70013800
         ARRAYDEC(0,JUNKA~GETPRTLOC,DATAMAX,0);                         70013900
    END KBLSTARTP;                                                      70014000
PROCEDURE ENDIED;                                                       70014100
    BEGIN                                                               70014200
         LABEL XIT;     % TO FORCE SEGMENT                              70014300
         PRODFLG ~ TRUE;                                                70014400
         IF POOLINDEX > 80 THEN        % DUMP CONSTANT POOL             70014500
    BEGIN                                                               70014600
         IF FIBTOG THEN MONOCTL1("CSTPOOL",CONSTANTPOOL,POOLINDEX.WIX); 70014700
         WRITEDATA(CONSTANTPOOL,POOLINDEX.WIX,CURRENTPOOLADR);          70014800
         CURRENTPOOLADR ~ GETPRTLOC;                                    70014900
         POOLINDEX ~ 0;                                                 70015000
    END;                                                                70015100
         NAMECALL(FRSTSEG~GETPRTLOC);  % CALL FIRST SEG OF PROGRAM      70015200
         EMITO(BFW);                   % GO THERE                       70015300
         SEGEND(RELADDR);                                               70015400
         ESTCORE ~ ESTCORE+DATAMAX1+DATAMAX2;                           70015500
         DATAMAX1 ~ DATAMAX2 ~ 0;                                       70015600
         IF CNRELADDR ! 0 THEN                                          70015700
    BEGIN                                                               70015800
         SEGNO ~ CNSEGNO;                                               70015900
         SWAP (EDOC,TDOC);                                              70016000
         SEGEND(RELADDR ~CNRELADDR);        % DUMP 88 LEVEL CODE        70016100
         SWAP (EDOC,TDOC);                                              70016200
    END;                                                                70016300
         SEGSTART;      % DUMP AIT FOR INTRINSIC INTRINSIC TO USE       70016400
         SWAP(EDOC,AIT);                                                70016500
         W ~ SEGNO;                                                     70016600
         SEGDICT[IX] ~ -(0& PRTJUNK[8:38:10]);   % THIS IS CORRECT      70016700
         SEGEND((EDOC[0,0]+1)|8);                % CHECK INITILIZE      70016800
         W ~ PRTJUNK;                            % TEMP TO KEEP DESC    70016900
         PRT[IX] ~ -(0&SEGNO[18:33:15]&SEGNO[7:37:11]&9[3:44:4]);       70017000
         % THE ABOVE WILL BE PICKED UP BY RUN TIME INITILIZE            70017100
         SWAP(EDOC,AIT);                                                70017200
    END ENDIED;                                                         70017300
PROCEDURE TEED(INDEX);  % THIS DOES THE ACTUAL PICTURE EDITING BASED ON 70017400
         VALUE INDEX;   % THE EDITABLE BUILT IN ELEMITEM                70017500
         REAL  INDEX;   % THE POINTERS ARE ASSUMED SET AND ALL DIDDLING 70017600
    BEGIN               % ARROUND IS DONE - SO LETS PLAY COBOL EDIT     70017700
         REAL ED,NEXT,CHARS,TBNCNT;                                     70017800
         BOOLEAN LEADSIGN,FLOT,CONT;                                    70017900
         LABEL   TIP ,TOP  ,WRAPUP,DOIT,TOIT;                           70018000
         DEFINE                                                         70018100
              STOPIT    = BOOLEAN(ED.[1:1])#, % THIS STOPS EDITING      70018200
              INST      = ED.[9:9] #,         % INSTRUCTION             70018300
              COUNT     = ED.[18:15] #,       % NUMBER OF TIMES         70018400
              CONDIT    = ED.[33:1] #,        % FLOATING SIGN IN CHARS  70018500
              FLOAT     = ED.[34:1] #,        % FLOAT CHAR OR SIGN      70018600
              TEST      = ED.[33:2] #,        % BOTH THE ABOVE          70018700
              FIRSTHING = BOOLEAN(ED.[35:1])#,% LEADING UNARY SIGN      70018800
              CHAR1     = ED.[42:6] #,        % USUAL INSERT CHAR       70018900
              CHAR2     = ED.[36:6] #,        % OTHER CHARACTER         70019000
              CHARACTERS= ED.[36:12]#,        % BOTH CHARACTERS         70019100
              NEXTINST  = NEXT.[9:9]#,        % NEXT INSTRUCTION        70019200
              NXTSTOP   = BOOLEAN(NEXT.[1:1])#,%NEXT IS STOP BIT        70019300
              NEXTCNT   = NEXT.[18:15]#;      % NEXT NUMBER OF TIMES    70019400
         ESZ ~ IF4[ABS(INDEX)].EDTF;             % GET EDIT INDEX       70019500
TIP:                                                                    70019600
         NEXT ~ EDITABLE[(ESZ ~ ESZ + 1).[36:5],ESZ.[41:7]];            70019700
TOP:     IF STOPIT THEN GO TO WRAPUP;                                   70019800
         ED   ~ NEXT;                                                   70019900
         NEXT ~ EDITABLE[(ESZ ~ ESZ + 1).[36:5],ESZ.[41:7]];            70020000
         IF CODETOG THEN                                                70020100
    BEGIN                                                               70020200
         OCTWRD(TMP[0],ED);                                             70020300
         WRITE(LINE,3,TMP[*]);         % MONITOR EDIT INFO              70020400
    END;                                                                70020500
         IF JUNK ~ INST = TRS OR JUNK = TRN THEN                        70020600
    BEGIN                                                               70020700
         EMITVAR(COUNT,JUNK);  % FOR TRS & TRN ONLY THE COUNT FIELD IS  70020800
         GO TO TOP;            % IMPORTANT                              70020900
    END;                                                                70021000
         IF JUNK = TBN THEN                                             70021100
    BEGIN                                                               70021200
         IF NOT FLOT THEN                                               70021300
    BEGIN                                                               70021400
              EMITVAR(1,SDA);                                           70021500
              FLOT  ~ TRUE;                                             70021600
    END;                                                                70021700
         CHARS ~ IF CHAR1 ! 0 THEN CHAR1 ELSE " ";                      70021800
         TBNCNT ~ TBNCNT + COUNT;                                       70021900
         IF NOT STOPIT AND NEXTINST=TRN THEN                            70022000
    BEGIN                                                               70022100
         IF CODETOG THEN                                                70022200
    BEGIN                                                               70022300
         OCTWRD(TMP[0],NEXT);                                           70022400
         WRITE(LINE,3,TMP[*]);                                          70022500
    END;                                                                70022600
         EMITVAR(JUNK~NEXTCNT+COUNT,TRN);                               70022700
         IF NXTSTOP THEN GO TO WRAPUP ELSE GO TO TIP;                   70022800
    END;                                                                70022900
         EMITVAR(COUNT,TRN);                                            70023000
         GO TO TOP;                                                     70023100
    END;                                                                70023200
         % THE ONLY THING LEFT IS INSERT CHARACTERS                     70023300
         IF JUNK ~ TEST = 0 THEN % NO FLOAT                             70023400
    BEGIN                        % NO CONDITIONAL INSERT                70023500
DOIT:    IF COUNT>2 THEN                                                70023600
    BEGIN                                                               70023700
         FILLWITHCHR(TMP[0],0,CHAR1,COUNT);                             70023800
         EMITPROGCHR(TMP,COUNT);                                        70023900
    END ELSE                                                            70024000
         EMITCHAR(ED&ED[36:42:6],COUNT);                                70024100
         GO TO TOP;                                                     70024200
    END;                                                                70024300
         IF JUNK = 1 THEN        % YES FLOAT                            70024400
    BEGIN                        % NO  CONDITIONAL INSERT               70024500
TOIT:    IF NOT FLOT THEN                                               70024600
    BEGIN                                                               70024700
         FLOT ~ TRUE;                                                   70024800
         CHARS~ CHARACTERS;                                             70024900
         EMITVAR(1,SDA);                                                70025000
    END;                                                                70025100
         TBNCNT ~ TBNCNT + COUNT;                                       70025200
         IF TEST ! 3 THEN GO TO DOIT;                                   70025300
         EMITVAR(COUNT,TRN);                                            70025400
         GO TO TOP;                                                     70025500
    END;                                                                70025600
         IF JUNK = 2 THEN        % NO FLOAT                             70025700
    BEGIN                        % YES CONDITIONAL INSERT               70025800
         IF FIRSTHING THEN                                              70025900
    BEGIN                                                               70026000
              LEADSIGN ~ TRUE;                                          70026100
              EMITVAR(2+REAL(INDEX < 0),SDA);                           70026200
              GO TO DOIT;                                               70026300
    END;                                                                70026400
         EMITJUMP(RELADDR,RELADDR+8,JFC);                               70026500
         EMITCHAR(IF COUNT=2 THEN CHARACTERS ELSE CHAR2,COUNT);         70026600
         EMITJUMP(RELADDR,ARROUND1,JFW);                                70026700
         EMITCHAR(IF COUNT=2 THEN "  "       ELSE CHAR1,COUNT);         70026800
         GO TO TOP;                                                     70026900
    END;                         % YES FLOAT                            70027000
         CONT ~ TRUE;            % YES CONDITIONAL INSERT               70027100
         GO TO TOIT;                                                    70027200
WRAPUP:                                                                 70027300
         IF LEADSIGN THEN    % LEADING SINGLE SIGN INSERT               70027400
    BEGIN                                                               70027500
         EMITJUMP(RELADDR,RELADDR+8,JFC);                               70027600
         EMITVAR(2+ REAL(INDEX<0),RDA);                                 70027700
         EMITCHAR("-",1);                                               70027800
    END;                                                                70027900
         IF FLOT THEN                                                   70028000
    BEGIN                                                               70028100
         EMITVAR(1,RDA);                                                70028200
         IF FLOT ~ CHARS.[36:6] = "-" THEN       % SIGNED INSERT        70028300
    BEGIN                                                               70028400
         EMITVAR(0,SEC);                                                70028500
         EMITJUMP(RELADDR,RELADDR+ 4,JFC);                              70028600
         EMITVAR(1,SEC);                                                70028700
    END;                                                                70028800
         IF CHARS.[42:6]="*" THEN      % ASTER INSERT                   70028900
    BEGIN                                                               70029000
         EMITVAR(1,RSA);                                                70029100
         EMITVAR(TBNCNT,BNS);                                           70029200
         EMITVAR("0",TEL);                                              70029300
         EMITJUMP(RELADDR,RELADDR+10,JNC);                              70029400
         EMITCHAR("*",1);                                               70029500
         EMITVAR(1,SFS);                                                70029600
         EMITO(ENS);                                                    70029700
    END ELSE BEGIN                                                      70029800
         EMITVAR(TBNCNT,TBN);          % THIS DOES DEBLANKING           70029900
         IF CONT THEN                  % FLOATING SIGN                  70030000
    BEGIN                                                               70030100
         IF NOT FLOT THEN                      % UNSIGNED INSERT        70030200
    BEGIN                                                               70030300
         EMITVAR(1,SRD);                                                70030400
         EMITCHAR(CHARS,1);                                             70030500
    END ELSE BEGIN           % SIGNED FLOAT                             70030600
         EMITVAR(1,STC);               % SAVE SIGN IN F-1               70030700
         IF CHARS.[42:6] ! " " THEN         % THERE IS A CHAR TO INSERT 70030800
    BEGIN                                                               70030900
              EMITVAR(1,SRD);                                           70031000
              EMITCHAR(CHARS,1);                                        70031100
    END;                                                                70031200
         EMITVAR(1,CRF);                                                70031300
         EMITVAR(4,BNS);                                                70031400
         EMITVAR(1,SRD);                                                70031500
         EMITCHAR(CHARS.[36:6],1);                                      70031600
         EMITO(ENS);                                                    70031700
    END;                                                                70031800
    END;                                                                70031900
    END;                                                                70032000
    END;                                                                70032100
         EMITO(CMX);                                                    70032200
    END  TEED;                                                          70032300
DEFINE  EXCHANGE = EXCHNG(TRUE)#,% EXCHANGE BOTH STACKS                 70032400
        REALEXCH = EXCHNG(FALSE)#;%EXCHANGE  ONLY THE REAL STACK        70032500
PROCEDURE EXCHNG(PSUDOEXCH);           % HANDLES EXCHANGES              70032600
         VALUE PSUDOEXCH;    BOOLEAN PSUDOEXCH;                         70032700
    BEGIN                                                               70032800
    DEFINE                                                              70032900
         AVAL = PS[PSX] #, %  A-REG                                     70033000
         BVAL = PS[PSX-1] #,% B-REG                                     70033100
         PSL  = [20:13]  #, % LENGTH                                    70033200
         PSSIN= [16:1]   #, % IF OFSET IS IN STACK                      70033300
         PST  = [02:5]   #; % TYPE                                      70033400
    REAL JUNK,T;                                                        70033500
         IF (JUNK ~ IF (T~AVAL.PST)<4 OR T=12 THEN 11+AVAL.PSSIN        70033600
              ELSE AVAL.PSL)<12 AND                                     70033700
            (T ~ IF (T~BVAL.PST)<4 OR T=12 THEN 11+BVAL.PSSIN           70033800
              ELSE BVAL.PSL)<12 THEN                                    70033900
              EMITO(EXCH)                                               70034000
    ELSE BEGIN                                                          70034100
         IF PSUDOEXCH.[46:1] THEN XCH(JUNK,T);                          70034200
         IF JUNK GTR 11 THEN EMITPAIR(JUNKEX1,STD);                     70034300
         IF T  >   11 THEN                                              70034400
    BEGIN                                                               70034500
              EMITO(EXCH);                                              70034600
              EMITPAIR(JUNKEX2,STD);                                    70034700
    END;                                                                70034800
         IF JUNK > 11 THEN                                              70034900
    BEGIN                                                               70035000
              EMITO(EXCH);                                              70035100
              EMITPAIR(JUNKEX1,LODD);                                   70035200
    END;                                                                70035300
         EMITO(EXCH);                                                   70035400
         IF T GTR 11 THEN EMITPAIR(JUNKEX2,LODD);                       70035500
    END;                                                                70035600
         IF PSUDOEXCH THEN XCH(AVAL,BVAL);  % EXCHANGE PSUDO STACK      70035700
    END EXCHANGE;                                                       70035800
PROCEDURE EDITDEC(WRD2);          % MOVES DECIMAL FIELD FROM SOURE TO   70035900
         VALUE WRD2; REAL WRD2;   % DEST (POINTERS ASSUMED SET UP),     70036000
    BEGIN                         % INSERTING SIGN AND DECIMAL POINT    70036100
         BOOLEAN DP; REAL SGN,SZ; % ACCORDING TO SPECS OF WRD2=IF2      70036200
         SZ ~ WRD2.SZF;                                                 70036300
         IF (SGN~WRD2.SGTF)=2 THEN                                      70036400
    BEGIN                                             % "J" FIELD       70036500
         SZ ~ SZ-1;                                                     70036600
         EMITVAR(1,TRN);                                                70036700
         EMITJUMP(RELADDR,RELADDR+6,JFC);                               70036800
         EMITCHAR("-",1);                                               70036900
         EMITJUMP(RELADDR,RELADDR+4,JFW);                               70037000
         EMITCHAR("+",1);                                               70037100
    END;                                                                70037200
         EMITVAR(1,SDA);                                                70037300
         IF SGN=1 THEN EMITVAR(1,SFD);                                  70037400
         IF DP ~ (T~WRD2.FSZF)>0 THEN                                   70037500
    BEGIN                                     % INSERT DECIMAL POINT    70037600
         SZ ~ SZ-T;                                                     70037700
         EMITVAR(SZ,TRS);                                               70037800
         EMITCHAR(".",1);                                               70037900
         EMITVAR(T,TRN);                                                70038000
    END ELSE EMITVAR(SZ,TRN);                                           70038100
         EMITVAR(1,RDA);               % SPACE FOR SIGN                 70038200
         IF SGN=1 THEN                                                  70038300
    BEGIN                              % "S" FIELD                      70038400
         EMITJUMP(RELADDR,RELADDR+8,JFC);     % TRN SET TFFF IF SGN NEG 70038500
         EMITCHAR("-",1);                                               70038600
         EMITJUMP(RELADDR,RELADDR+6,JFW);                               70038700
         EMITCHAR("+",1);                                               70038800
    END;                                                                70038900
         IF WRD2.SZF>1 AND (T~SZ-REAL(SGN!2))>0 THEN EMITVAR(T,TBN);    70039000
    END EDITDEC;                                                        70039100
    BEGIN                                                               80000000
COMMENT  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *80000100
         *  P A S S   T W O   P R O C E D U R E   D I V I S I O N      *80000200
         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * ;80000300
BOOLEAN                                                                 80000400
         INSUB,         % TRUE WHEN COMPILING SUBSCRIPTS                80000500
         LDNG,          % LEADING BLANKS FOR NON-NUMERIC LITERAL        80000600
         MATHTOG,       % TRUE WHEN COMPILING AN ARITHMETIC STATEMENT   80000700
         MKSFF,         % MARK STACK INHIBITOR                          80000800
         MNTRNG,        % MONITORING                                    80000900
         MNTRNGS,       % MONITOR WHEN STORE                            80001000
         MOVEALL,       % MOVE "XX..."                                  80001100
         IFTOG,         % TRUE WHEN COMPILING AND IF STATEMENT          80001200
         SPECIALALL,    % ALL "X" - WHERE X IS ONLY ONE CHARACTER       80001300
         TESTDIV0,      % TEST FOR DIVIDE BY 0 (SIZE ERROR)             80001400
         TRLNG;         % TRAILING BLANKS FOR NON-NUMERIC LITERAL       80001500
REAL                                                                    80001600
         ALLCHAR,       % THE X IN ALL "X"                              80001700
         ISJUNK,        % PSUEDO STACK ENTRY OF IMPLIED SUBJECT         80001800
         JNKAD,         % INFORMATION ABOUT ADDRESS IN JUNK             80001900
         JNKMON,        % INFO ABOUT MONITORED NAME                     80002000
         JNKVA,         % INFORMATION ABOUT VALUE IN JUNK               80002100
         LASTREL,       % LAST RELATIVE ADDRESS OF CODE                 80002200
         LASTMKS,       % ADDRESS OF LAST MKS FROM A MKS MACRO          80002300
         LITSZ,         % SIZE OF NON-NUMERIC LITERAL SANS SPACES       80002400
         MNTRINDX,      % MONITOR INDEX (INTO MONITOR ARRAY)            80002500
         NMLITR,        % VALUE OF EMITTED NUMERIC LITERAL              80002600
         NNLPS,         % PSEUDO-STACK DATA FOR NON-NUMERIC LITERAL     80002700
         NOLDNG,        % NUMBER OF LEADING SPACES                      80002800
         NOTRLNG,       % NUMBER OF TRAILING SPACES                     80002900
         SAVSYL,        % USED FOR BOOLEAN LINKING                      80003000
         SV1,           % SAVE V1                                       80003100
         SV2,           % SAVE V2                                       80003200
         TOTSZ,         % TOTAL SIZE                                    80003300
         USEFIL;        % INFO INDEX OF FILE WHICH MAY NEED LABEL MOVE  80003400
                        % IN USE PROCEDURE                              80003500
DEFINE                                                                  80003600
         ATYP = PS[PSX].PST#,                                           80003700
         BTYP = PS[PSX-1].PST#,                                         80003800
         AVAL = PS[PSX]#,                             % "A" REGISTER PS 80003900
         BVAL = PS[PSX-1]#,                           % "B" REGISTER PS 80004000
         CVAL = PS[PSX-2]#,                           % "C" REGISTER PS 80004100
         COMP = 6#,                                                     80004200
         PSDP = [01:1]#,     % DECIMAL POINT RIGHT                      80004300
         PSAL = [01:1]#,     % "ALL" BEFORE NON-NUMERIC LITERAL         80004400
         PST  = [02:5]#,     % TYPE                                     80004500
         PSC = [07:3]#,      % CLASS        *NOTE* CMP=6                80004600
         PSS = [10:6]#,      % SCALE FOR NUMERIC ELSE USAGE             80004700
         PSSIN= [16:1]#,     % SOURCE OFSET IN STACK                    80004800
         PSOFS= [17:3]#,     % CHARACTER OFSET                          80004900
         PSL  = [20:13]#,    % LENGTH                                   80005000
         PSIX = [33:15]#,    % INFO INDEX                               80005100
         PSSZ = [37:11]#,    % NON-NUMERIC LITERAL SIZE                 80005200
         PSLD = [26:11]#,    % LEADING SPACES                           80005300
         PSTR = [17:9]#,     % TRAILING SPACES                          80005400
         SZFPSL=[20:35:13]#,   % FROM  SZF  TO  PSL                     80005500
         FSZFPSS = [10:18: 6]#,%       FSZF     PSS                     80005600
         CLFPSC  = [ 7: 3: 3]#,%       CLF      PSC                     80005700
         DPLFPSDP= [ 1: 2: 1]#,%       DPLF     PSDP                    80005800
         TOPSDP = 01:47:1 #,                                            80005900
         TOPST = 02:43:5#,                                              80006000
         TOPSC = 07:45:3 #,                                             80006100
         TOPSS = 10:42:6 #,                                             80006200
         TOPSSIN=16:47:1  #,                                            80006300
         TOPSOFS=17:45:3  #,                                            80006400
         TOPSL = 20:35:13 #,                                            80006500
         TOPSIX= 33:33:15 #,                                            80006600
    % * * * TYPES * * *                                                 80006700
         DNN  = 1 # , COMMENT DATA-NAME BY NAME;                        80006800
         INN  = 2 # , COMMENT INDEX-NAME BY NAME;                       80006900
         JKN  = 3 # , COMMENT JUNK BY NAME;                             80007000
         DNC  = 4 # , COMMENT DATA-NAME AS CHARACTERS;                  80007100
         JKC  = 5 # , COMMENT JUNK AS CHARACTERS;                       80007200
         INV  = 6 # , COMMENT INDEX-NAME AS VALUE;                      80007300
         DNV  = 7 # , COMMENT DATA-NAME AS VALUE;                       80007400
         LTV = 8#,      % NUMERIC LITERAL VALUE                         80007500
         OPR = 9#,      % ARITHMETIC OPERATION RESULT                   80007600
         NNL =10#,      % NON-NUMERIC LITERAL                           80007700
         FGC = 11#,     % FIGURATIVE CONSTANT                           80007800
         NNS = 12#,     % NON-NUMERIC STRING (IN CONSTANT POOL)         80007900
         FPR = 13#,     % FLOATING POINT OPERATION RESULT               80008000
         AWL = 14#,     % ALL "X" - WHERE X IS ONLY ONE CHARACTER       80008100
         PRN = 15#;     % PROCEDURE-NAME                                80008200
LABEL    FPBL;               % LABEL IN WRAPUP                          80008300
DEFINE                                                                  80008400
         DNPS(DNPS1) = PS[PSX~PSX+REAL(T.SUBF=0)]  ~                    80008500
              INDEX & (IF T.CLF=EA OR T.CLF=EN THEN IF1[INDEX].LGHF     80008600
              ELSE T) SZFPSL & (IF T.CLF}NM THEN T.FSZF ELSE T.USF)     80008700
              [TOPSS] & T DPLFPSDP & DNPS1 [TOPST] &                    80008800
               IF1[INDEX] [TOPSOFS] & ONSTACK [TOPSSIN] &               80008900
              (IF T.USF!BCL THEN COMP ELSE T.CLF) [TOPSC]#,             80009000
         INPS(INPS1)= PS[PSX~PSX+1]~INDEX&5[TOPSL]&NM[TOPSC]&           80009100
              INPS1 [TOPST]#,                                           80009200
         MARKSTACK = VOIDSYL(FALSE)#,                                   80009300
         VOIDMKS   = VOIDSYL(TRUE)#,                                    80009400
         INPSUDOSTK = PS[PSX~PSX+1]#;                                   80009500
PROCEDURE LABELCTR(A,B); VALUE A,B; REAL A; BOOLEAN B; FORWARD;         80009600
PROCEDURE INSTKISO(INFO1); VALUE INFO1; REAL INFO1;                     80009700
    BEGIN     % PUTS LITERALS ON THE STACK                              80009800
         BOOLEAN DPDL,       % DOUBLE PRECISION - 2 WDS REQ             80009900
                 SB;         % SUBSCRIPT CHAR OFFSET ON STACK           80010000
         INTEGER LGTH,OFSET; % LENGTH OF THE ITEM AND DEST OFSET        80010100
         LGTH ~ INFO1.LGHF;                                             80010200
         IF SB ~ INFO1 < 0 THEN INFO1 ~ -INFO1 ELSE                     80010300
         IF DPDL ~ (LGTH>8) THEN EMITL(0);                              80010400
         EMITO(MKS);                                                    80010500
         EMITL(0);                                                      80010600
         EMITO(CMN);                                                    80010700
         EMITVAR(3+REAL(DPDL),RSA);    % SI~ RCW-3 OR 4                 80010800
         IF SB THEN                                                     80010900
              BEGIN EMITVAR(4,CRF);    EMITO(SFS);    END               80011000
    ELSE                                                                80011100
         IF INFO1.CIX !0 THEN EMITVAR(INFO1.CIX,SFS); % SI ~SI + INFO1.C80011200
         EMITVAR(3+REAL(DPDL OR SB),SED);% DI~ LOC RCW-3 OR 4           80011300
         EMITVAR(LGTH,TRS);            % DS ~ LGTH CHR                  80011400
         EMITO(CMX);                                                    80011500
         IF SB AND NOT DPDL THEN EMITO(DEL);                            80011600
    END INSTKISO;                                                       80011700
PROCEDURE INCONVERT (STK,SIZE,OFSET);  %CONVERT TO OCTAL SORCE IS ON STK80011800
         VALUE STK,SIZE,OFSET;    %DOES ALL EASY CONVERTS OR CALLS INT  80011900
         BOOLEAN   STK;      %TELLS WHERE SIZE IS-TRUE ITS ON STACK     80012000
         INTEGER SIZE;       % SIZE IF NOT ON STACK                     80012100
         REAL OFSET;         % SOURCE OFSET IF NOT ON THE STACK         80012200
    BEGIN                                                               80012300
         BOOLEAN INJNKN,B;                                              80012400
    DEFINE                                                              80012500
         AV = OFSET#,                  % TEMP FOR AVAL                  80012600
         SIGNED   = STK.[45:1]#,       % S OR J SIGN                    80012700
         JSIGN    = STK.[46:1]#;       % J SIGN                         80012800
         IF NOT STK AND((SIZE{11 AND IF2[V1].SGTF=0) OR SIZE{8) THEN    80012900
    BEGIN                                                               80013000
         IF SIZE>8 AND NOT (B~BOOLEAN(AVAL.PSSIN)) THEN                 80013100
    BEGIN                                                               80013200
              EMITL(0);                                                 80013300
              EMITO(EXCH);                                              80013400
    END;                                                                80013500
              EMITO(MKS);                                               80013600
              EMITL(0);                                                 80013700
              EMITO(CMN);                                               80013800
              EMITVAR(3,RSA);          % SI ~ RCW-3                     80013900
              IF B THEN                % SI + F-3                       80014000
    BEGIN                                                               80014100
              EMITVAR(4,CRF);                                           80014200
              EMITO(SFS);                                               80014300
    END ELSE                                                            80014400
              IF OFSET !0 THEN EMITVAR(OFSET,SFS); %SI ~ SI + OFSET     80014500
         IF JSIGN THEN                                                  80014600
    BEGIN                                                               80014700
         EMITVAR(1,BIT);                                                80014800
         EMITJUMP(RELADDR,RELADDR+6,JFC);                               80014900
         EMITVAR(16,SEC);                                               80015000
         EMITVAR(1,STC);                                                80015100
    END;                                                                80015200
              EMITVAR(3+REAL(B~SIZE>8),SED);     % DI ~ LOC RCW-3 OR 4  80015300
              EMITVAR(IF B THEN 8 ELSE SIZE,ICV);     % DS ~ SIZE OCT   80015400
         IF B THEN EMITVAR(SIZE~SIZE-8,ICV);          % DS ~ REST       80015500
         SIGNED ~ IF2[V1].SGTF ! 0;                                     80015600
         IF JSIGN THEN                                                  80015700
    BEGIN                                                               80015800
         EMITVAR(0,SES);                                                80015900
         EMITVAR(1,SRS);                                                80016000
         EMITVAR(8,SRD);                                                80016100
         EMITVAR(1,TRS);                                                80016200
    END;                                                                80016600
              EMITO(CMX);    % USAGE OF ALL FILE RECORDS                80016700
              IF NOT SIGNED THEN EMITO(SSP);                            80016800
              IF B THEN                                                 80016900
    BEGIN                                                               80017000
                   IF SIGNED THEN EMITPAIR(PRTJUNK,STD)ELSE EMITO(EXCH);80017100
                   EMITL(SIZE~TEN[SIZE]);                               80017200
                   EMITO(MULT);                                         80017300
                   IF SIGNED THEN                                       80017400
    BEGIN                                                               80017500
                   VALUCALL(PRTJUNK);                                   80017600
                   EMITO(SSP);                                          80017700
                   EMITO(ADD);                                          80017800
                   VALUCALL(PRTJUNK);                                   80017900
                   EMITD(1,1,1);                                        80018000
    END ELSE                                                            80018100
                   EMITO(ADD);                                          80018200
                   AVAL.PSSIN ~ 0;     % WE USED ALREADY SO DONT DEL    80018300
    END;                                                                80018400
         IF BOOLEAN(AVAL.PSSIN) THEN                                    80018500
    BEGIN                                                               80018600
         EMITO(EXCH);                                                   80018700
         EMITO(DEL);                                                    80018800
    END END ELSE BEGIN                                                  80018900
         IF STK THEN EMITO(EXCH);                                       80019000
         IF NOT INJNKN ~ IS(JNKAD,AV ~ AVAL) THEN EMITPAIR(JUNKX,STD);  80019100
         IF NOT BOOLEAN(AV.PSSIN) THEN                                  80019200
    BEGIN                                                               80019300
              EMITL(AV.PSOFS);                                          80019400
              IF NOT STK THEN EMITL(SIZE);                              80019500
              IF JSIGN THEN EMITO(SSN);%                                80019600
                                       % THE STACK IS:                  80019700
    END ELSE BEGIN                     %  LENGTH                        80019800
              IF NOT STK THEN EMITL(SIZE);                              80019900
              IF JSIGN THEN EMITO(SSN);%  OFSET FROM FRONT OF WORD      80020000
    END;                               %                                80020100
         EMITO(MKS);                   %     MKS                        80020200
         EMITPAIR(IF INJNKN THEN JUNKN %                                80020300
                  ELSE JUNKX,LODD);    %                                80020400
         VALUCALL(INCONVERTS);         %   DESC TO AREA                 80020500
         IF SIZE{11 THEN                                                80020600
    BEGIN                                                               80020700
         EMITO(EXCH); EMITO(DEL);                                       80020800
    END;                                                                80020900
    END;                                                                80021000
    END INCONVERT;                                                      80021100
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%80021200
%                       MONITOR PSEUDO-STACK                           %80021300
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%80021400
PROCEDURE MNTRPSS;                                                      80021500
BEGIN                                                                   80021600
STREAM PROCEDURE MONSTACK(DEST,PSX,TYPE,LGTH,SCAL,INDEX,CL,OFS,S,L,A,F);80021700
         VALUE     PSX,TYPE,LGTH,SCAL,INDEX,S,L,A,F,CL,OFS;             80021800
    BEGIN     LABEL O,O1,O2,XIT;                                        80021900
         SI ~ LOC  PSX;                                                 80022000
         DI ~ DEST;                                                     80022100
         DS ~ 6 LIT "PSX = "; DS ~ 2 DEC;                               80022200
         DS ~ 9 LIT"  TYPE = "; SI ~ SI+5; DS~ 3 CHR;                   80022300
         CI ~ CI+F; GO TO O;                                            80022400
         DS ~24 LIT "  FIGURATIVE CONSTANT = ";                         80022500
         DS ~  LIT """; SI ~ SI+7; DS ~ CHR; DS~ LIT """;               80022600
         GO TO XIT;                                                     80022700
    O:   DS ~11 LIT "  LENGTH = "; DS ~ 4 DEC;                          80022800
         CI ~ CI +A; GO TO O1; GO TO XIT;                               80022900
         DS ~ 6 LIT "  *ALL*"; GO TO XIT;                               80023000
    O1:  DS ~10 LIT "  SCALE = ";  DS ~ 2 DEC;                          80023100
         CI ~ CI +L; GO TO O2; GO TO XIT;                               80023200
    O2:  DS ~10 LIT "  INDEX = ";  DS ~ 5 DEC;                          80023300
         DS ~10 LIT "  CLASS = "; SI ~ SI+5; DS ~ 3 CHR;                80023400
         DS ~10 LIT "  OFSET = ";  SI ~ SI +6; DS ~CHR;                 80023500
         DS ~10 LIT "  INSTK = ";  DS ~ CHR;                            80023600
         CI ~ CI +S; GO TO XIT;                                         80023700
         DS ~21 LIT "  FUNNY DECIMAL POINT";                            80023800
    XIT:                                                                80023900
    END MONSTACK;                                                       80024000
         DEFINE TMP= ERROX#; % USE DEBUG PRINT ARRAY                    80024100
         REAL CNT,T;                                                    80024200
         LABEL XIT;                                                     80024300
         IF PSX<2 THEN                                                  80024400
    BEGIN                                                               80024500
         TMP[0]~ "#STACK " &"#"[01:43:5];  %  "##STACK < TWO## "        80024600
         TMP[1]~ " TWO## " &"<"[01:43:5];                               80024700
         WRITE(RITE,2,TMP[*]);                                          80024800
         GO TO XIT                                                      80024900
    END;                                                                80025000
         IF NOT BOOLEAN(MNRY[0]) THEN                                   80025100
    BEGIN                                                               80025200
              CNT ~ MNRY[0];                                            80025300
              FILL  MNRY[*] WITH                                        80025400
                   1, "DNN","INN","JKN","DNC","JKC","INV","DNV",        80025500
                      "LTV","OPR","NNL","FGC","NNS","FPR","ALL",        80025600
                      "AB ","AN ","EA ","NM ","EN ","CMP";              80025700
              MNRY[0] ~ MNRY[0] + CNT;                                  80025800
    END;                                                                80025900
                                                                        80026000
         CNT~PSX+1;                                                     80026100
         WHILE CNT~CNT-1}3 DO                                           80026200
    BEGIN                                                               80026300
         T~PS[CNT];                                                     80026400
         BLAND(TMP,15);      % CLEAN THE LINE                           80026500
         IF T.PST<LTV OR T.PST=OPR OR T.PST=FPR THEN                    80026600
    BEGIN                                                               80026700
         MONSTACK(TMP,CNT-2,MNRY[T.PST],T.PSL,T.PSS,T.PSIX,             80026800
                   MNRY[T.PSC+14],0&T[39:17:3]& T[47:16:1],T<0,0,0,0);  80026900
    END  ELSE                                                           80027000
         IF T.PST=LTV THEN                                              80027100
    BEGIN                                                               80027200
         MONSTACK(TMP,CNT-2,MNRY[T.PST],T.PSL,T.PSS,0,0,0,0,1,0,0);     80027300
    END  ELSE                                                           80027400
         IF T.PST=NNL OR T.PST=NNS THEN                                 80027500
    BEGIN                                                               80027600
         MONSTACK(TMP,CNT-2,MNRY[T.PST],T.PSL,0,0,0,0,0,0,REAL(T<0)+1,0)80027700
    END  ELSE                                                           80027800
         IF T.PST=AWL THEN                                              80027900
    BEGIN                                                               80028000
         MONSTACK(TMP,CNT-2,MNRY[T.PST],T.PSL,0,0,0,0,0,0,1,0);         80028100
    END  ELSE                                                           80028200
    BEGIN                                             % EMBLEMATIC CONST80028300
         T ~((%  SET T TO PROPER EMBLEMATIC CONSTANT                    80028400
         IF(T~T.PSIX)=LOWV THEN " " ELSE                                80028500
         IF (T=HIGHV OR T=UPPERB) THEN "9" ELSE                         80028600
         IF T = SPACEV THEN " " ELSE                                    80028700
         IF T = ZEROV THEN "0" ELSE                                     80028800
         IF T = QUOTE THEN """ ELSE                                     80028900
         IF T = ENDV THEN "~" ELSE                                      80029000
         12));          % 12=UKN                                        80029100
         MONSTACK(TMP,CNT-2,MNRY[11],T,0,0,0,0,0,0,0,1);                80029200
    END;                                                                80029300
         WRITE(RITE,15,TMP[*]);                                         80029400
    END;                                                                80029500
    XIT:                                                                80029600
END MNTRPSS;                                                            80029700
PROCEDURE DOUBLEFETCH;                                                  80029800
    BEGIN                                                               80029900
         EMITO(DUP);                                                    80030000
         EMITL(1);                                                      80030100
         EMITO(EXCH);                                                   80030200
         EMITO(INX);                                                    80030300
         EMITO(COC);                                                    80030400
         EMITO(COC);                                                    80030500
         EMITO(EXCH);                                                   80030600
    END DOUBLEFETCH;                                                    80030700
PROCEDURE VOIDSYL(NOOP);   %  IF NOT NOOP THEN GENERATE MKS             80030800
    VALUE     NOOP;        %    OTHER WISE                              80030900
    BOOLEAN   NOOP;        %      GENERATE NOP                          80031000
         IF NOOP THEN                                                   80031100
    BEGIN                                                               80031200
         TEMPREL ~ RELADDR;                                             80031300
         MKSFF ~ FALSE;                                                 80031400
         RELADDR ~  LASTMKS;                                            80031500
         EMITO(NOP);                                                    80031600
         RELADDR ~ TEMPREL;                                             80031700
    END ELSE BEGIN                                                      80031800
         LASTMKS ~ RELADDR;                                             80031900
         EMITO(MKS);                                                    80032000
         MKSFF ~ TRUE;                                                  80032100
    END VOIDSYL;                                                        80032200
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%80032300
PROCEDURE     OCCRSNO(IFW1);VALUE IFW1;REAL IFW1;                       80032400
BEGIN    %%%%% ASSUMES INDEX ON TOS                                     80032500
         IF IFW1.OFSF!0 THEN                                            80032600
    BEGIN                         % SUBTRACT OFFSET                     80032700
         EMITNUM(IFW1.OFSF);                                            80032800
         EMITO(SUBT);                                                   80032900
    END;                                                                80033000
         IF IFW1.LGHF ! 1 THEN                                          80033100
    BEGIN                                                               80033200
         EMITNUM(IFW1.LGHF);    % FIND NUMBER OF SUBSCIPTS              80033300
         EMITO(IDIV);           % REQUIRED                              80033400
    END;                                                                80033500
         EMITL(1);                                                      80033600
         EMITO(ADD);                                                    80033700
END OCCRSNO;                                                            80033800
PROCEDURE MACRO; FORWARD;                                               80033900
PROCEDURE RELATE (TYPE,V2); VALUE TYPE,V2; REAL TYPE,V2; FORWARD;       80034000
PROCEDURE ARTH(TYPE,X); VALUE TYPE,X; REAL TYPE,X; FORWARD;             80034100
PROCEDURE  EXPSUB(PARAMETER); VALUE PARAMETER; REAL PARAMETER;FORWARD;  80034200
PROCEDURE SETUPMONITOR; FORWARD;                                        80034300
PROCEDURE CNEMPRO;                                                      80034400
    BEGIN                                                               80034500
         REAL SVSEG,SVADDR,T;                                           80034600
         BOOLEAN  NUMTOG;                                               80034700
         LABEL  LP,FST;                                                 80034800
         SVSEG ~ SEGNO;                                                 80034900
         IF MRCLEAN THEN                                                80035000
    BEGIN                                                               80035100
         MRCLEAN ~ FALSE;                                               80035200
         CONSTANTCLEAN;                                                 80035300
    END;                                                                80035400
         SVADDR~ RELADDR;                                               80035500
         SWAP(TDOC,EDOC);                                               80035600
         IF (TEMPREL~RELADDR ~ CNRELADDR)=0 THEN                        80035700
    BEGIN                                                               80035800
         SEGSTART;                                                      80035900
         IF4[V1].FLLNK ~ CNPRT~BUILDSEGDICT(0,CNSEGNO~SEGNO);           80036000
         VALUCALL(FMINUS1);                                             80036100
         EMITO(LFU);                                                    80036200
         ADJUST;                                                        80036300
    END ELSE IF4[V1].FLLNK ~ CNPRT;                                     80036400
         SEGNO ~ CNSEGNO;                                               80036500
         IF5[V1].CNADF ~ RELADDR DIV 8;                                 80036600
         T ~ V1 & (T1~IF2[V1]) SZFPSL & IF1[V1] [TOPSOFS]               80036700
                &  T1 FSZFPSS  & T1 CLFPSC & DNV[TOPST]& T1 DPLFPSDP;   80036800
         IF NOT (NUMTOG ~ T1.CLF=NM) THEN T ~ T&DNN [TOPST];            80036900
         GO TO FST;                                                     80037000
    LP:                                                                 80037100
         DO MACRO UNTIL MACN2 = CNEM;                                   80037200
         IF V1 = ENTR THEN                                              80037300
    BEGIN                                                               80037400
         V1 ~ T.PSIX;                                                   80037450
    FST:                                                                80037500
         IF NOT NUMTOG OR BOOLEAN(IF0[V1].L88F) THEN                    80037600
         IF IF2[V1].SUBF!0 THEN VALUCALL(FMINUS3);                      80037700
         EMITADDRESS(FMINUS2,DESC-REAL(NUMTOG AND                       80037800
              NOT BOOLEAN(IF0[V1].L88F)));                              80037900
         PS[PSX~PSX+1] ~ T;                                             80038000
         GO TO LP;                                                      80038100
    END ELSE                                                            80038200
         IF V1 ! EXIT THEN                                              80038300
    BEGIN                                                               80038400
              RELATE(V1,V2);                                            80038500
              GO TO LP;                                                 80038600
    END;                                                                80038700
         EMITO(RTN);                                                    80038800
         ADJUST;                                                        80038900
         IF RELADDR>350 THEN                                            80039000
    BEGIN                                                               80039100
              SEGEND(RELADDR);                                          80039200
              RELADDR ~ 0;                                              80039300
    END;                                                                80039400
         IF MRCLEAN THEN CONSTANTCLEAN;                                 80039500
         CNRELADDR ~ RELADDR;                                           80039600
         TEMPREL ~ RELADDR ~ SVADDR;                                    80039700
         SEGNO ~  SVSEG;                                                80039800
         MKSFF ~ FALSE;                                                 80039900
         SWAP (EDOC,TDOC);                                              80040000
    END CNEMPRO;                                                        80040100
PROCEDURE CALLSUBROUTINE(ADR);   % CALLS SUBROUTINE AT ADR              80040200
    VALUE ADR; REAL ADR;                                                80040300
    BEGIN                                                               80040400
         MRCLEANTMP ~ MRCLEAN;                                          80040500
         MRCLEAN ~ FALSE;                                               80040600
         EMITL((RELADDR+12).WIX);     % BRANCH BACK BEST BE WORD BRANCH 80040700
         EMITBRANCH(RELADDR,ADR,BFW);                                   80040800
         MRCLEAN ~ MRCLEANTMP;                                          80040900
         ADJUST;                                                        80041000
    END;                                                                80041100
PROCEDURE EXPSUB (PARAMETER);  % RECURSIVE CALLS ON SUBSCRIPTS AND EXPP 80041200
         VALUE PARAMETER;   REAL PARAMETER;                             80041300
    BEGIN                                                               80041400
         LABEL LOOP,XIT;                                                80041500
    LOOP:                                                               80041600
         MACRO;                                                         80041700
         WHILE MACN2 ! EXPRM                                            80041800
         AND  MACN2 ! PARAMETER                                         80041900
         AND MACN2 ! STRTS                                              80042000
         DO MACRO;                                                      80042100
         IF  MACN2 = PARAMETER THEN GO TO XIT;                          80042200
         IF MACN2 = STRTS THEN BEGIN SUBSCRIPTS; GO TO LOOP END;        80042300
         IF MACN2 = EXPRM THEN BEGIN EXPP; GO TO LOOP END;              80042400
    XIT:                                                                80042500
    END EXPSUB  ;                                                       80042600
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%80042700
%                       FETCH VALUE OR DESCRIPTOR                      %80042800
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%80042900
PROCEDURE BINARYV(INDEX,TYPE);VALUE INDEX,TYPE;REAL INDEX,TYPE; FORWARD;80043000
PROCEDURE SUBS; FORWARD;                                                80043100
PROCEDURE NAME(INDEX,TYPE); VALUE INDEX,TYPE; REAL INDEX,TYPE;          80043200
BEGIN    % * * * NAME BRINGS ADDRESS DESCRIPTOR TO TOP-OF-STACK  * * * *80043300
         % * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *80043400
         %     V2       V1                 FUNCTION                     80043500
         % * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *80043600
         %      0       INFO INDEX          DATA-NAME NAME              80043700
         %      1       INXR INDEX          INDEX-NAME NAME             80043800
         %      2       0                   ADDRESS IN JUNK             80043900
         %      3       0                   ADDRESS OF JUNK             80044000
         %      4       FLLNK(OF INFO4)     PRT (FOR 88 LEVELS)         80044100
         %      5       0                   ADDRESS IN JUNK (MOVX NEXT) 80044200
         % * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *80044300
         REAL T,S,J;                                                    80044400
         BOOLEAN B;                                                     80044500
         INTEGER I;                                                     80044600
         TEMPREL ~ RELADDR;                                             80044700
         IF V2=0 THEN IF BOOLEAN(IF3[V1].DAYF) THEN IF IF0[V1].LVLF=77  80044800
              THEN                                                      80044900
    BEGIN     % LEVEL 77 VALUE CLAUSE APPEARS BEFORE ARRAYDEC MACRO     80045000
         ARRAYDEC(0,IF3[V1].BADDF,(IF1[V1].OFSF+7).WIX,0);  % MAKE DECL 80045100
         IF1[V1].OFSF ~ 0;                                  %ZERO OFFSET80045200
         IF3[V1].DAYF ~ 0;                                              80045300
    END;                                                                80045400
         IF TYPE=0  THEN                                                80045500
    BEGIN     % * * * DATA-NAME * * * * * * * * * * * * * * * * * * * * 80045600
         IF NOT BOOLEAN ((T~IF2[INDEX]).OSTK) THEN                      80045700
              IF T.SUBF=0 AND I~T.USF!CMP1 THEN EMITL(IF1[INDEX].WIX);  80045800
         IF T.SUBF!0 THEN                                               80045900
    BEGIN                                                               80046000
         J ~ INDEX;                                                     80046100
         WHILE (S~IF4[J].OCLF)!0 DO                                     80046200
    BEGIN                                                               80046300
         J ~ J-S|IFSZ;                                                  80046400
         IF (S~IF1[J]).CIX!0 OR S.[15:3]!0 THEN B ~ TRUE;               80046500
    END;                                                                80046600
         IF T.USF=CMP AND IF1[INDEX].CIX=0 AND NOT B THEN               80046700
    BEGIN                                                               80046800
         EMITO(EXCH);                                                   80046900
         EMITO(DEL);                                                    80047000
         ONSTACK ~ 0;                                                   80047100
    END;                                                                80047200
    END;                                                                80047300
         NAMECALL(IF3[INDEX].BADDF);                                    80047400
         DNPS(DNN);                                                     80047500
    END ELSE                                                            80047600
         IF TYPE=1  THEN                                                80047700
    BEGIN                                                               80047800
              NAMECALL(INXR[INDEX].IXBASE);                             80047900
              INPS(INN);                                                80048000
    END ELSE                                                            80048100
         IF TYPE=2 OR TYPE=5 THEN                                       80048200
    BEGIN     % * * * ADDRESS IN JUNK * * * * * * * * * * * * * * * * * 80048300
              INPSUDOSTK ~ IF BOOLEAN(TYPE) THEN JNKAD ELSE BVAL;       80048400
         IF BOOLEAN((IF BOOLEAN(TYPE) THEN JNKAD ELSE BVAL~JNKAD).PSSIN)80048500
              THEN VALUCALL(JUNKNOF);                                   80048600
         NAMECALL(JUNKN);                                               80048700
    END ELSE                                                            80048800
         IF TYPE=3 THEN                                                 80048900
    BEGIN     % * * * ADDRESS OF JUNK * * * * * * * * * * * * * * * * * 80049000
              NAMECALL(JUNKN);                                          80049100
              INPSUDOSTK ~ 0 & JKN [TOPST]&NM[TOPSC]&5[TOPSL];          80049200
    END ELSE                                                            80049300
         IF TYPE=4 THEN                                                 80049400
    BEGIN     % * * * CONDITION-NAME (88 LEVEL) * * * * * * * * * * * * 80049500
              EMITO(MKS);                                               80049600
         PASSMAC;                                                       80049700
         IF MACN2=STRTS THEN SUBS;                                      80049800
         IF MACN2=FINSM THEN PASSMAC;                                   80049900
         IF MACN2=VALDM AND NOT BOOLEAN(IF0[INDEX].L88F)                80050000
              THEN BINARYV(V1,V2) ELSE NAME(V1,0);                      80050100
              EMITNUM(IF5[INDEX].CNADF);                                80050200
              VALUCALL(IF4[INDEX].FLLNK);                               80050300
    END;                                                                80050400
         IF MNTRNG THEN  % IF MONSTOR THEN                              80050500
    BEGIN                % STORE IN JUNKN                               80050600
              JNKMON ~ PS[PSX-REAL(TYPE=2)];                            80050700
              MNTRNG ~ FALSE;                                           80050800
              MNTRNGS~ TRUE;                                            80050900
    END;                                                                80051000
         IF DEBUGTOG THEN MNTRPSS;                                      80051100
         ONSTACK ~ 0;                                                   80051200
END NAME;                                                               80051300
DEFINE   VLDN = BINARYV#;                                               80051400
PROCEDURE BINARYV (INDEX,TYPE); VALUE INDEX,TYPE; REAL INDEX,TYPE;      80051500
BEGIN    % * * * BINARYV BRINGS A BINARY VALUE TO TOP-OF-STACK * * * * *80051600
         % * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *80051700
         %     V2       V1                 FUNCTION                     80051800
         % * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *80051900
         %      0       INXR INDEX          VALUE                       80052000
         %      1       INXR INDEX          NAME & VALUE                80052100
         %      2       INFO INDEX          VALUE                       80052200
         %      3       INFO INDEX          NAME & VALUE                80052300
         %      4       RETRIEVE JUNK VALUE AS LTV (FOR MOV9)           80052400
         %      5       0                   JUNK NAME & VALUE           80052500
         %      6       INFO INDEX          VALUE & STORE NAME IN JUNK  80052600
         %      7       0                   "LOAD" VALUE                80052700
         %      8       0                   "LOAD" VALUE OR CHARACTERS  80052800
         %                                       FROM JUNK              80052900
         %      9       SPECL REG KEY       SPECIAL REGISTER            80053000
         %     10       10 = TODAYS-DATE                                80053100
         %              < 10 = DATA(N)                                  80053200
         %     11       INXR INDEX          OCCURRENCE NUMBER           80053300
         %      12      RETRIEVE JUNK VALUE AS OPR                      80053400
         %      13      RETRIEVE JUNK VALUE AS JKC (FOR TIME FUNCTION)  80053450
         REAL I,T,R,J,ADDR;                                             80053500
         LABEL XIT;                                                     80053600
         BOOLEAN B;                                                     80053700
    DEFINE DISCARDOFF = BEGIN EMITO(EXCH); EMITO(DEL); ONSTACK ~ 0;END#,80053800
           DUPDESC = IF BOOLEAN(ONSTACK) THEN                           80053900
                   BEGIN EMITPAIR(JUNKX,STD); EMITO(DUP);               80054000
                         EMITPAIR(JUNKX,LODD); EMITO(EXCH);             80054100
                         EMITPAIR(JUNKX,LODD);                          80054200
                   END ELSE EMITO(DUP)#;                                80054300
PROCEDURE STOADJ(STDR);                                                 80054400
         VALUE STDR; REAL STDR;                                         80054500
    BEGIN                                                               80054600
    %   EXPECTS DESC ON TOP, CHAR OFFSET MAY BE 2ND                     80054700
         IF BOOLEAN((JNKAD~AVAL).PSSIN) THEN                            80054800
    BEGIN                                                               80054900
         EMITPAIR(JUNKN,STD);                                           80055000
         EMITPAIR(JUNKNOF,SND-STDR);                                    80055100
         IF NOT BOOLEAN(STDR) THEN NAMECALL(JUNKN);                     80055200
    END ELSE                                                            80055300
         EMITPAIR(JUNKN,SND-STDR);                                      80055400
         PSX ~ PSX-1;                                                   80055500
    END  STOADJ;                                                        80055600
    % * * * START HERE  * * *                                           80055700
         TEMPREL ~ RELADDR;                                             80055800
         IF TYPE=7 THEN                                                 80055900
    BEGIN                                                               80056000
              INDEX ~ -PS[PSX].PSIX;                                    80056100
              TYPE ~ 2;                                                 80056200
    END ELSE                                                            80056300
         IF TYPE=8  THEN                                                80056400
    BEGIN                                                               80056500
              IF  JNKAD.PSC!NM AND  JNKAD.PSC!6 THEN                    80056600
    BEGIN          % NOT NUMERIC AND NOT CMP                            80056700
                   EMITPAIR(JUNKN,LODD);                                80056800
                   INPSUDOSTK ~ JNKAD & DNC [TOPST];                    80056900
                   GO TO XIT;                                           80057000
    END ELSE                                                            80057100
    BEGIN                                                               80057200
                   INPSUDOSTK ~ JNKAD & DNN [TOPST];                    80057300
                   IF BOOLEAN(JNKAD.PSSIN) THEN VALUCALL(JUNKNOF);      80057400
                   NAMECALL(JUNKN);                                     80057500
                   INDEX ~ - JNKAD.PSIX;                                80057600
                   TYPE ~ 2;                                            80057700
    END;                                                                80057800
    END;                                                                80057900
         IF TYPE { 1 THEN                                               80058000
    BEGIN     % * * * INDEX-NAME * * * * *                              80058100
              IF TYPE=1 THEN                                            80058200
    BEGIN                                                               80058300
              NAMECALL (INXR[INDEX].IXBASE);                            80058400
              INPS(INN);                                                80058500
    END;                                                                80058600
              VALUCALL (INXR[INDEX].IXBASE);                            80058700
              INPS(INV)                                                 80058800
    END ELSE                                                            80058900
         IF TYPE { 3 OR TYPE=6 THEN                                     80059000
    BEGIN     % * * * DATA-NAME * * * * *                               80059100
              ONSTACK ~ REAL((T~IF2[INDEX]).SUBF!0);                    80059200
              IF BOOLEAN(T.OSTK) THEN                                   80059300
    BEGIN          % * * *  CMP-1                                       80059400
                   IF TYPE!2 THEN                                       80059500
    BEGIN               NAMECALL(IF3[INDEX].BADDF);                     80059600
                        DNPS(DNN);                                      80059700
                        IF TYPE=6 THEN STOADJ(1);                       80059800
    END;                                                                80059900
                   IF T.SZF>11 THEN VALUCALL(IF3[INDEX].BADDF+1);       80060000
                   VALUCALL(IF3[INDEX].BADDF);                          80060100
                   DNPS(DNV);                                           80060200
    END  ELSE                                                           80060300
              IF BOOLEAN(T.WRDOF) THEN                                  80060400
    BEGIN          % * * * IN DATA ARRAY * * * *                        80060500
                        IF T.SUBF=0 THEN   % NO SUBSCRIPT ON STACK      80060600
                        EMITL(IF1[INDEX].WIX);                          80060700
                   IF TYPE!2 THEN                                       80060800
    BEGIN                                                               80060900
                        NAMECALL(IF3[INDEX].BADDF);                     80061000
                        IF BOOLEAN(ONSTACK) THEN DISCARDOFF;            80061100
                        DNPS(DNN);                                      80061200
                        IF T.SUBF!0 THEN INPSUDOSTK ~ BVAL;             80061300
                        IF TYPE=6 THEN STOADJ(0);                       80061400
                        IF TYPE=3 THEN EMITO(DUP);                      80061500
                        IF T.SZF>11 THEN DOUBLEFETCH ELSE EMITO(LODD);  80061600
    END ELSE                                                            80061700
                      IF T.SZF>11 THEN BEGIN NAMECALL(IF3[INDEX].BADDF);80061800
                             DOUBLEFETCH; END ELSE                      80061900
                             VALUCALL(IF3[INDEX].BADDF);                80062000
                             IF BOOLEAN(ONSTACK) THEN DISCARDOFF;       80062100
                   DNPS(DNV);                                           80062200
    END ELSE                                                            80062300
    BEGIN          % * * * STRING ARRAY                                 80062400
                        IF T.SUBF=0 THEN   % NO SUBSCRIPT ON STACK      80062500
                        EMITL((I~IF1[INDEX].OFSF).WIX);                 80062600
                   ADDR ~ RELADDR;                                      80062700
                   NAMECALL(IF3[INDEX].BADDF);                          80062800
         IF IF1[INDEX].LGHF=0 THEN ERR(168);                            80062900
         J ~ INDEX;                                                     80063000
         WHILE (T1~IF4[J].OCLF)!0 DO                                    80063100
    BEGIN                                                               80063200
         J ~ J-T1|IFSZ;                                                 80063300
         IF (T1~IF1[J]).CIX!0 OR T1.[15:3]!0 THEN B ~ TRUE;             80063400
    END;                                                                80063500
         IF T.USF=CMP AND IF1[INDEX].CIX=0 AND NOT B THEN               80063600
    BEGIN          % * * * WORD ORENTED CMP                             80063700
                        IF BOOLEAN(ONSTACK) THEN DISCARDOFF;            80063800
                   IF TYPE=3 THEN DUPDESC;                              80063900
                   IF TYPE=2 THEN                                       80064000
    BEGIN                                                               80064100
                        IF T.SZF>11 THEN DOUBLEFETCH ELSE               80064200
    BEGIN                                                               80064300
                        TEMPREL ~ RELADDR;                              80064400
                        RELADDR ~ ADDR;                                 80064500
                             VALUCALL(IF3[INDEX].BADDF);                80064600
                        RELADDR ~ TEMPREL;                              80064700
    END;                                                                80064800
                        DNPS(DNV);                                      80064900
    END ELSE                                                            80065000
    BEGIN                                                               80065100
                        DNPS(DNN);                                      80065200
                        IF TYPE=6 THEN STOADJ(0);                       80065300
                        IF T.SZF>11 THEN DOUBLEFETCH ELSE               80065400
                        EMITO(LODD);                                    80065500
                        INPSUDOSTK ~ PS[PSX-REAL(TYPE!6)] & DNV [TOPST];80065600
    END;                                                                80065700
    END ELSE                                                            80065800
    BEGIN                                                               80065900
              IF TYPE=3 THEN DUPDESC;                                   80066000
              IF TYPE=2 THEN DNPS(DNV) ELSE                             80066100
    BEGIN                                                               80066200
                   DNPS(DNN);                                           80066300
                   IF TYPE=6 THEN STOADJ(0);                            80066400
                   INPSUDOSTK ~ PS[PSX-REAL(TYPE!6)] & DNV [TOPST];     80066500
    END;                                                                80066600
         IF T.USF=CMP THEN                                              80066700
    BEGIN                                                               80066800
         INSTKISO(IF IF2[INDEX].SUBF!0 THEN -IF1[INDEX]                 80066900
                 ELSE IF1[INDEX]);                                      80067000
    END ELSE                                                            80067100
    BEGIN                                                               80067200
              IF BOOLEAN(T.VARF) THEN  % VARIABLE LENGTH FIELD          80067300
    BEGIN                                                               80067400
                   BINARYV(IF3[AVAL.PSIX].SZDF,2);                      80067500
                   PSX ~ PSX - 1;                                       80067600
                   INCONVERT( TRUE&(T.SGTF=2)[46:47:1],T.SZF,I.CIX);    80067700
    END ELSE                                                            80067800
                   INCONVERT(FALSE&(T.SGTF=2)[46:47:1],T.SZF,I.CIX);    80067900
    END;                                                                80068000
    END;                                                                80068100
    END;                                                                80068200
    END ELSE                                                            80068300
         IF TYPE = 9 THEN % ATTRIBUTE                                   80068400
    BEGIN                                                               80068500
              EMITO(MKS);                                               80068600
              IF V1=0 THEN                                              80068700
    BEGIN          IF IF4[CSECTIX].SPERF=1 OR NOT DECLTOG THEN ERR(273);80068800
                   EMITPAIR(FMINUS1,LODD);%PICK UP FIB POINTER AND      80068900
                                       % LOAD AS A PARAMETER            80069000
    END ELSE                                                            80069100
    BEGIN                                                               80069200
                   EMITPAIR(IF3[V1].BADDF,LODD);%PICK UP PTR TO TOP I-O 80069300
                   EMITL(2);                  % BACK UP                 80069400
                   EMITO(LNOT);               % 3 DESC                  80069500
                   EMITO(INX) ;               % TO FIB POINTER          80069600
                   EMITO(LODD);               % LOAD IT                 80069700
    END;           % FIB POINTER NOW ON STACK                           80069800
              PASSMAC;                                                  80069900
              EMITL(V1);                                                80070000
              VALUCALL(ATTRIBUTE);                                      80070100
         INPSUDOSTK ~ 0&LTV [TOPST]&NM [TOPSC]&6 [TOPSL];               80070200
    END ELSE                                                            80070300
         IF TYPE=10 THEN                                                80070400
    BEGIN     % * * * SPECIAL REGISTERS                                 80070500
              IF V1=5 THEN EMITL(5);                                    80070600
              EMITL( 1);                                                80070700
              EMITO(COM);                                               80070800
              PS[PSX~PSX+REAL(V1=5)] ~ IF MATHTOG OR V1=1 THEN          80070900
                           0 & OPR [TOPST] & COMP [TOPSC] & 8 [TOPSL]   80071000
                   ELSE    0 & JKC [TOPST] & 8 [TOPSL] & AN [TOPSC];    80071100
    END ELSE                                                            80071200
         IF TYPE=11 THEN                                                80071300
    BEGIN                                                               80071400
         VALUCALL(INXR[INDEX].IXBASE);                                  80071500
         OCCRSNO(IF1[INXR[INDEX].DNIX]);                                80071600
         INPSUDOSTK ~ 0 & INV [TOPST] & COMP [TOPSC] & 6 [TOPSL];       80071700
    END ELSE                                                            80071800
    BEGIN     % * * * JUNK * * * *                                      80071900
              IF TYPE=5 THEN                                            80072000
    BEGIN                                                               80072100
                   INPSUDOSTK~0&JKN[TOPST]&NM[TOPSC]&5[TOPSL];          80072200
                   NAMECALL(JUNKV);                                     80072300
    END;                                                                80072400
         IF (INPSUDOSTK~IF TYPE=12 THEN     0 & OPR [TOPST] % FOR TIME  80072500
                   & 8 [TOPSL] & COMP [TOPSC]                           80072600
                   ELSE IF TYPE=13 THEN     0 & JKC [TOPST] % FUNCTION  80072700
                   & 8 [TOPSL] & AN [TOPSC]                             80072800
                   ELSE IF   MKSFF THEN JNKVA & LTV [TOPST]   % FOR MOV980072900
              ELSE JNKVA).PSL > 11 THEN VALUCALL(JUNKV2);               80073000
              VALUCALL(JUNKV);                                          80073100
    END;                                                                80073200
    XIT:                                                                80073300
         IF MKSFF AND IF2[INDEX].SUBF!0 THEN VOIDMKS;                   80073400
         IF DEBUGTOG THEN MNTRPSS;                                      80073500
         ONSTACK ~ 0;                                                   80073600
END BINARYV;                                                            80073700
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%80073800
%                            LITERAL STUFF                             %80073900
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%80074000
PROCEDURE NUMLIT;                                                       80074100
BEGIN    % * * * NUMERIC LITERALS                                       80074200
         REAL  FRAC,LGTH,POWR;                                          80074300
         TEMPREL ~ RELADDR;                                             80074400
         SV1 ~ V1;                                                      80074500
         IF (SV2 ~ V2)= 0 AND WDSZ2=0 THEN                              80074600
    BEGIN                                                               80074700
              EMITNUM(NMLITR ~ V1);                                     80074800
              PS[PSX~PSX+1] ~ 0 & 5[TOPSL]&NM[TOPSC]&LTV[TOPST];        80074900
    END ELSE                                                            80075000
         IF VARU2=0 THEN                                                80075100
    BEGIN                                                               80075200
              EMITNUM(DISKRAY[CODEINDEX]);                              80075300
              PS[PSX~PSX+1] ~ 0&11[TOPSL]&NM[TOPSC]&LTV[TOPST];         80075400
    END  ELSE                                                           80075500
    BEGIN                                                               80075600
              FRAC ~ V2.[38:5];                                         80075700
              V1~(IF V1=0 THEN DISKRAY[CODEINDEX] ELSE V1)&V2[1:32:1];  80075800
              IF POWR~V2.[43:5]!0 THEN V1 ~ V1|(IIX~TEN[POWR]);         80075900
         IF NOT SCALESTOP AND LGTH ~ V2.[33:5] < 12 AND (V2~AVAL).PSL<1280076000
              AND (V2.PST=DNN OR (IFTOG AND V2.PST=DNV)) AND PSX>0 THEN 80076100
         IF (JUNK~V2.PSS&V2[1:1:1]-FRAC)!0 AND (LGTH+JUNK)<12 THEN      80076200
    BEGIN                                                               80076300
              FRAC ~ V2.PSS;                                            80076400
              IIX ~ TEN[ABS(JUNK)];                                     80076500
              IF JUNK < 0 THEN V1 ~ V1 DIV IIX ELSE V1 ~ V1 | IIX;      80076600
    END ELSE                                                            80076700
         V2 ~ 0                                                         80076800
    ELSE                                                                80076900
         V2 ~ 0;                                                        80077000
         IF V1=0 THEN IF LGTH{11 AND PSX>2 THEN FRAC ~ AVAL.PSS;        80077100
         EMITNUM(V1);                                                   80077200
         NMLITR ~ V1;                                                   80077300
         IF LGTH>11 AND LGTH<24                                         80077400
              THEN AVAL ~ AVAL&LGTH [TOPSL]&FRAC [TOPSS] ELSE           80077500
              INPSUDOSTK ~ 0&(LGTH+POWR)[TOPSL]&FRAC[TOPSS]&NM[TOPSC]   80077600
                             & LTV[TOPST] & V2 [1:1:1];                 80077700
    END;                                                                80077800
         IF DEBUGTOG THEN MNTRPSS;                                      80077900
END NUMLIT;                                                             80078000
PROCEDURE NONUMLIT;                                                     80078100
BEGIN    % * * * NON-NUMERIC LITERALS * * *                             80078200
         SVNNL ~ MOVEALL ~ AHL ~ FALSE;                                 80078300
         IF SPECIALALL~(BOOLEAN(VARU2.[16:1]) AND WDSZ2=0) THEN         80078400
    BEGIN                                                               80078500
              ALLCHAR ~ V1;                                             80078600
              PS[PSX~PSX+1] ~ ALLCHAR &AWL[TOPST]&(TOTSZ~LITSZ~1)[TOPSL]80078700
    END ELSE                                                            80078800
         IF MOVEALL ~ BOOLEAN(VARU2.[17:1]) THEN                        80078900
    BEGIN                                                               80079000
              ALLCHAR ~ V1;                                             80079100
              LDNG ~ TRLNG ~ FALSE;                                     80079200
              TOTSZ ~ LITSZ ~ VARU2.[18:20];                            80079300
              NOLDNG ~  NOTRLNG ~ 0;                                    80079400
              NNLPS ~ PS[PSX~PSX+1] ~ V1 & NNL[TOPST]&TOTSZ[TOPSL];     80079500
    END  ELSE                                                           80079600
    BEGIN                                                               80079700
              AHL ~ BOOLEAN(VARU2.[16:1]);                              80079800
              LDNG ~(NOLDNG~VARU2.[27:10])!0;                           80079900
              TRLNG~(NOTRLNG~VARU2.[18:9])!0;                           80080000
              LITSZ~ VARU2.[37:11];                                     80080100
              MOVE (TMP[0],DISKDEX,WDSZ2);                              80080200
              I~ LITSZ; T ~ 0;                                          80080300
              DO        % PUT LITERIAL IN STACK                         80080400
    BEGIN                                                               80080500
                   PUSHOVER(STK[T],0,TMP[T],2,IF I>56 THEN 56 ELSE I);  80080600
                   T ~ T+7;                                             80080700
    END UNTIL  (I ~ I-56) { 0;                                          80080800
              NNLPS~ PS[PSX~ PSX+1]~0&NNL[TOPST]&REAL(AHL)[TOPSDP]&     80080900
                   AN [TOPSC]&(TOTSZ ~ LITSZ+NOLDNG+NOTRLNG)[TOPSL];    80081000
    END;                                                                80081100
         IF DEBUGTOG THEN MNTRPSS;                                      80081200
END NONUMLIT;                                                           80081300
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%80081400
%                         SUBSCRIPTING STUFF                           %80081500
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%80081600
PROCEDURE OCRX(T);                                                      80081700
         VALUE T;       REAL  T;                                        80081800
    BEGIN                                                               80081900
         BOOLEAN DEPEND,INDEXNAM;                                       80082000
         DEFINE EARLYOUT = INDEXNAM.[46:1]#;                            80082050
         LABEL XIT,MNTRTST;                                             80082100
         REAL J,K,FIX1,FIX2;                                            80082200
         IF BOOLEAN(T.[2:1])THEN INDEXNAM~ BOOLEAN(3) ELSE              80082250
         IF T < 0 THEN                                                  80082300
              BEGIN EARLYOUT ~ TRUE; T ~ ABS(T); END;                   80082340
         EMITO(DUP);                                                    80082400
         EMITO(DUP);                                                    80082500
         EMITNUM(IF INDEXNAM THEN IF1[ T].OFSF ELSE 1);                 80082600
         EMITO(LESS);                                                   80082650
         EMITO(EXCH);                                                   80082700
         IF NOT (DEPEND ~ BOOLEAN((K~IF2[T]).OCDV))                     80082800
              THEN EMITNUM(IF INDEXNAM THEN ((((J~IF1[T]).OCCF-1)       80082900
                   |J.LGHF)+J.OFSF) ELSE (J~IF1[T]).OCCF)               80082950
         ELSE                                                           80083000
    BEGIN                                                               80083100
         BINARYV(IF5[T].OCDF,2); PSX ~ PSX-1;                           80083200
         EMITPAIR(PRTJUNK,SND);                                         80083300
         EMITO(DUP);                                                    80083400
         EMITNUM((J~IF1[T]).OCCF);                                      80083500
         EMITO(GRTR);                                                   80083600
         FIX1 ~ RELADDR; EMITF;                                         80083700
         VALUCALL(PRTJUNK);                                             80083800
         EMITNUM(J.OCCF);                                               80083900
         FIX2 ~ RELADDR;                                                80084000
         EMITBFW;                                                       80084100
         EMITBRANCH(FIX1,RELADDR,BFC);      % VARIABLE > MAX SIZE       80084300
         IF INDEXNAM THEN                                               80084310
    BEGIN                                                               80084320
         EMITNUM(J.LGHF);                                               80084330
         EMITO(MULT);                                                   80084340
         EMITNUM(J.OFSF);                                               80084350
         EMITO(ADD);                                                    80084360
    END;                                                                80084370
    END;                                                                80084400
         EMITO(GRTR);                                                   80084500
         EMITO(LOR);                                                    80084600
         FIX1 ~ RELADDR; EMITF;                                         80084800
         IF INDEXNAM THEN OCCRSNO(IF1[T]);                              80084850
         IF DEPEND THEN                                                 80084900
    BEGIN                                                               80085000
         VALUCALL(PRTJUNK);                                             80085100
         EMITBRANCH(FIX2,RELADDR,BFW);                                  80085200
    END ELSE                                                            80085300
    BEGIN                                                               80085400
         EMITNUM(J.OCCF);                                               80085500
    END;                                                                80085550
         EMITL(7); EMITO(SSN);    % GENERATE INV INX FOR OCCURS NUMBER  80085600
         EMITL(26); EMITO(COM);             % > DEPEND VARIABLE         80085700
         EMITBRANCH(FIX1,RELADDR,BFC);                                  80085900
         IF INDEXNAM THEN GO TO MNTRTST;                                80085950
         EMITL(1);                                                      80086000
         EMITO(SUBT);                                                   80086100
         IF T~J.LGHF !1 THEN           % BRANCH WAS TO HERE             80086200
    BEGIN                                                               80086300
         EMITNUM(T);                   % MULT TIMES LENGTH              80086400
         EMITO(MULT);                                                   80086500
    END;                                                                80086600
         IF T ~ J.OFSF GTR 0 THEN                                       80086700
    BEGIN                                                               80086800
         EMITNUM(T);                   % ADD IN OFSET                   80086900
         EMITO(ADD);                                                    80087000
    END;                                                                80087100
    MNTRTST:                                                            80087150
         IF MNTRNG THEN                                                 80087200
    BEGIN                                                               80087300
         IF JUNKMON2=0 THEN JUNKMON2~ GETPRTLOC;                        80087400
         EMITPAIR(JUNKMON2,SND);                                        80087500
    END;                                                                80087600
         IF EARLYOUT THEN GO TO XIT;                                    80087700
         IF NOT BOOLEAN(K.WRDOF) THEN                                   80087800
    BEGIN                                                               80087900
         EMITO(DUP);                                                    80088000
         ONSTACK ~ 1;                                                   80088100
         EMITISO(45,3);                                                 80088200
         EMITO(EXCH);                                                   80088300
    END;                                                                80088400
         EMITL(8);                                                      80088500
         EMITO(IDIV);                                                   80088600
    XIT:                                                                80088700
    END OCRX;                                                           80088800
PROCEDURE ISUB;    FORWARD;                                             80088900
PROCEDURE SUBS;                                                         80089000
BEGIN    % * * * SUBS SETS UP SUBSCRIPTS * * * * * * * * * * * * * * * *80089100
         BOOLEAN BOO,MONITORED,SVINSUB;                                 80089200
         LABEL     XIT,OTHER;                                           80089300
         REAL T,TINDX,W,TV1,REL;                                        80089400
         IF V1=2 THEN                                                   80089500
    BEGIN                                                               80089600
         PASSMAC;                                                       80089700
         INPSUDOSTK ~ 0&LTV[TOPST]&NM[TOPSC]&6[TOPSL];                  80089800
         GO TO XIT                                                      80089900
    END;                                                                80090000
         IF NOT (MKSFF OR (SVINSUB~INSUB)) THEN                         80090100
    BEGIN          % FIRST (IN POSSIBLE NEST OF) SUB MACRO(S)           80090200
         LASTMKS ~ RELADDR;                                             80090300
         EMITO(MKS);         % LEAVE MKSFF OFF SO DOESNT GET NO-OPTED   80090400
         INSUB ~ TRUE;                                                  80090500
    END;                                                                80090600
         SCALESTOP ~ TRUE;             % STOP SCALE OF LITERALS         80090700
         PASSMAC;                                                       80090800
         DO                                                             80090900
    BEGIN                                                               80091000
         IF V2 { 1 THEN                                                 80091100
    BEGIN                                             % INDEX NAME      80091200
         BINARYV(TINDX~V1,0);                                           80091300
         IF BOOLEAN(V2) THEN                          % MONITORED       80091400
    BEGIN                                                               80091500
         EMITO(DUP);                                                    80091600
         OCCRSNO(IF1[INXR[TINDX].DNIX]);              % CONVERT TO INDEX80091700
         EMITNUM(MNTRINDX~MNTRINDX+1);                                  80091800
         NAMECALL(JUNKM);                                               80091900
         EMITO(STD);                                                    80092000
    END;                                                                80092100
         PASSMAC;                                                       80092200
         IF MACN2=XXXXM AND V1=5  THEN                                  80092300
    BEGIN                                                               80092400
         BOO~BOOLEAN(V2);                                               80092500
         MACRO;                                                         80092600
         IF JUNK ~ IF1[  INXR[TINDX].DNIX].LGHF ! 1 THEN                80092700
    BEGIN                                                               80092800
         EMITNUM(JUNK);                                                 80092900
         EMITO (MULT);                                                  80093000
    END ELSE                                                            80093100
         EMITNUM(JUNK);                                                 80093150
         EMITO (IF BOO THEN ADD ELSE SUBT);                             80093200
         PASSMAC                                                        80093300
    END;                                                                80093400
         OCRX((INXR[TINDX].DNIX)& 1 [2:47:1]);                          80093450
    END ELSE                                                            80093500
         IF V2 { 3 THEN                                                 80093600
    BEGIN                                             % DATA NAME       80093700
         TINDX~V1;                                                      80093800
         REL ~ RELADDR;                                                 80093900
         MONITORED ~ BOOLEAN(V2);                     % MONITORED       80094000
         W ~ 0;                                                         80094100
         DO                                                             80094200
    BEGIN                                                               80094300
         MACRO;                                                         80094400
         IF MACN2 = EXPRM THEN W ~ W + 1 ELSE                           80094500
         IF MACN2 = ENDXM THEN W ~ W - 1 ELSE                           80094600
         IF MACN2 = LITC  THEN                                          80094700
    BEGIN                                                               80094800
         BOO ~ TRUE;                                                    80094900
         TV1 ~ V1;                                                      80095000
    END ELSE                                                            80095100
         BOO ~ FALSE;                                                   80095200
    END UNTIL W = 0;                                                    80095300
         IF BOO AND NOT BOOLEAN(IF2[TINDX].OCDV) AND(RELADDR-REL)=2 THEN80095400
    BEGIN          % RESOLVE NOW NOT RUN TIME                           80095500
         IF TV1 > 1023 THEN IF NOT DELINKCST(TV1) THEN GO TO OTHER      80095600
    ELSE ELSE BEGIN                                                     80095700
         TEMPREL ~ RELADDR;                                             80095800
         RELADDR ~ REL;                                                 80095900
    END;                                                                80096000
         ERPNT ~ TINDX;                % MAKE ERR PRINT RIGHT REFERENCE 80096100
         IF (T ~ AVAL).PSS !  0 THEN  % SCALE REQUIRED                  80096200
    BEGIN                                                               80096300
         TV1 ~  IF BOOLEAN(T.PSDP) THEN TV1 | TEN[T.PSS]  % SCALE RIGHT 80096400
                   ELSE TV1 DIV TEN[T.PSS];               % SCALE LEFT  80096500
         AVAL.PSL ~ T.PSL - (T.PSS & T.PSDP [1:1:1]);                   80096600
    END;                                                                80096700
         IF TV1 LSS 1 OR TV1 GTR(REL~IF1[TINDX]).OCCF THEN ERR(102 );   80096800
         IF MONITORED THEN                                              80096900
    BEGIN                                                               80097000
         EMITNUM(TV1);                                                  80097100
         EMITNUM(MNTRINDX~MNTRINDX+1);                                  80097200
         NAMECALL(JUNKM);                                               80097300
         EMITO(STD);                                                    80097400
    END;                                                                80097500
         TV1 ~((TV1-1)|REL.LGHF)+REL.OFSF;                              80097600
         EMITNUM(TV1);                                                  80097700
    END ELSE BEGIN           % SORRY MUST DO AT RUN TIME                80097800
    OTHER:         % MUST BE RESOLVED ON THE STACK                      80097900
         ISUB;                                                          80098000
         IF MONITORED THEN                                              80098100
    BEGIN                                                               80098200
         EMITNUM(MNTRINDX~MNTRINDX+1);                                  80098300
         NAMECALL(JUNKM);                                               80098400
         EMITO(SND);                                                    80098500
    END;                                                                80098600
         OCRX(-TINDX);                                                  80098700
    END;                                                                80098800
         PASSMAC                                                        80098900
    END ELSE                                                            80099000
         IF V2=4 THEN                                                   80099100
    BEGIN                                             % ADD OFFSET      80099200
         IF JUNK ~ IF1[V1].OFSF ! 0 THEN                                80099300
    BEGIN                                                               80099400
         EMITNUM(JUNK);                                                 80099500
         EMITO( ADD);                                                   80099600
    END;                                                                80099700
         PASSMAC                                                        80099800
    END ELSE                                                            80099900
         IF V2=5 THEN                                                   80100000
    BEGIN                                                               80100100
         EMITO (ADD);                                                   80100200
         PSX ~ PSX-1;                  % DELETE BECAUSE OF ADD          80100300
         PASSMAC;                                                       80100400
    END;                                                                80100500
    END  UNTIL MACN2=FINSM;                                             80100600
         IF MNTRNG THEN                                                 80100700
    BEGIN                                                               80100800
         IF JUNKMON2=0 THEN JUNKMON2 ~ GETPRTLOC;                       80100900
         EMITPAIR(JUNKMON2,SND);                                        80101000
    END;                                                                80101100
         IF STORSUB>0 THEN                                              80101200
    BEGIN                                                               80101300
         EMITPAIR(IF STORSUB=1 THEN JUNKNOF ELSE JUNKXOF,STD);          80101400
         PSX ~ PSX-1;                                                   80101500
    END                                                                 80101600
         ELSE                                                           80101700
    BEGIN                                                               80101800
              EMITO(DUP);                                               80101900
              EMITISO(45,3);                                            80102000
              EMITO(EXCH);                                              80102100
              EMITL(8);                                                 80102200
              EMITO(IDIV);                                              80102300
              ONSTACK ~ 1;                                              80102400
    END;                                                                80102500
    XIT:                                                                80102600
         SCALESTOP ~ FALSE             % ALLOW SCALE OF LITERALS        80102700
        ; IF MKSFF ~ (NOT SVINSUB) AND TRUE THEN INSUB ~ FALSE;         80102800
END SUBS;                                                               80102900
PROCEDURE ISUB;                                                         80103000
COMMENT  ISUB INTEGERIZES SUBSCRIPTS;                                   80103100
    BEGIN     INTEGER I,N;                                              80103200
         IF (T ~ AVAL).PSS !  0 THEN                                    80103300
    BEGIN                                                               80103400
         I ~(IF T.PSDP=1 THEN -T.PSS ELSE T.PSS);                       80103500
         EMITNUM(N~TEN[ABS(I)]);            % SET SCALE                 80103600
         EMITO(IF I<0 THEN MULT ELSE IDIV); % SCALE LEFT OR RIGHT       80103700
         PS[PSX].PSL ~ T.PSL - I                                        80103800
    END;                                                                80103900
    END ISUB;                                                           80104000
PROCEDURE NESTER(SZ,OP);                                                80104100
         VALUE SZ,OP;                                                   80104200
         INTEGER SZ,OP;                                                 80104300
BEGIN                                                                   80104400
         INTEGER L1;                                                    80104500
         IF NOT CHRMODE THEN      % ENTER CHARACTER MODE                80104600
    BEGIN                                                               80104700
         EMITO(CMN);                                                    80104800
         IF BOOLEAN(L1~BVAL.PSSIN) THEN                                 80104900
    BEGIN                                                               80105000
         EMITVAR(2,CRF);                                                80105100
         EMITO(SFD);                                                    80105200
    END ELSE                                                            80105300
         IF JUNK~BVAL.PSOFS ! 0 THEN EMITVAR(JUNK,SFD);                 80105400
         IF BOOLEAN(ONSTACK) THEN                                       80105500
    BEGIN                                                               80105600
              EMITVAR(2+L1,SES);                                        80105700
              EMITVAR(8-AVAL.PSL,SFS);                                  80105800
              ONSTACK ~ 0;                                              80105900
    END ELSE                                                            80106000
              EMITVAR(2+L1,RSA);                                        80106100
         IF BOOLEAN(AVAL.PSSIN) THEN                                    80106200
    BEGIN                                                               80106300
         EMITVAR(L1+3,CRF);                                             80106400
         EMITO(SFS);                                                    80106500
    END ELSE                                                            80106600
         IF JUNK~AVAL.PSOFS ! 0 THEN EMITVAR(JUNK,SFS);                 80106700
    END;                                                                80106800
         IF SZ > 189 THEN                                               80106900
    BEGIN                                                               80107000
         IF (L1~SZ DIV 63) < 63 THEN                                    80107100
    BEGIN                                                               80107200
         EMITVAR(L1,BNS);                                               80107300
         L1 ~ 63;                                                       80107400
    END ELSE                                                            80107500
         EMITVAR(63,BNS);                                               80107600
         WHILE L1 > 63 DO                                               80107700
    BEGIN                                                               80107800
              EMITVAR(63,OP);                                           80107900
              L1 ~ L1 - 63;                                             80108000
    END;                                                                80108100
         IF L1!0 THEN EMITVAR(L1,OP);                                   80108200
         EMITO(ENS);                                                    80108300
         SZ ~ SZ MOD 63;                                                80108400
    END;                                                                80108500
         WHILE SZ > 63 DO                                               80108600
    BEGIN                                                               80108700
         EMITVAR(63,OP);                                                80108800
         SZ ~ SZ - 63;                                                  80108900
    END;                                                                80109000
         IF SZ!0 THEN EMITVAR(SZ,OP);                                   80109100
END NESTER;                                                             80109200
PROCEDURE SMEAR(LENGTH,CHAR);                                           80109300
         VALUE LENGTH,CHAR;                                             80109400
         REAL  LENGTH,CHAR;                                             80109500
    BEGIN                                                               80109600
         INTEGER T;                                                     80109700
         IF NOT CHRMODE THEN                                            80109800
    BEGIN                                                               80109900
              EMITO(CMN);                                               80110000
         IF BOOLEAN(BVAL.PSSIN) THEN                                    80110100
    BEGIN                                                               80110200
              EMITVAR(2,CRF);                                           80110300
              EMITO(SFD);                                               80110400
    END ELSE                                                            80110500
         IF T~BVAL.PSOFS ! 0 THEN EMITVAR(T,SFD);                       80110600
    END;                                                                80110700
         FILLWITHCHR(TMP,0,CHAR,24);                                    80110800
         IF LENGTH GTR 24 THEN EMITVAR(1,SDA);                          80110900
         EMITPROGCHR(TMP,IF LENGTH GTR 24 THEN (T~16-BVAL.PSOFS) ELSE   80111000
                    LENGTH);                                            80111100
              IF LENGTH>24 THEN                                         80111200
    BEGIN                                                               80111300
                   LENGTH ~ LENGTH-T ;                                  80111400
                   EMITVAR(1,RSA);                                      80111500
                   IF BOOLEAN(BVAL.PSSIN) THEN NESTER(LENGTH,TRS)       80111600
    ELSE BEGIN                                                          80111700
                   NESTER(LENGTH.WIX,TRW);                              80111800
                   IF T~LENGTH.CIX!0 THEN EMITVAR(T,TRS);               80111900
    END;                                                                80112000
    END;                                                                80112100
    END SMEAR;                                                          80112200
REAL PROCEDURE RFLENGTH(INDEX);  % THIS ROUTINE FINDS THE LENGTH        80112300
         VALUE  INDEX;           % OF AN AREA                           80112400
         REAL   INDEX;                                                  80112500
    BEGIN                                                               80112600
         IF BOOLEAN(IF2[INDEX].VARF) THEN  % IF SIZE DEPENDING          80112700
    BEGIN                                                               80112800
         BINARYV(IF3[INDEX].SZDF,2); % GEN CODE TO GET SIZE             80112900
         ISUB;                       % INTEGERIZE                       80113000
         EMITO(DUP);                                                    80113100
         EMITNUM(T ~ IF2[INDEX].SZF);                                   80113200
         EMITO(GRTR);                                                   80113300
         INDEX ~ RELADDR; EMITF;                                        80113400
         EMITNUM(T);                                                    80113500
         EMITL(7); EMITO(SSN);                                          80113600
         EMITL(26); EMITO(COM);        % GENERATE INV INX               80113700
         EMITBRANCH(INDEX,RELADDR,BFC);                                 80113800
         PSX ~ PSX-1;                                                   80113900
    END ELSE                                                            80114000
         RFLENGTH ~ IF1[INDEX].LGHF ;                                   80114100
    END RFLENGTH;                                                       80114200
PROCEDURE IDSCAN(INDEX);               % SCANS D-N GIVEN BY INDEX       80114300
         VALUE INDEX;                  % (WHOSE USAGE IS BCL)           80114400
         REAL INDEX;                   % FOR "A/B."                     80114500
    BEGIN                              % PLACING 7 CHARACTERS OF EACH OF80114600
         REAL SZ;                      % "A" AND "B" ON THE STACK       80114700
         EMITL(0); EMITL(0); EMITO(MKS); NAME(INDEX,0);                 80114800
         EMITO(CMN);                                                    80114900
         EMITVAR(4,SED); EMITVAR(1,SFD); EMITVAR(1,RSA);                80115000
         EMITVAR(SZ~IF2[INDEX].SZF,BNS);                                80115100
         EMITVAR(" ",TNE); EMITVAR(1,JFC);EMITVAR(2,JNS);EMITVAR(1,SFS);80115200
         EMITO(ENS);                                                    80115300
         EMITVAR(7,BNS);                                                80115400
         EMITVAR("/",TEQ); EMITVAR(3,JFC);                              80115500
         EMITCHAR(" ",1); EMITVAR(6,JFW); EMITVAR(".",TEQ);             80115600
         EMITVAR(3,JFC); EMITCHAR(" ",1);                               80115700
         EMITVAR(1,JFW); EMITVAR(1,TRS);                                80115800
         EMITO(ENS);                                                    80115900
         EMITVAR(SZ,BNS);                                               80116000
         EMITVAR("/",TEQ); EMITVAR(2,JFC); EMITVAR(1,SFS);              80116100
         EMITVAR(5,JNS); EMITVAR(".",TEQ); EMITVAR(1,JFC);              80116200
         EMITVAR(11,JNS); EMITVAR(1,SFS);                               80116300
         EMITO(ENS);                                                    80116400
         EMITVAR(1,SFD);                                                80116500
         EMITVAR(7,BNS);                                                80116600
         EMITVAR(".",TEQ); EMITVAR(3,JFC);                              80116700
         EMITCHAR(" ",1); EMITVAR(1,JFW); EMITVAR(1,TRS);               80116800
         EMITO(ENS);                                                    80116900
         EMITO(CMX);                                                    80117000
    END IDSCAN;                                                         80117100
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%81000000
%                                STORE                                 %81000100
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%81000200
    PROCEDURE MOVX(TYPE,FRMT);VALUE TYPE,FRMT;REAL TYPE,FRMT;FORWARD;   81000300
PROCEDURE MOV9 (TYPE,FRMT,SZER);                                        81000400
    VALUE TYPE,FRMT,SZER; REAL TYPE,FRMT; BOOLEAN SZER;                 81000500
BEGIN    COMMENT                                                        81000600
    MOV9 HANDLES NUMERIC MOVES.  THIS INCLUDES THE "ROUNDED" AND "ON    81000700
    SIZE ERROR" OPTIONS.                                                81000800
    THE PARAMETERS ARE:                                                 81000900
%        TYPE = 0  EXCHANGE AND MOVE                                    81001000
%               1  SAVE VALUE IN JUNK AND MOVE                          81001100
%               2  NORMAL MOVE                                          81001200
                3  STORE VALUE IN JUNK (ONLY)                           81001300
                4  EXCHANGE , SAVE VALUE IN JUNK AND MOVE               81001400
                5  STORE VALUE IN JUNK NON-DESTRUCTIVE                  81001500
                6  STORE ADDRESS IN JUNK (FOR EXPRESSION)               81001600
                                                                        81001700
         FRMT = 1  ROUNDED                                              81001800
                2  FIGURATIVE CONSTANT ZERO IS SENDING FIELD.           81001900
         SZER = TRUE    "ON SIZE ERROR CLAUSE".                         81002000
    ;                                                                   81002100
PROCEDURE NUMOVE(I,T,NERF);  % OCTAL STACK VALUE TO DECIMAL FIELD       81002200
         VALUE I,T,NERF;                                                81002300
         REAL I,T;                                                      81002400
         BOOLEAN NERF;            % IF EXCHANGE NOT NEEDED FOR LTV      81002500
    BEGIN                                                               81002600
         BOOLEAN DIN,DB;                                                81002700
         LABEL WRAP;                                                    81002800
         REAL FRMT;                                                     81002900
         IF T.PSL>11OR I.PSL>8 THEN    % FOR LENGTHS > 8 THEN           81003000
    BEGIN                              %                                81003100
         IF I.PSC=EN THEN              %   FOR EDITED FIELDS            81003200
    BEGIN                              %                                81003300
         IF NERF AND T.PST = LTV THEN  %   WE MUST STORE OFF            81003400
              REALEXCH;                %                                81003500
         IF BOOLEAN(I.PSSIN) THEN      %                                81003600
    BEGIN                              %   INFORMATION TO DO            81003700
         EMITPAIR(JUNKX,STD);          %                                81003800
         EMITPAIR(JUNKXOF,SND);        % EDITING BECAUSE THE            81003900
         NAMECALL(JUNKX);              %                                81004000
                                       % STACK INFORMATION IS           81004100
                                       %                                81004200
                                       % LOST BY THIS ROUTINE           81004300
    END ELSE                           %                                81004400
         EMITPAIR(JUNKX,SND);          %   AND THE INTRINSIC            81004500
         IF T.PST = LTV THEN           %                                81004600
              EXCHNG(BOOLEAN(2));      %                                81004700
    END;                               %                                81004800
         IF T.PST=LTV THEN             % THE STACK IS (FOR LTV)         81004900
    BEGIN                              %       MKS                      81005000
         IF T.PSL<12 THEN              %       POINTER                  81005100
    BEGIN                              %       VALUE                    81005200
         EMITL(0);                     %                                81005300
         EMITO(EXCH);                  %  THE STACK IS (MKSFF=TRUE)     81005400
    END;                               %       VALUE                    81005500
         IF BOOLEAN(I.PSSIN) THEN      %       MKS                      81005600
    BEGIN                              %       POINTER                  81005700
         EMITL(0);                     %                                81005800
         EMITO(MKS);                   %  THE STACK IS (MKSFF=FALSE)    81005900
         EMITL(0);                     %       VALUE                    81006000
         EMITO(CMN);                   %       POINTER                  81006100
         EMITVAR(7,SES);               %                                81006200
         EMITVAR(3,SED);               %  THE STACK SHOULD BE           81006300
         EMITVAR(1,TRW);               %      MKS                       81006400
         EMITO(CMX);                   %      POINTER                   81006500
    END ELSE                           %      VALUE IN DOUBLE PREC      81006600
         EMITL(I.PSOFS);               %      OFSET FOR DEST            81006700
    END ELSE BEGIN                     %      LENGTH OF DEST            81006800
         IF NOT MKSFF THEN EMITO(MKS); %      SCALE RIGHT               81006900
         EMITL(0);                     %      1= TRUNCATE,2=ROUND       81007000
         EMITL(0);                     %      [1:1]=1 IS J-SIGN         81007100
         IF NOT MKSFF THEN EMITL(0);   %                                81007200
         EMITL(IF DIN~BOOLEAN(I.PSSIN) %                                81007300
               THEN 0 ELSE I.PSOFS);   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%81007400
         EMITO(MKS);                                                    81007500
         EMITL(0);                                                      81007600
         EMITO(CMN);                                                    81007700
         EMITVAR(8+REAL(DIN)+REAL(DB~T.PSL}12)                          81007800
                  +(IF NOT MKSFF THEN 1 ELSE 0),SES);                   81007900
         EMITVAR(4+REAL(DB),SED);                                       81008000
         EMITVAR(1+REAL(DB)+REAL(NOT MKSFF AND DIN),TRW);               81008100
         IF MKSFF THEN                                                  81008200
         IF DIN THEN                                                    81008300
    BEGIN                                                               81008400
         EMITVAR(8,SFS);               % SKIP OVER MKS                  81008500
         EMITVAR(1,TRW);                                                81008600
    END ELSE                           % OF SET THERE ALREADY           81008700
    ELSE BEGIN                         % NOW GET POINTER                81008800
         EMITVAR(6,SED);     % MOVE DEST DISC UNDER MKS                 81008900
         EMITVAR(1,TRW);                                                81009000
    END;                                                                81009100
         EMITO(CMX);                                                    81009200
    END;                                                                81009300
         IF I.PSIX=0 THEN EMITNUM(I.PSL) ELSE                           81009400
         IF RFLENGTH(I.PSIX) ! 0 THEN EMITNUM(I.PSL);                   81009500
         EMITNUM((T.PSS&T[1:1:1])-(I.PSS&I[1:1:1]));                    81009600
         EMITL(1);           % TRUNCATE                                 81009700
         IF LASTMKS ~ IF2[I.PSIX].SGTF ! 0 THEN  % SIGNED               81009800
         IF LASTMKS = 1 THEN EMITO(SSN)          % STYPE                81009900
    ELSE BEGIN                                                          81010000
         EMITL(1);                               % JTYPE                81010100
         EMITD(47,2,1);                                                 81010200
    END ELSE                                                            81010300
         IF I.PSC = EN THEN EMITO(SSN);                                 81010400
         VALUCALL(OUTCONVERT);                                          81010500
         LASTMKS ~ - RELADDR;                                           81010600
WRAP:    IF T.PST!LTV THEN                                              81010700
    BEGIN                                                               81010800
         EMITO(DEL);                                                    81010900
         IF DB THEN EMITO(DEL);                                         81011000
         IF NOT MKSFF THEN                                              81011100
    BEGIN                                                               81011200
         EMITO(DEL);                                                    81011300
         IF DIN THEN EMITO(DEL);                                        81011400
    END;                                                                81011500
    END;                                                                81011600
         MKSFF ~ FALSE;                                                 81011700
    END ELSE BEGIN                     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%81011800
         IF T.PST = LTV THEN           % FOR LENGTH { 8 THEN            81011900
    BEGIN                              %                                81012000
         IF NOT NERF THEN REALEXCH;    %   THE  STACK FOR LTV           81012100
         LASTMKS ~ 2;                  %   NERF  STACK                  81012200
    END ELSE                           %   FALSE MKS                    81012300
         IF NOT MKSFF THEN             %         POINTER                81012400
    BEGIN                              %         VALUE                  81012500
         EMITO(MKS);                   %   TRUE  MKS                    81012600
         EMITL(0);                     %         VALUE                  81012700
         LASTMKS ~ 4;                  %         POINTER                81012800
    END ELSE                           %                                81012900
         LASTMKS ~ 3;                  %   THE STACK IS (MKSFF=TRUE)    81013000
         EMITO(CMN);                   %         VALUE                  81013100
         IF NOT MKSFF THEN             %         MKS                    81013200
              EMITVAR(3,RDA);          %         POINTER                81013300
         IF DIN ~ BOOLEAN(I.PSSIN)THEN %                                81013400
    BEGIN                              %   THE STACK IS (MKSFF=FALSE)   81013500
         EMITVAR(IF MKSFF THEN 2 ELSE  %         VALUE                  81013600
                   4,CRF);             %         POINTER                81013700
         LASTMKS ~ LASTMKS +1;         %                                81013800
         EMITO(SFD);                   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%81013900
    END ELSE                                                            81014000
         IF JUNK ~ I.PSOFS !0 THEN EMITVAR(JUNK,SFD);                   81014100
         EMITVAR(LASTMKS,SES);                                          81014200
         IF (NERF~I.PSC=EN)OR (LASTMKS~IF2[I.PSIX].SGTF)=2 THEN         81014300
              EMITVAR(1,SDA);     % EDITED NUMERIC OR J-SIGN            81014400
         EMITVAR(I.PSL,OCV);                                            81014500
         IF NOT NERF THEN    % NOT EDITED                               81014600
    BEGIN                                                               81014700
         IF LASTMKS ! 1 THEN % J-SIGNED OR UNSIGNED                     81014800
    BEGIN                                                               81014900
         EMITVAR(1,SRD);     % BACK UP TO LAST CHAR                     81015000
         IF LASTMKS=2 THEN   % J SIGN                                   81015100
         IF I.PSL>1 THEN                                                81015150
    BEGIN                                                               81015200
         EMITVAR(FRMT ~ 2+REAL(MKSFF AND T.PST!LTV AND NOT DIN OR NOT   81015300
              MKSFF AND T.PST!LTV),SDA);                                81015400
         EMITVAR(FRMT,RSA);                                             81015500
         EMITVAR(1,RDA);                                                81015600
         EMITVAR(1,TRZ);     % MOVE SIGN FROM LAST TO FIRST CHARACTER   81015700
         EMITVAR(FRMT,RDA);                                             81015800
         EMITVAR(1,BIR);     % GET RID OF SIGN BIT IN LAST CHARACTER    81015900
    END ELSE ELSE                                                       81016200
         EMITVAR(1,BIR);     % UNSIGNED SO RESET                        81016300
    END;                                                                81016400
         LASTMKS ~ RELADDR;                                             81016500
         EMITO(CMX);                                                    81016600
         GO TO WRAP;                                                    81016700
    END;                                                                81016800
    END;                                                                81016900
    END NUMOV;                                                          81017000
    LABEL XIT,XITA,XITB,JMP;                                            81017100
         REAL I,T,Y,Z,BRNCH,NUMDEL,D;                                   81017200
         REAL HERE;                                                     81017300
         BOOLEAN NERF,MKSIN,B,SVMKSFF;                                  81017400
DEFINE  NONLITXCH= EXCHNG(IF TYPE=0 THEN FALSE ELSE BOOLEAN(2))#,       81017500
        ETCLITXCH= EXCHNG(IF TYPE=0 THEN BOOLEAN(2) ELSE FALSE)#;       81017600
%%%%%%%%%%%%%%%%%%%%%%%% BEGIN MOV9 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%81017700
         LASTMKS ~ ABS(LASTMKS);                                        81017750
         IF ATYP = FGC THEN IF BVAL.PSC ! COMP THEN                     81017800
    BEGIN                                                               81017900
         IF BVAL.PSC = EN THEN BVAL.PSL ~ IF1[BVAL.PSIX].LGHF;          81018000
         MOVX(0,1);                                                     81018100
         GO TO XITA;                                                    81018200
    END ELSE BEGIN                                                      81018300
         EMITL(0);    %%%%NEEDS WORK                                    81018400
    END;                                                                81018500
         IF TYPE = 6 THEN     % STORE ADDRESS IN JUNKN FOR EXPRESSION   81018600
    BEGIN                                                               81018700
         IF BOOLEAN((JNKAD~AVAL).PSSIN) THEN                            81018800
    BEGIN                              % THERE IS AN OFFSET ON THE STACK81018900
         EMITPAIR(JUNKN,STD);          % SO WE SAVE IT OFF              81019000
         EMITPAIR(JUNKNOF,SND);        %                                81019100
         NAMECALL(JUNKN);              %                                81019200
    END ELSE                           % NORMAL                         81019300
         EMITPAIR(JUNKN,SND);                                           81019400
              PSX ~ PSX+2;                                              81019500
              GO TO XIT;                                                81019600
    END;                                                                81019700
         IF FRMT = 2  THEN    % SEND ZEROS                              81019800
    BEGIN                                                               81019900
         IF AVAL.PSL GTR 11 THEN EMITL(0);                              81020000
         EMITL(0);                                                      81020100
         INPSUDOSTK ~ BVAL & 0[TOPSIX] & LTV  [TOPST];                  81020200
    END;                                                                81020300
         IF TYPE=1 OR TYPE = 2 THEN   %                                 81020400
              IF BTYP GTR JKN THEN     % GET NAME IN BVAL BY EXCH       81020500
                   XCH(AVAL,BVAL);                                      81020600
                                                                        81020700
                                                                        81020800
         IF  TYPE=1 OR  TYPE > 2 THEN  % PUT IN JUNKV                   81020900
    BEGIN                                                               81021000
              IF TYPE=3 THEN                                            81021010
    BEGIN                                                               81021020
              IF ATYP{JKN THEN EXCHANGE;                                81021030
              IF MKSFF THEN VOIDMKS;                                    81021075
              JNKVA ~ AVAL;                                             81021080
    END ELSE                                                            81021090
              IF MKSFF AND (JNKVA~AVAL).PST!LTV AND TYPE!4 THEN         81021100
    BEGIN                                                               81021200
              IF BVAL.PST!JKC THEN VOIDMKS;  % DONT FOR TIME FUNCTION   81021300
              MKSFF ~ BOOLEAN(2);                                       81021400
              NONLITXCH;                                                81021500
    END;                                                                81021600
              EMITPAIR(JUNKV,(I~SND-REAL(TYPE=3)));                     81021700
              IF JNKVA.PSL>11 THEN                                      81021800
    BEGIN                              % DOUBLE PRECISION               81021900
              IF I = SND THEN EMITO(EXCH);                              81022000
              EMITPAIR(JUNKV2,I);                                       81022100
              IF I = SND THEN EMITO(EXCH);                              81022200
    END;                                                                81022300
              IF MKSFF.[46:1] THEN ETCLITXCH;                           81022400
              IF TYPE=3 OR TYPE=5 THEN                                  81022500
    BEGIN                                                               81022600
              PSX ~ PSX + 1 + REAL(TYPE=5);                             81022700
              GO TO XIT;                                                81022800
    END;                                                                81022900
    END;                                                                81023000
         IF TYPE=0 AND ATYP!LTV AND MKSFF THEN AVAL ~ AVAL&LTV [TOPST]; 81023100
         % * * * * * ALIGN DECIMAL POINTS * * * * *                     81023200
         IF T ~ (D~(I~BVAL).PSS&I[1:1:1])-((I~AVAL).PSS&I[1:1:1])!0     81023300
              OR ATYP=FPR OR (D>(Y~IF2[BVAL.PSIX].SZF) AND AVAL.PSL>Y)  81023400
         THEN                                                           81023410
    BEGIN                                                               81023500
         IF TYPE=4 THEN                                                 81023510
    BEGIN                                                               81023520
         TYPE ~ 2;                                                      81023530
         MKSIN ~ TRUE;                                                  81023540
    END ELSE                                                            81023550
         IF TYPE = 1 OR TYPE = 2 THEN                                   81023600
         IF ATYP ! LTV THEN                                             81023700
    BEGIN                                                               81023800
         IF MKSFF THEN VOIDMKS;                                         81023900
         NONLITXCH;                                                     81024000
         MKSIN ~ TRUE;                                                  81024100
    END;                                                                81024200
         NERF ~ AVAL.PSL>11;                                            81024250
         IF T<0 AND BOOLEAN(FRMT) THEN      % ROUND                     81024300
    BEGIN                                                               81024400
         EMITO(DUP);                                                    81024500
         IF NERF THEN BEGIN EMITL(0); EMITO(EXCH); END;                 81024600
         EMITNUM(JUNK ~ 5|TEN[ABS(T)-1]); EMITO(EXCH);                  81024700
         EMITL(0); EMITO(LESS);                                         81024800
         BRNCH ~ RELADDR; EMITF;                                        81024900
         EMITO(SSN);                                                    81025000
         EMITBRANCH(BRNCH,RELADDR,BFC);                                 81025100
         EMITO(ADD+REAL(NERF)|10);     % ADD OR DLA                     81025200
    END;                                                                81025300
         IF T!0 THEN                                                    81025400
    BEGIN                                                               81025500
         IF NERF THEN EMITNUM(TEN[ABS(T)+27]);                          81025600
         EMITNUM(IF ABS(T){11 THEN JUNK~TEN[ABS(T)] ELSE TEN[ABS(T)]);  81025700
         EMITO(IF I ~ DIVD+(10|REAL(NERF))-REAL(T>0)=DIVD THEN IDIV ELSE81025800
               I);                                                      81025900
         IF NERF AND T<0 AND BOOLEAN(FRMT) THEN  % ROUND                81026000
    BEGIN                                                               81026100
         EMITPAIR(PRTJUNK,STD);                                         81026200
         EMITPAIR(PRTJUNK2,SND);                                        81026300
         VALUCALL(PRTJUNK);                                             81026400
         EMITO(MKS);                                                    81026500
         VALUCALL(PRTJUNK2);                                            81026600
         VALUCALL(PRTJUNK);                                             81026700
         EMITL(0);                                                      81026800
         EMITL(1);                                                      81026900
         VALUCALL(DMOD);                                                81027000
         VALUCALL(PRTJUNK);                                             81027100
         EMITO(DLS);                                                    81027200
    END;                                                                81027300
    END;                                                                81027400
         IF ATYP=FPR AND NOT NERF THEN BEGIN EMITL(1); EMITO(IDIV); END;81027500
         IF D>Y AND D~AVAL.PSL > Y THEN                                 81027505
         IF D>11 THEN                                                   81027510
    BEGIN                                                               81027515
         EMITPAIR(PRTJUNK,STD); EMITPAIR(PRTJUNK2,STD);                 81027520
         EMITO(MKS);                                                    81027525
         VALUCALL(PRTJUNK2); VALUCALL(PRTJUNK);                         81027530
         EMITNUM(TEN[Y+27]); EMITNUM(TEN[Y]);                           81027535
         VALUCALL(DMOD);                                                81027540
         VALUCALL(PRTJUNK);                                             81027545
    END ELSE                                                            81027550
    BEGIN                                                               81027555
         EMITNUM(IF Y{11 THEN JUNK~TEN[Y] ELSE TEN[Y]);                 81027560
         EMITO(RDIV);                                                   81027565
         EMITPAIR(PRTJUNK,ISN);                                         81027570
    END;                                                                81027575
         IF BVAL.PSC=COMP AND                                           81027580
                ((T~IF2[BVAL.PSIX].SZF)>11 AND (I~AVAL.PSL){11          81027585
              OR T{11 AND I>11) THEN ELSE                               81027590
         IF MKSIN AND NOT SZER THEN                                     81027600
    BEGIN                                                               81027610
         ETCLITXCH;                                                     81027620
         MKSIN ~ FALSE;                                                 81027630
    END;                                                                81027640
              AVAL.PSS ~ BVAL.PSS;                                      81027700
    END ELSE IF TYPE=4 AND NOT SZER THEN                                81027800
    BEGIN                                                               81027810
         TYPE ~ 2;                                                      81027820
         REALEXCH;                                                      81027830
    END;                                                                81027840
         IF SZER THEN                                                   81027900
    BEGIN                                                               81028000
         IF MKSFF THEN IF TYPE=1 OR TYPE=2 THEN IF ATYP!LTV             81028600
              THEN VOIDMKS;                                             81028700
         IF TYPE=4 THEN                                                 81028710
    BEGIN                                                               81028720
         TYPE ~ 2;                                                      81028730
         MKSIN ~ TRUE;                                                  81028740
    END;                                                                81028750
         SVMKSFF ~ MKSFF;                                               81028800
         IF BOOLEAN(D ~ REAL(TYPE!0 AND NOT MKSIN)) THEN                81028900
    BEGIN                                                               81029000
         IF B ~ TAKASYL(RELADDR-4)=2060 THEN           % = LITC JUNKN   81029100
    BEGIN                                                               81029200
         TEMPREL ~ RELADDR;                                             81029300
         RELADDR ~ RELADDR-4;                                           81029400
    END ELSE                                                            81029500
    BEGIN                                                               81029600
         EMITPAIR(JUNKX,STD);                                           81029700
         IF BOOLEAN(BVAL.PSSIN) THEN EMITPAIR(PRTJUNK2,STD);            81029800
    END;                                                                81029900
    END;                                                                81030000
         IF TESTDIV0 THEN                                               81030010
    BEGIN                                                               81030020
         VALUCALL(ONSIZERROR);                                          81030030
         EMITO(LNOT); HERE ~ RELADDR; EMITF;                            81030040
    END;                                                                81030050
         T ~ IF2[BVAL.PSIX];                                            81030100
         IF BOOLEAN(Y ~ REAL(AVAL.PSL>11)) THEN                         81030200
    BEGIN                                                               81030300
         EMITPAIR(PRTJUNK,STD);                                         81030400
         EMITO(DUP);                                                    81030500
         VALUCALL(PRTJUNK);                                             81030600
         EMITO(EXCH);                                                   81030700
         VALUCALL(PRTJUNK);                                             81030800
    END ELSE EMITO(DUP);                                                81030900
         EMITO(SSP);                                                    81031000
         IF BOOLEAN(Y) THEN EMITNUM(TEN[T.SZF+27]);        % LOW PART   81031100
         EMITNUM(TEN[T.SZF]);                              % HIGH PART  81031200
         IF BOOLEAN(Y) THEN                                             81031300
    BEGIN                                                               81031400
         EMITO(DLS);                                                    81031500
         EMITO(LOR);                                                    81031600
         EMITL(0);                                                      81031700
    END;                                                                81031800
         EMITO(GREQ);                                                   81031900
         BRNCH ~ RELADDR;  EMITF;                                       81032000
         EMITL(1);                                                      81032100
         EMITPAIR(ONSIZERROR,STD);                                      81032200
         IF TESTDIV0 THEN EMITBRANCH(HERE,RELADDR,BFC);                 81032300
         I ~ REAL(MRCLEAN); MRCLEAN ~ FALSE;                            81032400
         EMITO(NOP); EMITO(NOP); EMITO(NOP); EMITO(NOP); EMITO(NOP);    81032500
         EMITO(NOP);                                                    81032600
         MRCLEAN ~ BOOLEAN(I);                                          81032700
         I  ~ RELADDR;  EMITBFW;                                        81032800
         EMITBRANCH(BRNCH,RELADDR,BFC);                                 81032900
         BRNCH ~ I;                                                     81033000
         IF BOOLEAN(D) THEN                                             81033100
    BEGIN                                                               81033200
         IF BOOLEAN(BVAL.PSSIN) THEN VALUCALL(PRTJUNK2);                81033300
         EMITPAIR(IF B THEN JUNKN ELSE JUNKX,LODD);                     81033400
    END ELSE IF MKSIN THEN ETCLITXCH;                                   81033500
    END;                                                                81033600
         IF (Y~BVAL.PSL)=0 THEN GO TO JMP;                              81033700
         IF BVAL.PSC=COMP THEN % * * RECEIVING FIELD IS COMPUTATIONAL * 81033800
    BEGIN                                                               81033900
         IF (T~(IF2[BVAL.PSIX].SZF))>11 AND AVAL.PSL { 11 THEN          81034000
    BEGIN                                                               81034100
              IF (TYPE=1 OR TYPE=2) AND NOT MKSIN AND ATYP!LTV THEN     81034200
    BEGIN                                                               81034210
              IF MKSFF THEN VOIDMKS;                                    81034220
              MKSIN ~ TRUE;                                             81034225
              EXCHNG (BOOLEAN(2));                                      81034230
    END;                                                                81034240
              EMITL(0);                                                 81034300
              EMITO(EXCH);                                              81034400
              AVAL.PSL ~ 12;                                            81034500
              IF MKSIN THEN ETCLITXCH;                                  81034550
    END ELSE                                                            81034600
         IF T < 12 AND AVAL.PSL > 11 THEN                               81034700
    BEGIN                                                               81034800
              IF (TYPE=1 OR TYPE=2) AND NOT MKSIN AND ATYP!LTV THEN     81034900
    BEGIN                                                               81034910
              IF MKSFF THEN VOIDMKS;                                    81034920
              EXCHNG(BOOLEAN(2));                                       81034930
    END;                                                                81034940
              EMITPAIR(PRTJUNK2,STD);                                   81035000
              EMITPAIR(PRTJUNK ,STD);                                   81035100
              EMITO(MKS);                                               81035200
              VALUCALL(PRTJUNK);                                        81035300
              VALUCALL(PRTJUNK2);                                       81035400
              EMITL(0);                                                 81035500
              EMITNUM(TEN[12]);                                         81035600
              VALUCALL(DMOD);                                           81035700
              EMITO(DEL);                                               81035800
              VALUCALL(PRTJUNK);                                        81035900
              EMITL(1);                                                 81036000
              EMITO(IDIV);                                              81036100
              AVAL.PSL ~ 11;                                            81036200
              TYPE ~ 3;                                                 81036300
    END;                                                                81036400
         I ~ BVAL.PSIX;                                                 81036500
         WHILE (T1~IF4[I].OCLF) ! 0 DO                                  81036600
    BEGIN                                                               81036700
         I ~ I-T1|IFSZ;                                                 81036800
         IF (T1~IF1[I]).CIX!0 OR T1.[15:3]!0 THEN B ~ TRUE;             81036900
    END;                                                                81037000
         IF T < 12 AND(Y~BVAL.PSOFS = 0 AND NOT BOOLEAN(BVAL.PSSIN) )   81037100
              OR (IF1[I].CIX=0 AND NOT B) THEN                          81037200
    BEGIN                                                               81037300
              IF TYPE ! 1 AND TYPE ! 2 THEN REALEXCH;                   81037400
              IF T } 12 THEN                                            81037500
              IF BOOLEAN(IF2[T~BVAL.PSIX].OSTK)THEN                     81037600
    BEGIN                                                               81037700
              EMITO(STD);    % STORE HIGH VALUE                         81037800
              NAMECALL(IF3[T].BADDF+1);                                 81037900
    END ELSE BEGIN                                                      81038000
              EMITPAIR(JUNKX,SND);                                      81038100
              EMITO(STD);   %HIGH PART                                  81038200
              EMITL(1);                                                 81038300
              NAMECALL(JUNKX);                                          81038400
              EMITO(INX);                                               81038500
    END;                                                                81038600
              EMITO(STD);                                               81038700
         IF BOOLEAN(BVAL.PSSIN) THEN EMITO(DEL);                        81038800
         IF SZER THEN                                                   81038900
    BEGIN                                                               81039000
         NUMDEL ~ 2+BVAL.PSSIN|(1-D)+REAL(AVAL.PSL>11)-D;               81039100
         SVMKSFF ~ FALSE;                                               81039200
    END;                                                                81039300
         IF MKSFF THEN VOIDMKS;                                         81039400
    END ELSE BEGIN                                                      81039500
         IF NOT MKSFF THEN                                              81039600
    BEGIN                                                               81039700
         EMITO(MKS);                                                    81039800
         EMITL(0);                                                      81039900
    END ELSE IF AVAL.PST=LTV THEN REALEXCH;                             81040000
         EMITO(CMN);                                                    81040100
         NERF ~ T GTR 11;                                               81040200
         IF NOT MKSFF THEN EMITVAR(3,RDA);                              81040300
         IF BOOLEAN(BVAL.PSSIN) THEN                                    81040400
    BEGIN                                                               81040500
              EMITVAR(4-2|REAL(MKSFF),CRF);                             81040600
              Y ~ -1;                                                   81040700
              EMITO(SFD);                                               81040800
    END ELSE                                                            81040900
              IF Y!0 THEN EMITVAR (Y,SFD);                              81041000
              EMITVAR(2+REAL(AVAL.PST!LTV)+REAL(AVAL.PST!LTV AND        81041100
                      NOT MKSFF)+BVAL.PSSIN,SES);                       81041200
              IF Y!0 THEN EMITVAR (IF  T  < 12 THEN 8 ELSE 16,TRS)      81041300
                   ELSE   EMITVAR (IF  T  < 12 THEN 1 ELSE 2, TRW);     81041400
              EMITO(CMX);                                               81041500
         NUMDEL ~ 1+REAL(AVAL.PST!LTV)+REAL(AVAL.PST!LTV AND NERF)      81041600
              -REAL(MKSFF)+REAL(NOT MKSFF AND BOOLEAN(BVAL.PSSIN));     81041700
         FOR I ~ 1 STEP 1 UNTIL NUMDEL DO EMITO(DEL);                   81041800
         NUMDEL ~ NUMDEL-D-D|BVAL.PSSIN;                                81041900
         MKSFF ~ FALSE;                                                 81042000
    END;                                                                81042100
         GO TO XIT;                                                     81042200
    END;                                                                81042300
         IF ATYP = LTV AND NOT MKSFF THEN ATYP ~ OPR;                   81042400
         IF (T1 ~ BVAL.PSC)=NM AND                                      81042500
              NOT(BOOLEAN((T ~ IF2[BVAL.PSIX]).PCTF) AND PRODFLG) OR    81042600
              (T1=EN AND NOT PRODFLG) THEN                              81042700
    BEGIN   % RECEIVING FIELD IS NUMERIC DISPLAY * * * * * * *          81042800
         IF TYPE = 0 AND ATYP ! LTV THEN REALEXCH;                      81042900
         IF T1 = EN THEN                                                81043000
    BEGIN                                                               81043100
         BVAL.PSC~ NM;                                                  81043200
         BVAL.PSL ~ IF1[BVAL.PSIX].LGHF;                                81043300
    END;                                                                81043400
JMP:                                                                    81043500
         NUMOVE(BVAL,AVAL,FALSE);                                       81043600
         GO TO XITB;                                                    81043700
    END;                                                                81043800
            % RECEIVING FIELD IS EDITED NUMERIC * * * * * * * *         81043900
         IF JUNK~BVAL.PSIX ! 0 THEN BVAL.PSL ~ IF2[JUNK].SZF;           81044000
         NERF ~ ATYP=LTV AND (AVAL.PSL>11 OR BVAL.PSL>8);               81044100
         IF BOOLEAN(T.BWZF) THEN                                        81044200
    BEGIN   % BLANK IF ZERO * * * * * * * * * * * * * * * * * *         81044300
         IF MKSIN ~ (ATYP!LTV) THEN                                     81044400
    BEGIN                                                               81044500
         IF MKSFF THEN VOIDMKS;                                         81044600
         NONLITXCH;                                                     81044700
    END;                                                                81044800
              EMITO(DUP); EMITL(0); EMITO(EQUL);                        81044900
              Z ~ RELADDR;  EMITF;                                      81045000
              EMITO(DEL); IF T.SZF > 11 THEN EMITO(DEL);                81045100
         IF MKSIN THEN BEGIN EMITO(MKS); EMITL(0); END;                 81045200
              EMITO(CMN);                                               81045300
         IF MKSIN THEN EMITVAR(3,RDA);                                  81045400
         IF BOOLEAN(BVAL.PSSIN) THEN                                    81045500
    BEGIN                                                               81045600
         EMITVAR(2+2|REAL(MKSIN),CRF);                                  81045700
         EMITO(SFD);                                                    81045800
    END ELSE                                                            81045900
         IF JUNK ~ BVAL.PSOFS ! 0 THEN EMITVAR(JUNK,SFD);               81046000
              BLAND(TMP,3);                                             81046100
              EMITPROGCHR(TMP,IF1[BVAL.PSIX].LGHF);                     81046200
              EMITO(CMX);                                               81046300
         IF MKSIN THEN EMITO(DEL);                                      81046400
         Y  ~ RELADDR;  EMITBFW;                                        81046500
              EMITBRANCH(Z,RELADDR,BFC);                                81046600
         IF MKSIN THEN ETCLITXCH;                                       81046700
         BVAL ~ BVAL & (IF BOOLEAN(T.PCTF) THEN EN ELSE NM) [TOPSC];    81046800
    END;                                                                81046900
         IF TYPE = 0 AND ATYP ! LTV THEN REALEXCH;                      81047000
         IF NOT BOOLEAN(T.PCTF) THEN NUMOVE(BVAL,AVAL,FALSE)            81047100
    ELSE BEGIN                                                          81047200
         IF (Z~(Z~BVAL).PSOFS +(IF1[Z.PSIX].LGHF-Z.PSL))>7 THEN         81047300
    BEGIN                                                               81047400
              IF ATYP = LTV THEN REALEXCH;                              81047500
              FRMT ~ 0;                                                 81047600
              EMITL(Z.WIX);                                             81047700
              EMITO(EXCH);                                              81047800
              EMITO(INX);                                               81047900
              NERF ~ NOT NERF;                                          81048000
    END;                                                                81048100
         IF MRCLEAN AND (RELADDR-LSTCST)}500 THEN                       81048200
    BEGIN                                                               81048300
         MRCLEAN ~ FALSE;                                               81048400
         CONSTANTCLEAN;                                                 81048500
    END;                                                                81048600
         MKSIN ~ MKSFF;                                                 81048650
         NUMOVE(BVAL & Z [TOPSOFS],AVAL,NERF);                          81048700
         IF LASTMKS < 0 THEN                                            81048800
    BEGIN                                                               81048900
         EMITO(MKS);                                                    81049000
         IF BOOLEAN(BVAL.PSSIN) THEN VALUCALL(JUNKXOF) ELSE             81049100
         IF BOOLEAN(EDITABLE[(JUNK~IF4[BVAL.PSIX].EDTF+1).[36:5],       81049200
              JUNK.[41:7]].[35:1]) THEN          % LEADING UNARY SIGN   81049300
              EMITL(0);                                                 81049400
         NAMECALL(JUNKX);    % THIS WAS PUT THERE BY NUMOVE             81049500
         EMITO(CMN);                                                    81049600
         IF BOOLEAN(BVAL.PSSIN) THEN                                    81049700
    BEGIN                                                               81049800
         EMITVAR(2,CRF);                                                81049900
         EMITO(SFD);                                                    81050000
         EMITVAR(1,SDA);                                                81050100
    END ELSE                                                            81050200
         IF Z>7 THEN IF JUNK~(Z&0[45:45:3])-BVAL.PSOFS!0 THEN           81050300
              EMITVAR(JUNK,SRD)                                         81050400
             ELSE ELSE IF JUNK ~BVAL.PSOFS !0 THEN EMITVAR(JUNK,SFD);   81050500
         EMITVAR(1,RSA);                                                81050600
         IF Z.CIX !0 THEN EMITVAR(Z.CIX,SFS);                           81050700
    END ELSE BEGIN                                                      81050800
         EMITVAR(1,RDA);     %RECALL FOR EDITING                        81050900
         IF Z ~ Z-BVAL.PSOFS !0 THEN EMITVAR(Z,SRD);                    81051000
         EMITVAR(1,RSA);                                                81051100
         IF ATYP = LTV THEN LASTMKS ~ - RELADDR;                        81051200
    END;                                                                81051300
         TEED(BVAL.PSIX & REAL(LASTMKS}0 AND (NOT MKSIN OR              81051400
              (ATYP!LTV AND IF2[BVAL.PSIX].SUBF=0)))[1:47:1]);          81051450
         IF AVAL.PST ! LTV AND LASTMKS } 0 THEN  % DIDNT USE THE INT    81051500
    BEGIN                                                               81051600
         EMITO(DEL);                                                    81051700
         IF NOT MKSFF THEN                                              81051800
    BEGIN                                                               81051900
         EMITO(DEL);                                                    81052000
         IF BOOLEAN(BVAL.PSSIN) THEN EMITO(DEL);                        81052100
    END;                                                                81052200
    END;                                                                81052300
         MKSFF ~ FALSE;                                                 81052400
    END;                                                                81052500
         IF BOOLEAN(T.BWZF) THEN                                        81052600
    BEGIN                                                               81052700
         IF  CHRMODE THEN EMITO(CMX);                                   81052800
         EMITBRANCH(Y,RELADDR,BFW);                                     81052900
    END;                                                                81053000
    XITB:                                                               81053100
         IF SZER THEN                                                   81053200
         NUMDEL ~ REAL(ATYP!LTV) | (2+REAL(AVAL.PSL>11)-REAL(MKSFF OR   81053300
                  BOOLEAN(D))+REAL(NOT MKSFF AND BOOLEAN(BVAL.PSSIN     81053400
                  |(1-D))));                                            81053500
XIT:                                                                    81053600
         IF SZER THEN                                                   81053700
    BEGIN                                                               81053800
         TEMPREL ~ RELADDR;                                             81053900
         RELADDR ~ BRNCH-12;                                            81054000
         IF SVMKSFF THEN                                                81054100
    BEGIN                                                               81054200
         EMITO(CMN);                                                    81054300
         EMITO(CMX);                                                    81054400
    END;                                                                81054500
         FOR I ~ 1 STEP 1 UNTIL NUMDEL DO EMITO(DEL);                   81054600
         RELADDR ~ TEMPREL;                                             81054700
         EMITBRANCH(BRNCH,RELADDR,BFW);                                 81054800
    END;                                                                81054900
         PSX ~ PSX - 2;                                                 81055000
         IF DEBUGTOG THEN MNTRPSS;                                      81055100
    XITA:IF MNTRNGS THEN SETUPMONITOR;                                  81055200
END MOV9;                                                               81055300
PROCEDURE GIVEMELITERAL(SIZE,FLG);                                      81055400
         VALUE SIZE,FLG;                                                81055500
         REAL SIZE; BOOLEAN FLG;                                        81055600
    BEGIN          % SETS UP LITERALS FOR MOVX AND RELATE               81055700
         REAL S,T,P,Q;                                                  81055800
         FUNNYALL ~ 0;                                                  81055900
         IF AHL THEN    % ALL OF MORE THAN ONE CHARACTER                81056000
         IF LITSZ < 8 THEN                                              81056100
    BEGIN                                                               81056200
              TMP[0] ~ GETCHARS(STK,0,LITSZ);                           81056300
              EMITSTRING(TMP,LITSZ,FLG);                                81056400
    END ELSE                                                            81056500
         IF SIZE > 256 THEN                                             81056600
    BEGIN                                                               81056700
              FUNNYALL ~ -LITSZ;                                        81056800
              WHILE FUNNYALL ~ FUNNYALL+LITSZ { 8 DO                    81056900
    BEGIN     DO                                                        81057000
    BEGIN                                                               81057100
              PUSHOVER(TMP[S.WIX],S.CIX,STK,0,P ~ IF (T1~LITSZ-T){63    81057200
                       THEN T1 ELSE 63);                                81057300
              S ~ S + P;                                                81057400
    END  UNTIL  T~T+P = LITSZ;                                          81057500
              P ~ T ~ 0;                                                81057600
    END;                                                                81057700
              EMITSTRING(TMP,FUNNYALL,FLG);                             81057800
    END ELSE BEGIN                                                      81057900
              FUNNYALL ~ -LITSZ;                                        81058000
              WHILE FUNNYALL ~ FUNNYALL+LITSZ < SIZE DO                 81058100
    BEGIN     Q ~ IF (P~SIZE-FUNNYALL)>LITSZ THEN LITSZ ELSE P;         81058200
              DO                                                        81058300
    BEGIN                                                               81058400
         PUSHOVER(TMP[S.WIX],S.CIX,STK[0],0,P~IF T+63 { Q THEN 63 ELSE  81058500
                        Q - T);                                         81058600
              S ~ S+P;                                                  81058700
    END UNTIL T ~ T + P = Q;                                            81058800
              T ~ 0;                                                    81058900
    END;                                                                81059000
              FUNNYALL ~ 0;                                             81059100
         EMITSTRING(TMP,T~IF LITSZ}SIZE THEN SIZE ELSE LITSZ,FLG);      81059200
    END ELSE BEGIN      % NON NUMERIC LITERAL                           81059300
         IF SVNNL THEN                                                  81059400
    BEGIN                                                               81059500
              EMITL(SPOOLINDEX.WIX);                                    81059600
              NAMECALL(SCURRENTPOOLADR);                                81059700
              REALEXCH;  % GET DATANAME ON TOP OF STACK                 81059800
    END ELSE BEGIN                                                      81059900
         IF MOVEALL THEN  % A ONE CHARACTER SMEAR                       81060000
    BEGIN                                                               81060100
              IF NOTRLNG > 0 THEN BLAND(TMP[LITSZ.WIX],(NOTRLNG+7).WIX);81060200
         WHILE T<LITSZ DO                                               81060300
    BEGIN                                                               81060400
         P ~ IF (Q~LITSZ-T)>63 THEN 63 ELSE Q;                          81060500
         FILLWITHCHR(TMP[S.WIX],S.CIX,ALLCHAR,P);                       81060600
         T ~ T+P;                                                       81060700
         S ~ S+P;                                                       81060800
    END;                                                                81060900
              IF(Q~IF SIZE< 8 THEN IF SIZE<TOTSZ THEN SIZE ELSE TOTSZ   81061000
              ELSE TOTSZ) LSS 8 THEN TMP[0] ~ GETCHARS(TMP,0,Q);        81061100
              EMITSTRING(TMP,Q,FLG);                                    81061200
    END ELSE BEGIN                                                      81061300
         IF NOLDNG> 0 THEN BLAND(TMP[0],((S~NOLDNG)+7).WIX);            81061400
         IF NOTRLNG > 0 THEN BLAND(TMP[LITSZ.WIX],(NOTRLNG+15).WIX);    81061500
         WHILE T LSS LITSZ DO                                           81061600
    BEGIN                                                               81061700
         P ~ IF Q~LITSZ-T GTR 63 THEN 63 ELSE Q;                        81061800
              PUSHOVER(TMP[S.WIX],S.CIX,STK[T.WIX],T.CIX,P);            81061900
              T ~ T + P;                                                81062000
              S ~ S + P;                                                81062100
    END;                                                                81062200
         IF (Q~IF SIZE<8 THEN IF SIZE<TOTSZ THEN SIZE ELSE TOTSZ ELSE   81062300
              TOTSZ)<8 THEN IF NOT FLG THEN TMP[0] ~ GETCHARS(TMP,0,Q); 81062400
         EMITSTRING(TMP,Q,FLG);                                         81062500
    END;                                                                81062600
    END;                                                                81062700
    END;                                                                81062800
END GIVEMELITERAL;                                                      81062900
PROCEDURE MOVX(TYPE,FRMT);VALUE TYPE,FRMT;REAL TYPE,FRMT;               81063000
BEGIN    COMMENT * * *                                                  81063100
    MOVX HANDLES ALPHANUMERIC MOVES.                                    81063200
    TYPE:                                                               81063300
         0 = EXCHANGE REAL STACK, NOT PSEUDO                            81063400
         1 = STORE ADDRESS IN JUNK, EXCHANGE PSEUDO STACK NOT REAL      81063500
         2 = STORE ADDRESS IN JUNK, EXCHANGE REAL STACK, NOT PSEUDO     81063600
         3 = EXCHANGE PSEUDO STACK, NOT REAL                            81063700
         4 = STORE VALUE IN JUNK IN MOV9 (FRMT 6 ONLY)                  81063800
    FRMT - MOVE TO:                                                     81063900
         1 = ALPHANUMERIC,                                              81064000
         2 = ALPHANUMERIC EDITED,                                       81064100
         3 = NUMERIC AND NUMERIC EDITED,                                81064200
         6 = COMP TO AN OR EA (ONLY TYPE=4 APPLIES)                     81064400
         8 = FORMAT 2                                                   81064500
    ;                                                                   81064600
         % * * * TWO IMPORTANT CONCEPTS                                 81064700
         %    1. THE JUSTIFIED CLAUSE IS ILLEGAL FOR A VARIABLE SIZE    81064800
         %         ITEM.                                                81064900
         %    2. AN EDITED ITEM CANNOT BE VARIABLE SIZE.                81065000
REAL PROCEDURE FIGVALUE;                                                81065100
BEGIN                                                                   81065200
    REAL      T;                                                        81065300
         FIGVALUE ~ IF (T~AVAL.PSIX)=LOWV THEN                          81065400
                    IF BVAL.PSC}NM THEN "0" ELSE " " ELSE               81065500
              IF T=UPPERB THEN IF BVAL.PSC=AB THEN "Z" ELSE "9" ELSE    81065600
              IF T = HIGHV THEN "9" ELSE                                81065700
              IF T = SPACEV THEN " " ELSE                               81065800
              IF T = ZEROV THEN "0" ELSE                                81065900
              IF T = QUOTE THEN """ ELSE                                81066000
              IF T = ENDV THEN "~" ELSE 12;                             81066100
         IF DEBUGTOG THEN MNTRPSS;                                      81066200
END FIGVALUE;                                                           81066300
PROCEDURE MOVENNL(XITCTRL);                                             81066400
         VALUE    XITCTRL;  BOOLEAN  XITCTRL;                           81066500
BEGIN    % * * * MOVES NON-NUMERIC LITERALS TO AN AREA * * * * * * * * *81066600
         REAL DESTL,SORCL,T,B;                                          81066700
         BOOLEAN DONTEX;                                                81066750
         LABEL XIT,L,L1,FA,AHLBL,L2,L3;                                 81066800
         DESTL~BVAL.PSL;                                                81066900
         SORCL ~ IF AHL THEN DESTL ELSE IF MOVEALL THEN IF (T~AVAL.PSL) 81067000
              >DESTL THEN DESTL ELSE T ELSE AVAL.PSL;                   81067050
         IF BOOLEAN((T~IF2[BVAL.PSIX]).JSTF) THEN     % RIGHT JUSTIFIED 81067100
    BEGIN                                                               81067200
         IF MOVEALL THEN IF XITCTRL THEN                                81067300
    BEGIN                                                               81067310
         IF DESTL>SORCL THEN SMEAR(DESTL-SORCL,"  ");                   81067320
         SMEAR(SORCL,ALLCHAR);                                          81067330
    END ELSE GO TO L;                                                   81067340
    BEGIN                                                               81067400
         IF NOT XITCTRL THEN                                            81067410
    BEGIN                                                               81067415
    L:   IF (B ~(IF BOOLEAN((B~BVAL).PSSIN) THEN 0 ELSE B.PSOFS)        81067420
              +(IF1[B.PSIX].LGHF-DESTL))>7 THEN                         81067422
    BEGIN                                                               81067425
         EMITL(B.WIX);                                                  81067430
         EMITO(EXCH);                                                   81067435
         EMITO(INX);                                                    81067440
    END;                                                                81067445
         BVAL ~ BVAL & B [TOPSOFS];                                     81067450
         IF NOT MOVEALL THEN GO TO L2;                                  81067456
    L3:                                                                 81067458
         IF MOVEALL THEN                                                81067460
    BEGIN                                                               81067462
         EMITO(CMN);                                                    81067464
         IF BOOLEAN(BVAL.PSSIN) THEN                                    81067465
    BEGIN                                                               81067470
         EMITVAR(2,CRF); EMITO(SFD);                                    81067472
    END;                                                                81067474
    END ELSE NESTER(0,TRS);            % ENTER CHARACTER MODE           81067475
         IF (B~B.CIX)!0 AND (MOVEALL OR BOOLEAN(BVAL.PSSIN))            81067480
              THEN EMITVAR(B,SFD);                                      81067481
         IF DESTL{24 OR NOT MOVEALL THEN EMITVAR(1,SDA);                81067482
         IF DESTL>SORCL THEN SMEAR(DESTL-SORCL," ")                     81067484
              ELSE IF (T1~SORCL-DESTL)>0 THEN NESTER(T1,SFS);           81067490
         IF MOVEALL THEN SMEAR(SORCL,ALLCHAR) ELSE                      81067492
              NESTER(IF SORCL<DESTL THEN SORCL ELSE DESTL,TRS);         81067494
         GO TO L1;                                                      81067495
    END;                                                                81067496
    L2:                                                                 81067499
         IF AHL AND LITSZ<8 THEN DO PUSHOVER(STK[LITSZ.WIX],LITSZ.CIX,  81067500
              STK[0],0,LITSZ) UNTIL (LITSZ~LITSZ+LITSZ)}8;              81067600
         GIVEMELITERAL(SORCL,TRUE);                                     81067800
         T ~ IF SORCL<DESTL THEN SORCL ELSE DESTL;                      81067900
         IF FUNNYALL>0 THEN LITSZ ~ FUNNYALL;                           81068000
         IF AHL AND LITSZ<T THEN GO TO AHLBL;                           81068100
         IF NOT XITCTRL THEN GO TO L3;                                  81068150
         IF DESTL>SORCL THEN           % BLANK FILL DEST ON LEFT        81068200
    BEGIN                                                               81068300
         NESTER(0,TRS);                % ENTER CHARACTERMODE            81068400
         SMEAR(DESTL-SORCL," ");                                        81068500
    END ELSE IF (T1~SORCL-DESTL)>0 THEN NESTER(T1,SFS);                 81068600
         NESTER(T,TRS);                                                 81068700
    END;                                                                81068800
         IF XITCTRL THEN EMITO(CMX) ELSE                                81068900
    BEGIN                                                               81068950
    L1:  EMITVAR(1,RSA);                                                81068960
         EMITVAR(1,RDA);                                                81068970
         IF (T~IF1[BVAL.PSIX].LGHF-BVAL.PSL)>0 THEN NESTER(T,SRD);      81068980
    END;                                                                81068995
         GO TO XIT;                                                     81068996
    END                                                                 81069000
         ELSE                                         % JUSTIFIED LEFT  81069100
         IF BOOLEAN(T.VARF) THEN                      % VARIABLE LENGTH 81069200
    BEGIN                                             % CALL INTRINSIC  81069300
         IF NOT XITCTRL THEN                                            81069310
         IF BOOLEAN(BVAL.PSSIN) THEN   % SAVE DEST IN JUNKX, OFFSET IN  81069320
    BEGIN                              % JUNKXOF                        81069330
         EMITPAIR(JUNKX,STD);                                           81069340
         EMITPAIR(JUNKXOF,SND);                                         81069350
         NAMECALL(JUNKX);                                               81069360
    END ELSE EMITPAIR(JUNKX,SND);                                       81069370
         IF MOVEALL THEN                                                81069400
    BEGIN                    % BUILD LITERAL IN JUNKA                   81069500
         EMITO(MKS);                                                    81069600
         EMITPAIR(JUNKA,LODD);                                          81069700
         EMITO(CMN);                                                    81069800
         SMEAR(SORCL,ALLCHAR);                                          81069900
         EMITO(CMX);                                                    81070000
         EMITPAIR(JUNKA,LODD);                                          81070100
    END ELSE                                                            81070200
    BEGIN                                                               81070300
         IF AHL AND LITSZ<8 THEN DO PUSHOVER(STK[LITSZ.WIX],LITSZ.CIX,  81070400
              STK[0],0,LITSZ) UNTIL (LITSZ~LITSZ+LITSZ)}8;              81070500
         NOEXCH ~ TRUE;                                                 81070600
         GIVEMELITERAL(SORCL,TRUE);    % LEAVE PTR TO C-POOL ON TOP     81070700
         IF FUNNYALL>0 THEN GO TO FA ELSE IF AHL AND SORCL>LITSZ THEN   81070800
    BEGIN                              % BUILD WHOLE LITERAL IN JUNKA   81070900
         FUNNYALL ~ LITSZ;                                              81071000
    FA:  EMITO(MKS);                                                    81071100
         EMITPAIR(JUNKA,LODD);                                          81071200
         EMITO(CMN);                                                    81071300
         EMITVAR(3,RSA);                                                81071400
         NESTER(FUNNYALL,TRS);                                          81071500
         EMITVAR(1,RSA);                                                81071600
         NESTER(SORCL-FUNNYALL,TRS);                                    81071700
         EMITO(CMX);                                                    81071800
         EMITO(DEL);              % DELETE C-POOL DESCRIPTOR            81071900
         EMITPAIR(JUNKA,LODD);    % LEAVE PTR TO JUNKA ON TOP           81072000
    END;                                                                81072100
    END;                                                                81072200
         REALEXCH;                % GET DEST (=BVAL) ON TOP             81072300
         IF BOOLEAN(BVAL.PSSIN) THEN                                    81072400
    BEGIN                                                               81072500
         EMITO(EXCH);                                                   81072600
         EMITL(0);                                                      81072700
         EMITO(EXCH);                                                   81072800
    END ELSE                                                            81072900
    BEGIN                                                               81073000
         EMITL(0);                                                      81073100
         EMITL(BVAL.PSOFS);                                             81073200
    END;                                                                81073300
         IF AHL THEN                                                    81073400
    BEGIN                                                               81073500
         JUNK ~ RFLENGTH(BVAL.PSIX);                                    81073600
         EMITO(DUP);                                                    81073700
    END ELSE                                                            81073800
    BEGIN                                                               81073900
         EMITNUM(SORCL);                                                81074000
         JUNK ~ RFLENGTH(BVAL.PSIX);                                    81074100
    END;                                                                81074200
         IF COBOLVARSZ=0 THEN COBOLVARSZ ~ CALLINTRIN(113);             81074300
         EMITL(0);                                                      81074400
         EMITL(10);          % VARIABLE SIZE MOVE                       81074500
         VALUCALL(COBOLVARSZ);                                          81074600
         LASTMKS ~ -1;                                                  81074650
         GO TO XIT;                                                     81074700
    END; %%%%%%%%%%%%%%%%%%%%%%%%% REGULAR MOVE %%%%%%%%%%%%%%%%%%%%%%%%81074800
         IF MOVEALL THEN                                                81074900
         IF XITCTRL THEN SMEAR(SORCL ,ALLCHAR)   %SIMPILE SMEAR         81075000
    ELSE BEGIN               % EDITED RECEIVING FIELD                   81075100
         IF NOT BOOLEAN((B~BVAL).PSSIN) THEN                            81075200
    BEGIN                                                               81075300
         EMITL(0);      % MAKE PLACE FOR EDITING ELSE USE OFSET         81075400
         EMITO(EXCH);                                                   81075500
    END;                                                                81075600
         EMITO(CMN);                                                    81075700
         IF BOOLEAN(B.PSSIN) THEN                                       81075800
    BEGIN                                                               81075900
         EMITVAR(2,CRF);                                                81076000
         EMITO(SFD);                                                    81076100
    END ELSE                                                            81076200
         IF JUNK~B.PSOFS ! 0 THEN EMITVAR(JUNK,SFD);                    81076300
         EMITVAR(1,SDA);               % REMEMBER START OF FIELD        81076400
         NESTER(IF1[B.PSIX].LGHF-DESTL,SFD); % MOVE TO INSERT AREA      81076500
         EMITVAR(2,SDA);               % REMEMBER THIS                  81076600
         SMEAR(SORCL ,ALLCHAR);                                         81076700
         IF (T1~DESTL-SORCL)>0 THEN SMEAR(T1," ");                      81076750
         EMITVAR(1,RDA);               % SET UP FOR EDITING             81076800
         EMITVAR(2,RSA);                                                81076900
         GO TO XIT;                                                     81077000
    END ELSE BEGIN                                                      81077100
         IF AHL AND LITSZ LSS 8 THEN                                    81077400
         DO                                                             81077500
         PUSHOVER(STK[LITSZ.WIX],LITSZ.CIX,STK[0],0,LITSZ)              81077600
         UNTIL (LITSZ~LITSZ+LITSZ) GEQ 8;                               81077700
         NOEXCH ~ DONTEX ~ NOT XITCTRL AND ((AHL AND LITSZ<             81077750
              (T~IF SORCL<DESTL THEN SORCL ELSE DESTL)) OR DESTL>SORCL);81077760
         GIVEMELITERAL(T,FALSE);                                        81077800
         IF FUNNYALL>0 THEN LITSZ ~ FUNNYALL;                           81077850
         IF NOT XITCTRL THEN      % EDITING                             81077900
         IF DONTEX THEN                                                 81078000
    BEGIN                                                               81078100
         EMITL(0);                                                      81078400
         NAMECALL(JUNKA);                                               81078500
         B ~ BVAL;                                                      81078600
         BVAL ~ B & 0[16:44:4];   % CLEAR OFSET AND PSSIN               81078700
    END ELSE BEGIN                                                      81078800
         NESTER(0,TRS);                                                 81078900
         GO TO XIT;                                                     81079000
    END;                                                                81079100
         IF AHL AND LITSZ LSS T THEN                                    81079200
    BEGIN                                                               81079300
   AHLBL:                                                               81079400
         NESTER(0,TRS);      % ENTER CHARACTERMODE                      81079500
         EMITVAR(1,SDA);     % REMEMBER WHERE WE STARTED                81079600
         NESTER(LITSZ,TRS);  % MOVE TO DATA                             81079700
         T ~ T - LITSZ;      % SUB OUT MOVED AMT                        81079800
         EMITVAR(1,RSA);     % READY SMEAR                              81079900
    END;                                                                81080000
         NESTER(T,TRS);      % MOVE THE DATA                            81080100
    END;                                                                81080200
         IF SORCL LSS DESTL THEN                                        81080300
    BEGIN                                                               81080400
         IF NOT BOOLEAN(BVAL.PSSIN)THEN BVAL.PSOFS~BVAL.PSOFS+AVAL.PSL; 81080500
         SMEAR(DESTL-SORCL," ");                                        81080600
    END;                                                                81080700
         IF XITCTRL THEN EMITO(CMX)                                     81080900
    ELSE BEGIN                                                          81081000
         EMITVAR(1,RSA);                                                81081100
         EMITVAR(3,RDA);                                                81081200
         BVAL ~ B;                                                      81081300
         IF BOOLEAN(B.PSSIN) THEN                                       81081400
    BEGIN                                                               81081500
         EMITVAR(4,CRF);                                                81081600
         EMITO(SFD);                                                    81081700
    END ELSE                                                            81081800
         IF JUNK ~ B.PSOFS ! 0 THEN EMITVAR(JUNK,SFD);                  81081900
     END ;                                                              81082000
    XIT:                                                                81082100
END MOVENNL;                                                            81082200
PROCEDURE MVNM;                                                         81082300
BEGIN    COMMENT * * *                                                  81082400
    MVNM HANDLES ALPHA MOVES TO NUMERIC OR NUMERIC EDITED FIELDS;       81082500
         DEFINE T =JUNK#;                                               81082600
         INCONVERT((RFLENGTH(T~AVAL.PSIX)=0),IF2[T].SZF,IF1[T].CIX);    81082700
         AVAL ~ AVAL&LTV [TOPST]&0 [TOPSOFS]&0 [TOPSS];                 81082800
         MOV9(0,0,FALSE);                                               81082900
         PSX ~ PSX + 2;      % RESTORE FOR DELETE                       81083000
END MVNM;                                                               81083100
PROCEDURE MVAN(EDTD);VALUE EDTD;BOOLEAN EDTD;                           81083200
BEGIN    % * * * ALPHA MOVES                                            81083300
    BOOLEAN   AVARF,BVARF,BSTK,ASTK;                                    81083400
    REAL      AL,AX,BL,BX;                                              81083500
PROCEDURE MVIT(INDEX,EDTD,OFSET);                                       81083600
         VALUE     INDEX,EDTD,OFSET;                                    81083700
         REAL      INDEX,   % INFO INDEX                                81083800
                   OFSET;   % OFSET IF >0,NUMBER OF BLANKS IF<0         81083900
         BOOLEAN   EDTD;    % TELLS WHETHER SHOULD EXIT AT END          81084000
    BEGIN                                                               81084100
    REAL AOFSET,BOFSET;                                                 81084200
    BOOLEAN ONSTACK;                                                    81084300
         EMITO(CMN);                                                    81084400
         EMITVAR(2+(BOFSET ~ BVAL.PSSIN),IF ATYP=JKC THEN SES ELSE RSA);81084500
         IF BOOLEAN(AVAL.PSSIN) THEN                                    81084600
    BEGIN                                                               81084700
              EMITVAR(3+BOFSET,CRF);                                    81084800
              ONSTACK ~ TRUE;                                           81084900
              EMITO(SFS);                                               81085000
    END ELSE                                                            81085100
         IF AOFSET~AVAL.PSOFS!0 THEN EMITVAR(AOFSET,SFS);               81085200
         IF BOOLEAN(BOFSET) THEN                                        81085300
    BEGIN                                                               81085400
              EMITVAR(2,CRF);                                           81085500
              ONSTACK ~ TRUE;                                           81085600
              EMITO(SFD);                                               81085700
    END ELSE                                                            81085800
         IF BOFSET~BVAL.PSOFS!0 THEN EMITVAR(BOFSET,SFD);               81085900
         IF EDTD THEN                                                   81086000
    BEGIN                                                               81086100
         EMITVAR(2,SDA);     % BEGINNING OF EDITED FIELD                81086200
         IF JUNK~IF1[BVAL.PSIX].LGHF-BVAL.PSL!0 THEN EMITVAR(JUNK,SFD); 81086300
         INDEX ~ IF2[INDEX].SZF;                                        81086400
         EMITVAR(1,SDA);     % BEGINNING OF UNEDITED FIELD              81086450
    END ELSE                                                            81086500
         INDEX ~ IF INDEX=0 THEN AVAL.PSL ELSE                          81086600
                 IF IF2[INDEX].USF!BCL THEN IF2[INDEX].SZF              81086700
                 ELSE RFLENGTH(INDEX);                                  81086800
         IF OFSET.[1:2]=2 THEN SMEAR(ABS(OFSET),-" ")                   81086900
        ELSE                                                            81087000
         IF OFSET.[1:2] = 0 THEN NESTER(OFSET,SFS);                     81087100
         IF NOT ONSTACK AND BOFSET = AOFSET THEN % BEST CASE            81087200
     BEGIN                                                              81087300
              IF INDEX GEQ 8 THEN                                       81087400
     BEGIN                                                              81087500
              IF BOFSET ! 0 THEN                                        81087600
     BEGIN                                                              81087700
              EMITVAR(BOFSET~8-BOFSET,TRS);                             81087800
              INDEX ~ INDEX - BOFSET;                                   81087900
    END;                                                                81088000
              NESTER(INDEX.WIX,TRW);                                    81088100
    END;                                                                81088200
              IF INDEX.CIX!0 THEN EMITVAR(INDEX.CIX,TRS);               81088300
    END ELSE                                                            81088400
              NESTER(INDEX,TRS);                 % WORST CASE           81088500
         IF OFSET.[1:2] = 3 THEN                                        81088600
    BEGIN    %PASSES CURRENT TRUE OFSET TO SMEAR                        81088700
         BVAL.PSOFS ~ (INDEX + BOFSET ~ BVAL.PSOFS).[45:3];             81088800
         SMEAR(OFSET.[33:15],-" ");                                     81088900
         BVAL.PSOFS ~ BOFSET;                                           81089000
    END;                                                                81089100
         IF EDTD THEN                                                   81089200
    BEGIN                                                               81089300
         EMITVAR(1,RSA);                                                81089400
         EMITVAR(2,RDA);                                                81089500
    END ELSE                                                            81089600
         EMITO(CMX);                                                    81089700
    END MVIT;                                                           81089800
         AX~AVAL.PSIX;                                                  81089900
         BX~BVAL.PSIX;                                                  81090000
         AL~AVAL.PSL;                                                   81090100
         BL~BVAL.PSL;                                                   81090200
         IF AVARF ~BOOLEAN(IF2[AX].VARF)OR BVARF ~ BOOLEAN(IF2[BX].VARF)81090300
              THEN  % ONE OR BOTH ARE VARIABLE LENGTH                   81090400
    BEGIN                                                               81090500
              IF EDTD THEN                                              81090510
              IF BOOLEAN(BVAL.PSSIN) THEN                               81090515
    BEGIN                                                               81090520
              EMITPAIR(JUNKX,STD);                                      81090530
              EMITPAIR(JUNKXOF,SND);                                    81090535
              NAMECALL(JUNKX);                                          81090540
    END ELSE EMITPAIR(JUNKX,SND);                                       81090550
              IF BSTK  ~ BOOLEAN(BVAL.PSSIN) THEN                       81090600
    BEGIN                                                               81090700
              EMITPAIR(JUNKEX1,STD);                                    81090800
              IF ASTK  ~ BOOLEAN(AVAL.PSSIN) THEN EMITPAIR(PRTJUNK,STD);81090900
              EMITO(EXCH);                                              81091000
              NAMECALL(JUNKEX1);                                        81091100
              EMITO(EXCH);                                              81091200
              IF ASTK  THEN VALUCALL(PRTJUNK) ELSE EMITL(AVAL.PSOFS);   81091300
    END ELSE                                                            81091400
    BEGIN                                                               81091500
              IF ASTK ~ BOOLEAN(AVAL.PSSIN) THEN EMITO(EXCH)            81091600
                   ELSE EMITL(AVAL.PSOFS);                              81091700
              EMITL(BVAL.PSOFS);                                        81091800
    END;                                                                81091900
         IF RFLENGTH(AX)!0 THEN EMITNUM(AL);                            81092000
         IF RFLENGTH(BX) ! 0 THEN EMITNUM(BL);                          81092100
         EMITL(0);                                                      81092200
         EMITL(10);                                                     81092300
         IF COBOLVARSZ=0 THEN COBOLVARSZ ~ CALLINTRIN(113);             81092400
         LASTMKS ~ -1;                                                  81092450
         VALUCALL(COBOLVARSZ);                                          81092500
    END ELSE                                                            81092600
    BEGIN     % GENERAL MOVE                                            81092700
         IF ATYP>JKC THEN REALEXCH;                                     81092800
         IF AL=BL THEN                 % SOURCE = DEST LENGTH           81092900
         MVIT(BX,EDTD,0 & 1 [2:47:1])                                   81093000
    ELSE                                                                81093100
         IF AL<BL THEN                 % SOURCE < DEST LENGTH           81093200
         IF BOOLEAN(IF2[BX].JSTF) THEN MVIT(AX,EDTD,AL-BL) %LEADING SPA 81093300
    ELSE                                                                81093400
         MVIT(AX,EDTD,(AL-BL)&1[2:47:1])    % TRAILING SPACES           81093500
    ELSE                               % SOURCE > DEST LENGTH           81093600
         IF BOOLEAN(IF2[BX].JSTF) THEN MVIT(BX,EDTD,AL-BL) %SKIP FWD OVR81093700
    ELSE                                                                81093800
         MVIT(BX,EDTD,0 & 1 [2:47:1]); % JUST MOVE WHAT U CAN           81093900
    END;                                                                81094000
    END MVAN;                                                           81094100
%************** BEGIN MOVX *********************************************81094200
    REAL T,X;                                                           81094300
         LABEL EDT,SIS,SM;                                              81094400
         LASTMKS ~ ABS(LASTMKS);                                        81094450
         IF TYPE = 1 OR TYPE = 2 THEN                                   81094500
    BEGIN     COMMENT * * * STORE ADDRESS IN JUNK * * *;                81094600
         IF BOOLEAN(TYPE) THEN EXCHANGE;                                81094700
         IF BOOLEAN((JNKAD~AVAL).PSSIN) THEN                            81094800
    BEGIN                              % THERE IS AN OFFSET ON THE STACK81094900
         EMITPAIR(JUNKN,STD);          % SO WE SAVE IT OFF              81095000
         EMITPAIR(JUNKNOF,SND);        %                                81095100
         NAMECALL(JUNKN);              %                                81095200
    END ELSE                           % NORMAL                         81095300
         EMITPAIR(JUNKN,SND);                                           81095400
         IF BOOLEAN(TYPE) THEN EXCHANGE;                                81095500
    END;                                                                81095600
         IF FRMT<3 OR FRMT>6 THEN                                       81095700
         IF BOOLEAN(TYPE) THEN XCH(AVAL,BVAL)                           81095800
    ELSE                                                                81095900
         IF ATYP{JKC THEN REALEXCH;                                     81096000
         T ~ ATYP;                                                      81096100
         IF FRMT = 1 THEN                                               81096200
    BEGIN                                                               81096300
         IF T = AWL OR T = FGC THEN                   %* ALPHANUMERIC *181096400
    BEGIN                                             % SIMPLE SMEAR    81096500
    SM:                                                                 81096600
         IF BOOLEAN(IF2[BVAL.PSIX].VARF) THEN                           81096700
    BEGIN                    % CALL INTRINSIC TO DO VARIABLE SIZE SMEAR 81096800
         IF BOOLEAN(BVAL.PSSIN) THEN                                    81096900
    BEGIN                                                               81097000
         EMITO(EXCH);                                                   81097100
         EMITVAR(PRTJUNK,STD);                                          81097200
    END;                                                                81097300
         EMITNUM(IF T=AWL THEN ALLCHAR ELSE FIGVALUE);%F-6: CHR TO SMEAR81097400
         IF BOOLEAN(BVAL.PSSIN) THEN EMITVAR(PRTJUNK,LODD) ELSE         81097500
              EMITL(BVAL.PSOFS);                 % F-5: OFFSET          81097600
         EMITL(0);                               % F-4                  81097700
         JUNK ~ RFLENGTH(BVAL.PSIX);             % F-3: LENGTH          81097800
         EMITL(0);                               %  F-2                 81097900
         EMITL(3);                               %  F-1                 81098000
         IF COBOLVARSZ=0 THEN COBOLVARSZ ~ CALLINTRIN(113);             81098100
         VALUCALL(COBOLVARSZ);                                          81098200
    END ELSE                                                            81098300
    BEGIN                                                               81098400
         SMEAR(BVAL.PSL,IF T=AWL THEN ALLCHAR ELSE FIGVALUE);           81098500
         EMITO(CMX);                                                    81098600
    END;                                                                81098700
    END  ELSE                                                           81098800
         IF T = NNL OR T= NNS THEN MOVENNL(TRUE) ELSE % NON-NUMERIC LIT 81098900
         MVAN(FALSE);                                 % REGULAR X MOVE  81099000
    END  ELSE                                                           81099100
         IF FRMT = 2 THEN                                               81099200
    BEGIN                                                               81099300
         BVAL.PSL ~ IF2[BVAL.PSIX].SZF;                                 81099400
         IF T = AWL OR T= FGC THEN                    %* ALPHANUM ED. *281099500
    BEGIN                                             % SIMPLE SMEAR    81099600
         EMITO(CMN);                                                    81099700
         IF BOOLEAN((X~BVAL).PSSIN) THEN                                81099800
    BEGIN                                                               81099900
         EMITVAR(2,CRF);                                                81100000
         EMITO(SFD);                                                    81100100
         EMITVAR(2,SDA);                                                81100200
         EMITVAR((IF1[X.PSIX].LGHF-X.PSL),SFD);                         81100300
    END ELSE                                                            81100400
         IF T~X.PSOFS+(IF1[X.PSIX].LGHF-X.PSL)!0 THEN EMITVAR(T,SFD);   81100500
         IF X.PSL { 24 THEN EMITVAR(1,SDA);                             81100600
         SMEAR(X.PSL,IF ATYP=AWL THEN ALLCHAR ELSE FIGVALUE);           81100700
         EMITVAR(1,RSA);                                                81100800
         IF BOOLEAN(X.PSSIN) THEN EMITVAR(2,RDA)                        81100900
    ELSE BEGIN                                                          81101000
         EMITVAR(1,RDA);                                                81101100
         EMITVAR(T-X.PSOFS,SRD);                                        81101200
    END;                                                                81101300
         GO TO EDT                                                      81101400
    END  ELSE                                                           81101500
         IF T = NNL OR T= NNS THEN                    % NON-NUMERIC LIT 81101600
    BEGIN                                                               81101700
         MOVENNL(FALSE);                                                81101800
         GO TO EDT                                                      81101900
    END  ELSE                                                           81102000
    BEGIN                                                               81102100
         MVAN(TRUE);                                                    81102200
    EDT:      %%%%%%%%%%%%%%%%%%%% EDIT THE ITEM %%%%%%%%%%%%%%%%%%%%%%%81102300
              %%%%%%%%%%%%%%%%%%%% ALL POINTERS MUST BE SET NOW %%%%%%%%81102400
         IF DEBUGTOG THEN MNTRPSS;     % LETS LOOK AT THE STACK ERE WE  81102500
         IF LASTMKS<0 THEN                                              81102510
    BEGIN                              % CALLED COBOLVARSZ              81102515
         T ~ (T~BVAL).PSOFS + (IF1[T.PSIX].LGHF-T.PSL);                 81102520
         EMITO(MKS);                                                    81102525
         IF BOOLEAN(BVAL.PSSIN) THEN VALUCALL(JUNKXOF);                 81102530
         NAMECALL(JUNKX);                                               81102535
         EMITO(CMN);                                                    81102540
         IF BOOLEAN(BVAL.PSSIN) THEN                                    81102545
    BEGIN                                                               81102550
         EMITVAR(2,CRF);                                                81102555
         EMITO(SFD);                                                    81102560
         EMITVAR(1,SDA);                                                81102565
    END ELSE IF T>7 THEN IF JUNK~(T&0[45:45:3])-BVAL.PSOFS!0 THEN       81102570
              EMITVAR(JUNK,SRD)                                         81102575
              ELSE ELSE IF JUNK~BVAL.PSOFS!0 THEN EMITVAR(JUNK,SFD);    81102580
         EMITVAR(1,RSA);                                                81102585
         IF (T~T.CIX)!0 THEN EMITVAR(T,SFS);                            81102590
    END;                                                                81102595
         TEED(BVAL.PSIX);        % DOES ALL PICTURE EDITING             81102600
    END;                                                                81102700
    END  ELSE                                                           81102800
         IF FRMT=3 THEN                % NUMERIC OR NUMERIC EDITED      81102900
    BEGIN                                                               81103000
         IF BOOLEAN(TYPE) THEN EXCHANGE;    % GET SENDING FIELD ON TOP  81103100
         IF T=AWL OR T=FGC THEN IF BVAL.PSC=NM AND BVAL.PSS=0           81103200
              THEN GO TO SM ELSE IF (T1~AVAL.PSIX)=0 OR T1=ZEROV THEN   81103300
    BEGIN                                                               81103400
         EMITL(0);                                                      81103500
         AVAL.PST ~ LTV;                                                81103600
         MOV9(0,0,FALSE);              % EXCHANGE AND MOVE              81103700
         PSX ~ PSX+2;                                                   81103800
    END ELSE                                                            81103900
    BEGIN                                                               81104000
         EMITPAIR(JUNKA,LODD);                                          81104100
         EMITO(MKS);                                                    81104200
         EMITL(0);                                                      81104300
         EMITO(CMN);                                                    81104400
         EMITVAR(3,RDA);                                                81104500
         T1 ~ IF T=AWL THEN ALLCHAR ELSE FIGVALUE;                      81104600
         AVAL ~ BVAL&DNN [TOPST]&NM [TOPSC]&0 [TOPSOFS]&0 [TOPSS]       81104700
              &0 [TOPSSIN];                                             81104701
         PSX ~ PSX+1;                                                   81104900
         SMEAR(CVAL.PSL,T1);                                            81105000
         PSX ~ PSX-1;                                                   81105100
         EMITO(CMX);                                                    81105200
         INCONVERT((RFLENGTH(BVAL.PSIX)=0),AVAL.PSL,0);                 81105300
         AVAL ~ AVAL&LTV [TOPST];                                       81105400
         MOV9(0,0,FALSE);                        % EXCHANGE & MOVE      81105500
         PSX ~ PSX+2;                            % RESTORE FOR DELETE   81105600
    END ELSE MVNM;                                                      81105700
    END ELSE                                                            81105800
         IF FRMT=6 THEN % CMP TO AN OR EA: BUILD DISPLAY SF, DO AN MOVE 81105900
    BEGIN                                                               81106000
         IF ATYP>JKC THEN              % GET NAME IN A AND AVAL         81106100
    BEGIN                                                               81106200
         EXCHANGE;                                                      81106300
         IF MKSFF THEN VOIDMKS;        % WANT MKS BETWEEN NAME & VALUE  81106400
    END;                                                                81106500
         EMITPAIR(JUNKN,STD);          % STORE DEST DESCRIPTOR & OFFSET 81106600
         IF BOOLEAN((X~AVAL).PSSIN) THEN EMITPAIR(JUNKNOF,STD);         81106700
         IF NOT MKSFF THEN MARKSTACK;                                   81106800
         EMITPAIR(JUNKA,LODD);         % MAKE JUNKA THEN DESTINATION    81106900
         AVAL ~  JNKAD ~ (BVAL&NM [TOPSC]&DNN [TOPST]&0 [TOPSOFS]       81107000
                         &0 [TOPSSIN]);                                 81107100
         IF DEBUGTOG THEN MNTRPSS;                                      81107200
         MOV9(2-REAL(TYPE=4),0,FALSE);                                  81107300
         MARKSTACK;                                                     81107400
         EMITPAIR(JUNKA,LODD);                                          81107500
         PS[PSX~PSX+1] ~ JNKAD;                                         81107600
         IF BOOLEAN(X.PSSIN) THEN VALUCALL(JUNKNOF);                    81107700
         EMITPAIR(JUNKN,LODD);                                          81107800
         PS[PSX~PSX+1] ~ X;                                             81107900
         IF DEBUGTOG THEN MNTRPSS;                                      81108000
         MOVX(3,1);          % EXCHANGE PSEUDO-STACK, NOT REAL          81108100
         PSX ~ PSX+2;                  % RESTORE FOR DELETE             81108200
    END ELSE                                                            81108300
         IF FRMT = 8 THEN                                               81108400
    BEGIN                                             % MOVE FORMAT 2 *881108500
         EMITO(CMN);             % F-1 = DI                             81108600
         EMITVAR(2+(T~BVAL.PSSIN),RSA);     % F-2 OR F-3 = SI           81108700
         IF BOOLEAN(T) THEN                                             81108800
    BEGIN                                                               81108900
              EMITVAR(2,CRF);                                           81109000
              EMITO(SFD);                                               81109100
    END ELSE                                                            81109200
         IF (X~BVAL.PSOFS)!0 THEN EMITVAR(X,SFD);                       81109300
         IF BOOLEAN(AVAL.PSSIN) THEN                                    81109400
    BEGIN                                                               81109500
              EMITVAR(3+T,CRF);                                         81109600
              EMITO(SFS);                                               81109700
    END ELSE                                                            81109800
         IF (T~AVAL.PSOFS)!0 THEN EMITVAR(T,SFS);                       81109900
         IF (T~ AVAL.PSL) > 6 THEN T ~ 6;                               81110000
         TMP [0] ~ 0;                                                   81110100
         EMITPROGCHR(TMP,8-T);                                          81110200
         EMITVAR(T,TRS);                                                81110300
         EMITO(CMX);                                                    81110400
    END;                                                                81110500
         IF FRMT ! 3 THEN PSX ~ PSX - 2;  % DELETE FROM PSUDO STACK     81110600
         IF DEBUGTOG THEN MNTRPSS;                                      81110700
         MKSFF ~ FALSE;                                                 81110800
         IF MNTRNGS THEN SETUPMONITOR;                                  81110900
END MOVX;                                                               81111000
PROCEDURE ATANDT(TYPE);                                                 81111100
    VALUE TYPE;                                                         81111200
    REAL  TYPE;                                                         81111300
    BEGIN     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%81111400
              %                                                         81111500
              %    A. T. & T. HANDLES ALL DIALS (AS WELL AS DING-A-LINGS81111600
              %                                                         81111700
              %    TYPE = 0  VALUE FROM F+1  STACK IS   VALUE, NAME     81111800
              %         = 1                             NAME , VALUE    81111900
              %                                                         81112000
              %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%81112100
    REAL      COUNT,W,TV1;                                              81112200
    BOOLEAN   DODYNAMIC;        DEFINE LITB = DODYNAMIC.[46:1]#;        81112300
    LABEL     ERROUT;                                                   81112400
         IF MKSFF THEN VOIDMKS;            % GET RID OF MARK STACK      81112500
         SCALESTOP ~ TRUE;                                              81112600
         IF BOOLEAN(TYPE) THEN EXCHANGE;   % GET STACK SO NAME LAST     81112700
         BINARYV(ERPNT ~V1~BVAL.PSIX,2);   % GET DEST VALUE TO STACK    81112800
         EXCHANGE;                         % GET DEST IN B REG          81112900
         MARKSTACK;                        % IF DYNAMIC DIAL IS USED    81113000
         W ~0;                             %    WE WILL NEED THIS       81113100
         DO                                                             81113200
    BEGIN                                                               81113300
         TYPE~ RELADDR;                                                 81113400
         DO                                                             81113500
    BEGIN                                                               81113600
         MACRO;                                                         81113700
         IF MACN2 = EXPRM THEN W ~ W +1 ELSE                            81113800
         IF MACN2 = ENDXM THEN W ~ W -1 ELSE                            81113900
         IF MACN2 = LITC  THEN                                          81114000
    BEGIN                                                               81114100
         LITB ~ TRUE;                                                   81114200
         TV1 ~ V1;                                                      81114300
    END ELSE                                                            81114400
         LITB ~ FALSE;                                                  81114500
    END UNTIL W = 0;                                                    81114600
         IF (RELADDR-TYPE)=2 AND LITB THEN                              81114700
    BEGIN                                                               81114800
         TEMPREL ~ RELADDR;                                             81114900
         IF (TV1~47-TV1)< 1 OR TV1>47 THEN ERR(259) ELSE RELADDR~TYPE;  81115000
         EMITL(TV1);                                                    81115100
         AVAL.PSIX ~ TV1;                                               81115200
    END ELSE BEGIN                                                      81115300
         ISUB;               % MUST BE INTEGER FOR DYNAMIC DIAL         81115400
         IF COUNT< 2 THEN                                               81115500
    BEGIN                                                               81115600
         EMITO(CHSN);                                                   81115700
         EMITL(47 );                                                    81115800
         EMITO(ADD);                                                    81115900
    END;                                                                81116000
         DODYNAMIC ~ TRUE;                                              81116100
    END;                                                                81116200
         IF MACN2 = XXXXM THEN GO TO ERROUT;                            81116300
    END  UNTIL COUNT ~ COUNT + 1 = 3;                                   81116400
         PASSMAC;                                                       81116500
         IF NOT DODYNAMIC THEN                                          81116600
    BEGIN                                                               81116700
         TEMPREL ~ RELADDR;                                             81116800
         RELADDR ~ LASTMKS;                                             81116900
         IF BOOLEAN(V1) THEN  % SAVE OFF FOR FUTURE DIALS               81117000
    BEGIN                                                               81117100
         EMITPAIR(JUNKV,SND);                                           81117200
         JNKVA ~ PS[PSX-3];                                             81117300
    END;                                                                81117400
         EMITD(CVAL.PSIX,BVAL.PSIX,47-AVAL.PSIX);                       81117500
    END ELSE BEGIN                                                      81117600
         IF BOOLEAN(V1) THEN                                            81117700
    BEGIN                                                               81117800
         EMITO(MKS);                                                    81117900
         NAMECALL(JUNKV);                                               81118000
         EMITO(CMN);                                                    81118100
         EMITVAR(7,SES);                                                81118200
         EMITVAR(1,TRW);                                                81118300
         EMITO(CMX);                                                    81118400
         JNKVA ~ PS[PSX-3];                                             81118500
    END;                                                                81118600
         EMITL(0);                                                      81118700
         IF DYNAMICDIAL=0 THEN DYNAMICDIAL ~ CALLINTRIN(DIALER);        81118800
         VALUCALL(DYNAMICDIAL);                                         81118900
         EMITO(DEL);                                                    81119000
    END;                                                                81119100
         PSX ~ PSX - 4;                                                 81119200
         REALEXCH;                                                      81119300
         MKSFF ~ FALSE;                                                 81119400
         MOV9 (2,0,FALSE);                                              81119500
ERROUT:                                                                 81119600
         SCALESTOP ~ MKSFF ~ FALSE;                                     81119700
    END OF A T AND T TROUBLES;                                          81119800
PROCEDURE SETP2;                                                        81119900
    BEGIN     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%81120000
              % PASS 2 CODE FOR SET                                    %81120100
              %                                                        %81120200
              %   "SETMM" MACRO:                                       %81120300
              %         V1=COUNT                                       %81120400
              %         V2=ACTION (UP OR DOWN)                         %81120500
              %                                                        %81120600
              %   "XXXXM" MACRO:                                       %81120700
              %         V1=0 - INDEX-NAME        TO NUMERIC LITERAL    %81120800
              %    SET     1 - INDEX-NAME        TO NUMERIC DATA-NAME  %81120900
              %            2 - INDEX-NAME        TO INDEX-DATA-NAME    %81121000
              %            3 - INDEX-NAME        TO INDEX-NAME         %81121100
              %            4 - INDEX-DATA-NAME   TO INX-D-N OR INX-NAME%81121200
              %            5 - NUMERIC DATA-NAME TO INDEX-NAME         %81121300
              %            6 - INDEX-NAME UP/DOWN BY NUMERIC LITERAL   %81121400
              %            7 - INDEX-NAME UP/DOWN BY NUMERIC DATA-NAME %81121500
              %                                                        %81121600
              %         V2=INFO OR INXR INDEX OF ITEM BEING SET         81121700
              %                                                        %81121800
              %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%81121900
       DEFINE LITSZ = SV2.[33:5]#,                                      81122000
              LITPWR = SV2.[43:5]#,                                     81122100
              DUPVAL = IF CNT>0 THEN EMITO(DUP)#,                       81122200
              TESTMON = IF MNTRNG THEN BEGIN IF JUNKMON2=0 THEN         81122250
                   JUNKMON2 ~ GETPRTLOC; EMITPAIR(JUNKMON2,SND); END#,  81122260
              POPPX = PSX ~ PSX - 1 - REAL(CNT = 0)#;                   81122300
         INTEGER I;                                                     81122400
         LABEL HR,XIT,CMN,STO,LOOP,L;                                   81122500
         BOOLEAN VALSAVD;                                               81122600
         REAL CNT,WORD1,TYPE;                                           81122700
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%81122800
         IF V2=FILEV THEN         % SET FILE ATTRIBUTE                  81122900
    BEGIN                                                               81123000
         EMITO(MKS);                                                    81123100
         IF V1=0 THEN                                                   81123200
    BEGIN                         % GENERALIZED FILE (DECLARATIVE PARAG)81123300
         IF IF4[CSECTIX].SPERF=1 OR NOT DECLTOG THEN ERR(273);          81123400
         EMITPAIR(FMINUS3,LODD);                                        81123500
         EMITO(LODD);                                                   81123600
    END ELSE NAMECALL(IF4[V1].FLLNK);                                   81123700
         PASSMAC;                                                       81123800
         EMITNUM(V1);                                                   81123900
         DO MACRO UNTIL MACN2=XXXXM AND V1=SETV AND V2=EXIT;            81124000
         VALUCALL(ATTRIBUTE);                                           81124100
         GO TO XIT;                                                     81124200
    END;                                                                81124300
         TYPE ~ V2;                                                     81124400
         CNT ~ V1;                                                      81124500
         IF ATYP=LTV THEN BEGIN TEMPREL ~ (RELADDR~TEMPREL)+2;          81124600
              PSX ~ PSX-1; END;                                         81124700
         WHILE CNT ~ CNT-1 } 0 DO                                       81124800
    BEGIN                                                               81124900
         PASSMAC;                                                       81125000
         MNTRNG ~ IF V1=4 OR V1=5 THEN BOOLEAN(IF0[V2].MONI)            81125100
              ELSE BOOLEAN(DICT[(T~INXR[V2].DCTIX).IR,T.IC].MONI);      81125200
         IF V1=0 THEN                                                   81125300
    BEGIN     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% IXN ~ NUMLIT    81125400
         WORD1 ~ IF1[INXR[V2].DNIX];                                    81125500
         EMITNUM(I ~ ((I~(IF LITPWR=0 THEN SV1 ELSE SV1|TEN[LITPWR]) -1)81125600
                 |WORD1.LGHF + WORD1.OFSF));                            81125700
         TESTMON;                                                       81125750
         NAME(V2,1);                                                    81125800
         EMITO(STD);                                                    81125900
         PSX ~ PSX-1;                                                   81126000
    END ELSE                                                            81126100
         IF V1=1 THEN                                                   81126200
    BEGIN     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% IXN ~ NUM DN    81126300
         DUPVAL;                                                        81126400
    CMN:      % COMPUTE OFFSET CORRESPONDING TO OCCURS NUMBER           81126500
         EMITL(1);                                                      81126510
         EMITO(SUBT);                                                   81126515
         IF T ~ (WORD1~IF1[INXR[V2].DNIX]).LGHF!1 THEN                  81126520
    BEGIN                                                               81126525
         EMITNUM(T);                                                    81126530
         EMITO(MULT);                                                   81126535
    END;                                                                81126540
         IF T ~ WORD1.OFSF>0 THEN                                       81126550
    BEGIN                                                               81126555
         EMITNUM(T);                                                    81126560
         EMITO(ADD);                                                    81126565
    END;                                                                81126570
         TESTMON;                                                       81126575
         NAME(V2,1);                                                    81126600
         EMITO(STD);                                                    81126700
         POPPX;                                                         81126800
    END ELSE                                                            81126900
         IF V1=2 THEN                                                   81127000
    BEGIN     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% IXN ~ INDEX D-N 81127100
    STO:                                                                81127200
         TESTMON;                                                       81127250
         NAME(V2,IF V1!4 THEN 1 ELSE 0);                                81127300
         EMITO(IF CNT>0 THEN SND ELSE STD);                             81127400
         POPPX;                                                         81127500
    END ELSE                                                            81127600
         IF V1=3 THEN                                                   81127700
    BEGIN     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% IXN ~ IXN       81127800
         IF INXR[AVAL.PSIX].DNIX=INXR[V2].DNIX THEN GO TO STO;          81127900
         DUPVAL;                                                        81128000
         OCCRSNO(IF1[INXR[AVAL.PSIX].DNIX]); % GET OCCURS NO CORRESP. TO81128100
                                             % VALUE ON TOP OF STACK    81128200
         GO TO CMN;                                                     81128300
    END ELSE                                                            81128400
         IF V1=4 THEN                                                   81128500
         GO TO STO  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% IXDN~IXDN OR IXN81128600
         ELSE                                                           81128700
         IF V1=5 THEN                                                   81128800
    BEGIN     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% NUM DN ~ IXN    81128900
         IF BOOLEAN(ONSTACK ~ REAL(IF2[V2].SUBF!0)) AND CNT>0           81129000
              THEN IF MKSFF THEN VOIDMKS;                               81129100
         IF NOT VALSAVD THEN                                            81129200
    BEGIN                                                               81129300
         OCCRSNO(IF1[INXR[AVAL.PSIX].DNIX]); % GET OCC NO CORR TO VALUE 81129400
         TESTMON;                                                       81129450
         IF VALSAVD ~ BOOLEAN(ONSTACK) THEN                             81129500
    BEGIN                                                               81129600
         EMITPAIR(JUNKV,STD);                                           81129700
         PSX ~ PSX-1;                                                   81129800
    L:   NAME(V2,0);                   % PICK UP SUBSCRIPT              81129900
         VALUCALL(JUNKV);                                               81130000
         PS[PSX~PSX+1] ~ 0 & 5 [TOPSL] & COMP [TOPSC] & DNV [TOPST];    81130100
         EXCHANGE;                                                      81130200
         MOV9(2,0,FALSE);                                               81130300
         GO TO LOOP;                                                    81130400
    END ELSE IF (VALSAVD ~ CNT>0) THEN                                  81130500
    BEGIN                                                               81130600
         EMITPAIR(JUNKV,SND-ONSTACK);                                   81130700
         IF VALSAVD ~ BOOLEAN(ONSTACK) THEN PSX ~ PSX-1;                81130800
    END;                                                                81130900
    END ELSE IF NOT BOOLEAN(ONSTACK) THEN                               81131000
    BEGIN                                                               81131100
         VALUCALL(JUNKV);                                               81131200
         PS[PSX~PSX+1] ~ 0 & 5 [TOPSL] & COMP [TOPSC] & DNV [TOPST];    81131300
    END;                                                                81131400
         IF BOOLEAN(ONSTACK) THEN GO TO L;                              81131500
         MARKSTACK;                                                     81131600
         NAME(V2,0);                                                    81131700
         MOV9(2,0,FALSE);                                               81131800
    END ELSE                                                            81131900
         %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% UP/DOWN BY      81132000
         IF V1=6 THEN                                                   81132100
    BEGIN     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% IXN +/- NUMLIT  81132200
         EMITNUM(I  ~ (I~(IF LITPWR=0 THEN SV1 ELSE SV1|TEN[LITPWR])    81132300
                 |IF1[INXR[V2].DNIX].LGHF) );                           81132400
         GO TO HR;                                                      81132500
    END ELSE                                                            81132600
         IF V1=7 THEN                                                   81132700
    BEGIN     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% IXN +/- NM DN   81132800
         DUPVAL;                                                        81132900
         EMITNUM(IF1[INXR[V2].DNIX].LGHF);                              81133000
         EMITO(MULT);                                                   81133100
    HR:  BINARYV(V2,0);                                                 81133200
         IF TYPE=DOWN THEN EMITO(EXCH);                                 81133300
         EMITO(IF TYPE=UP THEN ADD ELSE SUBT);                          81133400
         TESTMON;                                                       81133450
         NAME(V2,1);                                                    81133500
         EMITO(STD);                                                    81133600
         POPPX - REAL(V1 ! 6);                                          81133700
    END;                                                                81133800
    LOOP:                                                               81133900
    END OF WHILE;                                                       81134000
         IF MKSFF THEN VOIDMKS;                                         81134100
    XIT:                                                                81134200
         IF MNTRNGS THEN SETUPMONITOR;                                  81134300
    END SETP2;                                                          81134400
PROCEDURE     SEARCHP2;                                                 81134500
BEGIN    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%81134600
         %    "INCIM"                                                  %81134700
         %         V1 = INDEX                                          %81134800
         %         V2 = ACTION                                         %81134900
         %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%81135000
         BOOLEAN OCDP;                                                  81135100
         IF V2=0 THEN                                                   81135200
    BEGIN     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% MAX TEST        81135300
         IF OCDP ~ BOOLEAN(IF2[V1].OCDV) THEN                           81135400
    BEGIN                                                               81135500
         BINARYV(IF5[V1].OCDF,2);                                       81135600
         ISUB;                                                          81135700
         OCRX(-V1);                                                     81135800
    END ELSE EMITNUM(((T~IF1[V1]).OCCF-1)|T.LGHF+T.OFSF);               81135900
         PS[PSX~PSX+1-REAL(OCDP)]~0&LTV [TOPST]&COMP [TOPSC]&5 [TOPSL]; 81136000
    END  ELSE                                                           81136100
         IF V2=1 THEN                                                   81136200
    BEGIN     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% INCREMENT IXN   81136300
         BINARYV(VIXN~V1,1);                                            81136400
         EMITNUM(IF1[INXR[V1].DNIX].LGHF);                              81136500
         INPSUDOSTK ~ 0& NM[TOPSC]&5[TOPSL]&LTV[TOPST];                 81136600
         ARTH(ADD,0);                                                   81136700
         EMITO(EXCH);                                                   81136800
         EMITO (STD);                                                   81136900
         PSX ~ PSX-2;                                                   81137000
    END  ELSE                                                           81137100
         IF V2=2 THEN                                                   81137200
    BEGIN     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% INCREMENT ALT   81137300
         BINARYV(V1,1);                                                 81137400
         EMITNUM(IF1[INXR[V1].DNIX].LGHF);                              81137500
         INPSUDOSTK ~ 0&NM[TOPSC]&5[TOPSL]&LTV[TOPST];                  81137600
         ARTH(ADD,0);                                                   81137700
         EMITO(EXCH);                                                   81137800
         EMITO (STD);                                                   81137900
         PSX~PSX-2;                                                     81138000
    END  ELSE                                                           81138100
    BEGIN     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% DATA-NAME       81138200
         IF V2=3 THEN BINARYV(V1,3);                                    81138300
         EMITNUM(IF IF2[V1].USF!IXDN THEN 1                             81138400
              ELSE IF1[INXR[VIXN].DNIX].LGHF);                          81138500
         INPSUDOSTK ~ 0&LTV [TOPST]&COMP [TOPSC]&5 [TOPSL];             81138600
         ARTH(ADD,0);                                                   81138700
         MOV9(0,0,FALSE)                                                81138800
    END;                                                                81138900
END SEARCHP2;                                                           81139000
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%81139100
%                              COMPARE                                 %81139200
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%81139300
              % HANDLES FIGURITIVES FOR COMPARES                        81139400
PROCEDURE FIGPRC;                                                       81139500
    BEGIN                                                               81139600
         REAL INX,FIG,OFF,SZ,SVPS,N,SZC;                                81139700
         DEFINE NEG = BOOLEAN(V1)#,                                     81139800
         REL = V2#, BP[I] = REDEFARRAY4[22+I]#,                         81139900
         ALLF = [32:1]#,   % 1 IF ALL SOMETHING                         81140000
         CHRF = [33:15]#;  % ALL CHARACTER                              81140100
         LABEL XIT,L1,INTR;                                             81140200
         BOOLEAN S,J,NUM,SN,ONSTK,STK,VARL;                             81140300
         DEFINE FIGCHR = IF FIG=ZEROV THEN 0 ELSE IF BOOLEAN(FIG.ALLF)  81140400
                    THEN FIG.CHRF ELSE                                  81140500
                    IF FIG=HIGHV THEN "9" ELSE IF FIG=QUOTE THEN """    81140600
                    ELSE IF FIG=LOWV THEN                               81140700
                    IF (T1~IF2[INX]).CLF}NM OR T1.USF!BCL               81140800
                    THEN "0" ELSE " "                                   81140900
                    ELSE IF FIG=UPPERB THEN IF IF2[INX].CLF=AB          81141000
                    THEN "Z" ELSE "9"                                   81141100
                    ELSE IF FIG=ENDV THEN "~" ELSE " "#;                81141200
PROCEDURE NESTER(RPTF,OP,ALF,SZ,OFF,NEG);                               81141300
         VALUE RPTF,OP,ALF,SZ,OFF,NEG;                                  81141400
         REAL RPTF,OP,SZ,OFF; BOOLEAN ALF,NEG;                          81141500
    BEGIN                                                               81141600
PROCEDURE LOOPFILL(RPTF,OP,ALF,I);                                      81141700
         VALUE RPTF,OP,ALF,I;                                           81141800
         REAL RPTF,OP,I; BOOLEAN ALF;                                   81141900
    BEGIN                                                               81142000
         IF ALF THEN                                                    81142100
    BEGIN                                                               81142200
         EMITVAR(" ",TNE);                                              81142300
         EMITVAR(4,JFC);                                                81142400
    END;                                                                81142500
         EMITVAR(RPTF,OP);   % QUES MARK FALLS THRU ON NUMERIC TEST     81142600
         BP[I] ~ RELADDR;    EMITFIX(16384);                            81142700
         IF ALF THEN                                                    81142800
    BEGIN                                                               81142900
         EMITVAR(0,TLS);                                                81143000
         EMITFIX(16384);                                                81143100
    END;                                                                81143200
         EMITVAR(1,SFS);                                                81143300
         EMITO(ENS);                                                    81143400
    END LOOPFILL;                                                       81143500
         LABEL XIT;                                                     81143600
         REAL R,L1,I,II;                                                81143700
         R ~ SZ MOD 63;                                                 81143800
         EMITL(0);                                                      81143900
         EMITO(MKS);                                                    81144000
         EMITL(0);                                                      81144100
         EMITO(CMN);                                                    81144200
         EMITVAR(4,RSA);                                                81144300
         IF OFF<0 THEN                                                  81144400
    BEGIN                                                               81144500
         EMITVAR(5,CRF);                                                81144600
         EMITO(SFS);                                                    81144700
    END ELSE IF OFF!0 THEN EMITVAR(OFF,SFS);                            81144800
         IF SZ = 1 THEN                                                 81144900
    BEGIN                                                               81145000
         IF ALF THEN                                                    81145100
    BEGIN                                                               81145200
         EMITVAR(" ",TNE);                                              81145300
         EMITVAR(4,JFC);                                                81145400
    END;                                                                81145500
         EMITVAR(RPTF,OP);                                              81145600
         EMITVAR(1+2|REAL(ALF),JFC);                                    81145700
         IF ALF THEN                                                    81145800
    BEGIN                                                               81145900
         EMITVAR(0,TLS);                                                81146000
         EMITVAR(1,JFC);                                                81146100
    END;                                                                81146200
         IF NEG THEN EMITVAR(1,JFW);                                    81146300
         EMITVAR(1,SEC);                                                81146400
         GO TO XIT;                                                     81146500
    END;                                                                81146600
         IF SZ>189 THEN                                                 81146700
    BEGIN                                                               81146800
         IF (L1 ~ SZ DIV 63) < 63 THEN                                  81146900
    BEGIN                                                               81147000
         EMITVAR(L1,BNS);                                               81147100
         L1 ~ 63;                                                       81147200
    END ELSE                                                            81147300
    BEGIN                                                               81147400
         EMITVAR(63,BNS);                                               81147500
         WHILE L1>63 DO                                                 81147600
    BEGIN                                                               81147700
         I ~ I+1;                                                       81147800
         EMITVAR(63,BNS);                                               81147900
         LOOPFILL(RPTF,OP,ALF,I);                                       81148000
         L1 ~ L1-63;                                                    81148100
    END;                                                                81148200
    END;                                                                81148300
         IF L1!0 THEN                                                   81148400
    BEGIN                                                               81148500
         I ~ I+1;                                                       81148600
         EMITVAR(L1,BNS);                                               81148700
         LOOPFILL(RPTF,OP,ALF,I);                                       81148800
    END;                                                                81148900
         EMITO(ENS);                                                    81149000
         SZ ~ R;                                                        81149100
    END;                                                                81149200
         WHILE SZ>63 DO                                                 81149300
    BEGIN                                                               81149400
         I ~ I+1;                                                       81149500
         EMITVAR(63,BNS);                                               81149600
         LOOPFILL(RPTF,OP,ALF,I);                                       81149700
         SZ ~ SZ-63;                                                    81149800
    END;                                                                81149900
         IF SZ!0 THEN                                                   81150000
    BEGIN                                                               81150100
         I ~ I+1;                                                       81150200
         EMITVAR(SZ,BNS);                                               81150300
         LOOPFILL(RPTF,OP,ALF,I);                                       81150400
    END;                                                                81150500
         IF NEG THEN                                                    81150600
    BEGIN                                                               81150700
         L1 ~ RELADDR;                                                  81150800
         EMITFIX(16384);                                                81150900
    END ELSE EMITVAR(1,SEC);                                            81151000
         FOR II ~ 1 STEP 1 UNTIL I DO                                   81151100
    BEGIN                                                               81151200
         EMITJUMP(BP[II],RELADDR,JFC);                                  81151300
         IF ALF THEN EMITJUMP(BP[II]+4,RELADDR,JFC);                    81151400
    END;                                                                81151500
         IF NEG THEN                                                    81151600
    BEGIN                                                               81151700
         EMITVAR(1,SEC);                                                81151800
         EMITJUMP  (L1,RELADDR,JFW);                                    81151900
    END;                                                                81152000
XIT:                                                                    81152100
         EMITVAR(3,STC);                                                81152200
         EMITO(CMX);                                                    81152300
    END NESTER;                                                         81152400
         INX ~ ERPNT ~ V1;                                              81152500
         FIG ~ V2;                                                      81152600
         PASSMAC;                                                       81152700
         IF IF2[INX].SUBF!0 AND ONSTACK=0 AND V1{1 THEN                 81152800
    BEGIN                    % MUST BE IMPLIED SUBJECT AND NOT LEVEL 88 81152900
         VALUCALL(JUNKNOF);                                             81153000
         VALUCALL(JUNKN);                                               81153100
         ONSTACK ~ 1;                                                   81153200
         PSX ~ PSX+1;                                                   81153300
    END;                                                                81153400
         IF FIG = ALPHABETIC OR NUM ~ FIG = NUMERIC THEN                81153500
    BEGIN                                        % CLASS TEST           81153600
         IF NOT(V1=2 OR VARL~BOOLEAN(IF2[INX].VARF))THEN NAME(INX,0);   81153700
         OFF ~ IF (STK~BOOLEAN(AVAL.PSSIN)) THEN 0 ELSE AVAL.PSOFS;     81153800
         SZ ~ AVAL.PSL;                                                 81153900
         IF NUM THEN                                                    81154000
    BEGIN                                                               81154100
         IF (T~IF2[INX]).CLF!AB THEN                                    81154200
    BEGIN                                                               81154300
         IF SN ~ T.SGTF!0 THEN                                          81154400
    BEGIN                                                               81154500
         IF S ~ T.SGTF=1 THEN                                           81154600
    BEGIN                                                               81154700
         IF N ~ SZ.WIX ! 0 THEN                                         81154800
    BEGIN                                                               81154900
         EMITO(DUP);                                                    81155000
         EMITL(N);                                                      81155100
         EMITO(EXCH); EMITO(INX);                                       81155200
    END;                                                                81155300
         SZC ~ SZ.CIX - 1;                                              81155400
    END;                                                                81155500
         EMITL(0);                                                      81155600
         EMITO(MKS);                                                    81155700
         EMITL(0);                                                      81155800
         EMITO(CMN);                                                    81155900
         EMITVAR(4,RSA);                                                81156000
         IF STK THEN BEGIN EMITVAR(5,CRF); EMITO(SFS); END;             81156100
         IF N ~ OFF+SZC ! 0 THEN EMITVAR(N,SFS) ELSE                    81156200
              IF N=-1 THEN EMITVAR(1,SRS);                              81156300
         EMITVAR(2,SED);                                                81156400
         EMITVAR(1,SRD);                                                81156500
         EMITVAR(1,TRS);                                                81156600
         EMITVAR(1,SRS);                                                81156700
         EMITVAR(1,SSA);                                                81156800
         EMITVAR(1,RDA);                                                81156900
         EMITVAR(1,BIR);                                                81157000
         EMITO(CMX);                                                    81157100
         EMITO(EXCH);                                                   81157200
         IF S THEN IF SZ.WIX!0 THEN                                     81157300
    BEGIN                                                               81157400
         EMITO(DEL);                                                    81157500
         EMITO(EXCH);                                                   81157600
    END;                                                                81157700
    END;                                                                81157800
         IF VARL THEN                                                   81157900
    BEGIN                                                               81158000
         FIG ~ ZEROV;                                                   81158100
         REL ~ IF NEG THEN LESS ELSE GREQ;                              81158200
         GO TO INTR;                                                    81158300
    END;                                                                81158400
         NESTER("0",TEG,FALSE,SZ,IF STK THEN -1 ELSE OFF,NEG);          81158500
    END ELSE ERR(243);                                                  81158600
    END ELSE                                                            81158700
         IF (T~IF2[INX]).CLF<NM THEN                                    81158800
    BEGIN                                                               81158900
         IF VARL THEN                                                   81159000
    BEGIN                                                               81159100
         REL ~ IF NEG THEN 29 ELSE 30;                                  81159200
         N ~ IF2[INX].SZF;                                              81159300
         GO TO INTR;                                                    81159400
    END;                                                                81159500
         NESTER("A",TAN,TRUE,SZ,IF STK THEN -1 ELSE OFF,NEG);           81159600
    END ELSE ERR(243);                                                  81159700
    END ELSE                                                            81159800
    BEGIN                                                               81159900
         IF REL=0 THEN REL ~ (IF FIG=POSITIVE THEN GRTR ELSE            81160000
              IF FIG=NEGATIVE THEN LESS ELSE EQUL);                     81160100
         IF NEG THEN REL ~ REL+1-2|REL.[47:1];                          81160200
         IF ONSTK ~ INX=0 THEN                                          81160300
    BEGIN                                                               81160400
    L1:  IF FIG!ZEROV AND FIG!POSITIVE AND FIG!NEGATIVE                 81160500
              AND NOT (FIG=UPPERB AND INX!0 AND IF2[INX].USF!BCL) THEN  81160550
    BEGIN                                                               81160600
         ERR(243);                                                      81160700
         GO TO XIT;                                                     81160800
    END;                                                                81160900
         IF NOT (ONSTK OR V1 = 2) THEN                                  81161000
    BEGIN                                                               81161100
         VLDN(V1 ~ INX,2);             % GET THE VALUE TO STACK         81161200
         V1 ~ VARU2.[32:16];                                            81161300
    END;                                                                81161400
         IF FIG=UPPERB THEN                                             81161500
    BEGIN                                                               81161510
         EMITPAIR(JUNKA,LODD);                                          81161520
         EMITO(MKS);                                                    81161525
         EMITL(0);                                                      81161530
         EMITO(CMN);                                                    81161535
         EMITVAR(3,RDA);                                                81161540
         PS[PSX~PSX+1] ~ BVAL&DNN[TOPST]&NM[TOPSC]&0[TOPSOFS]&0[TOPSS]  81161545
              &0 [TOPSSIN];                                             81161546
         PSX ~ PSX+1; SMEAR(CVAL.PSL,"9"); PSX ~ PSX-1;                 81161550
         EMITO(CMX);                                                    81161560
         INCONVERT((RFLENGTH(BVAL.PSIX)=0),AVAL.PSL,0);                 81161570
         AVAL ~ AVAL & LTV [TOPST];                                     81161580
    END ELSE EMITL(0);                                                  81161585
         EMITO(REL);                                                    81161590
         IF MKSFF THEN VOIDMKS;                                         81161595
         GO TO XIT;                                                     81161600
    END ELSE                                                            81161700
    BEGIN                                                               81161800
         IF (T~IF2[INX].CLF)=NM THEN                                    81161900
    BEGIN                                                               81162000
         IF FIG=LOWV THEN FIG ~ ZEROV;                                  81162100
         IF FIG!HIGHV AND FIG!UPPERB OR IF2[INX].USF!BCL AND FIG=UPPERB 81162200
              THEN GO TO L1;                                            81162250
    END;                                                                81162300
         IF (T~IF2[INX])<0 OR T.USF=BCL THEN                            81162400
    BEGIN                                                               81162500
         IF BOOLEAN(IF2[INX].VARF) OR AVAL.PSL>63 THEN                  81162600
    BEGIN                      % CALL INTRINSIC                         81162700
      % STACK: SOURCE,DEST,SOFSET,DOFSET,SLENGTH,DLENGTH,0,REL-18       81162800
    INTR:STK ~ IF2[INX].SUBF!0;                                         81162900
         IF V1!2 THEN                                                   81163000
         IF STK THEN                                                    81163100
    BEGIN                                                               81163200
         NAME(INX,0);                                                   81163300
         EMITPAIR(JUNKN,STD);                                           81163400
         EMITPAIR(JUNKNOF,STD);                                         81163500
         EMITO(MKS);                                                    81163600
         NAMECALL(JUNKN);                                               81163700
    END ELSE BEGIN EMITO(MKS); NAME(INX,0); END;                        81163800
         IF REL<29 THEN                                                 81163900
    BEGIN                                                               81164000
         EMITPAIR(JUNKA,LODD);                                          81164100
         EMITO(MKS);                                                    81164200
         EMITL(0);                                                      81164300
         EMITO(CMN);                                                    81164350
         EMITVAR(3,RDA);                                                81164360
         SMEAR(IF2[INX].SZF,FIGCHR);                                    81164400
         EMITO(CMX);                                                    81164500
    END ELSE EMITL(0);                 % NO DEST FOR ALPHA TEST         81164600
         IF STK THEN VALUCALL(JUNKNOF) ELSE EMITL(AVAL.PSOFS);          81164700
         EMITL(0);                                                      81164800
         IF RFLENGTH(AVAL.PSIX)!0 THEN EMITNUM(AVAL.PSL);               81164900
         EMITO(DUP);                                                    81165000
         EMITL(0);                                                      81165100
         EMITL(REL-18);                                                 81165200
         IF COBOLVARSZ=0 THEN COBOLVARSZ ~ CALLINTRIN(113);             81165300
         VALUCALL(COBOLVARSZ);                                          81165400
         GO TO XIT;                                                     81165500
    END;                                                                81165600
         IF V1!2 THEN NAME(INX,0);                                      81165700
         IF REL}EQUL THEN NESTER(FIGCHR,TEQ,FALSE,AVAL.PSL,IF           81165800
              BOOLEAN(AVAL.PSSIN) THEN -1 ELSE AVAL.PSOFS,REL=NEQL)     81165900
         ELSE                                                           81166000
    BEGIN                                                               81166100
         EMITPAIR(JUNKA,LODD);                                          81166200
         EMITO(MKS);                                                    81166300
         EMITL(0);                                                      81166400
         EMITO(CMN);                                                    81166500
         EMITVAR(3,RDA);                                                81166600
         PSX ~ PSX+1;                                                   81166700
         SMEAR(N~BVAL.PSL,FIGCHR);                                      81166800
         PSX ~ PSX-1;                                                   81166900
         EMITVAR(3,RDA);                                                81167000
         EMITVAR(4,RSA);                                                81167100
         IF (J ~ BOOLEAN(AVAL.PSSIN)) THEN BEGIN EMITVAR(5,CRF);        81167200
              EMITO(SFS); END                                           81167300
              ELSE IF (T~AVAL.PSOFS)!0 THEN EMITVAR(T,SFS);             81167400
         EMITVAR(N,CLS+REL-LESS);                                       81167500
         EMITVAR(1,JFC);                                                81167600
         EMITVAR(1,SEC);                                                81167700
         EMITVAR(4+REAL(J),STC);                                        81167800
         EMITO(CMX);                                                    81167900
         EMITO(DEL); IF J THEN EMITO(DEL);                              81168000
         IF MKSFF THEN VOIDMKS;                                         81168050
         GO TO XIT;                                                     81168100
    END;                                                                81168200
    END ELSE ERR(243);                                                  81168300
    END;                                                                81168400
    END;                                                                81168500
         IF SN THEN                                                     81168600
    BEGIN                                                               81168700
         IF S THEN IF N ~ SZ.WIX ! 0 THEN                               81168800
    BEGIN                                                               81168900
         EMITO(EXCH);                                                   81169000
         EMITL(N);                                                      81169100
         EMITO(EXCH);                                                   81169200
         EMITO(INX);                                                    81169300
         EMITO(EXCH);                                                   81169400
    END;                                                                81169500
         EMITO(MKS);                                                    81169600
         EMITL(0);                                                      81169700
         EMITO(CMN);                                                    81169800
         EMITVAR(4,RDA);                                                81169900
         IF STK THEN BEGIN EMITVAR(5,CRF); EMITO(SFD); END;             81170000
         IF N ~ OFF+SZC!0 THEN EMITVAR(N,SFD) ELSE                      81170100
              IF N=-1 THEN EMITVAR(1,SRD);                              81170200
         EMITVAR(4,SES);                                                81170300
         EMITVAR(1,SRS);                                                81170400
         EMITVAR(1,TRS);                                                81170500
         EMITO(CMX);                                                    81170600
    END;                                                                81170700
         IF MKSFF THEN VOIDMKS;                                         81170800
         N ~ 1+REAL(SN)+AVAL.PSSIN;                                     81170900
         IF V1{1 THEN        % NOT LEVEL 88                             81171000
         FOR INX ~ 1 STEP 1 UNTIL N DO                                  81171100
    BEGIN                                                               81171200
         EMITO(EXCH);                                                   81171300
         EMITO(DEL);                                                    81171400
    END;                                                                81171500
    XIT: MKSFF ~ FALSE;                                                 81171600
         PSX ~ PSX-1;                                                   81171700
    END FIGPRC;                                                         81171800
PROCEDURE IMPSUBJ(V1,V2); VALUE V1,V2; REAL V1,V2;                      81171900
    BEGIN     % HANDLES IMPLIED SUBJECTS OF RELATIONALS                 81172000
         IF V1 = 0 THEN                                                 81172100
    BEGIN     % SAVE SUBJECT                                            81172200
         ISJUNK ~ PS[PSX];                                              81172300
         IF V2=2 OR (V2=3 AND ISJUNK.PSL>11) THEN                       81172400
    BEGIN                                                               81172500
         EMITPAIR(JUNKN,STD);                                           81172600
         EMITPAIR(JUNKNOF,SND);                                         81172700
         VALUCALL(JUNKN);                                               81172800
    END ELSE      % NON-NUMERIC LITERAL                                 81172900
         IF V2=3 THEN EMITPAIR(JUNKV,SND);                              81173000
    END ELSE                                                            81173100
    BEGIN     % GET SUBJECT                                             81173200
         PS[PSX~PSX+1] ~ ISJUNK;                                        81173300
         IF V2=2 OR (V2=3 AND ISJUNK.PSL>11) THEN                       81173400
    BEGIN                                                               81173500
         VALUCALL(JUNKNOF);                                             81173600
         VALUCALL(JUNKN);                                               81173700
         ONSTACK ~ 1;                                                   81173800
    END ELSE     % NON-NUMERIC LITERAL                                  81173900
         IF V2=3 THEN VALUCALL(JUNKV);                                  81174000
    END                                                                 81174100
    END IMPSUBJ;                                                        81174200
PROCEDURE RELATE(TYPE,V2); VALUE TYPE,V2; REAL TYPE,V2;                 81174300
    BEGIN                              % DEALS WITH RELATIONAL OPERATORS81174400
         LABEL INTR,INL,DONE,FA,DONFA,MKSR,FINI,BD,XIT;                 81174500
         REAL LA,LB,T,T1,A,B,L,TR1;                                     81174600
         BOOLEAN DUBL,BL,AVARF,BVARF,ASTK,BSTK,BSHORT,LIT,FUN;          81174700
         DEFINE BP[I] = REDEFARRAY4[22+I]#;                             81174800
PROCEDURE REVRLO(TYPE); REAL TYPE;                                      81174900
         IF NOT(TYPE=EQUL OR TYPE=NEQL) THEN                            81175000
         TYPE ~ IF TYPE=LESS THEN GRTR ELSE IF TYPE=GREQ THEN LSEQ      81175100
                ELSE IF TYPE=GRTR THEN LESS ELSE GREQ;                  81175200
         A ~ AVAL; B ~ BVAL;                                            81175300
         LA ~ A.PSL; LB ~ B.PSL;                                        81175400
         ASTK ~ BOOLEAN(A.PSSIN); BSTK ~ BOOLEAN(B.PSSIN);              81175500
         IF V2=0 THEN                   % LOGICAL OPERATION FOR CNEM    81175600
    BEGIN                                                               81175700
         EMITO(TYPE);                                                   81175800
         GO TO XIT;                                                     81175900
    END;                                                                81176000
         IF V2=1 THEN                   % WORD MODE COMPARE             81176100
    BEGIN                                                               81176200
         IF (DUBL ~ (A.PSL>11)) AND (T ~ B.PSL{11) THEN                 81176300
    BEGIN                                                               81176400
         EMITPAIR(PRTJUNK,STD); EMITPAIR(PRTJUNK2,STD);                 81176500
         EMITL(0);                                                      81176600
         EMITO(EXCH);                                                   81176700
         VALUCALL(PRTJUNK2); VALUCALL(PRTJUNK);                         81176800
         BVAL.PSL ~ 12;                                                 81176900
    END;                                                                81177000
         IF (DUBL ~ (B.PSL>11)) AND A.PSL{11 THEN                       81177100
    BEGIN                                                               81177200
         EMITL(0);                                                      81177300
         EMITO(EXCH);                                                   81177400
         AVAL.PSL ~ 12;                                                 81177500
    END;                                                                81177600
         DUBL ~ AVAL.PSL>11;                     % BOTH ARE DOUBLE      81177700
         LA ~ IF AVAL.PSDP=1 THEN -AVAL.PSS ELSE AVAL.PSS;              81177800
         LB ~ IF BVAL.PSDP=1 THEN -BVAL.PSS ELSE BVAL.PSS;              81177900
         IF T ~ (LA-LB)!0 THEN                                          81178000
    BEGIN                                                               81178100
       IF T>0 THEN                                                      81178200
    BEGIN                                                               81178300
         EXCHANGE;                                                      81178400
         REVRLO(TYPE);                                                  81178500
    END;                                                                81178600
         IF NOT DUBL THEN IF (LA~AVAL.PSL+ABS(T))>11 THEN               81178700
    BEGIN                                                               81178800
         DUBL ~ TRUE;                                                   81178900
         AVAL.PSL ~ LA;                                                 81179000
         EMITPAIR(PRTJUNK,STD);                                         81179100
         EMITL(0); EMITO(EXCH);                                         81179200
         EMITL(0); VALUCALL(PRTJUNK);                                   81179300
    END;                                                                81179400
         IF DUBL THEN EMITNUM(TEN[ABS(T)+27]);                          81179500
         EMITNUM(IF T~ABS(T)>11 THEN TEN[T] ELSE JUNK~TEN[T]);          81179600
         EMITO(MULT+10|REAL(DUBL));                                     81179700
    END;                                                                81179800
         EMITO(IF DUBL THEN DLS ELSE TYPE);                             81179900
         IF DUBL THEN                                                   81180000
    BEGIN                                                               81180100
         EMITO(LOR);                                                    81180200
         EMITL(0);                                                      81180300
         EMITO(TYPE);                                                   81180400
    END;                                                                81180500
         GO TO MKSR;                                                    81180600
    END ELSE                            % CHARACTER MODE COMPARE        81180700
    BEGIN                                                               81180800
         IF ATYP!NNL AND ATYP!NNS AND BTYP!NNL AND BTYP!NNS THEN        81180900
    BEGIN                               % BOTH DESCRIPTORS IN STACK     81181000
         IF (AVARF~BOOLEAN(IF2[A.PSIX].VARF)) OR                        81181100
              (BVARF~BOOLEAN(IF2[B.PSIX].VARF))  OR LA>63 OR LB>63 THEN 81181200
    BEGIN                    % CALL INTRINSIC                           81181300
    % STACK: SOURCE,DEST,SOFSET,DOFSET,SLENGTH,DLENGTH,JUNKA,TYPE-18.   81181400
    INTR:IF BSTK THEN                                                   81181500
    BEGIN                                                               81181600
         EMITPAIR(JUNKX,STD);                                           81181700
         IF ASTK THEN EMITPAIR(PRTJUNK,STD);                            81181800
         EMITO(EXCH);                                                   81181900
         EMITPAIR(JUNKX,LODD);                                          81182000
         EMITO(EXCH);                                                   81182100
         IF ASTK THEN VALUCALL(PRTJUNK) ELSE EMITL(A.PSOFS);            81182200
    END ELSE                                                            81182300
    BEGIN                                                               81182400
         IF ASTK THEN EMITO(EXCH);                                      81182500
         EMITL(B.PSOFS);                                                81182600
         IF ASTK THEN EMITO(EXCH) ELSE EMITL(A.PSOFS);                  81182700
    END;                                                                81182800
         IF RFLENGTH(B.PSIX)!0 THEN EMITNUM(LB);                        81182900
         IF ATYP=NNL OR ATYP=NNS THEN IF AHL THEN                       81183000
              EMITO(DUP) ELSE EMITNUM(LA) ELSE                          81183100
              IF RFLENGTH(A.PSIX)!0 THEN EMITNUM(LA);                   81183200
         IF AHL THEN EMITL(0) ELSE EMITPAIR(JUNKA,LODD);                81183300
         EMITL(TYPE-18);                                                81183400
         IF COBOLVARSZ=0 THEN COBOLVARSZ ~ CALLINTRIN(113);             81183500
         VALUCALL(COBOLVARSZ);                                          81183600
         GO TO DONE;                                                    81183700
    END;                                                                81183800
    INL: EMITO(MKS);         % BOTH LA AND LB <63 CHR                   81183900
    % STACK: (SOFSET),SOURCE,(DOFSET),DEST,MKS,JUNKA/0                  81184000
         IF BL ~ (LA!LB) THEN EMITPAIR(JUNKA,LODD) ELSE EMITL(0);       81184100
         EMITO(CMN);                                                    81184200
         IF BL THEN                                                     81184300
    BEGIN                                                               81184400
         EMITVAR(T1 ~ 3+REAL(BSHORT~LB<LA)+REAL(BSHORT AND ASTK),RSA);  81184500
         IF BSHORT THEN IF BSTK THEN                                    81184600
    BEGIN                                                               81184700
         EMITVAR(5+REAL(ASTK),CRF);                                     81184800
         EMITO(SFS);                                                    81184900
    END ELSE IF (L~B.PSOFS)!0 THEN EMITVAR(L,SFS) ELSE                  81185000
        ELSE IF ASTK THEN                                               81185100
    BEGIN                                                               81185200
         EMITVAR(4,CRF);                                                81185300
         EMITO(SFS);                                                    81185400
    END ELSE IF (L~A.PSOFS)!0 THEN EMITVAR(L,SFS);                      81185500
         EMITVAR(TR1~ IF BSHORT THEN LB ELSE LA,TRS);                   81185600
         IF L ~ ABS(LA-LB)>24 THEN EMITVAR(T1,SDA);                     81185700
         BLAND(TMP,3);                                                  81185800
         EMITPROGCHR(TMP,IF L>24 THEN TR1 ~ 24-(TR1 MOD 8) ELSE L);     81185900
         IF L>24 THEN                                                   81186000
    BEGIN                                                               81186100
         EMITVAR(T1,RSA);                                               81186200
         EMITVAR((L~L-TR1).WIX,TRW);                                    81186300
         IF T1 ~ L.CIX!0 THEN EMITVAR(T1,TRS);                          81186400
    END;                                                                81186500
    END;                                                                81186600
         IF BSHORT THEN                                                 81186700
    BEGIN          % B (SHORTER) WAS MOVED TO JUNKA = SOURCE            81186800
         EMITVAR(1,RSA);                                                81186900
         EMITVAR(3,IF FUN~(LIT AND NOT SVNNL) THEN SED ELSE RDA);%A=DEST81187000
         IF ASTK THEN BEGIN EMITVAR(4,CRF); EMITO(SFD); END             81187100
              ELSE IF (L~A.PSOFS)!0 THEN EMITVAR(L,SFD)                 81187200
              ELSE IF FUN THEN EMITVAR(8-TOTSZ,SFD);                    81187300
    END ELSE                                                            81187400
    BEGIN          % A (OR A MOVED TO JUNKA) = DEST                     81187500
         EMITVAR(3-2|REAL(BL),IF FUN~(LIT AND NOT SVNNL AND NOT BL)     81187600
              THEN SED ELSE RDA);                                       81187700
         IF NOT BL THEN IF ASTK THEN                                    81187800
    BEGIN                                                               81187900
         EMITVAR(4,CRF);                                                81188000
         EMITO(SFD);                                                    81188100
    END ELSE IF (L~A.PSOFS)!0 THEN EMITVAR(L,SFD);                      81188200
         IF FUN THEN EMITVAR(8-TOTSZ,SFD);                              81188300
         EMITVAR(4+REAL(ASTK),RSA);                          % B=SOURCE 81188400
         IF BSTK THEN BEGIN EMITVAR(5+REAL(ASTK),CRF); EMITO(SFS); END  81188500
              ELSE IF (L~B.PSOFS)!0 THEN EMITVAR(L,SFS);                81188600
    END;                                                                81188700
         EMITVAR(IF BSHORT THEN LA ELSE LB,CLS+TYPE-LESS);              81188800
         EMITVAR(1,JFC);                                                81188900
         EMITVAR(1,SEC);                                                81189000
         EMITVAR(4+REAL(ASTK)+REAL(BSTK),STC);                          81189100
         EMITO(CMX);                                                    81189200
    FINI:L ~ 1+REAL(ASTK)+REAL(BSTK);                                   81189300
         FOR T ~ 1 STEP 1 UNTIL L DO EMITO(DEL);                        81189400
    MKSR:IF MKSFF THEN VOIDMKS;                                         81189500
    END ELSE                                                            81189600
    BEGIN                                     % LITERAL COMPARE         81189700
         IF AHL THEN TOTSZ ~ LA ~ LB;                                   81189800
         IF BTYP=NNL OR BTYP=NNS THEN                                   81189900
    BEGIN                                   % PUT THE NNL ON TOP        81190000
         REVRLO(TYPE);                                                  81190100
         T ~ A; A ~ B; B ~ T;                                           81190200
         LA ~ A.PSL; LB ~ B.PSL; BSTK ~ BOOLEAN(B.PSSIN); ASTK ~ FALSE; 81190300
    END;                                                                81190400
         IF NOT(BVARF ~ BOOLEAN(IF2[B.PSIX].VARF)) THEN                 81190500
         IF (T~(LB~B.PSL)-TOTSZ)>0 OR (T<0 AND NOTRLNG+T}0) THEN        81190600
    BEGIN                                                               81190700
         LA ~ TOTSZ ~ TOTSZ+T;                                          81190800
         NOTRLNG ~ NOTRLNG+T;                                           81190900
    END;      % NOW LA!LB IFF LITERAL (LA) LONGER BUT NOT BY SPACES     81191000
         NOEXCH ~ TRUE;      % PREVENT EXCHANGE OF SOURCE AND DEST      81191100
         IF BVARF OR TOTSZ>63 OR LB>63                                  81191200
              THEN                                                      81191300
    BEGIN          % CALL INTRINSIC                                     81191400
    BEGIN                                                               81191500
         IF AHL AND LITSZ<8 THEN DO PUSHOVER(STK[LITSZ.WIX],LITSZ.CIX,  81191600
              STK[0],0,LITSZ) UNTIL (LITSZ~LITSZ+LITSZ)}8;              81191700
         GIVEMELITERAL(TOTSZ,TRUE);    % LEAVE PTR TO C-POOL ON TOP     81191800
         IF FUNNYALL>0 THEN GO TO FA ELSE IF AHL AND TOTSZ>LITSZ THEN   81191900
    BEGIN                                                               81192000
         FUNNYALL ~ LITSZ;                                              81192100
    FA:  EMITO(MKS);                                                    81192200
         EMITPAIR(JUNKA,LODD);                                          81192300
         EMITO(CMN);                                                    81192400
         EMITVAR(3,RSA);                                                81192500
         NESTER(FUNNYALL,TRS);                                          81192600
         EMITVAR(1,RSA);                                                81192700
         NESTER(TOTSZ-FUNNYALL,TRS);                                    81192800
         EMITO(CMX);                                                    81192900
         EMITO(DEL);              % DELETE C-POOL DESCRIPTOR            81193000
    END ELSE GO TO INTR;                                                81193100
    END;                                                                81193200
         IF FUN THEN GO TO DONFA;%WHOLE LITERAL HAS BEEN BUILD IN JUNKA 81193300
         IF BSTK THEN                                                   81193400
    BEGIN                                                               81193500
         EMITO(EXCH);                                                   81193600
         EMITPAIR(PRTJUNK,STD);                                         81193700
         EMITPAIR(JUNKA,LODD);                                          81193800
         EMITPAIR(PRTJUNK,STD);                                         81193900
    END ELSE                                                            81194000
    BEGIN                                                               81194100
         EMITPAIR(JUNKA,LODD);                                          81194200
         EMITL(B.PSOFS);                                                81194300
    END;                                                                81194400
         EMITL(0);                     % PLACE FOR A OFFSET             81194500
         IF AHL THEN                                                    81194600
    BEGIN                                                               81194700
         IF RFLENGTH(B.PSIX)!0 THEN EMITNUM(LB);                        81194800
         EMITO(DUP);                                                    81194900
    END ELSE                                                            81195000
    BEGIN                                                               81195100
         IF RFLENGTH(B.PSIX)!0 THEN EMITNUM(LB);                        81195200
         EMITNUM(TOTSZ);                                                81195300
    END;                                                                81195400
         IF LA!LB THEN                                                  81195500
    BEGIN                                                               81195600
         IF LSUB=0 THEN JUNKM ~ GETPRTLOC;                              81195700
         EMITPAIR(JUNKM,LODD);                                          81195800
    END ELSE EMITL(0);                                                  81195900
         EMITL(TYPE-18);                                                81196000
         IF COBOLVARSZ=0 THEN COBOLVARSZ ~ CALLINTRIN(113);             81196100
         VALUCALL(COBOLVARSZ);                                          81196200
         GO TO DONE;                                                    81196300
    END;                                                                81196400
         IF AHL AND LITSZ<8 THEN DO PUSHOVER(STK[LITSZ.WIX],LITSZ.CIX,  81196500
              STK[0],0,LITSZ) UNTIL (LITSZ~LITSZ+LITSZ)}8;              81196600
         GIVEMELITERAL(TOTSZ,FALSE);                                    81196700
         IF FUNNYALL>0 THEN GO TO BD ELSE IF AHL AND TOTSZ>LITSZ THEN   81196800
    BEGIN                                                               81196900
         FUNNYALL ~ LITSZ;                                              81197000
    BD:  IF TYPE!EQUL THEN                                              81197100
    BEGIN                                                               81197200
         FUN ~ TRUE;         % CANT DO IT IN 2 NESTS SO                 81197300
         GO TO FA;           % BUILD WHOLE LITERAL IN JUNKA             81197400
    DONFA:                                                              81197500
         FUNNYALL ~ 0;                                                  81197600
         EMITPAIR(JUNKA,LODD);                                          81197700
    END;                                                                81197800
    END;                                                                81197900
         IF SVNNL AND FUNNYALL=0 THEN GO TO INL; % DESC TO C-POOL IN STK81198000
         IF FUNNYALL>0 THEN                                             81198100
    BEGIN                              % FUNNYALL COMPARE FOR EQUAL     81198200
         EMITO(MKS);                                                    81198300
         EMITL(0);                                                      81198400
         EMITO(CMN);                                                    81198500
         EMITVAR(3,IF SVNNL THEN RDA ELSE SED);                         81198600
         IF SVNNL THEN IF (T~8-TOTSZ)>0 THEN EMITVAR(T,SFD);            81198700
         EMITVAR(4,RSA);                                                81198800
         IF BSTK THEN BEGIN EMITVAR(5,CRF); EMITO(SFS); END             81198900
              ELSE IF (L~B.PSOFS)!0 THEN EMITVAR(L,SFS);                81199000
         IF L!0 OR BSTK THEN EMITVAR(4,SSA);                            81199050
         EMITVAR(FUNNYALL,CLS+TYPE-LESS);                               81199100
         EMITVAR(4,JFC);                                                81199200
         EMITVAR(4,RDA);                                                81199300
         EMITVAR(TOTSZ-FUNNYALL,CLS+TYPE-LESS);                         81199400
         EMITVAR(1,JFC);                                                81199500
         EMITVAR(1,SEC);                                                81199600
         EMITVAR(4+REAL(BSTK),STC);                                     81199700
         EMITO(CMX);                                                    81199800
         GO TO FINI;                                                    81199900
    END ELSE                                                            81200000
    BEGIN                                                               81200100
         LIT ~ TRUE;                                                    81200200
         GO TO INL;                                                     81200300
    END;                                                                81200400
    END;                                                                81200500
    END;                                                                81200600
DONE:    PSX ~ PSX-2;                                                   81200700
XIT:     MKSFF ~ FALSE;                                                 81200800
         ONSTACK ~ 0;                                                   81200900
END RELATE;                                                             81201000
DEFINE FUDGE(LINK) = (4096|REAL(SAVSYL-LINK}2048))#;                    81201100
%%%% ADJUST FOR MISSING HIGH-ORDER BIT IN ADDRESS (BIT [36:1], VALUE    81201200
%%%% 2048), WHICH IS USED FOR NOTTING.                                  81201300
PROCEDURE BOOLEVALP;                                                    81201400
    BEGIN                                                               81201500
    DEFINE                                                              81201600
         GETLINK(LINK) = TAKASYL((W~(LINK))|2 + FUDGE(W))#,             81201700
         NT = [36:1]#,                 % =1 IF LINK HAS BEEN NOTTED     81201800
         ADDR = [37:11]#;              % SYLLABLE POINTED TO BY LINK    81201900
PROCEDURE SETNOT(SYLLADR,B);                                            81202000
         VALUE SYLLADR,B;                                               81202100
         REAL SYLLADR;                                                  81202200
         REAL B;                                                        81202300
%%%% COMPLEMENTS NOT BIT ON ALL T & F LINKS IN RANGE OF NOT             81202400
    BEGIN                                                               81202500
         REAL T,T1;                                                     81202600
         BOOLEAN SW;                                                    81202700
         LABEL L,XIT;                                                   81202800
         T1 ~ T ~ GETLINK(SYLLADR);                                     81202900
         RELADDR ~ SYLLADR|2 + FUDGE(SYLLADR);                          81203000
    L:   EMITFIX(-(T&(1-T.NT) [36:47:1]));                              81203100
         IF (T~T.ADDR)!0 THEN SETNOT(T,IF GETLINK(T).NT=T1.NT THEN B    81203200
                                     ELSE 1-B);                         81203300
         IF SW THEN GO TO XIT;                                          81203400
         SYLLADR ~ SYLLADR+1-2|B;                                       81203500
         T1 ~ T ~ GETLINK(SYLLADR);                                     81203600
         RELADDR ~ SYLLADR|2 + FUDGE(SYLLADR);                          81203700
         B ~ 1-B;                                                       81203800
         SW ~ TRUE;                                                     81203900
         GO TO L;                                                       81204000
    XIT:                                                                81204100
END SETNOT;                                                             81204200
         REAL SAVREL,T,LINK,NXTLINK,NS,DANG2,BOOLSW,T1;                 81204300
         BOOLEAN B;                                                     81204400
         IF V1=SRS THEN                                                 81204500
    BEGIN        % BACKSPACE OVER BOOLEAN LINKS AT END OF BOOL EXPRESSN 81204600
         TEMPREL ~ RELADDR;                                             81204700
         RELADDR ~ RELADDR-2;                                           81204800
         EMITFIX(2121);                % FLAG END OF BOOLEAN            81204900
         RELADDR ~ TEMPREL-6;                                           81205000
    END ELSE IF V1=SFS THEN                                             81205100
    BEGIN        % INSERT BOOLEAN LINKS AFTER BOOLEAN JUST PUT ON STACK 81205200
         IF RELADDR{2048 AND 2048{RELADDR+6 THEN                        81205300
%%%% CANNOT LET A LINK FALL ON WORD @1000 SINCE  THE SYLLABLE POINTER   81205400
%%%% TO IT (@4000) WOULD LOOK LIKE A NOTTED END-OF-CHAIN.               81205500
    BEGIN                                                               81205600
         T1 ~ (2050-RELADDR) DIV 2;                                     81205700
         FOR T ~ 1 STEP 1 UNTIL T1 DO EMITO(NOP);                       81205800
    END;                                                                81205900
         EMITF;                        % EMPTY TRUE AND FALSE LINKS     81206000
         EMITFIX(-DANGLEHEAD.ADDR);    % DANGLE LINK TO LAST DANGLING   81206100
         DANGLEHEAD ~ RELADDR.[35:12]-1;         % NEW DANGLEHEAD       81206200
    END ELSE IF V1=LOR THEN                                             81206300
    BEGIN                              % LOR                            81206400
         SAVREL ~ TEMPREL ~ RELADDR;   % LINKS ALREADY INSERTED         81206500
         SAVSYL ~ SAVREL DIV 2;                                         81206600
         LINK ~ RELADDR.[35:12]-3;                                      81206700
         LINK ~ LINK + (GETLINK(LINK).NT);                              81206800
         WHILE NXTLINK ~ GETLINK(LINK).ADDR!0 DO LINK ~ NXTLINK;        81206900
%%%% LINK DOWN TO END OF TRUE (FALSE FOR NOTTED LINK) CHAIN             81207000
         RELADDR ~ LINK|2 + FUDGE(LINK);                                81207100
         EMITFIX(-((DANG2~GETLINK(DANGLEHEAD))-2+                       81207200
                 (BOOLSW~GETLINK(DANG2-2).NT))&GETLINK(LINK) [36:36:1]);81207300
%%%% LINK TRUE OF SECOND DANGLE TO END OF TRUE CHAIN HANGING FROM DH    81207400
%%%% (VICE VERSA FOR BOOLSWITCH)                                        81207500
         RELADDR ~ DANGLEHEAD|2;                                        81207600
         EMITFIX(-GETLINK(DANG2));     % DELETE 2ND DANGLE FROM LIST    81207700
         NS ~ DANG2|2+2;          % SYLLABLE AFTER FORMER 2ND DANGLE    81207800
         LINK ~ GETLINK(T ~ DANG2-1-BOOLSW);                            81207900
%%%% 2ND FALSE (TRUE) LINK BEHIND FORMER 2ND DANGLE                     81208000
         IF LINK.ADDR!0 THEN                                            81208100
    BEGIN                                                               81208200
         RELADDR ~ T|2 + FUDGE(T);                                      81208300
         EMITFIX(-(0&LINK [36:36:1])); % BREAK LINK                     81208400
    END;                                                                81208500
         LINK ~ LINK.ADDR;                                              81208600
         WHILE LINK!0 DO                                                81208700
    BEGIN        % FIX UP FALSE CHAIN TO POINT TO NEXT SYLLABLE         81208800
         RELADDR ~ (LINK|2) - 2 + 2|(BOOLSW~(T~GETLINK(LINK)).NT)       81208900
                   + FUDGE(LINK);                                       81209000
         LINK ~ T.ADDR;                                                 81209100
         EMITO(IF BOOLEAN(BOOLSW) THEN LNOT ELSE NOP);                  81209200
         T ~ RELADDR; RELADDR ~ TEMPREL;                                81209300
         EMITBRANCH(T,NS,BFC);    % BRANCH FALSE OR TRUE DEP ON BOOLSW  81209400
    END;                                                                81209500
         RELADDR ~ TEMPREL ~ SAVREL;                                    81209600
    END ELSE IF V1=LAND THEN                                            81209700
    BEGIN                              % LAND                           81209800
         SAVREL ~ TEMPREL ~ RELADDR;   % LINKS ALREADY INSERTED         81209900
         SAVSYL ~ SAVREL DIV 2;                                         81210000
         LINK ~ RELADDR.[35:12]-2;                                      81210100
         LINK ~ LINK - (GETLINK(LINK).NT);                              81210200
         WHILE NXTLINK ~ GETLINK(LINK).ADDR!0 DO LINK ~ NXTLINK;        81210300
%%%% LINK DOWN TO END OF FALSE (TRUE FOR NOTTED LINK) CHAIN             81210400
         RELADDR ~ LINK|2 + FUDGE(LINK);                                81210500
         EMITFIX(-((DANG2~GETLINK(DANGLEHEAD))-1-                       81210600
              (BOOLSW~GETLINK(DANG2-1).NT))&GETLINK(LINK) [36:36:1]);   81210700
%%%% LINK FALSE OF SECOND DANGLE TO END OF FALSE CHAIN HANGING FROM DH  81210800
%%%% (VICE VERSA FOR BOOLSWITCH)                                        81210900
         RELADDR ~ DANGLEHEAD|2;;                                       81211000
         EMITFIX(-GETLINK(DANG2));     % DELETE 2ND DANGLE FROM LIST    81211100
         NS ~ DANG2|2+2;          % SYLLABLE AFTER FORMER 2ND DANGLE    81211200
         LINK ~ GETLINK(T ~ DANG2-2+BOOLSW);                            81211300
%%%% 2ND TRUE (FALSE) LINK BEHIND FORMER 2ND DANGLE                     81211400
         IF LINK.ADDR!0 THEN                                            81211500
    BEGIN                                                               81211600
         RELADDR ~ T|2 + FUDGE(LINK);                                   81211700
         EMITFIX(-(0&LINK [36:36:1])); % BREAK LINK                     81211800
    END;                                                                81211900
         LINK ~ LINK.ADDR;                                              81212000
         WHILE LINK!0 DO                                                81212100
    BEGIN    % FIX UP TRUE CHAIN TO POINT TO NEXT SYLLABLE              81212200
         T ~ LINK|2 - 2|(BOOLSW~(T1~GETLINK(LINK)).NT) + FUDGE(LINK);   81212300
         LINK ~ T1.ADDR;                                                81212400
         EMITBRANCH(T,NS,IF BOOLEAN(BOOLSW) THEN BFC ELSE -BFC);        81212500
                                  % BRANCH TRUE OR FALSE DEP ON BOOLSW  81212600
    END;                                                                81212700
         RELADDR ~ TEMPREL ~ SAVREL;                                    81212800
    END ELSE                                                            81212900
    BEGIN                              % LNOT                           81213000
         SAVREL ~ TEMPREL ~ RELADDR;                                    81213100
         SAVSYL ~ SAVREL DIV 2;                                         81213200
         SETNOT((DANGLEHEAD-2).ADDR,0);                                 81213300
         RELADDR ~ TEMPREL ~ SAVREL;                                    81213400
    END;                                                                81213500
    END BOOLEVALP;                                                      81213600
PROCEDURE BOOLFIX(HERE,THERE,TYPE,IFX,CODE);                            81213700
%%%%%%  FIXES UP TRUE AND FALSE CHAINS HANGING OFF END OF BOOLEAN EXPN  81213800
         VALUE HERE,THERE,TYPE,IFX,CODE;                                81213900
         REAL  HERE,THERE,TYPE,IFX,CODE;                                81214000
    BEGIN                                                               81214100
    DEFINE                                                              81214200
         GETLINK(LINK) = TAKASYL((W~(LINK))|2 + FUDGE(W))#,             81214300
         NT = [36:1]#,                 % =1 IF LINK HAS BEEN NOTTED     81214400
         ADDR = [37:11]#;              % SYLLABLE POINTED TO BY LINK    81214500
         REAL T,LINK,SAVREL,SAVTEMPREL;                                 81214600
         BOOLEAN BOOLSW,BS;                                             81214700
         SAVTEMPREL ~ TEMPREL;                                          81214800
         SAVREL ~ RELADDR;                                              81214900
         SAVSYL ~ HERE DIV 2;                                           81215000
         BOOLSW ~ BOOLEAN(GETLINK(HERE.[35:12]).NT);                    81215100
         LINK ~ GETLINK(HERE.[35:12]+1-REAL((TYPE<0 AND NOT BOOLSW) OR  81215200
                        (TYPE>0 AND BOOLSW))).ADDR;                     81215300
%%%% 2ND TRUE (FOR TYPE=BRT AND NOT BOOLSWITCH) OR FALSE LINK BACK      81215400
         WHILE LINK!0 DO                                                81215500
    BEGIN  % FIX UP T CHAIN FOR BRT, F CHAIN FOR BRF                    81215600
           % (VICE VERSA FOR BOOLSWITCH)                                81215700
         BS ~ BOOLEAN(GETLINK(LINK).NT);                                81215800
         RELADDR ~ (LINK|2) + FUDGE(LINK) - 2|                          81215900
                   REAL((TYPE>0 AND NOT BS) OR (TYPE<0 AND BS));        81216000
         LINK ~ GETLINK(LINK).ADDR;                                     81216100
         IF IFX=0 OR CODE=1 THEN                                        81216200
    BEGIN                                                               81216300
         IF (TYPE<0 AND NOT BS) OR (TYPE>0 AND BS) THEN EMITO(LNOT)     81216400
              ELSE EMITO(NOP);                                          81216500
         T ~ RELADDR; RELADDR ~ TEMPREL;                                81216600
         EMITBRANCH(T,THERE,BFC);                                       81216700
    END ELSE IF CODE=3 THEN                                             81216800
    BEGIN                                                               81216900
         EMITLINK(IFX,IF BS THEN -TYPE ELSE TYPE);                      81217000
         IF (TYPE>0 AND NOT BS) OR (TYPE<0 AND BS) THEN EMITO(NOP);     81217100
    END ELSE IF CODE=2 THEN                                             81217200
    BEGIN                                                               81217300
         IF (TYPE<0 AND NOT BS) OR (TYPE>0 AND BS) THEN EMITO(LNOT)     81217400
              ELSE EMITO(NOP);                                          81217500
         VALUCALL(THERE);                                               81217600
         EMITO(BFC);                                                    81217700
    END;                                                                81217800
    END;                                                                81217900
         LINK ~ GETLINK(HERE.[35:12]+REAL((TYPE<0 AND NOT BOOLSW) OR    81218000
                        (TYPE>0 AND BOOLSW))).ADDR;                     81218100
%%%% 2ND FALSE (FOR TYPE=BRT AND NOT BOOLSWITCH) OR FALSE LINK BACK     81218200
         WHILE LINK!0 DO                                                81218300
    BEGIN  % FIX UP F CHAIN FOR BRT, F CHAIN FOR BRF                    81218400
           % (VICE VERSA FOR BOOLSWITCH)                                81218500
         BS ~ BOOLEAN(GETLINK(LINK).NT);                                81218600
         RELADDR ~ (LINK|2)-2+2|REAL((TYPE>0 AND NOT BS) OR             81218700
                   (TYPE<0 AND BS)) + FUDGE(LINK);                      81218800
         LINK ~ GETLINK(LINK).ADDR;                                     81218900
         IF (TYPE<0 AND NOT BS) OR (TYPE>0 AND BS) THEN EMITO(NOP)      81219000
              ELSE EMITO(LNOT);                                         81219100
         T ~ RELADDR; RELADDR ~ TEMPREL;                                81219200
         EMITBRANCH(T,HERE+6,BFC);                                      81219300
    END;                                                                81219400
         RELADDR ~ SAVREL; TEMPREL ~ SAVTEMPREL;                        81219500
    END BOOLFIX;                                                        81219600
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%81219700
%                                ARITHMETIC                            %81219800
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%81219900
PROCEDURE INTM(TYPE,FRMT); VALUE TYPE,FRMT; REAL TYPE,FRMT; FORWARD;    81220000
PROCEDURE ARTH(TYPE,X); VALUE TYPE,X; REAL TYPE,X;                      82000000
    BEGIN                                                               82000100
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%82000200
%                  ARTH HANDLES ARITHMERIC OPERATORS                    82000300
%        SCALING FOR DIVIDES:                                           82000400
%   OPERANDSCALE HAS PREVIOUSLY ADJUSTED EITHER THE DIVIDEND OR THE     82000500
%   DIVISOR SO THAT ITS SCALE AND LENGTH ARE } THEN SCALE AND LENGTH    82000600
%   OF THE COMPOSITE PICTURE OF THE RECEIVING FIELDS. ARTH SCALES LEFT  82000700
%   THE DIVIDEND (AND/OR DIVISOR IF THE DIVISOR IS FUNNYDP) SO THAT     82000800
%   AN INTEGER DIVIDE CAN BE DONE YIELDING A QUOTIENT OF SCALE 1 LARGER 82000900
%   (IN CASE NEEDED FOR ROUNDING) THAN THE COMPOSITES SCALE.            82001000
%        EXAMPLE: (NEITHER DIVISOR NOR DIVIDEND IS FUNNYDP)             82001100
%   FIND R SUCH THAT                                                    82001200
%                       (NB|10**RB)/(NA|10**RA) =                       82001300
%                  (NB|(10**R)/NA | (10**(MAX(RA,RB)+1)                 82001400
%        SOLUTION:                                                      82001500
%                  RB}RA => R=RA+1           RA>RB => R=(RA+1)+(RA-RB)  82001600
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%82001700
         BOOLEAN DUBL; INTEGER JUNK;                                    82001800
         REAL SA,SB,LA,LB,T;                                            82001900
         LABEL XIT,L;                                                   82002000
    DEFINE SCAL(T) = IF DUBL THEN EMITNUM(TEN[T+27]);                   82002100
                      EMITNUM(IF T>11 THEN TEN[T] ELSE JUNK ~ TEN[T]);  82002200
                      EMITO(MULT+10|REAL(DUBL))#,                       82002300
                EX      = IF DUBL THEN REALEXCH ELSE EMITO(EXCH)#,      82002400
                BX      = BOOLEAN(X)#;                                  82002500
PROCEDURE OVF(B,DUBL,LA,LB);           % SCALING WILL MAKE B(A) DOUBLE  82002600
         VALUE B;                      % PRECISION SO MAKE BOTH DOUBLE  82002700
         BOOLEAN B,DUBL;                                                82002800
         REAL LA,LB;                                                    82002900
    BEGIN                                                               82003000
         DUBL ~ TRUE;                                                   82003100
         PS[PSX-REAL(B)].PSL ~ IF B THEN LB ELSE LA;                    82003200
         PS[PSX-1+REAL(B)].PSL ~ 12;                                    82003300
         IF B THEN LA ~ 12 ELSE LB ~ 12;                                82003400
         EMITPAIR(PRTJUNK,STD);                                         82003500
         EMITL(0); EMITO(EXCH);                                         82003600
         EMITL(0); VALUCALL(PRTJUNK);                                   82003700
    END OVF;                                                            82003800
         IF TYPE=VARI THEN                                              82004400
    BEGIN     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   EXPONENTIATION  82004500
         IF BX THEN XCH(AVAL,BVAL);                                     82004600
         IF ATYP=LTV AND (NMLITR=0 OR NMLITR=1 OR NMLITR=2) THEN        82004700
    BEGIN                                                               82004800
         IF BX THEN REALEXCH;                                           82004900
         EMITO(DEL); IF AVAL.PSL>11 THEN EMITO(DEL);                    82005000
         IF NMLITR=0 THEN                                               82005100
    BEGIN                                                               82005200
         EMITO(DEL); IF BVAL.PSL>11 THEN EMITO(DEL);                    82005300
         EMITL(1);                                                      82005400
         PS[PSX~PSX-1] ~ 0 & LTV [TOPST] & 5 [TOPSL] & COMP [TOPSC];    82005500
    END ELSE IF NMLITR=1 THEN PSX ~ PSX-1 ELSE                          82005600
    BEGIN                                                               82005700
         AVAL ~ BVAL;                                                   82005800
         IF BVAL.PSL{11 THEN EMITO(DUP) ELSE                            82005900
    BEGIN                                                               82006000
         EMITPAIR(PRTJUNK,STD);                                         82006100
         EMITO(DUP);                                                    82006200
         VALUCALL(PRTJUNK); EMITO(EXCH);                                82006300
         VALUCALL(PRTJUNK);                                             82006400
    END;                                                                82006500
         TYPE ~ MULT;                                                   82006600
         GO TO L;                                                       82006700
    END;                                                                82006800
         GO TO XIT;                                                     82006900
    END;                                                                82007000
         IF AVAL.PSL{11 AND BVAL.PSL{11 THEN                            82007100
    BEGIN                                                               82007200
         IF (SB ~ BVAL.PSS)!0 THEN                                      82007300
    BEGIN                                                               82007400
         IF NOT BX THEN EMITO(EXCH);                                    82007500
         IF SB>0 THEN                                                   82007600
    BEGIN                                                               82007700
         EMITNUM(TEN[SB]);                                              82007800
         EMITO(DIVD);                                                   82007900
    END ELSE BEGIN SCAL(ABS(SB)); END;                                  82008000
         EMITO(EXCH);                                                   82008100
    END ELSE IF BX THEN EMITO(EXCH);                                    82008200
         INTM(EXPSTAR,0);                                               82008300
         IF SB>0 THEN BEGIN SCAL(SB) END ELSE SB ~ 0;                   82008400
         AVAL ~ 0&12 [TOPSL]&SB [TOPSS]&COMP [TOPSC]&OPR [TOPST];       82008500
         GO TO XIT;                                                     82008600
    END;                                                                82008700
%  NOTE: THIS WILL INCLUDE DOUBLE PRECISION WHEN INTM IS MODIFIED       82008800
         ERR(-113);                                                     82008900
    END;                                                                82009000
    L:                                                                  82009100
         IF (LA ~ AVAL.PSL)>11 AND (LB ~ BVAL.PSL){11 THEN              82009200
    BEGIN                                                               82009300
         EMITPAIR(PRTJUNK,STD); EMITPAIR(PRTJUNK2,STD);                 82009400
         EMITL(0); EMITO(EXCH);                                         82009500
         VALUCALL(PRTJUNK2); VALUCALL(PRTJUNK);                         82009600
         BVAL.PSL ~ LB ~ 12;                                            82009700
    END;                                                                82009800
         IF LB>11 AND LA{11 THEN                                        82009900
    BEGIN                                                               82010000
         EMITL(0);                                                      82010100
         EMITO(EXCH);                                                   82010200
         AVAL.PSL ~ LA ~ 12;                                            82010300
    END;                                                                82010400
         DUBL ~ LA>11;       % BOTH ARE DOUBLE PRECISION                82010500
         SA ~ IF AVAL.PSDP=1 THEN -AVAL.PSS ELSE AVAL.PSS;              82010600
         SB ~ IF BVAL.PSDP=1 THEN -BVAL.PSS ELSE BVAL.PSS;              82010700
         IF BX THEN                                                     82010800
    BEGIN                              % MAKE B = OPERAND # 1           82010900
         XCH(LA,LB);                   %      A = OPERAND # 2           82011000
         XCH(SA,SB);                                                    82011100
    END;                                                                82011200
         IF TYPE=MULT THEN                                              82011300
    BEGIN     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   MULT            82011400
         IF BX THEN REALEXCH;                                           82011500
         IF (LA~LA+LB)>11 THEN IF NOT DUBL THEN                         82011600
    BEGIN                                                               82011700
         EMITPAIR(PRTJUNK,STD);                                         82011800
         EMITL(0); EMITO(EXCH);                                         82011900
         EMITL(0); VALUCALL(PRTJUNK);                                   82012000
         DUBL ~ TRUE;                                                   82012100
    END;                                                                82012200
         SA ~ SA+SB;                                                    82012300
    END ELSE IF TYPE=DIVD OR TYPE=RDIV THEN                             82012400
    BEGIN     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  DIVD,RDIV        82012500
         IF SA}0 THEN                                                   82012600
    BEGIN                                                               82012700
         IF TYPE=RDIV AND SA=0 AND SB}0 THEN SA ~ SB ELSE               82012750
    BEGIN                                                               82012760
         IF NOT BX THEN EX;                                             82012800
         IF (LB ~ LB + (T ~ SA+REAL(TYPE=DIVD)+REAL(SB<0)|(ABS(SB)+SA   82012900
              |REAL(TYPE=DIVD))+REAL(SB}0 AND TYPE=DIVD)|(IF (T1~SA-SB) 82013000
              >0 THEN T1 ELSE 0)))>11                                   82013100
              THEN IF NOT DUBL THEN OVF(TRUE,DUBL,LA,LB);               82013200
         IF T>27 THEN T ~ 27;                                           82013250
         SCAL(T);                      % SCALE DIVIDEND                 82013300
         SA ~IF TYPE=DIVD THEN (1+(IF SA>SB THEN SA ELSE SB|REAL(SB>0)))82013400
              ELSE T+SB;                                                82013500
         EX;                                                            82013600
    END;                                                                82013650
    END ELSE IF SA<0 THEN                                               82013700
    BEGIN                              % DIVISOR IS FDP                 82013800
         IF SB>0 THEN                                                   82013900
    BEGIN                                                               82014000
         IF BX THEN                                                     82014100
    BEGIN                                                               82014200
         IF TYPE=DIVD THEN                                              82014300
    BEGIN                                                               82014400
         IF (LB~LB+1)>11 THEN IF NOT DUBL THEN OVF(TRUE,DUBL,LA,LB);    82014500
         SCAL(1);                      % SCALE DIVIDEND                 82014600
    END;                                                                82014700
         EX;                                                            82014800
         IF (LA~LA+ABS(SA))>11 THEN IF NOT DUBL                         82014900
              THEN OVF(FALSE,DUBL,LA,LB);                               82015000
         SCAL(ABS(SA));                % SCALE DIVISOR-LEAVE IT ON TOP  82015100
    END ELSE                                                            82015200
    BEGIN                                                               82015300
         IF (LA~LA+ABS(SA))>11 THEN IF NOT DUBL                         82015400
              THEN OVF(FALSE,DUBL,LA,LB);                               82015500
         SCAL(ABS(SA));                % SCALE DIVISOR                  82015600
         IF TYPE=DIVD THEN                                              82015700
    BEGIN                                                               82015800
         IF (LB~LB+1)>11 THEN IF NOT DUBL THEN OVF(TRUE,DUBL,LA,LB);    82015900
         EX; SCAL(1); EX;              % SCALE DIVIDEND                 82016000
    END;                                                                82016100
    END;                                                                82016200
         SA ~ SB+REAL(TYPE=DIVD);                                       82016300
    END ELSE                                                            82016400
    BEGIN                              % DIVIDEND IS FDP                82016500
         IF SA<SB THEN                                                  82016600
    BEGIN                                                               82016700
         IF BX THEN EX;                                                 82016800
         IF (LA~LA+(T~SB-SA))>11 THEN IF NOT DUBL                       82016900
              THEN OVF(FALSE,DUBL,LA,LB);                               82017000
         SCAL(T);                      % SCALE DIVISOR                  82017100
    END ELSE IF SB<SA THEN                                              82017200
    BEGIN                                                               82017300
         IF NOT BX THEN EX;                                             82017400
         IF (LB~LB+(T~SA-SB))>11 THEN IF NOT DUBL                       82017500
              THEN OVF(TRUE,DUBL,LA,LB);                                82017600
         SCAL(T);                      % SCALE DIVIDEND                 82017700
         EX;                                                            82017800
    END;                                                                82017900
         SA ~ 0;                                                        82018000
    END;                                                                82018100
    END;                                                                82018200
         LA ~ LB;                                                       82018300
    END ELSE                                                            82018400
    BEGIN     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ADD,SUBT,IDIV     82018500
         IF T ~ (SA-SB)!0 THEN                                          82018600
         IF T>0 THEN                                                    82018700
    BEGIN                                                               82018800
         IF NOT BX THEN EX;                                             82018900
         IF (LB~LB+T)>11 THEN IF NOT DUBL THEN OVF(TRUE,DUBL,LA,LB);    82019000
         SCAL(T);                      % SCALE OPERAND # 1              82019100
         IF TYPE!ADD THEN EX;                                           82019200
    END ELSE                                                            82019300
    BEGIN                                                               82019400
         IF BX THEN EX;                                                 82019500
         IF (LA~LA+ABS(T))>11 THEN IF NOT DUBL                          82019600
              THEN OVF(FALSE,DUBL,LA,LB);                               82019700
         SCAL(ABS(T));                 % SCALE OPERAND # 2              82019800
    END ELSE IF BX AND TYPE!ADD THEN EX;                                82019900
         SA ~ IF SB>SA THEN SB ELSE SA;                                 82020000
         IF TYPE=ADD OR TYPE=SUBT THEN                                  82020100
              LA ~ (IF LB>LA THEN LB ELSE LA) +1                        82020200
         ELSE IF TYPE=IDIV THEN LA ~ LB;                                82020300
         IF LA>11 AND NOT DUBL THEN                                     82020400
    BEGIN                                                               82020500
         EMITPAIR(PRTJUNK,STD);                                         82020600
         EMITL(0); EMITO(EXCH);                                         82020700
         EMITL(0); VALUCALL(PRTJUNK);                                   82020800
         DUBL ~ TRUE;                                                   82020900
    END;                                                                82021000
    END;                                                                82021100
         PS[PSX~PSX-1]~ 0&REAL(SA<0)[TOPSDP]& COMP[TOPSC]               82021200
              & (IF SA>23 THEN 23 ELSE SA) [TOPSS]                      82021300
              & (IF LA>23 THEN 23 ELSE LA) [TOPSL]                      82021400
              &(IF AVAL.PST=FPR OR BVAL.PST=FPR                         82021500
              AND NOT DUBL AND TYPE<DIVD THEN FPR ELSE OPR) [TOPST];    82021600
         IF DUBL AND TYPE=RDIV THEN                                     82021700
    BEGIN                                                               82021800
         EMITO(DUP);                                                    82021900
         EMITL(0);                                                      82022000
         EMITO(NEQL);        % DIV BY 0 = SIZE ERROR                    82022100
         T ~ RELADDR;        % BRANCH POINT FOR BFC                     82022200
         EMITF;                                                         82022300
         EMITPAIR(PRTJUNK,STD);        % V1- HIGH                       82022400
         EMITPAIR(PRTJUNK2,STD);       % V1- LOW                        82022500
         EMITPAIR(JUNKEX1,STD);        % V2- HIGH                       82022600
         EMITPAIR(JUNKEX2,STD);        % V2- LOW                        82022700
         EMITO(MKS);                                                    82022800
         VALUCALL(JUNKEX2);            % V2- LOW                        82022900
         VALUCALL(JUNKEX1);            % V2- HIGH                       82023000
         VALUCALL(PRTJUNK2);           % V1- LOW                        82023100
         VALUCALL(PRTJUNK );           % V1- HIGH                       82023200
         VALUCALL(DMOD);                                                82023300
         VALUCALL(PRTJUNK);                                             82023400
         SA ~ RELADDR;  EMITBFW;                                        82023500
         EMITBRANCH(T,RELADDR,BFC);                                     82023600
         EMITO(DEL);                                                    82023700
         EMITO(DEL);                                                    82023800
         EMITL(0);           % GENERATE SIZE ERROR                      82023900
         EMITO(DIVD);        % LEAVE UNDEFINED DP VALUE ON STACK        82024000
         EMITBRANCH(SA,RELADDR,BFW);                                    82024100
    END ELSE                                                            82024200
    BEGIN                                                               82024300
         EMITO(IF NOT DUBL THEN IF TYPE=DIVD THEN IDIV ELSE TYPE        82024400
               ELSE IF TYPE<DIVD THEN TYPE+10 ELSE DLD);                82024500
         IF TYPE=RDIV THEN BEGIN EMITL(1); EMITO(IDIV); END;            82024600
    END;                                                                82024700
    XIT:                                                                82024800
         IF DEBUGTOG THEN MNTRPSS;                                      82024900
    END ARTH;                                                           82025000
PROCEDURE OPERANDSCALE;                                                 82025100
    BEGIN  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%82025200
           %    OPERAND SCALE IS USED WHEN SCALING BEFORE A DIVIDE OR A%82025300
           %    CALL ON AN ARITHMETIC INTRINSIC                        %82025400
           %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%82025500
         REAL OSC,OSZ; INTEGER JUNK; BOOLEAN B;                         82025600
         REAL T,A,AL;                                                   82025700
         DEFINE SCLF(PWR) = IF NOT (B~AL>11) THEN IF AL+PWR>11 THEN     82025800
                                BEGIN B~TRUE; EMITL(0); EMITO(EXCH);END;82025900
                            IF B THEN EMITNUM(TEN[PWR+27]);             82026000
                            EMITNUM(IF PWR{11 THEN JUNK ~ TEN[PWR]      82026100
                                   ELSE TEN[PWR]);                      82026200
                            EMITO(MULT + 10|REAL(B))#,                  82026300
                MAX(A,T) = (IF T1~(A) > (T) THEN T1 ELSE (T))#;         82026400
         IF ATYP=FGC THEN              % MUST BE ZERO                   82026500
    BEGIN                                                               82026600
         EMITL(0);                                                      82026700
         AVAL ~ BVAL & LTV [TOPST] & 0 [TOPSSIN] & COMP [TOPSC];        82026800
    END;                                                                82026900
         AL ~ AVAL.PSL;                                                 82027000
         OSC ~ VARU2.[17:15];                                           82027100
         OSZ ~ VARU2.[32:16];                                           82027200
         IF NOT BOOLEAN(VARU2.[16:1]) THEN  % FUNNYDP WAS FALSE         82027300
         IF A ~ AVAL<0 THEN                                             82027400
    BEGIN                              % VALUE IN A REG FUNNYDP         82027500
         SCLF(A.PSS+OSC);                                               82027600
         AVAL.PSL ~ MAX(A.PSL+A.PSS,OSZ) + OSC;                         82027700
         AVAL.PSDP ~ 0;                                                 82027800
         AVAL.PSS ~ OSC;                                                82027900
    END ELSE                           % VALUE IN A REG NOT FUNNYDP     82028000
         IF T ~ OSC-A.PSS>0 THEN                                        82028100
    BEGIN                                                               82028200
         SCLF(T);                                                       82028300
         AVAL.PSL ~ MAX(A.PSL-A.PSS,OSZ) + OSC;                         82028400
         AVAL.PSS ~ OSC;                                                82028500
    END ELSE AVAL.PSL ~ MAX(A.PSL,OSZ+A.PSS)                            82028600
         ELSE                          % FUNNYDP WAS TRUE               82028700
         IF A ~ AVAL<0 THEN            % VALUE IN A REG IS FUNNYDP      82028800
         IF T ~ A.PSS-OSC>0 THEN                                        82028900
    BEGIN                                                               82029000
         SCLF(T);                                                       82029100
         AVAL.PSL ~ MAX(A.PSL+A.PSS,OSZ) - OSC;                         82029200
         AVAL.PSS ~ OSC;                                                82029300
    END ELSE AVAL.PSL ~ MAX(A.PSL,OSZ-A.PSS)                            82029400
         ELSE AVAL.PSL ~ MAX(A.PSL,OSZ+A.PSS); % A-REG NOT FUNNYDP      82029500
         IF AVAL.PSL>11 AND NOT B AND AL{11 THEN                        82029600
    BEGIN                                                               82029700
         EMITL(0); EMITO(EXCH);                                         82029800
    END;                                                                82029900
         IF DEBUGTOG THEN MNTRPSS;                                      82030000
    END OPERANDSCALE;                                                   82030100
PROCEDURE REMAINDR;                                                     82030200
BEGIN    % * * * HANDLES REMAINDER OPTION OF DIVIDE (FORMAT 4 & 5) * * *82030300
         REAL AV,BV,SIZE;                                               82030400
         EMITO(MKS);                                                    82030500
         EMITPAIR(JUNKA,LODD);                                          82030600
         EMITO(CMN);                                                    82030700
         EMITVAR(((SIZE~2+REAL((AV~AVAL).PSL}12)+REAL((BV~BVAL).PSL}12))82030800
                   +2),SES);                                            82030900
         EMITVAR(SIZE,TRW);                                             82031000
         EMITO(CMX);                                                    82031100
         ARTH(DIVD,0);                                                  82031200
         FOR I~ 1 STEP 1 UNTIL SIZE DO EMITL(0);                        82031300
         EMITO(MKS);                                                    82031400
         EMITPAIR(JUNKA,LODD);                                          82031500
         EMITO(CMN);                                                    82031600
         EMITVAR(1,RSA);                                                82031700
         EMITVAR(SIZE+2,SED);                                           82031800
         EMITVAR(SIZE,TRW);                                             82031900
         EMITO(CMX);                                                    82032000
         INPSUDOSTK ~ BV;                                               82032100
         INPSUDOSTK ~ AV;                                               82032200
         ARTH(RDIV,0);                                                  82032300
END REMAINDR;                                                           82032400
PROCEDURE SGNM;                                                         82032500
BEGIN    COMMENT                                                        82032600
    GENERATES +1, -1, OR 0 DEPENDING ON WHETHER THE (FORMULA) IS        82032700
    GREATER THAN, LESS THAN, OR EQUAL TO ZERO;                          82032800
         LABEL  SEGMENTHERE;                                            82032900
         EMITO(DUP);                                                    82033000
         EMITL(0);                                                      82033100
         EMITO(NEQL);                                                   82033200
         EMITO(EXCH);                                                   82033300
         EMITD(1,1,1);                                                  82033400
END SGNM;                                                               82033500
PROCEDURE INTM(TYPE,FRMT);VALUE TYPE,FRMT;REAL TYPE,FRMT;               82033600
BEGIN    COMMENT                                                        82033700
    INTM HANDLES CALLS ON INTRINSIC ROUTINE;                            82033800
         REAL I,T;                                                      82033900
    DEFINE                                                              82034000
          ARCTANINT = 14#, % ARC TANGENT INTRINSIC NUMBER               82034100
          COSINT    = 13#, % COSINE      INTRINSIC NUMBER               82034200
          EXPINT    = 16#, % E TO THE    INTRINSIC NUMBER               82034300
          LNINT     = 15#, % LOG BASE E  INTRINSIC NUMBER               82034400
          SININT    = 12#, % SINE        INTRINSIC NUMBER               82034500
          SQRTINT   = 11#, % SQUARE ROOT INTRINSIC NUMBER               82034600
          XTOTHEINT =  6#, % X TO THE    INTRINSIC NUMBER               82034700
          EXPI      = INTRIN[5]#, % PLACE IN INTRINSIC ARRAY FOR EXP    82034800
          LNI       = INTRIN[4]#, %                              LN     82034900
          XTOTHEI   = INTRIN[6]#; %                              XTOTHE 82035000
    % NOTE THIS SHOULD BE EXPANDED TO INCLUDE DOUBLE PRECISION          82035100
         IF TYPE = EXPSTAR THEN   %  CALL  XTOTHE INTRINSIC             82035200
    BEGIN                                                               82035300
              EMITO(MKS);                                               82035400
              IF LNI=0 THEN LNI ~ CALLINTRIN(LNINT);                    82035500
              EMITPAIR(LNI,LODD);                                       82035600
              IF EXPI = 0 THEN EXPI ~ CALLINTRIN(EXPINT);               82035700
              EMITPAIR(EXPI,LODD);                                      82035800
              IF XTOTHEI=0 THEN XTOTHEI ~ CALLINTRIN(XTOTHEINT);        82035900
              VALUCALL(XTOTHEI);                                        82036000
              EMITO(DEL);                                               82036100
         EMITL(0);                                                      82036150
         EMITO(EXCH);                                                   82036160
    END ELSE BEGIN                                                      82036200
              IF T~AVAL.PSS ! 0 THEN  % MAKE A REAL NUMBER              82036300
    BEGIN                                                               82036400
                   EMITNUM(JUNK~TEN[T]);                                82036500
                   EMITO(DIVD);                                         82036600
    END;                                                                82036700
         I ~  IF TYPE { EXPV THEN %                                     82036800
                   IF TYPE { COSV THEN %                                82036900
                        IF TYPE = ARCTANV THEN ARCTANINT %              82037000
                        ELSE COSINT %                                   82037100
                   ELSE EXPINT %                                        82037200
              ELSE %                                                    82037300
                   IF TYPE } SINV THEN %                                82037400
                        IF TYPE = SINV THEN SININT %                    82037500
                        ELSE SQRTINT %                                  82037600
                   ELSE LNINT; %                                        82037700
              IF IIX~INTRIN[JUNK~I-11]=0 THEN                           82037800
                        INTRIN[JUNK] ~ IIX ~ CALLINTRIN(I);             82037900
              VALUCALL(IIX);                                            82038000
              IF T!0 THEN                                               82038100
         BEGIN                                                          82038200
                   EMITNUM(JUNK~TEN[T]);                                82038300
                   EMITO(MULT);                                         82038400
         END;                                                           82038500
              EMITL(1);                                                 82038600
              EMITO(IDIV);                                              82038700
    END;                                                                82038800
         PS[PSX ~ PSX-REAL(TYPE=EXPSTAR)] ~ 0&OPR [TOPST]&COMP [TOPSC]  82038900
              & (6+6|REAL(TYPE=EXPSTAR)) [TOPSL];                       82038950
         IF DEBUGTOG THEN MNTRPSS;                                      82039000
END INTM;                                                               82039100
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%82039200
BOOLEAN PROCEDURE LBCHK(Q1,Q2,IFX);   % CHECKS FOR LEGAL LABELS         83000000
    VALUE Q1,Q2; REAL Q1,Q2,IFX;                                        83000100
    BEGIN                                                               83000200
         LABEL XIT,TA;                                                  83000300
         BOOLEAN B;                                                     83000400
         REAL DIX,T,DIY;                                                83000500
         IFX ~ 0;                                                       83000600
         IF (DIX ~ DICT[Q1.IR,Q1.IC].NXIF) = 0 THEN GO TO XIT;          83000700
         ERPNT ~ - Q1;                                                  83000800
         IF Q2 = 0 THEN                                                 83000900
    BEGIN                                                               83001000
         IF IF0[DIX].SNL ! 0 THEN                                       83001100
         IF CSECTIX = 0 THEN ERR(162) ELSE                              83001200
    BEGIN                                                               83001300
         DIY ~ CSECTIX;                                                 83001400
         B ~ TRUE;                                                      83001500
         GO TO TA;                                                      83001600
    END;                                                                83001700
         LBCHK ~ TRUE;                                                  83001800
         IFX ~ DIX;                                                     83001900
         GO TO XIT;                                                     83002000
    END;                                                                83002100
         IF (DIY ~ DICT[Q2.IR,Q2.IC].NXIF) = 0 THEN GO TO XIT;          83002200
         ERPNT ~ - Q2;                                                  83002300
    TA:                                                                 83002400
         STK[0] ~ DIX;                                                  83002500
         STK[1] ~ DIY;                                                  83002600
         IF ( T ~ QUALCHECK(0,0,1)) ! 1 THEN                            83002700
         IF B THEN ERR(47) ELSE                                         83002800
         IF T = 0 THEN ERR(48) ELSE ERR(49);                            83002900
         IFX ~ Q.NXIF;                                                  83003000
         LBCHK ~ TRUE;                                                  83003100
    XIT:                                                                83003200
    END LBCHK;                                                          83003300
PROCEDURE EXAMINEF;                                                     83003400
    BEGIN                                                               83003500
         % TYPE                                                         83003600
         % 0 = REPLACING FIRST                                          83003700
         % 1 = ALL                                                      83003800
         % 2 = LEADING ( OR UNTIL FIRST)                                83003900
         % TALL = TRUE IF TALLYING IS BEING DONE                        83004000
         % REP = TRUE IS ANY REPLACING IS BEING DONE                    83004100
         % REPUF = TRUE IF REPLACING/TALLYING UNTIL FIRST               83004200
         REAL L1,I,SVPS,OFF,SVPSX,TYPE;                                 83004300
         REAL R,SZ,N,II,SZC,SVIF2;                                      83004400
         BOOLEAN REP,TALL,REPUF,SN,S;                                   83004500
         BOOLEAN STK1,STK2,VARSZ;                                       83004600
         LABEL XIT;                                                     83004700
         DEFINE FIXJUMP = FOR II ~ 1 STEP 1 UNTIL I DO                  83004800
              EMITJUMP(BP[II],RELADDR,JFC)#;% HANDLE FIXUPS             83004900
         DEFINE LITOFF = REAL(LIT[0]=-1) + REAL(LIT[1]=-1 AND REP)#;    83005000
         DEFINE BP[I] = REDEFARRAY4[22+I]#,                             83005100
         LIT[I] = REDEFARRAY4[27+I]#;                                   83005200
PROCEDURE REPF(I,REP);                                                  83005300
         VALUE I,REP;                                                   83005400
         REAL I; BOOLEAN REP;                                           83005500
    BEGIN                                                               83005600
         IF LIT[0]=-1 THEN                                              83005700
    BEGIN                                                               83005800
         EMITVAR(1,CNE);                                                83005900
         BP[I] ~ RELADDR;    EMITFIX(16384);                            83006000
         EMITVAR(1,SRD);                                                83006100
    END ELSE                                                            83006200
    BEGIN                                                               83006300
         EMITVAR(LIT[0],TNE);                                           83006400
         BP[I] ~ RELADDR;    EMITFIX(16384);                            83006500
         EMITVAR(1,SFS);                                                83006600
    END;                                                                83006700
         EMITO(ENS);                                                    83006800
    END REPF;                                                           83006900
PROCEDURE SALL(REP,TALL);                                               83007000
         VALUE REP,TALL;                                                83007100
         BOOLEAN REP,TALL;                                              83007200
    BEGIN                                                               83007300
         BOOLEAN STK1,STK2;                                             83007400
         REAL N;                                                        83007500
         IF STK1 ~ LIT[0]=-1 THEN EMITVAR(1,CEQ) ELSE                   83007600
              EMITVAR(LIT[0],TEQ);                                      83007700
         EMITVAR(3|REAL(TALL) + 7|REAL(REP) -                           83007800
              REAL(REP AND NOT STK2~LIT[1]=-1) - REAL(REP AND NOT STK1) 83007900
              ,JFC);                                                    83008000
         IF TALL THEN                                                   83008100
    BEGIN                                                               83008200
         EMITVAR(N ~ 3+LITOFF,RDA);                                     83008300
         EMITVAR(8,SFD);                                                83008400
         EMITVAR(N,SDA);                                                83008500
    END;                                                                83008600
         IF REP THEN                                                    83008700
    BEGIN                                                               83008800
         EMITVAR(1,SSA);                                                83008900
         EMITVAR(1,RDA);                                                83009000
         IF STK1 THEN EMITVAR(1,SRD);                                   83009100
         IF STK2 THEN                                                   83009200
    BEGIN                                                               83009300
         EMITVAR(1,SES);                                                83009400
         EMITVAR(1,SRS);                                                83009500
         EMITVAR(1,TRS);                                                83009600
    END ELSE                                                            83009700
    BEGIN                                                               83009800
         EMITCHAR(LIT[1],1);                                            83009900
    END;                                                                83010000
         EMITVAR(1,RSA);                                                83010100
    END;                                                                83010200
         IF STK1 THEN                                                   83010300
    BEGIN                                                               83010400
         EMITVAR(IF STK2 THEN 2 ELSE 1,SED);                            83010500
         EMITVAR(1,SRD);                                                83010600
    END ELSE EMITVAR(1,SFS);                                            83010700
         EMITO(ENS);                                                    83010800
    END SALL;                                                           83010900
PROCEDURE SLUF(REP,REPUF,TALL,I);                                       83011000
         VALUE REP,REPUF,TALL,I;                                        83011100
         BOOLEAN REP,REPUF,TALL;                                        83011200
         REAL I;                                                        83011300
    BEGIN                                                               83011400
         BOOLEAN STK1,STK2; REAL N;                                     83011500
         IF STK1 ~ LIT[0]=-1 THEN EMITVAR(1,IF REPUF THEN CNE ELSE CEQ) 83011600
              ELSE EMITVAR(LIT[0],IF REPUF THEN TNE ELSE TEQ);          83011700
         BP[I] ~ RELADDR;    EMITFIX(16384);                            83011800
         IF TALL THEN                                                   83011900
    BEGIN                                                               83012000
         EMITVAR(N ~ 3+LITOFF,RDA);                                     83012100
         EMITVAR(8,SFD);                                                83012200
         EMITVAR(N,SDA);                                                83012300
    END;                                                                83012400
         IF REP THEN                                                    83012500
    BEGIN                                                               83012600
         EMITVAR(1,SSA);                                                83012700
         EMITVAR(1,RDA);                                                83012800
         IF STK1 THEN EMITVAR(1,SRD);                                   83012900
         IF STK2 THEN                                                   83013000
    BEGIN                                                               83013100
         EMITVAR(1,SES);                                                83013200
         EMITVAR(1,SRS);                                                83013300
         EMITVAR(1,TRS);                                                83013400
    END ELSE                                                            83013500
    BEGIN                                                               83013600
         EMITCHAR(LIT[1],1);                                            83013700
    END;                                                                83013800
         EMITVAR(1,RSA);                                                83013900
    END;                                                                83014000
         IF STK1 THEN                                                   83014100
    BEGIN                                                               83014200
         EMITVAR(IF STK2 THEN 2 ELSE 1,SED);                            83014300
         EMITVAR(1,SRD);                                                83014400
    END ELSE EMITVAR(1,SFS);                                            83014500
         EMITO(ENS);                                                    83014600
    END SLUF;                                                           83014700
PROCEDURE GETCHARS(REP,VARSZ);                                          83014800
         VALUE VARSZ;                                                   83014900
         BOOLEAN REP,VARSZ;                                             83015000
    BEGIN                                                               83015100
         REAL N,I;                                                      83015200
         LABEL L;                                                       83015300
    L:   DO MACRO UNTIL MACN2=XXXXM;                                    83015400
         IF I=0 THEN REP ~ BOOLEAN(V2.[46:1]);                          83015500
         IF BOOLEAN(V2) THEN IF VARSZ THEN EMITNUM(V1) ELSE LIT[I] ~ V1 83015600
              ELSE                                                      83015700
    BEGIN                                                               83015800
         EMITL(0);                                                      83015900
         EMITO(MKS);                                                    83016000
         EMITL(0);                                                      83016100
         EMITO(CMN);                                                    83016200
         EMITVAR(4,RSA);                                                83016300
         IF N ~ AVAL.PSOFS !0 THEN EMITVAR(N,SFS);                      83016400
         EMITVAR(2,SED);                                                83016500
         EMITVAR(1,SRD);                                                83016600
         EMITVAR(1,TRS);                                                83016700
         EMITO(CMX);                                                    83016800
         EMITO(EXCH); EMITO(DEL);                                       83016900
    END;                                                                83017000
         IF I=0 THEN                                                    83017100
    BEGIN                                                               83017200
         I ~ 1;                                                         83017300
         IF REP THEN GO TO L;                                           83017400
    END;                                                                83017500
    END GETCHARS;                                                       83017600
         TYPE ~ V1;                                                     83017700
         SVPS ~ PS[PSX];                                                83017800
         SVPSX ~ PSX-1;                                                 83017900
         OFF ~ SVPS.PSOFS;                                              83018000
         TALL ~ IF BOOLEAN(V2) THEN FALSE ELSE TRUE;                    83018100
         REPUF ~ BOOLEAN(V2.[46:1]);                                    83018200
         LIT[0] ~ LIT[1] ~ -1;                                          83018300
         IF VARSZ ~ BOOLEAN(IF2[SVPS.PSIX].VARF) THEN                   83018400
    BEGIN                                                               83018500
         IF BOOLEAN(SVPS.PSSIN) THEN EMITO(EXCH)   % F-8: DESC          83018600
              ELSE EMITNUM(SVPS.PSOFS);            % F-7: OFFSET        83018700
         EMITO(MKS);                               % F-6                83018800
         GETCHARS(REP,TRUE);                       % F-5: CHAR SOUGHT   83018900
         IF NOT REP THEN EMITL(0);                 % F-4:CHR TO REP OR 083019000
         JUNK ~ RFLENGTH(SVPS.PSIX);               % F-3: VAR LENGTH    83019100
         EMITL(REAL(REP)+2|REAL(TALL)+4|REAL(REPUF)); % F-2             83019200
         EMITL(TYPE);                              % F-1                83019300
         IF COBOLVARSZ=0 THEN COBOLVARSZ ~ CALLINTRIN(113);             83019400
         VALUCALL(COBOLVARSZ);                                          83019500
         GO TO XIT;                                                     83019600
    END;                                                                83019700
         SZ ~ SVPS.PSL;                                                 83019800
         IF SVPS.PSC=NM THEN IF SN~(SVIF2~IF2[SVPS.PSIX]).SGTF!0 THEN   83019900
    BEGIN                                                               83020000
         IF S ~(SVIF2.SGTF =1) THEN                                     83020100
    BEGIN                                                               83020200
         IF N ~ SZ.WIX ! 0 THEN                                         83020300
    BEGIN                                                               83020400
         EMITO(DUP);                                                    83020500
         EMITL(N);                                                      83020600
         EMITO(EXCH); EMITO(INX);                                       83020700
    END;                                                                83020800
         SZC ~ SZ.CIX-1;                                                83020900
    END;                                                                83021000
         EMITL(0);                                                      83021100
    END;                                                                83021200
         R ~ SZ MOD 63;                                                 83021300
         IF TALL THEN EMITL(0);                                         83021400
         IF MKSFF AND BOOLEAN(SVPS.PSSIN) THEN IF TALL THEN             83021500
    BEGIN          % MOVE MKS SO CAN RETURN TALLY VALUE                 83021600
         VOIDMKS;                                                       83021700
         EMITO(MKS);                                                    83021800
    END ELSE EMITL(0) ELSE EMITO(MKS);                                  83021900
         GETCHARS(REP,FALSE);                                           83022000
         EMITL(0);                                                      83022100
         EMITO(CMN);                                                    83022200
         EMITVAR(3+LITOFF+REAL(TALL)+REAL(SN)+REAL(S~S AND SZ.WIX!0),   83022300
              RSA);                                                     83022400
         IF SN THEN                                                     83022500
    BEGIN                                                               83022600
         IF BOOLEAN(SVPS.PSSIN) THEN                                    83022700
    BEGIN                                                               83022800
         EMITVAR(5+LITOFF+REAL(TALL)+REAL(S),CRF);    % SOURCE OFFSET   83022900
         EMITO(SFS);                                                    83023000
         IF SZC>0 THEN EMITVAR(SZC,SFS)                                 83023100
              ELSE IF SZC=-1 THEN EMITVAR(1,SRS);                       83023200
    END ELSE                                                            83023300
         IF N ~ OFF+SZC>0 THEN EMITVAR(N,SFS) ELSE                      83023400
              IF N=-1 THEN EMITVAR(1,SRS);                              83023500
         EMITVAR(2+LITOFF+REAL(TALL),SED);                              83023600
         EMITVAR(1,SRD);                                                83023700
         EMITVAR(1,TRS);                                                83023800
         EMITVAR(1,SRS);                                                83023900
         EMITVAR(1,SSA); EMITVAR(1,RDA);                                83024000
         EMITVAR(1,BIR);                                                83024100
         IF SVIF2.SGTF=2 OR SZ<8 THEN EMITVAR(1,SED);% FORCE STORE      83024150
         EMITVAR(4+LITOFF+REAL(TALL)+REAL(S),RSA);                      83024200
    END;                                                                83024300
         IF STK1 ~ LIT[0]=-1 THEN                                       83024400
    BEGIN                                                               83024500
         EMITVAR(IF STK2~LIT[1]=-1 AND REP THEN 2 ELSE 1,SED);          83024600
         EMITVAR(1,SRD);                                                83024700
    END;                                                                83024800
         IF BOOLEAN(SVPS.PSSIN) THEN                                    83024900
    BEGIN                                                               83025000
         EMITVAR(4+LITOFF+REAL(TALL)+REAL(SN)+REAL(S),CRF);             83025100
         EMITO(SFS);                                                    83025200
    END ELSE                                                            83025300
         IF OFF!0 THEN EMITVAR(OFF,SFS);                                83025400
         IF SZ > 189 THEN                                               83025500
    BEGIN                                                               83025600
         IF (L1 ~ SZ DIV 63) < 63  THEN                                 83025700
    BEGIN                                                               83025800
                                                                        83025900
         EMITVAR(L1,BNS);                                               83026000
         L1 ~ 63;                                                       83026100
    END ELSE                                                            83026200
    BEGIN                                                               83026300
         EMITVAR(63,BNS);                                               83026400
         WHILE L1>63 DO                                                 83026500
    BEGIN                                                               83026600
         I ~ I+1;                                                       83026700
         EMITVAR(63,BNS);                                               83026800
         IF TYPE=0 THEN REPF(I,REP) ELSE IF TYPE=1                      83026900
         THEN SALL(REP,TALL) ELSE SLUF(REP,REPUF,TALL,I);               83027000
         L1 ~ L1-63;                                                    83027100
    END;                                                                83027200
    END;                                                                83027300
         IF L1!0 THEN                                                   83027400
    BEGIN                                                               83027500
         I ~ I + 1;                                                     83027600
         EMITVAR(L1,BNS);                                               83027700
         IF TYPE=0 THEN REPF(I,REP) ELSE IF TYPE=1                      83027800
         THEN SALL(REP,TALL) ELSE SLUF(REP,REPUF,TALL,I);               83027900
    END;                                                                83028000
         EMITO(ENS);                                                    83028100
         SZ ~ R;                                                        83028200
    END;                                                                83028300
         WHILE SZ>63 DO                                                 83028400
    BEGIN                                                               83028500
         I ~ I+1;                                                       83028600
         EMITVAR(63,BNS);                                               83028700
         IF TYPE=0 THEN REPF(I,REP) ELSE IF TYPE=1                      83028800
         THEN SALL(REP,TALL) ELSE SLUF(REP,REPUF,TALL,I);               83028900
         SZ ~ SZ-63;                                                    83029000
    END;                                                                83029100
         IF SZ!0 THEN                                                   83029200
    BEGIN                                                               83029300
         I ~ I + 1;                                                     83029400
         EMITVAR(SZ,BNS);                                               83029500
         IF TYPE=0 THEN REPF(I,REP) ELSE IF TYPE=1                      83029600
         THEN SALL(REP,TALL) ELSE SLUF(REP,REPUF,TALL,I);               83029700
    END;                                                                83029800
         IF SN THEN                                                     83029900
    BEGIN                                                               83030000
         EMITVAR(4+LITOFF+REAL(TALL)+REAL(S),RDA);                      83030100
         IF BOOLEAN(SVPS.PSSIN) THEN                                    83030200
    BEGIN                                                               83030300
         EMITVAR(5+LITOFF+REAL(TALL)+REAL(S),CRF);    % DEST   OFFSET   83030400
         EMITO(SFD);                                                    83030500
         IF SZC>0 THEN EMITVAR(SZC,SFD)                                 83030600
              ELSE IF SZC=-1 THEN EMITVAR(1,SRS);                       83030700
    END ELSE                                                            83030800
         IF N ~ OFF+SZC>0 THEN EMITVAR(N,SFD) ELSE                      83030900
              IF N=-1 THEN EMITVAR(1,SRD);                              83031000
         EMITVAR(2+LITOFF+REAL(TALL),SES);                              83031100
         EMITVAR(1,SRS);                                                83031200
         EMITVAR(1,BIT);                                                83031300
         EMITJUMP(RELADDR,RELADDR+4,JFC);                               83031400
         EMITVAR(1,BIS);                                                83031500
    END;                                                                83031600
         IF TYPE=0 THEN                                                 83031700
    BEGIN                                                               83031800
         EMITVAR(4+REAL(STK1)+REAL(STK2),JFW);                          83031900
         FIXJUMP;                                                       83032000
         EMITVAR(1,SSA);                                                83032100
         EMITVAR(1,RDA);                                                83032200
         IF STK1 THEN EMITVAR(1,SRD);                                   83032300
         IF STK2 THEN                                                   83032400
    BEGIN                                                               83032500
         EMITVAR(1,SES); EMITVAR(1,SRS);                                83032600
         EMITVAR(1,TRS);                                                83032700
    END ELSE                                                            83032800
    BEGIN                                                               83032900
         EMITCHAR(LIT[1],1);                                            83033000
    END;                                                                83033100
    END;                                                                83033200
         IF TYPE=2 THEN BEGIN FIXJUMP; END;                             83033300
         EMITO(CMX);                                                    83033400
    XIT:                                                                83033500
         IF MKSFF THEN MKSFF ~ FALSE ELSE                               83033600
    BEGIN                                                               83033700
         IF   TALL   THEN EMITPAIR(TALLYADR,STD);                       83033800
         EMITO(DEL); IF SN THEN EMITO(DEL); IF S THEN EMITO(DEL);       83033900
         IF BOOLEAN(SVPS.PSSIN) OR VARSZ THEN EMITO(DEL);               83034000
         PSX ~ SVPSX;                                                   83034100
    END;                                                                83034200
    END EXAMINEF;                                                       83034300
PROCEDURE LABELDEC;     COMMENT DECLARES A LABEL;                       83034400
    BEGIN                                                               83034500
         REAL LINK,TYPE,T;                                              83034600
         ERPNT ~ V1;                                                    83034700
         IF V2=1 THEN                                                   83034800
    BEGIN     % * * * FIRST LABEL IN CODE OR SECTION                    83034900
              CSECTIX ~ V1;                                             83035000
              IF (T~DRCT[IF5[V1].DLNKF]).SRTLD=1 THEN                   83035100
              IF T.SOPD=1 THEN                                          83035200
              IF T.SRTID=1THEN INPTOG ~ TRUE ELSE OUTPTOG ~ TRUE;       83035300
              SEGSTART;                                                 83035400
         EMITO(NOP);                                                    83035500
              IF FSGTOG THEN                                            83035600
              IF NOT DECLTOG AND IF4[V1].PSNOF=0 THEN                   83035700
    BEGIN                                                               83035800
                   FRSTSEG ~ BUILDSEGDICT(FRSTSEG,SEGNO);               83035900
                   FSGTOG ~ FALSE;                                      83036000
    END;                                                                83036100
    END;                                                                83036200
         PSCNT ~ IF4[V1].PSNOF;                                         83036300
         IF V1!0 THEN                                                   83036400
    BEGIN                                                               83036500
              ADJUST;                                                   83036600
              IF2[V1].LBADR ~ RELADDR;                                  83036700
              IF1[V1].SEGF  ~ SEGNO;                                    83036800
              T ~ IF2[V1].FXF;                                          83036900
              IF2[V1].FXF ~ 0;                                          83037000
              WHILE (LINK ~ T) ! 0 DO                                   83037100
    BEGIN                                                               83037200
                   T ~ GETLINK(LINK,TYPE);                              83037300
                   EMITBRANCH(LINK,RELADDR,TYPE);                       83037400
    END;                                                                83037500
         IF BOOLEAN(IF0[V1].PRF) THEN            % PRT REQUIRED         83037600
              IF1[V1].BADDF ~ BUILDSEGDICT(IF (IF0[LINK ~               83037700
                   V1 + ((T~IF0[V1].SNLF)-REAL(T=0))|IFSZ].SNLF         83037800
                   = 1-T AND (T~IF1[LINK].BADDF)!0) THEN T              83037900
              ELSE IF1[V1].BADDF,SEGNO);                                83038000
%%%%%  SEE IF A PARAGRAPH LABEL FOLLOWING A SECTION LABEL OR VICE VERSA 83038100
%%%%%  ALREADY HAS A PRT. IF SO, USE IT INSTEAD OF GETTING A NEW PRT.   83038200
              IF BOOLEAN(IF3[V1].ALSF) THEN % ALTERED FLAG              83038300
    BEGIN                                                               83038400
                   IF3[V1].ALINKF  ~ GALINK;                            83038500
                   GALINK ~ V1;                                         83038600
    END;                                                                83038700
         IF BOOLEAN(V2) THEN                                            83038800
         IF DECLTOG THEN IF BOOLEAN(IF2[USEFIL].LBLUSF) THEN            83038900
    BEGIN                                                               83039000
         EMITO(MKS);                                                    83039100
         EMITL(3); NAMECALL(IF4[USEFIL].FLLNK); EMITO(LODD);            83039200
         EMITL(8); EMITO(CDC);  % DESC POINTING TO BEG OF USERS LABEL   83039300
         EMITL(0); NAMECALL(IF3[T~USEFIL+IFSZ].BADDF); % DESC TO LBL REC83039400
         EMITO(CMN);                                                    83039500
         EMITVAR(2,RSA);                                                83039600
         NESTER(IF2[T].SZF,TRS);                                        83039700
         EMITO(CMX);                                                    83039800
    END;                                                                83039900
    END;                                                                83040000
         IF BOOLEAN(IF0[V1].MONI) THEN                                  83040100
    BEGIN     % * * * MONITORED LABEL                                   83040200
              JNKMON ~ V1 & PRN[TOPST];                                 83040300
              LABELCTR(V1,FALSE);                                       83040400
              SETUPMONITOR;                                             83040500
    END;                                                                83040600
         IF BOOLEAN(IF2[V1].DMPF) THEN LABELCTR(V1,TRUE);               83040700
    END LABELDEC;                                                       83040800
PROCEDURE BRANCHGEN(TYPE);                                              83040900
         COMMENT EMITS BRANCHS TO VISABLE LABELS;                       83041000
         VALUE TYPE; REAL TYPE;                                         83041100
    BEGIN                                                               83041200
         REAL IFX,T,I,M;                                                83041300
         BOOLEAN BOOLEND,NOTFLG;                                        83041400
         ERPNT ~ IF V2=0 THEN -V1 ELSE -V2;                             83041500
         IF BOOLEND ~ TAKASYL(RELADDR+4)=2121 THEN                      83041600
         IF NOTFLG~BOOLEAN(TAKASYL(RELADDR).[36:1]) THEN TYPE ~ -TYPE;  83041700
         IF LBCHK(V1,V2,IFX) THEN                                       83041800
    BEGIN                                                               83041900
              IF IF4[DRCT[V1].NXIF].PSNOF ! PSCNT THEN ERR( 234);       83042000
              IF (T~IF1[IFX].SEGF)!0 THEN                               83042100
    BEGIN          % * * * LABEL HAS OCCURRED                           83042200
                   IF SEGNO=T THEN                                      83042300
                   BEGIN               % IN THIS SEGMENT                83042400
                        IF BOOLEND THEN                                 83042500
                   BEGIN                                                83042600
                        BOOLFIX(RELADDR,IF2[IFX].LBADR,IF NOTFLG THEN   83042700
                                -TYPE ELSE TYPE,IFX,1);                 83042800
                        IF TYPE>0 THEN EMITO(NOP);                      83042900
                   END;                                                 83043000
                        EMITBRANCH(RELADDR,IF2[IFX].LBADR,TYPE)         83043100
                   END ELSE                                             83043200
    BEGIN               % * * * LABEL BRANCH REQUIRED                   83043300
                        IF (I~IF1[IFX].BADDF)=0 THEN                    83043400
    BEGIN                   % * * * GET A PRT CELL                      83043500
                            I ~ IF2[IFX].LBADR;                         83043600
                            M ~  RELADDR;                               83043700
                            RELADDR~ I;                                 83043800
                            IF1[IFX].BADDF ~ I ~ BUILDSEGDICT(0,T);     83043900
                            RELADDR~ M;                                 83044000
    END;                                                                83044100
              IF BOOLEND THEN                                           83044200
         BEGIN                                                          83044300
              BOOLFIX(RELADDR,I,IF NOTFLG THEN -TYPE ELSE TYPE,IFX,2);  83044400
              IF TYPE>0 THEN EMITO(NOP);                                83044500
         END;                                                           83044600
                        IF TYPE<0 THEN EMITO(LNOT);                     83044700
                        VALUCALL(I);                                    83044800
                        EMITO(ABS(TYPE));                               83044900
         IF TYPE = BFW THEN IF MRCLEAN THEN CONSTANTCLEAN;              83044940
    END;                                                                83045000
    END ELSE  % * * * NOT ENCOUNTERED YET                               83045100
         BEGIN                                                          83045200
              IF BOOLEND THEN                                           83045300
         BEGIN                                                          83045400
              BOOLFIX(RELADDR,0,IF NOTFLG THEN -TYPE ELSE TYPE,IFX,3);  83045500
              IF TYPE>0 THEN EMITO(NOP);                                83045600
         END;                                                           83045700
              EMITLINK(IFX,TYPE);                                       83045800
         IF TYPE = BFW THEN IF MRCLEAN THEN CONSTANTCLEAN;              83045840
         END;                                                           83045900
    END ELSE                                                            83046000
              ERR( 159);                                                83046100
    END BRANCHGEN;                                                      83046200
PROCEDURE ENDCHECK(VAL);                                                83046300
         VALUE VAL;     REAL VAL;                                       83046400
    BEGIN                                                               83046500
         REAL TEMP;                                                     83046600
         VALUCALL(FMINUS1);                                             83046700
         EMITNUM(ABS(VAL));                                             83046800
         EMITO(EQUL+REAL(VAL=0));                                       83046900
         TEMP ~ RELADDR;                                                83047000
         EMITF;                                                         83047100
         IF BOOLEAN(VAL.[1:1]) THEN                                     83047200
    BEGIN                                                               83047300
         EMITL(0);                                                      83047400
         EMITO(COM);                                                    83047500
    END ELSE                                                            83047600
         EMITO(EXIT);                                                   83047700
         EMITBRANCH(TEMP,RELADDR,BFC);                                  83047800
    END ENDCHECK;                                                       83047900
PROCEDURE SRTP;                                                         84000000
    BEGIN                                                               84000100
         REAL SDNAME,INPRO,OUTPRO,IFINX,SOFILE,SVSEG,SVADDR;            84000200
         REAL SVCUTBACK,EQUALS,T,A;                                     84000300
LABEL L1,L2,L3,L4,L5,L6,L7;                                             84000400
LABEL XIT,AWAY;                                                         84000500
SWITCH   SWLST~ AWAY,L1,L2,L3,L4,L5,L6,L7;                              84000600
         BOOLEAN ASCEND,ENDEQUALS,MERGEB;                               84000700
DEFINE                                                                  84000800
         COMPADR  = GARB[08] #,                                         84000900
         HVADDR   = GARB[09] #,                                         84001000
         HVPRO    = GARB[10] #,                                         84001100
         STARTEQ  = GARB[11] #;                                         84001200
         PROCEDURE SLBCHK(T);                                           84001300
                                                                        84001400
              REAL  T;                                                  84001500
    BEGIN                                                               84001600
              IF LBCHK(V2,0,T) THEN                                     84001700
               IF NOT BOOLEAN(IF0[T].SNLF) THEN ERR(84) % NO SECTION NAM84001800
                   ELSE ELSE ERR(83);                                   84001900
         IF IF1[T].BADDF=0 THEN IF1[T].BADDF ~                          84002000
              IF (T1~IF1[T+IFSZ].BADDF)!0 THEN T1 ELSE GETPRTLOC;       84002100
    END SLBCHK;                                                         84002200
    REAL PROCEDURE COMPARGEN(ASCEND);                                   84002300
         VALUE ASCEND;                                                  84002400
         BOOLEAN ASCEND;                                                84002500
    BEGIN                                                               84002600
         DEFINE GETIT =                                                 84002700
              IF NMTOG THEN                                             84002800
    BEGIN                                                               84002900
              T ~ V1;                                                   84003000
              V1 ~ V2;                                                  84003100
         IF3[V2].BADDF ~ FMINUS1&1 [33:47:1]; %DONT LOSE F FLAG         84003200
              BINARYV(V2,2);                                            84003300
              IF3[V2].BADDF ~ FMINUS2 & 1 [33:47:1]; % DONT LOOSE F FLAG84003400
              BINARYV(V2,2);                                            84003500
              V1 ~ T;                                                   84003600
    END ELSE BEGIN                                                      84003700
         IF3[V2].BADDF ~ FMINUS1&1 [33:47:1]; %DONT LOSE F FLAG         84003800
         MARKSTACK;                                                     84003900
              NAME(V2,0);                                               84004000
              IF3[V2].BADDF ~ FMINUS2& 1 [33:47:1]; % DONT LOOSE F FLAG 84004100
              NAME(V2,0);                                               84004200
    END #;                                                              84004300
         REAL SVPSX,SVBDF,T;                                            84004400
         BOOLEAN  NMTOG;                                                84004500
         SVPSX ~ PSX;                                                   84004600
         SVBDF ~ IF3[V2].BADDF;                                         84004700
         NMTOG ~ (T~IF2[V2]).CLF = NM AND T.GRPF = 0 ;                  84004800
         IF3[V2].BADDF ~ FMINUS1&1 [33:47:1]; % 4FNT LOOSE F FLAG       84004900
         IF  HVADDR ! 0 THEN EMITBRANCH ( HVADDR,RELADDR,BFW) ELSE      84005000
              FOR T ~ 0 STEP 1 UNTIL 3 DO EMITL(0);                     84005100
          MARKSTACK;                                                    84005200
         NAME(V2,0);                                                    84005300
         IF AVAL.PSC = COMP THEN                                        84005400
    BEGIN     IF ASCEND THEN                                            84005500
                   EMITNUM(REAL(NOT FALSE)& 0 [1:40:8])                 84005600
              ELSE                                                      84005700
                   EMITNUM(REAL(NOT FALSE));                            84005800
              INPSUDOSTK ~ 0 & NM [TOPST]& 11 [TOPSL]&LTV[TOPST];       84005900
              MOV9(0,0,FALSE);                                          84006000
    END ELSE BEGIN                                                      84006100
              ALLCHAR ~  (IF ASCEND THEN "9" ELSE IF AVAL.PSC = NM THEN 84006200
                          IF IF2[V2].SGTF!0 THEN "R" ELSE "0" ELSE " ");84006300
              INPSUDOSTK ~ ALLCHAR & AWL[TOPST] &1[TOPSL];              84006400
              MOVX(0,1);                                                84006500
    END;                                                                84006600
         HVADDR ~ RELADDR;                                              84006700
         EMITF;   % THIS GETS FIXED UP LATER                            84006800
         ADJUST;                                                        84006900
         IF COMPADR ! 0 THEN EMITBRANCH(COMPADR,RELADDR,BFC) ELSE       84007000
              FOR T ~ 0 STEP 1 UNTIL 3 DO EMITL(0);                     84007100
         STARTEQ ~ RELADDR;                                             84007200
         GETIT;                                                         84007300
         RELATE(LESS+REAL(ASCEND)+REAL(ASCEND),2-REAL( NMTOG));         84007400
         IF MRCLEAN THEN     % IN CASE WE CHOP BACK CODE                84007500
    BEGIN                                                               84007600
         MRCLEAN ~ FALSE;                                               84007700
         CONSTANTCLEAN;                                                 84007800
    END;                                                                84007900
         COMPARGEN ~ RELADDR;  % SAVE OF IN CASE                        84008000
         EMITBRANCH(RELADDR,ARROUND1+6,BFC);                            84008100
         EMITL(1);                                                      84008200
         EMITPAIR(FMINUS4,STD);                                         84008300
         EMITO(EXIT);                                                   84008400
         GETIT;                                                         84008500
         RELATE(NEQL,2-REAL( NMTOG));                                   84008600
         COMPADR ~ RELADDR;                                             84008700
         EMITF;   % THIS GETS ITS ON NEXT COMPILE                       84008800
         EMITL(0);                                                      84008900
         EMITPAIR(FMINUS4,STD);                                         84009000
         EMITO(EXIT);                                                   84009100
         PSX ~ SVPSX;                                                   84009200
         IF3[V2].BADDF ~ SVBDF;                                         84009300
    END COMPARGEN;                                                      84009400
    DEFINE ECPRO =   % WRAP UP EQUALS PROCEDURE                         84009500
    BEGIN                                                               84009600
         ENDEQUALS ~ TRUE;                                              84009700
         TEMPREL ~ RELADDR;                                             84009800
         RELADDR ~ HVADDR;                                              84009900
         EMITO(EXIT);                                                   84010000
         RELADDR ~ SVCUTBACK;                                           84010100
         EMITPAIR(FMINUS4,STD);                                         84010200
         EMITO(EXIT);                                                   84010300
         SEGEND(RELADDR);                                               84010400
         SEGNO ~ SVSEG;                                                 84010500
         TEMPREL ~ RELADDR ~ SVADDR;                                    84010600
         SWAP(EDOC,TDOC);                                               84010700
    END #;                                                              84010800
         ZEROER(GARB[0],11);                                            84010900
         SORTOG ~ TRUE;                                                 84011000
         SDNAME ~ V1;                                                   84011100
         SVSEG ~ SEGNO;                                                 84011200
         MERGEB ~ BOOLEAN(V2);                                          84011300
         IF MRCLEAN THEN                                                84011400
    BEGIN                                                               84011500
         MRCLEAN ~ FALSE;                                               84011600
         CONSTANTCLEAN;                                                 84011700
    END;                                                                84011800
         SWAP(EDOC,TDOC);                                               84011900
         SVADDR ~ RELADDR;                                              84012000
         SEGSTART;                                                      84012100
         HVADDR ~ COMPADR ~ 0;                                          84012200
         EQUALS ~ -BUILDSEGDICT(0,SEGNO);                               84012300
         HVPRO ~ BUILDSEGDICT(0,SEGNO);                                 84012400
         IF PSCNT ! 0 THEN BEGIN ERPNT ~ 0; ERR(231) END;               84012500
XIT:                                                                    84012600
         PASSMAC;                                                       84012700
         GO TO SWLST[V1+1];                                             84012800
         GO AWAY;                                                       84012900
L1:                                                                     84013000
         ASCEND ~ BOOLEAN(V2);                                  % HOW   84013100
         GO TO XIT;                                                     84013200
L2:                                                                     84013300
         SVCUTBACK ~ COMPARGEN(ASCEND);                         % COMPAR84013400
         IF EQUALS<0 THEN                                               84013500
    BEGIN                                                               84013600
         W ~ EQUALS ~ ABS(EQUALS);                                      84013700
         PRT[IX].[33:15] ~ STARTEQ.WIX;                                 84013800
    END;                                                                84013900
         GO TO XIT;                                                     84014000
L3:                                                                     84014100
         ECPRO;                                                 % WRAPUP84014200
         SLBCHK(INPRO);                                         % INPUT 84014300
         GO TO XIT;                                                     84014400
L4:                                                                     84014500
         IF NOT ENDEQUALS THEN ECPRO;                           % GATHER84014600
         GARB[IFINX~IFINX+1] ~ IF4[V2].FLLNK;                   % FILES 84014700
         GO TO XIT;                                                     84014800
L5:                                                                     84014900
         SLBCHK(OUTPRO);                                        % OUTPUT84015000
         GO TO XIT;                                                     84015100
L6:                                                                     84015200
         SOFILE ~ IF4[V2].FLLNK;                                %OUTFILE84015300
         GO TO XIT;                                                     84015400
L7:                                                                     84015500
         SLBCHK(T);                                             % THRU  84015600
         GO TO XIT;                                                     84015700
AWAY:                                                                   84015800
         IF NOT ENDEQUALS THEN ECPRO;                                   84015900
         MARKSTACK;                                                     84016000
         VALUCALL(BLOCKCTR);      %  BUMP BLOCK COUNT                   84016100
         EMITL(1);                                                      84016200
         EMITO(ADD);                                                    84016300
         EMITPAIR(BLOCKCTR,STD);                                        84016400
         IF NOT MERGEB THEN                                             84016500
    BEGIN                                                               84016600
         EMITL(0);      % DISK FILES FOR SORT                           84016700
         EMITL(0);                                                      84016800
         NAMECALL(MEM);                                                 84016900
         EMITL(1); EMITO(SSF); % READ SREG FOR USE                      84017000
         EMITPAIR(A~IF3[SDNAME].BADDF,STD);                             84017100
         EMITO(MKS);                                                    84017200
         EMITL(20);     % NUMBER OF ROWS                                84017300
         EMITL(1000);   % SIZE OF ROWS                                  84017400
         EMITL(3);      % DISPOSITION                                   84017500
         EMITL(1);      % FPB INDEX TO DISK SORT FILES                  84017600
         EMITL(0); EMITO(LNOT); NAMECALL(A); EMITO(INX); % DOPE         84017700
         EMITL(2);      % NUMBUFF                                       84017800
         EMITL(1);      % MODE                                          84017900
         EMITL(10);     % BUFFSIZE                                      84018000
         EMITL(0);      % RECSIZE                                       84018100
         EMITL(0);      % NUMDIM                                        84018200
         EMITL(10);     % IOD                                           84018300
         EMITL(8);      % TYPE                                          84018400
         VALUCALL(ARRYDECINT);  % BUILD THE DISK FIBS                   84018500
         EMITL(0);                                                      84018600
         EMITL(0);                                                      84018700
         EMITL(0);                                                      84018800
         EMITL(0);                                                      84018900
    END ELSE                                                            84019000
         A ~ IF3[SDNAME].BADDF;                                         84019100
         EMITL(REAL(MERGEB));                                   % T1    84019200
         EMITL(0);                                              % T2    84019300
         IF POLYMERGE=0 THEN                                            84019400
    BEGIN                                                               84019500
              POLYMERGE ~ CALLINTRIN(MERGEINT);                         84019600
              SORTER    ~ CALLINTRIN(SORTINT);                          84019700
    END;                                                                84019800
         ADRSCALL(POLYMERGE);                                   % RELA  84019900
         IF RETURNHERE = 0 THEN                                         84020000
    BEGIN                                                               84020100
              RETURNHERE ~ GETPRTLOC;                                   84020200
              ENDFILERTN ~ GETPRTLOC;                                   84020300
    END;                                                                84020400
         ADRSCALL(ENDFILERTN);  NAMECALL(PRTPTR);               % ENDQ  84020500
         ADRSCALL(RETURNHERE);  NAMECALL(PRTPTR);               % BINGO 84020600
         EMITL(0);                                              % IPFIDX84020700
         IF OUTPRO=0 THEN EMITL(0) ELSE ADRSCALL(IF1[OUTPRO].BADDF);%OUT84020800
         IF INPRO =0 THEN EMITL(0) ELSE ADRSCALL(IF1[INPRO ].BADDF);%INP84020900
         IF OUTPRO=0 THEN                                               84021000
    BEGIN                                                       % OUTF  84021100
              EMITL(5);             % POINT TO OUTPUT IODS              84021200
              NAMECALL(SOFILE);     % OR                                84021300
    END ELSE BEGIN                  % POINTER TO SD FOR OUTPUT PROC     84021400
              ADRSCALL(A);                                              84021500
              NAMECALL(PRTPTR);                                         84021600
    END;                                                                84021700
         IF MERGEB THEN EMITL(0) ELSE                           % INF   84021800
         IF INPRO=0 THEN                                                84021900
    BEGIN                                                               84022000
              EMITL(5);                                                 84022100
              NAMECALL(GARB[1]);         % POINTER TO INPUT IODS        84022200
    END ELSE                             %  OR                          84022300
         IF OUTPRO!0 THEN EMITO(DUP)     %  DUP                         84022400
    ELSE BEGIN                           %  OR                          84022500
              ADRSCALL(A);               % MAKE PTR TO SD FOR INPUT PRO 84022600
              NAMECALL(PRTPTR);                                         84022700
    END;                                                                84022800
         EMITL(REAL(OUTPRO! 0));                                % OPTOG 84022900
         EMITL(REAL(INPRO ! 0));                                % IPTOG 84023000
         IF NOT MERGEB THEN                                             84023100
    BEGIN                                                               84023200
         EMITL(0); EMITO(LNOT); NAMECALL(A); EMITO(INX);   %DESC TO DISC84023300
         EMITO(LODD);                                                   84023400
         EMITL(5);  EMITO(CDC); % POINTER TO TOP IOD                    84023500
         EMITL(0);                                                      84023600
    END;                                                                84023700
         FOR T ~ (0 + REAL(MERGEB)) STEP 1 UNTIL 4 + REAL(MERGEB) DO    84023800
    BEGIN                                                               84023900
         IF (SVCUTBACK~GARB[T])=0 OR T>IFINX THEN EMITL(0) ELSE         84024000
    BEGIN                                                               84024100
              EMITL(5);             % THIS GETS THE                     84024200
              NAMECALL(SVCUTBACK);  % TOP IOD                           84024300
    END;                                                                84024400
    END;                                                                84024500
         IF NOT MERGEB THEN                                             84024600
    BEGIN                                                               84024700
         EMITO(MKS);                                                    84024800
         NAMECALL(A);   % PTR TO S-REG DESC                             84024900
         EMITL(3);      % FPB INDEX FOR SORT TAPES                      84025000
         EMITL(IF SORTTAPES < 3 THEN 3 ELSE SORTTAPES); % # OF TAPES    84025100
         EMITL(14);     % TYPE                                          84025200
         VALUCALL(ARRYDECINT);% BUILDS SORT TAPE FIBS                   84025300
    END ELSE                                                            84025400
    BEGIN                                                               84025500
         EMITL(0);                                                      84025600
         EMITL(0);                                                      84025700
         EMITL(IFINX);                                          % NT    84025800
    END;                                                                84025900
         EMITPAIR(HVPRO,LODD);                                  % HIVALU84026000
         EMITPAIR(EQUALS,LODD);                                 % EQUALS84026100
         EMITNUM((IF1[SDNAME].DCRS+7)DIV 8);                    % R     84026200
         EMITL(0);                                              % ALFA  84026300
              EMITPAIR(A,SND);                                  % CLEAR 84026400
         EMITNUM(-MEMORYSIZE);                                  % MSIZE 84026500
         EMITNUM(DISKSIZE);                                     % DSIZE 84026600
         VALUCALL(SORTER);                                      % SORT  84026700
         EMITPAIR(MEM,LODD);                                    % REBILD84026800
              EMITPAIR(A,STD);                                  % SAFTY 84026900
         MKSFF ~ FALSE;                                                 84027000
    END SRTP;                                                           84027100
PROCEDURE RELP;                                                         84027200
    BEGIN                                                               84027300
    % RELEASE STATEMENT MUST NOT BE PERFORMED                           84027400
         REAL T;                                                        84027500
         IF NOT INPTOG THEN ERR(232);                                   84027600
         RELTOG ~ TRUE;                                                 84027700
         ADRSCALL(T~GETPRTLOC);                                         84027800
         IF RETURNHERE = 0 THEN  % RETURN CELLS NOT ASSIGNED            84027900
    BEGIN                                                               84028000
              RETURNHERE ~ GETPRTLOC;                                   84028100
              ENDFILERTN ~ GETPRTLOC;                                   84028200
    END;                                                                84028300
         EMITPAIR(RETURNHERE,STD);    % STORE ADRS OF HIDDEN LABEL      84028400
         EMITL(0);                                                      84028500
         EMITPAIR(ENDFILERTN,STD);    % NOT EOF YET                     84028600
         EMITO(EXIT);                                                   84028700
         ADJUST;                                                        84028800
         T ~ BUILDSEGDICT(T,SEGNO);    % MAKE HIDDEN LABEL FOR RETURN   84028900
    END RELP;                                                           84029000
PROCEDURE RETP;                                                         84029100
    BEGIN                                                               84029200
    % RETURN STATEMENT MUST NOT BE PERFORMED                            84029300
         REAL T,H;                                                      84029400
         IF NOT OUTPTOG THEN ERR(233);                                  84029500
         RETTOG ~ TRUE;                                                 84029600
         ADRSCALL(T ~ GETPRTLOC);                                       84029700
         IF RETURNHERE =0 THEN                                          84029800
    BEGIN                                                               84029900
              RETURNHERE ~ GETPRTLOC;                                   84030000
              ENDFILERTN ~ GETPRTLOC;                                   84030100
    END;                                                                84030200
         EMITPAIR(RETURNHERE,STD);        % STORE ADRS OF HIDDEN LABEL  84030300
         EMITO(EXIT);                                                   84030400
         ADJUST;                                                        84030500
         T ~ BUILDSEGDICT(T,SEGNO);  % MAKE HIDDEN LABEL FOR RETURN     84030600
         VALUCALL(ENDFILERTN);  % SET UP AT END BRANCH                  84030700
         IF BOOLEAN(V2) THEN    % IF INTO CLAUSE THEN HANDLE            84030800
    BEGIN                                                               84030900
              H ~ V1 + IFSZ;      % MOVE FROM FILE TO RECORD            84031000
              DO MACRO UNTIL MACN2=XXXXM AND V1 = V2 AND V1 = EXIT;     84031100
              NAME(H,0);  % GENERATE INTO CODE                          84031200
              MOVX(0,1);                                                84031300
    END;                                                                84031400
    END RETP;                                                           84031500
PROCEDURE SWCHP;   COMMENT HANDLES GO TO DEPENDING;                     85000000
    BEGIN               COMMENT TOP OF STACK = BRANCH LIT;              85000100
         REAL CN,X;                                                     85000200
         REAL J;                                                        85000300
         X ~ V1;                                                        85000400
              COMMENT RANGE TEST;                                       85000500
         EMITO(DUP); EMITO(DUP);      %  IF<1                           85000700
         EMITL(1); EMITO(GREQ);                                         85000800
         EMITO(EXCH);                                                   85000900
         EMITNUM(X); EMITO(LSEQ);                                       85001000
         EMITO(LAND);                                                   85001100
         EMITO(LNOT);                                                   85001200
         J ~ RELADDR; EMITF;                                            85001300
         EMITO(DEL);                                                    85001400
         CN ~ RELADDR;  EMITBFW;                                        85001500
         EMITBRANCH(J,RELADDR,BFC);                                     85001600
         EMITL(1);                                                      85001700
         EMITO(SUBT);                                                   85001800
         EMITL(2);                                                      85001900
         EMITO(MULT);                                                   85002000
         EMITO(BFW);                                                    85002100
         FOR J~1 STEP 1 UNTIL X DO                                      85002200
    BEGIN                                                               85002300
         PASSMAC;                                                       85002400
         BRANCHGEN(BFW);                                                85002500
    END;                                                                85002600
              COMMENT FIX BRANCH AROUND BRANCH TABLE;                   85002700
         EMITBRANCH(CN,RELADDR,BFW);                                    85002800
    END SWCHP;                                                          85002900
PROCEDURE ALTRP;   COMMENT INSURES Q1 OF Q2 IS OK FOR ALTER VERB;       85003000
    BEGIN                                                               85003100
         REAL IFX,T;                                                    85003200
         ERPNT ~ IF V2 = 0 THEN -V1 ELSE -V2;                           85003300
         IF LBCHK(V1,V2,IFX) THEN                                       85003400
    BEGIN                                                               85003500
         IF IF0[IFX].CALF ! 1 THEN ERR(163)                             85003600
           ELSE IF3[IFX].ALSF ~ 1;                                      85003700
         PASSMAC;                                                       85003800
         IF LBCHK(V1,V2,IFX) THEN                                       85003900
    BEGIN                                                               85004000
         ERPNT ~ IF V2 =0 THEN -V1 ELSE -V2;                            85004100
         IF IF1[IFX].BADDF = 0 THEN IF0[IFX].PRF ~ 1;                   85004200
    END ELSE ERR(159)                                                   85004300
    END ELSE ERR(159);                                                  85004400
    END ALTRP;                                                          85004500
PROCEDURE ALTGP;   COMMENT GENERATES ALTER VERB CODE;                   85004600
    BEGIN                                                               85004700
         REAL IFX,T,GD,GC;                                              85004800
         IF LBCHK(V1,V2,IFX) THEN                                       85004900
         IF (GD ~ IF3[IFX].ALTDF) = 0                                   85005000
         THEN IF3[IFX].ALTDF ~ GD ~ GETPRTLOC;                          85005100
         PASSMAC;                                                       85005200
         IF LBCHK(V1,V2,T) THEN                                         85005300
    BEGIN                                                               85005400
         IF (GC ~ IF1[T].BADDF) = 0                                     85005500
         THEN IF1[T].BADDF ~ GC ~ GETPRTLOC;                            85005600
         IF0[T].PRF ~1;                                                 85005700
         IF IF4[IFX].PSNOF ! IF4[T].PSNOF THEN ERR(234);                85005800
    END;                                                                85005900
         ADRSCALL(GC);                                                  85006000
         EMITPAIR(GD,STD);                                              85006100
    END ALTGP;                                                          85006200
PROCEDURE ALGOP;   COMMENT CODE FOR ALTERED GO TO;                      85006300
    BEGIN                                                               85006400
         LABEL L;                                                       85006500
         REAL IX,IXX,IY,IIY;                                            85006600
         BOOLEAN B;                                                     85006700
         IXX ~ IX ~ V1;  % INFO OF ALTER PARAGRAPH LABEL                85006800
         IF B~BOOLEAN(V2) THEN GO TO L;                                 85006900
         PASSMAC;                                                       85007000
         IF NOT BOOLEAN(IF3[IX].ALSF)                                   85007100
              THEN BRANCHGEN(BFW)                                       85007200
          ELSE                                                          85007300
    BEGIN                                                               85007400
         ERPNT ~ IF V2 = 0 THEN -V1 ELSE -V2;                           85007500
         IF NOT LBCHK(V1,V2,IY) THEN ERR(110);                          85007600
         IF3[IX].AINFF ~ IIY ~ IY;                                      85007700
         IF0[IY].PRF ~ 1;                                               85007800
         IF IX~IF1[IIY].BADDF = 0 THEN  IF1[IIY].BADDF ~ IX ~ GETPRTLOC;85007900
    L:   IF (IY~IF3[IXX].ALTDF)=0 THEN IF3[IXX].ALTDF ~ IY ~ GETPRTLOC; 85008000
         PRT[IY.[36:5],IY.[41:7]] ~ IF B THEN (-1)&1 [2:47:1] ELSE IX;  85008100
         VALUCALL(IY);                                                  85008200
         EMITO(LODD);                                                   85008300
         EMITO(BFW);                                                    85008400
         IF MRCLEAN THEN CONSTANTCLEAN;                                 85008450
    END;                                                                85008500
    END ALGOP;                                                          85008600
PROCEDURE ENDPAR(B);  COMMENT END OF PARAGRAPH OR SECTION;              85008700
    VALUE B; BOOLEAN B;  COMMENT TRUE IF END OF SECTION;                85008800
    BEGIN                                                               85008900
    LABEL XIT;                                                          85009000
         REAL T,R;                                                      85009100
         BOOLEAN B1;                                                    85009200
         DEFINE IFX = V1#;                                              85009300
         ERPNT ~ IFX;                                                   85009400
         IF IFX =0 THEN                                                 85009500
    BEGIN                                                               85009600
         IF RELADDR > 0 THEN                                            85009700
    BEGIN                                                               85009800
         EMITO(ZP1);                                                    85009900
         SEGEND(RELADDR);                                               85010000
    END;                                                                85010100
         WHILE LBLSTRT ! 0 DO                                           85010200
    BEGIN                                                               85010300
         IF2[LBLSTRT].FXF ~ 0;                                          85010400
         LBLSTRT ~ IF4[LBLSTRT].LBLSTRTF;                               85010500
    END;                                                                85010600
         GO TO XIT;                                                     85010700
    END;                                                                85010800
         IF (T~IF0[IFX]).TPF = 1 THEN                                   85010900
         IF NOT(T.SNLF = 1 AND DECLTOG) THEN                            85011000
              ENDCHECK(IF1[IFX].LCNTF);                                 85011100
         B1 ~ MRCLEAN; MRCLEAN ~ FALSE;                                 85011150
         IF B THEN                                                      85011200
    BEGIN                                                               85011300
         IF V2=0 THEN                  % NOT DECLARATIVE SECTION        85011400
    BEGIN                                                               85011500
         IF (T~DRCT[IF5[V1].DLNKF]).SRTLD = 1 AND T.EOPD = 1 THEN       85011600
    BEGIN                                                               85011700
         PROMASK.[44:2] ~ FALSE;                                        85011800
         IF T.SRTID = 1 THEN                                            85011900
    BEGIN                                                               85012000
         IF NOT RELTOG THEN ERR(232);                                   85012100
         EMITL(1);                                                      85012200
         EMITPAIR(ENDFILERTN,STD);                                      85012300
         EMITO(EXIT);                                                   85012400
    END  ELSE                                                           85012500
    BEGIN                                                               85012600
         IF NOT RETTOG THEN ERR(233);                                   85012700
         EMITO(EXIT);                                                   85012800
    END;                                                                85012900
         PROMASK.[42:2] ~ FALSE;                                        85013000
    END  ELSE                                                           85013100
         IF (T~IF1[R~IF0[IFX].SCOPE].BADDF)!0 THEN NAMECALL(T)          85013200
    ELSE BEGIN                                                          85013300
         IF1[R].BADDF ~ T ~ IF (T~IF1[R+IFSZ].BADDF)!0 THEN T           85013400
              ELSE GETPRTLOC;                                           85013450
         IF0[R].PRF ~ 1;                                                85013500
         NAMECALL(T);                                                   85013600
    END;                                                                85013700
         EMITO(BFW);                                                    85013800
    END  ELSE                                                           85013900
         IF V2=1 AND NOT BOOLEAN(IF2[USEFIL].LBLUSF) THEN EMITO(EXIT)   85014000
              ELSE                                                      85014100
    BEGIN            % USE PROCEDURE WHICH ACCESSES LABEL RECORD        85014200
         EMITO(MKS);                                                    85014300
         EMITL(0); NAMECALL(IF3[T~USEFIL+IFSZ].BADDF);  % DESC POINT-   85014400
                                             % ING TO LABEL RECORD      85014500
         EMITL(3); NAMECALL(IF4[USEFIL].FLLNK);                         85014600
         EMITO(LODD); EMITL(8); EMITO(CDC);  % DESC POINTING TO BEGIN-  85014700
                                             % NING OF USERS LABEL      85014800
         EMITO(CMN);                                                    85014900
         EMITVAR(2,RSA);                                                85015000
         NESTER(IF2[T].SZF,TRS);                                        85015100
         EMITO(CMX);                                                    85015200
         EMITO(EXIT);                                                   85015300
    END;                                                                85015400
         IF DECLTOG THEN USEFIL ~ 0;                                    85015500
         SEGWRAPUP;                                                     85015600
         MRCLEAN ~ B1;                                                  85015650
         SEGEND(RELADDR);                                               85015700
    END  ELSE                                                           85015800
         IF RELADDR>MXSEGSZ AND NOT BOOLEAN(IF0[R~IFX+IFSZ].SNLF) THEN  85015900
    BEGIN                                                               85016000
         IF0[R].PRF ~ 1;                                                85016200
         IF (T~IF1[R].BADDF) = 0 THEN                                   85016300
              IF1[R].BADDF ~ T ~ GETPRTLOC;                             85016400
         NAMECALL(T);                                                   85016500
         EMITO(BFW);                                                    85016600
         SEGWRAPUP;                                                     85016650
         MRCLEAN ~ B1;                                                  85016660
         SEGEND(RELADDR);                                               85016700
         SEGSTART; EMITO(NOP);                                          85016800
    END ELSE MRCLEAN ~ B1;                                              85016900
    XIT:                                                                85017000
    END ENDPAR;                                                         85017100
PROCEDURE PERFORMP;     % GENERATES PERFORM CALL AND CONTROL            85017200
    BEGIN                                                               85017300
PROCEDURE CALLPERFORM;                                                  85017400
    BEGIN                                                               85017500
PROCEDURE ITCK(I); VALUE I; REAL I;                                     85017600
         IF DECLTOG THEN                                                85017700
         IF IF4[I].PSNOF > PSCNTD THEN ERR(234)                         85017800
         ELSE ELSE                                                      85017900
         IF PSCNT ! 0 THEN                                              85018000
         IF (T~IF4[I].PSNOF) { PSCNTD OR T = PSCNT THEN                 85018100
         ELSE ERR(234)                                                  85018200
         ELSE                                                           85018300
         IF IF4[I].PSNOF > PSCNTD THEN ERR(234);                        85018400
         REAL IFX,IFY;                                                  85018500
         BOOLEAN B;                                                     85018600
         PASSMAC;                                                       85018700
         IF NOT (B ~ V1=0) THEN                                         85018800
    BEGIN                                                               85018900
         ERPNT ~  IF V2 = 0 THEN - V1 ELSE V2;                          85019000
         IF NOT LBCHK(V1,V2,IFY) THEN ERR(159) ELSE ITCK(IFY);          85019100
    END;                                                                85019200
         EMITO(MKS);                                                    85019300
         PASSMAC;                                                       85019400
         IF NOT LBCHK(V1,V2,IFX) THEN ERR(159) ELSE ITCK(IFX);          85019500
         IF NOT B THEN                                                  85019600
         IF IF4[IFY].PSNOF ! IF4[IFX].PSNOF THEN ERR(272);              85019700
         EMITNUM(IF1[IFX].BADDF);                                       85019800
         EMITNUM(IF1[(IF B THEN IFX ELSE IFY)].LCNTF);                  85019900
         VALUCALL(PERFORMGEN);   % CALL PERFORM GEN TO GET THE F+ CELLS 85020000
    END CALLPERFORM;                                                    85020100
         DEFINE PINK = 10#,                                             85020200
         CN[CN1] = BRT[(CN1) | PINK + 1]#,                              85020300
         BC[BC1] = BRT[(BC1) | PINK + 2]#,                              85020400
         AC[AC1] = BRT[(AC1) | PINK + 3]#,                              85020500
         SBI[SBI1] = BRT[(SBI1) | PINK +4]#,                            85020600
         SBV[SBV1] = BRT[(SBV1) | PINK + 5]#,                           85020700
         CNV[CNV1] =   BRT[(CNV1) | PINK + 6]#,                         85020800
         CIV[CIV1] = BRT[(CIV1) | PINK + 7]#,                           85020900
         CSV[CSV1] = BRT[(CSV1) | PINK + 8]#,                           85021000
         SVEI[SVEI1] = BRT[(SVEI1) | PINK + 9]#,                        85021100
         SVEV[SVEV1] = BRT[(SVEV1) | PINK + 10]#,                       85021200
                SIMPLE = 0#,                                            85021300
           TOCLFV=[03:43:5]#,TOINDEX=[16:32:16]#,TOADDRESS=[32:32:16]#, 85021400
                CLFV = [03:5]#,INDEX=[16:16]#,ADDRESS=[32:16]#;         85021500
         LABEL XIT;                                                     85021600
         REAL SVADR,BRADR,N,T,SVPSX,BFN;                                85021700
         SVPSX ~ PSX;                                                   85021800
         IF V1 = SIMPLE THEN                                            85021900
    BEGIN                                                               85022000
         CALLPERFORM;                                                   85022100
         GO TO XIT;                                                     85022200
    END;                                                                85022300
         IF V1 = TIMES THEN                                             85022400
    BEGIN                                                               85022500
         PASSMAC;                                                       85022600
         EXPP;                                                          85022700
         PSX ~ PSX -1;                                                  85022800
         SVADR ~ RELADDR;                                               85022900
         EMITO(DUP);                                                    85023000
         EMITL(0);                                                      85023100
         EMITO(GRTR);                                                   85023200
         BRADR ~ RELADDR; EMITF;                                        85023300
         CALLPERFORM;                                                   85023400
         EMITL(1);                                                      85023500
         EMITO(SUBT);                                                   85023600
         EMITBRANCH(RELADDR,SVADR,BFW);                                 85023700
         EMITBRANCH(BRADR,RELADDR,BFC);                                 85023800
         EMITO(DEL);                                                    85023900
         GO TO XIT;                                                     85024000
    END;                                                                85024100
         IF V1 = UNTILV THEN                                            85024200
    BEGIN                                                               85024300
         SVADR ~ RELADDR;                                               85024400
         PASSMAC;                                                       85024500
         EXPP;                                                          85024600
         PSX ~ PSX - 1;                                                 85024700
         EMITO(LNOT); BRADR ~ RELADDR;EMITF;                            85024800
         CALLPERFORM;                                                   85024900
         EMITBRANCH(RELADDR,SVADR,BFW);                                 85025000
         EMITBRANCH(BRADR,RELADDR, BFC);                                85025100
         GO TO XIT;                                                     85025200
    END;                                                                85025300
    BEGIN     % PERFORM VARYING MESS                                    85025400
    DEFINE BRT = REDEFARRAY5#;                                          85025500
         LABEL LOP;                                                     85025600
         N ~ -1;                                                        85025700
         SVADR ~ RELADDR;    EMITBFW;  % LEAVE HOLE FOR FIXUP           85025800
    LOP:                                                                85025900
         N~N+1;                                                         85026000
         PASSMAC;       % CONTROL VARIABLE                              85026100
         IF V2 = IXN OR V2 = CMP1 THEN                                  85026200
    BEGIN                                                               85026300
         CNV[N]~ -1&V2 TOCLFV&V1 TOINDEX&(IF V2=CMP1 THEN IF3[V1].BADDF 85026400
         ELSE INXR[V1].IXBASE) TOADDRESS ;                              85026500
         IF V2 = CMP1 THEN                                              85026600
              INPSUDOSTK ~ V1 & (T~IF2[V1]) SZFPSL & T FSZFPSS &        85026700
              T DPLFPSDP & DNN [TOPST] & COMP [TOPSC]                   85026800
         ELSE                                                           85026900
              INPSUDOSTK ~ V1 & 5 [TOPSL] & COMP [TOPSC] & INN [TOPST]; 85027000
    END  ELSE                                                           85027100
    BEGIN          % NOT SIMPLE NAME - BUILD SUBROUTINE                 85027200
         SBI[N]~ RELADDR; % SUBROUTINE ENTRY                            85027300
         CNV[N] ~ 0 & V1 TOINDEX;                                       85027400
         DO MACRO UNTIL MACN2 = XXXXM;                                  85027500
         IF MKSFF THEN VOIDMKS;                                         85027600
         IF BOOLEAN(AVAL.PSSIN) THEN                                    85027700
    BEGIN                                                               85027800
         EMITPAIR(JUNKX,STD); EMITO(EXCH);                              85027900
         EMITPAIR(JUNKX,LODD); EMITO(EXCH);                             85028000
    END ELSE EMITO(EXCH);                                               85028100
         EMITNUM((RELADDR+4).WIX);                                      85028200
         EMITO(SUBT);                                                   85028300
         EMITO(LFU);                                                    85028400
    END;                                                                85028500
         SVEI[N] ~ PS[PSX]; PSX~PSX-1;                                  85028600
         PASSMAC;       % INITIAL VALUE                                 85028700
         SBV[N] ~ RELADDR;   % SUBROUTINE ENTRY FOR INITIAL VALUE       85028800
         EXPP;               % INITIAL VALUE                            85028900
         IF (T~CNV[N]).CLFV=IXN THEN OCRX(-INXR[T.INDEX].DNIX);         85029000
         SVEV[N] ~ PS[PSX]; PSX~PSX-1;                                  85029100
         IF BOOLEAN(AVAL.PSSIN) THEN                                    85029200
    BEGIN                                                               85029300
         EMITPAIR(JUNKX,STD); EMITO(EXCH);                              85029400
         EMITPAIR(JUNKX,LODD); EMITO(EXCH);                             85029500
    END ELSE EMITO(EXCH);                                               85029600
         EMITNUM((RELADDR+4).WIX);                                      85029700
         EMITO(SUBT);                                                   85029800
         EMITO(LFU);                                                    85029900
              % ***** BY (INCREMENT) SUBROUTINE                         85030000
         AC[N] ~ RELADDR;  % SUBROUTINE ENTRY FOR INCREMENT OF CV       85030100
         PASSMAC;                                                       85030200
         IF (T ~ CNV[N]) < 0 THEN                                       85030300
    BEGIN          % SIMPLE NAME                                        85030400
         EXPP;          % VALUE OF INCREMENT;                           85030500
         IF T.CLFV = IXN THEN                                           85030600
    BEGIN          % CONTROL VARIBLE = INDEX NAME                       85030700
         EMITNUM(IF1[INXR[T.INDEX].DNIX].LGHF);                         85030800
         EMITO(MULT);                                                   85030900
         VALUCALL(T.ADDRESS);                                           85031000
         EMITO(ADD);                                                    85031100
         NAMECALL(T.ADDRESS);                                           85031200
         EMITO(STD);                                                    85031300
    END  ELSE                                                           85031400
    BEGIN                                                               85031500
         IF BOOLEAN(T1~REAL(T.CLFV!CMP1))                               85031600
                THEN EMITL(T1 ~ IF1[T.INDEX].WIX);                      85031700
         VALUCALL(T.ADDRESS);                                           85031800
         EMITO(ADD);                                                    85031900
         IF T1!0 THEN EMITL(T1);                                        85032000
         NAMECALL(T.ADDRESS);                                           85032100
         EMITO(STD);                                                    85032200
    END                                                                 85032300
    END  ELSE                                                           85032400
    BEGIN          % NOT SIMPLE ADDRESS                                 85032500
         CALLSUBROUTINE(SBI[N]);                                        85032600
         PS[PSX~PSX+1] ~ SVEI[N];                                       85032700
         IF IF2[T.INDEX].SUBF!0 THEN IMPSUBJ(1,2);   % PICK UP SUBS     85032800
         BINARYV(CNV[N].INDEX,2);                                       85032900
         EXPP;                                                          85033000
         ARTH(ADD,0);                                                   85033100
         MOV9(0,0,FALSE);                                               85033200
    END;                                                                85033300
              % FIX BRANCH FROM LAST CONDITION TO HERE                  85033400
         IF N ! 0 THEN EMITBRANCH(BC[N-1],RELADDR,BFC)                  85033500
         ELSE BFN ~ RELADDR;                                            85033600
         PASSMAC; EXPP;                                                 85033700
         BC[N] ~ RELADDR; EMITF; % LEAVE A HOLE FOR FIX LATER           85033800
         IF N=0 THEN BEGIN BRADR ~ RELADDR; EMITBFW; END ELSE           85033900
    BEGIN     COMMENT NOT 1ST CONDITION SO BRANCH TO NEXT CONDITION     85034000
                   INSTEAD OF EXIT;                                     85034100
         IF (T~CNV[N])<0 THEN NAMECALL(T.ADDRESS) ELSE                  85034200
         CALLSUBROUTINE(SBI[N]);                                        85034300
         PS[PSX~PSX+1] ~ SVEI[N];                                       85034400
         CALLSUBROUTINE(SBV[N]);                                        85034500
         PS[PSX~PSX+1] ~ SVEV[N];                                       85034600
         IF DEBUGTOG THEN MNTRPSS;                                      85034700
         MOV9(0,0,FALSE);                                               85034800
         EMITBRANCH(RELADDR,AC[N-1],BFW);                               85034900
    END;                                                                85035000
         PASSMAC;                                                       85035100
         IF V1 = AFTER THEN GO TO LOP;                                  85035200
         EMITBRANCH(SVADR,RELADDR,BFW); % FIX BRANCH TO START-UP CODE   85035300
         FOR I ~ 0 STEP 1 UNTIL N DO                                    85035400
    BEGIN                                                               85035500
         IF (T~CNV[I])< 0 THEN NAMECALL(T.ADDRESS) ELSE                 85035600
          CALLSUBROUTINE(SBI[I]);                                       85035700
         PS[PSX~PSX+1] ~ SVEI[I];                                       85035800
         CALLSUBROUTINE(SBV[I]);                                        85035900
         PS[PSX~PSX+1] ~ SVEV[I];                                       85036000
         IF DEBUGTOG THEN MNTRPSS;                                      85036100
         IF BVAL.PST=INN THEN                                           85036200
    BEGIN                                                               85036300
         EMITO(EXCH);                                                   85036400
         EMITO(STD);                                                    85036500
         PSX ~ PSX-2;                                                   85036600
    END ELSE MOV9(0,0,FALSE);                                           85036700
    END;                                                                85036800
         EMITBRANCH(RELADDR,BFN,BFW);                                   85036900
         EMITBRANCH(BC[N],RELADDR,BFC);                                 85037000
         CALLPERFORM;                                                   85037100
         EMITBRANCH(RELADDR,AC[N],BFW);                                 85037200
         EMITBRANCH(BRADR,RELADDR,BFW);                                 85037300
    END;                                                                85037400
    XIT:                                                                85037500
         WHILE MACN2 ! XXXXM OR V1 ! EXIT DO MACRO;                     85037600
         PSX ~ SVPSX;                                                   85037700
    END PERFORM;                                                        85037800
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%86000000
%                                                                      %86000100
%                            I/O ACTION                                %86000200
%                                                                      %86000300
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%86000400
PROCEDURE INOUT;                                                        86000500
    BEGIN                    % * * * HANDLES ALL I/O STUFF              86000600
PROCEDURE GETSIZE(RIX); VALUE RIX; REAL RIX;                            86000610
    BEGIN          % GET RECORD LENGTH FROM 1ST FOUR CHARACTER POSITIONS86000615
         EMITL(0);                                                      86000620
         EMITO(MKS);                                                    86000630
         EMITL(0); NAMECALL(IF3[RIX].BADDF);                            86000640
         EMITO(CMN);                                                    86000650
         EMITVAR(3,SED);                                                86000660
         EMITVAR(1,RSA);                                                86000670
         EMITVAR(4,ICV);                                                86000680
         EMITO(CMX);                                                    86000685
    END GETSIZE;                                                        86000690
         REAL L,FILQ,SV1,SV2,RIX,OPT;                                   86000700
         BOOLEAN B;                                                     86000800
         DEFINE JUNK = FILQ#;                                           86000900
         LABEL RD,SUS,RIT,DISPLAYL;                                     86001000
LABEL L0,L1,L2,L3,L4,L5,L6,L7,L8,L9,L10,L11;                            86001100
         LABEL XIT,M2;                                                  86001200
SWITCH      SWLST :=L0,L1,L2,L3,L4,L5,L6,L7,L8,L9,L10,L11;              86001300
    GO TO SWLST [V1+1];                                                 86001400
L0:                                                                     86001500
              % * * * * * ACCEPT* * * * * * * * * * * * * * * * * *    086001600
         IF V2 = 16 THEN EMITO(MKS) ELSE EMITL(9);                      86001700
         ADRSCALL(JUNKA);                                               86001800
         NAMECALL(PRTPTR);                                              86001900
         EMITL(14);                                                     86002000
         EMITO(COM);         % MAKE JUNKA SAVE                          86002100
         EMITO(LODD);                                                   86002200
         IF V2 = 16 THEN                                                86002210
    BEGIN                    % SPO CODE                                 86002220
         EMITL(2);           % GO TO SECOND WORD FOR ACCEPT MSG         86002300
         EMITO(CDC);                                                    86002400
         LITPTR(TMP[0],0,"ACCEPT ",7);                                  86002500
         PUSHOVER(TMP[0],7,DRCT[IF5[AVAL.PSIX].DLNKF+1],2,              86002600
              JUNK ~ DRCT[IIX].SIZEF);                                  86002700
         L ~ JUNK + 7;                                                  86002800
         %                                                              86002900
         %    IF IF0[AVAL.PSIX].SNL ! 0 THEN                            86003000
         %    SOME THOUGHT SHOULD BE GIVEN TO                           86003100
         %    GETTING THE 01 LEVEL NAME APPENDED                        86003200
         INPSUDOSTK ~ BVAL & 0[TOPSOFS];                                86003300
         INPSUDOSTK ~ 0 & JKN [TOPSL];                                  86003400
         EMITSTRING(TMP,L,TRUE);                                        86003500
         NESTER(L.WIX,TRW);                                             86003600
         PSX ~ PSX - 2;      % REMOVE ENTRIES FROM PSUDO STACK          86003650
         IF L.CIX ! 0 THEN EMITVAR(L.CIX,TRS);                          86003700
         EMITCHAR("~",1);                                               86003800
         EMITO(CMX);                                                    86003900
         EMITPAIR(JUNKA,LODD);                                          86004000
         EMITL(16);          % WRITE TO SPO                             86004100
         EMITO(COM);                                                    86004200
         EMITL(2);                                                      86004300
    END ELSE BEGIN           % DATA COMM CODE                           86004310
         EMITL(0);                                                      86004320
         EMITL(13);                                                     86004330
         EMITO(SSN);                                                    86004340
         EMITO(COM);                                                    86004350
         EMITO(DEL);                                                    86004360
         EMITO(EXCH);                                                   86004370
         EMITO(DEL);                                                    86004380
         EMITL(0);                                                      86004390
    END;                                                                86004395
         EMITO(CDC);         % GET READY TO MOVE TO THE RIGHT AREA      86004400
         IF (JUNK~AVAL).PSC } NM THEN       % IF NUMERIC TYPE           86004600
    BEGIN                                                               86004700
              INCONVERT(BOOLEAN(0&IF2[V1~JUNK.PSIX][46:16:1]),          86004800
                   JUNK.PSL,0);             % ABOVE FOR J-SIGN          86004900
              INPSUDOSTK ~ JUNK & DNV [TOPST] & 0 [TOPSOFS];            86005000
              VOIDMKS;                                                  86005100
              EXCHANGE;                                                 86005200
              MOV9(2,0,FALSE);              % MOVE TO PROPER PLACE      86005300
    END ELSE BEGIN                                                      86005400
              INPSUDOSTK ~ JUNK & DNN [TOPST] & 0 [TOPSOFS];            86005500
              MOVX(0,IF JUNK.PSC = EA THEN 2 ELSE 1);                   86005600
    END;                                                                86005700
         ADRSCALL(JUNKA);                                               86005800
         NAMECALL(PRTPTR);                                              86005900
         EMITL(14);          % UN-SAVE THE AREA                         86006000
         EMITO(COM);                                                    86006100
         EMITO(DEL);         % THROW AWAY DESC NOW                      86006200
         GO TO XIT;                                                     86006300
L1:                                                                     86006400
              % * * * * * CLOSE * * * * * * * * * * * * * * * * * *    186006500
         FILQ ~ V2;                                                     86006600
         PASSMAC;                                                       86006700
         EMITO(MKS);                                                    86006800
         EMITL(IF V2<17 THEN V2 ELSE 0);        % F-4: CLOSELOCK        86006900
         EMITL(V1);                             % F-3: REEL             86007000
         EMITL(2); NAMECALL(IF4[FILQ].FLLNK);   % F-2: FLOC             86007100
         EMITL(IF V2<17 THEN 4 ELSE IF V2=17 THEN 17 ELSE 64);% F-1:CODE86007200
         VALUCALL(COBOLFCR);                                            86007300
         GO TO XIT;                                                     86007400
L2:                                                                     86007500
              % * * * * * DISPLAY * * * * * * * * * * * * * * * * *    286007600
         L ~ 8;    % SET COUNT TO 8                                     86007700
         IF MRCLEAN THEN                                                86007800
    BEGIN                                                               86007900
         MRCLEAN ~ FALSE;                                               86008000
         CONSTANTCLEAN;                                                 86008100
    END;                                                                86008200
         MARKSTACK;                                                     86008300
         ADRSCALL(JUNKA);                                               86008400
         NAMECALL(PRTPTR);                                              86008500
         INPSUDOSTK ~ 0 & JKN [TOPST]& 179 [TOPSL]&AN [TOPSC];          86008600
         EMITL(14); % PSOFS STARTS AT ZERO                              86008700
         EMITO(COM);% CHANGE JUNKA TO SAVE                              86008800
         EMITO(LODD);                                                   86008900
         EMITL(1);                                                      86009000
         EMITO(CDC);    % MOVE OVER TO FIRST WORD.                      86009100
         DO                                                             86009200
    BEGIN                                                               86009300
         DO MACRO UNTIL MACN2 = XXXXM;                                  86009400
         IF V1 ! 0 THEN                                                 86009500
    BEGIN                                                               86009600
              TEMPREL ~ RELADDR;                                        86009700
              IF RIX > 0 THEN                                           86009800
    BEGIN                                                               86009900
              RELADDR ~ RIX;                                            86010000
              CHRMODE ~ TRUE;                                           86010100
              IF V1=15 THEN                                             86010200
    BEGIN                                                               86010300
                   EMITCHAR("~",1);                                     86010400
    END ELSE                                                            86010500
                   IF RIX~72-L > 0 THEN SMEAR(RIX," ");                 86010600
              EMITO(CMX);                                               86010700
    END ELSE                                                            86010800
              RELADDR ~ LASTMKS;                                        86010900
              MKSFF ~ FALSE;                                            86011000
              PSX ~ PSX-1;             % DELETE LAST JKN                86011100
              GO TO DISPLAYL;                                           86011200
    END;                                                                86011300
         IF (I~(IF (JUNK~AVAL.PSC)=EN OR JUNK=EA THEN IF1[AVAL.PSIX     86011400
               ].LGHF ELSE AVAL.PSL))+ L > 179 THEN                     86011500
    BEGIN                                                               86011600
              I ~  179 - L;                                             86011700
              IF I = 0 THEN ERR(112);                                   86011800
    END ;                                                               86011900
         IF JUNK = NM OR JUNK = COMP THEN                               86012000
    BEGIN                                                               86012100
         IF (RIX ~ ATYP)=INN THEN                                       86012200
    BEGIN                                                               86012300
              EMITO(LODD);                                              86012400
              OCCRSNO(IF1[(RIX~INXR[AVAL.PSIX].DNIX)]);                 86012500
              RIX ~ IF2[RIX];                                           86012600
    END ELSE                                                            86012700
              RIX ~ IF2[AVAL.PSIX];                                     86012800
         MKSFF ~ FALSE;                                                 86012900
         BVAL.PSL ~ AVAL.PSL;                                           86013000
         BVAL.PSS ~ AVAL.PSS;                                           86013100
         EXCHANGE;                                                      86013200
         IF (V2 ~ REAL(RIX.SGTF!0)+REAL(RIX.FSZF>0)) ! 0 THEN           86013300
    BEGIN                                                               86013400
              IF (V1 ~ V2 + BVAL.PSOFS) > 7 THEN                        86013500
    BEGIN                                                               86013600
                   EMITL(V1.WIX);                                       86013700
                   EMITO(EXCH);                                         86013800
                   EMITO(INX);                                          86013900
    END;                                                                86014000
              BVAL.PSOFS ~ V1;                                          86014100
    END;                                                                86014200
         MOV9(2,0,FALSE);                                               86014300
         PSX ~ PSX + 2;           % RESTORE PSUDO STACK                 86014400
         TEMPREL ~ RELADDR;                                             86014500
         IF LASTMKS < 0 THEN      % WE CALLED KENS INTRINSIC            86014600
    BEGIN                                                               86014700
         EMITL(0);                                                      86014800
         EMITO(MKS);                                                    86014900
         EMITL((LASTMKS ~ L + I).WIX);                                  86015000
         NAMECALL(JUNKA);                                               86015100
         EMITO(CMN);                                                    86015200
         IF LASTMKS.CIX ! 0 THEN EMITVAR(LASTMKS.CIX,SFD);              86015300
    END ELSE                                                            86015400
         RELADDR ~ LASTMKS;            % SET BY NUMOVE TO LAST CMX      86015500
         CHRMODE ~ TRUE;                                                86015600
         EMITCHAR("~",1);                                               86015700
         EMITVAR(I+1,SRD);             % BACK UP TO BEGINNING OF AREA   86015800
         IF V2 ! 0 THEN      % WE WILL INSERT SIGN AND DECIMAL-POINT    86015900
    BEGIN                                                               86016000
              EMITVAR(1,SDA);                                           86016100
              EMITVAR(1,RSA);                                           86016200
              EMITVAR(V2,SRD);                                          86016300
              EDITDEC(RIX);                                             86016400
    END ELSE                                                            86016500
              EMITVAR(I-1,TBN);        % JUST ZERO SUPPRESS             86016600
         RIX ~ -RELADDR;                                                86016700
         EMITO(CMX);         % EAT LAST MKS                             86016800
         EMITO(CMN);                                                    86016900
         I ~ I + V2;                   % ADD ON INSERT CHARS            86017000
    END ELSE BEGIN                                                      86017100
         IF ATYP=FGC THEN                                               86017200
    BEGIN                                                               86017300
         EMITL(IF (T~AVAL.PSIX)=LOWV OR T=SPACEV THEN " " ELSE          86017400
              IF T=HIGHV OR T=UPPERB THEN "9" ELSE IF T=ZEROV THEN "0"  86017500
              ELSE                                                      86017600
               IF T=QUOTE THEN """ ELSE IF T=ENDV THEN "~" ELSE 12);    86017700
         EMITO(EXCH);                                                   86017800
         EMITO(CMN);                                                    86017900
         IF I~L.CIX ! 0 THEN EMITVAR(I,SFD);                            86018000
         EMITVAR(1,SES);                                                86018100
         EMITVAR(1,SRS);                                                86018200
         EMITVAR(I~1,TRS);                                              86018300
    END ELSE                                                            86018400
    BEGIN                                                               86018500
         IF ATYP = NNL THEN GIVEMELITERAL(I~(IF (JUNK~LITSZ+NOLDNG      86018600
              +NOTRLNG)>I THEN I ELSE JUNK),FALSE) ELSE REALEXCH;       86018700
         NESTER(I,TRS);                                                 86018800
    END;                                                                86018900
         RIX ~ RELADDR;                                                 86019000
    END;                                                                86019100
         EMITO(CMX);                                                    86019200
         MARKSTACK;                                                     86019300
         PSX ~ PSX - 2;                                                 86019400
         EMITL((L~L+I).WIX);                                            86019500
         NAMECALL(JUNKA);                                               86019600
         INPSUDOSTK~ 0& JKN[TOPST]&(179-L)[TOPSL]&AN[TOPSC]&L[TOPSOFS]; 86019700
    END UNTIL FALSE;                                                    86019800
DISPLAYL:                                                               86019900
         IF V1=15 THEN  % SPO                                           86020000
    BEGIN                                                               86020100
              EMITL(0); NAMECALL(JUNKA);                                86020200
              EMITL(15);                                                86020300
              EMITO(COM);                                               86020400
              EMITO(DEL);                                               86020500
    END ELSE BEGIN                                                      86020600
              EMITL(1); NAMECALL(JUNKA);                                86020700
              EMITL(IF L>72 THEN 72 ELSE L);                            86020800
              EMITL(1); EMITL(0);                                       86020900
              EMITL(11);EMITO(SSN);                                     86021000
              EMITO(COM);                                               86021100
              EMITO(DEL);                                               86021200
              L ~ REAL(MRCLEAN);  MRCLEAN ~ FALSE;                      86021300
              EMITBRANCH(RELADDR,ARROUND1+2,BFC);%IF BREAK THEN         86021400
              EMITL(0); EMITO(COM);              %INVD EOJ              86021500
         MRCLEAN ~ BOOLEAN(L);                                          86021600
         EMITO(DEL);                                                    86021700
         EMITO(DEL);                                                    86021800
    END;                                                                86021900
         ADRSCALL(JUNKA);                                               86022000
         NAMECALL(PRTPTR);                                              86022100
         EMITL(14);     % CHANGE BACK TO OLAY                           86022200
         EMITO(COM);                                                    86022300
         EMITO(DEL);    % NOW FORGET-IT                                 86022400
         GO TO XIT;                                                     86022500
L3:                                                                     86022600
              % * * * * * OPEN* * * * * * * * * * * * * * * * * * *    386022700
         FILQ ~ V2;                                                     86022800
         IF (L ~ FIB[(RIX~IF0[FILQ].FIBF),21]) < 0 THEN                 86022900
    BEGIN                                                               86023000
         EMITO(MKS);                                                    86023100
         EMITL(5); NAMECALL(IF4[FILQ].FLLNK);         % TOP IOD POINTER 86023200
         IDSCAN(ABS(L));                         % PUTS MFID,FID ON STK 86023300
         EMITL(1); EMITO(SSN);                                          86023400
         EMITO(DUP); EMITO(DUP); EMITO(DUP);                            86023500
         EMITL(11);                                                     86023600
         VALUCALL(ARRYDECINT);                                          86023700
    END;                                                                86023800
         IF FIB[RIX,1]<0 OR B ~ (FIB[RIX,3]<0) THEN                     86023900
    BEGIN          % RUN TIME SETTING OF PAGE LIMIT OR FILE LIMITS      86024000
    M2:  BINARYV(ABS(FIB[RIX,1+2|REAL(B)]),2);                          86024100
         EMITL(2); NAMECALL(IF4[FILQ].FLLNK); EMITO(LODD);% GET FIB PTR 86024200
         EMITL(1+2|REAL(B)); EMITO(CDC);         % POINT TO FIB1 OR FIB386024300
         EMITO(STD);                                                    86024400
         IF B THEN                                                      86024500
    BEGIN                                                               86024600
         B ~ FALSE;                                                     86024700
         IF FIB[RIX,1]<0 THEN GO TO M2;                                 86024800
    END;                                                                86024900
    END;                                                                86025000
         IF BOOLEAN(IF2[FILQ].PGF) THEN                                 86025100
    BEGIN          % SET LINAGE-COUNTER (PRT GIVEN BY FIB3) TO 0        86025200
         EMITL(0);                                                      86025300
         EMITPAIR(FIB[RIX,3],STD);                                      86025400
    END;                                                                86025500
         PASSMAC;                                                       86025600
         SV1 ~ V1;                                                      86025700
         EMITO(MKS);                                                    86025800
         IF BOOLEAN(V2) THEN DO MACRO UNTIL MACN2=XXXXM;  % F-3: REEL NO86025900
         EMITL(2); NAMECALL(IF4[FILQ].FLLNK);             % F-2: FLOC   86026000
         EMITL(L ~ REAL(SV1{3) + REAL(SV1=2) +3|REAL(SV1}4)             86026100
               + 2|REAL(SV1}8) + 13|REAL(SV1=7));         % F-1: CODE   86026200
         VALUCALL(COBOLFCR);                                            86026300
         IF L=1 THEN         % OPEN INPUT                               86026310
              IF BOOLEAN(IF2[L~IF4[FILQ].RCLNK].VARF) THEN              86026320
                   IF IF3[T1~(T~IF3[L]).SZDF].BADDF=T.BADDF THEN        86026330
                   FIB[RIX,18].MINRS ~((T1~IF1[T1]).OFSF+T1.LGHF+7).WIX;86026340
         GO TO XIT;                                                     86026400
L4:                                                                     86026500
              % * * * * * READ * * * * * * * * * * * * * * * * * *     486026600
    RD:                                                                 86026700
         EMITO(MKS);                                                    86026800
         IF FIB[FILQ ~ IF0[V2].FIBF,5].BLKF=3 THEN                      86026805
    BEGIN                              % TECH-C                         86026810
         IF (L~IF5[V2].ACCDF)=0 THEN                                    86026812
    BEGIN                              % BUILD ACCIDENTAL ENTRY         86026813
         SV1 ~ RELADDR; EMITBFW;       % BRANCH AROUND ACCIDENTAL ENTRY 86026815
         ADJUST;                                                        86026820
         IF5[V2].ACCDF ~ W ~ L ~ BUILDSEGDICT(0,SEGNO);                 86026822
         PRT[IX].[4:2] ~ 0;            % SIGNIFIES ACCIDENTAL ENTRY     86026823
         IF BOOLEAN(IF2[RIX ~ IF4[V2].RCLNK].VARF) THEN                 86026825
              JUNK ~ RFLENGTH(RIX) ELSE GETSIZE(RIX);                   86026830
         EMITL(7); EMITO(ADD);                                          86026835
         EMITL(8); EMITO(IDIV);                                         86026840
         EMITO(RTS);                                                    86026845
         EMITBRANCH(SV1,RELADDR,BFW);                                   86026850
    END;                                                                86026865
         EMITPAIR(L,LODD);             % F-3 : ACCIDENTAL ENTRY DESC    86026870
         NAMECALL(-512);               % (R+7)+0: DESC POINTING TO RCW  86026875
         EMITO(CTF);                                                    86026880
    END ELSE                                                            86026885
         EMITNUM((IF1[IF4[V2].RCLNK].LGHF+7) DIV 8);    % F-3: NUM WORDS86026900
         EMITL(5); NAMECALL(IF4[V2].FLLNK);             % F-2: DLOC     86027000
         EMITL(0);                                      % F-1: SAYS READ86027100
         VALUCALL(IF FIB[FILQ,4].FILTYF=DK THEN COBOLRANDM              86027200
              ELSE COBOLIO);                                            86027300
         IF V1=5 THEN                                                   86027400
    BEGIN          % READ INTO OPTION: NAMDM ALREADY PUT DEST ON STACK  86027500
         EMITPAIR(PRTJUNK,STD);                                         86027550
         EMITL(0); NAMECALL(IF3[V2].BADDF);     % RECORD = SOURCE       86027600
         PS[PSX~PSX+1] ~ (RIX~IF4[V2].RCLNK) & (T~IF2[RIX]) SZFPSL      86027700
                     & T.USF [TOPSS] & DNN [TOPST] & T.CLF [TOPSC];     86027800
         IF DEBUGTOG THEN MNTRPSS;                                      86027900
         MOVX(0,1);                                                     86028000
         VALUCALL(PRTJUNK);                                             86028050
    END;                                                                86028100
         GO TO XIT;                                                     86028200
L5:                                                                     86028300
         GO TO RD;  % * * READ INTO  * * * * * * * * * * * * * * *     586028400
L6:                                                                     86028500
              % * * * * * SEEK* * * * * * * * * * * * * * * * * * *    686028600
         EMITO(MKS);                                                    86028700
         EMITNUM((IF1[IF4[V2].RCLNK].LGHF+7) DIV 8);    % F-3: NUM WORDS86028800
         EMITL(5);                             % PLACE FOR RECORD DESC  86028900
         NAMECALL(IF4[V2].FLLNK);                % TANK POINTER         86029000
         EMITL(2);                               % CODE: SEEK           86029100
         VALUCALL(COBOLIO);                                             86029200
         GO TO XIT;                                                     86029300
L7:                                                                     86029400
              % * * * * * SUSPEND * * * * * * * * * * * * * * * * *    786029500
    SUS:                                                                86029600
         ERR(113);                                                      86029700
         ERR(276);                                                      86029800
         GO TO XIT;                                                     86029900
L8:                                                                     86030000
         GO TO SUS; % * * SUSPEND (>1)* * * * * * * * * * * * * * *    886030100
L9:                                                                     86030200
              % * * * * * WRITE * * * * * * * * * * * * * * * * * *    986030300
    RIT:                                                                86030400
         FILQ ~ V2.[33:15];                                             86030500
         OPT ~ V1;           % 9,10(=XXXXM FOLLOWS),OR 11(WRITE BLOCK)  86030600
         IF BOOLEAN(V2.[32:1]) THEN    % WRITE FROM OPTION              86030700
    BEGIN               % NAMDM ALREADY PUT ADDRESS ON STACK: SOURCE    86030800
         EMITL(0); NAMECALL(IF3[FILQ].BADDF);  % RECORD = DEST          86030900
         PS[PSX~PSX+1] ~(RIX~IF4[FILQ].RCLNK) &(T~IF2[RIX]) SZFPSL      86031000
                     & T.USF [TOPSS] & DNN [TOPST] & T.CLF [TOPSC];     86031100
         BVAL.PSL ~ IF1[BVAL.PSIX].LGHF;                                86031200
         IF DEBUGTOG THEN MNTRPSS;                                      86031300
         MOVX(3,1);                    % EXCHANGE AND MOVE              86031400
    END;                                                                86031500
         EMITO(MKS);                                                    86031600
         IF BOOLEAN(IF2[FILQ].PGF) THEN                                 86031700
    BEGIN                                        % F-7                  86031800
         IF (T~IF2[FILQ].PGLMF)>0 THEN BINARYV(T,2)                     86031900
              ELSE EMITNUM(FIB[IF4[FILQ].FLLNK,1]);                     86032000
         EMITO(SSN);                                                    86032100
    END;                                                                86032200
         L ~ REAL(MRCLEAN); MRCLEAN ~ FALSE;                            86032250
         EMITL(0);                               % F-6                  86032300
         IF OPT=10 THEN                          % XXXXM FOLLOWS        86032400
    BEGIN                                        % CARR, EOP, OR INV KEY86032500
         DO MACRO UNTIL MACN2=XXXXM;   % F-5: MAY PUT LINE SKP ON STACK 86032600
         SV1 ~ V1; SV2 ~ V2;                                            86032700
         IF SV1=2 THEN                                                  86032800
    BEGIN                                        % CARRIAGE CONTROL OPTN86032900
         PASSMAC;                                                       86033000
         IF V1=1 THEN EMITL(0); % F-5: CHANNEL SKIP-SO NO LINE SKIP     86033100
         IF SV2}2 THEN BEGIN TEMPREL ~ RELADDR; RELADDR ~ RELADDR-4;    86033200
              EMITL(1); RELADDR ~ TEMPREL; END; % F-6: PRINT AFTER SPACE86033300
         IF V1=1 THEN EMITNUM(V2) ELSE EMITL(0);% F-4: CHANNEL SKIP     86033400
    END ELSE BEGIN EMITL(1); EMITL(0); END;     % F-5, F-4              86033500
    END ELSE BEGIN EMITL(1); EMITL(0); END;     % F-5,F-4               86033600
         MRCLEAN ~ BOOLEAN(L) OR MRCLEAN;                               86033650
         IF FIB[IF0[FILQ].FIBF,5].BLKF!3 THEN                           86033700
         EMITNUM((IF1[IF4[FILQ].RCLNK].LGHF+7) DIV 8) ELSE% F-3:NUM WDS 86033800
    BEGIN                                                               86033900
         IF RFLENGTH(RIX ~ IF4[FILQ].RCLNK)=0 THEN ELSE                 86033940
              GETSIZE(RIX);                                             86033950
         EMITL(7); EMITO(ADD);                                          86034000
         EMITL(8); EMITO(IDIV);                                         86034100
    END;                                                                86034200
         EMITL(5); NAMECALL(IF4[FILQ].FLLNK);   % F-2                   86034300
         EMITL(1+5|REAL(OPT=11));               % F-1: WRITE=1 WRTBLK=6 86034400
         VALUCALL(IF FIB[IF0[FILQ].FIBF,4].FILTYF=DK THEN COBOLRANDM    86034500
              ELSE COBOLIO);                                            86034600
         IF NOT BOOLEAN(SV2) THEN EMITO(DEL); % DELETE BOOLEAN:         86034700
%             COBOLIO ALWAYS RETURNS BOOLEAN: DELETE IF NOT NEEDED      86034800
         GO TO XIT;                                                     86034900
L10:                                                                    86035000
         GO TO RIT;  % * WRITE WITH OPTION* * * * * * * * * * * * *   1086035100
L11:                                                                    86035200
         GO TO RIT;  % * WRITE BLOCK* * * * * * * * * * * * * * * *   1186035300
XIT: ;                                                                  86035400
    END INOUT;                                                          86035500
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%86035600
%                                                                      %86035700
%                            DIAGNOSTICS                               %86035800
%                                                                      %86035900
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%86036000
PROCEDURE MONITORWRITE;                                                 86036100
BEGIN    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%86036200
         %         DOES MONITOR I-O                                    %86036300
         %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%86036400
         EMITO(MKS);                                                    86036500
         EMITL(0);                                                      86036600
         EMITL(0);                                                      86036700
         EMITL(1);                                                      86036800
         EMITL(0);                                                      86036900
         EMITL(15);                                                     86037000
         EMITL(5);                                                      86037100
         NAMECALL(FIB[MONIFIL,6].TANKF);                                86037200
         EMITL(1);                                                      86037300
         VALUCALL(COBOLIO);                                             86037400
         EMITO(DEL);         % REMOVE VALUE RETURNED BY COBOLIO         86037500
END MONITORWRITE;                                                       86037600
REAL PROCEDURE GETSUBS(INDEX,PRSP);                                     86037700
         VALUE INDEX,PRSP; REAL INDEX,PRSP;                             86037800
BEGIN    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%86037900
         %    GETSUBS FORMATS SUBSCRIPTS OF MONITORED IDENTIFIERS      %86038000
         %         FOR PRINTING                                        %86038100
         %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%86038200
         REAL MAXSUBS,START;                                            86038300
         LABEL XIT;                                                     86038400
PROCEDURE SUBVALUS(CURSUB,I);     % GET SUBSCRIPT VALUES ON STACK       86038500
         VALUE CURSUB,I;                                                86038600
         REAL CURSUB,I;                                                 86038700
    BEGIN                                                               86038800
         IF CURSUB>1 THEN SUBVALUS(CURSUB-1,I-IFSZ|IF4[I].OCLF);        86038900
         EMITNUM(CURSUB);                                               86039000
         VALUCALL(JUNKM);                                               86039100
    END SUBVALUS;                                                       86039200
PROCEDURE SUBOCV(CURSUB,I,MAXSUBS,PRSP);  % CONVERT SUBCRIPT VALUES     86039300
         VALUE CURSUB,I,MAXSUBS;          % ONTO PRINT LINE             86039400
         REAL CURSUB,I,MAXSUBS,PRSP;                                    86039500
    BEGIN                                                               86039600
         LABEL XIT; BOOLEAN B;                                          86039700
         IF CURSUB>1 THEN SUBOCV(CURSUB-1,I-IFSZ|IF4[I].OCLF,           86039800
              MAXSUBS,PRSP);                                            86039900
         IF PRSP ~ PRSP-(T~ (1+REAL((T1~IF1[I].OCCF)}10) + REAL(T1}100) 86040000
              + REAL(T1}1000) + REAL(T1}10000)))- 1 < 0 THEN            86040100
    BEGIN                                       % NO ROOM LEFT ON LINE  86040200
         PRSP ~ 0;                                                      86040300
         GO TO XIT;                                                     86040400
    END;                                                                86040500
         IF CURSUB=1 THEN EMITVAR(MAXSUBS+1,SES);                       86040600
         EMITVAR(T,OCV);                                                86040700
         IF B ~ CURSUB < MAXSUBS THEN EMITCHAR(",",1);                  86040800
         IF T>1 THEN                                                    86040900
    BEGIN                                                               86041000
         EMITVAR(1,SDA);                                                86041100
         EMITVAR(T+REAL(B),SRD);                                        86041200
         EMITVAR(T-1,TBN);                                              86041300
         EMITVAR(1,RDA);                                                86041400
    END;                                                                86041500
    XIT:                                                                86041600
    END SUBOCV;                                                         86041700
         EMITO(MKS);                                                    86041800
         SUBVALUS(MAXSUBS ~ IF2[INDEX].SUBF,START ~ IF IF1[INDEX].OCCF=086041900
              THEN INDEX-IFSZ|IF4[INDEX].OCLF ELSE INDEX);              86042000
         EMITNUM((T~120-PRSP).WIX);                                     86042100
         NAMECALL(IF3[DRCT[FIB[GLOBARRAY1[20],6].DLNKF].NXIF].BADDF);   86042200
%%%% NOTE: GLOBARRAY1[20] = MONIFIL..(PROBLEM WITH NESTED DEFINES)      86042300
         EMITO(CMN);                                                    86042400
         IF T ~ T.CIX!0 THEN EMITVAR(T,SFD);                            86042500
         EMITCHAR("(",1);                                               86042600
         PRSP ~ PRSP - 1;                                               86042700
         SUBOCV(MAXSUBS,START,MAXSUBS,PRSP);                            86042800
         IF PRSP=0 THEN GO TO XIT;                                      86042900
         EMITCHAR(")",1);                                               86043000
    XIT: EMITO(CMX);                                                    86043100
         GETSUBS ~ PRSP;                                                86043200
    END GETSUBS;                                                        86043300
PROCEDURE SETUPMONITOR;                                                 86043400
BEGIN    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%86043500
         %    SETS UP MONITOR PRINT LINE                               %86043600
         %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%86043700
    DEFINE INEQ = BEGIN LITPTR(TMP[0],0," = ",3); EMITPROGCHR(TMP,3);   86043800
              PRINTSPACE ~ PRINTSPACE-3; END#;                          86043900
         BOOLEAN INDXNM,LBL,DP,CMPU,SUBSC;                              86044000
         LABEL XIT,XITA;                                                86044100
    REAL      SZ,T,INDEX,PRINTSPACE,WRD2,I,DCTP;                        86044200
PROCEDURE RENTERCM(PRINTSPACE,INDEX);                                   86044300
         VALUE PRINTSPACE,INDEX;                                        86044400
         REAL PRINTSPACE,INDEX;                                         86044500
    BEGIN                                                               86044600
         REAL T;                                                        86044700
         NAME(INDEX,0);      % GETS INDEXED BY SUBSCRIPT WORD VALUE     86044800
         EMITNUM((T~120-PRINTSPACE).WIX);                               86044900
         NAMECALL(IF3[DRCT[FIB[GLOBARRAY1[20],6].DLNKF].NXIF].BADDF);   86045000
         EMITO(CMN);                                                    86045100
         IF T ~ T.CIX!0 THEN EMITVAR(T,SFD);                            86045200
         EMITVAR(2,RSA);                                                86045300
         EMITVAR(3,CRF);     % SUBSCRIPT CHARACTER VALUE                86045400
         EMITO(SFS);                                                    86045500
    END RENTERCM;                                                       86045600
         INDEX ~ JNKMON.PSIX;                                           86045700
         PRINTSPACE ~ 120;                                              86045800
         IF NOT (LBL ~ JNKMON.PST=PRN) THEN EMITO(MKS);                 86045900
         IF INDXNM ~ JNKMON.PST=INN THEN                                86046000
    BEGIN                                                               86046100
         VALUCALL(INXR[INDEX].IXBASE);                                  86046200
         OCCRSNO(IF1[INXR[INDEX].DNIX]);                                86046300
    END ELSE IF NOT LBL THEN WRD2 ~ IF2[INDEX];                         86046400
         IF BOOLEAN(WRD2.VARF) THEN                                     86046500
    BEGIN                                                               86046600
         JUNK ~ RFLENGTH(INDEX);                                        86046700
         IF WRD2.SZF>63 THEN                                            86046800
    BEGIN                                                               86046900
         EMITO(DUP);                                                    86047000
         EMITL(63);                                                     86047100
         EMITO(SUBT);                                                   86047200
         EMITL(0);                                                      86047300
         EMITO(GRTR);                                                   86047400
         I ~ RELADDR; EMITF;                                            86047500
         EMITL(63);                                                     86047600
         T ~ RELADDR;   EMITBFW;                                        86047700
         EMITBRANCH(I,RELADDR,BFC);                                     86047800
         EMITO(DEL);                                                    86047900
         EMITL(0); EMITO(EXCH);                                         86048000
         EMITBRANCH(T,RELADDR,BFW);                                     86048100
    END;                                                                86048200
    END;                                                                86048300
         IF NOT INDXNM THEN IF NOT ((CMPU~WRD2.USF{CMP1)                86048400
              OR (SUBSC~WRD2.SUBF!0)) THEN NAME(INDEX,0);               86048500
         EMITPAIR(I ~ IF3[DRCT[FIB[GLOBARRAY1[20],6].DLNKF].NXIF].BADDF,86048600
              LODD);                                                    86048700
         SZ ~ DRCT[DCTP ~ (IF INDXNM THEN INXR[INDEX].DCTIX+1           86048800
              ELSE IF5[INDEX].DLNKF+1)].[1:11];                         86048900
                   % SZ = LENGTH OF IDENTIFIER                          86049000
         EMITO(CMN);                                                    86049100
         EMITVAR(1,RDA);     % RESET DI TO BEGINNING OF JUNKA           86049200
         PUSHOVER(TMP[0],0,DRCT[DCTP],2,SZ);                            86049300
         IF NOT SUBSC THEN LITPTR(TMP[SZ.WIX],SZ.CIX," = ",3);          86049400
         EMITPROGCHR(TMP,SZ ~ SZ+3-3|REAL(SUBSC));                      86049500
         PRINTSPACE ~ PRINTSPACE-SZ;                                    86049600
         PSX ~ PSX+2; BVAL ~ 0&SZ [TOPSOFS];     % TO FAKE OUT SMEAR    86049700
         SMEAR(PRINTSPACE," ");                                         86049800
         PSX ~ PSX-2;                            % RESTORE PSEUDO-STK   86049900
         IF SUBSC THEN                                                  86050000
    BEGIN                                                               86050100
         EMITO(CMX);                                                    86050200
         PRINTSPACE ~ GETSUBS(INDEX,PRINTSPACE);                        86050300
         EMITO(MKS);                                                    86050400
         VALUCALL(JUNKMON2);     % SUBSCRIPT OFFSET VALUE IN CHARACTERS;86050500
         IF NOT BOOLEAN(WRD2.WRDOF) THEN                                86050600
    BEGIN                                                               86050700
         EMITO(DUP);                                                    86050800
         EMITISO(45,3);                                                 86050900
         EMITO(EXCH);                                                   86051000
         PSX ~ PSX+1;                                                   86051100
         ONSTACK ~ 1;                                                   86051200
    END;                                                                86051300
         EMITL(8);                                                      86051400
         EMITO(IDIV);                                                   86051500
         MNTRINDX ~ 0;                                                  86051600
    END ELSE EMITVAR(1,RDA);                                            86051700
         IF LBL OR INDXNM THEN                                          86051800
    BEGIN     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% LABEL OR INDEXNM86051900
         EMITVAR(2,SES);     % LOC OF COUNTER (LABEL) OR OCCURS NUMBER  86052000
         EMITVAR(8,OCV);                                                86052100
         EMITVAR(8,SRD);                                                86052200
         EMITVAR(7,TBN);                                                86052300
         EMITO(CMX);                                                    86052400
         MONITORWRITE;                                                  86052500
         GO TO XITA;                                                    86052600
    END ELSE                                                            86052700
         IF CMPU THEN                                                   86052800
    BEGIN     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% NUMERIC COMP    86052900
         IF NOT SUBSC THEN EMITO(CMX);                                  86053000
         IF PRINTSPACE<WRD2.SZF+5 THEN WRD2.SZF ~ PRINTSPACE-5;         86053100
         IF WRD2.SZF{0 THEN GO TO XIT;                                  86053200
         IF SUBSC THEN PSX ~ PSX+1;                                     86053300
         IF NOT SUBSC THEN EMITO(MKS);                                  86053400
         BINARYV(INDEX,2);                                              86053500
         PSX ~ PSX-1;                                                   86053600
         EMITNUM((T1 ~ 120-PRINTSPACE).WIX);                            86053700
         NAMECALL(I);                                                   86053800
         IF DP ~ (WRD2.SGTF=0 AND WRD2.FSZF=0) THEN ELSE                86053900
              EMITPAIR(JUNKM,LODD);    % TEMPORARY DESTINATION          86054000
         EMITO(CMN);                                                    86054100
         EMITVAR(3-REAL(DP),SES);                                       86054200
         IF DP THEN BEGIN IF T1 ~ T1.CIX!0 THEN EMITVAR(T1,SFD);        86054300
              IF SUBSC THEN INEQ; END;                                  86054400
         EMITVAR(8,OCV);                                                86054500
         IF NOT DP THEN                                                 86054600
    BEGIN                                                               86054700
         EMITVAR(1,RSA);               % JUNKM                          86054800
         EMITVAR(8-WRD2.SZF,SFS);                                       86054900
         EMITVAR(2,RDA);               % JUNKA                          86055000
         IF T1 ~ T1.CIX!0 THEN EMITVAR(T1,SFD);                         86055100
         IF SUBSC THEN INEQ;                                            86055200
         EDITDEC(WRD2);                                                 86055300
    END ELSE BEGIN EMITVAR(8,SRD); EMITVAR(7,TBN); END;                 86055400
         EMITO(CMX);                                                    86055500
         MONITORWRITE;                                                  86055600
         GO TO XITA;                                                    86055700
    END ELSE                                                            86055800
         IF WRD2.USF=5 AND WRD2.CLF=NM THEN                             86055900
    BEGIN     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% NUMERIC DISPLAY  86056000
         IF PRINTSPACE<WRD2.SZF+5 THEN WRD2.SZF ~ PRINTSPACE-5;         86056100
         IF WRD2.SZF{0 THEN GO TO XIT;                                  86056200
         IF SUBSC THEN RENTERCM(PRINTSPACE,INDEX) ELSE                  86056300
    BEGIN                                                               86056400
         EMITVAR(2,RSA);                                                86056500
         IF T ~ AVAL.PSOFS!0 THEN EMITVAR(T,SFS);                       86056600
    END;                                                                86056700
         IF SUBSC THEN INEQ;                                            86056800
         EDITDEC(WRD2);                                                 86056900
         EMITO(CMX);                                                    86057000
         MONITORWRITE;                                                  86057100
         PSX ~ PSX-1;                                                   86057200
    END ELSE                                                            86057300
    BEGIN     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% EN,EA,AN,AB     86057400
         IF PRINTSPACE<(SZ ~ IF (T~WRD2.CLF)=EN OR T=EA THEN            86057500
              IF1[INDEX].LGHF ELSE WRD2.SZF)+3 THEN SZ ~ PRINTSPACE-3;  86057600
         IF SZ{0 THEN BEGIN WRD2.SZF ~ SZ; GO TO XIT; END;              86057700
         IF SUBSC THEN RENTERCM(PRINTSPACE,INDEX) ELSE                  86057800
    BEGIN                                                               86057900
         EMITVAR(2,RSA);                                                86058000
         IF T ~ AVAL.PSOFS!0 THEN EMITVAR(T,SFS);                       86058100
    END;                                                                86058200
         IF SUBSC THEN INEQ;                                            86058300
         IF BOOLEAN(WRD2.VARF) THEN                                     86058400
    BEGIN                                                               86058500
         IF SZ>63 THEN                                                  86058600
    BEGIN                                                               86058700
         EMITVAR(4,CRF);                                                86058800
         EMITO(TRS);                                                    86058900
    END;                                                                86059000
         EMITVAR(3,CRF);                                                86059100
         EMITO(TRS);                                                    86059200
    END ELSE NESTER(SZ,TRS);                                            86059300
         EMITO(CMX);                                                    86059400
         MONITORWRITE;                                                  86059500
         PSX ~ PSX-1;                                                   86059600
    END;                                                                86059700
    XIT:                                                                86059800
         IF WRD2.SZF{0 THEN                                             86059900
    BEGIN                                                               86060000
         IF NOT CMPU THEN                                               86060100
    BEGIN                                                               86060200
         EMITO(CMX);                                                    86060300
         PSX ~ PSX-1;                                                   86060400
    END;                                                                86060500
         MONITORWRITE;                                                  86060600
    END;                                                                86060700
    XITA:                                                               86060800
         MNTRNGS ~ FALSE;                                               86060900
    END SETUPMONITOR;                                                   86061000
PROCEDURE DUMP2;                                                        86061100
    BEGIN                                                               86061200
         REAL SMONIFIL,PRT,IFX,SVSEGNO;                                 86061300
         LABEL XIT;                                                     86061400
         PRT ~ GETPRTLOC;                                               86061500
         SMONIFIL ~ MONIFIL;                                            86061600
         MONIFIL ~ V1;                                                  86061700
         SVSEGNO ~ SEGNO;                                               86061800
         RELADDR ~ 0;                                                   86061900
         SEGSTART;                                                      86062000
         T1 ~ BUILDSEGDICT(PRT,SEGNO);                                  86062100
         WHILE MACN2!XXXXM DO                                           86062200
    BEGIN                                                               86062300
         PASSMAC;                                                       86062400
         IF MACN2=CHKLM AND NOT BOOLEAN(V1.[32:1]) THEN                 86062500
         IF NOT LBCHK(V1,V2,IFX) THEN BEGIN ERPNT ~ -V1; ERR(159); END  86062600
    ELSE                                                                86062700
    BEGIN                                                               86062800
         JNKMON ~ 0&PRN [TOPST]&IFX [TOPSIX];                           86062900
         IF IF2[IFX].NCNTF=0 THEN IF2[IFX].NCNTF ~ GETPRTLOC;           86063000
         EMITO(MKS);                                                    86063100
         VALUCALL(IF2[IFX].NCNTF);                                      86063200
    END                                                                 86063300
         ELSE                                                           86063400
         IF MACN2=DUMPM THEN                                            86063500
         IF V2=1 THEN                                                   86063600
         JNKMON ~ V1&(T~IF2[V1]) SZFPSL&(IF T.CLF}NM THEN T.FSZF        86063700
              ELSE T.USF) [TOPSS]&T DPLFPSDP&DNN [TOPST]&IF1[V1]        86063800
              [TOPSOFS] & (IF T.USF!BCL THEN COMP ELSE T.CLF) [TOPSC]   86063900
         ELSE JNKMON ~ 0&INN [TOPST]&V1 [TOPSIX]                        86064000
         ELSE IF MACN2=CHKLM AND BOOLEAN(V1.[32:1]) THEN                86064100
    BEGIN                                                               86064200
         V1 ~ V1.[33:15];                                               86064300
         IF NOT LBCHK(V1,V2,IFX) THEN BEGIN ERPNT ~ -V1; ERR(159);      86064400
              END ELSE                                                  86064500
    BEGIN                                                               86064600
         PASSMAC;                                                       86064700
         IF5[IFX]~ IF5[IFX]&V2 DNPFF&PRT DUMPFF&V1 DMAXFF;              86064800
         IF2[IFX].DMPF ~ 1;                                             86064900
    END;                                                                86065000
         GO TO XIT;                                                     86065100
    END ELSE GO TO XIT;                                                 86065200
         SETUPMONITOR;                                                  86065300
         IF RELADDR>MXSEGSZ THEN                                        86065400
    BEGIN                                                               86065500
         VALUCALL(T1 ~ GETPRTLOC);                                      86065600
         EMITO(BFW);                                                    86065700
         SEGEND(RELADDR);                                               86065800
         SEGSTART;                                                      86065900
         T1 ~ BUILDSEGDICT(T1,SEGNO);                                   86066000
    END;                                                                86066100
    END;                                                                86066200
    XIT:                                                                86066300
         EMITO(EXIT);                                                   86066400
         SEGEND(RELADDR);                                               86066500
         SEGNO ~ SVSEGNO;                                               86066600
         RELADDR ~ 0;                                                   86066700
         MONIFIL ~ SMONIFIL;                                            86066800
    END DUMP2;                                                          86066900
PROCEDURE LABELCTR(IX,DMPC);                                            86067000
         VALUE IX,DMPC;                                                 86067100
         REAL IX; BOOLEAN DMPC;                                         86067200
    BEGIN                                                               86067300
         LABEL L;                                                       86067400
         IF DMPC AND BOOLEAN(IF0[IX].MONI) THEN GO TO L;                86067500
         IF NOT DMPC THEN EMITO(MKS);                                   86067600
         VALUCALL(T ~ IF2[IX].NCNTF);                                   86067700
         EMITL(1);                                                      86067800
         EMITO(ADD);                                                    86067900
         NAMECALL(T);                                                   86068000
         EMITO(SND);                                                    86068100
         IF DMPC THEN                                                   86068200
    BEGIN                                                               86068300
    L:                                                                  86068400
         IF IF5[IX]<0 THEN BEGIN BINARYV(IF5[IX].DMAXF,2); PSX~PSX-1;END86068500
              ELSE EMITNUM(IF5[IX].DMAXF);                              86068600
         EMITO(RDIV);                                                   86068700
         EMITL(1);                                                      86068800
         EMITO(LESS);                                                   86068900
         DMPC ~ MRCLEAN;     MRCLEAN ~ FALSE;                           86069000
         EMITBRANCH(RELADDR,RELADDR+8,BFC);                             86069100
         EMITO(MKS);                                                    86069200
         VALUCALL(IF5[IX].DUMPF);                                       86069300
         MRCLEAN ~ DMPC;                                                86069400
    END;                                                                86069500
    END LABELCTR;                                                       86069600
PROCEDURE RPTMP(RMX,EVNT);                                              87000000
         VALUE RMX,EVNT;  REAL RMX,EVNT;                                87000100
    BEGIN                                                               87000200
         ERR(276);                                                      87000300
    END RPTMP;                                                          87000400
PROCEDURE RINTP(RMX,EVNT);                                              87000500
         VALUE RMX,EVNT;  REAL RMX,EVNT;                                87000600
    BEGIN                                                               87000700
         ERR(276);                                                      87000800
    END RINTP;                                                          87000900
PROCEDURE RGENP(RMX,EVNT);                                              87001000
         VALUE RMX,EVNT;  REAL RMX,EVNT;                                87001100
    BEGIN                                                               87001200
         ERR(276);                                                      87001300
    END RGENP;                                                          87001400
PROCEDURE RTRMP(RMX,EVNT);                                              87001500
         VALUE RMX,EVNT;  REAL RMX,EVNT;                                87001600
    BEGIN                                                               87001700
         ERR(276);                                                      87001800
    END RPRMP;                                                          87001900
PROCEDURE RSUMP(RMX,EVNT);                                              87002000
         VALUE RMX,EVNT;  REAL RMX,EVNT;                                87002100
    BEGIN                                                               87002200
         ERR(276);                                                      87002300
    END RSUMP;                                                          87002400
PROCEDURE RPFMP(RMX,EVNT);                                              87002500
         VALUE RMX,EVNT;  REAL RMX,EVNT;                                87002600
    BEGIN                                                               87002700
         ERR(276);                                                      87002800
    END RPFMP;                                                          87002900
PROCEDURE XREFOUT;                                                      87300100
    BEGIN                                                               87300200
         DEFINE LXDICT = PS#;                                           87300300
         REAL TE,TP;                                                    87300400
BOOLEAN PROCEDURE INP(A);   ARRAY A[0];                                 87300600
    BEGIN                                                               87300700
         LABEL EOF,XIT;                                                 87300800
         DEFINE B = XARRAY#;                                            87300900
         REAL Q,R,S;                                                    87301000
         READ(DSK,2,B[*])[EOF];                                         87301100
         Q ~ DICT[R~B[0].IR,S ~ B[0].IC].SIZEF;                         87301200
         PUSHOVER(A[0],0,DICT[R,S],2,Q);                                87301300
         FILLWITHCHR(A[0],Q  ," ",32-Q);                                87301400
         A[4] ~ B[1];                                                   87301500
         GO TO XIT;                                                     87301600
EOF:     INP ~ TRUE;                                                    87301700
         CLOSE(DSK);                                                    87301800
XIT:                                                                    87301900
    END INP;                                                            87302000
BOOLEAN STREAM PROCEDURE XCMP(D,S);                                     87302010
    BEGIN                                                               87302020
         SI ~ S; DI ~ D;                                                87302030
         IF 32 SC = DC THEN TALLY ~ 1;                                  87302050
         XCMP ~ TALLY;                                                  87302060
    END XCMP;                                                           87302090
PROCEDURE OPPROC(EOFSORT,BK);VALUE EOFSORT;BOOLEAN EOFSORT;ARRAY BK[0]; 87302100
    BEGIN                                                               87302200
         DEFINE N = T1#;                                                87302250
    LABEL XIT,LE,ENTR;                                                  87302300
         IF EOFSORT THEN GO TO LE;                                      87302400
         IF NOT XCMP(BK[0],LXDICT[0]) THEN                              87302500
    BEGIN                                                               87302600
         IF NOT FIRST1 THEN                                             87302700
    BEGIN                                                               87302720
         WRITE(LINE,15,TMP[*]);                                         87302760
         WRITE(LINE[DBL]);                                              87302770
    END  ELSE FIRST1 ~ FALSE;                                           87302780
         PUSHOVER(LXDICT[0],0,BK[0],0,32);                              87302800
         PUSHOVER(TMP[0],0,BK[0],0,32);                                 87302900
ENTR:    PUSHOVER(TMP[4],1,BK[4],2,6);                                  87303000
         FILLWITHCHR(TMP[4],7," ",57);                                  87303100
         FILLWITHCHR(TMP[12],0," ",24);                                 87303150
         N ~ 1;                                                         87303200
         GO TO XIT;                                                     87303300
    END;                                                                87303400
         IF (N ~ N+1) } 12 THEN                                         87303500
    BEGIN                                                               87303600
         WRITE (LINE,15,TMP[*]);                                        87303700
         FILLWITHCHR(TMP[0],0," ",32);                                  87303800
         GO TO ENTR;                                                    87303900
    END;                                                                87304000
         FILLWITHCHR(TMP[T~3+((N|8) DIV 8)],0," ",1);                   87304100
         PUSHOVER(TMP[T],1,BK[4],2,6);                                  87304200
         FILLWITHCHR(TMP[T],7," ",1);                                   87304300
         GO TO XIT;                                                     87304400
LE:      WRITE(LINE[DBL],15,TMP[*]);                                    87304500
XIT:                                                                    87304600
    END OPPROC;                                                         87304700
PROCEDURE HIVALU(A); ARRAY A[0];                                        87304800
         FILL A[*] WITH "99999999","99999999","99999999","99999999",    87304900
                        "99999999","99999999";                          87305000
BOOLEAN PROCEDURE XCMP2(A,B); ARRAY A,B[0];                             87305100
    BEGIN                                                               87305200
BOOLEAN STREAM PROCEDURE XCMP1(A,B);                                    87305410
    BEGIN                                                               87305420
         SI ~ A; DI ~ B;                                                87305435
         IF 40 SC{ DC THEN TALLY ~ 1; XCMP1 ~ TALLY;                    87305440
    END;                                                                87305450
         XCMP2 ~ XCMP1(A[0],B[0]);                                      87305455
    END;                                                                87305460
         REWIND(DSK); FIRST1~ TRUE;                                     87305500
         TE ~ TIME(1); TP ~ TIME(2);                                    87305600
         WRITE (LINE[1]);                                               87305700
         WRITE(LINE,XRFHEAD);                                           87306300
         FILLWITHCHR(TMP[0],0," ",60 );                                 87306350
         FILLWITHCHR(TMP[7],4," ",60 );                                 87306355
         FILLWITHCHR(TMP[0],0,"-",23);                                  87306400
         ZEROER(PS[0],4);                                               87306450
         WRITE(LINE[DBL],15,TMP[*]);                                    87306500
         SORT(OPPROC,INP,0,HIVALU,XCMP2,5);                             87306600
         WRITE(RITE,XRFCH,(TIME(1)-TE)/60,(TIME(2)-TP)/60);             87308400
    END XREFOUT;                                                        87308500
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%88000000
%                                                                      %88000100
%                     SEPARATELY COMPILED PROGRAMS                     %88000200
%                                                                      %88000300
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%88000400
PROCEDURE PROCESS;                                                      88000500
    BEGIN                                                               88000600
         IF V1 = 0 THEN                                                 88000700
    BEGIN                                                               88000800
         IF T ~ IF3[V1] = 0 THEN IDSCAN(IF4[V2].FLLNK)                  88000900
         ELSE BEGIN                                                     88001000
              EMITNUM(T);                                               88001100
              EMITNUM(IF4[V2]);                                         88001200
              END;                                                      88001300
         EMITL(8);                                                      88001400
         EMITO(COM);                                                    88001500
         EMITO(DEL);                                                    88001600
         EMITO(DEL);                                                    88001700
    END ELSE                                                            88001800
         IF V1 = 2 THEN      % RERUN                                    88001900
    BEGIN                                                               88002000
         EMITL(0);                                                      88002100
         EMITL(12);                                                     88002200
         EMITO(COM);                                                    88002300
         EMITO(DEL);                                                    88002400
    END ELSE BEGIN                                                      88002500
         EMITPAIR(IF3[V2].BADDF,LODD);                                  88002600
         EMITL(4);                                                      88002700
         EMITO(COM);                                                    88002800
         EMITO(DEL);                                                    88002900
         END;                                                           88003000
    END PROCESS;                                                        88003100
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%88900000
%                  ERROR PASS 2 DRIVER   -  SYNTAX ONLY                %88900100
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%88900200
PROCEDURE SHORTSHEET;                                                   88900300
    BEGIN                                                               88900400
         REAL IFX;                                                      88900500
         LABEL  XIT,L3,L4,L5,L6,L7,L12,L25,L27,L28,L29,L35,L36,L37,     88900600
                L38,L39,L42,L59,L60,L62,L64,L65,L66,L67,L68,L69,L77,    88900700
                L86,L87,L88,L70;                                        88900800
         SWITCH SWLST ~ XIT,XIT,XIT,L3 ,L4 ,L5 ,L6 ,L7 ,XIT,XIT,  %00-0988900900
                        XIT,XIT,L12,XIT,XIT,XIT,XIT,XIT,XIT,XIT,  %10-1988901000
                        XIT,XIT,XIT,XIT,XIT,L25,XIT,L27,L28,L29,  %20-2988901100
                        XIT,XIT,XIT,XIT,XIT,L35,L36,L37,L38,L39,  %30-3988901200
                        XIT,XIT,L42,XIT,XIT,XIT,XIT,XIT,XIT,XIT,  %40-4988901300
                        XIT,XIT,XIT,XIT,XIT,XIT,XIT,XIT,XIT,L59,  %50-5988901400
                        L60,XIT,L62,XIT,L64,L65,L66,L67,L68,L69,  %60-6988901500
                        L70,XIT,XIT,XIT,XIT,XIT,XIT,L77,XIT,XIT,  %70-7988901600
                        XIT,XIT,XIT,XIT,XIT,XIT,L86,L87,L88,XIT,  %80-8988901700
                        XIT;                                      %90   88901800
         PSX ~ 2;                                                       88901900
         DO                                                             88902000
    BEGIN                                                               88902100
         PASSMAC;                                                       88902200
         GO TO SWLST[MACN2+1];                                          88902300
    L3:  IF IF2[IFX~MACQUAL].USF!CMP1 OR IF0[IFX].LVLF!77 THEN ERR(286);88902400
         GO TO XIT;                                                     88902500
    L4:  DEPMP(VARU2+5);               GO TO XIT;                       88902600
    L5:  DEPMP(VARU2+3);               GO TO XIT;                       88902700
    L6:                                                                 88902800
    L7:  IFX ~ MACQUAL;                GO TO XIT;                       88902900
    L12: KEYMP;                        GO TO XIT;                       88903000
    L25: LABELDEC;                     GO TO XIT;                       88903100
    L27:                                                                88903200
    L28:                                                                88903300
    L29: BRANCHGEN(BFW);               GO TO XIT;                       88903400
    L35: ENDPAR(TRUE);                 GO TO XIT;                       88903500
    L36: ENDPAR(FALSE);                GO TO XIT;                       88903600
    L37: ALTRP;                        GO TO XIT;                       88903700
    L38: ALTGP;                        GO TO XIT;                       88903800
    L39: ALGOP;                        GO TO XIT;                       88903900
    L42:                                                                88904000
    L60: PSX~2;    IF RELADDR > 7200 THEN SEGEND(RELADDR); GO XIT;      88904100
    L59: PERFORMP;                     GO TO XIT;                       88904200
    L62: DUMP2;                        GO TO XIT;                       88904300
    L64:                                                                88904400
    L65:                                                                88904500
    L66: IF NOT LBCHK(V1,V2,IFX) THEN BEGIN ERPNT ~ -V1; ERR(159) END;  88904600
         GO TO XIT;                                                     88904700
    L67: SRTP;                         GO TO XIT;                       88904800
    L68: RELP;                         GO TO XIT;                       88904900
    L69: RETP;                         GO TO XIT;                       88905000
    L70: IF V1=1 THEN DECLTOG ~ BOOLEAN(V2);            GO XIT;         88905100
    L77: IF IF2[MACQUAL].CLF!AN THEN ERR(262);          GO XIT;         88905200
    L86: IF USEFIL ! 0 THEN ERR(282) ELSE USEFIL ~ V1;  GO XIT;         88905300
    L87: IF IF2[MACQUAL].USF ! BCL THEN ERR(39);        GO XIT;         88905400
    L88: IF (W~IF2[MACQUAL]).CLF!NM OR W.FSZF!0 THEN ERR(13);           88905500
XIT:END  UNTIL MACN2=THEND;                                             88905600
    END SHORTSHEET;                                                     88905700
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%89000000
%                                                                      %89000100
%                          SECOND PASS DRIVER                          %89000200
%                                                                      %89000300
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%89000400
PROCEDURE MACRO;                                                        89000500
BEGIN    COMMENT  PROCESSES ONE MACRO. MAY BE CALLED RECURSIVELY;       89000600
         DEFINE  T = IFX#;                                              89000700
         REAL IFX,IFY;                                                  89000800
LABEL L0 ,L1 ,L2 ,L3 ,L4 ,L5 ,L6 ,L7 ,L8 ,L9 ,L10,L11,L12,L13,L14,      89000900
          L16,L17,                                                      89001000
          L19,L20,L21,L22,L23,L24,L25,L26,L27,L28,L29,L30,L31,L32,L33,  89001100
      L34,L35,L36,L37,L38,L39,L40,    L42,L43,L44,L45,        L48,L49,  89001200
      L50,L51,L52,L53,L54,L55,L56,L57,L58,L59,L60,L61,L62,L63,L64,L65,  89001300
      L66,L67,L68,L69,L70,L71,L72,L73,L74,L75,L76,L77,L78,L79,L80,L81,  89001400
      L82,L83,L84,L85,L86,L87,L88,L89;                                  89001500
LABEL XIT;                                                              89001600
SWITCH  SWLST~L0 ,L1 ,L2 ,L3 ,L4 ,L5 ,L6 ,L7 ,L8 ,L9 ,L10,L11,L12,L13,  89001700
      L14,XIT,L16,L17,XIT,L19,L20,L21,L22,L23,L24,L25,L26,L27,L28,L29,  89001800
      L30,L31,L32,L33,L34,L35,L36,L37,L38,L39,L40,XIT,L42,L43,L44,L45,  89001900
      XIT,XIT,L48,L49,L50,L51,L52,L53,L54,L55,L56,L57,L58,L59,L60,L61,  89002000
      L62,L63,L64,L65,L66,L67,L68,L69,L70,L71,L72,L73,L74,L75,L76,L77,  89002100
         L78,L79,L80,L81,L82,L83,L84,L85,L86,L87,L88,L89,XIT;           89002200
         PASSMAC;      % GET A MACRO                                    89002300
    GO TO SWLST [MACN2+1];                                              89002400
L0:                                                                     89002500
         IF V1 = ID THEN KBLSTARTP ELSE                          % KBLSM89002600
              IF V1 = PROCEDUREV THEN ENDIED ;                   % KBLSM89002700
         GO TO XIT;                                                     89002800
L1:                                                             % XTHRM 89002900
         ENDCHECK(0);                                           % XTHRM 89003000
         GO TO XIT;                                             % XTHRM 89003100
L2:                                                                     89003200
         IF V2= ENTR THEN CNEMPRO;                               % CNEM 89003300
         GO TO XIT;                                                     89003400
L3:                                                                     89003500
         IFY ~ VARU2;                                            % ACKM 89003600
         IF IF2[T~MACQUAL].USF! CMP1 OR IF0[T].LVLF!77 THEN ERR(286)    89003700
         ELSE FIB[DICT[IFY.IR,IFY.IC].FIBF,15].ACKF~IF3[T].BADDF;% ACKM 89003800
         GO TO XIT;                                                     89003900
L4:                                                                     89004000
         DEPMP(VARU2+5);                                         % ODPM 89004100
         GO TO XIT;                                                     89004200
L5:                                                                     89004300
         DEPMP(VARU2+3);                                         % SDPM 89004400
         GO TO XIT;                                                     89004500
L6:                                                                     89004600
         FIB[DICT[VARU2.IR,VARU2.IC].FIBF,1] ~ -MACQUAL;         % FLLM 89004700
         GO TO XIT;                                                     89004800
L7:                                                                     89004900
         FIB[DICT[VARU2.IR,VARU2.IC].FIBF,3] ~ -MACQUAL;         % FLHM 89005000
         GO TO XIT;                                                     89005100
L8:                                                                     89005200
         IF V1=0 THEN NNLPS~AVAL ELSE INPSUDOSTK~NNLPS&NNS[TOPST];%SVAM 89005300
         GO TO XIT;                                                     89005400
L9:                                                                     89005500
         ADCMP;                                                  % ADCM 89005600
         GO TO XIT;                                                     89005700
L10:     IFTOG ~ BOOLEAN(V1); GO TO XIT;                         % IFMMM89005800
L11:                                                                    89005900
         FIGPRC;                                                 % CLASM89006000
         GO TO XIT;                                                     89006100
L12:                                                                    89006200
         KEYMP;                                                  % KEYM 89006300
         GO TO XIT;                                                     89006400
L13:     IF BOOLEAN(V2) THEN STORSUB ~ V1 ELSE                   % STOSM89006500
    BEGIN                                                        % STOSM89006600
              IF V2=2 THEN IF MKSFF AND LASTMKS<RELADDR-2 THEN   % STOSM89006700
                   BEGIN VOIDMKS; MARKSTACK;                     % STOSM89006800
                   END;                                          % STOSM89006900
              IF (T~TAKASYL(RELADDR-4))=2076 AND V1=1  % JUNKNOF % STOSM89007000
                   OR T=2080 AND V1=2 THEN             % JUNKXOF % STOSM89007100
              IF V2=6 THEN                                       % STOSM89007150
    BEGIN     TEMPREL ~ RELADDR; RELADDR ~ RELADDR-4;            % STOSM89007160
    END ELSE                                                     % STOSM89007170
    BEGIN     TEMPREL ~ RELADDR; RELADDR ~ RELADDR-2; EMITO(SND);% STOSM89007200
    END ELSE  VALUCALL(IF V1=1 THEN JUNKNOF ELSE JUNKXOF);       % STOSM89007300
              IF V2=4 THEN                                       % STOSM89007400
    BEGIN     PASSMAC; EMITNUM(IF1[V1].OFSF); EMITO(ADD);        % STOSM89007500
    END;                                                         % STOSM89007600
              EMITO(DUP); EMITISO(45,3); EMITO(EXCH);            % STOSM89007700
              EMITL(8); EMITO(IDIV);                             % STOSM89007800
              PS[PSX~PSX+1] ~ 0&5 [TOPSL]&NM [TOPSC]&LTV [TOPST];% STOSM89007900
              ONSTACK ~ 1;                                       % STOSM89008000
    END;                                                         % STOSM89008100
         GO TO XIT;                                                     89008200
L14:                                                                    89008300
         NONUMLIT;                                               % CNAM 89008400
         GO TO XIT;                                                     89008500
%L15:    ;                                                       % QUAL 89008600
L16:                                                                    89008700
         NUMLIT;                                                 % LITC 89008800
         GO TO XIT;                                                     89008900
L17:                                                                    89009000
         VLDN (V1,V2);                                           % VALDM89009100
         GO TO XIT;                                                     89009200
%L18:    ;                                                       % VALNM89009300
L19:                                                                    89009400
         NAME(V1,V2);                                            % NAMDM89009500
         GO TO XIT;                                                     89009600
L20:                                                                    89009700
         MOV9(V1,V2,FALSE);                                      % STO9M89009800
         GO TO XIT;                                                     89009900
L21:                                                                    89010000
         MOVX(V1,V2);                                            % STOXM89010100
         GO TO XIT;                                                     89010200
L22:                                                                    89010300
         EMITPAIR(JUNKA,LODD);  PS[PSX~PSX+1] ~ JNKAD;           % JONKM89010400
         GO TO XIT;                                                     89010500
L23:                                                                    89010600
         OPERANDSCALE;                                           % OPSZM89010700
         GO TO XIT;                                                     89010800
L24:                                                                    89010900
         MOV9(V1,V2,TRUE);                                       % SZERM89011000
         GO TO XIT;                                                     89011100
L25:                                                                    89011200
         LABELDEC;                                               % DEFLM89011300
         GO TO XIT;                                                     89011400
L26:                                                                    89011500
              BRT[V1] ~  RELADDR;                                % DEFPM89011600
         IF TAKASYL(RELADDR+4)=2121 THEN RELADDR ~ RELADDR+6 ELSE% DEFPM89011700
              BEGIN EMITFIX(4095); EMITFIX(4095); EMITO(NOP);END;% DEFPM89011800
         GO TO XIT;                                                     89011900
L27:                                                                    89012000
         BRANCHGEN(BFC);                                         % BRFLM89012100
         GO TO XIT;                                                     89012200
L28:                                                                    89012300
         BRANCHGEN(-BFC);                                        % BRTLM89012400
         GO TO XIT;                                                     89012500
L29:                                                                    89012600
         BRANCHGEN(BFW) ;                                        % BUNLM89012700
         GO TO XIT;                                                     89012800
L30:                                                                    89012900
         IF V1!0 THEN ADJUST;                                    % BRFPM89012950
         IF BOOLEAN(IFY ~ REAL(TAKASYL((T~IF V1=0 THEN RELADDR   % BRFPM89013000
                    ELSE BRT[V1])+4)=2121))                      % BRFPM89013100
              THEN BOOLFIX(T,IF V2=0 THEN RELADDR ELSE BRT[V2],  % BRFPM89013200
              BFC,0,0);                                          % BRFPM89013300
         EMITBRANCH(T,IF V2=0 THEN RELADDR ELSE BRT[V2],IF       % BRFPM89013400
           BOOLEAN(IFY|TAKASYL(T).[36:1]) THEN -BFC ELSE BFC);   % BRFPM89013500
         GO TO XIT;                                                     89013600
L31:                                                                    89013700
         IF V1!0 THEN ADJUST;                                    % BRTPM89013750
         IF BOOLEAN(IFY ~ REAL(TAKASYL((T~IF V1=0 THEN RELADDR   % BRTPM89013800
                    ELSE BRT[V1])+4)=2121))                      % BRTPM89013900
              THEN BOOLFIX(T,IF V2=0 THEN RELADDR ELSE BRT[V2],  % BRTPM89014000
             -BFC,0,0);                                          % BRTPM89014100
         EMITBRANCH(T,IF V2=0 THEN RELADDR ELSE BRT[V2],IF       % BRTPM89014200
           BOOLEAN(IFY|TAKASYL(T).[36:1]) THEN BFC ELSE -BFC);   % BRTPM89014300
         GO TO XIT;                                                     89014400
L32:                                                                    89014500
         EMITBRANCH(IF V1=0 THEN RELADDR ELSE BRT[V1],           % BRUPM89014600
                    IF V2=0 THEN RELADDR ELSE BRT[V2],BFW);      % BRUPM89014700
         GO TO XIT;                                                     89014800
L33:                                                                    89014900
              IF V2=1 THEN ADJUST;                               % STSBM89015000
              BRT[V1] ~ RELADDR;                                 % STSBM89015100
         GO TO XIT;                                                     89015200
L34:                                                                    89015300
         CALLSUBROUTINE (BRT[V1]);                               % CASBM89015400
         GO TO XIT;                                                     89015500
L35:                                                                    89015600
         ENDPAR(TRUE);                                           % ENDSM89015700
         GO TO XIT;                                                     89015800
L36:                                                                    89015900
         ENDPAR(FALSE);                                          % ENDPM89016000
         GO TO XIT;                                                     89016100
L37:                                                                    89016200
         ALTRP;                                                  % ALTRM89016300
         GO TO XIT;                                                     89016400
L38:                                                                    89016500
         ALTGP;                                                  % ALTGM89016600
         GO TO XIT;                                                     89016700
L39:                                                                    89016800
         ALGOP;                                                  % ALGOM89016900
         GO TO XIT;                                                     89017000
L40:                                                                    89017100
         IF BOOLEAN(V1) THEN DANGLEHEAD ~ 0;                     % EXPRM89017200
         GO TO XIT;                                                     89017300
%L41:    ;                                                       % ENDXM89017400
L42:                                                                    89017500
L60:                                                             % ADSTM89017600
         PSX ~ 2;                                                % STMTE89017700
         IF RELADDR > 7200 OR SEGTOG THEN        % KEEP SEG < 900 WORDS 89017800
    BEGIN                                                               89017900
         IFY ~ REAL(MRCLEAN); MRCLEAN ~ FALSE;                          89017950
         VALUCALL(T ~ GETPRTLOC);      % SET UP BRANCH TO NEXT SEGMENT  89018000
         EMITO(BFW);                                                    89018100
         SEGWRAPUP;                                                     89018200
         MRCLEAN ~ BOOLEAN(IFY);                                        89018250
         SEGEND(RELADDR);                                               89018300
         SEGSTART;                                                      89018400
         T ~ BUILDSEGDICT(T,SEGNO);                                     89018500
         SEGTOG ~ FALSE;                                                89018550
    END;                                                                89018600
         GO TO XIT;                                                     89018700
L43:                                                                    89018800
         MNTRNG ~ TRUE;                                          % MNAMM89018900
         GO TO XIT;                                                     89019000
L44:                                                                    89019100
                   EMITO(V1); PSX ~ PSX-2;                       % BOOLM89019200
         GO TO XIT;                                                     89019300
L45:                                                                    89019400
         SUBS;                                                   % STRTS89019500
         GO TO XIT;                                                     89019600
%L46:    ;                                                       % FINSM89019700
%L47:    ;                                                       % XXXXM89019800
L48:                                                                    89019900
         ATANDT(V1);                                             % PWSMM89020000
         GO TO XIT;                                                     89020100
L49:                                                                    89020200
         IF V1!0 THEN                                            % SZRSM89020300
    BEGIN                                                        % SZRSM89020400
         TEMPREL ~ RELADDR; RELADDR ~ BRT[V1];                   % SZRSM89020500
         IF BOOLEAN(V2) THEN BEGIN EMITL(0); EMITPAIR(ONSIZERROR,STD);  89020600
                             END ELSE BEGIN EMITO(NOP); EMITO(NOP); END;89020700
         RELADDR ~ TEMPREL;                                             89020800
    END ELSE BEGIN EMITL(0); EMITPAIR(ONSIZERROR,STD); END;             89020900
         GO TO XIT;                                                     89021000
L50:                                                                    89021100
         IF BOOLEAN(V1) THEN TESTDIV0 ~ TRUE ELSE IF             % SZRFM89021200
            BOOLEAN(V2) THEN TESTDIV0 ~ FALSE ELSE VALUCALL(ONSIZERROR);89021300
         GO TO XIT;                                                     89021400
L51:                                                                    89021500
         EMITO(SSP);                                             % MABSM89021600
         GO TO XIT;                                                     89021700
L52:                                                                    89021800
         SGNM;                                                   % MSGNM89021900
         GO TO XIT;                                                     89022000
L53:                                                                    89022100
         INTM(V1,V2);                                            % MINTM89022200
         GO TO XIT;                                                     89022300
L54:                                                             % DELMM89022400
         EMITO(DEL);                                                    89022500
         IF AVAL.PST>4 THEN IF BOOLEAN(AVAL.PSSIN) THEN EMITO(DEL) ELSE 89022600
         ELSE IF AVAL.PSL>11 THEN EMITO(DEL);                           89022700
         IF NOT BOOLEAN(V1) THEN PSX ~ PSX-1;                           89022800
         GO TO XIT;                                                     89022900
L55:                                                                    89023000
         SWCHP;                                                  % SWCH 89023100
         GO TO XIT;                                                     89023200
L56:                                                                    89023300
         IF BOOLEAN(V1) THEN BVAL.PSL ~ 12;                      % XCHMM89023400
         EXCHANGE;                                               % XCHMM89023500
         GO TO XIT;                                                     89023600
L57:                                                                    89023700
         IF V2 = 1 THEN                                          % FGCNM89023800
         IF IF2[V1].CLF GEQ NM THEN                              % FGCNM89023900
         IF AVAL.PSIX = ZEROV THEN                               % FGCNM89024000
    BEGIN                                                        % FGCNM89024100
         PSX ~ PSX - 1;                                          % FGCNM89024200
         MOV9(0,2,FALSE);                                        % FGCNM89024300
    END ELSE                                                     % FGCNM89024400
         MOV9(0,0,FALSE)                                         % FGCNM89024500
    ELSE                                                         % FGCNM89024600
         MOVX(0,1)                                               % FGCNM89024700
    ELSE BEGIN                                                   % FGCNM89024800
         INPSUDOSTK ~ V1 & FGC [TOPST];                          % FGCNM89024900
         IF DEBUGTOG THEN MNTRPSS;                               % FGCNM89025000
    END;                                                         % FGCNM89025100
         GO TO XIT;                                                     89025200
L58:                                                                    89025300
              PS[PSX~PSX+1] ~ PS[PSX-1];                         % DUPMM89025400
         IF AVAL.PSC =CMP AND AVAL.PSL>11 THEN                          89025500
    BEGIN                                                               89025600
         EMITPAIR (PRTJUNK,STD);                                        89025700
         EMITO(DUP);                                                    89025800
         EMITPAIR (PRTJUNK,LODD);                                       89025900
         EMITO(EXCH);                                                   89026000
         EMITPAIR (PRTJUNK,LODD);                                       89026100
         GO TO XIT;                                                     89026200
    END;                                                                89026300
              EMITO(DUP);                                        % DUPMM89026400
         GO TO XIT;                                                     89026500
L59:                                                                    89026600
         PERFORMP;                                               % PFRMM89026700
         GO TO XIT;                                                     89026800
L61:                                                                    89026900
         IF V1 > OPDC AND V1 < LAND OR V1 = VARI THEN ARTH(V1,V2)% MATHM89027000
              ELSE IF V1=SFS OR V1=SRS                           % MATHM89027100
              OR ((V1=LAND OR V1=LOR OR V1=LNOT) AND IFTOG)      % MATHM89027200
              THEN BOOLEVALP ELSE IF V1<BFW THEN RELATE(V1,V2)   % MATHM89027300
              ELSE EMITO(V1);                                    % MATH 89027400
         IF V1=CHSN THEN NMLITR ~ -NMLITR;                       % MATHM89027500
         GO TO XIT;                                                     89027600
L62:                                                                    89027700
         DUMP2;                                                  % DUMPM89027800
         GO TO XIT;                                                     89027900
L63:                                                                    89028000
         EXAMINEF;                                               % EXAM 89028100
         GO TO XIT;                                                     89028200
L64:                                                                    89028300
         IF  LBCHK(V1,V2,IFX) THEN                               % MHPWM89028400
         BEGIN                                                   % MHPWM89028500
              IF0[IFX].PRF ~ 1;                                  % MHPWM89028600
              IF4[IF4[IFX].SILKF].SPERF ~ 1;                     % MHPWM89028700
              IF BOOLEAN(IFY~IF0[IFX].SNLF) OR BOOLEAN(IF0[IFX-  % MHPWM89028800
                 IFSZ].SNLF) THEN                                % MHPWM89028900
         BEGIN                                                   % MHPWM89029000
              IFY ~ IF1[IFX+IFY|IFSZ-(1-IFY)|IFSZ].BADDF;        % MHPWM89029100
              IF IFY!0 THEN IF1[IFX].BADDF ~ IFY;                % MHPWM89029200
         END;                                                    % MHPWM89029300
              IF IF1[IFX].BADDF =0 THEN IF1[IFX].BADDF~GETPRTLOC;% MHPWM89029400
         END ELSE BEGIN                                          % MHPWM89029500
              ERPNT ~ -V1;                                       % MHPWM89029600
              ERR( 159);                                         % MHPWM89029700
         END;                                                           89029800
         GO TO XIT;                                                     89029900
L65:                                                                    89030000
         IF  LBCHK(V1,V2,IFX) THEN IF0[IFX].TPF ~1 ELSE          % PFTMM89030100
              BEGIN ERPNT ~ -V1; ERR( 159); END;                 % PFTMM89030200
         GO TO XIT;                                                     89030300
L66:                                                                    89030400
         IF NOT  LBCHK(V1,V2,IFX) THEN                           % CHKLM89030500
              BEGIN ERPNT ~ -V1; ERR( 159); END ELSE             % CHKLM89030600
              BEGIN                                              % CHKLM89030700
                   IF0[IFX].MONI ~ 1;                            % CHKLM89030800
                   IF IF2[IFX].NCNTF=0 THEN                      % CHKLM89030900
                      IF2[IFX].NCNTF ~ GETPRTLOC;                % CHKLM89031000
              END;                                               % CHKLM89031100
         GO TO XIT;                                                     89031200
L67:                                                                    89031300
         SRTP;                                                   % SPCNT89031400
         GO TO XIT;                                                     89031500
L68:                                                                    89031600
         RELP;                                                   % RLMCO89031700
         GO TO XIT;                                                     89031800
L69:                                                                    89031900
         RETP;                                                   % RTMCO89032000
         GO TO XIT;                                                     89032100
L70:                                                                    89032200
         IF V1=1 THEN DECLTOG ~ BOOLEAN(V2);                     % SWMCO89032300
         GO TO XIT;                                                     89032400
L71:     SCALESTOP ~ MATHTOG ~ BOOLEAN(V1);                      % SCALM89032500
         GO TO XIT;                                              % SCALM89032600
L72:                                                                    89032700
         SEARCHP2;                                               % INCIM89032800
         GO TO XIT;                                                     89032900
L73:                                                                    89033000
         SETP2;                                                  % SETMM89033100
         GO TO XIT;                                                     89033200
L74:                                                                    89033300
         REMAINDR;                                               % RMNDR89033400
         GO TO XIT;                                                     89033500
L75:                                                                    89033600
         INOUT;                                                  % IOMAC89033700
         GO TO XIT;                                                     89033800
L76:                                                                    89033900
         IMPSUBJ(V1,V2);                                         % ISUBJ89034000
         GO TO XIT;                                                     89034100
L77:                                                                    89034200
              IF4[V1].FLLNK~ T ~ MACQUAL;                        % PNMCO89034300
              IF IF2[T].CLF ! AN THEN ERR( 262);                 % PNMCO89034400
         GO TO XIT;                                                     89034500
L78:                                                                    89034600
         IF V1=0 THEN                                            % STOPM89034700
              BEGIN  % STOP RUN                                  % STOPM89034800
                   EMITL(10);                                    % STOPM89034900
                   EMITO(COM);                                   % STOPM89035000
                   EMITL(5);                                     % STOPM89035100
                   EMITO(COM);                                   % STOPM89035200
              END                                                % STOPM89035300
         ELSE IF V1=2 THEN                                       % STOPM89035310
              BEGIN                                              % STOPM89035320
                   EMITL(0); EMITO(COM);                         % STOPM89035330
              END                                                % STOPM89035340
         ELSE BEGIN                                              % STOPM89035400
                   IF V1=1 THEN EMITNUM(V2)                      % STOPM89035500
                   ELSE EMITNUM(VARU2 & " "[12:42:6]);           % STOPM89035600
                   EMITL(33);                                    % STOPM89035700
                   EMITO(COM);                                   % STOPM89035800
                   EMITO(DEL);                                   % STOPM89035900
              END;                                               % STOPM89036000
         GO TO XIT;                                                     89036100
L79:                                                                    89036200
         IF V2=2 THEN IF MKSFF THEN VOIDMKS ELSE ELSE            % MKSMM89036250
         IF V1>1 THEN                                            % MKSMM89036300
         BEGIN                                                   % MKSMM89036400
              EMITPAIR(MEM,LODD);                                % MKSMM89036500
              EMITPAIR(IF3[V1].BADDF,STD);                       % MKSMM89036600
         END ELSE                                                % MKSMM89036700
         IF NOT MKSFF OR V2=1 THEN                               % MKSMM89036800
         BEGIN                                                   % MKSMM89036900
              IF V1=1  THEN EMITL(0);                            % MKSMM89037000
              MARKSTACK;                                                89037100
         END;                                                    % MKSMM89037200
         GO TO XIT;                                                     89037300
L80:                                                                    89037400
         RPTMP(V1,V2);                                           % RPTM 89037500
         GO TO XIT;                                                     89037600
L81:                                                                    89037700
         RPFMP(V1,V2);                                           % RPFM 89037800
         GO TO XIT;                                                     89037900
L82:                                                                    89038000
         RSUMP(V1,V2);                                           % RSUM 89038100
         GO TO XIT;                                                     89038200
L83:                                                                    89038300
         RINTP(V1,V2);                                           % RINT 89038400
         GO TO XIT;                                                     89038500
L84:                                                                    89038600
         RGENP(V1,V2);                                           % RGEN 89038700
         GO TO XIT;                                                     89038800
L85:                                                                    89038900
         RTRMP(V1,V2);                                           % RTRM 89039000
         GO TO XIT;                                                     89039100
L86:     IF USEFIL!0 THEN ERR(282) ELSE USEFIL ~ V1;             % USMVM89039200
         GO TO XIT;                                                     89039300
L87:                                                                    89039400
         IFY ~ VARU2;                                            % FIDM 89039500
         IF (W~IF2[IFX~MACQUAL]).USF=BCL                         % FIDM 89039600
         THEN FIB[DICT[IFY.IR,IFY.IC].FIBF,21]~-IFX ELSE ERR(39);% FIDM 89039700
         GO TO XIT;                                                     89039800
L88:                                                                    89039900
         IFY ~ VARU2;                                            % PGLM 89040000
         IF (W ~ IF2[IFX ~ MACQUAL]).CLF=NM AND W.FSZF=0         % PGLM 89040100
              THEN FIB[(IFY~DICT[IFY.IR,IFY.IC]).FIBF,1] ~ -IFX         89040200
         ELSE ERR(13);                                           % PGLM 89040300
         IF2[IFY.NXIF].PGLMF ~ IFX;                              % PGLM 89040400
         GO TO XIT ;                                                    89040500
L89:                                                            % PROCM 89040600
         PROCESS;                                                       89040700
%L90:                                   %THEND                          89040800
XIT:      ;                                                             89040900
END MACRO;                                                              89041000
COMMENT * * * * * * * START OF PASS 2 EXECUTABLES * * * * * * * * * * ; 89041100
% * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 89041200
%                            S O C   E T   T E U M                      89041300
% * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 89041400
         STORSUB ~                                                      89041500
         USEFIL ~ PS[0] ~ PS[1] ~ PS[2] ~ CODEMAX1 ~ CODEMAX2 ~         89041600
         CODEMAX3 ~ DATAMAX1 ~ DATAMAX2 ~ BUFFMAX1 ~ BUFFMAX2 ~         89041700
         DYNAMICDIAL~ LBLSTRT ~ INITZE ~ CNRELADDR ~ CURCARDNB ~        89041800
         LASTENTRY ~ COBOLVARSZ ~ ONSTACK ~ JUNKMON2 ~ VIXN ~           89041900
         CODEINDEX~WDSZ2~ESZ~PSX~CURRENTPOOLADR~POOLINDEX~0;            89042000
         DISKRAY[0] ~ 1 & 2 [TOCNTLF];                                  89042100
         SEGDICTINX ~ DKADR ~ 1;                                        89042200
         XREFTOG ~                                                      89042250
         IFTOG ~ SORTOG ~ SCALESTOP ~ INSUB ~ MATHTOG ~ SEGTOG ~        89042300
         PRTOG ~ CODETOG ~ INFOTOG ~ SPECTOG ~ FIBTOG ~ SINGLETOG ~     89042400
         MRCLEAN ~ CHRMODE ~ MNTRNG ~ SVNNL ~ PRODFLG ~ ERRSTART ~      89042500
         PUNCHTOG~DEBUGTOG~LIMITOG~MNTRNGS~MKSFF~NOEXCH~FALSE;          89042600
         FSGTOG ~ HEADPRINT ~ TRUE;                                     89042700
         LISTOG ~ (NOT DCOMM).[47:1];                                   89042800
         CURCARDNB ~ -1;                                                89042900
         PRT[0,ONSIZERROR] ~ ONSIZERROR;                                89043000
         MASK2 ~ (MASK1 ~(NOT FALSE).VARU2F).[32:16];                   89043100
         IF ERRORCOUNT ! 0 AND NOT LONG THEN                            89043200
    BEGIN                                                               89043205
         SHORTSHEET;                                                    89043220
         IF DCOMM AND HEADPRINT THEN GO TO GLOBALEND;                   89043250
    END ELSE                                                            89043295
         DO MACRO UNTIL MACN2 = THEND;                                  89043300
%        ***************************************************************90000000
%        *    COMPILER  WRAP-UP                                        *90000100
%        ***************************************************************90000200
         ZEROER(CSTPOOL[0],30);                                         90000300
         PGUB ~ FALSE;                                                  90000400
         FOR I ~ 0 STEP 1 UNTIL 5 DO PGUB ~ PGUB OR PGUSE[I]!0;         90000500
%%%%%%%%%%%%%%%%%%%%% WRITE OUT FIBS, BUILD FPB %%%%%%%%%%%%%%%%%%%%%%%%90000600
         WRITEDATA(PGUSE,12,PGUSER);                                    90000700
         IF CURRENTPOOLADR ! 0 THEN    % DUMP THE CONSTANT POOL         90000800
    BEGIN                                                               90000900
         IF FIBTOG THEN MONOCTL1("CSTPOOL",CONSTANTPOOL,POOLINDEX.WIX); 90001000
         WRITEDATA(CONSTANTPOOL,POOLINDEX.WIX,CURRENTPOOLADR);          90001100
    END;                                                                90001200
         SVSGSIZ ~ SGSIZ;                                               90001300
         IFPB ~ 0;                                                      90001400
         I ~ 0;                                                         90001500
         IF SORTOG THEN                                                 90001600
    BEGIN                                                               90001700
         FILL EDOC[0,*] WITH                                            90001800
              OCT0001140000000000, "00DSORT1", " 6DSORT1",              90001900
              OCT0002140000000000, "00DSORT2", " 6DSORT2",              90002000
              OCT0003020000000000, "00TSORT1", " 6TSORT1",              90002100
              OCT0004020000000000, "00TSORT2", " 6TSORT2",              90002200
              OCT0005020000000000, "00TSORT3", " 6TSORT3",              90002300
              OCT0006020000000000, "00TSORT4", " 6TSORT4",              90002400
              OCT0007020000000000, "00TSORT5", " 6TSORT5";              90002500
         FPBX ~ 168;                                                    90002600
    END;                                                                90002700
         WHILE I ~ I+1{NFIB DO                                          90002800
    BEGIN                                                               90002900
         IF FIB[I,4].FILTYF<20 THEN                                     90003000
    BEGIN                                                               90003100
         IF (Q~FIB[I,18].BUFSZF|FIB[I,13].NBUFF)>BUFFMAX1 THEN          90003200
    BEGIN                                                               90003300
         BUFFMAX2 ~ BUFFMAX1;                                           90003400
         BUFFMAX1 ~ Q;                                                  90003500
    END;                                                                90003600
         IFPB ~ IFPB+1;                                                 90003700
         IF FPBX+21+(Q ~DRCT[DXX~(FIB[I,6].DLNKF+1)].SIZEF) > 8184 THEN 90003800
    BEGIN                                                               90003900
         NFIB ~ I-1;                                                    90004000
         ERR(-225);                                                     90004100
         GO TO FPBL;                                                    90004200
    END;                                                                90004300
         IF FIB[I,21]=0 THEN                                            90004400
    BEGIN                                                               90004500
         IF 7-Q>0 THEN                                                  90004600
              FILLWITHCHR(FIB[I,21],1," ",7);                           90004700
         PUSHOVER(FIB[I,21],1,DRCT[DXX],2,IF  Q>7 THEN 7 ELSE Q);       90004800
    END;                                                                90004900
         FIB[I,5].[42:1] ~ 1;                    % CLOSED RELEASED      90005000
         FIB[I,4].USEF ~ REAL(PGUB OR FIB[I,0]!0 OR FIB[I,2]!0          90005100
              OR FIB[I,15]!0);                                          90005200
         V1~ FIB[I,6].TANKF;                                            90005300
         V2 ~ IF (T~FIB[I,20])>0 THEN T ELSE 0;                         90005400
         FIB[I,20] ~ 0 & IF3[DRCT[DXX-1].NXIF] [18:33:15];              90005500
         FIB[I,4].FPBXF ~ 5|(IFPB-1)+35|REAL(SORTOG);                   90005600
         FIB[I,4].IFLG ~ 1;                                             90005700
         IF FIBTOG THEN MONOCTL2("FIB    ",FIB,22,I);                   90005800
         FIB[I,13].[47:1] ~ 1;         % COBOL FILE BIT                 90005900
         FIB[I,16] ~ FIB[I,6] ~ 0;                                      90006000
         SEGNO ~ IF2[DRCT[DXX-1].NXIF].FXF;                             90006100
         SEGDUMP(176,FIB,I|128);                                        90006200
         W ~ SEGNO;                                                     90006300
         SEGDICT[IX]~ - SEGDICT[IX];                                    90006400
         W ~ FPBX.WIX;                                                  90006500
         PUSHOVER(EDOC[IX],FPBX.CIX,IFPB,6,2);                          90006600
         T1 ~ IF (T~FIB[I,4].FILTYF)=CP THEN 0 ELSE                     90006700
              IF T=MT THEN 2+7|FIB[I,4].LBLF ELSE                       90006800
              IF T=PP OR T=PR THEN 7+FIB[I,4].LBLF ELSE                 90006900
              IF T=DK THEN 12-2|REAL(FIB[I,4].AMF=1) ELSE T;            90007000
         W ~ (FPBX~FPBX+2).WIX;                                         90007100
         PUSHOVER(EDOC[IX],FPBX.CIX,T1,7,1);                            90007200
         W ~ (FPBX~FPBX+1).WIX;                                         90007300
         PUSHOVER(EDOC[IX],FPBX.CIX,V2,1,7);                            90007400
         W ~ (FPBX~FPBX+7).WIX;                                         90007500
         PUSHOVER(EDOC[IX],FPBX.CIX,FIB[I,21],1,7);                     90007600
         W ~ (FPBX~FPBX+7).WIX;                                         90007700
         PUSHOVER(EDOC[IX],FPBX.CIX,DRCT[DXX],1,Q+1);                   90007800
         FPBX ~ FPBX+Q+1;                                               90007900
    END;                                                                90008000
    END;                                                                90008100
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% WRITE OUT FPB %%%%%%%%%%%%%%%%%%%%%%%%90008200
    FPBL:                                                               90008300
         W ~ FPBX.WIX;                                                  90008400
         FILLWITHCHR(EDOC[IX],FPBX.CIX,"0",2);                          90008500
         FPBDKR ~ DKADR;                                                90008600
         SEGDUMP(-(FPBSZ ~ (FPBX+9).WIX),EDOC,0);                       90008700
         IF FIBTOG THEN MONOCTL2("FPB    ",EDOC,FPBSZ,0);               90008800
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% WRITE OUT SEGDICT %%%%%%%%%%%%%%%%%%%%90008900
         SEGDKR ~ DKADR;                                                90009000
         SEGDUMP(-SEGDICTINX,SEGDICT,0);                                90009100
         IF FIBTOG THEN MONOCTL2("SEGDICT",SEGDICT,SEGDICTINX,0);       90009200
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% WRITE OUT LINE DICTIONARY %%%%%%%%%%%%90009300
         IF SEQXEQT THEN                                                90009400
    BEGIN                                                               90009500
         SEGDKR.LINEDICTADR ~ DKADR;                                    90009600
         SEGDUMP(-SEGDICTINX,LINEDICT,0);                               90009700
         IF FIBTOG THEN MONOCTL2("LINEDIC",LINEDICT,SEGDICTINX,0);      90009800
    END;                                                                90009900
%%%%%%%%%%%%%%%%%%%%U%%%%%%%%%%%% WRITE OUT PRT %%%%%%%%%%%%%%%%%%%%%%%%90010000
         PRTDKR ~ -DKADR;                                               90010100
         FOR I ~ 0 STEP 1 UNTIL NXTPRTLOC-1 DO                          90010200
         IF (Q ~ PRT[T~I.[36:5],T1~I.[41:7]])<0                         90010300
              THEN SETFLG(PRT[T,T1],Q.[2:1]);                           90010400
         SEGDUMP(-NXTPRTLOC,PRT,0);                                     90010500
         IF FIBTOG THEN MONOCTL2("PRT    ",PRT,NXTPRTLOC,0);            90010600
%***********************************************************************90010700
%                                                                      %90010800
%             D E L E N D A   E S T   C A R T H A G O . . . .          %90010900
%                                                            CATO      %90011000
%***********************************************************************90011100
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% WRITE OUT SEGMENT 0 %%%%%%%%%%%%%%%%%%90011200
         SVDKADR ~ DKADR;                                               90011300
         DKADR ~ 0;                                                     90011400
       % CSTPOOL[0]                           LOC OF SEGMENT DICT       90011500
         CSTPOOL[1] ~ SEGDICTINX;           % SIZE OF SEGMENT DICT      90011600
       % CSTPOOL[2]                           LOC OF PRT                90011700
         CSTPOOL[3] ~ NXTPRTLOC;            % SIZE OF PRT               90011800
       % CSTPOOL[4]                           LOC OF FPB                90011900
       % CSTPOOL[5]                           SIZE OF FPB               90012000
         CSTPOOL[6] ~ 2;               % STARTING SEGMENT NUMBER        90012100
         CSTPOOL[7].NUMFILS~NFIB+7|REAL(SORTOG);  % NUMBER OF FILES     90012200
         IF FIBTOG THEN BEGIN IF PGUB THEN MONOCTL1("PGUSE  ",PGUSE,6); 90012300
                 MONOCTL1("SEG 0  ",CSTPOOL,8); END;                    90012400
         IF INFOTOG THEN DUMPINFO;                                      90012500
         IF (ESTCORE ~ ESTCORE+SEGDICTINX+NXTPRTLOC+512+CODEMAX1        90012600
                       +CODEMAX2+CODEMAX3+DATAMAX1+DATAMAX2+CARDCOUNT   90012700
                       + 800 + 5|NFIB  + BUFFMAX1 + BUFFMAX2) > 32000   90012800
              THEN ESTCORE ~ 32000;                                     90012900
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%90013000
%  ESTCORE = SUM OF SIZES OF SEGMENT DICTIONARY,PRT, AND STACK +        90013100
%            FIRST 2 1/2 LARGEST CODE SEGMENTS + 2 LARGEST DATA ARRAYS  90013200
%            + 2 LARGEST CONSTANT POOLS + 800 (FOR INTRINSICS) +        90013300
%            FPB ENTRIES FOR ALL FILES + 2 LARGEST                      90013400
%            FILE BUFFERS + ALL SAVE AREAS;                             90013500
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%90013600
         CSTPOOL[7].COREQ ~ ESTCORE / 64;   % CORE ESTIMATE             90013700
         WRITE(CODE[0],DKSEGSZ,CSTPOOL[*]);                             90013800
         IF ERRORCOUNT=0 AND SAVETIME } 0 THEN LOCK(CODE,SAVE);         90013900
         IF XREVER THEN XREFOUT;                                        90013950
         IF NOT HEADPRINT THEN                                          90014000
    BEGIN                                                               90014100
         IF ERRORCOUNT = 0 THEN WRITE(RITE,COMPTOK) ELSE                90014200
    BEGIN                                                               90014300
         TMP[0] ~ 0;                                                    90014400
         PUSHOVER(TMP,2,LASTERR,0,6);                                   90014500
         WRITE(RITE,COMPTERR,ERRORCOUNT,TMP[0]);                        90014600
    END;                                                                90014700
         WRITE(RITE,COMPT,(TIME(1)-TI)/60,(TIME(2)-TI2)/60,CARDCOUNT+1, 90014800
              NXTPRTLOC,SVSGSIZ,SVDKADR-1,SEGCNT,ESTCORE);              90014900
    END;                                                                90015000
    END;                                                                90015100
END OF SECOND PASS;                                                     90015200
%   D-D-D-DATS ALL FOLKS                                                90015300
GLOBALEND:                                                              90015400
END.                                                                    90015500
END;END.        LAST CARD ON 0CRDING TAPE                               99999999
