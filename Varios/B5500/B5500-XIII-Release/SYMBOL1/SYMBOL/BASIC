%***********************************************************************00000000
 COMMENT           B5500 BASIC COMPILER                                 00000010
                   MARK XII.2                    04/15/71               00000020
%***********************************************************************00000030
              SEC  CONTENTS                                             00000100
              00   DESCRIPTIVE INFO                                     00000200
              01   DEFINES, FORWARD PROCEDURE DECLARATIONS              00000300
              02   ERROR MESSAGES                                       00000400
              03   GLOBAL DECLARATIONS                                  00000500
              04   UTILITY PROCEDURES                                   00000600
              05   EMITTERS                                             00000700
              06   EXPRESSIONS,"LET"                                    00000800
              07   "MAT"                                                00000900
              08   "READ","PRINT","INPUT","DATA","RESTORE","WRITE"      00001000
              09   "FOR", "NEXT"                                        00001100
              10   "END","STOP","REM"                                   00001200
              11   "DEF"                                                00001300
              12   "DIM"                                                00001400
              13   "GOTO", "GOSUB", "ON", "RETURN", "IF"                00001500
              14   SCANNER, PROGRAM, STATEMENT                          00001600
;             BEGIN                                                     00001700
 COMMENT           ***** SECTION 00 *****                               00500000
                   FILE INITIALIZATION                                  00500050
                   *****            *****                               00500100
 ;%                                                                     00500110
 INTEGER           ERRCNT;%                                             00500120
 COMMENT           ERRCNT IS THE COUNT OF DETECTED ERRORS NOT INCLUDING 00500140
                   WARNING MESSAGES.                                    00500150
                   MUST BE AT R+@25.                                    00500200
;                                                                       00500300
INTEGER SAVETIME;                                                       00500400
COMMENT SAVE-FACTOR FOR CODE FILE, SET BY MCP. IF COMPILE&GO THEN =0,   00500500
         FOR SYNTAX=-1.  MUST BE AT R+@26.                              00500600
;                                                                       00500700
REAL RR1,RR2,RR3,RR4,RR5,RR6,RR7,RR8,RR9,RR10;                          00500800
 DEFINE             TIME1=RR7#;%                                        00500805
DEFINE LASTLINENO=RR9#;                                                 00500815
COMMENT TEMPORARY VARIABLES. MAY BE USED BY ANYBODY. USED SPECIFICALLY  00500900
         FOR FILE INITIALIZATION.                                       00501000
;                                                                       00501100
 REAL               CARDCNTR; % COUNT OF SOURCE CARDS                   00501110
BOOLEAN            LISTOG,        % TRUE IF $LIST                       00501200
                   NEWTAPETOG,    % TRUE IF $NEWTAPE                    00501220
                   CHECKTOG,      % TRUE IF $CHECK                      00501240
                   PRTOG,         % TRUE IF $PRT                        00501260
                   CODETOG,       % TRUE IF $CODE                       00501280
                   DEBUGTOG,      % TRUE IF $DEBUG                      00501300
                   SPECTOG,       % TRUE IF $SPEC                       00501320
                   DEBUGATOG,     % TRUE IF $DEBUGA                     00501340
                   SINGLTOG,      % TRUE IF $SINGLE                     00501341
                   ENDTOG,        % SET IF ENDCARD ENCOUNTERED          00501350
                   REMOTETOG;     % TRUE IF CMPLR OUTPT TO TTY          00501400
COMMENT EXAMIN RETURNS THE CHARACTER AT ABSOLUTE ADDRESS ADDR.          00900000
;                                                                       00900050
REAL STREAM PROCEDURE EXAMIN(ADDR); VALUE ADDR;                         00900100
    BEGIN                                                               00900200
    SI ~ ADDR; DI ~ LOC EXAMIN; DI ~ DI+7; DS ~ CHR;                    00900300
    END EXAMIN;                                                         00900400
COMMENT GETLOCOFPB LOOKS AT THE OBJECT PROBRAM PRT+3 OBTAINING THE      00901000
         LOCATION OF THE FILE PARAMETER BLOCK.                          00901100
;                                                                       00901200
INTEGER STREAM PROCEDURE GETLOCOFPB(X); VALUE X;                        00901300
    BEGIN                                                               00901400
    SI ~ LOC GETLOCOFPB; SI ~ SI-7;                                     00901500
    DI ~ LOC X ; DI ~ DI+5;                                             00901600
    SKIP 3 DB; 9(IF SB THEN DS ~ SET ELSE DS ~ RESET; SKIP SB);         00901700
    DI ~ LOC X; SI ~ X; DS ~ WDS;                                       00901800
    SI ~ X; GETLOCOFPB ~ SI;                                            00901900
    END GETLOCOFPB;                                                     00902000
INTEGER            INPUTTYPE, PRINTTYPE;   %FILE TYPE                   00902010
                   IF SAVETIME = -1 THEN                                00902020
                        CODETOG ~ FALSE  ELSE                           00902025
                        CODETOG ~ BOOLEAN(3);                           00902030
                                                                        00902050
                   IF ERRCNT = 3 THEN                                   00902055
              BEGIN                                                     00902060
                   ERRCNT ~ 0;                                          00902062
                   LISTOG ~ BOOLEAN(2);                                 00902063
                   REMOTETOG ~ TRUE;                                    00902064
                               INPUTTYPE ~ PRINTTYPE ~ 14;   %DATACOM   00902065
              END  ELSE                                                 00902070
              BEGIN                                                     00902075
                   ERRCNT ~ 0;                                          00902078
                   LISTOG ~ BOOLEAN(3);                                 00902079
                   INPUTTYPE ~ 0;   %CP/CR                              00902080
                   PRINTTYPE ~ 18;  %LP/PBT/PBD                         00902085
              END  ;                                                    00902090
COMMENT IF EXAMIN(EXPR) =12 THEN FILE IS A DISK FILE.                   00902100
;                                                                       00902200
COMMENT CHECK CARDFILE.                                                 00902300
;                                                                       00902400
IF EXAMIN(RR10 ~ GETLOCOFPB(3)+"Y03") ! 12 THEN RR1 ~ 5 ELSE            00902500
    BEGIN RR1 ~ 2 ; RR2 ~150; END;                                      00902600
COMMENT CHECK LINE FILE.                                                00902700
;                                                                       00902800
IF EXAMIN(RR10+5)!12 THEN RR3~4 ELSE                                    00902900
    BEGIN RR3~2; RR4~150; END;                                          00903000
COMMENT CHECK NEWTAPE FILE.                                             00903100
;                                                                       00903200
IF EXAMIN(RR10+10)=12 THEN                                              00903300
    BEGIN RR5~2; RR6~10; RR7~150; END                                   00903400
ELSE BEGIN RR5~1; RR6~56; RR7~10 END;                                   00903500
COMMENT  CHECK INPUT TAPE FILE.                                         00903700
;                                                                       00903800
IF EXAMIN(RR10+15)=12 THEN                                              00903900
    BEGIN RR8~10; RR9~150; END                                          00904000
ELSE BEGIN RR8~56; RR9~10; END;                                         00904100
BEGIN                                                                   00990000
PROCEDURE   STRINGVARIABLE (FX); VALUE FX; REAL FX; FORWARD;            01000000
PROCEDURE READACARD; FORWARD;                                           01000100
INTEGER PROCEDURE SCAN; FORWARD;                                        01000200
PROCEDURE ERR(X); VALUE X; REAL X; FORWARD;                             01000300
PROCEDURE EMIT(X); VALUE X; REAL X; FORWARD;                            01000400
ALPHA PROCEDURE B2D(VALU); VALUE VALU; REAL VALU; FORWARD;              01000420
COMMENT  EMITWOP EMITS A WORD OPERATOR. THE PARAMETER PASSED TO EMITWOP 01000500
           IS WORD MODE SYLLABLE. EMITWOP IS DEFINED AS EMIT;           01000600
DEFINE EMITWOP = EMIT#;                                                 01000700
PROCEDURE ERRSUP(X); VALUE X; REAL X; FORWARD;                          01000800
PROCEDURE ERRSKIP(X); VALUE X; REAL X; FORWARD;                         01000900
PROCEDURE PRTINFO(VALU); VALUE VALU; REAL VALU; FORWARD;                01000910
INTEGER PROCEDURE  GETINTRIN(X); VALUE X; INTEGER X; FORWARD;           01001000
BOOLEAN PROCEDURE  STATEMENT;   FORWARD;                                01001300
PROCEDURE EMITNUM(X); VALUE X; REAL X ; FORWARD;                        01001400
PROCEDURE ARITHVARB(FX); VALUE FX; REAL FX; FORWARD;                    01001500
PROCEDURE AEXPR; FORWARD;                                               01001700
PROCEDURE ARITHSEC;      FORWARD;                                       01001800
PROCEDURE SIMPARITH;     FORWARD;                                       01001900
PROCEDURE ARITHCOMP;     FORWARD;                                       01002000
PROCEDURE PRIMARY; FORWARD;                                             01002100
PROCEDURE     STATSEQ(FX); VALUE FX; REAL FX; FORWARD;                  01002105
DEFINE             BLKCTR = 16#;                                        01002110
PROCEDURE MATFUNC(FX); VALUE FX; REAL FX; FORWARD;                      01002112
PROCEDURE MATREAD; FORWARD;                                             01002115
PROCEDURE MATINPUT; FORWARD;                                            01002120
PROCEDURE MATPRINT; FORWARD;                                            01002125
BOOLEAN PROCEDURE SCRAMLOOK(LINENO); REAL LINENO; FORWARD;              01002126
PROCEDURE READLIST(MORS); VALUE MORS; BOOLEAN MORS; FORWARD;            01002127
PROCEDURE PRINTLIST(TOGGLE); VALUE TOGGLE; BOOLEAN TOGGLE; FORWARD;     01002128
PROCEDURE SCANFILEID(FIL); VALUE FIL; INTEGER FIL; FORWARD;             01002130
PROCEDURE GENIOCODE(INTRINO,MORS);         VALUE INTRINO,MORS;          01002131
    INTEGER   INTRINO,MORS;                  FORWARD;                   01002132
PROCEDURE          EOFLBL;  FORWARD ;                                   01002133
PROCEDURE          DEFLABEL(BOOL); VALUE BOOL; BOOLEAN BOOL; FORWARD;   01002135
PROCEDURE          GENERATEGOTO(BRA); VALUE BRA; INTEGER BRA; FORWARD;  01002140
DEFINE             PRTDESC =10#;   %DESC FOR PRT                        01002150
DEFINE             JUNK = 17#,                                          01002200
                   DATARRYDESC = 21#,                                   01002300
                   CDATADESC = 22#,                                     01002305
                   DATAPTR = 23#,                                       01002310
                   DATAWORDS = 24#,                                     01002315
                   POTDESC = 25#,                                       01002320
                   FILENDX = 26#;                                       01002400
COMMENT            DEFINES FOR VARIOUS CLASSES OF FUNDAMENTAL ELEMENTS  01002700
                      IN THE LANGUAGE                                   01002800
;                                                                       01002900
DEFINE             STRINGID= 001#,                                      01003000
                   ARITHID= 002#,                                       01003100
                   STATSTART= 003#,                                     01003200
                   NUMBER= 004#,                                        01003300
                   STRING= 5#,                                          01003400
                   DEFFUNCID= 6#,                                       01003500
                   STDFUNCID= 7#,                                       01003600
                   STEPV= 8#,                                           01003700
                   TOV= 9#,                                             01003800
                   GOTOV= 10#,                                          01003900
                   COMMA= 11#,                                          01004000
                   RPAREN= 12#,                                         01004100
                   RTPAREN= 12#,                                        01004200
                   LPAREN= 13#,                                         01004300
                   LTPAREN= 13#,                                        01004400
                    TABV = 14#,                                         01004500
                   COLON = 15#,                                         01004600
                   SEMICOLON= 16#,                                      01004700
                   PERCENT= 17#,                                        01004800
                   THENV= 18#,                                          01004900
                   LBRACKET= 19#,                                       01005000
                   RBRACKET= 20#,                                       01005100
                   CROSSHATCH = 21#,                                    01005200
                   FILEV = 22#,                                         01005205
                   READV = 23#,                                         01005210
                   INPUTV = 24#,                                        01005215
                   PRINTV = 25#,                                        01005220
                   OPTION = 26#,                                        01005225
                   RELNOP= 27#,                                         01005300
                   RELOP = 27#,                                         01005400
                   ASSIGNOP= 28#,                                       01005500
                   ASGNOP= 28#,                                         01005600
                   ADDOP = 29#,                                         01005700
                   ADOP= 29#,                                           01005800
                   MULOP= 30#,                                          01005900
                   EXPOPR= 31#;                                         01006000
DEFINE             SSPART=[42:6]#,                                      01006100
                   NEXTV= 11#,                                          01006200
                   ENDV= 4#;                                            01006400
COMMENT  WORD MODE OPERATORS - NUMERICAL LIST                           01006600
        ESPOL  DECIMAL                                                  01006700
    MNEMONIC   CODE                                                     01006800
;                                                                       01006805
DEFINE                                                                  01006900
         DEL = 0041#,   COMMENT   DELETE TOP OF STACK;                  01007000
         NOP = 0045#,   COMMENT   NO-OPERATION;                         01007100
         PRTE= 0049#,   COMMENT   PRT EXTENSION;                        01007200
         ADD = 0065#,   COMMENT   SINGLE PRECISION ADD;                 01007300
         DLA = 0069#,   COMMENT   DOUBLE PRECISION ADD;                 01007400
         PRL = 0073#,   COMMENT   PROGRAM RELEASE;                      01007500
         LNG = 0077#,   COMMENT   LOGICAL NEGATE;                       01007600
         GEQL= 0085#,   COMMENT   B GREATER THAN OR EQUAL TO A;         01007700
         BBC = 0089#,   COMMENT   BRANCH BACKWARD CONDITIONAL;          01007800
         INX = 0097#,   COMMENT   INDEX;                                01007900
         LOR = 0141#,   COMMENT   LOGICAL OR;                           01008000
         GTRT= 0149#,   COMMENT   B GREATER THAN A;                     01008100
         BFC = 0153#,   COMMENT   BRANCH FORWARD CONDITIONAL;           01008200
         RTN = 0157#,   COMMENT   RETURN NORMAL;                        01008300
         COC = 0161#,   COMMENT   CONSTRUCT  OPERAND CALL;              01008400
         SUB = 0193#,   COMMENT   SINGLE PRECISION SUBTRACT;            01008500
         DLS = 0197#,   COMMENT   DOUBLE PRECISION SUBTRACT;            01008600
         MUL = 0257#,   COMMENT   SINGLE PRECISION MULTIPLY;            01008700
         DLM = 0261#,   COMMENT   DOUBLE PRECISION MULTIPLY;            01008800
         LND = 0269#,   COMMENT   LOGICAL AND;                          01008900
         STD = 0273#,   COMMENT   "B" STORE DESTRUCTIVE;                01009000
         NEQL=0277#,   COMMENT B NOT EQUAL A;                           01009100
    SSN = 0281#,   COMMENT  SET SIGN BIT NEGATIVE;                      01009120
         XIT = 0285#,   COMMENT   EXIT;                                 01009200
         MKS = 0289#,   COMMENT   MARK STACK;                           01009300
         FDV = 0513#,   COMMENT   SINGLE PRECISION DIVIDE;              01009400
         DLD = 0517#,   COMMENT   DOUBLE PRECISION DIVIDE;              01009500
         COM = 0521#,   COMMENT   COMMUNICATION OPERATOR;               01009600
         LQV = 0525#,   COMMENT   LOGICAL EQUIVALENCE;                  01009700
         SND = 0529#,   COMMENT   "B" INTEGER STORE NON-DESTRUCTIVE;    01009800
         XCH = 0533#,   COMMENT   EXCHANGE;                             01009900
         CHS = 0537#,   COMMENT   CHANGE SIGN;                          01010000
         RTS = 0669#,   COMMENT   RETURN SPECIAL;                       01010100
         CDC = 0673#,   COMMENT   CONSTRUCT DESCRIPTOR CALL;            01010200
         FTC = 0788#,   COMMENT   TRANSFER F FIELD TO CORE FIELD;       01010300
         LOD = 1041#,   COMMENT   LOD OPERATOR;                         01010400
         DUP = 1045#,   COMMENT   DUPLICATE;                            01010500
         IOR = 1097#,   COMMENT   I/O RELEASE;                          01010600
         LBC = 1113#,   COMMENT   WORD BRANCH BACKWARD CONDITIONAL;     01010700
         GBC = 1113#,   COMMENT   DITTO;                                01010800
         SSF = 1121#,   COMMENT   SET OR STORE F-REGISTERS;             01010900
         LFC = 1177#,   COMMENT   WORD BRANCH FORWARD CONDITIONAL;      01011000
         GFC = 1177#,   COMMENT   DITTO;                                01011100
         ZP1 = 1289#,   COMMENT   CONDITIONAL HALT;                     01011200
         IDV = 1537#,   COMMENT   INTEGER DIVIDE;                       01011300
         FTF = 1813#,   COMMENT   TRANSFER F FIELD TO F FIELD;          01011400
         SFB = 2061#,   COMMENT   SET FLAG BIT;                         01011500
         ISD = 2129#,   COMMENT   INTEGER STORE DESTRUCTIVE;            01011600
         LEQL= 2133#,   COMMENT   B LESS THAN OR EQUAL TO A;            01011700
         BBW = 2137#,   COMMENT   BRANCH BACKWARD UNCONDITIONAL;        01011800
         ISN = 2193#,   COMMENT   INTEGER STORE NON-DESTRUCTIVE;        01011900
         LSST= 2197#,   COMMENT   B LESS THAN A;                        01012000
         BFW = 2201#,   COMMENT   BRANCH FORWARD UNCONDITIONAL;         01012100
         EQL = 2325#,   COMMENT   B EQUAL TO A;                         01012200
         SSP = 2329#,   COMMENT   SET SIGN POSITIVE;                    01012300
         CMN = 2337#,   COMMENT   ENTER CHARACTER MODE IN LINE;         01012400
         ECM = 2337#,   COMMENT   DITTO;                                01012500
         CTC = 2837#,   COMMENT   TRANSFER CORE FIELD TO CORE FIELD;    01012600
         LBU = 3161#,   COMMENT   WORD BRANCH BACKWARD UNCONDITIONAL;   01012700
         GBW = 3161#,   COMMENT   DITTO;                                01012800
         LFU = 3225#,   COMMENT   WORD BRANCH FORWARD UNCONDITIONAL;    01012900
         GFW = 3225#,   COMMENT   DITTO;                                01013000
         RDV = 3585#,   COMMENT   REMAINDER DIVIDE;                     01013100
         CTF = 3861#,   COMMENT   TRANSFER CORE FIELD TO F FIELD;       01013200
    COMMENT   WORD MODE OPERATORS EMITTED BY EMITCOP(0P);               01013300
         ISO = 37#,COMMENT VARIABLE FIELD ISOLATE;                      01013400
         CBD = 41#,COMMENT NON-ZERO FIELD BRANCH BACKWARD DESTRUCTIVE;  01013500
         CBN = 41#,COMMENT NON-ZERO FIELD BRNCH BKWD NON-DESTRUCTIVE;   01013600
         CFD = 41#,COMMENT NON-ZERO FIELD BRANCH FWD DESTRUCTIVE;       01013700
         CFN = 41#,COMMENT NON-ZERO FIELD BRANCH FWD NON-DESTRUCTIVE;   01013800
         DIA = 45#,COMMENT DIAL A;                                      01013900
         CEQ = 48#,COMMENT COMPARE FOR EQUAL;                           01014000
         CNE = 49#,COMMENT COMPARE FOR NOT EQUAL;                       01014100
         DIB = 49#,COMMENT DIAL B;                                      01014200
         CGE = 50#,COMMENT COMPARE FOR GREATER OR EQUAL;                01014300
         CGR = 51#,COMMENT COMPARE FOR GREATER;                         01014400
         TRB = 53#,COMMENT TRANSFER BITS;                               01014500
         CEL = 56#,COMMENT COMPARE FOR EQUAL OR LESS;                   01014600
         CLS = 57#,COMMENT COMPARE FOR LESS;                            01014700
         FCL = 57#,COMMENT COMPARE FIELD LOW;                           01014800
         CFL = 57#,COMMENT DITTO;                                       01014900
         FCE = 61#,COMMENT COMPARE FIELD EQUAL;                         01015000
         CFE = 61#,COMMENT DITTO;                                       01015100
COMMENT  CHARACTER MODE OPERATORS-NUMERICAL LIST                        01015200
        ESPOL  DECIMAL                                                  01015300
    MNEUMONIC  CODE               OPERATION;                            01015400
         EXC = 00#,COMMENT   EXIT CHARACTER MODE;                       01015500
         CMX = 00#,COMMENT   EXIT CHARACTER MODE IN LINE;               01015600
         BSD = 02#,COMMENT   SKIP DESTINATION BIT;                      01015700
         SBD = 02#,COMMENT   DITTO;                                     01015800
         BSS = 03#,COMMENT   SKIP BIT SOURCE;                           01015900
         SBS = 03#,COMMENT   DITTO;                                     01016000
         RDA = 04#,COMMENT   RECALL DESTINATION ADDRESS;                01016100
         TRW = 05#,COMMENT   TRANSFER WORDS;                            01016200
         TWD = 05#,COMMENT   DITTO;                                     01016300
         SED = 06#,COMMENT   SET DESTINATION ADDRESS;                   01016400
         TDA = 07#,COMMENT   TRANSFER DESTINATION ADDRESS;              01016500
         TBN = 10#,COMMENT   TRANSFER BLANKS FOR NON-NUMERICS;          01016600
         SDA = 12#,COMMENT   STORE DESTINATION ADDRESS;                 01016700
         SSA = 13#,COMMENT   STORE SOURCE ADDRESS;                      01016800
         SFD = 14#,COMMENT   SKIP FORWARD DESTINATION;                  01016900
         SRD = 15#,COMMENT   SKIP REVERSE DESTINATION;                  01017000
         SES = 18#,COMMENT   SET SOURCE ADDRESS;                        01017100
         TEQ = 20#,COMMENT   TEST FOR EQUAL;                            01017200
         TNE = 21#,COMMENT   TEST FOR NOT EQUAL;                        01017300
         TEG = 22#,COMMENT   TEST FOR GREATER OR EQUAL;                 01017400
         TGE = 22#,COMMENT   DITTO;                                     01017500
         TGR = 23#,COMMENT   TEST FOR GREATER;                          01017600
         SRS = 24#,COMMENT   SKIP REVERSE SOURCE;                       01017700
         SFS = 25#,COMMENT   SKIP FORWARD SOURCE;                       01017800
         TEL = 28#,COMMENT   TEST FOR EQUAL OR LESS;                    01017900
         TLS = 29#,COMMENT   TEST FOR LESS;                             01018000
         TAN = 30#,COMMENT   TEST FOR ALPHANUMERIC;                     01018100
         TFA = 30#,COMMENT   DITTO;                                     01018200
         BIT = 31#,COMMENT   TEST BIT;                                  01018300
         TBT = 31#,COMMENT   DITTO;                                     01018400
         INC = 32#,COMMENT   INCREASE TALLY;                            01018500
         INT = 32#,COMMENT   DITTO;                                     01018600
         STC = 33#,COMMENT   STORE TALLY;                               01018700
         STT = 33#,COMMENT   DITTO;                                     01018800
         SEC = 34#,COMMENT   SET TALLY;                                 01018900
         SET = 34#,COMMENT   DITTO;                                     01019000
         CRF = 35#,COMMENT   CALL REPEAT FIELD;                         01019100
         JNC = 36#,COMMENT   JUMP OUT OF LOOP CONDITIONAL;              01019200
         JLC = 36#,COMMENT   DITTO;                                     01019300
         JFC = 37#,COMMENT   JUMP FORWARD CONDITIONAL;                  01019400
         JNS = 38#,COMMENT   JUMP OUT OF LOOP UNCONDITIONAL;            01019500
         JLP = 38#,COMMENT   DITTO;                                     01019600
         JFW = 39#,COMMENT   JUMP FORWARD UNCONDITIONAL;                01019700
         JFU = 39#,COMMENT   DITTO;                                     01019800
         RCA = 40#,COMMENT   RECALL CONTROL ADDRESS;                    01019900
         ENS = 41#,COMMENT   END LOOP;                                  01020000
         ELP = 41#,COMMENT   DITTO;                                     01020100
         BNS = 42#,COMMENT   BEGIN LOOP;                                01020200
         BLP = 42#,COMMENT   DITTO;                                     01020300
         RSA = 43#,COMMENT   RECALL SOURCE ADDRESS;                     01020400
         SCA = 44#,COMMENT   STORE CONTROL ADDRESS;                     01020500
         JRC = 45#,COMMENT   JUMP REVERSE CONDITIONAL;                  01020600
         TSA = 46#,COMMENT   TRANSFER SOURCE ADDRESS;                   01020700
         JRV = 47#,COMMENT   JUMP REVERSE UNCONDITIONAL;                01020800
         JRU = 47#,COMMENT   DITTO;                                     01020900
         BIS = 52#,COMMENT   SET BIT;                                   01021000
         SEB = 52#,COMMENT   SET BIT;                                   01021100
         BIR = 53#,COMMENT   RESET BIT;                                 01021200
         REB = 53#,COMMENT   DITTO;                                     01021300
         OCV = 54#,COMMENT   OCTAL CONVERT;                             01021400
         ICV = 55#,COMMENT   INPUT CONVERT;                             01021500
         FSU = 58#,COMMENT   FIELD SUBTRACT;                            01021600
         FAD = 59#,COMMENT   FIELD ADD;                                 01021700
         TRP = 60#,COMMENT   TRANSFER PROGRAM CHARACTERS;               01021800
         TRN = 61#,COMMENT   TRANSFER NUMERIC;                          01021900
         TNU = 61#,COMMENT   DITTO;                                     01022000
         TRZ = 62#,COMMENT   TRANSFER ZONES;                            01022100
         TZN = 62#,COMMENT   DITTO;                                     01022200
         TRS = 63#;COMMENT   TRANSFER SOURCE CHARACTERS;                01022300
DEFINE             WINVRELNPART = [24:12]#,      %ELBAT FLDS,RELOP      01022400
                   WRELNPART = [36:12]#,                                01022500
                   CINVRELNPART = [12:6]#,                              01022600
                   CRELNPART = [18:6]#;                                 01022700
DEFINE             FL = 1#, FP = 2#;    %FL - FROM LET, FP -FROM PRIMARY01022800
DEFINE             FR = 3#;    %FR - FROM READLIST                      01022900
DEFINE             EQUIV(EQUIV1,EQUIV2) =                               01030000
                      REAL(BOOLEAN(EQUIV1) EQV BOOLEAN(EQUIV2))         01030100
                      = REAL(NOT FALSE)#;                               01030200
COMMENT            DEFINES FOR IMPLICIT INTRINSICS.                     01100000
                   INDICES INTO RESERVED WORD ARRAY (RWARRY).           01100100
;                                                                       01100200
DEFINE             ALGOLWRITE = 100#,                                   01100205
                   ALGOLREAD = 102#,                                    01100210
                   ALGOLSELECT =104#,                                   01100215
                   BLOCKCONTROL = 106#,                                 01100220
                   LOGI = 65#,                                          01100300
                   EXPI = 57#,                                          01100305
                   MATINV = 63#,                                        01100307
                   MATTRN = 79#,                                        01100309
                   XTOTHEI = 113#,                                      01100310
COMMENT       REL. POS. IN RWARRY-MATRIX FUNCTION;                      01100315
         MATRIXFUNC = (RR8 = 51   %CON                                  01100317
                   OR RR8 = 59    %IDN                                  01100319
                   OR RR8 = 63    %INV                                  01100320
                   OR RR8 = 79    %TRN                                  01100322
                   OR RR8 = 81)#, %ZER                                  01100325
                   PRINTI = 101#,                                       01100400
                   READI = 103#,                                        01100500
                   INPUTI = 105#,                                       01100600
                   MADDI = 107#,                                        01100700
                   MMPYI = 109#,                                        01100800
                   BCLOSEI = 111#;                                      01100900
DEFINE             INTRINDX = 47#;                                      01101200
COMMENT            ***** SECTION 03 *****                               03000000
                   GLOBAL DECLARATIONS ( MOST OF THEM, ANYWAY)          03000001
                   *****            *****                               03000002
;                                                                       03000003
BOOLEAN            EQUALMODETOG ;     %TRUE - RELOP, FALSE - ASGNOP     03000004
DEFINE             RELOPMODE = TRUE#,                                   03000100
                   ASGNOPMODE = FALSE#;                                 03000200
REAL ARRAY         RWARRY[0:139]; % ARRAY OF RESERVE WORDS              03000900
                         %FIRST PART STATEMENT STARTERS                 03001000
                         %SECOND PART IMBEDDED WORDS                    03001100
                         %FORMAT OF EACH ELEMENT:                       03001200
                         %CHAR 1-8 - BCD CHAR LEFT JUST W/ "0" PADDING  03001400
                         %MUST BE ORDERED BY ASCENDING CHAR CT          03001500
                         %   (WITHIN EACH PART) FOR PROPER OPERATION    03001600
                         %   OF THE SCANNER                             03001700
INTEGER ARRAY      CTARRY[0:17];  %LAST ELEMENT# IN EA RES WD GROUP     03001800
                         %   OF RWARRY                                  03001900
INTEGER            SCANMODE;   % 1-STATSTART, 2-IMBEDDED WD, 3- OPTION  03002000
DEFINE             SSMODE = 1#, IWMODE = 2#, OPMODE = 3#;               03002100
DEFINE     SSFIRST = 0#,                                                03002200
              SSGROUPS = 6#,                                            03002300
                   IWFIRST = 42#,                                       03002400
                   IWGROUPS = 6#,                                       03002500
                   SS1 = 0#,                                            03002510
                   IW1 = 6#;                                            03002520
DEFINE             OPFIRST = 114#,                                      03002580
                   OPGROUPS = 6#,                                       03002585
                   OP1 = 12#;                                           03002590
ARRAY CHARRY[0:77];      %ARRAY FILLED BY STREAM PROCEDURE FOR EACH     03002600
                         %   INPUT CARD                                 03002700
                         %   ELEMENTS ARE OF THE FORM:                  03002800
                         %   1)LINE NO- CHARRY[0] AS OCTAL INTEGER      03002900
                         %   2)SPEC CHAR- INTERNAL CODE AS NEG INTEGER  03003000
                         %   3)DIGIT- INTERNAL CODE AS NON-NEG INTEGER  03003100
                         %   4)LETTER- INTERNAL CODE AS POS INTEGER     03003200
                         %   5)STRING LIT- 3 WDS:                       03003300
                         %      A)SPEC CHAR QUOTE (AS ABOVE IN 2)       03003400
                         %      B)CHAR1 THRU CHAR8                      03003500
                         %      C)CHAR9 THRU CHAR15 W/ PAD BLANK,       03003600
                         %         CHAR16 IS COLL SEQ CNTR              03003700
REAL CNDX;               %INDEX INTO CHARRY                             03003800
BOOLEAN  CARDENDTOG;     % TRUE IF CARD SCAN COMPLETE                   03003802
REAL ARRAY         SPECIAL[0:31]; %ELBAT WORDS FOR SPECIAL CHARACTERS   03003805
REAL ARRAY         PRT[0:15,0:63];     % PRT OF OBJECT PROGRA7          03003880
INTEGER            PRTNDX;                                              03003885
DEFINE             PRTWD = PRTNDX.[38:04],PRTNDX.[42:06]#;              03003890
INTEGER            PRTADDR;  %LAST ASSIGNED PRT ADDR                    03003895
INTEGER            DOLARRY;         %PRT ADDR FOR DESCR FOR SIMP STR VAR03003900
INTEGER            DOLNDX;     %LAST USED INDEX INTO DOLARRY            03004000
DEFINE DOLNDEX=DOLNDX#;                                                 03004100
REAL ARRAY         STR[0:1];   %2 WDS FOR STRING LITERAL BLT BY SCANNER 03004200
DEFINE             STRINGLIT=STR[0]#,                                   03004300
                   STRINGWDS=STR[0]#;                                   03004400
REAL          PRTRND;              %USED BY RANDOM VARIABLE FUNCTION.   03004410
INTEGER            EXPRSTATE;   %RESULT RETURNED BY AEXPR FOR OPTIMIZING03004500
                                %0- COMPLEX EXPR                        03004600
                                %1- NON-NEG INTEGER <1024               03004700
                                %2- NON-NEG REAL                        03004800
                                %3- NEG REAL                            03004900
                                %4- NEG INTEGER >-1024                  03005000
                                %5- U- COMPLEX EXPRESSION               03005100
REAL               C;    %HOLDS VALUE OF NUMBER FROM SCANNER            03005200
COMMENT            CODE GENERATED FOR OBJECT PROGRAM IS PLACED IN THE   03005205
                      EDOC ARRAY BY VARIOUS EMITTERS ( SEE SEC #05).    03005210
                   CODE SEGMENTS ARE { 256 WORDS.                       03005215
;                                                                       03005220
REAL ARRAY         EDOC[0:255];                                         03005221
DEFINE        SEGSIZE = 150#;    %MIN WD LENGTH OF CODE SEG             03005222
DEFINE             EDOCCLM = [38:8]#;                                   03005225
DEFINE             EDOCSYL = [46:2]#;                                   03005230
COMMENT            LINE DICTIONARY                                      03005235
                   ONE ENTRY FOR EACH CODE SEGMENT                      03005240
                   [18:15] - REL DISC ADDR OF LINE SEG #N               03005245
                   [33:15] - LENGTH OF LINE SEG #N                      03005250
;                                                                       03005255
REAL ARRAY         LD[0:127];                                           03005260
COMMENT            LINE SEGMENT ARRAY                                   03005265
                   [38:10] - REL WD  ADDR WITHIN CODE SEGMENT           03005270
                   [10:28] - SEG#  (BINARY)                             03005275
;                                                                       03005280
REAL ARRAY         LINESEG[0:255];                                      03005285
DEFINE             SDLINK =[6:12]#;                                     03005290
INTEGER            LINENOCTR;    %NEXT AVAIL NDX INTO LINESEG           03005295
REAL ARRAY         SEG0[0:21];     %SEGMENT #0                          03005298
INTEGER       L;                                                        03005300
DEFINE             BUMPL = L~L+2#;                                      03005305
DEFINE        SEGNO = [31:7]#;                                          03005310
DEFINE             WDNO = [38:8]#;                                      03005315
COMMENT  L POINTS TO THE NEXT AVAILABLE SYLLABLE IN THE CODE STREAM.    03005320
         L.[31:7] CONTAINS THE SEGMENT NO. OF THE SEGMENT BEING COM-    03005330
         PILED, L.[38:8] CONTAINS THE RELATIVE ADDRESS INTO THE SEGMENT,03005340
         AND L.[46:2] POINTS TO THE SYLLABLE WITHIN THE WORD.           03005350
;                                                                       03005360
INTEGER            GENLABCTR;   % 8*9-1 INIT, THEN -1 FOR EA GENLAB     03005380
REAL ARRAY         DICT [17:57,0:13];                                   03005400
COMMENT  AN ENTRY IS MADE IN THE DICT FOR EACH SIMPLE OR STRING VARIABLE03005500
           AND FOR EACH DEFINED FUNCTION. AN ENTRY IN DICT IS ACCESSED  03005600
           DIRECTLY BY THE FOLLOWING METHOD.                            03005700
         THE ROW INDEX FOR A DICT ENTRY IS OBTAINED BY USING THE <ALPHA>03005800
           REPRESENTATION OF THE VARIABLE.                              03005900
         THE COLUMN INDEX IS OBTAINED BY USING:                         03006000
           1. COLUMNS 0-9 FOR VARIABLES OF THE FORM <ALPHA> <DIGIT>.    03006100
           2. COLUMN 10 FOR THE VARIABLE <ALPHA>,                       03006200
           3. COLUMN 11 FOR STRING VARIABLES <ALPHA>$ AND               03006300
           4. COLUMN 12 FOR DEFINED FUNCTIONS FN<ALPHA>.                03006400
         5. COLUMN 13 FOR EXTRA INFO - ARITH,STR DIMENS, DEFFN CODE ADDR03006405
THE FORM OF THE DICT ENTRY IS:                                          03006500
           SIMPLE VARIABLE*** ARRAY NAME***      STD. OR DEF.           03006600
                                                 FUNCTION               03006700
   [1:5]   CLASS                CLASS          CLASS                    03006800
   [6:11]                     ARRAY ADDRESS      STD OR FUNCTION        03006900
                                                 DESC ADDRESS           03007000
    [17:11]   SIMPLE ADDRESS                                            03007100
                                                 INTRINSIC #**          03007200
                                                IN-LINE FLAG - SET IFF  03007205
                                                CODE FOR INTRINSICS IS  03007210
                                                COMPILED IN-LINE.       03007215
   [28:2]                     # OF DIMENSIONS    [28:5] NUMBER OF       03007300
                                0 = UNKNOWN      PARAMETERS FOR DEFINE  03007400
                                1 = ONE DIM      FUNCTION.              03007500
                                2 = TWO DIM                             03007600
   [31:1]                     ARRAY SEGMENTA-                           03007700
                              TION FLAG                                 03007800
   [33:1]  DEFINE FLAG-SET                                              03007900
           IF SIMPLE VARIA                                              03008000
           BLE APPEARS IN                                               03008100
           LEFT PART LIST                                               03008200
           OR READ STATEMENT                                            03008300
   [34:1]  REF FLAG - SET IF                                            03008400
           SIMPLE VARBL APPEARS                                         03008500
           IN EXPR OR WRITE                                             03008600
           PRESSION OR WRITE                                            03008700
           STATEMENT.                                                   03008800
   [35:1]                     DEF FLAG-SET IF    DEF FLAG-SET IF FUNC-  03008900
                              ARRAY VARIABLE     TION OF FORM FN<ALPHA> 03009000
                              APPEARS IN DECLAR- APPEARS IN A DEFINE    03009100
                              ATION,LEFT PART    STATEMENT. NOT USED    03009200
                              LIST OR READ       BY INTRINSICS.         03009300
                              STATEMENT.                                03009400
   [36:1]                     REF FLAG-SET IF    REF FLAG-SET IF DEFINED03009500
                              ARRAY VARIABLE     FUNCTION APPEARS IN AN 03009600
                              APPEARS IN AN      ARITHMETIC EXPRESSION  03009700
                              EXPRESSION.        OR WRITE STATEMENT.    03009800
   [37:1]  MONITOR FLAG       MONITOR FLAG       MONITOR FLAG           03009900
  [38:10]  SELF LINK          SELF-LINK          SELF-LINK              03010000
           LINK POINTING TO THIS ENTRY IN DICT.                         03010100
           ROW INDEX = [38:6]  COLUMN INDEX = [44:4]                    03010200
*    THE SIMPLE ADDRESS IN [17:11] IS INTERPRETED AS AN INDEX INTO      03010300
     DOLARRY FOR STRING SIMPLE VARIABLES.                               03010400
**   NOTE: A  SIMPLE AND ARRAY VARIABLE WITH IDENTICAL NAMES REFERENCE  03010500
    THE SAME LOCATION IN DICT                                           03010505
         COLUMN 13  (EXTRA INFO):                                       03010510
              [3:10]  ARITH DIM 1                                       03010515
              [13:10] ARITH DIM 2                                       03010520
              [23:10] STRING DIM 1                                      03010525
              [33:15] DEF FN  CODE ADDR                                 03010530
;                                                                       03010595
REAL LBAT;                                                              03010596
COMMENT  USED BY ARITHMETIC EXPRESSION ROUTINES AS TEMPORARY STORAGE    03010597
         FOR ELBAT WORD.                                                03010598
;                                                                       03010599
DEFINE             CFUNC = 12#;                                         03010600
REAL               ELBAT;     %CURRENT ELBAT WORD AS DEFINED BELOW:     03010601
DEFINE             ARRYADDRPART=[6:11]#,                                03010602
                   DIMPART = [28:2]#,                                   03010604
                   DICTROW=[38:6]#,                                     03010605
                   DICTCLM=[44:4]#,                                     03010606
                   SIMPADDRPART =[17:11]#,                              03010607
                   SIMPDEFFLAGPART = [33:1]#,                           03010608
                   SIMPREFFLAGPART = [34:1]#,                           03010609
                   ARRYDEFFLAGPART = [35:1]#,                           03010610
                   ARRYREFFLAGPART = [36:1]#;                           03010611
DEFINE             CLASS = [1:5]#;   %CLASS PART OF ELBAT WD            03010612
DEFINE        INLINFLAG = [17:1]#;                                      03010613
DEFINE        NOPARAMS = [28:5]#,                                       03010614
       FUNCDEFFLAGPART=ARRYDEFFLAGPART#,                                03010615
       FUNCREFFLAGPART=ARRYREFFLAGPART#,                                03010616
       FUNCADDRPART=ARRYADDRPART#;                                      03010617
INTEGER            ELCLASS;  %CLASS OF QUANTITY FOR CURRENT ELBAT WORD. 03010618
DEFINE             DIM1PART = [3:10]#;                                  03010640
DEFINE             DIM2PART=[13:10]#;                                   03010642
DEFINE             SDIM1PART = [23:10]#;                                03010644
DEFINE             CXTRAINFO = 13#;                                     03010646
REAL ARRAY WOP[0:129],COP[0:63],POP[0:10];                              03010700
              COMMENT ARRAYS WOP, COP AND POP ARE FILLED WITH THE ESPOL 03010800
                WORD MODE AND CHARACTER MODE MNEUMONICS. THEY ARE USED  03010900
                BY DEBUG TO GENERATE DEBUG OUTPUT IF DEBUGTOG IS TRUE;  03011000
REAL ARRAY ERRMSG[0:15,0:63];                                           03011005
COMMENT       ERRMSG CONTAINS THE ERROR MESSAGES BY ROW: THE ERROR      03011015
                NUMBER CORRESPONDS TO THE ROW  CONTAINING THE ERROR     03011020
                MESSAGE                                                 03011025
                                                                        03011030
;                                                                       03011035
BOOLEAN       ERRMSGTOG,ERRSUPTOG;                                      03011040
COMMENT       ERRMSGTOG TRUE IF ERRMSG ARRAY HAS BEEN FILLED            03011045
                ELSE FALSE.                                             03011050
              ERRSUPTOG TRUE IF PRINTING OF ERROR MESSAGES SUPPRESSED   03011055
                ELSE FALSE.                                             03011060
;                                                                       03011065
ARRAY LIN[0:15];   COMMENT PRINTER OUTPUT PLACED IN LIN ARRAY;          03011100
COMMENT THE ORDER OF THESE FILE DECLARATIONS MUST NOT BE CHANGED. SEE   03011185
         PROCEDURE GETLOCFPB AND FOLLOWING CODE.                        03011190
;                                                                       03011195
FILE IN CARD(RR1,10,RR2);                                               03011200
SAVE FILE OUT LINE DISK SERIAL[20:2400] (RR3,15,RR4,SAVE 10);           03011205
SAVE FILE OUT NEWTAPE DISK SERIAL[20:2400] (RR5,RR6,RR7,SAVE 1);        03011210
FILE IN TAPE "0CRDIMG" (2,RR8,RR9);                                     03011215
DEFINE             CODESIZ =180#;  %# LOG RCDS (DISK SEGS) PER ROW      03011220
FILE OUT           CODE DISK [20:CODESIZ] (2,30,SAVE ABS(SAVETIME));    03011225
FILE OUT           REMOTE  14 (2,10);                                   03011226
REAL ARRAY         BLANKARRY[0:14];                               %DEBUG03011230
DEFINE             BLANKLINE = MOVEWDS(15,BLANKARRY,LIN)#;        %DEBUG03011235
                                                                        03011250
DEFINE SINGLINE = IF SINGLTOG THEN WRITE(LINE,15,LIN[*])                03011280
                  ELSE WRITE(LINE[DBL],15,LIN[*])#;                     03011290
DEFINE WRITELINE = IF REMOTETOG THEN WRITE(REMOTE,10,LIN[*])  ELSE      03011295
                     IF SINGLTOG THEN WRITE(LINE,15,LIN[*])             03011299
                     ELSE WRITE(LINE[DBL],15,LIN[*])#;                  03011300
FORMAT BUG(A3,":",A1,X2,3(A4,X2));                                      03011301
INTEGER  SEQBASE,  COMMENT STARTING NUMBER USED TO RE-SEQUENCE CRD FILE;03011390
         SEQINCR;  COMMENT INCREMENT USED TO RESEQUENCE NEW CARD FILE;  03011395
REAL     ENDVOID;  %VOID UP TO BUT NOT INCLUDING ENDVOID                03011404
                                                                        03011405
                                                                        03011410
COMMENT  EXPRSTATE IS USED BY THE EMITTERS AND ARITHSEC TO OPTIMIZE     03011500
           CODE IF ONE OF THE FOLLOWING CASES OCCURS. IF EXPRSTATE      03011600
    = 0   NON-CONSTANT EMITTED(EXPRSTATE~0. SET BY EMIT).               03011700
    = 1   LITC EMITTED(EXPRSTATE~1. SET BY EMITNUM).                    03011800
    = 2   OPDC, !CONST EMITTED(EXPRSTATE~2. SET BY EMITNUM).            03011900
    = 3   OPDC, -CONST EMITTED(EXPRSTATE~EXPRSTATE-5. SET BY EMITNUM    03012000
            THEN ARITHSEC).                                             03012100
    = 4   LITC, CHS EMITTED(EXPRSTATE~EXPRSTATE-5. SET BY EMITNUM THEN  03012200
            ARITHSEC).                                                  03012300
    = 5   CHS EMITTED(EXPRSTATE~EXPRSTATE-5. SET BY ARITHSEC);          03012400
REAL ARRAY         INFO[0:63,0:255];   %SEE SEC#13 FOR DESCRIPTION      03013100
REAL ARRAY    SINFO[0:126];  %SEE SECTION#13 FOR DESCRIPTION            03013102
INTEGER            NEXTAVAILINFO;   % LAST USED NDX INTO INFO           03013105
DEFINE             CODELINK = [18:15]#;                                 03013110
INTEGER            FWDREFHEAD;    %STACK HD, FWD REF CODE LINKS         03013115
DEFINE             DEFFLAG = [6:1]#;                                    03013105
INTEGER            INFONDX;                                             03013200
DEFINE             INFOWD2 = (INFONDX+1).[34:6],(INFONDX+1).[40:8]#;    03013300
DEFINE             INFOWD = INFONDX.[32:8],INFONDX.[40:8]#;             03013305
DEFINE   NEXTINFO = (INFONDX~NEXTAVAILINFO~NEXTAVAILINFO +2).[32:8]     03013310
           ,INFONDX.[40:8]#,                                            03013315
         LINENO = C#,                                                   03013316
         NUMBPART = [6:27]#,                                            03013317
         MATRIX = 1#, SCALAR = 0#,                                      03013320
         VARIABLES = TRUE#, ARRAYNAMES = FALSE#,                        03013325
         FILEDSG = TRUE#, NOFILEDSG = FALSE#;                           03013330
REAL               TYPEWORD;                                            03013340
                   %[01:06] - # OF ELEMENTS IN LIST.                    03013350
                   %[07:39] - /-ARITH, 1-STRING.                        03013360
                   %[46:01] - 0-TTY, 1-FILE.                            03013370
                   %[47:01] - 0-SCALAR, 1-MATRIX.                       03013380
DEFINE             PRTADDRPART = [7:11]#;                               03013400
BOOLEAN STRINGTOG;                                                      03150000
COMMENT STRINGTOG SET TRUE ON ENTRY TO STRINGVARIABLE RTNE., SET FALSE  03150100
         ON EXIT.                                                       03150200
;                                                                       03150300
DEFINE             OVERLAYABLE = 0#, SAV = 1#; %TYPE OF ARRAY STOR      03160000
REAL               TLCR, CLCR;   % ADDR WD 9, LAST TAPE AND CARD RCD    03170000
COMMENT       CC1  - FIRST WD OF CURRENT INPUT CARD                     03170100
              CC73 - TENTH WD OF CURRENT INPUT CARD                     03170200
              LASTUSED  - 0-CARD ONLY, 1- CARD LAST, 2-TAPE LAST ;      03170300
INTEGER            CC1, CC73, LASTUSED;                                 03170400
COMMENT            ***** SECTION 04 *****                               04000000
                   UTILITY PROCEDURES                                   04000100
                      SETABIT                                           04000105
                      ALLOCPRT                                          04000200
                      GETARRYADDR                                       04000300
                      GETSIMPADDR                                       04000400
                      SETARRYDEFFLAG                                    04000500
                      SETARRYREFFLAG                                    04000600
                      SETSIMPDEFFLAG                                    04000700
                      SETSIMPREFFLAG                                    04000800
                      GETFUNCREFFLAG                                    04000805
                      SETFUNCREFFLAG                                    04000810
                      SETFUNCDEFFLAG                                    04000815
                      GET                                               04000900
                      STEPI                                             04000902
                      STEPIT                                            04000904
                      STUFFBACK                                         04000906
                      MOVEWDS                                           04000908
                      MOVECHR                                           04000910
                      CHEKDIMENS                                        04000912
                      GETSIMPSTRINGPART                                 04000914
                      FILLERRMSG                                        04000916
                      FILLWITHERRMSG                                    04000918
                      ERR                                               04000920
                      ERRSUP                                            04000922
                      ERRSKIP                                           04000924
                      GETINTRIN                                         04000926
                      BUILSD                                            04000927
                      WRITESEG                                          04000928
                      BUILDPROGDESC                                     04000929
                      WRITECODESEG                                      04000930
                      FILLDEBUGARRAYS                                   04000932
                      DOLLARCARD                                        04000934
                   *****           *****                                04001000
;                                                                       04001100
COMMENT  GETABSADDR RETURNS ABSOLUTE ADDRESS;                           04001105
REAL STREAM PROCEDURE  GETABSADDR(X);                                   04001110
              BEGIN                                                     04001115
                   DI ~ X;                                              04001120
                   GETABSADDR ~ DI;                                     04001125
              END  OF GETABSADDR;                                       04001130
COMMENT            SETABIT WILL SET A BIT TO 0 OR 1                     04001200
                      IN THE WORD SPECIFIED BY WORD, BIT POSITION BIT,  04001300
                      DEPENDING ON VALUE OF VALU (0-FALSE, 1-TRUE)      04001400
                   RESULT IS (BIT)+1                                    04001500
;                                                                       04001600
INTEGER STREAM PROCEDURE   SETABIT(WORD,BIT,VALU);                      04001700
VALUE              BIT, VALU;                                           04001800
              BEGIN                                                     04001900
                   DI ~ WORD;                                           04002000
                   SKIP BIT DB;                                         04002100
                   SI ~ LOC VALU;                                       04002200
                   SI ~ SI+7;                                           04002300
                   SKIP 5 SB;                                           04002400
                   IF SB THEN                                           04002500
                      DS ~ 1 SET                                        04002600
                   ELSE                                                 04002700
                      DS ~ 1 RESET                                      04002800
                   ;                                                    04002805
                   TALLY ~ BIT;                                         04002810
                   TALLY ~ TALLY + 1;                                   04002815
                   SETABIT ~ TALLY;                                     04002820
              END  OF SETABIT;                                          04002825
COMMENT            GET NEXT AVAIL PRT CELL, INCR PTR TO CURRENT AVAIL;  04002900
INTEGER PROCEDURE ALLOCPRT;                                             04003000
     ALLOCPRT ~ IF PRTADDR~PRTADDR+1 > 511 THEN PRTADDR+1024            04003100
                                           ELSE PRTADDR;                04003200
COMMENT IF NOT PRESENT (I.E. =0), ALLOCATE PRT ADDR FOR ARRAY           04003300
     DESCRIPTOR AND STUFF INTO ELBAT WORD;                              04003400
PROCEDURE GETARRYADDR;                                                  04003500
    BEGIN                                                               04003510
    IF ELBAT.ARRYADDRPART = 0                                           04003600
    THEN BEGIN                                                          04003610
         ELBAT.ARRYADDRPART ~ ALLOCPRT;                                 04003620
         IF PRTOG THEN PRTINFO(-"ARRAY.");                              04003630
         END                                                            04003640
    END GETARRYADDR;                                                    04003700
COMMENT IF NOT PRESENT (I.E. =0), ALLOCATE PRT ADDR FOR SIMPLE          04003800
     ARITH VARBL AND STUFF INTO ELBAT WORD;                             04003900
PROCEDURE GETSIMPADDR;                                                  04004000
    BEGIN                                                               04004010
    IF ELBAT.SIMPADDRPART=0                                             04004100
    THEN BEGIN                                                          04004110
         ELBAT.SIMPADDRPART ~ ALLOCPRT;                                 04004120
         IF PRTOG THEN PRTINFO("      ");                               04004130
         END;                                                           04004140
    END GETSIMPADDR;                                                    04004200
COMMENT SET ARRAY DEFINE FLAG;                                          04004300
PROCEDURE SETARRYDEFFLAG; ELBAT.ARRYDEFFLAGPART ~ 1;                    04004400
COMMENT SET ARRAY REFERENCE FLAG;                                       04004500
PROCEDURE SETARRYREFFLAG; ELBAT.ARRYREFFLAGPART ~ 1;                    04004600
COMMENT SET SIMP VARBL DEFINE FLAG;                                     04004700
PROCEDURE SETSIMPDEFFLAG; ELBAT.SIMPDEFFLAGPART ~ 1;                    04004800
COMMENT SET SIMP VARBL REFERENCE FLAG;                                  04004900
PROCEDURE SETSIMPREFFLAG; ELBAT.SIMPREFFLAGPART ~ 1;                    04005000
COMMENT  GETFUNCADDR ALLOCATES PRT SPACE FOR A DEFINED FUNCTION IF      04005005
    DEFINITION DOES NOT PRECEDE REFERENCE.                              04005010
;                                                                       04005015
PROCEDURE GETFUNCADDR;                                                  04005020
    BEGIN                                                               04005021
    IF ELBAT.FUNCADDRPART = 0                                           04005022
    THEN BEGIN                                                          04005023
         ELBAT.FUNCADDRPART ~ ALLOCPRT;                                 04005024
         IF PRTOG THEN PRTINFO( "DEF FN")                               04005025
         END;                                                           04005026
    END GETFUNCADDR;                                                    04005027
COMMENT  SETFUNCREFFLAG SETS THE DEFINED FUNCTION REFERENCE FLAG.       04005030
;                                                                       04005035
PROCEDURE SETFUNCREFFLAG; ELBAT.FUNCREFFLAGPART ~ 1;                    04005040
COMMENT  SETFUNCDEFFLAG SETS THE DEFINED FUNCTION DEFINITION FLAG.      04005045
;                                                                       04005050
PROCEDURE SETFUNCDEFFLAG; ELBAT.FUNCDEFFLAGPART ~ 1;                    04005055
COMMENT GET A SYLLABLE FROM CODE STREAM USING L AS INDEX;               04005100
INTEGER PROCEDURE  GET(L);                                              04005200
VALUE              L;                                                   04005205
INTEGER            L;                                                   04005210
     BEGIN                                                              04005300
          INTEGER STREAM PROCEDURE GETSYL(W,S); VALUE S;                04005400
               BEGIN DI ~ LOC GETSYL; DI ~ DI+6;                        04005500
                    SI ~ W; SI ~ SI + S;            DS ~ 2 CHR;         04005600
               END;                                                     04005700
          GET ~ GETSYL(EDOC[L.EDOCCLM],0&L[45:46:2]);                   04005800
     END GET;                                                           04005900
INTEGER PROCEDURE  STEPI;                                               04006000
COMMENT            GET NEXT ELBAT WORD                                  04006100
                   STUFF CLASS INTO ELCLASS AND RETURN AS VALUE         04006200
;                  STEPI ~ ELCLASS ~ SCAN;                              04006300
PROCEDURE          STEPIT;                                              04006400
COMMENT            AS PER STEPI, BUT NO VALUE RETURNED                  04006500
;                  ELCLASS ~ SCAN;                                      04006600
PROCEDURE          STUFFBACK;                                           04006700
                   DICT[ELBAT.DICTROW,ELBAT.DICTCLM] ~ ELBAT;           04006800
PROCEDURE ARRYDICTREF;                                                  04006860
    BEGIN GETARRYADDR; SETARRYREFFLAG; STUFFBACK; END;                  04006862
PROCEDURE ARRYDICTDEF;                                                  04006864
    BEGIN GETARRYADDR; SETARRYDEFFLAG; STUFFBACK; END;                  04006866
PROCEDURE SIMPDICTREF;                                                  04006868
BEGIN GETSIMPADDR; SETSIMPREFFLAG; STUFFBACK; END;                      04006870
PROCEDURE SIMPDICTDEF;                                                  04006872
BEGIN GETSIMPADDR; SETSIMPDEFFLAG; STUFFBACK; END;                      04006874
COMMENT            MOVE N WORDS FROM SOURCE TO DEST                     04006900
                      WHERE N < 4096                                    04007000
                   MOVE GROUPS OF 64 WORDS, THEN REMAINDER ;            04007100
STREAM PROCEDURE   MOVEWDS(N,SOURCE,DEST);                              04007200
VALUE              N;                                                   04007300
              BEGIN      %MOVE 64-GROUPS,THEN REMAINING; N<4096         04007400
LOCAL              T;                                                   04007500
                   SI ~ LOC N;                                          04007600
                   DI ~ LOC T;                                          04007700
                   SI ~ SI+6;                                           04007800
                   DI ~ DI+7;                                           04007900
                   DS ~ CHR;                                            04008000
                   SI ~ SOURCE;                                         04008100
                   DI ~ DEST;                                           04008200
                   T(DS ~ 32 WDS; DS ~ 32 WDS);                         04008300
                   DS ~ N WDS;                                          04008400
              END  MOVEWDS;                                             04008500
COMMENT            MOVE N CHARACTERS FROM SWD,SCHR TO DWD,DCHR          04008600
                      WHERE N < 64  ;                                   04008700
STREAM PROCEDURE   MOVECHR(N,SWD,SCHR,DWD,DCHR);                        04008800
VALUE              N, SCHR, DCHR;                                       04008900
              BEGIN      %MOVE UP TO 63 CHRS                            04009000
                   SI ~ SWD; SI ~ SI+SCHR;                              04009100
                   DI ~ DWD; DI ~ DI+DCHR;                              04009200
                   DS ~ N CHR;                                          04009300
              END  MOVECHR;                                             04009400
COMMENT  CHEKDIMENS HAS TWO PARAMETERS:  THE FIRST IS AN ELBAT WORD     04009500
           PASSED BY NAME, THE SECOND PASSED BY VALUE IS THE NUMBER OF  04009600
           DIMENSIONS ATTRIBUTED TO THE ARITHMETIC OR STRING ARRAY.     04009700
           IF THE # OF DIMENSIONS IS UNDEFINED IN THE DICT ENTRY        04009800
              THEN BOTH DICT AND PASSED ELBAT WD ENTRIES ARE FIXED-UP   04009900
           ELSE                                                         04010000
           IF THE # OF DIMENSIONS SPECIFIED BY THE DICT ENTRY ! # OF    04010100
              DIMENSIONS ATTRIBUTED TO THE ARRAY ERR IS CALLED          04010200
           ELSE CHEKDIMENS IS EXITED;                                   04010300
PROCEDURE CHEKDIMENS(LBAT,NN); VALUE NN; REAL LBAT,NN;                  04010400
    BEGIN                                                               04010500
LABEL XIT;                                                              04010600
    IF DICT[LBAT.DICTROW,LBAT.DICTCLM].DIMPART = 0 THEN                 04010700
         BEGIN                                                          04010800
         DICT[LBAT.DICTROW,LBAT.DICTCLM].DIMPART ~ NN;                  04010900
         LBAT ~ DICT[LBAT.DICTROW,LBAT.DICTCLM];                        04011000
         END                                                            04011100
    ELSE                                                                04011200
    IF DICT[LBAT.DICTROW,LBAT.DICTCLM].DIMPART = NN THEN                04011300
         GO XIT                                                         04011400
    ELSE ERR( 77);                                                      04011500
XIT:                                                                    04011600
    END CHEKDIMENS;                                                     04011700
COMMENT COMPARSTRLIT COMPARES TWO STRINGLITERALS OF S&ZE UP TO 15CHRS.  04011702
         RETURNS TRUE IF "=" COMPARE OTHERSISE FALSE.                   04011704
;                                                                       04011706
BOOLEAN STREAM PROCEDURE COMPARSTRLIT(STRLIT,STRARRY);                  04011708
    BEGIN                                                               04011710
    LABEL XIT;                                                          04011712
    SI ~ STRLIT; DI ~ STRARRY;                                          04011714
    2(IF 8 SC ! DC THEN JUMP OUT TO XIT);                               04011716
    TALLY ~ 1;                                                          04011718
XIT:                                                                    04011720
    COMPARSTRLIT~ TALLY;                                                04011722
    END OF COMPARSTRLIT;                                                04011724
REAL ARRAY SIMPSTRINGARRY[0:1021];                                      04011745
COMMENT  SIMPSTRINGARRY IS USED TOSTORE VALUES FOR STRING SIMPLE        04011750
         VARIABLES AND STRING LITERALS. EACH STRING SIMPLE VARIABLE OR  04011755
         STRING LITERAL REQUIRES A TWO WORD ENTRY IN THIS TABLE.        04011760
         THERE IS AT A MAXIMUM SPACE FOR 26 STRING SIMPLE               04011765
         VARIABLES. NUMBER OF STRING LITERALS USED IN A PROGRAM         04011770
         MAY NOT EXCEED (510-NO. OF STRING SIMPLE VARIABLES USED).      04011775
;                                                                       04011780
COMMENT  GETSIMPSTRINGPART ALLOCATES PRT SPACE FOR THE STRING SIMPLE    04011800
           VARIABLE ARRAY IF NOT ALREADY ALLOCATED.  IF AN INDEX HAS    04011900
           NOT BEEN ASSIGNED TO THE SIMPLE ADDRESS PART OF THE ELBAT    04012000
           WORD THE ASSIGNMENT IS MADE AND THE INDEX COUNTER IS BUMPED  04012100
           ;                                                            04012200
PROCEDURE GETSIMPSTRINGPART;                                            04012300
    BEGIN                                                               04012400
    LABEL XIT;                                                          04012405
    IF DOLARRY = 0 THEN  DOLARRY ~ ALLOCPRT ;                           04012500
    IF ELBAT.[1:5] = STRINGID                                           04012600
    THEN                                                                04012700
         BEGIN                                                          04012705
      IF ELBAT.SIMPADDRPART = 0 THEN                                    04012800
         BEGIN                                                          04012900
         ELBAT.SIMPADDRPART~DOLNDEX~DOLNDEX+2;                          04013000
         IF PRTOG THEN PRTINFO("INX   ");                               04013010
         IF DOLNDX = 1022 THEN ERR(067);                                04013300
         END ;                                                          04013400
         END                                                            04013405
    ELSE BEGIN     COMMENT ELCLASS IS STRING LITERAL;                   04013500
         FOR RR8 ~2 STEP 2 WHILE RR8{DOLNDEX DO IF DOLNDEX<1022 THEN    04013505
           IF COMPARSTRLIT(STRINGLIT,SIMPSTRINGARRY[RR8]) THEN GO XIT;  04013510
         RR8 ~ DOLNDEX ~ DOLNDEX+2;                                     04013700
         IF DOLNDEX < 1022                                              04013800
         THEN      COMMENT INITIALIZE TO VALUE OF THE STRING LIT;       04013900
              MOVEWDS(2,STRINGLIT,SIMPSTRINGARRY[DOLNDEX])              04014000
         ELSE IF DOLNDEX = 1022 THEN ERR(067);                          04014100
         IF PRTOG THEN PRTINFO(0);                                      04014110
         END;                                                           04014200
XIT:                                                                    04014205
    END GETSIMPADDRPART;                                                04014400
COMMENT  FILLERRMSG IS CALLED ONLY IF COMPILE ERRORS OCCUR              04020000
;                                                                       04020100
PROCEDURE FILLERRMSG;                                                   04020200
BEGIN                                                                   04020300
FILL ERRMSG[0,*] WITH   COMMENT ERROR MESSAGES 1 THRU 8;                04020400
COMMENT  ERROR MESSAGE #001;                                            04020495
    "DEF FN:F","UNCTION ","NAME NOT"," FOLLOWE","D BY LEF","T PAREN.",  04020500
    "        ","        ",                                              04020600
COMMENT ERROR MESSAGE #002;                                             04020695
    "DEF FN:F","ORMAL PA","RAMETER ","NOT A SI","MPLE VAR","IABLE.  ",  04020800
    "        ","        ",                                              04020900
COMMENT  ERROR MESSAGE #003;                                            04020995
    "DEF FN:F","ORMAL PA","RAMETER ","NOT FOLL","OWED BY ","COMMA OR",  04021100
    " R PAREN",".       ",                                              04021200
COMMENT ERROR MESSAGE  #004;                                            04021295
    "DEF FN:F","ORMAL PA","RAMETER ","PART NOT"," FOLLOWE","D BY EQU",  04021400
    "AL.     ","        ",                                              04021500
COMMENT ERROR MESSAGE  #005;                                            04021595
    "GOTO: LI","NE NUMBE","R OF NOT"," MORE TH","AN EIGHT"," DIGITS ",  04021700
    "NOT FOUN","D.      ",                                              04021800
COMMENT  ERROR MESSAGE #006;                                            04021895
    "GOSUB: L","INE NUMB","ER OF NO","T MORE T","HAN EIGH","T DIGITS",  04022000
    " NOT FOU","ND.     ",                                              04022100
COMMENT  ERROR MESSAGE #007;                                            04022195
    "IF: ELEM","ENT AFTE","R FIRST ","EXPRESSI",                        04022300
    "ON IS NO","T A RELA","TIONAL O","PERATOR.",                        04022400
COMMENT  ERROR MESSAGE #008;                                            04022495
    "IF: MUST"," COMPARE"," EITHER ","WITH 2 S","TRINGS O","R 2 ARIT",  04022600
    "HMETIC E","XPR.    ";                                              04022700
FILL ERRMSG[1,*] WITH   COMMENT ERROR MESSAGES 9 THRU 16;               04022800
COMMENT  ERROR MESSAGE #009;                                            04022895
    "IF: MISS",OCT3145276077633025,OCT4577326060606060,"        ",      04022900
    "        ","        ","        ","        ",                        04022950
COMMENT ERROR MESSAGE  #010;                                            04022995
    "GOSUB: R","EFERENCE"," TO UNDE","FINED LI","NE NUMBE","R.      ",  04023100
  "        ","        ",                                                04023200
COMMENT  ERROR MESSAGE #011;                                            04023295
    "REFERENC","E IS MAD","E TO AN ","UNDEFINE",                        04023400
    "D LINE N","UMBER.  ","        ","        ",                        04023500
COMMENT ERROR MESSAGE  #012;                                            04023595
    "LINE#: D","EFINED M","ORE THAN"," ONCE.  ",                        04023700
    "        ","        ","        ","        ",                        04023750
COMMENT  ERROR MESSAGE #013;                                            04023795
    "GOSUB: C","ANNOT GO"," TO SELF",".       ",                        04023900
    "        ","        ","        ","        ",                        04023950
COMMENT  ERROR MESSAGE #014;                                            04023995
    "STATEMEN","T: CANNO","T RECOGN","IZE STAT","EMENT.  ",             04024100
    "        ","        ","        ",                                   04024150
COMMENT  ERROR MESSAGE #015;                                            04024195
    "DATA: UN","RECOGNIZ","ABLE ELE","MENT IN ","DATA LIS","T.      ",  04024300
    "        ","        ",                                              04024400
COMMENT  ERROR MESSAGE #016;                                            04024495
    "DATA: CA","NNOT FIN",OCT2460777277606225,"PARATING"," ELEMENT",    04024600
    "S.      ","        ","        ";                                   04024700
FILL ERRMSG[2,*] WITH   COMMENT ERROR MESSAGES 17 THRU 24;              04024800
COMMENT  ERROR MESSAGE #017;                                            04024895
     "END: SUP","ERFLUOUS"," CHARACT","ERS FOLL","OWING   ",            04024900
     OCT7725452477606060,"        ","        ",                         04025000
COMMENT  ERROR MESSAGE #018;                                            04025195
    "END: SUP","ERFLUOUS"," CHARACT","ERS FOLL","OWING RE","STORE.  ",  04025200
    "        ","        ",                                              04025300
COMMENT  ERROR MESSAGE #019;                                            04025495
    "STOP: SU","PERFLUOU","S CHARAC","TERS FOL","LOWING  ",             04025500
    OCT7751256263465125,OCT7732606060606060,"        ",                 04025600
COMMENT  ERROR MESSAGE #020;                                            04025795
    "DEF FN: ","TWO DEFI","NED FUNC","TIONS WI","SAME NAM","E.      ",  04025800
    "        ","        ",                                              04025900
COMMENT  ERROR MESSAGE #021;                                            04025995
"DEF FN: ","NUMBER O","F PARAME","TERS DIF","FERENT F","ROM PREV",      04026100
    "IOUS REF","ERENCE. ",                                              04026200
COMMENT  ERROR MESSAGE #022;                                            04026395
    "DEF FN: ","IMPROPER"," FUNCTIO","N IDENTI","FIER.   ",             04026400
    "        ","        ","        ",                                   04026450
COMMENT  ERROR MESSAGE #023;                                            04026595
    "DIM: IMP","ROPER AR","RAY IDEN","TIFIER. ",                        04026600
    "        ","        ","        ","        ",                        04026650
COMMENT  ERROR MESSAGE #024;                                            04026795
    "DIM: ARR","AY IDENT","IFIER NO","T FOLLOW","ED BY LE","FT PAREN",  04026800
    ".       ","        ";                                              04026900
FILL ERRMSG[3,*] WITH   COMMENT ERROR MESSAGES 25 THRU 32;              04027000
COMMENT ERROR MESSAGE  #025;                                            04027095
    "DIM: SIZ","E MUST B","E AN INT","EGER LES",                        04027100
    "S THAN 1","023 (511"," FOR STR","ING)    ",                        04027150
COMMENT  ERROR MESSAGE #026;                                            04027295
    "DIM: MUS","T HAVE C","OMMA OR ","RIGHT PA",                        04027300
    "REN AFTE","R FIRST ","DIMENSIO","N.      ",                        04027400
COMMENT  ERROR MESSAGE #027;                                            04027595
    "FOR: CON","TROLLED ","VARIABLE"," MUST BE","A SIMPLE"," VARIABL",  04027600
    "E.      ","        ",                                              04027700
COMMENT  ERROR MESSAGE #028;                                            04027895
    "FOR: CAN","NOT FIND"," EQUAL S","IGN AFTE","R CONTRO","L VARIAB",  04027900
    "LE.     ","        ",                                              04028000
COMMENT  ERROR MESSAGE #029;                                            04028195
    "FOR: CAN","NOT FIND",OCT6077634677602126,"TER INIT","IAL VALU",    04028200
    "E.      ","        ","        ",                                   04028300
COMMENT  ERROR MESSAGE #030;                                            04028495
    "IF: MISS","ING LINE"," NO. FOL","LOWING  ",                        04028500
    OCT7763302545773260,"        ","        ","        ",               04028600
COMMENT  ERROR MESSAGE #031;                                            04028795
    "FOR: CAN","NOT FIND",OCT6077626325477760,"AFTER LI","NE NUMBE",    04028800
    "R.      ","        ","        ",                                   04028900
COMMENT  ERROR MESSAGE #032;                                            04029095
    "IMPROPER"," NESTING"," OF FOR-","NEXT CON",                        04029100
    "STRUCTS.","        ","        ","        ";                        04029200
FILL ERRMSG[4,*] WITH   COMMENT ERROR MESSAGES 33 THRU 40;              04029300
COMMENT  ERROR MESSAGE #033;                                            04029395
    "FOR: STE","P SIZE ="," 0 ILLEG","AL.     ",                        04029400
    "        ","        ","        ","        ",                        04029450
COMMENT  ERROR MESSAGE #034;                                            04029595
    "GOTO: UN","KNOWN EL","EMENT FO","LLOWING ","LINE NUM","BER.    ",  04029600
    "        ","        ",                                              04029700
COMMENT  ERROR MESSAGE #035;                                            04029895
    "ON: MISS",OCT3145276077274660,OCT6346773260606060,                 04029900
    "        ","        ","        ","        ","        ",             04029950
COMMENT  ERROR MESSAGE #036;                                            04029995
    "ON: UNKN","OWN ELEM","ENT AFTE","R LINE N","UMBER LI","ST.     ",  04030100
    "        ","        ",                                              04030200
COMMENT  ERROR MESSAGE #037;                                            04030395
    "NEXT: UN","KNOWN EL","EMENT AF","TER CONT","ROL VARI","ABLE.   ",  04030400
    "        ","        ",                                              04030500
COMMENT  ERROR MESSAGE #038;                                            04030695
    "SCANNER:"," IMPROPE","R RELATI","ONAL OPE","RATOR.  ",             04030700
    "        ","        ","        ",                                   04030750
COMMENT ERROR  MESSAGE #039;                                            04030895
    "SCANNER:"," IMPROPE","R EXPONE","NT PART ","IN NUMBE","R.      ",  04030900
    "        ","        ",                                              04031000
COMMENT  ERROR MESSAGE #040;                                            04031195
    "DEF: IMP","ROPER FU","NCTION N","AME.    ",                        04031200
    "        ","        ","        ","        ";                        04031250
FILL ERRMSG[5,*] WITH   COMMENT ERROR MESSAGES 41 THRU 48;              04031300
COMMENT  ERROR MESSAGE #041;                                            04031395
    "DEF: FUN","CTION NA","ME DEFIN","ED PREVI","OUSLY.  ",             04031400
    "        ","        ","        ",                                   04031450
COMMENT  ERROR MESSAGE #042;                                            04031595
    "DEF: IMP","ROPER FO","RMAL PAR","AMETER. ",                        04031600
    "        ","        ","        ","        ",                        04031650
COMMENT  ERROR MESSAGE #043;                                            04031795
    "DEF: NOT"," A COMMA"," OR RT. ","PAREN AF","TER FORM","AL PARAM",  04031800
"ETER.   ","        ",                                                  04031900
COMMENT ERROR MESSAGE  #044;                                            04031995
    "DEF: NOT"," AN ASSI","GNMENT O","PERATOR ","AFTER FO","RMAL PAR",  04032100
    "AMETER L","IST.    ",                                              04032200
COMMENT  ERROR MESSAGE #045;                                            04032395
    "DEF: NO ","LEFT PAR","EN OR AS","GN OP AF","TER FUNC"," ID.    ",  04032400
    "        ","        ",                                              04032500
COMMENT ERROR MESSAGE #046;                                             04032695
    "DIM: PRE","VIOUSLY ","DEFINED ","ARRAY NA","ME.     ",             04032700
    "        ","        ","        ",                                   04032750
COMMENT  ERROR MESSAGE #047;                                            04032895
    "ON: IMPR","OPER LIN","E NUMBER",".       ",                        04032900
    "        ","        ","        ","        ",                        04032950
COMMENT  ERROR MESSAGE #048;                                            04033095
    "IF: MISS","ING RELA","TIONAL O","PERATOR.",                        04033100
    "        ","        ","        ","        ";                        04033150
FILL ERRMSG[6,*] WITH   COMMENT ERROR MESSAGES 49 THRU 56;              04033200
COMMENT  ERROR MESSAGE #049;                                            04033295
    "FILES: I","MPROPER ","FILE NAM","E.      ",                        04033300
    "        ","        ","        ","        ",                        04033350
COMMENT  ERROR MESSAGE #050;                                            04033495
    "FILES: F","ILE LENG","TH MUST ","BE AN IN",                        04033500
    "TEGER LE","SS THAN ","16384.  ","        ",                        04033550
COMMENT ERROR MESSAGE  #051;                                            04033695
    "FILES: I","MPROPER ","FILE LEN","GTH OR M",                        04033700
    "ISSING R","IGHT RAR","EN.     ","        ",                        04033750
COMMENT ERROR MESSAGE  #052;                                            04033895
    "IMPROPER"," FILE NA","ME OR MI","SSING CO",                        04033900
    "MMA.    ","        ","        ","        ",                        04033950
                                                                        04034000
COMMENT  ERROR MESSAGE #053;                                            04034195
    "READ: RE","FERENCE ","TO UNDEF","INED FIL","E NAME. ",             04034200
    "        ","        ","        ",                                   04034250
COMMENT  ERROR MESSAGE #054;                                            04034395
    "PRINT: I","MPROPER ","FORM OF ","TAB FUNC","TION.   ",             04034400
    "        ","        ","        ",                                   04034405
COMMENT  ERROR MESSAGE #055;                                            04034410
    "GOTO: CA","NNOT GO ","TO SELF.","        ","        ",             04034415
    "        ","        ","        ",                                   04034420
COMMENT  ERROR MESSAGE #056;                                            04034425
    "DIM: UNR","ECOGNIZA","BLE CONS","TRUCT AF","TER ).  ",             04034430
    "        ","        ","        ";                                   04034450
FILL ERRMSG[7,*] WITH   COMMENT ERROR MESSAGES 57 THRU 64;              04034455
COMMENT  ERROR MESSAGE #057;                                            04034456
    "PRINT: U","NRECOGNI","ZABLE EL","EMENT IN",                        04034457
    " PRINT L","IST.    ","        ","        ",                        04034458
COMMENT  ERROR MESSAGE #058;                                            04034459
    "IF: CANN","OT USE N","EXT OR E","ND STATE",                        04034460
    "MENT.   ","        ","        ","        ",                        04034461
COMMENT  ERROR MESSAGE #059;                                            04034462
    "FILES: M","ORE THAN"," 63 FILE"," NAMES. ",                        04034463
    "        ","        ","        ","        ",                        04034464
COMMENT  ERROR MESSAGE #060;                                            04034465
    " WARNING",": VALUE ","REFERENC","ED BUT N",                        04034466
    "OT DEFIN","ED.     ","        ","        ",                        04034467
COMMENT ERROR MESSAGE #061;                                             04034468
    "QUANTITY"," IN READ"," LIST NO","T ARITHM","ETIC OR ","STRING T",  04034469
    "YPE VARI","ABLE.   ",                                              04034470
COMMENT  ERROR MESSAGE #062;                                            04034471
    " WARNING",": VALUE ","DEFINED ","BUT NOT ",                        04034472
    "REFERENC","ED.     ","        ","        ",                        04034473
COMMENT  ERROR MESSAGE #063;                                            04034474
    "MATRIX F","UNCTIONS"," NOT ALL","OWED IN ",                        04034475
    "ARITHMET","IC STATE","MENTS.  ","        ",                        04034476
COMMENT  ERROR #064;                                                    04034477
    "QUANTITY"," IN LIST"," NOT ARI","TH OR ST",                        04034478
    "RING VAR","IABLE AR","RAY NAME",".       ";                        04034479
FILL ERRMSG[8,*] WITH   COMMENT ERROR MESSAGES 65 THRU 72;              04034510
COMMENT ERROR #065;                                                     04034515
    "$VOID CA","RD-MUST ","SPECIFY ","START OF",                        04034517
    " VOID SE","QUENCE. ","        ","        ",                        04034520
COMMENT ERROR #066;                                                     04034525
    "$VOID CA","RD-MUST ","SPECIFY ","END OF V",                        04034527
    "OID SEQU","ENCE.   ","        ","        ",                        04034530
COMMENT  ERROR MESSAGE #067;                                            04034660
    "REFERENC","ES TO ST","RING LIT","S AND SI","MP STRIN","G VARBS ",  04034665
    "GREATER ","THAN 510",                                              04034670
COMMENT  ERROR MESSAGE #068;                                            04034675
    "STRINGVA","RIABLE: ","THERE IS","A MISSIN","G = FOLL","OWING TH",  04034680
    "E VARIAB","LE.     ",                                              04034685
COMMENT  ERROR MESSAGE #069;                                            04034695
    "LET: NOT"," ARITHME","TIC OR S","TRING VA","RIABLE. ",             04034700
    "        ","        ","        ",                                   04034750
COMMENT  ERROR MESSAGE#070;                                             04034895
    "END OF S","TATEMENT"," EXPECTE","D.      ",                        04034900
    "        ","        ","        ","        ",                        04034950
COMMENT  ERROR MESSAGE #071;                                            04035095
    "UNRECOGN","IZABLE S","TATEMENT"," OR MISS",                        04035100
    "ING EQUA","L.      ","        ","        ",                        04035200
COMMENT  ERROR MESSAGE #072;                                            04035395
    "MISSING ","RIGHT PA","REN OR C","OMMA FOL",                        04035400
    "LOWING V","ARIABLE.","        ","        ";                        04035450
FILL ERRMSG[9,*] WITH   COMMENT ERROR MESSAGES 73 THRU 80;              04035500
COMMENT ERROR MESSAGE  #073;                                            04035595
    "PRIMARY:"," ILLEGAL"," QUANTIT","Y OR VAL","UE.     ",             04035600
    "        ","        ","        ",                                   04035650
COMMENT  ERROR MESSAGE #074;                                            04035795
    "PRIMARY:"," STRING ","VARIABLE"," OR LIT ","ILLEGAL ","IN ARITH",  04035800
    "METIC ST","ATEMENT.",                                              04035900
COMMENT  ERROR MESSAGE #075;                                            04036095
    "ARITHVAR","B: SUBSC","RIPTED V","ARIABLE-","MISSING ","RIGHT PA",  04036100
    "REN.    ","        ",                                              04036200
COMMENT  ERROR MESSAGE #076;                                            04036395
    "STRINGVA","RB: QUAN","TITY NOT"," STRING ","VARIABLE"," OR CONS",  04036400
    "TANT.   ","        ",                                              04036500
COMMENT  ERROR MESSAGE #077;                                            04036695
    "NUMBER O","F SUBSCR","IPTS INC","ONSISTEN",                        04036700
    "T WITH P","REVIOUS ","USAGE.  ","        ",                        04036800
COMMENT  ERROR MESSAGE #078;                                            04036995
    "STD. FUN","C DESIGN","ATOR MIS","SING LEF","T PAREN.",             04037000
    "        ","        ","        ",                                   04037050
COMMENT  ERROR MESSAGE #079;                                            04037095
    "STD. FUN","C DESIGN","ATOR-MIS","SING RIG","HT PAREN",".       ",  04037100
    "        ","        ",                                              04037200
COMMENT  ERROR MESSAGE #080;                                            04037395
    "OPERATOR"," OR LEFT"," PAREN M","UST FOLL","OW DEFIN","ED FUNC ",  04037400
    "DESIGNAT","OR.     ";                                              04037500
FILL ERRMSG[10,*] WITH  COMMENT ERROR MESSAGES 81 THRU 88;              04037600
COMMENT  ERROR MESSAGE #081;                                            04037695
    "DEFINED ","FUNC DES","IGNATOR-","MISSING ","RIGHT PA","REN OR C",  04037700
    "OMMA.   ","        ",                                              04037800
COMMENT  ERROR MESSAGE #082;                                            04037995
    "STRINGVA","RB: MISS","ING LEFT"," PAREN O","R ILLEGA","L QUANTI",  04038000
    "TY.     ","        ",                                              04038100
COMMENT  ERROR MESSAGE #083;                                            04038295
    "STRINGVA","RB: SUBS","CRIPTED ","VARIABLE","-MISSING"," RIGHT P",  04038300
"AREN.   ","        ",                                                  04038400
COMMENT  ERROR MESSAGE #084;                                            04038403
    "NO. OF P","ARAMETER","S DOES N","OT MATCH"," PREVIOU","S USAGE ",  04038404
    "FOR DEF."," FUNC.  ",                                              04038405
COMMENT  ERROR MESSAGE #085;                                            04038406
    "PRIMARY:","MISSING ","RIGHT PA","REN IN  ","AN ARITH","METIC EX",  04038407
    "PRESSION",".       ",                                              04038408
COMMENT  ERROR MESSAGE#086;                                             04038409
    "INVALID ","QUANTITY"," FOLLOWI",OCT4527607744216377,               04038410
    ".       ","        ","        ","        ",                        04038411
COMMENT  ERROR MESSAGE #087;                                            04038412
    "MISSING ",OCT7775776026464343,"OWING   ","LEFT PAR",               04038413
    "T LIST. ","        ","        ","        ",                        04038414
    COMMENT   ERROR MESSAGE #088;                                       04038416
    "IDEN. MA","T NAMES ","NOT ALLO","WED ON R",                        04038417
    "IGHT AND"," LEFT OF",OCT6077757732606060,"        ";               04038418
FILL ERRMSG[11,*] WITH  COMMENT ERROR MESSAGES 89-96;                   04038419
COMMENT  ERROR MESSAGE #089;                                            04038420
    "INVALID ","OPERATOR","-NOT ALL","OWED IN ",                        04038421
    "MATRIX S","TATEMENT",".       ","        ",                        04038422
COMMENT  ERROR MESSAGE #090;                                            04038423
    "MISSING ","RIGHT PA","RENTHESI","S-SCALAR",                        04038424
    " EXPRESS","ION.    ","        ","        ",                        04038425
COMMENT  ERROR MESSAGE #091;                                            04038426
    "ARGUMENT"," OF MATR","IX FUNCT","ION MUST",                        04038427
    " BE AN A","RRAY VAR","IABLE.  ","        ",                        04038428
COMMENT  ERROR MESSAGE #092;                                            04038429
    "INVALID ","USE OF A","RITH FUN","CTION IN",                        04038430
    " MATRIX ","STATEMEN","T.      ","        ",                        04038431
COMMENT  ERROR #093;                                                    04038432
    "MISSING ","RT. PARE","N OR INV","ALID CHA",                        04038433
    "R. FOLLO","WING MAT"," FN. NAM","E.      ",                        04038434
COMMENT  ERROR #094;                                                    04038435
    "MISSING ","LEFT PAR","EN(OR)AR","GUMENT(O",                        04038436
    "R)INVALI","D MATRIX"," FUNCTIO","N.      ",                        04038437
COMMENT  ERROR #095;                                                    04038438
    "MISSING ","RIGHT PA","RENTHESI","S FOLLOW",                        04038439
    "ING MATR","IX VARIA","BLE.    ","        ",                        04038440
COMMENT  ERROR #096;                                                    04038441
    "MISSING ","RT PAREN"," OR INVA","LID CHAR",                        04038442
    ". FOLLOW","ING ARRA","Y NAME. ","        ";                        04038443
FILL ERRMSG[12,*] WITH  COMMENT ERROR MESSAGES 97 THRU 104;             04038444
COMMENT  ERROR #097;                                                    04038445
    "QUANTITY"," FOLLOWI",OCT4527607753776045,"OT AN AR",               04038446
    "RAY VARI","ABLE.   ","        ","        ",                        04038447
COMMENT  ERROR #098;                                                    04038448
    "INVALID ","QUANTITY"," FOLLOWI",OCT4527607775773260,               04038449
    "        ","        ","        ","        ",                        04038450
COMMENT  ERROR MESSAGE #099;                                            04038451
    "STRING V","ARIABLE ","MAY NOT ","HAVE MOR",                        04038452
    "E THAN O","NE DIMEN","SION.   ","        ",                        04038453
COMMENT  ERROR MESSAGE #100;                                            04038454
    "ARITH VA","RIABLE M","AY NOT H","AVE MORE",                        04038455
    " THAN TW","O DIMENS","IONS.   ","        ",                        04038456
COMMENT  ERROR #101;                                                    04038457
    "INVALID ","ARRAY NA","ME OR LI","ST SEPAR",                        04038458
    "ATOR.   ","        ","        ","        ",                        04038459
COMMENT  ERROR #102;                                                    04038460
    "CHAR. OT","HER THAN"," LIST SE","PARATOR ",                        04038461
    "MAY NOT ","FOLLOW A","RRAY NAM","E.      ",                        04038462
COMMENT  ERROR MESSAGE #103;                                            04038463
    "EOF LABE","L  NOT A"," LINE NU","MBER.   ",                        04038464
    "        ","        ","        ","        ",                        04038465
COMMENT  ERROR MESSAGE #104;                                            04038466
    "SEPARATO","R FOLLOW","ING EOF ","LABEL NO",                        04038467
    "T A COMM","A.      ","        ","        ";                        04038468
FILL ERRMSG[13,*] WITH                                                  04038469
COMMENT  ERROR MESSAGE #105;                                            04038470
         "MISSING ","END CARD",".       ","        ",                   04038471
         "        ","        ","        ","        ",                   04038472
COMMENT  ERROR MESSAGE #106;                                            04038473
    "INVALID ","QUANTITY"," FOLLOWI","NG SIMPL",                        04038474
    "E VARIAB","LE.     ","        ","        ",                        04038475
COMMENT  ERROR #107;                                                    04038476
    "MISSING ","NEXT FOL","LOWING A"," FOR STA",                        04038477
    "TEMENT. ","        ","        ","        ",                        04038478
    0;                                                                  04038494
    ERRMSGTOG ~ TRUE;                                                   04038495
END FILLERRMSG;                                                         04038500
COMMENT  FILLWITHERRMSG MOVES THE ERRMSG TO THE LIN ARRAY AND FILLS THE 04039000
         REMAINING WORDS WITH BLANKS.                                   04039005
;                                                                       04039010
STREAM PROCEDURE FILLWITHERRMSG(LINENO,ERRMSG,LIN); VALUE LINENO;       04039015
    BEGIN                                                               04039020
    LOCAL SRCE;                                                         04039025
    SI ~ LOC LINENO; DI ~ LIN; DS ~ WDS; DS ~ LIT " ";                  04039030
    SI ~ ERRMSG; 8(DS ~ 8 CHR); DS ~ 7 LIT "       ";                   04039035
    SRCE ~ DI; DS ~ 8 LIT "        ";                                   04039040
    SI ~ SRCE; DS ~ 4 WDS;                                              04039045
              SI ~ LOC LINENO; DI ~ LIN;                                04039050
         8(IF SC="0" THEN BEGIN SI~SI+1; DS~LIT" "; END ELSE JUMP OUT); 04039055
    END FILLWITHERRMSG;                                                 04039060
ALPHA STREAM PROCEDURE BINTOBCL(NBR); VALUE NBR;                        04039100
    BEGIN                                                               04039200
    SI ~ LOC NBR; DI ~ LOC BINTOBCL; DS ~ 8 DEC;                        04039300
    DI ~ DI-1; DS ~ 2 RESET;                                            04039400
    END BINTOBCL;                                                       04039500
PROCEDURE SEQUENCERROR;                                                 04039600
    IF CHECKTOG THEN                                                    04039605
    BEGIN                                                               04039610
    FORMAT SEQERR("**********SEQ. ERR. FOLLOWING  ",A2,A6);             04039620
    RR5 ~ BINTOBCL(LASTLINENO);                                         04039625
    MOVECHR(2,RR5,0,RR6,6);                                             04039630
    MOVECHR(6,RR5,2,RR8,2);                                             04039640
              IF REMOTETOG THEN WRITE(REMOTE,SEQERR,RR6,RR8)            04039650
                     ELSE IF SINGLTOG THEN WRITE(LINE,SEQERR,RR6,RR8)   04039652
                          ELSE WRITE(LINE[DBL],SEQERR,RR6,RR8);         04039653
    END SEQUENCERROR;                                                   04039660
COMMENT  ERR OUTPUTS ERROR MESSAGES IN USERS WORK ERROR FILE IF OUTPUT  04040000
    FILE IS A REMOTE STATION, IF FILE IS A PRINTER, BACK-UP TAPE OR     04040100
    DISK ERRORS ARE OUTPUT FOLLOWING STATEMENT BEING SCANNED.           04040200
;                                                                       04040300
PROCEDURE ERR(N); VALUE N; REAL N;                                      04040400
    BEGIN                                                               04040500
    INTEGER NDX;                                                        04040510
    IF NOT ERRMSGTOG THEN FILLERRMSG;                                   04040700
    IF NOT ERRSUPTOG THEN                                               04040800
         BEGIN                                                          04040900
    FILLWITHERRMSG(BINTOBCL(CHARRY[0]),ERRMSG[(NDX~8|(N-1)).[38:4],     04041000
      NDX.[42:6]],LIN);                                                 04041005
    WRITELINE;                                                          04041010
         ERRCNT ~ ERRCNT+1;                                             04041100
         END;                                                           04041300
                                                                        04041400
    END ERR;                                                            04041500
COMMENT ERRSUP SUPPRESSES THE PRINTING OF ERRORS;                       04050000
PROCEDURE ERRSUP(N); VALUE N; REAL N;                                   04050100
    BEGIN                                                               04050200
    ERR(N);                                                             04050300
    ERRSUPTOG ~ TRUE;                                                   04050400
    END ERRSUP;                                                         04050500
COMMENT ERRSKIP NOT ONLY SUPPRESSES THE OUTPUT OF ERRORS BUT SCANS      04060000
    UNTIL END-OF-STATEMENT IS REACHED;                                  04060100
PROCEDURE ERRSKIP(N); VALUE N; REAL N;                                  04060200
    BEGIN                                                               04060300
              CHARRY[CNDX+1] := -"%";   % STOPPER FOR SCANNER           04060400
                   IF ELCLASS ! PERCENT THEN                            04060405
    WHILE STEPI ! PERCENT DO;                                           04060500
    ERRSUP(N);                                                          04060510
    END ERRSKIP;                                                        04060520
COMMENT            GETINTRIN WILL INSURE THAT THE INTRINSIC             04100000
                      REFENCED BY INDEX HAS BEEN ALLOCATED A PRT ADDR   04100100
                      AND WILL RETURN THAT ADDRESS AS ITS VALUE.        04100200
;                                                                       04100300
INTEGER PROCEDURE GETINTRIN(INDEX);                                     04100400
VALUE              INDEX;                                               04100500
INTEGER            INDEX;                                               04100600
              BEGIN                                                     04100700
REAL               T;    %TEMP                                          04100705
                   IF GETINTRIN~(T~RWARRY[INDEX]).FUNCADDRPART=0 THEN   04100800
                   RWARRY[INDEX] ~ T & (GETINTRIN ~                     04100900
                      ALLOCPRT)[6:37:11];                               04101000
              END  OF GETINTRIN;                                        04101100
INTEGER            CODEWORDS;     %NUMBER OF WDS GENERATED FOR CODE FILE04101105
INTEGER            ARRAYWDS;    %#WDS REQD FOR ARRAYS                   04101107
INTEGER            BUFWDS;      %#WDS REQD FOR BUFFERS                  04101108
REAL ARRAY         SD[0:127];     %SEGMENT DICTIONARY                   04101110
INTEGER            DISCSEGNO;     %NEXT AVAIL DISC SEGMENT NUMBER       04101120
COMMENT            ADJUST DISCSEGNO IF REQD TO PREVENT FILE ROW OVERLAP;04101200
PROCEDURE          ADJUSTDISC(WORDS);                                   04101300
VALUE              WORDS;                                               04101400
INTEGER            WORDS;                                               04101500
              BEGIN                                                     04101600
INTEGER            INCR, T;                                             04101700
                   IF (T~(DISCSEGNO+(INCR~(WORDS+29)DIV 30))MOD CODESIZ)04101800
                      < INCR  AND  T ! 0 THEN                           04101900
                      DISCSEGNO ~ DISCSEGNO+CODESIZ-                    04102000
                         DISCSEGNO MOD CODESIZ;                         04102100
              END  OF ADJUSTDISC;                                       04102200
COMMENT            WRITESEG WILL WRITE AN ARRAY ROW INTO THE CODE FILE  04102700
                      AND BUILD THE SEGMENT DICTIONARY ENTRY            04102800
                   THE DISC AND PROGRAM SEGMENT NUMBERS ARE INCREMENTED 04102900
;                                                                       04103000
PROCEDURE          BUILDSD(WORDS,TYPE,INTRINO);                         04103100
VALUE              WORDS, TYPE, INTRINO;                                04103200
INTEGER            WORDS, TYPE, INTRINO;                                04103300
              BEGIN                                                     04103500
                   ADJUSTDISC(WORDS);                                   04103600
                   IF TYPE < 4 THEN                                     04103615
              BEGIN                                                     04103620
                   SD[L.SEGNO] ~ SD[L.SEGNO] & TYPE[1:46:2] &           04103700
                      WORDS[18:33:15] &                                 04103800
                      (IF TYPE = 1 THEN INTRINO ELSE DISCSEGNO)         04103900
                      [33:33:15];                                       04104000
                   IF DEBUGATOG THEN     BEGIN                    %DEBUG04104001
LIN[0]~"....SD."; LIN[1]~L.SEGNO; LIN[2]~SD[L.SEGNO];             %DEBUG04104002
                   SINGLINE; BLANKLINE;                           %DEBUG04104003
                                        END;                      %DEBUG04104004
                   L ~ (L+1024) & 0[38:38:10];                          04104100
                   SD[L.SEGNO].SDLINK ~ L.SEGNO+2048;                   04104105
                   IF TYPE = 0 THEN   %CHECK FOR CODE SEGMENT           04104110
                   CODEWORDS ~ CODEWORDS+WORDS;                         04104200
              END  ELSE                                                 04104205
                   IF TYPE = 4 THEN                                     04104210
                      LD[L.SEGNO] ~ 0 & LINENOCTR[18:33:15] &           04104215
                      DISCSEGNO[33:33:15];                              04104220
              END  OF BUILDSD;                                          04104310
PROCEDURE          WRITESEG(ARRY,WORDS,TYPE,INTRINO);                   04104370
VALUE              WORDS, TYPE, INTRINO;                                04104375
INTEGER            WORDS, TYPE, INTRINO;                                04104380
REAL ARRAY         ARRY[0];                                             04104385
              BEGIN                                                     04104388
INTEGER            I;                                                   04104389
                   IF REAL(CODETOG) = 3  THEN                           04104390
                 BEGIN CODETOG~TRUE; WRITESEG(EDOC[*],22,6,0); END;     04104391
                   RR6~L&WORDS[38:40:8];BUILDSD(WORDS,TYPE,INTRINO);    04104392
                   IF CODETOG THEN                                      04104393
                   FOR I ~ 0 STEP 30 UNTIL WORDS-1  DO                  04104396
              BEGIN    MOVEWDS(IF (WORDS-I) LSS 30 THEN (WORDS-I)       04104397
                          ELSE 30, ARRY[I], CODE(0));                   04104398
                   WRITE(CODE[DISCSEGNO]); DISCSEGNO := DISCSEGNO + 1;  04104399
              END;                                                      04104400
              END OF WRITESEG;                                          04104401
COMMENT            BUILD PROGRAM DESCIPTOR                              04104500
                                                                        04104505
                   STACK THRU SD ENTRY.                                 04104510
;                                                                       04104515
PROCEDURE          BLDPROGDESC(PRTADDR,SEGNO,WDNO);                     04104520
VALUE              PRTADDR, SEGNO, WDNO;                                04104525
INTEGER            PRTADDR, SEGNO, WDNO;                                04104530
              BEGIN                                                     04104532
                   PRTNDX ~ PRTADDR;                                    04104533
                   PRT[PRTWD] ~ 0 & "E"[1:43:5] &                       04104535
                      SD[SEGNO][6:6:12] & SEGNO[18:33:15] &             04104540
                      WDNO[33:33:15];                                   04104542
                   IF DEBUGATOG THEN                                    04104543
              BEGIN                                                     04104545
LIN[0]~".PDESC."; LIN[1]~PRTNDX; LIN[2]~PRT[PRTWD];               %DEBUG04104546
                   SINGLINE; BLANKLINE;                           %DEBUG04104547
              END  ;                                                    04104548
                   SD[SEGNO].SDLINK ~ PRTNDX;                           04104549
                   PRTNDX ~ SETABIT(PRT[PRTWD],0,1);                    04104550
              END  OF BLDPROGDESC;                                      04104555
COMMENT            WRITE A SEGMENT OF CODE FROM THE EDOC ARRAY.         04105000
                   ADJUST L.                                            04105100
;                                                                       04105200
PROCEDURE          WRITECODESEG;                                        04105300
              BEGIN                                                     04105400
                   IF LINENOCTR ! 0 THEN                                04105402
              BEGIN                                                     04105403
                   WRITESEG(LINESEG[*],LINENOCTR,4,0);                  04105405
                   LINENOCTR ~ 0;                                       04105410
              END  ;                                                    04105415
                   WRITESEG(EDOC[*],(L-1).WDNO+1,0,0);                  04105500
              END  OF WRITECODESEG;                                     04105700
FORMAT HEDING(X25,"BURROUGHS B-5500 TS BASIC COMPILER",X3,A6,"DAY,  ",  04119000
         2(I2,"/"),I2,", ",I2,":",A2,X1,A1,"M.");                       04119100
COMMENT DAYTIME OBTAINS TIME AND DATE OF START OF COMPILATION AND FIXES 04120000
         UP HEADING FOR COMPILER OUTPUT(IF LIST REQUESTED).             04120100
;                                                                       04120200
PROCEDURE DAYTIME;                                                      04120300
    BEGIN                                                               04120400
    ARRAY A[0:6];                                                       04120500
    INTEGER D,H,M,Q,P,Y,MIN;                                            04120600
    LABEL OWT;                                                          04120700
    FILL A[*] WITH "   SUN","   MON","  TUES","WEDNES"," THURS",        04120800
      "   FRI"," SATUR";                                                04120900
    Y ~ TIME(0);                                                        04121000
    D ~ Y.[30:6]|100+Y.[36:6]|10+Y.[42:6];                              04121100
    Y ~ Y.[18:6]|10+Y.[24:6];                                           04121200
    FOR H ~ 31, IF Y MOD 4 = 0                                          04121300
      THEN 29                                                           04121400
      ELSE 28,31,30,31,30,31,31,30,31,30 DO                             04121500
      IF D { H THEN GO OWT                                              04121600
      ELSE BEGIN D ~ D-H; M ~ M+1; END;                                 04121700
OWT:                                                                    04121800
    H ~ TIME1 DIV 216000;                                               04121900
    MIN ~ (TIME1 DIV 3600) MOD 60;                                      04122000
    IF M < 2                                                            04122100
    THEN BEGIN                                                          04122200
         Q ~ M + 11;                                                    04122300
         P ~ Y - 1;                                                     04122400
         END                                                            04122500
    ELSE BEGIN                                                          04122600
         Q ~ M-1;                                                       04122700
         P ~ Y;                                                         04122800
         END;                                                           04122900
    M ~ M+1;                                                            04123000
    WRITE(LINE[DBL],HEDING,A[((Q|26-2) DIV 10+D+P+P.[36:10]+1) MOD 7],  04123100
      M,D,Y,H MOD 12,Q ~ MIN MOD 10+(MIN DIV 10)|64,                    04123200
         IF H}12 THEN "P" ELSE 17);                                     04123300
END DAYTIME;                                                            04123400
COMMENT  SEGENDORSTART OUTPUTS THE END OF SEGMENT OR START OF SEGMENT   04123500
         MESSAGE. IF THE PARAMETER PASSED IS TRUE THEN START OF SEGMENT 04123600
         MESSAGE IS OUTPUT ELSE END OF SEGMENT MESSAGE.                 04123700
;                                                                       04123800
PROCEDURE SEGENDORSTART(TORF); VALUE TORF; BOOLEAN TORF;                04123900
    BEGIN                                                               04124000
    LABEL STARTMSG;                                                     04124005
    FORMAT ENDSEG("********** SEGMENT ",I3," CONTAINS ",I3," WORDS."),  04124100
         STARTSEG("********** START OF SEGMENT ",I3);                   04124200
    IF LISTOG THEN                                                      04124295
    IF TORF THEN                                                        04124300
STARTMSG:                                                               04124305
    IF SINGLTOG THEN WRITE(LINE,STARTSEG,IF L.SEGNO=0 THEN 1 ELSE       04124400
         L.SEGNO)                                                       04124410
    ELSE WRITE (LINE[DBL],STARTSEG,IF L.SEGNO=0 THEN 1 ELSE L.SEGNO)    04124420
    ELSE BEGIN                                                          04124500
          IF SINGLTOG THEN WRITE(LINE,ENDSEG,RR6.SEGNO,RR6.WDNO) ELSE   04124504
         WRITE(LINE[DBL],ENDSEG,RR6.SEGNO,RR6.WDNO);                    04124505
         IF REAL(TORF) ! 2 THEN                                         04124507
         GO TO STARTMSG;                                                04124510
         END;                                                           04124515
    END SEGENDORSTART;                                                  04124600
COMMENT PRTINFO OUTPUTS PRT INFORMATION IF PRTOG IS TRUE.  THE OUTPUT   04130000
         IS DEPENDENT ON THE TYPE QUANTITY BEGNG ASSIGNED A PRT LOCA-   04130100
         TION. PRT LOCATIONS ARE OUTPUT IN OCTAL.                       04130200
OUTPUT 1 XXXX-P <ALPHA> ARRAY  SUBSCRIPTED ARITHMETIC ARRAYS.           04130300
FORMAT 2 XXXX-P <ALPHA>$ ARRAY    SUBSCRPTED STRING ARRAYS.             04130400
   *   3 XXXX-P <ALPHA>    SIMPLE ARITHMETIC  VARIABLE.                 04130500
   *   4 XXXX-P <ALPHA><DIGIT>    SIMPLE ARITHMETIC VARIABLE.           04130600
   *   5 XXXX-P <ALPHA>$ <INX> <DEC. NO>    SIMPLE STRING VARIABLE.     04130700
   *   6 ****-P FN<ALPHA>    DEFINED FUNCTION DESIGNATOR.               04130800
   *   7 XXXX-P <NAME>    STANDARD FUNCTION DESIGNATOR.                 04130900
   *   8 XXXX-P INX <DDDD> <STRING LITRAL>                              04131000
;                                                                       04131100
PROCEDURE PRTINFO(TYPE); VALUE TYPE; REAL TYPE;                         04131200
    BEGIN                                                               04131300
    LABEL STRINGV,ARITHV,STRING,DFNID,STDFNID ,XIT,GOSUBV;              04131400
SWITCH SW~STRINGV,ARITHV,XIT,XIT,STRING,DFNID,STDFNID,GOSUBV;           04131500
    INTEGER T;                                                          04131600
    FORMAT    ASV(A4,"-P",X2,A4,A6),%ARITH OR SUBSCRIPTED STRING VARB;  04131605
              GOSUB(A4,"-P",X2,"GO SUB ENTRY AT LINE NO.",X2,I8),       04131607
              SL(A4,"-P",X2,"STRINGARRAY[",I4,"]=",2A6,A3),             04131610
                   COMMENT FORMAT FOR STRING LITERALS;                  04131615
              SSV(A4,"-P",X2,A4,"STRINGARRAY[",I4,"].");                04131620
                   COMMENT FORMAT FOR SIMPLE STRING VARIABLES;          04131625
                   IF PRTOG THEN                                        04132200
    GO TO SW[ELBAT.[1:5]];                                              04132220
    GO XIT;                                                             04132230
STRINGV:                                                                04132300
    IF TYPE > 0 THEN                                                    04132400
    IF SINGLTOG THEN WRITE(LINE,SSV,B2D(DOLARRY),"$  " &ELBAT[24:38:6], 04132410
       DOLNDX)                                                          04132420
    ELSE WRITE(LINE[DBL],SSV,B2D(DOLARRY),"$  "&ELBAT[24:38:6],DOLNDX)  04132430
    ELSE                                                                04132440
    IF SINGLTOG THEN WRITE(LINE,ASV,B2D(PRTADDR),"$  "&ELBAT[24:38:6],  04132450
       TYPE)                                                            04132500
    ELSE WRITE(LINE[DBL],ASV,B2D(PRTADDR),"$  "&ELBAT[24:38:6],TYPE);   04132510
    GO XIT;                                                             04132600
ARITHV:                                                                 04132700
    IF SINGLTOG THEN WRITE(LINE,ASV,B2D(PRTADDR),"  "&(IF T ~           04132710
       ELBAT.[44:4] = 10 THEN " " ELSE T)[30:42:6]&ELBAT[24:38:6],TYPE) 04132720
    ELSE                                                                04132721
    WRITE(LINE[DBL],ASV,B2D(PRTADDR),"  "&(IF T~ELBAT.[44:4]=10 THEN " "04132800
      ELSE T)[30:42:6]&ELBAT[24:38:6],TYPE);                            04132900
    GO XIT;                                                             04133100
STRING:                                                                 04133200
    MOVECHR(6,SIMPSTRINGARRY[DOLNDX],0,RR1,2);                          04133500
    MOVECHR(6,SIMPSTRINGARRY[DOLNDX],6,RR2,2);                          04133600
    MOVECHR(3,SIMPSTRINGARRY[DOLNDX+1],4,RR3,5);                        04133700
    IF SINGLTOG THEN WRITE(LINE,SL,B2D(DOLARRY),DOLNDX,RR1,RR2,RR3) ELSE04133750
    WRITE(LINE[DBL],SL,B2D(DOLARRY),DOLNDX,RR1,RR2,RR3);                04133800
    GO XIT;                                                             04134000
DFNID:                                                                  04134100
    IF SINGLTOG THEN WRITE(LINE,ASV,B2D(PRTADDR)," "&ELBAT[36:38:6]     04134180
       &"FN"[24:36:12],TYPE) ELSE                                       04134190
    WRITE(LINE[DBL],ASV,B2D(PRTADDR),     " "&ELBAT[36:38:6]            04134200
      &"FN"[24:36:12],TYPE);                                            04134300
    GO XIT;                                                             04134400
STDFNID:                                                                04134500
    IF SINGLTOG THEN WRITE(LINE,ASV,B2D(PRTADDR),TYPE,"STD FN") ELSE    04134550
    WRITE(LINE[DBL],ASV,B2D(PRTADDR),TYPE,"STD FN"); GO XIT;            04134600
GOSUBV:                                                                 04134605
    IF SINGLTOG THEN WRITE(LINE,GOSUB,B2D(PRTADDR),TYPE) ELSE           04134609
    WRITE(LINE[DBL],GOSUB,B2D(PRTADDR),TYPE);                           04134610
XIT:                                                                    04134800
END PRTINFO;                                                            04134900
PROCEDURE FILLDEBUGARRAYS;                                              04145000
    BEGIN                                                               04145010
FILL WOP[*] WITH                                                        04145100
   "LITC","    ",                                                       04145150
   "OPDC","DESC",                                                       04145200
   10,"DEL ",11,"NOP ",12,"PRTE",16,"ADD ",17,"DLA ",18,"PRL ",         04145300
   19,"LNG ",21,"GEQ ",22,"BBC ",24,"INX ",35,"LOR ",37,"GTR ",         04145400
   38,"BFC ",39,"RTN ",40,"COC ",48,"SUB ",49,"DLS ",64,"MUL ",         04145500
   65,"DLM ",67,"LND ",68,"STD ",69,"NEQ ",71,"XIT ",72,"MKS ",         04145600
   128,"DIV ",129,"DLD ",130,"COM ",131,"LQV ",132,"SND ",133,"XCH ",   04145700
   134,"CHS ",167,"RTS ",168,"CDC ",197,"FTC ",260,"LOD ",261,"DUP ",   04145800
    278,"GBC ",280,"SSF ",281,"SSN ",294,"GFC ",322,"ZP1 ",384,"IDV ",  04145900
    454,"FTF ",                                                         04145905
   515,"SFB ",532,"ISD ",533,"LEQ ",534,"BBW ",548,"ISN ",549,"LSS ",   04146000
   550,"BFW ",581,"EQL ",582,"SSP ",584,"ECM ",709,"CTC ",790,"GBW ",   04146100
   806,"GFW ",896,"RDV ",965,"CTF ",1023,1023,1023,1023,1023,1023,      04146200
   1023,1023,1023,1023,1023,1023;                                       04146300
COMMENT  COP IS FILLED WITH CHARACTER MODE MNEUMONICS;                  04146400
FILL COP[*] WITH                                                        04146500
   "EXC ","NOP ","BSD ","BSS ","RDA ","TRW ","SED ","TDA ",             04146600
   "    ","    ","TBN ","    ","SDA ","SSA ","SFD ","SRD ",             04146700
   "    ","    ","SES ","    ","TEQ ","TNE ","TEG ","TGR ",             04146800
   "SRS ","SFS ","    ","    ","TEL ","TLS ","TAN ","BIT ",             04146900
   "INC ","STC ","SEC ","CRF ","JNC ","JFC ","JNS ","JFW ",             04147000
   "RCA ","ENS ","BNS ","RSA ","SCA ","JRC ","TSA ","JRV ",             04147100
   "CEQ ","CNE ","CEG ","CGR ","BIS ","BIR ","OCV ","ICV ",             04147200
   "CEL ","CLS ","FSU ","FAD ","TRP ","TRN ","TRZ ","TRS ";             04147300
COMMENT  POP IS FILLED WITH SPECIAL OPERATORS;                          04147400
FILL POP[*] WITH                                                        04147500
    "ZFN ","ZBN ","ZFD ","ZBD ","ISO ",0,"DIA ","DIB ","TRB ",          04147600
    "CFL ","CFE ";                                                      04147700
    END FILLDEBUGARRAYS;                                                04147800
COMMENT            ***** SECTION 05 *****                               05000000
                   EMITTERS                                             05000100
                      PACK                                              05000200
                      BZD                                               05000300
                      SEARCH                                            05000400
                      BUGGER                                            05000500
                      DEBUG                                             05000600
                      DEBUGWORD                                         05000700
                      EMITSTRING                                        05000800
                      EMIT                                              05000900
                      EMITL                                             05001000
                      EMITN                                             05001100
                      EMITV                                             05001200
                      EMITWOP                                           05001300
                      EMITCOP                                           05001400
                      EMITWORD                                          05001500
                      EMITUP                                            05001600
                      EMITB                                             05001700
                      EMITNUM                                           05001800
                   *****            *****                               05001900
;                                                                       05002000
COMMENT PACK  IS A STREAM PROCEDURE WHICH INSERTS A SYLLABLE INTO THE   05002100
          WORD OF THE CODE ARRAY(EDOC ARRAY) SPECIFIED BY EMIT;         05002200
STREAM PROCEDURE PACK(WORD,SYLLABLE,CODE); VALUE SYLLABLE,CODE;         05010000
    BEGIN                                                               05010100
    DI ~ WORD;  DI ~ DI + SYLLABLE;                                     05010200
    SI ~ LOC CODE; SI ~ SI+6;                                           05010300
    DS ~ 2 CHR;                                                         05010400
    END;                                                                05010500
COMMENT  ADJUST ADJUST L TO THE BEGINNING OF A WORD BOUNDARY, FILLING   05020000
           THE INTERVENING SPACE WITH NOPS;                             05020100
PROCEDURE ADJUST;                                                       05020200
    BEGIN                                                               05020300
    WHILE L.[46:2] ! 0 DO EMITWOP(NOP);                                 05020400
    END;                                                                05020500
COMMENT  B2D CONVERTS THE FOUR LOW ORDER OCTAL DIGITS TO BCD CODE;      05030000
ALPHA PROCEDURE B2D(B); VALUE B; REAL B;                                05030100
    B2D~0&B[45:45:3]&B[39:42:3]&B[33:39:3]&B[27:36:3];                  05030200
COMMENT  SEARCH PERFORMS A BINARY SEARCH ON COP AND WOP ARRAYS.         05040000
           GIVEN THE OPERATOR BITS, SEARCH YIELDS THE BCD MNEUMONIC     05040100
           FOR THAT OPERATOR. IF THE OPERATOR CANNOT BE FOUND THE       05040200
           SEARCH YIELDS BLANKS. NOTE: DIA,DIB,TRB ARE RETURNED AS      05040300
           BLANKS;                                                      05040400
ALPHA PROCEDURE SEARCH(Q,KEY); VALUE KEY; ARRAY Q[0]; REAL KEY;         05040500
    BEGIN                                                               05040600
    LABEL L;                                                            05040700
    INTEGER N,I;                                                        05040800
    COMMENT   N   AND I   ARE INITIALIZED ASSUMMING THAT Q IS ORDERED   05040900
              BY PAIRS[ARGUMENT,FUNCTION ETC.] AND THAT THE FIRST       05041000
              ARGUMENT IS IN Q[4]. FURTHERMORE THE LENGTH OF Q IS 128.  05041100
;                                                                       05041105
    N ~ 64;                                                             05041200
    FOR I ~ 66 STEP IF Q[I] < KEY THEN N ELSE - N WHILE N~N DIV 2}1 DO  05041300
      IF Q[I]=KEY THEN GO TO L;                                         05041400
    I ~ 0;    COMMENT ARGUMENT NOT FOUND;                               05041500
L:                                                                      05041600
    SEARCH ~ Q[I+1];                                                    05041700
    END SEARCH;                                                         05041800
COMMENT  BUGGER-RETURNS THE ALPHA MNEUMONIC OF AN OPERATOR TO           05050000
         DEBUG;                                                         05050100
ALPHA PROCEDURE BUGGER(OP); VALUE OP; INTEGER OP;                       05050200
    BEGIN                                                               05050300
    INTEGER Q;                                                          05050400
    WOP[1] ~ "    ";                                                    05050500
    IF BUGGER ~ SEARCH(WOP,OP)="    " THEN                              05050600
      IF Q ~ OP.[44:4]}9 THEN                                           05050700
        BEGIN                                                           05050800
        BUGGER ~ POP[IF Q!10 THEN Q-5 ELSE OP.[42:2]];                  05050900
        WOP[1] ~(IF Q=10 THEN OP.[39:3]&OP[41:38:1]                     05051000
          ELSE OP.[41:3]&OP[39:38:3]&"  "[24:36:12]);                   05051100
        END;                                                            05051200
    END BUGGER;                                                         05051300
COMMENT  DEBUG IS CALLED BY EMIT IF DEBUGGING IS REQUESTED. OPCODE      05060000
         MNEUMONIC IS OUTPUT ON THE COMPILERS LINE FILE;                05060100
PROCEDURE DEBUG(S); VALUE S; REAL S;                                    05060200
    BEGIN                                                               05060300
    INTEGER T1;                                                         05060400
    IF STRINGTOG THEN                                                   05060500
    IF SINGLTOG THEN                                                    05060560
    WRITE(LINE,BUG,B2D(L.[38:8]),B2D(L.[46:2]),COP[S.[42:6]],           05060570
          B2D(S.[36:6]),B2D(S))                                         05060580
    ELSE                                                                05060590
    WRITE(LINE[DBL],BUG,B2D(L.[38:8]),B2D(L.[46:2]),COP[S.[42:6]],      05060600
    B2D(S.[36:6]),B2D(S))                                               05060605
    ELSE                                                                05060700
    IF SINGLTOG THEN                                                    05060750
    WRITE(LINE,BUG,B2D(L.[38:8]),B2D(L.[46:2]),IF T1~S.[46:2]=1         05060760
          THEN BUGGER(S.[36:10])                                        05060770
          ELSE WOP[T1],IF T1=1 THEN WOP[1] ELSE B2D(S.[36:10]),B2D(S))  05060780
    ELSE                                                                05060790
    WRITE(LINE[DBL],BUG,B2D(L.[38:8]),B2D(L.[46:2]),IF T1~S.[46:2]=1    05060800
    THEN BUGGER(S.[36:10])                                              05060805
        ELSE WOP[T1],IF T1=1 THEN WOP[1] ELSE B2D(S.[36:10]),B2D(S));   05060900
    END DEBUG;                                                          05061000
COMMENT DEBUGSL IS USED TO FORMAT STRING LITERALS FOR DEBUG OUTPUT.     05069000
;                                                                       05069100
STREAM PROCEDURE DEBUGSL(WORD,SYL,SL,FEIL); VALUE WORD,SYL;             05069200
    BEGIN                                                               05069300
    DI ~ FEIL; SI ~ LOC WORD; SI ~ SI+5; DS ~ 3 CHR; DS ~ LIT ":";      05069400
    SI ~ LOC SYL; SI ~ SI+7; DS ~ CHR; DS ~ 2 LIT "  ";                 05069500
    SI ~ SL; DS ~ 15 CHR; DS ~ 2 LIT "  ";                              05069600
    WORD ~ DI;DS ~ 8 LIT "    ";                                        05069700
    SI ~ WORD; DS ~ 11 WDS ;                                            05069800
    END DEBUGSL;                                                        05069900
COMMENT DEBUGWORD FORMATS TWO FIELDS FOR DEBUGGING OUTPUT IN            05070000
        OCTAL, NAMELY:                                                  05070100
        1. 4 CHARACTERS FOR THE L REGISTER.                             05070200
        2. 16 CHARACTERS FOR THE WORD BEING EMITTED;                    05070300
STREAM PROCEDURE DEBUGWORD(WORD,SYL,CODE,FEIL);  VALUE WORD,SYL,CODE;   05070400
    BEGIN                                                               05070500
    DI ~ FEIL; SI ~ LOC WORD; SI ~ SI+5; DS ~ 3 CHR; DS ~ LIT":";       05070600
    SI ~ LOC SYL; SI ~ SI+7; DS ~ CHR; DS ~ 2 LIT " ";                  05070700
    SI ~ LOC CODE;                                                      05070800
    16(DS ~ 3 RESET; 3(IF SB THEN DS ~ SET ELSE DS ~ RESET; SKIP 1 SB));05070900
    48(DS ~ 2 LIT "  "); DS ~ LIT " ";                                  05071000
    END DEBUGWORD;                                                      05071100
COMMENT  EMIT PLACES A SYLLABLE IN THE CODE STREAM(EDOC ARRAY).         05090000
           IF DEBUG IS CALLED FOR, DEBUGGING IS OUTPUT ON THE COMPILER  05090100
           OUTPUT LISTING FILE. SOME SEGMENT SIZE CHECKING IS DONE;     05090200
PROCEDURE EMIT(VALU); VALUE VALU; REAL VALU;                            05090300
    BEGIN                                                               05090400
    PACK(EDOC[L.EDOCCLM],0&L[45:46:2],VALU);                            05090500
    IF DEBUGTOG THEN DEBUG(VALU);                                       05090600
    L ~ L+1;                                                            05090605
    END EMIT;                                                           05090700
COMMENT  EMITL EMITS A LIT CALL;                                        05100000
PROCEDURE EMITL(LIT); VALUE LIT; REAL LIT;                              05100100
    EMIT(0&LIT[36:38:10]);                                              05100200
COMMENT EMITN EMITS A DESCRIPTOR CALL. IF THE ADDRESS IS FOR THE SECOND 05110000
        HALF OF THE PRT, THEN A PRTE IS EMITTED;                        05110100
PROCEDURE EMITN(ADDRESS); VALUE ADDRESS;INTEGER ADDRESS;                05110200
    BEGIN                                                               05110300
    IF ADDRESS > 1023 THEN EMITWOP(PRTE);                               05110400
    EMIT(3&ADDRESS[36:38:10]);                                          05110500
    END EMITN;                                                          05110600
COMMENT EMITV EMITS AN OPERAND CALL.  IF THE ADDRESS IS FOR THE SECOND  05130000
          HALF OF THE PRT, THEN IT ALSO EMITS A PRTE;                   05130100
PROCEDURE EMITV(ADDRESS); VALUE ADDRESS; INTEGER ADDRESS;               05130200
    BEGIN                                                               05130300
    IF ADDRESS > 1023 THEN EMITWOP(PRTE);                               05130400
    EMIT(2 & ADDRESS[36:38:10]);                                        05130500
    END EMITV;                                                          05130600
COMMENT EMITCOP EMITS A CHARACTOR OPERATOR.                             05150000
          TWO PARAMETERS ARE PASSED TO EMITCOP DEFINING THE CHARACTER   05150100
          MODE SYLLABLE. THEY ARE:                                      05150200
                1. SYLLABLE TYPE AND THE                                05150300
                2. REPEAT FIELD;                                        05150400
PROCEDURE EMITCOP(ST,RF); VALUE  ST,RF; REAL ST,RF;                     05150500
              BEGIN                                                     05150503
    EMIT(ST&RF[36:42:6]);                                               05150600
              END  OF EMITCOP;                                          05150700
COMMENT EMITWORD PLACES THE PARAMETER "WORD" IN THE EDOC ARRAY. IF      05160000
        DEBUGGING IS REQUIRED, THE "WOR" IS OUTPUT ON THE LINE FILE     05160100
        IN OCTAL FORMAT;                                                05160200
PROCEDURE EMITWORD(WORD); VALUE WORD; REAL WORD;                        05160300
    BEGIN                                                               05160400
    ADJUST;                                                             05160500
    MOVEWDS(1,WORD,EDOC[L.EDOCCLM]);                                    05160600
    IF DEBUGTOG THEN                                                    05160700
         BEGIN                                                          05160800
        DEBUGWORD(B2D(L.[38:8]),B2D(L.[46:2]),WORD,LIN);                05160900
         SINGLINE;                                                      05161000
         END;                                                           05161100
    L ~ L+4;                                                            05161200
    END EMITWORD;                                                       05161300
COMMENT  EMITUP COMPILES THE EXPRESSION X TO THE Y. FOR Y { 1023  AND   05170000
           Y AN INTEGER A SERIES OF DUPS AND MULS IS COMPILED IN-LINE   05170100
           ELSE A CALL ON THE LOG,EXP AND XTOTHEI INTRINSICS IS EMITTED 05170200
           TO PERFORM THE EXPONENTIATION;                               05170300
PROCEDURE EMITUP;                                                       05170400
    BEGIN                                                               05170500
    INTEGER I;                                                          05170600
    REAL CTR ;                                                          05170700
    LABEL CMPLXPR,LIT,OPDPOS,OPDNEG,LITCHS,CMPLXCHS,XIT;                05170800
    SWITCH WICHWAY ~ CMPLXPR,LIT,OPDPOS,OPDNEG,LITCHS,CMPLXCHS;         05170900
    GO TO WICHWAY[EXPRSTATE+1];                                         05171000
LITCHS:  COMMENT DELETE CHS FROM CODE STREAM;                           05171100
    L ~ L-1;                                                            05171200
LIT:                                                                    05171300
    I ~ GET(L ~ L-1);                                                   05171400
                                                                        05171500
    IF I = 0 THEN                                                       05171600
         BEGIN                                                          05171700
         EMITWOP(DEL);                                                  05171800
         EMITL(1);                                                      05171900
         GO XIT;                                                        05172000
         END                                                            05172100
     ELSE                                                               05172200
         BEGIN                                                          05172300
         I ~ I DIV 4;                                                   05172410
         CTR ~ 1;                                                       05172500
         WHILE I DIV 2 ! 0 DO                                           05172600
              BEGIN                                                     05172700
              EMITWOP(DUP);                                             05172800
              IF BOOLEAN (I)  THEN                                      05172900
                   BEGIN                                                05173000
                   CTR ~ CTR+1;                                         05173100
                   EMITWOP(DUP);                                        05173200
                   END;                                                 05173300
              EMITWOP(MUL);                                             05173400
              I ~ I DIV 2                                               05173500
              END;                                                      05173600
        WHILE(CTR ~ CTR-1)! 0 DO EMITWOP(MUL) ;                         05173700
         IF EXPRSTATE = 4 THEN                                          05173800
              BEGIN                                                     05173900
              EMITL(1); EMITWOP(XCH); EMITWOP(FDV);                     05174000
              END;                                                      05174100
        GO XIT;                                                         05174200
         END;                                                           05174300
CMPLXPR:OPDPOS:OPDNEG:CMPLXCHS:                                         05174400
    EMITWOP(MKS);                                                       05174500
    EMITL(GETINTRIN(LOGI));                                             05174600
    EMITWOP(LOD);                                                       05174700
    EMITL(GETINTRIN(EXPI));                                             05174800
    EMITWOP(LOD);                                                       05174900
    EMITV(GETINTRIN(XTOTHEI));                                          05175000
    EMITWOP(DEL);                                                       05175100
XIT:                                                                    05175200
         EXPRSTATE ~ 0;                                                 05175210
    END EMITUP;                                                         05175300
COMMENT  EMITB PLACES THE BRANCH OPERATOR AND THE ASSOCIATED BRANCH     05180000
           CONSTANT IN THE CODE STREAM;                                 05180100
PROCEDURE          EMITB(BRANCH,FROM,TOWARDS,INFOPTR);                  05180200
VALUE              BRANCH, FROM, TOWARDS, INFOPTR;                      05180300
INTEGER            BRANCH, FROM, TOWARDS, INFOPTR;                      05180400
              BEGIN                                                     05180500
DEFINE             INFOWD=INFO[INFOPTR.[32:8],INFOPTR.[40:8]]#,         05180505
                   PRTADDR = [7:11]#;                                   05180510
INTEGER            TL, GT1;                                             05180600
REAL               GT2;                                                 05180605
    TL ~ L;                                                             05180695
    L ~ FROM-2;                                                         05180700
                   IF L.SEGNO = TOWARDS.SEGNO THEN                      05180705
              BEGIN                                                     05180710
    GT1 ~ TOWARDS-FROM;                                                 05180800
     IF TOWARDS.EDOCSYL = 0 THEN                                        05180900
        BEGIN                                                           05181000
        BRANCH ~ BRANCH & 1[37:47:1];                                   05181100
        GT1 ~ TOWARDS DIV 4 -(FROM-1) DIV 4 END;                        05181200
    EMITNUM(ABS(GT1));                                                  05181300
    EMITWOP(BRANCH&(REAL(GT1}0)+1)[40:46:2]);                           05181400
              END  ELSE                                                 05181405
              BEGIN                                                     05181410
                   IF GT1 ~ (GT2 ~ INFOWD).PRTADDR = 0 THEN             05181415
              BEGIN                                                     05181420
                   IF BOOLEAN((INFOWD~GT2~GT2&(GT1~ALLOCPRT)[7:37:11])  05181425
                      . DEFFLAG)  THEN   BLDPROGDESC(GT1,GT2.[18:7],    05181430
                         GT2.[25:8]);                                   05181432
              END  ;                                                    05181435
                   EMITN(GT1); EMITWOP(BRANCH);                         05181440
              END  ;                                                    05181445
    L ~ TL;                                                             05181500
    END EMITB;                                                          05181600
COMMENT  EMITNUM HANDLES THE JOB OF EMITTING CONSTANTS BOTH EXPLICIT    05190000
           AND IMPLICIT. EMITNUM PRODUCES THE DESIRED CODE TO PLACE A   05190100
           CONSTANT ON THE TOP OF THE STACK. IF THE CONSTANT IS A       05190200
           LITERAL A LITC SYLLABLE IS PRODUCED.  IF THE CONSTANT  IS    05190300
           NON-LITERAL AN OPDC X, LITC N, BFW IS EMITTED. NOPS ARE EMIT-05190400
           TED UNTIL THE SYLLABLE COUNTER IS ALIGNED ON A WORD BOUNDARY.05190500
           SYLLABLE FOLLOWING THE CONSTANT AND IS DETERMINED BY THE     05190600
           FORMULA 7-(L+1) MOD 4                                        05190700
           THE FULL WORD OPERAND IS EMITTED IN THE CODE STREAM AND THE  05190800
           SYLLABLE COUNTER IS ADJUSTED TO POINT TO THE SYLLABLE        05190900
           FOLLOWING THE CONSTANT.                                      05190910
           X IS ADDRESS OF THE CONSTANT C-RELATIVE TO THE OPDC DETER-   05190930
           MINED BY THE FORMULA 768 + (1+(L MOD 4) DIV 2).              05190940
           N IS THE NUMBER OF SYLLABLES TO BRANCH FORWARD(I.E. TO THE   05190950
;                                                                       05190960
PROCEDURE EMITNUM(WORD); VALUE  WORD; REAL WORD;                        05191000
    BEGIN                                                               05191100
    REAL SAVL1,SAVL2;                                                   05191200
    IF WORD.[1:37] = 0 THEN                                             05191300
         BEGIN                                                          05191400
         EMITL(WORD); EXPRSTATE ~ 1;                                    05191500
         END                                                            05191600
    ELSE BEGIN                                                          05191700
    EMITV((L MOD 4) DIV 2 +769);                                        05191800
         EMITL(2);%   BRANCH AROUND C-REL                               05191850
         EMITWOP(LFU);%         CONSTANT                                05191900
         ADJUST;                                                        05192000
         EMITWORD(WORD);                                                05192100
         EXPRSTATE ~ 2;                                                 05192105
         END;                                                           05192700
    END EMITNUM;                                                        05192800
COMMENT EMITSL MOVES A 16 CHARACTER STRING LITERAL INTO THE EDOCARRAY;  05200000
PROCEDURE EMITSL(SL);                                                   05200100
REAL SL;                                                                05200200
    BEGIN                                                               05200300
    IF DEBUGTOG THEN                                                    05200305
        BEGIN                                                           05200310
        DEBUGSL(B2D(L.[38:8]),B2D(L.[46:2]),STRINGLIT,LIN);             05200315
        SINGLINE;                                                       05200320
        END;                                                            05200325
    MOVECHR(16,SL,0,EDOC[L.EDOCCLM],0&L[45:46:2]);                      05200400
    L ~ L+8;                                                            05200500
    END;                                                                05200600
COMMENT  EMITFIXL PLACES LITC N IN CODE STREAM AT LOC-1;                05210000
PROCEDURE EMITFIXL(N,LOC); VALUE N,LOC; INTEGER LOC,N;                  05210100
    BEGIN                                                               05210200
    INTEGER TL;                                                         05210300
    TL ~ L;                                                             05210400
    L ~ LOC-1;                                                          05210500
    EMITL(N);                                                           05210600
    L ~ TL;                                                             05210700
    END;                                                                05210800
COMMENT            ***** SECTION 06 *****                               06000000
                   ARITHMETIC EXPRESSIONS                               06000100
                   "LET" STATEMENT                                      06000200
                   *****            *****                               06000300
COMMENT  ARITHMETIC EXPRESSIONS ARE COMPILED BY THE PROCEDURES          06000400
          ARITHVARB,AEXPR,PRIMARY,ARITHSEC,SIMPARITH, AND ARITHCOMP.    06000500
           STRING EXPRESSIONS ARE COMPILED BY THE PROCEDURE STRINGVARB; 06000600
COMMENT  LET IS CALLED BY THE STATEMENT ROUTINE. LET CALLS ARITHVARB TO 06010000
           PROCESS ARITHMETIC STATEMENTS AND STRINGVARB TO PROCESS      06010100
           STRING STATEMENTS;                                           06010200
PROCEDURE          LETST;                                               06010300
    BEGIN                                                               06010400
         EQUALMODETOG := ASGNOPMODE;                                    06010500
    IF ELCLASS = ARITHID THEN ARITHVARB(FL)                             06010600
      ELSE IF ELCLASS = STRINGID THEN                                   06010700
         BEGIN                                                          06010800
         EMIT(MKS); STRINGVARIABLE(FL);                                 06010805
         END                                                            06010810
      ELSE ERR(69);                                                     06010900
    IF ELCLASS ! PERCENT THEN ERR(70);                                  06011000
    END LET;                                                            06011100
COMMENT  ARITHVARB HANDLES CODE FOR THE FOLLOWING EXPRESSIONS.          06020000
              1.   V                                                    06020100
              2.   V ~ EXPR3                                            06020200
              3.   V(EXPR1)                                             06020300
              4.   V(EXPR1) ~ EXPR3                                     06020400
              5.   V(EXPR1,EXPR2)                                       06020500
              6.   V(EXPR1,EXPR2) ~ EXPR3                               06020600
         CODE EMITTED FOR THE ABOVE CASES IS                            06020700
              1.   OPDC V                                               06020800
              2.   (EXPR3)                                              06020900
                   LITC V                                               06021000
                   STD/SND                                              06021100
              3.   (EXPR1)                                              06021200
                   OPDC V                                               06021300
              4.   (EXPR1)                                              06021400
                   DESC V                                               06021500
                   (EXPR3)                                              06021600
                   XCH                                                  06021700
                   STD/SND                                              06021800
              5.   (EXPR1)                                              06021900
                   DESC V                                               06022000
                   LOD                                                  06022100
                   (EXPR2)                                              06022200
                   COC                                                  06022300
              6.   (EXPR1)                                              06022400
                   DESC V                                               06022500
                   LOD                                                  06022600
                   (EXPR2)                                              06022700
                   CDC                                                  06022800
                   (EXPR3)                                              06022900
                   XCH                                                  06023000
                   STD/SND                                              06023100
         WHERE                                                          06023200
              V IS AN ARITHMETIC TYPE VARIABLE.                         06023300
              OPDC,DESC,LITC,LOD,COC,CDC,XCH,STD,SND ARE B5500 MACHINE  06023400
                INSTRUCTIONS.                                           06023500
              AND (EXPR1),(EXPR2),(EXPR3) ARE ARITHMETIC EXPRESSIONS.   06023600
              EXPRESSIONS WILL IN GENERAL CAUSE RECURSION. THE PARAMETER06023700
              TO ARITHVARB IS USED TO TELL WHO CALLED IT;               06023800
PROCEDURE ARITHVARB(FX); VALUE FX; REAL FX;                             06023900
    BEGIN                                                               06024000
    LABEL STORE,RPERR,XIT,SKAN;                                         06024100
    REAL SAVLBAT, COMMENT SAVED ELBAT WORD FOR VARIABLE;                06024200
         J;       COMMENT SUBSCRIPT COUNTER FOR DIMENSIONED VARIABLES;  06024300
    COMMENT: IF VARIABLE NOT ARITHMETIC TYPE THEN ERROR;                06024400
    SAVLBAT ~  ELBAT;                                                   06024600
    IF STEPI = ASSIGNOP THEN                                            06024700
         BEGIN                                                          06024800
         COMMENT: ALLOCATE PRT SPACE,    FIX-UP ELBAT WD. AND DICT      06024900
           ENTRY FOR SIMPLE VARIABLE;                                   06025000
         ELBAT ~ SAVLBAT;                                               06025100
         GETSIMPADDR; SETSIMPDEFFLAG;STUFFBACK;                         06025200
         SAVLBAT ~ ELBAT;                                               06025300
         STEPIT;                                                        06025400
         AEXPR;                                                         06025500
         EMITL(SAVLBAT.SIMPADDRPART);                                   06025600
STORE:   IF FL = FX THEN EMITWOP(STD) ELSE EMITWOP(SND)                 06025700
         END                                                            06025800
    ELSE BEGIN                                                          06025900
         IF ELCLASS = LTPAREN THEN                                      06026000
              BEGIN                                                     06026100
         IF SAVLBAT.DICTCLM ! 10 THEN ERR(106);                         06026110
              J ~ 0;                                                    06026200
              COMMENT ALLOCATE PRT SPACE AND FIX-UP ELBAT WD. AND DICT  06026300
                ENTRY FOR ARRAY VARIABLE;                               06026400
              ELBAT ~ SAVLBAT;                                          06026500
              GETARRYADDR; STUFFBACK;                                   06026600
              SAVLBAT ~ ELBAT;                                          06026700
              STEPIT;                                                   06026800
              AEXPR;                                                    06026900
              J ~ J + 1;                                                06027000
              IF ELCLASS = RTPAREN THEN                                 06027100
                   BEGIN                                                06027200
                   CHEKDIMENS(SAVLBAT,J);                               06027300
                   IF STEPI = ASSIGNOP THEN                             06027400
                        BEGIN                                           06027500
                        ELBAT ~ SAVLBAT;                                06027600
                        SETARRYDEFFLAG; STUFFBACK;                      06027700
                        EMITN(SAVLBAT.ARRYADDRPART);                    06027800
                        GO TO SKAN;                                     06027900
                        END                                             06028000
                   ELSE BEGIN                                           06028100
                        IF FX=FL THEN BEGIN ERRSKIP(71); GO XIT END;    06028101
                        LBAT ~ ELBAT;                                   06028105
                        ELBAT ~ SAVLBAT;                                06028200
                        IF FX!FR                                        06028300
                        THEN SETARRYREFFLAG                             06028305
                        ELSE SETARRYDEFFLAG;                            06028310
                        STUFFBACK;                                      06028320
                        IF FX!FR                                        06028400
                        THEN EMITV(SAVLBAT.ARRYADDRPART)                06028405
                        ELSE EMITN(SAVLBAT.ARRYADDRPART);               06028410
                        ELBAT ~ LBAT;                                   06028412
                        END                                             06028500
                   END                                                  06028600
              ELSE IF ELCLASS = COMMA THEN                              06028700
                   BEGIN                                                06028800
                   EMITN(SAVLBAT.ARRYADDRPART);                         06028900
                   EMITWOP(LOD);                                        06029000
                   STEPIT;                                              06029100
                   AEXPR;                                               06029200
                   J~J + 1;                                             06029300
                   IF ELCLASS = RTPAREN THEN                            06029400
                       BEGIN                                            06029500
                        CHEKDIMENS(SAVLBAT,J);                          06029600
                       IF STEPI   = ASSIGNOP THEN                       06029700
                            BEGIN                                       06029800
                            ELBAT ~ SAVLBAT;                            06029900
                            SETARRYDEFFLAG; STUFFBACK;                  06030000
                            EMITWOP(CDC);                               06030100
SKAN:                       STEPIT;                                     06030200
                            AEXPR;                                      06030300
                            EMITWOP(XCH);                               06030400
                            GO TO STORE;                                06030500
                            END                                         06030600
                        ELSE BEGIN                                      06030700
                        IF FX=FL THEN BEGIN ERRSKIP(71); GO XIT END;    06030701
                             LBAT ~ ELBAT;                              06030705
                             ELBAT ~ SAVLBAT;                           06030800
                             IF FX ! FR                                 06030900
                             THEN SETARRYREFFLAG                        06030905
                             ELSE SETARRYDEFFLAG;                       06030910
                             STUFFBACK;                                 06030915
                             ELBAT ~ LBAT;                              06030920
                             IF FX ! FR                                 06031000
                             THEN EMITWOP(COC)                          06031005
                             ELSE EMITWOP(CDC) ;                        06031010
                             END                                        06031100
                        END                                             06031200
                   ELSE ERR(75);                                        06031300
                   END                                                  06031400
              ELSE RPERR: ERR(72);                                      06031500
              END                                                       06031600
         ELSE IF FX=FL THEN ERRSKIP(71)                                 06031700
           ELSE                                                         06031800
              BEGIN                                                     06031900
              LBAT ~ ELBAT;                                             06031905
              ELBAT ~ SAVLBAT;                                          06032000
              GETSIMPADDR;                                              06032095
              IF FX!FR THEN SETSIMPREFFLAG ELSE SETSIMPDEFFLAG;         06032100
              STUFFBACK;                                                06032105
              IF FX!FR THEN EMITV(ELBAT.SIMPADDRPART)                   06032200
                ELSE EMITN(ELBAT.SIMPADDRPART);                         06032201
              ELBAT ~ LBAT;                                             06032205
              END                                                       06032300
         END;                                                           06032400
XIT:EXPRSTATE~0;                                                        06032500
    END ARITHVARB;                                                      06032600
COMMENT  AEXPR IS CALLED TO COMPILE CODE FOR AN ARITHMETIC EXPRESSION;  06040000
PROCEDURE AEXPR;                                                        06040100
    BEGIN                                                               06040200
    ARITHSEC;                                                           06040300
    SIMPARITH;                                                          06040400
    END AEXPR;                                                          06040500
COMMENT  ARITHSEC COMPILES THE FIRST PRIMARY IN AN ARITHMETIC EXPRES-   06050000
           SION. IN PARTICULAR IT HANDLES P, +P, -P, AND -P**Q WHERE P  06050100
           AND Q ARE PRIMARIES;                                         06050200
PROCEDURE ARITHSEC;                                                     06050300
    BEGIN                                                               06050400
    LABEL IFPOWER,COMPL, XIT;                                           06050500
    IF ELCLASS = ADOP THEN                                              06050600
         BEGIN                                                          06050700
         IF ELBAT.[36:12] = ADD THEN                                    06050800
              BEGIN                                                     06050900
              STEPIT;                                                   06051000
              PRIMARY;                                                  06051100
              GO XIT;                                                   06051200
              END                                                       06051300
         ELSE                                                           06051400
              BEGIN                                                     06051500
              STEPIT;                                                   06051600
              PRIMARY;                                                  06051700
              END;                                                      06051800
IFPOWER:                                                                06051900
         IF ELCLASS = EXPOPR THEN                                       06052000
              BEGIN                                                     06052100
              STEPIT;                                                   06052200
              PRIMARY;                                                  06052300
              EMITUP;                                                   06052400
              GO IFPOWER;                                               06052500
              END                                                       06052600
         ELSE                                                           06052700
              BEGIN                                                     06052800
              IF EXPRSTATE = 2 OR EXPRSTATE = 3 THEN                    06052900
                   BEGIN                                                06053000
                   EDOC[L.EDOCCLM-1] ~ -EDOC[L.EDOCCLM-1];              06053100
COMPL:                                                                  06053300
                   EXPRSTATE ~ 5-EXPRSTATE;                             06053400
                   END                                                  06053500
              ELSE IF EXPRSTATE = 4 OR EXPRSTATE = 5 THEN               06053600
                   BEGIN                                                06053700
                   L ~ L-1; GO COMPL;                                   06053800
                   END                                                  06053900
              ELSE BEGIN                                                06054000
                   EMITWOP(CHS); GO COMPL;                              06054100
                   END                                                  06054200
              END                                                       06054300
         END                                                            06054400
    ELSE PRIMARY;                                                       06054500
XIT:                                                                    06054600
    END ARITHSEC;                                                       06054700
COMMENT  SIMPARITH COMPILES SIMPLE ARITHMETIC EXPRESSIONS ON THE        06060000
           ASSUMPTION THAT AN ARITHMETIC PRIMARY HAS ALREADY BEEN       06060100
           HANDLED;                                                     06060200
PROCEDURE SIMPARITH;                                                    06060300
     WHILE ELCLASS } ADOP DO ARITHCOMP;                                 06060400
COMMENT ARITHCOMP IS THE CORE OF THE ARITHMETIC EXPRESSION ROUTINE      06060500
          ANALYSIS, IT CALL THE PRIMARY ROUTINE, PERFORMS THE           06060600
          HIERARCHIAL ANALYSIS AND EMITS THE ARITHMETIC OPERATORS;      06060700
PROCEDURE ARITHCOMP;                                                    06070000
    BEGIN                                                               06070100
    LABEL GETOPR,XIT,BACK,CHEKLAS;                                      06070200
    INTEGER OPERATOR,OPCLASS;                                           06070300
GETOPR:                                                                 06070400
    OPERATOR ~ ELBAT.[36:12];                                           06070500
    OPCLASS ~ ELCLASS;                                                  06070600
    STEPIT;                                                             06070700
    PRIMARY;                                                            06070800
    IF OPCLASS = EXPOPR THEN                                            06070900
        BEGIN                                                           06071000
        EMITUP;                                                         06071100
CHEKLAS:IF OPCLASS = ELCLASS THEN GO GETOPR;                            06071200
        GO XIT;                                                         06071300
        END                                                             06071400
    ELSE BACK: IF OPCLASS < ELCLASS THEN                                06071500
        BEGIN                                                           06071600
        ARITHCOMP; GO BACK;                                             06071700
        END                                                             06071800
    ELSE BEGIN EMITWOP(OPERATOR); EXPRSTATE~0; GO CHEKLAS; END;         06071900
XIT:                                                                    06072000
    END ARITHCOMP;                                                      06072100
COMMENT  COMPILEARGS COMPILES THE ARGUMENT LIST OF A DEFINED FUNCTION.  06073000
  COMPILEARGS IS CALLED BY DEFNDESIG.                                   06073100
;                                                                       06073200
PROCEDURE COMPILEARGS(J) ; REAL J;                                      06073300
    BEGIN                                                               06073400
    LABEL XIT,BAC;                                                      06073500
BAC:                                                                    06073600
    AEXPR;                                                              06073700
                                                                        06073800
    J ~ J+1;                                                            06073810
                                                                        06073820
    IF ELCLASS = COMMA THEN                                             06073830
         BEGIN                                                          06073840
         STEPIT;                                                        06073850
         GO BAC;                                                        06073860
         END;                                                           06073870
XIT:                                                                    06073880
    END COMPILEARGS;                                                    06073900
COMMENT  CHEKNUMBEROFPARAMETERS COMPARES THE NUMBER OF PARAMETERS SPEC- 06073905
         IFIED IN THE ELBAT WORD AGAINST THE NUMBER COMPILED BY         06073910
         COMPILEARGS.                                                   06073915
;                                                                       06073920
PROCEDURE CHEKNUMBEROFPARAMETERS(N); VALUE N; REAL N;                   06073925
    IF ELBAT.FUNCADDRPART = 0                                           06073935
    THEN ELBAT.NOPARAMS ~ N                                             06073940
      ELSE                                                              06073945
    IF ELBAT.NOPARAMS! N                                                06073950
      THEN ERR(84);                                                     06073955
COMMENT DEFNDESIG COMPILES CODE FOR A DEFINED FUNCTION DESIGNATOR.      06074000
;                                                                       06074100
PROCEDURE DEFNDESIG;                                                    06074200
    BEGIN                                                               06074300
    LABEL XIT;                                                          06074302
    REAL I,T,SAVLBAT;                                                   06074305
    SAVLBAT ~ ELBAT;                                                    06074310
    EMITWOP(MKS);                                                       06074400
    IF STEPI = LTPAREN                                                  06074500
    THEN                                                                06074600
         BEGIN                                                          06074605
         STEPIT;                                                        06074610
         COMPILEARGS(I);                                                06074615
         IF ELCLASS ! RTPAREN                                           06074700
         THEN BEGIN ERRSUP(081); GO XIT END;                            06074800
         END                                                            06074900
    ELSE T ~ ELBAT;                                                     06075000
         ELBAT ~ SAVLBAT;                                               06075500
         CHEKNUMBEROFPARAMETERS(I);                                     06075600
         GETFUNCADDR;SETFUNCREFFLAG; STUFFBACK;                         06075700
         EMITV(ELBAT.FUNCADDRPART);                                     06075800
         IF T = 0 THEN STEPIT ELSE ELBAT ~ T;                           06075850
XIT:                                                                    06075900
    END DEFNDESIG;                                                      06076000
COMMENT  STDFNDESIG COMPILES CODE FOR A STANDARD FUNCTION  DESIGNATOR.  06077000
  INTRINSICS ABS, INT, AND SGN ARE COMPILED IN-LINE, OTHERWISE A CALL   06077100
  ON THE INTRINSIC IS GENERATED.                                        06077200
;                                                                       06077300
PROCEDURE STDFNDESIG;                                                   06077400
    BEGIN                                                               06077500
    LABEL XIT,ABS,SGN,INT;                                              06077600
    SWITCH NLIN ~ ABS,SGN,INT;                                          06077700
    REAL SAVLBAT;                                                       06077800
    SAVLBAT ~ ELBAT;                                                    06077900
    IF ELBAT.INLINFLAG  = 0 THEN EMITWOP(MKS);                          06078000
    IF STEPI ! LTPAREN THEN  BEGIN  ERRSKIP(078); GO XIT;  END          06078100
      ELSE STEPIT;                                                      06078200
    AEXPR;                                                              06078300
              IF SAVLBAT.SIMPADDRPART = 101 THEN %IF RND FUNC EMIT DESC 06078310
         BEGIN                                                          06078320
              IF PRTRND = 0 THEN PRTRND ~ ALLOCPRT;                     06078330
              EMITN(PRTRND);                                            06078340
         END;                                                           06078350
    IF ELCLASS ! RTPAREN THEN BEGIN  ERRSKIP(079); GO XIT ; END         06078400
      ELSE STEPIT;                                                      06078500
    IF SAVLBAT.INLINFLAG ! 0                                            06078600
    THEN BEGIN                                                          06078700
         GO TO NLIN[SAVLBAT.[18:10]];                                   06078800
ABS:                                                                    06078900
         EMITWOP(SSP); GO XIT;                                          06079000
SGN:                                                                    06079100
         EMITWOP(DUP);                                                  06079200
         EMITL(0);                                                      06079300
                   EMITWOP(NEQL);%                                      06079400
         EMITWOP(XCH);                                                  06079500
         EMITCOP(DIA,1);                                                06079600
         EMITCOP(DIB,1);                                                06079700
         EMITCOP(TRB,1);                                                06079800
         GO XIT;                                                        06079810
INT:                                                                    06079820
         EMITNUM(.5);                                                   06079830
         EMITWOP(SUB);                                                  06079840
         EMITL(JUNK);                                                   06079850
         EMITWOP(ISN);                                                  06079860
         GO XIT;                                                        06079870
         END;                                                           06079880
    EMITV(SAVLBAT.FUNCADDRPART);                                        06079890
XIT:END STDFNDESIG;                                                     06079900
PROCEDURE PRIMARY;                                                      06080000
    BEGIN                                                               06080100
    LABEL EROR,STRING,ARITH,XIT,NUMB,FNTYPE,NTRIN,LFTPRN;               06080200
    LABEL SXPRSTATE;                                                    06080203
    BOOLEAN  SAVETOG;                                                   06080205
    SWITCH ELTYPE ~STRING,ARITH,EROR,NUMB,STRING,FNTYPE,NTRIN,EROR,EROR,06080300
      EROR,EROR,EROR,LFTPRN;                                            06080400
    GO TO ELTYPE[ELCLASS];                                              06080500
COMMENT QUANTY NOT A VALID PRIMARY;                                     06080600
EROR:                                                                   06080700
    ERRSKIP(73); GO XIT;                                                06080800
COMMENT  PRIMARY IS A SPECIAL FUNCTION(INT,ABS,ETC.);                   06080900
NTRIN:                                                                  06081000
    RR8~ELBAT.[38:10];                                                  06081005
    IF MATRIXFUNC THEN                                                  06081010
    BEGIN                                                               06081015
         ERRSKIP(063); GO XIT;                                          06081020
    END;                                                                06081025
    STDFNDESIG;                                                         06081100
SXPRSTATE: EXPRSTATE ~ 0; GO XIT;                                       06081105
COMMENT  PRIMARY IS DEFINED FUNCTION DESIGNATOR;                        06081200
FNTYPE:                                                                 06081300
    DEFNDESIG; GO SXPRSTATE;                                            06081400
COMMENT  PRIMARY IS AN ARITHMETIC VARIABLE;                             06081500
ARITH:                                                                  06081600
    ARITHVARB(FP); GO XIT;                                              06081700
COMMENT  PRIMARY IS A STRING VARIABLE-NOT ALLOWED;                      06081800
STRING:                                                                 06081900
    ERR(74); GO XIT;                                                    06082000
COMMENT  PRIMARY IS A LITERAL;                                          06082100
NUMB:                                                                   06082200
    EMITNUM(C); STEPIT; GO XIT;                                         06082300
COMMENT  PRIMARY IS A LEFT PARENTHESIS;                                 06082400
LFTPRN:                                                                 06082500
    SAVETOG ~ EQUALMODETOG;  EQUALMODETOG~ASGNOPMODE;                   06082505
    STEPIT; AEXPR;                                                      06082600
    EQUALMODETOG ~ SAVETOG;                                             06082605
    IF ELCLASS = RTPAREN THEN STEPIT ELSE ERR(085);                     06082700
XIT:                                                                    06082800
    END PRIMARY;                                                        06082900
COMMENT  STRINGVARIABLE HANDLES CODE FOR THE FOLLOWING EXPRESSIONS.     06090000
              1.   "C1........C15(NO)"                                  06090100
              2.   A$                                                   06090200
              3.   A$ ~ SEXPR                                           06090300
              4.   A$(AEXPR)                                            06090400
              5.   A$(AEXPR) ~ SEXPR                                    06090500
         CODE GENERATED FOR THE ABOVE CASES IS,                         06090600
              1.   STRING LIT HELD GLOBALLY. LIT FLAG SET.              06090700
              1.1  LITC NDEX      IF NOT CALLED BY LET AND STEPI POINTS 06090710
                   DESC A$        AT THIS WORD ON ENTRY.                06090720
              2.   LITC NDEX                                            06090800
                   DESC A$                                              06090900
                   (CMN)     EMIT AND SET VAR.FLAG IF CALLED BY LET.    06091000
              3.   (MKS)     IFF CALLED BY LET.                         06091100
                   LITC NDEX                                            06091200
                   DESC A$                                              06091300
                   (MKS)     IFF NOT CALLED BY LET.                     06091305
                   SEXPR                                                06091400
                   IF LIT FLAGGED THEN                                  06091500
                      EMIT:                                             06091600
                             TRP 16                                     06091700
                             C1........C16                              06091800
                   ELSE VARIABLE FLAGGED                                06091900
                      EMIT:                                             06092000
                             RDA N    N IS GLOBAL, INITIALIZED TO 2 AND 06092100
                             RSA 1      INCREMENTED BY STRINGVARIABLE.  06092200
                             TRW 2                                      06092300
                   (CMX)     IFF CALLED BY LET                          06092400
              4.   (MKS)     IFF CALLED BY LET                          06092500
                   AEXPR                                                06092600
                   DUP                                                  06092700
                   ADD                                                  06092800
                   DESC A$                                              06092900
                   (CMN)     IFF CALLED BY LET - SET VARIABLE FLAG      06093000
              5.   (MKS)     IFF CALLED BY LET                          06093100
                   AEXPR                                                06093200
                   DUP                                                  06093300
                   ADD                                                  06093400
                   DESC A$                                              06093500
                   SEXPR                                                06093600
                     .                                                  06093700
                     .                                                  06093800
                     .                                                  06093900
                   SEE (3) ABOVE                                        06094000
                WHERE                                                   06094100
                  NDEX IS AN INDEX INTO AN ARRAY OF DATA CONTAINING A   06094200
                    2 WORD ENTRY FOR EACH STRING SIMPLE VARIABLE.       06094300
                  A$ IS A PRT LOCATION CONTAINING THE DESCRIPTOR FOR A  06094400
                    STRING ARRAY OR DESCRIPTOR FOR STRING SIMPLE VARBLS.06094500
                  (XXX) ARE INSTRUCTIONS EMITTED IF CALLED BY THE LET   06094600
                    ROUTINE.                                            06094700
                  SEXPR IS A STRING EXPRESSION,                         06094800
                  AEXPR IS AN ARITHMETIC EXPRESSION,                    06094900
                  "C1........C16" IS A STRING LITERAL;                  06095000
PROCEDURE STRINGVARIABLE(FX); VALUE FX; REAL FX;                        06095100
    BEGIN                                                               06095200
    LABEL XIT,CHEKOP,FINDTYPE,GENCODE,EMITFORVARB,XITCHRMODE,START;     06095300
    LABEL XIT2,STEPEYE;                                                 06095305
    INTEGER I,CTR;                                                      06095400
    REAL SAVLBAT;                                                       06095500
    BOOLEAN VARFLAG;  COMMENT TRUE IF VARIABLE, FALSE IF LITERAL.       06095600
;                                                                       06095695
    CTR ~ 0;                                                            06095700
    GO START;                                                           06095800
FINDTYPE:                                                               06095900
    SAVLBAT ~ ELBAT;                                                    06096000
    STEPIT;                                                             06096100
    IF ELCLASS = LTPAREN THEN                                           06096200
         BEGIN                                                          06096300
         COMMENT   SUBSCRIPTED STRING VARIABLE. FIX UP DICT&ELBAT ENTRY;06096400
         ELBAT ~ SAVLBAT;                                               06096500
    GETARRYADDR; STUFFBACK; SAVLBAT ~ ELBAT;                            06096600
         STEPIT;                                                        06096700
         AEXPR;                                                         06096800
         IF ELCLASS = RTPAREN THEN                                      06096900
              BEGIN                                                     06097000
              CHEKDIMENS(SAVLBAT,1);                                    06097100
              EMITL(JUNK);  EMITWOP(ISN);                               06097150
              EMITWOP(DUP);                                             06097200
              EMITWOP(ADD);                                             06097300
              EMITN(SAVLBAT.ARRYADDRPART);                              06097400
              STEPIT;                                                   06097500
              LBAT ~ ELBAT;                                             06097505
              ELBAT ~ SAVLBAT;                                          06097600
              IF ELCLASS = ASSIGNOP OR FX=FR                            06097700
                THEN SETARRYDEFFLAG                                     06097705
                ELSE SETARRYREFFLAG;                                    06097800
              STUFFBACK;                                                06097900
              ELBAT ~ LBAT;                                             06097905
              GO CHEKOP;                                                06098000
              END                                                       06098100
         ELSE ERR(83); GO XIT;                                          06098200
         END                                                            06098300
    ELSE BEGIN                                                          06098400
         LBAT ~ ELBAT;                                                  06098405
         ELBAT ~ SAVLBAT;                                               06098600
         GETSIMPSTRINGPART;                                             06098700
         IF ELCLASS = ASSIGNOP OR FX = FR                               06098800
         THEN SETSIMPDEFFLAG                                            06098805
         ELSE SETSIMPREFFLAG;                                           06098810
         STUFFBACK;                                                     06098900
         EMITL(ELBAT.SIMPADDRPART);                                     06099000
         EMITN(DOLARRY);                                                06099100
         ELBAT ~ LBAT;                                                  06099105
CHEKOP:  IF FX=FR THEN GO XIT2; COMMENT FINISHED IF CALLED FROM READST; 06099200
         IF ELCLASS ! ASSIGNOP THEN                                     06099205
              BEGIN                                                     06099300
              IF CTR = 0                                                06099305
              THEN BEGIN                                                06099310
                   IF FX = FL                                           06099315
                   THEN ERR(68);                                        06099320
                   GO XIT2;                                             06099325
                   END;                                                 06099350
              VARFLAG ~ TRUE; GO GENCODE;                               06099400
              END                                                       06099500
         ELSE BEGIN                                                     06099600
              IF CTR = 0 AND FX ! FL                                    06099605
              THEN EMITWOP(MKS);                                        06099610
              CTR ~ CTR+1;                                              06099700
              STEPIT;                                                   06099800
START:                                                                  06099900
              IF ELCLASS = STRINGID THEN GO FINDTYPE                    06100000
                ELSE                                                    06100100
              IF ELCLASS = STRING THEN                                  06100200
                   BEGIN                                                06100300
                   VARFLAG ~ FALSE;                                     06100400
                   IF CTR = 0 AND FX ! FL THEN                          06100500
                        BEGIN                                           06100505
                        GETSIMPSTRINGPART; EMITL(RR8);%ALIAS DOLNDEX    06100515
                        EMITN(DOLARRY);                                 06100516
                        GO XIT;                                         06100517
                        END;                                            06100520
GENCODE:                                                                06100525
                   IF VARFLAG THEN GO EMITFORVARB;                      06100600
                   IF CTR { 2 THEN                                      06100700
                        BEGIN                                           06100800
                        EMITWOP(CMN);                                   06100900
                        STRINGTOG~TRUE;                                 06100902
                        IF CTR = 1 AND FX ! FL                          06100905
                        THEN EMITCOP(RDA,2);                            06100910
                        EMITCOP(TRP,16);                                06101000
                        EMITSL(STRINGLIT);                              06101100
                        IF CTR = 2 THEN                                 06101200
                             BEGIN                                      06101300
                             IF FX ! FL THEN I ~ 3 ELSE I ~ 2;          06101305
                             EMITCOP(RDA,I);                            06101400
                             EMITCOP(TRP,16);                           06101500
                             EMITSL(STRINGLIT);                         06101600
STEPEYE:                     STEPIT;                                    06101605
XITCHRMODE:                                                             06101700
                             EMITCOP(CMX,1);                            06101800
                             GO XIT2;                                   06101900
                             END                                        06102000
                        ELSE GO STEPEYE;                                06102100
                        END                                             06102200
                   ELSE                                                 06102300
                        BEGIN                                           06102400
                        EMITL(0);                                       06102500
                        EMITL(0);                                       06102600
                        EMITWOP(CMN);                                   06102700
                        STRINGTOG~ TRUE;                                06102705
                        EMITCOP(SED,2);                                 06102800
                        EMITCOP(TRP,16);                                06102900
                        EMITSL(STRINGLIT);                              06103000
                        FOR I ~ 1 STEP 1 UNTIL CTR DO                   06103100
                             BEGIN                                      06103200
                             IF I = CTR AND FX ! FL THEN I ~ I+1;       06103205
                             EMITCOP(RDA,I+2);                          06103300
                             EMITCOP(SES,2);                            06103400
                             EMITCOP(TRW,2);                            06103500
                             END;                                       06103600
                        GO STEPEYE;                                     06103700
                        END                                             06103800
                   END                                                  06103900
         ELSE BEGIN ERR(76); GO XIT; END                                06104000
              END                                                       06104100
         END;                                                           06104200
EMITFORVARB:                                                            06104300
    EMITWOP(CMN);                                                       06104400
    STRINGTOG ~ TRUE;                                                   06104405
         FOR I ~ 1 STEP 1 UNTIL CTR DO                                  06104500
         BEGIN                                                          06104600
         IF I = CTR AND FX ! FL THEN I ~ I+1;                           06104605
         EMITCOP(RDA,I+1);                                              06104700
         EMITCOP(RSA,1);                                                06104800
         EMITCOP(TRW,2);                                                06104900
         END;                                                           06105000
    GO XITCHRMODE;                                                      06105100
XIT:                                                                    06105200
    STEPIT;                                                             06105205
XIT2:    STRINGTOG~FALSE;                                               06105295
    END STRINGVARIABLE;                                                 06105300
COMMENT  MATST CALLS MATREAD,MATINPUT, MATPRINT TO COMPILE BASIC INPUT  07000000
         AND OUTPUT STATEMENTS AND AMT FUNC TO COMPILE CODE REQUIRING   07000100
         OPERATIONS WITH MATRICES.                                      07000200
;                                                                       07000300
PROCEDURE MATST;                                                        07000500
    BEGIN                                                               07000600
    IF STEPI = READV                                                    07000700
      THEN MATREAD                                                      07000800
      ELSE                                                              07000900
      IF ELCLASS =   INPUTV                                             07001000
      THEN MATINPUT                                                     07001100
      ELSE                                                              07001200
      IF ELCLASS = PRINTV                                               07001300
      THEN MATPRINT                                                     07001400
      ELSE                                                              07001500
      IF ELCLASS!ARITHID OR ELBAT.DICTCLM!10                            07001600
      THEN ERRSKIP(086)                                                 07001700
      ELSE MATFUNC(FL);                                                 07001800
    IF ELCLASS ! PERCENT THEN ERR(70);                                  07001900
    END MATST;                                                          07002000
COMMENT MATFUNC COMPILES MAT STATEMENTS FOR THE FOLLOWING CASES.        07050000
CASE 1:                                                                 07050100
                             <MATRIX-2>*<MATRIX-3>                      07050200
         MAT <MATRIX-1> =    <MATRIX-2>+<MATRIX-3>                      07050300
                             <MATRIX-2>-<MATRIX-3>                      07050400
    CASE 2:                                                             07050500
                             ZER [(DIM-1[,DIM-2])]                      07050600
            MAT <MATRIX-1> = CON[(DIM-1[,DIM-2])]                       07050700
                             IDN[(DIM-1[,DIM-2])]                       07050800
    CASE 3:                                                             07050900
            MAT <MATRIX-1> = TRN(<MATRIX-2>)                            07051000
                             INV (<MATRIX-2>)                           07051100
    CASE 4:                                                             07051300
            MAT<MATRIX-1> =  (<AEXPR>)*<MATRIX-2>                       07051400
              SPECIAL CASE:  MAT<MATRIX-1> = <MATRIX-2>                 07051500
    CODE EMITTED FOR THE CASES IN ORDER IS                              07051600
    CASE 1.   MKS                                                       07051700
              LITC <MATRIX-1>                                           07051800
              LOD                                                       07051900
              LITC <MATRIX-2>                                           07051950
              LOD                                                       07052000
              LITC <MATRIX-3>                                           07052050
              LOD                                                       07052100
              [LITC N]  IFF MAT ADD N=0, MAT SUB N=1 ELSE OMITTED.      07052150
              OPDC <INTRINSIC>    MAT MULTIPLY OR MAT ADD INTRINSIC.    07052200
    CASE 2.   MKS                                                       07052300
              LITC <MATRIX-1>                                           07052350
              LOD                                                       07052400
              [LITC<1ST DIM>]     IFF DIMENSION INFO. FOLLOWS MAT FUNC. 07052500
              [LITC<2ND DIM>]     DITTO                                 07052600
              LITC <# OF DIMS>    NO. OF DIMS.,=0 IF NO DIM. INFO.      07052700
              LITC <#>            USED BY BLOCK CONTROL TO DETERMINE FN.07052900
              OPDC <BLOCK CONTROL>                                      07053000
    CASE3.    MKS                                                       07053100
              LITC <MATRIX-1>                                           07053150
              LOD                                                       07053200
              LITC <MATRIX-2>                                           07053250
              LOD                                                       07053300
              OPDC <INTRINSIC>    INV OR TRN INTRINSIC                  07053400
    CASE 4.   MKS                                                       07053500
              LITC <MATRIX-1>                                           07053550
              LOD                                                       07053600
              <AEXPR>        ARITHMETIC EXPRESSION                      07053650
              LITC <MATRIX-2>                                           07053700
              LITC <2>       FLAG MATRIX ADD TO PERFORM SCALAR MULT.    07053800
              OPDC <INTRINSIC>    MATRIX ADD INTRINSIC.                 07053900
;                                                                       07054000
PROCEDURE MATFUNC(FX);  VALUE FX; REAL FX;                              07055000
    BEGIN                                                               07055100
    LABEL XIT,ERR88,ERR89,ERR91,ERR94,SCALMPY,ZIC;                      07055200
    LABEL COMPILEDIMS,DIMS,SNDIMS;                                      07055205
    LABEL RR;                                                           07055206
    REAL SAVLBAT,SAVOP,J;                                               07055300
    DEFINE I = SAVLBAT#;                                                07055400
    COMMENT MATST HAS ALREADY STEPPED TO MATRIX NAME-SAVE INFO;         07055500
    IF FX = FP THEN ARRYDICTREF ELSE ARRYDICTDEF;%FP = FROM PRINTLIST   07055600
    SAVLBAT~ELBAT;                                                      07055700
IF FX = FL THEN EMITWOP(MKS);%ELSE READLIST OR PRINTLIST CALLED.        07055795
    IF FX = FL OR FX = FP THEN                                          07055800
    BEGIN                                                               07055900
         EMITL(ELBAT.ARRYADDRPART); EMITWOP(LOD);                       07056000
    END;                                                                07056005
    IF STEPI ! ASGNOP AND FX = FL                                       07056100
    THEN BEGIN ERRSKIP(087); GO XIT; END                                07056105
    ELSE                                                                07056110
    IF FX ! FL THEN                                                     07056112
    IF FX = FR THEN                                                     07056115
    BEGIN                                                               07056120
         IF ELCLASS = LTPAREN THEN                                      07056122
         BEGIN                                                          07056125
              EMITWOP(MKS);                                             07056130
              EMITL(SAVLBAT.ARRYADDRPART);                              07056135
              EMITWOP(LOD);                                             07056137
              GO COMPILEDIMS;                                           07056140
         END ELSE                                                       07056145
RR:      BEGIN                                                          07056146
              EMITL(SAVLBAT.ARRYADDRPART); EMITWOP(LOD); GO XIT;        07056147
         END;                                                           07056148
    END                                                                 07056152
    ELSE                                                                07056154
    BEGIN                                                               07056156
         IF ELCLASS!COMMA THEN IF ELCLASS!SEMICOLON THEN                07056158
           IF ELCLASS!PERCENT THEN ERRSKIP(102);                        07056160
         GO XIT;                                                        07056162
    END;                                                                07056164
  IF STEPI = ARITHID AND ELBAT.DICTCLM =10                              07056300
    THEN BEGIN                                                          07056400
         ARRYDICTREF;                                                   07056500
         SAVOP ~ ELBAT;                                                 07056800
         IF STEPI = PERCENT                                             07056900
         THEN EMITL(1);                                                 07057000
         EMITL(SAVOP.ARRYADDRPART);                                     07057100
         EMITWOP(LOD);                                                  07057200
         IF ELCLASS = PERCENT THEN                                      07057300
SCALMPY:      BEGIN     COMMENT SCALAR MULTIPLICATION;                  07057400
              EMITL(2);                                                 07057500
              EMITV(GETINTRIN(MADDI));                                  07057600
              GO XIT;                                                   07057700
              END;                                                      07057800
         IF ELCLASS ! ADDOP THEN                                        07057805
         IF SAVOP.ARRYADDRPART=SAVLBAT.ARRYADDRPART                     07057810
         AND ELCLASS = MULOP THEN                                       07057812
ERR88:   BEGIN                                                          07057815
              ERRSKIP(088); GO XIT;                                     07057820
         END;                                                           07057825
         SAVOP ~ ELBAT; COMMENT SAVE OPERATOR;                          07057900
         IF STEPI = ARITHID AND ELBAT.DICTCLM = 10                      07058000
         THEN BEGIN                                                     07058100
              ARRYDICTREF;                                              07058200
              IF SAVOP.[1:5] ! ADDOP THEN                               07058205
              IF ELBAT.ARRYADDRPART=SAVLBAT.ARRYADDRPART AND            07058300
                SAVOP.[1:5] = MULOP THEN GO TO ERR88;                   07058400
              EMITL(ELBAT.ARRYADDRPART);                                07058500
              EMITWOP(LOD);                                             07058600
              IF I ~ SAVOP.[1:5] =MULOP                                 07058700
              THEN BEGIN                                                07058800
                   IF SAVOP.[36:12] = MUL                               07058900
                     THEN EMITV(GETINTRIN(MMPYI))                       07059000
                     ELSE GO TO ERR89;                                  07059100
                   END                                                  07059200
              ELSE IF I = ADDOP                                         07059300
              THEN BEGIN                                                07059400
                   IF SAVOP.[36:12] = ADD                               07059500
                     THEN EMITL(0) COMMENT INDICATE MATRIX ADDITION;    07059600
                     ELSE EMITL(1); COMMENT INDICATE MATRIX SUBTRACTION;07059700
                   EMITV(GETINTRIN(MADDI));                             07059800
                   END                                                  07059900
              ELSE                                                      07060000
ERR89:             BEGIN                                                07060100
                   ERRSKIP(089); GO XIT;                                07060200
                   END;                                                 07060300
              STEPIT;                                                   07060400
              END                                                       07060500
         END                                                            07060600
    ELSE                                                                07060700
    IF ELCLASS = LTPAREN                                                07060800
    THEN BEGIN                                                          07060900
         STEPIT;                                                        07061000
         AEXPR;                                                         07061100
         IF ELCLASS ! RTPAREN                                           07061200
         THEN BEGIN ERRSKIP(090); GO XIT; END;                          07061300
    IF STEPI ! MULOP OR ELBAT.[36:12] ! MUL                             07061400
              THEN GO TO ERR89;                                         07061500
         IF STEPI = ARITHID AND ELBAT.DICTCLM = 10                      07061700
         THEN BEGIN                                                     07061800
                   ARRYDICTREF;                                         07062100
                   EMITL(ELBAT.ARRYADDRPART);                           07062200
                   EMITWOP(LOD); STEPIT;                                07062300
                   GO TO SCALMPY;                                       07062400
              END                                                       07062700
    ELSE BEGIN ERRSKIP(097); GO XIT; END ;                              07062800
         END                                                            07062900
ELSE IF ELCLASS = STDFUNCID                                             07063000
    THEN BEGIN                                                          07063100
         RR8~ELBAT.[38:10];                                             07063105
         IF NOT MATRIXFUNC THEN                                         07063110
         BEGIN                                                          07063115
              ERRSKIP(092); GO XIT;                                     07063120
         END;                                                           07063125
         SAVOP~ ELBAT;                                                  07063200
         IF STEPI ! LTPAREN                                             07063300
         THEN                                                           07063400
ZIC:     IF SAVOP.[17:11]}1024 COMMENT MATRIX CON,IDN, OR ZER FN.;      07063500
         THEN                                                           07063600
DIMS:         BEGIN                                                     07063605
              EMITL(J); COMMENT NUMBER OF DIMENSIONS;                   07063700
              EMITL(SAVOP.[18:10]+16);%MATZER=16,MATCON=17,MATIDN=18    07063800
              EMITV(GETINTRIN(BLOCKCONTROL));                           07063900
              IF FX = FR THEN GO RR ELSE GO XIT;                        07064000
              END                                                       07064100
         ELSE ERR94:BEGIN ERRSKIP(094); GO XIT; END;                    07064200
         IF J ~ SAVOP.[17:11] = RWARRY[MATINV].SIMPADDRPART             07064300
           OR J = RWARRY[MATTRN].SIMPADDRPART                           07064305
         THEN BEGIN                                                     07064400
              IF STEPI=ARITHID AND ELBAT.DICTCLM=10                     07064500
              THEN BEGIN                                                07064600
                   ARRYDICTREF;                                         07064700
                   IF J=RWARRY[MATINV].SIMPADDRPART THEN                07064710
                   BEGIN COMMENT INSURE 2-DIM ARRYS;                    07064720
                        CHEKDIMENS(SAVLBAT,2);% RESULTANT               07064730
                        CHEKDIMENS(ELBAT,2);% ARGUMENT                  07064740
                   END CHECK;%                                          07064750
                   EMITL(ELBAT.ARRYADDRPART);                           07065000
                   EMITWOP(LOD);                                        07065100
                   EMITV(SAVOP.FUNCADDRPART);                           07065200
                   IF STEPI ! RTPAREN                                   07065300
                     THEN BEGIN ERRSKIP(095); GO XIT; END;              07065400
                   END                                                  07065500
              ELSE ERR91: BEGIN ERRSKIP(091); GO XIT; END  ;            07065600
              STEPIT;                                                   07065605
              END                                                       07065700
         ELSE BEGIN                                                     07065800
COMPILEDIMS:                                                            07065802
              STEPIT;                                                   07065805
              J ~ 0;                                                    07065900
SNDIMS:                                                                 07065905
              AEXPR;    COMMENT  1ST DIMENSION OF MATRIX;               07066000
              IF SAVLBAT.[1:5] = STRINGID                               07066003
              THEN BEGIN  EMITL(JUNK);  EMITWOP(ISN);                   07066004
                   EMITWOP(DUP); EMITWOP(ADD);                          07066005
              EMITL(2);                                                 07066006
         END  ELSE EMITL(1);                                            07066007
              EMITWOP(ADD);                                             07066008
              IF ELCLASS = COMMA                                        07066100
              THEN BEGIN                                                07066200
                        J ~ J+1;                                        07066300
                   STEPIT;                                              07066400
                   GO SNDIMS; COMMENT COMPILE 2-ND DIMENSION;           07066500
                   END;                                                 07066600
              IF ELCLASS ! RTPAREN                                      07066700
              THEN BEGIN                                                07066800
              IF FX = FR THEN ERRSKIP(096)                              07066805
              ELSE ERRSKIP(093);                                        07066810
                   GO XIT;                                              07066815
                   END                                                  07066820
              ELSE STEPIT;                                              07066825
              J ~ J+1;                                                  07066900
              IF SAVLBAT.[1:5] = ARITHID                                07066905
              THEN BEGIN                                                07066910
                   IF J > 2 THEN BEGIN ERRSKIP(100); GO XIT; END        07066915
                   END                                                  07066920
              ELSE IF J > 1 THEN BEGIN ERRSKIP(099); GO XIT; END;       07066925
              CHEKDIMENS(SAVLBAT,J);                                    07067000
              IF FX = FL                                                07067100
              THEN GO TO ZIC %FN IS ZER CON OR IDN                      07067105
              ELSE GO TO DIMS;% MATRIX READ CALLED                      07067110
              END;                                                      07067200
         END                                                            07067300
    ELSE ERRSKIP(098);                                                  07067400
XIT:                                                                    07067700
    END MATFUNC;                                                        07067800
COMMENT  "MAT READ" STATEMENT.                                          07090000
         SYNTAX:                                                        07090100
              MAT READ <READ LIST>                                      07090200
              WHERE                                                     07090300
                   <READ LIST> IS AN ARITHMETIC OR STRING ARRAY NAME.   07090400
                   SUBSCRIPTS FOLLOWING THE ARRAY NAME ARE USED TO RE-  07090500
                   DIMENSION THE ARRAY VARIABLE                         07090600
         CODE:                                                          07090700
                   MKS                                                  07090800
                   DESCRIPTOR POINTING TO TOP I/O DESCRIPTOR            07090805
                   EOF LABEL WORD                                       07090810
                 *******                                                07090900
                 * LITC <MATRIX-N> WHERE N IS THE N-TH ARRY IN THE LIST.07091000
                 * LOD                                                  07091100
                 * [LITC <MATRIX-N>]*****                               07091200
         FOR EACH* [LOD ]                                               07091300
        VARIABLE** [LITC 1-ST DIM]        * PRESENT ONLY IF DIMENSION   07091400
         IN LIST * [LITC 2-ND DIM]         *INFORMATION GIVEN FOLLOWING 07091500
                 * [LITC # OF DIMS]      * THE ARRAY NAME.              07091600
                 % [LITC NO.]            *                              07091700
                 *[OPDC <BLOCK CONTROL>]*                               07091800
                 *******                                                07091900
                   LITC <MATRIX-N> WHERE N IS THE N-TH ARY IN THE LIST. 07091905
                   LOD                                                  07091910
                     .                                                  07092000
                     .                                                  07092005
                     .                                                  07092100
                   OPDC TYPEWORD                                        07092200
                                                                        07092300
                                                                        07092400
                                                                        07092500
                   OPDC < MATRIX READ INTRINSIC>                        07092600
;                                                                       07092700
PROCEDURE MATREAD;                                                      07100000
    BEGIN                                                               07100100
                   EMITWOP(MKS);                                        07100105
    STEPIT;                                                             07100200
    TYPEWORD ~ 0;                                                       07100210
    READLIST(ARRAYNAMES);                                               07100300
    GENIOCODE(READI,MATRIX);                                            07100400
    END MATREAD;                                                        07100500
COMMENT  MATRIX "INPUT" STATEMENT.                                      07200000
         SYNTAX:                                                        07200100
                   MAT INPUT [FILE XXXX,] <READ LIST>                   07200200
                         OR                                             07200300
                        [#AEXPR,]                                       07200400
              WHERE XXXX IS A VALID FILE NAME,                          07200500
                    AEXPR IS ANY VALID ARITHMETIC EXPRESSION            07200600
              AND  <READ LIST> CONTAINS                                 07200700
                        1. ARITHMETIC ARRAY NAMES OR                    07200800
                        2. STRING ARRAY NAMES,                          07200900
                   SEPARATED BY COMMAS.                                 07201000
         CODE:                                                          07201100
              MKS                                                       07201200
                   DESCRIPTOR POINTING TO TOP I/O DESCRIPTOR            07201205
                   EOF LABEL WORD                                       07201210
                                                                        07201300
              LITC PRT-ADDR OF ARRAY DESCRIPTOR  FOR EACH ARITHMETIC OR 07201305
              LOD                                STRING ARRAY NAME IN   07201310
                                                 STACK.                 07201315
              OPDC TYPE WD.                                             07201400
                        [1:6]     CTR OF LIST ELEMENTS                  07201500
                        [7:40]    0 = NUMBER 1 = STRING                 07201600
                        [47:1]    1 = MATRIX                            07201700
                                                                        07201800
                                                                        07201900
              OPDC READ INTRINSIC                                       07202000
;                                                                       07202100
PROCEDURE MATINPUT;                                                     07203000
    BEGIN                                                               07203100
    STEPIT;   SCANFILEID(0);                                            07203200
    READLIST(ARRAYNAMES);                                               07203300
                   GENIOCODE(INPUTI,MATRIX);                            07203400
    END OF MATINPUT;                                                    07203500
COMMENT  MATRIX "PRINT" STATEMENT.                                      07300000
         SYNTAX:                                                        07300100
              MAT PRINT <PRINT LIST>                                    07300200
              WHERE LIST ELEMENTS MAY BE:                               07300300
                   1. "TAB" FUNCTION,                                   07300400
                   2. ARITH ARRAY NAME OR                               07300500
                   3. STRING ARRAY NAME.                                07300600
              LIST SEPARATORS MAY BE::                                  07300700
                   1. "," ZONED FORMAT                                  07300800
                   2. "SEMI-COLON" PACKED FORMAT  OR                    07300900
                   3. "BLANK"  (MAY ONLY FOLLOW LAST ITEM IN THE LIST). 07301000
         CODE:                                                          07301100
              MKS                                                       07301200
                   DESCRIPTOR POINTING TO TOP I/O DESCRIPTOR            07301205
                   EOF LABEL WORD                                       07301210
              TAB CTL WD               FOR EACH ELEMENT IN LIST         07301300
              LITC PRT-ADDR ARRAY DESC ... DITTO                        07301400
              LOD                      ... DITTO                        07301500
              OPDC TYPE-WD                                              07301600
                        [1:6]  # OF ELEMENTS IN STACK                   07301700
                        [7:40] 0 - ARITH, 1 - STRING                    07301800
                        [47:1] 1 - MATRIX                               07301900
                                                                        07302000
                                                                        07302100
              OPDC WRITE INTRINSIC                                      07302200
;                                                                       07302300
PROCEDURE MATPRINT;                                                     07303000
    BEGIN                                                               07303100
    STEPIT; SCANFILEID(1);                                              07303200
    PRINTLIST(ARRAYNAMES);                                              07303300
                   GENIOCODE(PRINTI,MATRIX) ;                           07303400
    END OF MATPRINT;                                                    07303500
COMMENT            ***** SECTION 08 *****                               08000000
                   "READ","DATA","INPUT","RESTORE","WRITE","PRINT",     08000100
                      "FILES"                                           08000200
                   *****            *****                               08000300
;                                                                       08000400
                                                                        08000500
INTEGER            FILEBASE;  %PRT LOC FOR MOTHER DESC OF FILE DESC     08000605
INTEGER            DATANDX;       %INDEX INTO DATA ARRAY (LAST USED)    08001010
REAL ARRAY         DATARRY[0:255,0:256];  %DATA VALUES                  08001015
REAL ARRAY         CDATA[0:255,0:7];   %COMPANION DATA ARRY             08001100
REAL ARRAY         FILEINFO[0:7,0:15];                                  08001200
INTEGER            FILEINFONDX;     %LAST USED NDX INTO FILEINFO        08001205
DEFINE             NUMBIT = FALSE#,                                     08001400
                   STRBIT = TRUE#;                                      08001500
INTEGER            CDATANDX;                                            08001600
INTEGER            BITCTR;                                              08001700
INTEGER            DATABITCTR;                                          08001705
REAL ARRAY         NULLSTR[0:2] ;   %STRING LIT, SET AT INIT TIME       08001800
DEFINE             NULLSTRING = NULLSTR[0]#;                            08001900
DEFINE             NULLCODE =0#;                                        08002000
DEFINE             PERCENTCODE = 3#,                                    08002100
                   COMMACODE = 1#,                                      08002200
                   SEMICOLONCODE = 2#;                                  08002300
DEFINE             TTYFILENDX=0#;                                       08002400
DEFINE             FILEREF = 0#,  FILEDEF = 1# ;                        08002500
COMMENT            SETBIT PASSES BIT VALUE TO SETABIT                   08004700
                   CHECK FOR WORD OVERFLOW AND RESET TO 1;              08004800
PROCEDURE          SETBIT(BITVALU);                                     08004900
VALUE              BITVALU;                                             08005000
BOOLEAN            BITVALU;                                             08005100
              BEGIN                                                     08005200
                   IF DATANDX.[40:8] = 0 THEN                           08005230
                     BEGIN DATABITCTR:=16; CDATANDX:=0; END;            08005250
                   IF DATABITCTR:=SETABIT(CDATA[DATANDX.[32:8],         08005300
                      CDATANDX.[45:3]],DATABITCTR,BITVALU)}48 THEN      08005400
              BEGIN                                                     08005500
                   DATABITCTR ~ 16;                                     08005600
                   CDATANDX ~ CDATANDX+1;                               08005700
              END  ;                                                    08005800
              END  OF SETBIT;                                           08005900
COMMENT            GENIOCODE IS USED BY READST, MATST, AND INPUTST TO   08010000
                      GENERATE THE FINAL PORTION OF THE                 08010100
                      CALLING SEQUENCE FOR THE APPROPRIATE INTRINSIC.   08010200
;                                                                       08010300
PROCEDURE          GENIOCODE(INTRINO,MORS);                             08010400
VALUE              INTRINO, MORS;                                       08010500
INTEGER            INTRINO, MORS;                                       08010600
              BEGIN                                                     08010805
                   EMITNUM(TYPEWORD&(BITCTR-7)[1:42:6]&MORS[47:47:1]);  08010900
                   EMITV(GETINTRIN(INTRINO));                           08011200
              END  OF GENIOCODE;                                        08011300
COMMENT            LINEAR SEARCH OF FILENAME LIST                       08011400
                   NEW ENTRY IF NOT FOUND                               08011500
                   RETURN NDX                                           08011600
;                                                                       08011700
PROCEDURE          FILENAME(NDX);                                       08011800
INTEGER            NDX;                                                 08011900
              BEGIN                                                     08012000
DEFINE             CTR = NDX#;                                          08012005
DEFINE             CTRWD = CTR.[42:3],CTR.[45:3]#;                      08012010
REAL               T;                                                   08012015
LABEL              XIT;                                                 08012020
REAL               FILEID;                                              08012025
                   FILEID := "      ";                                  08012090
                   CTR := 1;                                            08012100
              IF(T:=CHARRY[CNDX:=CNDX+1]) LEQ 10 THEN ERRSKIP(49) ELSE  08012105
              BEGIN                                                     08012110
              WHILE T:=CHARRY[CNDX:=CNDX+1] & T[6:12:36] GEQ 0 DO       08012200
                    CTR := CTR + 1;                                     08012300
                   IF CTR GTR 6 THEN BEGIN ERRSKIP(49); GO XIT; END;    08012350
                   CNDX ~ CNDX-1;                                       08012400
                   MOVECHR(CTR,T,7-CTR,FILEID,1);                       08012450
                   MOVECHR(1,CTR,7,FILEID,0) ;                          08012460
                   FOR CTR ~ FILEINFONDX STEP -1 UNTIL 1  DO            08012500
                   IF T~FILEINFO[CTRWD] = FILEID THEN  GO XIT;          08012600
                   IF FILEINFONDX } 63 THEN  ERR(059)                   08013100
                   ELSE  FILEINFONDX ~ CTR ~ FILEINFONDX+1;             08013200
                   FILEINFO[CTRWD] ~ FILEID;                            08013300
                   IF DEBUGATOG THEN                                    08013405
              BEGIN                                                     08013410
              LIN[0] ~ "FILEID." ;  LIN[1] ~ FILEID ;                   08013415
                   WRITELINE ;  BLANKLINE ;                             08013420
              END ;                                                     08013425
XIT:          END;                                                      08013470
              END  OF FILENAME;                                         08013500
COMMENT            SCANFILEID;                                          08014000
COMMENT            GENERATE CODE TO SET JUNK CELL IN PRT TO FILENDX.;   08014200
PROCEDURE          SCANFILEID(MYFILENDX);                               08014400
VALUE              MYFILENDX;                                           08014405
INTEGER            MYFILENDX;                                           08014410
              BEGIN                                                     08014500
INTEGER            CTR;                                                 08014600
PROCEDURE          DOIT ;                                               08014700
              BEGIN                                                     08014705
                   EMITN(IF FILEBASE = 0 THEN FILEBASE ~ ALLOCPRT       08014710
                      ELSE  FILEBASE);                                  08014715
                   EMITWOP(LOD);                                        08014720
                   EMITL(5);                                            08014725
                   EMITWOP(CDC);                                        08014730
              END  OF DOIT ;                                            08014735
                   TYPEWORD ~ 0 & 1[46:47:01];                          08014805
                   EMITWOP(MKS);                                        08014810
                   IF ELCLASS =CROSSHATCH THEN                          08014900
              BEGIN                                                     08015000
                   STEPIT;  AEXPR;                                      08015100
                   EMITL(1);  EMITWOP(ADD);                             08015102
                   DOIT ;                                               08015103
                   IF ELCLASS ! PERCENT THEN                            08015104
              BEGIN                                                     08015105
                   EOFLBL;                                              08015110
                   IF ELCLASS ! COMMA THEN ERRSUP(052) ELSE STEPIT      08015120
              END;                                                      08015130
              END  ELSE                                                 08015300
                   IF ELCLASS = FILEV THEN                              08015400
              BEGIN                                                     08015500
                   FILENAME(CTR);  EMITL(CTR+1);                        08015600
                   DOIT ;                                               08015605
                   STEPIT ;                                             08015610
                   IF ELCLASS ! PERCENT THEN                            08015620
              BEGIN                                                     08015630
                   EOFLBL ;                                             08015700
                   IF ELCLASS ! COMMA THEN ERRSUP(052) ELSE STEPIT;     08016600
              END  ;                                                    08016610
              END  ELSE                                                 08016700
              BEGIN                                                     08016702
                   IF REMOTETOG THEN EMITL(0)                           08016703
                     ELSE EMITL(MYFILENDX);                             08016704
                   TYPEWORD ~ 0;                                        08016705
              DOIT ;                                                    08016706
                   EOFLBL ;                                             08016707
              END  ;                                                    08016710
              END  OF SCANFILEID;                                       08016900
COMMENT  EOFLBL SCANS INPUT,MAT INPUT, PRINT AND MAT PRINT STATEMENTS   08018000
         FOR PRESENCE OF AN EOF LABEL.                                  08018010
              IF EOF LABEL IS PRESENT THEN                              08018020
                   OPDC < N > IS EMITTED WHERE                          08018030
                             N.[8:10] = 1                               08018040
                             N.[33:15] CONTAINS THE PRT ADDRESS OF THE  08018050
                               LABEL DESCRIPTOR.                        08018060
              ELSE LITC  0  IS EMITTED INDICATING THE ABSENCE OF AN     08018070
                             EOF LABEL.                                 08018080
;                                                                       08018090
PROCEDURE EOFLBL;                                                       08018100
    BEGIN                                                               08018110
 REAL         T;                                                        08018115
         IF ELCLASS = COLON THEN                                        08018120
    BEGIN                                                               08018130
         IF STEPI = NUMBER THEN                                         08018140
    BEGIN                                                               08018150
         IF NOT SCRAMLOOK(LINENO) THEN                                  08018160
    BEGIN                                                               08018170
         INFO[NEXTINFO] ~ LINENO;                                       08018180
         SINFO[LINENO.NUMBPART MOD 127] ~ INFONDX                       08018190
    END;                                                                08018200
         IF (T~INFO[INFOWD2]).PRTADDRPART = 0 THEN                      08018210
    BEGIN                                                               08018220
         T ~ INFO[INFOWD2] ~ T & ALLOCPRT[7:37:11];                     08018230
         IF BOOLEAN(T.DEFFLAG) THEN                                     08018240
           BLDPROGDESC(T.PRTADDRPART,T.[18:7],T.[25:8]);                08018250
    END;                                                                08018260
         EMITNUM(0&1[8:38:10]&(T.PRTADDRPART)[33:33:15]);               08018270
                   STEPIT ;                                             08018280
    END ELSE ERRSKIP(103);                                              08018290
    END  ELSE EMITL(0);                                                 08018300
    END OF EOFLBL;                                                      08018310
COMMENT            READLIST WILL GET DESCRIPTORS TO THE STACK           08020000
                      FOR EACH LIST ELEMENT.                            08020100
;                                                                       08020200
PROCEDURE          READLIST(MORS);                                      08020300
VALUE              MORS;                                                08020400
BOOLEAN            MORS;                                                08020500
              BEGIN                                                     08020600
LABEL              AGAIN,TOO;                                           08020605
                   BITCTR ~ 7;                                          08020800
                   IF MORS THEN                                         08020900
              BEGIN        %VARIABLES                                   08021000
AGAIN:             IF ELCLASS = ARITHID THEN                            08021100
              BEGIN                                                     08021105
                   ARITHVARB(FR);                                       08021110
                   BITCTR ~ SETABIT(TYPEWORD,BITCTR,NUMBIT);            08021115
              END  ELSE                                                 08021120
                   IF ELCLASS =STRINGID THEN                            08021125
              BEGIN                                                     08021130
                   STRINGVARIABLE(FR);                                  08021135
                   BITCTR ~ SETABIT(TYPEWORD,BITCTR,STRBIT);            08021140
              END  ;                                                    08021145
                   IF ELCLASS=COMMA THEN BEGIN STEPIT;GO AGAIN END;     08021200
                   IF ELCLASS ! PERCENT THEN ERRSUP(061);               08021300
              END  ELSE                                                 08021400
              BEGIN     COMMENT ARRAY NAMES;                            08021500
TOO:               IF ELCLASS = ARITHID AND ELBAT.[44:4] = 10 THEN      08021505
              BEGIN                                                     08021515
                   MATFUNC(FR);                                         08021520
                   BITCTR ~ SETABIT(TYPEWORD,BITCTR,NUMBIT);            08021525
              END  ELSE                                                 08021526
                   IF ELCLASS = STRINGID THEN                           08021528
              BEGIN                                                     08021530
                   MATFUNC(FR);                                         08021532
                   BITCTR ~ SETABIT(TYPEWORD,BITCTR,STRBIT);            08021533
              END;                                                      08021534
                   IF ELCLASS = COMMA                                   08021535
                   THEN                                                 08021540
              BEGIN                                                     08021545
                   STEPIT; GO TOO;                                      08021550
              END;                                                      08021555
                   IF ELCLASS ! PERCENT THEN ERRSKIP(064);              08021560
                   % DUMMY                                           ***08021600
              END  ;                                                    08021700
              END  OF READLIST;                                         08021800
COMMENT            "DATA" STATEMENT                                     08100000
                   SYNTAX:                                              08100100
                      DATA <DATA LIST>                                  08100200
                      WITH <DATA LIST> MADE UP OF                       08100300
                         <QUOTED STRING>  AND  <NUMBER>                 08100400
                         SEPARATED BY COMMAS                            08100500
                   VALUES ARE CONVERTED TO INTERNAL FORM                08100600
                      NUMBER - 1 WD                                     08100700
                      STRING - 2 WDS                                    08100800
                      AND STUFFED AWAY INTO AN ARRAY OF 257 WD ROWS     08100900
                      UP TO 256 ROWS                                    08101000
                   COMPANION ARRAY OF 8 WDS PER ROW INDICATES TYPE      08101100
                      1) 1:8 - COUNTER OF DATA ELEMENTS                 08101200
                      16:32 OF EACH WORD                                08101300
                         A) 0 - NUMBER (1 WD)                           08101400
                         B) 1 - STRING (2 WDS)                          08101500
;                                                                       08101600
PROCEDURE          DATAST;                                              08101700
              BEGIN                                                     08101800
REAL               ADDOPELBAT;    %TEMP FOR ADDOP ELBAT PRECEEDING NO.  08101900
LABEL              VALUELIST;                                           08102000
LABEL              XIT;                                                 08102005
DEFINE             PLUSELBAT = SPECIAL[6]#;                             08102100
DEFINE      DNDX=  (DATANDX~DATANDX+1).[32:8],DATANDX.[40:8]#;          08102200
                   DO                                                   08102700
              BEGIN                                                     08102800
VALUELIST:         IF STEPI = STRING THEN                               08102900
              BEGIN                                                     08103000
                   MOVEWDS(2,STRINGWDS,DATARRY[DNDX]);                  08103100
                   SETBIT(STRBIT);                                      08103200
                   IF DATANDX.[40:8] NEQ 255 THEN                       08103290
                     DATANDX:=DATANDX + 1;                              08103300
              END  ELSE                                                 08103400
              BEGIN                                                     08103500
                   IF ELCLASS = ADDOP THEN                              08103600
              BEGIN                                                     08103700
                   ADDOPELBAT ~ ELBAT; STEPIT;                          08103800
              END                                                       08103900
                   ELSE                                                 08104000
                   ADDOPELBAT ~ PLUSELBAT;                              08104100
                   IF ELCLASS = STRING THEN                             08104200
                     BEGIN ERRSUP(15); GO XIT   END  ELSE               08104300
                   IF ELCLASS = NUMBER THEN                             08104700
              BEGIN                                                     08104800
                   DATARRY[DNDX] ~ IF ADDOPELBAT=PLUSELBAT THEN C ELSE  08104900
                      -C;                                               08105000
                   SETBIT(NUMBIT);                                      08105100
              END  ELSE                                                 08105200
                   IF ELCLASS = PERCENT  THEN  GO XIT                   08105250
                   ELSE                                                 08105260
              BEGIN                                                     08105300
                   IF ELCLASS NEQ COMMA THEN                            08105400
                     BEGIN ERRSUP(15); GO XIT END  ELSE GO VALUELIST;   08105500
              END;                                                      08105600
              END                                                       08105700
              END  OF RANGE                                             08105800
                   UNTIL STEPI ! COMMA;                                 08105900
                   IF ELCLASS ! PERCENT THEN                            08106000
              BEGIN                                                     08106100
                   ERRSUP(016);                                         08106200
              END  ;                                                    08106400
XIT:                                                                    08106450
              END  OF DATAST;                                           08106500
COMMENT            "FILES" STATEMENT                                    08200000
                   SYNTAX:                                              08200100
                      FILES <FILE-NAME LIST>                            08200200
                      WITH LIST ELEMENT                                 08200300
                         <FILE-NAME>                                    08200400
                      OR                                                08200500
                      <FILE-NAME>[(<NUMBER OF RECORDS>)]                08200600
                   ACCUMULATE FILE INFO IN ARRAY FOR WRAP-UP TIME       08200700
                      FILEINFO[0:7,0:15]                                08200800
                      FILEINFONDX POINTS INTO ARRAY                     08200900
                      EACH ELEMENT:                                     08201000
                         WD 1 - 1:5 CHAR CT                             08201100
                                6:42 6-CHAR FILE NAME, L-JUST, BLANK PAD08201200
                         WD2 -  1:17 NOT USED                           08201300
                               18:15 NUMBER OF ROWS                     08201305
                               33:15 SIZE OF ROWS                       08201400
                   AT WRAP-UP TIME, PURGE FILEINFO ARRAY, GENERATE CALL 08201500
                      ON BLOCK INTRINSIC TO SET UP TANK, FPB, ETC.      08201600
                   REFERENCES TO FILENAME IN "READ", "PRINT" USE        08201700
                      LINEAR SEARCH THROUGH LIST IN FILE INFO ARRAY     08201800
                      TO DETERMINE INDEX                                08201900
;                                                                       08202000
PROCEDURE          FILESST;                                             08202100
              BEGIN                                                     08202200
INTEGER            CTR;                                                 08202205
LABEL              AGAIN;                                               08202210
REAL PROCEDURE     SEGGMYNT(BLOGS);  VALUE BLOGS; INTEGER BLOGS;        08202300
              BEGIN                                                     08202350
INTEGER            ROWES, SEGSPEROWE;                                   08202400
LABEL              LUPPE, GOODEE, BADD;                                 08202450
LUPPE:             FOR ROWES := 20 STEP -1 UNTIL 5 DO                   08202500
                      IF BLOGS MOD ROWES = 0 THEN GO GOODEE;            08202550
BADD:              BLOGS := BLOGS + 1;  GO LUPPE;                       08202600
GOODEE:            IF(SEGSPEROWE:=BLOGS DIV ROWES | 30) GTR 900         08202650
                     THEN GO BADD;                                      08202700
                   SEGGMYNT := SEGSPEROWE & ROWES[18:33:15];            08202750
              END  SEGGMYNT;                                            08202770
AGAIN:             FILENAME(CTR);                                       08202800
                   IF STEPI = LPAREN THEN                               08202900
                   BEGIN                                                08203000
                     IF STEPI NEQ NUMBER OR C.[1:33] NEQ 0              08203100
                        THEN ERRSKIP(50)                                08203150
                       ELSE BEGIN C:=(C+29) DIV 30;                     08203200
                            FILEINFO[CTR.[42:3],CTR.[45:3]+8] :=        08203300
                            IF C LSS 21 THEN 30 & C[18:33:15]           08203400
                              ELSE SEGGMYNT(C);                         08203500
                            IF STEPI NEQ RPAREN THEN ERRSKIP(51);       08203600
                            END;                                        08203700
                   END ELSE CNDX:=CNDX-1;                               08203750
                   IF STEPI = COMMA THEN GO AGAIN;                      08203800
                   IF ELCLASS ! PERCENT THEN ERRSKIP(049);              08203900
              END  OF FILESST;                                          08204000
COMMENT            "INPUT" STATEMENT                                    08300000
                   SYNTAX:                                              08300100
                      INPUT <READ LIST>                                 08300200
                      WITH LIST ELEMENTS -                              08300300
                         1)<ARITHMETIC VARIABLE>                        08300400
                         2)<STRING VARIABLE>                            08300500
                   CODE:                                                08300600
                      MKS                                               08300700
                      FOR EA VARBL - CODE WHICH GETS DESC               08300800
                      OPDC  TYPE WD -                                   08300900
                              1:6 - NUMBER OF LIST ELEMENTS             08301000
                          7:40   0-NUMBER                               08301100
                                      1- STRING                         08301200
                          47:1   0-SCALAR, 1-MATRIX                     08301205
                      LITC  <FILE NDX>                                  08301210
                      DESC  PRT ADDR FOR MOTHER FILE DESC               08301215
                      LOD                                               08301220
                      LITC  5                                           08301300
                      CDC                                               08301400
                      OPDC  INPUT INTRINSIC                             08301405
;                                                                       08301500
PROCEDURE          INPUTST;                                             08301600
              BEGIN                                                     08301700
                   STEPIT ;  SCANFILEID(0);                             08301800
                   READLIST(VARIABLES);                                 08301900
                   GENIOCODE(INPUTI,SCALAR);                            08302000
              END  OF INPUTST;                                          08302100
COMMENT            "READ" STATEMENT                                     08400000
                   SYNTAX:                                              08400100
                      READ <READ LIST>                                  08400200
                     OR                                                 08400300
                      READ #<ARITH EXPR>, <READ LIST>                   08400400
                     OR                                                 08400500
                      READ FILE <FILE NAME>, <READ LIST>                08400600
                   CODE:                                                08400700
                      MKS                                               08400800
                                                                        08400900
                      FOR EA. VARBL IN LIST - CODE WHICH GET DESC       08401000
                      OPDC  TYPE WD -                                   08401100
                              1:6 CTR OF LIST ELEMENTS                  08401200
                          7:40    0-NUMBER                              08401300
                                      1- STRING                         08401400
                          47:1    0-SCALAR, 1-MATRIX                    08401405
                                                                        08401410
                      LITC  5                                           08401415
                      DESC  PRT ADDR FOR FILE DESCRIPTOR                08401420
                      OPDC  READ INTRINSIC                              08401500
;                                                                       08401600
PROCEDURE          READST;                                              08401700
              BEGIN                                                     08401800
                   EMITWOP(MKS);                                        08401900
                   STEPIT;                                              08403600
                   TYPEWORD ~ 0;                                        08403610
                   READLIST(VARIABLES);                                 08403700
                   GENIOCODE(READI,SCALAR);                             08403800
              END  OF READST;                                           08403900
COMMENT            "PRINT" STATEMENT                                    08500000
                   SYNTAX:                                              08500100
                                                                        08500105
                      PRINT <PRINT LIST>                                08500200
                      WHERE LIST ELEMENTS MAY BE                        08500300
                         1)<ARITH EXPRESSION>                           08500400
                         3)"TAB" FUNCTION                               08500600
                      LIST ELEMENT SEPARATORS CAN BE:                   08500700
                         1) "," - ZONED FORMAT                          08500800
                         2) "SEMI-COLON" - PACKED FORMAT                08500900
                         3) NULL (FOLLOWING STRING EXPR ONLY) -NO SPACE 08501000
                   CODE:                                                08501100
                      MKS                                               08501200
                      TAB CTL WD                                        08501305
                      <EXPR> EVALUATION                                 08501400
                         FOR <STRING EXPRESSION> :                      08501500
                         LITC  NDX INTO $ARRAY                          08501600
                         DESC  $ARRAY DESC                              08501700
                                                                        08501800
                                                                        08501900
                                                                        08502000
                                                                        08502100
                                                                        08502200
                 OR  DESC  ARRAY-DESCRIPTOR (MAT PRINT)                 08502205
                      TAB CTL WD                                        08502300
                           INTEGER CODE                                 08502400
                      ETC. FOR EA. LIST ELEMENT                         08502500
                      OPDC   TYPE WD                                    08502600
                    1:6  # ELEMENTS IN STACK                            08502700
                         7:40  0-ARITH, 1-STRING                        08502800
                         47:1 0-SCALAR,1-MATRIX                         08502900
                                                                        08502905
                      LITC  5                                           08502910
                      DESCR  PRT-ADDR FOR FILE DESRCIPTOR               08502915
                      OPDC  WRITE INTRINSIC                             08503000
;                                                                       08503100
PROCEDURE          PRINTLIST(TOGGLE);                                   08503200
VALUE              TOGGLE;                                              08503205
BOOLEAN            TOGGLE;                                              08503210
              BEGIN                                                     08503300
COMMENT            EMIT DESC FOR ZERO-LENGTH STRING LIT;                08503305
PROCEDURE          EMITNULL;                                            08503310
              BEGIN                                                     08503315
                   MOVEWDS(2,NULLSTRING,STRINGLIT) ;                    08503320
                   GETSIMPSTRINGPART;                                   08503325
                   EMITL(RR8);   % ALIAS - DOLNDX                       08503330
                   EMITN(DOLARRY);                                      08503335
              END  ;                                                    08503340
LABEL              NEXTCONTROL, SORA, COMMACTL, SEMICOLONCTL,           08503400
              MSORMA,                                                   08503405
                   DOTAB, NEXTVALUE, STP,  ENDOFLIST;                   08503500
BOOLEAN       TABTOG ;                                                  08503600
                   BITCTR ~ 7;                                          08503700
NEXTCONTROL:                                                            08503750
                   TABTOG ~ FALSE ;                                     08503755
                   IF ELCLASS = COMMA THEN  GO COMMACTL ;               08503800
                   IF ELCLASS = SEMICOLON THEN GO SEMICOLONCTL;         08503900
                   IF ELCLASS = COLON THEN                              08503910
              BEGIN                                                     08503920
                   EMITL(NULLCODE);                                     08503930
                   GO STP;                                              08503940
              END  ;                                                    08503950
                   IF ELCLASS = PERCENT THEN                            08504000
              BEGIN                                                     08504100
                   EMITL(PERCENTCODE);                                  08504200
                   GO ENDOFLIST;                                        08504300
              END  ;                                                    08504400
                   IF ELCLASS = TABV THEN GO DOTAB;                     08504500
                   EMITL(NULLCODE);                                     08504600
                   IF NOT TOGGLE THEN GO TO MSORMA;                     08504605
SORA:              IF ELCLASS = STRING OR ELCLASS = STRINGID THEN       08504700
              BEGIN                                                     08504800
                   STRINGVARIABLE(FP);                                  08504900
                   BITCTR ~ SETABIT(TYPEWORD, BITCTR,STRBIT);           08505000
              END  ELSE                                                 08505100
              BEGIN                                                     08505200
                   AEXPR;                                               08505300
                   BITCTR ~ SETABIT(TYPEWORD, BITCTR,NUMBIT);           08505400
              END  ;                                                    08505500
                   GO NEXTCONTROL;                                      08505600
STP:               STEPIT;                                              08505700
NEXTVALUE:         IF ELCLASS = COMMA THEN                              08505800
                   IF TABTOG THEN  GO STP                               08505805
                   ELSE                                                 08505810
              BEGIN                                                     08505900
                   EMITNULL;                                            08506000
                   BITCTR ~ SETABIT(TYPEWORD, BITCTR, STRBIT);          08506100
COMMACTL:          EMITL(COMMACODE);                                    08506200
                   GO STP;                                              08506300
              END  ;                                                    08506400
                   IF ELCLASS = SEMICOLON THEN                          08506500
                   IF TABTOG THEN  GO STP                               08506505
                   ELSE                                                 08506510
              BEGIN                                                     08506600
                   EMITNULL;                                            08506700
                   BITCTR ~ SETABIT(TYPEWORD, BITCTR, STRBIT);          08506800
SEMICOLONCTL:      EMITL(SEMICOLONCODE);                                08506900
                   GO STP;                                              08507000
              END  ;                                                    08507100
                   IF ELCLASS = TABV THEN                               08507200
              BEGIN                                                     08507300
                   IF TABTOG THEN                                       08507400
              BEGIN                                                     08507410
                   EMITNULL;%                                           08507420
                   BITCTR:=SETABIT(TYPEWORD,BITCTR,STRBIT);%            08507430
              END ELSE L:=L-1;%                                         08507440
DOTAB:             STEPIT;                                              08507500
                   AEXPR;                                               08507600
                   EMITWOP(SSN);                                        08507700
                   TABTOG ~ TRUE ;                                      08507800
                   GO NEXTVALUE;                                        08508200
              END  ;                                                    08508300
                   IF ELCLASS = COLON THEN GO STP;                      08508350
                   IF ELCLASS ! PERCENT THEN                            08508400
                     IF TOGGLE THEN GO TO SORA ELSE GO TO MSORMA;       08508402
                   GO ENDOFLIST;                                        08508405
MSORMA:            IF ELCLASS = STRINGID THEN                           08508622
              BEGIN                                                     08508624
                   MATFUNC(FP);                                         08508628
                   BITCTR ~ SETABIT(TYPEWORD,BITCTR,STRBIT);            08508630
              END  ELSE                                                 08508632
              IF ELCLASS = ARITHID AND ELBAT.[44:4] = 10 THEN           08508634
              BEGIN                                                     08508638
                   MATFUNC(FP);                                         08508640
                   BITCTR ~ SETABIT(TYPEWORD,BITCTR,NUMBIT);            08508642
              END  ELSE                                                 08508644
              BEGIN                                                     08508648
                   ERRSKIP(101); GO ENDOFLIST;                          08508650
              END  ;                                                    08508652
                   GO TO NEXTCONTROL;                                   08508654
ENDOFLIST:    END  OF PRINTLIST;                                        08508900
PROCEDURE     PRINTST;                                                  08509000
              BEGIN                                                     08509100
                   STEPIT ;  SCANFILEID(1);                             08509200
                   PRINTLIST(VARIABLES);                                08509300
                   GENIOCODE(PRINTI,SCALAR);                            08509400
              END  OF PRINTST;                                          08509500
COMMENT            "RESTORE" STATEMENT                                  08600000
                   SYNTAX:                                              08600100
                      RESTORE                                           08600200
                   CODE:                                                08600300
                      LITC 0                                            08600400
                      LITC PRT CELL FOR DATA ARRAY INDEX                08600500
                      STD                                               08600600
;                                                                       08600700
PROCEDURE          RESTOREST;                                           08600800
              BEGIN                                                     08600900
                   IF STEPI =PERCENT THEN                               08600905
              BEGIN                                                     08600910
                   EMITL(0);                                            08601000
                   EMITL(DATAPTR);                                      08601100
                   EMITWOP(STD);                                        08601200
              END  ELSE                                                 08601205
              BEGIN                                                     08601210
                   SCANFILEID(0);                                       08601215
                   EMITV(GETINTRIN(BCLOSEI));                           08601216
                   IF ELCLASS ! PERCENT THEN ERRSKIP(018);              08601300
              END  ;                                                    08601305
              END  OF RESTOREST;                                        08601400
COMMENT            "WRITE" STATEMENT                                    08700000
                   SYNTAX:                                              08700100
                      WRITE #<AEXPR>, <PRINTLIST>                       08700200
                      OR                                                08700300
                      WRITE FILE <FILENAME>, <PRINTLIST>                08700400
                   CODE:                                                08700500
;                                                                       08702000
PROCEDURE          WRITEST;  PRINTST;                                   08702100
COMMENT            ***** SECTION 9 *****                                09000000
                   FOR, NEXT STATEMENTS                                 09000100
                   *****           *****                                09000200
;                                                                       09000300
LABEL              ENDIT;                                               09000310
PROCEDURE          FORST;                                               09000500
COMMENT            "FOR" STATEMENT                                      09000600
     SYNTAX: FOR <SIMPLE VARBL> = <AEXPR1> TO <AEXPR2> [ STEP <AEXPR3> ]09000700
     SEMANTICS: EVAL ALL EXPR UPON ENTRY                                09000800
                    INCLUDING STUFFING AWAY SIMPLE VARBL                09000900
               TEST FIRST FOR LIMIT EXCEEDED, THEN EXECUTE BODY         09001000
               CONTROLLED VARIABLE MAY BE CHANGED WITHIN BODY           09001100
               MAY EXIT FROM BODY W/ OR W/O RETURN                      09001200
               AEXPR3 ! 0 (CHECKED AT COMPILE AND OBJECT TIME)          09001300
     CODE GENERATED:                                                    09001400
               1) AEXPR1                                                09001500
               2) AEXPR2   IFF L(I.E. LIMIT) COMPLEX, I.E. NOT A NUMBER 09001600
                  LITC L                                                09001700
                  STD                                                   09001800
               3) AEXPR3      IFF S(I.E.STEP) COMPLEX, I.E. NOT         09001900
                  LITC S          A NUMBER                              09002000
                  SND                                                   09002100
                  LITC"0"     NOTE TEST FOR ZERO AND SIMULATED INDEXING 09002200
                  EQU             ERROR USING DESCR FOR PRT OF OBJ PROG 09002300
                      LITC  N                                           09002400
                      BFC                                               09002500
                         ASSIGN GENLAB0 AS FIXUP LOC                    09002600
                  LITC"1"                                               09002700
                  CHS                                                   09002800
                  OPDC "10"                                             09002900
               OR                                                       09003000
                      LITC  N                                           09003100
                  BFW              (MAY USE DESCR FOR INTER-SEG REF)    09003200
                        ASSIGN GENLAB0                                  09003300
                   4)        ASSIGN GENLAB2                             09003395
                      BODY    (CALL STATSEQ)                            09003400
               5)  OPDC  C   "C" FOR CONTROLLED VARIABLE                09003500
               6) LITC S      IFF 0<S<1024 (INCLUDING ASSUMED 1)        09003600
                  ADD         AND S INTEGER                             09003700
               OR                                                       09003800
               6) OPDC S      IFF S REAL OR S A COMPLEX EXPRESSION      09003900
                  ADD         (FOR S<0 A NEG NUMBER WILL BE GENERATED)  09004000
               OR                                                       09004100
               6) LITC S      IFF S INTEGER                             09004200
                  SUB              AND -1024<S<0                        09004300
                         FIX UP BRANCH AT GENLAB0                       09004305
               7) LITC C                                                09004400
                  SND                                                   09004500
                                                                        09004600
               8) LITC L      IFF -1024<L<0                             09004700
                  CHS                                                   09004800
               OR                                                       09004900
               8) LITC L      IFF 0{L<1024                              09005000
               OR                                                       09005100
               8) OPDC L                                                09005200
                   (ABOVE CODE FOR 7 AND 8 GENERATED BY HANDLEL PROC)   09005205
               9) SUB         IFF S COMPLEX EXPR                        09005300
                  OPDC S                                                09005400
                  MUL                                                   09005500
                  LITC "0"                                              09005600
                  GTR                                                   09005700
               OR                                                       09005800
               9) GTR         IFF 0<S                                   09005900
               OR                                                       09006000
               9) LSS         IFF S<0                                   09006100
                   10) LITC  GENLAB2                                    09006200
                   BBC                                                  09006300
     LOGIC: STEP THROUGH STATEMENT CHECKING SYNTAX, TESTING L AND S     09006400
               FOR SPECIAL CASES, AND GENERATING ABOVE CODE             09006500
          SAVE TEST INFO FOR L AND S, NAME OF CONTROLLED VARIABLE       09006600
          CALL STATESEQ RTN TO PROCESS BODY UNTIL LEXIGRAPHICALLY       09006700
               MATCHING "NEXT"                                          09006800
          GENERATE INCREMENT CODE                                       09006900
          ASSIGN GENLAB1                                                09007000
          GENERATE TEST CODE BASED ON L AND S INFO                      09007100
          CHECK SYNTAX OF "NEXT" STATEMENT                              09007200
;                                                                       09007300
              BEGIN                                                     09007400
REAL               CELBAT,    %PSEUDO ELBATS FOR                        09007500
                   LELBAT,    %   CONTROLLED VARIABLE, LIMIT,           09007600
                   SELBAT;    %   AND STEP                              09007700
INTEGER            GENLAB0,   %POINTS TO FIX-UP BEFORE BODY             09007800
                                                                        09007900
                   GENLAB2;   %POINTS TO CODE FOR BODY                  09008000
INTEGER            BRANCH;    %COND OR UNCOND DEPENDING ON STEP         09008100
INTEGER             LEXPR;          %EXPRESSION STATE FOR L             09008200
INTEGER             SEXPR;          %EXPRESSION STATE FOR S             09008300
LABEL              EXIT,XIT,CASE5;                                      09008400
DEFINE LITPART = [36:10]#;                                              09008500
PROCEDURE          HANDLEL(CELBAT, LELBAT, LEXPR, GENLAB0);             09008600
VALUE              CELBAT, LELBAT, LEXPR, GENLAB0;                      09008605
REAL               CELBAT, LELBAT, GENLAB0;                             09008610
INTEGER            LEXPR;                                               09008615
              BEGIN                                                     09008700
LABEL              CASE5, CASE3;                                        09008800
                   C ~ GENLAB0;  DEFLABEL(TRUE);                        09008805
                   EMITL(CELBAT.SIMPADDRPART); EMITWOP(SND);            09008900
                   CASE LEXPR OF                                        09009000
              BEGIN                                                     09009100
                   GO CASE5;                                            09009200
                   EMITL(LELBAT);                                       09009300
                   GO CASE3;                                            09009400
CASE3:             EMITV(LELBAT);                                       09009500
              BEGIN                                                     09009600
                   EMITL(LELBAT);                                       09009700
                   EMITWOP(CHS);                                        09009800
              END  OF CASE4;                                            09009900
CASE5:             EMITV(LELBAT);                                       09010000
              END  OF CASE STATEMENT;                                   09010100
              END  OF HANDLEL;                                          09010200
PROCEDURE          LOOKATEXPR(MYELBAT,MYEXPRSTATE,LORS,BRANCH,          09010300
                      GENLAB0);                                         09010305
VALUE              LORS;                                                09010400
REAL               MYELBAT,MYEXPRSTATE;                                 09010500
INTEGER            BRANCH, GENLAB0;                                     09010505
BOOLEAN            LORS;     %TRUE -L, FALSE -S                         09010600
COMMENT            LOOK AT TYPE OF EXPRESSION JUST COMPILED             09010700
                      BY CHECKING EXPRSTATE                             09010800
                   WHEN CONSTANT (+ OR -), DELETE CODE AND SAVE CONST   09010900
                      ELSE GET PRT SPACE FOR EXPR VALUE                 09011000
;             BEGIN                                                     09011100
LABEL              CASE5,CASE3,AROUND;                                  09011200
                   BRANCH ~ BFW;                                        09011300
                   STEPIT; AEXPR;                                       09011400
                   IF DEBUGATOG THEN                              %DEBUG09011405
              BEGIN                                               %DEBUG09011410
                     LIN[0]~".LEXPR."; LIN[1]~MYEXPRSTATE;              09011415
                     SINGLINE; BLANKLINE;                               09011416
              END  ;                                              %DEBUG09011420
                   CASE MYEXPRSTATE~EXPRSTATE OF                        09011500
              BEGIN                                                     09011600
                   GO CASE5;    % 0- COMPLEX EXPRESSION                 09011700
                   MYELBAT ~ GET(L~L-1).LITPART;  % 1-NON-NEG INT <1024 09011800
                   GO CASE3;    % 2- NON-NEG REAL                       09011900
CASE3:             IF LORS THEN GO CASE5 ELSE                           09012000
              BEGIN                                                     09012050
                   MYELBAT ~ EDOC[(L~L-4).EDOCCLM];  %3 - NEG REAL      09012100
                   WHILE GET(L~L-1) = NOP  DO;                          09012200
                   L ~ L-2;                                             09012205
                   IF DEBUGATOG THEN                              %DEBUG09012230
              BEGIN                                               %DEBUG09012235
LIN[0]~".REAL.."; LIN[1]~BINTOBCL(MYELBAT.[1:23]); LIN[2]~        %DEBUG09012240
                     BINTOBCL(MYELBAT.[24:24]); SINGLINE; BLANKLINE;    09012245
              END  ;                                              %DEBUG09012250
              END  ;                                                    09012300
                   MYELBAT ~ GET(L~L-2).LITPART;  % 4- NEG INT >-1024   09012400
CASE5:        BEGIN     % 5- U- COMPLEX EXPRESSION                      09012500
                   EMITL(MYELBAT ~ ALLOCPRT);                           09012600
                   IF LORS THEN EMITWOP(STD)     % TRUE - L             09012700
                   ELSE                                                 09012800
              BEGIN     % FALSE - S                                     09012900
                   EMITWOP(SND);                                        09013000
                   EMITL(0);                                            09013100
                   EMITWOP(EQL);                                        09013200
                   C ~ GENLAB0 ~ GENLABCTR ~ GENLABCTR-1;               09013300
                   GENERATEGOTO(BFC);                                   09013400
                   EMITL(1);                                            09013500
                   EMITWOP(CHS);                                        09013600
                   EMITV(10);         %WILL SIMULATE INDEX ERROR        09013700
                   GO AROUND;                                           09013900
              END  OF CASE5 FOR S;                                      09014000
              END  OF CASE5;                                            09014100
              END  OF CASE STATEMENT;                                   09014200
                   IF NOT LORS THEN                                     09014300
              BEGIN                                                     09014305
                   C ~ GENLAB0 ~ GENLABCTR ~ GENLABCTR-1;               09014310
                   GENERATEGOTO(BFW);                                   09014315
              END  ;                                                    09014325
AROUND:       END  OF LOOKATEXPR;                                       09014400
                   IF STEPI NEQ ARITHID THEN                            09014500
                     BEGIN ERRSUP(27);  GO XIT  END;                    09014550
                   CELBAT ~ ELBAT;                                      09014600
                   IF STEPI ! ASGNOP THEN                               09014700
              BEGIN                                                     09014800
                   ERRSUP(028);                                         09014900
                   GO XIT;                                              09015000
              END  ;                                                    09015100
                   ELBAT ~ CELBAT;                                      09015200
                   GETSIMPADDR;                                         09015300
                   SETSIMPDEFFLAG;                                      09015400
                   SETSIMPREFFLAG;                                      09015500
                   STUFFBACK;                                           09015600
                   CELBAT ~ ELBAT;                                      09015700
                   STEPIT; AEXPR;                                       09015800
                   IF ELCLASS NEQ TOV THEN                              09015900
                     BEGIN ERRSUP(29);  GO XIT  END                     09015950
                   ELSE                                                 09016000
                   LOOKATEXPR(LELBAT,LEXPR,TRUE,BRANCH,GENLAB0);        09016100
                   IF ELCLASS = PERCENT THEN                            09016200
              BEGIN                                                     09016300
                   SELBAT ~ SEXPR ~ 1;                                  09016400
                   C ~ GENLAB0 ~ GENLABCTR ~ GENLABCTR-1;               09016405
                   GENERATEGOTO(BFW);                                   09016410
              END  ELSE                                                 09016600
                   IF ELCLASS NEQ STEPV THEN                            09016700
                     BEGIN ERRSUP(31);  GO XIT  END                     09016750
                   ELSE                                                 09016800
                   LOOKATEXPR(SELBAT,SEXPR,FALSE,BRANCH,GENLAB0);       09016900
                   EXPRSTATE ~ 0;                                       09017000
                   ADJUST;                                              09017002
                   C ~ GENLAB2 ~ GENLABCTR ~ GENLABCTR-1;               09017005
                   DEFLABEL(TRUE);                                      09017010
                   STATSEQ(FR); %STATSEQ CALLED BY FOR ST.              09017100
                   IF ENDTOG THEN GO ENDIT;                             09017110
                   IF ELCLASS ! STATSTART OR  ELBAT.SSPART ! NEXTV THEN 09017200
              BEGIN                                                     09017300
                   ERRSKIP(032);                                        09017310
                   GO XIT;                                              09017340
              END;                                                      09017350
                   STEPIT;                                              09017400
                   IF CELBAT.SIMPADDRPART ! ELBAT.SIMPADDRPART THEN     09017500
                     BEGIN ERRSKIP(32); GO XIT  END                     09017510
                   ELSE                                                 09017600
              BEGIN                                                     09017700
                   EMITV(ELBAT.SIMPADDRPART);                           09017800
                   CASE SEXPR OF                                        09017900
              BEGIN                                                     09018000
                   GO CASE5;                                            09018100
              BEGIN                                                     09018200
                   EMITL(SELBAT);                                       09018300
                   EMITWOP(ADD);                                        09018400
                   HANDLEL(CELBAT,LELBAT,LEXPR,  GENLAB0);              09018500
                   EMITWOP(GTRT);                                       09018600
              END  OF CASE1;                                            09018700
              BEGIN                                                     09018800
                   EMITNUM(SELBAT);                                     09018900
                   EMITWOP(ADD);                                        09019000
                   HANDLEL(CELBAT,LELBAT,LEXPR,  GENLAB0);              09019100
                   EMITWOP(GTRT);                                       09019200
              END  OF CASE2;                                            09019300
              BEGIN                                                     09019400
                   EMITNUM(SELBAT);                                     09019500
                   IF DEBUGATOG THEN                              %DEBUG09019505
              BEGIN                                               %DEBUG09019510
LIN[0]~".STEP.."; LIN[1]~BINTOBCL(SELBAT.[1:23]);                 %DEBUG09019515
                    LIN[2]~BINTOBCL(SELBAT.[24:24]);                    09019520
                    SINGLINE; BLANKLINE;                                09019521
              END  ;                                                    09019525
                   EMITWOP(ADD);                                        09019600
                   HANDLEL(CELBAT,LELBAT,LEXPR,  GENLAB0);              09019700
                   EMITWOP(LSST);                                       09019800
              END  OF CASE3;                                            09019900
              BEGIN                                                     09020000
                   EMITL(SELBAT);                                       09020100
                   EMITWOP(SUB);                                        09020200
                   HANDLEL(CELBAT,LELBAT,LEXPR,  GENLAB0);              09020300
                   EMITWOP(LSST);                                       09020400
              END  OF CASE4;                                            09020500
CASE5:        BEGIN                                                     09020600
                   EMITV(SELBAT);                                       09020700
                   EMITWOP(ADD);                                        09020800
                   HANDLEL(CELBAT,LELBAT,LEXPR,  GENLAB0);              09020900
                   EMITWOP(SUB);                                        09021000
                   EMITV(SELBAT);                                       09021100
                   EMITWOP(MUL);                                        09021200
                   EMITL(0);                                            09021300
                   EMITWOP(GTRT);                                       09021400
              END  OF CASE5 AND CASE0;                                  09021500
              END  OF CASE STATEMENT;                                   09021600
              END  ;                                                    09021700
                   C ~ GENLAB2;                                         09021800
                   GENERATEGOTO(BBC);                                   09021805
                   IF STEPI ! PERCENT THEN ERRSKIP(037);                09021900
EXIT:XIT:     END  OF FORST;                                            09022000
COMMENT            ***** SECTION 10 *****                               10000000
                   "END, "STOP", "REM" STATEMENTS                       10000100
                   *****            *****                               10000200
;                                                                       10000300
INTEGER            STOPNDX;  % NDX INTO INFO FOR STOP STATEMENTS        10009000
COMMENT            "END" STATEMENT                                      10100000
                   SYNTAX:                                              10100100
                      END                                               10100200
                   CODE GENERATED:                                      10100300
                      MKS                                               10100305
                      FOR EACH FILE                                     10100310
                         LITC  FILENDX                                  10100315
                         DESC  FILEBASE                                 10100320
                         LOD                                            10100325
                         LITC  5                                        10100330
                         LITC 0 -- CLOSE ALL FILES                      10100335
                      OPDC  BASIC CLOSE INTRINSIC                       10100340
                      LITC 10   (RETURN SPACE)                          10100400
                      COM                                               10100500
                      LITC 5    (BYE)                                   10100600
                      COM                                               10100700
;                                                                       10100800
PROCEDURE          ENDST;                                               10100900
              BEGIN                                                     10100905
REAL               T;                                                   10100907
INTEGER            T1, T2;                                              10100908
                   %PURGE CODE LINKS FOR STOP STATEMENT                 10100910
                   IF INFONDX~STOPNDX ! 0  THEN                         10100915
              BEGIN                                                     10100916
                   IF T1 ~(T~INFO[INFOWD2]).CODELINK ! 0 THEN           10100920
                   DO                                                   10100925
              BEGIN                                                     10100930
                   T2 ~ GET(T1-1);                                      10100935
                   EMITB(BFW&T1[36:36:1],L&T1[38:38:10],L,0);           10100940
              END  UNTIL T1 ~ T2 = 0;                                   10100945
                   INFO[INFOWD2].DEFFLAG ~1;                            10100950
                   IF T1 ~ T.PRTADDRPART ! 0  THEN                      10101000
                        BLDPROGDESC(T1,L.[31:7],L.[38:8]);              10101001
              END  ;                                                    10101002
                   EMITWOP(MKS);                                        10101040
                   EMITL(0);                                            10101050
                   EMITV(GETINTRIN(BCLOSEI));                           10101060
                   EMITL(10);                                           10101105
                   EMITWOP(COM);                                        10101200
                   EMITL(5);                                            10101300
                   EMITWOP(COM);                                        10101400
                   IF STEPI ! PERCENT THEN ERRSKIP(017);                10101500
              END  ENDST;                                               10101600
COMMENT       "STOP" STATEMENT                                          10200000
                   SYNTAX:                                              10200100
                      STOP                                              10200200
                   CODE:                                                10200300
                      LITC  N  OR  DESC  N                              10200400
                      BFW                                               10200500
                   EFFECTIVELY A "GOTO" THE END STATEMENT               10200600
;                                                                       10200700
PROCEDURE          STOPST;                                              10200795
              BEGIN                                                     10200800
INTEGER            T;                                                   10200805
                   IF INFONDX~STOPNDX = 0 THEN                          10200900
                   INFONDX~STOPNDX~NEXTAVAILINFO~NEXTAVAILINFO+2;       10200905
                   L ~ L+1;                                             10200995
                   EMIT(T~INFO[INFOWD2].CODELINK);                      10201000
                   IF T = 0 THEN                                        10201100
              BEGIN                                                     10201200
                   INFO[INFOWD2] ~ INFO[INFOWD2] & FWDREFHEAD[33:33:15];10201300
                   FWDREFHEAD ~ INFONDX;                                10201400
              END  ;                                                    10201500
                   INFO[INFOWD2] ~ INFO[INFOWD2] & L[18:33:15] &        10201600
                      BFW[21:36:1];                                     10201700
                   IF STEPI ! PERCENT THEN ERR(019);                    10201800
              END  OF STOPST;                                           10201900
PROCEDURE          REMST;  ;         % DUMMY STATEMENT                  10300000
COMMENT            ***** SECTION 11 *****                               11000000
                   "DEF" STATEMENT                                      11000100
                   *****            *****                               11000200
;                                                                       11000300
DEFINE             FBASE = 897#;   % F- RELATIVE ADDRESSING             11000400
DEFINE             NOPARAM = [28:5]#;                                   11000500
COMMENT            "DEF" STATEMENT                                      11100000
                   SYNTAX:                                              11100100
                   DEF FN<LETTER>(<SIMPLE VARIABLE LIST>)=<AEXPR>       11100200
                   CODE GENERATED:                                      11100300
                   EXPRESSION EVALUATION WITH REFERENCES TO LOCALS      11100400
                      (FORMAL PARAMETERS) AND GLOBALS                   11100500
                   LEAVE SINGLE VALUE AT TOP OF STACK WITH "RTN"        11100600
;                                                                       11100700
PROCEDURE          DEFST;                                               11100800
COMMENT            AS FORMAL PARAMETER LIST SCANNED, SAVE DICTIONARY    11100900
                      ENTRY FOR THE GLOBAL WITH THE SAME NAME IN THE    11101000
                      SAVEGLOBAL ARRY (WITH INDEX SGNDX), GENERATE      11101100
                      DICT ENTRY WITH F-REL ADDR FOR FORMAL             11101200
                   USE ARITH EXPR ROUTINE                               11101300
                   REPLACE GLOBAL ENTRIES IN DICT UPON RETURN           11101400
;                                                                       11101500
              BEGIN                                                     11101600
DEFINE             FUNCDEFPART = [35:1]#;                               11101700
DEFINE CLETTERONLY=10#,FUNCREFFLAG=[36:1]#;                             11101800
INTEGER PARAMCTR;                                                       11101900
REAL ARRAY SAVEGLOBAL[0:29];                                            11102000
DEFINE             RLINK = DICTROW#,                                    11102100
                   CLINK = DICTCLM#;                                    11102200
DEFINE             CFUNC = 12#,    %DICT CLM FOR DEFINED FUNCTIONS      11102300
                   CXTRA = 13#;    %DICT CLM FOR XTRA FUNC, ARRAY INFO  11102400
REAL               TELBAT,    %SAVE LOC FOR ELBAT OF FUNC ID            11102500
                   NDX,       %UTILITY INDEX                            11102600
                   T;         %UTILITY TEMP                             11102700
LABEL              NEXTFORMAL, XIT;                                     11102800
INTEGER            GENLAB1;     %ASSIGN BEFORE GEN CODE FOR BYPASS FIXUP11102900
INTEGER            T1;   %TEMP STORE                                    11102950
                   IF STEPI = DEFFUNCID  THEN                           11103000
              BEGIN                                                     11103005
                   TELBAT ~ ELBAT;                                      11103100
                   IF(TELBAT ~ TELBAT&DICT[TELBAT.RLINK,CFUNC][6:6:42]) 11103400
                      .FUNCDEFPART NEQ 0 THEN                           11103500
                      BEGIN ERRSKIP(41);  GO XIT  END;                  11103550
                   PARAMCTR ~ 0;                                        11103600
                   GENLAB1 ~ L ~ L+2;                                   11103700
                   ADJUST;                                              11103705
                   DICT[TELBAT.RLINK,CXTRA] ~                           11103800
                      DICT[TELBAT.RLINK,CXTRA]&L[33:31:15];             11103900
                   IF STEPI = LPAREN THEN                               11104000
              BEGIN     %PROCESS FORMAL PARAMETER LIST                  11104100
NEXTFORMAL:        IF STEPI = ARITHID THEN                              11104200
              BEGIN     %SAVE GLOBALS                                   11104300
                   SAVEGLOBAL[PARAMCTR~PARAMCTR+1] ~ ELBAT;             11104400
              END  ELSE                                                 11104600
                   ERR(042);                                            11104700
                   IF STEPI = COMMA THEN GO NEXTFORMAL                  11104800
                   ELSE                                                 11104900
                   IF ELCLASS NEQ RPAREN THEN                           11105000
                     BEGIN ERRSKIP(43);  GO XIT  END;                   11105050
                   IF STEPI NEQ ASGNOP THEN                             11105100
                     BEGIN ERRSKIP(44);  GO XIT  END;                   11105150
                   NDX ~ 1;                                             11105200
                   DO    %ASSIGN F-REL ADDR FOR EACH FORMAL, PUT IN DICT11105300
                      DICT[(T~SAVEGLOBAL[NDX]).RLINK,T.CLINK] ~         11105400
                      T&(FBASE+PARAMCTR-NDX)[17:37:11]&0[37:47:1]       11105500
                   UNTIL NDX~NDX+1 > PARAMCTR;                          11105600
              END  OF FORMAL PARAMETER PROCESSING                       11105700
                   ELSE                                                 11105800
                   IF ELCLASS NEQ ASGNOP THEN                           11105900
                     BEGIN ERRSKIP(45);  GO XIT  END;                   11105950
                   IF BOOLEAN(TELBAT.FUNCREFFLAG) THEN                  11106000
              BEGIN   %CHECK PARAMETER CORRESPONDENCE                   11106050
                   T1 := TELBAT.FUNCADDRPART;                           11106100
                   IF TELBAT.NOPARAM NEQ PARAMCTR THEN ERR(84);         11106150
              END ELSE BEGIN  %FIRST DEF/REF FOR FUNC                   11106200
                       T1 := ALLOCPRT; IF PRTOG THEN  %PRINT PRT INFO   11106250
                        BEGIN ELBAT:=TELBAT; PRTINFO("DEF FN");END;     11106300
                       END;                                             11106400
                   DICT[TELBAT.RLINK,CFUNC] := TELBAT&T1[6:37:11]       11106402
                        &PARAMCTR[28:43:5]&1[35:47:1];                  11106404
                   BLDPROGDESC(T1,L.[31:7],L.[38:8]);                   11106405
                   STEPIT; AEXPR;                                       11106500
                   IF ELCLASS NEQ PERCENT THEN                          11106505
                     BEGIN ERRSKIP(103);  GO XIT  END;                  11106550
                   EMITWOP(RTN);                                        11106600
                   ADJUST ;                                             11106605
                   EMITB(BFW,GENLAB1,L,0);                              11106700
                   %NOW WE RESTORE DICT ENTRIES FOR PROTECTED GLOBALS   11106800
                   FOR NDX ~ 1 STEP 1 UNTIL PARAMCTR DO                 11106900
                   DICT[(T~SAVEGLOBAL[NDX]).RLINK,T.CLINK]~T;           11107000
              END  ELSE  ERRSUP(040);                                   11107005
XIT:          END  OF DEFST;                                            11107100
COMMENT            ***** SECTION 12 *****                               12000000
                   "DIM"                                                12000100
                   *****            *****                               12000200
                   "DIM" STATEMENT                                      12000300
                   SYNTAX:                                              12000400
                      DIM <LETTER>(<UNSIGNED INTEGER>)  ...             12000500
                         OR                                             12000600
                          <LETTER>(<UNSIGNED INTEGER>,                  12000700
                                             <UNSIGNED INTEGER>) ...    12000800
                      DIM <LETTER>$ ( ...ETC                            12000900
                   UPPER BOUND OF 10 ASSUMED IF NO SPECIFICATION        12001000
                      ACCOMPANYING REFERENCE                            12001100
                   LOWER BOUND ASSUMED = 1                              12001200
                      (ACTUALLY, SPACE RESERVED FOR ZERO-ELEMENT)       12001300
                   STRING ARRAYS REQUIRE 2 WORDS PER ELEMENT            12001400
                   <UNSIGNED INTEGER> <1023 (ARITH) OR <511 (STRING)    12001500
                   ARRAY INFO ACCUMULATED CLM 13 OF DICT ARRAY          12001600
;                                                                       12001700
PROCEDURE          DIMST;                                               12002200
              BEGIN                                                     12002300
REAL               NODIM;        % NUMBER OF DIMENSIONS                 12002600
BOOLEAN            TYPETOG;        %FALSE-ARITH, TRUE-STRING            12002700
REAL               TELBAT,         %SAVE LOC FOR ARRAY ID ELBAT WD      12002800
                   T;                    %TEMP FOR BUILDING ARRAY INFO  12002805
LABEL              AGAIN, XIT;                                          12003000
DEFINE             RLINK = DICTROW#,                                    12003100
                   CLINK = DICTCLM#;                                    12003200
AGAIN:             NODIM ~ 0;                                           12003300
                   IF STEPI ! ARITHID  AND  ELCLASS ! STRINGID  THEN    12003400
                     BEGIN ERRSUP(23);  GO XIT  END;                    12003500
                   TELBAT ~ ELBAT;                                      12003800
                   IF STEPI NEQ LPAREN THEN                             12003900
                     BEGIN ERRSUP(24);  GO XIT  END;                    12003950
                   IF STEPI ! NUMBER OR C.[1:8] ! 0 THEN ERR(025)       12004000
                   ELSE                                                 12004100
              BEGIN     %FIRST UPPER BOUND                              12004200
                   NODIM ~ 1;                                           12004300
                   IF TELBAT.CLASS = STRINGID THEN                      12004400
              BEGIN                                                     12004405
                   IF C GTR 510 THEN ERR(25);                           12004410
                   IF(T~DICT[TELBAT.RLINK,CXTRAINFO]).SDIM1PART ! 0     12004450
                      THEN ERR(046)  ELSE  T.SDIM1PART ~ C+1;           12004500
                   STEPIT;                                              12004502
              END  ELSE                                                 12004505
              BEGIN                                                     12004510
                   IF C GTR 1022 THEN ERR(25);                          12004515
                   IF TELBAT.CLASS = ARITHID AND TELBAT.DICTCLM=10 THEN 12004550
                   IF (T~DICT[TELBAT.RLINK,CXTRAINFO]).DIM1PART! 0      12004600
                      THEN ERR(046)  ELSE  T.DIM1PART ~ C+1             12004700
                   ELSE BEGIN ERRSUP(23);  GO XIT  END;                 12004800
                   IF STEPI = COMMA THEN                                12004900
                   IF STEPI ! NUMBER OR C.[1:8] ! 0 THEN ERR(025)       12005000
                   ELSE                                                 12005100
              BEGIN     %SECOND UPPER BOUND                             12005200
                   IF C GTR 1022 THEN ERR(25);                          12005210
                   NODIM ~ 2;                                           12005300
                   T.DIM2PART ~ C+1;                                    12005400
                   STEPIT;                                              12005405
              END  ;                                                    12005500
              END  ;                                                    12005600
                   IF ELCLASS NEQ RPAREN THEN                           12005700
                     BEGIN ERRSUP(26);  GO XIT  END;                    12005750
                   DICT[TELBAT.RLINK,CXTRAINFO] ~ T;                    12005800
                   CHEKDIMENS(TELBAT,NODIM);                            12006300
              END  ;                                                    12006400
                   IF STEPI = COMMA THEN GO  AGAIN                      12006500
                   ELSE  IF ELCLASS ! PERCENT THEN ERRSKIP(056);        12006600
XIT:          END  OF DIMST;                                            12006700
COMMENT            ***** SECTION 13 *****                               13000000
                   "GOSUB"   131                                        13000100
                   "GOTO"    132                                        13000200
                   "ON"      133                                        13000300
                   "RETURN"  134                                        13000400
                   "IF"      135                                        13000500
                   *****            *****                               13000600
;                                                                       13000700
DEFINE             INFOLINK = [33:15]#;                                 13001000
DEFINE             CURRENTLINENO = CHARRY[0]#;                          13001300
DEFINE             LABELADDR=[18:15]#;                                  13001500
DEFINE             FWDREFLINK = [33:15]#;                               13001505
COMMENT            INFO ARRAY IS OUR LABEL (IE LINE#) TABLE             13002700
                   2 WDS/ ELEMENT AS FOLLOWS:                           13002800
                      WD1 - 6:27  LINE# (OCTAL INTEGER)                 13002900
                            33:15  INFO LINK TO NEXT STACK ELEMENT      13003000
                                   =0 FOR END OF STACK                  13003100
                      WD2 -                                             13003200
                         06:01  1-DEFINED, 0 - UNDEFINED                13003300
                            7:11  PRT ADDR OF DESCR IFF REQD            13003400
                      A) UNDEFINED:                                     13003405
                            18:15 CODE LINK FOR FWD REF IN CURRENT SEG  13003500
                               21:01  1-BFW  0-BFC                      13003600
                                  23:08  REL WD IN SEG                  13003700
                                  31:02  REL SYL IN WD                  13003800
                            33:15  LINK IN FWD REF STACK W/ CODE LINKS  13003805
                                  EFFECTIVELY A STACK HEAD FOR FWD REF  13003900
                      B) DEFINED                                        13004000
                                                                        13004100
                            18:15  SEG# (18:7), REL ADDR (25:8) OF WORD 13004200
                                                                        13004300
                   SINFO ARRAY SERVES AS THE STACK HEAD                 13004400
                                                                        13004500
                                                                        13004600
                      LINK =0 IFF NO ENTRIES IN STACK                   13004700
                           IMPLIES ROW 0 AND CLM 0 OF INFO NOT USED     13004800
                   8 DEC DIGIT LINE# CONVERTED TO {9 OCT DIG INTEGER    13004900
                      MOD 127 TO GET STACK HEAD FROM SINFO              13005000
                   LINEAR SEARCH OF STACK                               13005100
                                                                        13005200
                   LINK=0 DEFINES END OF STACK                          13005300
                   WHENEVER GOTO <LINE#>                                13005400
                      A) PREV ENTRY - UNDEFINED:                        13005500
                         STACK NEW CODE LINK                            13005600
                      B) PREV ENTRY - DEFINED                           13005700
                         GENERATE INTRA- OR INTER-SEGMENT BRANCH        13005800
                      C) NO PREV ENTRY                                  13005900
                         NEW ENTRY, STACK CODE LINK, STACK FWDREF LINK  13006000
                         1)PREV ENTRY -                                 13006100
                            GENERATE INTRA- OR INTER-SEG BRANCH         13006200
                         2)SOMETHING IS BAD WRONG, TELL THE USER        13006300
                   WHENEVER GOSUB <LINE#>                               13006400
                      A) PREV ENTRY - UNDEFINED OR DEFINED:             13006500
                         ALLOCATE PRT IFF REQD, GENERATE SUBR CALL      13006600
                      B)NO PREV ENTRY:                                  13006700
                         NEW ENTRY, THEN AS IN (A) ABOVE                13006800
                                                                        13006900
                                                                        13007000
                                                                        13007100
                                                                        13007200
                                                                        13007300
                                                                        13007400
                   WHENEVER LABEL DEFINITION TIME                       13007500
                      PURGE CODE STACK IFF REQD, PLUG ADDRESS, BLD SD   13007600
                                                                        13007700
                                                                        13007800
                   WHENEVER END OF CODE SEGMENT                         13007900
                      PURGE ALL CODE STACKS WITHIN FWDREF STACK,        13008000
                         PURGING FWDREF STACK AND ALLOCATING PRT CELLS  13008100
                         AS WE GO                                       13008105
                   AT PROGRAM WRAPUP                                    13008200
                      GENERATE ERR MSG FOR FWD REF STACK                13008300
                                                                        13008400
                                                                        13008500
                                                                        13008600
;                                                                       13008700
COMMENT            INFO[0,0] USED BY STOP STAT TO REF END STAT;         13008705
COMMENT            SCRAMLOOK                                            13008800
                      WILL SCRAMBLE A LINENO (IE LINENO MOD 127) TO GET 13008900
                      A STACK HEAD FROM THE SINFO ARRAY, THEN SEARCH    13009000
                      LINEARLY FOR A MATCHING LINENUMBER                13009100
                   RESULT TRUE IF FOUND, ELSE FALSE                     13009200
                   FORMAL PARAMETER LINENO WILL BE CONVERTED TO FORM OF 13009300
                      FIRST WORD OF INFO ENTRY WITH LINK PART POINTING  13009400
                      TO MATCHING ENTRY IN INFO IF FOUND, OR, IF NOT    13009500
                      FOUND, THEN POINTING TO TOP OF STACK              13009600
                   USED BY GENERATEGOTO, GOSUBST, DEFLABEL              13009700
;                                                                       13009800
BOOLEAN PROCEDURE  SCRAMLOOK(LINENO);                                   13009900
REAL               LINENO;                                              13010100
              BEGIN                                                     13010300
LABEL              FOUND;                                               13010400
INTEGER            T;                                                   13010600
                   IF (T~INFONDX~SINFO[LINENO MOD 127]) ! 0 THEN  DO    13010700
                   IF INFO[INFOWD].NUMBPART = LINENO THEN               13011300
              BEGIN                                                     13011400
                   SCRAMLOOK ~ TRUE;                                    13011500
                   IF DEBUGATOG THEN     BEGIN                    %DEBUG13011504
                   LIN[0]~".SCRAM.";LIN[1]~".FOUND.";SINGLINE;BLANKLINE;13011505
                                        END;                      %DEBUG13011506
                   GO FOUND;                                            13011600
              END  UNTIL INFONDX ~ INFO[INFOWD].INFOLINK = 0;           13011700
                   INFONDX ~ T;                                         13011800
                   SCRAMLOOK ~ FALSE;                                   13011900
FOUND:             LINENO ~ 0 & LINENO[6:21:27] & INFONDX[33:33:15];    13012000
                   IF DEBUGATOG THEN     BEGIN                    %DEBUG13012094
                   LIN[0]~".SCRAM.";LIN[1]~LINENO;SINGLINE;BLANKLINE;   13012095
                                        END;                      %DEBUG13012096
              END  OF SCRAMLOOK;                                        13012100
COMMENT            GENERATEGOTO WILL GET NEXT ELBAT, INSURE AN INTEGER, 13012200
                      AND GENERATE   BRANCHING CODE                     13012300
;                                                                       13012400
PROCEDURE          GENERATEGOTO(BRANCH);                                13012500
VALUE              BRANCH;                                              13012600
INTEGER            BRANCH;                                              13012700
              BEGIN                                                     13012800
LABEL              DOCODELINK;                                          13012805
REAL               T;                                                   13012810
                   IF LINENO = CURRENTLINENO THEN ERR(055);             13013400
                   IF SCRAMLOOK(LINENO) THEN                            13013500
                   IF BOOLEAN((T~INFO[INFOWD2]).DEFFLAG) THEN           13013600
                      EMITB(BRANCH,L~L+2,4|(T.LABELADDR),               13013700
                         INFONDX+1)                                     13013800
                   ELSE                                                 13013895
              BEGIN                                                     13013900
DOCODELINK:        L ~L+1;                                              13013905
                   EMIT(T~T.CODELINK);                                  13014000
                   IF T = 0 THEN                                        13014005
              BEGIN                                                     13014010
                   INFO[INFOWD2] ~ INFO[INFOWD2] & FWDREFHEAD[33:33:15];13014015
                   FWDREFHEAD ~ INFONDX;                                13014020
              END  ;                                                    13014025
                   INFO[INFOWD2] ~ INFO[INFOWD2] & L[18:33:15] &        13014100
                      BRANCH[21:36:1];                                  13014105
              END  ELSE                                                 13014200
              BEGIN                                                     13014205
                   INFO[NEXTINFO] ~ LINENO;                             13014210
                   SINFO[LINENO.NUMBPART MOD 127] ~ INFONDX;            13014215
                   T ~0;                                                13014220
                   GO DOCODELINK;                                       13014300
              END  ;                                                    13014310
              END  OF GENERATEGOTO;                                     13014400
COMMENT            "GOSUB" STATEMENT                                    13100000
                   SYNTAX:                                              13100100
                      GOSUB <LINE#>                                     13100200
                   CODE:                                                13100300
                      MKS                                               13100400
                      OPDC  PROC DESC FOR <LINE#>                       13100500
                   LOOK UP IN FORWARD-REF OR DEFINED STACK IN LABEL     13100600
                      TABLE (INFO ARRAY)                                13100700
                   ALLOCATE PRT CELL FOR DESC IF REQD                   13100800
;                                                                       13100900
PROCEDURE          GOSUBST;                                             13101000
              BEGIN                                                     13101100
LABEL              XIT;                                                 13101200
REAL               T;                                                   13101300
INTEGER            T1;                                                  13101305
                   T1.[1:5] ~ELBAT.SSPART-7;                            13101306
                   SCANMODE ~ SSMODE;                                   13101400
                   IF STEPI ! NUMBER THEN                               13101405
              BEGIN                                                     13101500
                   ERRSKIP(006);                                        13101600
                   GO XIT;                                              13101700
              END  ;                                                    13101800
                   IF NOT SCRAMLOOK(LINENO) THEN                        13102100
              BEGIN                                                     13102200
                   INFO[NEXTINFO]~LINENO;                               13102300
                   SINFO[LINENO.NUMBPART MOD 127] ~ INFONDX;            13102400
              END  ;                                                    13102500
                   IF (T~INFO[INFOWD2]).PRTADDRPART = 0 THEN            13103200
              BEGIN                                                     13103205
                   T ~ INFO[INFOWD2] ~ T & ALLOCPRT[7:37:11] ;          13103300
                   ELBAT ~ T1;                                          13103303
                   PRTINFO(LINENO.[6:27]);                              13103304
                   IF BOOLEAN(T.DEFFLAG) THEN                           13103306
                      BLDPROGDESC(T.PRTADDRPART,T.[18:7],T.[25:8]);     13103308
              END  ;                                                    13103310
                   EMITWOP(MKS);                                        13103400
                   EMITV(T.PRTADDRPART);                                13103500
                   IF STEPI NEQ PERCENT THEN ERRSKIP(070);              13103510
XIT:          END  OF GOSUBST;                                          13103600
COMMENT            "GOTO" STATEMENT                                     13200000
                   SYNTAX:                                              13200100
                      GOTO <LINE#>                                      13200200
                   CODE:                                                13200300
                      1)INTRASEGMENT -                                  13200400
                         LITC  WD OFFSET                                13200500
                         GFW/GBW                                        13200600
                      2)INTERSEGMENT -                                  13200700
                         OPDC  PRT ADDR OF PROC DESC                    13200800
                         BFW                                            13200900
                   FOR FORWARD REFERENCES -                             13201000
                      RESERVED 2 SYL   LINK INTO CODE SEGMENT LIST      13201100
                      ASSOCIATED WITH THIS <LINE#>                      13201200
;                                                                       13201300
PROCEDURE          GOTOST;                                              13201400
              BEGIN                                                     13201500
LABEL              XIT,EXIT;                                            13201510
                   SCANMODE ~ SSMODE;                                   13201600
                   IF STEPI! NUMBER THEN                                13201700
              BEGIN                                                     13201710
                   ERRSUP(005);                                         13201720
                   IF ELCLASS ! PERCENT THEN GO XIT                     13201730
                        ELSE GO EXIT;                                   13201740
              END                                                       13201750
                   ELSE GENERATEGOTO(BFW);                              13201800
                   IF STEPI ! PERCENT THEN XIT: ERRSKIP(034);           13201900
EXIT:         END  OF GOTOST;                                           13202000
COMMENT            "ON" STATEMENT                                       13300000
                   SYNTAX:                                              13300100
                      ON <ARITH EXPR> GOTO <LINE# LIST>                 13300200
                      WHERE  0 < <AEXPR> { # OF ELEMENTS IN LIST        13300300
                      IF OUT OF RANGE, GOTO NEXT STAT IN SEQ            13300400
                      ROUND NON INTEGER WITH ISN INSTRUCTION            13300500
                   CODE:                                                13300600
                      <AEXPR> EVALUATION                                13300700
                                                                        13300800
                                                                        13300900
                      LITC  JUNK                                        13301000
                      ISN                                               13301100
                      DUP                                               13301200
                      LITC  1                                           13301300
                      GEQ                                               13301400
                      COND BR TO NEXT STAT (FIX-UP)                     13301500
                      DUP                                               13301600
                      LITC  N   (FIX-UP)                                13301700
                      LEQ                                               13301800
                      COND BR TO NEXT STAT (FIX-UP)                     13301900
                      DUP                                               13302000
                      ADD                                               13302100
                      BFW                                               13302200
                      UNCOND BR 1                                       13302300
                      UNCOND BR 2                                       13302400
                                .                                       13302500
                                .                                       13302600
                                .                                       13302700
                      UNCOND BR N                                       13302800
                                   ~ ASSIGN GENLAB                      13302900
;                                                                       13303000
PROCEDURE          ONST;                                                13303100
              BEGIN                                                     13303200
REAL               GENLAB1,            %LOC FOR FIX-UPS                 13303300
                   GENLAB2,                                             13303400
                   GENLAB3;                                             13303500
LABEL              XIT;                                                 13303600
REAL               CTR;      %COUNTER IN LABEL LIST                     13303700
                   STEPIT; AEXPR;                                       13303800
                   EMITL(JUNK);                                         13304100
                   EMITWOP(ISN);                                        13304200
                   EMITWOP(DUP);                                        13304205
                   EMITL(1);                                            13304300
                   EMITWOP(GEQL);                                       13304400
                   GENLAB1 ~ L ~ L+2;                                   13304500
                   EMITWOP(DUP);                                        13304600
                   GENLAB2 ~ L ~ L+1;                                   13304700
                   EMITWOP(LEQL);                                       13304800
                   GENLAB3 ~ L ~ L+2;                                   13304900
                   EMITWOP(DUP);                                        13305000
                   EMITWOP(ADD);                                        13305100
                   EMITL(2);%                                           13305150
                   EMITWOP(SUB);%                                       13305160
                   EMITWOP(BFW);                                        13305200
                   IF ELCLASS ! GOTOV THEN                              13305300
              BEGIN                                                     13305400
                   ERRSKIP(035);                                        13305500
                   GO XIT;                                              13305600
              END  ;                                                    13305700
                   CTR ~ 0;                                             13305800
                   SCANMODE ~ SSMODE;                                   13305805
                   DO                                                   13305900
              BEGIN                                                     13306000
                   IF STEPI =NUMBER THEN                                13306100
              BEGIN                                                     13306105
                   GENERATEGOTO(BFW);                                   13306200
                   CTR ~ CTR+1;                                         13306205
              END  ELSE                                                 13306210
              BEGIN                                                     13306215
                   ERRSKIP(047);                                        13306220
                   GO XIT;                                              13306225
              END  ;                                                    13306230
              END                                                       13306300
                   UNTIL STEPI ! COMMA;                                 13306400
                   IF ELCLASS ! PERCENT THEN ERRSKIP(036);              13306500
                   EMITB(BFC,GENLAB1,L,0);                              13306600
                   EMITB(BFC,GENLAB3,L,0);                              13306700
                   EMITFIXL(CTR,GENLAB2);                               13306800
XIT:          END  OF ONST;                                             13306900
COMMENT            "RETURN" STATEMENT                                   13400000
                   SYNTAX:                                              13400100
                      RETURN                                            13400200
                   CODE:                                                13400300
                      XIT                                               13400400
;                                                                       13400500
PROCEDURE          RETURNST;                                            13400600
              BEGIN                                                     13400700
                   EMITWOP(XIT);                                        13400800
                   IF STEPI NEQ PERCENT THEN ERRSKIP(070);%             13400810
              END  RETURNST;                                            13400900
COMMENT            "IF" STATEMENT                                       13500000
                   SYNTAX:                                              13500100
                      IF <AEXPR1> <RELOP> <AEXPR2> THEN <LINE#>         13500200
                     OR                                                 13500300
                      IF <SEXPR1> <RELOP> <SEXPR2> THEN <LINE#>         13500400
                   CODE:                                                13500500
                      <AEXPR1>                                          13500600
                      <AEXPR2>                                          13500700
                      INVERSE <RELOP>                                   13500800
                      COND BRANCH TO <LINE#>                            13500900
                     OR                                                 13501000
                      LITC  0                                           13501100
                      MKS                                               13501200
                      <SEXPR1>     (IE DESC)                            13501300
                      <SEXPR2>                                          13501400
                      CMN                                               13501500
                      RSA  2                                            13501505
                      INVERSE <RELOP>  16                               13501510
                      JFC  2                                            13501515
                      SEC  1                                            13501520
                      STC  4                                            13501525
                      CMX                                               13501530
                      COND BRANCH TO <LINE#>                            13501535
;                                                                       13501600
PROCEDURE          IFST;                                                13501700
              BEGIN                                                     13501800
REAL               RELBAT;     %SAVE LOC FOR RELATIONAL ELBAT           13501900
PROCEDURE          GENRELNCODE(CHAROP);                                 13501905
VALUE              CHAROP;                                              13501910
INTEGER            CHAROP;                                              13501915
              BEGIN                                                     13501920
                   STRINGTOG ~ TRUE;                                    13501922
                   EMITCOP(CHAROP,16);                                  13501925
                   EMITCOP(JFC,2);                                      13501930
                   EMITCOP(SEC,1);                                      13501935
                   EMITCOP(STC,4);                                      13501940
                   STRINGTOG ~ FALSE;                                   13501942
                   EMITCOP(CMX,1); % XIT CHR MODE IN LINE               13501945
              END  OF GENRELNCODE;                                      13501950
INTEGER            GENLAB;                                              13501955
LABEL              XIT;                                                 13501960
                   EQUALMODETOG~ RELOPMODE;                             13502000
                   IF STEPI = STRINGID OR ELCLASS = STRING THEN         13502100
              BEGIN      %STRING EXPRESSIONS                            13502200
                   EMITL(0);    EMITWOP(MKS);                           13502205
                   STRINGVARIABLE(FP);                                  13502305
                   IF ELCLASS NEQ RELOP THEN BEGIN ERRSUP(48);          13502310
                     GO XIT  END  ELSE  RELBAT := ELBAT;                13502315
                   STEPIT;                                              13502320
                   STRINGVARIABLE(FP);                                  13502325
                   EMITWOP(CMN);                                        13502330
                   STRINGTOG ~ TRUE;                                    13502332
                   EMITCOP(RSA,2);                                      13502335
                   STRINGTOG ~ FALSE;                                   13502337
                   SCANMODE ~ SSMODE;                                   13502340
                   IF ELCLASS NEQ THENV THEN                            13502342
                     BEGIN ERRSUP(9);  GO XIT  END;                     13502343
                   IF STEPI = NUMBER THEN                               13502345
              BEGIN                                                     13502350
                   GENRELNCODE(RELBAT.CINVRELNPART);                    13502360
                   GENERATEGOTO(BFC);                                   13502365
              END  ELSE                                                 13502370
                   IF ELCLASS=STATSTART OR ELCLASS=STRINGID             13502375
                        OR ELCLASS=ARITHID THEN                         13502377
              BEGIN                                                     13502380
                   GENRELNCODE(RELBAT.CRELNPART);                       13502382
                   GENLAB ~ L ~ L+2;                                    13502383
                   IF ELCLASS=STATSTART THEN                            13502385
              BEGIN                                                     13502386
                   IF STATEMENT THEN ERR(058);                          13502387
              END  ELSE                                                 13502388
                   LETST;                                               13502389
                   EMITB(BFC,GENLAB,L,0);                               13502390
                                                                        13502391
                                                                        13502392
              END ELSE  BEGIN ERRSKIP(14);  GO XIT  END;                13502393
              END                                                       13502400
                   ELSE                                                 13502500
              BEGIN                                                     13502505
              BEGIN      %ARITHMETIC EXPRESSIONS                        13502600
                   AEXPR;                                               13502700
                   IF ELCLASS ! RELOP THEN                              13502800
                     BEGIN ERRSUP(48);  GO XIT  END                     13502900
                   ELSE                                                 13503000
                   RELBAT ~ ELBAT;                                      13503100
                   STEPIT;                                              13503200
                   AEXPR;                                               13503300
              END  ;                                                    13503400
                   IF ELCLASS NEQ THENV THEN                            13503500
                     BEGIN ERRSUP(9);  GO XIT  END;                     13503501
                   SCANMODE ~ SSMODE;                                   13503505
                   IF STEPI = NUMBER THEN                               13503510
              BEGIN                                                     13503515
                   EMITWOP(RELBAT.WINVRELNPART);                        13503600
                   GENERATEGOTO(BFC);                                   13503700
                   IF STEPI NEQ PERCENT THEN ERRSKIP(070);%             13503702
              END  ELSE                                                 13503705
                   IF ELCLASS = STATSTART THEN                          13503710
              BEGIN                                                     13503715
                   EMITWOP(RELBAT.WRELNPART);                           13503717
                   GENLAB ~ L~ L+2;                                     13503722
                   IF STATEMENT THEN ERR(058);                          13503725
                   EMITB(BFC,GENLAB,L,0);                               13503730
              END  ELSE                                                 13503735
                   IF ELCLASS = STRINGID OR ELCLASS = ARITHID THEN      13503740
              BEGIN                                                     13503745
                   EMITWOP(RELBAT.WRELNPART);                           13503747
                   GENLAB ~ L ~ L+2;                                    13503750
                   SCANMODE ~ IWMODE;                                   13503756
                   LETST;   EMITB(BFC,GENLAB,L,0);                      13503760
              END  ELSE ERRSKIP(014);                                   13503765
              END  ;                                                    13503770
XIT:          END  OF IFST;                                             13503900
COMMENT       ***** SECTION 14 *****                                    14000000
                   PROGRAM                                              14000100
                      INITIALIZATION                                    14000200
                      CALL STATESEQ                                     14000300
                      WRAPUP                                            14000400
                   STATEMENT SEQUENCE                                   14000500
                             ROUTINE                                    14000600
                   READACARD   (READ,MERGE,COPY,LIST,CALL CARDSCAN)     14000700
                   CARDSCAN   (DEBLANK,RECOG SPEC CHAR, ALPHA, STRINGS) 14000800
                   SCAN    (ANALYZE CHAR, BLD NEXT SYNTACTICAL ELEMENT) 14000900
              *****            *****                                    14001000
;                                                                       14001100
INTEGER            CTR;                                                 14001200
DEFINE             CTRWD = CTR.[42:3],CTR.[45:3]#;                      14001205
COMMENT            DEFLABEL                                             14001300
                      PURGE ALL CODE LINKS FOR FORWARD REFERENCES       14001400
                         AND WRITE OUT CURRENT CODE SEGMENT IF > SEGSIZE14001500
                      ENTER CURRENT LINE NUMBER IN BWD STACK WITH       14001600
                         APPROPRIATE ADDRESS ASSIGNMENT                 14001700
                                                                        14001705
                                                                        14001710
                                                                        14001800
;                                                                       14001900
 LABEL             LISTATS;%                                            14001910
PROCEDURE          DEFLABEL(GENLAB);                                    14002000
VALUE              GENLAB;                                              14002005
BOOLEAN            GENLAB;                                              14002010
              BEGIN                                                     14002100
REAL               T, T1, T2;                                           14002200
INTEGER            T3;                                                  14002300
                   IF NOT GENLAB THEN                                   14002301
                   C ~ CURRENTLINENO;                                   14002305
                   T3 ~ IF SCRAMLOOK(C) THEN C.INFOLINK ELSE 0;         14002310
                   IF NOT GENLAB THEN                                   14002500
                   IF L.EDOCCLM > SEGSIZE THEN                          14002600
              BEGIN        %PROCEED TO PURGE ALL FWD REFS IN THIS SEG   14002700
                   IF INFONDX ~ FWDREFHEAD ! 0 THEN DO                  14002800
              BEGIN                                                     14002900
                   IF T1~(T~INFO[INFOWD2]).CODELINK ! 0  AND            14003000
                      NOT BOOLEAN(T.DEFFLAG)  THEN                      14003005
              BEGIN                                                     14003100
                   DO                                                   14003200
              BEGIN                                                     14003300
                   T2 ~ GET(T1-1);                                      14003400
                   EMITB(BFW&T1[36:36:1],L&T1[38:38:10],L+1024,         14003405
                      INFONDX+1);                                       14003406
              END  UNTIL T1 ~ T2 = 0;                                   14003410
                   INFO[INFOWD2].CODELINK ~ 0;                          14003415
              END  ;                                                    14003420
              END  UNTIL INFONDX ~ T.FWDREFLINK = 0;                    14003425
                   FWDREFHEAD ~ 0;                                      14003430
                   EMITB(BFW,L~L+2,L+1024,(IF T3=0 THEN                 14003435
                      NEXTAVAILINFO+3  ELSE  T3+1));                    14003436
                   WRITECODESEG;                                        14003440
                   SEGENDORSTART(FALSE);                                14003442
              END  ;                                                    14003445
                   ADJUST;                                              14003455
                   IF (INFONDX~T3) ! 0 THEN                             14003458
              BEGIN                                                     14003459
                   IF BOOLEAN((T~INFO[INFOWD2]).DEFFLAG) THEN ERR(012)  14003460
                   ELSE                                                 14003461
              BEGIN                                                     14003462
                   IF T1~T.CODELINK ! 0  THEN                           14003465
              BEGIN                                                     14003466
                   DO                                                   14003470
              BEGIN                                                     14003472
                   T2 ~ GET(T1-1);                                      14003474
                   EMITB(BFW&T1[36:36:1],L&T1[38:38:10],L,0);           14003475
              END  UNTIL T1 ~ T2 = 0 ;                                  14003476
                   T.CODELINK ~ 0;                                      14003477
              END  ;                                                    14003478
              END  ;                                                    14003479
              END  ELSE                                                 14003480
              BEGIN                                                     14003481
                   INFO[NEXTINFO] ~ C;                                  14003482
                   SINFO[C.NUMBPART MOD 127] ~ INFONDX;                 14003483
                   T ~ INFO[INFOWD2];                                   14003484
              END  ;                                                    14003485
                   INFO[INFOWD2] ~ T ~ T & 1[6:47:1] & L[18:31:15];     14003486
                   IF T3~T.PRTADDRPART ! 0  THEN                        14003487
                      BLDPROGDESC(T3,T.[18:7],T.[25:8]);                14003488
                   IF REAL(GENLAB) = 0 THEN                             14003489
              BEGIN                                                     14003490
                   LINESEG[LINENOCTR] ~ L.WDNO & C[11:6:27];            14003491
                   LINENOCTR ~ LINENOCTR+1;                             14003492
              END  ;                                                    14003493
                   IF DEBUGATOG THEN                                    14003494
              BEGIN                                                     14003495
                   LIN[0] ~ ".LABEL.";                                  14003496
                   LIN[1] ~ INFO[INFOWD2];                              14003500
                   SINGLINE; BLANKLINE;                                 14003510
              END  ;                                                    14003520
              END  OF DEFLABEL;                                         14003530
COMMENT            DEFREF WILL PUT ERR MSG IF EITHER FLAG MISSING;      14003600
PROCEDURE          DEFREF(ARG,I); VALUE ARG,I; REAL ARG,I;              14003605
                   IF NOT SPECTOG THEN%  I.E. IF NOT SUPPRESSED         14003606
                   IF I ! 0 THEN                                        14003607
              BEGIN                                                     14003608
                   IF I ! 3 THEN                                        14003610
              BEGIN                                                     14003615
                   IF NOT ERRMSGTOG THEN FILLERRMSG;                    14003616
                   BLANKLINE;                                           14003620
                   IF I=1 THEN MOVEWDS(6,ERRMSG[7,24],LIN[1])           14003625
                     ELSE IF I=2 THEN MOVEWDS(6,ERRMSG[7,40],LIN[1]);   14003630
                   MOVECHR(7,ARG,1,LIN[0],1);                           14003635
                   WRITELINE;                                           14003640
              END  ;                                                    14003645
              END  OF DEFREF;                                           14003650
COMMENT OCTCNVT CONVERTS 8 BCL CHARACTERS STARTING IN CARD COLUMN N     14004000
    TO OCTAL.                                                           14004100
;                                                                       14004200
INTEGER STREAM PROCEDURE OCTCNVT(CC); VALUE CC;                         14004300
BEGIN                                                                   14004400
    SI ~ CC; DI ~ LOC OCTCNVT; DS ~ 8 OCT;                              14004500
    END;                                                                14004600
STREAM PROCEDURE   CARDSCAN(CC1,CC73,ARRY);                             14005000
VALUE              CC1,CC73;                                            14005050
              BEGIN                                                     14005100
LABEL              L, L1, L2;                                           14005200
                   SI ~ CC73; DI ~ ARRY; DS ~ 8 OCT;%CONVRT LINE NO     14005300
                        DI ~ CC73;                                      14005400
                   3(DS ~ LIT "%"; DS ~ LIT """);  %INSERT STOPPER      14005500
                   DI ~ ARRY; DI ~ DI+8; SI ~ CC1;                      14005600
L:                 IF SC = " " THEN                                     14005700
                   BEGIN SI ~ SI+1; GO TO L END;                        14005800
                   IF SC = ALPHA THEN                                   14005900
                   IF SC LEQ "9" THEN                                   14005950
              BEGIN                                                     14006000
                   DS ~ 7 LIT "0";                                      14006100
L1:                DS ~ CHR; GO TO L                                    14006200
              END  ;                                                    14006300
                   DS ~ 7 LIT "+000000";                                14006400
                   IF SC = """ THEN                                     14006500
              BEGIN                                                     14006600
                   DS ~ CHR;                                            14006700
L2:                TALLY ~ 58;                                          14006800
                   15(IF SC ! """ THEN                                  14006900
                        BEGIN DS ~ CHR; TALLY ~ TALLY+1 END             14007000
                        ELSE DS ~ LIT " ");      %STRING BUILT          14007100
                   IF SC ! """ THEN                                     14007200
              BEGIN     %ALLOW > 15 CHAR STRING LITERAL                 14007300
                   DS ~ LIT "9";   %LENGTH ~ 15                         14007400
                   DS ~ 7 LIT "+000000"; DS ~ LIT """;                  14007500
                   GO TO L2;                                            14007600
              END;                                                      14007700
                   SI ~ SI+1;  CC1 ~ SI;    %MOVE PAST QUOTE AND SAVE   14007800
                   CC73 ~ TALLY; SI ~ LOC CC73;                         14007900
                   SI ~ SI+7;                                           14008000
                   IF SC < "0" THEN                                     14008100
                        BEGIN TALLY ~ TALLY+20; CC73 ~ TALLY END;       14008200
                        %WE JUST CONVERTED BINARY TO COLLATING SEQUENCE 14008300
                   DS ~ CHR; % AND STUFF INTO CHAR 16                   14008400
                   SI ~ CC1; GO TO L;       %RESET SOURCE PRT AND PROCEE14008500
              END;                                                      14008600
              IF SC ! "%" THEN GO TO L1;                                14008700
                   DS ~ CHR;                                            14008800
              END  CARDSCAN;                                            14008900
                                                                        14010100
COMMENT TLCR POINTS AT THE WORD IN TAPE FILE BUFFER CONTAINING THE      14010200
         SEQUENCE NUMBER OF THE LAST CARD IMAGE OBTAINED FROM TAPE.     14010300
         CLCR POINTS AT THE WORD IN THE CARD FILE BUFFER CONTAINING THE 14010400
         SEQUENCE NUMBER OF THE LAST CARD IMAGE.                        14010500
;                                                                       14010600
COMMENT  COMPARE COMPARES AN 8 DIGIT SEQUENCE NUMBER ON TAPE AGAINST    14011000
         A CORRESPONDING SEQUENCE NUMBER ON CARDS.                      14011100
         IF THE TAPE SEQ. < CARD SEQ.                                   14011200
         THEN COMPARE ~ 0                                               14011300
         ELSE                                                           14011400
         IF THE TAPE SEQ. > CARD SEQ.                                   14011500
         THEN COMPARE ~ 1                                               14011600
         ELSE IF THE TAPE SEQ. = CARD SEQ.                              14011700
         THEN COMPARE ~ 2.                                              14011800
;                                                                       14011900
INTEGER PROCEDURE COMPARE(TAPEV,CARDV); VALUE TAPEV,CARDV;              14012000
    INTEGER TAPEV,CARDV;                                                14012100
    IF TAPEV>CARDV THEN BEGIN COMPARE~1; CURRENTLINENO~CARDV; END       14012200
      ELSE IF TAPEV=CARDV THEN BEGIN COMPARE~2; CURRENTLINENO~CARDV; END14012300
      ELSE BEGIN COMPARE~0; CURRENTLINENO~TAPEV END;                    14012400
COMMENT WRITENEW TRANSFERS A CARD TO THE NEWTAPE BUFFER.                14015000
;                                                                       14015100
STREAM PROCEDURE WRITENEW(LIN,CC,SEQNO);  VALUE CC,SEQNO;               14015200
    BEGIN                                                               14015300
    SI ~CC; DI~LIN; DS ~9 WDS; SI ~ LOC SEQNO; DS ~ WDS;                14015400
    END;                                                                14015450
COMMENT  PRINT PREPARES A LINE FOR OUTPUT ON THE PRINTER.               14017000
;                                                                       14017050
STREAM PROCEDURE PRINT(LINE,CC1,SEQNO,SYMBOL,WORD,SYL); VALUE CC1,SEQNO,14017100
    SYMBOL,WORD,SYL;                                                    14017105
    BEGIN                                                               14017200
    DI ~ LINE; DS ~ 16 LIT " ";                                         14017300
    SI ~ CC1; DS ~ 9 WDS;                                               14017400
    DS ~ 8 LIT " ";                                                     14017500
    SI ~ LOC SEQNO;                                                     14017505
    DS ~ WDS;                                                           14017600
    DS ~ LIT " ";                                                       14017700
    SI ~ LOC SYMBOL; SI ~ SI+7; DS ~ CHR;                               14017800
    DS ~ 6 LIT "  ";                                                    14017900
    SI ~ LOC WORD; SI ~ SI+5; DS ~ 3 CHR; DS ~ LIT ":";                 14018500
    SI ~ LOC SYL; SI ~ SI+7; DS ~ CHR; DS ~ 3 LIT "   ";                14018505
    END PRINT;                                                          14018600
COMMENT  READACARD IS CALLED WHENEVER A CARD IS READ FROM TAPE OR FROM  14020000
         CARDS. READACARD PASSES BACK TWO PARAMETERS: THE FIRST PARAM-  14020100
         ETER CC1 CONTAINS THE ADDRESS OF THE FIRST WORD OF THE CURRENT 14020200
         INPUT BUFFER.  THE SECOND WORD CC73 CONTAINS THE ADDRESS OF    14020300
         TENTH WORD OF THE INPUT BUFFER OR IN THE CASE OF THE CARD IMAGE14020400
         THE WORD CONTAINING THE SEQUENCE NUMBER FOR THE CARD.          14020500
;                                                                       14020600
PROCEDURE READACARD;                                                    14020700
    BEGIN                                                               14020800
    LABEL CARDONLY,CARDLAST,TAPELAST,EXIT,EOF,COMPAR                    14020900
    ,NEXTCRD,ENDIT,EOX;                                                 14021000
    SWITCH WICHWAY ~ CARDONLY,CARDLAST,TAPELAST;                        14021100
INTEGER       TX;                                                       14021110
COMMENT  DOLLARCARD IS CALLED BY READACARD TO PROCESS A DOLLAR OPTION   14022000
         CARD. THE FOLLOWING OPTIONS ARE DEFINED FOR THE BASIC COMPILER:14022010
              OPTION         DEFINITION                                 14022020
              1.  RESET      VALUE OF ALL TOGS SET FALSE.               14022030
              2.  SEQ        SEQTOG SET TRUE.                           14022040
              3.  LIST       LISTOG SET TRUE.                           14022050
              4.  TAPE       TAPETOG SET TRUE.                          14022060
              5.  NEWTAPE    NEWTAPETOG SET TRUE.                       14022070
              6.  CODE       CODETOG SET TRUE.                          14022080
              7.  CARD       TAPETOG SET FALSE(2.E. INPUT FROM CARDS).  14022090
              8.  PRT        PRTOG SET TRUE.                            14022100
              9.  NO         NO, PRECEDING ANY ABOVE OPTION EXCEPT 1 OR 14022110
                             7 CAUSES THAT OPTION TO BE TURNED OFF.     14022120
              10. DEBUG      DEBUGTOG ~ TRUE   PRINT CODE GENERATED     14022130
              11.  CHECK     CKECKTOG SET TRUE.                         14022135
              12.  SPEC      SPECTOG SET TRUE.                          14022137
              13.  SINGLE    SINGLTOG SET TRUE.                         14022138
;                                                                       14022140
PROCEDURE DOLLARCARD;                                                   14022150
    BEGIN                                                               14022160
LABEL              SCANXT,XIT,NO,RESET,SCANUFO,SPEC,                    14022170
                   CHECK, LISTP, TAPEI, NEWTAPE, STDINCR,               14022180
                   CODE,CARD,PRT,SETIT,SCANIT,DEBUG,VOID,               14022190
                   SINGL,DEBUGA;                                        14022191
                   COMMENT THE LIST POSITION OF THE OPTIONS IN THE      14022200
                   SWITCHLIST OPSHUN CORRESPONDS TO THE THE VALUE FOUND 14022208
                   IN THAT OPTIONS ELBAT WORD;                          14022209
SWITCH             OPSHUN ~ NO,RESET,CHECK,LISTP,TAPEI,%                14022210
                   NEWTAPE,CODE,CARD,PRT,DEBUG,VOID,SPEC,SINGL;         14022211
    SWITCH DEBUGSW ~ DEBUGA;                                            14022230
    DEFINE SW = ELBAT.[42:6]+1#;                                        14022240
    BOOLEAN NOTOG;                                                      14022250
    SCANMODE ~ OPMODE;                                                  14022260
SCANXT:                                                                 14022270
    STEPIT;                                                             14022280
SCANUFO:                                                                14022290
    NOTOG ~ FALSE;                                                      14022300
SCANIT:                                                                 14022310
    IF ELCLASS = PERCENT                                                14022320
    THEN BEGIN                                                          14022330
         IF REAL(LISTOG)=3                                              14022340
         THEN BEGIN                                                     14022350
              DAYTIME;                                                  14022360
              LISTOG ~ TRUE;                                            14022370
              END;                                                      14022380
         GO XIT;                                                        14022390
         END                                                            14022400
    ELSE                                                                14022410
      IF ELCLASS = OPTION THEN                                          14022420
SETIT:GO TO OPSHUN[SW];                                                 14022430
      GO SCANXT;                                                        14022440
RESET:                                                                  14022450
    IF NOT NOTOG                                                        14022460
    THEN BEGIN     COMMENT NORESET CAUSES NO ACTION;                    14022470
         CHECKTOG ~ SPECTOG ~ FALSE;%                                   14022480
         IF REAL(LISTOG) = 2 OR REAL(LISTOG) = 3                        14022490
           THEN LISTOG ~ BOOLEAN(2)                                     14022500
           ELSE LISTOG ~ FALSE;                                         14022510
         LASTUSED ~ 1; COMMENT CARDONLY;                                14022520
         NEWTAPETOG ~ FALSE;                                            14022530
                   IF REAL(CODETOG)=2 OR REAL(CODETOG)=3                14022540
                      THEN  CODETOG ~ BOOLEAN(2)                        14022550
                      ELSE  CODETOG ~ FALSE;                            14022560
         PRTOG ~ FALSE;                                                 14022570
         DEBUGTOG~ FALSE;                                               14022580
                   DEBUGATOG ~ FALSE;                                   14022590
         SINGLTOG ~ FALSE; % RESET SINGLE SPACE OPTION                  14022591
         END;                                                           14022600
    GO SCANXT;                                                          14022610
CHECK:                                                                  14022620
     IF NOT NOTOG THEN                                                  14022630
         CHECKTOG ~ TRUE                                                14022640
         ELSE CHECKTOG ~ FALSE ;                                        14022650
      GO SCANXT ;                                                       14022660
LISTP:                                                                  14022680
    IF NOT NOTOG                                                        14022690
    THEN BEGIN                                                          14022700
         IF REAL(LISTOG) = 3 OR REAL (LISTOG) = 2                       14022710
         THEN BEGIN LISTOG ~ TRUE; DAYTIME; SEGENDORSTART(TRUE); END;   14022720
         END                                                            14022730
    ELSE IF REAL(LISTOG) =3 OR REAL (LISTOG) = 2                        14022740
                                                                        14022750
                                                                        14022760
         THEN LISTOG ~ BOOLEAN(2)                                       14022770
                                                                        14022780
                                                                        14022790
         ELSE LISTOG ~ FALSE;                                           14022800
    GO SCANXT;                                                          14022810
TAPEI:                                                                  14022820
    IF NOT NOTOG                                                        14022830
                   THEN                                                 14022840
                        BEGIN                                           14022850
              READ(TAPE[NO]) ;      TLCR~GETABSADDR(TAPE(9));           14022860
                   IF LASTUSED = 1 THEN LASTUSED ~ 2;                   14022870
                        END                                             14022880
    ELSE LASTUSED ~ 1;  COMMENT CARDONLY;                               14022890
    GO SCANXT;                                                          14022900
NEWTAPE:                                                                14022910
    IF NOT NOTOG                                                        14022920
      THEN NEWTAPETOG ~ TRUE                                            14022930
      ELSE NEWTAPETOG ~ FALSE;                                          14022940
    GO SCANXT;                                                          14022950
CODE:                                                                   14022960
    IF NOT NOTOG                                                        14022970
                      THEN BEGIN                                        14022980
                           IF REAL(CODETOG)=2 OR REAL(CODETOG)=3        14022990
                              THEN BEGIN                                14023000
                                   CODETOG~TRUE;                        14023010
                                   WRITESEG(EDOC[*],22,2,0);            14023020
                                   END                                  14023030
                              ELSE CODETOG ~ TRUE;                      14023040
                           END                                          14023050
                      ELSE IF REAL(CODETOG)=2 OR REAL(CODETOG)=3        14023060
                           THEN CODETOG~BOOLEAN(2)                      14023070
                           ELSE CODETOG ~ FALSE;                        14023080
    GO SCANXT;                                                          14023090
CARD:                                                                   14023100
    IF NOT NOTOG   COMMENT NOCARD CAUSES NO ACTION;                     14023110
    THEN  LASTUSED ~ 1; COMMENT CARDONLY;                               14023120
    GO SCANXT;                                                          14023130
PRT:                                                                    14023140
    IF NOT NOTOG                                                        14023150
      THEN PRTOG ~ TRUE                                                 14023160
      ELSE PRTOG ~ FALSE;                                               14023170
    GO SCANXT;                                                          14023180
DEBUG:                                                                  14023190
    IF NOT NOTOG                                                        14023200
      THEN BEGIN DEBUGTOG ~ TRUE; FILLDEBUGARRAYS; END                  14023210
      ELSE DEBUGTOG ~ FALSE;                                            14023220
    IF STEPI = ARITHID THEN                                             14023230
              BEGIN GO DEBUGSW[CHARRY[CNDX].SSPART-16]; GO SCANXT;      14023240
DEBUGA:            IF NOT NOTOG                                         14023250
                        THEN  DEBUGATOG ~ TRUE                          14023260
                        ELSE DEBUGATOG ~ FALSE;                         14023270
                   GO SCANXT;                                           14023280
              END  ELSE GO SCANUFO;                                     14023290
NO:                                                                     14023300
    NOTOG ~ TRUE;                                                       14023310
    IF STEPI ! OPTION                                                   14023320
      THEN GO SCANUFO   COMMENT UNIDENTIFIED SOMETHING OR OTHER;        14023330
      ELSE GO SETIT;                                                    14023340
VOID:                                                                   14023350
    IF STEPI = NUMBER THEN                                              14023360
    BEGIN                                                               14023370
         ENDVOID ~ C;%VOID UPTO BUT NOT INCLUDING THIS NUMBER           14023380
         IF CHARRY[0]=0 AND REAL(LISTOG)!3 THEN ERRSKIP(065)            14023390
           ELSE STEPIT;                                                 14023400
         IF REAL(LISTOG)=3 THEN                                         14023410
         BEGIN                                                          14023420
             DAYTIME; SEGENDORSTART(TRUE); LISTOG~ TRUE;                14023430
         END;                                                           14023440
    END;                                                                14023450
    IF ELCLASS ! PERCENT THEN ERRSKIP(066);                             14023460
    GO SCANUFO;                                                         14023470
SPEC:%                                                                  14023475
    SPECTOG ~ IF NOT NOTOG THEN TRUE ELSE FALSE;%                       14023476
    GO TO SCANXT;%                                                      14023477
SINGL:                      % SINGLE SPACE OPTION FOR LISTING           14023478
    IF NOT NOTOG THEN       % NO CARD CAUSES NO ACTION                  14023479
    SINGLTOG ~ TRUE ELSE SINGLTOG ~ FALSE;                              14023480
    GO TO SCANXT;                                                       14023481
XIT:                                                                    14023482
    END DOLLARCARD;                                                     14023490
COMMENT  MAKEUPEND MAKES UP AN "END" CARD.                              14024303
;                                                                       14024304
PROCEDURE MAKEUPEND;                                                    14024305
         BEGIN                                                          14024310
              CHARRY[0] ~ 0;                                            14024320
              CHARRY[1] ~ "E";                                          14024325
              CHARRY[2] ~ "N";                                          14024330
              CHARRY[3] ~ "D";                                          14024335
              CHARRY[4] ~ "%" & 16[1:43:5];                             14024340
              ERR(105);                                                 14024342
         END;                                                           14024345
NEXTCRD:           CARDENDTOG := FALSE;                                 14024400
    GO TO WICHWAY[LASTUSED];                                            14024500
    LASTUSED ~ 1;                                                       14024550
    CC73 ~ GETABSADDR(CARD(9));                                         14024600
    IF EXAMIN(CC1~CC73-9)! "$"                                          14024700
                   AND REAL(LISTOG)=3                                   14024705
    THEN BEGIN                                                          14024710
         DAYTIME; SEGENDORSTART(TRUE);                                  14024720
         LISTOG ~ TRUE;                                                 14024730
         END;                                                           14024750
    GO TO EXIT;                                                         14024760
CARDONLY:                                                               14027100
              READ(CARD[NO]) [EOX];                                     14027200
    CC73 ~ GETABSADDR(CARD(9));                                         14027300
                                                                        14027400
    GO EXIT;                                                            14027500
CARDLAST:                                                               14027600
              READ(CARD[NO]) [EOF];                                     14027700
CLCR ~ GETABSADDR(CARD(9));                                             14027800
    GO COMPAR;                                                          14027900
EOF:                                                                    14028000
    GO COMPAR;                                                          14028200
EOX:                                                                    14028210
    MAKEUPEND; CNDX ~ 0; GO ENDIT;                                      14028220
TAPELAST:                                                               14028300
              READ(TAPE[NO]) [EOX]; TLCR~GETABSADDR(TAPE(9));           14028350
COMMENT  COMPAR SETS CC73 TO POINT AT EITHER THE 73RD COLUMN OF THE     14028352
         CARD OR TAPE BUFFER. LASTUSED ~ 2 IF CARD IMAGE PASSED TO SCAN-14028354
         NER. LASTUSED ~ 3 IF CARD IMAGE FROM TAPE PASSED TO SCANNER.   14028356
         CASE 1.   IF TAPE SEQ < CARD SEQ THEN                          14028358
                        LASTUSED ~ 3. AND CC73 ~ TLCR.                  14028360
         CASE 2.   IF TAPE SEQ = CARD SEQ THEN                          14028362
                        A CARD IMAGE IS READ FROM TAPE AND CONTINUE AS  14028364
                        IN CASE 3.                                      14028366
         CASE 3.   FOR TAPE SEQ > CARD SEQ:                             14028368
                        LASTUSED ~ 2 AND CC73 ~ CLCR.                   14028370
;                                                                       14028372
COMPAR:                                                                 14028400
              IF TX ~ COMPARE(OCTCNVT(TLCR),OCTCNVT(CLCR)) = 0 THEN     14028405
         BEGIN     COMMENT TAPE SEQ < CARD SEQ;                         14028410
              CC73 ~ TLCR; LASTUSED ~ 3;                                14028420
         END ELSE                                                       14028430
         BEGIN                                                          14028440
              IF TX ! 1 THEN                                            14028450
         BEGIN     COMMENT TAPE SEQ = CARD SEQ;                         14028460
              READ(TAPE); READ(TAPE[NO])[EOX];TLCR~GETABSADDR(TAPE(9)); 14028470
         END;                                                           14028480
              CC73 ~ CLCR; LASTUSED ~ 2;                                14028490
         END  ;                                                         14028500
    IF ENDVOID !0 THEN IF ENDVOID>CURRENTLINENO THEN GO TO NEXTCRD      14028505
    ELSE ENDVOID ~ 0;                                                   14028510
EXIT:                                                                   14028600
    CC1 ~ CC73-9;                                                       14028610
    CARDSCAN(CC1,CC73,CHARRY);                                          14028612
    CNDX ~ 0;                                                           14028614
    IF CHARRY[1] !-"$" THEN                                             14028700
    BEGIN                                                               14028800
         CARDCNTR ~ CARDCNTR+1;                                         14028900
         IF LISTOG THEN                                                 14028910
         BEGIN                                                          14028912
         ADJUST;                                                        14028914
         PRINT(LIN,CC1,BINTOBCL(CHARRY[0]),IF LASTUSED=2 THEN "R" ELSE  14029000
           IF LASTUSED=3 THEN "T" ELSE 48,B2D(L.[38:8]),B2D(L.[46:2])); 14029100
         SINGLINE;                                                      14029200
         END;                                                           14029300
         IF NEWTAPETOG THEN                                             14029400
         BEGIN                                                          14029500
         WRITENEW(LIN,CC1,BINTOBCL(CHARRY[0]));WRITE(NEWTAPE,10,LIN[*]);14029600
         END;                                                           14029700
    END ELSE                                                            14029750
    BEGIN                                                               14029752
         IF CURRENTLINENO!0 THEN                                        14029755
         BEGIN                                                          14029760
              IF LASTLINENO}LASTLINENO~CURRENTLINENO THEN               14029765
                SEQUENCERROR;                                           14029770
         END;                                                           14029775
         DOLLARCARD;                                                    14029780
         IF LASTUSED = 3 THEN                                           14029781
              READ(TAPE)                                                14029782
         ELSE READ(CARD);                                               14029783
         GO TO NEXTCRD;                                                 14029784
    END;                                                                14029785
              IF LASTUSED = 3 THEN %IF TAPE LAST USED THEN FORGET       14029790
                   READ(TAPE)      %OLD TAPE RECORD ELSE                14029792
              ELSE READ(CARD);     %FORGET OLD CARD RECORD              14029794
    IF LASTLINENO}LASTLINENO~CURRENTLINENO THEN SEQUENCERROR;           14029800
ENDIT:                                                                  14029810
    END READACARD;                                                      14029900
COMMENT            BLDID  WILL PACK A CHARACTER (CHAR) INTO A WORD (WD) 14050000
                      IN THE CHARACTER POSITION CHRPOS.                 14050100
;                                                                       14050200
STREAM PROCEDURE   BLDID(WD,CHAR,CHRPOS);                               14050300
VALUE              CHAR, CHRPOS;                                        14050400
              BEGIN                                                     14050700
                   DI ~ WD;                                             14050800
                   DI ~ DI+CHRPOS;                                      14050900
                   SI ~ LOC CHAR;                                       14051000
                   SI ~ SI+7;                                           14051100
                   DS ~ CHR;                                            14051200
              END  OF BLDID;                                            14051300
COMMENT CARDSCAN   PICKS UP LINE NO FROM CC73, CONVERTS TO OCTAL, AND   14080000
                   STUFFS INTO ARRY[0]. THEN THE 6-CHAR SEQUENCE %"%"%" 14080100
                   IN MOVED INTO CC73 TO STOP THE SCANNER UNDER         14080200
                   (HOPEFULLY) ALL POSSIBLE CONDITIONS. CARDSCAN        14080300
                   PROCEEDS TO BUILD INTO ARRY AN ELEMENT FOR EACH      14080400
                      1)SPEC CHAR- INTERNAL CODE AS NEG INTEGER         14080500
                      2)DIGIT- INTERNAL CODE AS NON-NEG INTEGER         14080600
                      3)LETTER- INTERNAL CODE AS POS INTEGER            14080700
                      4)STRING- 3 WDS:                                  14080800
                         A)SPEC CHAR QUOTE (AS ABOVE IN 1)              14080900
                         B)CHAR1 - CHAR8                                14081000
                         C)CHAR9 - CHAR15 W/ PAD BLANK                  14081100
                           CHAR16 - CHAR CNTR IN COLL SEQ FORM          14081200
;                                                                       14081300
COMMENT            STATEMENT IS A BIG SWITCH TO THE VARIOUS ROUTINES    14090000
                      FOR PARTICULAR STATEMENT TYPES.                   14090100
                   RESULT TRUE IFF "END" OR "NEXT" STATEMENT.           14090200
                   USE THE CURRENT CODE ADDRESS                         14090300
                      TO DEFINE THE CURRENT LINE NUMBER.                14090400
;                                                                       14090500
BOOLEAN PROCEDURE  STATEMENT;                                           14090600
              BEGIN                                                     14090800
LABEL              XIT;                                                 14090802
                   STATEMENT ~ TRUE ;                                   14090805
                   EQUALMODETOG := ASGNOPMODE;                          14090900
                   SCANMODE ~ IWMODE;                                   14091000
                   CASE ELBAT.SSPART OF                                 14091100
              BEGIN                                                     14091200
                   IFST;                                                14091300
                   ONST;                                                14091400
                   DEFST;                                               14091500
                   DIMST;                                               14091600
              BEGIN ENDST; ENDTOG ~ TRUE; GO XIT; END;                  14091700
                   FORST;                                               14091800
                   BEGIN  STEPIT;  LETST;  END;                         14091900
                   MATST;                                               14092000
                   REMST;                                               14092100
                   DATAST;                                              14092200
                   GOTOST;                                              14092300
                   GO XIT;    % NEXTST - RETURN CONTROL                 14092400
                   READST;                                              14092500
                   STOPST;                                              14092600
                   FILESST;                                             14092700
                   GOSUBST;                                             14092800
                   INPUTST;                                             14092900
                   PRINTST;                                             14093000
                   WRITEST;                                             14093100
                   RETURNST;                                            14093200
                   RESTOREST;                                           14093300
              END  OF CASE STATEMENT;                                   14093400
                   STATEMENT ~ FALSE;                                   14093500
XIT:          END OF STATEMENT;                                         14093600
COMMENT            STATSEQ CALLS READACARD TO READ NEXT CARD IMAGE      14100000
                      FROM CARD (UPDATE) OR TAPE (MASTER).              14100100
                   READACARD WILL INVOKE SCANNING, SEQUENCE # CHECKING, 14100200
                      LISTING, COPYING (TO NEW TAPE), ETC.              14100300
                   STATESEQ SWITCHES ON STATEMENT STARTER TO            14100400
                      APPROPRIATE RTN, THEN LOOPS FOR ALL BUT NEXT AND  14100500
                      END ROUTINES WHEREUPON IT WILL EXIT.              14100600
;                                                                       14100700
PROCEDURE     STATSEQ(FX);                                              14100705
VALUE         FX;                                                       14100710
REAL          FX;                                                       14100715
              BEGIN                                                     14100805
BOOLEAN            FIRSTOG;   %FALSE - FIRST STAT IN SEQ, TRUE - OTHER  14100900
INTEGER            T;    %TEMP                                          14100905
LABEL              NEXTSTAT, TRYAGAIN, XIT;                             14101000
NEXTSTAT:          ERRSUPTOG ~ FALSE;                                   14101005
                   READACARD;                                           14101100
                   SCANMODE ~ SSMODE;                                   14101252
TRYAGAIN:          IF STEPI = STATSTART THEN                            14101300
              BEGIN                                                     14101400
                   DEFLABEL(IF ELBAT.[42:6] LSS 8 OR ELBAT.[42:6]       14101403
                    GTR 9 THEN FALSE ELSE BOOLEAN(2));                  14101405
                   IF ELBAT.[42:6] = NEXTV THEN                         14101410
              BEGIN%IF FX = FR THEN CALLED BY FORST ELSE BY INITIALIZ   14101420
                   IF FX ! FR THEN                                      14101430
              BEGIN                                                     14101435
                   ERRSKIP(032); GO TO NEXTSTAT                         14101440
              END;                                                      14101445
              END;                                                      14101450
                   IF STATEMENT THEN GO XIT;                            14101500
                   GO NEXTSTAT;                                         14104000
              END ELSE                                                  14104100
                   IF ELCLASS = STRINGID OR ELCLASS = ARITHID THEN      14104200
                      BEGIN SCANMODE~IWMODE; DEFLABEL(FALSE); LETST; END14104335
                   ELSE                                                 14104400
                   IF ELCLASS= NUMBER THEN                              14104500
              BEGIN%ASSUME WE HAVE A LEADING LINE NUMBER                14104600
                   CURRENTLINENO ~ C;                                   14104700
                   GO TRYAGAIN;                                         14104800
              END                                                       14104900
                   ELSE                                                 14105000
                   ERRSKIP(014);                                        14105100
                   GO TO NEXTSTAT;                                      14105200
XIT:          END  STATSEQ;                                             14105300
COMMENT            SCAN WILL ANALYZE CHARACTER IN THE CHARACTER ARRAY   14300000
                   POINTED TO BY THE CHARACTER INDEX (IE-CHARRY[CNDX])  14300100
                   AND TAKE FOLLOWING ACTION:                           14300200
                      1)SPECIAL CHARACTER                               14300300
                         """ - MOVE STRING VALUE TO GLOBAL STRINGWDS,   14300400
                            BLD ELBAT FOR STRING LIT                    14300500
                         "." - INSURE DIGIT FOLLOWING, GO BLD FRACTIONAL14300600
                            PART OF NUMBER                              14300700
                         "|" - CHECK NEXT 2 LETTERS FOR RELATIONAL,     14300800
                            SELECT ELBAT WD                             14300900
                         "<>" - CONVERT TO "!"                          14301000
                         "<=" - CONVERT TO "{"                          14301100
                         ">=" - CONVERT TO "}"                          14301200
                         "=<" - CONVERT TO "{"                          14301300
                         "=>" - CONVERT TO "}"                          14301400
                         "><" - CONVERT TO "!"                          14301500
                        "**"  - CONVERT TO EXPOP                        14301600
                         ELSE SELECT ELBAT WD                           14301700
                      2) DIGIT                                          14301800
                         BLD INTEGER, AND IF NOT STAT START MODE        14301900
                            BLD FRACTIONAL PART AND EXPONENT PART       14302000
                      3) LETTER                                         14302100
                         FOLLOWED BY:                                   14302200
                            A) DIGIT                                    14302300
                               BLD ELBAT FOR ARITHID                    14302400
                            B) "$"                                      14302500
                               BLD ELBAT FOR STRINGID                   14302600
                            C) OTHER SPEC CHAR                          14302700
                               BLD ELBAT FOR ARITHID                    14302800
                            D) LETTER                                   14302900
                               SCAN THROUGH SUCCESSIVE LETTERS AND TRY  14303000
                               TO MATCH WITH RESERVED WORDS:            14303100
                               1) STATEMENT STARTER                     14303200
                               2) IMBEDDED WORD                         14303300
                               AND BLD ELBAT FOR RES WD                 14303400
                               ELSE IF NO MATCH, BACKUP AND             14303500
                                  BLD ELBAT FOR ARITHID                 14303600
;                                                                       14303700
REAL ARRAY         TEN[0:69];    %POWERS-OF-TEN FOR NUMBER CONVERSION   14303705
BOOLEAN            TENTOG;    %TRUE IFF POWERS-OF-TEN TABLE FILLED      14303710
INTEGER PROCEDURE  SCAN;                                                14303800
              BEGIN                                                     14303900
INTEGER            NEXT;    %TEMP FOR LOOK-AHEAD IN CHARACTER ARRAY     14304200
INTEGER     FSAVE, EXPON, CTNDX;                                        14304500
INTEGER    TCNDX, CTR1,  RWNDX;                                         14304600
INTEGER            CTR;     %UTILITY COUNTER                            14304700
REAL               T; % TEMP USED BY MOST EVERYONE FOR MOST EVERYTHING  14304800
LABEL              COMPRESSCHAR;                                        14304810
LABEL              FRACTIONPART;                                        14304820
LABEL              PERIOD, LESSTHAN, ASTERISK, EQUAL, QUOTE,            14304900
                      GREATERTHAN, TIMES, XIT;                          14305000
LABEL       LETTERONLY, LETTERDIGIT, ENDNUMBER;                         14305100
SWITCH             SPECIALSW ~ PERIOD,LESSTHAN,ASTERISK,EQUAL,QUOTE,    14305200
                      GREATERTHAN,TIMES;                                14305300
DEFINE             SPECPART=[8:4]#;     %IF NOT 0, SW FOR SPEC HANDLING 14305400
REAL               T1;  % TEMP USED IN NUMBER BUILD                     14305500
REAL               LOW, HIGH,      %INDEX BRACKETS FOR CURRENT GROUP    14305600
                   MAX,            %NUMBER OF GROUPS                    14305700
                   ALPHAWD,    %ACCUM FOR BUILDING RESERVED WORD        14305710
                   CTX;            %UTILITY COUNTER                     14305800
                   IF CARDENDTOG THEN                                   14305850
                     BEGIN ELBAT := SPECIAL[25];  GO XIT  END;          14305860
                   IF T~CHARRY[CNDX ~ CNDX+1] < 0 THEN                  14305900
              BEGIN      %WE HAVE A SPECIAL CHARACTER                   14306000
                                                                        14306005
COMPRESSCHAR:      T ~ T+2;   %WILL DECREASE INTERNAL CODE BY 2         14306100
                   ELBAT ~ SPECIAL[T.[45:3]&T[42:41:3]];                14306200
                   %NOTE COMPRESSION TECHNIQUE THAT DELETED THIRD BIT   14306300
                   %FROM LEFT AFTER DECREASING CODE BY 2                14306400
                   IF T ~ ELBAT.SPECPART = 0 THEN GO XIT;               14306500
                   GO TO SPECIALSW[T];                                  14306600
PERIOD:            C ~ 0;    GO FRACTIONPART;                           14306700
LESSTHAN:          IF T~CHARRY[T1~CNDX+1] = -">" THEN                   14306800
              BEGIN                                                     14306900
                   CNDX ~ T1;                                           14307000
                   T ~ -"!";                                            14307100
                   GO COMPRESSCHAR;                                     14307200
              END  ;                                                    14307300
                   IF T ! -"=" THEN GO XIT;                             14307400
                   CNDX ~ T1;                                           14307500
                   T ~ -"{";                                            14307600
                   GO TO COMPRESSCHAR;                                  14307700
ASTERISK:          IF CHARRY[T1~CNDX+1] ! -"*" THEN GO XIT;             14307800
                   CNDX ~ T1;                                           14307900
                   T ~ -" ";    %WE USE BLANK TO FAKE AN EXPON OPERATOR 14308000
                   GO COMPRESSCHAR;                                     14308100
EQUAL:             IF T~CHARRY[T1~CNDX+1] = -"<" THEN                   14308200
              BEGIN                                                     14308300
                   CNDX ~ T1;                                           14308400
                   T ~ -"{";                                            14308500
                   GO TO COMPRESSCHAR;                                  14308600
              END  ;                                                    14308700
                   IF T = -">" THEN                                     14308800
              BEGIN                                                     14308805
                   CNDX ~ T1;                                           14308900
                   T ~ -"}";                                            14309000
                   GO TO COMPRESSCHAR;                                  14309100
              END  ;                                                    14309105
                   IF EQUALMODETOG THEN GO XIT;                         14309110
                   T ~ - "~";                                           14309115
                   GO COMPRESSCHAR;                                     14309120
QUOTE:             MOVEWDS(2,CHARRY[CNDX+1],STRINGWDS);                 14309200
                   CNDX ~ CNDX+2;                                       14309300
                   GO XIT;                                              14309400
GREATERTHAN:       IF T ~ CHARRY[T1~CNDX+1] = -"<" THEN                 14309500
              BEGIN                                                     14309600
                   CNDX ~ T1;                                           14309700
                   T ~ -"!";                                            14309800
                   GO COMPRESSCHAR;                                     14309900
              END  ;                                                    14310000
                   IF T ! -"=" THEN GO XIT;                             14310100
                   CNDX ~ T1;                                           14310200
                   T ~ -"}";                                            14310300
                   GO COMPRESSCHAR;                                     14310400
TIMES:                                                                  14310500
                   IF T~CHARRY[T1~CNDX+2]&CHARRY[CNDX+1][36:42:6] =     14310600
                      "EQ" THEN                                         14310700
                   T~ -"="                                              14310800
                   ELSE                                                 14310900
                   IF T = "NE" THEN                                     14311000
                   T ~ -"!"                                             14311100
                   ELSE                                                 14311200
                   IF T = "GT" THEN                                     14311300
                   T~ -">"                                              14311400
                   ELSE                                                 14311500
                   IF T = "LT" THEN                                     14311600
                   T ~ -"<"                                             14311700
                   ELSE                                                 14311800
                   IF T = "GE" THEN                                     14311900
                   T ~ -"}"                                             14312000
                   ELSE                                                 14312100
                   IF T = "LE" THEN                                     14312200
                   T ~ -"{"                                             14312300
                   ELSE                                                 14312400
              BEGIN                                                     14312500
                   T ~ -"=";                                            14312600
                   ERRSUP(038);                                         14312700
                   GO COMPRESSCHAR;                                     14312800
              END  ;                                                    14312900
                   CNDX ~ T1;                                           14313000
                   GO COMPRESSCHAR;                                     14313100
              END  OF SPECIAL CHARACTER HANDLING SECTION;               14313200
                   IF T < 10 THEN                                       14313300
              BEGIN%WE HAVE A DIGIT, THEREFORE BEGIN ASSEMBLING NUMBER  14313400
                   %FIRST BUILD INTEGER PART                            14313500
                   C ~ T;                                               14313600
                   FSAVE ~ 0;                                           14313700
                   WHILE T ~ CHARRY[CNDX~CNDX+1] < 10 AND T } 0 DO      14313800
                      C ~ 10|C + T;                                     14313900
                   IF SCANMODE = IWMODE THEN                            14314000
              BEGIN                                                     14314100
                   IF T = -"." THEN                                     14314500
              BEGIN                      %BUILD FRACTIONAL PART         14314600
                   C ~ 1.0|C;                                           14314700
FRACTIONPART:      TCNDX ~ CNDX;                                        14314800
                   WHILE T ~ CHARRY[CNDX~CNDX+1] < 10 AND T } 0 DO      14314900
                   C ~ 10|C + T;                                        14315000
                   FSAVE ~ CNDX-TCNDX-1;                                14315100
              END  ;                                                    14315200
                   IF T = -"@" OR T = "E" THEN                          14315300
              BEGIN     %BUILD EXPONENT PART                            14315400
                   EXPON ~ 0;                                           14315500
                   C ~ 1.0 |C;   % NORMALIZE                            14315505
                   IF T~ CHARRY[CNDX~CNDX+1] = -"-" THEN                14315600
              BEGIN                                                     14315700
                   WHILE T ~ CHARRY[CNDX~CNDX+1] < 10 AND T } 0 DO      14315800
                      EXPON ~ 10|EXPON+T;                               14315900
                   EXPON ~ -EXPON;                                      14316000
              END                                                       14316100
                   ELSE                                                 14316200
              BEGIN                                                     14316300
                   IF T ! -"+" THEN                                     14316400
              BEGIN                                                     14316500
                   IF T < 0 OR  T > 10 THEN ERRSUP(039);                14316600
                   CNDX ~ CNDX-1;                                       14316700
              END  ;                                                    14316800
                   WHILE T ~ CHARRY[CNDX~CNDX+1] < 10 AND T } 0 DO      14316900
                           EXPON ~ 10|EXPON+T;                          14317000
              END  ;                                                    14317100
                   IF T1~EXPON-FSAVE < -46 OR T1 > 69 THEN ERR(039)     14317200
              ELSE                                                      14317300
              BEGIN                                                     14317305
                   T ~ TEN[ABS(T1)];                                    14317370
                   IF ABS(0&C[42:3:6]&C[1:2:1] +                        14317400
                      0&T[42:3:6]&T1[1:1:1]+12) > 63 THEN               14317500
                         %THAT WAS A WILD ONE.                          14317600
                   ERRSUP(039)                                          14317700
                   ELSE                                                 14317800
                   C ~ IF T1<0 THEN C/T ELSE C|T;                       14317900
              END  ;                                                    14317905
              END  OF EXPONENT PART                                     14318000
                   ELSE                                                 14318100
                   IF FSAVE !0 THEN C ~ C/TEN[FSAVE];                   14318200
              END  OF FRACTIONAL AND EXPONENT PARTS;                    14318205
ENDNUMBER:                                                              14318210
                   CNDX ~ CNDX-1;                                       14318215
                   ELBAT ~ 0 & NUMBER[1:43:5];                          14318220
                   IF DEBUGATOG THEN     BEGIN                    %DEBUG14318294
                   LIN[0]~"..NUMB."; LIN[1]~C; SINGLINE; BLANKLINE;     14318295
                                        END;                      %DEBUG14318296
                   GO XIT;                                              14318300
              END  OF BUILDING NUMBER SECTION                           14318400
                   ELSE                                                 14318500
                   %MUST HAVE BEEN A LETTER                             14318600
                   %THEREFORE BEGIN COMPLEX RECOGNITION PROCEDURE FOR   14318700
                   %   RESERVED WORDS                                   14318800
                   IF NEXT ~ CHARRY[CNDX+1] < 0 THEN                    14318900
              BEGIN                                                     14318905
                   IF NEXT = -"$" THEN                                  14319000
              BEGIN     %GENERATE ELBAT WD FOR STRINGID                 14319100
                   ELBAT ~ DICT[T,11]&STRINGID[1:43:5]&T[38:42:6]&      14319200
                        11[44:44:4];                                    14319300
                   CNDX ~ CNDX+1;                                       14319400
                   GO XIT;                                              14319500
              END  ELSE                                                 14319600
              BEGIN     %GENERATE ELBAT WD FOR ARITHID                  14319700
LETTERONLY:        NEXT ~ 10;                                           14319800
LETTERDIGIT:       ELBAT ~ DICT[T,NEXT]&ARITHID[1:43:5]&T[38:42:6]&     14319900
                        NEXT[44:44:4];                                  14320000
                   GO XIT;                                              14320005
              END  ;                                                    14320100
              END  ;                                                    14320105
                   IF NEXT < 10 THEN                                    14320200
              BEGIN     %WE HAVE LETTER-DIGIT, THEREFORE ARITHID        14320300
                   CNDX ~ CNDX+1;                                       14320400
                   GO LETTERDIGIT;                                      14320500
              END  ;                                                    14320600
                   % NOW FOR THAT COMPLEX RECOGNIZER OF RESERVED WORDS  14320700
                   TCNDX ~ CNDX;                                        14320800
                   IF SCANMODE = SSMODE THEN        %STATEMENT STARTER  14320900
              BEGIN                                                     14321000
                   LOW ~ SSFIRST; HIGH ~ CTARRY[CTNDX~SS1];             14321100
                   MAX ~ SSGROUPS;                                      14321200
              END  ELSE                                                 14321300
              BEGIN                                                     14321302
                   IF SCANMODE = IWMODE THEN     % IMBEDDED WORD        14321305
              BEGIN                                                     14321400
                   LOW ~ IWFIRST; HIGH ~ CTARRY[CTNDX~IW1];             14321500
                   MAX ~ IWGROUPS;                                      14321600
              END  ELSE                                                 14321700
              BEGIN                                 %OPTION WORD        14321705
                   LOW ~ OPFIRST;                                       14321710
                   HIGH ~ CTARRY[CTNDX~OP1];                            14321715
                   MAX ~ OPGROUPS;                                      14321720
              END  ;                                                    14321725
              END  ;                                                    14321730
                   CTR ~ 2;                                             14321800
                   CNDX ~ CNDX+1;                                       14321802
                   BLDID(ALPHAWD,T,1);                                  14321805
                   DO                                                   14321905
              BEGIN                                                     14322000
                   BLDID(ALPHAWD,NEXT,CTR);                             14322100
                   FOR RWNDX ~ LOW STEP 2 UNTIL HIGH DO                 14322200
                   IF EQUIV(ALPHAWD,RWARRY[RWNDX]) THEN                 14322300
              BEGIN      %WE HAVE A RESERVED WORD, GET ELBAT WD         14322400
                   IF(ELBAT~RWARRY[RWNDX~RWNDX+1]).FUNCADDRPART=0 AND   14322500
                      ELBAT.CLASS = STDFUNCID THEN                      14322600
              BEGIN                                                     14322605
                   IF ELBAT.SIMPADDRPART <1024  THEN                    14322608
              BEGIN                                                     14322609
                   ELBAT ~ RWARRY[RWNDX] ~ ELBAT&ALLOCPRT[6:37:11];     14322610
                   PRTINFO(" "&RWARRY[RWNDX-1][24:6:18]);               14322615
              END;                                                      14322616
              END                                                       14322700
                   ELSE                                                 14322701
                   IF ELBAT.CLASS = DEFFUNCID THEN                      14322705
              BEGIN                                                     14322710
                   IF NEXT ~ CHARRY[CNDX~CNDX+1] <10 THEN ERR(22)       14322715
                   ELSE IF CHARRY[CNDX+1] } 0 THEN                      14322716
              BEGIN                                                     14322717
                   ERR(040); CNDX~CNDX+1;                               14322718
              END                                                       14322719
                   ELSE  ELBAT ~ DICT[NEXT,CFUNC] ~ DICT[NEXT,CFUNC]&   14322720
                        ELBAT[1:1:5]&NEXT[38:42:6]&CFUNC[44:44:4];      14322725
              END  ;                                                    14322730
                   GO XIT;                                              14322800
              END  OF GROUP OF N CHAR WDS;                              14322900
                   LOW ~ HIGH+2;                                        14322905
                   HIGH ~ CTARRY[CTNDX~CTNDX+1];                        14322910
              END  UNTIL                                                14323000
                      NEXT ~ CHARRY[CNDX~CNDX+1] < 10 OR                14323005
                      CTR ~ CTR+1 > MAX+1;                              14323010
                   %NO MATCH, THEREFORE ASSUME LETTER IDENT             14323100
                   CNDX ~ TCNDX;                                        14323200
                   GO LETTERONLY;                                       14323300
                   % END OF THAT COMPLEX RECOGNIZER                     14323400
XIT:               IF(SCAN := ELBAT.CLASS) = PERCENT THEN               14323500
                     CARDENDTOG := TRUE;                                14323520
                   IF DEBUGATOG THEN     BEGIN                    %DEBUG14323585
                   LIN[0]~".SCAN.."; LIN[1]~ELBAT; LIN[2]~"......";     14323590
                   SINGLINE;                                            14323591
                   BLANKLINE;                                     %DEBUG14323595
                                        END;                      %DEBUG14323596
              END  OF SCAN;                                             14323600
COMMENT            GENERATE CODE TO BUILD A DATA DESCRIPTOR;            14500000
PROCEDURE          BLDDESCCODE(PRTLOC,NUMB);                            14500100
VALUE              PRTLOC, NUMB;                                        14500200
INTEGER            PRTLOC, NUMB;                                        14500300
              BEGIN                                                     14500400
                   EMITL(PRTADDR+1);                                    14500500
EMITN(PRTDESC);                                                         14500520
                   EMITL(0);   EMITWOP(CTF);                            14500525
                   EMITL(NUMB);                                         14500600
                   EMITCOP(DIA,50);   % DIA  CHR 6, BIT 2               14500700
                   EMITCOP(DIB,10);   % DIB  CHR 1, BIT 2               14500800
                   EMITCOP(TRB,10);   % B.[8:10] ~ A.[38:10]            14500900
                   EMITL(PRTLOC);                                       14501000
                   EMITWOP(STD);                                        14501100
                   PRTADDR ~ PRTADDR+NUMB;                              14501200
              END  OF BLDDESCCODE;                                      14501300
COMMENT            GETARRAYSPACE                                        14600000
                      WILL PRODUCE CODE TO GET ARRAY SPACE              14600100
;                                                                       14600200
PROCEDURE          GETARRAYSPACE(PRTADDR,FIRSTDIM,SECONDDIM,NODIM,TYPE);14600300
VALUE              PRTADDR, FIRSTDIM, SECONDDIM, NODIM,TYPE;            14600400
INTEGER            PRTADDR, FIRSTDIM, SECONDDIM, NODIM,TYPE;            14600500
              BEGIN                                                     14600600
                   EMITWOP(MKS);     EMITN(PRTADDR);                    14600700
                   EMITL( IF FIRSTDIM ! 0 THEN FIRSTDIM ELSE 11);       14600900
                   IF NODIM = 2 THEN  EMITL(IF SECONDDIM ! 0 THEN       14601000
                         SECONDDIM  ELSE  11);                          14601100
                   IF NODIM=0 THEN EMITL(11);%                          14601150
                   EMITL(IF NODIM=0 THEN 2 ELSE NODIM);%                14601200
                   EMITL(1);  EMITL(TYPE);  EMITV(5);                   14601300
              END  OF GETARRAYSPACE;                                    14601400
COMMENT            GENERATE CODE TO SET UP FILE;                        14618300
PROCEDURE          FILECODE(LBUF,IO,DF);                                14618400
VALUE              LBUF, IO, DF;                                        14618500
INTEGER            LBUF, IO, DF;                                        14618600
              BEGIN                                                     14618700
                   EMITWOP(MKS);                                        14618800
                   EMITL(DF.[18:15]);       % # ROWS                    14618900
                   EMITL(DF.[33:15]);       % ROW SIZE                  14619000
                   EMITL(IF DF=0 THEN 3 ELSE 2);  % TYPE CLOSE          14619100
                   EMITL(RR2+1);    %FILE#                              14619200
                   EMITL(RR2);  EMITN(FILEBASE);   %PTR TO FILE DESC    14619300
                   EMITL(2);    %# BUFFERS                              14619400
                   EMITL(1);                                            14619500
                   EMITL(10);    %WD LENGTH OF RECORD                   14619600
                   EMITL(LBUF);     %WD LENGTH OF BUFFER                14619700
                   EMITL(7 | REAL(DF NEQ 0));    % SAVE FACTOR          14619800
                   EMITL(IO);     %IN OR OUT                            14619900
                   EMITL(8);    %FILE DECLARATION CODE                  14619905
                   EMITV(5);     %CALL BLK INTRINSIC                    14619910
              END  OF FILECODE;                                         14619915
COMMENT            BLDFPB WILL BUILD AN FPB ENTRY;                      14620000
DEFINE             PPB = SIMPSTRINGARRY[RR2.[35:10]],RR2.[45:3] # ;     14620010
PROCEDURE          BLDFPB(FILENO,TYPE,INTNAME,CHAR) ;                   14620100
VALUE              FILENO, TYPE, INTNAME;                               14620200
REAL               INTNAME;                                             14620300
INTEGER            TYPE, FILENO, CHAR ;                                 14620400
              BEGIN                                                     14620500
                   MOVECHR(2,FILENO,6,PPB) ;  RR2 ~ RR2+2 ;             14620600
                   MOVECHR(1,TYPE,7,PPB) ;  RR2 ~ RR2+1 ;               14620700
                   MOVECHR(7,SPECIAL[30],0,PPB) ;  RR2 ~ RR2+7 ;        14620800
                   MOVECHR(CHAR,INTNAME,1,PPB) ;  RR2 ~ RR2+CHAR ;      14620900
                   MOVECHR(7-CHAR,NULLSTRING,0,PPB); RR2 ~ RR2+7-CHAR;  14621000
                   MOVECHR(1,CHAR,7,PPB) ;  RR2 ~ RR2+1 ;               14621050
                   MOVECHR(CHAR,INTNAME,1,PPB) ;  RR2 ~ RR2+CHAR ;      14621100
              END  OF BLDFPB ;                                          14621101
COMMENT            INITIALIZATION                                       14700000
                      OF COMPILER                                       14700100
;                                                                       14700200
                   TIME1 ~ TIME(1);                                     14700207
                   FILL BLANKARRY[*] WITH                               14700210
                      "        ","        ","        ","        ",      14700215
                      "        ","        ","        ","        ",      14700220
                      "        ","        ","        ","        ",      14700225
                      "        ","        ","        ";                 14700230
                   FILL SPECIAL[*] WITH                                 14700300
                      OCT2500000000000000,    %CROSSHATCH               14700400
                      OCT13,                  %COMMERCIAL AT            14700500
                      OCT14,                  %UNASSIGNED (QUES MARK)   14700600
                   OCT1700000000000000,  COMMENT COLON;                 14700700
                      OCT3306706341250225,    % >                       14700800
                      OCT3300716242250125,    % }                       14700900
                      OCT3500000000000101,    % +  ADD OPERATOR         14701000
                      OCT21,                  % A, UNASSIGNED           14701100
                      OCT3201000000000000,    % .  UNASSIGNED,BEG FRAC  14701200
                      OCT2300000000000000,    % [                       14701300
                      OCT34,                  % &  UNASSIGNED           14701400
                      OCT1500000000000000,    % (                       14701500
                      OCT3302627101254225,    % <                       14701600
                      OCT3400000000000000,    % ~                       14701700
                      OCT0007000000000040,    % |  UNASSIGNED, BEG RELNL14701800
                      OCT41,                  % J, UNASSIGNED           14701900
                      OCT52,                  % $  UNASSIGNED           14702000
                      OCT3603000000000401,    % * MULOP, CHECK EXPONOP  14702100
                      OCT3500000000000301,    % - ADDOP MINUS           14702200
                      OCT1400000000000000,    % )                       14702300
                      OCT2000000000000000,    % .,                      14702400
                      OCT3300637002254125,    % {                       14702500
                      OCT3700000000000000,    %EXPONENT OPERATOR        14702600
                      OCT3600000000001001,    % / DIV OPERATOR          14702700
                      OCT1300000000000000,    % ,                       14702800
                      OCT2100000000000000,    % %                       14702900
                      OCT3300606144250425,    % !                       14703000
                      OCT3304616004254425,    % =                       14703100
                      OCT2400000000000000,    % ]                       14703200
                      OCT0505000000000077,    % " UNASS2GNED, BEGIN STR 14703300
                      OCT0,                   % 0  UNASSIGNED           14703400
                      OCT1;                   % 1  UNASSIGNED           14703500
                   FILL RWARRY[*] WITH           %NDX TO LAST WD OF ORP:14703600
                      "0IF00000",      % STATEMENT STARTERS ...         14703700
                      OCT0300000000000000,                              14703800
                      "0ON00000",            %2                         14703900
                      OCT0300000000000001,                              14704000
                      "0DEF0000",            %                          14704100
                      OCT0300000000000002,                              14704200
                      "0DIM0000",            %                          14704300
                      OCT0300000000000003,                              14704400
                      "0END0000",            %                          14704500
                      OCT0300000000000004,                              14704600
                      "0FOR0000",            %                          14704700
                      OCT0300000000000005,                              14704800
                      "0LET0000",            %                          14704900
                      OCT0300000000000006,                              14705000
                      "0MAT0000",            %                          14705100
                      OCT0300000000000007,                              14705200
                      "0REM0000",            %16                        14705300
                      OCT0300000000000010,                              14705400
                      "0DATA000",            %                          14705500
                      OCT0300000000000011,                              14705600
                      "0GOTO000",            %                          14705700
                      OCT0300000000000012,                              14705800
                      "0NEXT000",            %                          14705900
                      OCT0300000000000013,                              14706000
                      "0READ000",            %                          14706100
                      OCT0300000000000014,                              14706200
                      "0STOP000",            %26                        14706300
                      OCT0300000000000015,                              14706400
                      "0FILES00",            %                          14706500
                      OCT0300000000000016,                              14706600
                      "0GOSUB00",            %                          14706700
                      OCT0300000000000017,                              14706800
                      "0INPUT00",            %                          14706900
                      OCT0300000000000020,                              14707000
                      "0PRINT00",            %                          14707100
                      OCT0300000000000021,                              14707200
                      "0WRITE  ",            %36                        14707300
                      OCT0300000000000022,                              14707400
                      "0RETURN0",            %38                        14707500
                      OCT0300000000000023,                              14707600
                      "0RESTORE",            %40                        14707700
                      OCT0300000000000024,                              14707800
                      "0FN00000",            %                          14707900
                      OCT0600000000000000,    %DEFFUNCID                14708000
                      "0TO00000",            %44                        14708100
                      OCT1100000000000000,    %TOV                      14708200
                      "0ABS0000",            %                          14708300
                      OCT0700010004100057,   %STDFUNCID INLINE#1 1PARM  14708400
                      "0ATN0000",            %                          14708500
                      OCT0700000070100061,   %STDFUNCID INTRIN          14708600
                      "0CON0000",            %                          14708700
                      OCT0700010004000063, %PSUEDO INTRINSIC NO. 1025   14708800
                      "0COS0000",            %                          14708900
                      OCT0700000064100065,   %STDFUNCID INTRIN   1PARM  14709000
                      "0DIV0000",            %                          14709005
                      OCT3600000000003001,                              14709010
                      "0EXP0000",            %                          14709100
                      OCT0700000100100071,   %STDFUNCID INTRIN   1PARM  14709200
                      "0IDN0000",            %                          14709300
                      OCT0700010010000073, %PSUEDO INTRINSIC NO. 1026   14709400
                      "0INT0000",            %                          14709500
                      OCT0700010014100075,   %STDFUNCID INLINE#3  1PARM 14709600
                      "0INV0000",            %                          14709700
                      OCT0700000610200077,   %STDFUNCID INTRIN   1PARM  14709800
                      "0LOG0000",            %                          14709900
                      OCT0700000074100101,   %STDFUNCID INTRIN   1PARM  14710000
                      "0MOD0000",            %                          14710005
                      OCT3600000000007001,                              14710010
                      "0RND0000",            %                          14710100
                      OCT0700000625100105,   %STDFUNCID INTRIN#145 1PARM14710200
                      "0SIN0000",            %                          14710300
                      OCT0700000060100107,   %STDFUNCID INTRIN   1PARM  14710400
                      "0SQR0000",            %                          14710500
                      OCT0700000055100111,   %STDFUNCID INTRIN#013 1PARM14710600
                      "0TAB0000",            %                          14710700
                      OCT1600000000100000,   %TABV                      14710800
                      "0TAN0000",            %                          14710900
                    OCT0700000444100115, %STD FN. INTRINSIC             14711000
                      "0TRN0000",                                       14711005
                   OCT0700000614200117,  %STD FUN ID INTRIN 2 PARM      14711010
                      "0ZER0000",            %80                        14711100
                      OCT0700010000000121, %PSUEDO INTRINSIC NO. 1024   14711200
                      "0SGN0000",            %                          14711205
                      OCT0700010010100123,   %STDFUNCID INLINE#2  1PARM 14711210
                      "0FILE000",            %                          14711300
                   OCT2600000000000000,    %FILEV                       14711400
                      "0GOTO000",            %                          14711500
                      OCT1200000000000000,    %GOTOV                    14711600
                      "0READ000",            %                          14711700
                      OCT2700000000000000,    %READV                    14711800
                      "0STEP000",            %                          14711900
                      OCT1000000000000000,    %STEPV                    14712000
                      "0THEN000",            %92                        14712100
                      OCT2200000000000000,    %THENV                    14712200
                      "0INPUT00",            %                          14712300
                      OCT3000000000000000,    %INPUTV                   14712400
                      "0PRINT00",            %96                        14712500
                      OCT3100000000000000,                              14712600
                      "0RECORDS",            %                          14712700
                      OCT1700000000000000,                              14712800
                                           %THE FOLLOWING ENTRIES REPRE-14712801
                                           %SENT INTRINSICS REFERENCED  14712802
                                           %IMPLICITLY.                 14712803
                                           %NDX INTO RWARRY:            14712804
                      OCT0700300110000000,   %100 ALGOLWRITE     #022   14712805
                      OCT0700000220000000,   %101 PRINTI         #044   14712806
                      OCT0700320114000000,   %102 ALGOLREAD      #023   14712815
                      OCT0700000234000000,   %103 READI      #047       14712820
                      OCT0700340120000000,   %104 ALGOLSELECT    #024   14712825
                      OCT0700000230000000,   %105 INPUTI         #046   14712830
                      OCT0700120010000000,   %106 BLOCKCONTROL   #002   14712835
                   OCT0700000604000000,  % 107 MADDI #143               14712840
                      "0MMPY00",                                        14712845
                      OCT0700000620000000,   %109 MMPYI          #144   14712850
                      "0BCLOSEI",                                       14712855
                      OCT0700000634000000,   %111 BCLOSEI        #147   14712860
                      "0XTOTHEI",            %                          14712865
                      OCT0700000030000000,   %113 XTOTHEI        #006   14712870
                      "0NO00000",            % 114                      14712871
                      OCT3200000000000000,                              14712872
                      "0PRT0000",                                       14712873
                   OCT3200000000000010,                                 14712876
                      "0CARD000",            %                          14712877
                      OCT3200000000000007,                              14712878
                      "0CODE000",            %                          14712879
                      OCT3200000000000006,                              14712880
                      "0LIST000",            %                          14712881
                      OCT3200000000000003,                              14712882
                      "0SPEC000", %     SUPPRESS WARNING MESSAGES       14712883
                      OCT3200000000000013,%                             14712884
                      "0TAPE000", %     SYMBOLIC INPUT FROM TAPE        14712885
                      OCT3200000000000004,%                             14712886
                      "0VOID000", % 128                                 14712887
                      OCT3200000000000012,%                             14712888
                      "0CHECK00", %     CHECK SEQUENCE #S               14712889
                      OCT3200000000000002,                              14712890
                      "0DEBUG00", %     PRINT GENERATED CODE            14712891
                      OCT3200000000000011,%                             14712892
                      "0RESET00", % 134 SET ALL OPTIONS OFF             14712893
                      OCT3200000000000001,                              14712894
                      "0SINGLE0", % 136 SINGLE SPACE LISTING            14712895
                      OCT3200000000000014, %                            14712896
                      "0NEWTAPE", % 138 OUTPUT UPDATED SYMBOLIC TAPE    14712897
                      OCT3200000000000005; %                            14712898
                   FILL CTARRY[*] WITH %                                14712990
                   COMMENT THE FOLLOWING ARE VARIOUS INDEXES INTO THE   14712991
                   RWARRY USED BY THE SCANNER;%                         14712992
                      2,16,26,36,38,40,     %NDX TO LAST WD OF SS GROUP 14713000
                      44,82,92,96,96,98,   %NDX TO LAST WD OF IW GROUP  14713100
                        114,% LAST OF 2 LETTER OPTION WORDS - NO        14713104
                        116,% LAST OF 3 LETTER OPTION WORDS - PRT       14713105
                        128,% LAST OF 4 LETTER OPTION WORDS - VOID      14713106
                        134,% LAST OF 5 LETTER OPTION WORDS - RESET     14713107
                        136,% LAST OF 6 LETTER OPTION WORDS - SINGLE    14713108
                        138;% LAST OF 7 LETTER OPTION WORDS - NEWTAPE   14713109
                   FILL NULLSTR[*] WITH "        ","       >",          14713110
                        "       6" ;                                    14713111
                   FILL TEN[*] WITH                                     14713115
                      @0, @1, @2, @3, @4, @5, @6, @7, @8, @9,           14713120
                      @10, @11, @12, @13, @14, @15, @16, @17, @18, @19, 14713125
                      @20, @21, @22, @23, @24, @25, @26, @27, @28, @29, 14713130
                      @30, @31, @32, @33, @34, @35, @36, @37, @38, @39, 14713135
                      @40, @41, @42, @43, @44, @45, @46, @47, @48, @49, 14713140
                      @50, @51, @52, @53, @54, @55, @56, @57, @58, @59, 14713145
                      @60, @61, @62, @63, @64, @65, @66, @67, @68, @69; 14713150
                                                                        14713155
                   LASTUSED ~ 0; COMMENT SO READACARD KNOWS ITS 1ST CARD14713160
;                                                                       14713165
                   CARDCNTR ~ 0;                                        14713167
                   LASTLINENO~ -1;                                      14713169
                   PRTADDR ~ 26;    %LAST ASSIGNED PRT ADDR             14713300
                   DATABITCTR ~ 16;                                     14713301
                   FILEBASE ~ ALLOCPRT;      %MUST ALWAYS HAVE A FILE   14713303
                                 % NOW BEGIN WITH SEG #1                14713310
                   L ~ 1024 ;                                           14713311
                   SD[1].SDLINK ~ 2049 ;                                14713312
                   FOR RR2 ~ 0 STEP 1 UNTIL 127  DO  LD[RR2] ~ -1;      14713315
                   DATANDX ~ -1;                                        14713320
                   GENLABCTR ~ 134217727;   % 8*9-1 MAX 27-BIT INTEGER  14713325
COMMENT            THAT TOOK CARE OF INITIALIZATION                     14713400
                   NOW FOR THE COMPILATION OF THE PROGRAM BODY          14713500
;                                                                       14713600
                   STATSEQ(FL); %STATSEQ CALLED BY INITIALIZE.          14713700
ENDIT:                                                                  14713702
COMMENT WRITE LAST CARD ON 0CARDIMG TAPE IF NEWTAPETOG SET              14713705
;                                                                       14713710
    IF NEWTAPETOG                                                       14713720
    THEN BEGIN                                                          14713725
         FILL ERRMSG[0,*] WITH                                          14713730
           "        ","        ","LAST CAR","D ON 0CR","DIMG TAP",      14713735
           "E       ","        ","        ","        ","99999999";      14713740
           WRITE(NEWTAPE,10,ERRMSG[0,*]);                               14713745
           END;                                                         14713750
COMMENT            INSURE THAT WE DID IN FACT HAVE AN "END" STATEMENT   14713800
                   THEN PROCEED WITH PROGRAM WRAPUP.                    14713900
                   WRAPUP INCLUDES:                                     14714000
                      GENERATE CODE FOR OUTER BLOCK OF PROGRAM          14714100
                         GET ARRAY SPACE                                14714200
                         SET UP STACK FOR IMPROPER RETURN AT OBJ TIME   14714300
                         FILL DATA ARRAY                                14714400
                         BUILD FILE TANK, FIB                           14714500
                      BUILD PRT                                         14714600
                         ARRAY DESCRIPTORS                              14714700
                            EACH DECLARED ARRAY                         14714800
                            $ARRAY (SIMPLE STRING VARIABLES)            14714900
                            DATA ARRAY                                  14715000
                            UNDECLARED ARRAYS (ASSUME UPPER BOUND = 10) 14715100
                         PROCEDURE DESRIPTORS                           14715200
                            LINE# REF BY INTERSEG GOTO OR GOSUB         14715300
                            INTRINSICS REQD                             14715400
                            DEFINED FUNCTIONS                           14715500
                      BUILD SEGMENT DICTIONARY (INCLIDING LINE# DESCR)  14715600
                      BUILD LINE# TABLE AND DICTIONARY                  14715700
                      ERR MSGS FOR DEF (REF) BUT NOT REF (DEF)          14715800
                      LIST PROGRAM STATISTICS                           14715900
;                                                                       14716000
COMMENT            CHECK FOR UNDEFINED  LABELS;                         14716005
                   FOR INFONDX ~ NEXTAVAILINFO STEP -2 UNTIL 2 DO       14716010
                   IF NOT BOOLEAN(INFO[INFOWD2].DEFFLAG) THEN           14716015
                   IF CHARRY[0]~INFO[INFOWD].NUMBPART > 99999999 THEN   14716020
              BEGIN                                                     14716025
                   CHARRY[0] ~ 0;                                       14716030
                   ERR(107);                                            14716035
              END  ELSE ERR(011);                                       14716040
                   WRITECODESEG;                                        14716060
                   SEGENDORSTART(FALSE);                                14716100
COMMENT            GET INTO SUBPROGRAM LEVEL;                           14716101
                   EMITL(0);                                            14716102
                   EMITL(0);   EMITWOP(SSF);                            14716103
                   EMITL(1);   EMITWOP(SSF);                            14716104
COMMENT            GENERATE CALL ON BLOCK INTRINSIC FOR EACH ARRAY.     14716200
                   CODE:                                                14716300
                      MKS                                               14716400
                      DESC   PRT ADDR FOR ARRAY  (1 EA ARY SAME SIZE)   14716500
                      LITC  #WORDS    (1 FOR EA DIMEN)                  14716600
                      LITC  # DIM                                       14716700
                      LITC  #ARRAY OF SAME S&ZE                         14716800
                      LITC  0    TYPE OF STORAGE - OVERLAYABLE          14716900
                      OPDC  5   BLOCK INTRINSIC                         14717000
;                                                                       14717100
                   FOR RR2 ~ 17 STEP 1 UNTIL 25,                        14717200
                           33 STEP 1 UNTIL 41,                          14717300
                           50 STEP 1 UNTIL 57  DO                       14717400
              BEGIN                                                     14717500
                   FOR RR3 ~ 0 STEP 1 UNTIL 11 DO                       14717505
                   IF (RR4~DICT[RR2,RR3]).SIMPADDRPART ! 0 THEN         14717510
              BEGIN                                                     14717515
                   IF RR3 < 10 THEN                                     14717520
                     RR10 ~ RR3                                         14717525
                   ELSE                                                 14717530
                   IF RR3 = 10 THEN                                     14717535
                     RR10 ~ " "                                         14717540
                   ELSE RR10 ~ "$";                                     14717545
                   DEFREF("       "&RR2[6:42:6]&RR10[12:42:6],RR4.[33:2]14717550
                   )                                                    14717551
              END  ;                                                    14717555
                   IF (RR3~DICT[RR2,10]).ARRYADDRPART ! 0 THEN          14717600
              BEGIN                                                     14717605
                   DEFREF("  ARRAY"&RR2[6:42:6],RR3.[35:2]);            14717610
                   GETARRAYSPACE(RR3.ARRYADDRPART,(RR4~DICT[RR2,        14717700
                      CXTRAINFO]).DIM1PART,RR4.DIM2PART,RR3.DIMPART,    14717800
                      OVERLAYABLE);                                     14717802
                   ARRAYWDS:=ARRAYWDS + (IF RR4.DIM1PART=0 THEN 11      14717805
                    ELSE RR4.DIM1PART) + REAL(RR3.DIMPART NEQ 1) |      14717810
                    (IF RR4.DIM2PART=0 THEN 11 ELSE RR4.DIM2PART) |     14717815
                    (2+REAL(RR4.DIM1PART=0) + REAL(RR4.DIM1PART GTR 8) +14717820
                    REAL(RR4.DIM1PART GTR 15) +                         14717825
                    REAL(RR4.DIM1PART GTR 32));                         14717830
              END  ;                                                    14717850
                   IF (RR3~DICT[RR2,11]).ARRYADDRPART ! 0 THEN          14717900
              BEGIN                                                     14717905
                   DEFREF("   ARRY"&RR2[6:42:6]&"$"[12:42:6],RR3.[35:2])14717910
                   ;                                                    14717911
                   RR4 ~ 2|(DICT[RR2,CXTRAINFO].SDIM1PART);             14717920
                   RR4 ~ IF RR4 ! 0 THEN RR4 ELSE 22;                   14717930
                   GETARRAYSPACE(RR3.ARRYADDRPART,RR4,0,1,OVERLAYABLE); 14718000
                                                                        14718100
                   ARRAYWDS ~ ARRAYWDS+RR4;                             14718105
              END  ;                                                    14718110
                   IF (RR4~DICT[RR2,12]).FUNCADDRPART ! 0 THEN          14718115
                 BEGIN   IF RR4.[35:2] = 1 THEN                         14718120
                   BEGIN CHECKTOG := SPECTOG; SPECTOG := FALSE;  END;   14718125
                   DEFREF("FN     "&RR2[18:42:6],RR4.[35:2]);           14718130
                   IF RR4.[35:2] = 1 THEN                               14718135
                   BEGIN SPECTOG:=CHECKTOG; ERRCNT:=ERRCNT + 1; END;    14718140
                 END;                                                   14718145
              END  OF DO LOOP;                                          14718200
                   IF ERRCNT > 0 THEN GO TO LISTATS;%                   14718250
COMMENT            BUILD FILE PARAMETER BLOCK                           14718300
                   GENERATE CALL ON BLOCK INTRINSIC FOR EACH FILE       14718400
;                                                                       14718405
                   IF FILEBASE ! 0 THEN                                 14718406
              BEGIN                                                     14718407
                   BLDDESCCODE(FILEBASE,FILEINFONDX+2);                 14718410
                   FOR RR2 ~ FILEINFONDX+1 STEP -1 UNTIL 2  DO          14718600
                   BEGIN CTR := RR2-1;                                  14718700
                         FILECODE(30,11,FILEINFO[CTRWD +8]);            14718720
                   END;                                                 14718750
                   RR2:=0;  FILECODE(0,9,0);  %INPUT FILE#1 (NDX=0)     14718800
                   RR2:=1;  FILECODE(0,10,0); %PRINT FILE#2 (NDX=1)     14718900
              END  ;                                                    14719000
COMMENT            GENERATE CODE TO SET UP DATA DESC FOR:               14720000
                      DATA ARRAY                                        14720200
                      COMPANION DATA ARRAY                              14720300
;                                                                       14720400
                   IF DATANDX > -1 THEN                                 14720450
              BEGIN                                                     14720455
                   RR4 ~ PRTADDR;                                       14720500
                   BLDDESCCODE(DATARRYDESC,RR2~DATANDX.[32:8]+1);       14720700
                   BLDDESCCODE(CDATADESC,RR2);                          14720800
              END  ;                                                    14720850
COMMENT            GENERATE BRANCH TO FIRST EXECUTABLE STATEMENT, SEG#1;14734900
                   EMITWOP(MKS);                                        14734950
                   BLDPROGDESC(RR2~ALLOCPRT,1,0);                       14734960
                   EMITV(RR2);%                                         14735000
                   EMITL(0); EMITWOP(COM);% INVALID EOJ                 14735002
                   SEG0[6] ~ L.SEGNO & 1[1:47:1]; %FIRST EXECUTABLE SEG 14735005
                   BLDPROGDESC(ALLOCPRT,L.SEGNO,0);                     14735010
                   WRITECODESEG;                                        14735100
                   SEGENDORSTART(BOOLEAN(2));                           14735105
COMMENT            WRITE FILL SEGMENTS;                                 14735200
                   IF DOLARRY ! 0 THEN                                  14735300
              BEGIN                                                     14735305
                   BLDPROGDESC(DOLARRY,L.SEGNO,0);                      14735350
                      WRITESEG(SIMPSTRINGARRY[*],DOLNDX+2,2,0);         14735400
              END  ;                                                    14735402
                   BLDPROGDESC(POTDESC,L.SEGNO,0);                      14735404
                   WRITESEG(TEN[*],70,2,0);                             14735405
                   IF DATANDX > -1 THEN                                 14735500
              BEGIN                                                     14735505
                   RR3 ~ DATANDX.[40:8]+1;                              14735510
                   FOR RR2 ~(RR5~DATANDX.[32:8])STEP -1 UNTIL 0  DO     14735600
              BEGIN                                                     14735605
                   BLDPROGDESC(RR4+RR2+1,L.SEGNO,0);                    14735650
                      WRITESEG(DATARRY[RR2,*],RR3,2,0);                 14735700
                   BLDPROGDESC(RR4+RR5+RR2+2,L.SEGNO,0);                14735701
                   WRITESEG(CDATA[RR2,*],8,2,0);                        14735702
                   RR3 ~ 257;                                           14735705
              END  ;                                                    14735707
                   PRT[0,DATAWORDS] ~ DATANDX+1;                        14735709
              END  ;                                                    14735710
COMMENT            BUILD SD ENTRY AND PRT ENTRY FOR EACH INTRINSIC USED;14735800
                   RR2 ~GETINTRIN(BLOCKCONTROL);                        14735805
                   RR2 ~ GETINTRIN(ALGOLSELECT);                        14735810
                   FOR RR2 ~INTRINDX STEP 1 UNTIL OPFIRST  DO           14735900
                   IF (RR3~RWARRY[RR2]).CLASS  = STDFUNCID  AND         14736000
                      RR3.FUNCADDRPART ! 0  THEN                        14736100
              BEGIN                                                     14736200
                   BLDPROGDESC(RR3.FUNCADDRPART,L.SEGNO,L.WDNO);        14736300
                   BUILDSD(0,1,RR3.SIMPADDRPART);                       14736400
              END  ;                                                    14736500
COMMENT            WRITE PRT;                                           14740295
                   ADJUSTDISC(PRTADDR+1);                               14740297
                   SEG0[2] ~ DISCSEGNO;                                 14740298
                   SEG0[3] ~ PRTADDR ~ PRTADDR+1;                       14740300
                   PRT[0,BLKCTR] ~1;                                    14740305
                   FOR RR2 ~ PRTADDR.[38:04] STEP -1 UNTIL 0  DO        14740400
                      MOVEWDS(64,PRT[RR2,*],SIMPSTRINGARRY[0 &          14740405
                          RR2[32:38:10]]);                              14740410
                   WRITESEG(SIMPSTRINGARRY[*],PRTADDR,6,0);             14740415
COMMENT            WRITE FILE PARAMETER BLOCK;                          14740495
                   ADJUSTDISC((SEG0[5]~RR3~((RR4~FILEINFONDX+2)         14740500
                                        |3)+1)+1);                      14740505
                   SEG0[4] ~ DISCSEGNO;                                 14740600
                   SEG0[7] ~ 0&(SEG0[20]~CODEWORDS+ARRAYWDS+            14740700
                      PRTADDR+L.SEGNO+1525)[18:27:15]&                  14740705
                      RR4[33:33:15];                                    14740710
                   RR2 ~ 0 ;                                            14740712
                   BLDFPB(1,INPUTTYPE,"INPUT  ",5) ;                    14740715
                   BLDFPB(2,PRINTTYPE,"PRINT  ",5) ;                    14740720
                   FOR CTR ~ 1 STEP 1 UNTIL FILEINFONDX DO              14740725
              BEGIN                                                     14740730
                   BLDFPB(CTR+2,12,RR3~FILEINFO[CTRWD],RR3.[1:5]) ;     14740740
              END  ;                                                    14740745
                   MOVECHR(8,SPECIAL[30],0,PPB);                        14740746
                   WRITESEG(SIMPSTRINGARRY[*],(RR2+9).[35:10],6,0);     14740802
COMMENT            WRITE LINE DICTIONARY;                               14740805
                   ADJUSTDISC(L.SEGNO);                                 14740850
                   SEG0[0].[18:15] ~ DISCSEGNO;                         14740900
                   WRITESEG(LD[*],L.SEGNO  ,6,0);                       14741100
                   SEG0[1] ~ L.SEGNO;                                   14741200
                   SEG0[21] ~ 512;       % STACK SIZE FOR OBJ PROGRAM   14741203
COMMENT            PROG DESC HAVE BEEN BUILT IN PRT AND LINKED TO SD    14741204
                      BY EITHER GOSUBST OR DEFLABEL PROCEDURE           14741210
                   NOW PURGE ANY UNUSED STACK HEADS IN SD               14741215
;                                                                       14741220
                   FOR RR2 ~ L.SEGNO   STEP -1 UNTIL 0  DO              14741225
                      IF SD[RR2].[6:1] ! 0 THEN SD[RR2].SDLINK ~ 0;     14741230
COMMENT            WRITE SEGMENT DICTIONARY;                            14741235
                   ADJUSTDISC(L.SEGNO);                                 14741238
                   SEG0[0].[33:15] ~ DISCSEGNO;                         14741240
                   SD[0] ~0;                                            14741245
                   WRITESEG(SD[*],L.SEGNO,2,0);%                        14741300
COMMENT            WRITE SEGMENT #0;                                    14741305
                   WRITE(CODE[0],22,SEG0[*]);                           14741400
                   IF SAVETIME } 0 AND ERRCNT = 0 THEN LOCK(CODE);      14741440
COMMENT  PROGRAM STATISTICS-SELF EXPLANATORY;                           14745000
 LISTATS:          IF LISTOG THEN%                                      14745100
    BEGIN                                                               14745200
    FORMAT STATS("ERRORS=",I3,".  COMPILE TIME=",I5," SECS.",           14745300
         "  NO. OF CARDS=",I5,"."/"PRT SIZE=",I4,                       14745400
         ".  NO. OF PGM SEGMENTS="                                      14745410
         ,I3,".  PGM SIZE=",I5," WORDS."/"DISK SIZE=",I5," SEGMENTS.",  14745500
         "  ESTIMATED STORAGE REQUIREMENTS=",I6," WORDS.");             14745600
    WRITE(LINE[DBL],STATS,                                              14745700
              ERRCNT,   COMMENT NUMBER OF DETECTED ERRORS;              14745800
              TIME(2) DIV 60,     COMMENT COMPILER PROCESSOR TIME;      14745900
              CARDCNTR, COMMENT COUNT OF $ AND BASIC CARDS;             14746000
              PRTADDR,  COMMENT PRT SIZE;                               14746100
              SEG0[1],  COMMENT NO OF PGM SEGS.+NO. OF INTRINSICS USED; 14746200
              CODEWORDS,COMMENT NO. OF WORDS OF CODE EMITTED;           14746300
              DISCSEGNO,COMMENT TOTAL NO. OF DISK SEG. RQD. BY PROGRAM; 14746400
              SEG0[20]);COMMENT ESTIMATED CORE REQUIREMENTS;            14746510
    END;                                                                14746600
END OF MAIN BLOCK;                                                      14999900
END.               % THAT S  ALL  FOLKS.                                15000000
END;END.        LAST CARD ON 0CRDING TAPE                               99999999
