%#######################################################################00001000
%                                                                       00002000
%        B-5700 NETWORK DEFINITION LANGUAGE COMPILER                    00003000
%                         MARK XII.0                                    00004000
%                       MARCH 26, 1971                                  00005000
%                                                                       00006000
% DIRECTORY BY SECTION:                                                 00007000
%      00    COMPILER PHASE.                                            00008000
%        01    ERROR MESSAGES.                                          00009000
%        10    DECLARATIONS.                                            00010000
%        15    DEFINES.                                                 00011000
%        20    FILE DECLARATIONS.                                       00012000
%        21    MORE DEFINES.                                            00013000
%        25    UTILITY PROCEDURES.                                      00014000
%        30    PROCEDURES WHICH PROCESS NDL STATEMENTS, PART I.         00015000
%        35    TIME CONVERSION PROCEDURES AND EMITTERS.                 00016000
%        40    PROCEDURES WHICH PROCESS NDL STATEMENTS, PART II.        00017000
%        45    INITIALIZATION AND DRIVER FOR COMPILER PHASE.            00018000
%      50    ASSEMBLER PHASE.                                           00019000
%        60    SYSTEM DEFINES.                                          00020000
%        70    FAULT ROUTINES.                                          00021000
%        71    CONTINUITY ROUTINES.                                     00022000
%        72    MESSAGE CONTROL ROUTINES.                                00023000
%        73    SELECTED MESSAGE CONTROL ROUTINES.                       00024000
%        74    LINE CONTROL ROUTINES.                                   00025000
%        75    DCP REQUESTS.                                            00026000
%        76    CONTROL MODE REQUESTS.                                   00027000
%        77    NORMAL MODE REQUESTS.                                    00028000
%        78    TRANSFER TEXT ROUTINES.                                  00029000
%        79    TRANSMIT/RECEIVE ROUTINES.                               00030000
%        80    UTILITY ROUTINES.                                        00031000
%        90    NON-STANDARD INTERFACE.                                  00032000
%        99    ASSEMBLER DRIVER.                                        00033000
%                                                                       00034000
%#######################################################################00035000
%                                                                       00036000
BEGIN                                                                   00037000
INTEGER  ERRORCOUNT; % DO NOT MOVE THIS OR DECLARE ANYTHING B4 IT.      00038000
%                                                                       01000000
COMMENT#################################################################01001000
                   ERROR MESSAGES                                       01002000
#######################################################################;01003000
%                                                                       01004000
 ARRAY ERRMSG[0:17,0:359];                                              01005000
DEFINE FILL0=                                                           01006000
FILL ERRMSG[0,*] WITH                                                   01007000
"IDENTIFI","ER TOO L","ONG     ","        ","        ","        ",%000, 01008000
"        ","        ","        ","        ","        ",1,%300           01009000
"STRING T","OO LONG ","        ","        ","        ","        ",%001, 01010000
"        ","        ","        ","        ","        ","        ",%301  01011000
"ILLEGAL ","CHARACTE","R       ","        ","        ","        ",%002, 01012000
"        ","        ","        ","        ","        ","        ",%302  01013000
"CONSTRUC","T NOT IM","PLEMENTE","D       ","        ","        ",%003, 01014000
"        ","        ","        ","        ","        ","        ",%310  01015000
"ILLEGAL ","DESCRIPT","ION DIVI","SION    ","        ","        ",%004, 01016000
"        ","        ","        ","        ","        ","        ",%400  01017000
"MISPLACE","D DEFAUL","T PART  ","        ","        ","        ",%005, 01018000
"        ","        ","        ","        ","        ","        ",%401  01019000
"MISSING ","COLON   ","        ","        ","        ","        ",%006, 01020000
"        ","        ","        ","        ","        ","        ",%402  01021000
"EXTRA DE","SCRIPTIO","N PART  ","        ","        ","        ",%007, 01022000
"        ","        ","        ","        ","        ","        ",%403  01023000
"MISPLACE","D DIVISI","ON      ","        ","        ","        ",%008, 01024000
"        ","        ","        ","        ","        ","        ",%404  01025000
"ILLEGAL ","CONSTRUC","T       ","        ","        ","        ",%009, 01026000
"        ","        ","        ","        ","        ","        ",%405  01027000
"ILLEGAL ","STRING C","ODE     ","        ","        ","        ",%010, 01028000
"        ","        ","        ","        ","        ","        ",%406  01029000
"ILLEGAL ","STRING C","HARACTER","        ","        ","        ",%011, 01030000
"        ","        ","        ","        ","        ","        ",%407  01031000
"CONSTANT"," GREATER"," THAN 64"," CHARACT","ERS     ","        ",%012, 01032000
"        ","        ","        ","        ","        ","        ",%408  01033000
"REQUEST ","STATEMEN","T EXPECT","ED      ","        ","        ",%013, 01034000
"        ","        ","        ","        ","        ","        ",%450  01035000
"THEN EXP","ECTED   ","        ","        ","        ","        ",%014, 01036000
"        ","        ","        ","        ","        ","        "#;%451 01037000
DEFINE FILL1=                                                           01038000
FILL ERRMSG[1,*] WITH                                                   01039000
"DUPLICAT","E LABEL ","        ","        ","        ","        ",%015, 01040000
"        ","        ","        ","        ","        ",1,%452           01041000
"ERROR AC","TION EXP","ECTED   ","        ","        ","        ",%016, 01042000
"        ","        ","        ","        ","        ","        ",%453  01043000
"TERMINAT","E TYPE E","XPECTED ","        ","        ","        ",%017, 01044000
"        ","        ","        ","        ","        ","        ",%454  01045000
"INITIATE"," TYPE EX","PECTED  ","        ","        ","        ",%018, 01046000
"        ","        ","        ","        ","        ","        ",%455  01047000
"INITIALI","ZE TYPE ","EXPECTED","        ","        ","        ",%019, 01048000
"        ","        ","        ","        ","        ","        ",%456  01049000
"CHARACTE","R OR UNI","TARY STR","ING EXPE","CTED    ","        ",%020, 01050000
"        ","        ","        ","        ","        ","        ",%457  01051000
"CHARACTE","R OR STR","ING EXPE","CTED    ","        ","        ",%021, 01052000
"        ","        ","        ","        ","        ","        ",%458  01053000
"RECEIVE ","ACTION I","TEM EXPE","CTED    ","        ","        ",%022, 01054000
"        ","        ","        ","        ","        ","        ",%459  01055000
"ITEM EXP","ECTED   ","        ","        ","        ","        ",%023, 01056000
"        ","        ","        ","        ","        ","        ",%460  01057000
"VALUE EX","PECTED  ","        ","        ","        ","        ",%024, 01058000
"        ","        ","        ","        ","        ","        ",%461  01059000
"TALLY NU","MBER EXP","ECTED   ","        ","        ","        ",%025, 01060000
"        ","        ","        ","        ","        ","        ",%462  01061000
"TOGGLE N","UMBER EX","PECTED  ","        ","        ","        ",%026, 01062000
"        ","        ","        ","        ","        ","        ",%463  01063000
"RECEIVE ","OR TRANS","MIT EXPE","CTED    ","        ","        ",%027, 01064000
"        ","        ","        ","        ","        ","        ",%464  01065000
"APPLICAT","ION NUMB","ER EXPEC","TED     ","        ","        ",%028, 01066000
"        ","        ","        ","        ","        ","        ",%465  01067000
"ALL ERRO","R SWITCH"," ASSIGNM","ENTS MUS","T PRECED","E ALL OT",%029, 01068000
"HER REQU","EST STAT","EMENTS  ","        ","        ","        "#;%466 01069000
DEFINE FILL2=                                                           01070000
FILL ERRMSG[2,*] WITH                                                   01071000
"ERROR SW","ITCH HAS"," NOT BEE","N SPECIF","IED     ","        ",%030, 01072000
"        ","        ","        ","        ","        ",1,%467           01073000
"DUPLICAT","E ERROR ","SWITCH D","ESIGNATO","R       ","        ",%031, 01074000
"        ","        ","        ","        ","        ","        ",%468  01075000
"TRANSMIT"," ACTION ","ITEM EXP","ECTED   ","        ","        ",%032, 01076000
"        ","        ","        ","        ","        ","        ",%469  01077000
"ILLEGAL ","CONSTANT"," IDENTIF","IER     ","        ","        ",%033, 01078000
"        ","        ","        ","        ","        ","        ",%500  01079000
"MISSING ","PERIOD  ","        ","        ","        ","        ",%034, 01080000
"        ","        ","        ","        ","        ","        ",%501  01081000
"MISSING ","EQUAL SI","GN      ","        ","        ","        ",%035, 01082000
"        ","        ","        ","        ","        ","        ",%502  01083000
"CONSTANT"," NOT A S","TRING   ","        ","        ","        ",%036, 01084000
"        ","        ","        ","        ","        ","        ",%503  01085000
"TRUE OR ","FALSE EX","PECTED  ","        ","        ","        ",%037, 01086000
"        ","        ","        ","        ","        ","        ",%504  01087000
"INTEGER ","EXPECTED","        ","        ","        ","        ",%038, 01088000
"        ","        ","        ","        ","        ","        ",%505  01089000
"STRING E","XPECTED ","        ","        ","        ","        ",%039, 01090000
"        ","        ","        ","        ","        ","        ",%506  01091000
"UNITARY ","STRING E","XPECTED ","        ","        ","        ",%040, 01092000
"        ","        ","        ","        ","        ","        ",%507  01093000
"UNITARY ","STRING O","R INTEGE","R EXPECT","ED      ","        ",%041, 01094000
"        ","        ","        ","        ","        ","        ",%508  01095000
"STRING O","R INTEGE","R EXPECT","ED      ","        ","        ",%042, 01096000
"        ","        ","        ","        ","        ","        ",%509  01097000
"LEFT PAR","EN EXPEC","TED     ","        ","        ","        ",%043, 01098000
"        ","        ","        ","        ","        ","        ",%510  01099000
"RIGHT PA","REN EXPE","CTED    ","        ","        ","        ",%044, 01100000
"        ","        ","        ","        ","        ","        "#;%511 01101000
DEFINE FILL3=                                                           01102000
FILL ERRMSG[3,*] WITH                                                   01103000
"COLON EX","PECTED  ","        ","        ","        ","        ",%045, 01104000
"        ","        ","        ","        ","        ",1,%512           01105000
"TIME UNI","T EXPECT","ED      ","        ","        ","        ",%046, 01106000
"        ","        ","        ","        ","        ","        ",%513  01107000
"LEFT BRA","CKET EXP","ECTED   ","        ","        ","        ",%047, 01108000
"        ","        ","        ","        ","        ","        ",%514  01109000
"RIGHT BR","ACKET EX","PECTED  ","        ","        ","        ",%048, 01110000
"        ","        ","        ","        ","        ","        ",%515  01111000
"RELATION","AL OPERA","TOR EXPE","CTED    ","        ","        ",%049, 01112000
"        ","        ","        ","        ","        ","        ",%516  01113000
"COMMA EX","PECTED  ","        ","        ","        ","        ",%050, 01114000
"        ","        ","        ","        ","        ","        ",%517  01115000
"QUOTE EX","PECTED  ","        ","        ","        ","        ",%051, 01116000
"        ","        ","        ","        ","        ","        ",%518  01117000
"CHARACTE","R NOT AL","IGNED   ","        ","        ","        ",%052, 01118000
"        ","        ","        ","        ","        ","        ",%519  01119000
"MISSING ","CONDITIO","N       ","        ","        ","        ",%053, 01120000
"        ","        ","        ","        ","        ","        ",%520  01121000
"LIST EXP","ECTED   ","        ","        ","        ","        ",%054, 01122000
"        ","        ","        ","        ","        ","        ",%521  01123000
"MISSING ","REQUEST ","IDENTIFI","ER      ","        ","        ",%055, 01124000
"        ","        ","        ","        ","        ","        ",%522  01125000
"RECEIVE ","REQUEST ","NOT SPEC","IFIED   ","        ","        ",%056, 01126000
"        ","        ","        ","        ","        ","        ",%523  01127000
"TRANSMIT"," REQUEST"," NOT SPE","CIFIED  ","        ","        ",%057, 01128000
"        ","        ","        ","        ","        ","        ",%524  01129000
"UNDEFINE","D REQUES","T IDENTI","FIER    ","        ","        ",%058, 01130000
"        ","        ","        ","        ","        ","        ",%525  01131000
"DUPLICAT","E REQUES","T CONDIT","ION     ","        ","        ",%059, 01132000
"        ","        ","        ","        ","        ","        "#;%526 01133000
DEFINE FILL4=                                                           01134000
FILL ERRMSG[4,*] WITH                                                   01135000
"DCP ATTR","IBUTE ST","ATEMENT ","EXPECTED","        ","        ",%060, 01136000
"        ","        ","        ","        ","        ",1,%527           01137000
"MCS IDEN","TIFIER E","XPECTED ","        ","        ","        ",%061, 01138000
"        ","        ","        ","        ","        ","        ",%528  01139000
"TASK IDE","NTIFIER ","EXPECTED","        ","        ","        ",%062, 01140000
"        ","        ","        ","        ","        ","        ",%529  01141000
"DYNAMIC ","EXPECTED","        ","        ","        ","        ",%063, 01142000
"        ","        ","        ","        ","        ","        ",%530  01143000
"LINE TYP","E STATEM","ENT MAY ","NOT BE P","ART OF L","INE DEFA",%064, 01144000
"ULT DEFI","NITIONS ","        ","        ","        ","        ",%531  01145000
"LINE STA","TION STA","TEMENT M","AY NOT B","E PART O","F LINE D",%065, 01146000
"EFAULT D","EFINITIO","N       ","        ","        ","        ",%532  01147000
"NO. LINE","S / PAGE"," TOO LAR","GE      ","        ","        ",%066, 01148000
"        ","        ","        ","        ","        ","        ",%533  01149000
"STANDARD"," CODE EX","PECTED  ","        ","        ","        ",%067, 01150000
"        ","        ","        ","        ","        ","        ",%534  01151000
"ILLEGAL ","ADAPTER ","CLASS   ","        ","        ","        ",%068, 01152000
"        ","        ","        ","        ","        ","        ",%535  01153000
"ILLEGAL ","ADAPTER ","TYPE    ","        ","        ","        ",%069, 01154000
"        ","        ","        ","        ","        ","        ",%536  01155000
"LINE WID","TH TOO L","ARGE    ","        ","        ","        ",%070, 01156000
"        ","        ","        ","        ","        ","        ",%537  01157000
"ADDRESS ","LIST EXC","EEDS 50 ","MEMBERS ","        ","        ",%071, 01158000
"        ","        ","        ","        ","        ","        ",%538  01159000
"INCONSIS","TENT ADD","RESS LEN","GTH     ","        ","        ",%072, 01160000
"        ","        ","        ","        ","        ","        ",%539  01161000
"LABEL EX","PECTED  ","        ","        ","        ","        ",%073, 01162000
"        ","        ","        ","        ","        ","        ",%540  01163000
"ERROR TO","GGLE LIS","T EXPECT","ED      ","        ","        ",%074, 01164000
"        ","        ","        ","        ","        ","        "#;%541 01165000
DEFINE FILL5=                                                           01166000
FILL ERRMSG[5,*] WITH                                                   01167000
"ERROR TO","GGLE EXP","ECTED   ","        ","        ","        ",%075, 01168000
"        ","        ","        ","        ","        ",1,%542           01169000
"ITEM EXP","ECTED   ","        ","        ","        ","        ",%076, 01170000
"        ","        ","        ","        ","        ","        ",%543  01171000
"-OUTPUT-"," EXPECTE","D       ","        ","        ","        ",%077, 01172000
"        ","        ","        ","        ","        ","        ",%544  01173000
"-INPUT- ","EXPECTED","        ","        ","        ","        ",%078, 01174000
"        ","        ","        ","        ","        ","        ",%545  01175000
"-INPUT- ","OR -OUTP","UT- EXPE","CTED    ","        ","        ",%079, 01176000
"        ","        ","        ","        ","        ","        ",%546  01177000
"MAX. ADD","RESS < M","IN. ADDR","ESS     ","        ","        ",%080, 01178000
"        ","        ","        ","        ","        ","        ",%547  01179000
"TERMINAL"," IDENTIF","IER EXPE","CTED    ","        ","        ",%081, 01180000
"        ","        ","        ","        ","        ","        ",%548  01181000
"ADDRESS ","EXCEEDS ","3 CHARAC","TERS    ","        ","        ",%082, 01182000
"        ","        ","        ","        ","        ","        ",%549  01183000
"BUFFER S","IZE TOO ","LARGE   ","        ","        ","        ",%083, 01184000
"        ","        ","        ","        ","        ","        ",%550  01185000
"-ODD- OR"," -EVEN- ","EXPECTED","        ","        ","        ",%084, 01186000
"        ","        ","        ","        ","        ","        ",%551  01187000
"-HORIZON","TAL- OR ","-VERTICA","L- EXPEC","TED     ","        ",%085, 01188000
"        ","        ","        ","        ","        ","        ",%552  01189000
"TERMINAL"," MODE EX","PECTED  ","        ","        ","        ",%086, 01190000
"        ","        ","        ","        ","        ","        ",%553  01191000
"CONNECTI","ON TYPE ","EXPECTED","        ","        ","        ",%087, 01192000
"        ","        ","        ","        ","        ","        ",%554  01193000
"CHARACTE","R SIZE T","OO LARGE","        ","        ","        ",%088, 01194000
"        ","        ","        ","        ","        ","        ",%555  01195000
"ILLEGAL ","CORE SIZ","E       ","        ","        ","        ",%089, 01196000
"        ","        ","        ","        ","        ","        "#;%556 01197000
DEFINE FILL6=                                                           01198000
FILL ERRMSG[6,*] WITH                                                   01199000
"TERMINAL"," IDENTIF","IER EXPE","CTED    ","        ","        ",%090, 01200000
"        ","        ","        ","        ","        ",1,%557           01201000
"STATION ","IDENTIFI","ER EXPEC","TED     ","        ","        ",%091, 01202000
"        ","        ","        ","        ","        ","        ",%558  01203000
"LINE IDE","NTIFIER ","EXPECTED","        ","        ","        ",%092, 01204000
"        ","        ","        ","        ","        ","        ",%559  01205000
"DCP IDEN","TIFIER E","XPECTED ","        ","        ","        ",%093, 01206000
"        ","        ","        ","        ","        ","        ",%560  01207000
"STATION ","DESIGNAT","OR EXPEC","TED     ","        ","        ",%094, 01208000
"        ","        ","        ","        ","        ","        ",%561  01209000
"A DUPLEX","(RECEIVE",") LINE M","UST POIN","T TO A D","UPLEX(TR",%095, 01210000
"ANSMIT) ","LINE    ","        ","        ","        ","        ",%562  01211000
"THE DIAL","OUT TYPE"," MUST BE"," ASSOCIA","TED WITH"," THE DUP",%096, 01212000
"LEX(RECE","IVE) LIN","E OF A D","UPLEX PA","IR OF LI","NES     ",%563  01213000
"DUPLICAT","E TYPES ","        ","        ","        ","        ",%097, 01214000
"        ","        ","        ","        ","        ","        ",%564  01215000
"THE DIAL","IN TYPE ","MUST BE ","ASSOCIAT","ED WITH ","THE DUPL",%098, 01216000
"EX(RECEI","VE) LINE"," OF A DU","PLEX PAI","R OF LIN","ES      ",%565  01217000
"RETRY VA","LUE MUST"," NOT EXC","EED 255 ","        ","        ",%099, 01218000
"        ","        ","        ","        ","        ","        ",%566  01219000
"DUPLEX(R","ECEIVE) ","AND DUPL","EX(TRANS","MIT) ARE"," INCOMPA",%100, 01220000
"TIBLE TY","PES     ","        ","        ","        ","        ",%567  01221000
"LINE DOE","S NOT PO","INT BACK","        ","        ","        ",%101, 01222000
"        ","        ","        ","        ","        ","        ",%568  01223000
"A DIALOU","T LINE M","UST POIN","T TO A L","INE WITH"," AN ACU ",%102, 01224000
"ADAPTER ","CLASS   ","        ","        ","        ","        ",%569  01225000
"A DUPLEX","(TRANSMI","T) LINE ","MUST POI","NT TO A ","DUPLEX(R",%103, 01226000
"ECEIVE) ","LINE    ","        ","        ","        ","        ",%570  01227000
"LINE TYP","E EXPECT","ED      ","        ","        ","        ",%104, 01228000
"        ","        ","        ","        ","        ","        "#;%571 01229000
DEFINE FILL7=                                                           01230000
FILL ERRMSG[7,*] WITH                                                   01231000
"THE PASS","IVE TYPE"," AND ALL"," OTHER T","YPES ARE"," INCOMPA",%105, 01232000
"TIBLE   ","        ","        ","        ","        ",1,%572           01233000
"THE REMO","TE TYPE ","IS ONLY ","COMPATIB","LE WITH ","THE TYPE",%106, 01234000
" DUPLEX ","        ","        ","        ","        ","        ",%573  01235000
"TRANSMIS","SION NUM","BER LENG","TH EXPEC","TED     ","        ",%107, 01236000
"        ","        ","        ","        ","        ","        ",%574  01237000
"DUPLICAT","E STATIO","N IN LIS","T       ","        ","        ",%108, 01238000
"        ","        ","        ","        ","        ","        ",%575  01239000
"STATION ","CANNOT B","E ALTERN","ATE OF I","TSELF   ","        ",%109, 01240000
"        ","        ","        ","        ","        ","        ",%576  01241000
"TYPE DUP","LEX IS C","OMPATIBL","E ONLY W","ITH TYPE"," REMOTE ",%110, 01242000
"        ","        ","        ","        ","        ","        ",%570  01243000
"STATION ","ALREADY ","ATTACHED"," TO A LI","NE      ","        ",%111, 01244000
"        ","        ","        ","        ","        ","        ",%578  01245000
"DUPLICAT","E ADDRES","S       ","        ","        ","        ",%112, 01246000
"        ","        ","        ","        ","        ","        ",%579  01247000
"ILLEGAL ","PHONE NU","MBER    ","        ","        ","        ",%113, 01248000
"        ","        ","        ","        ","        ","        ",%580  01249000
"ILLEGAL ","DCP ADDR","ESS     ","        ","        ","        ",%114, 01250000
"        ","        ","        ","        ","        ","        ",%581  01251000
"ILLEGAL ","ADAPTER ","ADDRESS ","        ","        ","        ",%115, 01252000
"        ","        ","        ","        ","        ","        ",%582  01253000
"ILLEGAL ","CLUSTER ","ADDRESS ","        ","        ","        ",%116, 01254000
"        ","        ","        ","        ","        ","        ",%583  01255000
"DUPLICAT","E STATIO","N ADDRES","SES ON L","INE     ","        ",%117, 01256000
"        ","        ","        ","        ","        ","        ",%584  01257000
"MODE OF ","STATIONS"," TERMINA","L INCONS","ISTENT W","ITH OTHE",%118, 01258000
"R STATIO","NS ON LI","NE      ","        ","        ","        ",%585  01259000
"DUPLEX A","TTRIBUTE"," OF STAT","IONS TER","MINAL IN","CONSISTE",%119, 01260000
"NT WITH ","OTHER ST","ATIONS O","N LINE  ","        ","        "#;%586 01261000
DEFINE FILL8=                                                           01262000
FILL ERRMSG[8,*] WITH                                                   01263000
"ADDRESS ","LENGTH O","F STATIO","NS TERMI","NAL INCO","NSISTENT",%120, 01264000
" WITH OT","HER STAT","IONS ON ","LINE    ","        ",1,%587           01265000
"REQUEST ","FOR STAT","IONS TER","MINAL IN","CONSISTE","NT WITH ",%121, 01266000
"OTHER ST","ATIONS O","N LINE  ","        ","        ","        ",%588  01267000
"STATIONS"," ADAPTER"," TYPE NO","T CONSIS","TENT WIT","H OTHER ",%122, 01268000
"STATIONS"," ON LINE","        ","        ","        ","        ",%589  01269000
"CODE OF ","STATIONS"," TERMINA","L INCONS","ISTENT W","ITH OTHE",%123, 01270000
"R STATIO","NS ON LI","NE      ","        ","        ","        ",%590  01271000
"A STATIO","N WITH M","ULTIPLE ","ADDRESSE","S MUST B","E THE ON",%124, 01272000
"LY STATI","ON ON A ","LINE    ","        ","        ","        ",%591  01273000
"A LINES ","TYPE STA","TEMENT M","AY NOT R","EFER TO ","ITS SELF",%125, 01274000
"        ","        ","        ","        ","        ","        ",%125, 01275000
"TERMINAL"," DEFAULT"," IDENTIF","IER EXPE","CTED    ","        ",%126, 01276000
"        ","        ","        ","        ","        ","        ",%593  01277000
"STATION ","DEFAULT ","IDENTIFI","ER EXPEC","TED     ","        ",%127, 01278000
"        ","        ","        ","        ","        ","        ",%594  01279000
"LINE DEF","AULT IDE","NTIFIER ","EXPECTED","        ","        ",%128, 01280000
"        ","        ","        ","        ","        ","        ",%595  01281000
"FILE DEF","AULT IDE","NTIFIER ","EXPECTED","        ","        ",%129, 01282000
"        ","        ","        ","        ","        ","        ",%596  01283000
"ADDRESS ","SIZE EXC","EEDS 3 C","HARACTER","S       ","        ",%130, 01284000
"        ","        ","        ","        ","        ","        ",%597  01285000
"DIFFEREN","T EXPECT","ED      ","        ","        ","        ",%131, 01286000
"        ","        ","        ","        ","        ","        ",%598  01287000
"EXISTENC","E OF MOD","EM ON ST","ATION IN","CONSISTE","NT WITH ",%132, 01288000
"OTHER ST","ATIONS O","N LINE  ","        ","        ","        ",%599  01289000
"ERROR LI","MIT SPEC","IFIED ON"," DOLLAR ","CARD HAS"," BEEN EX",%133  01290000
"CEEDED  ","        ","        ","        ","        ","        ",      01291000
"DUPLICAT","E STATEM","ENT     ","        ","        ","        ",%134, 01292000
"        ","        ","        ","        ","        ","        "#;%601 01293000
DEFINE FILL9=                                                           01294000
FILL ERRMSG[9,*] WITH                                                   01295000
"MAXINPUT"," NOT SPE","CIFIED F","OR UNBUF","FERED DE","VICE    ",%135, 01296000
"        ","        ","        ","        ","        ",1,%602           01297000
"DUPLEX A","TTRIBUTE"," NOT SPE","CIFIED  ","        ","        ",%136, 01298000
"        ","        ","        ","        ","        ","        ",%603  01299000
"REQUESTS"," FOR TER","MINAL US","E BCC BU","T TERMIN","AL DOES ",%137, 01300000
"NOT HAVE"," HORIZON","TAL PARI","TY      ","        ","        ",%604  01301000
"REQUESTS"," FOR TER","MINAL SP","ECIFY EN","D CHARAC","TER ACTI",%138, 01302000
"ON BUT T","ERMINAL ","DOES NOT"," SPECIFY"," END CHAR","ACTERS  ",%605 01303000
"REQUESTS"," FOR TER","MINAL SP","ECIFY BA","CKSPACE ","BUT NO B",%139, 01304000
"ACKSPACE"," CHARACT","ER SPECI","FIED    ","        ","        ",%606  01305000
"REQUESTS"," FOR TER","MINAL SP","ECIFY LI","NEDELETE"," BUT NO ",%140, 01306000
"LINEDELE","TE CHARA","CTER IS ","SPECIFIE","D       ","        ",%607  01307000
"ADDRESS ","NOT SIGN","IFICANT ","FOR STAT","IONS HAV","ING CONT",%141, 01308000
"ENTION M","ODE TERM","INALS   ","        ","        ","        ",%608  01309000
"REQUESTS"," FOR TER","MINAL SP","ECIFY WR","U ACTION"," BUT NO ",%142, 01310000
"WRU CHAR","ACTER IS"," SPECIFI","ED      ","        ","        ",%609  01311000
"ALTERNAT","E STATEM","ENT CANN","OT BE PA","RT OF A ","STATION ",%143, 01312000
"DEFAULT ","DEFINITI","ON      ","        ","        ","        ",%610  01313000
"DUPLICAT","E APPLIC","ATION RE","QUEST SE","T       ","        ",%144, 01314000
"        ","        ","        ","        ","        ","        ",%611  01315000
"APPLICAT","ION REQU","EST SET ","ONE NOT ","SPECIFIE","D       ",%145, 01316000
"        ","        ","        ","        ","        ","        ",%145, 01317000
"APPLICAT","ION REQU","EST SETS"," NOT CON","SISTENTL","Y SPECIF",%146, 01318000
"IED FOR ","RECEIVE ","AND/OR T","RANSMIT ","        ","        ",%613  01319000
"DUPLICAT","E ERROR ","SWITCH N","UMBER   ","        ","        ",%147, 01320000
"        ","        ","        ","        ","        ","        ",%614  01321000
"DUPLICAT","E RECEIV","E ERROR ","TOGGLE  ","        ","        ",%148, 01322000
"        ","        ","        ","        ","        ","        ",%615  01323000
"DUPLICAT","E TRANSM","IT ERROR"," TOGGLE ","        ","        ",%149  01324000
"        ","        ","        ","        ","        ","        "#;%616 01325000
DEFINE FILL10=                                                          01326000
FILL ERRMSG[10,*] WITH                                                  01327000
"TIMEOUT ","VALUE OR"," NULL EX","PECTED  ","        ","        ",%150, 01328000
"        ","        ","        ","        ","        ","        ",%617  01329000
"ADDRESS ","STATEMEN","TS MAY N","OT BE IN","CLUDED I","N STATIO",%151, 01330000
"N DEFAUL","T DEFINI","TIONS   ","        ","        ","        ",%618  01331000
"A RESERV","ED WORD ","MAY NOT ","BE USED ","AS AN ID","ENTIFIER",%152, 01332000
"        ","        ","        ","        ","        ","        ",%619  01333000
"ALREADY ","USED IDE","NTIFIER ","        ","        ","        ",%153, 01334000
"        ","        ","        ","        ","        ","        ",%620  01335000
"REQUEST ","STATEMEN","TS MAY N","OT BE IN","CLUDED I","N TERMIN",%154, 01336000
"AL DEFAU","LT DEFIN","ITIONS  ","        ","        ","        ",%621  01337000
"ILLEGAL ","TERMINAL"," ATTRIBU","TE      ","        ","        ",%155, 01338000
"        ","        ","        ","        ","        ","        ",%622  01339000
"CODE NOT"," SPECIFI","ED      ","        ","        ","        ",%156, 01340000
"        ","        ","        ","        ","        ","        ",%623  01341000
"MODE NOT"," SPECIFI","ED      ","        ","        ","        ",%157, 01342000
"        ","        ","        ","        ","        ","        ",%624  01343000
"CHARACTE","R SIZE N","OT SPECI","FIED    ","        ","        ",%158, 01344000
"        ","        ","        ","        ","        ","        ",%625  01345000
"IN - OUT"," CAPABIL","ITY NOT ","SPECIFIE","D       ","        ",%159, 01346000
"        ","        ","        ","        ","        ","        ",%626  01347000
"REQUESTS"," NOT SPE","CIFIED  ","        ","        ","        ",%160, 01348000
"        ","        ","        ","        ","        ","        ",%627  01349000
"BLOCKING"," NOT SPE","CIFIED  ","        ","        ","        ",%161, 01350000
"        ","        ","        ","        ","        ","        ",%628  01351000
"SCREEN N","OT SPECI","FIED    ","        ","        ","        ",%162, 01352000
"        ","        ","        ","        ","        ","        ",%629  01353000
"LINE WID","TH EXCEE","DS BUFFE","R SIZE  ","        ","        ",%163, 01354000
"        ","        ","        ","        ","        ","        ",%630  01355000
"PAGE SIZ","E OF SCR","EEN DEVI","CE NOT S","PECIFIED","        ",%164, 01356000
"        ","        ","        ","        ","        ","        "#;%631 01357000
DEFINE FILL11=                                                          01358000
FILL ERRMSG[11,*] WITH                                                  01359000
"HOME CHA","RACTER O","F SCREEN"," DEVICE ","NOT SPEC","IFIED   ",%165, 01360000
"        ","        ","        ","        ","        ",1,%632           01361000
"CARRIAGE"," RETURN ","CHARACTE","R NOT SP","ECIFIED ","        ",%166, 01362000
"        ","        ","        ","        ","        ","        ",%633  01363000
"MAXINPUT"," ILLEGAL"," FOR BUF","FERED DE","VICE    ","        ",%167, 01364000
"        ","        ","        ","        ","        ","        ",%634  01365000
"LINEFEED"," CHARACT","ER NOT S","PECIFIED","        ","        ",%168, 01366000
"        ","        ","        ","        ","        ","        ",%635  01367000
"TIMEOUT ","NOT SPEC","IFIED   ","        ","        ","        ",%169, 01368000
"        ","        ","        ","        ","        ","        ",%636  01369000
"ILLEGAL ","STATION ","ATTRIBUT","E       ","        ","        ",%170, 01370000
"        ","        ","        ","        ","        ","        ",%637  01371000
"TERMINAL"," NOT SPE","CIFIED  ","        ","        ","        ",%171, 01372000
"        ","        ","        ","        ","        ","        ",%638  01373000
"MCS NOT ","SPECIFIE","D       ","        ","        ","        ",%172, 01374000
"        ","        ","        ","        ","        ","        ",%639  01375000
"SECURITY"," NOT SPE","CIFIED  ","        ","        ","        ",%173, 01376000
"        ","        ","        ","        ","        ","        ",%640  01377000
"WRU NOT ","SPECIFIE","D       ","        ","        ","        ",%174, 01378000
"        ","        ","        ","        ","        ","        ",%641  01379000
"MYUSE AT","TRIBUTE ","OF STATI","ON NOT C","ONSISTEN","T WITH I",%175, 01380000
"/O CAPAB","ILITY OF"," ITS TER","MINAL   ","        ","        ",%642  01381000
"STATIONS"," BLOCKIN","G ATTRIB","UTE NOT ","COMPATIB","LE WITH ",%176, 01382000
"ITS TERM","INAL    ","        ","        ","        ","        ",%643  01383000
"ADDRESS ","NOT SPEC","IFIED (S","TATION H","AS A NON","-CONTENT",%177, 01384000
"ION MODE"," TERMINA","L)      ","        ","        ","        ",%644  01385000
"SPECIAL ","AND WRU ","CHARACTE","RS EQUAL","        ","        ",%178, 01386000
"        ","        ","        ","        ","        ","        ",%645  01387000
"REQUESTS"," FOR STA","TIONS TE","RMINAL S","PECIFY C","ONTROL A",%179, 01388000
"CTION BU","T NO CON","TROL CHA","RACTER I","S SPECIF","IED     "#;%646 01389000
DEFINE FILL12=                                                          01390000
FILL ERRMSG[12,*] WITH                                                  01391000
"SPECIAL ","AND END ","CHARACTE","RS EQUAL","        ","        ",%180, 01392000
"        ","        ","        ","        ","        ",1,%647           01393000
"SPECIAL ","AND BACK","SPACE CH","ARACTERS"," EQUAL  ","        ",%181, 01394000
"        ","        ","        ","        ","        ","        ",%648  01395000
"SPECIAL ","AND LINE","DELETE C","HARACTER","S EQUAL ","        ",%182, 01396000
"        ","        ","        ","        ","        ","        ",%649  01397000
"WRU AND ","END CHAR","ACTERS E","QUAL    ","        ","        ",%183, 01398000
"        ","        ","        ","        ","        ","        ",%650  01399000
"WRU AND ","BACKSPAC","E CHARAC","TERS EQU","AL      ","        ",%184, 01400000
"        ","        ","        ","        ","        ","        ",%651  01401000
"WRU AND ","LINEDELE","TE CHARA","CTERS EQ","UAL     ","        ",%185, 01402000
"        ","        ","        ","        ","        ","        ",%652  01403000
"END AND ","BACKSPAC","E CHARAC","TERS EQU","AL      ","        ",%186, 01404000
"        ","        ","        ","        ","        ","        ",%653  01405000
"END AND ","LINEDELE","TE CHARA","CTERS EQ","UAL     ","        ",%187, 01406000
"        ","        ","        ","        ","        ","        ",%654  01407000
"BACKSPAC","E AND LI","NEDELETE"," CHARACT","ERS EQUA","L       ",%188, 01408000
"        ","        ","        ","        ","        ","        ",%655  01409000
"STATION ","PAGE SIZ","E EXCEED","S TERMIN","AL PAGE ","SIZE    ",%189, 01410000
"        ","        ","        ","        ","        ","        ",%189, 01411000
"LOGIN NO","T SPECIF","IED     ","        ","        ","        ",%190, 01412000
"        ","        ","        ","        ","        ","        ",%657  01413000
"STATION ","ADAPTER ","TYPE NOT"," COMPATI","BLE WITH"," ITS TER",%191, 01414000
"MINALS A","DAPTER T","YPES    ","        ","        ","        ",%658  01415000
"TERMINAL"," AND STA","TION ADA","PTER TYP","ES NOT C","OMPATIBL",%192, 01416000
"E WITH M","ODEM    ","        ","        ","        ","        ",%659  01417000
"MODEM ID","ENTIFIER"," EXPECTE","D       ","        ","        ",%193, 01418000
"        ","        ","        ","        ","        ","        ",%660  01419000
"TASK MUS","T BE SPE","CIFIED W","HEN LOGI","N IS SET"," FALSE  ",%194, 01420000
"        ","        ","        ","        ","        ","        "#;%661 01421000
DEFINE FILL13=                                                          01422000
FILL ERRMSG[13,*] WITH                                                  01423000
"ILLEGAL ","LINE ATT","RIBUTE  ","        ","        ","        ",%195, 01424000
"        ","        ","        ","        ","        ",1,%662           01425000
"ADDRESS ","NOT SPEC","IFIED   ","        ","        ","        ",%196, 01426000
"        ","        ","        ","        ","        ","        ",%663  01427000
"ADAPTER ","NOT SPEC","IFIED   ","        ","        ","        ",%197, 01428000
"        ","        ","        ","        ","        ","        ",%664  01429000
"INPUT/OU","TPUT NOT"," SPECIFI","ED      ","        ","        ",%198, 01430000
"        ","        ","        ","        ","        ","        ",%665  01431000
"CONNECTI","ON TYPE ","NOT SPEC","IFIED   ","        ","        ",%199, 01432000
"        ","        ","        ","        ","        ","        ",%666  01433000
"LINE HAS"," NO STAT","IONS ATT","ACHED   ","        ","        ",%200, 01434000
"        ","        ","        ","        ","        ","        ",%667  01435000
"DIALOUT,"," DUPLEX(","TRANSMIT","), AND P","ASSIVE L","INES MAY",%201, 01436000
" NOT HAV","E ATTACH","ED STATI","ONS     ","        ","        ",%668  01437000
"DIALIN L","INES MUS","T HAVE O","NLY ONE ","ATTACHED"," STATION",%202, 01438000
"        ","        ","        ","        ","        ","        ",%669  01439000
"LINE TYP","E STATEM","ENTS MAY"," NOT REF","ER TO LI","NES ON O",%203, 01440000
"THER DCP","S       ","        ","        ","        ","        ",%670  01441000
"ONLY DIA","LIN TYPE"," LINES M","AY HAVE ","A MULTIP","LE ADDRE",%204, 01442000
"SS STATI","ON ATTAC","HED     ","        ","        ","        ",%671  01443000
"ADAPTER ","CLASS OF"," LINE AN","D ADAPTE","R TYPE O","F STATIO",%205, 01444000
"NS INCOM","PATIBLE ","        ","        ","        ","        ",%672  01445000
"LENGTH O","F STATIO","NS ADDRE","SS INCON","SISTENT ","WITH LEN",%206, 01446000
"GTH SPEC","IFIED IN"," TERMINA","L DEFINI","TION    ","        ",%673  01447000
"PARITY N","OT SPECI","FIED    ","        ","        ","        ",%207, 01448000
"        ","        ","        ","        ","        ","        ",%674  01449000
"TERMINAL"," CANNOT ","HAVE AN ","ACU ADAP","TER TYPE","SPECIFIE",%208, 01450000
"D IN ITS"," ADAPTER"," STATEME","NT      ","        ","        ",%675  01451000
"ADAPTER ","TYPE AND"," CODE TY","PE INCOM","PATIBLE ","IN SIZE ",%209  01452000
"        ","        ","        ","        ","        ","        "#;%676 01453000
DEFINE FILL14=                                                          01454000
FILL ERRMSG[14,*] WITH                                                  01455000
"ADAPTER ","DOES NOT"," ALLOW P","ARITY BI","T       ","        ",%210, 01456000
"        ","        ","        ","        ","        ",1,%677           01457000
"INHIBITS","YNC ATTR","IBUTE NO","T SPECIF","IED     ","        ",%211, 01458000
"        ","        ","        ","        ","        ","        ",%678  01459000
"ENABLEIN","PUT ATTR","IBUTE NO","T SPECIF","IED     ","        ",%212, 01460000
"        ","        ","        ","        ","        ","        ",%679  01461000
"LINES HA","VING AN ","ACU ADAP","TER CLAS","S MAY BE"," OF TYPE",%213, 01462000
" PASSIVE"," ONLY   ","        ","        ","        ","        ",%680  01463000
"LINES HA","VE AN AC","U ADAPTE","R CLASS ","MAY NOT ","HAVE ATT",%214, 01464000
"ACHED ST","ATIONS  ","        ","        ","        ","        ",%681  01465000
"LINES AD","APTER CL","ASS NECE","SSITATES"," A MODEM"," BE SPEC",%215, 01466000
"IFIED FO","R THE LI","NE      ","        ","        ","        ",%682  01467000
"STATIONS"," TERMINA","L IS A P","OLLED DE","VICE AND"," FREQUEN",%216, 01468000
"CY IS NO","T SPECIF","IED     ","        ","        ","        ",%683  01469000
"LOGICALA","CK NOT S","PECIFIED","        ","        ","        ",%217, 01470000
"        ","        ","        ","        ","        ","        ",%684  01471000
"LINES AD","APTER CL","ASS REQU","IRES THA","T ITS ST","ATIONS H",%218, 01472000
"AVE MODE","MS      ","        ","        ","        ","        ",%218, 01473000
"EXISTENC","E OF MOD","EMS ON L","INE AND ","ITS STAT","IONS INC",%219, 01474000
"ONSISTEN","T       ","        ","        ","        ","        ",%686  01475000
"STATIONS"," ADAPTER"," TYPE RE","QUIRES M","ODEM BE ","SPECIFIE",%220, 01476000
"D FOR ST","ATION   ","        ","        ","        ","        ",%687  01477000
"NON-ZERO"," TIMEOUT"," VALUES ","EXPECTED","        ","        ",%221, 01478000
"        ","        ","        ","        ","        ","        ",%688  01479000
"INAPPROP","RIATE AC","TION ITE","M       ","        ","        ",%222  01480000
"        ","        ","        ","        ","        ","        ",%689  01481000
"ILLEGAL ","MODEM AT","TRIBUTE ","        ","        ","        ",%223, 01482000
"        ","        ","        ","        ","        ","        ",%690  01483000
"ADAPTER ","STATEMEN","T NOT SP","ECIFIED ","        ","        ",%224, 01484000
"        ","        ","        ","        ","        ","        "#;%691 01485000
DEFINE FILL15=                                                          01486000
FILL ERRMSG[15,*] WITH                                                  01487000
"TURNAROU","ND NOT S","PECIFIED","        ","        ","        ",%225, 01488000
"        ","        ","        ","        ","        ",1,%692           01489000
"NOISEDEL","AY NOT S","PECIFIED","        ","        ","        ",%226, 01490000
"        ","        ","        ","        ","        ","        ",%693  01491000
 "INTER-CH","ARACTER ","TRANSMIT"," DELAY N","OT SPECI","FIED    ",%227,01492000
 "        ","        ","        ","        ","        ","        ",%694 01493000
"PAGE NOT"," SPECIFI","ED      ","        ","        ","        ",%228, 01494000
"        ","        ","        ","        ","        ","        ",%695  01495000
"NO LINES"," SPECIFI","ED FOR D","CP      ","        ","        ",%229, 01496000
"        ","        ","        ","        ","        ","        ",%696  01497000
"MEMORY N","OT SPECI","FIED    ","        ","        ","        ",%230, 01498000
"        ","        ","        ","        ","        ","        ",%697  01499000
 "ERROR SW","ITCH DES","IGNATORS"," APPROPR","IATE TO ","RECEIVE ",%231,01500000
 "ACTION L","ISTS ONL","Y       ","        ","        ","        ",%701 01501000
"ACTION L","ABEL EXP","ECTED   ","        ","        ","        ",%232, 01502000
"        ","        ","        ","        ","        ","        ",%702  01503000
 "REQUEST ","FOR TERM","INAL REQ","UIRES A ","RECEIVE ","ADDRESS ",%233,01504000
 "        ","        ","        ","        ","        ","        ",%703 01505000
 "REQUEST ","FOR TERM","INAL REQ","UIRES A ","TRANSMIT"," ADDRESS",%234,01506000
 "        ","        ","        ","        ","        ","        ",%704 01507000
"REQUEST ","FOR TERM","INAL REQ","UIRES A ","TRANSMIS","SION NUM",%235, 01508000
"BER     ","        ","        ","        ","        ","        ",%705  01509000
"REQUEST ","FOR TERM","INAL REQ","UIRES TH","AT THE T","ERMINAL ",%236, 01510000
"BE CAPAB","LE OF BL","OCKED IN","PUT AND/","OR OUTPU","T       ",%706  01511000
"ADAPTER ","CLASS EX","PECTED  ","        ","        ","        ",%237, 01512000
"        ","        ","        ","        ","        ","        ",%707  01513000
"MODEM OR"," DIRECT ","EXPECTED","        ","        ","        ",%238, 01514000
"        ","        ","        ","        ","        ","        ",%708  01515000
"ADAPTER ","CLASS RE","QUIRES M","ODEM    ","        ","        ",%239, 01516000
"        ","        ","        ","        ","        ","        "#;%709 01517000
DEFINE FILL16=                                                          01518000
FILL ERRMSG[16,*] WITH                                                  01519000
"INCREMEN","T ITEM E","XPECTED ","        ","        ","        ",%240, 01520000
"        ","        ","        ","        ","        ",1,%710           01521000
"RETURN E","XPECTED ","        ","        ","        ","        ",%241, 01522000
"        ","        ","        ","        ","        ","        ",%711  01523000
"FILE ATT","RIBUTE S","TATEMENT"," EXPECTE","D       ","        ",%242, 01524000
"        ","        ","        ","        ","        ","        ",%712  01525000
"FAMILY N","OT SPECI","FIED    ","        ","        ","        ",%243, 01526000
"        ","        ","        ","        ","        ","        ",%713  01527000
"FAMILY S","TATEMENT"," NOT FIL","E DEFAUL","T ATTRIB","UTE STAT",%244, 01528000
"EMENT   ","        ","        ","        ","        ","        ",%714  01529000
"FILE OR ","STATION ","IDENTIFI","ER EXPEC","TED     ","        ",%245, 01530000
"        ","        ","        ","        ","        ","        ",%715  01531000
"TIMELIMI","T NOT SP","ECIFIED ","        ","        ","        ",%246, 01532000
"        ","        ","        ","        ","        ","        ",%716  01533000
"TRANSMIT","DELAY NO","T SPECIF","IED     ","        ","        ",%247, 01534000
"        ","        ","        ","        ","        ","        ",%717  01535000
"NO STATI","ON DEFIN","ITIONS G","IVEN    ","        ","        ",%248, 01536000
"        ","        ","        ","        ","        ","        ",%718  01537000
"NO TERMI","NAL DEFI","NITIONS ","GIVEN   ","        ","        ",%249, 01538000
"        ","        ","        ","        ","        ","        ",%719  01539000
"NO LINE ","DEFINITI","ONS GIVE","N       ","        ","        ",%250, 01540000
"        ","        ","        ","        ","        ","        ",%720  01541000
"NO DCP D","EFINITIO","NS GIVEN","        ","        ","        ",%251, 01542000
"        ","        ","        ","        ","        ","        ",%721  01543000
"INCOMPLE","TE DESCR","IPTION  ","        ","        ","        ",%252, 01544000
"        ","        ","        ","        ","        ","        ",%722  01545000
"THIS ACT","ION NOT ","ALLOWED ","FOR RECE","IVE STAT","EMENT   ",%253  01546000
"        ","        ","        ","        ","        ","        ",      01547000
"THIS ACT","ION NOT ","ALLOWED ","FOR TRAN","SMIT STA","TEMENT  ",%254  01548000
"        ","        ","        ","        ","        ","        "#;     01549000
DEFINE FILL17 =                                                         01550000
FILL ERRMSG[17,*] WITH                                                  01551000
"UNRECOGN","IZABLE C","HARACTER"," ON DOLL","AR CARD ","        ",%255  01552000
"        ","        ","        ","        ","        ","        ",      01553000
"        ","        ","        ","        ","        ","        ",%256  01554000
"        ","        ","        ","        ","        ","        ",      01555000
"ILLEGAL ","ITEM    ","        ","        ","        ","        ",%257  01556000
"        ","        ","        ","        ","        ","        ",      01557000
"FOR EXPE","CTED    ","        ","        ","        ","        ",%258  01558000
"ILLEGAL ","TEST STR","ING     ","        ","        ","        ",%259  01559000
"        ","        ","        ","        ","        ","        ",      01560000
"ILLEGAL ","TEST VAL","UE      ","        ","        ","        ",%260  01561000
"        ","        ","        ","        ","        ","        ",      01562000
"        ","        ","        ","        ","        ","        ",%261  01563000
"        ","        ","        ","        ","        ","        ",      01564000
"ILLEGAL ","TEST LIS","T       ","        ","        ","        ",%262  01565000
"        ","        ","        ","        ","        ","        ",      01566000
"EXPECTS ","THIS LIN","E TO HAV","E AN ACU","ADAPTER ","CLASS (8",%263  01567000
")       ","        ","        ","        ","        ","        ",      01568000
"POINTS T","O THIS L","INE IN A"," TYPE ST","ATEMENT ","BUT HAS ",%264  01569000
"AN ADDRE","SS ON AN","OTHER DC","P       ","        ","        ",      01570000
"EXPECTS ","THIS LIN","E TO BE ","OF TYPE ","DUPLEX(R","ECEIVE) ",%265  01571000
"AND POIN","T BACK T","O ITSELF","        ","        ","        ",      01572000
"EXPECTS ","THIS LIN","E TO BE ","OF TYPE ","DUPLEX(T","RANSMIT)",%266  01573000
" AND POI","NT BACK ","TO ITSEL","F       ","        ","        ",      01574000
"THE FOLL","OWING ST","ATIONS A","RE MENTI","ONED BUT"," NOT DEF",%267  01575000
"INED:   ","        ","        ","        ","        ","        ",      01576000
"THE FOLL","OWING LA","BELS ARE"," USED BU","T ARE NO","N-EXISTE",%268  01577000
"NT:     ","        ","        ","        ","        ","        ",      01578000
"THE FOLL","OWNG REQ","UESTS AR","E NOT DE","FINED:  ","        ",%269  01579000
"        ","        ","        ","        ","        ","        "#;     01580000
%                                                                       10000000
COMMENT#################################################################10001000
                   DECLARATIONS                                         10002000
#######################################################################;10003000
%                                                                       10004000
 COMMENT  SOME OF THE NDL COMPILER VARIABLES ARE ALSO USED IN           10005000
          THE GENERATOR AND ASSEMBLER. THEREFORE, BEWARE IF ONE EVER    10006000
          ATTEMPTS TO CHANGE OR MODIFY A DECLARATION.                   10007000
          SOME IDENTIFIERS DECLARED OR  DEFINED ARE COMMENTS (PRECEDED  10008000
          BY "COMMENT" OR "%") WHICH ARE HERE FOR DOCUMENTATION         10009000
          BUT ARE NEVER ACTUALLY USED IN THE NDL COMPILER/ASSEMBLER/    10010000
          GENERATOR.                                                    10011000
;                                                                       10012000
INTEGER       COUNT,                  % LENGTH OF SKANNED CONSTRUCT     10013000
              RCOUNT,                 % MAX. LENGTH OF SKANNED CONST    10014000
              CARDCNT,  % # OF CARDS PROCESSED IN PROGRAM.              10015000
              ITA,                                                      10016000
              ITB,                                                      10017000
              ITC,                                                      10018000
              ITD,                                                      10019000
              ITE,                                                      10020000
              NEXTINFO,                % NEXT INFO ENTRY                10021000
              LASTINFO,                % LAST INFO ENTRY                10022000
              CHR,                                                      10023000
              TERMINALINK,                                              10024000
              NXTELBAT,                                                 10025000
              CONTEXT,                                                  10026000
              TYPEDCP,                                                  10027000
              DCPEXW,                                                   10028000
              MADTYPES,                                                 10029000
              ASCIICODE,                                                10030000
              ADPARITY,                                                 10031000
              SYNCAD8,                                                  10032000
              NTC,                                                      10033000
              NAV,                                                      10034000
              IANT,                                                     10035000
              NRT,                     % INDEX INTO REMOTETYPE & APPT[*]10036000
              NIC,                                                      10037000
              MSC,                     % INDEX INTO MODEMSUM[*]         10038000
              DCPLINK,                                                  10039000
              ERRMAX,    % NDL ABORTED IF THIS IS EXCEEDED IN "FLAG".   10040000
              NEXTREC,                 % NEXT UNFO ENTRY                10041000
              LASTREC,                 % LAST UNFO ENTRY                10042000
              SAVEREC,                                                  10043000
              SCRAM,                                                    10044000
              LINEFORWARDLINK,                                          10045000
              STATIONFORWARDLINK,                                       10046000
              APPSET,                                                   10047000
              APPNUM,                                                   10048000
              ELCLASS,                                                  10049000
              NLABEL,                                                   10050000
              SAVEINFO,                                                 10051000
              REQFORWARDLINK,                                           10052000
              LINELINK,                                                 10053000
              PHSTN,           %  PHSTN - T ARE NOT USED BY PASS 2&3    10054000
              LASTUSED,                                                 10055000
              NEXTPOOL,                                                 10056000
              IREQIM ,                                                  10057000
              NEWSEQ,                                                   10058000
              NEWINCR,                                                  10059000
              SWRCNT,%# AND ERR INX OF UNIQUE ERROR SWITCH SETS, REC.   10060000
              SWTCNT,%# AND ERR INX OF UNIQUE ERROR SWITCH SETS, TRANS. 10061000
              SWCNT,                                                    10062000
              I, Q, T;                                                  10063000
%       ALL REAL VARIABLES IF NDL ARE REUSED IN PASS 2&3                10064000
REAL          GTA,                                                      10065000
              GTB,                                                      10066000
              GTC,                                                      10067000
              GTD,                                                      10068000
              GTE,                                                      10069000
              TIME1,                                                    10070000
              CODESIZE,                                                 10071000
              LBLCNT,                                                   10072000
              BGNCNT,                                                   10073000
              IFCNT,                                                    10074000
              TLBLCNT,                                                  10075000
              CODECNT,  % REL LOC OF MACRO IN SECT, 1ST PASS ONLY       10076000
              FIXCNT, % CODECNT FOR FIXUP CODE                          10077000
              LASTELBAT,                                                10078000
              NUM,                                                      10079000
              GETW,                                                     10080000
              SPEC,                    % ELBAT WORD OF SKANNED CONST.   10081000
              RESULT;                  % ELCLASS OF SKANNED CONST.      10082000
%                                                                       10083000
BOOLEAN       LISTOG,                  % IF TRUE, LIST INPUT            10084000
              NOHEADING,  % TRUE IF NO HEADER HAS BEEN PRINTED.         10085000
              EVERLISTED,                                               10086000
              TAPETOG,                                                  10087000
              CODETOG, SEQTOG, SUMTOG, NEWTOG, SINGLETOG,               10088000
              THRUTOG,                                                  10089000
              PAGETOG,                                                  10090000
              DEBUGTOG, % IF TRUE, LIST MACROS EMITTED IN FIRST PASS    10091000
              BON,                                                      10092000
              DOLLARTOG,               % IF TRUE, DOLLAR CARD PRESENT   10093000
              PRINTDOLLARTOG, % TRUE IF $-CARDS R 2 B LISTED.           10094000
              DUMPTOG,                                                  10095000
              VOIDTOG,                                                  10096000
              VOIDTTOG,  %  VOIDTTOG - DEFAULTTOG ARE NOT USED IN 2&3   10097000
              EXISTENCEFLAG,                                            10098000
              BNOMORECARDS,                                             10099000
              BSTOP,                                                    10100000
              LINETOBEPRINTED,                                          10101000
              BEND,                                                     10102000
              BREQ,                                                     10103000
              GOOD,                                                     10104000
              SERR, % SET WHEN ERROR PERTAINS TO A SECTION BUT NOT TO   10105000
                    % ONE PARTICULAR STATEMENT.                         10106000
              BRW,                                                      10107000
              BAD,                                                      10108000
              BA, BB, BW, BNOT,                                         10109000
              SWORD,                                                    10110000
              DWORD,                                                    10111000
              DEFAULTOG;                % IF TRUE, DEFAULT PART         10112000
DEFINE   SWSIZE = 100#; % MUST BE EVEN NUMBER.                          10113000
ARRAY         ACCUM [0:45],             % CURRENT SKANNED CONSTRUCT     10114000
              INFO [0:127,0:269],       % HOLDS ALL RESERVED WORDS      10115000
              DCPADD [0:8,0:90],                                        10116000
              DCPAC [0:8],                                              10117000
              DCPNL [0:7],                                              10118000
              DCPNS [0:7],                                              10119000
              ADCLTYPES [0:10],                                         10120000
              ADCHARSIZE [0:3],                                         10121000
              ADSET [0:6],                                              10122000
              FF01 [0: 5],              % USED FOR FLAG BIT TRANSFERS   10123000
              FF00 [0: 5],              % USED FOR FLAG BIT TRANSFERS   10124000
              APPT [0:255,0:13],                                        10125000
              TRANCLASS [0:100],                                        10126000
              REMOTETYPE [0:513],                                       10127000
              RTDELAY [0:50],                                           10128000
              MODEMSUM [0:50],                                          10129000
              DCPTC [0:50],                                             10130000
              DCPRT [0:50],                                             10131000
              LFTA [0:16],                                              10132000
              SWDA [0:SWSIZE], % SWDA[SWCNT].SWLINK([39:8]) CONTAINS    10133000
                               % THE ERROR INDEX INTO THE PROPER ERROR  10134000
                               % BRANCH SET FOR A PARTICULAR TRANSMIT   10135000
                               % OR RECEIVE STATEMENT. THIS ERROR INDEX 10136000
                               % IS INSERTED INTO THE EMITTED TRANSMIT  10137000
                               % OR RECEIVE MACRO IN THE PROCEDURES     10138000
                               % TRANSMITACTIONPART OR RECEIVEACTIONPART10139000
                               % RESPECTIVELY. SWDA[SWCNT].[14:15] CON- 10140000
                               % TAINS THE SWITCH COUNT WHICH IS BUMPED 10141000
                               % UP FOR EVERY TRANSMIT AND RECEIVE STMNT10142000
              SWR[ 0:SWSIZE DIV 2], % RECEIVE ACTION LABELS PUT HERE    10143000
                                    % SEE RECEIVEACTIONPART PROCEDURE   10144000
              SWT [0:SWSIZE DIV 2], % TRANSMIT ACTION LABELS PUT HERE   10145000
                                   % SEE TRANSMITACTIONPART PROCEDURE.  10146000
              REQBUFF [0:1000],                                         10147000
              SPECIAL [0:63],          % ELCLASS FOR CHARACTERS         10148000
              BCLASCII [0:63],         % BCL TRANSLATOR TABLE           10149000
              TACCUM [0:45],                                            10150000
             LBUFF, TLBUFF [0:14],                                      10151000
              CBUFF, TBUFF, NBUFF [0:10],                               10152000
              STACKHEAD [0:150],                                        10153000
              TP, TPA, TPB, TPC [0:60],                                 10154000
              DEFAULTA [0:60],                                          10155000
              LABL [0:200],                                             10156000
              SEQNA [0:3],                                              10157000
              UNFO [0:200,0:480],                                       10158000
              SCRAMBLE [0:5,0:149],                                     10159000
              POOL [0:100],                                             10160000
              ELBAT [0:87];                                             10161000
%                                                                       10162000
POINTER       ACCUMSTART,              % START IN ACCUM[*] OF CONSTRUCT 10163000
              STRINGSTART,    %  HERE THROUGH PTRB NOT USED BELOW       10164000
              LCR,                     % LAST CHAR. TO BE SCANNED       10165000
              NCR,                     % NEXT CHAR. TO BE SCANNED       10166000
              FCR,                     % FIRST CHAR. OF CURRENT CONST.  10167000
              LASTERROR,                                                10168000
              SEQNUM,                                                   10169000
              PLBUFF,                                                   10170000
              CLCR,                                                     10171000
              TLCR,                                                     10172000
              ACCUMINX,                                                 10173000
              PEM,                     % FIRST INDEX IN ERRMSG[*,0]     10174000
              PEMIT,                   % REQBUFF[*] POINTER             10175000
              SPEMIT,   % TEMPORARY SAVE LOC FOR PEMIT                  10176000
              RPT,      % SAVE PEMIT FOR FIXUP INSERTION                10177000
              RPTA, % SAVE RPT TEMPORARILY.                             10178000
              RPTB, %     DITTO                                         10179000
                   PSWR,                 %POINTS TO SW NOS. FOR REC.    10180000
                   PSWT,                 % POINTS TO SW NOS. FOR TRANSM.10181000
              PTRA,                                                     10182000
%             PTRT,                                                     10183000
              PTRB;                                                     10184000
%                                                                       15000000
COMMENT#################################################################15001000
                   DEFINES                                              15002000
#######################################################################;15003000
%                                                                       15004000
DEFINE        DW = DWORD #,  SW = SWORD #,  DFA = DEFAULTA #,           15005000
              B = BOOLEAN #, R = REAL #,                                15006000
              SSI = 0 #,  RSI = 1 #, MSI = 2 #, TSI = 3 #,              15007000
              LSI = 4 #;                                                15008000
DEFINE WRITELBUFF  = IF SINGLETOG THEN WRITE(PR,15,LBUFF[*])            15009000
                     ELSE WRITE(PR[DBL],15,LBUFF[*])    #,              15010000
       WRITELBUFFS = WRITE(PR,15,LBUFF[*])#,                            15011000
       WRITETLBUFF = IF SINGLETOG THEN WRITE(PR,15,TLBUFF[*])           15012000
                     ELSE WRITE(PR[DBL],15,TLBUFF[*])    #,             15013000
       WRITEREQ = BEGIN                                                 15014000
                  REPLACE POINTER(TLBUFF,6) BY                          15015000
                       IF LASTUSED = 1 THEN TLCR-72 ELSE CLCR-72 FOR 80;15016000
                  TLBUFF[14] := DELTA(POINTER(REQBUFF,8),PEMIT) &       15017000
                                R(LISTOG) [25:1] & R(CODETOG) [24:1];   15018000
                  WRITE(REQIM,15,TLBUFF[*]);                            15019000
                  IREQIM := IREQIM + 1;                                 15020000
                  END #,                                                15021000
       BLANKLBUFF = REPLACE PLBUFF BY " " FOR 15 WORDS    #;            15022000
DEFINE        LFTBRACKET =  LFTBRKT #,  RGTBRACKET =  RGTBRKT #;        15023000
DEFINE        BUMPNCR = IF REAL(NCR := NCR + 1,1) = C"%" THEN           15024000
                        IF NOT DOLLARTOG THEN READACARD   #;            15025000
DEFINE        C =  #;                                                   15026000
DEFINE        ENFO[ENFO1,ENFO2] = UNFO[ENFO1.[14:11],                   15027000
                                  ENFO1.[3:4] | 30 + ENFO2]  #;         15028000
DEFINE        GETFF(GETFF1)     =  GET(GETFF1,FALSE,FALSE)  #;          15029000
DEFINE        EXAMINE(EXAMINE1) = REAL(EXAMINE1,1)   #;                 15030000
DEFINE        STEPNCR           = NCR := NCR + 1   #;                   15031000
DEFINE        MAXADAPTERCLASS         = 30 #;                           15032000
COMMENT                                                                 15033000
DEFINE        MAXADAPTERCLASSFORLINES = 8 #;                            15034000
COMMENT                                                                 15035000
DEFINE        SPECIALCHAR = 1  #;                                       15036000
DEFINE        STATIONSEXIST = EXISTENCEFLAG.[0:1] #,                    15037000
              LINESEXIST    = EXISTENCEFLAG.[1:1] #,                    15038000
              DCPSEXIST     = EXISTENCEFLAG.[2:1] #;                    15039000
DEFINE PRINTLINE   = IF LINETOBEPRINTED THEN                            15040000
                     BEGIN WRITELBUFF; LINETOBEPRINTED := FALSE; END  #;15041000
ARRAY         CASEARRAY[0:400];                                         15042000
POINTER       STCASE, MCASE, TCASE, SCASE, LCASE, DCPCASE, FCASE;       15043000
POINTER       FOCASE, DESCRIPTIONTABLE;                                 15044000
LABEL         BOMB;                                                     15045000
%                                                                       20000000
COMMENT#################################################################20001000
                   FILE DECLARATIONS                                    20002000
#######################################################################;20003000
%                                                                       20004000
FILE LINE 18 (5,15);                                                    20005000
DEFINE PR=LINE#;                                                        20006000
FILE CARD (2,10,150);                                                   20007000
FILE TAPE    DISK SERIAL         "SOURCE"/"NDL"    (2,10,150,SAVE 99);  20008000
FILE NEWTAPE DISK SERIAL[20:600] "SOURCE"/"NDL"    (2,10,150,SAVE 99);  20009000
FILE NIF     DISK SERIAL[20:600] "SYSTEM"/"NIF"    (2,30,150,SAVE 99);  20010000
FILE REQIM   DISK SERIAL[20:600] "SYSTEM"/"REQUEST"(2,15,150,SAVE 99);  20011000
%                                                                       21000000
COMMENT#################################################################21001000
                   MORE DEFINES                                         21002000
#######################################################################;21003000
%                                                                       21004000
DEFINE       NEWT = NEWTAPE   #;                                        21005000
%                                                                       21006000
     DEFINE                                                             21007000
              UNKNOWN        =  0 #,                                    21008000
%             CONSTANTV      =  1 #,                                    21009000
              ENDOFITALL     =  2 #,                                    21010000
              DEFAULTV       =  3 #,                                    21011000
              MODEMV         =  4 #,                                    21012000
%             TERMINALV      =  5 #,                                    21013000
%             STATIONV       =  6 #,                                    21014000
%             LINEV          =  7 #,                                    21015000
%             DCPV           =  8 #,                                    21016000
%             THRUV          =  9 #,                                    21017000
              REQUEST        = 10 #,                                    21018000
              INTEGERV       = 11 #,                                    21019000
              LETTER         = 12 #,                                    21020000
              STRING         = 13 #,                                    21021000
              STRINGCON      = 14 #,                                    21022000
              ADDRESSV       = 15 #,                                    21023000
              TEXTV          = 16 #,                                    21024000
              ENABLEINPUTV   = 17 #,                                    21025000
              TRANV          = 18 #,                                    21026000
              BCCV           = 19 #,                                    21027000
              ENDV           = 20 #,                                    21028000
%             MEMORYV        = 21 #,                                    21029000
%             OUTPUTV        = 22 #,                                    21030000
%             TERMINATEV     = 23 #,                                    21031000
%             STOREV         = 24 #,                                    21032000
%             INPUTV         = 25 #,                                    21033000
              RECEIVEV       = 26 #,                                    21034000
%             RECEIVEFIRSTV  = 27 #,                                    21035000
              TRANSMITV      = 28 #,                                    21036000
%             IFV            = 29 #,                                    21037000
              THENV          = 30 #,                                    21038000
              BEGINV         = 31 #,                                    21039000
              DISPTOG        = 32 #,                                    21040000
              ERRORTOG       = 33 #,                                    21041000
              TOGGLEV        = 34 #,                                    21042000
              SPECIALCHRV    = 35 #,                                    21043000
%             ALTERNATEV     = 36 #,                                    21044000
              SEQUENCEV      = 37 #,                                    21045000
%             INHIBITSYNCV   = 38 #,                                    21046000
%             FREQUENCYV     = 40 #,                                    21047000
%             FETCHV         = 41 #,                                    21048000
              TALLYV         = 43 #,                                    21049000
              ERRORV         = 44 #,                                    21050000
%             INITIATEV      = 45 #,                                    21051000
              RETRYV         = 46 #,                                    21052000
%             SUMV           = 47 #,                                    21053000
%             GOV            = 48 #,                                    21054000
              TOV            = 49 #,                                    21055000
              ABORTV         = 50 #,                                    21056000
              ELSEV          = 51 #,                                    21057000
              LOGICALVALUE   = 52 #,                                    21058000
              STANDARDCODE   = 53 #,                                    21059000
%             CODEV          = 54 #,                                    21060000
%             BUFFERV        = 55 #,                                    21061000
              HORIZONTALV    = 56 #,                                    21062000
              VERTICALV      = 57 #,                                    21063000
              ODDV           = 58 #,                                    21064000
              EVENV          = 59 #,                                    21065000
%             ADAPTORV       = 60 #,                                    21066000
%             MODEV          = 61 #,                                    21067000
%             TRANSMISSIONV  = 62 #,                                    21068000
%             SCREENV        = 63 #,                                    21069000
              BLANK          = 64 #,                                    21070000
              WIDTHV         = 65 #,                                    21071000
              PAGEV          = 66 #,                                    21072000
              DOV            = 67 #,                                    21073000
%             ILLEGALCHARV   = 68 #,                                    21074000
%             EXAMINEV       = 69 #,                                    21075000
%             SECURITYV      = 70 #,                                    21076000
%             USERV          = 71 #,                                    21077000
%             TASKV          = 72 #,                                    21078000
%             CONNECTIONV    = 73 #,                                    21079000
              PERIOD         = 75 #,                                    21080000
              TERMINALMODE   = 76 #,                                    21081000
              LFTPAREN       = 77 #,                                    21082000
              NORMALV        = 78 #,                                    21083000
%             BLOCKEDV       = 79 #,                                    21084000
%             PHONEV         = 80 #;                                    21085000
              CHARACTERV     = 82 #,                                    21086000
%             WRAPAROUND     = 83 #,                                    21087000
              DOLLARSIGN     = 85 #,                                    21088000
              RGTPAREN       = 86 #,                                    21089000
              SLASH          = 87 #,                                    21090000
              COMMA          = 88 #,                                    21091000
              PERCENT        = 89 #,                                    21092000
              COLON          = 90 #,                                    21093000
              EQUAL          = 91 #,                                    21094000
              QUOTE          = 92 #,                                    21095000
              CONSTANTID     = 93 #,                                    21096000
%             FORMATID       = 94 #,                                    21097000
              TERMINALID     = 95 #,                                    21098000
              STATIONID      = 96 #,                                    21099000
              LINEID         = 97 #,                                    21100000
              DCPID          = 98 #,                                    21101000
%             FILEID         = 99 #,                                    21102000
              REQUESTID      =100 #,                                    21103000
              ILLEGALCHAR    =101 #,                                    21104000
              TERMINALDEFAULTID =102 #,                                 21105000
              STATIONDEFAULTID  =103 #,                                 21106000
              LINEDEFAULTID  =104 #,                                    21107000
              MODEMID        =105 #,                                    21108000
              FILEDEFAULTID  =106 #,                                    21109000
              FORV           =109 #,                                    21110000
              PLUS           =110 #,                                    21111000
              MINUS          =111 #,                                    21112000
              NOTV           =113 #,                                    21113000
%             ORV            =114 #,                                    21114000
%             ANDV           =115 #,                                    21115000
              RELOP          =116 #,                                    21116000
              LINETYPE       =117 #,                                    21117000
%             DUPLEXV        =118 #,                                    21118000
%             TYPEV          =119 #,                                    21119000
%             FAMILYV        =120 #,                                    21120000
%             PASSIVEV       =121 #,                                    21121000
              NULLV          =122 #,                                    21122000
%             EXCHANGEV      =123 #,                                    21123000
%             TURNAROUNDV    =125 #,                                    21124000
%             NOISEDELAYV    =126 #,                                    21125000
              TIMEV          =127 #,                                    21126000
%             BLOCKV         =128 #,                                    21127000
%             MAXINPUTV      =129 #,                                    21128000
%             ICTDELAYV      =130 #,                                    21129000
              FORMATCHARV    =131 #,                                    21130000
%             MYUSEV         =132 #,                                    21131000
%             LOGINV         =133 #,                                    21132000
              LFTBRKT        =135 #,                                    21133000
              RGTBRKT        =136 #,                                    21134000
              LTSIGN         =137 #,                                    21135000
              GTSIGN         =138 #,                                    21136000
%             INITIALIZEV    =139 #,                                    21137000
%             ONV            =140 #,                                    21138000
%             DELAYV         =141 #,                                    21139000
%             FINISHV        =142 #,                                    21140000
              BLKNV          =143 #,                                    21141000
              NOINPUTV       =146 #,                                    21142000
%             STANDARDV      =144 #,                                    21143000
              VARIANT        =145 #,                                    21144000
%             MCSID          =147 #,                                    21145000
%             TASKID         =148 #,                                    21146000
              DYNAMICV       =149 #,                                    21147000
              DIFFERENTV     =150 #,                                    21148000
              DIRECTV        =151 #,                                    21149000
              RETURNV        =152 #,                                    21150000
              ASTERISK       =153 #;                                    21151000
    DEFINE                                                              21152000
              SWLINK    = [39:8]       #,                               21153000
              TSPECIALDY= 0].[23:1     #,                               21154000
              TENDY     = 0].[22:1     #,                               21155000
              TBKDY     = 0].[21:1     #,                               21156000
              TLDDY     = 0].[20:1     #,                               21157000
              TWRUDY    = 0].[19:1     #,                               21158000
              TSEPARDY  = 0].[18:1     #,                               21159000
              TSC       = 0].[31:8     #,                               21160000
%             TRS       = 0].[39:8     #,                               21161000
              TMODE     = 0].[1:2      #,                               21162000
              TTRAN     = 0].[17:2     #,                               21163000
              TCODE     = 0].[15:8     #,                               21164000
              TSCRN     = 1].[31:1     #,                               21165000
              TBLK      = 1].[30:1     #,                               21166000
              TDUPLEX   = 1].[29:1     #,                               21167000
              TSAD      = 1].[28:1     #,                               21168000
              TIS       = 1].[27:1     #,                               21169000
              TMR       = 1].[26:1     #,                               21170000
              TTURNDY   = 1].[25:1     #,                               21171000
              TTIMOUTDY = 1].[24:1     #,                               21172000
              TBUF      = 2].[46:15    #,                               21173000
              TWID      = 2].[31:16    #,                               21174000
              TPG       = 2].[15:16    #,                               21175000
              TCLASS    = 1].[46:7     #,                               21176000
              TRAD      = 1].[35:2     #,                               21177000
              TTAD      = 1].[33:2     #,                               21178000
%             TRTL      = 7].[46:15    #,                               21179000
%             TRRL      = 7].[31:16    #,                               21180000
              TRLK      = 7].[46:31    #,                               21181000
              TRT       = 7].[7:8      #,                               21182000
              PAR       = 0].[7:4      #,                               21183000
              TIO       = 0].[3:2      #,                               21184000
              TMAXINP   = 1].[15:16    #,                               21185000
%             TINFO     = 0].[46:15    #,                               21186000
              TSWRD     = 8            #,                               21187000
              TTIMOUTU  = 3].[15:2     #,                               21188000
              TTIMOUT   = 3].[13:14    #,                               21189000
              TICTDLYU  = 3].[31:2     #,                               21190000
              TICTDLY   = 3].[29:14    #,                               21191000
              TIRCU     = 5].[31:2     #,                               21192000
              TIRC      = 5].[29:14    #,                               21193000
              THOME     = 3].[46:7     #,                               21194000
              TCLEAR    = 3].[39:8     #,                               21195000
%             TILLCHR   = 4].[46:7     #,                               21196000
              TSPECIAL  = 4].[46:7     #,                               21197000
              TEND      = 4].[39:8     #,                               21198000
              TBKSP     = 4].[31:8     #,                               21199000
              TLD       = 4].[23:8     #,                               21200000
              TWRU      = 4].[15:8     #,                               21201000
              TSEPAR    = 4].[ 7:8     #,                               21202000
              TCR       = 5].[46:7     #,                               21203000
              TLF       = 5].[39:8     #,                               21204000
              TADPTTYPE = 6            #,                               21205000
              TITRU     = 5].[15:2     #,                               21206000
              TITR      = 5].[13:14    #;                               21207000
DEFINE                                                                  21208000
              TCB       = [0:1]        #,                               21209000
              TBUFB     = [1:1]        #,                               21210000
              TSCB      = [2:1]        #,                               21211000
              TMDB      = [3:1]        #,                               21212000
              TBLKB     = [4:1]        #,                               21213000
              TWDB      = [5:1]        #,                               21214000
              TPGB      = [6:1]        #,                               21215000
              TMXINB    = [7:1]        #,                               21216000
              TPRB      = [8:1]        #,                               21217000
              TDPLXB    = [9:1]        #,                               21218000
              TADB      = [10:1]       #,                               21219000
              TDFB      = [11:1]       #,                               21220000
              TRQB      = [12:1]       #,                               21221000
              TTIMOTB   = [13:1]       #,                               21222000
              TICTB     = [14:1]       #,                               21223000
              TTRNB     = [15:1]       #,                               21224000
%             TILCHRB   = [16:1]       #,                               21225000
              TCRB      = [17:1]       #,                               21226000
              TLFB      = [18:1]       #,                               21227000
              THOMEB    = [19:1]       #,                               21228000
              TCLEARB   = [20:1]       #,                               21229000
              TENB      = [22:1]       #,                               21230000
              TBKB      = [23:1]       #,                               21231000
              TLDB      = [24:1]       #,                               21232000
              TWRUB     = [25:1]       #,                               21233000
              TISB      = [26:1]       #,                               21234000
              TTRB      = [27:1]       #,                               21235000
              TSPECIALB = [28:1]       #,                               21236000
              TSEPARB   = [29:1]       #,                               21237000
              TADPTB    = [21:1]       #;                               21238000
DEFINE                                                                  21239000
              SINFO     = 0].[46:15    #,                               21240000
              SRLK      = 9].[31:32    #,                               21241000
              STLK      = 0].[15:16    #,                               21242000
              SMYUSE    = 1].[18:2     #,                               21243000
              SLACK     = 1].[45:1     #,                               21244000
              SPOL      = 1].[44:1     #,                               21245000
              SLOGIN    = 1].[43:1     #,                               21246000
              SSPO      = 1].[42:1     #,                               21247000
%             SWRAP     = 1].[41:1     #,                               21248000
%             SMTL      = 1].[35:8     #,                               21249000
              SRAL      = 1].[27:4     #,                               21250000
              STAL      = 1].[23:4     #,                               21251000
              SADL      = 1].[27:8     #,                               21252000
              SFREQT    = 2].[15:16    #,                               21253000
              SFREQU    = 2].[15:2     #,                               21254000
              SFREQ     = 2].[13:14    #,                               21255000
              SWID      = 2].[31:16    #,                               21256000
              SPG       = 2].[46:15    #,                               21257000
%             SPHN      = 3            #,                               21258000
              SDUP      = 1].[40:1     #,                               21259000
              SMODE     = 1].[39:2     #,                               21260000
              SADDLIST  = 1].[37:1     #,                               21261000
              SPAR      = 1].[35:4     #,                               21262000
              SCODE     = 1].[31:4     #,                               21263000
%             SMCSLK    = 0].[31:16    #,                               21264000
              SSPECIAL  = 4].[46:7     #,                               21265000
              SEND      = 4].[39:8     #,                               21266000
              SBKSP     = 4].[31:8     #,                               21267000
              SLDEL     = 4].[23:8     #,                               21268000
              SWRU      = 4].[15:8     #,                               21269000
              SSEPAR    = 4].[ 7:8     #,                               21270000
              SNSL      = 5].[31:16    #,                               21271000
              SLLK      = 5].[46:15    #,                               21272000
%             STASKL    = 9].[46:15    #,                               21273000
%             SSLK      = 5].[15:16    #,                               21274000
              SSWRD     = 10           #,                               21275000
              SFLK      = 11].[46:15   #,                               21276000
%             SRTRY     = 1].[31:8     #,                               21277000
%             SAVEIDYA  = 11].[23:8    #,                               21278000
              SDLS      = 12           #,                               21279000
              SADD      = 13           #,                               21280000
              SMODEM    = 6].[46:15    #,                               21281000
              STIMEOTU  = 6].[31:2     #,                               21282000
              STIMEOT   = 6].[29:14    #,                               21283000
%             SALT      = 6].[15:6     #,                               21284000
              SADPTYPE  = 7            #;                               21285000
%                                                                       21286000
DEFINE        SMODB     = [0:1]        #,                               21287000
              STLB      = [1:1]        #,                               21288000
              SIOB      = [2:1]        #,                               21289000
              SLAB      = [3:1]        #,                               21290000
              SPOB      = [4:1]        #,                               21291000
              SLOGINB   = [5:1]        #,                               21292000
              SSPB      = [6:1]        #,                               21293000
%             SWRAPB    = [7:1]        #,                               21294000
%             SMCSB     = [8:1]        #,                               21295000
              SADB      = [9:1]        #,                               21296000
              SFREQB    = [10:1]       #,                               21297000
%             SSEB      = [11:1]       #,                               21298000
              SWIB      = [12:1]       #,                               21299000
              SPGB      = [13:1]       #,                               21300000
%             SPHB      = [14:1]       #,                               21301000
%             SCNTRB    = [15:1]       #;                               21302000
              SWRB      = [16:1]       #,                               21303000
              SENB      = [17:1]       #,                               21304000
              SBSB      = [18:1]       #,                               21305000
              SLDB      = [19:1]       #,                               21306000
              SDFB      = [20:1]       #,                               21307000
              STIMEOB   = [21:1]       #,                               21308000
              SADPTYPEB = [22:1]       #,                               21309000
%             STASKB    = [23:1]       #,                               21310000
              SALTB     = [25:1]       #,                               21311000
%             SRTRYB    = [26:1]       #,                               21312000
              SSPECIALB = [27:1]       #,                               21313000
              SSEPARB   = [28:1]       #,                               21314000
              SUSERB    = [24:1]       #;                               21315000
DEFINE                                                                  21316000
%             LINFO     = 0].[46:15    #,                               21317000
              LTYP      = 0].[39:8     #,        %  TYPE                21318000
              LAD       = 0].[23:24    #,        %  ADDRESS             21319000
              LMODE     = 2].[23:8     #,                               21320000
              LADTYPE   = 2].[15:8     #,                               21321000
              LADPTCL   = 2].[7:8      #,                               21322000
%             LCT       = 1].[39:2     #,        %  CONNECTION          21323000
              LDIR      = 1].[37:2     #,                               21324000
              LMODEM    = 5].[46:15    #,                               21325000
%             LSWRD     = 6            #,                               21326000
              LFTYP     = 7].[46:15    #,                               21327000
              LFDUP     = 7].[31:16    #,                               21328000
              LFACU     = 7].[15:16    #,                               21329000
%             LFALT     = 8].[46:15    #,                               21330000
              LNS       = 1].[23:8     #,        %  NO. STATIONS        21331000
              LSL       = 1].[15:16    #,        %  STATIONS LINK       21332000
              LACU      = 4].[46:15    #,                               21333000
              LDUP      = 4].[31:16    #,                               21334000
%             LALT      = 4].[15:6     #,                               21335000
              LFLK      = 5].[31:16    #,                               21336000
              LILK      = 5].[15:16    #,                               21337000
              LPH       = 3            #;                               21338000
DEFINE        LADB      = [0:1]        #,        %  ADDR  ST            21339000
              LAPB      = [1:1]        #,        %  ADAP  ST            21340000
              LOLB      = [2:1]        #,        %  OTHERLINE           21341000
%             LCTB      = [3:1]        #,        %  CONN TTP ST         21342000
              LSTB      = [4:1]        #,        %  STATION  ST         21343000
%             LPHB      = [6:1]        #,        %  PHONE ST            21344000
%             LCLB      = [7:1]        #,        %  CONCENTRATOR        21345000
              LDFB      = [8:1]        #,                               21346000
              LMMB      = [9:1]        #;                               21347000
%                                                                       21348000
DEFINE   %*****      MODEM INFO FORMAT       *****                      21349000
              MINFO     = 0].[46:15    #,                               21350000
              MIRTU     = 0].[31:2     #,                               21351000
              MIRT      = 0].[29:14    #,                               21352000
              MITTU     = 0].[15:2     #,                               21353000
              MITT      = 0].[13:14    #,                               21354000
              MIRNDU    = 1].[15:2     #,                               21355000
              MIRND     = 1].[13:14    #,                               21356000
              MITNDU    = 1].[31:2     #,                               21357000
              MITND     = 1].[29:14    #,                               21358000
              MITTDY    = 1].[0:1      #,                               21359000
              MITNDY    = 1].[1:1      #,                               21360000
%             MADPTCL   = 1            #,                               21361000
              MADPTTYPE = 2            #,                               21362000
              MSWRD     = 4            #;                               21363000
DEFINE   %*****      BOOLEAN FLAG WORD  FOR MODEMS      *****           21364000
              MADPTB    = [0:1]        #,                               21365000
              MTRNARNDB = [1:1]        #,                               21366000
              MNOISDLYB = [2:1]        #;                               21367000
DEFINE     %%%%%%%%% DCP DEFINITIONS FOR INFO                           21368000
              DLK       = 0].[15:16    #,                               21369000
              DMEM      = 0].[31:16    #,                               21370000
              DMNA      = 1].[15:16    #,                               21371000
              DMXA      = 1].[31:16    #,                               21372000
              DNTC      = 2].[31:16    #,                               21373000
              DNRT      = 2].[15:16    #,                               21374000
              DMEMB     = [0:1]        #;                               21375000
COMMENT                                                                 21376000
DEFINE                                                                  21377000
%             FFAMCNT   = 2            #,                               21378000
%             FENABLE   = 3].[0:1      #,                               21379000
              FWRAP     = 3].[1:1      #,                               21380000
%             FLOGACK   = 3].[2:1      #,                               21381000
              FUSERLINK = 4            #,                               21382000
%             FFMB      = [0:1]        #,                               21383000
%             FENB      = [1:1]        #,                               21384000
              FWRB      = [2:1]        #,                               21385000
%             FLAB      = [3:1]        #,                               21386000
%             FDFB      = [4:1]        #,                               21387000
              FUSB      = [5:1]        #;                               21388000
DEFINE                                                                  21389000
              SCRR      = [15:7]       #,                               21390000
              SCRC      = [8:9 ]       #,                               21391000
              SCR       = [15:16]      #,                               21392000
              TYPE      = [31:8]       #,                               21393000
              CLASS     = [23:8]       #,                               21394000
              LINKR     = [15:9]       #,                               21395000
              LINKC     = [6:7]        #,                               21396000
%             KFBIT     = [46:1]       #;                               21397000
              KUNKCNT   = [39:8]       #,                               21398000
              NAMECNT   = [31:8]       #,                               21399000
              IDCNT     = [23:8]       #,                               21400000
              CHRCNT    = [11:6]       #,                               21401000
%             LKC       = LINKC        #,                               21402000
%             LKR       = LINKR        #;                               21403000
              FRWD      = [41:1]       #,                               21404000
              RSVD      = [40:1]       #,                               21405000
              BLKCNT    = [46:5]       #,                               21406000
              IDL       = [39:8]       #,                               21407000
              LADDL     = [15:16]      #;                               21408000
DEFINE        CONTENTION = 0 #;                                         21409000
DEFINE   BBCC = [ 0:1]#, BRSP = [45:1]#, BRE  = [44:1]#,                21410000
         BRB  = [43:1]#, BRL  = [42:1]#, BRWR = [41:1]#, BRFS = [40:1]#;21411000
DEFINE        BRTALLY(BRTALLY1) = [23-BRTALLY1:1] #, BRTOG = [38:1] #,  21412000
              BRSEQ = [39:1] #, BRTRAN = [35:4] #,   BRBLK = [37:1] #,  21413000
              BRRA  = [31:4] #, BRTA   = [27:4] #;                      21414000
DEFINE        CONTROLST    = UNITARYSTRING   #,                         21415000
%             ENDST          = UNITARYSTRING   #,                       21416000
              BACKSPACEST  = UNITARYSTRING   #,                         21417000
              LINEDELETEST = UNITARYSTRING   #,                         21418000
%             WRUST          = UNITARYSTRING   #,                       21419000
%             SEPARATORST    = UNITARYSTRING   #,                       21420000
              FORMATCHARST = UNITARYSTRING   #;                         21421000
%                                                                       25000000
COMMENT#################################################################25001000
                   OUTPUT,ERROR,SCANNING,ETC. PROCEDURES                25002000
#######################################################################;25003000
%                                                                       25004000
INTEGER PROCEDURE SKAN; FORWARD;                                        25005000
INTEGER PROCEDURE NEXT; FORWARD;                                        25006000
INTEGER PROCEDURE TABLE(I); VALUE I; INTEGER I; FORWARD;                25007000
PROCEDURE     READACARD; FORWARD;                                       25008000
PROCEDURE     DEBLANK;   FORWARD;                                       25009000
PROCEDURE EMIT1(E); VALUE E; INTEGER E; FORWARD;                        25010000
INTEGER PROCEDURE NEXT;  NEXT := ELCLASS := TABLE(I := I + 1);          25011000
PROCEDURE STEPIT;                ELCLASS := TABLE(I := I + 1);          25012000
PROCEDURE DAYTIME(N);  VALUE N;  INTEGER N;                             25013000
    BEGIN                                                               25014000
         ARRAY A[0:6];                                                  25015000
         SWITCH FORMAT DT :=                                            25016000
              (X22,"BURROUGHS B-5700 NDL COMPILER MARK "),              25017000
              (X22,"BURROUGHS B-5700 NDL ASSEMBLER MARK "),             25018000
              (X*,                                                      25019000
 "XII.0"                                                                25020000
                     ,X3,A6,"DAY,  ",2(I2,"/"),I2,", ",                 25021000
               I2,":",A2,X1,A1,"M.");                                   25022000
         INTEGER D, H, M, MIN, Q, P, Y;                                 25023000
         LABEL EXIT;                                                    25024000
         FILL A[*] WITH                                                 25025000
             "   SUN", "   MON", "  TUES", "WEDNES",                    25026000
             " THURS", "   FRI", " SATUR";                              25027000
         Y := TIME(0);                                                  25028000
         D := Y.[17:6]|100 + Y.[11:6]|10 + Y.[5:6];                     25029000
         Y := Y.[29:6]|10 + Y.[23:6];                                   25030000
         FOR H := 31, IF Y MOD 4 = 0 THEN 29 ELSE 28,                   25031000
                  31, 30, 31, 30, 31, 31, 30, 31, 30 DO                 25032000
         IF D LEQ H THEN GO EXIT ELSE BEGIN D:=D-H; M:=M+1; END;        25033000
EXIT:                                                                   25034000
         H:=TIME1 DIV 216000; MIN:=(TIME1 DIV 3600) MOD 60;             25035000
         IF M LSS 2 THEN BEGIN Q := M+11;  P := Y-1  END                25036000
         ELSE  BEGIN Q := M-1;  P := Y;  END;   M := M+1;               25037000
         IF N = 1 THEN WRITE(PR[PAGE]);                                 25038000
         WRITE(LINE[NO],DT[N]);                                         25039000
         WRITE(LINE[DBL],DT[2],IF N=0 THEN 57 ELSE 61,                  25040000
               A[((Q|26-2)DIV 10+D+P+P.[11:10]+1)MOD 7],M,D,Y,          25041000
               12|REAL(Q:=H MOD 12=0)+Q,Q:=MIN MOD 10 +                 25042000
               (MIN DIV 10)|64,IF H GEQ 12 THEN 39 ELSE 17);            25043000
         NOHEADING:=FALSE;                                              25044000
    END OF DAYTIME;                                                     25045000
INTEGER PROCEDURE ONES(N);  VALUE N;  INTEGER N;                        25046000
    BEGIN                                                               25047000
COMMENT  "ONES" RETURNS THE NUMBER OF BITS TURNED ON IN THE MANTISSA    25048000
         OF "N".                                                        25049000
;                                                                       25050000
         INTEGER COUNT;                                                 25051000
         THRU 39 DO                                                     25052000
         BEGIN                                                          25053000
         COUNT := COUNT + N.[0:1] ;  N := N DIV 2;                      25054000
         END;                                                           25055000
         ONES := COUNT;                                                 25056000
    END;                                                                25057000
INTEGER PROCEDURE FIRSTONE(N);  VALUE N;  INTEGER N;                    25058000
    BEGIN                                                               25059000
COMMENT  "FIRSTONE" RETURNS THE NUMBER OF THE FIRST LEFTMOST BIT WHICH  25060000
         IS TURNED ON IN THE MANTISSA OF "N".                           25061000
;                                                                       25062000
         INTEGER COUNT;                                                 25063000
         LABEL EXIT;                                                    25064000
         THRU COUNT := 39 DO                                            25065000
         IF 0 & N[0:COUNT:=COUNT-1:1] = 1 THEN GO EXIT;                 25066000
EXIT:    FIRSTONE := COUNT + 1;                                         25067000
    END;                                                                25068000
PROCEDURE HEXA(HEX1); REAL HEX1;                                        25069000
    BEGIN                                                               25070000
         REAL DUMMY; % NO USE MAKING THIS PRESENT IF WE DONT USE IT     25071000
         HEX1:=REAL(BOOLEAN((HEX1:=HEX1.[3:4] &                         25072000
                 HEX1[ 9: 7:4] & HEX1[15:11:4] &                        25073000
                 HEX1[21:15:4] & HEX1[27:19:4] &                        25074000
                 HEX1[33:23:4]) + "666666") AND                         25075000
                 BOOLEAN("++++++")).[35:32] | 7 + HEX1;                 25076000
    END OF HEXA;                                                        25077000
PROCEDURE OCTAL(OCTAL1); REAL OCTAL1;                                   25078000
    BEGIN                                                               25079000
         REAL DUMMY; % NO USE MAKING THIS PRESENT IF WE DONT USE IT     25080000
         OCTAL1:=      0 & OCTAL1[44:23:3] &                            25081000
         OCTAL1[38:20:3] & OCTAL1[32:17:3] &                            25082000
         OCTAL1[26:14:3] & OCTAL1[20:11:3] &                            25083000
         OCTAL1[14: 8:3] & OCTAL1[ 8: 5:3] &                            25084000
         OCTAL1[ 2: 2:3];                                               25085000
    END OF OCTAL;                                                       25086000
PROCEDURE DUMPARRAY(A,K,L,M,N); VALUE K, L, M, N;                       25087000
   ARRAY A[0]; INTEGER K, L; REAL M, N;                                 25088000
    BEGIN                                                               25089000
         POINTER P, PX;                                                 25090000
         ARRAY B [0:1], X [0:20];                                       25091000
         LABEL EXIT;                                                    25092000
         INTEGER I, J;                                                  25093000
         IF NOT DUMPTOG THEN GO EXIT;                                   25094000
         B[0] := M;  B[1] := N;                                         25095000
         P := POINTER(A[K],8);                                          25096000
         REPLACE PX := POINTER(X,6) BY                                  25097000
            POINTER(B)+2 FOR 6, POINTER(B[1])+2 FOR 6, " " FOR 108;     25098000
         WRITE(PR[DBL],15,X[*]);                                        25099000
         WHILE I := I + 1 LEQ L DO                                      25100000
         BEGIN                                                          25101000
              REPLACE POINTER(X[18],8)+3 BY P:P FOR 3;                  25102000
              REPLACE POINTER(X[19],8)+3 BY P:P FOR 3;                  25103000
              HEXA(X[18]); HEXA(X[19]);                                 25104000
              REPLACE PX:PX BY POINTER(X[18])+2 FOR 6,                  25105000
                               POINTER(X[19])+2 FOR 6, "  ";            25106000
              IF I MOD 8 = 0 THEN                                       25107000
              BEGIN                                                     25108000
              WRITE(PR,15,X[*]);                                        25109000
              REPLACE PX:=POINTER(X) BY " " FOR 15 WORDS;               25110000
              END;                                                      25111000
         END;                                                           25112000
         IF (I - 1) MOD 8 NEQ 0 THEN                                    25113000
         WRITE(PR[DBL],15,X[*]);                                        25114000
EXIT:                                                                   25115000
    END;                                                                25116000
PROCEDURE DUMPOCT(A, K, L, M, N); VALUE K, L, M, N;                     25117000
   ARRAY A[0]; INTEGER K, L; REAL M, N;                                 25118000
    BEGIN                                                               25119000
         POINTER P, PX;                                                 25120000
         ARRAY B [0:1], X [0:20];                                       25121000
         LABEL EXIT;                                                    25122000
         INTEGER I, J;                                                  25123000
         IF NOT DUMPTOG THEN GO EXIT;                                   25124000
         B[0] := M;  B[1] := N;                                         25125000
         P := POINTER(A[K],6);                                          25126000
         REPLACE PX:=POINTER(X) BY " " FOR 15 WORDS;                    25127000
         REPLACE POINTER(X[18],6)+4 BY P:P FOR 4;                       25128000
         REPLACE POINTER(X[19],6)+4 BY P:P FOR 4;                       25129000
         OCTAL(X[18]);  OCTAL(X[19]);                                   25130000
         REPLACE PX:PX BY X[18], X[19], "  ",                           25131000
                          P - 2 FOR A[K].[46:7] - 4;                    25132000
         WRITE(PR[DBL],15,X[*]);                                        25133000
EXIT:                                                                   25134000
    END;                                                                25135000
PROCEDURE ENTER(L);  VALUE L;  INTEGER L;                               25136000
    BEGIN                                                               25137000
         IF NEXTINFO.SCRC EQL 270 THEN                                  25138000
              NEXTINFO := 0 & (ENTIER(NEXTINFO.SCRR + 1)) SCRR;         25139000
         ITA := 2 + (ACCUM[1].KUNKCNT + 2) DIV 8;                       25140000
         IF (ITB:=NEXTINFO.SCRC MOD 90) + ITA + L GTR 90 THEN           25141000
         IF NEXTINFO.SCRC > 180 THEN                                    25142000
         NEXTINFO := 0 & (ENTIER(NEXTINFO.SCRR + 1)) SCRR               25143000
         ELSE                                                           25144000
         NEXTINFO := NEXTINFO + ENTIER(90 - ITB);                       25145000
         ACCUM[0].SCR   := STACKHEAD[ITC := ABS(ACCUM[1]) MOD 125];     25146000
         ACCUM[0].IDL   := ENTIER(ITA - 1);                             25147000
         STACKHEAD[ITC] := NEXTINFO + 1;                                25148000
         REPLACE POINTER(INFO[NEXTINFO.SCRR,NEXTINFO.SCRC]) BY          25149000
                 POINTER(ACCUM) FOR ITA WORDS;                          25150000
         NEXTINFO := (LASTINFO := NEXTINFO) + ITA + L;                  25151000
    END;                                                                25152000
PROCEDURE ERR(EN); VALUE EN; INTEGER EN; FORWARD;                       25153000
PROCEDURE LERROR(I,J);  VALUE I,J;  INTEGER  I,J;                       25154000
    BEGIN                                                               25155000
         PTRA := POINTER(ENFO[I,16],6) + 6;                             25156000
         REPLACE POINTER(TLBUFF)+15 BY "LINE ",                         25157000
                                       PTRA FOR REAL(PTRA-1,1);         25158000
         WRITE(LINE[NO],15,TLBUFF[*]);                                  25159000
         ERR(263+J);                                                    25160000
    END OF LERROR;                                                      25161000
PROCEDURE FLAG(EN);  VALUE EN;  INTEGER EN;                             25162000
    BEGIN                                                               25163000
         BOOLEAN WARNING;                                               25164000
         INTEGER ROW;                                                   25165000
         IF NOT LISTOG THEN IF NOHEADING THEN DAYTIME(0);               25166000
         IF NOT SERR THEN                                               25167000
              IF NOT LISTOG OR LINETOBEPRINTED THEN                     25168000
              BEGIN                                                     25169000
                   LINETOBEPRINTED:=FALSE;                              25170000
                   WRITELBUFF;                                          25171000
              END;                                                      25172000
         REPLACE POINTER(TLBUFF) BY PLBUFF FOR 15 WORDS; % SAVE BUFFER  25173000
         IF WARNING:=BOOLEAN(EN.[46:1]) THEN                            25174000
         BEGIN                                                          25175000
              EN:=ABS(EN);                                              25176000
              REPLACE PLBUFF BY "WARNING   ";                           25177000
              IF SERR THEN REPLACE PLBUFF+10 BY " " FOR 77,             25178000
                                               LASTERROR FOR 8,         25179000
                                               " " FOR 12,              25180000
                                               "W" FOR 8,               25181000
                                               " " FOR 5                25182000
              ELSE REPLACE PLBUFF+10 BY "." FOR ITA:=78-DELTA(NCR,LCR), 25183000
                                        ":",                            25184000
                                        " " FOR 78-ITA,                 25185000
                                        LASTERROR FOR 8,                25186000
                                        " " FOR 12,                     25187000
                                        "W" FOR 8,                      25188000
                                        " " FOR 5;                      25189000
              WRITELBUFF;                                               25190000
         END                                                            25191000
         ELSE                                                           25192000
         BEGIN                                                          25193000
              ERRORCOUNT:=ERRORCOUNT+1;                                 25194000
              REPLACE PLBUFF BY "ERROR #",                              25195000
                                EN FOR 3 DIGITS;                        25196000
              IF SERR THEN REPLACE PLBUFF+10 BY " " FOR 77,             25197000
                                                LASTERROR FOR 8,        25198000
                                                " " FOR 12,             25199000
                                                "X" FOR 8,              25200000
                                                " " FOR 1,              25201000
                                                ERRORCOUNT FOR 3 DIGITS,25202000
                                                " " FOR 1               25203000
              ELSE REPLACE PLBUFF+10 BY "." FOR ITA:=78-DELTA(NCR,LCR), 25204000
                                        ":",                            25205000
                                        " " FOR 78-ITA,                 25206000
                                        LASTERROR FOR 8,                25207000
                                        " " FOR 11,                     25208000
                                        "X" FOR 8,                      25209000
                                        " " FOR 1,                      25210000
                                        ERRORCOUNT FOR 3 DIGITS;        25211000
              WRITELBUFF;                                               25212000
         END;                                                           25213000
         IF NOT BOOLEAN(ERRMSG[ROW:=EN DIV 15,11]) THEN                 25214000
              CASE ROW OF                                               25215000
              BEGIN                                                     25216000
                   FILL0;                                               25217000
                   FILL1;                                               25218000
                   FILL2;                                               25219000
                   FILL3;                                               25220000
                   FILL4;                                               25221000
                   FILL5;                                               25222000
                   FILL6;                                               25223000
                   FILL7;                                               25224000
                   FILL8;                                               25225000
                   FILL9;                                               25226000
                   FILL10;                                              25227000
                   FILL11;                                              25228000
                   FILL12;                                              25229000
                   FILL13;                                              25230000
                   FILL14;                                              25231000
                   FILL15;                                              25232000
                   FILL16;                                              25233000
              END OF CASE STATEMENT;                                    25234000
         REPLACE PLBUFF BY " " FOR 2 WORDS,                             25235000
              POINTER(ERRMSG[ROW,ENTIER(EN MOD 15|12)]) FOR 11 WORDS,   25236000
                        " " FOR 2 WORDS;                                25237000
         WRITELBUFF;                                                    25238000
         WRITE(LINE[DBL]); % TO SET OFF ERROR/WARNING MESSAGE.          25239000
         REPLACE LASTERROR BY SEQNUM FOR 8;                             25240000
         REPLACE PLBUFF BY POINTER(TLBUFF) FOR 15 WORDS;                25241000
         IF ERRORCOUNT GTR ERRMAX THEN % ABORT IF SPECIFIED MAX NUMBER  25242000
         BEGIN                         % OF ERRORS IS EXCEEDED.         25243000
               IF ERRORCOUNT=ERRMAX THEN                                25244000
              ERR(133); % ERROR LIMIT EXCEEDED.                         25245000
              GO BOMB;                                                  25246000
         END;                                                           25247000
    END;                                                                25248000
PROCEDURE ERROR(EN);  VALUE EN;  INTEGER EN;                            25249000
    BEGIN                                                               25250000
         FLAG(EN);                                                      25251000
         IF (ITA := ELBAT[I].CLASS) NEQ PERIOD AND                      25252000
              ITA NEQ ENDOFITALL THEN                                   25253000
         WHILE (ITA := NEXT) NEQ PERIOD AND ITA NEQ ENDOFITALL DO;      25254000
    END;                                                                25255000
%                                                                       25256000
PROCEDURE ERR(EN);  VALUE EN;  INTEGER EN;                              25257000
COMMENT  THIS PROCEDURE HANDLES ERROR MESSAGES THAT APPLY TO A SECTION  25258000
         OF CODE, RATHER THAN TO ONE PARTICULAR STATEMENT;              25259000
    BEGIN                                                               25260000
         SERR := TRUE;                                                  25261000
         FLAG(EN);                                                      25262000
         SERR := FALSE;                                                 25263000
    END;                                                                25264000
PROCEDURE DOLLARCARD;                                                   25265000
    BEGIN                                                               25266000
         LABEL AGAIN,EXIT;                                              25267000
DEFINE RESETEMALL(S1)=                                                  25268000
 BEGIN  FIRST:=TAPETOG:=LISTOG:=CODETOG:=SEQTOG:=SUMTOG:=               25269000
        NEWTOG:=SINGLETOG:=DUMPTOG:=DEBUGTOG:=NOT TRUE;                 25270000
        S1:=TRUE                                                        25271000
END#;                                                                   25272000
BOOLEAN  POP,FIRST,BSET,BRESET;                                         25273000
PROCEDURE S(S1); BOOLEAN S1;                                            25274000
BEGIN                                                                   25275000
    S1 :=                                                               25276000
    IF POP THEN FALSE & S1[45:46:46] ELSE                               25277000
     IF BSET THEN TRUE & S1[46:45:46] ELSE                              25278000
      IF BRESET THEN FALSE & S1[46:45:46] ELSE                          25279000
       TRUE;                                                            25280000
    IF FIRST THEN RESETEMALL(S1);                                       25281000
END S;                                                                  25282000
         INTEGER  T;                                                    25283000
         POINTER A, AA;                                                 25284000
         A := POINTER(TACCUM, 6);                                       25285000
         DOLLARTOG:=FIRST:=TRUE;                                        25286000
 AGAIN:                                                                 25287000
         DEBLANK;                                                       25288000
         IF ITA:=SPECIAL[CHR].CLASS NEQ LETTER THEN                     25289000
          IF ITA=PERCENT THEN GO EXIT ELSE                              25290000
           IF ITA=DOLLARSIGN THEN                                       25291000
            BEGIN                                                       25292000
              S(PRINTDOLLARTOG);                                        25293000
              LINETOBEPRINTED:=TRUE;                                    25294000
              NCR:=NCR+1;                                               25295000
              GO AGAIN;                                                 25296000
            END                                                         25297000
         ELSE                                                           25298000
         BEGIN                                                          25299000
              ERROR(255); GO EXIT; % UNRECOGNIZABLE CHAR.               25300000
         END;                                                           25301000
         T := 1;  AA := NCR;                                            25302000
         WHILE SPECIAL[REAL(NCR:=NCR+1,1)].CLASS = LETTER DO T:=T+1;    25303000
         REPLACE A BY 0 & T[46:4:5] FOR 1, AA FOR T;                    25304000
         IF A = "4LIST"  THEN S(LISTOG)   ELSE                          25305000
         IF A = "4TAPE" THEN IF FIRST THEN S(TAPETOG) ELSE ELSE         25306000
         IF A = "5MERGE" THEN S(TAPETOG) ELSE                           25307000
         IF A = "4CODE" THEN                                            25308000
         BEGIN                                                          25309000
              S(CODETOG);                                               25310000
              IF BSET OR NOT BSET AND NOT BRESET THEN EVERLISTED:=TRUE; 25311000
COMMENT  ONCE CODETOG IS SET, IT CANNOT BE RESET FOR THE THIRD PASS;    25312000
         END                                                            25313000
         ELSE                                                           25314000
         IF A = "6DEBUGN" THEN S(DEBUGTOG) ELSE                         25315000
         IF A = "5LIMIT" THEN                                           25316000
         BEGIN                                                          25317000
              DEBLANK;                                                  25318000
              IF SPECIAL[REAL(NCR,1)].CLASS=EQUAL THEN                  25319000
                   BEGIN                                                25320000
                   NCR:=NCR+1; DEBLANK;                                 25321000
                   END;                                                 25322000
              IF SPECIAL[REAL(NCR,1)].CLASS = INTEGERV THEN             25323000
              BEGIN                                                     25324000
                   T:=1;                                                25325000
                   WHILE SPECIAL[REAL(NCR:=NCR+1,1)].CLASS = INTEGERV DO25326000
                        T:=T+1;                                         25327000
                   ERRMAX:=INTEGER(NCR-T,MIN(T,8));                     25328000
              END                                                       25329000
              ELSE GO AGAIN;                                            25330000
         END                                                            25331000
         ELSE                                                           25332000
         IF A = "3SEQ"   THEN                                           25333000
         BEGIN                                                          25334000
              S(SEQTOG);                                                25335000
              DEBLANK;                                                  25336000
              IF SPECIAL[REAL(NCR,1)].CLASS = INTEGERV THEN             25337000
              BEGIN                                                     25338000
                   T := 1;                                              25339000
                   WHILE SPECIAL[REAL(NCR:=NCR+1,1)].CLASS = INTEGERV DO25340000
                         T := T + 1;                                    25341000
                   IF T > 1 THEN WHILE NCR - T = "0" DO T := T - 1;     25342000
                   IF T > 8 THEN T := 8;                                25343000
                   NEWSEQ := INTEGER(NCR - T,T);                        25344000
              END;                                                      25345000
              DEBLANK;                                                  25346000
              IF SPECIAL[REAL(NCR,1)].CLASS = PLUS THEN                 25347000
              BEGIN                                                     25348000
                   NCR := NCR + 1;                                      25349000
                   DEBLANK;                                             25350000
                   T := 1;                                              25351000
                   WHILE SPECIAL[REAL(NCR:=NCR+1,1)].CLASS = INTEGERV DO25352000
                         T := T + 1;                                    25353000
                   IF T > 1 THEN WHILE NCR - T = "0" DO T := T - 1;     25354000
                   IF T > 8 THEN T := 8;                                25355000
                   NEWINCR := INTEGER(NCR - T,T);                       25356000
              END                                                       25357000
              ELSE GO AGAIN;                                            25358000
         END                                                            25359000
         ELSE                                                           25360000
         IF A = "5NOSEQ" THEN SEQTOG:=FALSE ELSE                        25361000
         IF A = "7SUMMARY" THEN S(SUMTOG)    ELSE                       25362000
         IF A = "3NEW"     THEN S(NEWTOG)    ELSE                       25363000
         IF A = "6SINGLE" OR A = "3SGL" THEN                            25364000
              BEGIN S(SINGLETOG); S(LISTOG)  END ELSE                   25365000
         IF A = "4PAGE" THEN PAGETOG:=TRUE ELSE                         25366000
         IF A = "3POP" THEN                                             25367000
         BEGIN                                                          25368000
              POP:=TRUE; FIRST:=FALSE;                                  25369000
         END ELSE                                                       25370000
         IF A = "4VOID"    THEN S(VOIDTOG)   ELSE                       25371000
         IF A = "5VOIDT"   THEN S(VOIDTTOG)  ELSE                       25372000
         IF A = "4DUMP"    THEN S(DUMPTOG)   ELSE                       25373000
         IF A = "3SET"     THEN                                         25374000
         BEGIN                                                          25375000
              POP:=FIRST:=FALSE; BSET:=TRUE;                            25376000
         END                                                            25377000
         ELSE                                                           25378000
         IF A = "5RESET" THEN                                           25379000
         BEGIN                                                          25380000
              FIRST:=BSET:=FALSE; BRESET:=TRUE;                         25381000
         END;                                                           25382000
         GO AGAIN;                                                      25383000
 EXIT:   DOLLARTOG := FALSE;                                            25384000
    END;                                                                25385000
PROCEDURE READACARD;                                                    25386000
    BEGIN                                                               25387000
         LABEL  EOFT,EOFC,COMP,AGAIN,EXIT;                              25388000
         ARRAY IMAGESOURCE[0:0];                                        25389000
         IF BSTOP THEN BEGIN FLAG(252); GO BOMB; END;                   25390000
              IF LISTOG THEN PRINTLINE;                                 25391000
 AGAIN:                                                                 25392000
         IMAGESOURCE[0]:="R";                                           25393000
         IF TAPETOG AND LASTUSED=3 THEN                                 25394000
         BEGIN                                                          25395000
              LASTUSED:=2;                                              25396000
              READ(TAPE, 10, TBUFF[*]);                                 25397000
              READ(CARD,10,CBUFF[*]) [EOFC];                            25398000
              GO COMP;                                                  25399000
         END;                                                           25400000
         IF LASTUSED = 1 THEN                                           25401000
         BEGIN                                                          25402000
              READ(TAPE, 10, TBUFF[*])[EOFT];                           25403000
              GO COMP;                                                  25404000
         END;                                                           25405000
         READ(CARD, 10, CBUFF[*])[EOFC];                                25406000
         IF LASTUSED = 2 THEN  GO COMP;                                 25407000
         GO EXIT;                                                       25408000
 EOFT:   LASTUSED := 4;                                                 25409000
         CLOSE(TAPE);                                                   25410000
         IF NOT BNOMORECARDS THEN GO EXIT;                              25411000
EOFC:                                                                   25412000
         IF LASTUSED GEQ 3 THEN                                         25413000
         BEGIN                                                          25414000
              REPLACE POINTER(CBUFF) BY 3"1414141414141414"," " FOR 72; 25415000
              BSTOP:=TRUE;                                              25416000
              CLOSE(CARD);                                              25417000
         END                                                            25418000
         ELSE                                                           25419000
         BEGIN                                                          25420000
              REPLACE POINTER(CBUFF) BY " " FOR 72,"9" FOR 8;           25421000
              BNOMORECARDS:=TRUE;                                       25422000
              LASTUSED:=1;                                              25423000
         END;                                                           25424000
         GO EXIT;                                                       25425000
 COMP:   IF CLCR = TLCR FOR 8 THEN                                      25426000
         BEGIN                                                          25427000
              IMAGESOURCE[0]:="P"; LASTUSED:=2;                         25428000
              READ(TAPE,10,TBUFF[*])[EOFT];                             25429000
         END                                                            25430000
         ELSE                                                           25431000
         IF CLCR LSS TLCR FOR 8 THEN LASTUSED:=2                        25432000
         ELSE                                                           25433000
         BEGIN                                                          25434000
              IMAGESOURCE[0]:="T"; LASTUSED:=1;                         25435000
         END;                                                           25436000
 EXIT:   NCR := IF LASTUSED = 1 THEN TLCR - 72 ELSE CLCR - 72;          25437000
         LCR := NCR + 72;                                               25438000
         IF SEQTOG THEN                                                 25439000
         BEGIN                                                          25440000
              REPLACE LCR BY NEWSEQ FOR 8 DIGITS;                       25441000
              NEWSEQ := NEWSEQ + NEWINCR;                               25442000
         END;                                                           25443000
         CARDCNT:=CARDCNT+1;                                            25444000
         REPLACE POINTER(NBUFF) BY NCR FOR 80;                          25445000
         REPLACE SEQNUM BY LCR FOR 8;                                   25446000
         IF NOT BSTOP THEN                                              25447000
         BEGIN                                                          25448000
              REPLACE PLBUFF BY " " FOR 15,                             25449000
                             NCR FOR 72,                                25450000
                             " " FOR 8,                                 25451000
                             LCR FOR 8,                                 25452000
                             " " FOR 1,                                 25453000
                             POINTER(IMAGESOURCE)+7 FOR 1,              25454000
                             " " FOR 2,                                 25455000
                             CARDCNT FOR 4 DIGITS,                      25456000
                             " " FOR 9;                                 25457000
              LINETOBEPRINTED := TRUE;                                  25458000
         END;                                                           25459000
         REPLACE LCR BY C"%";                                           25460000
         IF NCR = "$" THEN                                              25461000
         BEGIN                                                          25462000
              LINETOBEPRINTED := FALSE;                                 25463000
              NCR:=NCR+1;                                               25464000
              CARDCNT:=CARDCNT-1;                                       25465000
              DOLLARCARD;                                               25466000
              IF LISTOG AND NOHEADING THEN DAYTIME(0);                  25467000
              REPLACE PLBUFF+107 BY " " FOR 4; % NO CARDCNT.            25468000
                   IF PRINTDOLLARTOG THEN LINETOBEPRINTED:=TRUE;        25469000
              PRINTLINE;                                                25470000
              IF PAGETOG THEN                                           25471000
              BEGIN                                                     25472000
                   PRINTLINE;                                           25473000
                   WRITE(LINE[PAGE]);                                   25474000
                   PAGETOG:=FALSE;                                      25475000
              END;                                                      25476000
              IF SEQTOG THEN NEWSEQ:=NEWSEQ-NEWINCR;                    25477000
              GO AGAIN;                                                 25478000
         END;                                                           25479000
         IF NOT BSTOP THEN                                              25480000
         BEGIN                                                          25481000
              IF VOIDTOG THEN GO AGAIN;                                 25482000
              IF VOIDTTOG THEN IF LASTUSED = 1 THEN GO AGAIN;           25483000
              IF BREQ THEN IF NCR NEQ "$" THEN WRITEREQ;                25484000
              IF NEWTOG THEN WRITE(NEWT, 10, NBUFF[*]);                 25485000
         END;                                                           25486000
    END;                                                                25487000
PROCEDURE DEBLANK;                                                      25488000
    BEGIN                                                               25489000
         LABEL LA;                                                      25490000
 LA:     WHILE CHR := EXAMINE(NCR) = C" " DO NCR := NCR + 1;            25491000
         IF CHR = C"%" THEN                                             25492000
         IF NOT DOLLARTOG THEN                                          25493000
         BEGIN                                                          25494000
              READACARD;  GO LA;                                        25495000
         END;                                                           25496000
    END;                                                                25497000
PROCEDURE MOVEBITS(CHR, NUMBITS, STRINCHR, ACCWRDNDX, ACCBITNDX);       25498000
    VALUE CHR, NUMBITS, STRINCHR, ACCBITNDX;                            25499000
    REAL  CHR, NUMBITS, STRINCHR, ACCBITNDX, ACCWRDNDX;                 25500000
    BEGIN                                                               25501000
         IF NUMBITS GTR 0 THEN                                          25502000
         ACCWRDNDX := ACCWRDNDX & CHR[46-ACCBITNDX:47-STRINCHR:NUMBITS];25503000
    END;                                                                25504000
BOOLEAN PROCEDURE GOBBLE;                                               25505000
%----------------------------------------------------------------------%25506000
%  UPON ENTRY TO THIS PROCEDURE, NCR IS POINTING TO THE FIRST CHARAC-  %25507000
%  TER FOLLOWING THE QUOTE. IF A CHARACTER SIZE (CSZ) WAS SPECIFIED ,  %25508000
%  IT HAS BEEN STORED IN NUM TEMPORARILY, OTHERWISE A DEFAULT VALUE    %25509000
%  OF 8-BIT CHARACTERS IS ASSUMMED.  GOBBLE WILL HANDLE ALL CONCATENA- %25510000
%  TIONS-- WHICH MUST BE ALIGNED ON CHARACTER BOUNDARIES,              %25511000
%        EXAMPLE.                                                      %25512000
%             4"A" "12"      IS ILLEGAL                                %25513000
%             4"A" 4"0""12"  IS LEGAL                                  %25514000
%  THE MAXIMUM POOL SIZE FOR A CONSTANT LIST IS 606 8-BIT CHARACTERS.  %25515000
%  A SINGLE CONSTANT MAY NOT EXCEED 64 CHARACTERS.  GOBBLE WILL RETURN %25516000
%  A .TRUE. VALUE IF THE STRING INPUT IS VALID. NCR WILL BE POINTING   %25517000
%  AT THE NEXT NON-BLANK CHARACTER FOLLOWING THE FINAL QUOTE OF THE    %25518000
%  STRING UPON EXITING GOBBLE.                                         %25519000
%----------------------------------------------------------------------%25520000
    BEGIN                                                               25521000
LABEL FSTCHR, BADHEX, BADCODE, ALIGNCHK, ALIGNERR, WRAPUP, EXIT;        25522000
REAL CNSTSIZE, NUMBITS, MAXCHRSIZ, FSTHEX, CSZ;                         25523000
         NUM := INTEGER(ACCUMSTART, ACCUM[1].CHRCNT);                   25524000
         IF NUM EQL 0 THEN CSZ := 8 ELSE                                25525000
         IF NUM NEQ 4 AND NUM NEQ 8 THEN                                25526000
              BEGIN                                                     25527000
BADCODE:                                                                25528000
              FLAG(010);                    % ILLEGAL STRING CODE       25529000
              GOBBLE := FALSE;                                          25530000
              GO EXIT;                                                  25531000
              END                                                       25532000
         ELSE CSZ := NUM;                                               25533000
         CNSTSIZE := 0;                                                 25534000
         CHR := EXAMINE(NCR);                                           25535000
         NUMBITS := MAXCHRSIZ := CSZ;                                   25536000
FSTCHR:  CASE ((CSZ DIV 4) -1) OF                                       25537000
         BEGIN                                                          25538000
         % CHECK FOR INVALID CHARACTERS WITH STRING SCOPE DEFINED       25539000
              BEGIN                          % HEXIDECIMAL STRINGS      25540000
              IF CHR GTR 9 THEN                                         25541000
              IF CHR GEQ 17 AND CHR LEQ 22 THEN CHR := CHR - 7          25542000
              ELSE                                                      25543000
                 BEGIN                                                  25544000
BADHEX:                                                                 25545000
                 FLAG(011);  GOBBLE := FALSE; GO EXIT;                  25546000
                 END;                                                   25547000
              FSTHEX := CHR;                                            25548000
              STEPNCR;                                                  25549000
              IF DELTA(NCR,LCR) = 0 THEN READACARD;                     25550000
              IF CHR := EXAMINE(NCR) GTR 9 THEN                         25551000
              IF CHR GEQ 17 AND CHR LEQ 22 THEN CHR := CHR - 7          25552000
              ELSE  GO BADHEX;                                          25553000
              CHR := CHR & FSTHEX [7:4];                                25554000
              IF CHR GTR 127 THEN                                       25555000
                  BEGIN                                                 25556000
                   FLAG(253);  GOBBLE:=FALSE;  GO EXIT;                 25557000
                  END;                                                  25558000
              END;                                                      25559000
              CHR := BCLASCII[CHR];                                     25560000
         END OF CHARACTER CHECKS;                                       25561000
% CHARACTER CAN NOW BE PLACED INTO ACCUM                                25562000
         IF CNSTSIZE + NUMBITS GTR 504 THEN                             25563000
              BEGIN                                                     25564000
              FLAG(012);  GOBBLE := FALSE;  GO EXIT;                    25565000
              END;                                                      25566000
         MOVEBITS(CHR, 7, 41, ACCUM[2+CNSTSIZE DIV 48],CNSTSIZE MOD 48);25567000
%                                                                       25568000
         CNSTSIZE := CNSTSIZE + 8;                                      25569000
         STEPNCR;                                                       25570000
         IF DELTA(NCR,LCR) = 0 THEN READACARD;                          25571000
         IF CHR := EXAMINE(NCR) EQL """ THEN                            25572000
         BEGIN                                                          25573000
% WE HAVE ENDING QUOTE, CHECK FOR CONCATENATION                         25574000
              BUMPNCR;                                                  25575000
              DEBLANK;                                                  25576000
              IF CHR := EXAMINE(NCR) EQL """ THEN                       25577000
% ITS HERE BUT NO CHARACTER SIZE SPECIFIED SO USE DEFAULT SEZE          25578000
              BEGIN                                                     25579000
              CSZ := 8;                                                 25580000
              GO TO ALIGNCHK;                                           25581000
              END;                                                      25582000
% ***** HANDLES NUMBERS BETWEEN QUOTES OR SPECIAL CHARACTER STOPPERS    25583000
         IF SPECIAL[CHR].CLASS NEQ INTEGERV THEN GO WRAPUP;             25584000
         WHILE CHR = 0 DO           % SCANS LEADING ZEROES              25585000
              BEGIN                                                     25586000
              IF CHR := REAL(NCR := NCR+1, 1) = C"%" THEN               25587000
              IF NOT DOLLARTOG THEN READACARD ;                         25588000
              END;                                                      25589000
         IF CHR NEQ "4" AND CHR NEQ "8" THEN GO BADCODE;                25590000
         CSZ := CHR;                                                    25591000
         BUMPNCR;                                                       25592000
         IF SPECIAL[CHR:=EXAMINE(NCR)].CLASS = INTEGERV THEN GO BADCODE;25593000
         DEBLANK;                                                       25594000
         IF CHR := EXAMINE(NCR) NEQ """ THEN                            25595000
              BEGIN                                                     25596000
              FLAG(051);                         % QUOTE EXPECTED       25597000
              GOBBLE := FALSE;  GO EXIT;                                25598000
              END;                                                      25599000
% ALIGNMENT ON CHARACTER BOUNDARIES IS CHECKED NEST AND CHARACTER SIZE, 25600000
% ETC UPDATED WHERE NECESSARY                                           25601000
ALIGNCHK: NUMBITS := CSZ;                                               25602000
              IF CNSTSIZE MOD NUMBITS NEQ 0 THEN                        25603000
ALIGNERR:          BEGIN                                                25604000
                   FLAG(052);               % CHARACTER NOT ALIGNED     25605000
                   GOBBLE := FALSE;  GO EXIT;                           25606000
                   END;                                                 25607000
              IF NUMBITS GTR MAXCHRSIZ THEN MAXCHRSIZ := NUMBITS;       25608000
% PICK UP NEXT CHARACTER AND CONTINUE ACCUMULATING                      25609000
              STEPNCR;                                                  25610000
              IF DELTA(NCR,LCR) = 0 THEN READACARD;                     25611000
         END OF CONCATENATION;                                          25612000
         GO FSTCHR;                                                     25613000
%                                                                       25614000
WRAPUP:  IF CNSTSIZE MOD 8 NEQ 0 THEN GO ALIGNERR;                      25615000
         COUNT := CNSTSIZE DIV 8;         % COUNT BY 8-BIT BYTES        25616000
         GOBBLE := TRUE;                                                25617000
EXIT:    END OF GOBBLE;                                                 25618000
INTEGER PROCEDURE SKAN;                                                 25619000
         BEGIN                                                          25620000
         LABEL AROUND, MAYBESTRING;                                     25621000
         COUNT := 0;  RCOUNT := 63;                                     25622000
         REPLACE POINTER(ACCUM,6) BY 0 FOR 45 WORDS;                    25623000
         ACCUMINX := ACCUMSTART;                                        25624000
         DEBLANK;                                                       25625000
         IF SKAN :=RESULT:=(SPEC:=SPECIAL[CHR]).CLASS LEQ LETTER        25626000
         THEN                                                           25627000
         BEGIN                                                          25628000
              FCR := NCR;                                               25629000
              DO                                                        25630000
              BEGIN                                                     25631000
                   STEPNCR;                                             25632000
    AROUND:        COUNT := COUNT + 1;                                  25633000
              END UNTIL SPECIAL[CHR := EXAMINE(NCR)].CLASS > RESULT;    25634000
              IF COUNT > RCOUNT THEN                                    25635000
              BEGIN                                                     25636000
                   FLAG(000);  COUNT := RCOUNT;                         25637000
              END;                                                      25638000
              REPLACE ACCUMINX:ACCUMINX BY FCR FOR COUNT;               25639000
              IF RESULT EQL INTEGERV THEN                               25640000
                   BEGIN                                                25641000
                   DEBLANK;                                             25642000
                   IF CHR := EXAMINE(NCR) EQL C""" THEN                 25643000
                        BEGIN                                           25644000
                        ACCUM[1].CHRCNT := COUNT := COUNT + 63 - RCOUNT;25645000
                        GO TO MAYBESTRING;                              25646000
                        END;                                            25647000
                   END;                                                 25648000
              IF CHR = C"%" THEN                                        25649000
              IF NOT DOLLARTOG  THEN                                    25650000
              BEGIN                                                     25651000
                   READACARD;  FCR := NCR;                              25652000
                   RCOUNT := RCOUNT - COUNT;  COUNT := -1;              25653000
                   GO AROUND;                                           25654000
              END;                                                      25655000
         ACCUM[1].CHRCNT  := COUNT := COUNT + 63 - RCOUNT;              25656000
         ACCUM[1].KUNKCNT := COUNT + 4;                                 25657000
         ACCUM[1].NAMECNT := 1;                                         25658000
         ACCUM[1].IDCNT   := 1;       % NO [SLASH] FORM RIGHT NOW 11-19 25659000
         END                                                            25660000
         ELSE                                                           25661000
         BEGIN                                                          25662000
              IF CHR = C""" THEN                                        25663000
              BEGIN                                                     25664000
MAYBESTRING:       STEPNCR;                                             25665000
                   IF DELTA(NCR,LCR) = 0 THEN READACARD;                25666000
                   IF GOBBLE THEN                                       25667000
                        BEGIN                                           25668000
                        SPEC := 0;                                      25669000
                        SPEC.CLASS := SKAN := RESULT := STRING;         25670000
                        ACCUM[1].CHRCNT := COUNT;                       25671000
                        END                                             25672000
                   ELSE SPEC := 0                                       25673000
              END                                                       25674000
              ELSE                                                      25675000
              BEGIN                                                     25676000
                   COUNT := 1;  BUMPNCR;                                25677000
              END;                                                      25678000
              ACCUM[0] := SPEC;                                         25679000
         END;                                                           25680000
         END;                                                           25681000
INTEGER PROCEDURE TABLE(P);  VALUE P;  INTEGER P;                       25682000
    BEGIN                                                               25683000
         LABEL RESCAN, ONN, FOUND, FINISH;                              25684000
         WHILE NXTELBAT LEQ P DO                                        25685000
         BEGIN                                                          25686000
 RESCAN: IF SKAN = ILLEGALCHAR THEN                                     25687000
         IF BSTOP THEN                                                  25688000
         SPEC.CLASS := ENDOFITALL                                       25689000
         ELSE                                                           25690000
         BEGIN                                                          25691000
              FLAG(002);  GO RESCAN;                                    25692000
         END;                                                           25693000
         IF SPEC.CLASS = INTEGERV THEN                                  25694000
         NUM := INTEGER(ACCUMSTART,ACCUM[1].CHRCNT)                     25695000
         ELSE                                                           25696000
         IF SPEC.CLASS = LETTER THEN                                    25697000
         BEGIN                                                          25698000
              IF (ITA := (SPEC := STACKHEAD[SCRAM := (Q := ACCUM[1])    25699000
                   MOD 125]).SCRR) + ITB := SPEC.SCRC NEQ 0 THEN        25700000
              DO                                                        25701000
              IF (SPEC := INFO[ITA,ITB]) = Q THEN                       25702000
              IF COUNT LSS 2 THEN GO ONN                                25703000
              ELSE                                                      25704000
              IF POINTER(ACCUM[2],6) = POINTER(INFO[ITA,ITB+1],6)       25705000
              FOR COUNT - 1 THEN                                        25706000
ONN:          BEGIN                                                     25707000
                   ITB := ITB - 1;                                      25708000
                   SPEC := INFO[ITA,ITB] & ITA SCRR & ITB SCRC;         25709000
                   GO TO FOUND;                                         25710000
              END                                                       25711000
              UNTIL (ITA := (SPEC := INFO[ITA,ITB - 1]).SCRR) +         25712000
                    (ITB := SPEC.SCRC) = 0;                             25713000
              SPEC := 0;                                                25714000
              GO TO FINISH;                                             25715000
 FOUND:                                                                 25716000
              IF SPEC.CLASS = CONSTANTID THEN                           25717000
              BEGIN                                                     25718000
                   GTA := INFO[SPEC.SCRR,SPEC.SCRC + SPEC.IDL + 1];     25719000
                   ITB := GTA.[37:6];                                   25720000
                   REPLACE STRINGSTART BY                               25721000
                       POINTER(POOL,8) +GTA.[23:24] FOR ITB   ;         25722000
                   ACCUM[1].CHRCNT := ITB;                              25723000
                   SPEC := 0 & STRING CLASS;                            25724000
              END;                                                      25725000
         END                                                            25726000
         ELSE                                                           25727000
         IF SPEC.CLASS = DOLLARSIGN THEN                                25728000
         BEGIN                                                          25729000
              DOLLARCARD;  READACARD;  GO RESCAN;                       25730000
         END;                                                           25731000
 FINISH: ACCUM[0] := SPEC;                                              25732000
         ELBAT[NXTELBAT] := SPEC;                                       25733000
         IF NXTELBAT := NXTELBAT + 1 > 74 THEN                          25734000
         BEGIN                                                          25735000
              REPLACE POINTER(ELBAT) BY POINTER(ELBAT[65]) FOR 10 WORDS;25736000
              I := I - 65;  P := P - 65;                                25737000
              NXTELBAT := 10;                                           25738000
         END;                                                           25739000
         END;                                                           25740000
         TABLE := ELBAT[P].CLASS;                                       25741000
    END;                                                                25742000
INTEGER PROCEDURE GET(T,BD,BG); VALUE T,BD,BG; INTEGER T; BOOLEAN BD,BG;25743000
    BEGIN                                                               25744000
         INTEGER  KCNT,JDCNT,CNT,IR,IC;                                 25745000
         REAL  Q,GID;                                                   25746000
         ARRAY  A[0:50];                                                25747000
         POINTER PA, PB, PA8 ;                                          25748000
         LABEL LA,LB,LC,ONN,FOUND,EXIT;                                 25749000
         PA := (PB := POINTER(A,6)) + 13;                               25750000
         PA8 := POINTER(A[1],8) + 3;                                    25751000
         KCNT := 3;                                                     25752000
         GID := NEXT;                                                   25753000
         IF GID = INTEGERV THEN  GO EXIT;                               25754000
         IF GID NEQ STRING THEN                                         25755000
         BEGIN                                                          25756000
              IF REAL(ACCUMSTART - 1,1) LEQ 1 THEN                      25757000
              IF SPECIAL[REAL(ACCUMSTART,1)].CLASS NEQ LETTER THEN      25758000
              GO EXIT;                                                  25759000
              IF BD THEN                                                25760000
              IF GID = DEFAULTV THEN                                    25761000
              BEGIN                                                     25762000
                   DEBLANK;                                             25763000
                   IF CHR NEQ "/" AND CHR NEQ ":" THEN  GO EXIT;        25764000
              END;                                                      25765000
         END;                                                           25766000
 LA:                                                                    25767000
         CNT := REAL(ACCUMSTART - 1,1);                                 25768000
         IF GID = STRING THEN                                           25769000
         REPLACE PA8:PA8 BY 0 & CNT[46:6:7] FOR 1,                      25770000
                 POINTER(ACCUM[2],8) FOR CNT                            25771000
         ELSE                                                           25772000
         REPLACE PA: PA BY ACCUMSTART - 1 FOR CNT + 1;                  25773000
         JDCNT := JDCNT + 1;                                            25774000
         IF KCNT := KCNT + CNT + 1 > 255 THEN                           25775000
         BEGIN                                                          25776000
              FLAG(000);  GO EXIT;                                      25777000
         END;                                                           25778000
         IF NOT BG THEN  GO TO LB;                                      25779000
         DEBLANK;                                                       25780000
         IF CHR = "/" THEN                                              25781000
         BEGIN                                                          25782000
              STEPNCR;  GID := NEXT;  GO LA;                            25783000
         END;                                                           25784000
 LB:                                                                    25785000
         A[1] := A[1] & KCNT [46:7] & 1 [39:8] & JDCNT [31:8];          25786000
         IF IR := SCRAMBLE[T,(((Q := A[1]).[23:24]) &                   25787000
                                Q [30:46:7]) MOD 125] NEQ 0 THEN        25788000
         DO                                                             25789000
         IF ENFO[IR,16] = Q THEN                                        25790000
         IF KCNT < 7 THEN  GO ONN                                       25791000
         ELSE                                                           25792000
         IF PB + 16 = POINTER(ENFO[IR,17],6) FOR KCNT - 6 THEN          25793000
         BEGIN                                                          25794000
 ONN:                                                                   25795000
              GID := ENFO[IR,15] & IR SCR;                              25796000
              GO FOUND;                                                 25797000
         END UNTIL IR := ENFO[IR,15].SCR = 0;                           25798000
         GID := 0;                                                      25799000
 FOUND:                                                                 25800000
         A[0] := GETW := GID;                                           25801000
         GID := GID.CLASS;                                              25802000
         REPLACE POINTER(ACCUM,6) BY PB FOR KCNT + 11;                  25803000
 EXIT:                                                                  25804000
         GET := GID;                                                    25805000
    END;                                                                25806000
PROCEDURE  ENTR(T);  VALUE T;  INTEGER T;                               25807000
    BEGIN                                                               25808000
         INTEGER  IT,IU;                                                25809000
         IT := (ACCUM[1].[46:7] + 1) DIV 8 + 17;                        25810000
         IF NEXTREC.[3:4] + (IT + 29) DIV 30 > 16 THEN                  25811000
         NEXTREC := 0 & INTEGER(NEXTREC.[15:12] + 1) [15:12];           25812000
         LASTREC := NEXTREC;                                            25813000
         ACCUM[0] := ACCUM[0] & (IT -16) IDL & ((IT + 29) DIV 30)       25814000
              BLKCNT & SCRAMBLE[T,IU := (((GTA := ACCUM[1]).[23:24]) &  25815000
              GTA [30:46:7]) MOD 125] SCR ;                             25816000
         REPLACE POINTER(ENFO[NEXTREC,15],8) BY                         25817000
                 POINTER(ACCUM,8) FOR IT - 15 WORDS;                    25818000
         NEXTREC := NEXTREC + (IT + 29) DIV 30;                         25819000
         SCRAMBLE[T,IU] := LASTREC;                                     25820000
    END;                                                                25821000
%                                                                       30000000
COMMENT#################################################################30001000
                   PROCEDURES WHICH PROCESS NDL STATEMENTS, PART I      30002000
#######################################################################;30003000
%                                                                       30004000
REAL PROCEDURE REQUESTST;                                               30005000
    BEGIN                                                               30006000
         LABEL XIT, CERR, DERR, EXIT;                                   30007000
         REAL IT,IV,IW;                                                 30008000
         GOOD := FALSE;                                                 30009000
         IF GETFF(RSI) = REQUESTID THEN                                 30010000
              BEGIN                        % ROOM TO ADD LINKS FOR      30011000
              IW := GETW.SCR;                                           30012000
              IT := ENFO[IW,1];                                         30013000
              END                          % REQUEST TABLE              30014000
         ELSE                                                           30015000
              BEGIN                                                     30016000
              ERROR(058);  GO EXIT;                                     30017000
              END;                                                      30018000
         IF NEXT EQL COLON THEN                                         30019000
              IF NEXT EQL RECEIVEV THEN IV:= 1       % RECEIVE ONLY = 1 30020000
              ELSE                                                      30021000
              IF ELCLASS EQL TRANSMITV THEN IV:= 2   % TRANSMIT ONLY= 2 30022000
              ELSE                                                      30023000
                   BEGIN                                                30024000
CERR:              ERROR(053);  GO EXIT;         % MISSING CONDITION    30025000
                   END                                                  30026000
              ELSE                                                      30027000
                   BEGIN                                                30028000
                   ERROR(045);  GO EXIT;         % COLON EXPECTED       30029000
                   END;                                                 30030000
         IW := 0 & IW[IF IV = 1 THEN 30 ELSE 46 :15];                   30031000
         IF TABLE(I +1) NEQ COMMA THEN GO XIT;                          30032000
         NEXT;                                                          30033000
         IF GETFF(RSI) = REQUESTID THEN                                 30034000
              BEGIN                     % ROOM TO ADD LINK CODE         30035000
              IW := IW & (GETW.SCR)[IF IV = 1 THEN 46 ELSE 30 :15];     30036000
              IT := R(B(IT) OR B(ENFO[(GETW.SCR),1]));                  30037000
              END                                                       30038000
         ELSE                                                           30039000
              BEGIN                                                     30040000
              ERROR(058);  GO EXIT;                                     30041000
              END;                                                      30042000
         IF NEXT EQL COLON THEN                                         30043000
              IF NEXT EQL RECEIVEV THEN                                 30044000
                   BEGIN                                                30045000
                   IF IV EQL 1 THEN                                     30046000
                        BEGIN                                           30047000
 DERR:                                                                  30048000
                        ERROR(059);  GO EXIT;                           30049000
                        END;                                            30050000
                   IV := 3;            % RECEIVE AND TRANSMIT = 3       30051000
                   GO XIT;                                              30052000
                   END                                                  30053000
              ELSE                                                      30054000
              IF ELCLASS NEQ TRANSMITV THEN GO CERR                     30055000
              ELSE                                                      30056000
                   BEGIN                                                30057000
                   IF IV EQL 2 THEN GO DERR;                            30058000
                   IV := 3;                                             30059000
                   END;                                                 30060000
XIT:     GOOD := TRUE;                                                  30061000
         REQUESTST := IV & IW [46:46:31] ;                              30062000
         BRW := BRW OR B(IT);                                           30063000
EXIT:    END       OF REQUESTST;                                        30064000
INTEGER PROCEDURE DELAYVALUEST;                                         30065000
    BEGIN                                                               30066000
         LABEL AGAIN, AWAY, ONN;                                        30067000
         INTEGER M, N, IV;                                              30068000
         GOOD := FALSE;                                                 30069000
         M := 47;                                                       30070000
         N := 45;                                                       30071000
AGAIN:   M := M - 16;                                                   30072000
         N := N - 16;                                                   30073000
         IF NEXT EQL INTEGERV THEN                                      30074000
         BEGIN                                                          30075000
              IF NUM = 0 THEN                                           30076000
              IF TABLE(I + 1) NEQ TIMEV THEN  GO ONN;                   30077000
              IV := IV & NUM [N:14];                                    30078000
         END                                                            30079000
         ELSE                                                           30080000
              BEGIN                                                     30081000
              ERROR(038);  GO AWAY;                                     30082000
              END;                                                      30083000
         IF NEXT EQL TIMEV THEN IV := IV & (ELBAT[I].TYPE)[M:2]         30084000
         ELSE                                                           30085000
              BEGIN                                                     30086000
              ERROR(046);  GO AWAY;                                     30087000
              END;                                                      30088000
ONN:     IF TABLE (I + 1) EQL COMMA THEN                                30089000
              BEGIN                                                     30090000
              NEXT;  GO AGAIN;                                          30091000
              END;                                                      30092000
         IF N NEQ 13 THEN IV := IV & IV[M - 16:M:16];                   30093000
         GOOD := TRUE;                                                  30094000
         DELAYVALUEST := IV;                                            30095000
AWAY:    END;                                                           30096000
INTEGER PROCEDURE PAGEST;                                               30097000
    BEGIN                                                               30098000
         LABEL AWAY;                                                    30099000
         GOOD := FALSE;                                                 30100000
         IF NEXT = INTEGERV THEN                                        30101000
         IF NUM LEQ 255 THEN  PAGEST := NUM                             30102000
         ELSE                                                           30103000
         BEGIN                                                          30104000
              ERROR(066);  GO AWAY;              % LINES/PAGE TOO LARGE 30105000
         END                                                            30106000
         ELSE                                                           30107000
         IF ELCLASS = NULLV THEN  PAGEST := 0                           30108000
         ELSE                                                           30109000
         BEGIN                                                          30110000
              ERROR(038);  GO AWAY;                                     30111000
         END;                                                           30112000
         GOOD := TRUE;                                                  30113000
 AWAY:                                                                  30114000
    END;                                                                30115000
INTEGER PROCEDURE ADAPTERST;                                            30116000
    BEGIN                                                               30117000
         LABEL AWAY, AGAIN;                                             30118000
         INTEGER IV;                                                    30119000
         GOOD := FALSE;                                                 30120000
AGAIN:   IF NEXT = INTEGERV THEN                                        30121000
         IF NUM LEQ MAXADAPTERCLASS AND NUM NEQ 0 THEN                  30122000
         IV := IV & 1 [ABS(NUM-1):1]                                    30123000
         ELSE                                                           30124000
              BEGIN                                                     30125000
                   ERROR(069);  GO AWAY;                                30126000
              END                                                       30127000
         ELSE                                                           30128000
              BEGIN                                                     30129000
                   ERROR(038);  GO AWAY;                                30130000
              END;                                                      30131000
         IF TABLE(I + 1) EQL COMMA THEN                                 30132000
              BEGIN                                                     30133000
                   NEXT;  GO AGAIN;                                     30134000
              END                                                       30135000
         ELSE  GOOD := TRUE;                                            30136000
         ADAPTERST := IV;                                               30137000
AWAY:    END;                                                           30138000
INTEGER PROCEDURE WIDTHST;                                              30139000
    BEGIN                                                               30140000
         LABEL AWAY;                                                    30141000
         GOOD := FALSE;                                                 30142000
         IF NEXT = INTEGERV THEN                                        30143000
         IF NUM LEQ 255 THEN  WIDTHST := NUM                            30144000
         ELSE                                                           30145000
         BEGIN                                                          30146000
              ERROR(070);  GO AWAY;              % WIDTH TOO LARGE      30147000
         END                                                            30148000
         ELSE                                                           30149000
         BEGIN                                                          30150000
              ERROR(038);  GO AWAY;                                     30151000
         END;                                                           30152000
         GOOD := TRUE;                                                  30153000
 AWAY:                                                                  30154000
    END;                                                                30155000
INTEGER PROCEDURE LOGICALVALUEST;                                       30156000
    BEGIN                                                               30157000
         GOOD := FALSE;                                                 30158000
         IF NEXT = LOGICALVALUE THEN                                    30159000
              BEGIN                                                     30160000
              LOGICALVALUEST := ELBAT[I].TYPE;  GOOD := TRUE;           30161000
              END                                                       30162000
         ELSE                                                           30163000
              ERROR(037);                                               30164000
    END;                                                                30165000
INTEGER PROCEDURE DYNAMICPART;                                          30166000
    BEGIN                                                               30167000
         GOOD := TRUE;                                                  30168000
         IF TABLE(I + 1) = LFTPAREN THEN                                30169000
         BEGIN                                                          30170000
              NEXT;                                                     30171000
              IF NEXT NEQ DYNAMICV THEN                                 30172000
              BEGIN                                                     30173000
                   ERROR(063);  GOOD := FALSE;                          30174000
              END                                                       30175000
              ELSE                                                      30176000
              IF NEXT NEQ RGTPAREN THEN                                 30177000
              BEGIN                                                     30178000
                   ERROR(044);  GOOD := FALSE;                          30179000
              END                                                       30180000
              ELSE                                                      30181000
              DYNAMICPART := 1;                                         30182000
         END;                                                           30183000
    END;                                                                30184000
INTEGER PROCEDURE TIMEST;                                               30185000
    BEGIN                                                               30186000
         LABEL AWAY;                                                    30187000
         INTEGER IV;                                                    30188000
         GOOD := FALSE;                                                 30189000
         IF NEXT = INTEGERV THEN                                        30190000
              IV.[13:14] := NUM                                         30191000
         ELSE                                                           30192000
              BEGIN                                                     30193000
              ERROR(038);  GO AWAY;                                     30194000
              END;                                                      30195000
         IF NUM = 0 THEN                                                30196000
         IF TABLE(I + 1) NEQ TIMEV THEN                                 30197000
         BEGIN                                                          30198000
              GOOD := TRUE;    GO AWAY;                                 30199000
         END;                                                           30200000
         IF NEXT = TIMEV THEN                                           30201000
              IV.[15:2]  := ELBAT[I].TYPE                               30202000
         ELSE                                                           30203000
              BEGIN                                                     30204000
              ERROR(046);  GO AWAY;                                     30205000
              END;                                                      30206000
         GOOD := TRUE;                                                  30207000
         TIMEST := IV;                                                  30208000
AWAY:    END;                                                           30209000
INTEGER PROCEDURE CODEST;                                               30210000
    BEGIN                                                               30211000
         LABEL AWAY;                                                    30212000
         GOOD := FALSE;                                                 30213000
         IF NEXT = STANDARDCODE THEN CODEST := ELBAT[I].TYPE            30214000
         ELSE                                                           30215000
         BEGIN                                                          30216000
              ERROR(067);  GO AWAY;                                     30217000
         END;                                                           30218000
         GOOD := TRUE;                                                  30219000
 AWAY:                                                                  30220000
    END;                                                                30221000
INTEGER PROCEDURE SCREENST;                                             30222000
    BEGIN                                                               30223000
         GOOD := FALSE;                                                 30224000
         IF NEXT = LOGICALVALUE THEN                                    30225000
         BEGIN                                                          30226000
              SCREENST := ELBAT[I].TYPE;  GOOD := TRUE;                 30227000
         END                                                            30228000
         ELSE                                                           30229000
              ERROR(037);                                               30230000
    END;                                                                30231000
INTEGER PROCEDURE DUPLEXST;                                             30232000
    BEGIN                                                               30233000
         GOOD := FALSE;                                                 30234000
         IF NEXT = LOGICALVALUE THEN                                    30235000
         BEGIN                                                          30236000
              DUPLEXST := ELBAT[I].TYPE;  GOOD := TRUE;                 30237000
         END                                                            30238000
         ELSE                                                           30239000
              ERROR(037);                                               30240000
    END;                                                                30241000
INTEGER PROCEDURE DISPTOGST;                                            30242000
    BEGIN                                                               30243000
         GOOD := FALSE;                                                 30244000
         IF NEXT = LOGICALVALUE THEN                                    30245000
         BEGIN                                                          30246000
              DISPTOGST := ELBAT[I].TYPE;  GOOD := TRUE;                30247000
         END                                                            30248000
         ELSE                                                           30249000
              ERROR(037);                                               30250000
    END;                                                                30251000
INTEGER PROCEDURE UNITARYSTRING;                                        30252000
    BEGIN                                                               30253000
         GOOD := FALSE;                                                 30254000
         IF NEXT = STRING THEN                                          30255000
         BEGIN                                                          30256000
              IF ACCUM[1].CHRCNT = 1 THEN                               30257000
              BEGIN                                                     30258000
                   UNITARYSTRING := REAL(POINTER(ACCUM[2],8), 1);       30259000
                   GOOD := TRUE;                                        30260000
              END                                                       30261000
              ELSE                                                      30262000
              ERROR(040);                                               30263000
         END                                                            30264000
         ELSE                                                           30265000
              ERROR(040);                                               30266000
    END;                                                                30267000
INTEGER PROCEDURE ALTERNATEST;                                          30268000
    BEGIN                                                               30269000
         LABEL  AGAIN,EXIT,LERR,LL;                                     30270000
         LABEL AWAY;                                                    30271000
         POINTER  P,PA,PB;                                              30272000
         INTEGER  IT,IU,IV;                                             30273000
         BOOLEAN  BA;                                                   30274000
         GOOD := FALSE;                                                 30275000
         P := POINTER(TPC,8);                                           30276000
         REPLACE P BY 0 FOR 30 WORDS;                                   30277000
         PA := P := P + 6;                                              30278000
 AGAIN:                                                                 30279000
         IF GET(SSI,FALSE,TRUE) = STATIONID THEN                        30280000
         IF IU := GETW.SCR NEQ SAVEREC THEN                             30281000
         BEGIN                                                          30282000
 LL:                                                                    30283000
              PB := PA;                                                 30284000
              THRU IT DO                                                30285000
              IF REAL(PB,2) = IU THEN                                   30286000
              BEGIN                                                     30287000
                   FLAG(108);                                           30288000
 LERR:                                                                  30289000
                   WHILE (IV:=TABLE(I+1)) NEQ COMMA AND IV NEQ PERIOD   30290000
                   DO  NEXT;                                            30291000
                   BA := TRUE;  GO AWAY;                                30292000
              END                                                       30293000
              ELSE                                                      30294000
              PB := PB + 2;                                             30295000
              IT := IT + 1;                                             30296000
              REPLACE P:P BY 0 & IU [46:14:15] FOR 2 ;                  30297000
         END                                                            30298000
         ELSE                                                           30299000
         BEGIN                                                          30300000
              FLAG(109);  GO TO LERR;                                   30301000
         END                                                            30302000
         ELSE                                                           30303000
         IF GETW.CLASS = UNKNOWN THEN                                   30304000
         BEGIN                                                          30305000
              ACCUM[0] := ACCUM[0] & 1 FRWD & STATIONID CLASS;          30306000
              ENTR(SSI);                                                30307000
              ENFO[LASTREC,SFLK] := STATIONFORWARDLINK;                 30308000
              STATIONFORWARDLINK := IU := LASTREC;                      30309000
              GO TO LL;                                                 30310000
         END                                                            30311000
         ELSE                                                           30312000
         BEGIN                                                          30313000
              FLAG(091);  GO TO LERR;                                   30314000
         END;                                                           30315000
 AWAY:                                                                  30316000
         IF TABLE(I + 1) = COMMA THEN                                   30317000
         BEGIN                                                          30318000
              NEXT;  GO AGAIN;                                          30319000
         END;                                                           30320000
         IF BA THEN                                                     30321000
         BEGIN                                                          30322000
              IF ELBAT[I].CLASS NEQ PERIOD THEN                         30323000
              WHILE NEXT NEQ PERIOD DO;                                 30324000
              GO EXIT;                                                  30325000
         END;                                                           30326000
         GOOD := TRUE;                                                  30327000
         ALTERNATEST := NEXTREC;                                        30328000
         TPC[0] := IT;                                                  30329000
         IU := 0;                                                       30330000
         THRU ((IT + 5) DIV 3 + 29) DIV 30 DO                           30331000
         BEGIN                                                          30332000
              REPLACE POINTER(ENFO[NEXTREC,0],8) BY POINTER(TPC[IU],8)  30333000
                   FOR 30 WORDS;                                        30334000
              NEXTREC := NEXTREC + 1;                                   30335000
              IU := IU + 30;                                            30336000
         END;                                                           30337000
 EXIT:                                                                  30338000
    END;                                                                30339000
PROCEDURE ASSEMBLESTATIONIDENTIFIER(L,I,P); INTEGER L,I; POINTER P;     30340000
    BEGIN                                                               30341000
         POINTER PA,PB;                                                 30342000
         INTEGER IT;                                                    30343000
         PA := P;                                                       30344000
         IT := ENFO[I,16].[31:8];           % ID COUNT IN UNFO TABLE    30345000
         PB := POINTER(ENFO[I,16],6) + 5;                               30346000
         WHILE IT := IT - 1 GEQ 0 DO                                    30347000
         BEGIN                                                          30348000
              REPLACE PA:PA BY PB:PB + 1 FOR REAL(PB,1);                30349000
              IF IT NEQ 0 THEN REPLACE PA:PA BY "/";                    30350000
         END;                                                           30351000
         L := DELTA(P, PA);                                             30352000
    END;                                                                30353000
PROCEDURE CHECKSTATIONFORWARD;                                          30354000
    BEGIN                                                               30355000
         POINTER P,PA;                                                  30356000
         INTEGER IT,IU;                                                 30357000
         DEFINE SF = STATIONFORWARDLINK #;                              30358000
         WHILE STATIONFORWARDLINK NEQ 0 DO                              30359000
         IF B(ENFO[SF,15]).FRWD THEN                                    30360000
         BEGIN                                                          30361000
              ERR(267); % FOLLOWING MENTIONED BUT NOT DEFINED.          30362000
              P := POINTER(TLBUFF,6);                                   30363000
              REPLACE P BY " " FOR 15 WORDS;                            30364000
              PA := POINTER(TPC,6);                                     30365000
              ASSEMBLESTATIONIDENTIFIER(IT,SF,PA);                      30366000
              WHILE IT GTR 80 DO                                        30367000
              BEGIN                                                     30368000
                   IU := 80;                                            30369000
                   WHILE PA + IU NEQ "/" AND IU NEQ 0 DO IU := IU - 1;  30370000
                   REPLACE P:P BY PA:PA FOR IU;                         30371000
                   WRITETLBUFF;                                         30372000
                   IT := IT - IU;                                       30373000
                   P := POINTER(TLBUFF,6);                              30374000
                   REPLACE P BY " " FOR 15 WORDS;                       30375000
                   P := P + 20;                                         30376000
              END;                                                      30377000
              REPLACE P:P BY PA FOR IT;                                 30378000
              IF DELTA(POINTER(TLBUFF,6), P) GTR 71 THEN                30379000
              BEGIN                                                     30380000
                   WRITETLBUFF;                                         30381000
                   P := POINTER(TLBUFF,6);                              30382000
                   REPLACE P BY " " FOR 15 WORDS;                       30383000
                   P := P + 20;                                         30384000
              END;                                                      30385000
              SF := ENFO[SF,SFLK];                                      30386000
         END                                                            30387000
         ELSE                                                           30388000
              SF := ENFO[SF,SFLK];                                      30389000
    END;                                                                30390000
INTEGER PROCEDURE TSCST;                                                30391000
    BEGIN                                                               30392000
         INTEGER  IV;                                                   30393000
         IV := UNITARYSTRING;                                           30394000
         IF GOOD THEN                                                   30395000
         IF TABLE(I + 1) = LFTPAREN THEN                                30396000
         BEGIN                                                          30397000
              NEXT;                                                     30398000
              IF NEXT = DYNAMICV THEN                                   30399000
              IF NEXT = RGTPAREN THEN  IV.[8:1] := 1                    30400000
              ELSE                                                      30401000
              BEGIN                                                     30402000
                   ERROR(044);  GOOD := FALSE;  IV := 0;                30403000
              END                                                       30404000
              ELSE                                                      30405000
              BEGIN                                                     30406000
                   ERROR(063);  GOOD := FALSE;  IV := 0;                30407000
              END;                                                      30408000
         END;                                                           30409000
         TSCST := IV;                                                   30410000
    END;                                                                30411000
INTEGER PROCEDURE LINEADDRESST;                                         30412000
    BEGIN                                                               30413000
         INTEGER IV;                                                    30414000
         LABEL EXIT;                                                    30415000
         GOOD := FALSE;                                                 30416000
         IF NEXT =INTEGERV THEN                                         30417000
         IF NUM < 8 THEN                                                30418000
         IF NEXT = COLON THEN  IV.[23:8] := NUM                         30419000
         ELSE                                                           30420000
         BEGIN                                                          30421000
              ERROR(045); GO EXIT;                                      30422000
         END                                                            30423000
         ELSE                                                           30424000
         BEGIN                                                          30425000
              ERROR(114); GO EXIT;                                      30426000
         END                                                            30427000
         ELSE                                                           30428000
         BEGIN                                                          30429000
              ERROR(038); GO EXIT;                                      30430000
         END;                                                           30431000
         IF NEXT = INTEGERV THEN IF NUM LSS 16 THEN                     30432000
         BEGIN                                                          30433000
              IV.[15:8] := NUM;                                         30434000
              IF NEXT = COLON THEN                                      30435000
              IF NEXT = INTEGERV THEN IF NUM LSS 16 THEN                30436000
              BEGIN                                                     30437000
                   IV.[7:8] := NUM;                                     30438000
                   PTRA := POINTER(DCPADD[IV.[23:8],0],8)               30439000
                        + (IV.[15:8] | 16 + IV.[7:8]) | 2;              30440000
                   IF REAL(PTRA,2) = 0 THEN                             30441000
                   BEGIN                                                30442000
                        REPLACE PTRA BY 0 & SAVEREC [46:14:15] FOR 2;   30443000
                        LINEADDRESST := IV;                             30444000
                        GOOD := TRUE;                                   30445000
                   END                                                  30446000
                   ELSE                                                 30447000
                   ERROR(112);                                          30448000
              END                                                       30449000
              ELSE                                                      30450000
                   ERROR(115)           % ADAPTER ADDRESS > 15          30451000
              ELSE                                                      30452000
                   ERROR(038)                                           30453000
              ELSE                                                      30454000
                   ERROR(045);                                          30455000
         END                                                            30456000
         ELSE                                                           30457000
              ERROR(116)                 % CLUSTER ADDRESS > 15         30458000
         ELSE                                                           30459000
              ERROR(038);                                               30460000
 EXIT:                                                                  30461000
    END;                                                                30462000
PROCEDURE CHASEREQLINK;                                                 30463000
    BEGIN                                                               30464000
         BOOLEAN NOTPRINTED;                                            30465000
         ITA := REQFORWARDLINK;                                         30466000
         DO                                                             30467000
         BEGIN                                                          30468000
              ITC := INFO[ITA.SCRR,ITA.SCRC].CHRCNT;                    30469000
              IF B(INFO[(ITB:=ITA-1).SCRR,ITB.SCRC].FRWD) THEN          30470000
              BEGIN                                                     30471000
         NOTPRINTED:=TRUE;                                              30472000
                   IF NOTPRINTED THEN                                   30473000
                        BEGIN                                           30474000
                        ERR(269); % REQUESTS NOT DEFINED.               30475000
                        NOTPRINTED:=FALSE;                              30476000
                        END;                                            30477000
                   REPLACE PLBUFF BY " " FOR 15 WORDS;                  30478000
                   REPLACE PLBUFF+15 BY                                 30479000
                        POINTER(INFO[ITA.SCRR,ITA.SCRC],6)+7 FOR ITC;   30480000
                   WRITELBUFF;                                          30481000
              END;                                                      30482000
              ITB := ITA + (ITC + 14) DIV 8;                            30483000
              ITA := INFO[ITB.SCRR,ITB.SCRC];                           30484000
         END                                                            30485000
         UNTIL ITA = 0;                                                 30486000
         REQFORWARDLINK := 0;                                           30487000
    END;                                                                30488000
%                                                                       30489000
INTEGER PROCEDURE NUMERICVALUE;                                         30490000
    BEGIN                                                               30491000
         GOOD := FALSE;                                                 30492000
         IF NEXT = INTEGERV THEN                                        30493000
         BEGIN                                                          30494000
              NUMERICVALUE := NUM;  GOOD := TRUE;                       30495000
         END                                                            30496000
         ELSE                                                           30497000
              ERROR(038);                                               30498000
    END;                                                                30499000
INTEGER PROCEDURE RETRYST;                                              30500000
    BEGIN                                                               30501000
         IF RETRYST := NUMERICVALUE GTR 255 THEN                        30502000
         BEGIN                                                          30503000
              ERROR(099);  RETRYST := 0;  GOOD := FALSE;                30504000
         END;                                                           30505000
    END;                                                                30506000
INTEGER PROCEDURE TERMINALADDRESST;                                     30507000
    BEGIN                                                               30508000
         LABEL EXIT;                                                    30509000
         INTEGER  TAST;                                                 30510000
         DEFINE E(E1) = BEGIN                                           30511000
                        ERROR(E1); TAST := R(GOOD:=FALSE); GO EXIT;     30512000
                        END   #;                                        30513000
         GOOD := TRUE;                                                  30514000
         IF NEXT = NULLV THEN  GO EXIT                                  30515000
         ELSE                                                           30516000
         IF ELCLASS = INTEGERV THEN IF NUM LSS 4 THEN                   30517000
         BEGIN                                                          30518000
              TAST.[15:8] := NUM;                                       30519000
              IF TABLE(I + 1) = COMMA THEN                              30520000
              BEGIN                                                     30521000
                   NEXT;                                                30522000
                   IF NEXT = INTEGERV THEN                              30523000
                   IF NUM < 4 THEN  TAST.[7:8] := NUM                   30524000
                   ELSE                                                 30525000
                        E(130)                                          30526000
                   ELSE                                                 30527000
                        E(38);                                          30528000
              END                                                       30529000
              ELSE                                                      30530000
              TAST.[7:8] := TAST.[15:8];                                30531000
              IF TABLE(I + 1) = LFTPAREN THEN                           30532000
              BEGIN                                                     30533000
                   NEXT;                                                30534000
                   IF NEXT = DIFFERENTV THEN  TAST.[16:1] := 1          30535000
                   ELSE                                                 30536000
                        E(131);                                         30537000
                   IF NEXT NEQ RGTPAREN THEN E(44);                     30538000
              END;                                                      30539000
         END                                                            30540000
         ELSE                                                           30541000
              E(130)                                                    30542000
         ELSE                                                           30543000
              E(38);                                                    30544000
         IF TAST.[7:8] NEQ TAST.[15:8] THEN  TAST.[16:1] := 1;          30545000
         TAST.[16:1] := 1;                                              30546000
 EXIT:                                                                  30547000
         TERMINALADDRESST := TAST;                                      30548000
    END;                                                                30549000
INTEGER PROCEDURE TRANST;                                               30550000
    BEGIN                                                               30551000
         GOOD := FALSE;                                                 30552000
         IF NEXT = INTEGERV THEN                                        30553000
         IF NUM < 4 THEN                                                30554000
         BEGIN                                                          30555000
              TRANST := NUM;  GOOD := TRUE;                             30556000
         END                                                            30557000
         ELSE                                                           30558000
              ERROR(107)                                                30559000
         ELSE                                                           30560000
         IF ELCLASS = NULLV THEN                                        30561000
         BEGIN                                                          30562000
              TRANST := 0;  GOOD := TRUE;                               30563000
         END                                                            30564000
         ELSE                                                           30565000
              ERROR(107);                                               30566000
    END;                                                                30567000
PROCEDURE DEFAULTST(TYPE);  VALUE TYPE;  INTEGER TYPE;                  30568000
    BEGIN                                                               30569000
         LABEL EXIT;                                                    30570000
         GOOD := FALSE;                                                 30571000
         IF TYPE = 1 THEN                                               30572000
         IF GETFF(TSI) = TERMINALDEFAULTID THEN                         30573000
         ITB := 0 & GETW SCR & 8 [39:8]                                 30574000
         ELSE                                                           30575000
         BEGIN                                                          30576000
              ERROR(126);  GO EXIT;                                     30577000
         END                                                            30578000
         ELSE                                                           30579000
         IF TYPE = 2 THEN                                               30580000
         IF GET(SSI,FALSE,TRUE) = STATIONDEFAULTID THEN                 30581000
         ITB := 0 & GETW SCR & 10 [39:8]                                30582000
         ELSE                                                           30583000
         BEGIN                                                          30584000
              ERROR(127);  GO EXIT;                                     30585000
         END                                                            30586000
         ELSE                                                           30587000
         IF TYPE = 3 THEN                                               30588000
         IF GETFF(LSI) = LINEDEFAULTID THEN                             30589000
         ITB := 0 & GETW SCR & 6 [39:8]                                 30590000
         ELSE                                                           30591000
         BEGIN                                                          30592000
              ERROR(128);  GO EXIT;                                     30593000
         END                                                            30594000
         ELSE                                                           30595000
         IF TYPE = 4 THEN                                               30596000
         IF GETFF(SSI) = FILEDEFAULTID THEN                             30597000
         ITB := 0 & GETW SCR & 6 [39:8]                                 30598000
         ELSE                                                           30599000
         BEGIN                                                          30600000
              ERROR(129);  GO EXIT;                                     30601000
         END;                                                           30602000
         ITE := ITB.SCR;                                                30603000
         REPLACE POINTER(DFA,8) BY POINTER(ENFO[ITE,0],8)               30604000
              FOR 15 WORDS;                                             30605000
         DWORD := BOOLEAN(DFA[ITB.[39:8]]);                             30606000
         GOOD := TRUE;                                                  30607000
 EXIT:                                                                  30608000
    END;                                                                30609000
INTEGER PROCEDURE TERMINALST;                                           30610000
    BEGIN                                                               30611000
         GOOD := FALSE;                                                 30612000
         IF GETFF(TSI) = TERMINALID THEN                                30613000
         BEGIN                                                          30614000
              TERMINALST := GETW.SCR;  GOOD := TRUE;                    30615000
         END                                                            30616000
         ELSE                                                           30617000
              ERROR(081);                                               30618000
    END;                                                                30619000
INTEGER PROCEDURE MODEMST;                                              30620000
    BEGIN                                                               30621000
         GOOD := FALSE;                                                 30622000
         IF GETFF(MSI) = MODEMID THEN                                   30623000
         BEGIN                                                          30624000
              MODEMST := GETW.SCR;  GOOD := TRUE;                       30625000
         END                                                            30626000
         ELSE                                                           30627000
              ERROR(193);                                               30628000
    END;                                                                30629000
INTEGER PROCEDURE ADDRESST;                                             30630000
    BEGIN                                                               30631000
         INTEGER  IT,IU,IV,IW,IX,IY;                                    30632000
         BOOLEAN   B,BA,BB;                                             30633000
         POINTER  PT,PU;                                                30634000
         LABEL  LA,LB,LC,EXIT;                                          30635000
         GOOD := FALSE;                                                 30636000
         PT := POINTER(TPC,8);                                          30637000
         REPLACE  PT BY 0 FOR 25 WORDS;                                 30638000
 LA:                                                                    30639000
         IF TABLE(I + 1) = LFTPAREN THEN                                30640000
         BEGIN                                                          30641000
              NEXT;  BA := TRUE;                                        30642000
         END                                                            30643000
         ELSE                                                           30644000
         BA := FALSE;                                                   30645000
 LB:                                                                    30646000
         IF NEXT = STRING THEN                                          30647000
         IF IV := ACCUM[1].CHRCNT LEQ 3 THEN                            30648000
         BEGIN                                                          30649000
              IF IT := IT + R(NOT BB).[0:1] GTR 50 THEN                 30650000
              BEGIN                                                     30651000
                   ERROR(071);  GO EXIT;                                30652000
              END;                                                      30653000
              PU := POINTER(TPC,8) + R(BB) | 3;                         30654000
              REPLACE PT:PT + (3 - IV) BY POINTER(ACCUM[2],8) FOR IV;   30655000
              IF IT > 1 THEN                                            30656000
              BEGIN                                                     30657000
                   FOR IU := 0 STEP 1 UNTIL IT - 2 DO                   30658000
                   IF REAL(PU,3) = REAL(PT-3,3) THEN                    30659000
                   BEGIN                                                30660000
                        FLAG(112);  B := TRUE;  IU := IT;               30661000
                   END                                                  30662000
                   ELSE                                                 30663000
                   PU := PU + 6;                                        30664000
                   IF IV NEQ IW THEN                                    30665000
                   BEGIN                                                30666000
                        FLAG(072);  B := TRUE;                          30667000
                   END;                                                 30668000
              END                                                       30669000
              ELSE                                                      30670000
              BEGIN                                                     30671000
                   IW := IV;                                            30672000
                   IF NOT BA THEN IY := IV;                             30673000
              END;                                                      30674000
         END                                                            30675000
         ELSE                                                           30676000
         BEGIN                                                          30677000
              B := TRUE;  FLAG(082);                                    30678000
         END                                                            30679000
         ELSE                                                           30680000
         BEGIN                                                          30681000
              ERROR(039);  GO EXIT;                                     30682000
         END;                                                           30683000
         IF BA THEN IF BB THEN                                          30684000
         BEGIN                                                          30685000
              BB := FALSE;                                              30686000
              IF IY = 0 THEN IY := IW;                                  30687000
              IW := IX;                                                 30688000
              IF NEXT NEQ RGTPAREN THEN                                 30689000
              BEGIN                                                     30690000
                   ERROR(044);  GO EXIT;                                30691000
              END;                                                      30692000
         END                                                            30693000
         ELSE                                                           30694000
         BEGIN                                                          30695000
              BB := TRUE;                                               30696000
              IX := IW;                                                 30697000
              IW := IY;                                                 30698000
              IF NEXT NEQ COMMA THEN                                    30699000
              BEGIN                                                     30700000
                   ERROR(050);  GO EXIT;                                30701000
              END;                                                      30702000
              GO TO LB;                                                 30703000
         END                                                            30704000
         ELSE                                                           30705000
         REPLACE PT:PT BY PT - 3 FOR 3;                                 30706000
         IF TABLE(I + 1) = COMMA THEN                                   30707000
         BEGIN                                                          30708000
              NEXT;  GO TO LA;                                          30709000
         END;                                                           30710000
         ADDRESST := IT & IW [23:8] & IY [15:8];                        30711000
         IF NOT B THEN  GOOD := TRUE                                    30712000
         ELSE                                                           30713000
         WHILE NEXT NEQ PERIOD AND ELCLASS NEQ ENDOFITALL DO;           30714000
 EXIT:                                                                  30715000
    END;                                                                30716000
DEFINE   FREQUENCYST    = TIMEST #;                                     30717000
COMMENT                                                                 30718000
DEFINE   SECURITYST     = NUMERICVALUE   #;                             30719000
INTEGER PROCEDURE ADAPTERCLASS;                                         30720000
    BEGIN                                                               30721000
         INTEGER IT;                                                    30722000
         LABEL EXIT;                                                    30723000
         DEFINE ERR(ERR1) =                                             30724000
                BEGIN ERROR(ERR1); GOOD:=FALSE; GO EXIT; END #;         30725000
         GOOD := TRUE;                                                  30726000
         IF NEXT NEQ INTEGERV OR NUM > 8 THEN ERR(237);                 30727000
         IT := NUM;                                                     30728000
         IF TABLE(I + 1) NEQ LFTPAREN THEN GO EXIT;                     30729000
         NEXT;                                                          30730000
         IF NEXT = MODEMV THEN  IT.[16:2] := 2                          30731000
         ELSE                                                           30732000
         IF ELCLASS NEQ DIRECTV THEN  ERR(238)                          30733000
         ELSE                                                           30734000
              IT.[16:2] := 1;                                           30735000
         IF NEXT NEQ  RGTPAREN THEN ERR(044);                           30736000
EXIT:                                                                   30737000
         ADAPTERCLASS := IT;                                            30738000
    END;                                                                30739000
PROCEDURE  ILLEGALCHARST;                                               30740000
    BEGIN                                                               30741000
         LABEL  AGAIN,EXIT;                                             30742000
         GOOD := FALSE;                                                 30743000
 AGAIN:                                                                 30744000
         IF NEXT = STRING THEN                                          30745000
         IF ACCUM[1].CHRCNT = 1 THEN                                    30746000
         BEGIN                                                          30747000
         END                                                            30748000
         ELSE                                                           30749000
         BEGIN                                                          30750000
              ERROR(040);  GO EXIT;                                     30751000
         END                                                            30752000
         ELSE                                                           30753000
         BEGIN                                                          30754000
              ERROR(040);  GO EXIT;                                     30755000
         END;                                                           30756000
         IF TABLE(I+1) = COMMA THEN                                     30757000
         BEGIN                                                          30758000
         NEXT;                                                          30759000
         GO AGAIN;                                                      30760000
         END;                                                           30761000
         GOOD := TRUE;                                                  30762000
 EXIT:                                                                  30763000
    END;                                                                30764000
INTEGER PROCEDURE  STATIONST;                                           30765000
    BEGIN                                                               30766000
         INTEGER IA,IC,ID,IE,NSLK;                                      30767000
         INTEGER FST;                                                   30768000
         REAL RD;                                                       30769000
         BOOLEAN  BA;                                                   30770000
         DEFINE  ST(ST1)   = ENFO[IA,ST1] #;                            30771000
         DEFINE  FLG(FLG1) = BEGIN FLAG(FLG1);  BA := TRUE;  END #;     30772000
         LABEL EXIT,LA;                                                 30773000
         GOOD := FALSE;                                                 30774000
         ID := -1;                                                      30775000
 LA:                                                                    30776000
         IF GET(SSI,FALSE,TRUE) NEQ STATIONID THEN                      30777000
              BEGIN                                                     30778000
                   ERROR(091);  GO EXIT;                                30779000
              END;                                                      30780000
         IA := GETW.SCR;                                                30781000
         IF ENFO[IA,SLLK] NEQ 0 THEN                                    30782000
              BEGIN                                                     30783000
                   ERROR(111);  GO EXIT;                                30784000
              END;                                                      30785000
         ENFO[IA,SLLK] := SAVEREC;                                      30786000
         IC := IC + 1;                                                  30787000
         IF IC = 1 THEN                                                 30788000
         BEGIN                                                          30789000
              TPB[0] := ST(SMODE);     TPB[1] := ST(SDUP);              30790000
              TPB[2] := ST(SADL);      TPB[3] := ST(SRLK);              30791000
              TPB[4] := ST(SADPTYPE);  TPB[5] := ST(SCODE);             30792000
              TPB[6] := ST(SADDLIST);  TPB[7] := (ST(SSWRD)).SMODB;     30793000
              TPC[1] := ST(SADD);                                       30794000
              FST := NSLK := GETW.SCR;                                  30795000
         END                                                            30796000
         ELSE                                                           30797000
         BEGIN                                                          30798000
              ENFO[NSLK,SNSL] := (NSLK := GETW.SCR);                    30799000
              TPC[IC] := RD := ST(SADD);                                30800000
              IF (ST(SSWRD)).SMODB NEQ TPB[7] THEN FLAG(132);           30801000
              IF NOT B(TPB[6]) THEN                                     30802000
              FOR IE := 1 STEP 1 UNTIL IC - 1 DO                        30803000
              IF TPC[IE] = RD THEN                                      30804000
              BEGIN                                                     30805000
                   FLG(117); IE:=IC+1                                   30806000
              END;                                                      30807000
              IF ST(SMODE) NEQ TPB[0] THEN                              30808000
                   FLG(118);                                            30809000
              IF ST(SDUP) NEQ TPB[1] THEN                               30810000
                   FLG(119);                                            30811000
              IF ST(SADL) NEQ TPB[2] THEN                               30812000
                   FLG(120);                                            30813000
              IF ST(SRLK) NEQ TPB[3] THEN                               30814000
                   FLG(121);                                            30815000
              IF ST(SADPTYPE) NEQ TPB[4] THEN                           30816000
                   FLG(122);                                            30817000
              IF ST(SCODE) NEQ TPB[5] THEN                              30818000
                   FLG(123);                                            30819000
              IF B(TPB[6] := R(B(TPB[6]) OR B(ST(SADDLIST)))) THEN      30820000
                   FLG(124);                                            30821000
         END;                                                           30822000
         IF IA := TABLE(I+1) = COMMA THEN                               30823000
         BEGIN                                                          30824000
              NEXT;  GO LA;                                             30825000
         END;                                                           30826000
         GOOD := TRUE;                                                  30827000
         STATIONST := IC & FST [31:16];                                 30828000
 EXIT:                                                                  30829000
    END;                                                                30830000
PROCEDURE LINETYPEST(T);  ARRAY T[0];                                   30831000
    BEGIN                                                               30832000
         INTEGER ITT,ITU,ITV;                                           30833000
         LABEL EXIT,LA,LB,LC;                                           30834000
         GOOD := FALSE;                                                 30835000
         TYPEDCP := 0;                                                  30836000
 LA:                                                                    30837000
         IF NEXT = LINETYPE THEN                                        30838000
         BEGIN                                                          30839000
              ITT := ELBAT[I].TYPE;                                     30840000
              IF ITT = 4 THEN                                           30841000
              IF TABLE(I + 1) = LFTPAREN THEN                           30842000
              BEGIN                                                     30843000
                   NEXT;                                                30844000
                   IF NEXT    = RECEIVEV  THEN  ITT := 5 ELSE           30845000
                   IF ELCLASS = TRANSMITV THEN  ITT := 6 ELSE           30846000
                   BEGIN                                                30847000
                        FLAG(027); GO TO LB;                            30848000
                   END;                                                 30849000
                   IF NEXT NEQ RGTPAREN THEN  FLAG(044);                30850000
              END;                                                      30851000
              ITU := T[LTYP];                                           30852000
              IF B(0 & ITU [ITT-1:1]) THEN                              30853000
              BEGIN                                                     30854000
                   ERROR(097);  GO EXIT;                                30855000
              END;                                                      30856000
              ITU := ITU & 1 [ITT -1: 1];                               30857000
              T[LTYP] := ITU;                                           30858000
              IF ITT > 4 THEN                                           30859000
              BEGIN                                                     30860000
                   IF NEXT NEQ COLON THEN                               30861000
                   BEGIN                                                30862000
                        ERROR(045);  GO EXIT;                           30863000
                   END;                                                 30864000
                   IF GETFF(LSI) = LINEID THEN                          30865000
                   BEGIN                                                30866000
                        IF GETW.SCR = SAVEREC THEN                      30867000
                        BEGIN                                           30868000
                             FLAG(125);  GO TO LB;                      30869000
                        END;                                            30870000
                        ITU := GETW.SCR;                                30871000
                        ITV := ENFO[ITU,LAD];                           30872000
                        TYPEDCP := TYPEDCP & 1 [(ITV.[23:8]):1];        30873000
                        ITV := ENFO[ITU,LTYP];                          30874000
                        IF ITT = 6 THEN                                 30875000
                        BEGIN                                           30876000
                             IF NOT B(ITV.[4:1]) THEN                   30877000
                             BEGIN                                      30878000
                                  FLAG(103);  GO TO LB;                 30879000
                             END;                                       30880000
                             IF ENFO[ITU,LDUP] NEQ SAVEREC THEN         30881000
                             BEGIN                                      30882000
                                  ERROR(101);  GO EXIT;                 30883000
                             END;                                       30884000
                             T[LDUP] := GETW.SCR;                       30885000
                        END                                             30886000
                        ELSE                                            30887000
                        IF ITT = 7 THEN                                 30888000
                        BEGIN                                           30889000
                             IF ENFO[ITU,LADPTCL] NEQ 7 THEN            30890000
                             BEGIN                                      30891000
                                  FLAG(102);  GO TO LB;                 30892000
                             END;                                       30893000
                        END                                             30894000
                        ELSE                                            30895000
                        IF ITT = 5 THEN                                 30896000
                        BEGIN                                           30897000
                             IF NOT B(ITV.[5:1]) THEN                   30898000
                             BEGIN                                      30899000
                                  FLAG(095);  GO TO LB;                 30900000
                             END;                                       30901000
                             IF ENFO[ITU,LDUP] NEQ SAVEREC THEN         30902000
                             BEGIN                                      30903000
                                  FLAG(101);  GO TO LB;                 30904000
                             END;                                       30905000
                             T[LDUP] := GETW.SCR;                       30906000
                        END;                                            30907000
                   END                                                  30908000
                   ELSE                                                 30909000
                   IF ELCLASS = UNKNOWN THEN                            30910000
                   BEGIN                                                30911000
                        ACCUM[0].FRWD  := 1;                            30912000
                        ACCUM[0].CLASS := LINEID;                       30913000
                        ENTR(LSI);                                      30914000
                        ITU := LASTREC;                                 30915000
                        REPLACE POINTER(TPA,8) BY 0 FOR 6 WORDS;        30916000
                        TPA[LFLK] := LINEFORWARDLINK;                   30917000
                        LINEFORWARDLINK := ITU;                         30918000
                        TPA[LILK] := LINELINK;                          30919000
                        LINELINK  := ITU;                               30920000
                        ITU := 0 & 1 [ITT - 1:1];                       30921000
                        TPA[LFTYP] := ITU;                              30922000
                        IF ITT = 5 OR ITT = 6 THEN                      30923000
                        BEGIN                                           30924000
                             T[LDUP] := LASTREC; TPA[LFDUP] := SAVEREC; 30925000
                        END                                             30926000
                        ELSE                                            30927000
                        IF ITT = 7 THEN                                 30928000
                        BEGIN                                           30929000
                             T[LACU] := LASTREC; TPA[LFACU] := SAVEREC; 30930000
                        END;                                            30931000
                        REPLACE POINTER(ENFO[LASTREC,0],8) BY           30932000
                             POINTER(TPA,8) FOR 10 WORDS;               30933000
                   END                                                  30934000
                   ELSE                                                 30935000
                   BEGIN                                                30936000
                        ERROR(092);  GO EXIT;                           30937000
                   END;                                                 30938000
              END;                                                      30939000
         END                                                            30940000
         ELSE                                                           30941000
         BEGIN                                                          30942000
              ERROR(104);  GO EXIT;                                     30943000
         END;                                                           30944000
 LB:                                                                    30945000
         IF TABLE(I+1) = COMMA THEN                                     30946000
         BEGIN                                                          30947000
              NEXT;  GO TO LA;                                          30948000
         END;                                                           30949000
         ITT := T[LTYP];                                                30950000
         IF B(ITT.[1:1]) THEN                                           30951000
         IF ITT & 0 [1:1] NEQ 0 THEN                                    30952000
              FLAG(105);                                                30953000
         IF B(ITT.[0:1]) THEN                                           30954000
         IF R(B(ITT) AND B(3"366")) NEQ 0 THEN                          30955000
              FLAG(106);                                                30956000
         IF B(ITT.[3:1]) THEN                                           30957000
         IF R(B(ITT) AND B(3"366")) NEQ 0 THEN                          30958000
              FLAG(110);                                                30959000
         IF B(ITT.[4:1]) AND B(ITT.[5:1]) THEN                          30960000
              FLAG(100);                                                30961000
         IF B(ITT.[6:1]) AND B(ITT.[5:1]) THEN                          30962000
              FLAG(096);                                                30963000
         IF B(ITT.[2:1]) AND B(ITT.[5:1]) THEN                          30964000
              FLAG(098);                                                30965000
         GOOD := TRUE;                                                  30966000
 EXIT:                                                                  30967000
    END;                                                                30968000
PROCEDURE CHECKLINEFORWARD;                                             30969000
    BEGIN                                                               30970000
         REAL ITA;                                                      30971000
         LABEL  EXIT,LA,LB;                                             30972000
         DEFINE LI = LINEFORWARDLINK  #;                                30973000
         IF LI = 0 THEN GO TO EXIT;                                     30974000
 LA:                                                                    30975000
         ITA := ENFO[LI,15];                                            30976000
         IF B(ITA.FRWD) THEN                                            30977000
         BEGIN                                                          30978000
              ERRORCOUNT := ERRORCOUNT + 1;                             30979000
              REPLACE POINTER(TLBUFF) BY " " FOR 15 WORDS;              30980000
              ITB := ENFO[LI,16].CHRCNT ;                               30981000
              REPLACE POINTER(TLBUFF,6) BY                              30982000
                   "<<<",ERRORCOUNT FOR 3 DIGITS,">>>  LINE ",          30983000
                   POINTER(ENFO[LI,16],6) + 6 FOR ITB,                  30984000
                   " IS MENTIONED BUT NOT DEFINED";                     30985000
              WRITETLBUFF;                                              30986000
         END;                                                           30987000
         LI := ENFO[LI,LFLK];                                           30988000
         IF LI NEQ 0 THEN GO TO LA;                                     30989000
 EXIT:                                                                  30990000
    END;                                                                30991000
INTEGER PROCEDURE BUFFERST;                                             30992000
    BEGIN                                                               30993000
         GOOD := FALSE;                                                 30994000
         IF NEXT = INTEGERV THEN                                        30995000
         IF NUM LSS 32767 THEN                                          30996000
         BEGIN                                                          30997000
              BUFFERST := NUM;  GOOD := TRUE;                           30998000
         END                                                            30999000
         ELSE                                                           31000000
              ERROR(083)                                                31001000
         ELSE IF ELCLASS EQL NULLV THEN                                 31002000
                   BEGIN                                                31003000
                   BUFFERST := 0;  GOOD := TRUE;                        31004000
                   END                                                  31005000
              ELSE                                                      31006000
                   ERROR(009);                                          31007000
    END;                                                                31008000
INTEGER PROCEDURE PARITYST;                                             31009000
    BEGIN                                                               31010000
         LABEL AGAIN,AWAY,LA,LB,LC;                                     31011000
              GTA := 0;                                                 31012000
         GOOD := FALSE;                                                 31013000
         IF TABLE(I + 1) = NULLV THEN                                   31014000
              BEGIN                                                     31015000
              NEXT; NEXT;  GO LC;                                       31016000
              END                                                       31017000
         ELSE                                                           31018000
 AGAIN:  IF NEXT = HORIZONTALV THEN                                     31019000
         IF NEXT = COLON THEN                                           31020000
         IF NEXT = EVENV THEN  GTA.[3:1] := 1                           31021000
         ELSE                                                           31022000
         IF ELCLASS = ODDV THEN  GTA.[2:1] := 1                         31023000
         ELSE                                                           31024000
         BEGIN                                                          31025000
 LA:          ERROR(084);  GO AWAY;                                     31026000
         END                                                            31027000
         ELSE                                                           31028000
         BEGIN                                                          31029000
 LB:          ERROR(045);  GO AWAY;                                     31030000
         END                                                            31031000
         ELSE                                                           31032000
         IF ELCLASS = VERTICALV THEN                                    31033000
         IF NEXT = COLON THEN                                           31034000
         IF NEXT = EVENV THEN  GTA.[1:1] := 1                           31035000
         ELSE                                                           31036000
         IF ELCLASS = ODDV THEN  GTA.[0:1] := 1                         31037000
         ELSE                                                           31038000
         GO TO LA                                                       31039000
         ELSE                                                           31040000
         GO TO LB                                                       31041000
         ELSE                                                           31042000
         BEGIN                                                          31043000
              ERROR(085);  GO AWAY;                                     31044000
         END;                                                           31045000
         IF NEXT = COMMA THEN                                           31046000
         GO AGAIN;                                                      31047000
LC:      IF ELCLASS NEQ PERIOD THEN                                     31048000
         BEGIN                                                          31049000
              ERROR(034);  GO AWAY;                                     31050000
         END;                                                           31051000
         GOOD := TRUE;                                                  31052000
         PARITYST := GTA;                                               31053000
 AWAY:                                                                  31054000
    END;                                                                31055000
INTEGER PROCEDURE TERMINALMODEST;                                       31056000
    BEGIN                                                               31057000
         GOOD := FALSE;                                                 31058000
         IF NEXT = TERMINALMODE THEN                                    31059000
         BEGIN                                                          31060000
              TERMINALMODEST := ELBAT[I].TYPE;                          31061000
              GOOD := TRUE;                                             31062000
         END                                                            31063000
         ELSE                                                           31064000
              ERROR(086);                                               31065000
    END;                                                                31066000
INTEGER PROCEDURE SPOST;                                                31067000
    BEGIN                                                               31068000
         GOOD := FALSE;                                                 31069000
         IF NEXT = LOGICALVALUE THEN                                    31070000
         BEGIN                                                          31071000
              SPOST := ELBAT[I].TYPE;  GOOD := TRUE;                    31072000
         END                                                            31073000
         ELSE                                                           31074000
              ERROR(037);                                               31075000
    END;                                                                31076000
%                                                                       35000000
COMMENT#################################################################35001000
                   TIME CONVERSION PROCEDURES AND EMITTERS              35002000
#######################################################################;35003000
%                                                                       35004000
INTEGER PROCEDURE TIMECONV(T,U);  VALUE T,U;  INTEGER T,U;              35005000
    BEGIN                                                               35006000
         INTEGER  R;                                                    35007000
         IF U = 3 THEN                                                  35008000
         BEGIN                                                          35009000
              T := T | 60;  U := 2;                                     35010000
         END;                                                           35011000
         IF (T | (IF U = 0 THEN 1 ELSE IF U = 1 THEN 1000               35012000
                   ELSE 1000000)) GTR 450000000 THEN FLAG(254)          35013000
         ELSE                                                           35014000
         BEGIN                                                          35015000
              T := (T | (IF U = 0 THEN 10 ELSE IF U = 1 THEN 10000      35016000
                  ELSE 10000000)) DIV 32;                               35017000
              WHILE T > 61 AND R < 7 DO                                 35018000
              BEGIN                                                     35019000
                   T := T DIV 8;  R := R + 1;                           35020000
              END;                                                      35021000
              TIMECONV := (T := (T DIV 2) + REAL(BOOLEAN(T) AND T < 61))35022000
                   & R [7:3];                                           35023000
         END;                                                           35024000
    END;                                                                35025000
INTEGER PROCEDURE CTIME(TA,TB); VALUE TA,TB; INTEGER TA,TB;             35026000
    BEGIN                                                               35027000
         REAL X,Y;                                                      35028000
         X := (TA.[7:3]) * 8 | TA.[4:5];                                35029000
         Y := (TB.[7:3]) * 8 | TB.[4:5];                                35030000
         CTIME := IF X = Y THEN 0 ELSE IF X < Y THEN -1 ELSE 1;         35031000
    END;                                                                35032000
PROCEDURE EMIT1(E);  VALUE E;  INTEGER E;                               35033000
    BEGIN                                                               35034000
         INTEGER ARRAY A[0:2];                                          35035000
         BOOLEAN FIX;                                                   35036000
         IF BOOLEAN(E.[46:1]) THEN                                      35037000
         BEGIN                                                          35038000
              FIX:=TRUE;                                                35039000
              E:=ABS(E);                                                35040000
         END;                                                           35041000
         A[0] := E ;                                                    35042000
         IF ERRORCOUNT=0 THEN                                           35043000
              REPLACE PEMIT:PEMIT BY POINTER(A,8)+5 FOR 1;              35044000
         IF DEBUGTOG THEN                                               35045000
         BEGIN                                                          35046000
              INTEGER LCODECNT;                                         35047000
              LCODECNT:=CODECNT;                                        35048000
              PRINTLINE;                                                35049000
              A[2]:=A[1]:=E;                                            35050000
              OCTAL(A[1]);                                              35051000
              HEXA(A[2]);                                               35052000
              REPLACE POINTER(TLBUFF) BY " " FOR 20,                    35053000
                                         LCODECNT FOR 4 DIGITS,         35054000
                                         " " FOR 2,                     35055000
                                         A[0] FOR 3 DIGITS,             35056000
                                         " " FOR 3,                     35057000
                                         POINTER(A[1])+4 FOR 4,         35058000
                                         " " FOR 3,                     35059000
                                         POINTER(A[2])+6 FOR 2,         35060000
                                         " " FOR 7,                     35061000
                                         " " FOR 9 WORDS;               35062000
              IF FIX THEN REPLACE POINTER(TLBUFF)+17 BY "*" FOR 3;      35063000
              WRITETLBUFF;                                              35064000
         END;                                                           35065000
         CODECNT := CODECNT + 1;                                        35066000
    END;                                                                35067000
PROCEDURE EMIT2(E);  VALUE E;  INTEGER E;                               35068000
    BEGIN                                                               35069000
         INTEGER ARRAY A[0:2];                                          35070000
         BOOLEAN FIX;                                                   35071000
         IF BOOLEAN(E.[46:1]) THEN                                      35072000
         BEGIN                                                          35073000
              FIX:=TRUE;                                                35074000
              E:=ABS(E);                                                35075000
         END;                                                           35076000
         A[0] := E;                                                     35077000
         REPLACE PEMIT:PEMIT BY POINTER(A,8) + 4 FOR 2;                 35078000
         IF DEBUGTOG THEN                                               35079000
         BEGIN                                                          35080000
              INTEGER LCODECNT;                                         35081000
              LCODECNT:=CODECNT;                                        35082000
              PRINTLINE;                                                35083000
              A[2]:=A[1]:=E;                                            35084000
              OCTAL(A[1]);                                              35085000
              HEXA(A[2]);                                               35086000
              REPLACE POINTER(TLBUFF,6) BY " " FOR 20,                  35087000
                                           LCODECNT FOR 4 DIGITS,       35088000
                                           " " FOR 2,                   35089000
                                           A[0] FOR 5 DIGITS,           35090000
                                           " " FOR 1,                   35091000
                                           POINTER(A[1])+2 FOR 6,       35092000
                                           " " FOR 1,                   35093000
                                           POINTER(A[2])+4 FOR 4,       35094000
                                           " " FOR 5,                   35095000
                                           " " FOR 9 WORDS;             35096000
                   IF FIX THEN REPLACE POINTER(TLBUFF)+17 BY "*" FOR 3; 35097000
              WRITETLBUFF;                                              35098000
         END;                                                           35099000
         CODECNT := CODECNT + 2;                                        35100000
    END;                                                                35101000
PROCEDURE EMITN1(SI,N); VALUE SI,N; POINTER SI; INTEGER N;              35102000
    BEGIN                                                               35103000
         BOOLEAN FIX;                                                   35104000
         IF N LSS 0 THEN                                                35105000
         BEGIN                                                          35106000
              FIX:=TRUE;                                                35107000
              N:=ABS(N);                                                35108000
         END;                                                           35109000
         IF ERRORCOUNT=0 THEN REPLACE PEMIT:PEMIT BY SI FOR N;          35110000
         IF DEBUGTOG THEN                                               35111000
         BEGIN                                                          35112000
              INTEGER K,LCODECNT;                                       35113000
              INTEGER ARRAY A[0:2];                                     35114000
              POINTER PA;                                               35115000
              LCODECNT:=CODECNT;                                        35116000
              PA:=POINTER(A)+6;                                         35117000
              PRINTLINE;                                                35118000
              FOR K:=1 STEP 1 UNTIL N DO                                35119000
              BEGIN                                                     35120000
                   REPLACE  POINTER(A,8)+5 BY SI:SI FOR 1;              35121000
                   A[2]:=A[1]:=A[0]:=INTEGER(PA,2);                     35122000
                   OCTAL(A[1]);                                         35123000
                   HEXA(A[2]);                                          35124000
                   REPLACE POINTER(TLBUFF,6) BY " " FOR 20,             35125000
                                                LCODECNT FOR 4 DIGITS,  35126000
                                                " " FOR 2,              35127000
                                                A[0] FOR 3 DIGITS,      35128000
                                                " " FOR 3,              35129000
                                                POINTER(A[1])+4 FOR 4,  35130000
                                                " " FOR 3,              35131000
                                                POINTER(A[2])+6 FOR 2,  35132000
                                                 " " FOR 7,             35133000
                                                 " " FOR 9 WORDS;       35134000
                   IF FIX THEN REPLACE POINTER(TLBUFF)+17 BY "*" FOR 3; 35135000
                   WRITETLBUFF;                                         35136000
                   LCODECNT:=LCODECNT+1;                                35137000
              END;                                                      35138000
         END;                                                           35139000
         CODECNT:=CODECNT+N;                                            35140000
    END;                                                                35141000
PROCEDURE EMITN2(SI,N); VALUE SI,N; POINTER SI; INTEGER N;              35142000
    BEGIN                                                               35143000
         BOOLEAN FIX;                                                   35144000
         IF N LSS 0 THEN                                                35145000
         BEGIN                                                          35146000
              FIX:=TRUE;                                                35147000
              N:=ABS(N);                                                35148000
         END;                                                           35149000
         IF ERRORCOUNT=0 THEN REPLACE PEMIT:PEMIT BY SI FOR N;          35150000
         IF DEBUGTOG THEN                                               35151000
         BEGIN                                                          35152000
              INTEGER K,LCODECNT;                                       35153000
              INTEGER ARRAY A[0:2];                                     35154000
              POINTER PA;                                               35155000
              LCODECNT:=CODECNT;                                        35156000
              PA:=POINTER(A)+3;                                         35157000
              PRINTLINE;                                                35158000
              FOR K:=1 STEP 2 UNTIL N DO                                35159000
              BEGIN                                                     35160000
                   REPLACE POINTER(A,8)+4 BY SI:SI FOR 2;               35161000
                   A[2]:=A[1]:=A[0]:=INTEGER(PA,5);                     35162000
                   OCTAL(A[1]);                                         35163000
                   HEXA(A[2]);                                          35164000
                   REPLACE POINTER(TLBUFF,6) BY " " FOR 20,             35165000
                                                LCODECNT FOR 4 DIGITS,  35166000
                                                " " FOR 2,              35167000
                                                A[0] FOR 5 DIGITS,      35168000
                                                " " FOR 1,              35169000
                                                 POINTER(A[1])+2 FOR 6, 35170000
                                                 " " FOR 1,             35171000
                                                 POINTER(A[2])+4 FOR 4, 35172000
                                                " " FOR 5,              35173000
                                                " " FOR 9 WORDS;        35174000
                   IF FIX THEN REPLACE POINTER(TLBUFF)+17 BY "*" FOR 3; 35175000
                   WRITETLBUFF;                                         35176000
              LCODECNT:=LCODECNT+2;                                     35177000
              END;                                                      35178000
         END;                                                           35179000
         CODECNT:=CODECNT+N;                                            35180000
    END OF EMITN2;                                                      35181000
PROCEDURE EMITFIX2(N); VALUE N; INTEGER N;                              35182000
    BEGIN                                                               35183000
         INTEGER SCODECNT;                                              35184000
         SPEMIT:=PEMIT;                                                 35185000
         PEMIT:=RPT;                                                    35186000
         SCODECNT:=CODECNT;                                             35187000
         CODECNT:=FIXCNT;                                               35188000
         IF BOOLEAN(N.[46:1]) THEN EMIT1(N) ELSE EMIT2(-N);             35189000
         CODECNT:=SCODECNT;                                             35190000
         PEMIT:=SPEMIT;                                                 35191000
    END OF EMITFIX2;                                                    35192000
DEFINE  EMITFIX1(N) = EMITFIX2(-N)#;                                    35193000
PROCEDURE EMITFIXN2(SI,N); VALUE SI,N; POINTER SI; INTEGER N;           35194000
    BEGIN                                                               35195000
         INTEGER SCODECNT;                                              35196000
         SPEMIT:=PEMIT;                                                 35197000
         PEMIT:=RPT;                                                    35198000
         SCODECNT:=CODECNT;                                             35199000
         CODECNT:=FIXCNT;                                               35200000
         IF BOOLEAN(N.[46:1]) THEN EMITN1(SI,N) ELSE EMITN2(SI,-N);     35201000
         CODECNT:=SCODECNT;                                             35202000
         PEMIT:=SPEMIT;                                                 35203000
    END OF EMITFIXN2;                                                   35204000
DEFINE EMITFIXN1(SI,N) = EMITFIXN2(SI,-N)#;                             35205000
%                                                                       40000000
COMMENT#################################################################40001000
                   PROCEDURES WHICH PROCESS NDL STATEMENTS, PART II     40002000
#######################################################################;40003000
%                                                                       40004000
BOOLEAN PROCEDURE BREAKOPTIONS;                                         40005000
    BEGIN                                                               40006000
         IF NEXT=RECEIVEV THEN EMIT1(3)                                 40007000
    ELSE IF ELCLASS=TRANSMITV THEN EMIT1(5)                             40008000
    ELSE BEGIN                                                          40009000
              ERROR(53); BREAKOPTIONS:=TRUE; % MISSING CONDITION        40010000
         END;                                                           40011000
         IF NEXT NEQ RGTBRACKET THEN                                    40012000
         BEGIN                                                          40013000
              ERROR(48); BREAKOPTIONS:=TRUE; % RT. BRACKET EXPECTED.    40014000
         END;                                                           40015000
    END OF BREAKOPTIONS;                                                40016000
DEFINE TALLYCHECK = BNBCHECK(TRUE) #, TOGGLECHECK = BNBCHECK(FALSE) #;  40017000
BOOLEAN PROCEDURE BNBCHECK(B);  VALUE B;  BOOLEAN B;                    40018000
    BEGIN                                                               40019000
         DEFINE ERR(ERR1) = BEGIN ERROR(ERR1);  BNBCHECK := TRUE; END#; 40020000
         IF B THEN                                                      40021000
              EMIT1(1)                                                  40022000
         ELSE                                                           40023000
              EMIT1(4);                                                 40024000
         IF NEXT = LFTBRACKET THEN                                      40025000
         IF NEXT = INTEGERV THEN                                        40026000
         IF NUM LSS IF B THEN 5 ELSE 8 THEN                             40027000
         BEGIN                                                          40028000
              EMIT1(NUM);                                               40029000
              IF B THEN BRW := BRW & TRUE BRTALLY(NUM)                  40030000
              ELSE BRW.BRTOG := TRUE;                                   40031000
              IF NEXT NEQ RGTBRACKET THEN  ERR(048);                    40032000
         END                                                            40033000
         ELSE                                                           40034000
         ERR(IF B THEN 25 ELSE 26)                                      40035000
         ELSE                                                           40036000
              ERR(038)                                                  40037000
         ELSE                                                           40038000
              ERR(047);                                                 40039000
    END;                                                                40040000
BOOLEAN PROCEDURE LOGICALEXPRESSION;                                    40041000
    BEGIN                                                               40042000
         INTEGER  J;                                                    40043000
         LABEL  LA,LB,LC,LD,LE,LF,EXIT;                                 40044000
         DEFINE  E(E1) = EMIT1(E1) #;                                   40045000
         BNOT := FALSE;                                                 40046000
 LA:                                                                    40047000
         IF NEXT = NOTV THEN                                            40048000
         BEGIN                                                          40049000
              BNOT := NOT BNOT;  GO LA;                                 40050000
         END                                                            40051000
         ELSE                                                           40052000
         IF ELCLASS = ERRORTOG THEN                                     40053000
         BEGIN                                                          40054000
              E(2);  E(3);  E(ELBAT[I].TYPE);                           40055000
         END                                                            40056000
         ELSE                                                           40057000
         IF ELCLASS = TOGGLEV THEN                                      40058000
         BEGIN                                                          40059000
              E(2);                                                     40060000
              IF TOGGLECHECK THEN GO TO LB;                             40061000
         END                                                            40062000
         ELSE                                                           40063000
         IF ELCLASS = FORMATCHARV AND ELBAT[I].TYPE = 2 THEN            40064000
         BEGIN                                                          40065000
              E(2);  E(2);  E(0);                                       40066000
              BNOT := NOT BNOT;                                         40067000
         END                                                            40068000
         ELSE                                                           40069000
         IF ELCLASS = FORMATCHARV AND ELBAT[I].TYPE = 1 THEN            40070000
         BEGIN                                                          40071000
              E(2);  E(2); E(1);                                        40072000
              BNOT := NOT BNOT;                                         40073000
         END                                                            40074000
         ELSE                                                           40075000
         IF ELCLASS = WIDTHV THEN                                       40076000
         BEGIN                                                          40077000
              E(3);  E(6);  GO TO LD;                                   40078000
         END                                                            40079000
         ELSE                                                           40080000
         IF ELCLASS = PAGEV THEN                                        40081000
         BEGIN                                                          40082000
              E(3);  E(5);  GO TO LD;                                   40083000
         END                                                            40084000
         ELSE                                                           40085000
         IF ELCLASS = DISPTOG AND ELBAT[I].TYPE = 3 THEN                40086000
         BEGIN                                                          40087000
              E(2);  E(2);  E(5);                                       40088000
         END                                                            40089000
         ELSE                                                           40090000
         IF ELCLASS = SEQUENCEV THEN                                    40091000
         BEGIN                                                          40092000
              E(2);  E(5);                                              40093000
         END                                                            40094000
         ELSE                                                           40095000
         IF ELCLASS = ENABLEINPUTV THEN                                 40096000
         BEGIN                                                          40097000
              E(2); E(6);                                               40098000
         END                                                            40099000
         ELSE                                                           40100000
         IF ELCLASS = VARIANT THEN                                      40101000
         BEGIN                                                          40102000
              E(2); E(2); E(INTEGER(7 - ELBAT[I].TYPE));                40103000
         END                                                            40104000
         ELSE                                                           40105000
         IF ELCLASS = LOGICALVALUE THEN                                 40106000
         BEGIN                                                          40107000
              E(2);  E(ELBAT[I].TYPE);                                  40108000
         END                                                            40109000
         ELSE                                                           40110000
         IF ELCLASS = CHARACTERV THEN                                   40111000
         BEGIN                                                          40112000
              E(3);  E(2);                                              40113000
 LD:                                                                    40114000
              IF NEXT = RELOP THEN  J := ELBAT[I].TYPE                  40115000
              ELSE                                                      40116000
              IF ELCLASS = EQUAL THEN  J := 4                           40117000
              ELSE                                                      40118000
              BEGIN                                                     40119000
                   ERROR(049);                                          40120000
 LB:                                                                    40121000
                   LOGICALEXPRESSION := TRUE;                           40122000
                   GO EXIT;                                             40123000
              END;                                                      40124000
              IF BNOT THEN  J := 7 - J;                                 40125000
              BNOT := FALSE;                                            40126000
              IF NEXT = CHARACTERV THEN                                 40127000
              E(2)                                                      40128000
              ELSE                                                      40129000
              IF ELCLASS = TALLYV THEN                                  40130000
              BEGIN                                                     40131000
                   IF TALLYCHECK THEN GO TO LB;                         40132000
              END                                                       40133000
              ELSE                                                      40134000
              IF ELCLASS = BCCV THEN                                    40135000
              BEGIN                                                     40136000
                   E(3);  BRW.BBCC := TRUE;                             40137000
              END                                                       40138000
              ELSE                                                      40139000
              IF ELCLASS = RETRYV THEN                                  40140000
                E(4)                                                    40141000
              ELSE                                                      40142000
              IF ELCLASS = INTEGERV THEN                                40143000
              BEGIN                                                     40144000
                   E(0);  E(NUM);                                       40145000
              END                                                       40146000
              ELSE                                                      40147000
              IF ELCLASS = PAGEV THEN                                   40148000
                   E(5)                                                 40149000
              ELSE                                                      40150000
              IF ELCLASS = WIDTHV THEN                                  40151000
                   E(6)                                                 40152000
              ELSE                                                      40153000
              IF ELCLASS = STRING THEN                                  40154000
              IF REAL(ACCUMSTART - 1,1) = 1 THEN                        40155000
              BEGIN                                                     40156000
                   E(0); E(REAL(POINTER(ACCUM[2],8), 1));               40157000
              END                                                       40158000
              ELSE                                                      40159000
              GO TO LC                                                  40160000
              ELSE                                                      40161000
 LC:                                                                    40162000
              BEGIN                                                     40163000
                   LOGICALEXPRESSION := TRUE;                           40164000
                   ERROR(024);  GO EXIT;                                40165000
              END;                                                      40166000
              E(J := 7 - J);                                            40167000
              GO TO LE;                                                 40168000
         END                                                            40169000
         ELSE                                                           40170000
         IF ELCLASS = TALLYV THEN                                       40171000
         BEGIN                                                          40172000
              E(3);                                                     40173000
              IF TALLYCHECK THEN                                        40174000
              BEGIN                                                     40175000
                   LOGICALEXPRESSION := TRUE;                           40176000
                   GO EXIT;                                             40177000
              END;                                                      40178000
              GO TO LD;                                                 40179000
         END                                                            40180000
         ELSE                                                           40181000
         IF ELCLASS = BCCV THEN                                         40182000
         BEGIN                                                          40183000
              BRW.BBCC := TRUE;                                         40184000
              E(3);  E(3);  GO LD;                                      40185000
         END                                                            40186000
         ELSE                                                           40187000
         IF ELCLASS = STRING THEN                                       40188000
         IF REAL(ACCUMSTART - 1,1) = 1 THEN                             40189000
         BEGIN                                                          40190000
              E(3); E(0);  E(REAL(POINTER(ACCUM[2],8), 1));             40191000
              GO TO LD;                                                 40192000
         END                                                            40193000
         ELSE                                                           40194000
         GO TO LC                                                       40195000
         ELSE                                                           40196000
         IF ELCLASS = INTEGERV THEN                                     40197000
         BEGIN                                                          40198000
              E(3); E(3); E(NUM);  GO LD;                               40199000
         END                                                            40200000
         ELSE                                                           40201000
         IF ELCLASS = RETRYV THEN                                       40202000
         BEGIN                                                          40203000
              E(3);  E(4);  GO LD;                                      40204000
         END                                                            40205000
         ELSE                                                           40206000
         GO TO LC;                                                      40207000
         IF NOT BNOT THEN  E(4)                                         40208000
         ELSE                                                           40209000
              E(3);                                                     40210000
 LE:                                                                    40211000
 EXIT:                                                                  40212000
    END;                                                                40213000
BOOLEAN PROCEDURE OPTIONALDELAY;                                        40214000
    BEGIN                                                               40215000
         DEFINE ERR(ERR1) = BEGIN                                       40216000
                            ERROR(ERR1); OPTIONALDELAY := TRUE;         40217000
                            END   #;                                    40218000
         IF TABLE(I + 1) = LFTPAREN THEN                                40219000
         BEGIN                                                          40220000
              NEXT;                                                     40221000
              IF NEXT = INTEGERV THEN                                   40222000
              IF NEXT = TIMEV THEN                                      40223000
              EMIT1(TIMECONV(NUM,ELBAT[I].TYPE))                        40224000
              ELSE                                                      40225000
                   ERR(046)                                             40226000
              ELSE                                                      40227000
              IF ELCLASS = NULLV THEN  EMIT1(31)                        40228000
              ELSE                                                      40229000
                   ERR(046);                                            40230000
              IF NEXT NEQ RGTPAREN THEN ERR(044);                       40231000
         END                                                            40232000
         ELSE                                                           40233000
         EMIT1(0);                                                      40234000
    END;                                                                40235000
BOOLEAN PROCEDURE OPTENDOFBUFFER(RPT);  POINTER RPT;                    40236000
    BEGIN                                                               40237000
         INTEGER J;                                                     40238000
         LABEL LA,LB,LC,EXIT;                                           40239000
         DEFINE ERR(ERR1) = BEGIN                                       40240000
                            ERROR(ERR1); OPTENDOFBUFFER:=TRUE; GO EXIT; 40241000
                            END   #;                                    40242000
         IF TABLE(I + 1) = LFTBRACKET THEN                              40243000
         BEGIN                                                          40244000
              NEXT;                                                     40245000
              IF NEXT = INTEGERV THEN                                   40246000
              BEGIN                                                     40247000
 LB:                                                                    40248000
                   FOR J := 1 STEP 1 UNTIL LBLCNT DO                    40249000
                   IF ABS(LABL[J]) = NUM THEN                           40250000
                   BEGIN                                                40251000
                        EMITFIX2(NUM);                                  40252000
                        GO TO LA;                                       40253000
                   END;                                                 40254000
                   LABL[LBLCNT := LBLCNT + 1] := -NUM;                  40255000
                        EMITFIX2(LBLCNT);                               40256000
 LA:                                                                    40257000
              END                                                       40258000
              ELSE                                                      40259000
              IF ELCLASS = ERRORTOG AND ELBAT[I].TYPE = 17 THEN         40260000
              BEGIN                                                     40261000
                   IF NEXT NEQ COLON THEN ERR(045);                     40262000
                   IF NEXT = NULLV THEN GO TO LC;                       40263000
                   IF ELCLASS = INTEGERV THEN GO TO LB;                 40264000
                   ERR(255);                                            40265000
              END                                                       40266000
              ELSE                                                      40267000
              IF ELCLASS = NULLV THEN                                   40268000
 LC:                                                                    40269000
                   EMITFIX2(3"177400")   % 4"FF00"                      40270000
              ELSE                                                      40271000
                   ERR(255);                                            40272000
              IF NEXT NEQ RGTBRACKET THEN ERR(048);                     40273000
         END                                                            40274000
         ELSE                                                           40275000
         EMITFIX2(3"177401");            % 4"FF01"                      40276000
 EXIT:                                                                  40277000
    END;                                                                40278000
PROCEDURE STATEMENT;                                                    40279000
    BEGIN                                                               40280000
         ARRAY A[0:5];                                                  40281000
         INTEGER  ELSELABEL,THENLABEL,ACTIONLABEL;                      40282000
         REAL  J,K,KK,TON;                                              40283000
         POINTER PL;                                                    40284000
              LABEL LA,LB,LC,LD,LE,LH,LI,LK,LM,LN,LO,LST,AWAY,LL,       40285000
                    EXIT,PASS,LAB,NULLST;                               40286000
         BOOLEAN BBB, BERROR;                                           40287000
         INTEGER FIXCNTA,FIXCNTB; BOOLEAN NOTFIRST;                     40288000
PROCEDURE RECEIVEACTIONPART;                                            40289000
COMMENT  THE SWR ARRAY CONTAINS (SWRCNT+1) UNIQUE SETS OF ERROR ACTION  40290000
         SETS. EACH SET IS 14 BYTES LONG:                               40291000
              BYTE  CONTENTS                                            40292000
              ----  --------                                            40293000
                1   NOT USED.                                           40294000
                2   ERROR INDEX(SWRCNT) OF THIS SET.                    40295000
               3-4  LABEL FOR TIMEOUT BRANCH.                           40296000
               5-6  LABEL FOR STOPBIT BRANCH.                           40297000
               7-8  LABEL FOR BUFOVFL BRANCH                            40298000
              9-10  LABEL FOR BREAK BRANCH                              40299000
             11-12  LABEL FOR PARITY BRANCH.                            40300000
             13-14  LABEL FOR LOSSOFCARRIER BRANCH.                     40301000
;                                                                       40302000
    BEGIN                                                               40303000
         LABEL START,ERRORBRANCH,SKIPOUT,NEXTITEM,EXIT,LLB,OWT,         40304000
              ENTERINSWR,NOBRACKETS;                                    40305000
         LABEL ERRSW,ERRBCC,ERRADD,ERRTRA,ERRSTR,ERRTEX,ERRBLK,ERR689;  40306000
         SWITCH SWICZ:=ERRSW,  % TIMEOUT                                40307000
                       ERRSW,  % STOPBIT                                40308000
                       ERRSW,  % BUFOVFL                                40309000
                       ERRSW,  % BREAK                                  40310000
                       ERR689, %                                        40311000
                       ERR689, %                                        40312000
                       ERRSW,  % PARITY                                 40313000
                       ERRBCC, % BCCERR                                 40314000
                       ERRADD, % ADDERR                                 40315000
                       ERRTRA, % TRANERR                                40316000
                       ERRSTR, % FORMATERR                              40317000
                       ERR689, %                                        40318000
                       ERR689, %                                        40319000
                       ERR689, %                                        40320000
                       ERR689, %                                        40321000
                       ERR689, %                                        40322000
                       ERR689, %                                        40323000
                       ERRTEX, % ENDOFBUFFER                            40324000
                       ERRSW,  % LOSSOFCARRIER                          40325000
                       ERRBLK; % BLKNERR                                40326000
         INTEGER INDEX,IU,IV,IW;                                        40327000
         BOOLEAN B,BBB;                                                 40328000
         ARRAY A[0:1];                                                  40329000
              POINTER PT;                                               40330000
         DEFINE RECMASK=3"1000117"#;% WHAT ACTIONS ALLOWED              40331000
    PROCEDURE ACT(EN); VALUE EN; INTEGER EN;                            40332000
    BEGIN                                                               40333000
         IF EN LSS 0 THEN                                               40334000
         BEGIN                                                          40335000
              ERRORCOUNT:=ERRORCOUNT-1; EN:=ABS(EN)                     40336000
         END;                                                           40337000
         FLAG(EN);                                                      40338000
         WHILE ITA:=TABLE(I+1)NEQ COMMA AND ITA NEQ PERIOD DO NEXT;     40339000
         GO TO NEXTITEM                                                 40340000
    END OF ACT;                                                         40341000
    DEFINE CHECKIT(IT)=                                                 40342000
         IF J NEQ IT THEN ACT(253) ELSE GO TO LLB#; % NOT ALLOWED.      40343000
START:                                                                  40344000
         INDEX:=0;                                                      40345000
         IF TABLE(I+1)=PERIOD THEN GO TO NOBRACKETS;                    40346000
         IF NEXT=STRING THEN                                            40347000
          IF REAL(ACCUMSTART-1,1)=1 THEN                                40348000
           IF J=0 THEN                                                  40349000
         BEGIN                                                          40350000
              EMIT1(0);                                                 40351000
              EMITN1(POINTER(ACCUM[2],8),1);                            40352000
              INDEX:=2;                                                 40353000
         END                                                            40354000
         ELSE ACT(222) % INAPPROPRIATE ACTION ITEM.                     40355000
         ELSE ACT(22)  % RECEIVE ACTION ITEM EXPECTED.                  40356000
         ELSE IF ELCLASS=SPECIALCHRV THEN                               40357000
          IF J=0 THEN                                                   40358000
         CASE ITA:=ELBAT[I].TYPE OF                                     40359000
         BEGIN                                                          40360000
             BEGIN  EMIT1(1); BRW.BRWR:=TRUE  END; % 0 WRU              40361000
             BEGIN  EMIT1(2); BRW.BRSP:=TRUE  END; % 1 CONTROL          40362000
             BEGIN  EMIT1(4); BRW.BRL :=TRUE  END; % 2 LINEDELETE       40363000
             BEGIN  EMIT1(3); BRW.BRB :=TRUE  END; % 3 BACKSPACE        40364000
             BEGIN  EMIT1(6); BRW.BRFS:=TRUE  END; % 5 SEPARATOR        40365000
         END                                                            40366000
         ELSE ACT(222)                                                  40367000
         ELSE IF ELCLASS=ENDV THEN                                      40368000
          IF J=0 THEN                                                   40369000
         BEGIN                                                          40370000
              EMIT1(5); BRW.BRE:=TRUE; INDEX:=1                         40371000
         END                                                            40372000
         ELSE ACT(222)                                                  40373000
         ELSE IF ELCLASS=ERRORV THEN                                    40374000
         BEGIN                                                          40375000
              ERRORCOUNT:=ERRORCOUNT-1;                                 40376000
              FLAG(003);                                                40377000
              DO UNTIL NEXT=RGTBRACKET;                                 40378000
              GO TO NEXTITEM                                            40379000
         END                                                            40380000
         ELSE                                                           40381000
ERRORBRANCH:                                                            40382000
         IF ELCLASS=ERRORTOG THEN                                       40383000
         BEGIN                                                          40384000
              GO SWICZ[(TON:=ELBAT[I].TYPE)+1];                         40385000
LLB:                                                                    40386000
              BBB:=TRUE                                                 40387000
         END                                                            40388000
         ELSE ACT(22);                                                  40389000
         IF TABLE(I+1)=COLON THEN                                       40390000
         BEGIN                                                          40391000
              NEXT;                                                     40392000
              IF NEXT=INTEGERV THEN                                     40393000
              BEGIN                                                     40394000
                   FOR K:=1 STEP 1 UNTIL LBLCNT DO                      40395000
                    IF ABS(LABL[K])=NUM THEN                            40396000
                   BEGIN                                                40397000
                        EMIT2(K); GO SKIPOUT                            40398000
                   END;                                                 40399000
                   LABL[LBLCNT:=LBLCNT+1]:=-NUM;%"-" MEANS NON-EXISTENT 40400000
                   EMIT2(LBLCNT);                                       40401000
              END                                                       40402000
              ELSE IF ELCLASS=NULLV THEN                                40403000
               IF INDEX NEQ 0 THEN PEMIT:=PEMIT-INDEX                   40404000
               ELSE EMIT2(3"177400")    % 4"FF00"                       40405000
              ELSE ACT(232); % ACTION LABEL EXPECTED.                   40406000
SKIPOUT:                                                                40407000
         END                                                            40408000
         ELSE IF BA THEN EMIT2(ACTIONLABEL)                             40409000
         ELSE                                                           40410000
         BEGIN                                                          40411000
              LABL[ACTIONLABEL:=LBLCNT:=LBLCNT+1]:=0.001;               40412000
              BA:=TRUE;                                                 40413000
              EMIT2(ACTIONLABEL)                                        40414000
         END;                                                           40415000
         IF BBB THEN                                                    40416000
         BEGIN                                                          40417000
              PEMIT:=PEMIT-2; CODECNT:=CODECNT-2; % BACK UP             40418000
              BBB:=FALSE;                                               40419000
              RPT:=RPT+2; FIXCNT:=FIXCNT+2; % FOR FIXUP OF ITEM LABEL   40420000
              EMITFIXN2(PEMIT,2); % LABEL FOR ENDOFBUFFER BRANCH        40421000
              RPT:=RPT-2; FIXCNT:=FIXCNT-2; % PUT IT BACK, CHARLIE BROWN40422000
         END;                                                           40423000
NEXTITEM:                                                               40424000
         IF TABLE(I+1)=COMMA THEN                                       40425000
         BEGIN                                                          40426000
              NEXT; GO START                                            40427000
         END;                                                           40428000
         IF J=0 THEN EMIT1(255);   % 4 "FF"                             40429000
         IF NEXT NEQ RGTBRACKET THEN ACT(48); % RT BRACKET EXPECTED.    40430000
         IF BA THEN                                                     40431000
         BEGIN                                                          40432000
              BA:=FALSE;                                                40433000
              EMIT1(1); EMIT2(ACTIONLABEL)                              40434000
         END;                                                           40435000
         GO EXIT;                                                       40436000
ERRSW:                                                                  40437000
         IF REAL(B)=0 THEN  % NEW RECEIVE STMNT. ACTION LIST            40438000
              SWDA[SWCNT:=SWCNT+1]:=SWCNT;                              40439000
         IU:=ELBAT[I].TYPE;                                             40440000
         IF NOT BOOLEAN(0 & RECMASK[0:IU:1]) THEN ACT(22);              40441000
         IF NEXT NEQ COLON THEN ACT(45); % COLON EXPECTED.              40442000
         IF NEXT=INTEGERV THEN                                          40443000
         BEGIN                                                          40444000
              FOR IV:=1 STEP 1 UNTIL LBLCNT DO                          40445000
               IF ABS(LABL[IV])=NUM THEN GO ENTERINSWR;                 40446000
              LABL[LBLCNT:=LBLCNT+1]:=-NUM;%"-" MEANS NOT YET EXISTENT  40447000
              IV:=LBLCNT;                                               40448000
         END                                                            40449000
         ELSE IF ELCLASS=ABORTV THEN IV:=3"177401"   % 4 "FF01"         40450000
         ELSE IF ELCLASS=NULLV THEN IV:=3"177400"   % 4 "FF00"          40451000
         ELSE ACT(232); % ACTION LABEL EXPECTED.                        40452000
ENTERINSWR:                                                             40453000
         IF FALSE & B[0:IU:1] THEN ACT(148); % DUP TOGGLE.              40454000
         B:=B & TRUE[IU:1];                                             40455000
         IU:=IF IU=18 THEN 5 ELSE IF IU=6 THEN 4 ELSE IU;               40456000
         A[0]:=IV;                                                      40457000
         REPLACE PSWR+2+IU|2 BY POINTER(A,8)+4 FOR 2;                   40458000
         GO TO NEXTITEM;                                                40459000
ERRBCC:  CHECKIT(BCCV);                                                 40460000
ERRADD:  CHECKIT(ADDRESSV);                                             40461000
ERRTRA:  CHECKIT(TRANV);                                                40462000
ERRSTR:  CHECKIT(STRING);                                               40463000
ERRTEX:  IF J.[46:1]=0 THEN ACT(222) ELSE GO TO LLB;                    40464000
ERRBLK:  CHECKIT(BLKNV);                                                40465000
ERR689:  ACT(222);                                                      40466000
NOBRACKETS:                                                             40467000
         SWDA[SWCNT:=SWCNT+1]:=SWCNT;                                   40468000
EXIT:                                                                   40469000
         PT:=POINTER(SWR,8)+2;                                          40470000
         FOR IW:=0 STEP 1 UNTIL SWRCNT DO % CHECK FOR DUPS.             40471000
          IF REAL(PT,4)  =REAL(PSWR+ 2,4) AND                           40472000
             REAL(PT+4,4)=REAL(PSWR+ 6,4) AND                           40473000
             REAL(PT+8,4)=REAL(PSWR+10,4) THEN                          40474000
         BEGIN                                                          40475000
              REPLACE PSWR+2 BY POINTER(FF01,8) FOR 12;                 40476000
              SWDA[SWCNT].SWLINK:=IW; % NEQ 0 IMPLIES DUP.              40477000
              GO OWT                                                    40478000
         END ELSE PT:=PT+14;                                            40479000
         SWDA[SWCNT].SWLINK:=SWRCNT:=SWRCNT+1;                          40480000
         REPLACE PSWR BY 0 & SWRCNT[39:8] FOR 2;                        40481000
         PSWR:=PSWR+14;                                                 40482000
         REPLACE PSWR+2 BY POINTER(FF01,8) FOR 12;                      40483000
OWT:                                                                    40484000
              RPT:=RPT+1; FIXCNT:=FIXCNT+1;                             40485000
              EMITFIX1(SWDA[SWCNT].SWLINK);%PUT ERR SW INX INTO MACRO   40486000
              RPT:=RPT-1; FIXCNT:=FIXCNT-1;%GET OUT OF COOKIE JAR       40487000
    END OF RECEIVE ACTIONPART;                                          40488000
PROCEDURE TRANSMITACTIONPART;                                           40489000
    BEGIN                                                               40490000
COMMENT  THE SWT ARRAY CONTAINS (SWTCNT+1) UNIQUE SETS OF ERROR ACTION  40491000
         SETS. EACH SET IS 6 BYTES LONG:                                40492000
              BYTE  CONTENTS                                            40493000
              ----  --------                                            40494000
                1   NOT USED.                                           40495000
                2   ERROR INDEX(SWTCNT) OF THIS SET.                    40496000
               3-4  LABEL FOR BREAK BRANCH.                             40497000
               5-6  LABEL FOR LOSSOFCARRIER BRANCH.                     40498000
;                                                                       40499000
         LABEL START,ENTERINSWT,NEXTITEM,NOBRACKETS,EXIT;               40500000
         INTEGER IU,IV,IW;                                              40501000
         BOOLEAN B;                                                     40502000
              POINTER PT;                                               40503000
         ARRAY A[0:1];                                                  40504000
         DEFINE TRANSMASK=3"1000010"#, % WHAT ACTIONS ALLOWED           40505000
                TRANSMIT=BB#;                                           40506000
    PROCEDURE ACT(EN); VALUE EN; INTEGER EN;                            40507000
    BEGIN                                                               40508000
         IF EN LSS 0 THEN                                               40509000
         BEGIN                                                          40510000
              ERRORCOUNT:=ERRORCOUNT-1; EN:=ABS(EN)                     40511000
         END;                                                           40512000
         FLAG(EN);                                                      40513000
         WHILE ITA:=TABLE(I+1) NEQ COMMA AND ITA NEQ PERIOD DO NEXT;    40514000
         GO TO NEXTITEM                                                 40515000
    END OF ACT;                                                         40516000
START:                                                                  40517000
         IF REAL(B)=0 THEN                                              40518000
          SWDA[SWCNT:=SWCNT+1]:=SWCNT;                                  40519000
         IF TABLE(I+1)=PERIOD THEN GO TO NOBRACKETS;                    40520000
         NEXT;                                                          40521000
         IF ELCLASS NEQ ERRORTOG THEN ACT(032);                         40522000
         IF ELCLASS=ERRORV THEN                                         40523000
         BEGIN                                                          40524000
              ERRORCOUNT:=ERRORCOUNT-1;                                 40525000
              FLAG(003);                                                40526000
              DO UNTIL NEXT=RGTBRACKET;                                 40527000
              GO TO NEXTITEM                                            40528000
         END;                                                           40529000
         IU:=ELBAT[I].TYPE;                                             40530000
         IF NOT BOOLEAN(0 & TRANSMASK[0:IU:1]) THEN ACT(254);           40531000
         IF NEXT NEQ COLON THEN ACT(45); % COLON EXPECTED.              40532000
         IF NEXT=INTEGERV THEN                                          40533000
         BEGIN                                                          40534000
             FOR IV:=1 STEP 1 UNTIL LBLCNT DO                           40535000
              IF ABS(LABL[IV])=NUM THEN GO ENTERINSWT;                  40536000
            LABL[LBLCNT:=LBLCNT+1]:=-NUM;%"-" MEANS NOT YET EXISTENT    40537000
            IV:=LBLCNT;                                                 40538000
         END                                                            40539000
         ELSE IF ELCLASS=ABORTV THEN IV:=3"177401" % 4"FF01"            40540000
         ELSE IF ELCLASS=NULLV THEN IV:=3"177400"  % 4"FF00"            40541000
         ELSE ACT(232); % ACTION LABEL EXPECTED.                        40542000
ENTERINSWT:                                                             40543000
         IF FALSE & B[0:IU:1] THEN ACT(149); % DUP TRANS ERR TOGGLE.    40544000
         B:=B & TRUE[IU:1];                                             40545000
         IU:=IU DIV 18;                                                 40546000
         A[0]:=IV;                                                      40547000
         REPLACE PSWT+2+IU|2 BY POINTER(A,8)+4 FOR 2;                   40548000
NEXTITEM:                                                               40549000
         IF TABLE(I+1)=COMMA THEN                                       40550000
         BEGIN                                                          40551000
              NEXT; GO START                                            40552000
         END;                                                           40553000
         IF NEXT NEQ RGTBRACKET THEN ACT(48); % RIGHT BRACKET EXPECTED. 40554000
NOBRACKETS:                                                             40555000
         PT:=POINTER(SWT,8)+2;                                          40556000
         FOR IW:=0 STEP 1 UNTIL SWTCNT DO % CHECK FOR DUPS.             40557000
          IF REAL(PT,4)=REAL(PSWT+2,4) THEN                             40558000
         BEGIN                                                          40559000
              REPLACE PSWT+2 BY POINTER(FF01,8) FOR 4;                  40560000
              SWDA[SWCNT].SWLINK:=IW; % NEQ 0 IMPLIES DUP.              40561000
              GO EXIT                                                   40562000
         END ELSE PT:=PT+6;                                             40563000
         SWDA[SWCNT].SWLINK:=SWTCNT:=SWTCNT+1;                          40564000
         REPLACE PSWT BY 0 & SWTCNT SWLINK FOR 2;                       40565000
         PSWT:=PSWT+6;                                                  40566000
         REPLACE PSWT+2 BY POINTER(FF01,8) FOR 4;                       40567000
EXIT:                                                                   40568000
         EMITFIX1(SWDA[SWCNT].SWLINK);%PUT ERR SW INDEX INTO TRANS MACRO40569000
         TRANSMIT:=FALSE;                                               40570000
    END OF TRANSMITACTIONPART;                                          40571000
         DEFINE ERR(ERR1) = BEGIN ERROR(ERR1);  GO EXIT;  END #;        40572000
         DEFINE TRANSMIT=BB#; % TRUE=TRANSMIT,FALSE=RECEIVE             40573000
         GOOD := BEND := FALSE;                                         40574000
 LST:                                                                   40575000
         IF J := REAL(STCASE + NEXT,1) = 0 THEN                         40576000
         IF ELCLASS = PERIOD THEN GO EXIT ELSE         % NULL STATEMENT 40577000
         BEGIN                                   % UNKNOWN              40578000
                   ERROR(013);                   % REQUEST STATEMENT EX 40579000
                   GO EXIT;                                             40580000
         END;                                                           40581000
         IF ELCLASS NEQ ERRORV THEN  BON := TRUE                        40582000
         ELSE                                                           40583000
         IF BON THEN                                                    40584000
         BEGIN                                                          40585000
              ERROR(029);  GO TO LST;                                   40586000
         END;                                                           40587000
         IF J = 1 AND ELCLASS NEQ BEGINV THEN                           40588000
         BEGIN                                   % SECTION STARTER      40589000
                   BEND := GOOD := TRUE;                                40590000
                   GO EXIT;                                             40591000
         END;                                                           40592000
         CASE (J - 1) OF                                                40593000
         BEGIN                                                          40594000
              BEGIN                              % 1     BEGIN          40595000
                   IF TABLE(I+1) = ENDV THEN GO NULLST ELSE             40596000
                   BGNCNT := BGNCNT + 1;                                40597000
 LA:                                                                    40598000
                   STATEMENT;                                           40599000
                   IF TABLE(I + 1) = ENDV THEN                          40600000
                   BEGIN                                                40601000
                        BGNCNT := BGNCNT - 1;                           40602000
 NULLST:                NEXT;     GO AWAY;                              40603000
                   END;                                                 40604000
                   GO TO LA;                                            40605000
              END;                                                      40606000
              BEGIN                              % 2     IF             40607000
                   IF LOGICALEXPRESSION THEN GO EXIT;                   40608000
                   IF NEXT = THENV THEN                                 40609000
                   BEGIN                                                40610000
                        EMIT2(THENLABEL := LBLCNT := LBLCNT + 1);       40611000
                        LABL[LBLCNT] := 0.5;                            40612000
                        IFCNT := IFCNT + 1;                             40613000
                        STATEMENT;                                      40614000
                        IFCNT := IFCNT - 1;                             40615000
                        IF TABLE(I + 1) = ELSEV THEN                    40616000
                        BEGIN                                           40617000
                             EMIT1(4);                                  40618000
                             EMIT2(ELSELABEL := LBLCNT := LBLCNT + 1);  40619000
                             LABL[LBLCNT] := 0.5;                       40620000
                             EMIT1(1);  EMIT2(THENLABEL);               40621000
                             NEXT;                                      40622000
                             STATEMENT;                                 40623000
                             EMIT1(1);  EMIT2(ELSELABEL);               40624000
                        END                                             40625000
                        ELSE                                            40626000
                        BEGIN                                           40627000
                             EMIT1(1);  EMIT2(THENLABEL);               40628000
                        END;                                            40629000
                        GO EXIT;                                        40630000
                   END                                                  40631000
                   ELSE                                                 40632000
                   ERR(014);                                            40633000
                   END;                                                 40634000
              BEGIN                              % 3     NUMBER         40635000
                   IF NEXT NEQ COLON THEN  ERR(006);                    40636000
 LB:                                                                    40637000
                   FOR J := 1 STEP 1 UNTIL LBLCNT DO                    40638000
                   IF NUM = ABS(LABL[J]) THEN                           40639000
                   BEGIN                                                40640000
                        IF LABL[J] = NUM THEN  ERR(015);                40641000
                        EMIT1(1);  EMIT2(J);                            40642000
                        LABL[J] := ABS(LABL[J]);                        40643000
                        GO TO LC;                                       40644000
                   END;                                                 40645000
                   LABL[LBLCNT := LBLCNT + 1] := NUM;                   40646000
                   EMIT1(1);  EMIT2(LBLCNT);                            40647000
 LC:                                                                    40648000
                   IF TABLE(I + 1) = ENDV THEN GO AWAY;                 40649000
                   GO TO LST;                                           40650000
              END;                                                      40651000
              BEGIN                              % 4     GO             40652000
                   IF TABLE(I + 1) = TOV THEN  NEXT;                    40653000
                   IF NEXT NEQ INTEGERV THEN  ERR(038);                 40654000
                   FOR J := 1 STEP 1 UNTIL LBLCNT DO                    40655000
                   IF ABS(LABL[J]) = NUM THEN                           40656000
                   BEGIN                                                40657000
                        EMIT1(4);  EMIT2(J);                            40658000
                        GO TO LD;                                       40659000
                   END;                                                 40660000
                   LABL[LBLCNT := LBLCNT +1] := - NUM;                  40661000
                   EMIT1(4);  EMIT2(LBLCNT);                            40662000
 LD:                                                                    40663000
              END;                                                      40664000
              BEGIN %(NOW IN RECEIVE AND TRANSMIT) 5       ERROR        40665000
                   ERRORCOUNT:=ERRORCOUNT-1; ERR(003)                   40666000
              END;                                                      40667000
              BEGIN                              % 6     DELAY          40668000
                   EMIT1(21);                                           40669000
                   IF NEXT NEQ LFTPAREN THEN  ERR(043);                 40670000
                   IF NEXT NEQ INTEGERV THEN  ERR(038);                 40671000
                   J := NUM;                                            40672000
                   IF NEXT NEQ TIMEV    THEN  ERR(046);                 40673000
                   EMIT1(TIMECONV(J,ELBAT[I].TYPE));                    40674000
                   IF NEXT NEQ RGTPAREN THEN  ERR(044);                 40675000
              END;                                                      40676000
              BEGIN                              % 7     TERMINATE      40677000
                   EMIT1(20);                                           40678000
                   IF NEXT = DISPTOG AND ELBAT[I].TYPE = 2 THEN         40679000
                   IF TABLE(I + 1) = LFTPAREN THEN                      40680000
                   BEGIN                                                40681000
                        NEXT;                                           40682000
                        IF NEXT NEQ RETURNV THEN ERR(241);              40683000
                        IF NEXT NEQ RGTPAREN THEN ERR(044);             40684000
                        EMIT1(0);                                       40685000
                   END                                                  40686000
                   ELSE                                                 40687000
                   EMIT1(6)                                             40688000
                   ELSE                                                 40689000
                   IF ELCLASS = NORMALV THEN  EMIT1(1)                  40690000
                   ELSE                                                 40691000
                   IF ELCLASS = ERRORV THEN  EMIT1(2)                   40692000
                   ELSE                                                 40693000
                   IF ELCLASS = DISPTOG AND ELBAT[I].TYPE = 3 THEN      40694000
                   EMIT1(3)                                             40695000
                   ELSE                                                 40696000
                   IF ELCLASS =ENABLEINPUTV THEN  EMIT1(4)              40697000
                   ELSE                                                 40698000
                   IF ELCLASS = NOINPUTV THEN  EMIT1(5)                 40699000
                   ELSE                                                 40700000
                   IF ELCLASS = REQUEST THEN EMIT1(6)%TERMINATE REQUEST.40701000
                   ELSE                                                 40702000
                        ERR(017);                                       40703000
              END;                                                      40704000
              BEGIN                              % 8     INITIATE       40705000
                   IF NEXT    = RECEIVEV THEN  EMIT1(9)                 40706000
                   ELSE                                                 40707000
                   IF ELCLASS = TRANSMITV THEN  EMIT1(10)               40708000
                   ELSE                                                 40709000
                        ERR(018);                                       40710000
                   IF OPTIONALDELAY THEN GO EXIT;                       40711000
              END;                                                      40712000
              BEGIN                              % 9     INITIALIZE     40713000
                   IF NEXT = BCCV THEN                                  40714000
                   BEGIN                                                40715000
                        EMIT1(11);  BRW.BBCC := TRUE;                   40716000
                   END                                                  40717000
                   ELSE                                                 40718000
                   IF ELCLASS = TEXTV THEN  EMIT1(12)                   40719000
                   ELSE                                                 40720000
                   IF ELCLASS = TRANV THEN  EMIT1(27)                   40721000
                   ELSE                                                 40722000
                   IF ELCLASS = BLKNV THEN  EMIT1(29)                   40723000
                   ELSE                                                 40724000
                        ERR(019);                                       40725000
              END;                                                      40726000
              BEGIN                              % 10     SUM           40727000
                   EMIT1(16);                                           40728000
                   BRW.BBCC := TRUE;                                    40729000
              IF ITA:=TABLE(I+1) = CHARACTERV THEN EMIT1(2)             40730000
                   ELSE                                                 40731000
                   IF ITA = STRING AND REAL(ACCUMSTART - 1,1) = 1 THEN  40732000
                   BEGIN                                                40733000
                   EMIT1(0);                                            40734000
                        EMIT1(REAL(POINTER(ACCUM[2],8),1));             40735000
                   END                                                  40736000
                   ELSE                                                 40737000
              IF ITA = PERIOD THEN BEGIN EMIT1(2); GO AWAY; END         40738000
              ELSE GO AWAY;                                             40739000
                   NEXT;                                                40740000
              END;                                                      40741000
              BEGIN                              % 11     FETCH         40742000
                   EMIT1(14);                                           40743000
                   RPT:=PEMIT; FIXCNT:=CODECNT;%REMEMBER PLACE FOR FIXUP40744000
                   EMIT2(0);                                            40745000
                   IF OPTENDOFBUFFER(RPT) THEN GO EXIT;                 40746000
              END;                                                      40747000
              BEGIN                              % 12     STORE         40748000
                   EMIT1(15);                                           40749000
                   RPT:=PEMIT; FIXCNT:=CODECNT;%REMEMBER PLACE FOR FIXUP40750000
                   EMIT2(0);                                            40751000
                   IF (J := TABLE(I + 1)) = STRING THEN                 40752000
                   BEGIN                                                40753000
                        EMIT1(0);                                       40754000
                   EMIT1(INTEGER(ACCUMSTART-1,1).[6:7]);                40755000
                   EMITN1(POINTER(ACCUM[2],8),                          40756000
                          INTEGER(ACCUMSTART-1,1));                     40757000
                        NEXT;                                           40758000
                   END                                                  40759000
                   ELSE                                                 40760000
                   IF J = CHARACTERV THEN                               40761000
                   BEGIN                                                40762000
                        EMIT1(2);  NEXT;                                40763000
                   END                                                  40764000
                   ELSE                                                 40765000
                   EMIT1(2);                                            40766000
                   IF OPTENDOFBUFFER(RPT) THEN GO EXIT;                 40767000
              END;                                                      40768000
              BEGIN                              % 13     RECEIVE       40769000
COMMENT  THE MACRO EMITTED FOR THE RECEIVE STATEMENT IS:                40770000
   BYTE CONTAINS      DECIMAL MEANING                                   40771000
   ---- --------      ------- -------                                   40772000
     1  MACRO IDENTITY    18  RECEIVE STATEMENT MACRO                   40773000
     2  TIMEOUT VALUE     XX  TIMEOUT VALUE SPECIFIED IN PARENTHESES.   40774000
     3  ERROR INDEX       XX  INTERNAL NO. OF ERROR SWITCH USED         40775000
                              BY THIS STATEMENT.                        40776000
    4-5 ITEM LABEL      XXXX  LABEL BRANCHED TO ON SPECIFIED ENDOFBUFFER40777000
     6  TYPE OF RECEIVE   0   STRING                                    40778000
                          1   ADDRESS                                   40779000
                          2   CHARACTER                                 40780000
                          3   BCC                                       40781000
                          4   TEXT                                      40782000
                          5   TRAN                                      40783000
                          6   BLKN                                      40784000
                          7   SEQUENCE                                  40785000
;                                                                       40786000
                   EMIT1(18);                                           40787000
                   TRANSMIT:=FALSE;                                     40788000
                   RPT:=PEMIT; FIXCNT:=CODECNT;%REMEMBER PLACE FOR FIXUP40789000
                   EMIT2(0);          % 4"0000"                         40790000
                   EMIT2(3"177401");% 4"FF01"                           40791000
                   IF TABLE(I + 1) = LFTPAREN THEN                      40792000
                   BEGIN                                                40793000
                        NEXT;                                           40794000
                        IF NEXT NEQ INTEGERV THEN                       40795000
                        IF ELCLASS = NULLV THEN                         40796000
                        EMITFIX1(3"37")   %4"1F"                        40797000
                        ELSE                                            40798000
                             ERR(150)                                   40799000
                        ELSE                                            40800000
                        IF NUM = 0 THEN  ERR(221)                       40801000
                        ELSE                                            40802000
                        IF TABLE(I+1) NEQ TIMEV THEN ERR(046)           40803000
                        ELSE                                            40804000
                        BEGIN                                           40805000
                   A[0]:= TIMECONV(NUM,ELBAT[I+1].TYPE);                40806000
                        NEXT;                                           40807000
                        EMITFIXN1(POINTER(A,8)+5,1);                    40808000
                        END;                                            40809000
                        IF NEXT NEQ RGTPAREN THEN ERR(044);             40810000
                   END                                                  40811000
                   ELSE                                                 40812000
                   EMITFIX1(0);                                         40813000
 LK:                                                                    40814000
                   BBB := FALSE;                                        40815000
                   BERROR := FALSE;                                     40816000
                   IF (J := TABLE(I + 1)) = CHARACTERV THEN             40817000
                   BEGIN                                                40818000
                        EMIT1(2);  NEXT;  J := 0;                       40819000
                   END                                                  40820000
                   ELSE                                                 40821000
                   IF J = ADDRESSV THEN                                 40822000
                   BEGIN                                                40823000
                        EMIT1(1);  NEXT;                                40824000
                        IF TABLE(I + 1) = LFTPAREN THEN                 40825000
                        BEGIN                                           40826000
                             NEXT;                                      40827000
                             IF NEXT = RECEIVEV THEN                    40828000
                             BEGIN                                      40829000
                                  EMIT1(0);  BRW.BRRA := TRUE;          40830000
                             END                                        40831000
                             ELSE                                       40832000
                             IF ELCLASS = TRANSMITV THEN                40833000
                             BEGIN                                      40834000
                                  EMIT1(1);  BRW.BRTA := TRUE;          40835000
                             END                                        40836000
                             ELSE                                       40837000
                                  ERR(027);                             40838000
                             IF NEXT NEQ RGTPAREN THEN ERR(044);        40839000
                        END                                             40840000
                        ELSE                                            40841000
                        BEGIN                                           40842000
                             EMIT1(0);  BRW.BRRA := TRUE;               40843000
                        END;                                            40844000
                   END                                                  40845000
                   ELSE                                                 40846000
                   IF J = TRANV THEN                                    40847000
                   BEGIN                                                40848000
                        EMIT1(5);  NEXT;  BRW.BRTRAN := TRUE;           40849000
                   END                                                  40850000
                   ELSE                                                 40851000
                   IF J = BLKNV THEN                                    40852000
                   BEGIN                                                40853000
                        EMIT1(6);  NEXT;  BRW.BRBLK  := TRUE;           40854000
                   END                                                  40855000
                   ELSE                                                 40856000
                   IF J = TEXTV THEN                                    40857000
                   BEGIN                                                40858000
                       EMIT1(4);  NEXT; J := 0 & 1 [46:1];     %CHECKIT 40859000
                   END                                                  40860000
                   ELSE                                                 40861000
                   IF J = BCCV THEN                                     40862000
                   BEGIN                                                40863000
                        EMIT1(3);  NEXT;  BRW.BBCC  := TRUE;            40864000
                   END                                                  40865000
                   ELSE                                                 40866000
                   IF J = SEQUENCEV THEN                                40867000
                   BEGIN                                                40868000
                        EMIT1(7);  NEXT;  BRW.BRSEQ := TRUE;            40869000
                   END                                                  40870000
                   ELSE                                                 40871000
                   IF J = STRING THEN                                   40872000
                   BEGIN                                                40873000
                        EMIT1(0);  NEXT;                                40874000
                        K := REAL(ACCUMSTART - 1,1);                    40875000
                        EMIT1(K);                                       40876000
                        EMITN1(STRINGSTART,K);                          40877000
                   END                                                  40878000
                   ELSE                                                 40879000
                   BEGIN                                                40880000
                        EMIT1(2);  J := 0;                              40881000
                   END;                                                 40882000
                   IF TABLE(I + 1) NEQ LFTBRACKET THEN                  40883000
                   BEGIN                                                40884000
                        IF NOT TRANSMIT AND J=0 THEN                    40885000
                        BEGIN                                           40886000
                             EMIT1(255); % 4"FF", STOPPER               40887000
                             RECEIVEACTIONPART;                         40888000
                             GO TO LH                                   40889000
                        END                                             40890000
                        ELSE                                            40891000
                        BEGIN                                           40892000
                             TRANSMITACTIONPART;                        40893000
                             GO TO LH                                   40894000
                        END                                             40895000
                        GO TO LH;                                       40896000
                   END                                                  40897000
                   ELSE                                                 40898000
                   NEXT;                                                40899000
              IF TRANSMIT THEN TRANSMITACTIONPART ELSE                  40900000
                   RECEIVEACTIONPART;                                   40901000
LH:                                                                     40902000
         END OF CASE THIRTEEN FOR RECEIVE;                              40903000
              BEGIN                              % 14     TRANSMIT      40904000
                   EMIT1(17);                                           40905000
                        TRANSMIT:=TRUE;                                 40906000
                        RPT:=PEMIT; % REMEMBER ERROR INDEX LOC. IN MACRO40907000
                        FIXCNT:=CODECNT;                                40908000
                        EMIT1(0);% ZERO ERROR INDEX FOR TRANSMIT MACRO  40909000
                   GO TO LK;                                            40910000
              END;                                                      40911000
              BEGIN                              % 15     CHARACTER     40912000
                   RPT:=PEMIT; FIXCNT:=CODECNT;                         40913000
                   EMIT1(0);                                            40914000
                   EMIT1(2);                                            40915000
 LM:                                                                    40916000
                   IF NEXT NEQ EQUAL THEN  ERR(035);                    40917000
                   TRANSMIT:=FALSE;                                     40918000
 LL:                                                                    40919000
                   IF NEXT = TALLYV THEN                                40920000
                   BEGIN                                                40921000
                        IF TALLYCHECK THEN                              40922000
                        GO EXIT;                                        40923000
                   END                                                  40924000
                   ELSE                                                 40925000
                   IF ELCLASS = CHARACTERV THEN  EMIT1(2)               40926000
                   ELSE                                                 40927000
                   IF ELCLASS = BCCV THEN                               40928000
                   BEGIN                                                40929000
                        EMIT1(3);  BRW.BBCC := TRUE;                    40930000
                   END                                                  40931000
                   ELSE                                                 40932000
                   IF ELCLASS = RETRYV THEN  EMIT1(4)                   40933000
                   ELSE                                                 40934000
                   IF ELCLASS = PAGEV THEN  EMIT1(5)                    40935000
                   ELSE                                                 40936000
                   IF ELCLASS = WIDTHV THEN  EMIT1(6)                   40937000
                   ELSE                                                 40938000
                   IF ELCLASS = STRING THEN                             40939000
                   IF REAL(ACCUMSTART - 1,1) = 1 THEN                   40940000
                   BEGIN                                                40941000
                        EMIT1(0);                                       40942000
                        EMIT1(REAL(POINTER(ACCUM[2],8),1));             40943000
                   END                                                  40944000
                   ELSE                                                 40945000
                        ERR(024)                                        40946000
                   ELSE                                                 40947000
                   IF ELCLASS = INTEGERV THEN                           40948000
                   BEGIN                                                40949000
                        EMIT1(0);  EMIT1(NUM);                          40950000
                   END                                                  40951000
                   ELSE                                                 40952000
                        ERR(024);                                       40953000
         IF TRANSMIT THEN                                               40954000
                   BEGIN                                                40955000
              TRANSMIT:=FALSE; GO AWAY;                                 40956000
                   END;                                                 40957000
                   IF J := TABLE(I + 1) = PLUS THEN                     40958000
               EMITFIX1(7)                                              40959000
                   ELSE                                                 40960000
                   IF J = MINUS THEN                                    40961000
               EMITFIX1(8)                                              40962000
                   ELSE                                                 40963000
                   BEGIN                                                40964000
                    EMITFIX1(6);                                        40965000
                        GO AWAY;                                        40966000
                   END;                                                 40967000
                   NEXT;                                                40968000
              TRANSMIT:=TRUE; GO LL;                                    40969000
              END;                                                      40970000
              BEGIN                              % 16     TALLY         40971000
                   RPT:=PEMIT; FIXCNT:=CODECNT;                         40972000
                   EMIT1(0);                                            40973000
                   IF TALLYCHECK THEN GO EXIT;                          40974000
                   GO TO LM;                                            40975000
              END;                                                      40976000
              BEGIN                              % 17     BCC           40977000
                   RPT:=PEMIT; FIXCNT:=CODECNT;                         40978000
                   EMIT1(0);                                            40979000
                   EMIT1(3);                                            40980000
                   BRW.BBCC := TRUE;  GO LM;                            40981000
              END;                                                      40982000
              BEGIN                              % 18     RETRY         40983000
                   RPT:=PEMIT; FIXCNT:=CODECNT;                         40984000
                   EMIT1(0);                                            40985000
                   EMIT1(4);  GO LM;                                    40986000
              END;                                                      40987000
              BEGIN                              % 19     TOGGLE        40988000
                   EMIT1(5);                                            40989000
                   IF TOGGLECHECK THEN GO EXIT;                         40990000
 LO:                                                                    40991000
                   IF NEXT NEQ EQUAL THEN  ERR(035);                    40992000
                   IF NEXT = TOGGLEV THEN                               40993000
                   BEGIN                                                40994000
                        IF TOGGLECHECK THEN GO EXIT;                    40995000
                   END;                                                 40996000
                   IF ELCLASS = ERRORTOG THEN                           40997000
                   BEGIN                                                40998000
                        EMIT1(3);                                       40999000
                        EMIT1(ELBAT[I].TYPE);                           41000000
                   END                                                  41001000
                   ELSE                                                 41002000
                   IF ELCLASS = LOGICALVALUE THEN                       41003000
                   EMIT1(ELBAT[I].TYPE)                                 41004000
                   ELSE                                                 41005000
                        ERR(027);                                       41006000
              END;                                                      41007000
              BEGIN                              % 20     ERRORFLAG     41008000
                   IF ELBAT[I].TYPE = 3 THEN                            41009000
                   IF TABLE(I + 1) = LFTPAREN THEN                      41010000
                   BEGIN                                                41011000
                        NEXT;                                           41012000
                        EMIT1(23);                                      41013000
                        IF TABLE(I+1)=ASTERISK THEN                     41014000
                        BEGIN                                           41015000
                             NEXT; EMIT1(31);                           41016000
                        END                                             41017000
                   ELSE BEGIN                                           41018000
                             ITA:=TIMEST; IF NOT GOOD THEN GO EXIT;     41019000
                             EMIT1(TIMECONV(ITA.[13:14],ITA.[15:2]));   41020000
                        END;                                            41021000
                        IF NEXT NEQ COMMA THEN ERR(50);                 41022000
                        IF TABLE(I+1)=NULLV THEN                        41023000
                        BEGIN                                           41024000
                             NEXT; EMIT1(31);                           41025000
                        END                                             41026000
                   ELSE BEGIN                                           41027000
                             ITA:=TIMEST; IF NOT GOOD THEN GO EXIT;     41028000
                             EMIT1(TIMECONV(ITA.[13:14],ITA.[15:2]));   41029000
                        END;                                            41030000
                        IF NEXT NEQ RGTPAREN THEN ERR(44);              41031000
                        GO AWAY;                                        41032000
                   END                                                  41033000
              ELSE IF NEXT NEQ LFTBRACKET THEN ERR(47)                  41034000
              ELSE BEGIN                                                41035000
                        EMIT1(5); EMIT1(3);                             41036000
                        IF BREAKOPTIONS THEN GO EXIT;                   41037000
                        GO LO;                                          41038000
                   END;                                                 41039000
                   EMIT1(5);                                            41040000
                   EMIT1(3);                                            41041000
                   EMIT1(ELBAT[I].TYPE);                                41042000
                   GO TO LO;                                            41043000
              END;                                                      41044000
              BEGIN                              % 21     FINISH        41045000
                   EMIT1(13);                                           41046000
              IF NEXT NEQ TRANSMITV THEN ERR(256);                      41047000
                   IF OPTIONALDELAY THEN GO EXIT;                       41048000
              END;                                                      41049000
              BEGIN                    % 22     ONLY THE SHADOW KNOWS   41050000
                   EMIT1(22);                                           41051000
                   IF NEXT = STRING THEN                                41052000
                   BEGIN                                                41053000
                        EMIT1(INTEGER(ACCUMSTART-1,1));                 41054000
                        EMITN1(POINTER(ACCUM[2],8),                     41055000
                               INTEGER(ACCUMSTART-1,1));                41056000
                   END                                                  41057000
                   ELSE                                                 41058000
                        ERR(039);                                       41059000
              END;                                                      41060000
              BEGIN                              % 23     INCREMENT     41061000
                   IF NEXT = TRANV THEN  EMIT1(26)                      41062000
                   ELSE                                                 41063000
                   IF ELCLASS = BLKNV THEN  EMIT1(28)                   41064000
                   ELSE                                                 41065000
                   IF ELCLASS = SEQUENCEV THEN  EMIT1(30)               41066000
                   ELSE                                                 41067000
                   ERR(240);                                            41068000
              END;                                                      41069000
         BEGIN                                   % 24     EXAMINE       41070000
COMMENT  THE MACRO EMITTED FOR THE EXAMINE STATEMENT IS:                41071000
   BYTE CONTAINS      DECIMAL MEANING                                   41072000
   ---- --------      ------- -------                                   41073000
     1  MACRO IDENTITY    19  EXAMINE STATEMENT MACRO                   41074000
     2  NO. OF CHARS.     XX  NO. OF CHARS WHICH FOLLOW AND WHICH ARE   41075000
                              TO BE CHECKED FOR.                        41076000
     3  TYPE OF EXAMINE.  XX  WHAT IS TO BE CHECKED FOR.                41077000
                           2  CHARACTER                                 41078000
                           3  BCC                                       41079000
                           4  RETRY                                     41080000
                           5  PAGE                                      41081000
                           6  WIDTH                                     41082000
     4  CHARACTER         XX  CHARACTER CHECKED FOR.                    41083000
   5-6  LABEL.          XXXX  LABEL BRANCHED  TO IF PRECEDING CHARACTER 41084000
                              HAS BEEN DETECTED.                        41085000
    7   CHARACTER.        XX  CHARACTER CHECKED FOR.                    41086000
   8-9  LABEL.          XXXX  LABEL BRANCHED TO IF PRECEDING CHARACTER  41087000
                              HAS BEEN DETECTED.                        41088000
  -END     ETC. IN 3 BYTE SETS.                                         41089000
 ;                                                                      41090000
         PL:=POINTER(A,8)+10;                                           41091000
         EMIT1(19);                                                     41092000
         A[0]:=-1;                                                      41093000
COMMENT  SINCE BASE ZERO IS USED, THE # OF CHARS. (OR LABELS) PASSED IN 41094000
 BYTE 2 OF THE EXAMINE MACRO RANGES FROM ZERO (I.E.ONE LABEL) TO 255    41095000
 (I.E. 256 LABELS).                                                     41096000
 ;                                                                      41097000
              RPTA:=PEMIT; FIXCNTA:=CODECNT;                            41098000
              EMIT1(0);                                                 41099000
              IF NEXT = FORV THEN EMIT1(2) ELSE                         41100000
                 BEGIN                                                  41101000
                   IF ELCLASS = CHARACTERV THEN EMIT1(2) ELSE           41102000
                   IF ELCLASS = RETRYV THEN EMIT1(4) ELSE               41103000
                   IF ELCLASS = PAGEV THEN EMIT1(5) ELSE                41104000
                   IF ELCLASS = WIDTHV THEN EMIT1(6) ELSE               41105000
                   IF ELCLASS = BCCV THEN EMIT1(3) ELSE                 41106000
                   IF ELCLASS = TALLYV THEN                             41107000
                      BEGIN                                             41108000
                        IF TALLYCHECK THEN GO EXIT;                     41109000
                 END ELSE ERR(257);                                     41110000
              IF NEXT NEQ FORV THEN ERR(258);                           41111000
                 END;                                                   41112000
         IF NEXT = PERIOD THEN ERR(259);                                41113000
              WHILE ELCLASS NEQ PERIOD DO                               41114000
                 BEGIN                                                  41115000
              IF ELCLASS = INTEGERV AND NUM LSS 256 THEN EMIT1(K:=NUM)  41116000
              ELSE IF ELCLASS = STRING AND ACCUM[1].CHRCNT LEQ 1 THEN   41117000
                       EMIT1(K:=REAL(STRINGSTART,1))                    41118000
         ELSE ERR(260);                                                 41119000
               IF NEXT=COLON THEN                                       41120000
                  BEGIN                                                 41121000
LAB:                                                                    41122000
                  IF NEXT=NULLV THEN EMIT2(3"177400") %4"FF00",NULL     41123000
                  ELSE IF ELCLASS=ABORTV THEN EMIT2(3"177401") %"FF01"  41124000
              ELSE IF ELCLASS NEQ INTEGERV THEN ERR(73) % LABEL EXPECTED41125000
              ELSE      BEGIN                                           41126000
                  FOR J:=1 STEP 1 UNTIL LBLCNT DO                       41127000
                  IF ABS(LABL[J]) = NUM THEN                            41128000
                    BEGIN                                               41129000
                      IF NOT BERROR THEN EMIT2(J);                      41130000
                      A[1]:=J;                                          41131000
                      GO TO PASS;                                       41132000
                    END;                                                41133000
                  LABL[LBLCNT:=LBLCNT+1]:=-NUM;                         41134000
                  IF NOT BERROR THEN EMIT2(LBLCNT);                     41135000
                  A[1]:=LBLCNT;                                         41136000
                       END;                                             41137000
    PASS:     IF NOT BERROR THEN A[0]:=A[0]+1;                          41138000
              IF BBB THEN                                               41139000
                   BEGIN                                                41140000
                   RPT:=RPTB; FIXCNT:=FIXCNTB;                          41141000
                   THRU KK DO                                           41142000
                        BEGIN                                           41143000
                        EMITFIXN2(PL,2);                                41144000
                        RPT:=RPT+3; FIXCNT:=FIXCNT+3;                   41145000
                        END;                                            41146000
                  BBB:=BERROR:=FALSE;                                   41147000
                  A[0]:=A[0]+KK;                                        41148000
                  KK:=0;                                                41149000
                END                                                     41150000
              END                                                       41151000
         ELSE IF ELCLASS=PERIOD THEN ERR(73) % LABEL EXPECTED.          41152000
            ELSE IF ELCLASS = MINUS THEN                                41153000
              BEGIN                                                     41154000
                BERROR:=TRUE;                                           41155000
                IF NEXT = INTEGERV AND NUM LSS 256 THEN TON:=NUM        41156000
                ELSE IF ELCLASS = STRING AND ACCUM[1].CHRCNT LEQ 1      41157000
                       THEN TON:=REAL(STRINGSTART,1)                    41158000
              ELSE ERR(260);                                            41159000
              IF BBB THEN % DO NOTHING                                  41160000
         ELSE      BEGIN                                                41161000
                   BBB:=TRUE; RPTB:=PEMIT; FIXCNTB:=CODECNT;            41162000
                   END;                                                 41163000
              RPT:=PEMIT-1; FIXCNT:=CODECNT-1; NOTFIRST:=FALSE;         41164000
              FOR J:=MIN(K,TON) STEP 1 UNTIL MAX(K,TON) DO              41165000
                   BEGIN                                                41166000
                   IF NOTFIRST THEN EMIT1(J)                            41167000
              ELSE      BEGIN                                           41168000
                        NOTFIRST:=TRUE;                                 41169000
                        EMITFIX1(J);                                    41170000
                        END;                                            41171000
                   EMIT2(0);                                            41172000
                   KK:=KK+1;                                            41173000
                   END;                                                 41174000
              END                                                       41175000
            ELSE IF ELCLASS = COMMA THEN                                41176000
                     BEGIN                                              41177000
                       KK:=KK+1;                                        41178000
              IF BBB THEN % DO NOTHING.                                 41179000
         ELSE      BEGIN                                                41180000
                   BBB:=TRUE; RPTB:=PEMIT; FIXCNTB:=CODECNT;            41181000
                   END;                                                 41182000
                       EMIT2(0);                                        41183000
                   END ELSE ERR(262);                                   41184000
                   IF NEXT = COMMA THEN                                 41185000
                     BEGIN   STEPIT;   BERROR:=FALSE;   END;            41186000
                   IF ELCLASS = COLON THEN GO LAB;                      41187000
                 END;                                                   41188000
              RPT:=RPTA; FIXCNT:=FIXCNTA; % INSERT # OF CHARS IN MACRO  41189000
              EMITFIXN1(POINTER(A,8)+5,1);                              41190000
              I:=I-1;   GO AWAY;                                        41191000
         END;                                                           41192000
         END OF CASE STATEMENT;                                         41193000
 AWAY:                                                                  41194000
         IF BGNCNT NEQ 0 THEN IF TABLE(I+1) = ENDV  THEN GO EXIT;       41195000
         IF IFCNT  NEQ 0 THEN IF TABLE(I+1) = ELSEV THEN GO EXIT;       41196000
         IF NEXT = PERIOD THEN GOOD := TRUE ELSE ERROR(034);            41197000
 EXIT:                                                                  41198000
    END;                                                                41199000
PROCEDURE REQUESTDEFINITION;                                            41200000
    BEGIN                                                               41201000
         ARRAY A [0:5];                                                 41202000
         BOOLEAN NOTPRINTED;                                            41203000
         LABEL LA,AWAY;                                                 41204000
         IF GETFF(RSI) = UNKNOWN THEN                                   41205000
         BEGIN                                                          41206000
              ACCUM[0].CLASS := REQUESTID;                              41207000
              ENTR(RSI);                                                41208000
              SAVEREC := LASTREC;                                       41209000
 LA:          IF NEXT NEQ COLON THEN                                    41210000
              BEGIN                                                     41211000
                   FLAG(045);                                           41212000
                   WHILE NEXT NEQ COLON AND ELCLASS NEQ PERIOD DO;      41213000
              END;                                                      41214000
         END                                                            41215000
         ELSE                                                           41216000
         BEGIN                                                          41217000
              FLAG(153);  GO LA;                                        41218000
         END;                                                           41219000
         PEMIT := POINTER(REQBUFF,8);                                   41220000
         REPLACE PEMIT BY 0 FOR 75 WORDS;                               41221000
         BGNCNT := IFCNT := CODECNT := LBLCNT := 0;                     41222000
         SWCNT:=0;                                                      41223000
         SWRCNT:=SWTCNT:=-1; % ERR INDEXES START AT ZERO                41224000
         FILL A[*] WITH                                                 41225000
              3"7760077700377401",             % 4"FF01FF01FF01"        41226000
              3"7760077700377401";             % 4"FF01FF01FF01"        41227000
         REPLACE PSWR := POINTER(SWR,8) BY 0 FOR 2,                     41228000
                 POINTER(A,8) FOR 12;                                   41229000
         REPLACE PSWT:=POINTER(SWT,8) BY 0 FOR 2,                       41230000
                                        POINTER(A,8) FOR 4;             41231000
         BREQ := TRUE;                                                  41232000
         BON := BRW := FALSE;                                           41233000
         ENFO[SAVEREC,4] := IREQIM;                                     41234000
%        WRITEREQ;                                                      41235000
         DO STATEMENT UNTIL BEND;                                       41236000
 AWAY:                                                                  41237000
         EMIT1(255);                                     % 4"FF"        41238000
         EMITN2(POINTER(SWR,8),(SWRCNT+1)|14);                          41239000
         EMIT1(255);                                     % 4"FF"        41240000
         EMITN2(POINTER(SWT,8),(SWTCNT+1)|6);                           41241000
         EMIT1(255);                                                    41242000
         REPLACE POINTER(SWDA) BY 0 FOR SWCNT WORDS;                    41243000
         NOTPRINTED:=TRUE;                                              41244000
         FOR ITA := 1 STEP 1 UNTIL LBLCNT DO                            41245000
         IF LABL[ITA].[46:1] = 1 THEN                                   41246000
         BEGIN                                                          41247000
              IF NOTPRINTED THEN                                        41248000
                   BEGIN                                                41249000
                   NOTPRINTED:=FALSE;                                   41250000
                   ERR(268); % LABELS USED BUT NON-EXISTENT.            41251000
                   END;                                                 41252000
              REPLACE POINTER(TLBUFF) BY " " FOR 15 WORDS;              41253000
              REPLACE POINTER(TLBUFF)+15 BY                             41254000
                         ABS(LABL[ITA]) FOR 5 DIGITS;                   41255000
              WRITE(PR,15,TLBUFF[*]);                                   41256000
         END;                                                           41257000
         TLBLCNT := TLBLCNT + LBLCNT;                                   41258000
         ITA := DELTA(POINTER(REQBUFF,8),PEMIT);                        41259000
         ITA := ((ITA + 5) DIV 6 + 29) DIV 30;                          41260000
         ITB := 0;                                                      41261000
         THRU ITA DO                                                    41262000
         BEGIN                                                          41263000
              REPLACE POINTER(ENFO[NEXTREC,0],8) BY                     41264000
                   POINTER(REQBUFF[ITB],8) FOR 30 WORDS;                41265000
              NEXTREC := NEXTREC + 1;                                   41266000
              ITB := ITB + 30;                                          41267000
         END;                                                           41268000
         BREQ := FALSE; CODECNT := 123456;                              41269000
         WRITEREQ;                                                      41270000
         ENFO[SAVEREC,0] := ITA;                                        41271000
         ENFO[SAVEREC,1] := R(BRW);                                     41272000
         ENFO[SAVEREC,2] := LBLCNT;                                     41273000
         ENFO[SAVEREC,3] := R(BON);                                     41274000
    END;                                                                41275000
PROCEDURE MODEMDEFINITION;                                              41276000
    BEGIN                                                               41277000
         LABEL LID, AGAIN, AWAY, XIT;                                   41278000
         BAD := SWORD := FALSE;                                         41279000
         REPLACE POINTER(TP,6) BY 0 FOR 15 WORDS;                       41280000
 LID:    IF GETFF(MSI) NEQ UNKNOWN THEN                                 41281000
         BEGIN                                                          41282000
              FLAG(153);                                                41283000
              WHILE NEXT NEQ COLON AND ELCLASS NEQ PERIOD DO;           41284000
              BAD := TRUE;                                              41285000
         END                                                            41286000
         ELSE                                                           41287000
         BEGIN                                                          41288000
         ACCUM[0].CLASS := MODEMID;                                     41289000
         ENTR(MSI);                                                     41290000
         IF NEXT NEQ COLON THEN ERROR(045);                             41291000
         END;                                                           41292000
AGAIN:   GTA := REAL(MCASE + NEXT,1);                                   41293000
         IF GTA LSS 1 THEN                                              41294000
              BEGIN                                                     41295000
              ERROR(223); GO AGAIN;                                     41296000
              END;                                                      41297000
         LASTELBAT := ELBAT[I];                                         41298000
         IF GTA NEQ 1 THEN                                              41299000
         IF NEXT NEQ EQUAL THEN                                         41300000
              BEGIN                                                     41301000
              ERROR (035); GO AGAIN;                                    41302000
              END;                                                      41303000
         CASE(GTA - 1) OF                                               41304000
         BEGIN                                                          41305000
              GO AWAY;                                                  41306000
              BEGIN                              % ADAPTER 1            41307000
                   IF SWORD.MADPTB THEN FLAG(134);                      41308000
                   TP[MADPTTYPE] := GTA := ADAPTERST;                   41309000
                   SWORD.MADPTB := GOOD;                                41310000
              END;                                                      41311000
              BEGIN                              % TRANSMITDELAY 2      41312000
                   IF SWORD.MTRNARNDB THEN FLAG(134);                   41313000
                   TP[MITT]  := (GTA := TIMEST).[13:14];                41314000
                   TP[MITTU] :=  GTA.[15:2];                            41315000
                   IF GOOD THEN TP[MITTDY] := DYNAMICPART;              41316000
                   SWORD.MTRNARNDB := GOOD;                             41317000
              END;                                                      41318000
              BEGIN                              % NOISEDELAY 3         41319000
                   IF SWORD.MNOISDLYB THEN FLAG(134);                   41320000
                   TP[MITND]  := (GTA := TIMEST).[13:14];               41321000
                   TP[MITNDU] :=  GTA.[15:2];                           41322000
                   IF GOOD THEN TP[MITNDY] := DYNAMICPART;              41323000
                   SWORD.MNOISDLYB := GOOD;                             41324000
              END;                                                      41325000
         END;                                                           41326000
         IF GOOD THEN IF NEXT NEQ PERIOD THEN ERROR(034);               41327000
         IF LISTOG THEN PRINTLINE;                                      41328000
         GO AGAIN;                                                      41329000
AWAY:    IF NOT SWORD.MADPTB THEN  ERR(224);                            41330000
         IF NOT SW.MNOISDLYB THEN  ERR(226);                            41331000
         IF NOT SW.MTRNARNDB THEN  ERR(247);                            41332000
         IF SW.MADPTB AND NOT BAD THEN                                  41333000
         BEGIN                                                          41334000
              MADTYPES := R(B(MADTYPES) OR B(TP[MADPTTYPE]));           41335000
              MODEMSUM[MSC := MSC + 1] := TP[MADPTTYPE];                41336000
              TP[MINFO] := MSC;                                         41337000
              IF SW.MNOISDLYB THEN                                      41338000
              BEGIN                                                     41339000
                   MODEMSUM[MSC].[46:8] := ITA :=                       41340000
                        TIMECONV(TP[MITT],TP[MITTU]);                   41341000
                   ITB := TIMECONV(TP[MITND],TP[MITNDU]);               41342000
                   IF CTIME(ITB,ITA) = 1 THEN                           41343000
                   MODEMSUM[MSC].[38:8] := ITB;                         41344000
              END;                                                      41345000
         END;                                                           41346000
         IF NOT BAD THEN                                                41347000
         REPLACE POINTER(ENFO[LASTREC,0],8)                             41348000
              BY POINTER(TP,8) FOR 5 WORDS;                             41349000
XIT:     END;                                                           41350000
PROCEDURE TERMINALDEFINITION;                                           41351000
    BEGIN                                                               41352000
         LABEL  AGAIN,AWAY,EXIT,LID,STUFF;                              41353000
         BAD := BRW := SWORD := FALSE;                                  41354000
         APPNUM := APPSET := 0;                                         41355000
         FOR ITA := 0 STEP 1 UNTIL 6 DO TPA[ITA] := 0;                  41356000
         REPLACE POINTER(TP,6) BY 0 FOR 15 WORDS;                       41357000
         IF GET(TSI,TRUE,FALSE) = DEFAULTV THEN                         41358000
              BEGIN                                                     41359000
              DEFAULTOG := TRUE;                                        41360000
              GETFF(TSI);                                               41361000
              GO TO LID;                                                41362000
              END                                                       41363000
         ELSE                                                           41364000
              BEGIN                                                     41365000
              DEFAULTOG := FALSE;                                       41366000
 LID:         IF GETW.CLASS NEQ UNKNOWN THEN                            41367000
         BEGIN                                                          41368000
              FLAG(153);                                                41369000
              WHILE NEXT NEQ COLON AND ELCLASS NEQ PERIOD DO;           41370000
              BAD := TRUE;                                              41371000
         END                                                            41372000
         ELSE                                                           41373000
         BEGIN                                                          41374000
              ACCUM[0].CLASS :=                                         41375000
              IF DEFAULTOG THEN TERMINALDEFAULTID ELSE TERMINALID;      41376000
              ENTR(TSI);                                                41377000
              SAVEREC := LASTREC;                                       41378000
              IF NEXT NEQ COLON THEN  ERROR(045);                       41379000
        END  END;                                                       41380000
 AGAIN:  GTA := REAL(TCASE + NEXT,1);                                   41381000
         IF GTA < 1 THEN                                                41382000
         BEGIN                                                          41383000
              ERROR(155);  GO AGAIN;                                    41384000
         END;                                                           41385000
         LASTELBAT := ELBAT[I];                                         41386000
         IF GTA  NEQ 1 THEN                                             41387000
         IF NEXT NEQ EQUAL THEN                                         41388000
         BEGIN                                                          41389000
              ERROR(035);  GO AGAIN;                                    41390000
         END;                                                           41391000
         CASE (GTA - 1) OF                                              41392000
         BEGIN                                                          41393000
              GO AWAY;                                                  41394000
              BEGIN                              % CODE          1      41395000
                   IF SWORD.TCB THEN FLAG(134);                         41396000
                   TP[TCODE] := CODEST;                                 41397000
                   SWORD.TCB := GOOD;                                   41398000
              END;                                                      41399000
              BEGIN                              % BUFFER        2      41400000
                   IF SWORD.TBUFB THEN FLAG(134);                       41401000
                   TP[TBUF] := BUFFERST;                                41402000
                   SWORD.TBUFB := GOOD;                                 41403000
              END;                                                      41404000
              BEGIN                              % SCREEN        3      41405000
                   IF SWORD.TSCB THEN FLAG(134);                        41406000
                   TP[TSCRN] := SCREENST;                               41407000
                   SWORD.TSCB := GOOD;                                  41408000
              END;                                                      41409000
              BEGIN                              % MODE          4      41410000
                   IF SWORD.TMDB THEN FLAG(134);                        41411000
                   TP[TMODE] := TERMINALMODEST;                         41412000
                   SWORD.TMDB := GOOD;                                  41413000
              END;                                                      41414000
              BEGIN                              % BLOCKING      5      41415000
                   IF LASTELBAT.TYPE = 3 THEN                           41416000
                   BEGIN                                                41417000
                   IF SWORD.TBLKB THEN FLAG(134);                       41418000
                   TP[TBLK] := DISPTOGST;                               41419000
                   SWORD.TBLKB := GOOD;                                 41420000
                   END                                                  41421000
                   ELSE                                                 41422000
                   BEGIN                                                41423000
                        ERROR(155);  GO AGAIN;                          41424000
                   END;                                                 41425000
              END;                                                      41426000
              BEGIN                              % WIDTH         6      41427000
                   IF SWORD.TWDB THEN FLAG(134);                        41428000
                   TP[TWID] := WIDTHST;                                 41429000
                   SWORD.TWDB := GOOD;                                  41430000
              END;                                                      41431000
              BEGIN                              % PAGE          7      41432000
                   IF SWORD.TPGB THEN FLAG(134);                        41433000
                   TP[TPG] := PAGEST;                                   41434000
                   SWORD.TPGB := GOOD;                                  41435000
              END;                                                      41436000
              BEGIN                              % ADAPTER       8      41437000
                   IF SWORD.TADPTB THEN FLAG(134);                      41438000
                   TP[TADPTTYPE] := ADAPTERST;                          41439000
                   SWORD.TADPTB := GOOD;                                41440000
                   IF B(TP[TADPTTYPE]).[29:1] THEN FLAG(208);           41441000
              END;                                                      41442000
              BEGIN                              % PARITY       9       41443000
                        IF LASTELBAT.TYPE = 6 THEN                      41444000
                        BEGIN                                           41445000
                        IF SWORD.TPRB THEN FLAG(134);                   41446000
                        TP[PAR] := PARITYST;                            41447000
                        SWORD.TPRB := GOOD;                             41448000
                        GO AGAIN;                                       41449000
                        END                                             41450000
                   ELSE                          % TIMEOUT      9       41451000
                        IF LASTELBAT.TYPE = 0 THEN                      41452000
                        BEGIN                                           41453000
                        IF SWORD.TTIMOTB THEN FLAG(134);                41454000
                        TP[TTIMOUT]   := (GTA := TIMEST).[13:14];       41455000
                        TP[TTIMOUTU]  := GTA.[15:2];                    41456000
                        IF GOOD THEN TP[TTIMOUTDY] := DYNAMICPART;      41457000
                        SWORD.TTIMOTB := GOOD;                          41458000
                        END                                             41459000
                   ELSE                                                 41460000
                        BEGIN                                           41461000
                             ERROR(003);  GO AGAIN;                     41462000
                        END;                                            41463000
              END;                                                      41464000
              BEGIN                              % ICTDELAY      10     41465000
                   IF SWORD.TICTB THEN FLAG(134);                       41466000
                   TP[TICTDLYU] := (GTA := TIMEST).[15:2];              41467000
                   TP[TICTDLY]  := GTA.[13:14];                         41468000
                   SWORD.TICTB := GOOD;                                 41469000
              END;                                                      41470000
              BEGIN                              % ADDRESS      11      41471000
                   IF SWORD.TADB THEN FLAG(134);                        41472000
                   TP[TRAD] := (GTA := TERMINALADDRESST).[15:8];        41473000
                   TP[TTAD] := GTA.[7:8];                               41474000
                   TP[TSAD] := R(GTA.[16:1] NEQ 1);                     41475000
                   SWORD.TADB := GOOD;                                  41476000
              END;                                                      41477000
              BEGIN                              % REQ          12      41478000
                   IF DEFAULTOG THEN                                    41479000
                   BEGIN                                                41480000
                        ERROR(154);  GO AGAIN;                          41481000
                   END;                                                 41482000
                        IF SW.TRQB THEN FLAG(134);                      41483000
                   TPA[1] := REQUESTST;                                 41484000
                   APPSET := 2;                                         41485000
                   SWORD.TRQB := GOOD;                                  41486000
              END;                                                      41487000
              BEGIN                              % DEFAULT     13       41488000
                   IF SWORD.TDFB THEN FLAG(134);                        41489000
                   DEFAULTST(1);                                        41490000
                   SWORD.TDFB := GOOD;                                  41491000
              END;                                                      41492000
              BEGIN                                                     41493000
                   ILLEGALCHARST;       % NOT COMPLETE YET              41494000
              END;                                                      41495000
              BEGIN                              % MAXINPUT      15     41496000
                   IF SWORD.TMXINB THEN FLAG(134);                      41497000
                   TP[TMAXINP] := BUFFERST;                             41498000
                   SWORD.TMXINB := GOOD;                                41499000
              END;                                                      41500000
              BEGIN                              % DUPLEX        16     41501000
                   IF SWORD.TDPLXB THEN FLAG(134);                      41502000
                   TP[TDUPLEX] := DUPLEXST;                             41503000
                   SWORD.TDPLXB := GOOD;                                41504000
              END;                                                      41505000
              BEGIN                              % TURNAROUND    17     41506000
                   IF SWORD.TTRNB THEN FLAG(134);                       41507000
                   TP[TIRCU] := (GTA := DELAYVALUEST).[31:2];           41508000
                   TP[TIRC]  :=  GTA.[29:14];                           41509000
                   TP[TITRU] :=  GTA.[15:2];                            41510000
                   TP[TITR]  :=  GTA.[13:14];                           41511000
                   IF GOOD THEN TP[TTURNDY] := DYNAMICPART;             41512000
                   SWORD.TTRNB := GOOD;                                 41513000
              END;                                                      41514000
              BEGIN                              % FORMATCHR     18     41515000
                   CASE((LASTELBAT.TYPE) -1) OF                         41516000
                   BEGIN                                                41517000
                        BEGIN                    % CARRIAGE RETURN      41518000
                        IF SWORD.TCRB THEN FLAG(134);                   41519000
                        TP[TCR] := FORMATCHARST;                        41520000
                        SWORD.TCRB := GOOD;                             41521000
                        END;                                            41522000
                        BEGIN                    % LINEFEED             41523000
                        IF SWORD.TLFB THEN FLAG(134);                   41524000
                        TP[TLF] := FORMATCHARST;                        41525000
                        SWORD.TLFB := GOOD;                             41526000
                        END;                                            41527000
                        BEGIN                    % HOME                 41528000
                        IF SWORD.THOMEB THEN FLAG(134);                 41529000
                        TP[THOME] := FORMATCHARST;                      41530000
                        SWORD.THOMEB := GOOD;                           41531000
                        END;                                            41532000
                        BEGIN                    % CLEAR                41533000
                        IF SWORD.TCLEARB THEN FLAG(134);                41534000
                        TP[TCLEAR] := FORMATCHARST;                     41535000
                        SWORD.TCLEARB := GOOD;                          41536000
                        END;                                            41537000
                   END;                                                 41538000
              END;                                                      41539000
              BEGIN                              % SPECIAL       19     41540000
                   IF GTA := LASTELBAT.TYPE = 2 THEN                    41541000
                   BEGIN                                                41542000
                        IF SW.TLDB THEN  FLAG(134);                     41543000
                        TP[TLD] := (GTA := TSCST).[7:8];                41544000
                        TP[TLDDY] := GTA.[8:1];                         41545000
                        SW.TLDB := GOOD;                                41546000
                   END                                                  41547000
                   ELSE                                                 41548000
                   IF GTA = 3 THEN                                      41549000
                   BEGIN                                                41550000
                        IF SW.TBKB THEN  FLAG(134);                     41551000
                        TP[TBKSP] := (GTA := TSCST).[7:8];              41552000
                        TP[TBKDY] := GTA.[8:1];                         41553000
                        SW.TBKB := GOOD;                                41554000
                   END                                                  41555000
                   ELSE                                                 41556000
                   IF GTA = 0 THEN                                      41557000
                   BEGIN                                                41558000
                        IF SW.TWRUB THEN FLAG(134);                     41559000
                        TP[TWRU] := (GTA := TSCST).[7:8];               41560000
                        TP[TWRUDY] := GTA.[8:1];                        41561000
                        SW.TWRUB := GOOD;                               41562000
                   END                                                  41563000
                   ELSE                                                 41564000
                   IF GTA = 1 THEN                                      41565000
                   BEGIN                                                41566000
                        IF SW.TSPECIALB THEN FLAG(134);                 41567000
                        TP[TSPECIAL]   := (GTA := TSCST).[7:8];         41568000
                        TP[TSPECIALDY] := GTA.[8:1];                    41569000
                        SW.TSPECIALB := GOOD;                           41570000
                   END                                                  41571000
                   ELSE                                                 41572000
                   IF GTA = 4 THEN                                      41573000
                   BEGIN                                                41574000
                        IF SW.TSEPARB THEN FLAG(134);                   41575000
                        TP[TSEPAR]   := (GTA := TSCST).[7:8];           41576000
                        TP[TSEPARDY] := GTA.[8:1];                      41577000
                        SW.TSEPARB := GOOD;                             41578000
                   END                                                  41579000
                   ELSE                                                 41580000
                   BEGIN                                                41581000
                        ERROR(155);  GO AGAIN;                          41582000
                   END;                                                 41583000
              END;                                                      41584000
              BEGIN                              % END            20    41585000
                   IF SW.TENB THEN  FLAG(134);                          41586000
                   TP[TEND] := (GTA := TSCST).[7:8];                    41587000
                   TP[TENDY] := GTA.[8:1];                              41588000
                   SW.TENB := GOOD;                                     41589000
              END;                                                      41590000
              BEGIN                              % INHIBITSYNC    21    41591000
                   IF SW.TISB THEN  FLAG(134);                          41592000
                   TP[TIS] := LOGICALVALUEST;                           41593000
                   SW.TISB := GOOD;                                     41594000
              END;                                                      41595000
              BEGIN                              % TRANSMISSION   22    41596000
                   IF SW.TTRB THEN FLAG(134);                           41597000
                   TP[TTRAN] := TRANST;                                 41598000
                   SW.TTRB := GOOD;                                     41599000
              END;                                                      41600000
         END;                                                           41601000
         IF GOOD THEN IF NEXT NEQ PERIOD THEN ERROR(034);               41602000
         IF LISTOG THEN PRINTLINE;                                      41603000
         GO AGAIN;                                                      41604000
 AWAY:                                                                  41605000
         TP[TSWRD] := REAL(SWORD);                                      41606000
         IF SWORD.TDFB THEN                                             41607000
         BEGIN                                                          41608000
              IF NOT SW.TENB THEN  IF DW.TENB THEN                      41609000
              BEGIN                                                     41610000
                   TP[TEND] := DFA[TEND];  TP[TENDY] := DFA[TENDY];     41611000
                   SW.TENB := TRUE;                                     41612000
              END;                                                      41613000
              IF NOT SW.TWRUB THEN  IF DW.TWRUB THEN                    41614000
              BEGIN                                                     41615000
                   TP[TWRU] := DFA[TWRU]; TP[TWRUDY] := DFA[TWRUDY];    41616000
                   SW.TWRUB := TRUE;                                    41617000
              END;                                                      41618000
              IF NOT SW.TBKB THEN  IF DW.TBKB THEN                      41619000
              BEGIN                                                     41620000
                   TP[TBKSP] := DFA[TBKSP]; TP[TBKDY] := DFA[TBKDY];    41621000
                   SW.TBKB := TRUE;                                     41622000
              END;                                                      41623000
              IF NOT SW.TLDB THEN  IF DW.TLDB THEN                      41624000
              BEGIN                                                     41625000
                   TP[TLD] := DFA[TLD];  TP[TLDDY] := DFA[TLDDY];       41626000
                   SW.TLDB := TRUE;                                     41627000
              END;                                                      41628000
              IF NOT SW.TSPECIALB THEN IF DW.TSPECIALB THEN             41629000
              BEGIN                                                     41630000
                   TP[TSPECIAL]   := DFA[TSPECIAL];                     41631000
                   TP[TSPECIALDY] := DFA[TSPECIALDY];                   41632000
                   SW.TSPECIALB := TRUE;                                41633000
              END;                                                      41634000
              IF NOT SW.TSEPARB THEN IF DW.TSEPARB THEN                 41635000
              BEGIN                                                     41636000
                   TP[TSEPAR]   := DFA[TSEPAR];                         41637000
                   TP[TSEPARDY] := DFA[TSEPARDY];                       41638000
                   SW.TSEPARB := TRUE;                                  41639000
              END;                                                      41640000
              IF NOT SW.TADPTB THEN IF DW.TADPTB THEN                   41641000
              BEGIN                                                     41642000
                   TP[TADPTTYPE] := DEFAULTA[TADPTTYPE];                41643000
                   SWORD.TADPTB := TRUE;                                41644000
              END;                                                      41645000
              IF NOT SW.TCB THEN IF DW.TCB THEN                         41646000
              BEGIN                                                     41647000
                   TP[TCODE] := DEFAULTA[TCODE];  SWORD.TCB := TRUE;    41648000
              END;                                                      41649000
              IF NOT SW.TBUFB THEN IF DW.TBUFB THEN                     41650000
              BEGIN                                                     41651000
                   TP[TBUF] := DEFAULTA[TBUF];  SWORD.TBUFB := TRUE;    41652000
              END;                                                      41653000
              IF NOT SW.TSCB THEN IF DW.TSCB THEN                       41654000
              BEGIN                                                     41655000
                   TP[TSCRN] := DEFAULTA[TSCRN];  SWORD.TSCB := TRUE;   41656000
              END;                                                      41657000
              IF NOT SW.TMDB THEN IF DW.TMDB THEN                       41658000
              BEGIN                                                     41659000
                   TP[TMODE] := DEFAULTA[TMODE];  SWORD.TMDB := TRUE;   41660000
              END;                                                      41661000
              IF NOT SW.TBLKB THEN IF DW.TBLKB THEN                     41662000
              BEGIN                                                     41663000
                   TP[TBLK] := DEFAULTA[TBLK];  SWORD.TBLKB := TRUE;    41664000
              END;                                                      41665000
              IF NOT SW.TWDB THEN IF DW.TWDB THEN                       41666000
              BEGIN                                                     41667000
                   TP[TWID] := DEFAULTA[TWID];  SWORD.TWDB := TRUE;     41668000
              END;                                                      41669000
              IF NOT SW.TPGB THEN IF DW.TPGB THEN                       41670000
              BEGIN                                                     41671000
                   TP[TPG] := DEFAULTA[TPG];  SWORD.TPGB := TRUE;       41672000
              END;                                                      41673000
              IF NOT SW.TPRB THEN IF DW.TPRB THEN                       41674000
              BEGIN                                                     41675000
                   TP[PAR] := DEFAULTA[PAR];  SWORD.TPRB := TRUE;       41676000
              END;                                                      41677000
              IF NOT SW.TADB THEN IF DW.TADB THEN                       41678000
              BEGIN                                                     41679000
                   TP[TRAD] := DFA[TRAD];  TP[TTAD] := DFA[TTAD];       41680000
                   TP[TSAD] := DFA[TSAD];  SW.TADB := TRUE;             41681000
              END;                                                      41682000
              IF NOT SW.TRQB THEN IF DW.TRQB THEN                       41683000
              BEGIN                                                     41684000
                   TP[TRLK] := DFA[TRLK];  SW.TRQB := TRUE;             41685000
                   TP[TIO]  := DFA[TIO];                                41686000
              END;                                                      41687000
              IF NOT SW.TTIMOTB THEN IF DW.TTIMOTB THEN                 41688000
              BEGIN                                                     41689000
                   TP[TTIMOUT]  := DFA[TTIMOUT]; SWORD.TTIMOTB:=TRUE;   41690000
                   TP[TTIMOUTU] := DFA[TTIMOUTU];                       41691000
                   TP[TTIMOUTDY] := DFA[TTIMOUTDY];                     41692000
              END;                                                      41693000
              IF NOT SW.TTRNB THEN  IF DW.TTRNB THEN                    41694000
              BEGIN                                                     41695000
                   TP[TIRCU] := DFA[TIRCU];  TP[TIRC] := DFA[TIRC];     41696000
                   TP[TITRU] := DFA[TITRU];  TP[TITR] := DFA[TITR];     41697000
                   TP[TTURNDY] := DFA[TTURNDY];                         41698000
                   SW.TTRNB  := TRUE;                                   41699000
              END;                                                      41700000
              IF TP[TBUF] EQL 0 THEN             % THIS MUST FOLLOW     41701000
              IF NOT SWORD.TMXINB THEN           % BUFFER CHECK         41702000
              IF DWORD.TMXINB THEN                                      41703000
                   BEGIN                                                41704000
                        TP[TMAXINP]:= DFA[TMAXINP]; SWORD.TMXINB:=TRUE; 41705000
                   END;                                                 41706000
              IF NOT SW.TDPLXB THEN IF DW.TDPLXB THEN                   41707000
                   BEGIN                                                41708000
                        TP[TDUPLEX]:= DFA[TDUPLEX]; SWORD.TDPLXB:=TRUE; 41709000
                   END;                                                 41710000
              IF NOT SW.TCRB THEN  IF DW.TCRB THEN                      41711000
                   BEGIN  TP[TCR] := DFA[TCR]; SW.TCRB := TRUE; END;    41712000
              IF NOT SW.TLFB THEN  IF DW.TLFB THEN                      41713000
                   BEGIN TP[TLF] := DFA[TLF]; SW.TLFB :=TRUE; END;      41714000
              IF NOT SW.THOMEB THEN  IF DW.THOMEB THEN                  41715000
                   BEGIN TP[THOME]:=DFA[THOME];SW.THOMEB:=TRUE; END;    41716000
              IF NOT SW.TCLEARB THEN  IF DW.TCLEARB THEN                41717000
                   BEGIN TP[TCLEAR]:=DFA[TCLEAR]; SW.TCLEARB:=TRUE; END;41718000
              IF NOT SW.TISB THEN  IF DW.TISB THEN                      41719000
                   BEGIN  TP[TIS] := DFA[TIS];  SW.TISB := TRUE; END;   41720000
              IF NOT SW.TICTB THEN IF DW.TICTB THEN                     41721000
              BEGIN                                                     41722000
                   TP[TICTDLY] := DFA[TICTDLY];                         41723000
                   TP[TICTDLYU] := DFA[TICTDLYU];                       41724000
                   SW.TICTB := TRUE;                                    41725000
              END;                                                      41726000
              IF NOT SW.TTRB THEN IF DW.TTRB THEN                       41727000
                   BEGIN  TP[TTRAN]:=DFA[TTRAN]; SW.TTRB:= TRUE; END;   41728000
              TP[TSWRD] := REAL(SWORD);                                 41729000
         END;                                                           41730000
         IF DEFAULTOG THEN GO STUFF;                                    41731000
         IF NOT SWORD.TCB  THEN ERR(156);                               41732000
         IF NOT SWORD.TMDB THEN ERR(157);                               41733000
         IF NOT SW.TPRB    THEN ERR(207);                               41734000
         IF APPSET = 0     THEN ERR(160)                                41735000
         ELSE IF NOT B(APPSET.[1:1]) THEN ERR(145);                     41736000
         IF NOT SWORD.TRQB      THEN ERR(160);                          41737000
         IF NOT SWORD.TBLKB THEN ERR(161);                              41738000
         IF NOT SWORD.TSCB THEN ERR(162);                               41739000
         IF NOT SWORD.TADB THEN ERR(196);                               41740000
         IF NOT SW.TPGB    THEN ERR(228);                               41741000
         IF NOT SW.TADPTB  THEN ERR(224);                               41742000
         IF NOT SW.TTIMOTB THEN ERR(169);                               41743000
         IF NOT SW.TICTB   THEN ERR(227);                               41744000
         IF NOT SW.TTRNB   THEN ERR(225);                               41745000
         IF NOT SW.TISB AND (TP[TADPTTYPE]).[26:12] NEQ 0 THEN ERR(211);41746000
         IF TP[TBUF] EQL 0 AND NOT SWORD.TMXINB THEN ERR(135);          41747000
         IF TP[TBUF] NEQ 0 THEN                                         41748000
         IF TP[TWID] > TP[TBUF] THEN                                    41749000
              BEGIN                                                     41750000
              IF TP[TWID] GTR TP[TBUF] THEN ERR(163);                   41751000
              IF SWORD.TMXINB THEN ERR(167);                            41752000
              END;                                                      41753000
         IF NOT SWORD.TDPLXB  THEN ERR(136);                            41754000
         IF APPSET NEQ 0 THEN                                           41755000
         BEGIN                                                          41756000
              TP[TMR] := R(ONES(APPSET) NEQ 1);                         41757000
              TP[TIO] := TPA[1].[1:2];                                  41758000
              ITA := NRT DIV 2;                                         41759000
              APPT[ITA,0] := (ITC := TPA[1]).[46:31] & ITC[46:14:11];   41760000
              APPT[ITA,6].[15:16] := SAVEREC;                           41761000
         END;                                                           41762000
         TP[TSC] := R(BRW.[45:5] & BRW[7:23:3]);                        41763000
         IF BRW.BRSP THEN IF NOT SW.TSPECIALB    THEN ERR(133);         41764000
         IF BRW.BBCC THEN IF (TP[PAR]).[3:2] = 0 THEN ERR(137);         41765000
         IF BRW.BRE  THEN IF NOT SW.TENB     THEN ERR(138);             41766000
         IF BRW.BRB  THEN IF NOT SW.TBKB     THEN ERR(139);             41767000
         IF BRW.BRL  THEN IF NOT SW.TLDB     THEN ERR(140);             41768000
         IF BRW.BRWR THEN IF NOT SW.TWRUB    THEN ERR(142);             41769000
         IF BRW.BRFS THEN IF NOT SW.TSEPARB  THEN ERR(149);             41770000
         IF BRW.BRRA THEN IF NOT SW.TADB OR TP[TRAD] = 0 THEN ERR(233); 41771000
         IF BRW.BRTA THEN IF NOT SW.TADB OR TP[TTAD] = 0 THEN ERR(234); 41772000
         IF BRW.BRTRAN THEN                                             41773000
         IF NOT SW.TTRB OR TP[TTRAN] = 0 THEN ERR(235);                 41774000
         IF BRW.BRBLK THEN                                              41775000
         IF NOT SW.TBLKB OR TP[TBLK] = 0 THEN ERR(236);                 41776000
         ITB := 0 & CODESIZE[3:3 + (TP[TCODE]) | 4:4];                  41777000
         BA := BB := TRUE;                                              41778000
         ITA := -1;                                                     41779000
         PTRA := POINTER(ADCHARSIZE,6);                                 41780000
         IF SW.TCB AND SW.TADB THEN                                     41781000
         WHILE ITA := ITA + 1 < 30 DO                                   41782000
         IF B(0 & TP[TADPTTYPE][0:ITA:1]) THEN                          41783000
         BEGIN                                                          41784000
              IF BA THEN                                                41785000
              IF REAL(PTRA + ITA,1) < ITB THEN                          41786000
              BEGIN                                                     41787000
                   ERR(209);  BA := FALSE;                              41788000
              END;                                                      41789000
              IF BB THEN IF SW.TPRB THEN                                41790000
              IF NOT B(0 & ADPARITY[0:ITA:1]) THEN                      41791000
              IF (TP[PAR]).[1:2] NEQ 0 THEN                             41792000
              BEGIN                                                     41793000
                   ERR(210);  BB := FALSE;                              41794000
              END;                                                      41795000
         END;                                                           41796000
         BA := BB := FALSE;                                             41797000
 STUFF:                                                                 41798000
         IF NOT BAD THEN                                                41799000
         BEGIN                                                          41800000
              REPLACE POINTER(ENFO[SAVEREC,0],8)                        41801000
              BY POINTER(TP,8) FOR 15 WORDS;                            41802000
         END                                                            41803000
         ELSE                                                           41804000
         GO EXIT;                                                       41805000
         IF ERRORCOUNT NEQ 0 OR DEFAULTOG THEN GO EXIT;                 41806000
         IF ITA := TP[TICTDLY] NEQ 0 THEN                               41807000
         ITB.[31:8] := TIMECONV(ITA,TP[TICTDLYU]);                      41808000
         ITB.[33:2] := IF (ITA := TP[TADPTTYPE]).[14:15] NEQ 0 AND      41809000
              ITA.[26:12] NEQ 0 THEN 2 ELSE IF ITA.[26:12] NEQ 0 THEN   41810000
              1 ELSE 0;                                                 41811000
         ITB.[7 :8] := TP[TCODE];                                       41812000
         ITB.[11:2] := 2 - (ITC := TP[PAR]).[3:2];                      41813000
         ITB.[9 :2] := 2 - ITC.[1:2];                                   41814000
         TRANCLASS[       NTC + 1] := ITB.[31:32];                      41815000
         TRANCLASS[       NTC + 2] := ITA & SAVEREC [46:15];            41816000
         TRANCLASS[       NTC + 3] := 0 & (NRT DIV 2) [23:12] &         41817000
              (TP[TTURNDY])[38:1]&                                      41818000
              (TP[TMODE])[33:2] & ITB[45:33:2] & (TP[TTRAN])[35:2] &    41819000
              (TP[TRAD]) [43:2] & (TP[TTAD]) [41:2] & (TP[TSAD]) [39:1];41820000
         TRANCLASS[       NTC + 4] :=                                   41821000
              (TP[TSEPAR]) & (TP[TSPECIAL]) [46:7] &                    41822000
              (TP[TEND]) [39:8] & (TP[TBKSP]) [31:8] &                  41823000
              (TP[TLD]) [23:8] & (TP[TWRU]) [15:8] ;                    41824000
         TRANCLASS[NTC := NTC + 5] := 0 & (TP[TSPECIALDY]) [23:1] &     41825000
              (TP[TENDY])    [22:1]    & (TP[TBKDY])     [21:1] &       41826000
              (TP[TLDDY])    [20:1]    & (TP[TWRUDY])    [19:1] &       41827000
              (TP[TSEPARDY]) [18:1]    & (TP[TTIMOUTDY]) [17:1] &       41828000
              TIMECONV(TP[TTIMOUT],TP[TTIMOUTU]) [15:8];                41829000
         ENFO[SAVEREC,TRT] := NRT DIV 2;                                41830000
         REMOTETYPE[NRT    ] :=                                         41831000
              (IF TP[TBUF] NEQ 0 THEN TP[TBUF] ELSE TP[TMAXINP]) &      41832000
              NIC [23:8] & (TP[TIO]) [25:2] & (TP[TWID]) [41:16];       41833000
         REMOTETYPE[NRT + 1] :=                                         41834000
              1 & SAVEREC [15:14] & (TP[TPG]) [35:16] & (TP[TBLK])      41835000
                   [36:1] & (TP[TSCRN]) [37:1] & (TP[TPG]) [46:9] ;     41836000
         NRT := NRT + 2;                                                41837000
         TPA[7] := TIMECONV(TP[TIRC],TP[TIRCU]);                        41838000
         REPLACE POINTER(RTDELAY,8) + (NRT - 2) DIV 2 BY                41839000
                 POINTER(TPA[7],8) + 5 FOR 1;                           41840000
 EXIT:                                                                  41841000
    END;                                                                41842000
PROCEDURE STATIONDEFINITION;                                            41843000
    BEGIN                                                               41844000
         LABEL  AGAIN,AWAY,EXIT,LID,STUFF;                              41845000
         DEFINE WARNING = ERROR(-3); GO AGAIN #;                        41846000
         SWORD := BAD := FALSE;                                         41847000
         REPLACE POINTER(TP,6) BY 0 FOR 15 WORDS;                       41848000
         IF GET(SSI,TRUE,TRUE) = DEFAULTV THEN                          41849000
              BEGIN                                                     41850000
              DEFAULTOG := TRUE;                                        41851000
              GET(SSI,FALSE,TRUE);                                      41852000
              GO TO LID;                                                41853000
              END                                                       41854000
         ELSE                                                           41855000
         BEGIN                                                          41856000
              DEFAULTOG := FALSE;                                       41857000
 LID:         IF GETW.CLASS NEQ UNKNOWN THEN                            41858000
              IF GETW.CLASS = STATIONID AND B(GETW.FRWD) THEN           41859000
         BEGIN                                                          41860000
              SAVEREC := GETW.SCR;                                      41861000
              ENFO[SAVEREC,15].FRWD := 0;                               41862000
              IF NEXT NEQ COLON THEN  ERROR(045);                       41863000
         END                                                            41864000
         ELSE                                                           41865000
         BEGIN                                                          41866000
              FLAG(153);                                                41867000
              WHILE NEXT NEQ COLON AND ELCLASS NEQ PERIOD DO;           41868000
              BAD := TRUE;                                              41869000
         END                                                            41870000
         ELSE                                                           41871000
         BEGIN                                                          41872000
              ACCUM[0].CLASS :=                                         41873000
              IF DEFAULTOG THEN STATIONDEFAULTID ELSE STATIONID;        41874000
              ENTR(SSI);                                                41875000
              SAVEREC := LASTREC;                                       41876000
              IF NEXT NEQ COLON THEN  ERROR(045);                       41877000
         END;                                                           41878000
         END;                                                           41879000
 AGAIN:  IF (GTA := REAL(SCASE + NEXT,1)) = 0 THEN                      41880000
         BEGIN                                                          41881000
              ERROR(170);  GO AGAIN;                                    41882000
         END;                                                           41883000
         LASTELBAT := ELBAT[I];                                         41884000
         IF GTA NEQ 1 THEN IF NEXT NEQ EQUAL THEN                       41885000
         BEGIN                                                          41886000
              ERROR(035);  GO AGAIN;                                    41887000
         END;                                                           41888000
         CASE (GTA - 1) OF                                              41889000
         BEGIN                                                          41890000
              GO AWAY;                                                  41891000
              BEGIN                              % USER          1      41892000
                   WARNING;                                             41893000
              END;                                                      41894000
              BEGIN                              % TERMINAL      2      41895000
                   IF SW.STLB THEN FLAG(134);                           41896000
                   TP[STLK] := TERMINALST;                              41897000
                   SWORD.STLB := GOOD;                                  41898000
              END;                                                      41899000
              BEGIN                              % MYUSE         3      41900000
                   WARNING;                                             41901000
              END;                                                      41902000
              BEGIN                              % DISP TOGS     4      41903000
              WARNING;                                                  41904000
              END;                                                      41905000
              BEGIN                              % SPO           5      41906000
                   WARNING;                                             41907000
              END;                                                      41908000
              BEGIN                              % MCS           6      41909000
                   WARNING;                                             41910000
              END;                                                      41911000
              BEGIN                              % ADDRESS       7      41912000
                   IF DEFAULTOG THEN                                    41913000
                   BEGIN                                                41914000
                        ERROR(151);  GO AGAIN;                          41915000
                   END;                                                 41916000
                   IF SW.SADB THEN FLAG(134);                           41917000
                   TP[SRAL] := (GTA := ADDRESST).[23:8];                41918000
                   TP[STAL] := GTA.[15:8];                              41919000
                   IF GTA.[7:8] LEQ 1 THEN                              41920000
                   TP[SADD] := TPC[0]                                   41921000
                   ELSE                                                 41922000
                   BEGIN                                                41923000
                        TP[SADDLIST] := 1;                              41924000
                        TP[SADD] := NEXTREC & GTA [23:7:8];             41925000
                        GTA := (GTA.[7:8] + 29) DIV 30;                 41926000
                        ITA := 0;                                       41927000
                        THRU GTA DO                                     41928000
                        BEGIN                                           41929000
                             REPLACE POINTER(ENFO[NEXTREC,0],8) BY      41930000
                                  POINTER(TPC[ITA],8) FOR 30 WORDS;     41931000
                             NEXTREC := NEXTREC + 1;                    41932000
                             ITA := ITA + 30;                           41933000
                        END;                                            41934000
                   END;                                                 41935000
                   SW.SADB := GOOD;                                     41936000
              END;                                                      41937000
              BEGIN                              % FREQUENCY     8      41938000
                   IF SW.SFREQB THEN FLAG(134);                         41939000
                   TP[SFREQT] := FREQUENCYST;                           41940000
                   SW.SFREQB  := GOOD;                                  41941000
              END;                                                      41942000
              BEGIN                              % SECURITY      9      41943000
                   WARNING;                                             41944000
              END;                                                      41945000
              BEGIN                              % WIDTH         10     41946000
                   WARNING;                                             41947000
              END;                                                      41948000
              BEGIN                              % PAGE          11     41949000
                   WARNING;                                             41950000
              END;                                                      41951000
              BEGIN                              % PHONE         12     41952000
                   WARNING;                                             41953000
              END;                                                      41954000
              BEGIN                              % SPECIAL       13     41955000
                   WARNING;                                             41956000
              END;                                                      41957000
              BEGIN                              % TIMEOUT       14     41958000
              WARNING;                                                  41959000
              END;                                                      41960000
              BEGIN                              % END           15     41961000
                   WARNING;                                             41962000
              END;                                                      41963000
              BEGIN                              % DEFAULT       16     41964000
                   IF SW.SDFB THEN FLAG(134);                           41965000
                   DEFAULTST(2);                                        41966000
                   SW.SDFB := GOOD;                                     41967000
              END;                                                      41968000
              BEGIN                              % LOGIN         17     41969000
                   WARNING;                                             41970000
              END;                                                      41971000
              BEGIN                              % TASK          18     41972000
                   WARNING;                                             41973000
              END;                                                      41974000
              BEGIN                              % WRAPAROUND    19     41975000
                   WARNING;                                             41976000
              END;                                                      41977000
              BEGIN                              % ADAPTER       20     41978000
                   IF SW.SADPTYPEB THEN FLAG(134); % DUP STMNT.         41979000
                   IF ONES(TP[SADPTYPE] := ADAPTERST) > 1 THEN          41980000
                        FLAG(69)                                        41981000
                   ELSE                                                 41982000
                   SW.SADPTYPEB := GOOD;                                41983000
              END;                                                      41984000
              BEGIN                              % MODEM         21     41985000
                   IF SW.SMODB THEN FLAG(134); % DUP STMNT.             41986000
                   TP[SMODEM] := MODEMST;                               41987000
                   SW.SMODB   := GOOD;                                  41988000
              END;                                                      41989000
              BEGIN                              % ALTERNATE     22     41990000
                   WARNING;                                             41991000
              END;                                                      41992000
              BEGIN                              % ENABLEINPUT   23     41993000
              WARNING;                                                  41994000
              END;                                                      41995000
              BEGIN                              % RETRY         24     41996000
                   WARNING;                                             41997000
              END;                                                      41998000
         END;                                                           41999000
         IF GOOD THEN IF NEXT NEQ PERIOD THEN ERROR(034);               42000000
         IF LISTOG THEN PRINTLINE;                                      42001000
         GO AGAIN;                                                      42002000
 AWAY:                                                                  42003000
         TP[SSWRD] := REAL(SW);                                         42004000
         IF SW.SDFB THEN                                                42005000
         BEGIN                                                          42006000
              IF NOT SW.STLB THEN   IF DW.STLB THEN                     42007000
                   BEGIN TP[STLK] := DFA[STLK]; SW.STLB := TRUE; END;   42008000
              IF NOT SW.SIOB THEN  IF DW.SIOB THEN                      42009000
                   BEGIN TP[SMYUSE] := DFA[SMYUSE]; SW.SIOB:=TRUE;END;  42010000
              IF NOT SW.SLAB THEN  IF DW.SLAB THEN                      42011000
                   BEGIN TP[SLACK] := DFA[SLACK]; SW.SLAB := TRUE; END; 42012000
              IF NOT SW.SPOB THEN  IF DW.SPOB THEN                      42013000
                   BEGIN TP[SPOL] := DFA[SPOL]; SW.SPOB := TRUE; END;   42014000
              IF NOT SW.SSPB THEN  IF DW.SSPB THEN                      42015000
                   BEGIN TP[SSPO] := DFA[SSPO]; SW.SSPB := TRUE; END;   42016000
              IF NOT SW.SFREQB THEN IF DW.SFREQB THEN                   42017000
                   BEGIN TP[SFREQ]:= DFA[SFREQ]; SW.SFREQB:=TRUE;END;   42018000
              IF NOT SW.SWIB THEN  IF DW.SWIB THEN                      42019000
                   BEGIN TP[SWID] := DFA[SWID]; SW.SWIB := TRUE; END;   42020000
              IF NOT SW.SPGB THEN  IF DW.SPGB THEN                      42021000
                   BEGIN TP[SPG] := DFA[SPG]; SW.SPGB := TRUE; END;     42022000
              IF NOT SW.SENB THEN  IF DW.SENB THEN                      42023000
                   BEGIN TP[SEND] := DFA[SEND]; SW.SENB := TRUE; END;   42024000
              IF NOT SW.SBSB THEN  IF DW.SBSB THEN                      42025000
                   BEGIN TP[SBKSP] := DFA[SBKSP]; SW.SBSB := TRUE; END; 42026000
              IF NOT SW.SLOGINB THEN  IF DW.SLOGINB THEN                42027000
                   BEGIN TP[SLOGIN]:=DFA[SLOGIN];SW.SLOGINB:=TRUE;END;  42028000
              IF NOT SW.SADPTYPEB THEN   IF DW.SADPTYPEB THEN           42029000
              BEGIN                                                     42030000
                   TP[SADPTYPE]:=DFA[SADPTYPE]; SW.SADPTYPEB:=TRUE;     42031000
              END;                                                      42032000
              IF NOT SW.SLDB THEN  IF DW.SLDB THEN                      42033000
                   BEGIN TP[SLDEL] := DFA[SLDEL]; SW.SLDB := TRUE; END; 42034000
              IF NOT SW.SMODB THEN IF DW.SMODB THEN                     42035000
                   BEGIN TP[SMODEM]:=DFA[SMODEM]; SW.SMODB:=TRUE;END;   42036000
              IF NOT SW.STIMEOB THEN IF DW.STIMEOB THEN                 42037000
              BEGIN                                                     42038000
                   TP[STIMEOT]  := DFA[STIMEOT];                        42039000
                   TP[STIMEOTU] := DFA[STIMEOTU];                       42040000
                   SW.STIMEOB := TRUE;                                  42041000
              END;                                                      42042000
              TP[SSWRD] := REAL(SW);                                    42043000
         END;                                                           42044000
         IF DEFAULTOG      THEN GO STUFF;                               42045000
         IF NOT SW.STLB    THEN ERR(171);                               42046000
%        IF NOT SW.STIMEOB THEN ERR(246);    % TIMELIMIT CHECK          42047000
         IF SW.STLB THEN                                                42048000
         BEGIN                                                          42049000
              ITE := TP[STLK];                                          42050000
              REPLACE POINTER(TPA,8) BY POINTER(ENFO[ITE,0],8)          42051000
                   FOR 15 WORDS;                                        42052000
         END                                                            42053000
         ELSE                                                           42054000
         GO EXIT;                                                       42055000
         BW := B(TPA[TSWRD]);                                           42056000
         IF TPA[TMODE] = 1 AND NOT SW.SFREQB      THEN ERR(216);        42057000
         IF ONES(TPA[TADPTTYPE]) > 1  THEN                              42058000
         IF NOT SW.SADPTYPEB THEN  ERR(197);                            42059000
         IF NOT SW.SADPTYPEB THEN IF BW.TADPTB THEN                     42060000
         IF ONES(TPA[TADPTTYPE])  = 1 THEN                              42061000
         BEGIN                                                          42062000
              TP[SADPTYPE] := TPA[TADPTTYPE];                           42063000
              SW.SADPTYPEB := TRUE;                                     42064000
         END;                                                           42065000
         IF ERRORCOUNT = 0 THEN                                         42066000
         REMOTETYPE[(ENFO[(TP[STLK]),TRT])|2].[46:5] :=                 42067000
              FIRSTONE(TP[SADPTYPE]) - 1;                               42068000
         TRANCLASS[(ENFO[(TP[STLK]),TRT])|5+1].[46:1] := 1; % TERMINAL  42069000
         IF BW.TADPTB THEN                                              42070000
         BEGIN                                                          42071000
         IF SW.SADPTYPEB THEN                                           42072000
              IF R(B(TP[SADPTYPE]) AND B(TPA[TADPTTYPE])) EQL 0 THEN    42073000
              ERR(191);                                                 42074000
              IF SW.SMODB THEN                                          42075000
                   BEGIN                                                42076000
                   GTA := TP[SMODEM];                                   42077000
                   GTA := ENFO[GTA,MADPTTYPE];                          42078000
                   IF R(B(TPA[TADPTTYPE]) AND B(GTA)) EQL 0 THEN        42079000
                        ERR(192);                                       42080000
                   END;                                                 42081000
         END;                                                           42082000
         TP[SDUP] := TPA[TDUPLEX];  TP[SMODE] := TPA[TMODE];            42083000
         TP[SPAR] := TPA[PAR];      TP[SCODE] := TPA[TCODE];            42084000
         TP[SRLK] := TPA[TRLK];                                         42085000
         IF BW.TRQB THEN                                                42086000
         IF NOT SW.SIOB THEN                                            42087000
         BEGIN                                                          42088000
              TP[SMYUSE] := TPA[TIO];  SW.SIOB := TRUE;                 42089000
         END                                                            42090000
         ELSE                                                           42091000
         IF R(B(TP[SMYUSE]) OR B(TPA[TIO])) NEQ TPA[TIO] THEN ERR(175); 42092000
         IF BW.TMDB THEN                                                42093000
         BEGIN                                                          42094000
         IF SW.SADB AND TPA[TMODE] = CONTENTION       THEN ERR(141);    42095000
         IF NOT SW.SADB AND TPA[TMODE] NEQ CONTENTION THEN ERR(177);    42096000
         IF SW.SADB AND TPA[TMODE] NEQ CONTENTION THEN                  42097000
         IF TP[SRAL] NEQ TPA[TRAD] OR TP[STAL] NEQ TPA[TTAD] THEN       42098000
         ERR(206);                                                      42099000
         END;                                                           42100000
         IF NOT SW.SWRB THEN IF BW.TWRUB THEN                           42101000
          BEGIN                                                         42102000
             TP[SWRU] := TPA[TWRU];  SW.SWRB := TRUE;                   42103000
          END;                                                          42104000
         IF NOT SW.SENB THEN IF BW.TENB THEN                            42105000
          BEGIN                                                         42106000
             TP[SEND] := TPA[TEND];  SW.SENB := TRUE;                   42107000
          END;                                                          42108000
         IF NOT SW.SBSB THEN IF BW.TBKB THEN                            42109000
          BEGIN                                                         42110000
             TP[SBKSP] := TPA[TBKSP]; SW.SBSB := TRUE;                  42111000
          END;                                                          42112000
         IF NOT SW.SLDB THEN IF BW.TLDB THEN                            42113000
          BEGIN                                                         42114000
             TP[SLDEL] := TPA[TLD];  SW.SLDB := TRUE;                   42115000
          END;                                                          42116000
         IF NOT SW.SSPECIALB THEN IF BW.TSPECIALB THEN                  42117000
          BEGIN                                                         42118000
              TP[SSPECIAL] := TPA[TSPECIAL];  SW.SSPECIALB := TRUE;     42119000
          END;                                                          42120000
         IF NOT SW.SSEPARB THEN IF BW.TSEPARB THEN                      42121000
          BEGIN                                                         42122000
              TP[SSEPAR] := TPA[TSEPAR];  SW.SSEPARB := TRUE;           42123000
          END;                                                          42124000
         IF SW.SSPECIALB THEN                                           42125000
         BEGIN                                                          42126000
              GTA := TP[SSPECIAL];                                      42127000
              IF SW.SWRB THEN IF TP[SWRU]   = GTA THEN ERR(178);        42128000
              IF SW.SENB THEN  IF TP[SEND]  = GTA THEN ERR(180);        42129000
              IF SW.SBSB THEN  IF TP[SBKSP] = GTA THEN ERR(181);        42130000
              IF SW.SLDB THEN IF TP[SLDEL]  = GTA THEN ERR(182);        42131000
         END;                                                           42132000
         IF SW.SWRB THEN                                                42133000
         BEGIN                                                          42134000
              GTA := TP[SWRU];                                          42135000
              IF SW.SENB THEN  IF TP[SEND]  = GTA THEN ERR(183);        42136000
              IF SW.SBSB THEN  IF TP[SBKSP] = GTA THEN ERR(184);        42137000
              IF SW.SLDB THEN  IF TP[SLDEL] = GTA THEN ERR(185);        42138000
         END;                                                           42139000
         IF SW.SENB THEN                                                42140000
         BEGIN                                                          42141000
              GTA := TP[SEND];                                          42142000
              IF SW.SBSB THEN  IF TP[SBKSP] = GTA THEN ERR(186);        42143000
              IF SW.SLDB THEN  IF TP[SLDEL] = GTA THEN ERR(187);        42144000
         END;                                                           42145000
         IF SW.SBSB THEN  IF SW.SLDB THEN                               42146000
         IF TP[SBKSP] = TP[SLDEL] THEN ERR(188);                        42147000
 STUFF:                                                                 42148000
         IF NOT DEFAULTOG THEN TP[SINFO] := PHSTN := PHSTN + 1;         42149000
         IF NOT DEFAULTOG THEN IF NOT BAD THEN STATIONSEXIST := TRUE;   42150000
         IF NOT BAD THEN                                                42151000
         REPLACE POINTER(ENFO[SAVEREC,0],8)                             42152000
              BY POINTER(TP,8) FOR 14 WORDS;                            42153000
 EXIT:                                                                  42154000
    END;                                                                42155000
PROCEDURE CONSTANTLIST;                                                 42156000
    BEGIN                                                               42157000
         LABEL AWAY;                                                    42158000
         DO                                                             42159000
         BEGIN                                                          42160000
              IF NEXT NEQ UNKNOWN THEN                                  42161000
              BEGIN                                                     42162000
                   ERROR(IF B(ELBAT[I].RSVD) THEN 152 ELSE 153);        42163000
                   GO AWAY;                                             42164000
              END;                                                      42165000
              ACCUM[0].CLASS := CONSTANTID;                             42166000
              ENTER(1);                                                 42167000
              IF NEXT NEQ EQUAL THEN                                    42168000
              BEGIN                                                     42169000
                   ERROR(035);  GO AWAY;                                42170000
              END;                                                      42171000
              IF NEXT NEQ STRING AND ELCLASS NEQ STRINGCON THEN         42172000
              BEGIN                                                     42173000
                   ERROR(036);  GO AWAY;                                42174000
              END;                                                      42175000
              INFO[NEXTINFO.SCRR,NEXTINFO.SCRC-1] :=                    42176000
                  0 & ACCUM[1] [37:11:6] & NEXTPOOL [23:23:24];         42177000
              GTA := ACCUM[1].CHRCNT;                                   42178000
              REPLACE POINTER(POOL,8) + NEXTPOOL BY STRINGSTART FOR GTA;42179000
              NEXTPOOL := NEXTPOOL + GTA;                               42180000
         END                                                            42181000
         UNTIL NEXT NEQ COMMA;                                          42182000
         IF ELCLASS NEQ PERIOD THEN ERROR(034);                         42183000
 AWAY:                                                                  42184000
    END;                                                                42185000
PROCEDURE LINEDEFINITION;                                               42186000
    BEGIN                                                               42187000
         INTEGER ITT, IU, IV, IW, IX;                                   42188000
         LABEL LID,AWAY,AGAIN,STUFF,EXIT,LLA,LLB;                       42189000
         SW := FALSE;                                                   42190000
         REPLACE POINTER(TP,6) BY 0 FOR 15 WORDS;                       42191000
         IF GET(LSI,TRUE,FALSE) = DEFAULTV THEN                         42192000
              BEGIN                                                     42193000
              DEFAULTOG := TRUE;                                        42194000
              GETFF(LSI);                                               42195000
              GO TO LID;                                                42196000
              END                                                       42197000
         ELSE                                                           42198000
              BEGIN                                                     42199000
              DEFAULTOG := FALSE;                                       42200000
 LID:         IF GETW.CLASS NEQ UNKNOWN THEN                            42201000
              IF GETW.CLASS = LINEID AND B(GETW.FRWD) THEN              42202000
         BEGIN                                                          42203000
              ITA := GETW.SCR;                                          42204000
              ENFO[ITA,15].FRWD := 0;                                   42205000
              SAVEREC := ITA;                                           42206000
              REPLACE POINTER(LFTA,8) BY POINTER(ENFO[ITA,0],8)         42207000
                   FOR 14 WORDS;                                        42208000
              TP[LFLK] := LFTA[LFLK];                                   42209000
              IF NEXT NEQ COLON THEN ERROR(045);                        42210000
         END                                                            42211000
         ELSE                                                           42212000
         BEGIN                                                          42213000
              FLAG(153);                                                42214000
              WHILE NEXT NEQ COLON AND ELCLASS NEQ PERIOD DO;           42215000
              BAD := TRUE;                                              42216000
         END                                                            42217000
         ELSE                                                           42218000
         BEGIN                                                          42219000
              ACCUM[0].CLASS :=                                         42220000
              IF DEFAULTOG THEN LINEDEFAULTID ELSE LINEID;              42221000
              ENTR(LSI);                                                42222000
              SAVEREC := LASTREC;                                       42223000
              IF NEXT NEQ COLON THEN  ERROR(045);                       42224000
         END;                                                           42225000
              END;                                                      42226000
 AGAIN:  IF (GTA := REAL(LCASE +NEXT,1)) = 0 THEN                       42227000
         BEGIN                                                          42228000
              ERROR(195);  GO AGAIN;                                    42229000
         END;                                                           42230000
         IF GTA > 1 THEN                                                42231000
         IF NEXT NEQ EQUAL THEN                                         42232000
         BEGIN                                                          42233000
              ERROR(035);  GO AGAIN;                                    42234000
         END;                                                           42235000
         CASE (GTA - 1) OF                                              42236000
         BEGIN                                                          42237000
              GO AWAY;                                                  42238000
              BEGIN                              % ADDRESS       1      42239000
                   IF SW.LADB THEN FLAG(134);                           42240000
                   TP[LAD] := LINEADDRESST;                             42241000
                   SW.LADB := GOOD;                                     42242000
              END;                                                      42243000
              BEGIN                              % ADAPTOR       2      42244000
                   IF SW.LAPB THEN FLAG(134);                           42245000
                   GTA := ADAPTERCLASS;                                 42246000
                   IF GOOD THEN                                         42247000
                   BEGIN                                                42248000
                        SW.LAPB := TRUE;                                42249000
                        TP[LADPTCL] := INTEGER(GTA.[7:8] - 1);          42250000
                        TP[LDIR] := GTA.[16:2];                         42251000
                   END;                                                 42252000
%                                                                       42253000
              END;                                                      42254000
              BEGIN                              % OTHERLINE     3      42255000
                   IF DEFAULTOG THEN                                    42256000
                   BEGIN                                                42257000
                        ERROR(064);  GO AGAIN;                          42258000
                   END;                                                 42259000
                   IF SW.LOLB THEN FLAG(134);                           42260000
                   LINETYPEST(TP);                                      42261000
                   SW.LOLB := GOOD;                                     42262000
              END;                                                      42263000
              BEGIN                              % STATION       4      42264000
                   IF DEFAULTOG THEN                                    42265000
                   BEGIN                                                42266000
                        ERROR(065);  GO AGAIN;                          42267000
                   END;                                                 42268000
                   IF SW.LSTB THEN FLAG(134);                           42269000
                   TP[LNS] := (ITA := STATIONST).[7:8];                 42270000
                   TP[LSL] := ITA.[31:16];                              42271000
                   SW.LSTB := GOOD;                                     42272000
              END;                                                      42273000
              BEGIN                              % DEFAULT       5      42274000
                   IF SW.LDFB THEN FLAG(134);                           42275000
                   DEFAULTST(3);                                        42276000
                   SW.LDFB := GOOD;                                     42277000
              END;                                                      42278000
              BEGIN                              % MODEM         6      42279000
                   IF SW.LMMB THEN FLAG(134);                           42280000
                   TP[LMODEM] := MODEMST;                               42281000
                   SW.LMMB := GOOD;                                     42282000
              END;                                                      42283000
              BEGIN                                                     42284000
              END;                                                      42285000
         END;                                                           42286000
         IF GOOD THEN IF NEXT NEQ PERIOD THEN ERROR(034);               42287000
         IF LISTOG THEN PRINTLINE;                                      42288000
         GO AGAIN;                                                      42289000
 AWAY:   IF DEFAULTOG THEN GO STUFF;                                    42290000
         IF SW.LDFB THEN                                                42291000
         BEGIN                                                          42292000
              IF NOT SW.LAPB THEN IF DW.LAPB THEN                       42293000
                   BEGIN  TP[LADPTCL] := DFA[LADPTCL];                  42294000
                          TP[LDIR] := DFA[LDIR]; SW.LAPB := TRUE;       42295000
                   END;                                                 42296000
              IF NOT SW.LADB THEN IF DW.LADB THEN                       42297000
                   BEGIN TP[LAD] := DFA[LAD];  SW.LADB := TRUE; END;    42298000
              IF NOT SW.LMMB THEN IF DW.LMMB THEN                       42299000
                   BEGIN TP[LMODEM]:=DFA[LMODEM]; SW.LMMB:=TRUE; END;   42300000
         END;                                                           42301000
         IF DEFAULTOG   THEN GO STUFF;                                  42302000
         IF NOT SW.LADB THEN ERR(196);                                  42303000
         IF NOT SW.LAPB THEN ERR(197);                                  42304000
         IF TP[LDIR] =0 THEN TP[LDIR] := IF SW.LMMB THEN 2 ELSE 1 ELSE  42305000
         IF SW.LMMB AND B(TP[LDIR]) THEN ERR(215);                      42306000
         IF SW.LSTB THEN IF TP[LADPTCL] = 7 THEN ERR(214);              42307000
         ITT : = TP[LTYP];                                              42308000
         IF ITA := LFTA[LFTYP] NEQ 0 THEN                               42309000
         BEGIN                                                          42310000
              IF B(ITA.[6:1]) THEN                                      42311000
              BEGIN                                                     42312000
                   ITB := LFTA[LFACU];                                  42313000
                   IF TP[LADPTCL] NEQ 7 THEN  LERROR(ITB,0)             42314000
                   ELSE                                                 42315000
                   IF (ENFO[ITB,LAD]).[23:8] NEQ (TP[LAD]).[23:8] THEN  42316000
                   LERROR(ITB,1);                                       42317000
              END                                                       42318000
              ELSE                                                      42319000
              IF B(ITA.[5:1]) THEN                                      42320000
              BEGIN                                                     42321000
                   ITB := LFTA[LFDUP];                                  42322000
                   IF NOT B(ITT.[4:1]) OR TP[LDUP] NEQ ITB THEN         42323000
                   LERROR(ITB,2);                                       42324000
              END                                                       42325000
              ELSE                                                      42326000
              IF B(ITA.[4:1]) THEN                                      42327000
              BEGIN                                                     42328000
                   ITB := LFTA[LFDUP];                                  42329000
                   IF NOT B(ITT.[5:1]) OR TP[LDUP] NEQ ITB THEN         42330000
                   LERROR(ITB,3);                                       42331000
              END;                                                      42332000
              REPLACE POINTER(LFTA,8) BY 0 FOR 14 WORDS;                42333000
         END;                                                           42334000
         IF R(B(ITT) AND B(3"342")) = 0 THEN                            42335000
         IF NOT SW.LSTB THEN  ERR(200);                                 42336000
         IF R(B(ITT) AND B(3"175")) NEQ 0 AND TP[LADPTCL] = 7 THEN      42337000
         ERR(213);                                                      42338000
         IF NOT SW.LSTB THEN GO TO LLA;                                 42339000
         TP[LMODE] := TPB[0];                                           42340000
         IF SW.LAPB THEN                                                42341000
         IF REAL(BOOLEAN(ADCLTYPES[TP[LADPTCL]]) AND                    42342000
              BOOLEAN(TPB[4])) = 0 THEN  ERR(205)                       42343000
         ELSE                                                           42344000
         TP[LADTYPE] := FIRSTONE(TPB[4])- 1;                            42345000
         IF R(B(ITT) AND B(3"142")) NEQ 0 THEN  ERR(201)                42346000
         ELSE                                                           42347000
         IF ITA := TP[LADPTCL] GTR 1 AND ITA NEQ 7 THEN                 42348000
         BEGIN                                                          42349000
              IF TPB[7] = 0 THEN ERR(218);                              42350000
         END                                                            42351000
         ELSE                                                           42352000
         IF R(SW.LMMB) NEQ TPB[7]          THEN  ERR(219);              42353000
         IF B(ITT.[2:1]) AND TP[LNS] > 1   THEN  ERR(202);              42354000
         IF NOT B(ITT.[2:1]) AND B(TPB[6]) THEN  ERR(204);              42355000
         IF SW.LADB AND SW.LOLB THEN                                    42356000
         BEGIN                                                          42357000
              ITA := TP[LAD];                                           42358000
              TYPEDCP := TYPEDCP & 0[ITA.[23:8]:1];                     42359000
              IF TYPEDCP NEQ 0 THEN  ERR(203);                          42360000
         END;                                                           42361000
         IF ERRORCOUNT = 0 THEN                                         42362000
         BEGIN                                                          42363000
              ITA := TP[LSL];                                           42364000
              ITB := 0 & (ITC := TP[LAD]) [23:23:8] &                   42365000
                   ENTIER(ITC.[16:8] | 16 + ITC.[7:8]) [15:7:8];        42366000
              ITC := 0;                                                 42367000
              WHILE ITA NEQ 0 DO                                        42368000
              BEGIN                                                     42369000
                   ENFO[ITA,SDLS] := ITB & ITC [7:8];                   42370000
                   ITC := ITC + 1;                                      42371000
                   ITA := ENFO[ITA,SNSL];                               42372000
              END;                                                      42373000
         END;                                                           42374000
 LLA:                                                                   42375000
 STUFF:                                                                 42376000
         IF NOT DEFAULTOG THEN IF NOT BAD THEN LINESEXIST := TRUE;      42377000
         IF NOT BAD THEN                                                42378000
         BEGIN                                                          42379000
              TP[6] := REAL(SW);                                        42380000
              REPLACE POINTER(ENFO[SAVEREC,0],8) BY POINTER(TP,8)       42381000
                   FOR 14 WORDS;                                        42382000
         END;                                                           42383000
         IF DEFAULTOG THEN  GO EXIT;                                    42384000
         DCPAC[ITA:=(TP[LAD]).[23:8]] := R(B(ADCLTYPES[TP[LADPTCL]])    42385000
                                         OR B(DCPAC[ITA]));             42386000
         DCPNL[ITA] := DCPNL[ITA] + 1;                                  42387000
         DCPNS[ITA] := DCPNS[ITA] + TP[LNS];                            42388000
 EXIT:                                                                  42389000
    END;                                                                42390000
PROCEDURE  DCPDEFINITION;                                               42391000
    BEGIN                                                               42392000
         INTEGER  DCPA,DADT,DTC,DRT,IT,IU,IV,IW,IX;                     42393000
         INTEGER JJ,KK,LL,MM,NN,MRA,MTA,MTR;                            42394000
         REAL CBRW, RT, TU, RV, TW;                                     42395000
         ARRAY DCPRS[0:600];                                            42396000
         INTEGER NRS;                                                   42397000
         LABEL LA,LB,LC,LD,LE,LF,LH,AWAY,EXIT;                          42398000
         REPLACE POINTER(TP,8) BY 0 FOR 18 WORDS;                       42399000
         BAD := SWORD := FALSE;                                         42400000
         IF NEXT NEQ INTEGERV THEN                                      42401000
         BEGIN                                                          42402000
              FLAG(093);                                                42403000
              WHILE NEXT NEQ COLON AND ELCLASS NEQ PERIOD DO;           42404000
              BAD := TRUE;                                              42405000
         END                                                            42406000
         ELSE                                                           42407000
         IF NUM > 7 THEN                                                42408000
         BEGIN                                                          42409000
              FLAG(093); BAD := TRUE;                                   42410000
              GO TO LD;                                                 42411000
         END                                                            42412000
         ELSE                                                           42413000
         IF B(0 & DCPEXW [0:NUM:1]) THEN                                42414000
         BEGIN                                                          42415000
              FLAG(153);  BAD := TRUE;                                  42416000
              GO TO LD;                                                 42417000
         END                                                            42418000
         ELSE                                                           42419000
         BEGIN                                                          42420000
              DCPEXW := DCPEXW & 1[NUM:1] ;                             42421000
 LD:                                                                    42422000
              IF NEXT NEQ COLON THEN  ERROR(045);                       42423000
         END;                                                           42424000
         DCPA := NUM;                                                   42425000
 LE:                                                                    42426000
         IF GTA := REAL(DCPCASE + NEXT,1) > 1 THEN                      42427000
         IF NEXT NEQ EQUAL THEN                                         42428000
         BEGIN                                                          42429000
              ERROR(035);  GO TO LE;                                    42430000
         END;                                                           42431000
         CASE GTA OF                                                    42432000
         BEGIN                                                          42433000
              BEGIN                                                     42434000
                   ERROR(060);  GO TO LE;                               42435000
              END;                                                      42436000
              BEGIN                                                     42437000
                   GO AWAY;                                             42438000
              END;                                                      42439000
              BEGIN                                                     42440000
                   IF SW.DMEMB THEN  FLAG(134);                         42441000
                   TP[DMEM]:=IF IT:=NUMERICVALUE LEQ 0 THEN 4096        42442000
                             ELSE MIN((IT+4095)DIV 4096 | 4096,16384);  42443000
                   SW.DMEMB := GOOD;                                    42444000
              END;                                                      42445000
              BEGIN                                                     42446000
                   ERROR(060);  GO TO LE;                               42447000
              END;                                                      42448000
              BEGIN                                                     42449000
                   ERROR(003);  GO TO LE;                               42450000
              END;                                                      42451000
         END;                                                           42452000
         IF GOOD THEN IF NEXT NEQ PERIOD THEN  ERROR(034);              42453000
         IF LISTOG THEN PRINTLINE;                                      42454000
         GO TO LE;                                                      42455000
 AWAY:                                                                  42456000
         IF DCPAC[DCPA] = 0 THEN  ERR(229);                             42457000
         IF NOT SW.DMEMB    THEN  ERR(230);                             42458000
         IF NOT BAD THEN DCPSEXIST := TRUE;                             42459000
         IF BAD OR ERRORCOUNT NEQ 0 THEN  GO EXIT;                      42460000
         DADT := DCPAC[DCPA];                                           42461000
         FOR IT:=2 STEP 5 UNTIL NTC DO                                  42462000
         IF IU := R(B(TRANCLASS[IT]) AND B(DADT)) NEQ 0 THEN            42463000
         IF B(TRANCLASS[IT - 1].[46:1]) THEN   % IS TERMINAL MENTIONED  42464000
% SHOULD MODEMS BE TAKEN INTO CONSIDERTTION                             42465000
         BEGIN                                                          42466000
              IW := TRANCLASS[IT - 1];                                  42467000
              FOR IV := 1 STEP 1 UNTIL DTC DO                           42468000
              IF DCPTC[IV] = IW THEN  GO LA;                            42469000
              DCPTC[DTC := DTC + 1] := IW;                              42470000
 LA:                                                                    42471000
              ITA := TRANCLASS[IT].[46:15];                             42472000
              IF ITB := ENFO[ITA,TTAD] GTR MTA THEN MTA := ITB;         42473000
              IF ITB := ENFO[ITA,TRAD] GTR MRA THEN MRA := ITB;         42474000
              IF ITB := ENFO[ITA,TTRAN] GTR MTR THEN MTR := ITB;        42475000
              ENFO[ITA,TCLASS] := IV ;                                  42476000
              RT := TRANCLASS[IT + 1] & IV [31:8];                      42477000
              KK := TIMECONV(ENFO[ITA,TIRC],ENFO[ITA,TIRCU]);           42478000
              MM := KK;                                                 42479000
              FOR JJ := 1 STEP 1 UNTIL MSC DO                           42480000
              IF R(B(MODEMSUM[JJ].[30:31]) AND B(IU)) NEQ 0 THEN        42481000
              BEGIN                                                     42482000
                   LL := R(CTIME(KK,MODEMSUM[JJ].[46:8]) = 1 OR         42483000
                        MODEMSUM[JJ].[38:8] NEQ 0)                      42484000
                        | MAX(KK,MODEMSUM[JJ].[38:8]);                  42485000
                   IF MM = 0 THEN  MM := LL                             42486000
                   ELSE                                                 42487000
                   IF LL NEQ MM THEN  MM := -1;                         42488000
                   IF NN = 0 THEN  NN := MODEMSUM[JJ].[38:8]            42489000
                   ELSE                                                 42490000
                   IF NN NEQ MODEMSUM[JJ].[38:8] THEN  NN := -1;        42491000
              END;                                                      42492000
              IF MM < 0 THEN RT.[38:1] := 1;                            42493000
              IF NN < 0 THEN RT.[37:1] := 1;                            42494000
              DCPRT[       DRT + 1] := RT;                              42495000
              DCPRT[       DRT + 2] := TRANCLASS[IT + 2];               42496000
              DCPRT[DRT := DRT + 3] := TRANCLASS[IT + 3] &              42497000
                                       MM [46:8] & NN [38:8];           42498000
              MM := NN := 0;                                            42499000
         END;                                                           42500000
         DCPRS[       NRS := 1] := (RT := APPT[DCPRT[1].[23:12],0]) &   42501000
                                  RT [23:27:12] & DCPRT[1] [46:46:23] ; 42502000
         DCPRS[       NRS + 1] := DCPRT[2];                             42503000
         DCPRS[NRS := NRS + 2] := DCPRT[3];                             42504000
         BON := FALSE;                                                  42505000
         FOR IT := 1 STEP 3 UNTIL DRT DO                                42506000
         BEGIN                                                          42507000
              IU := DCPRT[IT].[23:12];                                  42508000
%                                                                       42509000
              IF APPT[IU,0] NEQ 0 THEN                                  42510000
              BEGIN                                                     42511000
                   RV := (RT := APPT[IU,0]) & RT [23:27:12] &           42512000
                        DCPRT[IT] [46:46:23] ;                          42513000
                   CBRW := R(B(ENFO[(RT.[31:16]),1]) OR                 42514000
                        B(ENFO[(RT.[15:16]),1]) OR B(CBRW));            42515000
                   BON := B(ENFO[(RT.[31:16]),3]) OR                    42516000
                        B(ENFO[(RT.[15:16]),3]) OR BON;                 42517000
                   FOR IW := 1 STEP 3 UNTIL NRS DO                      42518000
                   IF DCPRS[IW].[43:44] = RV.[43:44] THEN               42519000
                   BEGIN                                                42520000
                        APPT[IU,6 + DCPA] := APPT[IU,6+DCPA] &          42521000
                                            ((IW + 2) DIV 3) [46:7];    42522000
                        DCPRS[IW] := R(B(DCPRS[IW]) OR B(RV));          42523000
                        TU := DCPRS[IW + 1];                            42524000
                        TW := DCPRT[IT + 1];                            42525000
                        RT := 0;                                        42526000
                        RT := R(B(RT) OR B(TU) OR B(TW));               42527000
                        DCPRS[IW + 1] := RT;                            42528000
                        CBRW.[45:6] := R(B(RT) OR B(CBRW)).[45:6];      42529000
                        IF DCPRS[IW+2].[46:8] NEQ DCPRT[IT+2].[46:8]    42530000
                             THEN                                       42531000
                        DCPRS[IW].[38:1] := 1;                          42532000
                        IF DCPRS[IW+2].[38:8] NEQ DCPRT[IT+2].[38:8]    42533000
                             THEN                                       42534000
                        DCPRS[IW].[37:1] := 1;                          42535000
                        GO TO LF;                                       42536000
                   END;                                                 42537000
                   DCPRS[       NRS + 1] := RV;                         42538000
                   DCPRS[       NRS + 2] := DCPRT[IT + 1];              42539000
                   DCPRS[NRS := NRS + 3] := DCPRT[IT + 2];              42540000
                   APPT[IU,6 + DCPA] := APPT[IU,6+ DCPA] &              42541000
                                             (NRS DIV 3) [46:7] ;       42542000
 LF:                                                                    42543000
              END;                                                      42544000
         END;                                                           42545000
         PTRA := POINTER(DCPADD[DCPA,0],8);                             42546000
         FOR IT := 0 STEP 1 UNTIL 255 DO                                42547000
         IF REAL(PTRA,2) NEQ 0 THEN  GO LB                              42548000
         ELSE                                                           42549000
         PTRA := PTRA + 2;                                              42550000
 LB:                                             % MIN ADDRESS          42551000
         TP[DMNA] := IT;                                                42552000
         PTRA := POINTER(DCPADD[DCPA,0],8) + 510;                       42553000
         FOR IT := 255 STEP -1 UNTIL 0 DO                               42554000
         IF REAL(PTRA,2) NEQ 0 THEN  GO LC                              42555000
         ELSE                                                           42556000
         PTRA := PTRA - 2;                                              42557000
 LC:                                             % MAX ADD              42558000
         TP[DMXA] := IT;                                                42559000
         TP[DNTC] := DTC;                                               42560000
         TP[DNRT] := NRS DIV 3;                                         42561000
         TP[DLK]  := DCPLINK;                                           42562000
         TP[3]    := DCPNS[DCPA] & DCPNL[DCPA] [31:16];                 42563000
         TP[4]    := CBRW & MTR BRTRAN & MTA BRTA & MRA BRRA;           42564000
         TP[5]    := R(BON);                                            42565000
         TP[15]   := 0 & 6 BLKCNT & DCPID CLASS;                        42566000
         TP[16]   := 0 & 5[46:7]  & 1[39:8] & 1[31:8]                   42567000
                       & 1[17:6]  & DCPA[11:6];                         42568000
         DCPLINK  := NEXTREC;                                           42569000
         REPLACE POINTER(ENFO[NEXTREC,0],8) BY                          42570000
              POINTER(TP,8) FOR 18 WORDS;                               42571000
DUMPARRAY(TP,0,16,"DCP UN","FO    ");                                   42572000
DUMPOCT  (TP,16,6,"IDENTI","FIER  ");                                   42573000
WRITE(PR[DBL]);                                                         42574000
DUMPARRAY(DCPTC,0,30,"DCP TR","ANCLAS");                                42575000
DUMPARRAY(DCPRS,0,30,"DCP RE","QUESET");                                42576000
         IT := 0;                                                       42577000
         THRU 3 DO                                                      42578000
         BEGIN                                                          42579000
              NEXTREC := NEXTREC + 1;                                   42580000
              REPLACE POINTER(ENFO[NEXTREC,0],8) BY                     42581000
                   POINTER(DCPADD[DCPA,IT],8) FOR 30 WORDS;             42582000
              IT := IT + 30;                                            42583000
         END;                                                           42584000
         NEXTREC := NEXTREC + 1;                                        42585000
         REPLACE POINTER(ENFO[NEXTREC,0],8) BY POINTER(DCPTC,8)         42586000
              FOR 30 WORDS;                                             42587000
         NEXTREC := NEXTREC + 1;                                        42588000
         REPLACE POINTER(ENFO[NEXTREC,0],8) BY POINTER(DCPRS,8)         42589000
              FOR 30 WORDS;                                             42590000
         NEXTREC := NEXTREC + 1;                                        42591000
 EXIT:                                                                  42592000
    END;                                                                42593000
PROCEDURE  CREATENIF;                                                   42594000
    BEGIN                                                               42595000
    INTEGER IX, IW;                                                     42596000
    DEFINE WRITEIT = BEGIN                                              42597000
                     WRITE(NIF, 30, TP[*]);                             42598000
                     IF DUMPTOG THEN                                    42599000
                     BEGIN                                              42600000
                    IF NOHEADING THEN DAYTIME(0);                       42601000
                     WRITE(PR[DBL]);                                    42602000
                     DUMPARRAY(TP,0,16,"***** ",INDEX);                 42603000
                     DUMPOCT  (TP,16,6,"IDENTI","FIER  ");              42604000
                     END;                                               42605000
                     END    # ;                                         42606000
%                                                                       42607000
    DEFINE INDEX = 0 & ((IX:=ITA.[15:12]) DIV 10)[35:6] &               42608000
                       INTEGER(IX MOD 10)[29:6] & 13[23:6] &            42609000
                       ((IW:= ITA.[3:4]|30) DIV 100)[17:6] &            42610000
                       ((IW:= IW-(IW DIV 100)|100) DIV 10)[11:6] &      42611000
                       INTEGER(IW MOD 10)[5:6]    #;                    42612000
         PTRA := POINTER(TP,8);                                         42613000
         REPLACE PTRA BY 0 FOR 30 WORDS;                                42614000
         TP[0] := DCPLINK;                                              42615000
         WRITE(NIF,30,TP[*]);  DUMPARRAY(TP,0,30,"DCPLIN","K     ");    42616000
         FOR ITA := 0 STEP 1 UNTIL 5 DO                                 42617000
         BEGIN                                                          42618000
              ITB := 0;                                                 42619000
              THRU 5 DO                                                 42620000
              BEGIN                                                     42621000
                   REPLACE PTRA BY POINTER(SCRAMBLE[ITA,ITB],8)         42622000
                        FOR 30 WORDS;                                   42623000
                   WRITE(NIF, 30, TP[*]);                               42624000
                   DUMPARRAY(TP,0,30,"SCRAMB",ITA+ 3"000432560606000"); 42625000
                   ITB := ITB + 30;                                     42626000
              END;                                                      42627000
         END;                                                           42628000
         WRITE(PR[PAGE]);                                               42629000
         ITA := 31;   ITB := 0;                                         42630000
         THRU NEXTREC - 31 DO                                           42631000
         BEGIN                                                          42632000
              REPLACE PTRA BY POINTER(ENFO[ITA,0],8) FOR 30 WORDS;      42633000
              IF ITB = 0 THEN                                           42634000
                  BEGIN                                                 42635000
                  IF TP[15].CLASS = REQUESTID THEN ITB := TP[0]         42636000
                  ELSE                                                  42637000
                  IF TP[15].CLASS = DCPID     THEN ITB := 5;            42638000
                  WRITEIT;                                              42639000
                  END                                                   42640000
              ELSE                                                      42641000
                  BEGIN                                                 42642000
                  WRITE(NIF, 30, TP[*]);                                42643000
                  IF DUMPTOG THEN                                       42644000
                  BEGIN                                                 42645000
                  WRITE(PR[DBL]);                                       42646000
                  DUMPARRAY(TP,0,30,"***** ",INDEX);                    42647000
                  END;                                                  42648000
                  ITB := ITB - 1;                                       42649000
                  END;                                                  42650000
%                                                                       42651000
              ITA := ITA + 1;                                           42652000
         END;                                                           42653000
         LOCK(NIF);                                                     42654000
WRITE(PR[PAGE]);                                                        42655000
DUMPARRAY(TRANCLASS,0,40,"TRANCL","ASS   ");                            42656000
DUMPARRAY(RTDELAY,  0,32,"RTDELA","Y     ");                            42657000
DUMPARRAY(REMOTETYPE,0,32,"REMOTE","TYPE  ");                           42658000
DUMPARRAY(MODEMSUM, 0,32,"MODEMS","UM    ");                            42659000
DUMPARRAY(DCPRT,    0,32,"DCPRT ","      ");                            42660000
    END;                                                                42661000
%                                                                       45000000
COMMENT#################################################################45001000
                   INITIALIZATION AND DRIVER FOR COMPILER PHASE         45002000
#######################################################################;45003000
%                                                                       45004000
PROCEDURE DESCRIPTION;                                                  45005000
    BEGIN                                                               45006000
         LABEL ONN,AGAIN, LER, EXIT;                                    45007000
         IF LISTOG AND NOHEADING THEN DAYTIME(0);                       45008000
ONN:     STEPIT;                                                        45009000
AGAIN:   CASE REAL(DESCRIPTIONTABLE + ELCLASS,1) OF                     45010000
         BEGIN                                                          45011000
              BEGIN                                                     45012000
                   ERROR(004); GO ONN;                                  45013000
              END;                                                      45014000
              BEGIN                    COMMENT  CONSTANTS ......... ;   45015000
                   IF CONTEXT > 2 THEN                                  45016000
                   BEGIN                                                45017000
LER:               ERROR(008); GO ONN;                                  45018000
                   END;                                                 45019000
                   CONSTANTLIST;                                        45020000
                   CONTEXT := 2;                                        45021000
                   GO ONN;                                              45022000
              END;                                                      45023000
              BEGIN                    COMMENT MODEMS ..........;       45024000
                   IF CONTEXT GTR 4 THEN FLAG(008);                     45025000
                   MODEMDEFINITION;                                     45026000
                   CONTEXT := 4;                                        45027000
              END;                                                      45028000
              BEGIN                    COMMENT  REQUESTS .......... ;   45029000
                   IF CONTEXT GTR 3 THEN FLAG(008);                     45030000
                   PEMIT:=POINTER(REQBUFF,8);                           45031000
                   WRITEREQ;                                            45032000
                   REQUESTDEFINITION;                                   45033000
                   CONTEXT := 3;                                        45034000
              END;                                                      45035000
              BEGIN                    COMMENT  TERMINAL DEVICE ... ;   45036000
                   IF CONTEXT GTR 6 THEN FLAG(008);                     45037000
                   TERMINALDEFINITION;                                  45038000
                   CONTEXT := IF DEFAULTOG THEN 5 ELSE 6;               45039000
              END;                                                      45040000
              BEGIN                    COMMENT  STATIONS .......... ;   45041000
                   IF CONTEXT GTR 8 THEN FLAG(008);                     45042000
                   IF REQFORWARDLINK NEQ 0 THEN CHASEREQLINK;           45043000
                   STATIONDEFINITION;                                   45044000
                   CONTEXT := IF DEFAULTOG THEN 7 ELSE 8;               45045000
              END;                                                      45046000
              BEGIN                    COMMENT DCPS ............... ;   45047000
                   IF CONTEXT GTR 11 THEN GO TO LER;                    45048000
                   CHECKLINEFORWARD;                                    45049000
                   DCPDEFINITION;                                       45050000
                   CONTEXT := 11;                                       45051000
              END;                                                      45052000
              BEGIN                    COMMENT LINES .............. ;   45053000
                   IF CONTEXT GTR 10 THEN FLAG(008);                    45054000
                   IF STATIONFORWARDLINK NEQ 0 THEN CHECKSTATIONFORWARD;45055000
                   LINEDEFINITION;                                      45056000
                   CONTEXT := IF DEFAULTOG THEN 9 ELSE 10;              45057000
              END;                                                      45058000
              BEGIN                    COMMENT FILES .............. ;   45059000
                  ERRORCOUNT:=ERRORCOUNT-1; FLAG(3)                     45060000
              END;                                                      45061000
              BEGIN                    COMMENT END ................ ;   45062000
                   GO TO EXIT;                                          45063000
              END;                                                      45064000
         END;                                                           45065000
         GO AGAIN;                                                      45066000
 EXIT:                                                                  45067000
         IF NOT STATIONSEXIST THEN ERR(248);                            45068000
         IF NOT LINESEXIST THEN ERR(250);                               45069000
         IF NOT DCPSEXIST THEN ERR(251);                                45070000
    END;                                                                45071000
PROCEDURE INITIALIZE;                                                   45072000
    BEGIN                                                               45073000
    FILL INFO[0,*] WITH                                                 45074000
        3"0020000000200000",3"0000600100201023","ONSTANT0",             45075000
                 %    00  001   CONSTANT                                45076000
        3"0020000000400000",3"0000500100200626","ORMAT000",             45077000
                 %    00  002   FORMAT                                  45078000
        3"0020000000600000",3"0000540100200724","EFAULT00",             45079000
                 %    00  003   DEFAULT                                 45080000
        3"0020000001000000",3"0000440100200544","ODEM0000",             45081000
                 %    00  004   MODEM                                   45082000
        3"0020000001200000",3"0000600100201063","ERMINAL0",             45083000
                 %    00  005   TERMINAL                                45084000
        3"0020000001400000",3"0000540100200762","TATION00",             45085000
                 %    00  006   STATION                                 45086000
        3"0020000001600000",3"0000400100200443","INE00000",             45087000
                 %    00  007   LINE                                    45088000
        3"0020000002000000",3"0000340100200324","CP000000",             45089000
                 %    00  008   DCP                                     45090000
         3"0020000002200000",3"0000400100200463","HRU00000",            45091000
                 %    00  009   FILE                                    45092000
        3"0020000002400000",3"0000540100200751","EQUEST00",             45093000
                 %    00  010   REQUEST                                 45094000
        3"0020000003600000",3"0000540100200721","DDRESS00",             45095000
                 %    00  015   ADDRESS                                 45096000
        3"0020000004000000",3"0000400100200463","EXT00000",             45097000
                 %    00  016   TEXT                                    45098000
        3"0020000004200000",3"0000740100201325","NABLEINP","UT000000",  45099000
                 %    00  017   ENABLEINPUT                             45100000
        3"0020000004400000",3"0000400100200463","RAN00000",             45101000
                 %    00  018   TRAN                                    45102000
        3"0020000004600000",3"0000340100200322","CC000000",             45103000
                 %    00  019   BCC                                     45104000
        3"0020000005000000",3"0000340100200325","ND000000",             45105000
                 %    00  020   END                                     45106000
        3"0020000005200000",3"0000500100200644","EMORY000",             45107000
                 %    00  021   MEMORY                                  45108000
        3"0020000005400000",3"0000500100200646","UTPUT000",             45109000
                 %    00  022   OUTPUT                                  45110000
        3"0020000005600000",3"0000640100201163","ERMINATE",             45111000
                 %    00  023   TERMINATE                               45112000
        3"0020000006000000",3"0000440100200562","TORE0000",             45113000
                 %    00  024   STORE                                   45114000
        3"0020000006200000",3"0000440100200531","NPUT0000",             45115000
                 %    00  025   INPUT                                   45116000
        3"0020000006400000",3"0000540100200751","ECEIVE00",             45117000
                 %    00  026   RECEIVE                                 45118000
        3"0020000006600000",3"0001040100201563","RANSMITD","ELAY0000",  45119000
                 %    00  027   TRANSMITDELAY                           45120000
        3"0020000007000000",3"0000600100201063","RANSMIT0",             45121000
                 %    00  028   TRANSMIT                                45122000
        3"0020000007200000",3"0000300100200231","F0000000",             45123000
                 %    00  029   IF                                      45124000
        3"0020000007400000",3"0000400100200463","HEN00000",             45125000
                 %    00  030   THEN                                    45126000
        3"0020000007600000",3"0000440100200522","EGIN0000",             45127000
                 %    00  031   BEGIN                                   45128000
        3"0020000210000000",3"0000700100201243","OGICALAC","K0000000",  45129000
                 %    02  032   LOGICALACK                              45130000
        3"0020000310000000",3"0000440100200522","LOCK0000",             45131000
                 %    03  032   BLOCK                                   45132000
        3"0020000310000000",3"0000540100200722","LOCKED00",             45133000
                 %    03  032   BLOCKED                                 45134000
        3"0020000010200000",3"0000540100200763","IMEOUT00",             45135000
                 %    00  033   TIMEOUT                                 45136000
        3"0020000110200000",3"0000540100200762","TOPBIT00",             45137000
                 %    01  033   STOPBIT                                 45138000
        3"0020000210200000",3"0000540100200722","UFOVFL00",             45139000
                 %    02  033   BUFOVFL                                 45140000
        3"0020000310200000",3"0000440100200522","REAK0000",             45141000
                 %    03  033   BREAK                                   45142000
        3"0020000410200000",3"0000700100201224","ISCONNEC","T0000000",  45143000
                 %    04  033   DISCONNECT                              45144000
        3"0020000610200000",3"0000500100200647","ARITY000",             45145000
                 %    06  033   PARITY                                  45146000
        3"0020000710200000",3"0000500100200622","CCERR000",             45147000
                 %    07  033   BCCERR                                  45148000
        3"0020001010200000",3"0000500100200621","DDERR000",             45149000
                 %    08  033   ADDERR                                  45150000
        3"0020001110200000",3"0000540100200763","RANERR00",             45151000
                 %    09  033   TRANERR                                 45152000
        3"0020001210200000",3"0000640100201126","ORMATERR",             45153000
                 %    10  033   FORMATERR                               45154000
        3"0020001310200000",3"0000740100201345","AKONSELE","CT000000",  45155000
                 %    11  033   NAKONSELECT                             45156000
        3"0020001410200000",3"0000740100201323","ONTROLFL","AG000000",  45157000
                 %    12  033   CONTROLFLAG                             45158000
        3"0020001510200000",3"0000540100200766","RUFLAG00",             45159000
                 %    13  033   WRUFLAG                                 45160000
        3"0020002110200000",3"0000740100201325","NDOFBUFF","ER000000",  45161000
                 %    17  033   ENDOFBUFFER                             45162000
        3"0020002210200000",3"0001040100201543","OSSOFCAR","RIER0000",  45163000
                 %    18  033   LOSSOFCARRIER                           45164000
        3"0020002310200000",3"0000540100200722","LKNERR00",             45165000
                 %    19  033   BLKNERR                                 45166000
        3"0020000010400000",3"0000340100200363","OG000000",             45167000
                 %    00  034   TOG                                     45168000
        3"0020000010600000",3"0000340100200366","RU000000",             45169000
                 %    00  035   WRU                                     45170000
        3"0020000110600000",3"0000540100200723","ONTROL00",             45171000
                 %    01  035   CONTROL                                 45172000
        3"0020000210600000",3"0000700100201243","INEDELET","E0000000",  45173000
                 %    02  035   LINEDELETE                              45174000
        3"0020000210600000",3"0000300100200243","D0000000",             45175000
                 %    02  035   LD                                      45176000
        3"0020000310600000",3"0000640100201122","ACKSPACE",             45177000
                 %    03  035   BACKSPACE                               45178000
        3"0020000310600000",3"0000400100200422","KSP00000",             45179000
                 %    03  035   BKSP                                    45180000
       3"0020000410600000",3"0000640100201162","EPARATOR",              45181000
                %    04  035   SEPARATOR                                45182000
        3"0020000011000000",3"0000640100201121","LTERNATE",             45183000
                 %    00  036   ALTERNATE                               45184000
        3"0020000011200000",3"0000600100201062","EQUENCE0",             45185000
                 %    00  037   SEQUENCE                                45186000
        3"0020000011400000",3"0000740100201331","NHIBITSY","NC000000",  45187000
                 %    00  038   INHIBITSYNC                             45188000
        3"0020000011600000",3"0000540100200744","OMENEE00",             45189000
                 %    00  039   MOMENEE                                 45190000
        3"0020000012000000",3"0000640100201126","REQUENCY",             45191000
                 %    00  040   FREQUENCY                               45192000
        3"0020000012200000",3"0000440100200526","ETCH0000",             45193000
                 %    00  041   FETCH                                   45194000
        3"0020000012400000",3"0000640100201163","IMELIMIT",             45195000
                 %    00  042   TIMELIMIT                               45196000
        3"0020000012600000",3"0000440100200563","ALLY0000",             45197000
                 %    00  043   TALLY                                   45198000
        3"0020000013000000",3"0000440100200525","RROR0000",             45199000
                 %    00  044   ERROR                                   45200000
        3"0020000013200000",3"0000600100201031","NITIATE0",             45201000
                 %    00  045   INITIATE                                45202000
        3"0020000013400000",3"0000440100200551","ETRY0000",             45203000
                 %    00  046   RETRY                                   45204000
        3"0020000013600000",3"0000340100200362","UM000000",             45205000
                 %    00  047   SUM                                     45206000
        3"0020000014000000",3"0000300100200227","O0000000",             45207000
                 %    00  048   GO                                      45208000
        3"0020000014200000",3"0000300100200263","O0000000",             45209000
                 %    00  049   TO                                      45210000
        3"0020000014400000",3"0000440100200521","BORT0000",             45211000
                 %    00  050   ABORT                                   45212000
        3"0020000014600000",3"0000400100200425","LSE00000",             45213000
                 %    00  051   ELSE                                    45214000
        3"0020000015000000",3"0000440100200526","ALSE0000",             45215000
                 %    00  052   FALSE                                   45216000
        3"0020000115000000",3"0000400100200463","RUE00000",             45217000
                 %    01  052   TRUE                                    45218000
        3"0020000015200000",3"0000440100200521","SC630000",             45219000
                 %    00   053   ASC63                                  45220000
        3"0020000015200000",3"0000440100200521","SC670000",             45221000
                 %    00   053   ASC67                                  45222000
        3"0020000115200000",3"0000500100200625","BCDIC000",             45223000
                 %    01  053   EBCIDIC                                 45224000
        3"0020000215200000",3"0000440100200521","SC680000",             45225000
               %    02   053   ASC68                                    45226000
        3"0020000315200000",3"0000340100200322","CL000000",             45227000
                 %    03   053   BCL                                    45228000
        3"0020000415200000",3"0000500100200622","AUDOT000",             45229000
                 %    04   053   BAUDOT                                 45230000
        3"0020000515200000",3"0000340100200322","CD000000",             45231000
                 %    07   053   BCD                                    45232000
        3"0020000015400000",3"0000400100200423","ODE00000",             45233000
                 %    00  054   CODE                                    45234000
        3"0020000015600000",3"0000500100200622","UFFER000",             45235000
                 %    00  055   BUFFER                                  45236000
        3"0020000016000000",3"0000700100201230","ORIZONTA","L0000000",  45237000
                 %    00  056   HORIZONTAL                              45238000
          0;                                                            45239000
    FILL INFO[1,*] WITH                                                 45240000
        3"0020000016200000",3"0000600100201065","ERTICAL0",             45241000
                 %    00  057   VERTICAL                                45242000
        3"0020000016400000",3"0000340100200346","DD000000",             45243000
                 %    00  058   ODD                                     45244000
        3"0020000016600000",3"0000400100200425","VEN00000",             45245000
                 %    00  059   EVEN                                    45246000
        3"0020000117000000",3"0000540100200721","DAPTER00",             45247000
                 %    01  060   ADAPTER                                 45248000
        3"0020000217000000",3"0000540100200721","DAPTOR00",             45249000
                 %    02  060   ADAPTOR                                 45250000
        3"0020000017200000",3"0000400100200444","ODE00000",             45251000
                 %    00  061   MODE                                    45252000
        3"0020000017400000",3"0001000100201463","RANSMISS","ION00000",  45253000
                 %    00  062   TRANSMISSION                            45254000
        3"0020000017600000",3"0000500100200662","CREEN000",             45255000
                 %    00  063   SCREEN                                  45256000
        3"0020000020200000",3"0000440100200566","IDTH0000",             45257000
                 %    00  065   WIDTH                                   45258000
        3"0020000020400000",3"0000400100200447","AGE00000",             45259000
                 %    00  066   PAGE                                    45260000
         3"0020000020600000",3"0000300100200224","O0000000",            45261000
                 %    00  067   SPO                                     45262000
         3"0020000021200000",3"0000540100200725","XAMINE00",            45263000
                 %    00  068   ILLEGALCHR                              45264000
        3"0020000021200000",3"0000340100200344","CS000000",             45265000
                 %    00  069   MCS                                     45266000
        3"0020000021400000",3"0000600100201062","ECURITY0",             45267000
                 %    00  070   SECURITY                                45268000
        3"0020000021600000",3"0000400100200464","SER00000",             45269000
                 %    00  071   USER                                    45270000
        3"0020000022000000",3"0000400100200463","ASK00000",             45271000
                 %    00  072   TASK                                    45272000
        3"0020000022200000",3"0000700100201223","ONNECTIO","N0000000",  45273000
                 %    00  073   CONNECTION                              45274000
        3"0020000023000000",3"0000700100201223","ONTENTIO","N0000000",  45275000
                 %    00  076   CONTENTION                              45276000
        3"0020000123000000",3"0000400100200447","OLL00000",             45277000
                 %    01  076   POLL                                    45278000
        3"0020000223000000",3"0000500100200630","YBRID000",             45279000
                 %    02  076   HYBRID                                  45280000
        3"0020000023400000",3"0000500100200645","ORMAL000",             45281000
                 %    00  078   NORMAL                                  45282000
        3"0020000024000000",3"0000440100200547","HONE0000",             45283000
                 %    00  080   PHONE                                   45284000
        3"0020000124400000",3"0000640100201123","HARACTER",             45285000
                 %    01  082   CHARACTER                               45286000
        3"0020000224400000",3"0000400100200423","HAR00000",             45287000
                 %    02  082   CHAR                                    45288000
        3"0020000024600000",3"0000700100201266","RAPAROUN","D0000000",  45289000
                 %    00  083   WRAPAROUND                              45290000
        3"0020000026600000",3"0000340100200325","QL000000",             45291000
                 %    00  091   EQL                                     45292000
        3"0020000026600000",3"0000300100200225","Q0000000",             45293000
                 %    00  091   EQ                                      45294000
        3"0020000033200000",3"0000340100200326","OR000000",             45295000
                 %    00  109   FOR                                     45296000
        3"0020000034200000",3"0000340100200345","OT000000",             45297000
                 %    00  113   NOT                                     45298000
        3"0020000135000000",3"0000300100200227","T0000000",             45299000
                 %    01  116   GT                                      45300000
        3"0020000135000000",3"0000340100200327","TR000000",             45301000
                 %    01  116   GTR                                     45302000
        3"0020000235000000",3"0000300100200243","S0000000",             45303000
                 %    02  116   LS                                      45304000
        3"0020000235000000",3"0000340100200343","SS000000",             45305000
                 %    02  116   LSS                                     45306000
        3"0020000335000000",3"0000300100200245","E0000000",             45307000
                 %    03  116   NE                                      45308000
        3"0020000335000000",3"0000340100200345","EQ000000",             45309000
                 %    03  116   NEQ                                     45310000
        3"0020000535000000",3"0000300100200227","E0000000",             45311000
                 %    05  116   GE                                      45312000
        3"0020000535000000",3"0000340100200327","EQ000000",             45313000
                 %    05  116   GEQ                                     45314000
        3"0020000635000000",3"0000300100200243","E0000000",             45315000
                 %    06  116   LE                                      45316000
        3"0020000635000000",3"0000340100200343","EQ000000",             45317000
                 %    06  116   LEQ                                     45318000
        3"0020000135200000",3"0000500100200651","EMOTE000",             45319000
                 %    01  117   REMOTE                                  45320000
        3"0020000235200000",3"0000540100200747","ASSIVE00",             45321000
                 %    02  117   PASSIVE                                 45322000
        3"0020000335200000",3"0000500100200624","IALIN000",             45323000
                 %    03  117   DIALIN                                  45324000
        3"0020000435200000",3"0000500100200624","UPLEX000",             45325000
                 %    04  117   DUPLEX                                  45326000
        3"0020000735200000",3"0000540100200724","IALOUT00",             45327000
                 %    07  117   DIALOUT                                 45328000
        3"0020000035600000",3"0000400100200463","YPE00000",             45329000
                 %    00  119   TYPE                                    45330000
        3"0020000036000000",3"0000500100200626","AMILY000",             45331000
                 %    00  120   FAMILY                                  45332000
        3"0020000036400000",3"0000400100200445","ULL00000",             45333000
                 %    00  122   NULL                                    45334000
        3"0020000036600000",3"0000600100201025","XCHANGE0",             45335000
                 %    00  123   EXCHANGE                                45336000
        3"0020000037200000",3"0000700100201263","URNAROUN","D0000000",  45337000
                 %    00  125   TURNAROUND                              45338000
        3"0020000037400000",3"0000700100201245","OISEDELA","Y0000000",  45339000
                 %    00  126   NOISEDELAY                              45340000
        3"0020000037600000",3"0000440100200544","ICRO0000",             45341000
                 %    00  127   MICRO                                   45342000
        3"0020000137600000",3"0000440100200544","ILLI0000",             45343000
                 %    01  127   MILLI                                   45344000
        3"0020000237600000",3"0000340100200362","EC000000",             45345000
                 %    02  127   SEC                                     45346000
        3"0020000337600000",3"0000340100200344","IN000000",             45347000
                 %    03  127   MIN                                     45348000
        3"0020000040200000",3"0000600100201044","AXINPUT0",             45349000
                 %    00  129   MAXINPUT                                45350000
        3"0020000040400000",3"0000600100201031","CTDELAY0",             45351000
                 %    00  130   ICTDELAY                                45352000
        3"0020000140600000",3"0000600100201023","ARRIAGE0",             45353000
                 %    01  131   CARRIAGE                                45354000
        3"0020000240600000",3"0000600100201043","INEFEED0",             45355000
                 %    02  131   LINEFEED                                45356000
        3"0020000340600000",3"0000400100200430","OME00000",             45357000
                 %    03  131   HOME                                    45358000
        3"0020000440600000",3"0000440100200523","LEAR0000",             45359000
                 %    04  131   CLEAR                                   45360000
        3"0020000041000000",3"0000440100200544","YUSE0000",             45361000
                 %    00  132   MYUSE                                   45362000
        3"0020000041200000",3"0000440100200543","OGIN0000",             45363000
                 %    00  133   LOGIN                                   45364000
        3"0020000042600000",3"0000700100201231","NITIALIZ","E0000000",  45365000
                 %    00  139   INITIALIZE                              45366000
        3"0020000043000000",3"0000640100201131","NCREMENT",             45367000
                 %    00  140   INCREMENT                               45368000
        3"0020000043200000",3"0000440100200524","ELAY0000",             45369000
                 %    00  141   DELAY                                   45370000
        3"0020000043400000",3"0000500100200626","INISH000",             45371000
                 %    00  142   FINISH                                  45372000
        3"0020000043600000",3"0000400100200422","LKN00000",             45373000
                 %    00  143   BLKN                                    45374000
        3"0020000044000000",3"0000600100201062","TANDARD0",             45375000
                 %    00  144   STANDARD                                45376000
        3"0020000044200000",3"0000600100201062","KIPLINE0",             45377000
                 %    00  145   SKIPLINE                                45378000
        3"0020000044200000",3"0000640100201162","KIPLINES",             45379000
                 %    00  145   SKIPLINES                               45380000
        3"0020000144200000",3"0000740100201347","APERMOTI","ON000000",  45381000
                 %    01  145   PAPERMOTION                             45382000
        3"0020000044400000",3"0000540100200745","OINPUT00",             45383000
                 %    00  146   NOINPUT                                 45384000
        3"0020000045200000",3"0000540100200724","YNAMIC00",             45385000
                 %    00  149   DYNAMIC                                 45386000
        3"0020000045400000",3"0000640100201124","IFFERENT",             45387000
                 %    00  150   DIFFERENT                               45388000
        3"0020000045600000",3"0000500100200624","IRECT000",             45389000
                 %    00  151   DIRECT                                  45390000
        3"0020000046000000",3"0000500100200651","ETURN000",             45391000
                 %    00  152   RETURN                                  45392000
              0;                                                        45393000
         ITA := 0;  ITB := 1;                                           45394000
         DO                                                             45395000
         BEGIN                                                          45396000
              INFO[ITA,ITB-1].SCR := STACKHEAD[ITC := INFO[ITA,ITB]     45397000
                                      MOD 125];                         45398000
              STACKHEAD[ITC] := ITB & ITA SCRR;                         45399000
              IF (ITC:= INFO[ITA,ITB]) = 3"000700100201230" THEN        45400000
              BEGIN                                                     45401000
                   ITA := ITB := 1;                                     45402000
              END                                                       45403000
              ELSE                                                      45404000
              ITB := ITB + (ITC.KUNKCNT + 18) DIV 8;                    45405000
         END                                                            45406000
              UNTIL ITC = 0;                                            45407000
         NEXTINFO := ITB & ITA SCRR;                                    45408000
         FILL SPECIAL[*] WITH                                           45409000
              11, 11, 11, 11, 11,      % 0 - 4                          45410000
              11, 11, 11, 11, 11,      % 5 - 9                          45411000
              101,                     %   #                            45412000
              101,                     %   @                            45413000
              101,                     % Q-MARK                         45414000
              COLON,                   %   :                            45415000
              GTSIGN,                  %   >                            45416000
              101,                     %   }                            45417000
              PLUS,                    %   +                            45418000
              12, 12, 12, 12, 12,      % A - E                          45419000
              12, 12, 12, 12,          % F - I                          45420000
              PERIOD,                  %   .                            45421000
              LFTBRKT,                 %   [                            45422000
              101,                     %   &                            45423000
              LFTPAREN,                %   (                            45424000
              LTSIGN,                  %   <                            45425000
              101,                     %   ~                            45426000
              101,                     %   |                            45427000
              12, 12, 12, 12, 12,      % J - N                          45428000
              12, 12, 12, 12,          % O - R                          45429000
              DOLLARSIGN,              %   $                            45430000
              ASTERISK,                %   *                            45431000
              MINUS,                   %   -                            45432000
              RGTPAREN,                %   )                            45433000
              101,                     %   ;                            45434000
              101,                     %   {                            45435000
              101,                     % (SPACE)                        45436000
              SLASH,                   %   /                            45437000
              12, 12, 12, 12, 12,      % S - W                          45438000
              12, 12, 12,              % X - Z                          45439000
              COMMA,                   %   ,                            45440000
              PERCENT,                 %   %                            45441000
              101,                     %   !                            45442000
              EQUAL,                   %   =                            45443000
              RGTBRKT,                 %   ]                            45444000
              QUOTE ;                  %   "                            45445000
         FOR ITA := 0 STEP 1 UNTIL 63 DO                                45446000
              SPECIAL[ITA] := 0 & SPECIAL[ITA] CLASS;                   45447000
    FILL BCLASCII[*] WITH                                               45448000
      48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 35, 64, 63, 58, 62, 33,   45449000
      43, 65, 66, 67, 68, 69, 70, 71, 72, 73, 46, 91, 38, 40, 60, 95,   45450000
      92, 74, 75, 76, 77, 78, 79, 80, 81, 82, 36, 42, 45, 41, 59, 39,   45451000
      32, 47, 83, 84, 85, 86, 87, 88, 89, 90, 44, 37, 94, 61, 93, 34 ;  45452000
         FILL CASEARRAY[*] WITH                                         45453000
             % CASEARRAY PART FOR REQUESTS ..........                   45454000
         3"0001010101010101", 3"0131010300000000",                      45455000
              3"0000002100000007", 3"1400151516020001",                 45456000
              3"0024230000000026",3"0013002005102212",                  45457000
              3"0400000000000000", 3"0000000000000000",                 45458000
         3"0000000000300000", 0,                                        45459000
              3"0000170000000000", 0,0,0,0,0,0,                         45460000
              3"0000001127062500", 0,                                   45461000
             % CASEARRAY PART FOR MODEMS ..........                     45462000
              3"0001010101010101",3"0101010000000000",                  45463000
              0,3"0000000300000000",0,0,0,                              45464000
              3"0000000002000000",                                      45465000
              0, 0, 0, 0, 0, 0, 0,                                      45466000
              3"0000000000000400",                                      45467000
              0, 0, 0,                                                  45468000
              % CASEARRAY PART FOR TERMINALS ..........                 45469000
              3"0001011601010101", 3"0101150000000014",                 45470000
              3"0000000025000000", 0,                                   45471000
              3"0612002400002600",                                      45472000
              0,                                                        45473000
              3"0000000000000203",3"0000000011052704",                  45474000
              3"0007100017000000",                                      45475000
              0, 0, 0, 0, 0,                                            45476000
              3"0000000000210000", 3"0000000000220000",                 45477000
              3"0020132300000000", 0, 0,                                45478000
             % CASEARRAY PART FOR STATIONS ..........                   45479000
              3"0001012126030101", 3"0101000000000010",                 45480000
              3"0030000020000000", 0,                                   45481000
              3"0500001627000000", 3"1100170000003100",                 45482000
              0,                                                        45483000
              3"0000000025000000", 3"0013140600071202",                 45484000
              3"2300000000000000", 3"1500002400000000",                 45485000
              0, 0, 0, 0, 0,                                            45486000
              3"0000000004220000",                                      45487000
              0, 0,                                                     45488000
             % CASEARRAY PART FOR LINES ..........                      45489000
              3"0001010607010501", 3"0101010000000002",                 45490000
              0, 0, 0, 0, 0,                                            45491000
              3"0000000003000000", 0, 0,                                45492000
              3"1000000000000000",                                      45493000
              0, 0, 0,                                                  45494000
              3"0000000000000004",                                      45495000
              0,0,0,0,                                                  45496000
             % CASEARRAY PART FOR DCP ..........                        45497000
              3"0001010101010101", 3"0101010000000003",                 45498000
              3"0000000000020000",                                      45499000
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,                       45500000
              3"0000000400000000",                                      45501000
              0, 0, 0,                                                  45502000
             % CASEARRAY PART FOR FILES ........                        45503000
              3"0000010300000000", 3"0001000000000000",                 45504000
              3"0004000000000000", 0,                                   45505000
              3"0500000000000000", 0, 0, 0, 0, 0,                       45506000
              3"0000000600000000", 0, 0, 0, 0,                          45507000
              3"0200000000000000", 0, 0, 0,                             45508000
              3"7777777777777777";                                      45509000
         FILL ADCLTYPES[*] WITH                                         45510000
              3"377",                  % 1"11111111"                    45511000
              3"3777",                 % 1"11111111111",                45512000
              3"7777077",              % 1"111111111111000111111"       45513000
              3"77776777",             % 1"111111111111110111111111"    45514000
              3"377777777",            % 1"11111111111111111111111111"  45515000
              3"400000000",            % 1"100000000000000000000000000" 45516000
              3"1000000000",           % 1"1000000000000000000000000000"45517000
              3"2000000000",           % 1"1000000000000000000000000000045518000
              0 ;                                                       45519000
         FILL FF01 [*] WITH                                             45520000
              3"7760077700377401",               % 4"FF01FF01FF01"      45521000
              3"7760077700377401";               % 4"FFO1FFO1FFO1"      45522000
         FILL FF00 [*] WITH                                             45523000
              3"7760037700177400",               % 4"FF00FF00FF00"      45524000
              3"7760037700177400";               % 4"FF00FF00FF00"      45525000
         CODESIZE := 3"000000021263607";         %4"00000456787"        45526000
         FILL ADCHARSIZE[*] WITH                                        45527000
              3"0505050706070707",               % 4"55576777"          45528000
              3"0704070707070706",               % 4"74777776"          45529000
              3"0710060710060710",               % 4"7678678"           45530000
              3"0607100000000000";               % 4"67800000"          45531000
%                                                                       45532000
         ASCIICODE := 3"32" ;          % 1"11010"                       45533000
         SYNCAD8 := 3"444400000" ;     % 1"100100100100000000000000000" 45534000
         ADPARITY := 3"777776770" ;    % 1"111111111111111110111111000" 45535000
         FILL ADSET[*] WITH                                             45536000
              3"0421102305012426",     % 4"111213141516"                45537000
              3"0561403106415434",     % 4"1718191A1B1C"                45538000
              3"0721703703406012",     % 4"1D1E1F0E0C0A"                45539000
              3"0340601203406012",     % 4"0E0C0A0E0C0A"                45540000
              3"0340601200402007" ;    % 4"0E0C0A020407"                45541000
    END OF INITIALIZE;                                                  45542000
         TIME1:=TIME(1);                                                45543000
         NOHEADING:=TRUE;                                               45544000
         INITIALIZE;                                                    45545000
         STCASE := POINTER(CASEARRAY,6);                                45546000
         FCASE  := (DCPCASE := (LCASE :=(SCASE:=(TCASE:=(MCASE:=STCASE  45547000
                    +152)+ 152)+152)+152)+ 152)+ 152;                   45548000
         ACCUMSTART  := POINTER(ACCUM[1],6) + 7;                        45549000
         STRINGSTART := POINTER(ACCUM[2],8);                            45550000
         PLBUFF := POINTER(LBUFF,6);                                    45551000
         TLCR   := POINTER(TBUFF,6) + 72 ;                              45552000
         CLCR   := POINTER(CBUFF,6) + 72 ;                              45553000
         ERRMAX:=999;   % NDL ABORTED IF THIS IS EXCEEDED IN "FLAG".    45554000
         DESCRIPTIONTABLE := FCASE + 152;                               45555000
         SEQNUM := POINTER(SEQNA,6);  LASTERROR := SEQNUM + 8;          45556000
         REPLACE SEQNUM BY " " FOR 16;                                  45557000
         LISTOG := TRUE;                                                45558000
         REPLACE DESCRIPTIONTABLE BY "01902457683", 0 FOR 108, "@" ;    45559000
         FOCASE := DESCRIPTIONTABLE + 152;                              45560000
         REPLACE FOCASE BY "00000000", "00000102", "50340000" ;         45561000
         LASTUSED := 3;                                                 45562000
         IANT := 1;                                                     45563000
         NXTELBAT := 1;                                                 45564000
         READACARD;                                                     45565000
         NEXTREC := 31 ;               % LEAVES ROOM FOR SCRAMBLE       45566000
         DESCRIPTION;                                                   45567000
         IF ERRORCOUNT=0 THEN                                           45568000
         BEGIN                                                          45569000
              CREATENIF; LOCK(REQIM);                                   45570000
         END;                                                           45571000
         IF NEWTOG THEN LOCK(NEWTAPE);                                  45572000
BOMB:                                                                   45573000
         IF ERRORCOUNT NEQ 0 THEN                                       45574000
              BEGIN                                                     45575000
              SWITCH FORMAT PAN :=                                      45576000
                   ("***NDL COMPILER DETECTED ",I3," ERRORS***"),       45577000
                   (///"NUMBER OF COMPILE ERRORS DETECTED =",F4.0,      45578000
                    /"PROCESSOR TIME =",I5," SECONDS.",                 45579000
                    /"I/O TIME =",I5," SECONDS.");                      45580000
              FILE SPO 11(1,10);                                        45581000
              WRITE(SPO,PAN[0],ERRORCOUNT);                             45582000
              WRITE(LINE,PAN[1],ERRORCOUNT,TIME(2)/60,TIME(3)/60);      45583000
              BLANKLBUFF;                                               45584000
              REPLACE PLBUFF BY "LAST ERROR OCCURRED AT ",              45585000
                                LASTERROR FOR 8;                        45586000
              WRITELBUFFS;                                              45587000
              END;                                                      45588000
%                                                                       50000000
COMMENT#################################################################50001000
                   ASSEMBLER PHASE                                      50002000
#######################################################################;50003000
%                                                                       50004000
IF ERRORCOUNT = 0 THEN                                                  50005000
 BEGIN                                                                  50006000
%. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .50007000
%                                                                       50008000
%   THE DCP PROGRAM GENERATOR                                           50009000
%                                                                       50010000
%   THIS PROGRAM IS BLOCKED AS                                          50011000
%                                                                       50012000
%     BEGIN                                                             50013000
%        <DECLARATIONS>                                                 50014000
%         PROGRAM:                                                      50015000
%         BEGIN                                                         50016000
%            <DECLARATIONS>                                             50017000
%            <STATEMENTS>                                               50018000
%         END;                                                          50019000
%        <WRAPUP>                                                       50020000
%     END.                                                              50021000
%                                                                       50022000
%   THE DECLARATIONS IN THE OUTER BLOCK INCLUDE                         50023000
%   1.  SIMPLE VARIABLES FOR DCP REGISTER NAMES, INITIALIZED TO CONTAIN 50024000
%       THE APPROPRIATE DCP ADDRESSES.                                  50025000
%   2.  TYPE PROCEDURES YIELDING VARIOUS MEMORY ADDRESSES.              50026000
%   3.  DCP OPCODE-NAMED PROCEDURES WITH FORMAL PARAMETERS FOR THE      50027000
%       OPCODES VARIANT FIELDS AND OPERAND ADDRESS FIELDS. THESE        50028000
%       PROCEDURES CONCATENATE THEIR PARAMETERS INTO DCP SYLLABLES AND  50029000
%       EMIT THEM INTO A CODE FILE ON DISK.                             50030000
%                                                                       50031000
%   THESE ALLOW STATEMENTS IN THE INNER BLOCK (LABELED PROGRAM) TO LOOK 50032000
%   LIKE STATEMENTS IN SOME FREE-FIELD DCP ASSEMBLER.                   50033000
%                                                                       50034000
%   EACH OPCODE STATEMENT INCREMENTS BY 1 A PROGRAM ADDRESS COUNTER     50035000
%   CALLED SELF. THE REAL VARIABLE SELF, THEN ALWAYS CONTAINS THE LOCAL 50036000
%   MEMORY OR IBA-RELATIVE MAIN MEMORY ADDRESS OF THE NEXT SYLLABLE TO  50037000
%   BE EMITTED. DCP PROGRAM LABELS CAN THEN BE SIMPLY REAL VARIABLES    50038000
%   TO WHICH THE VALUE OF SELF IS ASSIGNED WHERE THE LABEL IS TO BE     50039000
%   PLACED. (SEE PROCEDURE LABL). TO ALLOW FORWARD REFERENCES TO LABELS,50040000
%   E.G., A BRANCH FORWARD TO A LABELED PROGRAM STEP NOT YET ENCOUNTERED50041000
%   THE INNER BLOCK LABELED PROGRAM IS ENTERED TWICE, UNDER CONTROL OF A50042000
%   BOOLEAN, SECONDPASS, AND LOGIC IN WRAPUP. IN THE FIRSTPASS, THAT IS,50043000
%   THE FIRST TIME THE PROGRAM BLOCK IS EXECUTED, THE EMITTING OF CODE  50044000
%   SYLLABLES, ETC., IS SUPPRESSED; ONLY SELF IS COUNTED UP AND LABEL   50045000
%   VARIABLES ARE ASSIGNED. SO, AT THE BEGINNING OF THE SECONDPASS, THE 50046000
%   LOCATIONS OF ALL LABELS ARE KNOWN. SO THIS PROGRAM GENERATES CODE IN50047000
%   A WAY SIMILAR TO A TWO-PASS ASSEMBLER.                              50048000
%                                                                       50049000
    DEFINE                                                              50050000
         SECONDPASS                  = VOIDTTOG#,                       50051000
         WARNINGS                    =  COUNT#,                         50052000
         SYLLABLES                   =  RCOUNT#,                        50053000
         CODESYLLABLES               =  ITA#,                           50054000
         AREAS                       =  ITB#,                           50055000
         RECORDCT                    =  ITC#,                           50056000
         I                           =  NXTELBAT#,                      50057000
         J                           =  CONTEXT#,                       50058000
         K                           =  TYPEDCP#,                       50059000
         SELF                        =  GTA#;                           50060000
    DEFINE                                                              50061000
         ERRORS       =  ERRORCOUNT#,                                   50062000
         LINEMAX      =  ENFO[DCPLINK,DMXA]#,                           50063000
         LINEMIN      =  ENFO[DCPLINK,DMNA]#,                           50064000
         TERMINALMAX  =  (NRT DIV 2)#,                                  50065000
         LOCALWORDS   =  ENFO[DCPLINK,DMEM]#,                           50066000
         STATIONMAX   =  ENFO[DCPLINK,3].[15:16]#;                      50067000
%                                                                       50068000
% * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 50069000
%                                                                       50070000
%   NUMBER BASE, CHARACTER CODE CONVERSIONS,                            50071000
%   WHERE BCL HERE REALLY MEANS B5500 INTERNAL REPRESENTATION OF        50072000
%   BCL BYTES                                                           50073000
%                                                                       50074000
    REAL                                                                50075000
    PROCEDURE OCTL(N);       % YIELDING THE BCL REPRESENTATION OF       50076000
        VALUE N;             % N.[23:24] SEGMENTED INTO                 50077000
        REAL N;              % 3-BIT DIGITS (OCTADES)                   50078000
    OCTL:=N.[2:3]    & N[ 8: 5:3] & N[14: 8:3] & N[20:11:3] &           50079000
          N[26:14:3] & N[32:17:3] & N[38:20:3] & N[44:23:3];            50080000
%                                                                       50081000
    REAL                                                                50082000
    PROCEDURE HEX(N);        % YIELDING THE BCL REPRESENTATION OF       50083000
        VALUE N;             % N.[23:24] SEGMENTED INTO                 50084000
        REAL N;              % 4-BIT DIGITS ("A"-"F" FOR DIGITS 10-15)  50085000
    HEX:=REAL(BOOLEAN(       % W.J.PRICE                                50086000
         (N:=N.[3:4] & N[ 9: 7:4] & N[15:11:4] & N[21:15:4] &           50087000
          N[27:19:4] & N[33:23:4])+ "666666")                           50088000
          AND BOOLEAN("++++++")).[35:32]|7+N;                           50089000
%                                                                       50090000
    DEFINE                                                              50091000
         TIMES         = |#,                                            50092000
         POWER         = *#;                                            50093000
%                                                                       50094000
%                                                                       50095000
% * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 50096000
                             %                                          50097000
                             % FOR DEBUG LISTING                        50098000
                             %                                          50099000
    DEFINE PRINTER = LINE#;                                             50100000
    DEFINE                                                              50101000
         DBUG                         =  ADCHARSIZE#,                   50102000
         LINEARAY                     =  LBUFF#;                        50103000
                             % BEING WRITTEN ON THE PRINTER.            50104000
    DEFINE                                                              50105000
         LINEINX                     =  ITD#,                           50106000
         LISTING                     =  LISTOG#,                        50107000
         PRINTED                     =  CODETOG#,                       50108000
         SOURCELIST                  =  SEQTOG#;                        50109000
    FORMAT    EMITABCFORM(A4,X1,A2,X1,A1,2(X1,A3)),                     50110000
              EMITLABFORM(A4,X1,A2,2(X1,A1),A5,A1),                     50111000
              EMITHAFFORM(X11,A6),                                      50112000
              LABELFORM  (A1,A5,A1),                                    50113000
              CHECKFORM  ("CHECK(",I2,")"),                             50114000
              STARSFORM  (20("******")),                                50115000
              TAGSFORM   ("TAGS = ",A2);                                50116000
%                                                                       50117000
    REAL PROCEDURE SIDE(HALF);   VALUE HALF; REAL HALF;                 50118000
         SIDE:=IF BOOLEAN(HALF) THEN "R" ELSE "L";                      50119000
%                                                                       50120000
    REAL PROCEDURE MEM(M);                                              50121000
         VALUE M;                                                       50122000
         REAL M;                                                        50123000
         MEM:=IF BOOLEAN(M) THEN "L" ELSE "M";                          50124000
%                                                                       50125000
    PROCEDURE WRITELINE;                                                50126000
        IF PRINTED THEN                                                 50127000
        BEGIN                                                           50128000
            PRINTED:=FALSE;                                             50129000
             WRITE(PRINTER[DBL],15,LINEARAY[*])                         50130000
        END;                                                            50131000
%                                                                       50132000
    PROCEDURE PRINT;                                                    50133000
        IF LISTING THEN                                                 50134000
        BEGIN                                                           50135000
            IF PRINTED THEN ELSE                                        50136000
            BEGIN                                                       50137000
                PRINTED:=TRUE;                                          50138000
                 WRITE(LINEARAY[*],LABELFORM,                           50139000
                    MEM(SELF.[15:1]),                                   50140000
                     HEX(SELF.[14:14]),                                 50141000
                     IF SOURCELIST THEN IF BOOLEAN(SELF)                50142000
                          THEN "R" ELSE "L" ELSE " ");                  50143000
                 LINEINX:=IF SOURCELIST THEN 10 ELSE                    50144000
                          IF BOOLEAN(SELF) THEN 28 ELSE 10;             50145000
            END;                                                        50146000
              REPLACE POINTER(LINEARAY)+LINEINX BY POINTER(DBUG) FOR 17;50147000
             IF SOURCELIST THEN WRITELINE ELSE                          50148000
            IF LINEINX:=LINEINX+18+SELF.[0:1]>103 THEN WRITELINE        50149000
        END;                                                            50150000
%                                                                       50151000
    PROCEDURE WRITESTARS;                                               50152000
        IF LISTING THEN                                                 50153000
        BEGIN                                                           50154000
            WRITELINE;                                                  50155000
            WRITE(PRINTER);                                             50156000
            WRITE(PRINTER[DBL],STARSFORM);                              50157000
            WRITE(PRINTER);                                             50158000
        END;                                                            50159000
%                                                                       50160000
    PROCEDURE SKIPPAGE;                                                 50161000
        IF LISTING THEN                                                 50162000
        BEGIN                                                           50163000
            WRITELINE;                                                  50164000
            WRITE(PRINTER[PAGE])                                        50165000
        END;                                                            50166000
%                                                                       50167000
    POINTER POINTERLINE;                                                50168000
%                                                                       50169000
    DEFINE    HEADING(HEADING1)=                                        50170000
         IF LISTING AND SECONDPASS THEN                                 50171000
            BEGIN                                                       50172000
                WRITELINE;                                              50173000
             SPACELISTING(2);                                           50174000
                REPLACE POINTERLINE BY " " FOR 120;                     50175000
                REPLACE POINTERLINE+7 BY HEADING1;                      50176000
                PRINTED:=TRUE;                                          50177000
                WRITELINE;                                              50178000
             SPACELISTING(1);                                           50179000
            END#;                                                       50180000
%                                                                       50181000
    PROCEDURE SPACELISTING(LINES);                                      50182000
         VALUE LINES;                                                   50183000
         REAL LINES;                                                    50184000
%                                                                       50185000
         DO WRITE(PRINTER) UNTIL (LINES:=LINES-1) LEQ 0;                50186000
%                                                                       50187000
%                                                                       50188000
% * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 50189000
%                            ERRORS DISCOVERED                          50190000
%                                                                       50191000
%                            SYNTAX ERRORS WILL BE CAUGHT FIRST BY      50192000
%                            ALGOL COMPILER. SOME LOGICAL ERRORS CAN BE 50193000
%                            CAUGHT BY THE VARIOUS EMITTING PROCEDURES  50194000
                             % AND COUNTED                              50195000
                             % AND FLAGGED IN THE DEBUG LISTING         50196000
    SWITCH FORMAT ERRFORM:=                                             50197000
        ("ERROR: VALUE",X18,50("*")),                                   50198000
        ("ERROR: LABEL",X18,50("*")),                                   50199000
        ("ERROR: A-FIELD REGISTER",X7,50("*")),                         50200000
        ("ERROR: VARIABLE",X15,50("*")),                                50201000
        ("ERROR: HALF-WORD VARIABLE",X5,50("*")),                       50202000
        ("ERROR: MA REGISTER",X12,50("*")),                             50203000
        ("ERROR: PARAMETER TO ACON",X6,50("*")),                        50204000
        ("ERROR: PARAMETER TO COMB",X6,50("*")),                        50205000
        ("ERROR: TAGS",X19,50("*"));                                    50206000
%                                                                       50207000
    PROCEDURE ERROR(N);                                                 50208000
         VALUE N;   REAL N;                                             50209000
    IF SECONDPASS THEN                                                  50210000
    BEGIN                                                               50211000
       ERRORS:=ERRORS+1;                                                50212000
       WRITELINE;                                                       50213000
       WRITE(PRINTER[DBL],ERRFORM[N])                                   50214000
    END;                                                                50215000
%                                                                       50216000
% * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 50217000
%   DCP OPERANDS                                                        50218000
%                                                                       50219000
%   GENERALLY, ADDRESSABLE DCP OPERANDS ARE REPRESENTED HERE BY ALGOL   50220000
%   SIMPLE VARIABLES OR TYPE PROCEDURES WHICH YIELD AS VALUES THE       50221000
%   ADDRESSES OF THE THINGS THEY NAME. IN ORDER TO DISTINGUISH AMONG THE50222000
%   VARIOUS TYPES THERE ARE, ALL SUCH CONVENTIONAL VALUES HAVE A SIMILAR50223000
%   LAYOUT WITH A TYPE FIELD OF DESCRIPTOR BITS:                        50224000
%                                                                       50225000
%   BIT 38=0: [37:38] CONTAINS A DCP PROGRAM LITERAL                    50226000
%       38=1:                                                           50227000
%             37=0:                                                     50228000
%                   36=0: [15:16] = DCP LABEL, I.E., LM OR MM ADDRESS   50229000
%                   36=1: FOR LABEL INVOLVED IN AN ERROR                50230000
%                                                                       50231000
%             37=1: [7:8] = B- OR C-FIELD ADDRESS OF AN ADDRESSABLE     50232000
%                   BYTE OR HALF-WORD                                   50233000
%                                                                       50234000
%                   36=1: [10:3] = VALID A-FIELD ADDRESS                50235000
%                   35=1: VARIABLE IS USABLE AS A HALF-WORD             50236000
%                   34=1: SPECIAL NAME                                  50237000
%                                                                       50238000
%                                                                       50239000
    DEFINE    TYPE = [46:13]#,                                          50240000
              TYPELABL = 16#,                                           50241000
              TYPEBYTE = 24#,                                           50242000
              TYPEAFLD = 28#,                                           50243000
              TYPEHALF = 26#,                                           50244000
              TYPEBOTH = 30#; % THAT IS, BOTH A-FIELD AND HALF          50245000
    DEFINE                                                              50246000
         NO                          =  GTB#,                           50247000
         AA                          =  GTC#,                           50248000
         AC                          =  GTD#,                           50249000
         AI                          =  GTE#,                           50250000
         D                           =  CODESIZE#,                      50251000
         Y                           =  LBLCNT#,                        50252000
         X                           =  BGNCNT#,                        50253000
         MA                          =  IFCNT#,                         50254000
         MA0                         =  TLBLCNT#,                       50255000
         MA1                         =  CODECNT#,                       50256000
         MA2                         =  LASTELBAT#,                     50257000
         IA                          =  NUM#,                           50258000
         L                           =  GETW#,                          50259000
         R                           =  SPEC#;                          50260000
    REAL                                                                50261000
         IND,CF,IA1,IA0,SAME;                                           50262000
       DEFINE W=1#,                                                     50263000
              IBA = SM(0,L)#;                                           50264000
%                                                                       50265000
    REAL                     % CHECKS PARAMETER N TO BE A NON-NEGATIVE  50266000
    PROCEDURE VALU(N,MAX);   % INTEGRAL DCP "LITERAL" LESS THAN OR EQUAL50267000
        VALUE N,MAX;         % TO MAX, SOME POWER OF TWO LESS ONE.      50268000
        INTEGER N,MAX;                                                  50269000
        IF (N:=N) NEQ                                                   50270000
           (VALU:=REAL(BOOLEAN(N) AND BOOLEAN(MAX))) AND                50271000
           N NEQ NO THEN                                                50272000
           ERROR(0);                                                    50273000
%                                                                       50274000
    REAL                                                                50275000
    PROCEDURE MM(WORD,SYLL); % YIELDS IBA-RELATIVE MAIN MEMORY LABEL    50276000
        VALUE WORD,SYLL;     % ADDRESS                                  50277000
        REAL WORD,SYLL;                                                 50278000
        MM:=0 & TYPELABL TYPE &                                         50279000
            VALU(WORD,16383)[14:14] &                                   50280000
            (IF SYLL=L THEN 0 ELSE IF SYLL=R THEN 1 ELSE VALU(SYLL,1))  50281000
                [0:1];                                                  50282000
%                                                                       50283000
    REAL                                                                50284000
    PROCEDURE LM(WORD,SYLL); % YIELDS LOCAL MEMORY LABEL ADDRESS        50285000
        VALUE WORD,SYLL;     % A BIT DIFFERENT THAN MM                  50286000
        REAL WORD,SYLL;                                                 50287000
        LM:=MM(WORD,SYLL)&1[15:1];                                      50288000
%                                                                       50289000
%   NOTE THE GENERAL FORM OF DCP LABELS:                                50290000
%       TYPELABL TYPE  (DURING GENERATION)                              50291000
%     & MEMORY   [15:1]                                                 50292000
%     & WORD     [14:14]                                                50293000
%     & SYLLABLE [0:1]                                                  50294000
%                                                                       50295000
    REAL                                                                50296000
    PROCEDURE REGISTER(T,AFLD,KIND,COL,ROW);                            50297000
        VALUE T,AFLD,KIND,COL,ROW;                                      50298000
        REAL T,AFLD,KIND,COL,ROW;                                       50299000
                             %                                          50300000
                             % CAN CONSTRUCT ANY VALID A-FIELD,         50301000
                             % B- OR C-FIELD ADDRESS AS WELL AS SOME    50302000
                             % INVALID ONES                             50303000
        REGISTER:=0&T TYPE                                              50304000
            &AFLD[10:3]                                                 50305000
            &KIND[7:2]                                                  50306000
            &COL[5:3]                                                   50307000
            &ROW[2:3];                                                  50308000
%                                                                       50309000
    REAL                     % YIELDS SCRATCH MEMORY ADDRESS OF         50310000
    PROCEDURE SM(WORD,FIELD);% WORD AND                                 50311000
        VALUE WORD,FIELD;    % BYTE OR                                  50312000
        REAL WORD,FIELD;     % LEFT OR RIGHT HALF                       50313000
                             %                                          50314000
        SM:=REGISTER(TYPEHALF,0,2,VALU(WORD,7),                         50315000
                     IF FIELD=L THEN 1 ELSE IF FIELD=R THEN 4 ELSE      50316000
                     VALU(FIELD,7));                                    50317000
%                                                                       50318000
    REAL                     % YIELDS THE SM-LIKE ADDRESS OF            50319000
    PROCEDURE WR(BYTE);      % A BYTE OF THE WORD REGISTER              50320000
        VALUE BYTE;                                                     50321000
        REAL BYTE;                                                      50322000
        WR:=REGISTER(TYPEBYTE,0,3,7,VALU(BYTE,7));                      50323000
%                                                                       50324000
    REAL                     % YIELDS THE REGISTER COLUMN ADDRESS OF    50325000
    PROCEDURE WRL(BYTES);    % THE BYTESSELECTED FROM THE LEFT HALF OF  50326000
        VALUE BYTES;         % THE WORD REGISTER                        50327000
        REAL BYTES;                                                     50328000
        WRL:=REGISTER(TYPEHALF,0,0,5,VALU(BYTES,7));                    50329000
%                                                                       50330000
    REAL                     % YIELDS THE REGISTER COLUMN ADDRESS OF    50331000
    PROCEDURE WRR(BYTES);    % THE BYTES SELECTED FROM THE RIGHT HALF OF50332000
        VALUE BYTES;         % THE WORD REGISTER                        50333000
        REAL BYTES;                                                     50334000
        WRR:=REGISTER(TYPEHALF,0,0,6,VALU(BYTES,7));                    50335000
%                                                                       50336000
% * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 50337000
%   TYPE VERIFYING PROCEDURES                                           50338000
%                                                                       50339000
    REAL                     % VERIFIES THAT P IS OF THE CORRECT TYP    50340000
    PROCEDURE IFTYPE(P,TYP,ERR);                                        50341000
        VALUE P,TYP,ERR;                                                50342000
        REAL P,TYP,ERR;                                                 50343000
                             %                                          50344000
        IF P.[33:18]!0 OR                                               50345000
           TYP NEQ REAL(BOOLEAN(P.TYPE) AND BOOLEAN(TYP)) THEN          50346000
           ERROR(ERR)                                                   50347000
        ELSE                                                            50348000
           IFTYPE:=P.[15:16];                                           50349000
%                                                                       50350000
    REAL                                                                50351000
    PROCEDURE LAB(L);                                                   50352000
         VALUE L;                                                       50353000
        REAL L;                                                         50354000
        IF SECONDPASS THEN                                              50355000
             LAB:=IFTYPE(L,TYPELABL,1)                                  50356000
        ELSE                                                            50357000
              LAB:=0;                                                   50358000
%                                                                       50359000
    REAL                                                                50360000
    PROCEDURE AFLD(BYT);                                                50361000
        VALUE BYT;                                                      50362000
        REAL BYT;                                                       50363000
        AFLD:=IFTYPE(BYT,TYPEAFLD,2).[10:3];                            50364000
%                                                                       50365000
    REAL                                                                50366000
    PROCEDURE BYTE(BYT);                                                50367000
        VALUE BYT;                                                      50368000
        REAL BYT;                                                       50369000
        BYTE:=IFTYPE(BYT,TYPEBYTE,3).[7:8];                             50370000
%                                                                       50371000
    REAL                                                                50372000
    PROCEDURE HALF(BYT);                                                50373000
        VALUE BYT;                                                      50374000
        REAL BYT;                                                       50375000
        HALF:=IFTYPE(BYT,TYPEHALF,4).[7:8];                             50376000
%                                                                       50377000
    REAL                                                                50378000
    PROCEDURE COL(BYT);                                                 50379000
        VALUE BYT;                                                      50380000
        REAL BYT;                                                       50381000
        COL:=REAL(BOOLEAN(BYT:=HALF(BYT)) AND NOT                       50382000
                  BOOLEAN(IF BOOLEAN(BYT.[7:1]) THEN 3 ELSE 7));        50383000
%                                                                       50384000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50385000
%                                                                       50386000
%   PROGNOSIS OF RUN-TIME SETTINGS OF COMPARISON FLIP-FLOPS             50387000
%                                                                       50388000
    BOOLEAN ARRAY MAYBECF[0:1];                                         50389000
%                                                                       50390000
    DEFINE                                                              50391000
         CLEARCF(CLEARCF1) =                                            50392000
         MAYBECF[CLEARCF1]:=FALSE#,                                     50393000
%                                                                       50394000
         SETCF(SETCF1) =                                                50395000
         MAYBECF[SETCF1]:=TRUE#;                                        50396000
%                                                                       50397000
    PROCEDURE BRANCH(IPH);                                              50398000
         VALUE IPH;                                                     50399000
         REAL IPH;                                                      50400000
%                                                                       50401000
         CASE IPH.[2:3] OF                                              50402000
%                                                                       50403000
         BEGIN                                                          50404000
%                                                                       50405000
         ;                                                              50406000
         ;                                                              50407000
         MAYBECF[0]:=FALSE;                                             50408000
         IF NOT MAYBECF[1] THEN MAYBECF[0]:=FALSE;                      50409000
         MAYBECF[1]:=FALSE;                                             50410000
         IF NOT MAYBECF[0] THEN MAYBECF[1]:=FALSE;                      50411000
         ;                                                              50412000
         MAYBECF[0]:=MAYBECF[1]:=FALSE;                                 50413000
%                                                                       50414000
         END;                                                           50415000
%                                                                       50416000
    PROCEDURE BEWARECF0;                                                50417000
%                                                                       50418000
         IF MAYBECF[0] THEN                                             50419000
         BEGIN                                                          50420000
         WARNINGS:=WARNINGS+1;                                          50421000
         HEADING("******  WARNING: BORROW/CARRY MAY BE SET  ******");   50422000
         END;                                                           50423000
%                                                                       50424000
%                                                                       50425000
% * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 50426000
%                                                                       50427000
%   CODE FILE EMIT LOGIC,                                               50428000
%   WHERE THE SYLLABLES OF PROGRAM ARE WRITTEN TO A CODEFILE,           50429000
%   WITH OR WITHOUT TAGS.                                               50430000
%                                                                       50431000
 FILE OUT CODE DISK SERIAL [20:300]"CODE"/"DCP"(1,60,1020,SAVE 60);     50432000
%                                                                       50433000
    DEFINE                                                              50434000
         CODES                        =  SPECIAL#;                      50435000
%                                                                       50436000
%   WHERE A CODE FILE RECORD IS ASSEMBLED                               50437000
%                                                                       50438000
    DEFINE                                                              50439000
%       SOME CODE-FILEDESCRIPTIVE VALUES:                               50440000
%                                                                       50441000
        FRAMESIZE            = 6#,                                      50442000
%                                                                       50443000
%       8 IF THE CODE FILE IS TO BE READ BY THE MULTIPLEXOR WITH TAGS   50444000
%         FROM DISK, CARDS, OR 9-CHANNEL TAPE.                          50445000
%       6 OTHERWISE, AS FROM 7-CHANNEL TAPE OR WITHOUT TAGS             50446000
%                                                                       50447000
%       FRAMESPERWORD        = 8#,                                      50448000
%                            = 2-FRAMESIZE#,                            50449000
%                                                                       50450000
        FRAMESPERHALF        = 4#,                                      50451000
%                            = FRAMESPERWORD/2                          50452000
%                                                                       50453000
        FRAMESPERRECORD      = 480#,                                    50454000
%                            = 60|FRAMESPERWORD#,                       50455000
%                                                                       50456000
        TAGS                 = CODES[61]#;                              50457000
%       THE TAGS TO BE USED WHILE EMITTING                              50458000
%                                                                       50459000
    DEFINE                                                              50460000
         CODEINX                     =  ITE#;                           50461000
%                                                                       50462000
%   BYTE INDEX INTO CODES FOR THE PLACE TO PUT THE NEXT HALF-WORD OR    50463000
%   TAG BYTES.                                                          50464000
%                                                                       50465000
    PROCEDURE USETAGS(T);    % HOUSEKEEPING TAGS FOR THE                50466000
        VALUE T;             % EMITS TO FOLLOW                          50467000
        REAL T;              %                                          50468000
                             %                                          50469000
        IF SECONDPASS THEN                                              50470000
        BEGIN                                                           50471000
            WRITELINE;                                                  50472000
            IF T NEQ NO THEN T:=VALU(T,7);                              50473000
            IF (T=NO EQV TAGS NEQ NO) AND CODEINX NEQ 0 THEN ERROR(8);  50474000
                             % ERROR FOR SWITCHING WITH/WITHOUT TAGS IN 50475000
                             % THE MIDDLE OF A SEGMENT                  50476000
            TAGS:=IF T=NO THEN NO ELSE                                  50477000
            IF FRAMESIZE=8 THEN 0&T[15:8] ELSE 0&T[11:6];               50478000
            IF LISTING THEN WRITE(PRINTER[DBL],TAGSFORM,                50479000
                IF T=NO THEN "NO" ELSE T&" "[11:6])                     50480000
        END;                                                            50481000
%                                                                       50482000
    PROCEDURE EMIT(HALF);                                               50483000
        VALUE HALF;                                                     50484000
        REAL HALF;                                                      50485000
%                                                                       50486000
%   PUTS THE HALF WORD INTO CODES (WITH TAGS IF APPROPRIATE) AND IF     50487000
%   CODES BECOMES FULL, THEN WRITES A RECORD OF THE CODE FILE.          50488000
%                                                                       50489000
    BEGIN                                                               50490000
        PROCEDURE MOVE(BYTES,WHAT);                                     50491000
            VALUE BYTES,WHAT;                                           50492000
            REAL BYTES,WHAT;                                            50493000
        BEGIN                                                           50494000
            CODES[60]:=WHAT;                                            50495000
            REPLACE POINTER(CODES,FRAMESIZE)+CODEINX BY                 50496000
                    POINTER(CODES[61],FRAMESIZE)-BYTES FOR BYTES;       50497000
            IF (CODEINX:=CODEINX+BYTES)}FRAMESPERRECORD THEN            50498000
            BEGIN                                                       50499000
                RECORDCT:=RECORDCT+1;                                   50500000
                WRITE(CODE,60,CODES[*]);                                50501000
                REPLACE POINTER(CODES) BY POINTER(CODES[60])            50502000
                FOR 1 WORDS;                                            50503000
                CODEINX:=CODEINX-FRAMESPERRECORD                        50504000
            END                                                         50505000
        END;                                                            50506000
        SYLLABLES:=SYLLABLES+1;                                         50507000
        MOVE(FRAMESPERHALF,HALF);                                       50508000
        SELF:=SELF+1                                                    50509000
    END;                                                                50510000
%                                                                       50511000
    DEFINE                                                              50512000
         OPCODES                      =  ELBAT#;                        50513000
%                                                                       50514000
    REAL                                                                50515000
    PROCEDURE MNEM(OP,AFLD); % YIELDING THE RIGHT OPCODE                50516000
        VALUE OP,AFLD;                                                  50517000
        REAL OP,AFLD;                                                   50518000
        MNEM:=IF OP:=OPCODES[OP]<0 THEN OPCODES[AFLD-OP] ELSE OP;       50519000
                             %                                          50520000
                             % EMITTERS FOR THE THREE DIFFERENT         50521000
                             % SYLLABLE FORMATS                         50522000
%                                                                       50523000
    PROCEDURE EMITHALF(SYLL);                                           50524000
        VALUE SYLL;                                                     50525000
        REAL SYLL;                                                      50526000
        IF SECONDPASS THEN                                              50527000
        BEGIN                                                           50528000
            WRITE(DBUG[*],EMITHAFFORM,HEX(SYLL));                       50529000
            PRINT;                                                      50530000
            EMIT(SYLL)                                                  50531000
        END                                                             50532000
        ELSE                                                            50533000
            SELF:=SELF+1;                                               50534000
%                                                                       50535000
    PROCEDURE WRITERECORD;                                              50536000
    BEGIN                                                               50537000
        WRITELINE;                                                      50538000
              IF SECONDPASS THEN                                        50539000
              IF CODEINX>CODEINX:=0 THEN                                50540000
              BEGIN                                                     50541000
              WRITE(CODE,60,CODES[*]);                                  50542000
              RECORDCT:=RECORDCT+1;                                     50543000
              END;                                                      50544000
    END;                                                                50545000
%                                                                       50546000
    PROCEDURE EMITLABL(OP,A,L);                                         50547000
        VALUE OP,A,L;                                                   50548000
        REAL OP,A,L;                                                    50549000
        IF SECONDPASS THEN                                              50550000
        BEGIN                                                           50551000
            CODESYLLABLES:=CODESYLLABLES+1;                             50552000
            WRITE(DBUG[*],EMITLABFORM,MNEM(OP,A),                       50553000
                HEX(OP),A,MEM(L.[15:1]),HEX(L.[14:14]),                 50554000
                SIDE(L.[0:1]));                                         50555000
            PRINT;                                                      50556000
            EMIT(L&A[18:3]&OP[23:5])                                    50557000
        END                                                             50558000
        ELSE                                                            50559000
            SELF:=SELF+1;                                               50560000
%                                                                       50561000
    PROCEDURE EMITLOCL(OP,A,L);                                         50562000
        VALUE OP,A,L;                                                   50563000
        REAL OP,A,L;                                                    50564000
        IF SECONDPASS THEN                                              50565000
        BEGIN                                                           50566000
            CODESYLLABLES:=CODESYLLABLES+1;                             50567000
            L:=L.[14:14];                                               50568000
            WRITE(DBUG[*],EMITLABFORM,MNEM(OP,A),                       50569000
                HEX(OP),A," ",HEX(L)," ");                              50570000
            PRINT;                                                      50571000
            EMIT(L&A[18:3]&OP[23:5])                                    50572000
        END                                                             50573000
        ELSE                                                            50574000
            SELF:=SELF+1;                                               50575000
%                                                                       50576000
    PROCEDURE EMITABC(OP,A,B,C);                                        50577000
        VALUE OP,A,B,C;                                                 50578000
        REAL OP,A,B,C;                                                  50579000
        IF SECONDPASS THEN                                              50580000
        BEGIN                                                           50581000
            CODESYLLABLES:=CODESYLLABLES+1;                             50582000
            WRITE(DBUG[*],EMITABCFORM,MNEM(OP,A),                       50583000
                HEX(OP),A,OCTL(B),OCTL(C));                             50584000
            PRINT;                                                      50585000
            EMIT(C&B[15:8]&A[18:3]&OP[23:5])                            50586000
        END                                                             50587000
        ELSE                                                            50588000
            SELF:=SELF+1;                                               50589000
%                                                                       50590000
     DEFINE                                                             50591000
         ASET =                                                         50592000
              SETCF(0);                                                 50593000
              SETCF(1)#,                                                50594000
%                                                                       50595000
         ASET2 =                                                        50596000
              SETCF(0);                                                 50597000
              SETCF(1)#,                                                50598000
%                                                                       50599000
         LSET =                                                         50600000
              CLEARCF(0);                                               50601000
              SETCF(1)#,                                                50602000
%                                                                       50603000
         LSET2 =                                                        50604000
              CLEARCF(0);                                               50605000
              SETCF(1)#;                                                50606000
%                                                                       50607000
%                                                                       50608000
%                                                                       50609000
%                                                                       50610000
%   THE DCP OPCODES                                                     50611000
%                                                                       50612000
    DEFINE IDLE =                                                       50613000
        EMITLABL(0,0,0)#;                                               50614000
%                                                                       50615000
    PROCEDURE BKP            % STOP/BRANCH ON BREAKPOINT                50616000
         (A,L); VALUE A,L; REAL A,L;                                    50617000
        BEGIN                                                           50618000
        EMITLABL( 1, VALU(A,7),              LAB(L));                   50619000
        IF A EQL 0 THEN BRANCH(7);                                      50620000
        END;                                                            50621000
%                                                                       50622000
    PROCEDURE AWI            % ADAPTOR WRITE                            50623000
        (A,B,C); VALUE A,B,C; REAL A,B,C;                               50624000
        BEGIN                                                           50625000
        EMITABC ( 2, VALU(A,3), VALU(B,255), VALU(C,255));              50626000
        END;                                                            50627000
%                                                                       50628000
    PROCEDURE AWRR           % ADAPTOR INTERROGATE                      50629000
        (A,B,C); VALUE A,B,C; REAL A,B,C;                               50630000
        BEGIN                                                           50631000
        EMITABC ( 2, 4+                                                 50632000
                     VALU(A,3), VALU(B,255), VALU(C,255));              50633000
        END;                                                            50634000
%                                                                       50635000
              DEFINE                             % SET CLUSTER MASK     50636000
      MSKW =  EMITLABL(3,0,0)#,                  %                      50637000
                                                 %                      50638000
      MSKR =  EMITLABL(3,1,0)#;                  % READ CLUSTER MASK    50639000
                                                 %                      50640000
                                                 %                      50641000
    PROCEDURE SHFT(N,OPTS,MA);                   % SHIFT MA RIGHT       50642000
        VALUE N,OPTS,MA; REAL N,OPTS,MA;                                50643000
      BEGIN                                                             50644000
        IF SECONDPASS THEN                                              50645000
        BEGIN                                                           50646000
            IF (MA:=HALF(MA)).[7:5]!3 THEN ERROR(5);                    50647000
            N:=IF N=IND THEN N.[7:8] ELSE VALU(N,7);                    50648000
            EMITABC (3,4,N,                                             50649000
                    0&VALU(OPTS,7)[5:3]&MA[2:3])                        50650000
        END                                                             50651000
        ELSE SELF:=SELF+1;                                              50652000
        CLEARCF(0);                                                     50653000
        CLEARCF(1);                                                     50654000
      END;                                                              50655000
%                                                                       50656000
    DEFINE    HEYU=          %  SET DCP INTERRUPT                       50657000
        EMITABC ( 3, 5, 4, 0)#;                                         50658000
%                                                                       50659000
    PROCEDURE ARWN           % ADAPTOR READ WHEN ATTENTION NEEDED       50660000
         (L); VALUE L; REAL L;                                          50661000
        BEGIN                                                           50662000
        EMITLABL( 4, 0,                      LAB(L));                   50663000
        END;                                                            50664000
%                                                                       50665000
    PROCEDURE ARIN           % ADAPTOR READ IF ATTENTION NEEDED         50666000
         (L); VALUE L; REAL L;                                          50667000
        BEGIN                                                           50668000
        EMITLABL( 4, 1,                      LAB(L));                   50669000
        END;                                                            50670000
%                                                                       50671000
    PROCEDURE DBYZ           % BRANCH IF Y ZERO, DECREMENT Y            50672000
         (L); VALUE L; REAL L;                                          50673000
        BEGIN                                                           50674000
        EMITLABL( 4, 2,                      LAB(L));                   50675000
        END;                                                            50676000
%                                                                       50677000
    PROCEDURE DBYN           % BRANCH IF Y NON-ZERO, DECREMENT Y        50678000
         (L); VALUE L; REAL L;                                          50679000
        BEGIN                                                           50680000
        EMITLABL( 4, 3,                      LAB(L));                   50681000
        END;                                                            50682000
%                                                                       50683000
    PROCEDURE BRAN           % BRANCH IF MAIN SYSTEM ATTENTION NEEDED   50684000
         (L); VALUE L; REAL L;                                          50685000
        BEGIN                                                           50686000
        EMITLABL( 4, 4,                      LAB(L));                   50687000
        END;                                                            50688000
%                                                                       50689000
    PROCEDURE GOTO           % BRANCH                                   50690000
         (A,L); VALUE A,L; REAL A,L;                                    50691000
        BEGIN                                                           50692000
        EMITLABL( 5, VALU(A,7),              LAB(L));                   50693000
        BRANCH(A);                                                      50694000
        END;                                                            50695000
%                                                                       50696000
    PROCEDURE GOX            % BRANCH RELATIVE WITH X                   50697000
         (A,L); VALUE A,L; REAL A,L;                                    50698000
        BEGIN                                                           50699000
        EMITLABL( 6, VALU(A,7),              LAB(L));                   50700000
        BRANCH(A);                                                      50701000
        END;                                                            50702000
%                                                                       50703000
    PROCEDURE GOI            % BRANCH RELATIVE INDIRECT                 50704000
         (A,L); VALUE A,L; REAL A,L;                                    50705000
        BEGIN                                                           50706000
        EMITLABL( 7, VALU(A,7),              LAB(L));                   50707000
        BRANCH(A);                                                      50708000
        END;                                                            50709000
%                                                                       50710000
    PROCEDURE MOVE           % MOVE HALF-WORD                           50711000
        (B,C); VALUE B,C; REAL B,C;                                     50712000
        BEGIN                                                           50713000
        EMITABC ( 8, 0,         HALF(B),     HALF(C));                  50714000
        END;                                                            50715000
%                                                                       50716000
    PROCEDURE LMRI           % LOCAL MEMORY READ, INDIRECT ADDRESS      50717000
        (B,C); VALUE B,C; REAL B,C;                                     50718000
        BEGIN                                                           50719000
        EMITABC ( 8, 1,         HALF(B),     HALF(C));                  50720000
        END;                                                            50721000
%                                                                       50722000
    PROCEDURE SMRD           % SCRATCHPAD MEMORY READ                   50723000
        (B,C); VALUE B,C; REAL B,C;                                     50724000
        BEGIN                                                           50725000
        EMITABC ( 8, 2,                                                 50726000
            IF BOOLEAN(B.[7:1]) THEN HALF(B)&0[2:3] ELSE HALF(B),       50727000
                                             HALF(C));                  50728000
        END;                                                            50729000
%                                                                       50730000
    PROCEDURE LMRD           % LOCAL MEMORY READ, DIRECT ADDRESS        50731000
         (L); VALUE L; REAL L;                                          50732000
        BEGIN                                                           50733000
        EMITLOCL( 8, 3,                      LAB(L));                   50734000
        END;                                                            50735000
%                                                                       50736000
    PROCEDURE LMWI           % LOCAL MEMORY WRITE, INDIRECT ADDRESS     50737000
        (B,C); VALUE B,C; REAL B,C;                                     50738000
        BEGIN                                                           50739000
        EMITABC ( 8, 5,         HALF(B),     HALF(C));                  50740000
        END;                                                            50741000
%                                                                       50742000
    PROCEDURE SMWD           % SCRATCHPAD MEMORY WRITE                  50743000
        (B,C); VALUE B,C; REAL B,C;                                     50744000
        BEGIN                                                           50745000
        EMITABC ( 8, 6,         HALF(B),                                50746000
            IF BOOLEAN(C.[7:1]) THEN HALF(C)&0[2:3] ELSE HALF(C));      50747000
        END;                                                            50748000
%                                                                       50749000
    PROCEDURE LMWD           % LOCAL MEMORY WRITE, DIRECT ADDRESS       50750000
         (L); VALUE L; REAL L;                                          50751000
        BEGIN                                                           50752000
        EMITLOCL( 8, 7,                      LAB(L));                   50753000
        END;                                                            50754000
%                                                                       50755000
    PROCEDURE MMR            % MAIN MEMORY READ                         50756000
        (B,C); VALUE B,C; REAL B,C;                                     50757000
        BEGIN                                                           50758000
         EMITABC ( 9, 1,          HALF(B),     HALF(C));                50759000
        END;                                                            50760000
%                                                                       50761000
    PROCEDURE MMW           % MAIN MEMORY WRITE UNCONDITIONAL           50762000
        (B,C); VALUE B,C; REAL B,C;                                     50763000
        BEGIN                                                           50764000
        EMITABC ( 9, 4,         HALF(B),     HALF(C));                  50765000
        END;                                                            50766000
%                                                                       50767000
    PROCEDURE HAD            % HALF-WORD ADD                            50768000
        (B,C); VALUE B,C; REAL B,C;                                     50769000
        BEGIN                                                           50770000
        EMITABC (12, 0,         COL(B),      COL(C));                   50771000
        ASET;                                                           50772000
        END;                                                            50773000
%                                                                       50774000
    PROCEDURE HSB            % HALF-WORD SUBTRACT                       50775000
        (B,C); VALUE B,C; REAL B,C;                                     50776000
        BEGIN                                                           50777000
        EMITABC (12, 4,         COL(B),      COL(C));                   50778000
        ASET;                                                           50779000
        END;                                                            50780000
%                                                                       50781000
    PROCEDURE HADB           % HALF-WORD ADD, LITERAL IN B              50782000
        (B,C); VALUE B,C; REAL B,C;                                     50783000
        BEGIN                                                           50784000
        EMITABC (13, 0,         VALU(B,255), COL(C));                   50785000
        ASET;                                                           50786000
        END;                                                            50787000
%                                                                       50788000
    PROCEDURE HSBB           % HALF-WORD SUBTRACT, LITERAL IN B         50789000
        (B,C); VALUE B,C; REAL B,C;                                     50790000
        BEGIN                                                           50791000
        EMITABC (13, 4,         VALU(B,255), COL(C));                   50792000
        ASET;                                                           50793000
        END;                                                            50794000
%                                                                       50795000
    PROCEDURE TRAN           % TRANSLATE                                50796000
        (A,B,C); VALUE A,B,C; REAL A,B,C;                               50797000
        BEGIN                                                           50798000
        EMITABC (14, VALU(A,7), BYTE(B),     BYTE(C));                  50799000
        IF A = 5 THEN MAYBECF[0]:=TRUE;                                 50800000
        END;                                                            50801000
%                                                                       50802000
    PROCEDURE PARY           % PARITY                                   50803000
        (A,B,C); VALUE A,B,C; REAL A,B,C;                               50804000
        BEGIN                                                           50805000
        EMITABC (15, VALU(A,1), BYTE(B),     BYTE(C));                  50806000
        LSET;                                                           50807000
        END;                                                            50808000
%                                                                       50809000
    PROCEDURE SUB            % SUBTRACT                                 50810000
        (A,B,C); VALUE A,B,C; REAL A,B,C;                               50811000
        BEGIN                                                           50812000
        BEWARECF0;                                                      50813000
        EMITABC (16, AFLD(A),   BYTE(B),     BYTE(C));                  50814000
        ASET;                                                           50815000
        END;                                                            50816000
%                                                                       50817000
    PROCEDURE LOR            % LOGICAL OR                               50818000
        (A,B,C); VALUE A,B,C; REAL A,B,C;                               50819000
        BEGIN                                                           50820000
        EMITABC (17, AFLD(A),   BYTE(B),     BYTE(C));                  50821000
        LSET;                                                           50822000
        END;                                                            50823000
%                                                                       50824000
    PROCEDURE LORB           % LOGICAL OR, LITERAL IN B                 50825000
        (A,B,C); VALUE A,B,C; REAL A,B,C;                               50826000
        BEGIN                                                           50827000
        EMITABC (18, AFLD(A),   VALU(B,255), BYTE(C));                  50828000
        LSET;                                                           50829000
        END;                                                            50830000
%                                                                       50831000
    PROCEDURE LORC           % LOGICAL OR, LITERAL IN C                 50832000
        (A,B,C); VALUE A,B,C; REAL A,B,C;                               50833000
        BEGIN                                                           50834000
        EMITABC (19, AFLD(A),   BYTE(B),     VALU(C,255));              50835000
        LSET2;                                                          50836000
        END;                                                            50837000
%                                                                       50838000
    PROCEDURE LAOM           % LOGICAL AND-OR, LITERAL IN C             50839000
        (A,B,C); VALUE A,B,C; REAL A,B,C;                               50840000
        BEGIN                                                           50841000
        EMITABC (20, AFLD(A),   BYTE(B),     VALU(C,255));              50842000
        LSET2;                                                          50843000
        END;                                                            50844000
%                                                                       50845000
    PROCEDURE LAN            % LOGICAL AND                              50846000
        (A,B,C); VALUE A,B,C; REAL A,B,C;                               50847000
        BEGIN                                                           50848000
        EMITABC (21, AFLD(A),   BYTE(B),     BYTE(C));                  50849000
        LSET;                                                           50850000
        END;                                                            50851000
%                                                                       50852000
    PROCEDURE LANB           % LOGICAL AND, LITERAL IN B                50853000
        (A,B,C); VALUE A,B,C; REAL A,B,C;                               50854000
        BEGIN                                                           50855000
        EMITABC (22, AFLD(A),   VALU(B,255), BYTE(C));                  50856000
        LSET;                                                           50857000
        END;                                                            50858000
%                                                                       50859000
    PROCEDURE LANC           % LOGICAL AND, LITERAL IN C                50860000
        (A,B,C); VALUE A,B,C; REAL A,B,C;                               50861000
        BEGIN                                                           50862000
        EMITABC (23, AFLD(A),   BYTE(B),     VALU(C,255));              50863000
        LSET2;                                                          50864000
        END;                                                            50865000
%                                                                       50866000
    PROCEDURE SUBB           % SUBTRACT, LITERAL IN B                   50867000
        (A,B,C); VALUE A,B,C; REAL A,B,C;                               50868000
        BEGIN                                                           50869000
        BEWARECF0;                                                      50870000
        EMITABC (24, AFLD(A),   VALU(B,255), BYTE(C));                  50871000
        ASET;                                                           50872000
        END;                                                            50873000
%                                                                       50874000
    PROCEDURE LEO            % LOGICAL EXCLUSIVE OR                     50875000
        (A,B,C); VALUE A,B,C; REAL A,B,C;                               50876000
        BEGIN                                                           50877000
        EMITABC (25, AFLD(A),   BYTE(B),     BYTE(C));                  50878000
        LSET;                                                           50879000
        END;                                                            50880000
%                                                                       50881000
    PROCEDURE LEOB           % LOGICAL EXCLUSIVE OR, LITERAL IN B       50882000
        (A,B,C); VALUE A,B,C; REAL A,B,C;                               50883000
        BEGIN                                                           50884000
        EMITABC (26, AFLD(A),   VALU(B,255), BYTE(C));                  50885000
        LSET;                                                           50886000
        END;                                                            50887000
%                                                                       50888000
    PROCEDURE LEOC           % LOGICAL EXCLUSIVE OR, LITERAL IN C       50889000
        (A,B,C); VALUE A,B,C; REAL A,B,C;                               50890000
        BEGIN                                                           50891000
        EMITABC (27, AFLD(A),   BYTE(B),     VALU(C,255));              50892000
        LSET2;                                                          50893000
        END;                                                            50894000
%                                                                       50895000
    PROCEDURE SUBC           % SUBTRAC, LITERAL IN C                    50896000
        (A,B,C); VALUE A,B,C; REAL A,B,C;                               50897000
        BEGIN                                                           50898000
        BEWARECF0;                                                      50899000
        EMITABC (28, AFLD(A),   BYTE(B),     VALU(C,255));              50900000
        ASET2;                                                          50901000
        END;                                                            50902000
%                                                                       50903000
    PROCEDURE ADD            % ADD                                      50904000
        (A,B,C); VALUE A,B,C; REAL A,B,C;                               50905000
        BEGIN                                                           50906000
        BEWARECF0;                                                      50907000
        EMITABC (29, AFLD(A),   BYTE(B),     BYTE(C));                  50908000
        ASET;                                                           50909000
        END;                                                            50910000
%                                                                       50911000
    PROCEDURE ADDB           % ADD, LITERAL IN B                        50912000
        (A,B,C); VALUE A,B,C; REAL A,B,C;                               50913000
        BEGIN                                                           50914000
        BEWARECF0;                                                      50915000
        EMITABC (30, AFLD(A),   VALU(B,255), BYTE(C));                  50916000
        ASET;                                                           50917000
        END;                                                            50918000
%                                                                       50919000
    PROCEDURE ADDC           % ADD, LITERAL IN C                        50920000
        (A,B,C); VALUE A,B,C; REAL A,B,C;                               50921000
        BEGIN                                                           50922000
        BEWARECF0;                                                      50923000
        EMITABC (31, AFLD(A),   BYTE(B),     VALU(C,255));              50924000
        ASET2;                                                          50925000
        END;                                                            50926000
%                                                                       50927000
% * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 50928000
%                                                                       50929000
%   LABELS & SELF-CONTROL                                               50930000
%                                                                       50931000
%   NOTE: THE LOGIC IN THIS, THE OUTER, BLOCK OF THIS PROGRAM DOES NOT  50932000
%   INCLUDE ANY ALGORITHM OR MECHANISM FOR LOADING THE OBJECT-CODE TO   50933000
%   THE ACTUAL MEMORIES INVOLVED AT DCP RUN-TIME; NOR DOES IT ENFORCE   50934000
%   ANY RELATIONSHIP BETWEEN OBJECT PROGRAM ADDRESSES AND CODE FILE DISK50935000
%   ADDRESSES. THE SEQUENCE OF SYLLABLES ON DISK IS THE SAME AS THE     50936000
%   SEQUENCE IN WHICH THEIR CORRESPONDING OPCODES OR EMITTERS ARE CALLED50937000
%   REGARDLESS OF THEIR INTENDED RUN-TIME ADDRESSES, I.E., OF THE VALUE 50938000
%   OF SELF.                                                            50939000
%                                                                       50940000
    PROCEDURE LOCATE(L);     % (RE-) INITIALIZES SELF TO L, WHICH THEN  50941000
        VALUE L;             % MUST BE SOME LABEL FUNCTION AS LM OR MM, 50942000
        INTEGER L;           % AN, IN A SENSE, LOCATES THE SYLLABLES    50943000
    BEGIN                    % SUBSEQUENTLY EMITTED                     50944000
        SELF:= IF L.TYPE = TYPELABL THEN L ELSE 0;                      50945000
         IF SELF = 0 THEN ERROR(1);                                     50946000
        WRITELINE                                                       50947000
    END;                                                                50948000
%                                                                       50949000
    PROCEDURE LABL(L);       % LABL "PLACES" THE DCP LABEL L, I.E.,     50950000
        REAL L;              % ASSIGNS TO L THE CURRENT VALUE OF SELF.  50951000
    IF SECONDPASS THEN       % L SHOULD BE A DCP LABEL, I.E., AN        50952000
        IF L=SELF THEN       % ALGOL REAL VARIABLE                      50953000
            WRITELINE                                                   50954000
          ELSE ERROR(1)      % L SHOULD HAVE THE SAME VALUE (SELF) AS   50955000
    ELSE                     % THIS CALL ON LABL SET IT TO IN THE       50956000
        L:=                  % FIRST PASS                               50957000
                IF L = 0           %                                    50958000
           THEN SELF         %                                          50959000
           ELSE 0&20 TYPE;   %                                          50960000
                             % UNLESS AN ERROR WAS FOUND IN THE FIRST.  50961000
%                                                                       50962000
    DEFINE    LABELS =       % SINCE DCP LABELS EXIST IN AN INNER       50963000
                             % (PROGRAM:) BLOCK, BUT MUST RETAIN THEIR  50964000
                             % VALUE DETERMINED IN THE FIRST PASS THEN  50965000
                  OWN REAL#; % THEY MUST BE OWN                         50966000
%                                                                       50967000
% * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 50968000
%   SOME MISCELLANEOUS THINGS FOR USE IN THE PROGRAM BLOCK              50969000
%                                                                       50970000
    DEFINE    INVALID =      % TO FORCE INVALID OPERATOR                50971000
        ADDC(SAME,SM(0,7),16)#;                                         50972000
%                                                                       50973000
    PROCEDURE EMITWORD(W);   % A WORD W, EXCEPT FOR THE FLAG BIT        50974000
        VALUE W; REAL W;                                                50975000
    BEGIN                                                               50976000
        EMITHALF(W.[46:23]);                                            50977000
        EMITHALF(W.[23:24])                                             50978000
    END;                                                                50979000
%                                                                       50980000
    DEFINE    ADJUST(ADJUST1)=                                          50981000
        IF BOOLEAN(SELF) THEN ADJUST1#;                                 50982000
%                                                                       50983000
    DEFINE                                                              50984000
%        CONDITION NAMES FOR GOTO, GOX, GOI                             50985000
%                                                                       50986000
         IFGTR          = 1#,                                           50987000
         IFLSS          = 2#,                                           50988000
         IFNEQ          = 3#,                                           50989000
         IFEQL          = 4#,                                           50990000
         IFGEQ          = 5#,                                           50991000
         IFLEQ          = 6#,                                           50992000
         UNC            = 7#,                                           50993000
         ZERO           = 4#,                                           50994000
         NONZERO        = 3#,                                           50995000
         BORROW         = 2#,                                           50996000
         NOBORROW       = 5#,                                           50997000
         CARRY          = 2#,                                           50998000
         NOCARRY        = 5#;                                           50999000
%                                                                       51000000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51001000
%                                                                       51002000
%   CLUSTER/ADAPTOR PROGRAM TIMER VALUES                                51003000
%                                                                       51004000
    DEFINE                                                              51005000
         MICROSEC       = |10#,                                         51006000
         MILLISEC       = |1000 MICROSEC#,                              51007000
         SEC            = |1000 MILLISEC#;                              51008000
%                                                                       51009000
    INTEGER PROCEDURE DELAY(T);                                         51010000
         VALUE T;                                                       51011000
         INTEGER T;                                                     51012000
    BEGIN                                                               51013000
         INTEGER RATE;                                                  51014000
         T:=T DIV 64;                                                   51015000
         WHILE T>30 AND RATE<7 DO                                       51016000
         BEGIN                                                          51017000
              T:=T DIV 8;                                               51018000
              RATE:=RATE+1;                                             51019000
         END;                                                           51020000
%                                                                       51021000
         DELAY:=IF T>30 THEN -255 ELSE                                  51022000
              T&RATE[7:3];                                              51023000
    END DELAY;                                                          51024000
%                                                                       51025000
    DEFINE                                                              51026000
%        VARIANTS OF PARY                                               51027000
         EVEN           = 0#,                                           51028000
         ODD            = 1#;                                           51029000
%                                                                       51030000
    DEFINE                                                              51031000
%       VARIANTS OF THE SHFT OPERATOR                                   51032000
%                                                                       51033000
        CONCATENATE          = 1#,                                      51034000
        ENDAROUND            = 2#,                                      51035000
        BYTEAROUND           = 4#;                                      51036000
%                                                                       51037000
    DEFINE                                                              51038000
%                                                                       51039000
%       CONSTANTS FOR COMMANDS/INTERRUPTS IN THE CLUSTER INTERFACE      51040000
%                                                                       51041000
         CLEANHOUSE   =  [3:1]#,                                        51042000
%                                                                       51043000
         ACSETTYPE           = 0#,                                      51044000
         ACTRANSMIT          = 9#,                                      51045000
         ACCOMMAND           = 10#,                                     51046000
         ACTIMER             = 11#,                                     51047000
         ACINTERROGATEIR     = 22#,                                     51048000
         AIOUTOFSERVICE      = 0#,                                      51049000
         AIWAITFORRING       = 16#,                                     51050000
         AIINITIATERECEIVE   = 48#,                                     51051000
         AIINITIATETRANSMIT  = 80#,                                     51052000
         AIFINISHTRANSMIT    = 96#,                                     51053000
         AIBREAK             = 112#,                                    51054000
%                                                                       51055000
%   INTERRUPTS                                                          51056000
%                                                                       51057000
         ACBYTEPRESENT       = 1#,                                      51058000
         ACCONTROL           = 2#,                                      51059000
         ACBYTEREQUEST       = 9#,                                      51060000
%                                                                       51061000
         AIRECEIVEREADY      = 6#,                                      51062000
         AI3SECDATA          = 7#,                                      51063000
         AIOVERFLOW          = 9#,                                      51064000
         AI30SEC             = 58#,                                     51065000
         AI3SECMODEM         = 14#,                                     51066000
         AIMODEMNOTREADY     = 15#,                                     51067000
         AIBREAKONOUTPUT     = 76#;                                     51068000
%                                                                       51069000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51070000
%                                                                       51071000
%   INITIALIZATION AND HOUSEKEEPING                                     51072000
%                                                                       51073000
    PROCEDURE INITIALIZE;                                               51074000
    BEGIN                                                               51075000
        DEFINE A=TYPEBOTH#, H=TYPEHALF#,                                51076000
               V(V1,V2,V3,V4)=REGISTER(V1,V2,0,V3,V4)#;                 51077000
         PROCEDURE CLEAN(CLEAN1,CLEAN2); VALUE CLEAN2;                  51078000
                   INTEGER CLEAN2; ARRAY CLEAN1[*];                     51079000
              REPLACE POINTER(CLEAN1) BY "0" FOR CLEAN2 WORDS;          51080000
DEFINE                                                                  51081000
                CLEAN2(CLEAN21,CLEAN22,CLEAN23)  =  I:=-1;              51082000
                     WHILE (I:=I+1) LSS CLEAN22 DO                      51083000
                     REPLACE POINTER(CLEAN21[I,0]) BY                   51084000
                          "0" FOR CLEAN23 WORDS#;                       51085000
         CLEAN( ADCHARSIZE,4);                                          51086000
         CLEAN(LBUFF,15);                                               51087000
         CLEAN(SPECIAL,64);                                             51088000
         CLEAN(ELBAT,88);                                               51089000
         CLEAN(TPA,61);                                                 51090000
         CLEAN(TPB,61);                                                 51091000
         CLEAN(TPC,61);                                                 51092000
         CLEAN(DEFAULTA,61);                                            51093000
         CLEAN(DCPTC,51);                                               51094000
        CLEAN(DCPRT,51);                                                51095000
         CLEAN(REQBUFF,1001);                                           51096000
         CLEAN(LFTA,16);                                                51097000
         CLEAN(BCLASCII,64);                                            51098000
         CLEAN(SWR,SWSIZE DIV 2 + 1);                                   51099000
         CLEAN(SWT,SWSIZE DIV 2 + 1);                                   51100000
         CLEAN(DCPNL,8);                                                51101000
         CLEAN(DCPNS,8);                                                51102000
         CLEAN(TACCUM,46);                                              51103000
         CLEAN(ACCUM,46);                                               51104000
         CLEAN(TLBUFF,15);                                              51105000
         CLEAN2(INFO,128,270);                                          51106000
         CLEAN(REMOTETYPE,514);                                         51107000
         COUNT:=RCOUNT:=ITA:=ITB:=ITC:=ITD:=ITE:=NEXTINFO:=LASTINFO:=   51108000
         CHR:=TERMINALINK :=NXTELBAT:=CONTEXT:=TYPEDCP:=DCPEXW:=        51109000
         MADTYPES:=ASCIICODE:=NTC:=ADPARITY:=SYNCAD8:=NAV:=IANT:=NIC:=  51110000
         MSC:=NEXTREC:=LASTREC:=SAVEREC:=SCRAM:=LINEFORWARDLINK:=       51111000
         STATIONFORWARDLINK:=APPSET:=APPNUM:=ELCLASS:=NLABEL:=          51112000
         SAVEINFO:=REQFORWARDLINK:=LINELINK:=0;                         51113000
         GTA:=GETW:=SPEC:=RESULT:=0;                                    51114000
         LISTOG:=TAPETOG:=CODETOG:=SEQTOG:=SUMTOG:=NEWTOG:=SINGLETOG:=  51115000
         THRUTOG:=BON:=DOLLARTOG:=DUMPTOG:=VOIDTOG:=FALSE;              51116000
        AA:=V(A,1,1,4); D:=V(A,4,2,4); MA2:=V(A,7,3,4); CF :=V(H,0,4,4);51117000
        AC:=V(H,0,1,2); Y:=V(A,3,2,2); MA1:=V(A,6,3,2); IA1:=V(H,0,4,2);51118000
        AI:=V(H,0,1,1); X:=V(A,2,2,1); MA0:=V(A,5,3,1); IA0:=V(H,0,4,1);51119000
                                       MA :=V(H,0,3,7); IA :=V(H,0,4,3);51120000
        NO:=V(A,0,0,0);                                                 51121000
        L:=V(17,0,0,0); R:=L+7;                                         51122000
        IND:=REGISTER(H,0,1,0,0);                                       51123000
        SAME:=V(TYPEAFLD+1,1,0,0);                                      51124000
        I:=-1;                                                          51125000
        FOR J:=                                                         51126000
            "IDLE", "BKP ",                      %  0, 1                51127000
            K:=-32, K:=K-8, K:=K-8,              %  2- 4                51128000
            "GOTO", "GOX ", "GOI ",              %  5- 7                51129000
            K:=K-8, K:=K-8,                      %  8, 9                51130000
            "****", "****",                      % 10,11                51131000
            K:=K-8, K:=K-8,                      % 12,13                51132000
            "TRAN", "PARY",                      % 14,15                51133000
            "SUB ", "LOR ", "LORB", "LORC",      % 16-19                51134000
            "LAOM", "LAN ", "LANB", "LANC",      % 20-23                51135000
            "SUBB", "LEO ", "LEOB", "LEOC",      % 24-27                51136000
            "SUBC", "ADD ", "ADDB", "ADDC"       % 28-31                51137000
        DO OPCODES[I:=I+1]:=J;                                          51138000
        FOR J:=                                                         51139000
            "AWI ", "AWI ", "AWI ", "AWI ",      %  2                   51140000
            "AWRR", "AWRR", "AWRR", "AWRR",      %                      51141000
            "MSKW", "MSKR", "****", "****",      %  3                   51142000
            "SHFT", "HEYU", "****", "****",      %                      51143000
            "ARWN", "ARIN", "DBYZ", "DBYN",      %  4                   51144000
            "BRAN", "****", "****", "****",      %                      51145000
            "MOVE", "LMRI", "SMRD", "LMRD",      %  8                   51146000
            "****", "LMWI", "SMWD", "LMWD",      %                      51147000
            "****", "MMR ", "****", "****",      %  9                   51148000
            "MMW ", "****", "MMW ", "****",      %                      51149000
            "HAD ", "****", "****", "****",      % 12                   51150000
            "HSB ", "****", "****", "****",      %                      51151000
            "HADB", "****", "****", "****",      % 13                   51152000
            "HSBB", "****", "****", "****"                              51153000
        DO OPCODES[I:=I+1]:=J;                                          51154000
    END;                                                                51155000
%                                                                       51156000
    PROCEDURE SECONDINITIALIZE;                                         51157000
    BEGIN                                                               51158000
%                                                                       51159000
         IF LISTING:=EVERLISTED THEN DAYTIME(1);                        51160000
         POINTERLINE:=POINTER(LINEARAY);                                51161000
        ERRORS:=0;                                                      51162000
        WARNINGS:=0;                                                    51163000
        MAYBECF[0]:=MAYBECF[1]:=FALSE;                                  51164000
        TAGS:=NO;                                                       51165000
    END;                                                                51166000
%                                                                       51167000
PROCEDURE WRAPUP;                                                       51168000
BEGIN                                                                   51169000
    FORMAT LINEONE(///"NUMBER OF COMPILE ERRORS = 0.",X5,               51170000
                   "NUMBER OF ASSEMBLY ERRORS DETECTED =",F4.0,         51171000
                   //"PROCESSOR TIME =",I6," SECONDS.",X5,              51172000
                   "I/O TIME =",I6," SECONDS.",                         51173000
                   //"NUMBER OF DCP CODE SYLLABLES EMITTED =",F8.0,X5,  51174000
                   "NUMBER OF WORDS REQUIRED FOR CODE STORAGE =",F8.0   51175000
                   //"NUMBER OF NON-CODE SYLLABLES EMITTED =",F8.0,X5,  51176000
                   "NUMBER OF WORDS REQUIRED FOR NON-CODE STORAGE ="F8.051177000
                   //"TOTAL NUMBER OF SYLLABLES EMITTED =",F8.0,X5,     51178000
                   "TOTAL STORAGE REQUIRED =",I8," WORDS.",             51179000
                   //"NUMBER OF SEGMENTS REQUIRED =",F5.0,X5,           51180000
                   "NUMBER OF AREAS REQUIRED =",F4.0,                   51181000
                   //"NUMBER OF CFO WARNINGS =",F4.0,X5,                51182000
                   "NUMBER OF SOURCE CARDS PROCESSED =",F4.0),          51183000
            NOLOADER(/,X5,"******     THIS PROGRAM IS NOT IN STANDARD", 51184000
               " LOADER FORMAT     ******");                            51185000
          WRITERECORD;                                                  51186000
           IF ERRORS=0 THEN LOCK(CODE)                                  51187000
      ELSE    BEGIN                                                     51188000
              FILE SPO 11(1,10);                                        51189000
              WRITE(SPO,<"***NDL GENERATOR/ASSEMBLER DETECTED ",I3,     51190000
                         " ERRORS***">,ERRORS);                         51191000
              END;                                                      51192000
           WRITE(LINE,LINEONE,ERRORS,                                   51193000
                 TIME(2)/60,TIME(3)/60,                                 51194000
                 CODESYLLABLES,(CODESYLLABLES+1)DIV 2,                  51195000
                 SYLLABLES-CODESYLLABLES,                               51196000
                 (SYLLABLES-CODESYLLABLES+1) DIV 2,                     51197000
                 SYLLABLES,(SYLLABLES+1) DIV 2,                         51198000
                 RECORDCT | 2,AREAS-1,WARNINGS,CARDCNT-1);              51199000
          IF AREAS GTR 1 THEN                                           51200000
            ELSE                                                        51201000
               WRITE(PRINTER[DBL],NOLOADER);                            51202000
END;                                                                    51203000
%                                                                       51204000
% * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 51205000
%                                                                       51206000
%   AND THE BLOCK STRUCTURE, MAIN CONTROL, OF THIS PROGRAM              51207000
%                                                                       51208000
         INITIALIZE;                                                    51209000
    BEGIN                                                               51210000
%                                                                       51211000
% * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 51212000
%                                                                       51213000
%   END OF DCP PROCESSOR LOGIC                                          51214000
%                                                                       51215000
%   BEGIN DCP PROGRAM LOGIC                                             51216000
%                                                                       51217000
% * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 51218000
%                                                                       51219000
%                                                                       51220000
%   SET, RESET, AND TEST CONTAIN THE GENERATION-TIME ARITHMETIC TO      51221000
%   TRANSLATE B6500 BIT NUMBERING TO DCP BYTE NUMBERING AND POWERS OF 2 51222000
%   FOR BIT SELECTION. THEY EACH EMIT A SINGLE SYLLABLE TO EFFECT THE   51223000
%   APPROPRIATE SINGLE-BIT OPERATION. THE WORD PARAMETER SHOULD BE A    51224000
%   SCRATCHPAD MEMORY OR WORD-REGISTER ADDRESS.                         51225000
%                                                                       51226000
    DEFINE TWO(TWO1)=(2*((TWO1).[2:3]))#;                               51227000
%                                                                       51228000
    PROCEDURE SET(WORD,BIT);                                            51229000
         VALUE WORD,BIT;                                                51230000
         REAL WORD,BIT;                                                 51231000
    BEGIN                                                               51232000
         INTEGER I;                                                     51233000
         I:=BIT.[15:8]/BIT.[23:8];                                      51234000
         LORC(SAME,WORD+I.[2:3],BIT.[7:8]);                             51235000
    END;                                                                51236000
%                                                                       51237000
    PROCEDURE RESET(WORD,BIT);                                          51238000
         VALUE WORD,BIT;                                                51239000
         REAL WORD,BIT;                                                 51240000
    BEGIN                                                               51241000
         INTEGER I;                                                     51242000
         I:=BIT.[15:8]/BIT.[23:8];                                      51243000
         LANC(SAME,WORD+I.[2:3],255-BIT.[7:8]);                         51244000
    END;                                                                51245000
%                                                                       51246000
    PROCEDURE TEST(WORD,BIT);                                           51247000
         VALUE WORD,BIT;                                                51248000
         REAL WORD,BIT;                                                 51249000
    BEGIN                                                               51250000
         INTEGER I;                                                     51251000
         I:=BIT.[15:8]/BIT.[23:8];                                      51252000
         LANC(NO,WORD+I.[2:3],BIT.[7:8]);                               51253000
    END;                                                                51254000
%                                                                       51255000
% * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 51256000
%                                                                       51257000
%   PROGRAM GENERATION LOGIC TO LIST AND SELECT THE COMBINATIONS OF     51258000
%   TRANSLATION, PARITY, ADAPTOR TYPE AND DELAYS                        51259000
%   TO BE PROGRAMMED FOR.                                               51260000
%                                                                       51261000
    DEFINE MAXTYPES = 31#;                                              51262000
    DEFINE                                                              51263000
         INCLUDEDTYPES                =  TPA#,                          51264000
         INCLUDEDDELAYS               =  TPB#,                          51265000
         TRANSMITBCCTYPE              =  TPC#,                          51266000
         RECEIVEBCCTYPE               =  DEFAULTA#,                     51267000
         TRANSMITTYPE                 =  DCPTC#,                        51268000
         RECEIVETYPE                  =  DCPRT#,                        51269000
         LINETYPES                    =  REQBUFF#;                      51270000
    DEFINE                                                              51271000
         MANYTYPES                   =  NEXTINFO#,                      51272000
         TYPEUSED                    =  LASTINFO#,                      51273000
         ADAPTORTYPE                 =  NIC#,                           51274000
         TRANSMISSIONTYPE            =  MSC#,                           51275000
         INITIATETRANSMITDELAY       =  LASTREC#,                       51276000
         TRANSMITDELAY               =  NEXTREC#,                       51277000
         SYNCHRONOUSTYPE             =  SAVEREC#,                       51278000
         BITSPERBYTE                 =  SCRAM#,                         51279000
         INITIATERECEIVEDELAY        =  LINELINK#;                      51280000
    REAL                                                                51281000
         CODE,                                                          51282000
         VERTICAL,                                                      51283000
         LONGITUDINAL;                                                  51284000
    DEFINE                                                              51285000
         TRANSMITBCCBYTE= TRANSMITBCCTYPE[TRANSMISSIONTYPE]#,           51286000
         RECEIVEBCCBYTE = RECEIVEBCCTYPE[TRANSMISSIONTYPE]#,            51287000
         TRANSMITBYTE   = TRANSMITTYPE[TRANSMISSIONTYPE]#,              51288000
         RECEIVEBYTE    = RECEIVETYPE[TRANSMISSIONTYPE]#;               51289000
%                                                                       51290000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51291000
%                                                                       51292000
    PROCEDURE INCLUDE(C,V,L,A,TD,ITD,IRD);                              51293000
         VALUE C,V,L,A,TD,ITD,IRD;                                      51294000
         REAL  C,V,L,A,TD,ITD,IRD;                                      51295000
%                                                                       51296000
%   TO INCLUDE (ANOTHER) COMBINATION IN THE LIST                        51297000
%                                                                       51298000
    BEGIN                                                               51299000
         INTEGER I;                                                     51300000
         INCLUDEDTYPES[MANYTYPES:=MANYTYPES+1]:=0                       51301000
              & (IF C= NO THEN 255 ELSE C)[7:8]                         51302000
              & (IF V = NO THEN 255 ELSE V)[15:8]                       51303000
              & (IF L = NO THEN 255 ELSE L)[23:8]                       51304000
              & TD[31:8];                                               51305000
         INCLUDEDDELAYS[MANYTYPES]:=0                                   51306000
              & A[7:8]                                                  51307000
              & ITD[15:8]                                               51308000
              & IRD[23:8];                                              51309000
%                                                                       51310000
         I:=-1;                                                         51311000
         DO I:=I+1                                                      51312000
         UNTIL                                                          51313000
              INCLUDEDTYPES[MANYTYPES]=INCLUDEDTYPES[I];                51314000
         INCLUDEDDELAYS[MANYTYPES].[31:8]:=I;                           51315000
         IF C NEQ NO THEN                                               51316000
         INCLUDE(NO,V,L,A,TD,ITD,IRD);                                  51317000
    END;                                                                51318000
%                                                                       51319000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51320000
%                                                                       51321000
    PROCEDURE USETYPE(INDEX);                                           51322000
         VALUE INDEX;                                                   51323000
         REAL INDEX;                                                    51324000
%                                                                       51325000
%   TO SELECT ONE OF THE INCLUDED COMBINATIONS                          51326000
%   FOR GENERATING PROGRAM FOR A LINE OF THE INDEXED TYPE               51327000
%                                                                       51328000
    BEGIN                                                               51329000
         TYPEUSED:=INDEX;                                               51330000
%                                                                       51331000
         IF CODE:=           INCLUDEDTYPES[INDEX].[7:8]=255 THEN        51332000
              CODE:=NO;                                                 51333000
         IF VERTICAL:=       INCLUDEDTYPES[INDEX].[15:8]=255 THEN       51334000
              VERTICAL:=NO;                                             51335000
         IF LONGITUDINAL:=   INCLUDEDTYPES[INDEX].[23:8]=255 THEN       51336000
              LONGITUDINAL:=NO;                                         51337000
         ADAPTORTYPE:=       INCLUDEDDELAYS[INDEX].[7:8];               51338000
         TRANSMISSIONTYPE:=  INCLUDEDDELAYS[INDEX].[31:8];              51339000
%                                                                       51340000
         TRANSMITDELAY:=     INCLUDEDTYPES[INDEX].[31:8];               51341000
         INITIATETRANSMITDELAY:=                                        51342000
                             INCLUDEDDELAYS[INDEX].[15:8];              51343000
         INITIATERECEIVEDELAY :=                                        51344000
                             INCLUDEDDELAYS[INDEX].[23:8];              51345000
         SYNCHRONOUSTYPE:=   REAL(ADAPTORTYPE.[4:2]=1);                 51346000
         BITSPERBYTE:=                                                  51347000
         IF ADAPTORTYPE< 8 THEN 0 ELSE                                  51348000
         IF ADAPTORTYPE{11 THEN 8 ELSE                                  51349000
         IF ADAPTORTYPE{13 THEN 7 ELSE                                  51350000
         IF ADAPTORTYPE{15 THEN 6 ELSE                                  51351000
         IF ADAPTORTYPE=16 THEN 0 ELSE                                  51352000
         IF ADAPTORTYPE{19 THEN 5 ELSE                                  51353000
         IF ADAPTORTYPE=20 THEN 8 ELSE                                  51354000
         IF ADAPTORTYPE=21 THEN 7 ELSE                                  51355000
         IF ADAPTORTYPE{25 THEN 8 ELSE                                  51356000
         IF ADAPTORTYPE=26 THEN 4 ELSE                                  51357000
         IF ADAPTORTYPE{31 THEN 8 ELSE 0;                               51358000
    END USE TYPE;                                                       51359000
%                                                                       51360000
%                                                                       51361000
%                                                                       60000000
COMMENT#################################################################60001000
                   SYSTEM DEFINES                                       60002000
#######################################################################;60003000
%                                                                       60004000
% * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 60005000
%                                                                       60006000
%   LAYOUTS AND CONVENTIONAL VALUES                                     60007000
%                                                                       60008000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60009000
%                                                                       60010000
    DEFINE                                                              60011000
%   DEFINITION, MISCELLANEOUS                                           60012000
%                                                                       60013000
         BIT(BIT1)      = 0&TWO(BIT1)[7:8]&(IF (BIT1).[5:3]=6 THEN 6    60014000
                          ELSE 5-(BIT1).[5:3])[15:8]&1[16:1]#,          60015000
         BYTE(BYTE1,BYTE2)                                              60016000
                        = (BYTE1+BYTE2)#,                               60017000
         HALF(HALF1,HALF2)                                              60018000
                        = (HALF1+(IF HALF2=L THEN 0 ELSE 3))#,          60019000
%                                                                       60020000
         WORD(WORD1,WORD2)                                              60021000
                        = ((WORD1)&(WORD2)[15:8])#,                     60022000
         INDEX          = [7:8]#,                                       60023000
         FIELD          = [15:8]#,                                      60024000
%                                                                       60025000
         SEGMENTLENGTH  = 10#,                                          60026000
         NULL           = BIT(23)#,                                     60027000
         LINES          = (1+LINEMAX-LINEMIN)#;                         60028000
%                                                                       60029000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60030000
%                                                                       60031000
    DEFINE                                                              60032000
%   ADDRESS BLOCK                                                       60033000
%                                                                       60034000
         REQUESTQUEUE       = WORD(0,W)#,                               60035000
         RESULTQUEUE        = WORD(1,W)#,                               60036000
         SPACEQUEUE         = WORD(2,W)#,                               60037000
         FAULTQUEUE         = WORD(3,W)#,                               60038000
         MORESPACEQUEUE     = WORD(5,W)#,                               60039000
         WAITQUEUE          = WORD(6,W)#;                               60040000
%                                                                       60041000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60042000
    DEFINE                                                              60043000
%   LAYOUT OF SCRATCHPAD MEMORY                                         60044000
%                                                                       60045000
         WAITQUEUEBUSY      = BIT(48)#,                                 60046000
         REQUESTQUEUEBUSY   = BIT(49)#,                                 60047000
         SYSTEMWORD         = SM(0,W)#,                                 60048000
         IBA                = SM(0,L)#,                                 60049000
         FAULT              = SM(0,R)#,                                 60050000
         OLDMA              = SM(0,R)#,                                 60051000
%                                                                       60052000
         ADDRESS            = SM(1,L)#,                                 60053000
         LINE               = SM(1,R)#,                                 60054000
%                                                                       60055000
         MESSAGE            = SM(2,W)#,                                 60056000
         MESSAGECLASS       = SM(2,1)#,                                 60057000
         UNREGISTEREDREQUEST                                            60058000
                            = BIT(39)#,                                 60059000
         MESSAGEKEY         = SM(2,2)#,                                 60060000
         MESSAGEVARIANT     = SM(2,3)#,                                 60061000
         MESSAGELINE        = SM(2,4)#,                                 60062000
         MESSAGESTATION     = SM(2,5)#,                                 60063000
         MESSAGELENGTH      = SM(2,6)#,                                 60064000
         STATIONTABLEENTRY  = SM(2,W)#,                                 60065000
%                                                                       60066000
         QUEUEHEAD          = SM(3,R)#,                                 60067000
         QUEUETAIL          = SM(3,L)#,                                 60068000
         QUEUEWORD          = SM(3,W)#,                                 60069000
         BUFFER             = SM(3,W)#,                                 60070000
         LINETABLEENTRY     = SM(3,W)#,                                 60071000
%                                                                       60072000
         SAVEWORD           = SM(4,W)#,                                 60073000
         SAVEONE            = SM(4,L)#,                                 60074000
         SAVETWO            = SM(4,R)#,                                 60075000
%                                                                       60076000
         LOCATIONWORD       = SM(5,W)#,                                 60077000
         MESSAGESTART       = SM(5,R)#,                                 60078000
         MESSAGEEND         = SM(5,L)#,                                 60079000
         TEXTADDRESS        = SM(5,L)#,                                 60080000
%                                                                       60081000
         NOTCONTENDED       = BIT(50)#,                                 60082000
         SEGMENTEDRECORD    = BIT(49)#,                                 60083000
         SEGMENTEDTEXT      = BIT(48)#,                                 60084000
         STATIONTABLE       = SM(6,L)#,                                 60085000
         LINETABLE          = SM(6,R)#,                                 60086000
         STATIONSTABLE      = NO#,                                      60087000
         STATION            = SM(6,1)#,                                 60088000
         CHARACTERADDRESS   = SM(6,7)#,                                 60089000
         TEXTLENGTH         = SM(6,4)#,                                 60090000
%                                                                       60091000
         LINEDESCRIPTOR     = SM(7,W)#,                                 60092000
         STATIONDESCRIPTOR  = SM(7,W)#,                                 60093000
         INDEXADDRESS       = SM(7,L)#,                                 60094000
         CHARACTERWORD      = SM(7,W)#,                                 60095000
         BCC                = SM(7,1)#,                                 60096000
         CHARACTER          = SM(7,2)#,                                 60097000
         TRANSFERADDRESS    = SM(7,3)#,                                 60098000
         RESULTTYPE         = SM(7,4)#,                                 60099000
         RETURNADDRESS      = SM(7,R)#;                                 60100000
%                                                                       60101000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60102000
%                                                                       60103000
    DEFINE                                                              60104000
%   TERMINALTABLE[*]                                                    60105000
%                                                                       60106000
         TERMINALTABLESIZE = 2#,                                        60107000
         TERMINALTYPE   = WORD(0,0)#,                                   60108000
         TERMINALTIMEOUT= WORD(0,1)#,                                   60109000
         TERMINALWIDTH  = WORD(0,2)#,                                   60110000
         TERMINALPAGE   = WORD(0,3)#,                                   60111000
         TERMINALLENGTH = WORD(0,R)#,                                   60112000
         TERMINALCHARACTERS                                             60113000
                        = WORD(1,W)#;                                   60114000
%                                                                       60115000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60116000
    DEFINE                                                              60117000
%   LINEDESCRIPTOR                                                      60118000
%                                                                       60119000
         LINEWAITINGFORRING                                             60120000
                        = BIT(32)#,                                     60121000
         LINESYNCHRONOUS= BIT(33)#,                                     60122000
         LINEDIALOUT    = BIT(30)#,                                     60123000
         LINEDUPLEX     = BIT(27)#,                                     60124000
         LINEDIALIN     = BIT(26)#,                                     60125000
         LINETYPE       = WORD(0,3)#;                                   60126000
%                                                                       60127000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60128000
%                                                                       60129000
    DEFINE                                                              60130000
%   LINETABLE[*]                                                        60131000
%                                                                       60132000
         LINETIME       = WORD(0,0)#,                                   60133000
         LINERESULTS    = WORD(0,0)#,                                   60134000
         LINESTATION    = WORD(0,1)#,                                   60135000
         LINESTATIONS   = WORD(0,2)#,                                   60136000
         LINESTATUS     = WORD(0,3)#,                                   60137000
         LINECONNECTED  = BIT(23)#,                                     60138000
         LINEBUSY       = BIT(22)#,                                     60139000
         LINESUSPENDED  = BIT(21)#,                                     60140000
         LINESWITCHING  = BIT(20)#,                                     60141000
         CONTROLMODE    = BIT(19)#,                                     60142000
         LINERINGING    = BIT(18)#,                                     60143000
         LINEREADY      = BIT(17)#,                                     60144000
         LINEDELAY      = WORD(0,4)#,                                   60145000
         LINETIMEUSED   = WORD(0,5)#,                                   60146000
         LINEADAPTORTYPE= WORD(1,0)#,                                   60147000
         LINEINITIATETRANSMITDELAY                                      60148000
                        = WORD(1,1)#,                                   60149000
         LINEINITIATERECEIVEDELAY                                       60150000
                        = WORD(1,2)#,                                   60151000
         LINETABLESIZE  = 2#;                                           60152000
%                                                                       60153000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60154000
%                                                                       60155000
    DEFINE                                                              60156000
%   DESCSTATIONTABLE                                                    60157000
%                                                                       60158000
         STATIONTIME    = WORD(0,0)#,                                   60159000
         STATIONPRIORITY= WORD(0,1)#,                                   60160000
         STATIONTYPE    = WORD(0,2)#,                                   60161000
         STATIONQUEUED  = BIT(23)#,                                     60162000
         STATIONENABLED = BIT(22)#,                                     60163000
         STATIONREADY   = BIT(21)#,                                     60164000
         STATIONACKNOWLEDGE                                             60165000
                        = BIT(20)#,                                     60166000
         STATIONSEQUENCE= BIT(19)#;                                     60167000
%                                                                       60168000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60169000
%                                                                       60170000
    DEFINE                                                              60171000
%   STATIONTABLE[*]                                                     60172000
%                                                                       60173000
         STATIONBYTES   = WORD(0,W)#,                                   60174000
         STATIONSPECIAL = WORD(0,0)#,                                   60175000
         STATIONETX     = WORD(0,1)#,                                   60176000
         STATIONBACKSPACE                                               60177000
                        = WORD(0,2)#,                                   60178000
         STATIONLINEDELETE                                              60179000
                        = WORD(0,3)#,                                   60180000
         STATIONWRU     = WORD(0,4)#,                                   60181000
         STATIONSEPARATOR                                               60182000
                        = WORD(0,5)#,                                   60183000
%                                                                       60184000
         STATIONQUEUE   = WORD(1,W)#,                                   60185000
%                                                                       60186000
         STATIONRESULTS = WORD(2,0)#,                                   60187000
         STATIONRETRIES = WORD(2,0)#,                                   60188000
         STATIONTALLY   = WORD(2,1)#,                                   60189000
         STATIONBACKSPACETALLY                                          60190000
                        = WORD(2,2)#,                                   60191000
%                                                                       60192000
         STATIONADDRESS = WORD(3,W)#,                                   60193000
%                                                                       60194000
         STATIONTRANSMISSIONNUMBER                                      60195000
                        = WORD(4,W)#,                                   60196000
%                                                                       60197000
         STATIONTOGGLES = WORD(5,5)#,                                   60198000
         STATIONTALLYS  = WORD(5,0)#,                                   60199000
%                                                                       60200000
         STATIONSEQUENCEBASE                                            60201000
                        = WORD(6,W)#,                                   60202000
         STATIONSEQUENCEINCREMENT                                       60203000
                        = WORD(7,W)#,                                   60204000
         STATIONTABLESIZE= 8#;                                          60205000
 DEFINE                                                                 60206000
         RECEIVEADDRESSLENGTH        =  DCPEXW#,                        60207000
         RECEIVETRANSMISSIONLENGTH   =  MADTYPES#,                      60208000
         TRANSMITADDRESSLENGTH       =  ASCIICODE#,                     60209000
         TRANSMITTRANSMISSIONLENGTH  =  ADPARITY#;                      60210000
%                                                                       60211000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60212000
%                                                                       60213000
    DEFINE                                                              60214000
%   MESSAGE[*] =                                                        60215000
%                                                                       60216000
         REQUESTS        = WORD(1,W)#,                                  60217000
%        CLASS          = WORD(1,0)#,                                   60218000
%        KEY            = WORD(1,1)#,                                   60219000
%        VARIANT        = WORD(1,2)#,                                   60220000
%        LINE           = WORD(1,3)#,                                   60221000
%        STATION        = WORD(1,4)#,                                   60222000
         LENGTH         = WORD(1,5)#,                                   60223000
         RESULTS        = WORD(2,W)#,                                   60224000
         REQUESTIGNORED        =  0#,                                   60225000
         CLASSINVALID          =  1#,                                   60226000
         KEYINVALID            =  2#,                                   60227000
         LINEINVALID           =  3#,                                   60228000
         STATIONINVALID        =  4#,                                   60229000
         FUNCTIONUNDEFINED     =  5#,                                   60230000
         CLUSTERMASKINVALID    =  6#,                                   60231000
         VARIANTINVALID        =  7#,                                   60232000
         TEXTINVALID           =  8#,                                   60233000
         TRANSMITABORTED       =  9#,                                   60234000
         RECEIVEABORTED        = 10#,                                   60235000
         LOGICABORTED          = 11#,                                   60236000
         DISCONNECTABORTED     = 12#,                                   60237000
         SWITCHABORTED         = 13#,                                   60238000
         ADAPTORFAULT          = 14#,                                   60239000
         STATUSERROR           = 15#,                                   60240000
         MESSAGEERROR          = 16#,                                   60241000
         TEXTREINITIALIZED     = 17#,                                   60242000
         OK                    = 18#,                                   60243000
         REQUESTCONTINUED      = 19#,                                   60244000
         INCOMPLETEREQUEST     = 20#,                                   60245000
         STATUSPRESENT         = 21#,                                   60246000
%                                                                       60247000
         TIMEOUTFLAG    = BIT(0)#,                                      60248000
         STOPBITFLAG    = BIT(1)#,                                      60249000
         BYTEOVERFLOWFLAG                                               60250000
                        = BIT(2)#,                                      60251000
         BREAKINPUTFLAG = BIT(3)#,                                      60252000
         DISCONNECTFLAG = BIT(4)#,                                      60253000
         BREAKOUTPUTFLAG= BIT(5)#,                                      60254000
         PARITYFLAG     = BIT(6)#,                                      60255000
         BCCFLAG        = BIT(7)#,                                      60256000
         ADDRESSFLAG    = BIT(8)#,                                      60257000
         TRANNOFLAG     = BIT(9)#,                                      60258000
         FORMATFLAG     = BIT(10)#,                                     60259000
         NAKFLAG        = BIT(11)#,                                     60260000
         SPECIALFLAG    = BIT(12)#,                                     60261000
         WRUFLAG        = BIT(13)#,                                     60262000
         SEQNOOVERFLOWFLAG                                              60263000
                        = BIT(14)#,                                     60264000
         TOBEACKNOWLEDGED                                               60265000
                        = BIT(15)#,                                     60266000
         NAKONSELECT    = BIT(16)#,                                     60267000
         ENDOFBUFFERFLAG= BIT(17)#,                                     60268000
         CARRIERFLAG    = BIT(18)#,                                     60269000
%                                                                       60270000
         TEXT           = WORD(3,W)#;                                   60271000
%                                                                       60272000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60273000
%                                                                       60274000
    LABELS                                                              60275000
%                                                                       60276000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60277000
%                                                                       60278000
%                                                                       60279000
%   DCP FAULT LOGIC                                                     60280000
%                                                                       60281000
         FAULTREPORT;                                                   60282000
%                                                                       60283000
 DEFINE                                                                 60284000
         FAULTS                       =  LFTA#;                         60285000
    DEFINE                                                              60286000
         SCANOUTINITIALIZE                                              60287000
                        =  0#,                                          60288000
         LMDATAADDRESS  =  1#,                                          60289000
         LMDATAPARITY   =  2#,                                          60290000
         ADAPTORCLUSTER =  3#,                                          60291000
         MMPROTECT      =  4#,                                          60292000
         HALTLOAD       =  5#,                                          60293000
         MMDATAPARITY   =  6#,                                          60294000
         MMACCESS       =  7#,                                          60295000
         LMINSTTAG      =  8#,                                          60296000
         LMINSTADDRESS  =  9#,                                          60297000
         LMINSTPARITY   = 10#,                                          60298000
         DCPTIMEOUT     = 11#,                                          60299000
         MMINSTTAG      = 12#,                                          60300000
         MMINSTADDRESS  = 13#,                                          60301000
         MMINSTPARITY   = 14#,                                          60302000
         MMINSTACCESS   = 15#,                                          60303000
         DOUBLEFAULT    = 16#;                                          60304000
%                                                                       60305000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60306000
%                                                                       60307000
%    MISCELLANEOUS LABELS                                               60308000
%                                                                       60309000
    LABELS                                                              60310000
         ENDOFCODE,                                                     60311000
         ENDOFTABLES,                                                   60312000
         ENDOFMEMORY,                                                   60313000
         ENDOFLOAD,                                                     60314000
         CONTROLBLOCK,                                                  60315000
         TERMINALVECTOR,                                                60316000
         LINEVECTOR;                                                    60317000
%                                                                       60318000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60319000
%                                                                       60320000
    LABELS                                                              60321000
%   CONTINUITY                                                          60322000
%                                                                       60323000
         YIELD,                                                         60324000
         CONTROL,                                                       60325000
         CHECKFORBACKUP,                                                60326000
         NOTHINGTODO,                                                   60327000
         CLUSTER,                                                       60328000
         SYSTEM;                                                        60329000
%                                                                       60330000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60331000
%                                                                       60332000
%   MESSAGECONTROL                                                      60333000
%                                                                       60334000
    DEFINE                                                              60335000
%   MESSAGE CLASSES                                                     60336000
         NULLREQUEST            = 0#,                                   60337000
         SETCLUSTERMASK         = 1#,                                   60338000
%                                                                       60339000
         ENTERCONTROLMODE       = 2#,                                   60340000
         ADAPTORWRITE           = 3#,                                   60341000
         ACTIVEINTERROGATE      = 4#,                                   60342000
         PASSIVEINTERROGATE     = 5#,                                   60343000
         ENTERNORMALMODE        = 6#,                                   60344000
%                                                                       60345000
         REINITIALIZEDOUTPUT    = 7#,                                   60346000
         REINITIALIZEDINPUT     = 8#,                                   60347000
         REINITIALIZEDENABLEDINPUT                                      60348000
                                = 9#,                                   60349000
         INITIATEDEFERRED       =10#,                                   60350000
         OUTPUT                 =10#,                                   60351000
         INPUT                  =11#,                                   60352000
         ENABLEINPUT            =12#,                                   60353000
         RESETSTATIONCHARACTERS =13#,                                   60354000
         SETADAPTORTYPE         =14#,                                   60355000
         INTERROGATESTATUS      =15#,                                   60356000
         SETSTATIONREADY        =16#,                                   60357000
         SETTRANSMISSIONNUMBER  =17#,                                   60358000
         SETSTATIONCHARACTERS   =18#,                                   60359000
         SETSEQUENCEMODE        =19#,                                   60360000
         ABORTED                =20#,                                   60361000
         ENABLEDINPUT           =21#,                                   60362000
         LOOKFORRING            =22#,                                   60363000
         BREAK                  =23#,                                   60364000
         DISCONNECT             =24#,                                   60365000
         SETSTATIONTYPE         =25#,                                   60366000
         SETSTATIONADDRESS      =26#,                                   60367000
         RECALLSTATION          =27#,                                   60368000
         ANSWER                 =28#,                                   60369000
         CLASSMAX               =28#,                                   60370000
         INDEXMAX               =20#;                                   60371000
 DEFINE                                                                 60372000
         REQUEST                      =  BCLASCII#,                     60373000
         INITIATE                     =  SWT#,                          60374000
         INDEXEDFUNCTION[I1,I2]              =  REMOTETYPE[8|I1+I2]#,   60375000
         INDEXEDINITIATE              =  SWR#;                          60376000
 DEFINE                                                                 60377000
         FUNCTIONTYPE                =  SYNCAD8#,                       60378000
         MANYFUNCTIONSETS            =  NTC#,                           60379000
         FUNCTIONSETINDEX            =  NAV#;                           60380000
    LABELS                                                              60381000
         DISCONNECTED,                                                  60382000
         CONNECTED,                                                     60383000
         INITIATEREQUEST,                                               60384000
         INITIATES,                                                     60385000
         INVALIDCLASS,                                                  60386000
         INITIALIZELINE,                                                60387000
         INVALIDLINE,                                                   60388000
         INITIALIZEADAPTOR,                                             60389000
         LINEREQUEST,                                                   60390000
         INITIATECONTROL,                                               60391000
         TERMINATECONTROL,                                              60392000
         INVALIDSTATION,                                                60393000
         INITIALIZESTATION,                                             60394000
         STATIONREQUEST,                                                60395000
         CONDITIONALREQUEST,                                            60396000
         QUEUEINSTATION,                                                60397000
         FIRSTREQUEST,                                                  60398000
         REMOVEFROMSTATIONQUEUEANDCOPY,                                 60399000
         REMOVEFROMSTATIONQUEUE,                                        60400000
         STATIONQUEUEINSERT,                                            60401000
         QUEUEINWAIT,                                                   60402000
         NULLWAITQUEUE,                                                 60403000
         IGNOREREQUEST,                                                 60404000
         REQUESTSTATUSERROR,                                            60405000
         INITIATEIFSUSPENDED,                                           60406000
         INITIATEIFIDLE,                                                60407000
         UNDEFINEDFUNCTION,                                             60408000
         INVALIDKEY,                                                    60409000
         GETENABLEDSPACEFORINSERT,                                      60410000
         GETENABLEDSPACEFORREMOVAL,                                     60411000
         GETENABLEDSPACE,                                               60412000
         GETLABELEDSPACE,                                               60413000
         GETSPACE,                                                      60414000
         SPACEAVAILABLE,                                                60415000
         GETMORESPACE,                                                  60416000
         GETNOSPACE,                                                    60417000
         REPLACEENABLEDSPACE,                                           60418000
         REPLACESPACE,                                                  60419000
         IMMEDIATEEXIT,                                                 60420000
         TERMINATEANDINITIATE,                                          60421000
         TERMINATEREQUESTINPUT,                                         60422000
         TERMINATEREQUESTOUTPUT,                                        60423000
         TERMINATEERRORINPUT,                                           60424000
         TERMINATEERROROUTPUT,                                          60425000
         TERMINATENOINPUT,                                              60426000
         TERMINATEENABLEINPUT,                                          60427000
         TERMINATEINCOMPLETEINPUT,                                      60428000
         TERMINATENORMALOUTPUT,                                         60429000
         TERMINATENORMALINPUT,                                          60430000
         TERMINATENORMAL,                                               60431000
         TERMINATEWITHSTATUS,                                           60432000
         INITIALIZETEXT,                                                60433000
         REINITIALIZETOFIRSTSEGMENT,                                    60434000
         INITIATESUSPENDEDLINE,                                         60435000
         INITIATESTATIONQUEUE,                                          60436000
         ABORT,                                                         60437000
         ABORTTRANSMIT,                                                 60438000
         ABORTRECEIVE,                                                  60439000
         ABORTLOGIC,                                                    60440000
         ABORTDISCONNECT,                                               60441000
         ABORTSWITCH;                                                   60442000
%                                                                       60443000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .860444000
%                                                                       60445000
%   SELECTED MESSAGE CONTROL                                            60446000
%                                                                       60447000
    LABELS ARRAY                                                        60448000
         LINECONTROLTYPES[0:INDEXMAX];                                  60449000
%                                                                       60450000
    DEFINE                                                              60451000
         LINECONTROLTYPE             =  LINEFORWARDLINK#;               60452000
 %                                                                      60453000
    DEFINE                                                              60454000
         CONTENTION = 0#,                                               60455000
         POLLED     = 1#,                                               60456000
         HYPBRID    = 2#;                                               60457000
%                                                                       60458000
    LABELS                                                              60459000
         INITIATELINE,                                                  60460000
         SUSPENDLINE,                                                   60461000
         MONITORLINE,                                                   60462000
         IDLELINE;                                                      60463000
%                                                                       60464000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60465000
%                                                                       60466000
%   POLLING LOGIC                                                       60467000
%                                                                       60468000
    DEFINE                                                              60469000
         POLLINGOPTION               =  SUMTOG#;                        60470000
    LABELS                                                              60471000
         INITIATEPOLLEDLINE,                                            60472000
         SELECTPOLLEDSTATION,                                           60473000
         INTERROGATEPOLLEDSTATION,                                      60474000
         TESTPOLLEDLINE,                                                60475000
         POLLEDSTATIONQUEUED,                                           60476000
         POLLEDSTATIONENABLED;                                          60477000
%                                                                       60478000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60479000
%                                                                       60480000
%   CONTENTION LOGIC                                                    60481000
 %                                                                      60482000
    DEFINE                                                              60483000
         CONTENTIONOPTION            =  NEWTOG#;                        60484000
    LABELS                                                              60485000
         INITIATECONTENTIONLINE,                                        60486000
         INITIALIZECONTENTIONLINE,                                      60487000
         WAITINGFORCONTENTION;                                          60488000
%                                                                       60489000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60490000
%                                                                       60491000
%   TRANSMISSION NUMBER LOGIC                                           60492000
%                                                                       60493000
    DEFINE                                                              60494000
         TRANNOOPTION                =  SINGLETOG#;                     60495000
%                                                                       60496000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60497000
%                                                                       60498000
%   SEQUENCE NUMBER LOGIC                                               60499000
%                                                                       60500000
    DEFINE                                                              60501000
         SEQNOOPTION                 =  BON#;                           60502000
%                                                                       60503000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60504000
%                                                                       60505000
%   TRANSFERTEXT                                                        60506000
%                                                                       60507000
    DEFINE                                                              60508000
         LOAD                         =  DCPNL#,                        60509000
         STORE                        =  DCPNS#;                        60510000
%                                                                       60511000
    LABELS                                                              60512000
         LOADBYTE,                                                      60513000
         LOADCHARACTER,                                                 60514000
         LOADNONE,                                                      60515000
         LOADSEGMENT,                                                   60516000
         STOREBYTE,                                                     60517000
         STORESEGMENT,                                                  60518000
         STORECHARACTER,                                                60519000
         STORENONE,                                                     60520000
         STORECLOSE,                                                    60521000
         STORECLOSEUNOPENED,                                            60522000
         STOREBACKSPACE,                                                60523000
         STOREBACKSPACESEGMENTED;                                       60524000
%                                                                       60525000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60526000
%                                                                       60527000
%   TRANSMIT, RECEIVE BYTE                                              60528000
%                                                                       60529000
    LABELS                                                              60530000
         INCREMENTTRANSMITNUMBER,                                       60531000
         INCREMENTRECEIVENUMBER,                                        60532000
         INCREMENTSEQUENCENUMBER,                                       60533000
         STOREADDRESS,                                                  60534000
         LOADADDRESS,                                                   60535000
         INTERROGATEADDRESS,                                            60536000
         STORETRANSMISSIONNUMBER,                                       60537000
         LOADTRANSMISSIONNUMBER,                                        60538000
         INTERROGATETRANSMISSIONNUMBER,                                 60539000
         LOADSEQUENCENUMBER,                                            60540000
         INITIALIZESEQUENCENUMBER,                                      60541000
         LOADTIMEOUT,                                                   60542000
         LOADINITIATERECEIVEDELAY,                                      60543000
         LOADINITIATETRANSMITDELAY,                                     60544000
         SETWRUFLAG,                                                    60545000
         SETSPECIALFLAG,                                                60546000
         LOADMESSAGEWORD,                                               60547000
         LOADRESULTWORD,                                                60548000
         LOADREGISTERWORD,                                              60549000
         LOADTERMINALWORD,                                              60550000
         LOADCHARACTERWORD,                                             60551000
         WAITFORBYTEREQUEST,                                            60552000
         EDITSYNCHRONOUSLINE,                                           60553000
         WAITFORTIMER,                                                  60554000
         MONITORSYNCHRONOUSLINE,                                        60555000
         TRANSMITERROR,                                                 60556000
         RECEIVEERROR;                                                  60557000
%                                                                       60558000
     INTEGER                                                            60559000
         TIMER;                                                         60560000
%                                                                       60561000
    DEFINE                                                              60562000
         TIMEOUT               = 0#,                                    60563000
         STOPBITERROR          = 1#,                                    60564000
         BYTEOVERFLOW          = 2#,                                    60565000
         BREAKRECEIVE          = 3#,                                    60566000
         PARITYERROR           = 4#,                                    60567000
         LOSSOFCARRIERRECEIVE = 5#,                                     60568000
         RECEIVECONDITIONMAX  = 5#,                                     60569000
         BREAKTRANSMIT        = 6#,                                     60570000
         LOSSOFCARRIERTRANSMIT= 7#,                                     60571000
         TRANSMITCONDITIONMAX = 7#,                                     60572000
         FORMATERROR          = 8#,                                     60573000
         BCCERROR             = 9#,                                     60574000
         ENDOFBUFFER          =10#,                                     60575000
         TRANNOERROR          =11#,                                     60576000
         ADDRESSERROR         =12#,                                     60577000
         CONDITIONMAX         =12#;                                     60578000
%                                                                       60579000
    DEFINE                                                              60580000
         ERRORS                       =  TACCUM#;                       60581000
 %                                                                      60582000
    DEFINE                                                              60583000
         DIRECTORY[DIRECTORY1]         = ENDOFTABLES-2|DIRECTORY1#;     60584000
%                                                                       60585000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60586000
%                                                                       60587000
%    TO LOAD A WORD OF THE TERMINAL TABLE                               60588000
%    ASSUMING STATIONTABLE IS VALID                                     60589000
%                                                                       60590000
    PROCEDURE LOADTERMINALTABLE(I,EBUS);                                60591000
         VALUE I,EBUS;                                                  60592000
         REAL  I,EBUS;                                                  60593000
    BEGIN                                                               60594000
         LMRI(STATIONTABLE,EBUS);                                       60595000
         MOVE(WRL(1),NO);                                               60596000
         LMRD(DIRECTORY[3]);                                            60597000
         HAD (WRR(0),MA);                                               60598000
         IF I!0 THEN                                                    60599000
              HADB((TERMINALMAX)|I,MA);                                 60600000
         LMRI(MA,NO);                                                   60601000
    END;                                                                60602000
%                                                                       60603000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60604000
%                                                                       60605000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60606000
%                                                                       60607000
    PROCEDURE LOADLINEDESCRIPTOR(EBUS);                                 60608000
         VALUE EBUS;                                                    60609000
         REAL  EBUS;                                                    60610000
    BEGIN                                                               60611000
         LMRD(DIRECTORY[2]);                                            60612000
         MOVE(WRR(7),EBUS);                                             60613000
         HAD (LINE,MA);                                                 60614000
         LMRI(MA,NO);                                                   60615000
    END;                                                                60616000
%                                                                       60617000
%                                                                       60618000
%   TO LOAD A WORD OF THE LINETABLE,                                    60619000
%   TEMPORARILY SAVING MA ON THE EBUS, IF NECESSARY,                    60620000
%   ASSUMING LINE IS VALID.                                             60621000
%                                                                       60622000
    PROCEDURE LOADLINETABLE(WORD,EBUS);                                 60623000
         VALUE WORD,EBUS;                                               60624000
         REAL  WORD,EBUS;                                               60625000
    BEGIN                                                               60626000
         LMRD(DIRECTORY[2]);                                            60627000
         MOVE(WRR(7),EBUS);                                             60628000
         HAD (LINE,MA);                                                 60629000
         LMRI(MA,NO);                                                   60630000
         IF WORD=0 THEN                                                 60631000
              LMRI(WRR(3),NO)                                           60632000
         ELSE                                                           60633000
         BEGIN                                                          60634000
              MOVE(WRR(3),NO);                                          60635000
              HADB(WORD,MA);                                            60636000
              LMRI(MA,NO);                                              60637000
         END;                                                           60638000
    END;                                                                60639000
%                                                                       60640000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60641000
%                                                                       60642000
%   TO LOAD A WORD OF THE STATIONTABLE,                                 60643000
%   ASSUMING STATIONTABLE IS VALID.                                     60644000
%                                                                       60645000
    PROCEDURE LOADSTATIONTABLE(I,EBUS);                                 60646000
         VALUE I,EBUS;                                                  60647000
         REAL  I,EBUS;                                                  60648000
    BEGIN                                                               60649000
         LMRI(STATIONTABLE,EBUS);                                       60650000
         IF I=0 THEN                                                    60651000
              LMRI(WRR(3),NO)                                           60652000
         ELSE                                                           60653000
         BEGIN                                                          60654000
              MOVE(WRR(3),NO);                                          60655000
              HADB(I,MA);                                               60656000
              LMRI(MA,NO);                                              60657000
         END;                                                           60658000
    END;                                                                60659000
%                                                                       60660000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60661000
%                                                                       60662000
    PROCEDURE LOADADDRESSBLOCK(I,EBUS);                                 60663000
         VALUE I,EBUS;                                                  60664000
         REAL I,EBUS;                                                   60665000
    IF I = 0 THEN                                                       60666000
         BEGIN                                                          60667000
              LMRD(DIRECTORY[4]);                                       60668000
              MMR (WRR(7),EBUS);                                        60669000
         END                                                            60670000
    ELSE                                                                60671000
    BEGIN                                                               60672000
              LMRD(DIRECTORY[4]);                                       60673000
              MOVE(WRR(7),EBUS);                                        60674000
         HADB(I,MA);                                                    60675000
         MMR (MA,NO);                                                   60676000
    END;                                                                60677000
%                                                                       60678000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60679000
%                                                                       60680000
    PROCEDURE LOADMESSAGE(I,EBUS);                                      60681000
         VALUE I,EBUS;                                                  60682000
         REAL I,EBUS;                                                   60683000
    IF I = 0 THEN                                                       60684000
         MMR (MESSAGESTART,EBUS)                                        60685000
    ELSE                                                                60686000
    BEGIN                                                               60687000
         MOVE(MESSAGESTART,EBUS);                                       60688000
         HADB(I,MA);                                                    60689000
         MMR (MA,NO);                                                   60690000
    END;                                                                60691000
%                                                                       60692000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60693000
%                                                                       60694000
%   SUBROUTINE LOGIC                                                    60695000
%                                                                       60696000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60697000
%                                                                       60698000
%   TO CALL A SUBROUTINE                                                60699000
%                                                                       60700000
    PROCEDURE CALL(SUBROUTINE);                                         60701000
         REAL SUBROUTINE;                                               60702000
         BKP (0,SUBROUTINE);                                            60703000
%                                                                       60704000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60705000
%                                                                       60706000
%   TO RETURN FROM A SUBROUTINE,                                        60707000
%   TO THE CALLER,                                                      60708000
%   POSSIBLY JUMPING SYLLABLES FROM THE CALL SYLLABEL;                  60709000
%                                                                       60710000
    PROCEDURE EXIT(JUMP);                                               60711000
         VALUE JUMP;                                                    60712000
         REAL JUMP;                                                     60713000
         IF JUMP = 0 THEN                                               60714000
            MOVE(OLDMA,IA) ELSE                                         60715000
            HADB(JUMP,IA);                                              60716000
%                                                                       60717000
%                                                                       70000000
COMMENT#################################################################70001000
                   FAULT ROUTINES                                       70002000
#######################################################################;70003000
%                                                                       70004000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70005000
%                                                                       70006000
    PROCEDURE FAULTCODE;                                                70007000
    BEGIN                                                               70008000
    DEFINE RESETFAULT=                                                  70009000
         LANC(SAME,CF,255-(BIT(19)).[7:8])#;                            70010000
    INTEGER I;                                                          70011000
%                                                                       70012000
    WRITESTARS;                                                         70013000
    HEADING("FAULT CODE");                                              70014000
%                                                                       70015000
         FOR I:=0 STEP 1 UNTIL 16 DO                                    70016000
         GOTO(UNC,FAULTS[I]);                                           70017000
%                                                                       70018000
    LABL(FAULTS[ADAPTORCLUSTER]);                                       70019000
         HEADING("FAULT[ADAPTOR-CLUSTER]");                             70020000
%                                                                       70021000
         RESETFAULT;                                                    70022000
         LORB(NO,ADAPTORFAULT,D);                                       70023000
         GOTO(UNC,ABORT);                                               70024000
%                                                                       70025000
    LABL(FAULTS[HALTLOAD]);                                             70026000
         HEADING("FAULT[HALT/LOAD]");                                   70027000
%                                                                       70028000
         IDLE;                                                          70029000
%                                                                       70030000
         FOR I:=0 STEP 1 UNTIL 16 DO                                    70031000
         IF I NEQ ADAPTORCLUSTER THEN                                   70032000
         IF I NEQ HALTLOAD THEN                                         70033000
         IF I NEQ SCANOUTINITIALIZE THEN                                70034000
              BEGIN                                                     70035000
              LABL(FAULTS[I]);                                          70036000
              LORB(NO,I,MA2);                                           70037000
              GOTO(UNC,FAULTREPORT);                                    70038000
              END;                                                      70039000
%                                                                       70040000
    LABL(FAULTREPORT);                                                  70041000
         HEADING("FAULT REPORT");                                       70042000
%                                                                       70043000
         LMRD(DIRECTORY[4]);                                            70044000
         MOVE(FAULT,WRL(7));                                            70045000
         MOVE(WRR(7),WRR(7));                                           70046000
         HADB(FAULTQUEUE.INDEX,MA);                                     70047000
         MMW (MA,NO);                                                   70048000
%                                                                       70049000
         HADB(1,MA);                                                    70050000
         SMRD(AA+3,NO);                                                 70051000
         MMW (MA,NO);                                                   70052000
%                                                                       70053000
         HAD (MA,MA);                                                   70054000
         MOVE(MA,IBA);                                                  70055000
         HEYU;                                                          70056000
         GOTO(UNC,MM(0,R));                                             70057000
%                                                                       70058000
    END;                                                                70059000
%                                                                       71000000
COMMENT#################################################################71001000
                   CONTINUITY ROUTINES                                  71002000
#######################################################################;71003000
%                                                                       71004000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71005000
%                                                                       71006000
    PROCEDURE CONTINUITY;                                               71007000
%                                                                       71008000
%   CENTRAL DCP PROGRAM LOGIC FOR PROCESSOR ALLOCATION.                 71009000
%                                                                       71010000
    BEGIN REAL SEGMENT;                                                 71011000
%                                                                       71012000
    WRITESTARS;                                                         71013000
    HEADING("CONTINUITY");                                              71014000
%                                                                       71015000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71016000
%                                                                       71017000
    LABL(YIELD);                                                        71018000
         HEADING("YIELD");                                              71019000
%                                                                       71020000
%   ROUTINE ALLOWING THE PROGRAM INVOKED FOR A LINE TO YIELD THE        71021000
%   PROCESSOR TO PERFORM OTHER FUNCTIONS BY STORING FOUR CONTROL WORDS  71022000
%   AND THE RETURN ADDRESS FOR THE LINE IN THE CONTROL BLOCK.           71023000
%                                                                       71024000
         LMRD(DIRECTORY[1]);                                            71025000
         MOVE(WRR(7),HALF(SM(7,W),R));                                  71026000
         HAD (LINE,MA);                                                 71027000
         SMRD(SM(7,W),NO);                                              71028000
         LMWI(MA,NO);                                                   71029000
         HADB(LINES,MA);                                                71030000
         SMRD(SM(6,W),NO);                                              71031000
         LMWI(MA,NO);                                                   71032000
         HADB(LINES,MA);                                                71033000
         SMRD(SM(5,W),NO);                                              71034000
         LMWI(MA,NO);                                                   71035000
         HADB(LINES,MA);                                                71036000
         SMRD(SM(3,W),NO);                                              71037000
         LMWI(MA,NO);                                                   71038000
%                                                                       71039000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71040000
%                                                                       71041000
    LABL(FAULTS[SCANOUTINITIALIZE]);                                    71042000
    LABL(CONTROL);                                                      71043000
         HEADING("CONTROL");                                            71044000
%                                                                       71045000
%   USED TO TRANSFER CONTROL OF THE PROCESSOR TO AN APPROPRIATE R0UTINE 71046000
%   FOR NEXT INITIATED ACTION.                                          71047000
%                                                                       71048000
         BRAN(SYSTEM);                                                  71049000
         ARIN(CLUSTER);                                                 71050000
         TEST(SYSTEMWORD,REQUESTQUEUEBUSY);                             71051000
         GOTO(NONZERO,SYSTEM);                                          71052000
%                                                                       71053000
    LABL(CHECKFORBACKUP);                                               71054000
         HEADING("CHECKFORBACKUP");                                     71055000
%                                                                       71056000
%   MAINTAINS THE RESULT QUEUE.                                         71057000
%                                                                       71058000
         RESET(SYSTEMWORD,REQUESTQUEUEBUSY);                            71059000
         TEST(SYSTEMWORD,WAITQUEUEBUSY);                                71060000
         GOTO(ZERO,NOTHINGTODO);                                        71061000
%                                                                       71062000
         LOADADDRESSBLOCK(RESULTQUEUE.INDEX,NO);                        71063000
         TEST(WR(W),NULL);                                              71064000
         GOTO(ZERO,NOTHINGTODO);                                        71065000
%                                                                       71066000
         LOADADDRESSBLOCK(WAITQUEUE.INDEX,ADDRESS);                     71067000
         MMW (ADDRESS,NO);                                              71068000
         RESET(SYSTEMWORD,WAITQUEUEBUSY);                               71069000
%                                                                       71070000
    LABL(NOTHINGTODO);                                                  71071000
         HEADING("NOTHINGTODO");                                        71072000
%                                                                       71073000
%   IDLES DCP PROCESSOR UNTIL INTERRRUPED TO MAINTAIN EITHER THE SYSTEM 71074000
%   OR THE CLUSTER.                                                     71075000
%                                                                       71076000
         ARWN(SYSTEM);                                                  71077000
%                                                                       71078000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71079000
%                                                                       71080000
    LABL(CLUSTER);                                                      71081000
         HEADING("CLUSTER");                                            71082000
%                                                                       71083000
%   ROUTINE USED TO PROCESS A CAN BY LOADING THE FOUR CONTROL WORDS     71084000
%   FROM THE CONTROL BLOCK AND BRANCHING TO THE SPECIFIED RETURN ADDRESS71085000
%                                                                       71086000
         LMRD(DIRECTORY[1]);                                            71087000
         MOVE(WRR(7),NO);                                               71088000
         LOR (NO,AA,BYTE(LINE,2));                                      71089000
         HAD (LINE,MA);                                                 71090000
         LMRI(MA,NO);                                                   71091000
         SMWD(MA,SM(7,W));                                              71092000
         HADB(LINES,MA);                                                71093000
         LMRI(MA,NO);                                                   71094000
         SMWD(MA,SM(6,W));                                              71095000
         HADB(LINES,MA);                                                71096000
         LMRI(MA,NO);                                                   71097000
         SMWD(MA,SM(5,W));                                              71098000
         HADB(LINES,MA);                                                71099000
         LMRI(MA,NO);                                                   71100000
         SMWD(SM(7,R),SM(3,W));                                         71101000
         MOVE(MA,IA);                                                   71102000
%                                                                       71103000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71104000
%                                                                       71105000
    LABL(SYSTEM);                                                       71106000
          HEADING("SYSTEM");                                            71107000
%                                                                       71108000
%   FOR MAINTAINANCE OF THE REQUEST QUEUE AND REMOVING REQUESTS FROM    71109000
%   THE QUEUE FOR INITIATION                                            71110000
%                                                                       71111000
         SET (SYSTEMWORD,REQUESTQUEUEBUSY);                             71112000
         ARIN(CLUSTER);                                                 71113000
         LOADADDRESSBLOCK(REQUESTQUEUE.INDEX,NO);                       71114000
         TEST(WR(W),NULL);                                              71115000
         GOTO(NONZERO,CHECKFORBACKUP);                                  71116000
%                                                                       71117000
         SMWD(MA,QUEUEWORD);                                            71118000
         MMR (WRR(7),ADDRESS);                                          71119000
         MOVE(WRR(7),MESSAGESTART);                                     71120000
         SET(WR(W),NULL);                                               71121000
         MMW (MESSAGESTART,QUEUEHEAD);                                  71122000
%                                                                       71123000
         SMRD(QUEUEWORD,NO);                                            71124000
         MMW (ADDRESS,MESSAGEEND);                                      71125000
         TEST(WR(W),NULL);                                              71126000
         GOTO(ZERO,INITIATEREQUEST);                                    71127000
         RESET(SYSTEMWORD,REQUESTQUEUEBUSY);                            71128000
         GOTO(UNC,INITIATEREQUEST);                                     71129000
%                                                                       71130000
     END;                                                               71131000
%                                                                       71132000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71133000
%                                                                       71134000
    PROCEDURE SLEEP;                                                    71135000
         BKP(0,YIELD);                                                  71136000
%                                                                       71137000
% * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 71138000
%                                                                       71139000
%   A COLLECTION OF LOGIC AND SUBROUTINES IMPLEMENTING                  71140000
%   CONTROL OF INITIATION AND TERMINATION OF                            71141000
%   REQUESTED OR ENABLED FUNCTIONS.                                     71142000
%                                                                       71143000
    PROCEDURE RESULT(A);                                                71144000
         VALUE A;                                                       71145000
         REAL  A;                                                       71146000
    FORWARD;                                                            71147000
%                                                                       71148000
%                                                                       72000000
COMMENT#################################################################72001000
                   MESSAGE CONTROL ROUTINES                             72002000
#######################################################################;72003000
%                                                                       72004000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72005000
%                                                                       72006000
    PROCEDURE MESSAGECONTROL;                                           72007000
    BEGIN                                                               72008000
         INTEGER CLASS;                                                 72009000
%                                                                       72010000
    WRITESTARS;                                                         72011000
    HEADING("MESSAGE CONTROL");                                         72012000
%                                                                       72013000
    LABL(INITIATEREQUEST);                                              72014000
         HEADING("INITIATEREQUEST");                                    72015000
%                                                                       72016000
%   TO EXAMINE THE REQUEST JUST TAKEN FROM THE REQUEST QUEUE, AND,      72017000
%   POSSIBLY, INITIATE THE REQUESTED FUNCTION.                          72018000
%                                                                       72019000
         LOADMESSAGE(REQUESTS.INDEX,NO);                                72020000
         SMWD(NO,MESSAGE);                                              72021000
%                                                                       72022000
         LOR (NO,MESSAGECLASS,X);                                       72023000
         SUBB(X,CLASSMAX,NO);                                           72024000
         GOX (IFLEQ,SELF+2);                                            72025000
         GOTO(UNC,INVALIDCLASS);                                        72026000
%                                                                       72027000
         FOR CLASS:=0 STEP 1 UNTIL CLASSMAX DO                          72028000
         GOTO(UNC,REQUEST[CLASS]);                                      72029000
%                                                                       72030000
    LABL(INITIATES);                                                    72031000
         HEADING("INITIATES");                                          72032000
%                                                                       72033000
         FOR CLASS := INITIATEDEFERRED STEP 1 UNTIL CLASSMAX DO         72034000
         GOTO(UNC,INITIATE[CLASS]);                                     72035000
%                                                                       72036000
%                                                                       72037000
    LABL(INVALIDCLASS);                                                 72038000
         HEADING("INVALIDCLASS");                                       72039000
%                                                                       72040000
%   FOR NOTIFING THE SYSTEM THAT THE CURRENT REQUEST IS  UNDEFINED      72041000
%                                                                       72042000
         RESULT(CLASSINVALID);                                          72043000
         CALL(QUEUEINWAIT);                                             72044000
         GOTO(UNC,CONTROL);                                             72045000
%                                                                       72046000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72047000
%                                                                       72048000
    LABL(INITIALIZELINE);                                               72049000
         HEADING("INITIALIZELINE");                                     72050000
%                                                                       72051000
%   FOR CHECKING MESSAGELINE AS BEING A DEFINED LINE AND IF SO          72052000
%   INITIALIZING LINE AND AA TO THAT VALUE.                             72053000
%                                                                       72054000
         SUBC(NO,MESSAGELINE,LINEMAX);                                  72055000
         GOTO(IFLSS,INVALIDLINE);                                       72056000
         SUBC(NO,MESSAGELINE,LINEMIN);                                  72057000
         GOTO(IFGTR,INVALIDLINE);                                       72058000
         LOR (NO,MESSAGELINE,BYTE(LINE,2));                             72059000
         LOR (NO,MESSAGELINE,AA);                                       72060000
         EXIT(0);                                                       72061000
%                                                                       72062000
    LABL(INVALIDLINE);                                                  72063000
%                                                                       72064000
%   FOR NOTIFING THE SYSTEM THAT THE CURRENT REQUEST ADDRESSES AN       72065000
%   UNDEFINED LINE NUMBER.                                              72066000
%                                                                       72067000
         RESULT(LINEINVALID);                                           72068000
         CALL(QUEUEINWAIT);                                             72069000
         GOTO(UNC,CONTROL);                                             72070000
%                                                                       72071000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72072000
%                                                                       72073000
    LABL(INITIALIZEADAPTOR);                                            72074000
         HEADING("INITIALIZE ADAPTOR");                                 72075000
%                                                                       72076000
%   FOR INITIALIZING A LINE ADAPTER TO THE TYPE SPECIFIED IN THE LINE   72077000
%   TABLE AND CLEARING THE IR REGISTER ON LEASED LINES.                 72078000
%                                                                       72079000
         LOADLINETABLE(LINEADAPTORTYPE.INDEX,SAVEONE);                  72080000
         LOR (NO,WR(W)+LINEADAPTORTYPE.FIELD,AI);                       72081000
         AWI (2,ACSETTYPE,0);                                           72082000
         LOADLINEDESCRIPTOR(NO);                                        72083000
         RESET(WR(W),LINESYNCHRONOUS);                                  72084000
         LANC(X,AI,24);                                                 72085000
         LEOC(SAME,X,8);                                                72086000
         GOTO(NONZERO,SELF+2);                                          72087000
         SET (WR(W),LINESYNCHRONOUS);                                   72088000
         LMWI(MA,NO);                                                   72089000
         SMWD(SAVEONE,LINEDESCRIPTOR);                                  72090000
         TEST(WR(W),LINEDIALIN+LINEDIALOUT);                            72091000
         GOTO(NONZERO,IMMEDIATEEXIT);                                   72092000
         AWI (3,6,0);                                                   72093000
         EXIT(0);                                                       72094000
%                                                                       72095000
    LABL(LINEREQUEST);                                                  72096000
         HEADING("LINE REQUEST");                                       72097000
%                                                                       72098000
%   FOR LOADING THE APPROIATE LINE DESCRIPTOR AND SETTING LINETABLE TO  72099000
%   THE ADDRESS OF THE ASSOCIATED LINE TABLE.                           72100000
%                                                                       72101000
         CALL(INITIALIZELINE);                                          72102000
         LOADLINEDESCRIPTOR(SAVEONE);                                   72103000
         SMWD(WRR(7),LINEDESCRIPTOR);                                   72104000
         MOVE(SAVEONE,LINETABLE);                                       72105000
         EXIT(0);                                                       72106000
%                                                                       72107000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72108000
%                                                                       72109000
    LABL(INITIATECONTROL);                                              72110000
         HEADING("INITIATECONTROL");                                    72111000
%                                                                       72112000
%   HOUSEKEEPING PRECEEDING THE UNCONDITIONAL                           72113000
%   INITIATION OF CONTROL MODE LINE REQUESTS                            72114000
%                                                                       72115000
         CALL(INITIALIZELINE);                                          72116000
         LOADLINETABLE(LINESTATUS.INDEX,SAVEONE);                       72117000
         LOR (NO,WR(W)+LINESTATUS.FIELD,X);                             72118000
         SET (WR(W),LINEBUSY+CONTROLMODE);                              72119000
         LEO (X,WR(W)+LINESTATUS.FIELD,NO);                             72120000
         GOTO(IFEQL,REQUESTSTATUSERROR);                                72121000
         RESET(WR(W),LINESUSPENDED+LINESWITCHING);                      72122000
         LMWI(MA,LINETABLE);                                            72123000
         LOR (NO,MESSAGEKEY,AC);                                        72124000
         LOR (NO,MESSAGEVARIANT,AI);                                    72125000
         MOVE(SAVEONE,NO);                                              72126000
         EXIT(0);                                                       72127000
%                                                                       72128000
    LABL(TERMINATECONTROL);                                             72129000
         HEADING("TERMINATE CONTROL");                                  72130000
%                                                                       72131000
%   ROUTINE USED FOR TERMINATING                                        72132000
%   ALL CONTROL MODE REQUESTS.                                          72133000
%                                                                       72134000
         LMRI(LINETABLE,NO);                                            72135000
         RESET(WR(W),LINEBUSY);                                         72136000
         LMWI(MA,NO);                                                   72137000
         LORB(NO,STATUSPRESENT,RESULTTYPE);                             72138000
         CALL(TERMINATEWITHSTATUS);                                     72139000
         SLEEP;                                                         72140000
         GOTO(UNC,CONTROL);                                             72141000
%                                                                       72142000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72143000
%                                                                       72144000
    LABL(INVALIDSTATION);                                               72145000
         HEADING("INVALIDSTATION");                                     72146000
%                                                                       72147000
%   ROUTINE USED TO NOTIFY THE SYSTEM THAT THE CURRENT REQUEST          72148000
%   ADDRESSES AN UNDEFINED STATION NUMBER ON THE DESIRED LINE.          72149000
%                                                                       72150000
         RESULT(STATIONINVALID);                                        72151000
         CALL(QUEUEINWAIT);                                             72152000
         GOTO(UNC,CONTROL);                                             72153000
%                                                                       72154000
    LABL(INITIALIZESTATION);                                            72155000
         HEADING("INITIALIZESTATION");                                  72156000
%                                                                       72157000
%   CHECKS MESSAGESTATION TO BE A VALID STATION ON THE REQUESTED LINE,  72158000
%   SETS STATIONTABLE EQUAL TO THE ADDRESS OF THE APROPRIATE STATION    72159000
%   DESCRIPTOR,SETS STATION EQUAL TO MESSAGESTATION,AND LOADS THE       72160000
%   LINE STATUS INTO LINETABLEENTRY.                                    72161000
%                                                                       72162000
         LOADLINETABLE(LINESTATIONS.INDEX,SAVEONE);                     72163000
         MOVE(NO,LINETABLE);                                            72164000
%                                                                       72165000
         LOR (NO,MESSAGESTATION,MA0);                                   72166000
         SUB (MA0,WR(W)+LINESTATIONS.FIELD,NO);                         72167000
         GOTO(IFGTR,INVALIDSTATION);                                    72168000
%                                                                       72169000
         HADB(LINETABLESIZE-LINESTATIONS.INDEX,MA);                     72170000
         HAD (LINETABLE,STATIONTABLE);                                  72171000
         LOR(NO,MESSAGESTATION,STATION);                                72172000
         SMWD(SAVEONE,LINETABLEENTRY);                                  72173000
         EXIT(0);                                                       72174000
%                                                                       72175000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72176000
%                                                                       72177000
    LABL(STATIONREQUEST);                                               72178000
         HEADING("STATIONREQUEST");                                     72179000
%                                                                       72180000
%   ALLOWS FOR UNCONDITIONAL INITIATION OF REQUESTS WHEN THE LINE IS    72181000
%   NOT CONNECTED.                                                      72182000
%                                                                       72183000
         CALL(INITIALIZELINE);                                          72184000
         CALL(INITIALIZESTATION);                                       72185000
         TEST(LINETABLEENTRY,LINECONNECTED);                            72186000
         GOTO(NONZERO,QUEUEINSTATION);                                  72187000
         SET (MESSAGE,UNREGISTEREDREQUEST);                             72188000
         EXIT(1);                                                       72189000
%                                                                       72190000
    LABL(CONDITIONALREQUEST);                                           72191000
         HEADING("CONDITIONAL REQUEST");                                72192000
%                                                                       72193000
%   PREVENTS REQUESTS FROM BEING INITIATED ON LINES THAT ARE            72194000
%   NOT CONNECTED.                                                      72195000
%                                                                       72196000
         CALL(INITIALIZELINE);                                          72197000
         CALL(INITIALIZESTATION);                                       72198000
         TEST(LINETABLEENTRY,LINECONNECTED);                            72199000
         GOTO(ZERO,REQUESTSTATUSERROR);                                 72200000
%                                                                       72201000
    LABL(QUEUEINSTATION);                                               72202000
         HEADING("QUEUE IN STATION");                                   72203000
%                                                                       72204000
%   TO PLACE A NORMAL MODE STATION REQUEST IN ITS STATION QUEUE AND     72205000
%   IF THE STATION QUEUE WAS PREVIOUSLY EMPTY TO RETURN TO THE          72206000
%   REQUESTED FUNCTION.                                                 72207000
%                                                                       72208000
         LMRI(STATIONTABLE,SAVEONE);                                    72209000
         TEST(WR(W),STATIONREADY);                                      72210000
         GOTO(ZERO,IGNOREREQUEST);                                      72211000
%                                                                       72212000
         MOVE(WRR(3),NO);                                               72213000
         HADB(STATIONQUEUE.INDEX,ADDRESS);                              72214000
         TEST(WR(W),STATIONQUEUED);                                     72215000
         GOTO(ZERO,FIRSTREQUEST);                                       72216000
%                                                                       72217000
         LMRI(ADDRESS,STATIONSTABLE);                                   72218000
         SMWD(MESSAGESTART,QUEUEWORD);                                  72219000
         LMWI(ADDRESS,WRL(7));                                          72220000
%                                                                       72221000
         MMR (QUEUETAIL,NO);                                            72222000
         MOVE(MESSAGESTART,NO);                                         72223000
         MMW (QUEUETAIL,WRR(7));                                        72224000
         GOTO(UNC,CONTROL);                                             72225000
%                                                                       72226000
    LABL(FIRSTREQUEST);                                                 72227000
         HEADING("FIRST REQUEST");                                      72228000
%                                                                       72229000
         SET(WR(W),STATIONQUEUED);                                      72230000
         LMWI(STATIONTABLE,STATIONSTABLE);                              72231000
%                                                                       72232000
         MOVE(MESSAGESTART,NO);                                         72233000
         MOVE(MA,WRL(7));                                               72234000
         LMWI(ADDRESS,WRR(7));                                          72235000
         MOVE(SAVEONE,NO);                                              72236000
         EXIT(0);                                                       72237000
%                                                                       72238000
    LABL(STATIONQUEUEINSERT);                                           72239000
         HEADING("STATION QUEUE INSERT");                               72240000
%                                                                       72241000
%   TO PLACE THE CURRENT REQUEST AT THE HEAD OF THE STATION QUEUE       72242000
%   RATHER THEN THE END OF THE QUEUE.                                   72243000
%                                                                       72244000
         LMRI(STATIONTABLE,SAVEONE);                                    72245000
         MOVE(WRR(3),NO);                                               72246000
         HADB(STATIONQUEUE.INDEX,ADDRESS);                              72247000
%                                                                       72248000
         TEST(WR(W),STATIONQUEUED);                                     72249000
         GOTO(ZERO,FIRSTREQUEST);                                       72250000
%                                                                       72251000
         LMRI(ADDRESS,STATIONSTABLE);                                   72252000
         MOVE(WRR(7),WRR(7));                                           72253000
         MOVE(MESSAGESTART,ADDRESS);                                    72254000
         LMWI(WRR(7),WRR(7));                                           72255000
%                                                                       72256000
         MMR (MESSAGESTART,NO);                                         72257000
         MOVE(ADDRESS,NO);                                              72258000
         MMW (MESSAGESTART,WRR(7));                                     72259000
         MOVE(SAVEONE,NO);                                              72260000
         EXIT(0);                                                       72261000
%                                                                       72262000
    LABL(REMOVEFROMSTATIONQUEUEANDCOPY);                                72263000
         HEADING("REMOVE FROM STATION QUEUE AND COPY");                 72264000
%                                                                       72265000
%   TO COPY THE HEADER OF THE CURRENT REQUEST INTO MESSAGE BEFORE       72266000
%   REMOVING IT FROM THE STATION QUEUE.                                 72267000
%                                                                       72268000
         LOADMESSAGE(REQUESTS.INDEX,SAVEONE);                           72269000
         SMWD(SAVEONE,MESSAGE);                                         72270000
%                                                                       72271000
    LABL(REMOVEFROMSTATIONQUEUE);                                       72272000
         HEADING("REMOVE FROM STATION QUEUE");                          72273000
%                                                                       72274000
%   TO REMOVE THE REQUEST AT THE HEAD OF THE STATION QUEUE FROM THE     72275000
%   QUEUE AND SET MESSAGESTART AND MESSAGEEND TO THE ADDRESS OF THE     72276000
%   REQUEST.                                                            72277000
%                                                                       72278000
         MMR (MESSAGESTART,SAVEONE);                                    72279000
         TEST(WR(W),NULL);                                              72280000
         GOTO(ZERO,SELF+6);                                             72281000
%                                                                       72282000
         LMRI(STATIONTABLE,MESSAGEEND);                                 72283000
         RESET(WR(W),STATIONQUEUED);                                    72284000
         LMWI(MA,NO);                                                   72285000
         MOVE(SAVEONE,NO);                                              72286000
         EXIT(0);                                                       72287000
%                                                                       72288000
         MOVE(WRR(7),MESSAGEEND);                                       72289000
         LOADSTATIONTABLE(STATIONQUEUE.INDEX,ADDRESS);                  72290000
         MOVE(ADDRESS,WRR(7));                                          72291000
         LMWI(WRR(7),WRR(7));                                           72292000
         MOVE(SAVEONE,NO);                                              72293000
         EXIT(0);                                                       72294000
%                                                                       72295000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72296000
%                                                                       72297000
    BEGIN REAL SEGMENT;                                                 72298000
%                                                                       72299000
    LABL(QUEUEINWAIT);                                                  72300000
         HEADING("QUEUE IN WAIT");                                      72301000
%                                                                       72302000
%   TO QUEUE THE REQUEST OR LINKED LIST OF REQUESTS REPRESENTED BY      72303000
%   MESSAGESTART AND MESSAGEEND INTO THE DCP WAIT QUEUE.                72304000
%                                                                       72305000
         MMR (MESSAGEEND,SAVEONE);                                      72306000
         SET (WR(W),NULL);                                              72307000
         MMW (MA,NO);                                                   72308000
         LOADADDRESSBLOCK(WAITQUEUE.INDEX,NO);                          72309000
         TEST(SYSTEMWORD,WAITQUEUEBUSY);                                72310000
         GOTO(ZERO,NULLWAITQUEUE);                                      72311000
%                                                                       72312000
         MOVE(MESSAGEEND,ADDRESS);                                      72313000
         MOVE(WRL(7),WRL(7));                                           72314000
         MMW (ADDRESS,MESSAGEEND);                                      72315000
%                                                                       72316000
         MMR (MESSAGEEND,NO);                                           72317000
         MOVE(MESSAGESTART,NO);                                         72318000
         MMW (MESSAGEEND,WRR(7));                                       72319000
         SET (LOCATIONWORD,NULL);                                       72320000
         MOVE(SAVEONE,NO);                                              72321000
         EXIT(0);                                                       72322000
%                                                                       72323000
    LABL(NULLWAITQUEUE);                                                72324000
         HEADING("NULL WAIT QUEUE");                                    72325000
%                                                                       72326000
         SMRD(LOCATIONWORD,NO);                                         72327000
         SET (SYSTEMWORD,WAITQUEUEBUSY);                                72328000
         MMW (MA,NO);                                                   72329000
         SET(LOCATIONWORD,NULL);                                        72330000
         MOVE(SAVEONE,NO);                                              72331000
         EXIT(0);                                                       72332000
%                                                                       72333000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72334000
%                                                                       72335000
    LABL(IGNOREREQUEST);                                                72336000
         HEADING("IGNORE REQUEST");                                     72337000
%                                                                       72338000
%   TO NOTIFY THE SYSTEM THAT THE DCP HAS TAKEN NO ACTION ON THE        72339000
%   CURRENT REQUEST BUT IS RETURNING IT TO THE SYSTEM ANYWAY.           72340000
%                                                                       72341000
         CALL(QUEUEINWAIT);                                             72342000
         GOTO(UNC,CONTROL);                                             72343000
%                                                                       72344000
    LABL(REQUESTSTATUSERROR);                                           72345000
         HEADING("REQUEST STATUS ERROR");                               72346000
%                                                                       72347000
%   TO NOTIFY THAT THE CURRENT STATUS OF THE LINE PREVENTS THE          72348000
%   INITIATION OF REQUEST.                                              72349000
%                                                                       72350000
         LORB(NO,STATUSERROR,RESULTTYPE);                               72351000
         CALL(TERMINATEWITHSTATUS);                                     72352000
         GOTO(UNC,CONTROL);                                             72353000
%                                                                       72354000
    LABL(INITIATEIFSUSPENDED);                                          72355000
         HEADING("INITIATE IF SUSPENDED");                              72356000
%                                                                       72357000
%   TO TEST FOR THE PROPER LINE STATUS FOR THE INITIATION OF A          72358000
%   SUSPENDED REQUEST AND RETURN IF THE STATUS IS ACCEPTABLE.           72359000
%                                                                       72360000
         LMRI(LINETABLE,SAVEONE);                                       72361000
         TEST(WR(W),LINEBUSY+LINESWITCHING+CONTROLMODE);                72362000
         GOTO(NONZERO,REQUESTSTATUSERROR);                              72363000
         TEST(WR(W),LINESUSPENDED);                                     72364000
         GOTO(ZERO,REQUESTSTATUSERROR);                                 72365000
         LOR (NO,MESSAGESTATION,X);                                     72366000
         LEO (X,WR(W)+LINESTATION.FIELD,NO);                            72367000
         GOTO(IFNEQ,REQUESTSTATUSERROR);                                72368000
         RESET(WR(W),LINESUSPENDED);                                    72369000
         SET (WR(W),LINEBUSY);                                          72370000
         LMWI(MA,NO);                                                   72371000
         MOVE(SAVEONE,NO);                                              72372000
         EXIT(0);                                                       72373000
%                                                                       72374000
    LABL(INITIATEIFIDLE);                                               72375000
         HEADING("INITIATE IF IDLE");                                   72376000
%                                                                       72377000
%   TO TEST FOR THE PROPER LINE STATUS FOR THE INITIATION OF A NORMAL   72378000
%   REQUEST AND RETURN IF THE STATUS IS ACCEPTABLE.                     72379000
%                                                                       72380000
         LMRI(LINETABLE,SAVEONE);                                       72381000
         TEST(WR(W),LINEBUSY+LINESUSPENDED+CONTROLMODE+LINESWITCHING+   72382000
              LINEREADY);                                               72383000
         GOTO(NONZERO,CONTROL);                                         72384000
%                                                                       72385000
         SET(WR(W),LINEBUSY);                                           72386000
         LOR(NO,MESSAGESTATION,WR(W)+LINESTATION.FIELD);                72387000
         LMWI(LINETABLE,NO);                                            72388000
%                                                                       72389000
         MOVE(SAVEONE,NO);                                              72390000
         EXIT(0);                                                       72391000
%                                                                       72392000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72393000
%                                                                       72394000
    LABL(UNDEFINEDFUNCTION);                                            72395000
         HEADING("UNDEFINEDFUNCTION");                                  72396000
%                                                                       72397000
%   TO NOTIFY THE SYSTEM THAT DUE TO A LOGIC ERROR THE CURRENT          72398000
%   REQUEST IS NOT ACCEPTABLE.                                          72399000
%                                                                       72400000
         RESULT(FUNCTIONUNDEFINED);                                     72401000
         CALL(REMOVEFROMSTATIONQUEUE);                                  72402000
         CALL(QUEUEINWAIT);                                             72403000
         GOTO(UNC,INITIATELINE);                                        72404000
%                                                                       72405000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72406000
%                                                                       72407000
    LABL(INVALIDKEY);                                                   72408000
         HEADING("INVALIDKEY");                                         72409000
%                                                                       72410000
         RESULT(KEYINVALID);                                            72411000
         CALL(QUEUEINWAIT);                                             72412000
         GOTO(UNC,CONTROL);                                             72413000
%                                                                       72414000
%                                                                       72415000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72416000
%                                                                       72417000
    LABL(GETENABLEDSPACEFORINSERT);                                     72418000
         HEADING("GET ENABLED SPACE FOR INSERT");                       72419000
%                                                                       72420000
%   ATTEMPTS TO GET SPACE ONLY IF THERE IS NO SPACE CURRENTLY IN USE    72421000
%   AND ALSO ALLOWS FOR THE SPACE TO BE INSERTED IN THE STATION QUEUE.  72422000
%                                                                       72423000
         TEST(LOCATIONWORD,NULL);                                       72424000
         GOTO(NONZERO,GETENABLEDSPACE);                                 72425000
         HADB(1,MA);                                                    72426000
         EXIT(0);                                                       72427000
%                                                                       72428000
    LABL(GETENABLEDSPACEFORREMOVAL);                                    72429000
         HEADING("GET ENABLED SPACE FOR REMOVAL");                      72430000
%                                                                       72431000
%   EITHER GETS SPACE IF NONE IS CURRENTLY IN USE OR ALLOWS FOR THE     72432000
%   REMOVAL OF ANY SPACE CURRENTLY IN USE FROM THE STATION QUEUE.       72433000
%                                                                       72434000
         TEST(LOCATIONWORD,NULL);                                       72435000
         GOTO(ZERO,GETENABLEDSPACEFORREMOVAL-1);                        72436000
         HADB(1,MA);                                                    72437000
%                                                                       72438000
    LABL(GETENABLEDSPACE);                                              72439000
         HEADING("GET ENABLED SPACE");                                  72440000
%                                                                       72441000
%   CONSTRUCTS AN ENABLED INPUT HEADER IN MESAGE TO BE USED BY GET SPACE72442000
%                                                                       72443000
         LORB(NO,ENABLEDINPUT,MESSAGECLASS);                            72444000
%                                                                       72445000
    LABL(GETLABELEDSPACE);                                              72446000
         HEADING("GET LABELED SPACE");                                  72447000
%                                                                       72448000
%   CONSTRUCTS A GENERALIZED HEADER IN MESSAGE WITHOUT DISTURBING       72449000
%   THE MESSAGE CLASS.                                                  72450000
%                                                                       72451000
         LORB(NO,0,MESSAGEKEY);                                         72452000
         LORB(NO,0,MESSAGEVARIANT);                                     72453000
         LOR (NO,BYTE(LINE,2),MESSAGELINE);                             72454000
         LOR (NO,STATION,MESSAGESTATION);                               72455000
         LORB(NO,0,MESSAGELENGTH);                                      72456000
%                                                                       72457000
    LABL(GETSPACE);                                                     72458000
         HEADING("GET SPACE");                                          72459000
%                                                                       72460000
%   TESTS FOR SPACE BEING AVAILABLE IN THE CURRENT SPACE QUEUE.         72461000
%                                                                       72462000
         LOADADDRESSBLOCK(SPACEQUEUE.INDEX,SAVEONE);                    72463000
         TEST(WR(W),NULL);                                              72464000
         GOTO(NONZERO,GETMORESPACE);                                    72465000
         SMWD(MA,LOCATIONWORD);                                         72466000
%                                                                       72467000
    LABL(SPACEAVAILABLE);                                               72468000
         HEADING("SPACE AVAILABLE");                                    72469000
%                                                                       72470000
%   REMOVES A SPACE SEGMENT FROM THE CURRENT SPACE QUEUE SETTING BOTH   72471000
%   MESSAGESTART AND MESSAGEEND TO THE ADDRESS OF THE SPACE             72472000
%                                                                       72473000
         MMR (MESSAGESTART,ADDRESS);                                    72474000
         MOVE(MESSAGEEND,NO);                                           72475000
         MMW (ADDRESS,WRL(7));                                          72476000
%                                                                       72477000
         MMR (MESSAGESTART,NO);                                         72478000
         SET (WR(W),NULL);                                              72479000
         MMW (MA,MESSAGEEND);                                           72480000
         HADB(REQUESTS.INDEX,ADDRESS);                                  72481000
         SMRD(MESSAGE,NO);                                              72482000
         MMW (ADDRESS,NO);                                              72483000
         MOVE(SAVEONE,NO);                                              72484000
         EXIT(0);                                                       72485000
%                                                                       72486000
    LABL(GETMORESPACE);                                                 72487000
         HEADING("GET MORE SPACE");                                     72488000
%                                                                       72489000
%   REPLACES THE EMPTY SPACE QUEUE WITH THE QUEUE OF BACK UP SPACE,     72490000
%   NOTIFING THE SYSTEM THAT MORE SPACE IS REQUIRED.                    72491000
%                                                                       72492000
         HADB(MORESPACEQUEUE.INDEX-SPACEQUEUE.INDEX,MA);                72493000
         MMR (MA,ADDRESS);                                              72494000
         TEST(WR(W),NULL);                                              72495000
         GOTO(NONZERO,GETNOSPACE);                                      72496000
         SMWD(WRR(7),LOCATIONWORD);                                     72497000
         SET (WR(W),NULL);                                              72498000
         MMW (ADDRESS,MESSAGESTART);                                    72499000
         HSBB(MORESPACEQUEUE.INDEX-SPACEQUEUE.INDEX,MA);                72500000
         HEYU;                                                          72501000
         GOTO(UNC,SPACEAVAILABLE);                                      72502000
%                                                                       72503000
    LABL(GETNOSPACE);                                                   72504000
         HEADING("GET NO SPACE");                                       72505000
%                                                                       72506000
%   ACTION TAKEN WHEN NO SPACE IS AVAILABLE.                            72507000
%                                                                       72508000
         GOTO(UNC,CONTROL);                                             72509000
%                                                                       72510000
    LABL(REPLACEENABLEDSPACE);                                          72511000
         HEADING("REPLACE ENABLED SPACE");                              72512000
%                                                                       72513000
%   EITHER REMOVES AN ENABLED INPUT REQUEST FROM THE STATION QUEUE AND  72514000
%   RETURNS THE SPACE TO THE AVAILABLE SPACE QUEUE OR IF SUCH A REQUEST 72515000
%   IS NOT PRESENT AT THE FRONT OF THE QUEUE THE LOCATIONWORD IS SET    72516000
%   NULL.                                                               72517000
%                                                                       72518000
         TEST(LOCATIONWORD,NULL);                                       72519000
         GOTO(NONZERO,IMMEDIATEEXIT);                                   72520000
         LOADMESSAGE(REQUESTS.INDEX,SAVEONE);                           72521000
         SMWD(SAVEONE,MESSAGE);                                         72522000
         LEOC(NO,MESSAGECLASS,ENABLEDINPUT);                            72523000
         GOTO(IFNEQ,IMMEDIATEEXIT-1);                                   72524000
         CALL(REMOVEFROMSTATIONQUEUE);                                  72525000
%                                                                       72526000
    LABL(REPLACESPACE);                                                 72527000
         HEADING("REPLACE SPACE");                                      72528000
%                                                                       72529000
%   REPLACES THE CURRENT SPACE ADDRESSED BY MESSAGESTART INTO THE       72530000
%   AVAILABLE SPACE QUEUE.                                              72531000
%                                                                       72532000
         LOADADDRESSBLOCK(SPACEQUEUE.INDEX,SAVEONE);                    72533000
         TEST(WR(W),NULL);                                              72534000
         GOTO(NONZERO,SELF+8);                                          72535000
%                                                                       72536000
         SMWD(MA,QUEUEWORD);                                            72537000
         MMR (MESSAGESTART,ADDRESS);                                    72538000
         MOVE(QUEUEHEAD,NO);                                            72539000
         MMW (MESSAGESTART,WRR(7));                                     72540000
%                                                                       72541000
         SMRD(QUEUEWORD,NO);                                            72542000
         MMW (ADDRESS,WRR(7));                                          72543000
         GOTO(UNC,SELF+6);                                              72544000
%                                                                       72545000
         MMR (MESSAGESTART,ADDRESS);                                    72546000
         SET (WR(W),NULL);                                              72547000
         MMW (MA,MESSAGEEND);                                           72548000
         SMRD(LOCATIONWORD,NO);                                         72549000
         MMW (ADDRESS,NO);                                              72550000
         SET (LOCATIONWORD,NULL);                                       72551000
%                                                                       72552000
    LABL(IMMEDIATEEXIT);                                                72553000
         HEADING("IMMEDIATE EXIT");                                     72554000
%                                                                       72555000
%   ALLOWS FOR EXITING BACK TO THE CALLING ROUTINE FROM ANYWHERE IN THE 72556000
%   CODE FILE.                                                          72557000
%                                                                       72558000
         EXIT(0);                                                       72559000
%                                                                       72560000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   72561000
%                                                                       72562000
    END OF SEGMENT;                                                     72563000
    BEGIN REAL SEGMENT;                                                 72564000
%                                                                       72565000
    LABL(TERMINATEERRORINPUT);                                          72566000
         HEADING("TERMINATE ERROR INPUT");                              72567000
%                                                                       72568000
%   ROUTINE THATS CALLED WHEN A TERMINATE ERROR IS DONE IN AN INPUT     72569000
%   NDL REQUEST; EXECUTION CONTINUES INTO TERMINATE ERROR OUTPUT.       72570000
%                                                                       72571000
         CALL(GETENABLEDSPACEFORINSERT);                                72572000
         CALL(STATIONQUEUEINSERT);                                      72573000
%                                                                       72574000
    LABL(TERMINATEERROROUTPUT);                                         72575000
         HEADING("TERMINATE ERROR OUTPUT");                             72576000
%                                                                       72577000
%   ROUTINE EXECUTED FOR ALL ERROR TERMINATES WITHIN NDL REQUEST SETS;  72578000
%   THE STATION IS SET NOT READY AND THE STATIONS QUEUE IS FLUSHED BACK 72579000
%   TO THE SYSTEM.                                                      72580000
%                                                                       72581000
         LMRI(STATIONTABLE,SAVETWO);                                    72582000
         RESET(WR(W),STATIONQUEUED+STATIONREADY);                       72583000
         LMWI(MA,NO);                                                   72584000
         MOVE(WRR(3),NO);                                               72585000
         HADB(STATIONQUEUE.INDEX,MA);                                   72586000
         LMRI(MA,NO);                                                   72587000
         SMWD(SAVETWO,LOCATIONWORD);                                    72588000
         LORB(NO,MESSAGEERROR,RESULTTYPE);                              72589000
         GOTO(UNC,TERMINATENORMAL);                                     72590000
%                                                                       72591000
    LABL(TERMINATEENABLEINPUT);                                         72592000
         HEADING("TERMINATE ENABLE INPUT");                             72593000
%                                                                       72594000
%   ROUTINE CALLED WHEN A TERMINATE ENABLEINPUT IS EXECUTED IN AN NDL   72595000
%   REQUEST. IF THE STATION IS ENABLED INPUT IS INITIATED OTHERWISE     72596000
%   CONTROL IS RETURNED TO THE CALLING REQUEST.                         72597000
%                                                                       72598000
         LMRI(STATIONTABLE,SAVETWO);                                    72599000
         SMWD(SAVETWO,STATIONTABLEENTRY);                               72600000
         TEST(STATIONTABLEENTRY,STATIONENABLED);                        72601000
         GOTO(ZERO,IMMEDIATEEXIT);                                      72602000
         CALL(REINITIALIZETOFIRSTSEGMENT);                              72603000
         SET (LOCATIONWORD,NULL);                                       72604000
         GOTO(UNC,INITIATE[ENABLEDINPUT]);                              72605000
%                                                                       72606000
    LABL(TERMINATENOINPUT);                                             72607000
         HEADING("TERMINATE NO INPUT");                                 72608000
%                                                                       72609000
%   CALLED UPON EXECUTION OF A TERMINATE NOINPUT ALL INPUT IS           72610000
%   REINITIALIZED AND IF IT IS ENABLED THE SPACE IS RETURNED TO THE     72611000
%   AVAILABLE SPACE QUEUE; IN ANY CASE THE LINE IS THE INITIATED.       72612000
%                                                                       72613000
         TEST(CHARACTERWORD,SEGMENTEDTEXT);                             72614000
         GOTO(ZERO,REPLACEENABLEDSPACE);                                72615000
         MOVE(NO,SAVETWO);                                              72616000
         CALL(REINITIALIZETOFIRSTSEGMENT);                              72617000
         MOVE(SAVETWO,NO);                                              72618000
         GOTO(UNC,REPLACEENABLEDSPACE);                                 72619000
%                                                                       72620000
    LABL(TERMINATEREQUESTINPUT);                                        72621000
         HEADING("TERMINATE REQUEST INPUT");                            72622000
%                                                                       72623000
%   CALLED UPON EXECUTION OF A TERMINATE REQUEST WITHIN AN INPUT NDL    72624000
%   REQUEST RESULTING IN EITHER THE RETURN OF THE CURRENT REQUEST AS    72625000
%   IGNORED IN THE CASE OF INPUT AND SEGMENTED ENABLED INPUT OR IN THE  72626000
%   CASE OF NON-SEGMENTED ENABLED INPUT ANY SPACE RETURNED TO THE       72627000
%   AVAILABLE SPACE QUEUE; IN EITHER CASE THE LINE IS THEN INITIATED.   72628000
%                                                                       72629000
         TEST(CHARACTERWORD,SEGMENTEDTEXT);                             72630000
         GOTO(NONZERO,TERMINATEREQUESTOUTPUT-1);                        72631000
         TEST(LOCATIONWORD,NULL);                                       72632000
         GOTO(NONZERO,IMMEDIATEEXIT);                                   72633000
         LOADMESSAGE(REQUESTS.INDEX,SAVETWO);                           72634000
         SMWD(SAVETWO,MESSAGE);                                         72635000
         LEOC(NO,MESSAGECLASS,ENABLEDINPUT);                            72636000
         GOTO(IFNEQ,TERMINATEREQUESTOUTPUT);                            72637000
         CALL(REMOVEFROMSTATIONQUEUE);                                  72638000
         CALL(REPLACESPACE);                                            72639000
         EXIT(0);                                                       72640000
         CALL(GETENABLEDSPACEFORREMOVAL);                               72641000
%                                                                       72642000
    LABL(TERMINATEREQUESTOUTPUT);                                       72643000
         HEADING("TERMINATE REQUEST OUTPUT");                           72644000
%                                                                       72645000
%   CALLED UPON EXECUTION OF A TERMINATE REQUEST WITHIN AN OUTPUT NDL   72646000
%   REQUEST RESULTING IN THE RETURN OF THE CURRENT MESSAGE SEGMENT AS   72647000
%   IGNORED AND THE INITIATION OF THE LINE.                             72648000
%                                                                       72649000
         CALL(REMOVEFROMSTATIONQUEUE);                                  72650000
         LORB(NO,REQUESTIGNORED,RESULTTYPE);                            72651000
         GOTO(UNC,TERMINATENORMAL);                                     72652000
%                                                                       72653000
    LABL(TERMINATEINCOMPLETEINPUT);                                     72654000
         HEADING("TERMINATE INCOMPLETE INPUT");                         72655000
%                                                                       72656000
%   CALLED UPON RECEIVING THE SEPARATOR CHARACTER FOR THE ACTIVE        72657000
%   STATION RESULTING IN THE CURRENT MESSAGE SEGMENT BEING PASSED TO    72658000
%   THE SYSTEM AS THE END OF A  LOGICAL RECORD AND CONTROL BEING        72659000
%   RETURNED TO THE CALLING REQUEST.                                    72660000
%                                                                       72661000
         CALL(STORECLOSE);                                              72662000
         CALL(GETENABLEDSPACEFORREMOVAL);                               72663000
         CALL(REMOVEFROMSTATIONQUEUEANDCOPY);                           72664000
         LOADSTATIONTABLE(STATIONRESULTS.INDEX,SAVETWO);                72665000
         MOVE(MESSAGESTART,ADDRESS);                                    72666000
         HADB(RESULTS.INDEX,MA);                                        72667000
         LORB(NO,INCOMPLETEREQUEST,WR(W)+STATIONRESULTS.FIELD);         72668000
         MMW (MA,NO);                                                   72669000
         LORB(NO,0,WRL(7)-2*(2-STATIONTALLY.FIELD));                    72670000
         RESET(WR(W),WRUFLAG+SPECIALFLAG);                              72671000
         LMWI(ADDRESS,NO);                                              72672000
         CALL(QUEUEINWAIT);                                             72673000
         SET (CHARACTERWORD,SEGMENTEDTEXT+NOTCONTENDED);                72674000
         RESET(CHARACTERWORD,SEGMENTEDRECORD);                          72675000
         LEOC(X,MESSAGECLASS,ENABLEDINPUT);                             72676000
         LOR (X,TRANSFERADDRESS,NO);                                    72677000
         GOTO(ZERO,TERMINATENORMALOUTPUT-2);                            72678000
         LORB(NO,0,MESSAGELENGTH);                                      72679000
         CALL(GETSPACE);                                                72680000
         CALL(STATIONQUEUEINSERT);                                      72681000
         LOR (NO,TRANSFERADDRESS,NO);                                   72682000
         GOTO(ZERO,TERMINATENORMALOUTPUT-2);                            72683000
         MOVE(MESSAGESTART,NO);                                         72684000
         HADB(TEXT.INDEX,MA);                                           72685000
         LORB(NO,0,CHARACTERADDRESS);                                   72686000
         LORB(NO,0,BYTE(TEXTLENGTH,0));                                 72687000
         MOVE(SAVETWO,TEXTADDRESS);                                     72688000
         EXIT(0);                                                       72689000
%                                                                       72690000
    LABL(TERMINATENORMALOUTPUT);                                        72691000
         HEADING("TERMINATE NORMAL OUTPUT");                            72692000
%                                                                       72693000
%   ROUTINE CALLED UPON EXECUTION OF A TERMINATE NORMAL WITHIN AN       72694000
%   OUTPUT NDL REQUEST. IF THE CURRENT MESSAGE SEGMENT WAS COMPLETELY   72695000
%   OUTPUTED THEN A NORMAL TERMINATE OCCURES OTHERWISE THE SYSTEM IS    72696000
%   NOTIFIED TO UPDATE ITS OUTPUT TANK BY THE AMOUNT OF TEXT OUTPUTED   72697000
%   AND THE CURRENT MESSAGE SEGMENT IS RETAINED BY THE DCP SO THAT THE  72698000
%   REMAINDER OF THE OUTPUT MESSAGE CAN BE OUTPUTED AT SOME LATER TIME. 72699000
%                                                                       72700000
         LOR (NO,TRANSFERADDRESS,WR(W)+STATIONTALLY.FIELD);             72701000
         GOTO(ZERO,IMMEDIATEEXIT-1);                                    72702000
         LOR (NO,BYTE(TEXTLENGTH,0),NO);                                72703000
         GOTO(ZERO,TERMINATENORMAL-2);                                  72704000
         MOVE(TEXTADDRESS,SAVETWO);                                     72705000
         LORB(NO,REQUESTIGNORED,WR(W)+STATIONRESULTS.FIELD);            72706000
         LOR (NO,CHARACTERADDRESS,WR(W)+STATIONBACKSPACETALLY.FIELD);   72707000
         HSBB(TEXT.INDEX,MA);                                           72708000
         HSB (MESSAGESTART,MA);                                         72709000
         MOVE(MESSAGESTART,WRR(7));                                     72710000
         HADB(RESULTS.INDEX,ADDRESS);                                   72711000
         MMW (ADDRESS,MESSAGEEND);                                      72712000
         HSBB(RESULTS.INDEX-REQUESTS.INDEX,MA);                         72713000
         MMR (MA,NO);                                                   72714000
         LOR (NO,WR(W)+LENGTH.FIELD,X);                                 72715000
         LOR (NO,BYTE(TEXTLENGTH,0),WR(W)+LENGTH.FIELD);                72716000
         MMW (MA,NO);                                                   72717000
         SMWD(SAVETWO,MESSAGE);                                         72718000
         SUB (X,BYTE(TEXTLENGTH,0),MESSAGELENGTH);                      72719000
         CALL(GETSPACE);                                                72720000
         LORB(NO,INCOMPLETEREQUEST,RESULTTYPE);                         72721000
         GOTO(UNC,TERMINATENORMAL);                                     72722000
%                                                                       72723000
    LABL(TERMINATENORMALINPUT);                                         72724000
         HEADING("TERMINATE NORMAL INPUT");                             72725000
%                                                                       72726000
%   THE ROUTINE CALLED UPON THE EXECUTION TERMINATE NORMAL WITHIN ALL   72727000
%   INPUT AND ENABLED INPUT REQUESTS RESULTING IN A NORMAL TERMINATION  72728000
%   OF THE REQUEST AND THE INITIATION OF THE LINE.                      72729000
%                                                                       72730000
         CALL(STORECLOSE);                                              72731000
         CALL(GETENABLEDSPACEFORREMOVAL);                               72732000
         CALL(REMOVEFROMSTATIONQUEUE);                                  72733000
         LORB(NO,OK,RESULTTYPE);                                        72734000
%                                                                       72735000
    LABL(TERMINATENORMAL);                                              72736000
         HEADING("TERMINATE NORMAL");                                   72737000
%                                                                       72738000
%   A COMMON ROUTINE USED TO COMPLETE MOST NORMAL,ERROR,AND REQUEST     72739000
%   TERMINATES.                                                         72740000
%                                                                       72741000
         LOADSTATIONTABLE(STATIONRESULTS.INDEX,SAVETWO);                72742000
         MOVE(MESSAGESTART,ADDRESS);                                    72743000
         HADB(RESULTS.INDEX,MA);                                        72744000
         LOR (NO,RESULTTYPE,WR(W)+STATIONRESULTS.FIELD);                72745000
         MMW (MA,NO);                                                   72746000
         CALL(QUEUEINWAIT);                                             72747000
         MOVE(SAVETWO,NO);                                              72748000
         EXIT(0);                                                       72749000
%                                                                       72750000
    LABL(TERMINATEWITHSTATUS);                                          72751000
         HEADING("TERMINATE WITH STATUS");                              72752000
%                                                                       72753000
%   RETURNS THE CURRENT REQUEST TO THE SYSTEM WITH THE LINE STATUS      72754000
%   INFORMATION RATHER THEN INFORMATION DESCRIBING ACTION TAKEN ON THE  72755000
%   REQUEST.                                                            72756000
%                                                                       72757000
         TEST(LOCATIONWORD,NULL);                                       72758000
         GOTO(NONZERO,TERMINATEWITHSTATUS-1);                           72759000
         CALL(QUEUEINWAIT);                                             72760000
         LMRI(LINETABLE,SAVEONE);                                       72761000
         MOVE(MESSAGESTART,NO);                                         72762000
         HADB(RESULTS.INDEX,ADDRESS);                                   72763000
         LOR (NO,RESULTTYPE,WR(W)+LINERESULTS.FIELD);                   72764000
         LOR (NO,AC,WR(W)+LINEDELAY.FIELD);                             72765000
         LOR (NO,AI,WR(W)+LINETIMEUSED.FIELD);                          72766000
         MMW (ADDRESS,MESSAGEEND);                                      72767000
         MOVE(SAVEONE,NO);                                              72768000
         EXIT(0);                                                       72769000
%                                                                       72770000
    LABL(TERMINATEANDINITIATE);                                         72771000
         HEADING("TERMINATE AND INITIATE");                             72772000
%                                                                       72773000
%   ROUTINE USED TO COMPLETE MOST NON I/O REQUESTS FOR NORMAL           72774000
%   TERMINATION                                                         72775000
%                                                                       72776000
         MOVE(MESSAGESTART,NO);                                         72777000
         SMRD(NO,MESSAGEEND);                                           72778000
         HADB(RESULTS.INDEX,MA);                                        72779000
         LORB(NO,OK,WR(W)+STATIONRESULTS.FIELD);                        72780000
         MMW (MA,NO);                                                   72781000
         TEST(MESSAGE,UNREGISTEREDREQUEST);                             72782000
         GOTO(NONZERO,IGNOREREQUEST);                                   72783000
         CALL(REMOVEFROMSTATIONQUEUE);                                  72784000
         CALL(QUEUEINWAIT);                                             72785000
         GOTO(UNC,INITIATELINE);                                        72786000
%                                                                       72787000
    LABL(INITIALIZETEXT);                                               72788000
         HEADING("INITIALIZE TEXT");                                    72789000
%                                                                       72790000
%   ROUTINE USED TO REINTIALIZE NECESSARY POINTERS TO THE BEGINGING     72791000
%   OF I/O REQUEST TEXT.                                                72792000
%                                                                       72793000
         LOADSTATIONTABLE(STATIONRESULTS.INDEX,SAVETWO);                72794000
         LORB(NO,0,WRR(7));                                             72795000
         LORB(NO,0,WRL(7)-2*(2-STATIONTALLY.FIELD));                    72796000
         LMWI(MA,NO);                                                   72797000
         CALL(REINITIALIZETOFIRSTSEGMENT);                              72798000
         RESET(CHARACTERWORD,SEGMENTEDTEXT+SEGMENTEDRECORD              72799000
              +NOTCONTENDED);                                           72800000
         LORB(NO,0,TRANSFERADDRESS);                                    72801000
         MOVE(SAVETWO,NO);                                              72802000
         EXIT(0);                                                       72803000
%                                                                       72804000
    LABL(REINITIALIZETOFIRSTSEGMENT);                                   72805000
         HEADING("REINITIALIZE TO FIRST SEGMENT");                      72806000
%                                                                       72807000
%   IF THE CURRENT MESSAGE IS SEGMENTED THEN THE THE MCP IS NOTIFIED    72808000
%   TO RETURN PREVIOUS SEGMENTS AND THE LINE IS SUSPENDED UNTIL THE     72809000
%   ACTION IS COMPLETED AND NOTIFICATION IS SENT TO THE DCP AT WHICH    72810000
%   TIME CONTROL OF THE LINE IS PASSED BACK TO THE CALLING ROUTINE      72811000
%                                                                       72812000
         TEST(CHARACTERWORD,SEGMENTEDTEXT);                             72813000
         GOTO(ZERO,IMMEDIATEEXIT);                                      72814000
         LMRI(STATIONTABLE,SAVEONE);                                    72815000
         RESET(WR(W),STATIONREADY+STATIONQUEUED);                       72816000
         LMWI(MA,NO);                                                   72817000
         MOVE(WRR(3),NO);                                               72818000
         HADB(STATIONQUEUE.INDEX,MA);                                   72819000
         LMRI(MA,ADDRESS);                                              72820000
         SMWD(WRR(7),LOCATIONWORD);                                     72821000
         HADB(RESULTS.INDEX,MA);                                        72822000
         LORB(NO,TEXTREINITIALIZED,WR(W)+STATIONRESULTS.FIELD);         72823000
         MMW (MA,NO);                                                   72824000
         SMRD(SAVEWORD,NO);                                             72825000
         LMWI(ADDRESS,NO);                                              72826000
         CALL(QUEUEINWAIT);                                             72827000
         GOTO(UNC,SUSPENDLINE);                                         72828000
%                                                                       72829000
    LABL(INITIATESUSPENDEDLINE);                                        72830000
         HEADING("INITIATE SUSPENDED LINE");                            72831000
%                                                                       72832000
%   ROUTINE USED TO RESET ALL STATUS  AND CONDITIONS ON A SUSPENDED     72833000
%   LINE BACK FOR CONTINUED NORMAL OPERATION                            72834000
%                                                                       72835000
         LMRI(STATIONTABLE,NO);                                         72836000
         MOVE(WRR(3),NO);                                               72837000
         HADB(STATIONQUEUE.INDEX,MA);                                   72838000
         SET (WR(W),STATIONQUEUED+STATIONREADY);                        72839000
         LMWI(STATIONTABLE,ADDRESS);                                    72840000
         LMRI(ADDRESS,NO);                                              72841000
         SMWD(MESSAGESTART,SAVEWORD);                                   72842000
         HADB(REQUESTS.INDEX,MA);                                       72843000
         SMRD(MESSAGE,NO);                                              72844000
         MMW (MA,NO);                                                   72845000
         SMRD(LOCATIONWORD,NO);                                         72846000
         LMWI(ADDRESS,NO);                                              72847000
         MOVE(SAVEONE,NO);                                              72848000
         EXIT(0);                                                       72849000
%                                                                       72850000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72851000
%                                                                       72852000
    END SEGMENT;                                                        72853000
%                                                                       72854000
    LABL(INITIATESTATIONQUEUE);                                         72855000
         HEADING("INITIATESTATIONQUEUE");                               72856000
%                                                                       72857000
%   CONTAINS LOGIC EXECUTED BEFOR THE INITIATION OF ALL REQUESTS        72858000
%   WHICH WHERE NOT INITIATED IMMEDIATELY WHEN THEY WERE RECEIVED BY    72859000
%   BY THE DCP.                                                         72860000
%                                                                       72861000
         LMRI(STATIONTABLE,NO);                                         72862000
         MOVE(WRR(3),NO);                                               72863000
         HADB(STATIONQUEUE.INDEX,ADDRESS);                              72864000
         LMRI(ADDRESS,STATIONSTABLE);                                   72865000
%                                                                       72866000
         MOVE(WRR(7),NO);                                               72867000
         HADB(REQUESTS.INDEX,ADDRESS);                                  72868000
         MMR (ADDRESS,MESSAGESTART);                                    72869000
%                                                                       72870000
         SMWD(MA,MESSAGE);                                              72871000
         LOR (NO,MESSAGECLASS,X);                                       72872000
         GOX (UNC,INITIATES-INITIATEDEFERRED);                          72873000
%                                                                       72874000
% . . . .  . . . . . . . . . . . . . . . . . . . . . . . . . . . .      72875000
%                                                                       72876000
    LABL(ABORT);                                                        72877000
         HEADING("ABORT");                                              72878000
%                                                                       72879000
%   ROUTINE COMMON TO ALL LINE ABORTS; USED TO NOTIFY THE SYSTEM OF     72880000
%   THE LINE ABORT AND TO SET THE APPROPRIATE LINE STATUS.              72881000
%                                                                       72882000
         LOADLINETABLE(LINESTATUS.INDEX,HALF(MESSAGE,L));               72883000
         RESET(WR(W),LINEBUSY+LINESUSPENDED+LINESWITCHING+LINEREADY);   72884000
         SET (WR(W),CONTROLMODE);                                       72885000
         LMWI(MA,LINETABLE);                                            72886000
         LORB(NO,ABORTED,MESSAGECLASS);                                 72887000
         LORB(NO,0,MESSAGELENGTH);                                      72888000
         LOR (NO,WR(W)+LINESTATION.FIELD,MESSAGESTATION);               72889000
         LOR (NO,BYTE(LINE,2),MESSAGELINE);                             72890000
         CALL(GETSPACE);                                                72891000
%                                                                       72892000
         MOVE(MESSAGESTART,NO);                                         72893000
         HADB(RESULTS.INDEX,MA);                                        72894000
         LMRI(LINETABLE,ADDRESS);                                       72895000
         LOR (NO,RESULTTYPE,WR(W)+LINERESULTS.FIELD);                   72896000
         LOR (NO,AC,WR(W)+LINEDELAY.FIELD);                             72897000
         LOR (NO,AI,WR(W)+LINETIMEUSED.FIELD);                          72898000
         MMW (ADDRESS,LINETABLE);                                       72899000
         CALL(QUEUEINWAIT);                                             72900000
         SLEEP;                                                         72901000
         GOTO(UNC,CONTROL);                                             72902000
%                                                                       72903000
    LABL(ABORTTRANSMIT);                                                72904000
         HEADING("ABORT TRANSMIT");                                     72905000
%                                                                       72906000
         LORB(NO,TRANSMITABORTED,RESULTTYPE);                           72907000
         CALL(REPLACEENABLEDSPACE);                                     72908000
         GOTO(UNC,ABORT);                                               72909000
%                                                                       72910000
    LABL(ABORTRECEIVE);                                                 72911000
         HEADING("ABORT RECEIVE");                                      72912000
%                                                                       72913000
         LORB(NO,RECEIVEABORTED,RESULTTYPE);                            72914000
         CALL(REPLACEENABLEDSPACE);                                     72915000
         GOTO(UNC,ABORT);                                               72916000
%                                                                       72917000
    LABL(ABORTLOGIC);                                                   72918000
         HEADING("ABORT LOGIC");                                        72919000
%                                                                       72920000
         LORB(NO,LOGICABORTED,RESULTTYPE);                              72921000
         CALL(REPLACEENABLEDSPACE);                                     72922000
         GOTO(UNC,ABORT);                                               72923000
%                                                                       72924000
    LABL(ABORTDISCONNECT);                                              72925000
         HEADING("ABORT DISCONNECT");                                   72926000
%                                                                       72927000
         LORB(NO,DISCONNECTABORTED,RESULTTYPE);                         72928000
         CALL(REPLACEENABLEDSPACE);                                     72929000
         GOTO(UNC,ABORT);                                               72930000
%                                                                       72931000
    LABL(ABORTSWITCH);                                                  72932000
         HEADING("ABORT SWITCH");                                       72933000
%                                                                       72934000
         LORB(NO,SWITCHABORTED,RESULTTYPE);                             72935000
         TEST(LOCATIONWORD,NULL);                                       72936000
         GOTO(NONZERO,ABORT);                                           72937000
         CALL(REPLACESPACE);                                            72938000
         GOTO(UNC,ABORT);                                               72939000
%                                                                       72940000
    END MESSAGE CONTROL;                                                72941000
%                                                                       72942000
%                                                                       73000000
COMMENT#################################################################73001000
                   SELECTED MESSAGE CONTROL ROUTINES                    73002000
#######################################################################;73003000
%                                                                       73004000
% . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . . . . . .  73005000
%                                                                       73006000
    PROCEDURE SELECTEDMESSAGECONTROL;                                   73007000
    BEGIN                                                               73008000
         INTEGER CLASS,TYPE;                                            73009000
%                                                                       73010000
    WRITESTARS;                                                         73011000
    HEADING("SELECTED MESSAGE CONTROL");                                73012000
%                                                                       73013000
    LABL(INITIATELINE);                                                 73014000
         HEADING("INITIATELINE");                                       73015000
%                                                                       73016000
%   CONTROLS BRANCHING TO THE APPROPRIATE LINE CONTROL LOGIC.           73017000
%                                                                       73018000
         LOADLINEDESCRIPTOR(NO);                                        73019000
         LOR (NO,WR(W)+LINETYPE.FIELD,X);                               73020000
         GOX (UNC,SELF+1);                                              73021000
         GOTO(UNC,INITIATECONTENTIONLINE);                              73022000
         GOTO(UNC,INITIATEPOLLEDLINE);                                  73023000
%                                                                       73024000
    LABL(SUSPENDLINE);                                                  73025000
         HEADING("SUSPEND LINE");                                       73026000
%                                                                       73027000
%   SETS THE LINE STATUS AS SUSPENDED AND MONITORS THE LINE FOR         73028000
%   ABNORMAL CONDITIONS.                                                73029000
%                                                                       73030000
         LOADLINETABLE(LINESTATUS.INDEX,NO);                            73031000
         SET (WR(W),LINESUSPENDED);                                     73032000
         RESET(WR(W),LINEBUSY);                                         73033000
         LMWI(MA,LINETABLE);                                            73034000
         SLEEP;                                                         73035000
         GOTO(UNC,MONITORLINE);                                         73036000
%                                                                       73037000
    LABL(IDLELINE);                                                     73038000
         HEADING("IDLELINE");                                           73039000
%                                                                       73040000
%   SETS THE LINE STATUS AS NOT BUSY AND MONITORS THE LINE FOR          73041000
%   ABNORMAL CONDITIONS.                                                73042000
%                                                                       73043000
         LOADLINETABLE(LINESTATUS.INDEX,NO);                            73044000
         RESET(WR(W),LINEBUSY);                                         73045000
         LMWI(MA,LINETABLE);                                            73046000
         SLEEP;                                                         73047000
%                                                                       73048000
    LABL(MONITORLINE);                                                  73049000
         HEADING("MONITOR LINE");                                       73050000
%                                                                       73051000
%   INTERROGATES CANS ON REQUESTED LINES FOR ABNORMAL CONDITIONS.       73052000
%                                                                       73053000
         LEOC(NO,AC,ACCONTROL);                                         73054000
         GOTO(IFNEQ,CONTROL);                                           73055000
         LEOC(NO,AI,32+16+15);                                          73056000
         GOTO(IFEQL,ABORTRECEIVE);                                      73057000
         LEOC(NO,AI,64+16+15);                                          73058000
         GOTO(IFEQL,ABORTTRANSMIT);                                     73059000
         LEOC(NO,AI,32+16+13);                                          73060000
         GOTO(IFEQL,ABORTDISCONNECT);                                   73061000
         LEOC(NO,AI,64+16+13);                                          73062000
         GOTO(IFEQL,ABORTDISCONNECT);                                   73063000
         GOTO(UNC,CONTROL);                                             73064000
%                                                                       73065000
         FOR CLASS:=                                                    73066000
         OUTPUT,                                                        73067000
         INPUT,                                                         73068000
         ENABLEDINPUT DO                                                73069000
         BEGIN                                                          73070000
%                                                                       73071000
    LABL(INDEXEDINITIATE[CLASS]);                                       73072000
%                                                                       73073000
         FOR TYPE:=0 STEP 1 UNTIL MANYFUNCTIONSETS DO                   73074000
         GOTO(UNC, IF INDEXEDFUNCTION[CLASS,TYPE]=0 THEN                73075000
              UNDEFINEDFUNCTION ELSE INDEXEDFUNCTION[CLASS,TYPE]);      73076000
         END;                                                           73077000
%                                                                       73078000
    END SELECTED MESSAGE CONTROL;                                       73079000
%                                                                       74000000
COMMENT#################################################################74001000
                   LINE CONTROL ROUTINES                                74002000
#######################################################################;74003000
%                                                                       74004000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74005000
%                                                                       74006000
    PROCEDURE POLLINGLOGIC;                                             74007000
    BEGIN                                                               74008000
    LABL(INITIATEPOLLEDLINE);                                           74009000
         HEADING("INITIATE POLLED LINE");                               74010000
%                                                                       74011000
%   INITIALIZES POINTERS TO THE CURRENT STATION ON THE REQUESTED POLLED 74012000
%   LINE.                                                               74013000
%                                                                       74014000
         LOADLINETABLE(LINESTATUS.INDEX,NO);                            74015000
         RESET(WR(W),LINEBUSY);                                         74016000
         SET (WR(W),LINEREADY);                                         74017000
         LMWI(MA,LINETABLE);                                            74018000
         SMWD(NO,LINETABLEENTRY);                                       74019000
         MOVE(LINETABLE,INDEXADDRESS);                                  74020000
         LOR (NO,WR(W)+LINESTATION.FIELD,BYTE(INDEXADDRESS,2));         74021000
         HAD (INDEXADDRESS,MA);                                         74022000
         LOR (NO,WR(W)+LINESTATIONS.FIELD,BYTE(INDEXADDRESS,2));        74023000
         HADB(LINETABLESIZE-LINESTATUS.INDEX,MA);                       74024000
         HSBB(1,STATIONTABLE);                                          74025000
%                                                                       74026000
    LABL(SELECTPOLLEDSTATION);                                          74027000
         HEADING("SELECT POLLED STATION");                              74028000
%                                                                       74029000
%   SETS POINTERS TO NEXT STATION IN THE POLLING LIST FOR THE LINE.     74030000
%   WHEN THE END OF THE POLLING LIST IS REACHED FREQUENCY CONTROL       74031000
%   VARIABLES ARE UPDATED AND THE LINE IS DELAYED FOR THE FREQUENCY     74032000
%   PERIOD IF NO ACTION HAS BEEN PROCESSED ON THE LINE.                 74033000
%                                                                       74034000
         LOR (NO,LINETABLEENTRY+LINESTATION.FIELD,X);                   74035000
         LORB(NO,DELAY(5 MICROSEC),AI);                                 74036000
         SUBB(X,1,LINETABLEENTRY+LINESTATION.FIELD);                    74037000
         GOTO(IFGEQ,INTERROGATEPOLLEDSTATION);                          74038000
         LOR (NO,LINETABLEENTRY+LINESTATIONS.FIELD,                     74039000
              LINETABLEENTRY+LINESTATION.FIELD);                        74040000
         HAD (INDEXADDRESS,STATIONTABLE);                               74041000
         LOR (NO,LINETABLEENTRY+LINETIME.FIELD,X);                      74042000
         LORB(NO,0,LINETABLEENTRY+LINETIME.FIELD);                      74043000
         LOR (NO,X,LINETABLEENTRY+LINETIMEUSED.FIELD);                  74044000
         GOTO(NONZERO,INTERROGATEPOLLEDSTATION);                        74045000
         ADDB(X,1,LINETABLEENTRY+LINETIMEUSED.FIELD);                   74046000
         LOR (NO,LINETABLEENTRY+LINEDELAY.FIELD,AI);                    74047000
%                                                                       74048000
    LABL(INTERROGATEPOLLEDSTATION);                                     74049000
         HEADING("INTERROGATE POLLED STATION");                         74050000
%                                                                       74051000
%   INCLUDES STATIONS IN THE POLLING LIST WHICH HAVE BEEN DELAYED       74052000
%   ENOUGH TIME ACCORDING TO THERE PRIORITY OTHERWISE THE STATIONS      74053000
%   TIME IS JUST UPDATED BY THE TIME USED ON THE LINE.                  74054000
%                                                                       74055000
         AWI (2,ACTIMER,0);                                             74056000
         SLEEP;                                                         74057000
         LEOC(NO,AC,ACTIMER);                                           74058000
         GOTO(IFNEQ,MONITORLINE);                                       74059000
         LMRI(STATIONTABLE,NO);                                         74060000
         HSBB(1,STATIONTABLE);                                          74061000
         TEST(WR(W),STATIONREADY);                                      74062000
         GOTO(ZERO,SELECTPOLLEDSTATION);                                74063000
         LOR (NO,WR(W)+STATIONTIME.FIELD,X);                            74064000
         SUB (X,LINETABLEENTRY+LINETIMEUSED.FIELD,                      74065000
              WR(W)+STATIONTIME.FIELD);                                 74066000
         LMWI(MA,NO);                                                   74067000
         GOTO(IFGTR,SELECTPOLLEDSTATION);                               74068000
         LOR (NO,WR(W)+STATIONPRIORITY.FIELD,WR(W)+STATIONTIME.FIELD);  74069000
         LMWI(MA,NO);                                                   74070000
%                                                                       74071000
    LABL(POLLEDSTATIONQUEUED);                                          74072000
         HEADING("POLLED STATION QUEUED");                              74073000
%                                                                       74074000
%   PASSES CONTROL OF THE LINE TO THE CURRENT STATION AFTER UPDATING    74075000
%   THE TIME VARIABLES IF THE STATIONS QUEUE CONTAINS ANY REQUESTS.     74076000
%                                                                       74077000
         TEST(WR(W),STATIONQUEUED);                                     74078000
         GOTO(ZERO,POLLEDSTATIONENABLED);                               74079000
         SET (LINETABLEENTRY,LINEBUSY);                                 74080000
         LOR (NO,LINETABLEENTRY+LINETIME.FIELD,X);                      74081000
         ADDB(X,1,LINETABLEENTRY+LINETIME.FIELD);                       74082000
         SMRD(LINETABLEENTRY,STATIONTABLE);                             74083000
         LOR (NO,WR(W)+LINESTATION.FIELD,STATION);                      74084000
         LMWI(LINETABLE,NO);                                            74085000
         GOTO(UNC,INITIATESTATIONQUEUE);                                74086000
%                                                                       74087000
    LABL(POLLEDSTATIONENABLED);                                         74088000
         HEADING("POLLED STATION ENABLED");                             74089000
%                                                                       74090000
%   PASSES CONTROL OF THE LINE TO THE CURRENT STATION AFTER UPDATING    74091000
%   THE TIME VARIABLES IF THE STATION IS ENABLED TO RECEIVE INPUT.      74092000
%                                                                       74093000
         TEST(WR(W),STATIONENABLED);                                    74094000
         GOTO(ZERO,SELECTPOLLEDSTATION);                                74095000
         SET (WR(W),LINEBUSY);                                          74096000
         LOR (NO,LINETABLEENTRY+LINETIME.FIELD,X);                      74097000
         ADDB(X,1,LINETABLEENTRY+LINETIME.FIELD);                       74098000
         SMRD(LINETABLEENTRY,STATIONTABLE);                             74099000
         LOR (NO,WR(W)+LINESTATION.FIELD,STATION);                      74100000
         LMWI(LINETABLE,NO);                                            74101000
         GOTO(UNC,INITIATE[ENABLEDINPUT]);                              74102000
%                                                                       74103000
    END POLLING LOGIC;                                                  74104000
%                                                                       74105000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74106000
%                                                                       74107000
    PROCEDURE CONTENTIONLOGIC;                                          74108000
    BEGIN                                                               74109000
    LABL(INITIATECONTENTIONLINE);                                       74110000
         HEADING("INITIATE CONTENTION LINE");                           74111000
%                                                                       74112000
%   INITIATES THE STATION ON A CONTENTION LINE IF IT IS READY AND       74113000
%   QUEUED OR READY AND ENABLED OTHERWISE THE LINE IS IDLED.            74114000
%                                                                       74115000
         LOADLINETABLE(LINESTATUS.INDEX,NO);                            74116000
         SET (WR(W),LINEBUSY);                                          74117000
         HADB(LINETABLESIZE-LINESTATUS.INDEX,STATIONTABLE);             74118000
         LMWI(MA,LINETABLE);                                            74119000
         AWI (3,ACTIMER,DELAY(5 MICROSEC));                             74120000
         SLEEP;                                                         74121000
         LEOC(NO,AC,ACTIMER);                                           74122000
         GOTO(IFNEQ,MONITORLINE);                                       74123000
         LMRI(STATIONTABLE,NO);                                         74124000
         TEST(WR(W),STATIONREADY);                                      74125000
         GOTO(ZERO,IDLELINE);                                           74126000
         TEST(WR(W),STATIONQUEUED);                                     74127000
         GOTO(NONZERO,INITIATESTATIONQUEUE);                            74128000
         TEST(WR(W),STATIONENABLED);                                    74129000
         GOTO(NONZERO,INITIATE[ENABLEDINPUT]);                          74130000
         GOTO(UNC,IDLELINE);                                            74131000
%                                                                       74132000
    LABL(INITIALIZECONTENTIONLINE);                                     74133000
         HEADING("INITIALIZE CONTENTION LINE");                         74134000
%                                                                       74135000
%   SETS THE LINE NOT BUSY ON A CONTENTION LINE ALTHOUGH THE ENABLED    74136000
%   INPUT REQUEST IS BEING EXCUTED ON THE LINE.                         74137000
%                                                                       74138000
         LOADLINETABLE(LINESTATUS.INDEX,SAVEONE);                       74139000
         RESET(WR(W),LINEBUSY);                                         74140000
         LMWI(MA,NO);                                                   74141000
         RESET(CHARACTERWORD,NOTCONTENDED);                             74142000
         MOVE(SAVEONE,NO);                                              74143000
         EXIT(0);                                                       74144000
%                                                                       74145000
    LABL(WAITINGFORCONTENTION);                                         74146000
         HEADING("WAITINGFORCONTENTION");                               74147000
%                                                                       74148000
%   SETS THE LINE BUSY ON A CONTENTION LINE IN AN ENABLED INPUT REQUEST 74149000
%   ONCE ANY CHARACTERS HAVE BEEN RECEIVED ON THE LINE.                 74150000
%                                                                       74151000
         TEST(CHARACTERWORD,NOTCONTENDED);                              74152000
         GOTO(NONZERO,WAITINGFORCONTENTION-1);                          74153000
         LEOC(NO,AC,ACBYTEPRESENT);                                     74154000
         GOTO(IFNEQ,WAITINGFORCONTENTION-1);                            74155000
         LOADLINETABLE(LINESTATUS.INDEX,SAVEONE);                       74156000
         SET(WR(W),LINEBUSY);                                           74157000
         LMWI(MA,NO);                                                   74158000
         SET (CHARACTERWORD,NOTCONTENDED);                              74159000
         MOVE(SAVEONE,NO);                                              74160000
         EXIT(0);                                                       74161000
%                                                                       74162000
    END CONTENTION LOGIC;                                               74163000
%                                                                       74164000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74165000
%                                                                       74166000
    PROCEDURE RESULT(A);                                                74167000
         VALUE A;                                                       74168000
         REAL A;                                                        74169000
    BEGIN                                                               74170000
         LOADMESSAGE(RESULTS.INDEX,NO);                                 74171000
         IF A LEQ 255 THEN                                              74172000
              LORB(NO,A,WR(W)+LINERESULTS.FIELD)                        74173000
         ELSE                                                           74174000
              LOR (NO,A,WR(W)+LINERESULTS.FIELD);                       74175000
         MMW(MA,NO);                                                    74176000
    END;                                                                74177000
%                                                                       74178000
%                                                                       75000000
COMMENT#################################################################75001000
                   DCP REQUESTS                                         75002000
#######################################################################;75003000
%                                                                       75004000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75005000
%                                                                       75006000
    PROCEDURE DCPREQUESTS;                                              75007000
    BEGIN REAL SEGMENT;                                                 75008000
%                                                                       75009000
    WRITESTARS;                                                         75010000
    HEADING("DCP REQUESTS");                                            75011000
%                                                                       75012000
    LABL(REQUEST[NULLREQUEST]);                                         75013000
         HEADING("REQUEST[NULLREQUEST]");                               75014000
%                                                                       75015000
         RESULT(OK);                                                    75016000
         CALL(QUEUEINWAIT);                                             75017000
         GOTO(UNC,CONTROL);                                             75018000
%                                                                       75019000
    LABL(REQUEST[SETCLUSTERMASK]);                                      75020000
         HEADING("REQUEST[SETCLUSTERMASK]");                            75021000
%                                                                       75022000
         LOR(NO,MESSAGEKEY,AC);                                         75023000
         LOR(NO,MESSAGEVARIANT,AI);                                     75024000
         MSKW;                                                          75025000
         RESULT(OK);                                                    75026000
         CALL(QUEUEINWAIT);                                             75027000
         GOTO(UNC,CONTROL);                                             75028000
    END;                                                                75029000
%                                                                       75030000
%                                                                       76000000
COMMENT#################################################################76001000
                   CONTROL MODE REQUESTS                                76002000
#######################################################################;76003000
%                                                                       76004000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76005000
%                                                                       76006000
    PROCEDURE CONTROLMODEREQUESTS;                                      76007000
    BEGIN REAL SEGMENT;                                                 76008000
%                                                                       76009000
    WRITESTARS;                                                         76010000
    HEADING("CONTROL MODE REQUESTS");                                   76011000
%                                                                       76012000
    LABL(REQUEST[ENTERCONTROLMODE]);                                    76013000
         HEADING("REQUEST[ENTERCONTROLMODE]");                          76014000
%                                                                       76015000
         CALL(INITIATECONTROL);                                         76016000
         GOTO(UNC,TERMINATECONTROL);                                    76017000
%                                                                       76018000
    LABL(REQUEST[ADAPTORWRITE]);                                        76019000
         HEADING("REQUEST[ADAPTORWRITE]");                              76020000
%                                                                       76021000
         CALL(INITIATECONTROL);                                         76022000
         AWI (0,0,0);                                                   76023000
         GOTO(UNC,TERMINATECONTROL);                                    76024000
%                                                                       76025000
    LABL(REQUEST[ACTIVEINTERROGATE]);                                   76026000
         HEADING("REQUEST[ACTIVEINTERROGATE]");                         76027000
%                                                                       76028000
         CALL(INITIATECONTROL);                                         76029000
         AWRR(0,0,0);                                                   76030000
         GOTO(UNC,TERMINATECONTROL);                                    76031000
%                                                                       76032000
    LABL(REQUEST[PASSIVEINTERROGATE]);                                  76033000
         HEADING("REQUEST[PASSIVEINTERROGATE]");                        76034000
%                                                                       76035000
         CALL(INITIATECONTROL);                                         76036000
         AWI (0,0,0);                                                   76037000
         SLEEP;                                                         76038000
         GOTO(UNC,TERMINATECONTROL);                                    76039000
%                                                                       76040000
    LABL(REQUEST[ENTERNORMALMODE]);                                     76041000
         HEADING("REQUEST[ENTERNORMALMODE]");                           76042000
%                                                                       76043000
         CALL(LINEREQUEST);                                             76044000
         LMRI(LINETABLE,NO);                                            76045000
         TEST(WR(W),CONTROLMODE);                                       76046000
         GOTO(ZERO,REQUESTSTATUSERROR);                                 76047000
         RESET(WR(W),CONTROLMODE);                                      76048000
         LMWI(MA,NO);                                                   76049000
         CALL(INITIALIZEADAPTOR);                                       76050000
         TEST(LINEDESCRIPTOR,LINEDIALIN+LINEDIALOUT);                   76051000
         GOTO(NONZERO,INITIATE[INTERROGATESTATUS]);                     76052000
         LORB(NO,STATUSPRESENT,RESULTTYPE);                             76053000
         CALL(TERMINATEWITHSTATUS);                                     76054000
         GOTO(UNC,INITIATELINE);                                        76055000
    END;                                                                76056000
%                                                                       76057000
%                                                                       77000000
COMMENT#################################################################77001000
                   NORMAL MODE REQUESTS                                 77002000
#######################################################################;77003000
%                                                                       77004000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77005000
%                                                                       77006000
    PROCEDURE NORMALMODEREQUESTS;                                       77007000
    BEGIN REAL I;                                                       77008000
%                                                                       77009000
    WRITESTARS;                                                         77010000
    HEADING("NORMAL MODE REQUESTS");                                    77011000
%                                                                       77012000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77013000
%                                                                       77014000
    LABL(REQUEST[REINITIALIZEDOUTPUT]);                                 77015000
         HEADING("REINITIALIZED OUTPUT");                               77016000
%                                                                       77017000
         CALL(INITIALIZELINE);                                          77018000
         CALL(INITIALIZESTATION);                                       77019000
         CALL(INITIATEIFSUSPENDED);                                     77020000
         LORB(NO,OUTPUT,MESSAGECLASS);                                  77021000
         GOTO(UNC,INITIATESUSPENDEDLINE);                               77022000
%                                                                       77023000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77024000
%                                                                       77025000
    LABL(REQUEST[REINITIALIZEDINPUT]);                                  77026000
         HEADING("REINITIALIZED INPUT");                                77027000
%                                                                       77028000
         CALL(INITIALIZELINE);                                          77029000
         CALL(INITIALIZESTATION);                                       77030000
         CALL(INITIATEIFSUSPENDED);                                     77031000
         LORB(NO,INPUT,MESSAGECLASS);                                   77032000
         GOTO(UNC,INITIATESUSPENDEDLINE);                               77033000
%                                                                       77034000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77035000
%                                                                       77036000
    LABL(REQUEST[REINITIALIZEDENABLEDINPUT]);                           77037000
         HEADING("REINITIALIZED ENABLEDINPUT");                         77038000
%                                                                       77039000
         CALL(INITIALIZELINE);                                          77040000
         CALL(INITIALIZESTATION);                                       77041000
         CALL(INITIATEIFSUSPENDED);                                     77042000
         LORB(NO,ENABLEDINPUT,MESSAGECLASS);                            77043000
         GOTO(UNC,INITIATESUSPENDEDLINE);                               77044000
%                                                                       77045000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77046000
%                                                                       77047000
    LABL(REQUEST[OUTPUT]);                                              77048000
         HEADING("OUTPUT REQUEST");                                     77049000
%                                                                       77050000
         CALL(CONDITIONALREQUEST);                                      77051000
         CALL(INITIATEIFIDLE);                                          77052000
%                                                                       77053000
    LABL(INITIATE[OUTPUT]);                                             77054000
%                                                                       77055000
         LOADTERMINALTABLE(TERMINALTYPE.INDEX,NO);                      77056000
         LOR (NO,WR(W)+TERMINALTYPE.FIELD,X);                           77057000
         RESET(CHARACTERWORD,SEGMENTEDTEXT+SEGMENTEDRECORD              77058000
              +NOTCONTENDED);                                           77059000
         LORB(NO,0,TRANSFERADDRESS);                                    77060000
         LMRI(STATIONTABLE,NO);                                         77061000
         MOVE(WRR(3),NO);                                               77062000
         HADB(STATIONRESULTS.INDEX,MA);                                 77063000
         SMRD(NO,ADDRESS);                                              77064000
         LMWI(ADDRESS,NO);                                              77065000
         GOX (UNC,INDEXEDINITIATE[OUTPUT]);                             77066000
%                                                                       77067000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77068000
%                                                                       77069000
    LABL(REQUEST[INPUT]);                                               77070000
         HEADING("INPUT");                                              77071000
%                                                                       77072000
         CALL(CONDITIONALREQUEST);                                      77073000
         CALL(INITIATEIFIDLE);                                          77074000
%                                                                       77075000
    LABL(INITIATE[INPUT]);                                              77076000
%                                                                       77077000
         LOADTERMINALTABLE(TERMINALTYPE.INDEX,NO);                      77078000
         LOR (NO,WR(W)+TERMINALTYPE.FIELD,X);                           77079000
         LORB(NO,0,TRANSFERADDRESS);                                    77080000
         RESET(CHARACTERWORD,SEGMENTEDTEXT+SEGMENTEDRECORD              77081000
              +NOTCONTENDED);                                           77082000
         LMRI(STATIONTABLE,NO);                                         77083000
         MOVE(WRR(3),NO);                                               77084000
         HADB(STATIONRESULTS.INDEX,MA);                                 77085000
         SMRD(NO,ADDRESS);                                              77086000
         LMWI(ADDRESS,NO);                                              77087000
         GOX (UNC,INDEXEDINITIATE[INPUT]);                              77088000
%                                                                       77089000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77090000
%                                                                       77091000
    LABL(REQUEST[ENABLEINPUT]);                                         77092000
         HEADING("ENABLE INPUT REQUEST");                               77093000
%                                                                       77094000
         CALL(STATIONREQUEST);                                          77095000
         CALL(INITIATEIFIDLE);                                          77096000
%                                                                       77097000
    LABL(INITIATE[ENABLEINPUT]);                                        77098000
%                                                                       77099000
         LMRI (STATIONTABLE,NO);                                        77100000
         TEST(MESSAGE,BIT(24));                                         77101000
         GOTO(NONZERO,SELF+3);                                          77102000
         RESET(WR(W),STATIONENABLED);                                   77103000
         GOTO(UNC,SELF+2);                                              77104000
%                                                                       77105000
         SET (WR(W),STATIONENABLED);                                    77106000
         LMWI(MA,NO);                                                   77107000
         GOTO(UNC,TERMINATEANDINITIATE);                                77108000
%                                                                       77109000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77110000
%                                                                       77111000
%                                                                       77112000
    LABL(REQUEST[RESETSTATIONCHARACTERS]);                              77113000
         HEADING("RESET STATION CHARACTERS REQUEST");                   77114000
%                                                                       77115000
         CALL(STATIONREQUEST);                                          77116000
         CALL(INITIATEIFIDLE);                                          77117000
%                                                                       77118000
    LABL(INITIATE[RESETSTATIONCHARACTERS]);                             77119000
%                                                                       77120000
         LOADTERMINALTABLE(TERMINALCHARACTERS.INDEX,NO);                77121000
         SMWD(NO,BUFFER);                                               77122000
         LOADSTATIONTABLE(STATIONBYTES.INDEX,NO);                       77123000
%                                                                       77124000
         FOR I:=0 STEP 1 UNTIL 5 DO                                     77125000
         BEGIN                                                          77126000
              TEST(MESSAGE,BIT(29-I));                                  77127000
              GOTO(NONZERO,SELF+2);                                     77128000
              LOR (NO,BYTE(BUFFER,I),WR(W+I));                          77129000
         END;                                                           77130000
         LMWI(MA,NO);                                                   77131000
         GOTO(UNC,TERMINATEANDINITIATE);                                77132000
%                                                                       77133000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77134000
%                                                                       77135000
    LABL(REQUEST[SETADAPTORTYPE]);                                      77136000
         HEADING("SET ADAPTOR TYPE REQUEST");                           77137000
%                                                                       77138000
         CALL(INITIALIZELINE);                                          77139000
         LOADLINETABLE(LINEADAPTORTYPE.INDEX,NO);                       77140000
         LOR (NO,MESSAGEKEY,WR(W)+LINEADAPTORTYPE.FIELD);               77141000
         LMWI(MA,NO);                                                   77142000
         CALL(INITIALIZEADAPTOR);                                       77143000
         RESULT(OK);                                                    77144000
         CALL(QUEUEINWAIT);                                             77145000
         GOTO(UNC,CONTROL);                                             77146000
%                                                                       77147000
    LABL(INITIATE[SETADAPTORTYPE]);                                     77148000
%                                                                       77149000
         GOTO(UNC,UNDEFINEDFUNCTION);                                   77150000
%                                                                       77151000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77152000
%                                                                       77153000
%                                                                       77154000
    LABL(REQUEST[INTERROGATESTATUS]);                                   77155000
         HEADING("INTERROGATE STATUS REQUEST");                         77156000
%                                                                       77157000
         CALL(LINEREQUEST);                                             77158000
         LMRI(LINETABLE,NO);                                            77159000
         TEST(WR(W),LINEBUSY+LINESWITCHING+LINESUSPENDED+CONTROLMODE    77160000
              +LINERINGING);                                            77161000
         GOTO(NONZERO,REQUESTSTATUSERROR);                              77162000
         TEST(LINEDESCRIPTOR,LINEDIALIN+LINEDIALOUT);                   77163000
         GOTO(NONZERO,INITIATE[INTERROGATESTATUS]);                     77164000
         LORB(NO,STATUSPRESENT,RESULTTYPE);                             77165000
         CALL(TERMINATEWITHSTATUS);                                     77166000
         GOTO(UNC,INITIATELINE);                                        77167000
%                                                                       77168000
    LABL(INITIATE[INTERROGATESTATUS]);                                  77169000
%                                                                       77170000
         LORB(NO,STATUSPRESENT,RESULTTYPE);                             77171000
         AWRR(3,ACINTERROGATEIR,0);                                     77172000
         LANC(X,AC,TWO(3));                                             77173000
         LEOC(SAME,X,TWO(3));                                           77174000
         LANC(Y,AI,TWO(2));                                             77175000
         LOR (X,Y,X);                                                   77176000
         GOTO(ZERO,DISCONNECTED);                                       77177000
         LEOB(X,TWO(2)+TWO(3),NO);                                      77178000
         GOTO(NONZERO,INITIATE[DISCONNECT]);                            77179000
         GOTO(UNC,CONNECTED);                                           77180000
%                                                                       77181000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77182000
%                                                                       77183000
%                                                                       77184000
    LABL(REQUEST[SETSTATIONREADY]);                                     77185000
         HEADING("SET STATION READY REQUEST");                          77186000
%                                                                       77187000
         CALL(INITIALIZELINE);                                          77188000
         CALL(INITIALIZESTATION);                                       77189000
         TEST(MESSAGE,BIT(24));                                         77190000
         GOTO(NONZERO,INITIATE[SETSTATIONREADY]);                       77191000
         LMRI(STATIONTABLE,NO);                                         77192000
         RESET(WR(W),STATIONREADY);                                     77193000
         LMWI(MA,NO);                                                   77194000
         GOTO(UNC,INITIATE[RECALLSTATION]);                             77195000
%                                                                       77196000
    LABL(INITIATE[SETSTATIONREADY]);                                    77197000
%                                                                       77198000
         LMRI(STATIONTABLE,NO);                                         77199000
         SET (WR(W),STATIONREADY);                                      77200000
         MOVE(WRR(3),NO);                                               77201000
         HADB(STATIONTALLYS.INDEX,MA);                                  77202000
         LMWI(STATIONTABLE,ADDRESS);                                    77203000
         SMRD(NO,NO);                                                   77204000
         LMWI(ADDRESS,NO);                                              77205000
         RESULT(OK);                                                    77206000
         CALL(QUEUEINWAIT);                                             77207000
%                                                                       77208000
         LMRI(LINETABLE,NO);                                            77209000
         TEST(WR(W),LINECONNECTED);                                     77210000
         GOTO(ZERO,CONTROL);                                            77211000
         TEST(WR(W),LINEBUSY+CONTROLMODE+LINESWITCHING);                77212000
         GOTO(NONZERO,CONTROL);                                         77213000
         TEST(WR(W),LINESUSPENDED);                                     77214000
         GOTO(ZERO,INITIATELINE);                                       77215000
         LOR (NO,MESSAGESTATION,X);                                     77216000
         LEO (X,WR(W)+LINESTATION.FIELD,NO);                            77217000
         GOTO(IFNEQ,CONTROL);                                           77218000
         RESET(WR(W),LINESUSPENDED);                                    77219000
         LMWI(LINETABLE,NO);                                            77220000
         GOTO(UNC,INITIATELINE);                                        77221000
%                                                                       77222000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77223000
%                                                                       77224000
%                                                                       77225000
    LABL(REQUEST[SETTRANSMISSIONNUMBER]);                               77226000
         HEADING("SET TRANSMISSION NUMBER REQUEST");                    77227000
%                                                                       77228000
         CALL(STATIONREQUEST);                                          77229000
         CALL(INITIATEIFIDLE);                                          77230000
%                                                                       77231000
    LABL(INITIATE[SETTRANSMISSIONNUMBER]);                              77232000
%                                                                       77233000
         LOADMESSAGE(TEXT.INDEX,NO);                                    77234000
         SMWD(NO,BUFFER);                                               77235000
         LOADSTATIONTABLE(STATIONTRANSMISSIONNUMBER.INDEX,NO);          77236000
%                                                                       77237000
         TEST(MESSAGE,BIT(25)+BIT(24));                                 77238000
         GOTO(NONZERO,SELF+4);                                          77239000
         SMRD(BUFFER,NO);                                               77240000
         LMWI(MA,NO);                                                   77241000
         GOTO(UNC,SELF+8);                                              77242000
%                                                                       77243000
         TEST(MESSAGE,BIT(25));                                         77244000
         GOTO(NONZERO,SELF+4);                                          77245000
         MOVE(HALF(BUFFER,L),ADDRESS);                                  77246000
         LMWI(ADDRESS,WRL(7));                                          77247000
         GOTO(UNC,SELF+3);                                              77248000
%                                                                       77249000
         MOVE(HALF(BUFFER,R),ADDRESS);                                  77250000
         LMWI(ADDRESS,WRR(7));                                          77251000
         GOTO(UNC,TERMINATEANDINITIATE);                                77252000
%                                                                       77253000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77254000
%                                                                       77255000
    LABL(REQUEST[SETSTATIONADDRESS]);                                   77256000
         HEADING("SET STATION ADDRESS REQUEST");                        77257000
%                                                                       77258000
         CALL(STATIONREQUEST);                                          77259000
         CALL(INITIATEIFIDLE);                                          77260000
%                                                                       77261000
    LABL(INITIATE[SETSTATIONADDRESS]);                                  77262000
%                                                                       77263000
         LOADMESSAGE(TEXT.INDEX,NO);                                    77264000
         SMWD(NO,BUFFER);                                               77265000
         LOADSTATIONTABLE(STATIONADDRESS.INDEX,NO);                     77266000
%                                                                       77267000
         TEST(MESSAGE,BIT(24)+BIT(25));                                 77268000
         GOTO(NONZERO,SELF+4);                                          77269000
         SMRD(BUFFER,NO);                                               77270000
         LMWI(MA,NO);                                                   77271000
         GOTO(UNC,SELF+8);                                              77272000
%                                                                       77273000
         TEST(MESSAGE,BIT(25));                                         77274000
         GOTO(NONZERO,SELF+4);                                          77275000
         MOVE(HALF(BUFFER,L),ADDRESS);                                  77276000
         LMWI(ADDRESS,WRL(7));                                          77277000
         GOTO(UNC,SELF+3);                                              77278000
%                                                                       77279000
         MOVE(HALF(BUFFER,R),ADDRESS);                                  77280000
         LMWI(ADDRESS,WRR(7));                                          77281000
         GOTO(UNC,TERMINATEANDINITIATE);                                77282000
%                                                                       77283000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77284000
%                                                                       77285000
    BEGIN REAL SEGMENT;                                                 77286000
%                                                                       77287000
    LABL(REQUEST[SETSTATIONCHARACTERS]);                                77288000
         HEADING("SET STATION CHARACTERS REQUEST");                     77289000
%                                                                       77290000
         CALL(STATIONREQUEST);                                          77291000
         CALL(INITIATEIFIDLE);                                          77292000
%                                                                       77293000
    LABL(INITIATE[SETSTATIONCHARACTERS]);                               77294000
%                                                                       77295000
         LOADMESSAGE(TEXT.INDEX,NO);                                    77296000
         SMWD(NO,BUFFER);                                               77297000
         LOADSTATIONTABLE(STATIONBYTES.INDEX,NO);                       77298000
%                                                                       77299000
         FOR I:=0 STEP 1 UNTIL 5 DO                                     77300000
         BEGIN                                                          77301000
              TEST(MESSAGE,BIT(29-I));                                  77302000
              GOTO(NONZERO,SELF+2);                                     77303000
              LOR (NO,BYTE(BUFFER,I),WR(W+I));                          77304000
         END;                                                           77305000
%                                                                       77306000
         LMWI(MA,NO);                                                   77307000
         GOTO(UNC,TERMINATEANDINITIATE);                                77308000
%                                                                       77309000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77310000
%                                                                       77311000
    LABL(REQUEST[SETSEQUENCEMODE]);                                     77312000
         HEADING("SET SEQUENCE MODE REQUEST");                          77313000
%                                                                       77314000
         CALL(STATIONREQUEST);                                          77315000
         CALL(INITIATEIFIDLE);                                          77316000
%                                                                       77317000
    LABL(INITIATE[SETSEQUENCEMODE]);                                    77318000
%                                                                       77319000
         LMRI(STATIONTABLE,NO);                                         77320000
         RESET(WR(W),STATIONSEQUENCE);                                  77321000
         TEST(MESSAGE,BIT(24));                                         77322000
         GOTO(ZERO,SELF+14);                                            77323000
%                                                                       77324000
         SET(WR(W),STATIONSEQUENCE);                                    77325000
         LMWI(MA,NO);                                                   77326000
%                                                                       77327000
         MOVE(WRR(3),NO);                                               77328000
         HADB(STATIONSEQUENCEINCREMENT.INDEX,ADDRESS);                  77329000
         LOADMESSAGE(TEXT.INDEX,NO);                                    77330000
         HADB(1,MA);                                                    77331000
         SMWD(MA,BUFFER);                                               77332000
         MMR (MA,NO);                                                   77333000
%                                                                       77334000
         LMWI(ADDRESS,NO);                                              77335000
         HSBB(STATIONSEQUENCEINCREMENT.INDEX-                           77336000
              STATIONSEQUENCEBASE.INDEX,MA);                            77337000
         SMRD(BUFFER,MA);                                               77338000
%                                                                       77339000
         LMWI(MA,NO);                                                   77340000
         GOTO(UNC,TERMINATEANDINITIATE);                                77341000
%                                                                       77342000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77343000
%                                                                       77344000
%                                                                       77345000
    LABL(REQUEST[ABORTED]);                                             77346000
         HEADING("ABORTED REQUEST");                                    77347000
%                                                                       77348000
    LABL(INITIATE[ABORTED]);                                            77349000
%                                                                       77350000
         GOTO(UNC,INVALIDCLASS);                                        77351000
%                                                                       77352000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77353000
%                                                                       77354000
%                                                                       77355000
    LABL(REQUEST[ENABLEDINPUT]);                                        77356000
         HEADING("ENABLED INPUT RECEIVED REQUEST");                     77357000
%                                                                       77358000
         GOTO(UNC,INVALIDCLASS);                                        77359000
%                                                                       77360000
    LABL(INITIATE[ENABLEDINPUT]);                                       77361000
%                                                                       77362000
         RESET(CHARACTERWORD,SEGMENTEDTEXT+SEGMENTEDRECORD              77363000
              +NOTCONTENDED);                                           77364000
         SET (LOCATIONWORD,NULL);                                       77365000
         LORB(NO,0,TRANSFERADDRESS);                                    77366000
         LOADTERMINALTABLE(TERMINALTYPE.INDEX,NO);                      77367000
         LOR (NO,WR(W)+TERMINALTYPE.FIELD,X);                           77368000
         LMRI(STATIONTABLE,NO);                                         77369000
         MOVE(WRR(3),NO);                                               77370000
         HADB(STATIONRESULTS.INDEX,MA);                                 77371000
         SMRD(NO,ADDRESS);                                              77372000
         LMWI(ADDRESS,NO);                                              77373000
         GOX (UNC,INDEXEDINITIATE[ENABLEDINPUT]);                       77374000
%                                                                       77375000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77376000
%                                                                       77377000
%                                                                       77378000
    LABL(REQUEST[LOOKFORRING]);                                         77379000
         HEADING("LOOK FOR RING REQUEST");                              77380000
%                                                                       77381000
         CALL(INITIALIZELINE);                                          77382000
         RESULT(OK);                                                    77383000
         CALL(QUEUEINWAIT);                                             77384000
         LOADLINEDESCRIPTOR(NO);                                        77385000
         TEST(WR(W),LINEDIALIN+LINEDIALOUT);                            77386000
         GOTO(ZERO,CONTROL);                                            77387000
         SET (WR(W),LINEWAITINGFORRING);                                77388000
         LMWI(MA,NO);                                                   77389000
         SMWD(WRR(7),LINEDESCRIPTOR);                                   77390000
         LMRI(MA,LINETABLE);                                            77391000
         TEST(WR(W),LINERINGING);                                       77392000
         GOTO(NONZERO,INITIATE[ANSWER]);                                77393000
         TEST(WR(W),LINEBUSY+LINESUSPENDED+LINESWITCHING+CONTROLMODE    77394000
              +LINECONNECTED);                                          77395000
         GOTO(NONZERO,CONTROL);                                         77396000
%                                                                       77397000
    LABL(INITIATE[LOOKFORRING]);                                        77398000
         AWI (3,ACCOMMAND,AIWAITFORRING);                               77399000
         SLEEP;                                                         77400000
         LEOC(NO,AC,ACCONTROL);                                         77401000
         GOTO(IFNEQ,CONTROL);                                           77402000
         LEOC(NO,AI,16+15);                                             77403000
         GOTO(IFNEQ,CONTROL);                                           77404000
         LOADLINEDESCRIPTOR(NO);                                        77405000
         TEST(WR(W),LINEWAITINGFORRING);                                77406000
         GOTO(NONZERO,INITIATE[ANSWER]);                                77407000
         LMRI(LINETABLE,NO);                                            77408000
         SET (WR(W),LINERINGING);                                       77409000
         LMWI(MA,NO);                                                   77410000
         AWI (3,ACTIMER,DELAY(5 SEC));                                  77411000
         SLEEP;                                                         77412000
         LEOC(NO,AC,ACTIMER);                                           77413000
         GOTO(IFNEQ,SELF-3);                                            77414000
         LMRI(LINETABLE,NO);                                            77415000
         RESET(WR(W),LINERINGING);                                      77416000
         LMWI(MA,NO);                                                   77417000
         GOTO(UNC,INITIATE[LOOKFORRING]);                               77418000
%                                                                       77419000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77420000
%                                                                       77421000
    LABL(REQUEST[BREAK]);                                               77422000
         HEADING("BREAK REQUEST");                                      77423000
%                                                                       77424000
    LABL(INITIATE[BREAK]);                                              77425000
%                                                                       77426000
         GOTO(UNC,INVALIDCLASS);                                        77427000
%                                                                       77428000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77429000
%                                                                       77430000
    LABL(REQUEST[DISCONNECT]);                                          77431000
         HEADING("DISCONNECT REQUEST");                                 77432000
%                                                                       77433000
         CALL(LINEREQUEST);                                             77434000
         LMRI(LINETABLE,NO);                                            77435000
         TEST(WR(W),LINECONNECTED);                                     77436000
         GOTO(ZERO,REQUESTSTATUSERROR);                                 77437000
         TEST(WR(W),LINEBUSY+LINESUSPENDED+LINESWITCHING);              77438000
         GOTO(NONZERO,REQUESTSTATUSERROR);                              77439000
         RESULT(OK);                                                    77440000
         CALL(QUEUEINWAIT);                                             77441000
         TEST(LINEDESCRIPTOR,LINEDIALIN+LINEDIALOUT);                   77442000
         GOTO(NONZERO,INITIATE[DISCONNECT]);                            77443000
         LMRI(LINETABLE,NO);                                            77444000
         SET (WR(W),LINECONNECTED);                                     77445000
         LMWI(MA,NO);                                                   77446000
         TEST(WR(W),CONTROLMODE);                                       77447000
         GOTO(NONZERO,CONTROL);                                         77448000
         GOTO(UNC,INITIATELINE);                                        77449000
%                                                                       77450000
    LABL(INITIATE[DISCONNECT]);                                         77451000
%                                                                       77452000
         LMRI(LINETABLE,NO);                                            77453000
         SET (WR(W),LINESWITCHING);                                     77454000
         RESET(WR(W),LINEBUSY+LINESUSPENDED+LINECONNECTED+LINERINGING); 77455000
         LMWI(MA,NO);                                                   77456000
         CALL(TERMINATEWITHSTATUS);                                     77457000
         AWI (3,ACCOMMAND,AIOUTOFSERVICE);                              77458000
         AWI (3,ACTIMER,DELAY(4 SEC));                                  77459000
         SLEEP;                                                         77460000
         LEOC(NO,AC,ACTIMER);                                           77461000
         GOTO(IFNEQ,CONTROL);                                           77462000
         AWRR(3,ACINTERROGATEIR,0);                                     77463000
         LANC(NO,AI,TWO(2));                                            77464000
         GOTO(NONZERO,ABORTSWITCH);                                     77465000
%                                                                       77466000
    LABL(DISCONNECTED);                                                 77467000
         HEADING("DISCONNECTED");                                       77468000
%                                                                       77469000
         LMRI(LINETABLE,NO);                                            77470000
         RESET(WR(W),LINEBUSY+LINESUSPENDED+LINERINGING+LINECONNECTED+  77471000
              LINESWITCHING+LINEREADY);                                 77472000
         LMWI(MA,NO);                                                   77473000
         CALL(TERMINATEWITHSTATUS);                                     77474000
         TEST(WR(W),CONTROLMODE);                                       77475000
         GOTO(ZERO,INITIATE[LOOKFORRING]);                              77476000
         SLEEP;                                                         77477000
         GOTO(UNC,CONTROL);                                             77478000
%                                                                       77479000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77480000
%                                                                       77481000
    LABL(REQUEST[SETSTATIONTYPE]);                                      77482000
         HEADING("SET STATION TYPE REQUEST");                           77483000
%                                                                       77484000
         CALL(STATIONREQUEST);                                          77485000
         CALL(INITIATEIFIDLE);                                          77486000
%                                                                       77487000
    LABL(INITIATE[SETSTATIONTYPE]);                                     77488000
%                                                                       77489000
         LMRI(STATIONTABLE,NO);                                         77490000
         LOR (NO,MESSAGEVARIANT,WR(W)+STATIONTYPE.FIELD);               77491000
         LMWI(MA,NO);                                                   77492000
         GOTO(UNC,TERMINATEANDINITIATE);                                77493000
%                                                                       77494000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77495000
%                                                                       77496000
    LABL(REQUEST[RECALLSTATION]);                                       77497000
         HEADING("RECALL STATION");                                     77498000
%                                                                       77499000
         CALL(INITIALIZELINE);                                          77500000
         CALL(INITIALIZESTATION);                                       77501000
%                                                                       77502000
    LABL(INITIATE[RECALLSTATION]);                                      77503000
%                                                                       77504000
         LMRI(LINETABLE,NO);                                            77505000
         TEST(WR(W),LINEBUSY);                                          77506000
         GOTO(ZERO,SELF+6);                                             77507000
         TEST(WR(W),CONTROLMODE);                                       77508000
         GOTO(NONZERO,SELF+4);                                          77509000
         LOR (NO,MESSAGESTATION,X);                                     77510000
         LEO (X,WR(W)+LINESTATION.FIELD,NO);                            77511000
         GOTO(IFEQL,REQUESTSTATUSERROR);                                77512000
         RESULT(OK);                                                    77513000
         CALL(QUEUEINWAIT);                                             77514000
         LMRI(STATIONTABLE,NO);                                         77515000
         TEST(WR(W),STATIONQUEUED);                                     77516000
         GOTO(ZERO,CONTROL);                                            77517000
         RESET(WR(W),STATIONQUEUED);                                    77518000
         LMWI(MA,NO);                                                   77519000
         MOVE(WRR(3),NO);                                               77520000
         HADB(STATIONQUEUE.INDEX,MA);                                   77521000
         LMRI(MA,NO);                                                   77522000
         SMWD(NO,LOCATIONWORD);                                         77523000
         CALL(QUEUEINWAIT);                                             77524000
         GOTO(UNC,CONTROL);                                             77525000
%                                                                       77526000
% . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . . . . . .77527000
%                                                                       77528000
    LABL(REQUEST[ANSWER]);                                              77529000
         HEADING("ANSWER REQUEST");                                     77530000
%                                                                       77531000
         GOTO(UNC,INVALIDCLASS);                                        77532000
%                                                                       77533000
    LABL(INITIATE[ANSWER]);                                             77534000
%                                                                       77535000
         LMRI(LINETABLE,NO);                                            77536000
         SET (WR(W),LINESWITCHING);                                     77537000
         LMWI(MA,NO);                                                   77538000
         AWI (3,ACCOMMAND,AIINITIATERECEIVE);                           77539000
         AWI (3,ACTIMER,DELAY(4 SEC));                                  77540000
         SLEEP;                                                         77541000
         LEOC(NO,AC,ACTIMER);                                           77542000
         GOTO(IFNEQ,CONTROL);                                           77543000
         AWRR(3,ACINTERROGATEIR,0);                                     77544000
         LANC(NO,AI,TWO(2));                                            77545000
         GOTO(ZERO,ABORTSWITCH);                                        77546000
         LANC(NO,AC,TWO(3));                                            77547000
         GOTO(NONZERO,ABORTSWITCH);                                     77548000
         LORB(NO,ANSWER,MESSAGECLASS);                                  77549000
         CALL(GETLABELEDSPACE);                                         77550000
         RESULT(OK);                                                    77551000
         CALL(QUEUEINWAIT);                                             77552000
         LOADLINEDESCRIPTOR(NO);                                        77553000
         RESET(WR(W),LINEWAITINGFORRING);                               77554000
         LMWI(MA,NO);                                                   77555000
%                                                                       77556000
    LABL(CONNECTED);                                                    77557000
         HEADING("CONNECTED");                                          77558000
%                                                                       77559000
         LMRI(LINETABLE,NO);                                            77560000
         RESET(WR(W),LINERINGING+LINESWITCHING+LINEBUSY+LINESUSPENDED+  77561000
              LINEREADY);                                               77562000
         SET (WR(W),LINECONNECTED);                                     77563000
         LMWI(MA,NO);                                                   77564000
         CALL(TERMINATEWITHSTATUS);                                     77565000
         TEST(WR(W),CONTROLMODE);                                       77566000
         GOTO(ZERO,INITIATELINE);                                       77567000
         SLEEP;                                                         77568000
         GOTO(UNC,CONTROL);                                             77569000
%                                                                       77570000
    END OF SEGMENT;                                                     77571000
    WRITESTARS;                                                         77572000
    END OF NORMAL MODE REQUESTS;                                        77573000
%                                                                       77574000
%                                                                       78000000
COMMENT#################################################################78001000
                   TRANSFER TEXT ROUTINES                               78002000
#######################################################################;78003000
%                                                                       78004000
% * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 78005000
%                                                                       78006000
%   SUBROUTINES AND LOGIC USED IN RESPONSE TO A CLUSTER                 78007000
%   ATTENTION NEEDED OR FOR INITIAL CLUSTER ADAPTOR COMMANDS.           78008000
%                                                                       78009000
    PROCEDURE TRANSFERTEXT;                                             78010000
    BEGIN INTEGER I;                                                    78011000
    DEFINE                                                              78012000
         SHIFTCHARACTER   = 60#,                                        78013000
         CONTROLCHARACTER =  1#;                                        78014000
%                                                                       78015000
    WRITESTARS;                                                         78016000
    HEADING("TRANSFER TEXT");                                           78017000
%                                                                       78018000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78019000
%                                                                       78020000
    LABL(LOADBYTE);                                                     78021000
         HEADING("LOADBYTE");                                           78022000
%                                                                       78023000
%   ROUTINE USED TO LOAD A ASCII CHARACTER INTO THE CHARACTER REGISTER  78024000
%   FROM THE CURRENT MESSAGE TEXT. CONTROL WITHIN THE ROUTINE IS        78025000
%   TRANSFERED BY THE RELATIVE INDEX TRANSFERADDRESS WHICH ALLOWS FOR   78026000
%   TEXT POINTER INITIALIZATION ON EITHER A NEW OR PREVIOUSLY           78027000
%   UNFINISHED MESSAGE, THE LOAD ING OF CHARACTERS, OR THE END OF THE   78028000
%   CURRENT MESSAGE.                                                    78029000
%                                                                       78030000
         LOR (NO,TRANSFERADDRESS,X);                                    78031000
         GOX (NONZERO,LOADBYTE);                                        78032000
%                                                                       78033000
         LOADTERMINALTABLE(TERMINALLENGTH.INDEX,SAVETWO);               78034000
         MOVE(WRR(3),NO);                                               78035000
         HSBB(1,TEXTLENGTH);                                            78036000
         LOADMESSAGE(RESULTS.INDEX,NO);                                 78037000
         HAD (WRR(7),ADDRESS);                                          78038000
         LOR (NO,WR(W)+STATIONBACKSPACETALLY.FIELD,CHARACTERADDRESS);   78039000
         MMR (ADDRESS,NO);                                              78040000
         HADB(1,TEXTADDRESS);                                           78041000
         SMWD(MESSAGESTART,BUFFER);                                     78042000
         HADB(REQUESTS.INDEX,MA);                                       78043000
         MMR (MA,NO);                                                   78044000
         SMWD(SAVETWO,MESSAGE);                                         78045000
         LOR (NO,MESSAGELENGTH,BYTE(TEXTLENGTH,0));                     78046000
         LORB(NO,SELF+1-LOADBYTE,TRANSFERADDRESS);                      78047000
%                                                                       78048000
         MOVE(TEXTLENGTH,SAVETWO);                                      78049000
         SUBB(MA0,1,BYTE(TEXTLENGTH,2));                                78050000
         SUBB(MA1,0,BYTE(TEXTLENGTH,1));                                78051000
         GOTO(BORROW,LOADNONE);                                         78052000
         CALL(LOADCHARACTER);                                           78053000
         LEOC(NO,X,SHIFTCHARACTER);                                     78054000
         GOTO(IFNEQ,SELF+5);                                            78055000
         CALL(LOADCHARACTER);                                           78056000
         LEOC(NO,X,SHIFTCHARACTER);                                     78057000
         GOTO(IFEQL,SELF+2);                                            78058000
         LORC(SAME,CF,CONTROLCHARACTER);                                78059000
         TRAN(1,X,CHARACTER);                                           78060000
         MOVE(SAVETWO,NO);                                              78061000
         EXIT(1);                                                       78062000
%                                                                       78063000
    LABL(STOREBYTE);                                                    78064000
         HEADING("STORE BYTE");                                         78065000
%                                                                       78066000
%   ROUTINE USED TO STORE A ASCII CHARACTER FROM THE CHARACTER REGISTER 78067000
%   INTO THE CURRENT MESSAGE TEXT. CONTROL WITHIN THE ROUTINE IS        78068000
%   TRANSFERED BY THE RELATIVE INDEX TRANSFERADDRESS WHICH ALLOWS FOR   78069000
%   TEXT POINTER INITIALIZATION ON A MESSAGE, THE STORING OF            78070000
%   CHARACTERS, OR THE END OF THE CURRENT MESSAGE.                      78071000
%                                                                       78072000
         LOR (NO,TRANSFERADDRESS,X);                                    78073000
         GOX (NONZERO,LOADBYTE);                                        78074000
%                                                                       78075000
         CALL(GETENABLEDSPACEFORINSERT);                                78076000
         CALL(STATIONQUEUEINSERT);                                      78077000
         LOADTERMINALTABLE(TERMINALLENGTH.INDEX,SAVETWO);               78078000
         MOVE(WRR(3),NO);                                               78079000
         HSBB(1,MA);                                                    78080000
         MOVE(MESSAGESTART,TEXTLENGTH);                                 78081000
         HADB(TEXT.INDEX,MA);                                           78082000
         MOVE(SAVETWO,TEXTADDRESS);                                     78083000
         LORB(NO,0,CHARACTERADDRESS);                                   78084000
         LORB(NO,0,BYTE(TEXTLENGTH,0));                                 78085000
         LORB(NO,SELF+1-LOADBYTE,TRANSFERADDRESS);                      78086000
%                                                                       78087000
         MOVE(TEXTLENGTH,SAVETWO);                                      78088000
         SUBB(MA0,1,BYTE(TEXTLENGTH,2));                                78089000
         SUBB(MA1,0,BYTE(TEXTLENGTH,1));                                78090000
         GOTO(BORROW,STORENONE);                                        78091000
         TRAN(5,CHARACTER,D);                                           78092000
         LANC(NO,CF,CONTROLCHARACTER);                                  78093000
         GOTO(NONZERO,SELF+2);                                          78094000
         CALL(STORECHARACTER);                                          78095000
         MOVE(SAVETWO,NO);                                              78096000
         EXIT(1);                                                       78097000
%                                                                       78098000
    LABL(STORENONE);                                                    78099000
         HEADING("STORE NONE");                                         78100000
%                                                                       78101000
%   PREVENTS MORE CHARACTERS FROM BEING STORED THAN WERE SPECIFIED AS   78102000
%   THE TOTAL THAT CAN BE RECEIVED FROM A TERMINAL TYPE.                78103000
%                                                                       78104000
         LOADSTATIONTABLE(STATIONRESULTS.INDEX,NO);                     78105000
         SET (WR(W),ENDOFBUFFERFLAG);                                   78106000
         LMWI(MA,NO);                                                   78107000
%                                                                       78108000
    LABL(LOADNONE);                                                     78109000
         HEADING("LOAD NONE");                                          78110000
%                                                                       78111000
%   PREVENTS LOADING OF MORE CHARACTERS THAN COULD BE TRANSMITTED TO    78112000
%   A SPECIFIED TERMINAL TYPE. ALSO REPRESENTS THE END OF LOADING ON    78113000
%   EITHER A SEGMENTED OR A NON SEGMENTED MESSAGE.                      78114000
%                                                                       78115000
         LORB(NO,LOADNONE+2-LOADBYTE,TRANSFERADDRESS);                  78116000
         MOVE(SAVETWO,NO);                                              78117000
         EXIT(0);                                                       78118000
%                                                                       78119000
    LABL(LOADSEGMENT);                                                  78120000
         HEADING("LOAD SEGMENT");                                       78121000
%                                                                       78122000
%   PASSES THE CURRENT MESSAGE SEGMENT TO THE SYSTEM AND EITHER         78123000
%   ACQUIRES THE NEXT OUTPUT MESSAGE SEGMENT FROM THE STATION QUEUE OR  78124000
%   IF NONE IS PRESENT PASSES CONTROL TO LOAD NONE.                     78125000
%                                                                       78126000
         MMR (MESSAGESTART,HALF(BUFFER,L));                             78127000
         TEST(WR(W),NULL);                                              78128000
         GOTO(NONZERO,LOADNONE);                                        78129000
         MOVE(WRR(7),NO);                                               78130000
         HADB(REQUESTS.INDEX,ADDRESS);                                  78131000
         MMR (ADDRESS,HALF(BUFFER,R));                                  78132000
         SMWD(MESSAGESTART,MESSAGE);                                    78133000
         LEOC(NO,MESSAGECLASS,OUTPUT);                                  78134000
         GOTO(IFNEQ,LOADNONE);                                          78135000
         LOR (NO,MESSAGELENGTH,BYTE(TEXTLENGTH,0));                     78136000
         SMRD(NO,MESSAGEEND);                                           78137000
         HADB(RESULTS.INDEX,MA);                                        78138000
         LORB(NO,REQUESTCONTINUED,WR(W)+STATIONRESULTS.FIELD);          78139000
         MMW (MA,NO);                                                   78140000
         CALL(REMOVEFROMSTATIONQUEUE);                                  78141000
         CALL(QUEUEINWAIT);                                             78142000
         MOVE(HALF(BUFFER,R),NO);                                       78143000
         HADB(TEXT.INDEX,TEXTADDRESS);                                  78144000
         MOVE(HALF(BUFFER,L),MESSAGESTART);                             78145000
         LORB(NO,0,CHARACTERADDRESS);                                   78146000
         SET (CHARACTERWORD,SEGMENTEDRECORD+SEGMENTEDTEXT);             78147000
%                                                                       78148000
    LABL(LOADCHARACTER);                                                78149000
         HEADING("LOAD CHARACTER");                                     78150000
%                                                                       78151000
%   LOAD NEXT INTERNAL CODED CHARACTER FROM MESSAGE TEXT AND TRANSFERS  78152000
%   CONTROL TO LOAD SEGMENT AT THE END OF THE CURRENT MESSAGE SEGMENT.  78153000
%                                                                       78154000
         LOR (NO,BYTE(TEXTLENGTH,0),X);                                 78155000
         GOTO(ZERO,LOADSEGMENT);                                        78156000
         SUBB(X,1,BYTE(TEXTLENGTH,0));                                  78157000
         LANC(X,CHARACTERADDRESS,7);                                    78158000
         ADDB(X,1,CHARACTERADDRESS);                                    78159000
         GOX (UNC,SELF+1);                                              78160000
         FOR I:=0 STEP 1 UNTIL 7 DO                                     78161000
              GOTO(UNC,LOAD[I]);                                        78162000
%                                                                       78163000
         FOR I:=0 STEP 1 UNTIL 7 DO                                     78164000
         BEGIN                                                          78165000
    LABL(LOAD[I]);                                                      78166000
              IF I=0 THEN                                               78167000
              BEGIN                                                     78168000
                   MMR (TEXTADDRESS,SAVEONE);                           78169000
                   HADB(1,TEXTADDRESS);                                 78170000
                   SMWD(SAVEONE,BUFFER);                                78171000
              END;                                                      78172000
              MOVE(BUFFER+REAL(I>3)|4,SAVEONE);                         78173000
              CASE I.[1:2] OF                                           78174000
              BEGIN                                                     78175000
                   BEGIN                                                78176000
                        SHFT(1,3,MA);                                   78177000
                        LANC(X,MA2,63);                                 78178000
                   END;                                                 78179000
                   BEGIN                                                78180000
                        SHFT(3,3,MA);                                   78181000
                        LANC(X,MA1,63);                                 78182000
                   END;                                                 78183000
                   BEGIN                                                78184000
                        SHFT(5,3,MA);                                   78185000
                        LANC(X,MA0,63);                                 78186000
                   END;                                                 78187000
                   LANC(X,MA0,63);                                      78188000
              END;                                                      78189000
              MOVE(SAVEONE,NO);                                         78190000
              EXIT(0);                                                  78191000
         END;                                                           78192000
%                                                                       78193000
    LABL(STORESEGMENT);                                                 78194000
         HEADING("STORE SEGMENT");                                      78195000
%                                                                       78196000
%   PASSES THE CURRENT MESSAGE SEGMENT OF INPUT TO THE SYSTEM AND GETS  78197000
%   ANOTHER MESSAGE SEGMENT FROM THE AVAILABLE SPACE QUEUE.             78198000
%                                                                       78199000
         LOADMESSAGE(REQUESTS.INDEX,HALF(BUFFER,L));                    78200000
         SMWD(MA,MESSAGE);                                              78201000
         LOR (NO,BYTE(TEXTLENGTH,0),WR(W)+LENGTH.FIELD);                78202000
         MMW (MA,NO);                                                   78203000
         HADB(RESULTS.INDEX-REQUESTS.INDEX,ADDRESS);                    78204000
         LOADSTATIONTABLE(STATIONRESULTS.INDEX,NO);                     78205000
         LORB(NO,REQUESTCONTINUED,WR(W)+STATIONRESULTS.FIELD);          78206000
         MMW (ADDRESS,HALF(BUFFER,R));                                  78207000
         LORB(NO,0,WR(W)+STATIONBACKSPACETALLY.FIELD);                  78208000
         LMWI(HALF(BUFFER,R),NO);                                       78209000
         CALL(REMOVEFROMSTATIONQUEUE);                                  78210000
         CALL(QUEUEINWAIT);                                             78211000
         CALL(GETSPACE);                                                78212000
         CALL(STATIONQUEUEINSERT);                                      78213000
         SET (CHARACTERWORD,SEGMENTEDTEXT+SEGMENTEDRECORD);             78214000
         MOVE(MESSAGESTART,NO);                                         78215000
         HADB(TEXT.INDEX,MA);                                           78216000
         LORB(NO,0,BYTE(TEXTLENGTH,0));                                 78217000
         MOVE(HALF(BUFFER,L),TEXTADDRESS);                              78218000
%                                                                       78219000
    LABL(STORECHARACTER);                                               78220000
         HEADING("STORE CHARACTER");                                    78221000
%                                                                       78222000
%   STORES NEXT INTERNAL CODED CHARACTER INTO THE MESSAGE TEXT AND      78223000
%   TRANSFERS CONTROL TO STORE SEGMENT AT THE END OF THE CURRENT        78224000
%   MESSAGE SEGMENT.                                                    78225000
%                                                                       78226000
         ADDC(X,BYTE(TEXTLENGTH,0),256-((SEGMENTLENGTH-TEXT.INDEX)|8)); 78227000
         GOTO(CARRY,STORESEGMENT);                                      78228000
         SUBB(X,255-((SEGMENTLENGTH-TEXT.INDEX)|8),BYTE(TEXTLENGTH,0)); 78229000
         LANC(X,CHARACTERADDRESS,7);                                    78230000
         ADDB(X,1,CHARACTERADDRESS);                                    78231000
         GOX (UNC,SELF+1);                                              78232000
         FOR I:=0 STEP 1 UNTIL 7 DO                                     78233000
              GOTO(UNC,STORE[I]);                                       78234000
%                                                                       78235000
         FOR I:=0 STEP 1 UNTIL 7 DO                                     78236000
         BEGIN                                                          78237000
    LABL(STORE[I]);                                                     78238000
              MOVE(D,SAVEONE);                                          78239000
              CASE I OF                                                 78240000
              BEGIN                                                     78241000
                   BEGIN                                                78242000
                        SHFT(5,1,MA);                                   78243000
                        LANB(MA1,252,BYTE(BUFFER,0));                   78244000
                   END;                                                 78245000
                   BEGIN                                                78246000
                        SHFT(3,1,MA);                                   78247000
                        LANC(SAME,BYTE(BUFFER,0),252);                  78248000
                        LOR (MA2,BYTE(BUFFER,0),BYTE(BUFFER,0));        78249000
                        LANB(MA1,240,BYTE(BUFFER,1));                   78250000
                   END;                                                 78251000
                   BEGIN                                                78252000
                        SHFT(1,1,MA);                                   78253000
                        LANC(SAME,BYTE(BUFFER,1),240);                  78254000
                        LOR (MA2,BYTE(BUFFER,1),BYTE(BUFFER,1));        78255000
                        LANB(MA1,192,BYTE(BUFFER,2));                   78256000
                   END;                                                 78257000
                   BEGIN                                                78258000
                        LANC(SAME,BYTE(BUFFER,2),192);                  78259000
                        LOR (MA2,BYTE(BUFFER,2),BYTE(BUFFER,2));        78260000
                   END;                                                 78261000
                   BEGIN                                                78262000
                        SHFT(5,1,MA);                                   78263000
                        LANB(MA1,252,BYTE(BUFFER,3));                   78264000
                   END;                                                 78265000
                   BEGIN                                                78266000
                        SHFT(3,1,MA);                                   78267000
                        LANC(SAME,BYTE(BUFFER,3),252);                  78268000
                        LOR (MA2,BYTE(BUFFER,3),BYTE(BUFFER,3));        78269000
                        LANB(MA1,240,BYTE(BUFFER,4));                   78270000
                   END;                                                 78271000
                   BEGIN                                                78272000
                        SHFT(1,1,MA);                                   78273000
                        LANC(SAME,BYTE(BUFFER,4),240);                  78274000
                        LOR (MA2,BYTE(BUFFER,4),BYTE(BUFFER,4));        78275000
                        LANB(MA1,192,BYTE(BUFFER,5));                   78276000
                   END;                                                 78277000
                   BEGIN                                                78278000
                        LANC(SAME,BYTE(BUFFER,5),192);                  78279000
                        LOR (MA2,BYTE(BUFFER,5),BYTE(BUFFER,5));        78280000
                   END;                                                 78281000
              END;                                                      78282000
              IF I=7 THEN                                               78283000
              BEGIN                                                     78284000
                   SMRD(BUFFER,NO);                                     78285000
                   MMW (TEXTADDRESS,NO);                                78286000
                   HADB(1,TEXTADDRESS);                                 78287000
              END;                                                      78288000
              MOVE(SAVEONE,NO);                                         78289000
              EXIT(0);                                                  78290000
         END;                                                           78291000
%                                                                       78292000
    LABL(STOREBACKSPACE);                                               78293000
         HEADING("STORE BACKSPACE");                                    78294000
%                                                                       78295000
%   REMOVES THE LAST CHARACTER IN THE CURRENT MESSAGE TEXT              78296000
%                                                                       78297000
         LOR (NO,TRANSFERADDRESS,X);                                    78298000
         GOTO(ZERO,IMMEDIATEEXIT);                                      78299000
         SUBB(X,STORENONE-LOADBYTE,NO);                                 78300000
         GOTO(IFGEQ,IMMEDIATEEXIT);                                     78301000
         LOR (NO,BYTE(TEXTLENGTH,0),X);                                 78302000
         GOTO(ZERO,STOREBACKSPACESEGMENTED);                            78303000
         SUBB(X,1,BYTE(TEXTLENGTH,0));                                  78304000
         MOVE(TEXTLENGTH,SAVEONE);                                      78305000
         HADB(1,MA);                                                    78306000
         LANC(X,CHARACTERADDRESS,7);                                    78307000
         GOTO(NONZERO,STOREBACKSPACESEGMENTED-3);                       78308000
         MOVE(TEXTADDRESS,TEXTLENGTH);                                  78309000
         HSBB(1,MA);                                                    78310000
         MMR (MA,TEXTADDRESS);                                          78311000
         SMWD(TEXTLENGTH,BUFFER);                                       78312000
         SUBB(X,1,CHARACTERADDRESS);                                    78313000
         MOVE(SAVEONE,TEXTLENGTH);                                      78314000
         EXIT(0);                                                       78315000
%                                                                       78316000
    LABL(STOREBACKSPACESEGMENTED);                                      78317000
         HEADING("STORE BACKSPACE SEGMENTED");                          78318000
%                                                                       78319000
%   ALLOWS FOR BACKSPACEING OVER SEGMENT BOUNDRIES BY INCREASING THE    78320000
%   BACKSPACETALLY IN THE RESULT WORD FOR THE CURRENT SEGMENT BY ONE    78321000
%   FOR EACH CALL ON STOREBACKSPACE REFERENCING THE PREVIOUS SEGMENT.   78322000
%                                                                       78323000
         TEST(CHARACTERWORD,SEGMENTEDTEXT);                             78324000
         GOTO(ZERO,IMMEDIATEEXIT);                                      78325000
         SET (CHARACTERWORD,SEGMENTEDRECORD);                           78326000
         LOADSTATIONTABLE(STATIONBACKSPACETALLY.INDEX,SAVEONE);         78327000
         LOR (NO,WR(W)+STATIONBACKSPACETALLY.FIELD,X);                  78328000
         ADDB(X,1,WR(W)+STATIONBACKSPACETALLY.FIELD);                   78329000
         LMWI(MA,NO);                                                   78330000
         MOVE(TEXTLENGTH,NO);                                           78331000
         HADB(1,MA);                                                    78332000
         MOVE(SAVEONE,TEXTLENGTH);                                      78333000
         EXIT(0);                                                       78334000
  %                                                                     78335000
    LABL(STORECLOSE);                                                   78336000
         HEADING("STORE CLOSE");                                        78337000
%                                                                       78338000
%   DUMPS THE BUFFER INTO THE PROPER LOCATION IN THE TEXT WHEN          78339000
%   NECESSARY AND TRANSFERS CONTROL TO STORECLOSEUNOPENED WHEN THE      78340000
%   CURRENT RECORD CONTAINS NO CHARACTERS.                              78341000
%                                                                       78342000
         LOR (NO,TRANSFERADDRESS,X);                                    78343000
         GOTO(ZERO,STORECLOSEUNOPENED);                                 78344000
         LOR (NO,BYTE(TEXTLENGTH,0),X);                                 78345000
         GOTO(ZERO,STORECLOSEUNOPENED-2);                               78346000
         LOADMESSAGE(REQUESTS.INDEX,SAVEONE);                           78347000
         LOR (NO,X,WR(W)+LENGTH.FIELD);                                 78348000
         MMW (MA,NO);                                                   78349000
         LANC(NO,CHARACTERADDRESS,7);                                   78350000
         GOTO(ZERO,STORECLOSEUNOPENED-4);                               78351000
         SMRD(BUFFER,NO);                                               78352000
         MMW (TEXTADDRESS,NO);                                          78353000
         MOVE(SAVEONE,NO);                                              78354000
         EXIT(0);                                                       78355000
         TEST(CHARACTERWORD,SEGMENTEDRECORD);                           78356000
         GOTO(NONZERO,STORECLOSEUNOPENED-3);                            78357000
%                                                                       78358000
    LABL(STORECLOSEUNOPENED);                                           78359000
         HEADING("STORE CLOSE UNOPENED");                               78360000
%                                                                       78361000
%   EXITS STATION FROM SEQUENCE MODE OPERATION.                         78362000
%                                                                       78363000
         LMRI(STATIONTABLE,SAVEONE);                                    78364000
         RESET(WR(W),STATIONSEQUENCE);                                  78365000
         LMWI(MA,NO);                                                   78366000
         MOVE(SAVEONE,NO);                                              78367000
         EXIT(0);                                                       78368000
%                                                                       78369000
%                                                                       78370000
    END;                                                                78371000
%                                                                       79000000
COMMENT#################################################################79001000
                   TRANSMIT/RECEIVE ROUTINES                            79002000
#######################################################################;79003000
%                                                                       79004000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79005000
%                                                                       79006000
    PROCEDURE TRANSMITRECEIVEBYTES;                                     79007000
%                                                                       79008000
%   TO CHECK THE AC REGISTER FOR THE EXPECTED LINE CONDITION,           79009000
%   TO TRANSMIT OR RECEIVE CHARACTER WITH THE APPROPRIATE               79010000
%   CODE TRANSLATION AND VERTICAL AND LONGITUDINAL PARITY.              79011000
%                                                                       79012000
    BEGIN INTEGER I,J;                                                  79013000
%                                                                       79014000
    WRITESTARS;                                                         79015000
    HEADING("TRANSMIT/RECEIVE BYTES");                                  79016000
%                                                                       79017000
         FOR I:=0 STEP 1 UNTIL MANYTYPES DO                             79018000
         BEGIN                                                          79019000
              USETYPE(I);                                               79020000
              IF TRANSMISSIONTYPE=TYPEUSED THEN                         79021000
              BEGIN                                                     79022000
%                                                                       79023000
    LABL(TRANSMITBYTE);                                                 79024000
         HEADING("TRANSMITBYTE");                                       79025000
%                                                                       79026000
         CASE 2|REAL(CODE!NO)+REAL(VERTICAL!NO) OF                      79027000
         BEGIN                                                          79028000
              LOR (NO,CHARACTER,AI);                                    79029000
              PARY(VERTICAL,CHARACTER,AI);                              79030000
              TRAN(CODE,CHARACTER,AI);                                  79031000
              BEGIN                                                     79032000
                   TRAN(CODE,CHARACTER,D);                              79033000
                   PARY(VERTICAL,D,AI);                                 79034000
              END                                                       79035000
         END;                                                           79036000
%                                                                       79037000
         IF LONGITUDINAL!NO THEN                                        79038000
         BEGIN                                                          79039000
              LOR (NO,BCC,D);                                           79040000
              LEO (D,AI,BCC);                                           79041000
         END;                                                           79042000
%                                                                       79043000
         AWI (2,ACTRANSMIT,0);                                          79044000
         GOTO(UNC,YIELD);                                               79045000
%                                                                       79046000
    LABL(RECEIVEBYTE);                                                  79047000
         HEADING("RECEIVEBYTE");                                        79048000
%                                                                       79049000
         LEOC (NO,AC,ACBYTEPRESENT);                                    79050000
         GOTO(IFNEQ,RECEIVEERROR);                                      79051000
%                                                                       79052000
         IF VERTICAL!NO THEN                                            79053000
         BEGIN                                                          79054000
              PARY(VERTICAL,AI,CHARACTER);                              79055000
              GOTO(IFNEQ,ERRORS[PARITYERROR]);                          79056000
         END;                                                           79057000
%                                                                       79058000
         IF CODE!NO THEN                                                79059000
               TRAN(4+CODE,AI,CHARACTER);                               79060000
%                                                                       79061000
         IF VERTICAL=NO AND CODE=NO THEN                                79062000
              LOR (NO,AI,CHARACTER);                                    79063000
%                                                                       79064000
         IF LONGITUDINAL!NO THEN                                        79065000
         BEGIN                                                          79066000
              LOR (NO,BCC,D);                                           79067000
              LEO (D,AI,BCC);                                           79068000
         END;                                                           79069000
%                                                                       79070000
         EXIT(1);                                                       79071000
%                                                                       79072000
    IF LONGITUDINAL NEQ NO THEN                                         79073000
    BEGIN                                                               79074000
%                                                                       79075000
    LABL(TRANSMITBCCBYTE);                                              79076000
         HEADING("TRANSMIT BCC BYTE");                                  79077000
%                                                                       79078000
         IF VERTICAL = NO THEN                                          79079000
              LOR (NO,BCC,AI)                                           79080000
         ELSE                                                           79081000
              PARY(VERTICAL,BCC,AI);                                    79082000
%                                                                       79083000
         AWI (2,ACTRANSMIT,0);                                          79084000
         GOTO(UNC,YIELD);                                               79085000
%                                                                       79086000
    LABL(RECEIVEBCCBYTE);                                               79087000
         HEADING("RECEIVE BCC BYTE");                                   79088000
%                                                                       79089000
         HADB(1,OLDMA);                                                 79090000
         LEOC(NO,AC,ACBYTEPRESENT);                                     79091000
         GOTO(IFNEQ,RECEIVEERROR);                                      79092000
         HADB(2,OLDMA);                                                 79093000
         IF VERTICAL=NO THEN                                            79094000
              LOR (NO,AI,X)                                             79095000
         ELSE                                                           79096000
         BEGIN                                                          79097000
              PARY(VERTICAL,AI,X);                                      79098000
              GOTO(IFNEQ,ERRORS[BCCERROR]);                             79099000
         END;                                                           79100000
%                                                                       79101000
         LEO(X,BCC,NO);                                                 79102000
         GOTO(IFNEQ,ERRORS[BCCERROR]);                                  79103000
         HADB(3,OLDMA);                                                 79104000
         EXIT(0);                                                       79105000
%                                                                       79106000
    END OF TRANSMIT RECEIVE BCC;                                        79107000
%                                                                       79108000
         END;                                                           79109000
     END;                                                               79110000
%                                                                       79111000
    BEGIN                                                               79112000
    REAL CONTINUE;                                                      79113000
%                                                                       79114000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   79115000
%                                                                       79116000
%   UTILITY ROUTINES WHICH PREFORM CERTAIN STANDARD FUNCTIONS FOR ALL   79117000
%   NDL I/O REQUESTS WHEN CALLED UPON TO DO SO BY THE REQUEST.          79118000
%                                                                       79119000
%                                                                       79120000
    LABL(INCREMENTTRANSMITNUMBER);                                      79121000
         HEADING("INCREMENT TRANSMIT NUMBER");                          79122000
%                                                                       79123000
         LOADSTATIONTABLE(STATIONTRANSMISSIONNUMBER.INDEX,SAVEONE);     79124000
         FOR I:= 2,1,0 DO                                               79125000
         BEGIN                                                          79126000
              ADDC(SAME,WR(W)+I,1);                                     79127000
              SUBC(NO,WR(W)+I,48+9);                                    79128000
              GOTO(IFGEQ,SELF+2+4|I);                                   79129000
              LORB(NO,48,WR(W)+I);                                      79130000
         END;                                                           79131000
%                                                                       79132000
         LMWI(MA,NO);                                                   79133000
         MOVE(SAVEONE,NO);                                              79134000
         EXIT(0);                                                       79135000
%                                                                       79136000
    LABL(INCREMENTRECEIVENUMBER);                                       79137000
         HEADING("INCREMENT RECEIVE NUMBER");                           79138000
%                                                                       79139000
         LOADSTATIONTABLE(STATIONTRANSMISSIONNUMBER.INDEX,SAVEONE);     79140000
         FOR I:=2,1,0 DO                                                79141000
         BEGIN                                                          79142000
              ADDC(SAME,WR(4)+I,1);                                     79143000
              SUBC(NO,WR(4)+I,48+9);                                    79144000
             GOTO(IFGEQ,SELF+2+4|I);                                    79145000
             LORB(NO,48,WR(4)+I);                                       79146000
         END;                                                           79147000
%                                                                       79148000
         LMWI(MA,NO);                                                   79149000
         MOVE(SAVEONE,NO);                                              79150000
         EXIT(0);                                                       79151000
%                                                                       79152000
    LABL(LOADADDRESS);                                                  79153000
         HEADING("LOAD ADDRESS");                                       79154000
%                                                                       79155000
         LOADSTATIONTABLE(STATIONADDRESS.INDEX,SAVEONE);                79156000
         LANC(Y,CHARACTERADDRESS,7);                                    79157000
         ADDB(Y,1,CHARACTERADDRESS);                                    79158000
         ADDC(SAME,Y,(WR(W)).[7:8]);                                    79159000
         LOR (NO,IND,CHARACTER);                                        79160000
         MOVE(SAVEONE,NO);                                              79161000
         EXIT(0);                                                       79162000
%                                                                       79163000
    LABL(STOREADDRESS);                                                 79164000
         HEADING("STORE ADDRESS");                                      79165000
%                                                                       79166000
         LOADSTATIONTABLE(STATIONADDRESS.INDEX,SAVEONE);                79167000
         LANC(Y,CHARACTERADDRESS,7);                                    79168000
         ADDB(Y,1,CHARACTERADDRESS);                                    79169000
         ADDC(SAME,Y,(WR(W)).[7:8]);                                    79170000
         LOR (NO,IND,X);                                                79171000
         MOVE(SAVEONE,NO);                                              79172000
         LEO (X,CHARACTER,NO);                                          79173000
         GOTO(IFNEQ,ERRORS[ADDRESSERROR]);                              79174000
         EXIT(1);                                                       79175000
%                                                                       79176000
    LABL(LOADTRANSMISSIONNUMBER);                                       79177000
         HEADING("LOAD TRANSMISSION NUMBER");                           79178000
%                                                                       79179000
         LOADSTATIONTABLE(STATIONTRANSMISSIONNUMBER.INDEX,SAVEONE);     79180000
         LANC(Y,CHARACTERADDRESS,7);                                    79181000
         ADDB(Y,1,CHARACTERADDRESS);                                    79182000
         ADDC(SAME,Y,(WR(W)).[7:8]);                                    79183000
         LOR (NO,IND,CHARACTER);                                        79184000
         MOVE(SAVEONE,NO);                                              79185000
         EXIT(0);                                                       79186000
%                                                                       79187000
    LABL(STORETRANSMISSIONNUMBER);                                      79188000
         HEADING("STORE TRANSMISSION NUMBER");                          79189000
%                                                                       79190000
         LOADSTATIONTABLE(STATIONTRANSMISSIONNUMBER.INDEX,SAVEONE);     79191000
         LANC(Y,CHARACTERADDRESS,7);                                    79192000
         ADDB(Y,1,CHARACTERADDRESS);                                    79193000
         ADDC(SAME,Y,(WR(W)).[7:8]);                                    79194000
         LOR (NO,IND,X);                                                79195000
         MOVE(SAVEONE,NO);                                              79196000
         LEO (X,CHARACTER,NO);                                          79197000
         GOTO(IFNEQ,ERRORS[TRANNOERROR]);                               79198000
         EXIT(1);                                                       79199000
%                                                                       79200000
%                                                                       79201000
    LABL(INCREMENTSEQUENCENUMBER);                                      79202000
         HEADING("INCREMENT SEQUENCE NUMBER");                          79203000
%                                                                       79204000
         LOADSTATIONTABLE(STATIONSEQUENCEINCREMENT.INDEX,SAVEONE);      79205000
         SMWD(MA,STATIONTABLEENTRY);                                    79206000
         HSBB(STATIONSEQUENCEINCREMENT.INDEX                            79207000
              -STATIONSEQUENCEBASE.INDEX,MA);                           79208000
         LMRI(MA,NO);                                                   79209000
%                                                                       79210000
         MOVE(WRR(7),ADDRESS);                                          79211000
         HAD (HALF(STATIONTABLEENTRY,R),MA);                            79212000
%                                                                       79213000
         FOR I:=1 STEP 1 UNTIL 8 DO                                     79214000
         BEGIN                                                          79215000
              SHFT(5,3,MA);                                             79216000
              SUBB(MA2,40,Y);                                           79217000
              GOTO(IFGEQ,SELF+9|3-2|REAL(I GTR 4));                     79218000
              IF I=4 THEN                                               79219000
              BEGIN                                                     79220000
                   MOVE(WRL(7),WRR(7));                                 79221000
                   HAD (HALF(STATIONTABLEENTRY,L),MA);                  79222000
              END;                                                      79223000
         END;                                                           79224000
         LMWI(ADDRESS,WRL(7));                                          79225000
         MOVE(SAVEONE,NO);                                              79226000
         EXIT(0);                                                       79227000
%                                                                       79228000
         FOR I:=1 STEP 1 UNTIL 8 DO                                     79229000
         BEGIN                                                          79230000
              LOR (NO,Y,MA2);                                           79231000
              IF I=8 THEN                                               79232000
              BEGIN                                                     79233000
                   LMWI(ADDRESS,WRL(7));                                79234000
                   LOADSTATIONTABLE(STATIONRESULTS.INDEX,NO);           79235000
                   SET (WR(W),SEQNOOVERFLOWFLAG);                       79236000
                   LMWI(MA,NO);                                         79237000
                   MOVE(SAVEONE,NO);                                    79238000
                   EXIT(0);                                             79239000
              END                                                       79240000
              ELSE                                                      79241000
              BEGIN                                                     79242000
                   IF I=4 THEN                                          79243000
                        ADDC(SAME,WR(3),1)                              79244000
                   ELSE                                                 79245000
                        ADDB(MA0,1,MA0);                                79246000
                   GOTO(UNC,SELF-26-2|REAL(I LEQ 4));                   79247000
              END;                                                      79248000
         END;                                                           79249000
%                                                                       79250000
    LABL(INITIALIZESEQUENCENUMBER);                                     79251000
         HEADING("INITIALIZE SEQUENCE NUMBER");                         79252000
%                                                                       79253000
         LOADSTATIONTABLE(STATIONSEQUENCEBASE.INDEX,SAVEONE);           79254000
         SMWD(WRL(7),BUFFER);                                           79255000
         I:=-1;                                                         79256000
         FOR J:=3,1,0,3,3,1,0 DO                                        79257000
         BEGIN                                                          79258000
              LORB(NO,I:=I+1,CHARACTERADDRESS);                         79259000
              LANC(NO,MA0+J,252);                                       79260000
              GOTO(NONZERO,SELF+2+(6-I)|4);                             79261000
              IF I=3 THEN                                               79262000
                   MOVE(WRR(7),NO)                                      79263000
              ELSE IF I NEQ 6 THEN                                      79264000
                   SHFT(1,3,MA);                                        79265000
         END;                                                           79266000
         LORB(NO,7,CHARACTERADDRESS);                                   79267000
         MOVE(SAVEONE,NO);                                              79268000
         EXIT(0);                                                       79269000
%                                                                       79270000
    LABL(LOADSEQUENCENUMBER);                                           79271000
         HEADING("LOAD SEQUENCE NUMBER");                               79272000
%                                                                       79273000
         LANC(X,CHARACTERADDRESS,7);                                    79274000
         ADDB(X,1,CHARACTERADDRESS);                                    79275000
         GOX (UNC,SELF+1);                                              79276000
         FOR I:=0 STEP 1 UNTIL 7 DO                                     79277000
              GOTO(UNC,SELF+I|6+8-I-REAL(I GTR 3));                     79278000
%                                                                       79279000
         FOR I:=0 STEP 1 UNTIL 7 DO                                     79280000
         BEGIN                                                          79281000
              MOVE(BUFFER+REAL(I>3)|4,SAVEONE);                         79282000
              CASE I.[1:2] OF                                           79283000
              BEGIN                                                     79284000
                   BEGIN                                                79285000
                   SHFT(1,3,MA);                                        79286000
                   LANC(SAME,MA2,63);                                   79287000
                   TRAN(1,MA2,CHARACTER);                               79288000
                   END;                                                 79289000
                   BEGIN                                                79290000
                   SHFT(3,3,MA);                                        79291000
                   LANC(SAME,MA1,63);                                   79292000
                   TRAN(1,MA1,CHARACTER);                               79293000
                   END;                                                 79294000
                   BEGIN                                                79295000
                   SHFT(5,3,MA);                                        79296000
                   LANC(SAME,MA0,63);                                   79297000
                   TRAN(1,MA0,CHARACTER);                               79298000
                   END;                                                 79299000
                   BEGIN                                                79300000
                   LANC(SAME,MA0,63);                                   79301000
                   TRAN(1,MA0,CHARACTER);                               79302000
                   END;                                                 79303000
              END;                                                      79304000
              MOVE(SAVEONE,NO);                                         79305000
              EXIT(0);                                                  79306000
         END;                                                           79307000
%                                                                       79308000
%                                                                       79309000
    LABL(LOADTIMEOUT);                                                  79310000
         HEADING("LOAD TIME OUT");                                      79311000
%                                                                       79312000
         LOADTERMINALTABLE(TERMINALTIMEOUT.INDEX,SAVEONE);              79313000
         LOR (NO,WR(W)+TERMINALTIMEOUT.FIELD,AI);                       79314000
         GOTO(ZERO,SELF+2);                                             79315000
         AWI (2,ACTIMER,0);                                             79316000
         MOVE(SAVEONE,NO);                                              79317000
         EXIT(0);                                                       79318000
%                                                                       79319000
    LABL(LOADINITIATERECEIVEDELAY);                                     79320000
         HEADING("LOAD INITIATE RECEIVE DELAY");                        79321000
%                                                                       79322000
         LOADLINETABLE(LINEINITIATERECEIVEDELAY.INDEX,SAVEONE);         79323000
         MOVE(SAVEONE,NO);                                              79324000
         LOR (NO,WR(W)+LINEINITIATERECEIVEDELAY.FIELD,AI);              79325000
         GOTO(ZERO,SELF+3);                                             79326000
         AWI(2,ACTIMER,0);                                              79327000
         GOTO(UNC,YIELD);                                               79328000
         EXIT(1);                                                       79329000
%                                                                       79330000
    LABL(LOADINITIATETRANSMITDELAY);                                    79331000
         HEADING("LOAD INITIATE TRANSMIT DELAY");                       79332000
%                                                                       79333000
         LOADLINETABLE(LINEINITIATETRANSMITDELAY.INDEX,SAVEONE);        79334000
         MOVE(SAVEONE,NO);                                              79335000
         LOR (NO,WR(W)+LINEINITIATETRANSMITDELAY.FIELD,AI);             79336000
         GOTO(ZERO,SELF+3);                                             79337000
         AWI(2,ACTIMER,0);                                              79338000
         GOTO(UNC,YIELD);                                               79339000
         EXIT(0);                                                       79340000
%                                                                       79341000
    LABL(SETWRUFLAG);                                                   79342000
         HEADING("SET WRU FLAG");                                       79343000
%                                                                       79344000
         LOADSTATIONTABLE(STATIONRESULTS.INDEX,SAVEONE);                79345000
         SET (WR(W),WRUFLAG);                                           79346000
         LMWI(MA,NO);                                                   79347000
         MOVE(SAVEONE,NO);                                              79348000
         EXIT(0);                                                       79349000
%                                                                       79350000
    LABL(SETSPECIALFLAG);                                               79351000
         HEADING("SET SPECIAL FLAG");                                   79352000
%                                                                       79353000
         LOADSTATIONTABLE(STATIONRESULTS.INDEX,SAVEONE);                79354000
         SET (WR(W),SPECIALFLAG);                                       79355000
         LMWI(MA,NO);                                                   79356000
         MOVE(SAVEONE,NO);                                              79357000
         EXIT(0);                                                       79358000
%                                                                       79359000
    LABL(LOADMESSAGEWORD);                                              79360000
         HEADING("LOAD MESSAGE WORD");                                  79361000
%                                                                       79362000
         LOADMESSAGE(REQUESTS.INDEX,SAVEONE);                           79363000
         MOVE(SAVEONE,ADDRESS);                                         79364000
         MOVE(ADDRESS,IA);                                              79365000
%                                                                       79366000
    LABL(LOADRESULTWORD);                                               79367000
         HEADING("LOAD RESULT WORD");                                   79368000
%                                                                       79369000
         LOADSTATIONTABLE(STATIONRESULTS.INDEX,SAVEONE);                79370000
         MOVE(SAVEONE,ADDRESS);                                         79371000
         MOVE(ADDRESS,IA);                                              79372000
%                                                                       79373000
    LABL(LOADREGISTERWORD);                                             79374000
         HEADING("LOAD REGISTER WORD");                                 79375000
%                                                                       79376000
         LOADSTATIONTABLE(STATIONTALLYS.INDEX,SAVEONE);                 79377000
         MOVE(SAVEONE,ADDRESS);                                         79378000
         MOVE(ADDRESS,IA);                                              79379000
%                                                                       79380000
    LABL(LOADTERMINALWORD);                                             79381000
         HEADING("LOAD TERMINAL WORD");                                 79382000
%                                                                       79383000
         LOADTERMINALTABLE(TERMINALTYPE.INDEX,SAVEONE);                 79384000
         MOVE(SAVEONE,ADDRESS);                                         79385000
         MOVE(ADDRESS,IA);                                              79386000
%                                                                       79387000
    LABL(LOADCHARACTERWORD);                                            79388000
         HEADING("LOAD CHARACTER WORD");                                79389000
%                                                                       79390000
         LOADSTATIONTABLE(STATIONBYTES.INDEX,SAVEONE);                  79391000
         MOVE(SAVEONE,ADDRESS);                                         79392000
         MOVE(ADDRESS,IA);                                              79393000
%                                                                       79394000
    LABL(WAITFORBYTEREQUEST);                                           79395000
         HEADING("WAIT FOR BYTE REQUEST");                              79396000
%                                                                       79397000
         LEOC(NO,AC,ACBYTEREQUEST);                                     79398000
         GOTO(IFNEQ,TRANSMITERROR);                                     79399000
         EXIT(1);                                                       79400000
%                                                                       79401000
    LABL(WAITFORTIMER);                                                 79402000
         HEADING("WAIT FOR TIMER");                                     79403000
%                                                                       79404000
         LEOC(NO,AC,ACTIMER);                                           79405000
         GOTO(IFNEQ,MONITORLINE);                                       79406000
         EXIT(0);                                                       79407000
%                                                                       79408000
    LABL(EDITSYNCHRONOUSLINE);                                          79409000
         HEADING("EDIT SYNCHRONOUS LINE");                              79410000
%                                                                       79411000
         LOADLINEDESCRIPTOR(SAVEONE);                                   79412000
         MOVE(SAVEONE,NO);                                              79413000
         TEST(WR(W),LINESYNCHRONOUS);                                   79414000
         GOTO(ZERO,IMMEDIATEEXIT);                                      79415000
         AWRR(3,16,0);                                                  79416000
         LANC(SAME,AI,254);                                             79417000
         AWI (2,ACSETTYPE,0);                                           79418000
         EXIT(0);                                                       79419000
%                                                                       79420000
    LABL(MONITORSYNCHRONOUSLINE);                                       79421000
         HEADING("MONITOR SYNCHRONOUS LINE");                           79422000
%                                                                       79423000
         LOADLINEDESCRIPTOR(SAVEONE);                                   79424000
         MOVE(SAVEONE,NO);                                              79425000
         TEST(WR(W),LINESYNCHRONOUS);                                   79426000
         GOTO(ZERO,IMMEDIATEEXIT);                                      79427000
         AWRR(3,16,0);                                                  79428000
         LORC(SAME,AI,1);                                               79429000
         AWI (2,ACSETTYPE,0);                                           79430000
         EXIT(0);                                                       79431000
%                                                                       79432000
    END;                                                                79433000
%                                                                       79434000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   79435000
%                                                                       79436000
%   RESPONSIBLE FOR ANALYZING UNEXSPECTED LINE CONDITION DURING         79437000
%   TRANSMIT MODE AND TRANSFERING CONTROL TO THE APPROPRIATE ROUTINE.   79438000
%   IF THE CONDITION IS AN NDL DEFINED ERROR THE ASSOCIATED FLAG IS     79439000
%   SET AND CONTROL IS PASSED BACK TO THE CALLING REQUEST FOR ERROR     79440000
%   RECOVERY.                                                           79441000
%                                                                       79442000
    LABL(TRANSMITERROR);                                                79443000
         HEADING("TRANSMITERROR");                                      79444000
%                                                                       79445000
         LEOC(NO,AC,ACCONTROL);                                         79446000
         GOTO(IFNEQ,ABORTTRANSMIT);                                     79447000
         LOR (NO,AI,X);                                                 79448000
         SUBB(X,64+16+9,X);                                             79449000
         GOTO(IFLSS,ABORTTRANSMIT);                                     79450000
         SUBC(NO,X,6);                                                  79451000
         GOTO(IFLSS,ABORTTRANSMIT);                                     79452000
         GOX (UNC,SELF+1);                                              79453000
         GOTO(UNC,CONTROL);                                             79454000
         EXIT(1);                                                       79455000
         GOTO(UNC,ABORTDISCONNECT);                                     79456000
         GOTO(UNC,ERRORS[BREAKTRANSMIT]);                               79457000
         GOTO(UNC,ABORTDISCONNECT);                                     79458000
         GOTO(UNC,ERRORS[LOSSOFCARRIERTRANSMIT]);                       79459000
         GOTO(UNC,ABORTDISCONNECT);                                     79460000
%                                                                       79461000
    LABL(ERRORS[BREAKTRANSMIT]);                                        79462000
         HEADING("BREAK TRANSMIT");                                     79463000
%                                                                       79464000
         LOADSTATIONTABLE(STATIONRESULTS.INDEX,SAVEONE);                79465000
         SET (WR(W),BREAKOUTPUTFLAG);                                   79466000
         LMWI(MA,NO);                                                   79467000
         MOVE(SAVEONE,NO);                                              79468000
         LORB(NO,BREAKTRANSMIT-RECEIVECONDITIONMAX-1,X);                79469000
         EXIT(0);                                                       79470000
%                                                                       79471000
    LABL(ERRORS[LOSSOFCARRIERTRANSMIT]);                                79472000
         HEADING("LOSS OF CARRIER TRANSMIT");                           79473000
%                                                                       79474000
         LOADSTATIONTABLE(STATIONRESULTS.INDEX,SAVEONE);                79475000
         SET (WR(W),CARRIERFLAG);                                       79476000
         LMWI(MA,NO);                                                   79477000
         MOVE(SAVEONE,NO);                                              79478000
         LORB(NO,LOSSOFCARRIERTRANSMIT-RECEIVECONDITIONMAX-1,X);        79479000
         EXIT(0);                                                       79480000
%                                                                       79481000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   79482000
%                                                                       79483000
%   RESPONSIBLE FOR ANALYZING UNEXSPECTED LINE CONDITION DURING         79484000
%   RECEIVE  MODE AND TRANSFERING CONTROL TO THE APPROPRIATE ROUTINE.   79485000
%   IF THE CONDITION IS AN NDL DEFINED ERROR THE ASSOCIATED FLAG IS     79486000
%   SET AND CONTROL IS PASSED BACK TO THE CALLING REQUEST FOR ERROR     79487000
%   RECOVERY.                                                           79488000
%                                                                       79489000
    LABL(RECEIVEERROR);                                                 79490000
         HEADING("RECEIVEERROR");                                       79491000
%                                                                       79492000
         LEOC(NO,AC,ACTIMER);                                           79493000
         GOTO(IFEQL,ERRORS[TIMEOUT]);                                   79494000
         LEOC(NO,AC,ACCONTROL);                                         79495000
         GOTO(IFNEQ,ABORTRECEIVE);                                      79496000
         LOR (NO,AI,X);                                                 79497000
         SUBB(X,32+16+7,X);                                             79498000
         GOTO(IFLSS,ABORTRECEIVE);                                      79499000
         SUBC(NO,X,8);                                                  79500000
         GOTO(IFLSS,ABORTRECEIVE);                                      79501000
         GOX (UNC,SELF+1);                                              79502000
         GOTO(UNC,CONTROL);                                             79503000
         GOTO(UNC,ERRORS[STOPBITERROR]);                                79504000
         GOTO(UNC,ERRORS[BYTEOVERFLOW]);                                79505000
         GOTO(UNC,CONTROL);                                             79506000
         GOTO(UNC,SELF+5);                                              79507000
         GOTO(UNC,ERRORS[BREAKRECEIVE]);                                79508000
         GOTO(UNC,ABORTDISCONNECT);                                     79509000
         GOTO(UNC,ERRORS[LOSSOFCARRIERRECEIVE]);                        79510000
         GOTO(UNC,ABORTDISCONNECT);                                     79511000
         AWRR(3,16+6,0);                                                79512000
         LANC(NO,AI,TWO(2));                                            79513000
         GOTO(ZERO,ABORTDISCONNECT);                                    79514000
         LANC(NO,AC,TWO(3));                                            79515000
         GOTO(ZERO,CONTROL);                                            79516000
         GOTO(UNC,ABORTDISCONNECT);                                     79517000
%                                                                       79518000
    LABL(ERRORS[TIMEOUT]);                                              79519000
         HEADING("TIMEOUT ERROR");                                      79520000
%                                                                       79521000
         LOADSTATIONTABLE(STATIONRESULTS.INDEX,SAVEONE);                79522000
         SET (WR(W),TIMEOUTFLAG);                                       79523000
         LMWI(MA,NO);                                                   79524000
         MOVE(SAVEONE,NO);                                              79525000
         LORB(NO,TIMEOUT,X);                                            79526000
         EXIT(0);                                                       79527000
%                                                                       79528000
    LABL(ERRORS[STOPBITERROR]);                                         79529000
         HEADING("STOP BIT ERROR");                                     79530000
%                                                                       79531000
         LOADSTATIONTABLE(STATIONRESULTS.INDEX,SAVEONE);                79532000
         SET (WR(W),STOPBITFLAG);                                       79533000
         LMWI(MA,NO);                                                   79534000
         MOVE(SAVEONE,NO);                                              79535000
         LORB(NO,STOPBITERROR,X);                                       79536000
         EXIT(0);                                                       79537000
%                                                                       79538000
    LABL(ERRORS[BYTEOVERFLOW]);                                         79539000
         HEADING("BYTE OVERFLOW");                                      79540000
%                                                                       79541000
         LOADSTATIONTABLE(STATIONRESULTS.INDEX,SAVEONE);                79542000
         SET (WR(W),BYTEOVERFLOWFLAG);                                  79543000
         LMWI(MA,NO);                                                   79544000
         MOVE(SAVEONE,NO);                                              79545000
         LORB(NO,BYTEOVERFLOW,X);                                       79546000
         EXIT(0);                                                       79547000
%                                                                       79548000
    LABL(ERRORS[BREAKRECEIVE]);                                         79549000
         HEADING("BREAK RECEIVE");                                      79550000
%                                                                       79551000
         LOADSTATIONTABLE(STATIONRESULTS.INDEX,SAVEONE);                79552000
         SET (WR(W),BREAKINPUTFLAG);                                    79553000
         LMWI(MA,NO);                                                   79554000
         MOVE(SAVEONE,NO);                                              79555000
         LORB(NO,BREAKRECEIVE,X);                                       79556000
         EXIT(0);                                                       79557000
%                                                                       79558000
    LABL(ERRORS[PARITYERROR]);                                          79559000
         HEADING("PARITYERROR");                                        79560000
%                                                                       79561000
         LOADSTATIONTABLE(STATIONRESULTS.INDEX,SAVEONE);                79562000
         SET (WR(W),PARITYFLAG);                                        79563000
         LMWI(MA,NO);                                                   79564000
         MOVE(SAVEONE,NO);                                              79565000
         LORB(NO,PARITYERROR,X);                                        79566000
         EXIT(0);                                                       79567000
%                                                                       79568000
    LABL(ERRORS[ADDRESSERROR]);                                         79569000
         HEADING("ADDRESSERROR");                                       79570000
%                                                                       79571000
         LOADSTATIONTABLE(STATIONRESULTS.INDEX,SAVEONE);                79572000
         SET (WR(W),ADDRESSFLAG);                                       79573000
         LMWI(MA,NO);                                                   79574000
         MOVE(SAVEONE,NO);                                              79575000
         EXIT(0);                                                       79576000
%                                                                       79577000
    LABL(ERRORS[FORMATERROR]);                                          79578000
         HEADING("FORMATERROR");                                        79579000
%                                                                       79580000
         LOADSTATIONTABLE(STATIONRESULTS.INDEX,SAVEONE);                79581000
         SET (WR(W),FORMATFLAG);                                        79582000
         LMWI(MA,NO);                                                   79583000
         MOVE(SAVEONE,NO);                                              79584000
         EXIT(0);                                                       79585000
%                                                                       79586000
    LABL(ERRORS[BCCERROR]);                                             79587000
         HEADING("BCCERROR");                                           79588000
%                                                                       79589000
         LOADSTATIONTABLE(STATIONRESULTS.INDEX,SAVEONE);                79590000
         SET (WR(W),BCCFLAG);                                           79591000
         LMWI(MA,NO);                                                   79592000
         MOVE(SAVEONE,NO);                                              79593000
         EXIT(0);                                                       79594000
%                                                                       79595000
    LABL(ERRORS[TRANNOERROR]);                                          79596000
         HEADING("TRANN0 ERROR");                                       79597000
%                                                                       79598000
         LOADSTATIONTABLE(STATIONRESULTS.INDEX,SAVEONE);                79599000
         SET (WR(W),TRANNOFLAG);                                        79600000
         LMWI(MA,NO);                                                   79601000
         MOVE(SAVEONE,NO);                                              79602000
         EXIT(0);                                                       79603000
%                                                                       79604000
    LABL(ERRORS[LOSSOFCARRIERRECEIVE]);                                 79605000
         HEADING("LOSS OF CARRIER RECEIVE");                            79606000
%                                                                       79607000
         LOADSTATIONTABLE(STATIONRESULTS.INDEX,SAVEONE);                79608000
         SET (WR(W),CARRIERFLAG);                                       79609000
         LMWI(MA,NO);                                                   79610000
         MOVE(SAVEONE,NO);                                              79611000
         LORB(NO,LOSSOFCARRIERRECEIVE,X);                               79612000
         EXIT(0);                                                       79613000
%                                                                       79614000
    END TRANSMIT AND RECEIVE;                                           79615000
%                                                                       80000000
COMMENT#################################################################80001000
                   UTILITY ROUTINES                                     80002000
#######################################################################;80003000
%                                                                       80004000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80005000
%                                                                       80006000
%   UTILITY ROUTINES                                                    80007000
%                                                                       80008000
    LABELS                                                              80009000
          START,                                                        80010000
          NEXTAREA,                                                     80011000
          INSTRUCTIONS,                                                 80012000
          DATA,                                                         80013000
          SETDATA,                                                      80014000
          FINISH,                                                       80015000
          NEWRECORD,                                                    80016000
          GETNEXTWORD,                                                  80017000
          PUTNEXTWORD,                                                  80018000
          DECREMENTAREA,                                                80019000
          INITIALIZERECORD,                                             80020000
          COMMUNICATE,                                                  80021000
          STOP;                                                         80022000
%                                                                       80023000
    PROCEDURE STARTOFAREA(TYPE,ENDADDRESS);                             80024000
    VALUE TYPE,ENDADDRESS;                                              80025000
    REAL TYPE,ENDADDRESS;                                               80026000
%                                                                       80027000
%   USED TO SPECIFY THE START OF AN AREA IN THE CODE FILE FOR WHICH A   80028000
%   AREA DESCRIPTOR IS CONSTRUCTED CONTAINING THE ADDRESS WHERE THE     80029000
%   CODE IS TO BE LOADED IN LOCAL MEMORY, THE TYPE OF AREA, AND THE     80030000
%   LENGTH OF THE AREA. CURRENT DEFINED AREA TYPES ARE:                 80031000
%        INSTRUCTIONS-  AREA WILL BE LOADED AT GIVEN ADDRESS FOR THE    80032000
%             GIVEN LENGTH WITH TAG FIELDS SET TO SIX.                  80033000
%        DATA-  AREA WILL BE LOADED AT THE GIVEN ADDRESS FOR THE GIVEN  80034000
%             LENGTH WITH ZERO IN THE TAG FIELDS.                       80035000
%        SET DATA-  THE WORD FOLLOWING THE AREA DESCRIPTOR WILL BE      80036000
%             LOADED INTO THE GIVEN ADDRESS FOR THE NUMBER OF TIMES     80037000
%             SPECIFIED IN THE LENGTH FIELD.                            80038000
%        FINISH-  THE LAST DESCRIPTOR NOTIFING THE LOADER THAT ALL      80039000
%             THE CODE FILE HAS BEEN LOADED                             80040000
%   THE END ADDRESS IS USED TO CALCULATE THE LENGTH OF THE LABELED AREA 80041000
%                                                                       80042000
    BEGIN                                                               80043000
         IF SECONDPASS THEN                                             80044000
              AREAS:=AREAS+1;                                           80045000
         WRITESTARS;                                                    80046000
         ADJUST(IDLE);                                                  80047000
         EMITHALF(SELF.[14:14]);                                        80048000
         EMITHALF(((ENDADDRESS-SELF+2).[14:14])&(TYPE-NEXTAREA)[23:8]); 80049000
         SELF:=SELF-2;                                                  80050000
   END;                                                                 80051000
%                                                                       80052000
    PROCEDURE ENDOFAREA(ENDADDRESS);                                    80053000
    REAL ENDADDRESS;                                                    80054000
%                                                                       80055000
%   USED IN CONJUNCTION WITH THE PROCEDURE STARTOFAREA. BY PLACING A    80056000
%   LABEL AT THE END OF THE AREA THE LENGTH OF THE AREA CAN BE FOUND    80057000
%   BY STARTOFAREA BY SUBTRACTING THE DIFFERENCE IN ADDRESSES.          80058000
%                                                                       80059000
    BEGIN                                                               80060000
         ADJUST(IDLE);                                                  80061000
         ENDADDRESS:=SELF;                                              80062000
    END;                                                                80063000
%                                                                       80064000
    PROCEDURE LOADER;                                                   80065000
    BEGIN                                                               80066000
%                                                                       80067000
%   INITIATED BY THE MCP THE LOADERS FUNCTION IS TO READ THE AREA       80068000
%   DESCRIPTORS AND ACCORDINGLY LOAD THE CODE FROM MAIN MEMORY BUFFERS  80069000
%   INTO THE DESIGNATED LOCATIONS IN LOCAL MEMORY WITH THE APPROPRIATE  80070000
%   TAG FIELDS. UPON COMPLETION OF LOADING THE CODE ALL THE LINE        80071000
%   ADAPTERS ARE INITIALIZED TO THE SPECIFIED TYPE AND THE CLUSTER      80072000
%   MASK IS SET FOR THE REQUESTED CONFIGURATION. CONTROL IS THEN        80073000
%   TRANSFERED TO THE LEFT SYLLABLE OF WORD ZERO IN LOCAL MEMORY.       80074000
%                                                                       80075000
    REAL LOOP;                                                          80076000
    INTEGER I;                                                          80077000
    DEFINE                                                              80078000
         SYSTEMDESCRIPTORADDRESS                                        80079000
                              = SM(3,L)#,                               80080000
         CONTROLWORD          = SM(5,W)#,                               80081000
         DESTINATIONPOINTER   = SM(5,L)#,                               80082000
         AREALENGTH           = SM(5,R)#,                               80083000
         AREATYPE             = SM(5,4)#,                               80084000
         WORDCOUNT            = SM(6,L)#,                               80085000
         SOURCEPOINTER        = SM(6,R)#,                               80086000
         SYSTEMDESCRIPTOR     = SM(7,W)#,                               80087000
         SYSTEMSRESULT        = SM(7,1)#,                               80088000
         CONTINUELOAD         = 1#,                                     80089000
         ENDLOAD              = 2#,                                     80090000
         STOPLOAD             = 3#;                                     80091000
%                                                                       80092000
    LOCATE(MM(0,0));                                                    80093000
    HEADING("LOADER");                                                  80094000
%                                                                       80095000
         GOTO(UNC,START);                                               80096000
         FOR I:=1 STEP 1 UNTIL 16 DO                                    80097000
              GOTO(UNC,STOP);                                           80098000
%                                                                       80099000
    LABL(START);                                                        80100000
%                                                                       80101000
         LANC(SAME,CF,119);                                             80102000
         LORB(NO,0,AC);                                                 80103000
         LORB(NO,0,AI);                                                 80104000
         MSKW;                                                          80105000
         CALL(INITIALIZERECORD);                                        80106000
%                                                                       80107000
    LABL(NEXTAREA);                                                     80108000
%                                                                       80109000
         CALL(GETNEXTWORD);                                             80110000
         SMWD(MA,CONTROLWORD);                                          80111000
         LOR (NO,AREATYPE,X);                                           80112000
         LORB(NO,0,AREATYPE);                                           80113000
         GOX (UNC,NEXTAREA);                                            80114000
%                                                                       80115000
    LABL(INSTRUCTIONS);                                                 80116000
%                                                                       80117000
         CALL(DECREMENTAREA);                                           80118000
         CALL(GETNEXTWORD);                                             80119000
         LORB(NO,6,WR(7));                                              80120000
         CALL(PUTNEXTWORD);                                             80121000
         GOTO(UNC,INSTRUCTIONS);                                        80122000
%                                                                       80123000
    LABL(DATA);                                                         80124000
%                                                                       80125000
         CALL(DECREMENTAREA);                                           80126000
         CALL(GETNEXTWORD);                                             80127000
         LORB(NO,0,WR(7));                                              80128000
         CALL(PUTNEXTWORD);                                             80129000
         GOTO(UNC,DATA);                                                80130000
%                                                                       80131000
    LABL(SETDATA);                                                      80132000
%                                                                       80133000
         CALL(GETNEXTWORD);                                             80134000
         LORB(NO,0,WR(7));                                              80135000
         CALL(DECREMENTAREA);                                           80136000
         CALL(PUTNEXTWORD);                                             80137000
         GOTO(UNC,SETDATA+2);                                           80138000
%                                                                       80139000
    LABL(FINISH);                                                       80140000
%                                                                       80141000
         MMR (SYSTEMDESCRIPTORADDRESS,NO);                              80142000
         LMWD(DIRECTORY[4]);                                            80143000
         LORB(NO,(I:=(LINEMIN).[7:4]|16),AA);                           80144000
         IF I!LINEMIN THEN                                              80145000
              IF LINEMIN-I>1 THEN                                       80146000
              BEGIN                                                     80147000
                   LORB(NO,LINEMIN-I-1,Y);                              80148000
                   AWI (3,ACSETTYPE,0);                                 80149000
                   AWI (3,ACTIMER,31);                                  80150000
                   ADDC(SAME,AA,1);                                     80151000
                   DBYN(SELF-3);                                        80152000
              END                                                       80153000
              ELSE                                                      80154000
              BEGIN                                                     80155000
                   AWI (3,ACSETTYPE,0);                                 80156000
                   AWI (3,ACTIMER,31);                                  80157000
                   ADDC(SAME,AA,1);                                     80158000
              END;                                                      80159000
         LORB(NO,LINEMAX-LINEMIN,Y);                                    80160000
    LOOP:=SELF;                                                         80161000
         LOR (NO,AA,BYTE(LINE,2));                                      80162000
         CALL(INITIALIZEADAPTOR);                                       80163000
         AWI (3,ACTIMER,31);                                            80164000
         ADDC(SAME,AA,1);                                               80165000
         DBYN(LOOP);                                                    80166000
         IF I:=(15-(LINEMAX).[3:4])!0 THEN                              80167000
              IF I>1 THEN                                               80168000
              BEGIN                                                     80169000
                   LORB(NO,I-1,Y);                                      80170000
                   AWI (3,ACSETTYPE,0);                                 80171000
                   AWI (3,ACTIMER,31);                                  80172000
                   ADDC(SAME,AA,1);                                     80173000
                   DBYN(SELF-3);                                        80174000
              END                                                       80175000
              ELSE                                                      80176000
              BEGIN                                                     80177000
                   AWI (3,ACSETTYPE,0);                                 80178000
                   AWI (3,ACTIMER,31);                                  80179000
              END;                                                      80180000
         I:=(2*((LINEMAX).[7:4]+1)-1)-(2*(LINEMIN).[7:4]-1);            80181000
         LORB(NO,I.[15:8],AC);                                          80182000
         LORB(NO,I.[ 7:8],AI);                                          80183000
         MSKW;                                                          80184000
         RESET(SYSTEMWORD,WAITQUEUEBUSY+REQUESTQUEUEBUSY);              80185000
         LORB(NO,ENDLOAD,SYSTEMSRESULT);                                80186000
         CALL(COMMUNICATE);                                             80187000
         GOTO(UNC,LM(0,0));                                             80188000
%                                                                       80189000
    LABL(NEWRECORD);                                                    80190000
%                                                                       80191000
         LORB(NO,CONTINUELOAD,SYSTEMSRESULT);                           80192000
         CALL(COMMUNICATE);                                             80193000
         ARWN(GETNEXTWORD-1);                                           80194000
         GOTO(UNC,STOP);                                                80195000
         CALL(INITIALIZERECORD);                                        80196000
%                                                                       80197000
    LABL(GETNEXTWORD);                                                  80198000
%                                                                       80199000
         MOVE(WORDCOUNT,SAVETWO);                                       80200000
         HSBB(1,WORDCOUNT);                                             80201000
         GOTO(IFLSS,NEWRECORD);                                         80202000
         MMR (SOURCEPOINTER,NO);                                        80203000
         HADB(1,SOURCEPOINTER);                                         80204000
         MOVE(SAVETWO,NO);                                              80205000
         EXIT(0);                                                       80206000
%                                                                       80207000
    LABL(PUTNEXTWORD);                                                  80208000
%                                                                       80209000
         LMWI(DESTINATIONPOINTER,SAVEONE);                              80210000
         HADB(1,DESTINATIONPOINTER);                                    80211000
         MOVE(SAVEONE,NO);                                              80212000
         EXIT(0);                                                       80213000
%                                                                       80214000
    LABL(DECREMENTAREA);                                                80215000
%                                                                       80216000
         MOVE(AREALENGTH,SAVEONE);                                      80217000
         HSBB(1,AREALENGTH);                                            80218000
         GOTO(IFLSS,NEXTAREA);                                          80219000
         MOVE(SAVEONE,NO);                                              80220000
         EXIT(0);                                                       80221000
%                                                                       80222000
    LABL(INITIALIZERECORD);                                             80223000
%                                                                       80224000
         MOVE(NO,SAVEONE);                                              80225000
         HADB(130,SYSTEMDESCRIPTORADDRESS);                             80226000
         MMR (SYSTEMDESCRIPTORADDRESS,LINE);                            80227000
         HADB(300-130,WORDCOUNT);                                       80228000
         SMWD(WRL(7),SYSTEMDESCRIPTOR);                                 80229000
         MOVE(SAVEONE,SOURCEPOINTER);                                   80230000
         MOVE(SAVETWO,IA);                                              80231000
%                                                                       80232000
    LABL(COMMUNICATE);                                                  80233000
%                                                                       80234000
         SMRD(SYSTEMDESCRIPTOR,SAVEONE);                                80235000
         MMW (SYSTEMDESCRIPTORADDRESS,NO);                              80236000
         HEYU;                                                          80237000
         MOVE(SAVEONE,NO);                                              80238000
         EXIT(0);                                                       80239000
%                                                                       80240000
    LABL(STOP);                                                         80241000
%                                                                       80242000
         LORB(NO,STOPLOAD,SYSTEMSRESULT);                               80243000
         CALL(COMMUNICATE);                                             80244000
         IDLE;                                                          80245000
    WRITERECORD;                                                        80246000
    END OF LOADER;                                                      80247000
PROCEDURE DUMPER;                                                       80248000
    BEGIN                                                               80249000
    REAL T;                                                             80250000
    LABELS SADNEWS,WRITEARECORD,DONE,LOOP,STORETAGS;                    80251000
    DEFINE START = SADNEWS+7#,                                          80252000
           RECOVER = SADNEWS+3#;                                        80253000
    LOCATE(MM(0,0));                                                    80254000
         GOTO(UNC,START);                                               80255000
         THRU 10 DO GOTO(UNC,SADNEWS);                                  80256000
         GOTO(UNC,RECOVER);                                             80257000
         THRU 4 DO GOTO(UNC,SADNEWS);                                   80258000
    LABL(SADNEWS);                                                      80259000
         SMRD(NO,NO);                                                   80260000
         LORB(NO,7,WR(1));                                              80261000
         GOTO(UNC,DONE+1);                                              80262000
         ARIN(SELF);                                                    80263000
         BRAN(SELF+1);                                                  80264000
         LANC(SAME,CF,247);                                             80265000
         MOVE(SM(0,R),IA);                                              80266000
         BRAN(SELF+1);                                                  80267000
         LANC(SAME,CF,147);                                             80268000
         SMRD(SM(1,W),NO);                                              80269000
         LMWD(((LOCALWORDS)-1) & TYPELABL TYPE);                        80270000
         LORB(NO,15,MA0);                                               80271000
         MMR(MA,NO);                                                    80272000
         SMWD(WRR(3),SM(1,W));                                          80273000
         LMRD(((LOCALWORDS)-1) & TYPELABL TYPE);                        80274000
         MMW(MA,NO);                                                    80275000
         HADB(1,SM(2,R));                                               80276000
         LORB(NO,144,Y);                                                80277000
         BKP(NO,STORETAGS);                                             80278000
         SMRD(IND,NO);                                                  80279000
         MMW(SM(2,R),NO);                                               80280000
         HADB(1,SM(2,R));                                               80281000
         BKP(NO,STORETAGS);                                             80282000
         ADDB(Y,8,Y);                                                   80283000
         LANB(Y,64,NO);                                                 80284000
         GOTO(UNC,SELF-6);                                              80285000
         LORB(NO,16|(LINEMAX+15).[7:4],D);                              80286000
         LORB(NO,16|(LINEMIN+15).[7:4],X);                              80287000
    LABL(LOOP);                                                         80288000
         SMRD(NO,NO);                                                   80289000
         LANB(X,240,MA0);                                               80290000
         SHFT(3,NO,MA0);                                                80291000
         LOR(NO,MA0,Y);                                                 80292000
         LORB(NO,1,MA0);                                                80293000
         DBYZ(SELF+3);                                                  80294000
         HAD(MA,MA);                                                    80295000
         GOTO(UNC,SELF-2);                                              80296000
         MOVE(NO,AA+3);                                                 80297000
         MSKW;                                                          80298000
         LOR(NO,X,AA);                                                  80299000
         AWRR(3,16,0);                                                  80300000
         ARIN(SELF);                                                    80301000
         BRAN(SELF+1);                                                  80302000
         LOR(NO,AI,WR(6));                                              80303000
         LOR(NO,X,AA);                                                  80304000
         AWRR(3,18,0);                                                  80305000
         LOR(NO,AI,WR(5));                                              80306000
         MOVE(NO,AA+3);                                                 80307000
         MSKW;                                                          80308000
         HADB(1,SM(2,R));                                               80309000
         SUB(X,D,NO);                                                   80310000
         GOTO(ZERO,SELF+4);                                             80311000
         LANC(SAME,CF,254);                                             80312000
         ADDB(X,1,X);                                                   80313000
         GOTO(UNC,LOOP);                                                80314000
    LABL(WRITEARECORD);                                                 80315000
         LORB(NO,1,WR(1));                                              80316000
         MMW(SM(1,L),NO);                                               80317000
         ARWN(SELF+1);                                                  80318000
         BRAN(SELF+1);                                                  80319000
         LOR(NO,X,X);                                                   80320000
         GOTO(NONZERO,SELF+5);                                          80321000
         MOVE(SM(1,R),NO);                                              80322000
         MOVE(NO,SM(2,R));                                              80323000
         MOVE(NO,SM(2,L));                                              80324000
         LORB(NO,(LOCALWORDS).[14:8],X);                                80325000
         LORB(NO,127,Y);                                                80326000
         LMRI(SM(2,L),NO);                                              80327000
         HADB(1,SM(2,L));                                               80328000
         BRAN(SELF+1);                                                  80329000
         MMW(SM(2,R),NO);                                               80330000
         HADB(1,SM(2,R));                                               80331000
         BKP(NO,STORETAGS);                                             80332000
         DBYN(SELF-6);                                                  80333000
         SUBB(X,1,X);                                                   80334000
         GOTO(NONZERO,WRITEARECORD);                                    80335000
    LABL(DONE);                                                         80336000
         LORB(NO,3,WR(1));                                              80337000
         MMW(SM(1,R),NO);                                               80338000
         T:=2 * (LINEMIN).[7:4];                                        80339000
         LORB(NO,T.[15:8],AC);                                          80340000
         LORB(NO,T.[7:8],AI);                                           80341000
         MSKW;                                                          80342000
         LORB(NO,LINEMIN,AA);                                           80343000
         AWI(2,11,7);                                                   80344000
         LORC(SAME,CF,8);                                               80345000
         GOTO(UNC,SELF);                                                80346000
    LABL(STORETAGS);                                                    80347000
         MOVE(NO,AA+3);                                                 80348000
         LOR(NO,WR(7),WR(6));                                           80349000
         MMW(SM(2,R),NO);                                               80350000
         HADB(1,SM(2,R));                                               80351000
         MOVE(AA+3,NO);                                                 80352000
         LANC(SAME,CF,247);                                             80353000
         MOVE(NO,IA);                                                   80354000
         ADJUST(IDLE);                                                  80355000
    WRITERECORD;                                                        80356000
    SYLLABLES:=CODESYLLABLES:=RECORDCT:=0;                              80357000
    END OF DUMPER;                                                      80358000
%                                                                       80359000
%                                                                       90000000
COMMENT#################################################################90001000
                   NON-STANDARD INTERFACE                               90002000
#######################################################################;90003000
%                                                                       90004000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   90005000
%                                                                       90006000
%   NDL LEVEL MACRO LOGICS                                              90007000
%                                                                       90008000
    BEGIN                                                               90009000
    PROCEDURE FUNCTIONSET(P1,P2);                                       90010000
         VALUE P1,P2;                                                   90011000
         INTEGER P1,P2;                                                 90012000
    BEGIN                                                               90013000
         FUNCTIONSETINDEX:=FUNCTIONSETINDEX+1;                          90014000
         LINECONTROLTYPE:=P1;                                           90015000
         IF P1 = CONTENTION THEN CONTENTIONOPTION:=TRUE ELSE            90016000
         IF P1 = POLLED THEN POLLINGOPTION:=TRUE;                       90017000
         IF SECONDPASS THEN ELSE                                        90018000
         LINECONTROLTYPES[MANYFUNCTIONSETS:=FUNCTIONSETINDEX]:=P1;      90019000
         USETYPE(P2);                                                   90020000
    END;                                                                90021000
%                                                                       90022000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90023000
%                                                                       90024000
    PROCEDURE FUNCTION(INDEX);                                          90025000
         VALUE INDEX;                                                   90026000
         INTEGER INDEX;                                                 90027000
    BEGIN                                                               90028000
         FUNCTIONTYPE:=INDEX;                                           90029000
         IF INDEX=INPUT THEN                                            90030000
         BEGIN                                                          90031000
              LABL(INDEXEDFUNCTION[ENABLEDINPUT,FUNCTIONSETINDEX]);     90032000
              IF LINECONTROLTYPE=CONTENTION THEN                        90033000
                   CALL(INITIALIZECONTENTIONLINE);                      90034000
         END;                                                           90035000
         LABL(INDEXEDFUNCTION[INDEX,FUNCTIONSETINDEX]);                 90036000
    END;                                                                90037000
%                                                                       90038000
%   NDL POST-PROCESSOR LOGIC                                            90039000
%                                                                       90040000
%                                                                       90041000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90042000
%                                                                       90043000
%   NDL -- DCP PROGRAM GENERATOR INTERFACE                              90044000
%                                                                       90045000
%                                                                       90046000
%   THE INTERFACE IS TO BE CONTAINED IN THE NETWORK INFORMATION         90047000
%   FILE (NIF), AND CONSISTS OF TWO (FUNCTIONAL, SPATIAL) AREAS:        90048000
%                                                                       90049000
%   1. REQUESTS, DESCRIBED AS STRINGS OF MACROS, EACH FOLLOWED BY ITS   90050000
%      PARAMETRIC VARIANTS AND OPERANDS, ALL ENCODED IN 8-BIT BYTES;    90051000
%                                                                       90052000
%   2. DCP DESCRIPTIONS, ENCODED IN WORDS.                              90053000
%                                                                       90054000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90055000
%                                                                       90056000
%   REQUESTS                                                            90057000
%                                                                       90058000
%   LIST(ELEMENT)                                                       90059000
%                                                                       90060000
%        END OF LIST [1 BYTE] = 255.                                    90061000
%                                                                       90062000
%                  A LIST OF ELEMENTS (MACROS OR OPERANDS) IS SIMPLY    90063000
%                  STORED AS THE SEQUENCE OF THE ELEMENTS TERMINATED BY 90064000
%                  THE END OF LIST BYTE.                                90065000
%                                                                       90066000
%   OPERANDS/VARIANTS.                                                  90067000
%                                                                       90068000
%        CARD IMAGE [80 BYTES]                                          90069000
%                                                                       90070000
%                  CONTAINS AN NDL SOURCE IMAGE FROM THE REQUEST SECTION90071000
%                  OF THE PROGRAM.                                      90072000
%                                                                       90073000
%        LABEL INDEX [2 BYTES]                                          90074000
%                                                                       90075000
%                  LABELS, EXPLICIT OR IMPLICIT, ARE COUNTED            90076000
%                  CONSECUTIVELY WITHIN A REQUEST. EACH LABEL THEN      90077000
%                  CORRESPONDS TO A BINARY VALUE CONTAINED IN A LABEL   90078000
%                  INDEX, UNIQUELY VALUED WITHIN EACH REQUEST.          90079000
%                                                                       90080000
%        LOGICAL CONDITION [1 BYTE]                                     90081000
%                                                                       90082000
%             1 GT, >                                                   90083000
%             2 LS, <                                                   90084000
%             3 NE,    TRUE                                             90085000
%             4 EQ, =, FALSE                                            90086000
%             5 GE                                                      90087000
%             6 LE                                                      90088000
%                                                                       90089000
%                  NOTE THAT, FOR ANY CONDITION C,                      90090000
%                  INDEX(NOT C) = 7-INDEX(C) = (NOT INDEX(C)).[2:3]     90091000
%                                                                       90092000
%        CONDITION [1 BYTE]                                             90093000
%                                                                       90094000
%             0 TIMEOUT                                                 90095000
%             1 STOP BIT ERROR                                          90096000
%             2 BYTE BUFFER OVERFLOW                                    90097000
%             3 BREAK ON INPUT                                          90098000
%             4 UNDEFINED                                               90099000
%             5 BREAK ON OUTPUT                                         90100000
%             6 VERTICAL PARITY ERROR                                   90101000
%             7 HORIZONTAL PARITY ERROR                                 90102000
%             8 STATION ADDRESS ERROR                                   90103000
%             9 TRANSMISSION NUMBER ERROR                               90104000
%            10 INPUT FORMAT ERROR                                      90105000
%            11 UNDEFINED                                               90106000
%            12 SPECIAL CHARACTER RECEIVED                              90107000
%            13 WRU RECEIVED                                            90108000
%            17 END OF BUFFER                                           90109000
%            18 LOSS OF CARRIER                                         90110000
%            19 UNDEFINED                                               90111000
%                                                                       90112000
%        BIT [1 BYTE]                                                   90113000
%                                                                       90114000
%             0 FALSE                                                   90115000
%             1 TRUE                                                    90116000
%                                                                       90117000
%       (BIT VARIABLE)                                                  90118000
%                                                                       90119000
%             3 ERROR FLAG(CONDITION)                                   90120000
%             4 USER TOGGLE [1 BYTE]                                    90121000
%                                                                       90122000
%                  VALUE 0 THROUGH 7                                    90123000
%                                                                       90124000
%             5 SEQUENCING                                              90125000
%                                                                       90126000
%        BYTE [1 BYTE]                                                  90127000
%                                                                       90128000
%             0 LITERAL [1 BYTE]                                        90129000
%                                                                       90130000
%                  CONTAINS A LITERAL CHARACTER OR INTEGER VALUE,       90131000
%                  0 THROUGH 255                                        90132000
%                                                                       90133000
%       (BYTE VARIABLE)                                                 90134000
%                                                                       90135000
%             1 TALLY [1 BYTE]                                          90136000
%                                                                       90137000
%                  CONTAINS THE TALLY INDEX 0 THROUGH 4.                90138000
%                                                                       90139000
%             2 CHARACTER                                               90140000
%             3 BCC                                                     90141000
%             4 RETRY                                                   90142000
%             5 PAGE                                                    90143000
%             6 WIDTH                                                   90144000
%                                                                       90145000
%                                                                       90146000
%        ITEM [1 BYTE]                                                  90147000
%                                                                       90148000
%             0 STRING[1 BYTE=LENGTH & LENGTH BYTES]                    90149000
%             1 ADDRESS[1 BYTE]                                         90150000
%                  0 RECEIVE ADDRESS, AS TSC                            90151000
%                  1 TRANSMIT ADDRESS, AS CDC                           90152000
%             2 CHARACTER                                               90153000
%             3 BCC                                                     90154000
%             4 TEXT                                                    90155000
%             5 TRANSMISSION NUMBER                                     90156000
%             6 BLOCK NUMBER                                            90157000
%             7 SEQUENCE NUMBER                                         90158000
%                                                                       90159000
%        TIME[1 BYTE]                                                   90160000
%             0 NOT SPECIFIED, USE DEFAULT VALUE, ELSE                  90161000
%            31 NULL, NO TIME, ELSE                                     90162000
%               PROGRAM TIMER VALUE                                     90163000
%                                                                       90164000
%        ACTION BYTE [1 BYTE]                                           90165000
%                                                                       90166000
%             0 LITERAL [1 BYTE]                                        90167000
%             1 WRU                                                     90168000
%             2 SPECIAL                                                 90169000
%             3 BACKSPACE                                               90170000
%             4 LINE DELETE                                             90171000
%             5 SEPARATOR                                               90172000
%        5 END                                                          90173000
%                                                                       90174000
%   MACROS [1 BYTE]                                                     90175000
%                                                                       90176000
%        0 NO-OP                                                        90177000
%                                                                       90178000
%        1 LABEL(LABEL INDEX)                                           90179000
%                                                                       90180000
%                  PLACES THE LABEL INDEXED.                            90181000
%                                                                       90182000
%        2 TEST/BRANCH(BIT VARIABLE, LOGICAL CONDITION, LABEL INDEX)    90183000
%        3 COMPARE/BRANCH(BYTE, BYTE, LOGICAL CONDITION, LABEL INDEX)   90184000
%        4 UNCONDITIONAL BRANCH(LABEL INDEX)                            90185000
%        5 ASSIGN BIT(BIT VARIABLE,BIT)                                 90186000
%        6 ASSIGN BYTE(BYTE VARIABLE, BYTE)                             90187000
%        7 ADD(BYTE VARIABLE, BYTE, BYTE)                               90188000
%        8 SUBTRACT(BYTE VARIABLE, BYTE, BYTE)                          90189000
%        9 INITIATE RECEIVE(TIME)                                       90190000
%       10 INITIATE TRANSMIT(TIME)                                      90191000
%       11 INITIALIZE BCC                                               90192000
%       12 INITIALIZE TEXT                                              90193000
%       13 FINISH TRANSMIT(TIME)                                        90194000
%       14 FETCH(LABEL INDEX)                                           90195000
%       15 STORE(LABEL INDEX, ITEM)                                     90196000
%       16 SUM BCC(BYTE)                                                90197000
%       17 TRANSMIT(ERROR SET INDEX,ITEM)                               90198000
%       18 RECEIVE(TIME,ERROR SET INDEX,LABEL INDEX,ITEM,               90199000
%                  LIST(ACTION BYTE, LABEL INDEX))                      90200000
%       19 EXAMINE(NUMBER OF ITEMS, BYTE VARIABLE, CONSTANTS            90201000
%       20 TERMINATE [1 BYTE]                                           90202000
%                 AND LABELS)                                           90203000
%             0 UNDEFINED                                               90204000
%             1 NORMAL                                                  90205000
%             2 ERROR                                                   90206000
%             3 BLOCK                                                   90207000
%             4 ENABLE INPUT                                            90208000
%             5 NOINPUT                                                 90209000
%             6 UNDEFINED                                               90210000
%             7 REQUEST                                                 90211000
%        21 DELAY                                                       90212000
%        22 NOT ASSIGNED                                                90213000
%        23 BREAK(HOLD TIME,PAUSE TIME)                                 90214000
%        24 NOT ASSIGNED                                                90215000
%        25 NOT ASSIGNED                                                90216000
%        26 INCREMENT TRANSMIT NUMBER                                   90217000
%        27 INITIALIZE TRANSMISSION NUMBER                              90218000
%        28 INCREMENT BLOCK NUMBER                                      90219000
%        29 INITIALIZE BLOCK NUMBER                                     90220000
%        30 INCREMENT SEQUENCE NUMBER                                   90221000
%                                                                       90222000
%                                                                       90223000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90224000
%                                                                       90225000
%   DCP DESCRIPTION                                                     90226000
%        UNFO[SEGMENT,WORD].[FIELD]                                     90227000
%                                                                       90228000
%        [0,0].[31:16]  SIZE OF LOCAL MEMORY IN WORDS                   90229000
%        [0,1].[31:16]  MAXIMUM CLUSTER/ADAPTOR ADDRESS                 90230000
%              [15:16]  MINIMUM CLUSTER/ADAPTOR ADDRESS                 90231000
%        [0,2].[31:16]  NUMBER OF TRANSMISSION CLASSES                  90232000
%              [15:16]  NUMBER OF REQUEST SETS                          90233000
%        [0,3].[31:16]  NUMBER OF USABLE LINES                          90234000
%               [15:16] NUMBER OF STATIONS                              90235000
%        [0,4]          STATION TABLE ITEMS REQUIRED BY THE             90236000
%                       REQUESTS TO BE INCLUDED FOR THE DCP             90237000
%               [47:3]  R.F.E.                                          90238000
%               [44:1]  WRU                                             90239000
%               [43:1]  BACKSPACE                                       90240000
%               [42:1]  LINE DELTE                                      90241000
%               [41:1]  END OF MESSAGE                                  90242000
%               [40:1]  CONTROL                                         90243000
%               [39:1]  SEQUENCE NUMBER AND INCREMENT                   90244000
%               [38:1]  TOGGLE[*]                                       90245000
%               [37:1]  BLOCK NUMBER                                    90246000
%               [36:1]  R.F.E.                                          90247000
%               [35:4]  MAXIMUM LENGTH OF TRANSMISSION NUMBERS          90248000
%               [31:4]  MAXIMUM LENGTH OF RECEIVE ADDRESS               90249000
%               [27:4]  MAXIMUM LENGTH OF TRANSMIT ADDRESS              90250000
%               [23:1]  TALLY[0]                                        90251000
%               [22:1]  TALLY[1]                                        90252000
%               [21:1]  TALLY[2]                                        90253000
%               [20:1]  TALLY[3]                                        90254000
%               [19:1]  TALLY[4]                                        90255000
%               [18:18] R.F.E.                                          90256000
%               [ 0:1]  BCC                                             90257000
%                                                                       90258000
%        [4,1]          FOR THE FIRST TRANSMISSION CLASS, AND FOR EACH: 90259000
%              [31:8]   INTER-CHARACTER TRANSMIT DELAY                  90260000
%              [11:2]   LONGITUDINAL PARITY                             90261000
%                            0 EVEN                                     90262000
%                            1 ODD                                      90263000
%                            2 NONE                                     90264000
%              [9:2]    VERTICAL PARITY                                 90265000
%              [7:8]    TRANSLATION TYPE                                90266000
%                            0 NONE                                     90267000
%                            1 ASCII(67)                                90268000
%                            2 BCL                                      90269000
%                                                                       90270000
%        TWO WORDS FOR EACH REQUEST SET, STARTING AT WORD 1 IN THE      90271000
%        SEGMENT FOLLOWING THE TRANSMISSION CLASSES                     90272000
%        [0].                                                           90273000
%               [47:2]  R.F.E.                                          90274000
%              [45:2]   SYNCHRONOUS TYPE                                90275000
%                            0 ASYNCHRONOUS                             90276000
%                            1 SYNCHRONOUS                              90277000
%                            2 EITHER                                   90278000
%              [43:2]   LENGTH OF RECEIVE ADDRESS                       90279000
%              [41:2]   LENGTH OF TRANSMIT ADDRESS                      90280000
%              [39:1]   IF RECEIVE AND TRANSMIT ADDRESS IDENTICAL       90281000
%               [38:1]  IF INITIATE TRANSMIT DELAYS                     90282000
%               [37:1]  IF INITIATE RECEIVE DELAYS                      90283000
%               [36:1]  R.F.E.                                          90284000
%              [35:4]   LINE CONTROL MODE                               90285000
%                            0 CONTENTION                               90286000
%                            1 POLLED                                   90287000
%                            2 HYBRID                                   90288000
%              [31:8]   TRANSMISSION CLASS INDEX                        90289000
%              [23:12]  NIF INDEX OF THE WRITE REQUEST                  90290000
%              [11:12]  NIF INDEX OF THE READ REQUEST                   90291000
%                                                                       90292000
%        [1].                                                           90293000
%              [47:3]   R.F.E.                                          90294000
%              [44:1]   IF VARIABLE WRU                                 90295000
%              [43:1]   IF VARIABLE BACKSPACE                           90296000
%              [42:1]   IF VARIABLE LINE DELETE                         90297000
%              [41:1]   IF VARIABLE END                                 90298000
%              [40:1]   IF VARIABLE TIMEOUT                             90299000
%              [39:8]   WRU                                             90300000
%              [31:8]   BACKSPACE                                       90301000
%              [23:8]   LINEDELETE                                      90302000
%              [15:8]   END                                             90303000
%              [7:8]    TIMEOUT                                         90304000
%                                                                       90305000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90306000
%                                                                       90307000
    PROCEDURE NOTYETIMPLEMENTED;                                        90308000
         HEADING("NOT YET IMPLEMENTED");                                90309000
%                                                                       90310000
    DEFINE DYNAMIC = (-NO)#;                                            90311000
%                                                                       90312000
    PROCEDURE NOTIMPLEMENTED;                                           90313000
         HEADING("NOT IMPLEMENTED");                                    90314000
%                                                                       90315000
    DEFINE                                                              90316000
         NIFBYTES                     =  ACCUM#,                        90317000
         IMAGE                        =  TLBUFF#,                       90318000
         NDLLABELS                    =  INFO#,                         90319000
         RECEIVEERRORS[I1,I2]         =  INFO[63+I1,I2]#,               90320000
         LINEVEC[I1]                  =  REQBUFF[300+I1]#,              90321000
         REQUESTSETS[I1]              =  REQBUFF[600+I1]#;              90322000
%                                                                       90323000
    FILE IMAGES 10 "SYSTEM"/"REQUEST" (2,15,30);                        90324000
    DEFINE                                                              90325000
         NIFWORD                     =  STATIONFORWARDLINK#,            90326000
         NIFINDEX                    =  APPSET#,                        90327000
         NIFBYTE                     =  APPNUM#,                        90328000
         REQUESTBYTE                 =  ELCLASS#,                       90329000
         IMAGERECORD                 =  NLABEL#,                        90330000
         LASTNDL                     =  SAVEINFO#,                      90331000
         REQUESTSET                  =  REQFORWARDLINK#,                90332000
         IMAGESPRESENT               =  DOLLARTOG#,                     90333000
         GOAHEAD                     =  DUMPTOG#,                       90334000
         FIRSTIMAGE                  =  VOIDTOG#;                       90335000
    REAL NDLTYPE;                                                       90336000
%                                                                       90337000
    LABELS ARRAY                                                        90338000
         TRANSMITERRORS[0:63,0:255];                                    90339000
         INTEGER REQUESTINDEX,LABELMAX;                                 90340000
%                                                                       90341000
    OWN REAL ARRAY                                                      90342000
         LINETABL[0:256,0:LINETABLESIZE],                               90343000
         STATIONTABL[0:256,0:STATIONTABLESIZE],                         90344000
         TERMINALTABL[0:63,0:TERMINALTABLESIZE];                        90345000
    DEFINE                                                              90346000
         NDLSTATIONS  =  STATIONMAX#,                                   90347000
         NDLTYPEMAX   =  ENFO[DCPLINK,DNTC]#,                           90348000
         REQUESTSETMAX = ENFO[DCPLINK,DNRT]#,                           90349000
         NDLLINES     =  ENFO[DCPLINK,3].[31:16]#;                      90350000
%                                                                       90351000
    POINTER P;                                                          90352000
%                                                                       90353000
    REAL                                                                90354000
         NDLSPECIAL,                                                    90355000
         NDLSEPARATOR,                                                  90356000
         NDLTABLEITEMS,                                                 90357000
         NDLWRU,                                                        90358000
         NDLBACKSPACE,                                                  90359000
         NDLLINEDELETE,                                                 90360000
         NDLEND,                                                        90361000
         NDLTIMEOUT;                                                    90362000
%                                                                       90363000
    REAL PROCEDURE NDL(BYTES);                                          90364000
         VALUE BYTES;                                                   90365000
         INTEGER BYTES;                                                 90366000
    BEGIN                                                               90367000
%                                                                       90368000
         REAL CCNT;                                                     90369000
%                                                                       90370000
         POINTER IP;                                                    90371000
%                                                                       90372000
         IF 186-NIFBYTE LSS BYTES THEN                                  90373000
         BEGIN                                                          90374000
              NIFINDEX:=NIFINDEX+1;                                     90375000
              REPLACE POINTER(NIFBYTES[0]) BY                           90376000
                   POINTER(NIFBYTES[30]) FOR 1 WORDS,                   90377000
                   POINTER(ENFO[NIFINDEX,0]) FOR 30 WORDS;              90378000
              NIFBYTE:=NIFBYTE-180;                                     90379000
         END;                                                           90380000
%                                                                       90381000
         NDL:=LASTNDL:=REAL(POINTER(NIFBYTES[0],8)+NIFBYTE,BYTES);      90382000
         NIFBYTE:=NIFBYTE+BYTES;                                        90383000
%                                                                       90384000
         REQUESTBYTE:=REQUESTBYTE+BYTES;                                90385000
         IF EVERLISTED THEN                                             90386000
         IF IMAGESPRESENT AND SECONDPASS THEN                           90387000
    WHILE REQUESTBYTE GTR IMAGE[14].[23:24] AND GOAHEAD DO              90388000
    BEGIN                                                               90389000
              IF REAL(LISTING:=BOOLEAN(IMAGE[14].[25:1])) NEQ 0 THEN    90390000
% LIST SOURCE OF REQUEST SECTION ONLY IF CODETOG IS SET.                90391000
             BEGIN                                                      90392000
                  WRITELINE;                                            90393000
                  REPLACE POINTERLINE BY " " FOR 120;                   90394000
%                                                                       90395000
              IF FIRSTIMAGE THEN                                        90396000
                 BEGIN                                                  90397000
                   FIRSTIMAGE:=FALSE;                                   90398000
                   CCNT:=72;                                            90399000
                   IP:=POINTER(IMAGE);                                  90400000
%                                                                       90401000
                   DO                                                   90402000
                     SCAN IP:IP FOR CCNT:CCNT WHILE NEQ "R"             90403000
                   UNTIL REAL(IP:=IP+1,6) = "EQUEST" OR CCNT = 0;       90404000
%                                                                       90405000
                   REPLACE POINTERLINE+92-CCNT BY IP-1 FOR CCNT;        90406000
                 END                                                    90407000
              ELSE                                                      90408000
                 BEGIN                                                  90409000
                   CCNT:=72;                                            90410000
                   IP:=POINTER(IMAGE);                                  90411000
 %                                                                      90412000
                   DO                                                   90413000
                     SCAN IP:IP FOR CCNT:CCNT WHILE NEQ "R"             90414000
                   UNTIL REAL(IP:=IP+1,6) = "EQUEST" OR CCNT = 0;       90415000
%                                                                       90416000
                   IF CCNT EQL 0 THEN                                   90417000
                      BEGIN                                             90418000
                        IP:=POINTER(IMAGE);                             90419000
                        CCNT:=72;                                       90420000
                        DO                                              90421000
                          SCAN IP:IP FOR CCNT:CCNT UNTIL EQL "M"        90422000
                        UNTIL REAL(IP:=IP+1,4) = "ODEM" OR CCNT = 0;    90423000
                      END;                                              90424000
%                                                                       90425000
                   REPLACE POINTERLINE+20 BY POINTER(IMAGE) FOR 72-CCNT;90426000
 %                                                                      90427000
                   IF CCNT NEQ 0 THEN GOAHEAD:=FALSE;                   90428000
%                                                                       90429000
                 END;                                                   90430000
%                                                                       90431000
              REPLACE POINTERLINE+102 BY POINTER(IMAGE)+72 FOR 8;       90432000
%                                                                       90433000
              PRINTED:=TRUE;                                            90434000
              WRITELINE;                                                90435000
%                                                                       90436000
         END;                                                           90437000
%                                                                       90438000
         READ(IMAGES[IMAGERECORD],15,IMAGE[*]);                         90439000
         IMAGERECORD:=IMAGERECORD+1;                                    90440000
    END;                                                                90441000
%                                                                       90442000
    END;                                                                90443000
%                                                                       90444000
    PROCEDURE NDLREQUEST(IO);                                           90445000
         VALUE IO;                                                      90446000
         INTEGER IO;                                                    90447000
    BEGIN                                                               90448000
         INTEGER I;                                                     90449000
%                                                                       90450000
    DEFINE                                                              90451000
         TYPE           = [31:8]#,                                      90452000
%                                                                       90453000
         LITERAL        = 0#,                                           90454000
         REGISTER       = 1#,                                           90455000
         USESREGISTERS  = 2#,                                           90456000
         MESSAGEWORD    = 2#,                                           90457000
         RESULTWORD     = 3#,                                           90458000
         REGISTERWORD   = 4#,                                           90459000
         STATIONWORD    = 5#,                                           90460000
         TERMINALWORD   = 6#,                                           90461000
         CHARACTERWORD  = 7#,                                           90462000
%                                                                       90463000
         CONSTANT       = [23:8]#,                                      90464000
         DCPADDRESS(DCPADDRESS1)                                        90465000
                        = (DCPADDRESS1&0[33:18])#;                      90466000
%                                                                       90467000
         REAL BYTE1,BYTE2,BYTE3;                                        90468000
         REAL BIT1,BIT2;                                                90469000
         REAL FIRST,LAST,NUMBER;                                        90470000
         REAL ARRAY EXAMINE[0:255];                                     90471000
%                                                                       90472000
         BOOLEAN UPDATEDREGISTERS;                                      90473000
         REAL PRESENT;                                                  90474000
         REAL THELABEL;                                                 90475000
%                                                                       90476000
         DEFINE                                                         90477000
         NULLLABEL      = (0&255[15:8])#,                               90478000
         ABORTLABEL     = (1&255[15:8])#;                               90479000
%                                                                       90480000
         REAL THEDELAY;                                                 90481000
         INTEGER REL;                                                   90482000
         REAL LOOP;                                                     90483000
%                                                                       90484000
         INTEGER MACRO;                                                 90485000
         DEFINE MACROMAX = 30#;                                         90486000
%                                                                       90487000
    PROCEDURE DISCARD(WHAT);                                            90488000
         VALUE WHAT;                                                    90489000
         REAL  WHAT;                                                    90490000
         ;                                                              90491000
%                                                                       90492000
    REAL PROCEDURE NDLBYTE;                                             90493000
    CASE NDL(1) OF                                                      90494000
    BEGIN                                                               90495000
         NDLBYTE:= NO&                                                  90496000
                   LITERAL TYPE&                                        90497000
                   NDL(1) CONSTANT;                                     90498000
         NDLBYTE:= (WR(W)+STATIONTALLYS.FIELD+NDL(1))&                  90499000
                   REGISTERWORD TYPE;                                   90500000
         NDLBYTE:= CHARACTER&                                           90501000
                   REGISTER TYPE;                                       90502000
         NDLBYTE:= BCC&                                                 90503000
                   REGISTER TYPE;                                       90504000
         NDLBYTE:= (WR(W)+STATIONTALLY.FIELD)&                          90505000
                   RESULTWORD TYPE;                                     90506000
         NDLBYTE:= (WR(W)+TERMINALPAGE.FIELD)&                          90507000
                   TERMINALWORD TYPE;                                   90508000
         NDLBYTE:= (WR(W)+TERMINALWIDTH.FIELD)&                         90509000
                   TERMINALWORD TYPE;                                   90510000
    END NDL BYTE;                                                       90511000
%                                                                       90512000
    REAL PROCEDURE NDLBIT;                                              90513000
    CASE NDL(1) OF                                                      90514000
    BEGIN                                                               90515000
         NDLBIT:=  NO&                                                  90516000
                   LITERAL TYPE&                                        90517000
                   REAL(FALSE) CONSTANT;                                90518000
%                                                                       90519000
         NDLBIT:=  NO&                                                  90520000
                   LITERAL TYPE&                                        90521000
                   REAL(TRUE) CONSTANT;                                 90522000
         NDLBIT:=  WR(3)&                                               90523000
                   MESSAGEWORD TYPE&                                    90524000
                   TWO(NDL(1)) CONSTANT;                                90525000
         NDLBIT:=  (WR(6)-NDL(1).[5:3])&                                90526000
                   RESULTWORD TYPE&                                     90527000
                   TWO(LASTNDL) CONSTANT;                               90528000
         NDLBIT:=  (WR(W)+STATIONTOGGLES.FIELD)&                        90529000
                   REGISTERWORD TYPE&                                   90530000
                   TWO(NDL(1)) CONSTANT;                                90531000
         NDLBIT:=  (WR(W)+(STATIONSEQUENCE).[15:8])&                    90532000
                   STATIONWORD TYPE&                                    90533000
                   (STATIONSEQUENCE) CONSTANT;                          90534000
    END NDL BIT;                                                        90535000
%                                                                       90536000
    PROCEDURE FREEREGISTERS;                                            90537000
         IF UPDATEDREGISTERS THEN                                       90538000
         BEGIN                                                          90539000
              LMWI(MA,NO);                                              90540000
              UPDATEDREGISTERS:=FALSE;                                  90541000
         END;                                                           90542000
%                                                                       90543000
    DEFINE                                                              90544000
         CLEARREGISTERS=                                                90545000
              FREEREGISTERS;PRESENT:=NO#,                               90546000
         CLEARARITHMETIC=                                               90547000
              IF MAYBECF[0] THEN LOR(NO,NO,NO)#,                        90548000
         UPDATE(UPDATE1)=                                               90549000
              IF UPDATE1.TYPE GEQ USESREGISTERS THEN                    90550000
              UPDATEDREGISTERS:=TRUE#;                                  90551000
%                                                                       90552000
    BOOLEAN PROCEDURE REGISTERCONFLICT(BYTE1,BYTE2);                    90553000
         VALUE BYTE1,BYTE1;                                             90554000
         REAL  BYTE1,BYTE2;                                             90555000
%                                                                       90556000
         REGISTERCONFLICT:=                                             90557000
              BYTE1.TYPE GEQ USESREGISTERS AND                          90558000
              BYTE2.TYPE GEQ USESREGISTERS AND                          90559000
              BYTE1.TYPE NEQ BYTE2.TYPE;                                90560000
%                                                                       90561000
    PROCEDURE ACQUIRE(VARIABLE);                                        90562000
         VALUE VARIABLE;                                                90563000
         REAL  VARIABLE;                                                90564000
    IF VARIABLE.TYPE GEQ USESREGISTERS THEN                             90565000
    IF VARIABLE.TYPE NEQ PRESENT.TYPE THEN                              90566000
    BEGIN                                                               90567000
         FREEREGISTERS;                                                 90568000
         CASE VARIABLE.TYPE-USESREGISTERS OF                            90569000
         BEGIN                                                          90570000
              CALL(LOADMESSAGEWORD);                                    90571000
              CALL(LOADRESULTWORD);                                     90572000
              CALL(LOADREGISTERWORD);                                   90573000
              LMRI(STATIONTABLE,NO);                                    90574000
              CALL(LOADTERMINALWORD);                                   90575000
              CALL(LOADCHARACTERWORD);                                  90576000
         END;                                                           90577000
         PRESENT:=VARIABLE;                                             90578000
    END ACQUIRE;                                                        90579000
%                                                                       90580000
    REAL PROCEDURE NDLTIME(IFNULL);                                     90581000
         VALUE IFNULL;                                                  90582000
         REAL IFNULL;                                                   90583000
    NDLTIME:=IF NDL(1)=0 THEN IFNULL ELSE                               90584000
              IF LASTNDL=31 THEN NO ELSE LASTNDL;                       90585000
%                                                                       90586000
    REAL PROCEDURE NDLLABEL;                                            90587000
    BEGIN                                                               90588000
         INTEGER INDEX;                                                 90589000
         NDLLABEL:=                                                     90590000
              IF (INDEX:=NDL(2)).[15:8]<255 THEN                        90591000
                   NDLLABELS[REQUESTINDEX,INDEX] ELSE                   90592000
                   INDEX;                                               90593000
    END NDL LABEL;                                                      90594000
%                                                                       90595000
    PROCEDURE BRANCH(C,L);                                              90596000
         VALUE C,L;                                                     90597000
         REAL  C,L;                                                     90598000
    BEGIN                                                               90599000
         FREEREGISTERS;                                                 90600000
         IF L=NULLLABEL THEN GOTO(C,SELF+1) ELSE                        90601000
         IF L=ABORTLABEL THEN GOTO(C,ABORTLOGIC) ELSE                   90602000
         GOTO(C,L);                                                     90603000
    END;                                                                90604000
%                                                                       90605000
    PROCEDURE NDLACTIONLIST;                                            90606000
    BEGIN                                                               90607000
         INTEGER ACTION;                                                90608000
         DEFINE ACTIONMAX = 6#;                                         90609000
         BOOLEAN USEDIMPLICIT,DUPLICATES;                               90610000
%                                                                       90611000
    REAL PROCEDURE ACTIONLABEL(IFNULL);                                 90612000
         REAL IFNULL;                                                   90613000
         ACTIONLABEL:=                                                  90614000
              IF (THELABEL:=NDLLABEL)=ABORTLABEL THEN ABORTLOGIC        90615000
              ELSE IF THELABEL=NULLLABEL THEN                           90616000
              IFNULL ELSE THELABEL;                                     90617000
%                                                                       90618000
    PROCEDURE COMPARE(WHAT);                                            90619000
         VALUE WHAT;                                                    90620000
         REAL  WHAT;                                                    90621000
    BEGIN                                                               90622000
         WHAT:=(WR(W)+WHAT.FIELD)&CHARACTERWORD TYPE;                   90623000
         IF PRESENT.TYPE NEQ WHAT.TYPE THEN                             90624000
         BEGIN                                                          90625000
              ACQUIRE(WHAT);                                            90626000
              LOR (NO,CHARACTER,X);                                     90627000
         END;                                                           90628000
         LEO (X,DCPADDRESS(WHAT),NO);                                   90629000
    END COMPARE;                                                        90630000
%                                                                       90631000
    REAL PROCEDURE IMPLICIT;                                            90632000
    BEGIN                                                               90633000
         IF USEDIMPLICIT THEN                                           90634000
         ELSE                                                           90635000
         BEGIN                                                          90636000
              USEDIMPLICIT:=TRUE;                                       90637000
              LABELMAX:=LABELMAX+1;                                     90638000
         END;                                                           90639000
         IMPLICIT:=NDLLABELS[REQUESTINDEX,LABELMAX];                    90640000
    END IMPLICIT;                                                       90641000
%                                                                       90642000
    BOOLEAN PROCEDURE DUPLICATE;                                        90643000
    BEGIN                                                               90644000
         DUPLICATE:=REAL(DUPLICATES AND BOOLEAN(TWO(ACTION))) NEQ 0;    90645000
         DUPLICATES:=DUPLICATES OR BOOLEAN(TWO(ACTION));                90646000
    END;                                                                90647000
%                                                                       90648000
         PRESENT:=NO;                                                   90649000
         USEDIMPLICIT:=FALSE;                                           90650000
         DUPLICATES:=FALSE;                                             90651000
         WHILE (ACTION:=NDL(1)) LEQ ACTIONMAX DO                        90652000
         CASE ACTION OF                                                 90653000
         BEGIN                                                          90654000
%                                                                       90655000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90656000
%                                                                       90657000
%        0 = LITERAL                                                    90658000
%                                                                       90659000
         BEGIN                                                          90660000
              BYTE1:=NDL(1);                                            90661000
              IF ACTIONLABEL(NO) NEQ NO THEN                            90662000
              BEGIN                                                     90663000
                   LEOC(NO,CHARACTER,BYTE1);                            90664000
                   BRANCH(IFEQL,THELABEL);                              90665000
              END;                                                      90666000
         END;                                                           90667000
%                                                                       90668000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90669000
%                                                                       90670000
%        1 = WRU                                                        90671000
%                                                                       90672000
         IF DUPLICATE THEN                                              90673000
              DISCARD(NDLLABEL)                                         90674000
         ELSE                                                           90675000
         BEGIN                                                          90676000
              IF NDLWRU=DYNAMIC THEN                                    90677000
                   COMPARE(STATIONWRU)                                  90678000
              ELSE                                                      90679000
                   LEOC(NO,CHARACTER,NDLWRU);                           90680000
              BRANCH(IFNEQ,SELF+3);                                     90681000
              CALL(SETWRUFLAG);                                         90682000
              BRANCH(UNC,                                               90683000
                   ACTIONLABEL(IF LOOP=NO THEN IMPLICIT ELSE LOOP));    90684000
         END;                                                           90685000
%                                                                       90686000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90687000
%                                                                       90688000
%        2 = SPECIAL                                                    90689000
%                                                                       90690000
         IF DUPLICATE THEN                                              90691000
              DISCARD(NDLLABEL)                                         90692000
         ELSE                                                           90693000
         BEGIN                                                          90694000
              IF NDLSPECIAL = DYNAMIC THEN                              90695000
                   COMPARE(STATIONSPECIAL)                              90696000
              ELSE                                                      90697000
                   LEOC(NO,CHARACTER,NDLSPECIAL);                       90698000
              BRANCH(IFNEQ,SELF+3);                                     90699000
              CALL(SETSPECIALFLAG);                                     90700000
              BRANCH(UNC,                                               90701000
                   ACTIONLABEL(IF LOOP=NO THEN IMPLICIT ELSE LOOP));    90702000
         END;                                                           90703000
%                                                                       90704000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90705000
%                                                                       90706000
%        3 = BACKSPACE                                                  90707000
%                                                                       90708000
         IF DUPLICATE THEN                                              90709000
              DISCARD(NDLLABEL)                                         90710000
         ELSE                                                           90711000
         BEGIN                                                          90712000
              IF NDLBACKSPACE=DYNAMIC THEN                              90713000
                   COMPARE(STATIONBACKSPACE)                            90714000
              ELSE                                                      90715000
                   LEOC(NO,CHARACTER,NDLBACKSPACE);                     90716000
              GOTO(IFNEQ,SELF+3);                                       90717000
              CALL(STOREBACKSPACE);                                     90718000
              BRANCH(UNC,                                               90719000
                   ACTIONLABEL(IF LOOP=NO THEN IMPLICIT ELSE LOOP));    90720000
         END;                                                           90721000
%                                                                       90722000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90723000
%                                                                       90724000
%        4 = LINE DELETE                                                90725000
%                                                                       90726000
         IF DUPLICATE THEN                                              90727000
              DISCARD(NDLLABEL)                                         90728000
         ELSE                                                           90729000
         BEGIN                                                          90730000
              IF NDLLINEDELETE=DYNAMIC THEN                             90731000
                   COMPARE(STATIONLINEDELETE)                           90732000
              ELSE                                                      90733000
                   LEOC(NO,CHARACTER,NDLLINEDELETE);                    90734000
              BRANCH(IFNEQ,SELF+3);                                     90735000
              CALL(INITIALIZETEXT);                                     90736000
              BRANCH(UNC,                                               90737000
                   ACTIONLABEL(IF LOOP=NO THEN IMPLICIT ELSE LOOP));    90738000
         END;                                                           90739000
%                                                                       90740000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90741000
%                                                                       90742000
%        5 = END                                                        90743000
%                                                                       90744000
         IF NOT DUPLICATE AND ACTIONLABEL(NO) NEQ NO THEN               90745000
         BEGIN                                                          90746000
              IF NDLEND=DYNAMIC THEN                                    90747000
                   COMPARE(STATIONETX)                                  90748000
              ELSE                                                      90749000
                   LEOC(NO,CHARACTER,NDLEND);                           90750000
              BRANCH(IFEQL,THELABEL);                                   90751000
         END;                                                           90752000
%                                                                       90753000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90754000
%                                                                       90755000
%         6 = SEPARATOR                                                 90756000
%                                                                       90757000
          IF DUPLICATE THEN                                             90758000
               DISCARD(NDLLABEL)                                        90759000
          ELSE                                                          90760000
          BEGIN                                                         90761000
               IF NDLSEPARATOR=DYNAMIC THEN                             90762000
                   COMPARE(STATIONSEPARATOR)                            90763000
               ELSE                                                     90764000
                    LEOC(NO,CHARACTER,NDLSEPARATOR);                    90765000
               BRANCH(IFNEQ,SELF+3);                                    90766000
               CALL(TERMINATEINCOMPLETEINPUT);                          90767000
               BRANCH(UNC,                                              90768000
                    ACTIONLABEL(IF LOOP=NO THEN IMPLICIT ELSE LOOP));   90769000
          END;                                                          90770000
%                                                                       90771000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90772000
%                                                                       90773000
         END;                                                           90774000
%                                                                       90775000
         IF USEDIMPLICIT THEN                                           90776000
         LABL(NDLLABELS[REQUESTINDEX,LABELMAX]);                        90777000
         CLEARREGISTERS;                                                90778000
%                                                                       90779000
    END NDL ACTION LIST;                                                90780000
%                                                                       90781000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90782000
%                                                                       90783000
         REQUESTINDEX:=REQUESTINDEX+1;                                  90784000
         LABELMAX:=ENFO[NIFINDEX,2];                                    90785000
         IF SECONDPASS THEN                                             90786000
         BEGIN                                                          90787000
         GOAHEAD:=FIRSTIMAGE:=TRUE;                                     90788000
         IMAGERECORD:=ENFO[NIFINDEX,4]-1;                               90789000
         READ(IMAGES[IMAGERECORD],15,IMAGE[*]);                         90790000
         IMAGERECORD:=IMAGERECORD+1;                                    90791000
         END;                                                           90792000
         REQUESTBYTE:=0;                                                90793000
         NIFBYTE:=6 TIMES 31;                                           90794000
         FUNCTION(IO);                                                  90795000
         UPDATEDREGISTERS:=FALSE;                                       90796000
         PRESENT:=NO;                                                   90797000
         TIMER:=NO;                                                     90798000
         WHILE (MACRO:=NDL(1)) LEQ MACROMAX DO                          90799000
         CASE MACRO OF                                                  90800000
         BEGIN                                                          90801000
%                                                                       90802000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90803000
%                                                                       90804000
%        0 = NO-   OP                                                   90805000
%                                                                       90806000
         BEGIN                                                          90807000
         END;                                                           90808000
%                                                                       90809000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90810000
%                                                                       90811000
%        1 = PLACE A LABEL                                              90812000
%                                                                       90813000
         BEGIN                                                          90814000
              CLEARREGISTERS;                                           90815000
              THELABEL:=NDL(2);                                         90816000
              LABL(NDLLABELS[REQUESTINDEX,THELABEL]);                   90817000
         END;                                                           90818000
%                                                                       90819000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90820000
%                                                                       90821000
%        2 = TEST BIT/BRANCH                                            90822000
%                                                                       90823000
         IF (BIT1:=NDLBIT).TYPE NEQ LITERAL THEN                        90824000
         BEGIN                                                          90825000
              ACQUIRE(BIT1);                                            90826000
              LANC(NO,DCPADDRESS(BIT1),BIT1.CONSTANT);                  90827000
              BRANCH(NDL(1),NDLLABEL);                                  90828000
         END                                                            90829000
         ELSE                                                           90830000
         BEGIN                                                          90831000
              REL:=NDL(1);                                              90832000
              IF                                                        90833000
                   IF BOOLEAN(BIT1.CONSTANT) THEN                       90834000
                        BOOLEAN(REL)                                    90835000
                   ELSE                                                 90836000
                        REL GEQ IFEQL                                   90837000
              THEN                                                      90838000
                   BRANCH(REL,NDLLABEL)                                 90839000
              ELSE                                                      90840000
                   DISCARD(NDLLABEL);                                   90841000
         END;                                                           90842000
%                                                                       90843000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90844000
%                                                                       90845000
%        3 = COMPARE BYTES/BRANCH                                       90846000
%                                                                       90847000
         BEGIN                                                          90848000
              BYTE1:=NDLBYTE;                                           90849000
              BYTE2:=NDLBYTE;                                           90850000
              REL:=NDL(1);                                              90851000
              IF BYTE1=BYTE2 THEN                                       90852000
%                                                                       90853000
%             X REL X / "A" REL "A"                                     90854000
%                                                                       90855000
                   IF REL LSS IFEQL THEN                                90856000
                        DISCARD(NDLLABEL)                               90857000
                   ELSE                                                 90858000
                        BRANCH(UNC,NDLLABEL)                            90859000
              ELSE                                                      90860000
              IF BYTE1.TYPE=LITERAL AND BYTE2.TYPE=LITERAL THEN         90861000
%                                                                       90862000
%             "A" REL "B"                                               90863000
%                                                                       90864000
                   IF   BYTE1 EQL BYTE2 AND BOOLEAN(REL.[2:1]) OR       90865000
                        BYTE1 LSS BYTE2 AND BOOLEAN(REL.[1:1]) OR       90866000
                        BYTE1 GTR BYTE2 AND BOOLEAN(REL) THEN           90867000
                        BRANCH(UNC,NDLLABEL)                            90868000
                   ELSE                                                 90869000
                        DISCARD(NDLLABEL)                               90870000
              ELSE                                                      90871000
              IF BYTE1.TYPE= LITERAL OR BYTE2.TYPE=LITERAL THEN         90872000
%                                                                       90873000
%             "A" REL X / X REL "A"                                     90874000
%                                                                       90875000
              BEGIN                                                     90876000
                   IF BYTE2.TYPE=LITERAL THEN                           90877000
                   BEGIN                                                90878000
                        BYTE3:=BYTE2;                                   90879000
                        BYTE2:=BYTE1;                                   90880000
                        BYTE1:=BYTE3;                                   90881000
                        IF REL NEQ IFEQL AND REL NEQ IFNEQ THEN         90882000
                        REL.[1:2]:=3-REL.[1:2];                         90883000
                   END;                                                 90884000
%                                                                       90885000
%                  NOW ONLY "A" REL X                                   90886000
%                                                                       90887000
                   IF BYTE1.CONSTANT=255 THEN                           90888000
                   BEGIN                                                90889000
                        IF REL=IFLSS THEN REL:=0     ELSE               90890000
                        IF REL=IFLEQ THEN REL:=IFEQL ELSE               90891000
                        IF REL=IFGTR THEN REL:=IFNEQ ELSE               90892000
                        IF REL=IFGEQ THEN REL:=UNC;                     90893000
                   END                                                  90894000
                   ELSE                                                 90895000
                   IF BYTE1.CONSTANT=0 THEN                             90896000
                   BEGIN                                                90897000
                        IF REL=IFLSS THEN REL:=IFNEQ ELSE               90898000
                        IF REL=IFLEQ THEN REL:=UNC   ELSE               90899000
                        IF REL=IFGTR THEN REL:=0     ELSE               90900000
                        IF REL=IFGEQ THEN REL:=IFEQL;                   90901000
                   END;                                                 90902000
%                                                                       90903000
                   IF REL=0 THEN                                        90904000
                        DISCARD(NDLLABEL)                               90905000
                   ELSE                                                 90906000
%                                                                       90907000
                   IF REL=UNC THEN                                      90908000
                        BRANCH(UNC,NDLLABEL)                            90909000
                   ELSE                                                 90910000
%                                                                       90911000
                   BEGIN                                                90912000
                        ACQUIRE(BYTE2);                                 90913000
%                                                                       90914000
                        IF REL=IFEQL OR REL=IFNEQ THEN                  90915000
                        BEGIN                                           90916000
                             LEOC(NO,DCPADDRESS(BYTE2),BYTE1.CONSTANT); 90917000
                        END                                             90918000
                        ELSE                                            90919000
                        BEGIN                                           90920000
                             CLEARARITHMETIC;                           90921000
                             SUBC(NO,DCPADDRESS(BYTE2),BYTE1.CONSTANT); 90922000
                        END;                                            90923000
                        BRANCH(REL,NDLLABEL);                           90924000
                   END;                                                 90925000
              END                                                       90926000
              ELSE                                                      90927000
%                                                                       90928000
%             X REL Y                                                   90929000
%                                                                       90930000
              BEGIN                                                     90931000
                   ACQUIRE(BYTE1);                                      90932000
                   LOR (NO,DCPADDRESS(BYTE1),BYTE1:=X);                 90933000
                   ACQUIRE(BYTE2);                                      90934000
                   CLEARARITHMETIC;                                     90935000
                   SUB (BYTE1,DCPADDRESS(BYTE2),NO);                    90936000
                   BRANCH(REL,NDLLABEL);                                90937000
              END;                                                      90938000
         END;                                                           90939000
%                                                                       90940000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90941000
%                                                                       90942000
%        4 = UNCONDITIONAL BRANCH                                       90943000
%                                                                       90944000
         BRANCH(UNC,NDLLABEL);                                          90945000
%                                                                       90946000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90947000
%                                                                       90948000
%        5 = ASSIGN BIT VARIABLE:=BIT                                   90949000
%                                                                       90950000
         IF (BIT1:=NDLBIT)=(BIT2:=NDLBIT) OR BIT1.TYPE=LITERAL THEN     90951000
         ELSE                                                           90952000
         BEGIN                                                          90953000
              IF BIT2.TYPE=LITERAL THEN                                 90954000
              BEGIN                                                     90955000
                   ACQUIRE(BIT1);                                       90956000
                   IF BOOLEAN(BIT2.CONSTANT) THEN                       90957000
                        LORC(SAME,DCPADDRESS(BIT1),BIT1.CONSTANT)       90958000
                   ELSE                                                 90959000
                        LANC(SAME,DCPADDRESS(BIT1),255-BIT1.CONSTANT);  90960000
              END                                                       90961000
              ELSE                                                      90962000
              BEGIN                                                     90963000
                   ACQUIRE(BIT2);                                       90964000
                   IF REGISTERCONFLICT(BIT1,BIT2) THEN                  90965000
                   BEGIN                                                90966000
                        LOR (NO,DCPADDRESS(BIT2),X);                    90967000
                        BIT2:=X&(BIT2.CONSTANT) CONSTANT;               90968000
                   END;                                                 90969000
                   ACQUIRE(BIT1);                                       90970000
                   LANC(NO,DCPADDRESS(BIT2),BIT2.CONSTANT);             90971000
                   GOTO(NONZERO,SELF+3);                                90972000
                   LANC(SAME,DCPADDRESS(BIT1),255-BIT1.CONSTANT);       90973000
                   GOTO(UNC,SELF+2);                                    90974000
                   LORC(SAME,DCPADDRESS(BIT1),BIT1.CONSTANT);           90975000
              END;                                                      90976000
              UPDATE(BIT1);                                             90977000
         END;                                                           90978000
%                                                                       90979000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90980000
%                                                                       90981000
%        6 = ASSIGN BYTE VARIABLE:=BYTE                                 90982000
%                                                                       90983000
         IF (BYTE1:=NDLBYTE)=(BYTE2:=NDLBYTE) OR                        90984000
              BYTE1.TYPE= LITERAL THEN                                  90985000
         ELSE                                                           90986000
         BEGIN                                                          90987000
              IF BYTE2.TYPE=LITERAL THEN                                90988000
              BEGIN                                                     90989000
                   ACQUIRE(BYTE1);                                      90990000
                   LORB(NO,BYTE2.CONSTANT,DCPADDRESS(BYTE1));           90991000
              END                                                       90992000
              ELSE                                                      90993000
              BEGIN                                                     90994000
                   ACQUIRE(BYTE2);                                      90995000
                   IF REGISTERCONFLICT(BYTE1,BYTE2) THEN                90996000
                   BEGIN                                                90997000
                        LOR (NO,DCPADDRESS(BYTE2),BYTE2:=X);            90998000
                   END;                                                 90999000
                   ACQUIRE(BYTE1);                                      91000000
                   LOR (NO,DCPADDRESS(BYTE2),DCPADDRESS(BYTE1));        91001000
              END;                                                      91002000
              UPDATE(BYTE1);                                            91003000
         END;                                                           91004000
%                                                                       91005000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91006000
%                                                                       91007000
%        7 = ASSIGN BYTE VARIABLE:=BYTE+BYTE                            91008000
%                                                                       91009000
         BEGIN                                                          91010000
              BYTE1:=NDLBYTE;                                           91011000
              BYTE2:=NDLBYTE;                                           91012000
              BYTE3:=NDLBYTE;                                           91013000
              IF BYTE1.TYPE=LITERAL THEN                                91014000
              ELSE                                                      91015000
              IF BYTE2.TYPE=LITERAL AND BYTE3.TYPE=LITERAL THEN         91016000
              BEGIN                                                     91017000
                   ACQUIRE(BYTE1);                                      91018000
                   LORB(NO,(BYTE2.CONSTANT+BYTE3.CONSTANT).[7:8],       91019000
                        DCPADDRESS(BYTE1));                             91020000
                   UPDATE(BYTE1);                                       91021000
              END                                                       91022000
              ELSE                                                      91023000
              IF BYTE2.TYPE=LITERAL OR BYTE3.TYPE=LITERAL THEN          91024000
              BEGIN                                                     91025000
                   IF BYTE2.TYPE=LITERAL THEN                           91026000
                   BEGIN                                                91027000
                        ACQUIRE(BYTE3);                                 91028000
                        CLEARARITHMETIC;                                91029000
                        ADDC(X,DCPADDRESS(BYTE3),BYTE2.CONSTANT);       91030000
                   END                                                  91031000
                   ELSE                                                 91032000
                   BEGIN                                                91033000
                        ACQUIRE(BYTE2);                                 91034000
                        CLEARARITHMETIC;                                91035000
                        ADDC(X,DCPADDRESS(BYTE2),BYTE3.CONSTANT);       91036000
                   END;                                                 91037000
                   ACQUIRE(BYTE1);                                      91038000
                   LOR (NO,X,DCPADDRESS(BYTE1));                        91039000
                   UPDATE(BYTE1);                                       91040000
              END                                                       91041000
              ELSE                                                      91042000
%                                                                       91043000
              BEGIN                                                     91044000
                   ACQUIRE(BYTE2);                                      91045000
                   LOR (NO,DCPADDRESS(BYTE2),X);                        91046000
                   ACQUIRE(BYTE3);                                      91047000
                   CLEARARITHMETIC;                                     91048000
                   ADD (X,DCPADDRESS(BYTE3),X);                         91049000
                   ACQUIRE(BYTE1);                                      91050000
                   LOR (NO,X,DCPADDRESS(BYTE1));                        91051000
                   UPDATE(BYTE1);                                       91052000
              END;                                                      91053000
         END;                                                           91054000
%                                                                       91055000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91056000
%                                                                       91057000
%        8 = ASSIGN BYTE VARIABLE:=BYTE-BYTE                            91058000
%                                                                       91059000
         BEGIN                                                          91060000
              BYTE1:=NDLBYTE;                                           91061000
              BYTE2:=NDLBYTE;                                           91062000
              BYTE3:=NDLBYTE;                                           91063000
              IF BYTE1.TYPE=LITERAL THEN                                91064000
              ELSE                                                      91065000
              IF BYTE2.TYPE=LITERAL AND BYTE3.TYPE=LITERAL THEN         91066000
              BEGIN                                                     91067000
                   ACQUIRE(BYTE1);                                      91068000
                   LORB(NO,(256+BYTE2.CONSTANT-BYTE3.CONSTANT).[7:8],   91069000
                        DCPADDRESS(BYTE1));                             91070000
                   UPDATE(BYTE1);                                       91071000
              END                                                       91072000
              ELSE                                                      91073000
              IF BYTE2.TYPE=LITERAL THEN                                91074000
              BEGIN                                                     91075000
                   ACQUIRE(BYTE3);                                      91076000
                   CLEARARITHMETIC;                                     91077000
                   SUBC(X,DCPADDRESS(BYTE3),BYTE2.CONSTANT);            91078000
                   ACQUIRE(BYTE1);                                      91079000
                   LOR (NO,X,DCPADDRESS(BYTE1));                        91080000
                   UPDATE(BYTE1);                                       91081000
              END                                                       91082000
              ELSE                                                      91083000
              IF BYTE3.TYPE=LITERAL THEN                                91084000
              BEGIN                                                     91085000
                   ACQUIRE(BYTE2);                                      91086000
                   LOR (NO,DCPADDRESS(BYTE2),X);                        91087000
                   ACQUIRE(BYTE1);                                      91088000
                   CLEARARITHMETIC;                                     91089000
                   SUBB(X,BYTE3.CONSTANT,DCPADDRESS(BYTE1));            91090000
                   UPDATE(BYTE1);                                       91091000
              END                                                       91092000
              ELSE                                                      91093000
              BEGIN                                                     91094000
                   ACQUIRE(BYTE2);                                      91095000
                   LOR (NO,DCPADDRESS(BYTE2),X);                        91096000
                   ACQUIRE(BYTE3);                                      91097000
                   IF REGISTERCONFLICT(BYTE3,BYTE1) OR BYTE3=BYTE1 THEN 91098000
                   BEGIN                                                91099000
                        CLEARARITHMETIC;                                91100000
                        SUB (X,DCPADDRESS(BYTE3),X);                    91101000
                        ACQUIRE(BYTE1);                                 91102000
                        LOR (NO,X,DCPADDRESS(BYTE1));                   91103000
                   END                                                  91104000
                   ELSE                                                 91105000
                   BEGIN                                                91106000
                        ACQUIRE(BYTE1);                                 91107000
                        CLEARARITHMETIC;                                91108000
                        SUB (X,DCPADDRESS(BYTE3),DCPADDRESS(BYTE1));    91109000
                   END;                                                 91110000
                   UPDATE(BYTE1);                                       91111000
              END;                                                      91112000
         END;                                                           91113000
%                                                                       91114000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91115000
%                                                                       91116000
%        9 = INITIATE RECEIVE                                           91117000
%                                                                       91118000
         BEGIN                                                          91119000
              IF (THEDELAY:=NDLTIME(INITIATERECEIVEDELAY)) NEQ NO THEN  91120000
              BEGIN                                                     91121000
                   CLEARREGISTERS;                                      91122000
                   IF THEDELAY=DYNAMIC THEN                             91123000
                        CALL(LOADINITIATERECEIVEDELAY)                  91124000
                   ELSE                                                 91125000
                   BEGIN                                                91126000
                        AWI (3,ACTIMER,THEDELAY);                       91127000
                        SLEEP;                                          91128000
                   END;                                                 91129000
                   CALL(WAITFORTIMER);                                  91130000
              END;                                                      91131000
              AWI (3,ACCOMMAND,AIINITIATERECEIVE);                      91132000
         END;                                                           91133000
%                                                                       91134000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91135000
%                                                                       91136000
%        10 = INITIATE TRANSMIT                                         91137000
%                                                                       91138000
         BEGIN                                                          91139000
              CLEARREGISTERS;                                           91140000
              AWI (3,ACTIMER,31);                                       91141000
              AWI (3,ACCOMMAND,AIINITIATETRANSMIT);                     91142000
              SLEEP;                                                    91143000
              CALL(WAITFORBYTEREQUEST);                                 91144000
              GOTO(UNC,MONITORLINE);                                    91145000
              IF (THEDELAY:=NDLTIME(INITIATETRANSMITDELAY))NEQ NO THEN  91146000
              BEGIN                                                     91147000
                   IF THEDELAY=DYNAMIC THEN                             91148000
                        CALL(LOADINITIATETRANSMITDELAY)                 91149000
                   ELSE                                                 91150000
                   BEGIN                                                91151000
                        AWI (3,ACTIMER,THEDELAY);                       91152000
                        SLEEP;                                          91153000
                   END;                                                 91154000
                   CALL(WAITFORTIMER);                                  91155000
              END;                                                      91156000
         END;                                                           91157000
%                                                                       91158000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91159000
%                                                                       91160000
%        11 = INITIALIZE BCC                                            91161000
%                                                                       91162000
         BEGIN                                                          91163000
              LORB(NO,                                                  91164000
                   (IF LONGITUDINAL=EVEN THEN 0                         91165000
                   ELSE 2 POWER BITSPERBYTE -1),BCC);                   91166000
         END;                                                           91167000
%                                                                       91168000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91169000
%                                                                       91170000
%        12 = INITIALIZE TEXT                                           91171000
%                                                                       91172000
         BEGIN                                                          91173000
              CLEARREGISTERS;                                           91174000
         CALL(INITIALIZETEXT);                                          91175000
         END;                                                           91176000
%                                                                       91177000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91178000
%                                                                       91179000
%        13 = FINISH TRANSMIT                                           91180000
%                                                                       91181000
         BEGIN                                                          91182000
              CLEARREGISTERS;                                           91183000
              IF (THEDELAY:=NDLTIME(NO))=NO THEN                        91184000
              ELSE                                                      91185000
              BEGIN                                                     91186000
                   AWI(3,ACTIMER,THEDELAY);                             91187000
                   SLEEP;                                               91188000
                   CALL(WAITFORTIMER);                                  91189000
              END;                                                      91190000
              AWI(3,ACCONTROL,AIFINISHTRANSMIT);                        91191000
              SLEEP;                                                    91192000
         END;                                                           91193000
%                                                                       91194000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91195000
%                                                                       91196000
%        14 = FETCH                                                     91197000
%                                                                       91198000
         BEGIN                                                          91199000
              CLEARREGISTERS;                                           91200000
              CALL(LOADBYTE);                                           91201000
              BRANCH(UNC,NDLLABEL);                                     91202000
         END;                                                           91203000
%                                                                       91204000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91205000
%                                                                       91206000
%        15 = STORE                                                     91207000
%                                                                       91208000
         BEGIN                                                          91209000
              CLEARREGISTERS;                                           91210000
              THELABEL:=NDLLABEL;                                       91211000
              IF NDL(1) NEQ 0 THEN                                      91212000
              BEGIN                                                     91213000
                   CALL(STOREBYTE);                                     91214000
                   BRANCH(UNC,THELABEL);                                91215000
              END                                                       91216000
              ELSE                                                      91217000
              IF (I:=NDL(1)) GTR 0 THEN                                 91218000
              THRU I DO                                                 91219000
              BEGIN                                                     91220000
                   LORB(NO,NDL(1),CHARACTER);                           91221000
                   CALL(STOREBYTE);                                     91222000
                   BRANCH(UNC,THELABEL);                                91223000
              END;                                                      91224000
         END;                                                           91225000
%                                                                       91226000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91227000
%                                                                       91228000
%        16 = BCC:=BCC (EXCLUSIVE) OR BYTE                              91229000
%                                                                       91230000
         IF (BYTE1:=NDLBYTE).TYPE=LITERAL AND BYTE1.CONSTANT=0 THEN     91231000
         ELSE                                                           91232000
         BEGIN                                                          91233000
              LOR (NO,BCC,X);                                           91234000
              IF BYTE1.TYPE=LITERAL THEN                                91235000
                   LEOB(X,BYTE1.CONSTANT,BCC)                           91236000
              ELSE                                                      91237000
              BEGIN                                                     91238000
                   ACQUIRE(BYTE1);                                      91239000
                   LEO (X,DCPADDRESS(BYTE1),BCC);                       91240000
              END;                                                      91241000
         END;                                                           91242000
%                                                                       91243000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91244000
%                                                                       91245000
%        17 = TRANSMIT ITEM                                             91246000
%                                                                       91247000
         BEGIN                                                          91248000
%                                                                       91249000
         REAL                                                           91250000
              TRANSMITERRORSINDEX,                                      91251000
              LOOP;                                                     91252000
         DEFINE                                                         91253000
              TRANSMITERROR=                                            91254000
                   TRANSMITERRORS[REQUESTINDEX,TRANSMITERRORSINDEX]#;   91255000
              PROCEDURE TRANSMIT;                                       91256000
              BEGIN                                                     91257000
                   CLEARREGISTERS;                                      91258000
                   IF TRANSMITDELAY NEQ 0 THEN                          91259000
                   BEGIN                                                91260000
                        AWI(3,ACTIMER,TRANSMITDELAY);                   91261000
                        SLEEP;                                          91262000
                        CALL(WAITFORTIMER);                             91263000
                   END;                                                 91264000
                   CALL(TRANSMITBYTE);                                  91265000
                   CALL(WAITFORBYTEREQUEST);                            91266000
                   CALL(TRANSMITERROR);                                 91267000
              END;                                                      91268000
%                                                                       91269000
              TRANSMITERRORSINDEX:=NDL(1);                              91270000
              CASE NDL(1) OF                                            91271000
              BEGIN                                                     91272000
%                                                                       91273000
              THRU NDL(1) DO                                            91274000
              BEGIN                                                     91275000
                   LORB(NO,NDL(1),CHARACTER);                           91276000
                   TRANSMIT;                                            91277000
              END;                                                      91278000
%                                                                       91279000
              BEGIN                                                     91280000
                   CASE NDL(1) OF                                       91281000
                   BEGIN                                                91282000
                        LOOP:=(6-RECEIVEADDRESSLENGTH)&                 91283000
                              RECEIVEADDRESSLENGTH[15:2];               91284000
                        LOOP:=(3-TRANSMITADDRESSLENGTH)&                91285000
                              TRANSMITADDRESSLENGTH[15:2];              91286000
                   END;                                                 91287000
                   IF LOOP.[15:2]=0 THEN ELSE                           91288000
                   BEGIN                                                91289000
                        CLEARREGISTERS;                                 91290000
                        LORB(NO,LOOP.[7:8],CHARACTERADDRESS);           91291000
                        THRU LOOP.[15:2] DO                             91292000
                        BEGIN                                           91293000
                             CALL(LOADADDRESS);                         91294000
                             TRANSMIT;                                  91295000
                        END;                                            91296000
                   END;                                                 91297000
              END;                                                      91298000
%                                                                       91299000
              TRANSMIT;                                                 91300000
%                                                                       91301000
              BEGIN                                                     91302000
                   CLEARREGISTERS;                                      91303000
                   CALL(TRANSMITBCCBYTE);                               91304000
                   CALL(WAITFORBYTEREQUEST);                            91305000
                   CALL(TRANSMITERROR);                                 91306000
              END;                                                      91307000
%                                                                       91308000
              BEGIN                                                     91309000
                   CLEARREGISTERS;                                      91310000
              LOOP:=SELF;                                               91311000
                   CALL(LOADBYTE);                                      91312000
                   BRANCH(UNC,SELF+5+3|REAL(TRANSMITDELAY!0));          91313000
                   TRANSMIT;                                            91314000
                   BRANCH(UNC,LOOP);                                    91315000
              END;                                                      91316000
%                                                                       91317000
              BEGIN                                                     91318000
                   IF TRANSMITTRANSMISSIONLENGTH=0 THEN                 91319000
                   ELSE                                                 91320000
                   BEGIN                                                91321000
                        LORB(NO,3-TRANSMITTRANSMISSIONLENGTH,           91322000
                             CHARACTERADDRESS);                         91323000
                        CLEARREGISTERS;                                 91324000
                        THRU TRANSMITTRANSMISSIONLENGTH DO              91325000
                        BEGIN                                           91326000
                             CALL(LOADTRANSMISSIONNUMBER);              91327000
                             TRANSMIT;                                  91328000
                        END;                                            91329000
                   END;                                                 91330000
              END;                                                      91331000
%                                                                       91332000
              NOTYETIMPLEMENTED;                                        91333000
%                                                                       91334000
              BEGIN                                                     91335000
                   CLEARREGISTERS;                                      91336000
                   CALL(INITIALIZESEQUENCENUMBER);                      91337000
              LOOP:=SELF;                                               91338000
                   CALL(LOADSEQUENCENUMBER);                            91339000
                   TRANSMIT;                                            91340000
                   LANC(NO,CHARACTERADDRESS,7);                         91341000
                   GOTO(NONZERO,LOOP);                                  91342000
              END;                                                      91343000
              END;                                                      91344000
         END;                                                           91345000
%                                                                       91346000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  .  . 91347000
%                                                                       91348000
%        18 = RECEIVE ITEM                                              91349000
%                                                                       91350000
         BEGIN                                                          91351000
         REAL                                                           91352000
              TIMEOUT,                                                  91353000
              RECEIVEERRORSINDEX,                                       91354000
              ITEMLABEL;                                                91355000
         DEFINE                                                         91356000
              RECEIVEERROR=RECEIVEERRORS[REQUESTINDEX,                  91357000
                           RECEIVEERRORSINDEX]#;                        91358000
%                                                                       91359000
              PROCEDURE RECEIVE;                                        91360000
              BEGIN                                                     91361000
                   CLEARREGISTERS;                                      91362000
                   IF TIMEOUT = NO THEN                                 91363000
                        AWI (3,ACTIMER,31)                              91364000
                   ELSE                                                 91365000
                        IF TIMEOUT = DYNAMIC THEN                       91366000
                             CALL(LOADTIMEOUT)                          91367000
                        ELSE                                            91368000
                             AWI(3,ACTIMER,TIMEOUT);                    91369000
                   SLEEP;                                               91370000
                   IF LINECONTROLTYPE=CONTENTION THEN                   91371000
                        CALL(WAITINGFORCONTENTION);                     91372000
                   CALL(RECEIVEBYTE);                                   91373000
                   CALL(RECEIVEERROR);                                  91374000
              END;                                                      91375000
%                                                                       91376000
              TIMEOUT:=NDLTIME(NDLTIMEOUT);                             91377000
              RECEIVEERRORSINDEX:=NDL(1);                               91378000
              ITEMLABEL:=NDLLABEL;                                      91379000
              CASE NDL(1) OF                                            91380000
              BEGIN                                                     91381000
%                                                                       91382000
              THRU NDL(1) DO                                            91383000
              BEGIN                                                     91384000
                   RECEIVE;                                             91385000
                   LEOC(NO,CHARACTER,NDL(1));                           91386000
                   IF ITEMLABEL=NULLLABEL THEN                          91387000
                   BEGIN                                                91388000
                        BRANCH(IFEQL,SELF+2);                           91389000
                        CALL(ERRORS[FORMATERROR]);                      91390000
                   END                                                  91391000
                   ELSE                                                 91392000
                   BEGIN                                                91393000
                        BRANCH(IFEQL,SELF+3);                           91394000
                        CALL(ERRORS[FORMATERROR]);                      91395000
                        BRANCH(UNC,ITEMLABEL);                          91396000
                   END;                                                 91397000
              END;                                                      91398000
%                                                                       91399000
              BEGIN                                                     91400000
                   CASE NDL(1) OF                                       91401000
                   BEGIN                                                91402000
                        LOOP:=(6-RECEIVEADDRESSLENGTH)&                 91403000
                              RECEIVEADDRESSLENGTH[15:2];               91404000
                        LOOP:=(3-TRANSMITADDRESSLENGTH)&                91405000
                             TRANSMITADDRESSLENGTH[15:2];               91406000
                   END;                                                 91407000
                   IF LOOP.[15:2]=0 THEN ELSE                           91408000
                   BEGIN                                                91409000
                        CLEARREGISTERS;                                 91410000
                        LORB(NO,LOOP.[7:8],CHARACTERADDRESS);           91411000
                        THRU LOOP.[15:2] DO                             91412000
                        BEGIN                                           91413000
                             RECEIVE;                                   91414000
                             CALL(STOREADDRESS);                        91415000
                             BRANCH(UNC,ITEMLABEL);                     91416000
                        END;                                            91417000
                   END;                                                 91418000
              END;                                                      91419000
%                                                                       91420000
              BEGIN                                                     91421000
                   RECEIVE;                                             91422000
                   LOOP:=NO;                                            91423000
                   NDLACTIONLIST;                                       91424000
              END;                                                      91425000
%                                                                       91426000
              BEGIN                                                     91427000
                   CLEARREGISTERS;                                      91428000
                   IF TIMEOUT=NO THEN                                   91429000
                   ELSE                                                 91430000
                        IF TIMEOUT=DYNAMIC THEN                         91431000
                             CALL(LOADTIMEOUT)                          91432000
                        ELSE                                            91433000
                             AWI(3,ACTIMER,TIMEOUT);                    91434000
                   CALL(MONITORSYNCHRONOUSLINE);                        91435000
                   SLEEP;                                               91436000
                   CALL(RECEIVEBCCBYTE);                                91437000
                   GOTO(UNC,EDITSYNCHRONOUSLINE);                       91438000
                   CALL(RECEIVEERROR);                                  91439000
                   BRANCH(UNC,ITEMLABEL);                               91440000
              END;                                                      91441000
%                                                                       91442000
              BEGIN                                                     91443000
              LOOP:=SELF;                                               91444000
                   RECEIVE;                                             91445000
                   NDLACTIONLIST;                                       91446000
                   CALL(STOREBYTE);                                     91447000
                   BRANCH(UNC,ITEMLABEL);                               91448000
                   GOTO(UNC,LOOP);                                      91449000
              END;                                                      91450000
%                                                                       91451000
              BEGIN                                                     91452000
                   IF RECEIVETRANSMISSIONLENGTH=0 THEN                  91453000
                   ELSE                                                 91454000
                   BEGIN                                                91455000
                        LORB(NO,6-RECEIVETRANSMISSIONLENGTH,            91456000
                             CHARACTERADDRESS);                         91457000
                        CLEARREGISTERS;                                 91458000
                        THRU RECEIVETRANSMISSIONLENGTH DO               91459000
                        BEGIN                                           91460000
                             RECEIVE;                                   91461000
                             CALL(STORETRANSMISSIONNUMBER);             91462000
                             BRANCH(UNC,ITEMLABEL);                     91463000
                        END;                                            91464000
                   END;                                                 91465000
              END;                                                      91466000
%                                                                       91467000
              NOTYETIMPLEMENTED;                                        91468000
%                                                                       91469000
              NOTIMPLEMENTED;                                           91470000
%                                                                       91471000
              END;                                                      91472000
         END;                                                           91473000
%                                                                       91474000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91475000
%                                                                       91476000
%        19 = EXAMINE                                                   91477000
%                                                                       91478000
         BEGIN                                                          91479000
              REPLACE POINTER(EXAMINE) BY 0 FOR 256 WORDS;              91480000
              FIRST:=255;                                               91481000
              LAST:=0;                                                  91482000
              NUMBER:=NDL(1);                                           91483000
              BYTE1:=NDLBYTE;                                           91484000
              FOR LOOP:=0 STEP 1 UNTIL NUMBER DO                        91485000
              BEGIN                                                     91486000
                   BYTE2:=NDL(1);                                       91487000
                   EXAMINE[BYTE2]:=                                     91488000
                        IF (THELABEL:=NDLLABEL)=ABORTLABEL THEN         91489000
                        ABORTLOGIC ELSE IF THELABEL=NULLLABEL THEN 0    91490000
                        ELSE THELABEL;                                  91491000
                   IF BYTE2>LAST THEN                                   91492000
                        LAST:=BYTE2;                                    91493000
                   IF BYTE2<FIRST THEN                                  91494000
                        FIRST:=BYTE2;                                   91495000
              END;                                                      91496000
              ACQUIRE(BYTE1);                                           91497000
              IF FIRST=LAST THEN                                        91498000
              BEGIN                                                     91499000
                   LEOC(NO,DCPADDRESS(BYTE1),LAST);                     91500000
                   BRANCH(IFEQL,EXAMINE[LAST]);                         91501000
              END                                                       91502000
              ELSE                                                      91503000
              BEGIN                                                     91504000
                   LOR (NO,DCPADDRESS(BYTE1),X);                        91505000
                   IF FIRST!0 THEN                                      91506000
                   BEGIN                                                91507000
                        SUBB(X,FIRST,X);                                91508000
                        BRANCH(IFLSS,SELF+LAST-FIRST+3+REAL(LAST!255)|2)91509000
                   END;                                                 91510000
                   IF LAST!255 THEN                                     91511000
                   BEGIN                                                91512000
                        SUBB(X,LAST,NO);                                91513000
                        BRANCH(IFGTR,SELF+LAST-FIRST+3);                91514000
                   END;                                                 91515000
                   GOX (UNC,SELF+1);                                    91516000
                   FOR LOOP:=FIRST STEP 1 UNTIL LAST DO                 91517000
                        IF (THELABEL:=EXAMINE[LOOP])=0 THEN             91518000
                             BRANCH(UNC,SELF+LAST-LOOP+1)               91519000
                        ELSE                                            91520000
                             BRANCH(UNC,THELABEL);                      91521000
              END;                                                      91522000
         END;                                                           91523000
%                                                                       91524000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91525000
%                                                                       91526000
%        20 = TERMINATE                                                 91527000
%                                                                       91528000
         BEGIN                                                          91529000
              CLEARREGISTERS;                                           91530000
              CASE NDL(1) OF                                            91531000
              BEGIN                                                     91532000
%                                                                       91533000
              NOTIMPLEMENTED;                                           91534000
%                                                                       91535000
              BEGIN                                                     91536000
                   IF IO=INPUT THEN                                     91537000
                        CALL(TERMINATENORMALINPUT)                      91538000
                   ELSE                                                 91539000
                        CALL(TERMINATENORMALOUTPUT);                    91540000
                   IF LINECONTROLTYPE=CONTENTION THEN                   91541000
                        GOTO(UNC,INITIATECONTENTIONLINE)                91542000
                   ELSE                                                 91543000
                        IF LINECONTROLTYPE=POLLED THEN                  91544000
                             GOTO(UNC,INITIATEPOLLEDLINE)               91545000
                        ELSE                                            91546000
                             GOTO(UNC,IDLELINE);                        91547000
              END;                                                      91548000
%                                                                       91549000
              BEGIN                                                     91550000
                   IF IO=INPUT THEN                                     91551000
                        CALL(TERMINATEERRORINPUT)                       91552000
                   ELSE                                                 91553000
                        CALL(TERMINATEERROROUTPUT);                     91554000
                   IF LINECONTROLTYPE = POLLED THEN                     91555000
                        GOTO(UNC,INITIATEPOLLEDLINE)                    91556000
                   ELSE                                                 91557000
                        GOTO(UNC,IDLELINE);                             91558000
              END;                                                      91559000
%                                                                       91560000
              NOTYETIMPLEMENTED;                                        91561000
%                                                                       91562000
              IF IO = OUTPUT THEN                                       91563000
                   CALL(TERMINATEENABLEINPUT)                           91564000
              ELSE                                                      91565000
                   NOTIMPLEMENTED;                                      91566000
%                                                                       91567000
              IF IO=INPUT THEN                                          91568000
              BEGIN                                                     91569000
                   CALL(TERMINATENOINPUT);                              91570000
                   IF LINECONTROLTYPE=CONTENTION THEN                   91571000
                        GOTO(UNC,INITIATECONTENTIONLINE)                91572000
                   ELSE                                                 91573000
                        IF LINECONTROLTYPE=POLLED THEN                  91574000
                             GOTO(UNC,INITIATEPOLLEDLINE)               91575000
                        ELSE                                            91576000
                             GOTO(UNC,IDLELINE);                        91577000
              END                                                       91578000
              ELSE                                                      91579000
                   NOTIMPLEMENTED;                                      91580000
%                                                                       91581000
              BEGIN                                                     91582000
                   IF IO=INPUT THEN                                     91583000
                        CALL(TERMINATEREQUESTINPUT)                     91584000
                   ELSE                                                 91585000
                        CALL(TERMINATEREQUESTOUTPUT);                   91586000
                   IF LINECONTROLTYPE=CONTENTION THEN                   91587000
                        GOTO(UNC,INITIATECONTENTIONLINE)                91588000
                   ELSE                                                 91589000
                        IF LINECONTROLTYPE=POLLED THEN                  91590000
                             GOTO(UNC,INITIATEPOLLEDLINE)               91591000
                        ELSE                                            91592000
                             GOTO(UNC,IDLELINE);                        91593000
              END;                                                      91594000
%                                                                       91595000
              END;                                                      91596000
         END OF TERMINATE;                                              91597000
%                                                                       91598000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91599000
%                                                                       91600000
%        21 = DELAY                                                     91601000
%                                                                       91602000
         BEGIN                                                          91603000
              CLEARREGISTERS;                                           91604000
              AWI (3,ACTIMER,NDLTIME(31));                              91605000
              SLEEP;                                                    91606000
              CALL(WAITFORTIMER);                                       91607000
         END;                                                           91608000
%                                                                       91609000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91610000
%                                                                       91611000
%        22 = NOTUSED                                                   91612000
%                                                                       91613000
         BEGIN                                                          91614000
         END;                                                           91615000
%                                                                       91616000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91617000
%                                                                       91618000
%        23 = BREAK                                                     91619000
%                                                                       91620000
         BEGIN                                                          91621000
              INTEGER HOLD,PAUSE;                                       91622000
              CLEARREGISTERS;                                           91623000
              AWI (3,ACCOMMAND,64+32+16);                               91624000
              IF HOLD:=NDLTIME(NO)=NO THEN                              91625000
              BEGIN                                                     91626000
                   AWI (3,ACTIMER,31);                                  91627000
                   SLEEP;                                               91628000
                   LEOC(NO,AC,ACCONTROL);                               91629000
                   GOTO(IFNEQ,ABORTTRANSMIT);                           91630000
                   LEOC(NO,AI,64+32+16+15);                             91631000
                   GOTO(IFNEQ,ABORTTRANSMIT);                           91632000
              END                                                       91633000
              ELSE                                                      91634000
              BEGIN                                                     91635000
                   AWI (3,ACTIMER,HOLD);                                91636000
                   SLEEP;                                               91637000
                   CALL(WAITFORTIMER);                                  91638000
              END;                                                      91639000
              AWI (3,ACCOMMAND,AIINITIATERECEIVE);                      91640000
              IF PAUSE:=NDLTIME(NO)!NO THEN                             91641000
              BEGIN                                                     91642000
                   AWI (3,ACCOMMAND,PAUSE);                             91643000
                   SLEEP;                                               91644000
                   CALL(WAITFORTIMER);                                  91645000
              END;                                                      91646000
         END;                                                           91647000
%                                                                       91648000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91649000
%                                                                       91650000
%        24 = NOT USED                                                  91651000
%                                                                       91652000
         BEGIN                                                          91653000
         END;                                                           91654000
%                                                                       91655000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91656000
%                                                                       91657000
%        25 = NOT USED                                                  91658000
%                                                                       91659000
         BEGIN                                                          91660000
         END;                                                           91661000
%                                                                       91662000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91663000
%                                                                       91664000
%        26 = INCREMENT TRANSMISSION NUMBER                             91665000
%                                                                       91666000
         BEGIN                                                          91667000
              CLEARREGISTERS;                                           91668000
              IF IO=INPUT THEN                                          91669000
                   CALL(INCREMENTRECEIVENUMBER)                         91670000
              ELSE                                                      91671000
                   CALL(INCREMENTTRANSMITNUMBER);                       91672000
         END;                                                           91673000
%                                                                       91674000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . .91675000
%                                                                       91676000
%        27 = INITIALIZE TRANSMISSION NUMBER                            91677000
%                                                                       91678000
         NOTYETIMPLEMENTED;                                             91679000
%                                                                       91680000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91681000
%                                                                       91682000
%        28 = INCREMENT BLOCK NUMBER                                    91683000
%                                                                       91684000
         NOTYETIMPLEMENTED;                                             91685000
%                                                                       91686000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91687000
%                                                                       91688000
%        29 = INITIALIZE BLOCK NUMBER                                   91689000
%                                                                       91690000
         NOTYETIMPLEMENTED;                                             91691000
%                                                                       91692000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91693000
%                                                                       91694000
%        30 = INCREMENT SEQUENCE NUMBER                                 91695000
%                                                                       91696000
         BEGIN                                                          91697000
              CLEARREGISTERS;                                           91698000
              CALL(INCREMENTSEQUENCENUMBER);                            91699000
         END;                                                           91700000
%                                                                       91701000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91702000
%                                                                       91703000
%                                                                       91704000
         END;                                                           91705000
         BEGIN                                                          91706000
         INTEGER                                                        91707000
              INDEX,                                                    91708000
              ERRORLABEL;                                               91709000
         WHILE NDL(1) LSS 255 DO                                        91710000
%                                                                       91711000
         BEGIN                                                          91712000
              INDEX:=NDL(1);                                            91713000
              LABL(RECEIVEERRORS[REQUESTINDEX,INDEX]);                  91714000
              GOX (UNC,SELF+1);                                         91715000
              FOR I:=0 STEP 1 UNTIL RECEIVECONDITIONMAX DO              91716000
              IF (ERRORLABEL:=NDLLABEL)=NULLLABEL THEN                  91717000
                   IF I=0 THEN                                          91718000
                        GOTO(UNC,CONTROL)                               91719000
                   ELSE EXIT(0)                                         91720000
              ELSE IF ERRORLABEL=ABORTLABEL THEN                        91721000
                   GOTO(UNC,ABORTLOGIC)                                 91722000
                   ELSE GOTO(UNC,ERRORLABEL);                           91723000
         END;                                                           91724000
         WHILE NDL(1) LSS 255 DO                                        91725000
         BEGIN                                                          91726000
              INDEX:=NDL(1);                                            91727000
              LABL(TRANSMITERRORS[REQUESTINDEX,INDEX]);                 91728000
              GOX (UNC,SELF+1);                                         91729000
              FOR I:=0 STEP 1 UNTIL(TRANSMITCONDITIONMAX-               91730000
                   RECEIVECONDITIONMAX-1) DO                            91731000
              IF (ERRORLABEL:=NDLLABEL)=NULLLABEL THEN                  91732000
                   EXIT(0)                                              91733000
              ELSE IF ERRORLABEL=ABORTLABEL THEN                        91734000
                   GOTO(UNC,ABORTLOGIC)                                 91735000
                   ELSE GOTO(UNC,ERRORLABEL);                           91736000
         END;                                                           91737000
         END;                                                           91738000
         WRITESTARS;                                                    91739000
%                                                                       91740000
    END NDL REQUEST;                                                    91741000
%                                                                       91742000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91743000
%                                                                       91744000
    DEFINE                                                              91745000
         BEGINASSEMBLE =  DO BEGIN#,                                    91746000
         ENDASSEMBLE   =                                                91747000
              IF SECONDPASS THEN WRAPUP ELSE                            91748000
              SECONDINITIALIZE;                                         91749000
              FUNCTIONSETINDEX:=-1;                                     91750000
              END UNTIL NOT(SECONDPASS:=NOT SECONDPASS)#;               91751000
%                                                                       91752000
%                                                                       91753000
    PROCEDURE NDLINITIALIZE;                                            91754000
    BEGIN                                                               91755000
%                                                                       91756000
%   PROCEDURE RESPONSIBLE FOR INITIALIZING PARAMETERS NECESSARY FOR     91757000
%   GENERATING THE NDL REQUEST SETS IN THE DCP CODE FILE                91758000
%                                                                       91759000
         REAL R;                                                        91760000
%                                                                       91761000
         MANYTYPES:=                                                    91762000
         FUNCTIONSETINDEX:=                                             91763000
         MANYFUNCTIONSETS:=-1;                                          91764000
%                                                                       91765000
         NDLTABLEITEMS  :=ENFO[DCPLINK,4];                              91766000
%                                                                       91767000
         NIFINDEX:=DCPLINK+4;                                           91768000
         NIFWORD:=0;                                                    91769000
%                                                                       91770000
         FOR NDLTYPE:=1 STEP 1 UNTIL NDLTYPEMAX DO                      91771000
         BEGIN                                                          91772000
              IF (NIFWORD:=NIFWORD+1) MOD 30 = 0 THEN                   91773000
                   BEGIN   NIFINDEX:=NIFINDEX+1;                        91774000
                           NIFWORD:=0;             END;                 91775000
              R:=ENFO[NIFINDEX,NIFWORD];;                               91776000
%                                                                       91777000
              INCLUDE(                                                  91778000
                   (IF R.[7:8]=0 THEN NO ELSE R.[7:8]-1),               91779000
                   (IF R.[9:2]=2 THEN NO ELSE R.[9:2]),                 91780000
                   (IF R.[11:2]=2 THEN NO ELSE R.[11:2]),               91781000
                   0,R.[31:8],0,0);                                     91782000
         END;                                                           91783000
%                                                                       91784000
         REQUESTSET:= 1+3|(REQUESTSETMAX);                              91785000
         P:=POINTER(REQUESTSETS[1]);                                    91786000
%                                                                       91787000
         DO                                                             91788000
         BEGIN                                                          91789000
              NIFINDEX:=NIFINDEX+1;                                     91790000
              REPLACE P:P BY POINTER(ENFO[NIFINDEX,0])                  91791000
                   FOR MIN(30,REQUESTSET) WORDS;                        91792000
         END                                                            91793000
         UNTIL                                                          91794000
              (REQUESTSET:=REQUESTSET-30)LSS 1;                         91795000
%                                                                       91796000
    END OF NDL INITIALIZE;                                              91797000
%                                                                       91798000
%                                                                       91799000
    PROCEDURE NDLPROGRAM;                                               91800000
    BEGIN                                                               91801000
%                                                                       91802000
%   PROCESSES ALL NDL REQUEST SETS BY INITIALIZING REQUIRED PARAMETERS  91803000
%   FOR EACH REQUEST SET AND CALLING NDLREQUEST TO PROCESS EACH         91804000
%   REQUEST.                                                            91805000
%                                                                       91806000
         REAL R,S,T;                                                    91807000
%                                                                       91808000
         SOURCELIST:=TRUE;                                              91809000
%                                                                       91810000
         IF SECONDPASS THEN                                             91811000
         IMAGESPRESENT:=TRUE;                                           91812000
%                                                                       91813000
         REQUESTINDEX:=-1;                                              91814000
%                                                                       91815000
         REQUESTSET:=1;                                                 91816000
         WHILE REQUESTSET LSS (REQUESTSETMAX |3) DO                     91817000
         BEGIN                                                          91818000
              R:=REQUESTSETS[REQUESTSET:=REQUESTSET+1];                 91819000
              S:=REQUESTSETS[REQUESTSET:=REQUESTSET+1];                 91820000
              T:=REQUESTSETS[REQUESTSET:=REQUESTSET+1];                 91821000
              FUNCTIONSET(R.[33:2],R.[31:8]-1);                         91822000
%                                                                       91823000
              BITSPERBYTE:=                                             91824000
                   IF CODE = 0 THEN 7 ELSE 0;                           91825000
              INITIATETRANSMITDELAY:=                                   91826000
                   IF BOOLEAN(R.[38:1]) THEN DYNAMIC ELSE               91827000
                   IF T.[46:8] = 0 THEN NO ELSE T.[46:8];               91828000
              INITIATERECEIVEDELAY:=                                    91829000
                   IF BOOLEAN(R.[37:1]) THEN DYNAMIC ELSE               91830000
                   IF T.[38:8] = 0 THEN NO ELSE T.[38:8];               91831000
              SYNCHRONOUSTYPE:=R.[45:2];                                91832000
              RECEIVEADDRESSLENGTH:=R.[43:2];                           91833000
              TRANSMITADDRESSLENGTH:=R.[41:2];                          91834000
              TRANSMITTRANSMISSIONLENGTH:=                              91835000
              RECEIVETRANSMISSIONLENGTH:= R.[35:2];                     91836000
%                                                                       91837000
              NDLSPECIAL:=                                              91838000
                   IF BOOLEAN(T.[23:1]) THEN DYNAMIC ELSE S.[46:7];     91839000
              NDLSEPARATOR:=                                            91840000
                   IF BOOLEAN(T.[18:1]) THEN DYNAMIC ELSE S.[7:8];      91841000
              NDLWRU:=                                                  91842000
                   IF BOOLEAN(T.[19:1]) THEN DYNAMIC ELSE S.[15:8];     91843000
              NDLBACKSPACE:=                                            91844000
                   IF BOOLEAN(T.[21:1]) THEN DYNAMIC ELSE S.[31:8];     91845000
              NDLLINEDELETE:=                                           91846000
                   IF BOOLEAN(T.[20:1]) THEN DYNAMIC ELSE S.[23:8];     91847000
              NDLEND:=                                                  91848000
                   IF BOOLEAN(T.[22:1]) THEN DYNAMIC ELSE S.[39:8];     91849000
              NDLTIMEOUT:=                                              91850000
                   IF BOOLEAN(T.[17:1]) THEN DYNAMIC ELSE T.[15:8];     91851000
              IF NDLTIMEOUT=0 THEN NDLTIMEOUT:=NO;                      91852000
%                                                                       91853000
              IF (NIFINDEX:=R.[23:12])NEQ 0 THEN                        91854000
                   NDLREQUEST(OUTPUT);                                  91855000
              IF (NIFINDEX:=R.[11:12])NEQ 0 THEN                        91856000
                   NDLREQUEST(INPUT);                                   91857000
         END;                                                           91858000
%                                                                       91859000
         SOURCELIST:=FALSE;                                             91860000
         IF SECONDPASS THEN CLOSE(IMAGES,PURGE);                        91861000
         IF SECONDPASS THEN                                             91862000
         LISTING:=EVERLISTED;                                           91863000
%                                                                       91864000
    END OF NDL PROGRAM;                                                 91865000
%                                                                       91866000
% * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 91867000
%                                                                       91868000
%   THE STANDARD PORTIONS OF DCP LOGIC                                  91869000
%                                                                       91870000
    PROCEDURE MAKESYSTEMDISK;                                           91871000
%                                                                       91872000
%   GENERATES FIRST RECORD IN DCP CODE FILE USED TO PASS CERTAIN        91873000
%   INFORMATION DESCRIBING THE DATA COMMUNICATIONS SYSTEM TO BE         91874000
%   CONTROLED BY THE INCLUDED DCP CODE FILE.                            91875000
%                                                                       91876000
         IF SECONDPASS THEN                                             91877000
         BEGIN                                                          91878000
         REAL I,J,K;                                                    91879000
         POINTER P;                                                     91880000
         BOOLEAN PROCEDURE BUFFERED(LINK);                              91881000
         VALUE LINK;                                                    91882000
         REAL LINK;                                                     91883000
         BEGIN                                                          91884000
         BOOLEAN TEST;                                                  91885000
         REAL STATIONLINK;                                              91886000
         IF LINK:=ENFO[LINK,LSL]!0 THEN DO                              91887000
         BEGIN                                                          91888000
              STATIONLINK:=ENFO[LINK,STLK];                             91889000
              TEST:=(ENFO[STATIONLINK,TBUF]!0);                         91890000
         END UNTIL ((LINK:=ENFO[LINK,SNSL]=0) OR (BUFFERED:=TEST));     91891000
         END;                                                           91892000
              EMITWORD(LINEMAX+1);                                      91893000
              K:=ENFO[DCPLINK,16].[11:6];                               91894000
              P:=POINTER(DCPADD[K,0],8)-2;                              91895000
              THRU LINEMIN DO EMITWORD(0);                              91896000
              I:=LINEMIN-1;                                             91897000
              WHILE (I:=I+1) LEQ LINEMAX DO                             91898000
                   EMITWORD(IF J:=REAL(P :=P +2,2) = 0 THEN 0 ELSE      91899000
                             (ENFO[J,LNS] & 1[24:1] &                   91900000
                        REAL(ENFO[J,LMODEM]=0)[25:1]&                   91901000
                        REAL(BUFFERED(J))[26:1]));                      91902000
              THRU 298-LINEMAX DO EMITWORD(0);                          91903000
              WRITERECORD;                                              91904000
         END;                                                           91905000
    REAL PROCEDURE PRIORITY(LINEDELAY,STATIONCYCLE);                    91906000
         VALUE LINEDELAY,STATIONCYCLE;                                  91907000
         REAL LINEDELAY,STATIONCYCLE;                                   91908000
%    PRIORITY CALCULATES THE PRIORITY OF A STATION WITH POLLING FREQ.   91909000
%    STATIONCYCLE ON A LINE WITH A DELAY OF LINEDELAY.                  91910000
%    THE PARAMETERS ARE IN ADAPTER TIME FORM.                           91911000
         PRIORITY:= (IF LINEDELAY GEQ STATIONCYCLE THEN 1               91912000
                  ELSE IF LINEDELAY.[7:3] = STATIONCYCLE.[7:3] THEN     91913000
                         ENTIER(STATIONCYCLE.[4:5]/LINEDELAY.[4:5])     91914000
                  ELSE IF (LINEDELAY:=ENTIER((8*(STATIONCYCLE.[7:3]-    91915000
                         LINEDELAY.[7:3])|STATIONCYCLE.[4:5])/          91916000
                         LINEDELAY.[4:5])) GTR 255 THEN 255             91917000
                  ELSE LINEDELAY) - 1;                                  91918000
%                                                                       91919000
    REAL PROCEDURE DELAY(LINE);                                         91920000
         VALUE LINE;                                                    91921000
         REAL LINE;                                                     91922000
%   DELAY CALCULATES THE LINE DELAY FOR A LINE.                         91923000
%   THE PARAMETER LINE IS A POINTER TO THE LINE ENTRY IN UNFO.          91924000
         BEGIN                                                          91925000
         REAL PROCEDURE TIME(T,U);                                      91926000
              VALUE T,U;                                                91927000
              INTEGER T,U;                                              91928000
              CASE U OF                                                 91929000
              BEGIN                                                     91930000
              TIME:=T;                                                  91931000
              TIME:=T | 1000; % T | 10 * 3                              91932000
              TIME:=T | 1000000; % T | 10 * 6                           91933000
              TIME:=T | 60000000; % T | 60 | 10 * 6                     91934000
              END;                                                      91935000
         REAL MIN,SCRATCH;                                              91936000
         INTEGER PTR;                                                   91937000
         LABEL STOP;                                                    91938000
%                                                                       91939000
         PTR:=ENFO[LINE,LSL];                                           91940000
         MIN:=TIME(ENFO[PTR,SFREQ],ENFO[PTR,SFREQU]);                   91941000
         WHILE PTR:=ENFO[PTR,SNSL] ! 0 DO                               91942000
         BEGIN                                                          91943000
              IF SCRATCH:=TIME(ENFO[PTR,SFREQ],ENFO[PTR,SFREQU]) < MIN  91944000
                   THEN MIN:=SCRATCH;                                   91945000
         IF SCRATCH = 0 THEN GO TO STOP;                                91946000
         END;                                                           91947000
%                                                                       91948000
              IF MIN < 50000 THEN                                       91949000
STOP:              DELAY:=TIMECONV(50,1)                                91950000
              ELSE IF MIN < 1000000 THEN                                91951000
                   DELAY:=TIMECONV(MIN/1000,1)                          91952000
              ELSE IF MIN < 60000000 THEN                               91953000
                   DELAY:=TIMECONV(MIN/1000000,2)                       91954000
              ELSE DELAY:=TIMECONV(MIN/60000000,3);                     91955000
         END OF DELAY;                                                  91956000
%                                                                       91957000
    PROCEDURE EMITTABLES;                                               91958000
    BEGIN                                                               91959000
%                                                                       91960000
%   CONSTRUCTS THE CONTROL BLOCKAS WELL AS THE DIRECTORY OF TABLES,     91961000
%   LINKS ALL TABLES TOGETHER, AND EMITS THEM INTO THE DCP CODE FILE.   91962000
%                                                                       91963000
    REAL A,B,C,LINES,SP;                                                91964000
    BOOLEAN FIRSTNULL;                                                  91965000
    POINTER PL,PS;                                                      91966000
         LINES:=LINEMAX-LINEMIN;                                        91967000
         HEADING("LINE VECTOR");                                        91968000
         LINEVECTOR:=SELF.[14:14]-LINEMIN;                              91969000
         FOR A:=0 STEP 1 UNTIL LINES DO                                 91970000
              EMITWORD(LINETABL[LINEVEC[A],0]);                         91971000
         HEADING("LINE TABLES");                                        91972000
         FOR A:=0 STEP 1 UNTIL LINES DO                                 91973000
         BEGIN                                                          91974000
              B:=LINEVEC[A].[31:8];                                     91975000
              LINETABL[A,0].[13:14]:=SELF.[14:14];                      91976000
              PL:=POINTER(LINETABL[A,0],8);                             91977000
              IF B!0 OR (B=0 AND NOT FIRSTNULL) THEN                    91978000
              BEGIN                                                     91979000
                   FOR C:=1 STEP 1 UNTIL LINETABLESIZE DO               91980000
                   BEGIN                                                91981000
                        EMITHALF(REAL(PL+6|C,3));                       91982000
                        EMITHALF(REAL(PL+3+6|C,3));                     91983000
                   END;                                                 91984000
                   IF B=0 THEN                                          91985000
                        FIRSTNULL:=TRUE                                 91986000
                   ELSE                                                 91987000
                   FOR C:=1 STEP 1 UNTIL B DO                           91988000
                   BEGIN                                                91989000
                        PS:=POINTER(STATIONTABL[(SP:=SP+1),*],8);       91990000
                        EMITHALF(REAL(PS,3));                           91991000
                        EMITHALF(REAL(PS+3,3));                         91992000
                   END;                                                 91993000
              END;                                                      91994000
         END;                                                           91995000
         HEADING("STATION TABLES");                                     91996000
         FOR A:=1 STEP 1 UNTIL STATIONMAX DO                            91997000
         BEGIN                                                          91998000
              STATIONTABL[A,0].[15:16]:=SELF.[14:14];                   91999000
              PS:=POINTER(STATIONTABL[A,0],8);                          92000000
              FOR B:=1 STEP 1 UNTIL STATIONTABLESIZE DO                 92001000
              BEGIN                                                     92002000
                   EMITHALF(REAL(PS+6|B,3));                            92003000
                   EMITHALF(REAL(PS+3+6|B,3));                          92004000
              END;                                                      92005000
         END;                                                           92006000
         HEADING("TERMINAL TABLES");                                    92007000
         TERMINALVECTOR:=SELF.[14:14];                                  92008000
         FOR A:=1 STEP 1 UNTIL TERMINALTABLESIZE DO                     92009000
              FOR B:=0 STEP 1 UNTIL TERMINALMAX-1 DO                    92010000
                   EMITWORD(TERMINALTABL[B,A]);                         92011000
         HEADING("CONTROL BLOCK");                                      92012000
         CONTROLBLOCK:=SELF.[14:14]-LINEMIN;                            92013000
         FOR A:=0 STEP 1 UNTIL LINES DO                                 92014000
             EMITWORD(CONTROL.[15:16]);                                 92015000
         FOR A:=0 STEP 1 UNTIL LINES DO                                 92016000
         BEGIN                                                          92017000
              EMITWORD(0);                                              92018000
              EMITWORD(0);                                              92019000
              EMITWORD(0);                                              92020000
         END;                                                           92021000
         EMITWORD(0);                                                   92022000
         EMITWORD(TERMINALVECTOR);                                      92023000
         EMITWORD(LINEVECTOR);                                          92024000
         EMITWORD(CONTROLBLOCK);                                        92025000
    END OF EMITTABLES;                                                  92026000
%                                                                       92027000
    PROCEDURE MAKETABLES;                                               92028000
    BEGIN                                                               92029000
%                                                                       92030000
%   CREATES CERTAIN TABLES DESCRIBING THE DATA COMMUNICATIONS SYSTEM    92031000
%   TO THE DCP. THESE INCLUDE THE LINE VECTOR, STATION TABLES, AND      92032000
%   TERMINAL TABLES.                                                    92033000
%                                                                       92034000
    INTEGER ITA,LDLY,C,TIX,IU,IV,IW,JA,JB,JC,JD,NST,TNS,ILT,IST,        92035000
         LN,TLT,INULL;                                                  92036000
    BOOLEAN BNULL;                                                      92037000
    LABEL AWAY,EXIT;                                                    92038000
    POINTER PT;                                                         92039000
    DEFINE                                                              92040000
         TT[TT1]        = TERMINALTABL[TIX,TT1]#,                       92041000
         LT[LT1]        = LINETABL[ILT,LT1]#,                           92042000
         ST[ST1]        = STATIONTABL[IST,ST1]#;                        92043000
    IF NOT SECONDPASS THEN                                              92044000
    BEGIN                                                               92045000
         IF DCPLINK = 0 THEN GO EXIT;                                   92046000
         LN := NST := -1;                                               92047000
         IST := 1;                                                      92048000
         IU := ENFO[DCPLINK,16].[11:6];                                 92049000
         PT  := POINTER(DCPADD[IU,0],8);                                92050000
         LN := LINEMIN - 1;                                             92051000
         WHILE LN := LN + 1 LEQ LINEMAX DO                              92052000
         BEGIN                                                          92053000
              IF IV:=REAL(PT,2)=0 THEN                                  92054000
              IF BNULL THEN                                             92055000
              BEGIN                                                     92056000
                   LINEVEC[LN] := INULL;  GO AWAY;                      92057000
              END                                                       92058000
              ELSE                                                      92059000
              BEGIN                                                     92060000
                   INULL := ILT;                                        92061000
                   LINEVEC[LN] := INULL;                                92062000
                   BNULL := TRUE;                                       92063000
                   GO AWAY;                                             92064000
              END;                                                      92065000
              LINEVEC[LN] := ILT & ENFO[IV,LNS][31:8] ;                 92066000
              LT[0]:=0&(IW:=ENFO[IV,LTYP])[31:8]&                       92067000
                       ENFO[IV,LMODE][23:8];                            92068000
              LT[1]:=0&(REAL(NOT(BOOLEAN(IW.[2:1])                      92069000
                   OR BOOLEAN(IW.[6:1]))))[23:1]&                       92070000
                       (IW:=ENFO[IV,LNS]-1)[31:8]&                      92071000
                       (LDLY:=DELAY(IV))[15:8];                         92072000
              ITA := REAL(POINTER(ADSET,8) + ENFO[IV,LADTYPE],1);       92073000
                   IF (JA:=ENFO[IV,LMODEM]) NEQ 0 THEN                  92074000
                   IF ENFO[IV,LNS] NEQ 0 THEN                           92075000
                   BEGIN                                                92076000
                        JA:=ENFO[JA,MINFO];                             92077000
                        JA:=MAX(MODEMSUM[JA].[46:8],                    92078000
                         MODEMSUM[JA].[38:8]);                          92079000
                        JB:=ENFO[IV,LSL];                               92080000
                        DO                                              92081000
                        BEGIN                                           92082000
                             JC:=ENFO[JB,STLK];                         92083000
                             JC:=ENFO[JC,TRT];                          92084000
                             JC:=REAL(POINTER(RTDELAY,8)+JC,1);         92085000
                             JD:=ENFO[JB,SMODEM];                       92086000
                             JD:=ENFO[JD,MINFO];                        92087000
                             JA:=MAX(JA,JC,MODEMSUM[JD].[46:8],         92088000
                                      MODEMSUM[JD].[38:8]);             92089000
                             JB:=ENFO[JB,SNSL];                         92090000
                        END UNTIL JB=0;                                 92091000
                   END                                                  92092000
                   ELSE                                                 92093000
                        JA:=0                                           92094000
                   ELSE                                                 92095000
                        JA:=0;                                          92096000
              LT[2] := 0 & ITA[46:7] & JA[39:8] & JA[31:8] ;            92097000
              IW  := ENFO[IV,LSL];                                      92098000
              THRU ENFO[IV,LNS] DO                                      92099000
              BEGIN                                                     92100000
                   REPLACE POINTER(TP) BY POINTER(ENFO[IW,0])           92101000
                        FOR 15 WORDS;                                   92102000
                   ITA := TP[STLK];                                     92103000
                   ST[0] := 0 & ENFO[ITA,TRT][31:8] &                   92104000
                   PRIORITY(LDLY,TIMECONV(TP[SFREQ],TP[SFREQU]))[39:8]; 92105000
                   ST[1] := 0 &                                         92106000
                               (TP[SSPECIAL]) [46:7] & (TP[SEND]) [39:8]92107000
                              & (TP[SBKSP]) [31:8] & (TP[SLDEL]) [23:8] 92108000
                              & (TP[SWRU]) [15:8] & (TP[SSEPAR])[7:8] ; 92109000
                   ST[4] := TP[SADD];                                   92110000
                   IST := IST + 1;                                      92111000
                   IW := TP[SNSL];                                      92112000
              END;                                                      92113000
AWAY:         ILT:=ILT+1;                                               92114000
              PT:=PT+2;                                                 92115000
         END;                                                           92116000
         FOR C:=0 STEP 1 UNTIL (NRT DIV 2)-1 DO                         92117000
            BEGIN                                                       92118000
                 IV:=APPT[C,6].[15:16];                                 92119000
                 TT[2]:=ENFO[IV,TSEPAR]&ENFO[IV,TSPECIAL][46:7]&        92120000
                        ENFO[IV,TEND][39:8]&ENFO[IV,TBKSP][31:8]&       92121000
                       ENFO[IV,TLD][23:8]&ENFO[IV,TWRU][15:8];          92122000
                   TT[1]:=ENFO[IV,TBUF]&ENFO[IV,TPG][23:8]&             92123000
                        ENFO[IV,TWID ][31:8]&(APPT[C,6].[46:7]-1)[46:7]&92124000
                          TIMECONV(ENFO[IV,TTIMOUT],                    92125000
                            ENFO[IV,TTIMOUTU])[39:8];                   92126000
                 TIX:=TIX+1;                                            92127000
             END;                                                       92128000
EXIT:END;                                                               92129000
    END OF MAKE TABLES;                                                 92130000
%                                                                       92131000
%                                                                       99000000
COMMENT#################################################################99001000
                   ASSEMBLER DRIVER                                     99002000
#######################################################################;99003000
%                                                                       99004000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99005000
    PROCEDURE BEGINPROGRAM;                                             99006000
    BEGIN                                                               99007000
         MAKESYSTEMDISK;                                                99008000
         LOADER;                                                        99009000
         DUMPER;                                                        99010000
    WRITESTARS;                                                         99011000
    HEADING("PERMANENT CODE");                                          99012000
    LOCATE(LM(0,0));                                                    99013000
    STARTOFAREA(INSTRUCTIONS,ENDOFCODE);                                99014000
         FAULTCODE;                                                     99015000
         CONTINUITY;                                                    99016000
         MESSAGECONTROL;                                                99017000
         DCPREQUESTS;                                                   99018000
         CONTROLMODEREQUESTS;                                           99019000
         NORMALMODEREQUESTS;                                            99020000
    END;                                                                99021000
%                                                                       99022000
    PROCEDURE ENDPROGRAM;                                               99023000
    BEGIN                                                               99024000
         HEADING("LINE LOGIC");                                         99025000
         POLLINGLOGIC;                                                  99026000
         CONTENTIONLOGIC;                                               99027000
         SELECTEDMESSAGECONTROL;                                        99028000
         TRANSFERTEXT;                                                  99029000
         TRANSMITRECEIVEBYTES;                                          99030000
    ENDOFAREA(ENDOFCODE);                                               99031000
    STARTOFAREA(DATA,ENDOFTABLES);                                      99032000
         MAKETABLES;                                                    99033000
         EMITTABLES;                                                    99034000
    ENDOFAREA(ENDOFTABLES);                                             99035000
    STARTOFAREA(SETDATA,ENDOFMEMORY);                                   99036000
         EMITWORD(0);                                                   99037000
         LOCATE(LM(LOCALWORDS,0));                                      99038000
    ENDOFAREA(ENDOFMEMORY);                                             99039000
    STARTOFAREA(FINISH,ENDOFLOAD);                                      99040000
    ENDOFAREA(ENDOFLOAD);                                               99041000
    END OF PROGRAM;                                                     99042000
%                                                                       99043000
% . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99044000
%                                                                       99045000
         NDLINITIALIZE;                                                 99046000
         BEGINASSEMBLE;                                                 99047000
         BEGINPROGRAM;                                                  99048000
         NDLPROGRAM;                                                    99049000
         ENDPROGRAM;                                                    99050000
         ENDASSEMBLE;                                                   99051000
    END;                                                                99052000
    END;                                                                99053000
END;                                                                    99054000
END.                                                                    99055000
END;END.        LAST CARD ON 0CRDING TAPE                               99999999
