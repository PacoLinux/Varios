/* MAP.PL1, PRI400>PBHIST, OS GROUP, 12/26/79
/* Match address range against symbols in the symbol map.
/* Copyright (C) 1979 by Prime Computer Inc., Wellesley, MA  02181

   dcl map entry (fixed bin, fixed bin, fixed bin, fixed bin, (64) char(8) var);

   call map (seg, startword, endword, map_size, names);

   07/20/79 Hampson Increased size of map; removed begin blocks.
   08/../78 Dosani Initial coding.  */

map:
        proc(sn, wn1, wn2, name_count, name) options (nocopy);
dcl sn fixed bin,                                /* seg_no  */
    wn1 fixed bin,                               /* first word of block  */
    wn2 fixed bin,                               /* first word of block  */
    name_count fixed bin,                        /* no of names matched  (output)  */
    name(64) char(8) varying;                    /* actual symbol names   */
dcl 1 newmap(4000) ext,
       2 sym_name char(8) varying,
       2 segno fixed bin(15),
       2 wordno fixed bin(15);
dcl count fixed bin external;                    /* length of newmap   */
dcl not_done bit(1);                             /* not done with processing this call */
dcl not_found bit(1);                            /* not found sn in map  */
dcl (i, j) fixed bin;                            /* loop variables  */
dcl (i1, i2) fixed bin;
dcl (l_wn1, l_wn2) fixed bin(31);
dcl length_newmap fixed bin;
dcl temp fixed bin;
dcl (sn_index, wn_index) fixed bin;              /* indexes in newmap to first
                                                    occurrences of sn and wn  */
dcl ioa$ entry options (variable);
        not_done = '1'b;
        not_found = '1'b;
        name_count = 1;
        length_newmap = count;

/* ALGORITHM    */

/* 1) find first sn_index : newmap(sn_index).sn = sn
   if not found: name_count = 0 ; return
   2) find first I1 : newmap(i1).wn >wn1
   if not found: name(1) = newmap(j) where j is the last element of newmap :
   newmap(j).sn = sn ; return;
   3) newmap(i1-1)is a member of the list, if (i1-1)>= sn_index
   4) all (j < I1-1) : newmap(j).wn = newmap(I1-1).wn are members of name_list
   5) all (j >= I1) : wn2 >= newmap(j).wn are members of name_list
   */


        l_wn1 = long(wn1);
        l_wn2 = long(wn2);
index1:
        do i = 1 to length_newmap while (not_found);


           if (newmap(i).segno = sn)
              then do;
              sn_index = i;


              not_found = '0'b;
              end;
           end;                                  /* end index1   */

        if (not_found)
           then do;
           name_count = 0;
           return;
           end;

/* find first map entry that includes the wn specified  */

        i1 = sn_index;
index2:
        do i = sn_index to length_newmap while (not_done & newmap(i).segno = sn);
           i1 = i;
           if long(newmap(i).wordno) > l_wn1
              then not_done = '0'b;
           end;                                  /* end index2   */
        if (not_done)
           then do;
           name(name_count) = newmap(i1).sym_name;
           call ioa$ (' %v%.', 100, name(name_count));
           return;
           end;


        if (i1 - 1 >= sn_index)
           then do;
           i2 = i1 - 1;
           do i = (i1 - 2) to sn_index by - 1 while (newmap(i).wordno = newmap(i1 - 1).
                    wordno);
              i2 = i;
              end;
           do i = i2 to (i1 - 1);
              name(name_count) = newmap(i).sym_name;
              name_count = name_count + 1;
              end;
           end;                                  /* end do block    */
        do i = i1 to length_newmap while ((newmap(i).segno = sn) & l_wn2 >= long(newmap(
                 i).wordno));
           name(name_count) = newmap(i).sym_name;
           name_count = name_count + 1;
           end;
        name_count = name_count - 1;
        do i = 1 to name_count;
           call ioa$ (' %v%$', 100, name(i));
           end;
        if name_count > 0
           then call ioa$ ('%.', 100);

/* int proc to convert fixed bin(16) unsigned to fixed bin(31) */

long:
           proc(a) options (shortcall) returns (fixed bin(31));
dcl a fixed bin,
    b fixed bin(31),
    word(2) fixed bin based;
           b = a;
           addr(b) -> word(1) = 0;
           return (b);
           end;                                  /* long   */

        end;                                     /* map */
