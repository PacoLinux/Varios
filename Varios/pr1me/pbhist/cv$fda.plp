/* CV$FDA.PL1, PRI400>R3S, OS GROUP, 03/10/80
/* Standard fs date-time-mod converted to format mm/dd/yy hhmm.t dow.
/* Copyright (C) 1979 by Prime Computer Inc., Wellesley, MA  02181

   03/10/80 Hantman Changed format not to use tenths of min.
   01/19/80 Hampson Leap yr correction must be modulo 7!
   05/17/78 BEH Added day-of-week logic.
   03/20/78 BEH Initial coding.  */

cv$fda:
        proc (fsdate,dayw, asc_date) options (nocopy);

dcl fsdate fixed bin(31),                        /* file system date */
    dayw fixed bin,                     /*day of week 0:6(output). */
    asc_date char(21);                           /* the converted representation */

dcl 1 fsd based,                                 /* this is what a fs date looks like */
       2 year bit(7),
       2 month bit(4),
       2 day bit(5),
       2 time fixed bin;

dcl (fyear, fmonth, fday) fixed bin,
    ioa$rs entry options (variable),
    (hrs, mins, quadsec, sec) fixed bin,
    days(0:6) char(3) static aligned init ('Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri',
         'Sat');

        fyear = addr (fsdate) -> fsd.year;
        fmonth = addr (fsdate) -> fsd.month;
        fday = addr (fsdate) -> fsd.day;

        hrs = divide (addr (fsdate) -> fsd.time, 900, 15);
        quadsec = mod (addr (fsdate) -> fsd.time, 900);
        mins = divide (quadsec, 15, 15);
        sec = mod (quadsec, 15) * 4;
        dayw = day_of_week (fmonth, fday, fyear);
        if dayw < 0
           then do;
           asc_date = '** invalid date **';
           return;
           end;

        call ioa$rs (asc_date, 21, quadsec, '%2zd/%2zd/%2zd:%2zd.%2zd.%2zd:%c%$', 100,
                 fmonth, fday, fyear, hrs, mins, sec, days(dayw), 3);

        return;

/* *************************************************************
   Internal proc to compute day of week given month, day, year.
   This algorithm operates on the Gregorian Calendar only, and is
   good for years from 1900 through 2099.  If the supplied year
   is in the range [0, 99] it is assumed to reside in the 20th century. */

day_of_week:
           proc (month, day, year) returns (fixed bin);

dcl (month, day, year) fixed bin;

dcl month_table(12) fixed bin static init (0, 31, 59, 90, 120, 151, 181, 212, 243, 273,
         304, 334),                              /* cumulative days */
    day_num fixed bin,
    temp31 fixed bin(31),
    tyear fixed bin(31),
    days_in_month(12) fixed bin static init (31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30,
         31);

           if year < 0 | year > 2099
              then return (-1);
           if month < 0 | month > 12
              then return (-1);
           if day < 0 | day > days_in_month(month)
              then return (-1);

           if year < 100
              then tyear = year;
           else do;
              if year < 1900
                 then return (-1);
              tyear = year - 1900;
              end;

           temp31 = mod (365 * tyear + divide (tyear, 4, 31) + month_table(month) + day,
                    7);                          /* n.b. must add day instead of (day-1) for fudge factor */
           day_num = temp31;                     /* temp31 used to cause mod expr to be
                                                    evaluated at precision 31 */

           if mod (tyear, 4) = 0
              then if tyear ^= 0 & month <= 2
                 then day_num = mod (day_num - 1, 7);

/* this leap year already counted in, but leap day not here yet */

           return (day_num);

           end;                                  /* day_of_week */
        end;                                     /* cv$fda */
