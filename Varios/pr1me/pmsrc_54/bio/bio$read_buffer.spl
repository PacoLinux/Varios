/* BIO$READ_BUFFER.SPL, PrintMaster, Jim Wilcoxson, October 16, 1987          */
/* Read a string from a buffered I/O file without any translation.            */
/* Copyright (C) 1985 J.E. Wilcoxson, J.L. Hostetler.  All rights reserved.   */
/******************************************************************************/

bio$read_buffer : procedure (fp, buffer, max_words) returns (bit);

%nolist;
%include '*>insert>gbl_ext.ins.spl';
%include '*>insert>based_vars.ins.spl';
%include '*>insert>bio.ins.spl';
%include '*>entry>bio$read_block.ins.spl';
%include '*>entry>err$.ins.spl';
%list;

dcl
   fp       ptr,                            /* pointer to file block (in) */
   buffer   char(*) var,                    /* buffer (out) */
   max_words bin,                            /* max words to read (in) */

   nbytes   bin,
   nwords   bin;


   buffer = '';
   if fp->bio$fb.chars_in_buffer = 0 then
      if ^bio$read_block (fp) then
         return (false);                    /* no more data in file */

   nbytes = max_words * 2;
   nwords = max_words;
   if fp->bio$fb.chars_in_buffer < nbytes then do;
      nbytes = fp->bio$fb.chars_in_buffer;
      nwords = divide (nbytes, 2, 15);
      end;

   /* can't have an odd number of bytes here! */

   if mod (nbytes, 2) ^= 0 then
      call err$ (err$coding_et, 'Attempt to read odd number of bytes', 0, 0, 0);
   buffer = substr (fp->bio$fb.next_char_in_buffer->bcnv, 1, nbytes);
   fp->bio$fb.next_char_in_buffer = addrel (fp->bio$fb.next_char_in_buffer,
                                            nwords);
   fp->bio$fb.chars_in_buffer = fp->bio$fb.chars_in_buffer - nbytes;
   return (true);

end bio$read_buffer;
