/* BIO$INIT_FILE.SPL, Spooler, Jim Wilcoxson, April 11, 1984                  */
/* Initialize a buffered I/O file.  File must already be open.                */
/* Copyright (C) 1984 J.E. Wilcoxson, J.L. Hostetler.  All rights reserved.   */
/******************************************************************************/

bio$init_file : procedure (unit, flags) returns (ptr);

%nolist;
%include '*>insert>gbl_ext.ins.spl';
%include '*>insert>bio.ins.spl';
%include '*>entry>err$.ins.spl';
%include '*>entry>primos.ins.spl';
%include '*>entry>bio$read_block.ins.spl';
%list;

dcl
   unit              bin,                   /* Primos file unit (in) */
   flags like bio$fb.flags;                 /* file I/O flags (in) */

dcl
   buffer_length     bin,                   /* bytes */
   buffer_size       bin,                   /* words */
   file_pos          bin(31),
   fp                ptr,
   rnw               bin,
   status            bin;

   /* insure file is open */

   call prwf$$ (k$rpos, unit, null, 0, file_pos, 0, status);
   if status ^= 0 then
      call err$ (err$primos_et, 'Reading file position', status, 0, 0);

   alloc_buf_length = 6144;                 /* 3K for now */
   allocate bio$fb set (fp);

   fp->bio$fb.unit = unit;
   fp->bio$fb.status = 0;
   fp->bio$fb.flags = flags;
   fp->bio$fb.buffer_size = divide (alloc_buf_length, 2, 15);
   fp->bio$fb.file_position = file_pos;
   fp->bio$fb.chars_in_buffer = 0;
   fp->bio$fb.next_char_in_buffer = addr(fp->bio$fb.io_buffer);
   fp->bio$fb.use_conv = true;
   if bio$read_block(fp) then
      ;
   return (fp);

end bio$init_file;
