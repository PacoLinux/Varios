/* MON$MASTER_CHECK.SPL, PrintMaster, Jim Wilcoxson, January 18, 1984         */
/* Connects to a higher priority master and sends it my system list.          */
/* Copyright (C) 1984 J.E. Wilcoxson, J.L. Hostetler.  All rights reserved.   */
/******************************************************************************/

mon$master_check : procedure (system_id) returns (bit);

%nolist;
%include '*>insert>gbl_ext.ins.spl';
%include '*>insert>mon.ins.spl';
%include '*>entry>comm$.ins.spl';
%include '*>entry>gp$.ins.spl';
%include '*>entry>primos.ins.spl';
%include '*>entry>mon$find_monitor.ins.spl';
%list;

dcl
   system_id         char(32) var;          /* target system id (in) */

dcl
   first_time        bit static init(true), /* for initialization */
   i                 bin,
   monp              ptr,                   /* monitor info pointer */
   cbp               ptr;                   /* connection block ptr */

dcl
   ml                bin static,            /* message length (bytes) */
   user_msgp         ptr static,
   user_msg like ms$master_check based (user_msgp);

   if first_time then do;
      alloc_system_entries = mon.system_list_size;
      allocate user_msg set (user_msgp);
      user_msg.system_list_size = mon.system_list_size;
      do i = 1 to mon.system_list_size;
         user_msg.system_list(i) = mon.system_list(i);
         end;
      ml = alloc_system_entries * 34 - ml$master_check;
      first_time = false;
      end;

   user_msgp->user_msg.time_logged_in = gp$ticks() - gbl.my_login_time;
   if comm$connect (system_id, cbp, false) then
      return (comm$send (mt$master_check, system_id, 'monitor',
                        user_msgp, ml));
   else
      return (false);

end mon$master_check;
