/* KWL$ADD_VALUE.SPL, PrintMaster, Jeff Hostetler, August 24, 1983            */
/* procedure to add a value to a keyword                                      */
/* March 6, 1984 ==> Values no longer in sorted order.                        */
/* Copyright (C) 1984 J.E. Wilcoxson, J.L. Hostetler.  All rights reserved.   */
/******************************************************************************/

kwl$add_value: proc (p_kw, value);

%nolist;
%include '*>insert>gbl.ins.spl';
%include '*>insert>kwl.ins.spl';
%include '*>entry>gp$.ins.spl';
%include '*>entry>primos.ins.spl';
%include '*>entry>err$.ins.spl';
%list;

   dcl
      p_kw           pointer,               /* kw to add value to (in) */
      value          char(*) var,           /* value to add (in) */

      saved_swi      like swi_switches,
      (pv0, pv)      pointer;

%page;

   pv0 = null;
   do pv = p_kw->kw_entry.pf_value repeat pv->value_entry.next while (pv ^= null);
      pv0 = pv;                             /* save previous (no back links) */
      end;

   if segno(p_kw) < '4000'b3 then do;       /* shared keyword list */
      call gp$lock_shared_area (saved_swi);
      pv = ar$alc (psv.shared_area, value_entry_size);
      call gp$unlock_shared_area (saved_swi);
      if pv = null then
         call err$ (err$primos_et, 'No room in shared area', e$room, 0, 0);
      end;
   else
      allocate value_entry set (pv);        /* create a new value */

   pv->value_entry.next  = null;            /* forward link       */
   pv->value_entry.value = value;

   if pv0 = null then                       /* if this is the first value */
      p_kw->kw_entry.pf_value = pv;         /*   link kw entry to us */
   else
      pv0->value_entry.next = pv;

   p_kw->kw_entry.nr_value = p_kw->kw_entry.nr_value + 1;

end kwl$add_value;
