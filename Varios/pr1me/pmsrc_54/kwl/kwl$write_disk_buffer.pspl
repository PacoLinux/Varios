/* KWL$WRITE_DISK_BUFFER.SPL, PrintMaster, Jeff Hostetler, November 23, 1983  */
/* Note:  The buffer passed is a varying length integer array, the first      */
/*          word tells the length of the array.  The value of the length      */
/*          word is that of the data portion only, (the count does not        */
/*          include the length word).                                         */
/*        Also, the file will be rewound and truncated before the buffer      */
/*          is written.                                                       */
/* Copyright (C) 1984 J.E. Wilcoxson, J.L. Hostetler.  All rights reserved.   */
/******************************************************************************/

kwl$write_disk_buffer: proc (unit, p_buf);

%nolist;
%include '*>insert>gbl.ins.spl';
%include '*>insert>kwl.ins.spl';
%include '*>entry>err$.ins.spl';
%include '*>entry>primos.ins.spl';
%list;

   dcl
      unit        bin,                      /* (in) */
      p_buf       ptr,                      /* (in) */

      p           ptr,
      save_wd     bin,
      empty_kwl(2) bin,
      fs          bin,
      bin15       bin based,
      (rnw, code) bin;

   call prwf$$ (k$trnc+k$prea, unit, null, 0, 0, rnw, code);
   if code ^= 0 then
      goto kwl_err;

   if p_buf ^= null then do;
      p = addrel(p_buf, -1);
      save_wd = p->bin15;
      p->bin15 = kwl$kwl_complete;

      /* NOTE: (wds in buffer + 1 for header + 1 kwl status) */

      call prwf$$ (k$writ, unit, p, (p_buf->bin15 + 2), 0, rnw, code);
      p->bin15 = save_wd;
      end;
   else do;
      empty_kwl(1) = kwl$kwl_complete;
      empty_kwl(2) = 0;
      call prwf$$ (k$writ, unit, addr(empty_kwl), 2, 0, rnw, code);
      end;
   if code ^= 0 then
      goto kwl_err;

   return;

kwl_err:
   call err$ (err$primos_et, 'Writing kw file', code, 0, 0);
   return;

   end kwl$write_disk_buffer;
