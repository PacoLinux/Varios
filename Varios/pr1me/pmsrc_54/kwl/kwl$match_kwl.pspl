/* KWL$MATCH_KWL.SPL, PrintMaster, Jeff Hostetler, September 12, 1983         */
/* Function to compare two kwl's, checking to see if all scheduling parameters*/
/* of the first kwl are contained withing the second kwl.                     */
/* NOTE:  This assumes that both kwl's are sorted (by kw then value).         */
/* Copyright (C) 1984 J.E. Wilcoxson, J.L. Hostetler.  All rights reserved.   */
/******************************************************************************/

kwl$match_kwl: proc (p_kwl1, p_kwl2) returns (bit);

%nolist;
%include '*>insert>gbl.ins.spl';
%include '*>insert>kwl.ins.spl';
%list;

   dcl
      (p_kwl1, p_kwl2)  pointer,       /* NOTE:  A null pointer is considered */
                                       /* to be an empty list, just as a list */
                                       /* with zero entries. */
      (p_kw1, p_kw2)    pointer,
      it_matches        bit(1);

   if p_kwl1 = null then               /* first let's handle trivial cases */
      return (true);                   /* empty list is subset of a list */

   if p_kwl2 = null then
      return (false);                  /* non-empty list isn't subset of empty list */

   /* Now, for the non-trivial cases */
   /* Now, for p_kwl1 to match p_kwl2, each scheduling (non-info) kw in */
   /* p_kwl1 must be in p_kwl2 and the value(s) must match. */

   p_kw1 = p_kwl1;
   p_kw2 = p_kwl2;

   do p_kw1 = p_kwl1 repeat p_kw1->kw_entry.next while (p_kw1 ^= null);
      if ^p_kw1->kw_entry.flags.info then do; /* only if scheduling parameter */
         it_matches = false;
         do p_kw2 = p_kwl2 repeat p_kw2->kw_entry.next
                           while (p_kw2 ^= null & ^it_matches);
            if p_kw1->kw_entry.kw = p_kw2->kw_entry.kw then
               if do_values_match (p_kw1, p_kw2) then
                  it_matches = true;
         end;
         if ^it_matches then
            return (false);
         end;
   end;

   return(true);
   /* logical end of kwl$match_kwl */

%page;
/* kwl$match_kwl.do_values_match, PrintMaster, Jeff Hostetler, August 16, 1983*/
/* Function to see if first value list is contained within second value list. */
/******************************************************************************/

   do_values_match: proc (p_kw1, p_kw2) returns (bit);

      dcl
         (p_kw1, p_kw2) pointer,
         (pv1, pv2)     pointer;

      /* Two value lists match when:                                          */
      /*    i) if either (or both) have no values, or                         */
      /*   ii) (when they both have values) if any value is an entry in both. */

      if (p_kw1->kw_entry.nr_value = 0)
       | (p_kw2->kw_entry.nr_value = 0) then /* case (i) */
         return (true);

      /* Case (ii):  Search both lists until we find one value in both. */
      /*             if we don't find one, then lists don't match. */

      do pv1 = p_kw1->kw_entry.pf_value repeat pv1->value_entry.next
                                        while (pv1 ^= null);
         do pv2 = p_kw2->kw_entry.pf_value repeat pv2->value_entry.next
                                           while (pv2 ^= null);
            if pv1->value_entry.value = pv2->value_entry.value then
               return (true);               /* we found a match... */
         end;
      end;

      return (false);
      end do_values_match;

   end kwl$match_kwl;
