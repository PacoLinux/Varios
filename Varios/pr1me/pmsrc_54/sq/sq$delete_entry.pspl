/* SQ$DELETE_ENTRY.SPL, PrintMaster, Jeff Hostetler, October 28, 1983         */
/* Procedure to delete an entry in a segment directory.                       */
/* Copyright (C) 1984 J.E. Wilcoxson, J.L. Hostetler.  All rights reserved.   */
/******************************************************************************/

sq$delete_entry: proc (sd_unit, entry);

%nolist;
%include '*>insert>gbl.ins.spl';
%include '*>entry>err$.ins.spl';
%include '*>entry>gp$.ins.spl';
%Include '*>entry>primos.ins.spl';
%list;

   dcl
      sd_unit  bin,
      entry    bin,

      sd_e_unit      bin,
      type           bin,
      (code, code1)  bin;

   call sgdr$$ (k$spos, sd_unit, entry, code1, code);
   if code = e$eof then                  /* entry doesn't exist */
      return;
   if code ^= 0 then
      call err$ (err$primos_et, 'Error Positioning Segment Directory', code,
                 0, 0);
   if code1 ^= sgdr$$file_present then   /* entry doesn't exist */
      return;

   call sgd$dl (sd_unit, code);             /* try a simple delete */
   if code = e$dnte then do;                /* entry is a non-empty sub-dir */
      call srch$$ (bin(k$rdwr+k$getu+k$iseg,15), sd_unit, 0, sd_e_unit,
                   type, code);             /* open the sub-dir */
      if code ^= 0 then
         goto err_;
      call dl$sgu (sd_e_unit, code);        /* delete all entries in sub-dir */
      if code ^= 0 then
         goto err_;
      call gp$close (sd_e_unit);
      call sgd$dl (sd_unit, code);          /* now delete the empty sub-dir */
      end;
   if code = 0 then
      return;

err_:
   call err$ (err$primos_et, 'Error Deleting Segment Directory Entry', code, 0, 0);
   return;

   end sq$delete_entry;
