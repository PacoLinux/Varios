/* SQ$POSITION.SPL, PrintMaster, Jeff Hostetler, November 3, 1983             */
/* Procedure to position segment dir to next {free, full} entry at or past    */
/* position given, (sgdr$$eof is returned if past end on full).               */
/* Copyright (C) 1984 J.E. Wilcoxson, J.L. Hostetler.  All rights reserved.   */
/******************************************************************************/

sq$position: proc (keys, sd_unit, entry) returns (bit);

%nolist;
%include '*>insert>gbl.ins.spl';
%include '*>entry>gp$.ins.spl';
%include '*>entry>err$.ins.spl';
%Include '*>entry>primos.ins.spl';
%list;

   dcl
      keys     bin,                         /* {full/free} */
      sd_unit  bin,
      entry    bin,                         /* (in/out) */

      rtime    bin(31),
      code     bin,
      (next_entry, last_entry)   bin;


   if keys ^= k$full &  keys ^= k$free then
      call err$ (err$coding_et, 'Bad key, must be K$FREE or K$FULL', 0, 0, 0);

   call sgdr$$ (keys, sd_unit, entry, next_entry, code);
   if code ^= 0 then
      call err$ (err$primos_et, 'Positioning Segment Directory', code, 0, 0);

   if (keys = k$free) & (next_entry = sgdr$$eof) then do; /* eof is ok when k$full */
      call sgdr$$ (k$gond, sd_unit, 0, last_entry, code); /* get nr entries */
      if entry <= last_entry
         then entry = last_entry + 1;
         else entry = entry + 1;
      call sgdr$$ (k$msiz, sd_unit, divide (entry+511,512,15)*512, 0, code); /* make sd larger */
      if code ^= 0 then
         call err$ (err$primos_et, 'Expanding Segment Directory', code, 0, 0);
      entry = entry - 1;
      return (true);
      end;
   else do;
      entry = next_entry;
      return (entry ^= sgdr$$eof);
      end;

   end sq$position;
