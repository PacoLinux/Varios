/* GP$TICKS.SPL, PrintMaster, Jim Wilcoxson, August 31, 1984                  */
/* Returns an ever-increasing real-time clock tick counter.                   */
/*                                                                            */
/* NOTE:  This algorithm assumes that GP$TICKS will be called at              */
/*        least once per day.                                                 */
/*                                                                            */
/* Copyright (C) 1984 J.E. Wilcoxson, J.L. Hostetler.  All rights reserved.   */
/******************************************************************************/

gp$ticks : procedure returns (bin(31));

%nolist;
%include '*>insert>gbl.ins.spl';
%include '*>entry>err$.ins.spl';
%include '*>entry>primos.ins.spl';
%list;

dcl
   first_time                 bit static init (true),
   prev_ticks_returned        bin(31) static,
   prev_ticks_since_midnight  bin(31) static,

   ticks_since_mid   bin(31),
   time_array(11)    bin,
   time_mins         bin defined (time_array(4)),
   time_secs         bin defined (time_array(5)),
   time_ticks        bin defined (time_array(6));


   call timdat (time_array, 11);
   ticks_since_mid = bin(time_ticks,31) +
        (bin(time_secs,31) + bin(time_mins,31)*60) * bin(psv.ticks_per_sec,31);

   /* on the first call, initialize prev_ticks counters */

   if first_time then do;
      prev_ticks_since_midnight = ticks_since_mid;
      prev_ticks_returned = ticks_since_mid;
      first_time = false;
      end;
   else
      prev_ticks_returned = prev_ticks_returned
                               + (ticks_since_mid - prev_ticks_since_midnight);

   /* now make allowances for crossing midnight */

   if ticks_since_mid < prev_ticks_since_midnight then
      prev_ticks_returned = prev_ticks_returned
                          + bin(psv.ticks_per_sec,31)*86400; /* ticks per day */
   prev_ticks_since_midnight = ticks_since_mid;
   return (prev_ticks_returned);

end gp$ticks;
