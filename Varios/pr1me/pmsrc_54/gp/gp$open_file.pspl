/* GP$OPEN_FILE.SPL, PrintMaster, Jeff Hostetler, December 16, 1983           */
/* Procedure to open a file in the current directory.                         */
/* If the file is in use, it will wait and try again (upto "time_limit").     */
/* (unless key "k$$no_wait" is given)                                         */
/*                                                                            */
/* Attach point is not changed.  Condition is signalled if error occurs.      */
/*                                                                            */
/* Copyright (C) 1984 J.E. Wilcoxson, J.L. Hostetler.  All rights reserved.   */
/******************************************************************************/

gp$open_file: proc (keys, file_name, unit);

%nolist;
%include '*>insert>gbl.ins.spl';
%Include '*>insert>based_vars.ins.spl';
%include '*>entry>err$.ins.spl';
%include '*>entry>primos.ins.spl';
%list;

   dcl
      keys           bin,
      keys_bt        bit(16) defined keys,
      file_name      char(*) var,
      unit           bin,                   /* (in/out) */

      k_bt           bit(16),
      no_wait        bit,
      cycles_waited  bin,
      code           bin,
      type           bin,
      path           char(128) var;


   k_bt = keys_bt;
   no_wait = substr(k_bt, no_wait_bit_nr, 1);
   substr(k_bt, no_wait_bit_nr, 1) = false; /* cannot be passed to SRCH$$ */
   call srch$$ (k_bt, addr(file_name)->bvs.chars, addr(file_name)->bvs.len,
                unit, type, code);

   do cycles_waited = 1 to psv.time_limit while (code = e$fius  &  ^no_wait);
      call sleep$ (one_cycle);
      call srch$$ (k_bt, addr(file_name)->bvs.chars, addr(file_name)->bvs.len,
                   unit, type, code);
      end;

   if code ^= 0 then
      call err$ (err$primos_et, 'Opening ' || file_name, code, 0, 0);

end gp$open_file;
