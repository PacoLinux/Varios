/* GP$READ_LINE.SPL, PrintMaster, Jim Wilcoxson, January 19, 1984             */
/* Reads a line from a (lined) file, returns false on eof.                    */
/* Copyright (C) 1984 J.E. Wilcoxson, J.L. Hostetler.  All rights reserved.   */
/******************************************************************************/

gp$read_line : procedure (unit, line) returns (bit);

%nolist;
%include '*>insert>gbl.ins.spl';
%include '*>insert>based_vars.ins.spl';
%include '*>insert>ecb.ins.spl';
%include '*>insert>stack_fr_hdr.ins.spl';
%include '*>entry>primos.ins.spl';
%include '*>entry>err$.ins.spl';
%list;

dcl
   unit        bin,                         /* file unit (in) */
   line        char(*) var;                 /* line to read into (out) */

dcl
   ap          ptr,                         /* pointer to my arglist */
   maxlen      bin,                         /* maximum length of line */
   status      bin,
   1  sdv based,                            /* scalar dope vector */
      2  type  bin,
      2  len   bin;

   /* this procedure plays games to find out how big the string "line"
      really is;  it assumes there is a 4th argument passed (compiler
      generated), which is the maximum string length */

   ap = stackptr();
   ap = addrel (ap, ap->sfh.owner_ptr->based_ecb.arg_list_disp+9);

   /* "ap" now points to the 4th argument pointer; this points to the
      dope vector for the 2nd argument (string); this procedure assumes
      that an odd length character varying string has a garbage byte
      after it (to word-align the next data item) */

   maxlen = ap->based_ptr->sdv.len;
   line = '';
   if unit = 0 then do;
      call cl$get (line, maxlen, status);
      if rank (substr (line, 1, 1)) = 131 then /* control-c = eof */
         return (false);
      line = trim(line, '01'b);
      return (true);
      end;

   call rdlin$ (unit, addr(line)->bvs.chars, divide (maxlen+1, 2, 15), status);
   select (status);
      when (0) do;
         addr(line)->bvs.len = maxlen;      /* set to maximum length */
         line = trim(line, '01'b);          /* trim trailing blanks */
         return (true);                     /* not eof */
         end;
      when (e$eof)
         return (false);
      otherwise
         call err$ (err$primos_et, 'Reading from unit ' || unit, status, 0, 0);
      end;

end gp$read_line;
