.define title System Administrator's Guide
.define uptitl SYSTEM ADMINISTRATOR'S GUIDE
.file sa.title
.nfill
.width 98
.sm 13
.bm 7
.tofc tofc.runi 3
.nfill




.s 3
.>P r i n t M a s t e r

.>A compatible replacement for the Prime spooler
.s 3
.>%uptitl%
.s 5
.>Version %rev%
.s 26
.>Copyright (C) 1984 J.E. Wilcoxson and J.L. Hostetler
.page 1
.width 86
.length 66
.dindent 0 0 0
.sm 1
.i 12
.dskip 1 -1 1
.eh/       PrintMaster %title%///
.of/       Version %rev%//Page #/
.ef/       Page #//Version %rev%/
.widow 5
.file sa.runo
.oh///System Overview/
.dn  {{SYSTEM OVERVIEW}}
PrintMaster is a new printer management system for Prime computers.
It runs under standard Primos, revision 19.4 and up, and replaces the
functionality of the Prime spooler.  It was designed for
compatibility with the Prime spooler, convenience, and excellent
performance, even over a network.

.dd  {{Compatibility}}
    o    Can be run concurrently with the Prime spooler

    o    CPL procedures simulate Prime's SPOOL and PROP commands;
         most existing CPL and command files will work unmodified.

    o    A compatible replacement subroutine allows programs calling
         SPOOL$ to run without recompiling or reloading.  This
         includes all Prime software, such as RJE, FTS, FORMS,
         INFORMATION, and compilers, as well as third-party software
         such as WordMARC.

    o    Customers are encouraged to write their own drivers for
         non-standard devices.  Drivers are supplied for DataPrinter,
         Printronix, AMLC, TTY, Xerox 2700-II, Xerox 3700, Xerox
         4045, and HP LaserJet  printers.  Average device drivers
         range from 30 to 150 lines of PL/I.

.dn  {{Convenience}}
    o    Extensive operator printer control, including commands
         to ADVANCE and BACKUP any number of printed pages, POSITION
         to a specific page, ALIGN custom forms, SUSPEND job at a page
         break then resume later where it left off, RESTART, ABORT,
         DROP_COPY, DROP_JOB and others.

    o    Operators can control printers and queues on remote systems
         as if they were local.

    o    Form and device characteristics are maintained separately,
         allowing the same form definitions to be used for all devices
         with no duplication.

    o    User and operator controlled job deadlines and priorities.

.dn  {{Performance}}
    o    Low system overhead and fast print job turnaround, especially
         at installations with networks and/or many printers.  No
         disk I/O or slaves are used to "scan" print queues; instead,
         event messages are sent when jobs are queued.

    o    Printer phantoms log out after they are idle for a
         specified period of time, and will log back in when given a
         job to print.

    o    Optionally, jobs can begin printing while being created.
         This is especially useful for RJE print jobs.

    o    Files can be printed directly from user directories (local or
         remote) without being copied to the print queue, saving time
         and disk space.  This is also more secure.

    o    Multiple copies of a job can be printed simultaneously on
         different printers.

    o    Paper accounting procedures log all job and device attributes
         (total pages printed, user id, project id, form type, etc.)
         to a Primos file after each job prints.
.du
.oh///Installation/
.dn  {{INSTALLATION}}
PrintMaster is installed in two phases.  In phase 1, both PrintMaster
and the Prime spooler can operate concurrently.  This allows
evaluation of the software without affecting the operations staff or
users.  When phase 2 is installed, the Prime spooler is completely
replaced; emulations are provided for the SPOOL and PROP commands,
and the SPOOL$ subroutine is replaced by a procedure with the same
name and calling sequence that queues jobs to PrintMaster queues.
This allows existing applications programs, third-party software, and
Prime system software using SPOOL$ (such as compilers, RJE, etc.) to
be run under PrintMaster without recompiling or reloading, and allows
most existing command files and CPL programs using the SPOOL command
to work without modification.  A program is also provided to remove
PrintMaster or revert to phase 1 after phase 2 has been installed.
.dd  {{Installation - Phase 1}}
Load the release tape to create the PRINTMASTER directory according
to the enclosed instructions.  Login as the system administrator for
installation, since access to CMDNC0 and an MFD will be required.
Networks are not configured in Phase 1; a separate section gives
details on how to configure systems in a network.  Most customers
will want to try PrintMaster on a single system before installing it
on other nodes in a network.

IMPORTANT:  If the PRINTMASTER directory is on a remote system, you
            must be logged in to the system being installed.
.dd  {{Decide where to put the system directory}}
The system directory, PRINTMASTER*, will require approximately
250 disk records and will be frequently accessed.  A good
partition for this would be the one used for CMDNC0, LIB and SYSTEM.
.dn  {{Decide where to put print queues}}
The same partition used for SPOOLQ would be a good choice.  The queue
directory PRINTMASTER_QUEUE* is frequently accessed; the disk space
required fluctuates widely depending on the number of jobs queued,
the size of each job, and whether or not jobs are copied to the
queue.  An empty queue requires 4 disk records.  Each job queued
requires at least 2 disk records, or 2 plus the file size if the job
is copied to the queue.  At least one local queue should be created.

.dn  {{Run the installation program}}
This will install the PrintMaster commands in CMDNC0 and help files
in HELP*.  It will ask if the Prime spooler should be replaced.
Usually this is not done during your testing and evaluation of
PrintMaster, and can be done later.  If the Prime spooler is
replaced, it is backed up so that it can be re-installed if
PrintMaster is removed from the system, or Prime and PrintMaster
concurrent operation is needed.  The installation program will also
ask for the partition to install the system directory on.  You must
have ALL access to HELP*, CMDNC0, PRINTMASTER, and the system
partition MFD for INSTALL to work properly.  (The easiest way to do
this is to put a priority ACL on the partition(s) containing these
directories before running INSTALL_PRINTMASTER using the SPAC
command.)   Print queues may be configured at this time; the program
will ask for partition names where queues are to be located.  You
must have ALL access to each partition's MFD.  INSTALL_PRINTMASTER can
be rerun if necessary, although the dialog will be different.

    OK, a printmaster
    OK, r install_printmaster

NOTE: If PrintMaster is installed on a non-ACL partition, several
      error messages will be printed from the set_access command.
      These can be ignord.
.dn  {{Run the initialization program}}
After the installation program has been run, PrintMaster is ready to
be initialized.  {{The initialization program is run from the system
console}}:

    OK, init_printmaster
    [INIT_PRINTMASTER ver 3.5]
    Copyright (C) 1984 J.E. Wilcoxson, J.L. Hostetler.

    Shared segment 2600 allocated.
    Shared databases initialized (on 19 Feb 85 22:06:38 Tuesday).
    PRINTMASTER_MONITOR started (user 103).
    OK,

If networks are configured, PrintMaster requires dedicated use of a
Primenet port.  The default network port can be changed in
INIT_PRINTMASTER.CPL if it conflicts with other software.

If print jobs are not going to be copied to the queue, the -PACL
option should be used.  This gives PrintMaster system programs (such
as devices) access to all files on the system.  The user-id SYSTEM
should have LU access to all MFDs to allow the initialization program
to read the current priority ACL on all partitions, and modify them
to include .PRINTMASTER_SYSTEM:ALL.

After INIT_PRINTMASTER has been run, the phantom PRINTMASTER_MONITOR
will appear in a STATUS USERS command.  Your Primos startup file
(C_PRMO or PRIMOS.COMI) may be modified to run INIT_PRINTMASTER.
This will not affect the Prime spooler; it is still used for
"production" printing during phase 1.

{{IMPORTANT NOTE}}: The priority ACL .PRINTMASTER_SYSTEM:ALL must be
on all partitions if devices are to print jobs directly from user
directories (-COPYFILE option not used).  Running INIT_PRINTMASTER
with the -PACL option will insure the priority ACL's are set
correctly on all partitions.
.du
.dn  {{Installation - Defining Operators}}
A PrintMaster operator is the system administrator, and any users in
the Primos ACL group ".PRINTMASTER_OPERATOR".  Users are put in this
group with Prime's EDIT_PROFILE command.  Any number of users can be
operators.  Operators have all privileges of normal users, and can
additionally issue commands to control devices and manipulate other
users' jobs.
.dn  {{Installation - Configuring Optional Features & Defaults}}
Many features in PrintMaster can be disabled/enabled on a per-site
basis.  The program to do this is CONFIGURE_PRINTMASTER in the
PRINTMASTER directory.  The default PrintMaster configuration is
sufficient for testing and evaluation.  The CONFIGURE program can be
run from a user terminal after INIT_PRINTMASTER has been run from the
system console:

    OK, a printmaster
    OK, r configure_printmaster

The configuration program will go through a question and answer
session to customize PrintMaster.  Questions such as the standard
form characteristics (lines per page, characters per line, etc.) will
be asked.
.dn  {{Installation - Creating and Starting Devices}}
After the configuration program has been run, devices need to be
created.  This is done with the CDD (Create Device Def) command.  It
will ask for characteristics of the device such as its destination
(-AT keyword), the ability to print upper and lower case text, and
the printer type and Primos device name.
.dn  {{Installation - Creating Custom Form Definitions}}
One form definition was created above, since every device requires a
default form type.  Eventually, all custom forms should have form
definitions created.  This will allow the operator to change form
types with a single command:

    OK, dc pr0 -load stock
    [Device Command 2.0]
    Commands accepted.
    OK,

This command would load the form type STOCK on device PR0; characters
per line, lines per page, lines per inch, and all other form
characteristics are set.  Until these definitions are created, the
EDIT command has to be used:

   OK, dc pr0 -edit -form stock -chars_per_line 132 -lines_per_page 66

These are fully explained in the Operator's Guide.
.dn  {{Installation - Configuring Networks}}
PrintMaster was designed for fast response in a network environment.
Jobs will usually begin printing 5 to 10 seconds after they are
queued.  To achieve this performance, some special configuration
steps are needed when devices and queues are shared by networked
systems.  If devices and queues are not shared, this step can be
omitted.  There are three basic network configurations supported by
PrintMaster at revision 19.2: rings with no attached nodes (via MDLC,
ICS), rings with a single attached node, and a point-to-point
network.  All other configurations must be expressed in some
combination of these three.  At 19.3 and above, all configurations
are supported, and the network should be configured as if it were a
single ring with no attached nodes.
.dd  {{The System List}}
A single file, called SYSTEM_LIST in the system directory
PRINTMASTER*, has the network configuration information.  This list
contains the Primenet system names of all systems sharing printers
and queues.  Each system will have its own system list, and each
system list must be identical.  It is created with the CPL program
CREATE_SYSTEM_LIST.CPL in PRINTMASTER*>PROGRAMS.  There are rules for
creating the three different network configurations.  Remember, at
19.3, the network should be configured {{as if it were a single ring
with no attached nodes}}.  CREATE_SYSTEM_LIST may be re-run if the
network configuration created is incorrect.
.dn  {{Configuring a Ring}}
Rings networks are easy to configure.  All nodes sharing devices and
queues are in the system list.  Usually this will be all nodes in the
network.  The systems should be ordered by their typical response
time, first the faster ones, then slower ones.  It is possible to
create multiple networks out of the single ring.  For example, if A,
B, C, D, and E are in a ring network, and A, B, and C are to share
devices and queues, while D and E are to share their devices and
queues, the system lists on A, B, and C would have only these three
listed.  The system lists on D and E would just contain these two.
.dn  {{Configuring a Ring With a Single Attached Node}}
When an extra node is attached to the ring via a synchronous link,
the system list is configured as if all systems were in the ring,
with the exception that the first system in the list {{MUST}} be the
one that is in the ring AND has the attached node.  In this
configuration, all devices and queues on the ring will be shared, and
the attached node (not in the ring) will share devices and queues
with the system it's linked to in the ring.  The attached node will
not share devices and queues with any other systems in the ring.
.dn  {{Configuring a 2-Node Point-To-Point Network}}
This is the easiest network to configure.  If the systems are sharing
devices and queues, both are listed in the system list on each system.
The fastest system should be listed first.  If not sharing devices,
the system list does not have to be created at all.
.dn  {{Other Network Configurations}}
If the network has a configuration other than the three listed above,
it must be divided into different sections, where each section is
either a ring, ring with attached node, or point-to-point link.  Then,
each section is configured according to the rules above.  Again, at
revision 19.3, the network should be configured as if it were a single
ring, no matter what its actual layout is.
.dn  {{Copying the Network Configuration to Other Systems}}
After one system has been completely configured and the System
Administrator is satisfied with its performance, other systems in the
network will need to be configured.  To make this easier,
INSTALL_PRINTMASTER asks if the configuration should be copied from
another system in the network.  If it is, CONFIGURE_PRINTMASTER does
not have to be run again.  The system list should have already been
created on the system the configuration is being copied from.
.du
.dn  {{Installation - Phase 2}}
After deciding to use PrintMaster for all print operations, the
installation program is run again, this time answering YES to the
"Replace Prime spooler" question and NO to "Re-install new version".
This will install CPL programs to emulate PROP and SPOOL, and an
EPF library to replace SPOOL$.  A question will also be
asked about enabling automated retraining.  Answering yes causes the
PROP and SPOOL replacements to print the PrintMaster command
corresponding to the PROP or SPOOL command given.  This will be
helpful for a few weeks to allow users and operators to gradually
switch to the new commands.  The Prime SPOOL and PROP commands are
still available by including -PRIME on the new SPOOL and PROP command
line.  This option causes the Prime versions of SPOOL and PROP
to be run instead of the replacements.  Jobs cannot be added to the
Prime spool queue once the SPOOL$ replacement is shared, since the
Prime SPOOL command calls SPOOL$ to send files to the queue; while
the PrintMaster SPOOL$ replacement is shared, the Prime SPOOL command
will send files to PrintMaster queues!  If there are still jobs in
the Prime spool queue, install the replacements and continue to run
the Prime spool phantoms until the queues have been emptied.  This
will require using the -PRIME option on all PROP commands to control
devices.  All new jobs will be sent to the PrintMaster queue.  Once
the Prime queue is empty and the spool phantoms are logged out, the
corresponding PrintMaster devices can be started.

IMPORTANT: Any programs that have already established dynamic
           links to the old Prime SPOOL$ subroutine must be stopped
           and restarted after installing phase II, for example,
           the RJE workstation.
.du
.*
.*    Removed sections
.*
.oh///Keyword System/
.dn  {{THE KEYWORD SYSTEM}}
PrintMaster uses keywords extensively to control its operation.  This
is an important concept that must be understood to make effective use
of the features in PrintMaster.
.dd  {{Keywords}}
Keywords are used by Prime software to give commands additional
information about how they should operate.  For example, the Prime
SPOOL command has a keyword -FORM to tell the System Operator what
form type should be used to print a file:

    OK, spool datafile -form white

Another keyword is used to tell SPOOL to list the jobs in the queue:

    OK, spool -list

PrintMaster uses keywords in a similiar manner, but allows keywords
to be created and deleted by the System Administrator.
.dd  {{What are keywords?}}
There are three parts to a keyword: the keyword name, flags, and
values.
.dd  {{Keyword Names}}
Keywords in PrintMaster always begin with a dash followed by a
letter, period, or dollar sign.  Up to 31 letters, digits, or
punctuation marks can follow this.  The only punctuation marks that
can be used are the period, dollar sign, and underscore.  If a
keyword has any other characters in it, such as a question mark, the
error "Invalid keyword" is printed with a message describing what's
invalid.  (too long, bad character, etc.)  Some examples of keywords
are:

    -LINES_PER_PAGE
    -FORM
    -OPTION3
    -.status$kw4
    -.STATUS$KW4


Lowercase and uppercase are treated the same in a keyword name, so
the last two keywords are the same.
.dn  {{Keyword Validation}}
PrintMaster commands only recognize certain keywords.  To detect
keyword spelling and typing errors, a file of all legitimate keywords
called the master keyword file is checked whenever a keyword is used.
If the keyword is not in this file, the error "Undefined keyword"
occurs.  The System Administrator may add and delete keywords from
the master keyword file.
.dn  {{Keyword Values}}
Some keywords have extra information after them, such as the -FORM
keyword used above, called a value.  In the example, WHITE is the
value of the -FORM keyword.  Keywords can have more than one value,
listed one after another:

    OK, spool -list form stock

Here, the -LIST keyword has two values, FORM and STOCK.  Unlike
keywords, values can have up to 128 characters, and any character can
be used.
.dn  {{Keyword Flags}}
Sometimes a keyword is used for different purposes, depending on how
the System Administrator wants PrintMaster to operate.  Keyword flags
are used for this.  They print at the end of a keyword, following a
colon.  There are three keyword flags - :i indicates a keyword is
used for information only (not job scheduling), :p indicates a
keyword is protected and cannot be modified or deleted, and :a
indicates a keyword is an abbreviation for another keyword.
Examples:

    -USER:i JIM_SMITH
    -PRIORITY:ip 5
    -FORM WHITE
    -AT:p SYSTEM-B
    -AS:a JOB_NAME
    -NF:a NO_FORMAT

If a keyword is not followed by any flags, such as -FORM in the
example above, it is neither an information keyword, an abbreviation,
nor a protected keyword.  Keyword flags are kept in the master keyword
file and can only be changed by the System Administrator.
.du
.dn  {{What are keywords used for?}}
PrintMaster uses keywords to control commands, describe how jobs are
to be scheduled and printed, and describe printer characteristics and
capabilities.   Most keywords can be classified into one of these
three groups.  -LIST, -STATUS, and -HELP are examples of command
keywords; -FORM, -AT, and -FTN are job keywords, since they describe
job characteristics; and -DEVICE_NAME, -UPPERCASE, and -AUTO_RESTART
are examples of device keywords.  PrintMaster does not actually
divide keywords into these three groups, but this grouping makes it
easier to describe how they are used.
.dn  {{Where do keywords come from?}}
Keywords come from three places: command lines, keyword files, and
system programs.  Keywords are most frequently used on Primos
command lines.  For example,

    OK, apj datafile -form white -notify -at system_b

This example has three keywords, -FORM, -NOTIFY, and -AT.  Long
keyword sequences can be stored in keyword files to make PrintMaster
easier to use.  All keywords in a keyword file are loaded whenever the
-USING keyword is used:

    OK, apj datafile -using my_keywords

(More information on creating and using keyword files is given in the
KEYWORD  FILES section).

The third keyword source is PrintMaster programs.  These keywords
usually have fixed values such as a user's Primos user-id or the date
a file was last modified, and they are included in every print job.
.dn  {{Keyword abbreviations}}

PrintMaster allows for the creation and use of system-wide keyword
abbreviations.  An abbreviation may be used in place of the name of a
keyword in command line format; abbreviations are not allowed in text
format (see KEYWORD LISTS - COMMAND LINE FORMAT for more information).
Keyword abbreviations are created by the System Administrator and are
maintained in the master keyword file.
.du
.dn  {{Keyword Lists}}
A keyword list is a group of keywords, along with their values and
flags.  The list can come from keywords on the command line, from
keyword files, or from system programs.  There is no limit on the
number of keywords in a keyword list.  Keyword lists are ideal for
representing jobs and devices, since keywords can be added and
deleted dynamically, and any kind of information can be stored in
keyword values.
.dd  {{What are keyword lists used for?}}
Keyword lists are used in PrintMaster to represent print jobs and
printer devices.  A job's keyword list has all of the information
about the job, such as: the pathname of the file to print, file size,
date last modified, user spooling the file, and the system the file
was spooled from.  Device keyword lists have information describing
the Primos device used (PR0, PR1, etc.), whether the device has
lowercase characters, and the current form type and attributes.  Each
piece of information is associated with a particular keyword; the
job's pathname is the value of the keyword -PATHNAME; the device's
current form type is the value of the keyword -FORM.  Keyword lists
are also used to determine which devices jobs can be printed on.  A
job's keyword list must {{match}} a device's keyword list before it
can be printed on that device.  The matching process is explained
later.
.dn  {{What do keyword lists look like?}}
PrintMaster keyword lists have three representations: command line
format is used on Primos command lines; text format is used when
keyword lists are printed; and disk format is used to store keyword
lists efficiently in disk files.
.dd  {{Keyword Lists - Command Line Format}}
This is the most familiar form for keyword lists, and the simplest.
Keywords are listed one after another in command line format.  Each
keyword's name, flags, and values can be specified.  Flags are only
used by the System Administrator when editing the master keyword
file; it is an error for users to put flags on keywords.  Some
examples of keyword lists in command line format:

    -form white -ftn -device_name pr0 pr1 pr2 -copyfile

    -select_jobs -form stock -user jimmy -select_kw -jobid -job_name

    -job 1 2 3 -notify now -dl -at Kansas

    -priority:ip 10 -form:p stock blank standard default -copyfile

In the first example, the -FORM keyword has one value, WHITE;
-DEVICE_NAME has three values: PR0, PR1, and PR2;  the -COPYFILE
keyword has no values associated with it.  The last example shows how
flags are put on keywords in command line format.  Again, these can
only be used by the System Administrator when editing the master
keyword file.  Since Primos treats some characters special on the
command line, such as the comma and space, a value may have to be
quoted with single quotes if it contains punctuation marks.  These
quotes are not part of the value.  If quotes are not used, all
letters in the value are changed to uppercase.  So, -FORM WHITE is
the same as -form 'WHITE', but not the same as -FORM 'white'.

In command line format abbreviations may be used for the name of the
keyword.  For example, if -NF is a valid abbreviation for the keyword
-NO_FORMAT and -AS is an abbreviation for -JOB_NAME then the command
line:

    -as my_report -nf

would be converted to:

    -job_name my_report -no_format

(See KEYWORD ABBREVIATIONS for more information.)
.dn  {{Keyword Lists - Text Format}}
Keyword lists are printed in text format when they are listed for
inspection or editing.  Many programs, such as the keyword file
editor, queue lister, and device command program, print keyword lists
in this form.  It is similar to command line format, except keywords
and values are listed on separate lines rather than one after
another.  Flags are listed immediately following the keyword, as in
the command line format.  An example of a keyword list in text format
is:

   -CARRIAGE_TAPE standard tape
   -WRAP:i
   -CHARS_PER_LINE:i 132
   -FORM:p
   XXSL01
   SESL01
   PRSL01
   VMSL01
   SSSL01
   -LEFT_EDGE_LINEUP -8
   -LINES_PER_INCH:i 6
   -LINES_PER_PAGE 66

This keyword list has seven keywords.  Three (-WRAP, -FORM, and
-LINES_PER_INCH) have flags on them.  All but -WRAP have values.  The
first value may be listed immediately after the keyword (and one
space) or on the next line.  The entire line (except for the keyword)
is taken as the value.  For example, the keyword -CARRIAGE_TAPE only
has one value, standard tape.  In command line format, this would be
considered two separate values, since it is not quoted.  The second
and subsequent values are listed on the following lines, one per line,
and {{do not}} begin with a dash. The -FORM keyword in this example
has five values.  If a keyword list in TEXT format is displayed on the
terminal, the information keywords are printed first followed by the
non-information or scheduling keywords.  Each group is sorted
alphabetically.  Keywords are indented a few spaces and any values
appearing on separate lines are indented three spaces more than the
keywords.  However, when a keyword list in TEXT format is written to a
file, the order is not changed and no indenting is done.  Files
containing keyword lists in TEXT format always have the .TF suffix.
.dn  {{Keyword Lists - Disk Format}}
Keyword lists are stored on disk in a format that uses little space
and is easy (for computers) to access.  Keyword files are stored this
way.  The actual format is not important, but it is important that
programs such as ED are not used to modify them, as they will make
the file unreadable.  Only the PrintMaster keyword file editor EKF
can modify keyword lists in disk format.  Job keyword lists in the
print queue are also stored in disk format.  When keyword lists in
DISK format are written to a file, the filename always has the .KF
suffix.
.du
.dn  {{Matching Keyword Lists}}
Earlier it was mentioned that the job and device keyword lists must
match for a job to be printed on a device.  This means that all of
the job's scheduling keywords (not information-only; remember the :i
flag) are in the device's keyword list, and the corresponding values
also match.  Values match if either the device or job keyword has no
values, or one of the job keyword's values is listed among the device
keyword's values.  For example, a job with the keyword -FORM (no
values) would match any device with the -FORM keyword, no matter what
values (if any) it had; a job with the keyword -FORM STOCK would
match a device with -FORM (no values), -FORM STOCK, or -FORM STOCK
LARGE DEFAULT (3 values);  a job with the keyword -FORM STOCK LARGE
(2 values) would match a device with -FORM (no values) or -FORM with
either STOCK or LARGE among its values.  It is important to realize
that keyword list matching is not symmetric, and that job keyword
lists have to match device keyword lists, not the reverse.  For
example, if a device has the keyword -FORM ABC DEF (2 values) and a
job doesn't have the -FORM keyword, the job matches the device.  But,
if the job has the keyword -FORM ABC DEF and the device doesn't have
the -FORM keyword, the job doesn't match the device; the device DOES
match the job, but this has no practical use.  Keyword list matching
is an important feature used to implement PrintMaster's job
scheduling flexibility.
.dn  {{Editing Keyword Lists}}
Another operation performed on keyword lists, besides matching, is
editing.  This is where one keyword list called the edit list is used
to modify, or edit, another keyword list called the original list.
The edit list is processed left to right, and each edit keyword is
either inserted in or removed from the original list.
.dd  {{Inserting Keywords into a Keyword List}}
If the keyword in the edit keyword list was already in the original
list, it is removed first, along with all values.  The edit keyword
and its values are then added to the original list.  Here are some
examples of how keyword list editing works:

    Original List           Edit List        Result

    -STATUS -TRASH          -FORM ABC        -STATUS -TRASH -FORM ABC
    -FORM JUNK MAIL -TRASH  -FORM ABC        -TRASH -FORM ABC
    -FORM JUNK MAIL -TRASH  -FORM A B C      -TRASH -FORM A B C
    -AT SYS1 -FORM X Y      -FORM A B C      -AT SYS1 -FORM A B C
    -FTN -NO_HEADER         -FORM            -FTN -NO_HEADER -FORM
    -FORM XYZ -FTN          -FORM            -FTN -FORM

.dn  {{Removing Keywords from a Keyword List}}
To remove keywords from a keyword list, a special form of the keyword
is used in the edit list: the dash is followed by a carot (^), then
the keyword name.  When this is used, the keyword and all of its
values are removed from the keyword list.  For example,

     Original List        Edit List                Result

    -CHECK -NO_FORMAT    -DL -^CHECK -^WRAP       -DL -NO_FORMAT
    -CHECK STUB -FTN     -FORM ABC -^CHECK -XYZ   -FORM ABC -XYZ -FTN

No error message is printed if the keyword to be deleted is not found
in the original list.  In the last example, -CHECK and its values
have been removed.  The keywords -FORM and -XYZ were inserted, since
they did not have a carot following the dash.
.dn  {{Write-protected Keywords}}
The keyword flag :p means a keyword is protected.  This prevents
modification of the keyword during editing.  If the original keyword
list is -FORM:p ABC -FILL, and the edit list is -^FORM or -FORM DEF,
an error will occur, since the -FORM keyword is protected and cannot
be changed or deleted.  Unfortunately, an error is also printed if
-FORM ABC is used to edit -STATE -FORM:p ABC -WAIT, even though the
keyword is not being removed, and the value is the same.  To make
this less of a problem, it is okay to {{change}} a protected keyword
that has no values, but it cannot be {{deleted}}.  This allows a
protected keyword to be specified more than once, something that is
important when system, project, and user default keyword files are
used.  These files are discussed in the next section.  Remember, the
System Administrator sets keyword flags in the master keyword file;
users cannot unprotect a protected keyword.
.du 2
.dn  {{Keyword Files}}
Keyword files are used to store keyword lists in Primos disk files in
the keyword list disk format.  Their filenames always have the .KF
suffix.  The entire list of keywords is referenced with -USING
followed by the keyword file pathname.  Keyword files are created
with the keyword file editor EKF.  PrintMaster has default keyword
files that are inserted into all print jobs.  These are created by
the System Administrator, and allow, for example, all payroll reports
to be printed at priority 10, while other reports are printed at
priority 5. Before explaining keyword files further, a clear
understanding of how -USING works is needed.
.dd  {{The Special Keyword -USING}}
As stated earlier, keyword lists are used to represent jobs and
devices.  The most common operation in PrintMaster is the creation
and queueing of print jobs with the APJ command.  This command is
documented extensively later in this manual, but basically, all
keywords on the APJ command line are used to create the keyword list
that will represent the job.  The APJ command will always put some
keywords in the job keyword list, such as -USER and -PATHNAME; the
user then edits this list, as described in the section on keyword
list editing, with keywords on the command line.  For example, the
command:

    OK, apj datafile -form stock
    [Add Print Job 2.0]
    Job 537 DATAFILE added to queue SYS.
    OK,

would insert the -FORM keyword into the job's keyword list, causing
the job to be printed on the form type STOCK.  Long or frequently used
sequences of keywords, such as -FORM STOCK -NO_FORMAT -NOTIFY -DL,
can be stored in a keyword file.  All keywords in the file are
inserted with the -USING keyword like a macro, for example:

    OK, apj datafile -using my_kf1 my_keyword_file2
    [Add Print Job 2.0]
    Job 538 DATAFILE added to queue SYS.
    OK,

The result is as if all keywords in the keyword files MY_KF2.KF and
MY_KEYWORD_FILE2.KF had been typed in explicitly on the command line.
As mentioned earlier, keyword lists are always processed left to
right.  The keyword -USING is expanded when it is encountered.  (the
exception to this is the EKF command, which {{never}} expands -USING.)
The -USING keyword can also be used inside a keyword file.  When this
file is mentioned in a -USING value, the second keyword file will be
read, and its keywords will be inserted.  So, if keyword file A.KF
looks like this:

    -FORM STOCK
    -USING B
    -FTN

and keyword file B.KF looks like this:

    -FORM TRASH
    -PRIORITY 10

the command:

    OK, apj datafile -using a
    [Add Print Job 2.0]
    Job 539 DATAFILE added to queue SYS.
    OK,

would insert -FORM STOCK from A.KF, then -FORM TRASH and -PRIORITY 10
from B.KF, then -FTN from A.KF.  The job would be printed on -FORM
TRASH, since it would overwrite -FORM STOCK.  If the -FORM keyword
was protected by the System Administrator, -FORM TRASH would {{not}}
overwrite -FORM STOCK, and an error message would be printed;
messages are not printed if a keyword protection error occurs while a
LIBRARY keyword file is being inserted, although the keyword is not
overwritten.
.dn  {{Types of Keyword Files}}
There are six types of keyword files in PrintMaster: the master
keyword file; system, project, and user defaults; library keyword
files; and user keyword files.  All are stored in the same format,
but are created by different people and used for different purposes.
They are created, modified, and deleted with the keyword file editor,
EKF.  This command is explained fully under section THE KEYWORD FILE
EDITOR EKF.
.dd  {{The Master Keyword File}}
The master keyword file, called MASTER.KF is stored in the
PrintMaster system directory, PRINTMASTER*.  It is created during
installation, and is modified by the System Administrator.  All valid
keywords must be in the master keyword file.  Whenever a keyword is
referenced, it is looked up in the master file,  and the protection
and information flags are put on the keyword if necessary.
.dn  {{Default Keyword Files}}
There are three types of default keyword files: system, project, and
user defaults.  These are kept in the system directory PRINTMASTER*,
and maintained by the System Administrator.  They are loaded, in
order, whenever jobs are queued.  The system default file is
SYSTEM_DEFAULTS.KF; the project default files are kept in the
directory PRINTMASTER*>PROJECT_DEFAULTS, and have names like XXX.KF,
where XXX is the Primos project name; the user default files are kept
in the directory PRINTMASTER*>USER_DEFAULTS, and have names like
YYY.KF, where YYY is the Primos user-id.  As an example, if user-id
JOHN in project PROGRAMMING queues a print job, SYSTEM_DEFAULTS.KF,
PROGRAMMING.KF, and JOHN.KF are all inserted into the job keyword
list {{before}} the user's command line.  This allows keywords in the
default files to be overridden by users, unless protected by the
System Administrator.
.dn  {{Library Keyword Files}}
Keyword files that are referenced by many users can be put in the
keyword library, PRINTMASTER*>LIBRARY, for easier access.  These
files are loaded whenever a -USING value is not a pathname, and is
not in the current directory.  For example, the command:

    OK, apj datafile -using stock

will first check the current directory for a file named STOCK.KF, and
if not found, will check in the keyword library.  Library keyword
files are usually created by the System Administrator or System
Operator; some users may also be granted access rights to the keyword
library.
.dn  {{User Keyword Files}}
Users can make private keyword files to store frequently used keyword
lists.  As with all other keyword files, they are created with the
keyword file editor EKF, and can only contain valid keywords, i.e.,
keywords in the master keyword file.  These are referenced with -USING
followed by the pathname of the keyword file, for example:

    OK, apj DATAFILE -form stock -using john>my_keyword_file

All keywords in JOHN>MY_KEYWORD_FILE.KF would be inserted in the job
after system, project, user defaults and -FORM STOCK had been
inserted.
.du 2
.dn  {{The Keyword File Editor EKF}}
Keyword files are created, modified, and deleted with the keyword
file editor, EKF.  This command is used to edit the master, library,
and user keyword files, as well as the system, project, and user
defaults.  The basic form of the command is:

    OK, ekf  keyword_file  command

where KEYWORD_FILE is the file to edit, and COMMAND is the operation
to perform.  If KEYWORD_FILE is omitted, EKF will print an error
message; if COMMAND is omitted, EKF will assume the command -LIST or
-EDIT.

.dd  {{Specifying the Keyword File}}
There are three ways to specify the keyword file: -MASTER or -M
indicates the master keyword file PRINTMASTER*>MASTER.KF; this is
normally used only by the System Administrator, although users may
use it to list the valid keywords; a filename followed by -LIBRARY
or -LIB indicates a library keyword file in the directory
PRINTMASTER*>LIBRARY; for example, the command:

    OK, ekf stock -library

would edit the library file STOCK (PRINTMASTER*>LIBRARY>STOCK.KF);
the third way to indicate the keyword file is to use a pathname; this
is probably the most common, for example:

    OK, ekf jim>keyword_macro_files>standard

All keyword files have the .KF suffix; it is supplied by the system if
omitted.
.dn  {{Specifying the Editing Command}}
There are four command options for EKF: -CREATE creates a new keyword
file; -DELETE deletes a keyword file; -EDIT modifies a keyword file;
and -LIST prints a keyword file.  If the command is omitted, -LIST is
assumed unless other keywords are used on the command line, in which
case -EDIT is assumed.
.dd  {{The EKF command -CREATE}}
This command creates a new keyword file.  It can be abbreviated to
-C.  If the keyword file already exists, it is overwritten.  If
nothing is given after the -CREATE command, EKF will enter an input
loop to allow the user to type in the keywords, flags, and values to
be put in the keyword file; the input prompt is a greater-than (>)
symbol.  To stop the program, enter a carriage return following the
prompt.  The keyword list is entered in text format (see KEYWORD LISTS
- TEXT FORMAT), for example:

    OK, ekf jimmy>macro -create
    [Edit Keyword File 3.2]
    Please enter keyword list. The first item must be a keyword.
    > -status
    Undefined keyword "-STATUS".
    Item ignored.
    The next item must be a keyword.
    > -form abc
    > def
    > ghi
    > -using special
    > -notify now
    > -dl
    >
    OK,

The error on -STATUS occurred because this keyword was not in the
master keyword file.  The -FORM keyword has three values: abc, def,
and ghi.  These are {{not}} mapped to uppercase, since this is only
done when keywords are entered in command line format.  The -NOTIFY
and -USING keywords have one value: now and special, respectively.
These values could have been entered on a separate line.  The -DL
keyword has no values.

If an incorrect value is entered for a keyword, start over by
re-entering the keyword, for example:

    OK, ekf jimmy>oops -create
    [Edit Keyword File 3.2]
    Please enter keyword list. The first item must be a keyword.
    > -form abc
    > def
    > ghi
    > -notify now
    > -form xyz
    >
    OK,

Here, -FORM xyz would have been stored in the keyword file.

If an incorrect keyword has been entered, use the special form
-^KEYWORD to remove it, for example:

    OK, ekf jimmy>oops -create
    [Edit Keyword File 3.2]
    Please enter keyword list. The first item must be a keyword.
    > -form abc
    > def
    > ghi
    > -notify now
    > -^form
    >
    OK,

The keyword file OOPS.KF would only have the keyword -NOTIFY now in
it, since -FORM was deleted.

The -CREATE command can optionally be followed by either the pathname
of a keyword list in TEXT format or a keyword list in command line
format.  EKF will use the keywords in either list to create the new
keyword file.  If a text file is given it must have the suffix .TF
to distinguish it from a keyword file, which has the .KF suffix.  If
the .TF is omitted, it is added by EKF.  For example:

    OK, slist jimmy>macro.tf
    -DL
    -FORM abc
    def
    ghi
    -NOTIFY now
    -USING special
    OK, ekf jimmy>macro -create jimmy>macro
    [Edit Keyword File 3.2]
    OK,

This example would create the same keyword file as before.  The input
file, JIMMY>MACRO.TF is read, and the keyword file JIMMY>MACRO.KF is
created.  Blank lines are ignored while EKF is reading a text file.

A keyword file can also be be created by giving the keyword list on
command line:

    OK, ekf jimmy>example -create -dl -form blank -at 'Home'
    [Edit Keyword File 3.2]
    OK, ekf jimmy>example -list
    [Edit Keyword File 3.2]
       -DL
       -FORM BLANK
       -AT Home
    OK,

Notice that even though the value for -FORM, blank, was typed in lower
case, it was changed to uppercase.  This is always the case with
command line format values, unless single quotes are used.  See
sections KEYWORD LISTS - COMMAND LINE FORMAT for more information.

.dn  {{The EKF command -DELETE}}
This command deletes a keyword file.  It can be abbreviated to -D.
For example:

    OK, ekf stock -lib -delete
    [Edit Keyword File 3.2]
    OK,

deletes the library file PRINTMASTER*>LIBRARY>STOCK.KF.  The command:

    OK, ekf jimmy>macro -delete
    [Edit Keyword File 3.2]
    OK,

deletes the user keyword file JIMMY>MACRO.KF.

The Primos DELETE command can also be used to delete a keyword file.
.dn  {{The EKF command -LIST}}
This command lists an existing keyword file in TEXT format.  It can
be abbreviated to -L.  The output can be directed to the terminal or
written to a file.  This example writes to the terminal:

    OK, ekf jimmy>macro -list
    [Edit Keyword File 3.2]
       -DL
       -FORM
          abc
          def
          ghi
       -NOTIFY now
       -USING special
    OK,

When a keyword file is printed on the terminal the keywords are
indented a few spaces and sorted in alphabetical order, with
information keywords (followed by :i flag) listed before scheduling
keywords, and the values of any keyword with multiple values are
indented three spaces more than the keywords.

To write the list to a text file, the -LIST command is followed by a
pathname, for example:

    OK, {{ekf jimmy>macro -list jimmy>macro.tf}}
    [Edit Keyword File 3.2]
    OK, {{slist jimmy>macro.tf}}
    -DL
    -FORM abc
    def
    ghi
    -NOTIFY now
    -USING special
    OK,

The .TF suffix on the listing pathname is optional, and will be added
by EKF if omitted.  No sorting or indenting occurs when a keyword file
is written to a text file, since this could change its meaning (i.e.
if the -USING keyword is in the list).

The -EXPAND option (abbreviated -EXP) can be used with -LIST.  It
causes all -USING keywords to be expanded, for example:

    OK, {{ekf jimmy>macro -list}}
    [Edit Keyword File 3.2]
       -DL
       -FORM
          abc
          def
          ghi
       -NOTIFY now
       -USING special
    OK, {{ekf special -list}}
    [Edit Keyword File 3.2]
       -NO_FORMAT
       -WRAP
    OK, {{ekf jimmy>macro -list -expand}}
    [Edit Keyword File 3.2]
       -DL
       -FORM
          abc
          def
          ghi
       -NOTIFY
       -NO_FORMAT
       -WRAP
    OK,

The -LIST and -CREATE commands can be used together to modify keyword
files.  First the -LIST command is used with output directed to a
text file.  Next, a text editor such as ED is used to modify the text
file.  Then the EKF -CREATE command is used to re-create the keyword
file from the text file.  For example (user input is underlined):


     OK, {{ed jimmy>macro.tf}}
     EDIT
     {{p23}}
     .NULL.
     -DL
     -FORM abc
     def
     ghi
     -NOTIFY now
     BOTTOM
     {{t}}
     {{n}}
     -DL
     {{l -NOTIFY}}
     -NOTIFY now
     {{c/now//}}
     -NOTIFY
     {{file}}
     JIMMY>MACRO.TF
     OK, {{ekf jimmy>macro -create jimmy>macro.tf}}
     [Edit Keyword File 3.2]
     OK,

This may be the best way to edit a long or complex keyword file,
especially if many changes are needed.  An easier way to make quick
changes is to use the keyword file editor command -EDIT.
.dn  {{The EKF command -EDIT}}
This command is used to modify an existing keyword file or create a
new one.  It can be abbreviated to -E.  Like the -CREATE command, this
command may be followed by the pathname of a keyword list in TEXT
format, by a keyword list in command line format, or by nothing
(indicating that the keyword list will be entered from the terminal).
EKF uses the keyword list given to edit the keyword file's keyword
list.  In the -LIST example above, the value "now" was removed from
the -NOTIFY keyword.  This could have been done easily with -EDIT
(user input is underlined):

    OK, {{ekf jimmy>macro -list}}
    [Edit Keyword File 3.2]
       -DL
       -FORM
          abc
          def
          ghi
       -NOTIFY now
    OK, {{ekf jimmy>macro -edit}}
    [Edit Keyword File 3.2]
    Please enter keyword list.  The first item must be a keyword.
    > {{-notify}}
    >
    OK, {{ekf jimmy>macro -list}}
    [Edit Keyword File 3.2]
       -DL
       -FORM
          abc
          def
          ghi
       -NOTIFY
    OK,

This could also have been done on the command line:

    ekf jimmy>macro -edit -notify

Keywords can be deleted using the carot in the edit list:

    OK, {{ekf jimmy>macro -list}}
    [Edit Keyword File 3.2]
       -DL
       -FORM
          abc
          def
          ghi
       -NOTIFY
    OK, {{ekf jimmy>macro -edit -^dl -form jkl mnop -suspendable}}
    [Edit Keyword File 3.2]
    OK, {{ekf jimmy>macro -list}}
    [Edit Keyword File 3.2]
       -FORM
          JKL
          MNOP
       -NOTIFY
       -SUSPENDABLE
    OK,

Notice that even though the two values for -FORM, jkl and mnop, were
typed in lower case, they were changed to uppercase.  This is always
the case with command line format values, unless single quotes are
used.  See section KEYWORD LISTS - COMMAND LINE FORMAT for more
information.

The next example shows how a TEXT file can be used to edit a keyword
file:

    OK, {{ekf jimmy>macro -list}}
    [Edit Keyword File 3.2]
       -DL
       -FORM
          abc
          def
          ghi
       -NOTIFY
    OK, {{slist example.tf}}
    -form blank
    -at home
    -line_numbers
    OK, {{ekf jimmy>macro -edit example}}
    [Edit Keyword File 3.2]
    OK, {{ekf jimmy>macro -list}}
    [Edit Keyword File 3.2]
       -AT home
       -DL
       -FORM blank
       -LINE_NUMBERS
       -NOTIFY
    OK,

See section EDITING KEYWORD LISTS for more information.
.dn  {{EKF and the MASTER keyword file}}

EKF allows the master keyword file to be specified with the -Master
option or by entering its pathname (PRINTMASTER*>MASTER).  Both forms
have the same effect:  the master keyword file is modified and the
internal version is reloaded in the shared segment; new keywords are
immediately available.  However, if a pathname is used to specify the
master keyword file on a remote system, the internal version will not
be reloaded on the remote system (since it resides in a shared
segment).  EKF must be run ON THE REMOTE SYSTEM to cause the new
master list to be reloaded.

Extreme caution should be exercised when manipulating the master
keyword file.  Due to the importance of the master keyword file, EKF
takes special precautions when it is manipulated.  When either the
-CREATE or -DELETE command is used, EKF will request verification.
.du 2
.dn  {{Creating new keyword abbreviations}}

Abbreviations for commonly used keywords may be created by the System
Adminstrator.  An abbreviation is simply a keyword, with one value,
that may be used in place of another keyword when entering a keyword
list in command line format.  The value of an abbreviation is the
name of the keyword that will be inserted whenever the abbreviation is
used.  Abbreviations are created in the master keyword file and are
designated by the :a flag.  The following sequence shows how to create
abbreviations for the keywords:  -JOB_NAME, -LINE_NUMBERS, and
-COPIES:

    OK, ekf -m -edit
    [Edit Keyword File 3.2]
    > -as:a job_name
    > -ln:a line_numbers
    > -c:a copies
    >
    OK,

Note, EKF does not check to see if the value given is a valid keyword;
instead, the value is checked when the abbreviation is expanded.

The following abbreviations have already been included in the master
keyword file:

    Abbreviation     Keyword
    -AS              -JOB_NAME
    -CF              -COPYFILE
    -CP              -COPIES
    -FM              -FORM
    -LN              -LINE_NUMBERS
    -NB              -NO_BANNER
    -NF              -NO_FORMAT
    -PH              -PAGE_HEADER
    -SB              -SINGLE_BANNER
.*insert *>doc>sa>keyword_file_acls.runi
.*insert *>doc>sa>creating_new_keywords.runi
.*dl 1
.*insert *>doc>sa>monitors_and_masters.runi
.*
.*   End removed sections
.*
.dl 1
.dskip 0 1 0
.dskip 1 -1 0
.oh///APJ - Add Print Job/
.dn  {{APJ - Add Print Job}}

This command is used to queue files for printing.  It has the
following basic forms:

   (1)  APJ  pathname  options
   (2)  APJ  -OPEN unit  options
   (3)  APJ  -HELP

In the first form, PATHNAME will be queued for printing.  In the
second form, a job will be added to the queue and a file will be
opened for writing on UNIT; if UNIT is not given, unit 2 will be
used.

This is equivalent to the following SPOOL commands:

   (1)  SPOOL  pathname  options
   (2)  SPOOL  -OPEN  options
        SPOOL  -OPEN  -TUNIT unit

The job keyword list is created in 6 steps:

   (1)  Default keywords are inserted
   (2)  JOB_KEYWORDS are taken from the value of the global variable
         ".APJ_DEFAULTS" if it exists; keywords are in command line
         format.
   (3)  Finally, OPTIONS from the command line are inserted.

.dd  {{Optional Job Keywords}}


   -ACCT_INFO  Causes a user-defined message to be written with the
               accounting record for this job.  It has the form:

                  -ACCT_INFO message

   -ACCOUNTING Causes paper usage accounting to be enabled for the job.

   -AT         Forces the job to be printed on a device at one of the
               specified destinations.  It has the form:

                  -AT dest1 dest2 ...

               Each DEST must be a valid destination (see your System
               Administrator for these).

               This is similar to Prime's -AT option.

   -BANNER     Prints a message on the banner page.  It has two forms
               on the command line:

                  (1)  -BANNER msg1 ... msg10
                  (2)  -BANNER

               In form one, up to 10 single quoted message lines may
               be given.

               In form two, APJ will prompt you with ">" and ask for
               the message.  You may enter up to 10 lines, entering a
               blank line to terminate the message.

               Message lines can be up to 80 characters long.

   -CHARS_PER_LINE
               Sets the number of characters to be printed per line.
               Lines longer than this will be wrapped around, or
               truncated depending on whether -WRAP and -TRUNCATE are
               used.  It has the form:

                  -CHARS_PER_LINE n

               N must be greater than zero and less than 500.
               This keyword overrides the device's value.

   -COPIES     Sets the number of copies to print.  It has the form:
   (abbr -CP)
                  -COPIES n

               N must be greater than zero.  If this keyword is
               omitted, one copy will be printed.

   -COPYFILE   Copies the print file to the queue.

               If this keyword is omitted, a copy of the file is not
               made in the print queue, and devices will print the job
               from the original file.

               This keyword is supplied automatically when the option
               -OPEN is used.

   -DEADLINE   Sets the date/time the user wants the job to START
               printing.  It has two forms:

                  (1)  -DEADLINE NOW
                  (2)  -DEADLINE date

               In the first form, the starting deadline will be set
               to the current date/time.  In the second form, the
               deadline will be set to the date/time given.  DATE
               must not have already elapsed and must be one of the
               standard Primos forms:

                  (1)  YY-MM-DD.HH:MM:SS.DOW
                  (2)  MM/DD/YY.HH:MM:SS.DOW
                  (3)  DD MM YY HH:MM:SS DAY_OF_WEEK

               Missing fields are automatically supplied with the
               current time/date information.  Format 3 must be quoted
               since it contains blanks.

               When the deadline expires, the job will be printed on
               the next available device (after, of course, any jobs
               whose deadline expired earlier).

               The job may print sooner than the deadline.

               This keyword may not be used when the keyword -PRIORITY
               has a value of zero.

   -DEFER      Defers the job until the specified date.  It has the
               form:

                  -DEFER date

               DATE must be one of the standard Primos date forms (see
               option -DEADLINE) and must not have already elapsed.

               This is similar to Prime's -DEFER option.

   -DEVICE_NAME
               Forces the job to be printed on one of the devices
               specified.  It has the form:

                  -DEVICE_NAME name1 name2 ...

               Each NAME must be a valid device name (see your System
               Administrator for these).

   -DL         Deletes the original file after successfully printing
               the last copy.  This requires D access to the parent
               directory.  The file will not be deleted if it is
               delete protected, or if -DL is removed from the job
               while it is printing.

   -FORM       Forces the job to be printed on one of the form types
   (abbr -FM)  listed.  It has the form:

                  -FORM type1 type2 ...

               Each TYPE must be a system defined FORM type (see your
               System Administrator for these).

               This is similar to Prime's -FORM option.

.need 12
   -FTN        Prints the job in FTN format, with carriage control in
               column 1.  Carriage control characters recognized are:

                         +       skip zero lines
                       space     skip 1 line
                         0       skip 2 lines
                         -       skip 3 lines
                         1       skip to channel 1 (page eject)
                         2       skip to channel 2 (etc. to channel 9)
                         A       skip to channel 10
                         B       skip to channel 11
                         C       skip to channel 12
                       other     skip 1 line

   -HOLD       Holds the job until released by either the user or
               operator.

   -JOB_NAME   Sets the name of the job.  It has the form:
   (abbr -AS)
                  -JOB_NAME print_name

               If this keyword is omitted, PRINT_NAME will be set to
               the filename portion of the job's pathname.  If the
               option -OPEN is used, PRINT_NAME will be set to blanks.

               This is similar to Prime's -ALIAS (or -AS) option.

   -LINES_PER_PAGE
               Sets the number of print lines on the page.  It has the
               form:

                  -LINES_PER_PAGE n

               N must be greater than zero.
               This keyword overrides the device's value.

   -LINE_NUMBERS
   (abbr -LN)  Prints line numbers on the left edge of the page.

               Line numbers will only be printed in PAGED mode and
               NO_FORMAT mode.

               This is similar to Prime's -LNUM option.

   -NO_BANNER  Suppresses job information on the banner page.
   (abbr -NB)
               The user banner message (see option -BANNER) will still
               be printed.  If no user message is given, no banner
               page will be printed.

               This is similar to Prime's -NOHDR option, except a
               blank page is not printed.

   -NO_FORMAT  Prints the job in Prime's no format mode.
   (abbr -NF)
               This is similar to Prime's -NOFMT option.

   -NO_WAIT    Allows the job to begin printing while it is still
               being written.

               If the option -COPYFILE is not used, the file's read/
               write lock must be UPDT or NONE to allow the device
               to open the file for reading while it is open
               for writing.  If this is NOT done, the job will be
               printed when it is closed.

               This is especially useful for RJE jobs, since the job
               can begin printing while still being transmitted.

   -NOTE       Puts a note to the operator on the job.  It has the
               same form and restrictions as -BANNER.

   -NOTIFY     Notifies the user when the job is completed.  It has
               two forms:

                  (1)  -NOTIFY
                  (2)  -NOTIFY NOW

               The device will send the user a message via the Primos
               MESSAGE facility after the last copy has been printed.
               If form one is used, the message will be deferred.  If
               form two is used, the message will be sent immediately
               if possible, and deferred otherwise.

   -PAGE_HEADER
   (abbr -PH)  Sets the page header line in PAGED mode.  It has the
               form:

                  -PAGE_HEADER message

               MESSAGE must be quoted if it contains blanks.  If
               MESSAGE is blank, no page header will be printed.

               If this keyword is omitted, the default page header
               "<pathname>, -- Last modified <date>" will be printed.

   -PARALLEL   Allows multiple copies to be printed simultaneously
               on different printers.

   -PAUSE_EJECT
               Forces the job to be printed on a device that has sheet
               feed capability.  It has two forms:

                  (1)  -PAUSE_EJECT
                  (2)  -PAUSE_EJECT RING

               Sheet feeding is only supported on TTY devices.  Both
               forms will cause the device to pause after each page
               until a character is typed.  In the second form, in
               addition to pausing, the bell will ring.

   -PRIORITY   Sets the job's priority.  It has the form:
   (abbr -PR)
                  -PRIORITY n

               N must be greater than or equal to zero and less than
               1000.  If N is zero, the job will be scheduled in
               first-in-first-out fashion with all other priority zero
               jobs.  If N is not zero, the job with the largest
               priority will be printed first.  The option -DEADLINE
               may not be used with priority zero jobs.

               This keyword is required for all jobs.

   -QUEUE      Specifies the queue to put the job in.  It has the
               form:

                  -QUEUE queue_partition

               If this keyword is omitted, the job will be added to
               the first queue found.

               If the print queue is moved to another partition, the
               value for this keyword will automatically be adjusted.

               This keyword is restricted to the command line and may
               not appear in a keyword file.

   -QUIET      Supresses the printing of any messages in large
               (banner) letters during device positioning.

               This is useful for forms with sequence numbers, e.g.
               payroll checks.

.need 16
   -SET_VAR    Sets a global variable to the JOB_ID of the job added.
   (or -SV)    It has the form:

                  -SET_VAR global_variable

               For example:

                  OK, APJ MY_FILE -SV .MY_JOB_ID
                  [Add Print Job 2.0]
                  Job 0 MY_FILE added to queue SYS.
                  OK, TYPE My job is number %%.my_job_id%%.
                  My job is number 0.
                  OK,

               This keyword is restricted to the command line and may
               not appear in a keyword file.

   -SUSPENDABLE
               Indicates that copies of the job may be suspended.
               If a copy is suspended by the operator or interrupted
               by a hardware failure, it will resume printing at the
               top of the page that was printing when the copy was
               suspended.  This is especially useful when working
               with large print files.  For example:

                  (1)  Operators may suspend large jobs to allow
                       smaller or more important jobs to print.
                  (2)  Jobs may be resumed after problems like system
                       halts and network/RJE errors.

               If this keyword is omitted, the job is not suspendable
               and will be RESTARTED after a network/RJE error.  This
               is how Prime's spooler works.

   -TRUNCATE   Causes the device to truncate any line which is longer
               than the paper width (value of -CHARS_PER_LINE).

   -UPPERCASE  Forces the job to be printed on a device that prints in
               uppercase only.

   -WRAP       Wraps lines whose length exceeds the line length given
               by the -CHARS_PER_LINE keyword, or the device's default
               line length if this keyword is omitted.

               Lines are ALWAYS truncated after 500 characters.

.dn  {{Job Keywords Always Inserted by APJ}}

As mentioned above, the job keyword list is created in 5 steps.  In
step 1, internal keywords are inserted by the APJ command.  The
following is a list of those keywords.


   -COPIES_COMPLETED
               This is the number of copies that have been completed.
               Set to zero initially, it is updated when a device
               completes a copy.  It has the form:

                  -COPIES_COMPLETED n

               N is greater than or equal to zero.

   -COPIES_LEFT
               This is the number of copies that are left to print.
               Set to the number of copies requested initially, it is
               updated when a device completes a copy.  It has the
               form:

                  -COPIES_LEFT n

               N is greater than zero.

   -COPIES_PRINTING
               This is the number of copies that are currently
               printing.  Set to zero initially, it is updated when
               a device begins a copy.  It has the form:

                  -COPIES_PRINTING n

               N is greater than or equal to zero.

               N may be incorrect if a system error occurs while the
               job is printing (e.g. Primos file system errors).

   -DATE_MODIFIED
               This is the date/time that the print file was last
               modified.  It has the form:

                  -DT_MODIFIED date

               DATE is of the form:

                  DD MON YY HH:MM:SS: DAY_OF_WEEK

   -DATE_QUEUED
               This is the date/time that the job was queued.
               It has the same form as -DATE_MODIFIED.

   -JOBID      This is the job's number in the queue.  It has the
               form:

                  -JOBID n

               N is greater than or equal to zero.

   -PATHNAME   This is the pathname of the print file.  It has the
               form:

                  -PATHNAME pathname

               PATHNAME is a complete Primos pathname.  If the option
               -OPEN is used, PATHNAME will be set to:

                  File opened in Print Queue

   -PROJECT    This is the Primos project of the user submitting the
               job.  It has the form:

                  -PROJECT name

   -SIZE       This is the size of the print file rounded to the
               nearest disk record.  It has the form:

                  -SIZE n

               If the option -OPEN is used, N is the current size of
               the print file.  This will be preceeded by a plus sign
               (+) if the job is still being written.

   -USER_SYSTEM
               This is the Primos system id of the user submitting the
               job.  It has the form:

                  -USER_SYSTEM name

   -USER       This is the user id of the user submitting the job.  It
               has the form:

                  -USER name
.du
.oh///CPJ - Change Print Job/
.dn  {{CPJ - Change Print Job}}

This command is used to change the keyword list of jobs already
queued.  It has the following basic forms:

   (1)   CPJ  job_list  queue_option  edit_keywords
   (2)   CPJ  -HELP

In the first form, JOB_LIST is a list of the id numbers of the jobs to
change.  Up to 10 jobs may by changed with one command.  JOB_LIST has
the form:

   -JOB jobid_1 ... jobid_10

Job id's must be greater than or equal to zero.  JOBID_1 is required;
JOBID_2 through JOBID_10 are optional.

QUEUE_OPTION gives the partition of the print queue in which jobs are
to be changed.  This is optional and has the form:

   -QUEUE partition

If this keyword is omitted, the first print queue that is found will
be used.

EDIT_KEYWORDS is a keyword list that is used to EDIT the keyword lists
of the jobs specified (see EDITING KEYWORD LISTS).  The keywords in a
job keyword list may be separated into 2 groups:

   (1)  Internally protected, system-defined keywords
   (2)  All other keywords

Keywords in group 1, internally protected, system-defined keywords,
may not be changed or modified in any way.  An attempt to do so will
cause an error message to be printed.  The keywords in this group
include:

               -COPIES_LEFT            -PATHNAME
               -COPIES_PRINTING        -PROJECT
               -COPIES_COMPLETED       -QUEUE
               -COPYFILE               -SIZE
               -DT_MODIFIED            -SYSTEM
               -DT_QUEUED              -TRANID
               -JOBID                  -UNIQUE_ID
               -NO_WAIT                -USER

Keywords in the other group include any site-defined keywords and all
unprotected system-defined keyword (see APJ for a list of
system-defined  keywords), with the exception of the ones listed
above and those restricted to the APJ command line.

Operators may change any job in any queue.

Except for -DL and -NOTIFY, changing the job keyword list will only
affect copies which are not currently printing.
.oh///DPJ - Delete Print Job/
.dn  {{DPJ - Delete Print Job}}

This command is used to delete jobs from the print queue.  It has the
following basic forms:

   (1)  DPJ  job_list  queue_option
   (2)  DPJ  -HELP

In the first form, JOB_LIST is a list of the id numbers of the jobs to
delete.  Users or operators may delete up to 10 jobs at once.
JOB_LIST has the form:

   jobid_1 ... jobid_10

Job id's must be greater than or equal to zero.  JOBID_1 is required;
JOBID_2 through JOBID_10 are optional.

This is equivalent to the SPOOL command:

   SPOOL -CANCEL jobid_1 ... jobid_10

QUEUE_OPTION gives the partition of the print queue that jobs are to
be deleted from.  This is optional and has the form:

   -QUEUE partition

If this keyword is omitted, the first print queue that is found will
be used.

Users may only delete their own jobs; that is, ones that have the same
USER and PROJECT id.  Operators may delete any job.

When a job is deleted, any copies currently printing will be dropped.
.oh///LPJ - List Print Job/
.dn  {{LPJ - List Print Job}}

This command is used to print the keyword list of jobs already queued.
It has the following basic forms:

   (1)  LPJ  job_id  -LIST pathname  queue_option
   (2)  LPJ  -HELP

In the first form, the keyword list of the job with the id JOB_ID will
be listed.  If the option -LIST is used, the keyword list will be
written to the file PATHNAME, otherwise it will be printed on the
user's terminal.  The keyword list is printed in TEXT format.  (see
KEYWORD LISTS - TEXT FORMAT for a description of text format.)

QUEUE_OPTION specifies the print queue to use.  This is optional and
has the form:

   -QUEUE partition

If this keyword is omitted, the first print queue found will be used.
.oh///LPQ - List Print Queue/
.dn  {{LPQ - List Print Queue}}

This command is used to list, in tabular form, certain keywords of
certain jobs in a print queue.  It has the following forms:

   (1)  LPQ  queue_option  select_option
   (2)  LPQ  -HELP

QUEUE_OPTION specifies the queue or queues to be listed.  It is
optional and has the form:

   -ALL                 List all queues, this is equivalent to the
                        SPOOL command:  SPOOL -LIST *
   -QUEUE partition     List the print queue on the partition given.

If this option is omitted, the first print queue found is listed, this
is equivalent to the SPOOL command:  SPOOL -LIST

SELECT_OPTION specifies which jobs to list.  Only jobs which "match"
the keyword list given will be listed.  It is optional and has the
following form:

   -SJ keyword_list

For example:

   LPQ -SJ -FORM STOCK WHITE -USER MY_USER_ID

This command will list all jobs on form STOCK or WHITE, submitted by
the user MY_USER_ID.

If keywords -USER, -PROJECT, or -SYSTEM are given without a value the
program will supply default values.

The values of the following keywords will be listed.  Values too long
to fit in the field size are truncated.  To see the complete values,
use LPJ.

   -AT
   -COPIES_LEFT
   -COPIES_PRINTING
   -COPIES_COMPLETED
   -FORM
   -JOB_NAME
   -JOBID
   -USER
   -PRIORITY
   -SIZE                The value of this keyword is the size of the
                        print file in disk records.  If the value is
                        preceeded by a plus sign then the file is still
                        being written and the file size is the CURRENT
                        size.  If no value is listed the file is
                        unknown.

The presence of any of the following keywords will cause a code to be
listed under the heading OPT.

   KEYWORD     CODE     MEANING

   -DEFER      d        the job is {{D}}eferred
   -HOLD       h        the job is {{H}}eld
   -NO_WAIT    o        don't wait for the job to close; print it
                        while it is still {{O}}pen for writing
                        (this does not mean the job IS open)
   -NOTE       n        job has a {{N}}ote for the operator
.oh///PROP Replacement/
.dn  {{PROP replacement command}}

If PrintMaster has been configured to perform all print operations,
Prime's PROP command will be replaced by a CPL program that
translates PROP options into equivalent PrintMaster commands.  This
allows a site to switch from Prime's spooler to PrintMaster without
retraining operators or converting command files.  The new PROP
command has the following basic forms:

   (1)  PROP  command_options  -PRIME
   (2)  PROP  command_options

In the first form, the command will be passed as is to Prime's PROP
command; this allows a site to completely switch to PrintMaster while
the Prime's spoolers are emptying Prime's SPOOLQ.

In the second form, the command will be translated into equivalent
PrintMaster commands.  If your System Administrator has enabled
automated retraining, the equivalent PrintMaster commands will be
listed.  The following options are supported (any discrepancies are
noted):

   OPTION                           DISCREPANCY
   -ABO, -ABORT
   -BAC, -BACKUP                    Will backup 3 printed pages.
   -CON, -CONTINUE
   -DIS, -DISPLAY                   Lists the devices keyword list.
   -DRO, -DROP                      Will drop all copies currently
                                    printing.
   -HAN, -HANG                      Pauses the device when it is idle.
   -HAN, -HANG NOw
   -HAN, -HANG FInish
   -HAN, -HANG IDle
   -LIN, -LINEUP n                  Restarts the job and enters ALIGN
                                    mode for the next N printed pages.
                                    (If N is omitted, 1 is assumed.)
   -RES, -RESTART
   -STA, -START
   -STO, -STOP                      Stops the device when it is idle.
   -STO, -STOP NOw
   -STO, -STOP FInish
   -STO, -STOP IDle


The following commands are not supported:

   COMMAND           RECOMMENDED ACTION

   PROP -CREate      Use the CDD command.
   PROP -DELete      Use the Primos DELETE command.
   PROP -MODify      Use the DC -EDIT or -LOAD command.
   PROP -STAtus
.oh///SPOOL Replacement/
.dn  {{SPOOL replacement command}}

If PrintMaster has been configured to perform all print operations,
Prime's SPOOL command will be replaced by a CPL program that
translates SPOOL options into equivalent PrintMaster commands.  This
allows a site to switch from Prime's spooler to PrintMaster without
changing most command files and CPL programs or retraining users.  The
new SPOOL command has the following basic forms:

   (1)  SPOOL  command_options  -PRIME
   (2)  SPOOL  command_options

In the first form, the command will be passed as is to Prime's SPOOL
command.  Note that jobs will always be added to the PrintMaster print
queue, since Prime's SPOOL command calls the shared procedure SPOOL$,
which has also been replaced.  However, options -LIST and -CANCEL will
still list and modify Prime's spool queue.

In the second form, the command will be translated into equivalent
PrintMaster commands.  If your System Administrator has enabled
automated retraining, the equivalent PrintMaster commands will be
listed.  The following options are supported with any discrepancies
noted:

           {{OPTION}}                      {{DISCREPANCY}}

   -AS, -ALIAS name
   -A, -AT destination
   -CA, -CAN, -CANCEL n1 ... n10    Only 10 jobs may be specified.
                                    Form "-CANCEL PRTxxx"  or
                                    "-CANCEL xxx" can be used.
   -COP, -COPIES n
   -D, -DE, -DEF, -DEFER time       If time has already elapsed, the
                                    job is NOT queued.  Prime's will
                                    assume next day printing.
   -FO, -FOR, -FORM type
   -F, -FT, -FTN
   -LI, -LIS, -LIST                 Only the following "-LIST" options
                                    are supported:
                                       -LIST
                                       -LIST *
                                       -LIST OWn
                                       -LIST DEfer
                                       -LIST FOrm [type]
                                    Any others will be ignored.
   -L, -LN, -LNU, -LNUM
   -N, -NO, -NOH, -NOHEAD           A blank page will not be printed.
   -NOF, -NOFMT
   -O, -OP, -OPE, -OPEN
   -P, -PL, -PLO, -PLOT n
   -TU, -TUN, -TUNIT n              This is only used with -OPEN.
   -T, -TY, -TYP, -TYPE type


The following options are ignored:

   -C, -CO, -COB, -COBOL
   -E, -EX, -EXP, -EXPAND
   -FU, -FUN, -FUNIT
   -H, -HO, -HOM, -HOME

.oh///Form Definitions/
.dn  {{FORM DEFINITIONS}}

In PrintMaster, form and device characteristics are maintained
separately.  This eliminates redundancy by allowing several devices
to share the same form definitions.  Also, should the form
characteristics ever change, only the form definition file would need
to be modified.

.dd  {{System required keywords}}

The following keywords will be in every form definition file:

   -CHARS_PER_LINE
               Sets the length of the print line.  It has the form:

                  -CHARS_PER_LINE n

               N must be greater than zero.

               N must be set to the last printable column on the
               paper.  For long stock paper (14 x 11) this will
               probably be 132; for narrow stock paper (8.5 x 11) this
               will probably be between 75 and 80, depending on the
               left edge alignment.

               If the keyword -WRAP is in the job keyword list, then
               lines longer than N will be wrapped; if -TRUNCATE is in
               the job keyword list, then they will be truncated after
               N characters.

               This is similar to the WIDTH option in Prime's PROP
               command.

   -LINES_PER_PAGE
               Sets the number of physical lines on the paper.  It has
               the form:

                  -LINES_PER_PAGE n

               N must be greater than zero.

               For long stock paper (14 x 11) at 6 lines per inch,
               this will be 66; for short stock paper (11 x 8.5) at 8
               lines per inch, this will be 68.

               It is very important that this be set correctly,
               because it is used in job positioning, PAGED mode
               output, and EVFU set up on certain devices.

               This is similar to the LINES option in Prime's PROP
               command.

.dn  {{Site required keywords}}

Some sites may require special keywords to be added to their form
definitions, for example, default fonts and margins.  These can be
added when the form is created, or added later with EKF.
.dn  {{Form definition files}}

A form definition file is used to store the form name, its synonyms,
characters per line, lines per page, and optional site defined
keywords.  A form definition file is used by the operator to inform a
device of its current print characteristics (i.e. the form type, the
paper dimensions, etc.).  For example, to load form STOCK on device
PR0, the operator may type:

   OK, DC PR0 -LOAD STOCK    (This will be explained in detail later.)

.dd  {{CFD - Create Form Definition}}

This command is used to create form definition files.  It has the
basic forms:

   (1)  CFD

   (2)  CFD  -HELP


FORM_OPTION is optional; it has the form:

   -FORM type

TYPE must be valid filename and less than 30 characters.

If this option is given, the command will ask for the characteristics
of this form type and stop; otherwise, the command will allow you to
enter a series of form types.

When entering a form definition file, you will be asked for the
synonyms of the form, its lines per page, and characters per line.

.dn  {{Where are form definition files kept?}}

All form definition files are stored in the directory
PRINTMASTER*>LIBRARY.  This allows the operator to mount a new form
on a device without requiring him to use a pathname or be attached to
some special directory.  To obtain a complete list of all form types,
ATTACH to this directory and use the LD command.  A form file may be
listed using the EKF -LIST command (see THE KEYWORD FILE EDITOR EKF).

.dn  {{System required keywords}}

PrintMaster requires the following keyword in every form definition
file:

   -FORM       Sets the form type and all of its synonyms.  It has the
               form:

                  -FORM type synonym_1 synonym_2 ...  synonym_N

               TYPE is required and must be a valid filename, less
               than 30 characters.  SYNONYM_1 through SYNONYM_N are
               optional and may have any value.  If users at your site
               are accustomed to using form types which are not valid
               filenames, they should be made synonyms.  For example:

                  -FORM STOCK ' '
                  -FORM NARROW_STOCK '8 X 11'
                  -FORM FOUR_PART_STOCK 4PRT

               This is similar to the PROP environment options PAPER
               and FORM.

               When a device has the keyword -FORM A B C D in its
               keyword list, it will print any jobs queued with form
               type A, B, C, or D.
.dn  {{Changing a form definition}}

There are two ways to change a form definition file.  The first
method is to change the keyword file using the EKF command (see THE
KEYWORD FILE EDITOR EKF).  The second way (and probably the easiest),
is to run CFD and recreate the form.

.du
.eject
.dn  {{Example form files}}

   OK, attach printmaster*>library

   {{List the form type STOCK.}}

   OK, ekf stock -list
   [Edit Keyword File 2.0]
      -FORM STOCK
      ' '
      -CHARS_PER_LINE 132
      -LINES_PER_PAGE 66
.du 2
.oh///Devices/
.dn  {{DEVICES}}

.dd  {{CDD - Create Device Definition}}

This command is used to create devices.  It has the following basic
forms:

   (1)  CDD

   (2)  CDD  -HELP


When creating a device, you will be asked for several of its
characteristics.  These include its name, destination, default FORM
type, speed, job size limit, and its type.  You will also be asked for
any special keywords that the device requires.

If the default FORM type does not exist, you will be asked to either
create it or select a different FORM type.  If you elect to create the
FORM type, the command CFD (Create Form Definition) will be run.
Should this fail for any reason, neither the FORM nor the DEVICE file
will be created.

The device's type describes the kind of printer being used (i.e.
DataProducts, Printronix, etc.) and how it is connected to the system
(i.e. AMLC, TTY, PARALLEL, etc.).  From the information supplied, CDD
will determine the name of the level 3 device driver to use.  The
following table lists the drivers known to CDD.

   DEVICE               NAME     COMMENTS

   DataProducts         L3$DP    Band printer supplied by Prime.
   Printronix           L3$PX    Dot matrix printer supplied by Prime.
   Xerox 2700-II        L3$X2700
   HP LaserJet          L3$LASERJET

If the printer is of another type (i.e. a Versatec plotter, a
terminal, an ordinary AMLC device, etc.), the standard level 3 driver,
L3$STANDARD, is used.

.dn  {{Changing a DEVICE definition}}

There are two ways to change a DEVICE definition file.  The first
method is to change the keyword file using the EKF command (see THE
KEYWORD FILE EDITOR EKF).  The second way (and probably the easiest),
is to rerun CDD and recreate the device.

.dn  {{Device file organization}}

PrintMaster devices created by CDD use four files: a CPL program
called the device startup file, a keyword file called the device
definition file, a timed-out keyword file, and a Primos comoutput
file.  These are completely documented in this section, although there
is no need to reference them under normal circumstances.  All device
files are kept in the system directory, PRINTMASTER*.  To obtain a
complete list of all devices, ATTACH to PRINTMASTER*>DEVICES and use
the LD command.

.dd  {{DEVICE startup files}}

The device startup file is a CPL program that contains instructions
to start a COMO file and invoke the device driver program.  It is
created automatically by CDD when the device is created, and is named
PRINTMASTER*>DEVICES>XXX.CPL, where XXX is the device name.  A
phantom is submitted by the monitor, using this file, in response to
an operator START request (see DC, Device Command, for information on
starting devices).  The phantom's user-id will be the same as the
name of the device.

.dn  {{DEVICE definition files}}

The second file is the DEVICE definition file.  This keyword file
has keywords telling the device which physical device it is to
assign, what its default form type is, the modes of operation
allowed, and so on (see DEVICE KEYWORDS for a complete description).
It has the pathname PRINTMASTER*>DEVICES>XXX.KF, where XXX is the
name of the device.  To list a DEVICE definition file, use the EKF
-LIST command (see THE KEYWORD FILE EDITOR EKF).  For example:

.need 14
   OK, attach printmaster*>devices
   OK, ekf pr0 -list
   [Edit Keyword File 2.0]
      -ASSIGN_DEVICE PR0
      -AT PR0
      -BANNER_LETTER_FILE PRINTMASTER*>BANNER_LETTERS
      -DEVICE_SPEED 10
      -DEVICE_UNIT 0
      -JOB_SIZE_LIMIT 100
      -LEVEL_3_DRIVER L3$DP
      -UPPERCASE
      -USING PRINTMASTER*>DEVICES>L2
      PRINTMASTER*>DEVICES>DEVICE_DEFAULTS.KF
      PRINTMASTER*>LIBRARY>STOCK
   OK,

.dn  {{DEVICE time-out keyword files}}

A feature of PrintMaster allows devices to time-out when idle (and log
back in when there is work to do) and automatically restart after a
system crash.  If a device is allowed to automatically restart or is
currently timed-out, the device will have a special time-out keyword
file with a copy of its current state.  This is to allow the device to
be restarted when there is work for it, and have the same state as
before it logged out or the system crashed.  The device's time-out
keyword file is kept in the directory PRINTMASTER*>DEVICES>TIMEOUT,
and must not be modified in any way.

.dn  {{DEVICE comoutput files}}

While a device is active, Primos error messages such as the print file
was not available or was open, are written to a COMO file named
PRINTMASTER*>COMO>XXX.COMO, where XXX is the device name.  This
file should be checked if a device logs out unexpectedly or won't
print jobs.  It can also be read while the device is active, if
necessary.

.du
.dn  {{Keywords in the DEVICE definition file}}

The DEVICE definition file has keywords to describe all of the
device characteristics.  These keywords may be broken into the
following groups:

   (1)  Keywords recognized by the level 1 driver (all devices)
   (2)  Keywords recognized by the L2 driver (line-oriented devices)
   (3)  Keywords recognized by the level 3 driver
   (4)  Additional scheduling keywords (i.e. -FORM and -AT).

.dd  {{Keywords recognized by the level 1 driver.}}

In general, the keywords recognized by the level 1 driver affect the
device's mode of operation.  They determine the physical device used,
the print mode (currently restricted to line-oriented), the name of
the device, and so on.  These keywords may be divided into required
and optional keywords.

.dd  {{Keywords required by all devices}}

These keywords are required in all DEVICE definition files:

   -LEVEL_2_DRIVER
               Sets the device print mode.  Currently the only mode
               supported is a line-oriented print mode similar to the
               current Prime spooler.  It has the form:

                  -LEVEL_2_DRIVER L2$MAIN

   -LEVEL_3_DRIVER
               Determines the level 3 device driver to be used.  It
               has the form:

                  -LEVEL_3_DRIVER name

               (see CDD for an explaination and listing of level 3
               device driver names).

.dn  {{Optional keywords for all devices}}

The following keywords are optional:

   -ACCOUNTING Sets the name of the paper accounting procedure to be
               called.  Currently only one procedure, L2$ACCOUNTING,
               is supported.  It has the form:

                  -ACCOUNTING L2$ACCOUNTING

   -ASSIGN_DEVICE
               Specifies the Primos device to assign when the
               PrintMaster device is started.  It has the form:

                  -ASSIGN_DEVICE command

               COMMAND is appended to "ASSIGN " and passed to Primos
               to assign the device, for example:

                  -ASSIGN_DEVICE PR0
                  -ASSIGN_DEVICE AMLC TTY 77

               (In the last example, 77 is the AMLC line number in
               octal.)

   -AUTO_RESTART
               Tells the device to automatically restart after system
               crashes.

   -DEVICE_SPEED
               Sets the device speed.  It has the form:

                  -DEVICE_SPEED n

               N is a number 0-9999.  This is used to select the
               fastest device available to print a job.  (devices with
               higher speeds will be selected first).

   -DEVICE_UNIT
               Sets the Primos device unit.  It has the form:

                  -DEVICE_UNIT n

               N must be a valid Primos device unit.  For parallel
               devices, N is:  0 for PR0, 1 for PR1, etc.; for
               serial AMLC devices, N is the line number in
               DECIMAL.  For example:

                  -DEVICE_UNIT 3
                  -ASSIGN_DEVICE PR3

                  -DEVICE_UNIT 63
                  -ASSIGN_DEVICE AMLC TTY 77

   -JOB_SIZE_LIMIT
               Sets the maximum job size (in disk records) this device
               will print.  It has the form:

                  -JOB_SIZE_LIMIT n

               N is a number 0-32767 or the string NONE, in which case
               there is no limit.


   -PARITY
               Allows translation of parity bits on all data sent to
               the device.  It has the form:

                  -PARITY type

               TYPE is the kind of translation to perform:

                   ON      - turn parity bits on
                   OFF     - turn parity bits off
                   SAME    - do not change parity (default)
                   FLIP    - reverse parity bits

   -TIME_BEFORE_SHUTDOWN
               Tells the device to logout when it is idle.  It has the
               form:

                  -TIME_BEFORE_SHUTDOWN n

               N must be greater than zero.  N is the number of
               minutes that a device will remain idle before logging
               out.  The device will be restarted by the monitor when
               there is work for it.

   -UPPERCASE  Tells the device to uppercase all output.  This is also
               a scheduling keyword, and allows the device to print
               jobs queued with -UPPERCASE.

Since it is desired that all devices act in the same manner, some of
these keywords (i.e. -ACCOUNTING and -TIME_BEFORE_SHUTDOWN) are kept
in a special keyword file which is set up the by System Administrator
when the system is configured and referenced by all devices when they
startup.  When a DEVICE file is created, CDD will insert a reference
to this special keyword file:

   -USING PRINTMASTER*>DEVICES>DEVICE_DEFAULTS

.du
.dn  {{Keywords recognized by the L2 driver}}

L2$MAIN is the line-oriented, Prime compatible level 2 driver.  The
keywords recognized by it affect the way the print file is
interpreted.  They determine the banner letter character set used and
the print formats enabled.  These keywords may be broken into two
groups, required keywords and optional keywords.

.dd  {{Keywords required by the L2 driver}}

The following keywords are required by all devices using the level 2
driver:

   -BANNER_LETTER_FILE
               Sets the banner letter character set.  It has the form:

                  -BANNER_LETTER_FILE pathname

               The banner letter character set in PATHNAME is used
               when printing the banner page and during device
               positioning (see SYSTEM FILES AND DIRECTORIES in the
               System Administrator's Guide for more information on
               this file).

(The following keywords are closely associated with the FORM type and
are read from the FORM definition file when a FORM type is LOADED.)

   -CHARS_PER_LINE
               Sets the maximum number of characters per print line.

   -LINES_PER_PAGE
               Sets the number of print lines per page.

.dn  {{Optional keywords recognized by the L2 driver}}

Since it is desired that all devices act in the same manner, the
following keywords are kept in a special keyword file that is set up
when the PrintMaster is shipped and updated by the System
Administrator when the system is configured.  When a DEVICE is
created, CDD will insert a reference to this file:

   -USING PRINTMASTER*>DEVICES>L2

This file may or may not contain the following keywords.  Each of
these keywords tells the device that it has the capability of
performing a particular function.  {{This list should not be changed
unless the System Administrator wants to disable a feature of the
driver.}}

   -FTN                 (See APJ for a description of these keywords.)
   -LINE_NUMBER
   -NO_BANNER
   -NO_FORMAT
   -PAGE_HEADER
   -QUIET
   -SINGLE_BANNER
   -SUSPENDABLE
   -TRUNCATE
   -WRAP

.du
.dn  {{Keywords recognized by the level 3 drivers}}

The keywords recognized by the level 3 drivers vary from driver to
driver.  For example, some recognize these keywords:

   -CHECK_CARRIER
               Causes the carrier to be check on AMLC lines; data is
               only sent out when the carrier is equal to the value
               given.  It has two forms:

                  -CHECK_CARRIER HIGH
                  -CHECK_CARRIER LOW

   -EVFU       Enables the EVFU (Electronic Vertical Format Unit).

   -PAUSE_EJECT
               Causes a terminal device to pause between pages until a
               character is typed.  It has two forms:

                  -PAUSE_EJECT
                  -PAUSE_EJECT RING

               In the second form, the bell is rung after each page.

The following keywords are recognized by L3$X2700 and are explained
in the Xerox 2700-II Driver Manual:

   -HEX
   -FONT
   -LANGUAGE
   -MARGIN
   -SPACE
   -TRAY

.dn  {{Additional scheduling keywords}}

In addition to the keywords listed above, a device may be given any
system-defined or site-defined scheduling keywords.  For convenience,
the default form and device destination are set up by CDD.

.dd  {{Device default FORM type}}

All devices have a default FORM type that will be assumed whenever
devices are started or initialized by the operator.  When a DEVICE is
created, CDD will insert a reference to this form type:

   -USING PRINTMASTER*>LIBRARY>form_type

.dn  {{The destination}}

The destination of the device is the value of the -AT keyword, and is
similiar to Prime's -AT option.  When a DEVICE is created, a list of
destinations for the device may be entered, and the device will print
any jobs with a matching destination.  It has the form:

   -AT destination1 destination2 destination3 ...

.du
.du
.dn  {{DC - Device Command}}

This command allows operators to control devices and has the following
basic form:

   (1)  DC  device_name  options  commands
   (2)  DC  -HELP

In the first form, DEVICE_NAME must be a valid device name.  To obtain
a list of valid device names, type:

   OK, LD PRINTMASTER*>DEVICES>@@.CPL

DC accepts certain options which affect its mode of operation; the
OPTIONS field may contain any of the following:

   -NW         Sends the command without waiting for a response from
               the device.

   -ON         Forwards the command to a device on a remote system.
               It has the form:

                  -ON system_name

               SYSTEM_NAME must be a valid Primenet system name.

   -START      Tells the monitor to start the device.

The COMMANDS field of DC may consist of any combination of commands
recognized by the device.  Each individual command may be accepted or
rejected.; for each rejected command an error message is printed
(provided the option -NW is not given).  The commands which a device
recognizes may be divided into the following groups:

.dd  {{Commands recognized by all devices}}

These commands are recognized by all devices.  In general, they affect
which jobs get scheduled on the device and the device's activity
between jobs.

   -CONTINUE   Continues the device if it is currently paused between
               jobs.

   -CONTINUE_EOJ
               Cancels any pending end-of-job action, such as
               -STOP_EOJ; continues the device if it is currently
               paused between jobs.

   -CONTINUE_IDLE
               Cancels any pending action to be done after the device
               is idle; continues the device if is currently paused
               between jobs.

   -EDIT       Edits the device's keyword list with the keywords
               given.  It has the form:

                  -EDIT edit_keywords

               EDIT_KEYWORDS must be a non-empty list of editing
               keywords.  (See EDITING KEYWORD LISTS for a description
               of editing keywords lists.)

               The edit operation will not effect the job currently
               printing.

               If an error occurs during the edit, the device's
               keyword list is unchanged.

   -INIT       Resets the device to its initial state (at startup) at
               the end of the current job.

               This command will not be accepted if any prior
               -LOAD_IDLE commands have been given.

               If accepted, this command clears any prior -LOAD,
               -LOAD_EOJ, or -INIT_IDLE commands.

   -INIT_EOJ   This is the same as the -INIT command.

   -INIT_IDLE  Resets the device to its initial state (at startup)
               after it is idle.

               This command will not be accepted if any prior -LOAD or
               -LOAD_EOJ commands have been given.

               If accepted, this command clears any prior -LOAD_IDLE
               or -INIT_EOJ commands.

   -LIST       Lists the device's keyword list on the terminal.  (See
               KEYWORD LISTS - TEXT FORMAT for a description of the
               keyword list format.)

   -LOAD       Edits the device's keyword list with the specified
               keyword file given at the end of the current job.  It
               has two forms:

                  (1)  -LOAD pathname
                  (2)  -LOAD filename

               In the first form, the device will load the keyword
               file given by PATHNAME.  In the second form, the
               keyword file FILENAME in the operator's current
               directory will be used; if this file does not exist,
               the keyword file in the library on the device's system
               will be used.

               The keyword file will be read by the device at the end
               of the current job, after any prior -INIT, -INIT_EOJ,
               -LOAD or -LOAD_EOJ commands have been processed.

               This command will not be accepted if any prior
               -LOAD_IDLE commands have been given.

   -LOAD_EOJ   This is the same as the -LOAD command.

   -LOAD_IDLE  Edits the device's keyword list with the specified
               keyword file given after the device is idle.
               It has two forms:

                  (1)  -LOAD_IDLE pathname
                  (2)  -LOAD_IDLE filename

               In the first form, the device will load the keyword
               file given by PATHNAME.  In the second form, the
               keyword file FILENAME in the operator's current
               directory will be used; if this file does not exist,
               the library keyword file will be used.

               The keyword file will be read by the device when it is
               idle, after any prior -INIT_IDLE or -LOAD_IDLE commands
               have been processed.

               This command will not be accepted if any prior
               -LOAD_EOJ commands have been given.

   -PAUSE      Pauses the device if it is currently idle.

   -PAUSE_EOJ  Pauses the device at the end of the current job.

               This cancels a prior -STOP_EOJ command.

   -PAUSE_IDLE Pauses the device when it has been idle for 30 seconds.

               This cancels a prior -STOP_IDLE command.

   -STATUS     Prints the current status of the device on the
               terminal.

   -STOP       Stops the device immediately.

   -STOP_EOJ   Stops the device at the end of the current job.

               This cancels a prior -PAUSE_EOJ command.

   -STOP_IDLE  Stops the device after it is idle.

               This cancels a prior PAUSE_IDLE command.

.dn  {{Commands recognized by the L2 driver}}

These commands are recognized by the line-oriented, Prime compatible,
level 2 driver (L2).  In general, they only affect the current job and
are sometimes necessary to successfully complete a job.  Unless
otherwise noted, all references to a job or the current job refer to
the COPY of the job currently printing; any other copies are
unaffected.

   -ABORT      Aborts the current job.  It has the following forms:

                  (1)  -ABORT
                  (2)  -ABORT n

               In the first form, the job will be aborted immediately.

               In the second form, N must be greater than zero, and
               the job will be aborted after N pages.

               The job is left in the queue and will be restarted from
               the beginning later (see the L2 driver command -SUSPEND
               before using this command).

               This command causes an implicit -CONTINUE command.
               This command will not be accepted if the device is not
               printing.

   -ADVANCE    Advances the print file.  It has the form:

                  -ADVANCE n

               N must be greater than zero.  The device will advance N
               printed pages.  If there are less than N pages left in
               the job, the device prints an error message (on the
               printer) and restarts the current page.

               This command causes an implicit -CONTINUE command.
               This command will not be accepted if the device is not
               printing.

   -ALIGN      Tells the device to enter ALIGN mode.  It has the
               form:

                  -ALIGN n

               N must be greater than zero.  The device will be in
               ALIGN mode for the next N pages of the current job, or
               the next job if none is currently printing.

               When a device enters ALIGN mode, the current page is
               set to the alignment page.  If the device goes off-line
               and then back on-line, the rest of that page will be
               printed and then the device will backup to the
               alignment page.  This will continue until N pages are
               printed without interruption or another level 2
               command is given (such as -CONTINUE).

               This command causes an implicit -CONTINUE command
               before ALIGN mode is entered.

               This command will be accepted when the device is idle,
               and will cause the next job to be started in ALIGN
               mode.

   -BACKUP     Backs up the print file.  It has the form:

                  -BACKUP n

               N must be greater than zero.  The device will backup N
               printed pages.

               This command causes an implicit -CONTINUE command.
               This command will not be accepted if the device is not
               printing.

   -CONTINUE   Clears ALIGN mode; cancels a prior -ABORT, -DROP_COPY,
               -DROP_JOB, -PAUSE, -SUSPEND command; continues printing
               if the current job is paused.

   -DROP_COPY  Drops the copy of the job currently printing on the
               device.  It has the following forms:

                  (1)  -DROP_COPY
                  (2)  -DROP_COPY n

               In the first form, the copy is dropped immediately.

               In the second form, N must be greater than zero, and
               the copy is dropped after N pages.

               The copy is deleted from the queue,and if it is the
               last copy, the job is deleted.

               This command causes an implicit -CONTINUE command.
               This command will not be accepted if the device is not
               printing.

   -DROP_JOB   Drops all copies of the job currently printing on the
               device.  It has the following forms:

                  (1)  -DROP_JOB
                  (2)  -DROP_JOB n

               In the first form, the job is dropped immediately.

               In the second form, N must be greater than zero, and
               the job is dropped after N pages.

               This causes an implicit -DROP_COPY command to be issued
               to all other devices printing copies of the job.  The
               job is deleted from the queue.

               This command causes an implicit -CONTINUE command.
               This command will not be accepted if the device is not
               printing.

   -PAUSE      Pauses the current job.  It has the following forms:

                  -PAUSE
                  -PAUSE n

               In the first form, the job is paused immediately.

               In the second form, N must be greater than zero, and
               the job is paused after N pages.

               This command causes an implicit -CONTINUE command
               before the device pauses.  If a currently paused
               device is given -PAUSE 10, it will continue, print
               10 pages, and then pause again; the operator is not
               required to continue the device first.

               This command will not be accepted if the device is not
               printing.

   -POSITION   Positions the print file to an absolute page number or
               relative to the current page.  It has the following
               forms:

                  (1)  -POSITION n
                  (2)  -POSITION +n
                  (3)  -POSITION -n

               In all forms, N must be greater than zero.  In the
               first form (absolute), the device will position to the
               Nth printed page in the job.  In the second form, the
               device will advance N printed pages from the current
               page; this is equivalent to the L2 driver command
               -ADVANCE.  In the third form, the device will backup N
               printed pages from the current page; this is equivalent
               to the L2 driver command -BACKUP.

               This command causes an implicit -CONTINUE command.
               This command will not be accepted if the device is not
               printing.

   -RESTART    Restarts the job from the beginning.  A new banner page
               will be printed.

               This command causes an implicit -CONTINUE command.
               This command will not be accepted if the device is not
               printing.

   -STATUS     Prints the status of the L2 driver on the terminal.

   -STOP       Stops the current job.  It has the following forms:

                  (1)  -STOP
                  (2)  -STOP n

               In the first form, the job is stopped immediately.

               In the second form, N must be greater than zero, and
               the job is stopped after N pages.

               When a job is stopped, it will be suspended if the job
               is suspendable, otherwise it will be aborted.  (See the
               L2 driver commands -SUSPEND and -ABORT.)

               This command causes an implicit -CONTINUE command.
               This command will not be accepted if the device is not
               printing.

   -SUSPEND    Suspends the current job.  It has the following forms:

                  (1)  -SUSPEND
                  (2)  -SUSPEND n

               In the first form, the job will be suspended at the
               bottom of the current page.

               In the second form, N must be greater than zero, and
               the job will be suspend after N pages.

               A job can only be suspended if it has the keyword
               -SUSPENDABLE in its keyword list.  Otherwise the
               command will be rejected by the device.

               The job will resume later with the page printing when
               it was suspended.

               This command causes an implicit -CONTINUE command.
               This command will not be accepted if the device is not
               printing.
.du 2
.oh///Quick Reference/
.dn  {{QUICK REFERENCE}}
.dlevel 2
.dreset 2 0

.dn  {{Manipulating print jobs}}

.dd  {{Adding a print job}}

To add a print job to the queue, use the APJ command.  This is
followed by the pathname of the file to print, and options to
describe how the job should be printed.  The simplest form is:

     OK, apj myfile
     [Add Print Job 2.0]
     Job 0 MYFILE added to queue SYS.
     OK,

Many options can be included after the filename.  The most common are:

    -FORM ABC                     print the file on form type ABC

    -COPIES 25                    print 25 copies of the file
    -CP 25

    -FTN                          column one in the file is a
                                  carriage-control character; this is
                                  not used with NO_FORMAT

    -AT FLOOR3                    prints the file on a specific printer

    -NO_FORMAT                    print file without any pagination or
    -NF                           carriage-control; this is not used
                                  with FTN

Examples:

   OK, apj jlh>login.cpl -form white
   [Add Print Job 2.0]
   Job 1 LOGIN.CPL added to queue SYS.
   OK,

   OK, apj jlh>login.cpl -form white -hold
   [Add Print Job 2.0]
   Job 2 LOGIN.CPL added to queue SYS.
   OK,

   OK, apj jlh>login.cpl -form white -defer 22:00
   [Add Print Job 2.0]
   Job 3 LOGIN.CPL added to queue SYS.
   OK,

   OK, apj jlh>login.cpl -form white -no_wait
   [Add Print Job 2.0]
   Job 4 LOGIN.CPL added to queue SYS.
   OK,

To print another copy of a job queued by another user, type:

   OK, apj pathname -form type -copyfile

Where PATHNAME is the pathname printed on the banner page and TYPE is
the form type requested by the user.

.dn  {{Listing the print queue}}

Use the LPQ command to monitor print queues.  This command lists all
jobs in the queue with some of their characteristics.  For example:

.u 7
OK, lpq
[List Print Queue 2.0]

Jobs in queue SYS:

 User  Job         Job name          Pri  Size  Form  Copy status    At     Opt
------ --- ------------------------- ---  ---- ------ ----------- --------- ---
JIMMY    0 MYFILE                      5     1 STOCK    1/   /
         1 LOGIN.CPL                   5     1 WHITE    1/   /
         2 LOGIN.CPL                   5     1 WHITE    1/   /                h
         3 LOGIN.CPL                   5     1 WHITE    1/   /                d
         4 LOGIN.CPL                   5     1 WHITE    1/   /                o

Copy status: copies left/printing/completed.
Opt (options): Deferred, Hold, print while Open.
5 jobs in queue.
OK,
.i 7

Under the "Copy status" heading are three fields, describing the
number of copies left to print (includes copies printing), the number
of copies printing, and the number of copies completed.


To list all print queues, including those on remote systems, type:

   OK, lpq -all

.dn  {{Deleting a job}}

Use the DPJ command to delete a print job.  The job number printed by
APJ and LPQ is used to delete the job, for example:

    OK, dpj 0
    [Delete Print Job 2.0]
    Job 0 MYFILE deleted from queue SYS.
    OK,

Up to 10 jobs can be deleted with one DPJ command by using a list of
job numbers:

   OK, dpj 0 1 2 3
   [Delete Print Job 2.0]
   Job 0 MYFILE deleted from queue SYS.
   Job 1 LOGIN.CPL deleted from queue SYS.
   Job 2 LOGIN.CPL deleted from queue SYS.
   Job 3 LOGIN.CPL deleted from queue SYS.
   OK,

If a job has already started printing, it will stop immediately after
it is deleted with DPJ.

Be careful when using this command since operators may delete other
users' jobs.

.dn  {{Changing a job}}

Use the CPJ command to change certain characteristics of a print job,
such as the priority or the form type.  Up to 10 jobs can be changed
with one CPJ command.  The job number printed by APJ and LPQ is used
to change the job, for example:

.u 7

OK, lpq
[List Print Queue 2.0]

Jobs in queue SYS:

 User  Job         Job name          Pri  Size  Form  Copy status    At     Opt
------ --- ------------------------- ---  ---- ------ ----------- --------- ---
JIMMY    0 MYFILE                      5     1 STOCK    1/   /
         1 LOGIN.CPL                   5     1 WHITE    1/   /
         2 LOGIN.CPL                   5     1 WHITE    1/   /                h
         3 LOGIN.CPL                   5     1 WHITE    1/   /                d
         4 LOGIN.CPL                   5     1 WHITE    1/   /                o

Copy status: copies left/printing/completed.
Opt (options): Deferred, Hold, print while Open.
5 jobs in queue.
OK,
.i 7

   OK, cpj 2 -^hold
   [Change Print Job 2.0]
   Job 2 LOGIN.CPL changed in queue SYS.

   OK, cpj 0 -priority 10
   [Change Print Job 2.0]
   Job 0 MYFILE changed in queue SYS.
   OK,
.u 7

OK, lpq
[List Print Queue 2.0]

Jobs in queue SYS:

 User  Job         Job name          Pri  Size  Form  Copy status    At     Opt
------ --- ------------------------- ---  ---- ------ ----------- --------- ---
JIMMY    0 MYFILE                     10     1 STOCK    1/   /
         1 LOGIN.CPL                   5     1 WHITE    1/   /
         2 LOGIN.CPL                   5     1 WHITE    1/   /
         3 LOGIN.CPL                   5     1 WHITE    1/   /                d
         4 LOGIN.CPL                   5     1 WHITE    1/   /                o

Copy status: copies left/printing/completed.
Opt (options): D = Deferred, O = print while Open.
5 jobs in queue.
OK,
.i 7

Notice that the priority of job 0 has been changed to 10 and job 2 no
longer has an "h" in the OPT column.

Be careful when using this command since operators may change other
users' jobs.

.du
.dn  {{Manipulating devices}}

PrintMaster devices are controlled with the DC command.  It has the
basic form:

   DC  device  commands

A brief explanation of the most commonly used commands is given below
(for further information see DC - Device Command).

.dd  {{Starting a device}}

To start a PrintMaster device, use the DC -START command, for
example:

   OK, dc pr2 -start
   [Device Command 2.0]
   OK, stat us

   User                              No  Line Devices
   SYSTEM                             1   asr <PRGDEV> <SYS>
   JIMMY                             68   102 <PRGDEV> <SYS> (3)
   JIMMY                             70   104 <PRGDEV> <SYS> (3)
   JIMMY                             98 phant <PRGDEV> (3)
   BATCH_SERVICE                    101 phant <SYS> (3)
   PR2                              104 phant <SYS> PR2
   PRINTMASTER_MONITOR              105 phant <SYS>
   OK,

Notice that the user-id of the device phantom is the same as the name
given in the start command.

.dn  {{Checking the status of a device}}

To check the status of a device, use the DC -STATUS command.  For
example, when the device is idle:

   OK, dc pr2 -status
   [Device Command 2.0]

   Status of device PR2:
     Driver software is version 2.0
     Device is currently idle.
   OK,

When the device is printing:

   OK, dc pr2 -status
   [Device Command 2.0]

   Status of device PR2:
     Driver software is version 2.0
     Device is currently printing job 1 in queue SYS
     Job name is OPR.INFO
     Pathname is <PRGDEV>PROJ>DOC>OPR.INFO
     Page 11 (disk record 8 of 10) is printing.
     Estimate 2 pages left in job (13 total)
     Total elapsed print time is 1 minute
     Estimate 1 minute to finish (at 10 pages/min)
   OK,

.dn  {{Stopping a device}}

To stop a device immediately, use the DC -STOP command:

   OK, dc pr2 -stop
   [Device Command 2.0]
   OK,

To stop a device after the current job, type:

   OK, dc pr2 -stop_eoj
   [Device Command 2.0]
   OK,

To stop a device after it completes all jobs in the queue, type:

   OK, dc pr2 -stop_idle
   [Device Command 2.0]
   OK,

.dn  {{Changing the device's form type}}

To change the form type, use the DC -LOAD command, for example:

   OK, dc pr2 -load white
   [Device Command 2.0]
   OK,

To change the form type back to the device's default form type:

   OK, dc pr2 -init
   [Device Command 2.0]
   OK,

.dn  {{List of commands}}

This is a list of all commands currently recognized by devices.
Commands with a star (*) accept either of the optional suffixes _EOJ
or _IDLE, for example:

*  -PAUSE                  Pauses the device immediately, after the
                           current job (-PAUSE_EOJ), or when the
                           device is idle (-PAUSE_IDLE).

Some commands accept an optional argument listed in brackets, for
example:

   -PAUSE [n]              Pauses the device immediately or after N
                           pages.

For commands with an optional argument and optional suffixes, only one
may be used.  For example:

*  -PAUSE [n]              Pauses the device immediately, after N
                           pages, after the current job, or when the
                           device is idle.



   -ABORT [n]              Aborts the current job.
   -ADVANCE n              Advances the print file N pages.
   -ALIGN n                Enters ALIGN mode for N pages.
   -BACKUP n               Backs up the print file N pages.
*  -CONTINUE               Continues the device if paused.
   -DROP_COPY [n]          Cancels the copy currently printing.
   -DROP_JOB [n]           Cancels all copies of the job currently
                           printing.
   -EDIT edit_keywords     Edits the device's keyword list.
*  -INIT                   Resets the device to its default keyword list.
   -LIST                   Prints the device's keyword list.
*  -LOAD form_type         Changes the device's form type.
   -NW                     Sends command without waiting for reply
                           from device.
   -ON system              Forwards command to device on remote
                           system.
*  -PAUSE [n]              Pauses the device.
   -POSITION [+/-]n        Advances or backs up the print file N
                           printed pages or positions to page N.
   -RESTART                Restarts the job from the beginning.
   -START                  Starts the device.
   -STATUS                 Prints the device's status on the terminal.
*  -STOP [n]               Stops the device and suspends or aborts the
                           current job.
   -SUSPEND [n]            Suspends the current job.

.du
.dn  {{Form types}}

PrintMaster form types allow form attributes such as characters per
line, fonts and margins to be specified with the -FORM option.
.dd  {{Creating form types}}

The command used to create form types is CFD.  It will ask you for the
name of the form, its synonyms, characters per line, and lines per
page.

A form name must be a valid filename and less than 30 characters.  If
users have form types which are not valid filenames, they should be
made synonyms.  For example:

   -FORM STOCK ' '
   -FORM NARROW_STOCK '8 X 11'
   -FORM FOUR_PART_STOCK 4PRT

This is similar to the PROP environment options PAPER and FORM.

It is important that the number of lines per page is correct, or the
job accounting data will be wrong.

.dn  {{Listing form types}}

To list the form type STOCK, type:

   OK, ekf stock -lib -list
   [Edit Keyword File 2.0]
      -FORM STOCK
      ' '
      -CHARS_PER_LINE 80
      -LINES_PER_PAGE 66

.du
.du
.dskip 0 2 1
.dskip 1 -1 1
.oh///System Files/
.dn  {{SYSTEM FILES AND DIRECTORIES}}
There are two main directories needed to run PrintMaster.  The first,
PRINTMASTER*, is called the system directory.  It contains programs,
system keyword files, and command files used by PrintMaster.  The
second, PRINTMASTER_QUEUE*, is the PrintMaster print queue directory.
It contains all files needed for queueing jobs, including job keyword
lists and print files copied to the queue.  There can be many queues
per system, but only one system directory.  However, each system in
the network will have its own system directory.
.dd  {{The System Directory PRINTMASTER*}}
This directory contains all of the PrintMaster system information:

    BANNER_LETTERS         - this file has the 5 by 7 large letters
                             printed on the banner page.  It can be
                             replaced or modified if a site wants to
                             customize banner letters

    COMO (dir)             - device and monitor como files

    DEVICES (dir)          - driver CPL programs, keyword files, and
                             timed-out keyword files

    EPF_LIBRARIES (dir)    - contains PrintMaster EPF libraries; this
                             must be accessible to all users

    LIBRARY (dir)          - this is the keyword file library; when
                             -USE XYZ is used, PrintMaster will look
                             in this directory for the keyword file
                             XYZ.KF if it doesn't exist in the current
                             directory

    MASTER.KF              - this is the master keyword file

    PHASE-II               - if this file exists, Phase II has been
                             installed

    PRINTMASTER.ENTRY$.SR  - search rules for PrintMaster

    PROGRAMS (dir)         - RUN files and infrequently used CPL
                             programs

    PROJECT_DEFAULTS (dir) - project default keyword files

    SYSTEM_DEFAULTS.KF     - these are the system job defaults that
                             are inserted in every job queued

    USER_DEFAULTS (dir)    - user default keyword files

.dn  {{PrintMaster Queue Directories}}
PrintMaster queue directories are named PRINTMASTER_QUEUE*.  There
are four segment directories in this queue to store job keyword
lists, print files, etc.  The queue is verified when it is read by
the monitor to make sure all read/write locks are correct, and to
delete any inconsistent queue entries.  Normally, users do not have
L access to queues.  This is a security feature - since users will
not know the names of the files in the queue, they cannot read or
modify anything in the queue.  It is necessary for all users to have
RW access to files in the queue to add and delete jobs.  If queue
security is a major concern, don't use the -COPYFILE option when
queueing jobs.
.du
.oh///Advanced Features/
.dn  {{ADVANCED FEATURES}}
Some of the more sophisticated features in PrintMaster, such as
user-written device drivers and applications of keyword matching, are
described in this section.
.dd  {{User-Written Device Drivers}}
The PrintMaster device driver program is broken into three levels.
Level 1 is called the system level.  It performs functions such as
opening print files and reading the job keyword list, and any others
that must be done for all jobs.  The source for this level will not
be released, as customers should not have to modify it.  The level 2
driver reads the print file and interprets its contents.  Currently,
only one level 2 driver, L2$MAIN, is available.  It is intended to
simulate the features found in the Prime spooler, such as line number
and no-format modes.  PrintMaster was designed to allow this level to
be replaced, but it may be quite difficult, since L2$MAIN is around
1500 lines of PL/I.  Level 3 drivers are the device interface
procedures. These were designed to be as simple as possible.  The
current drivers range from 100 to 200 lines of PL/I.  Customers may
add or change level 3 drivers as needed without modifying,
recompiling, or reloading the standard PrintMaster software
.dn  {{Paper Usage Accounting}}
The PrintMaster device driver program maintains statistical
information about jobs (e.g. total pages printed, form type, user id,
etc.) that may be passed to a paper usage accounting procedure upon
completion.  Like the level 3 drivers, this was designed to be as
simple as possible.  The supplied accounting procedure,
L2$ACCOUNTING, consists of approximately 150 lines of straightforward
PL/I.  Customers may add other procedures or change this one as
needed.  The accounting procedure is specified with the -ACCOUNTING
keyword, which is in the keyword file
PRINTMASTER*>DEVICES>DEVICE_DEFAULTS.KF.
.dd  {{The Supplied Accounting Procedure, L2$ACCOUNTING}}
This procedure allows paper usage accounting to be performed on a
per-job basis; the presence of the -ACCOUNTING keyword in a job's
keyword list enables accounting.

The accounting file, PRINTMASTER*>ACCOUNTING.DATA, is a standard
Primos text file with a record length of 552 characters.  Since much
of this is blank and the file is compressed, each record doesn't
actually need 552 characters.  Around 16 accounting records fit in
one disk record, depending on the length of user-id's, etc.  When
accounting is enabled on a job, a record is written after each copy
finishes, even if it is aborted or dropped.  Before processing the
accounting file, its name should be changed to prevent holding up a
device while the file is open.  The accounting record format is:


          Accounting Field                            Type      Length
------------------------------------------------    --------   --------

Accounting record version (currently 01)            integer        2

User's system name                                  character     32
User's project                                      character     32
User's id                                           character     32

Device's system name                                character     32
Device's name                                       character     32

Job's queue partition name                          character     32
Job id                                              integer        5
Job name                                            character     32
Job pathname                                        character    128
File size (disk records)                            integer        5
Copy number (just printed)                          integer        5
Number of copies requested                          integer        5
Date spooled (YY-MM-DD.HH:MM)                       character     14

Form type                                           character     16
Date started printing (YY-MM-DD.HH:MM)              character     14
Total pages printed                                 integer        5
Job completion code                                 character      1
  (I = invalid    A = aborted   C = completed
   S = suspended  D = dropped   T = timed-out)
User accounting info (value of keyword -ACCT_INFO)  character    128
.du
.du
.oh///Routine Maintenance/
.dn  {{ROUTINE MAINTENANCE}}
There are several maintenance procedures the System Administrator
may periodically need.  Most are used when either the Prime system
configuration is changed, or the defaults created when PrintMaster
was originally installed need to be modified.
.dd  {{Creating and Moving Print Queues}}
Print queues may have to be created if disk space is scarce on the
current print queue partition, or if another partition is better
suited for a print queue.  The CPQ (Create Print Queue) command is
used to make new queues.  It will ask for the partition where the new
queue is to be created.  You must have ALL access to the MFD on this
partition.  Queues are directories called PRINTMASTER_QUEUE*.  If
necessary, queues can be copied with the Primos COPY command to
another partition.  Always shutdown all devices and the monitor
before attempting this.  The -CA option must be used with the COPY
command to copy the queue file attributes.  The queue may contain
jobs when it is moved.
.dn  {{Deleting Print Queues}}
Print queues can be deleted with the Primos DELETE command.  Devices
and the monitor do not have to be shutdown, but there cannot be any
activity in the queue (such as jobs printing), or the delete will
fail and the queue will be destroyed.  Attach to the MFD where the
queue is located, and DELETE PRINTMASTER_QUEUE*.
.dn  {{Changing the System Job Defaults}}
When PrintMaster is initially configured, the job defaults are
entered, and stored in PRINTMASTER*>SYSTEM_DEFAULTS.KF.  These may
need to be changed periodically.  The file can be edited with the
keyword file editor EKF, or the dialog used to set defaults when
PrintMaster was configured can be used.  To use EKF, attach to the
system directory (PRINTMASTER*), and use the -EDIT or -CREATE and
-LIST options to modify the keyword file.  For example, to change the
default destination to PR0, use the commands:

    OK, a printmaster*
    OK, ekf system_defaults -edit -at pr0
    [Edit Keyword File 2.0]
    OK,

To use the question and answer method, attach to
PRINTMASTER*>PROGRAMS and run SET_SYSTEM_DEFAULTS.  This CPL program
will prompt for all input needed to change the defaults, and is the
same one used by the configuration program CONFIGURE_PRINTMASTER.
.dn  {{Changing Device Defaults}}
Some device characteristics, such as whether devices restart after a
coldstart, are kept in the device default keyword file
PRINTMASTER*>DEVICES>DEVICE_DEFAULTS.KF.  All devices have these
characteristics, and all will change if this file is changed.  To
change defaults, use the EKF command to edit the keyword file, or run
the CPL program SET_DEVICE_DEFAULTS.CPL in PRINTMASTER*>PROGRAMS.
This program will ask a series of questions to modify device
defaults.
.dn  {{Modifying Devices}}
Devices are usually created or changed by the System Operator, and
complete information on this is in the DEVICES section of this
manual.   The program used is CDD - Create Device Def.  It will ask
you for all of the device's characteristics.
.dn  {{Modifying Form Types}}
Form types are usually created or changed by the System Operator, and
complete information on this is in the FORM DESCRIPTION FILES
section.  The program used is CFD, Create Form Def.  It will prompt
for form characteristics for the form.
.dn  {{Modifying the System List}}
The system list is a text file, SYSTEM_LIST, in PRINTMASTER*.  It is
only used for networks, and has all systems in the network sharing
resources listed from high to low priority.  The job scheduler runs
on the highest active system.  All systems in a system list must have
identical SYSTEM_LIST files.  They can be changed with a text editor,
such as ED, or with the CPL program CREATE_SYSTEM_LIST.CPL in
PRINTMASTER*>PROGRAMS.

IMPORTANT:  All systems in the system list must be changed before
            any monitors are restarted, since a monitor will
            abort if its system list is different from the others.
.du
.oh///Removing PrintMaster/
.dn  {{REMOVING PRINTMASTER}}
The CPL program REMOVE_PRINTMASTER.CPL program in
PRINTMASTER*>PROGRAMS is used to delete Printmaster from the system.
It has several options, to allow partial or complete removal.
.dd  {{Reinstalling the Prime Spooler}}
If Phase 2 has been installed (Prime SPOOL and PROP commands have
been replaced), this program can be used to go back to Phase 1, where
the Prime spooler and PrintMaster are operating concurrently.   The
PrintMaster CPL emulation programs are removed and the original Prime
SPOOL and PROP programs are reinstated.  If users are logged in when
phase 2 is removed, they will have to issue the ICE or SSR -DFLT
ENTRY$ commands to get new search rules.
.dn  {{Removing PrintMaster Commands and Help Files}}
PrintMaster commands and help files are also removed with
REMOVE_PRINTMASTER to "clean up" the command and help directories.
This can only be done if phase 2 has been removed, or was never
installed, and should only be done after the PrintMaster queues
are empty and no devices are running.
.dn  {{Removing Queues and the System Directory}}
The PrintMaster system directory and print queues are never deleted
by REMOVE_PRINTMASTER, and must be deleted using the Primos DELETE
command from the MFD.  PrintMaster commands should be removed before
this, and no PrintMaster devices or monitors should be running.

{{IMPORTANT}}: When the system directory is deleted, all form and
paper types are deleted, along with all defaults created with the
configuration program.
.du
.oh///Support/
.dn  {{SUPPORT}}
.dd  {{Troubleshooting}}

This section is a troubleshooting guide for PrintMaster.  If a problem
cannot be solved by reading this section, please report it via the
phone number listed in the documentation packet.

Six problems are discussed here:

    1)  Monitor won't start
    2)  Monitor shuts down after it is started
    3)  A device won't start
    4)  A device shuts down after it is started
    5)  A device won't respond to device commands
    6)  There are jobs in the queue, but they won't print
.dd  {{Monitor Won't Start}}

1)  Is PRINTMASTER* ACL'ed correctly?
    Attach to PRINTMASTER* and do an LAC command.  The ACL should be:

         ACL protecting "<Current directory>":
                 SYSTEM:                 DALURW
                 .PRINTMASTER_OPERATOR:  ALL
                 .PRINTMASTER_SYSTEM:    ALL
                 $REST:                  LUR

2)  Does your login program have checks for valid user-id's in it?
    If so, the user-id PRINTMASTER_MONITOR must be added to your login
    program.  The symptom of this problem is that the COMO file
    PRINTMASTER*>COMO>PRINTMASTER_MONITOR.COMO does not get created
    before the monitor aborts.

.dn  {{Monitor Goes Down After Starting}}

1)  Check PRINTMASTER*>COMO>PRINTMASTER_MONITOR.COMO for additional
    information on why the monitor crashed.

2)  If the system partition (partition with PRINTMASTER*) was
    shutdown, logout all active devices and run INIT_PRINTMASTER.CPL
    again from the console.

3)  Are all SYSTEM_LIST files on all systems identical? (networks
    only)  Any mismatched system lists received from remote systems
    will cause the monitor to crash.  Mismatched lists are written out
    with an ascending serial number (SYSTEM_LIST.1, SYSTEM_LIST.2,
    etc.) in PRINTMASTER*.

4)  Is the local system name in the system list? (networks only)

5)  Are only valid system names in the system list? (networks only)
.dn  {{Device Won't Start}}

1)  Check PRINTMASTER*>COMO>XXX.COMO where XXX is the device's
    name for more information.

2)  Were all required keywords present with valid values?

3)  Was the device specified with ASSIGN_DEVICE already in use?

4)  Is the monitor up?

5)  Try logging out the monitor and running INIT_PRINTMASTER.

6)  Does your login program have checks for valid user-id's in it?
    If so, a user-id will have to be created for each device since
    PrintMaster devices have user-id's which match their device name.
.dn  {{Device Goes Down}}

1)  Check PRINTMASTER*>COMO>XXX.COMO where XXX is the device's
    name for more information.

2)  If the device was not started by the monitor, does it have access
    to PRINTMASTER* and PRINTMASTER_QUEUE* ?

3)  Was the device shutdown normally (possibly from a remote system)?

4)  If -TIME_BEFORE_SHUTDOWN was used on this device, it may just be
    timed-out.  Try doing a DC XXX -STATUS command where XXX is the
    device's name.  If the device responds "ready", it was timed-out.
.dn  {{Device Won't Respond to Commands}}

1)  Check PRINTMASTER*>COMO>XXX.COMO where XXX is the device's
    name for more information.

2)  Is the device started (and command is not -START)?

3)  If the device is trying to print a job, is it turned on?

4)  If -ON was used with DC, is the remote system available?

5)  If -ON was used with DC, is the remote system's monitor up?

6)  If -ON was used with DC, is the local monitor up?
.dn  {{Jobs Won't Print}}

1)  Is there a device available that the job matches?
    Use DC XXX -LIST to view the device's keyword list where XXX is
    the device's name, and LPJ N to view job N's keyword list.

2)  Is the job still open?  If so, it must be closed before it will
    print.

3)  If -COPYFILE was not used, does the file still exist, and does
    the device have read access rights to it?  A priority ACL
    .PRINTMASTER_SYSTEM:ALL should be on the file's partition.

4)  Two semaphores are used by Printmaster, as specified in the CPL
    program INIT_PRINTMASTER.CPL.  Are these being used by any other
    software?  This cannot be detected, but will cause PrintMaster to
    function incorrectly.

5)  Is the monitor up?  Devices will not print jobs unless the monitor
    is running.

6)  Is the job deferred?

7)  Is the job's partition accessible to the device?  This is more of
    a concern in network environments where all disks are not visible
    on all systems.

8)  Is the job larger than the maximum the device will print (as
    specified in the device keyword -JOB_SIZE_LIMIT)?

9)  If nothing else works, log out all devices and the monitor and run
    INIT_PRINTMASTER again from the system console.  Devices will have
    to be restarted with DC.

This list is not complete, and will be updated as problems occur and
are diagnosed.  Again, call if the problem cannot be resolved.
.du
.dn  {{Updates & Revisions}}
PrintMaster update tapes will be sent periodically, to fix problems
and introduce enhancements.  The file UPDATES_v, where "v" is the
version number, will be kept in PRINTMASTER>INFO>UPDATES.  This will
describe all changes made in this version.  Scheduled enhancements
are listed in the next section.  Every effort will be made to make
future revisions compatible with existing versions.
.du
.oh///Future Enhancements/
.dn  {{FUTURE ENHANCEMENTS}}
Many enhancements are scheduled for PrintMaster including new
features and support for more device types.
.dd  {{List Queue Keyword Selection}}
Enhancements to LPQ will include the ability to select which job
keywords will be printed.  This feature will make use of the keyword
list matching facility, so that a typical LPQ command may be:

    OK, lpq -select_jobs -user fred -form stock -select_kws -job_name

This command would select all jobs with -USER FRED and -FORM STOCK.
From these jobs selected, only the -JOB_NAME keyword would be
printed.
.dn  {{Block Oriented Devices}}
There is only one level 2 device driver for PrintMaster today.  It
simulates the actions of the Prime spooler, more or less.  It expects
the file to be a text file with lines shorter than 500 characters.
This format is fine for line printers, but does not work for plotters
and other devices which are NOT line oriented.  A "block I/O" driver
is being written to handle these devices.  This will support both
parallel and serial RS-232 plotters, and user-written low-level
device drivers may be written for these, just as for line oriented
devices.
.tofc
