/* CPL$CALAC$.SPL, PrintMaster, Jeff Hostetler, September 29, 1984            */
/* Procedure to calculate access on a file system object.  If option -PRINT   */
/* is used, an error will be printed if insufficient access occurs.  Severity */
/* code is positive if user has insufficient access.                          */
/* Copyright (C) 1984 J.E. Wilcoxson, J.L. Hostetler.  All rights reserved.   */
/******************************************************************************/

main: procedure (cl, com_status);

%nolist;
%include '*>insert>gbl.ins.spl';
%include '*>entry>err$.ins.spl';
%include '*>entry>gp$.ins.spl';
%include '*>entry>primos.ins.spl';
%list;

   dcl
      cl          char(max_cl) var,
      com_status  bin,

      1  full_id           like gbl.full_id,
      actual_access        char(80) var,
      1  struc,
         2  pathname       char(128) var,
         2  desired_access char(80) var,
         2  print_flag     bit aligned;

   call parse_cl;

   full_id.version = getid$_version;
   call getid$ (addr(full_id), id_max_groups, com_status);
   if com_status ^= 0 then do;
      call errpr$ (k$irtn, com_status, 'Getting user id.', 16, 'cpl$calac$', 10);
      goto error_exit;
      end;

   if calac$ (pathname, addr(full_id), desired_access, actual_access, com_status) then
      com_status = 0;
   else do;
      if com_status ^= 0 then do;
         call errpr$ (k$irtn, com_status, 'Calculating access.', 19,
                      'cpl$calac$', 10);
         goto error_exit;
         end;
      com_status = e$nrit;
      if print_flag then do;
         call ioa$er ('%v access to %v is required,%.', -1, desired_access,
                      pathname);
         call ioa$er ('but you only have %v access.%.', -1, actual_access);
         end;
      end;

error_exit:
   return;

%page;
/* cpl$como_state.parse_cl, PrintMaster, Jeff Hostetler, September 29, 1984   */
/******************************************************************************/

   parse_cl: proc;

      %replace
         cl$pix_keys    by '000A'b4,        /* keep quotes, pl1, print */
         caller_name    by 'cpl$calac$',
         pixel_size     by 25;

      dcl
         pix_index      bin,
         bad_index      bin,
         ns_code        bin,
         pic char(pixel_size) var static init ('tree;char;-print, -p; end');

      call cl$pix (cl$pix_keys, caller_name, addr (pic), pixel_size,
                   cl, addr(struc), pix_index, bad_index, ns_code, null);
      if ns_code ^= 0 then
         call error_ ('');

      return;
      end parse_cl;

%page;
/* cpl$como_state.error_, PrintMaster, Jeff Hostetler, September 29, 1984     */
/******************************************************************************/

   error_: proc (msg);

      dcl
         msg   char(*) var;

      if length (msg) ^= 0 then
         call ioa$er ('%v%.', -1, msg);
      com_status = e$barg;
      goto error_exit;
      end error_;

end main;
