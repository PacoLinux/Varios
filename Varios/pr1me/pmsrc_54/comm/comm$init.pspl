/* COMM$INIT.SPL, PrintMaster, Jim Wilcoxson, August 5, 1983.                 */
/* Initialize communications data.                                            */
/* Copyright (C) 1984 J.E. Wilcoxson, J.L. Hostetler.  All rights reserved.   */
/******************************************************************************/

comm$init : procedure;

%nolist;
%include '*>insert>gbl.ins.spl';
%include '*>insert>comm.ins.spl';
%include '*>entry>comm$dequeue_ipc_message.ins.spl';
%include '*>entry>comm$flush_ipc_messages.ins.spl';
%include '*>entry>comm$service_ipc.ins.spl';
%include '*>entry>err$.ins.spl';
%include '*>entry>gp$.ins.spl';
%include '*>entry>primos.ins.spl';
%list;

dcl
   i                          bin,
   msgp                       ptr,
   vcid                       bin,
   status                     bin,
   time_left                  bin;

   comm.receive_list_bol = null;
   comm.receive_list_eol = null;
   comm.cb_list = null;

   /* clear all buffers */

   comm.buffer_bol = null;
   comm.buffer_eol = null;

   /* if system hasn't been initialized, stop here */

   if ^psv.system_inited then
      return;

   /* if I own lock (because of some abnormal abort or something), release
      it */

   if psv.shared_area_owner = gbl.my_user_nr then
      psv.shared_area_owner = 0;

   /* delete any messages on my IPC queue */

   call comm$flush_ipc_messages (gbl.my_user_nr);

   if ^gbl.I_am_monitor then
      return;

   call x$clra;                             /* just for safety */
   if psv.monitor_user = 0
    | psv.monitor_user = gbl.my_user_nr then /* no other monitor running */
      ;
   else
      call err$ (err$user_et, 'Monitor already running.',
                 err$monitor_already_running_ue, 0, 0);

   call comm$flush_ipc_messages (-1);       /* clear all IPC messages */

   /* assume network is not started initially; monitor port will be
      assigned by comm$service if networks change from not started to
      started */

   if psv.network_exists then
      psv.network_started = false;
   else

      /* networks don't exist; semaphore will be used for communication
         with the monitor, so initialize it */

      call sem$dr (gbl.monitor_semaphore, status);

   psv.monitor_uid = gp$uid();
   psv.monitor_user = gbl.my_user_nr;

end comm$init;
