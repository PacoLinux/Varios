/* COMM$DEQUEUE_IPC_MESSAGE.SPL, PrintMaster, Jim Wilcoxson, August 5, 1983   */
/* Dequeue (remove) an IPC message from the IPC shared queue.                 */
/* Returns true if a message was dequeued, false otherwise.                   */
/* Copyright (C) 1984 J.E. Wilcoxson, J.L. Hostetler.  All rights reserved.   */
/******************************************************************************/

comm$dequeue_ipc_message : procedure (user_nr, msgp) returns (bit);

dcl
   user_nr     bin,                         /* user to dequeue msg for (in) */
   msgp        ptr;                         /* returned message pointer (out) */

%nolist;
%include '*>insert>gbl.ins.spl';
%include '*>insert>comm.ins.spl';
%include '*>entry>comm$dequeue_message.ins.spl';
%include '*>entry>comm$msg_length.ins.spl';
%include '*>entry>gp$.ins.spl';
%include '*>entry>primos.ins.spl';
%list;

dcl
   1 saved_swi like swi_switches,
   ipc_msgp    ptr;                         /* pointer to msg in shared area */

   call gp$lock_shared_area (saved_swi);
   if comm$dequeue_message (psv.user_msg_bol (user_nr),
                            psv.user_msg_eol (user_nr),
                            ipc_msgp) then do;

      /* copy message out to user area */

      alloc_msg_length = ipc_msgp->msg.msg_length;
      allocate msg set(msgp);
      call gp$copy (ipc_msgp, msgp, comm$msg_length(ipc_msgp));
      call ar$fre (psv.shared_area, ipc_msgp); /* free message */
      end;
   else
      msgp = null;
   call gp$unlock_shared_area (saved_swi);
   return (msgp ^= null);                   /* true if message dequeued */

end comm$dequeue_ipc_message;
