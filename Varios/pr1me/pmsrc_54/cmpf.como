Comparing PMSRC_53 and PMSRC_54


Comparing PRINTMASTER directory:

     REMOVE_PRINTMASTER.CPL different.
     CONFIGURE_PRINTMASTER.CPL different.
     INSTALL_PRINTMASTER.CPL different.

Comparing PRINTMASTER>CMDNC0 directory:

     CFD.CPL different.
     INIT_PRINTMASTER.CPL different.
     CDD.CPL different.
     CPQ.CPL different.

Comparing GP directory:

     GP$INIT.PSPL different.

Comparing INSERT directory:

     GBL.INS.SPL different.
     GBL_EXT.INS.SPL different.

Comparing L2 directory:

     L2$IO.SPL different.

End of comparison.


[CMPF 19.4.5]     COMPARISON OF PMSRC_53>PRINTMASTER>REMOVE_PRINTMASTER.CPL        SUN, FEB 05 1989 16:10:59

FILE A:  PMSRC_53>PRINTMASTER>REMOVE_PRINTMASTER.CPL
FILE B:  PMSRC_54>PRINTMASTER>REMOVE_PRINTMASTER.CPL


A14       &s rev := 5.3.1
CHANGED TO
B14       &s rev := 5.3

COMPARISON FINISHED.
1 DISCREPANCY FOUND.

[CMPF 19.4.5]     COMPARISON OF PMSRC_53>PRINTMASTER>CONFIGURE_PRINTMASTER.CPL        SUN, FEB 05 1989 16:11:01

FILE A:  PMSRC_53>PRINTMASTER>CONFIGURE_PRINTMASTER.CPL
FILE B:  PMSRC_54>PRINTMASTER>CONFIGURE_PRINTMASTER.CPL


A10       &s rev := 5.3.1
CHANGED TO
B10       &s rev := 5.3

COMPARISON FINISHED.
1 DISCREPANCY FOUND.

[CMPF 19.4.5]     COMPARISON OF PMSRC_53>PRINTMASTER>INSTALL_PRINTMASTER.CPL        SUN, FEB 05 1989 16:11:02

FILE A:  PMSRC_53>PRINTMASTER>INSTALL_PRINTMASTER.CPL
FILE B:  PMSRC_54>PRINTMASTER>INSTALL_PRINTMASTER.CPL


A32       &s rev := 5.3.1
CHANGED TO
B32       &s rev := 5.3

COMPARISON FINISHED.
1 DISCREPANCY FOUND.

[CMPF 19.4.5]     COMPARISON OF PMSRC_53>PRINTMASTER>CMDNC0>CFD.CPL        SUN, FEB 05 1989 16:11:04

FILE A:  PMSRC_53>PRINTMASTER>CMDNC0>CFD.CPL
FILE B:  PMSRC_54>PRINTMASTER>CMDNC0>CFD.CPL


A14       &s rev := 5.3.1
CHANGED TO
B14       &s rev := 5.3

COMPARISON FINISHED.
1 DISCREPANCY FOUND.

[CMPF 19.4.5]     COMPARISON OF PMSRC_53>PRINTMASTER>CMDNC0>INIT_PRINTMASTER.CPL        SUN, FEB 05 1989 16:11:05

FILE A:  PMSRC_53>PRINTMASTER>CMDNC0>INIT_PRINTMASTER.CPL
FILE B:  PMSRC_54>PRINTMASTER>CMDNC0>INIT_PRINTMASTER.CPL


A31       &s rev := 5.3.1
CHANGED TO
B31       &s rev := 5.3

COMPARISON FINISHED.
1 DISCREPANCY FOUND.

[CMPF 19.4.5]     COMPARISON OF PMSRC_53>PRINTMASTER>CMDNC0>CDD.CPL        SUN, FEB 05 1989 16:11:08

FILE A:  PMSRC_53>PRINTMASTER>CMDNC0>CDD.CPL
FILE B:  PMSRC_54>PRINTMASTER>CMDNC0>CDD.CPL


A14       &s rev := 5.3.1
CHANGED TO
B14       &s rev := 5.3

COMPARISON FINISHED.
1 DISCREPANCY FOUND.

[CMPF 19.4.5]     COMPARISON OF PMSRC_53>PRINTMASTER>CMDNC0>CPQ.CPL        SUN, FEB 05 1989 16:11:10

FILE A:  PMSRC_53>PRINTMASTER>CMDNC0>CPQ.CPL
FILE B:  PMSRC_54>PRINTMASTER>CMDNC0>CPQ.CPL


A13       &s rev := 5.3.1
CHANGED TO
B13       &s rev := 5.3

COMPARISON FINISHED.
1 DISCREPANCY FOUND.

[CMPF 19.4.5]     COMPARISON OF PMSRC_53>GP>GP$INIT.PSPL        SUN, FEB 05 1989 16:15:29

FILE A:  PMSRC_53>GP>GP$INIT.PSPL
FILE B:  PMSRC_54>GP>GP$INIT.PSPL


A77          addr(exp)->b16 = 'B26F'b4;               /* On or After March 15, 1989 */
CHANGED TO
B77          addr(exp)->b16 = 'B0EF'b4;               /* On or After July 15, 1988 */

COMPARISON FINISHED.
1 DISCREPANCY FOUND.

[CMPF 19.4.5]     COMPARISON OF PMSRC_53>INSERT>GBL.INS.SPL        SUN, FEB 05 1989 16:16:28

FILE A:  PMSRC_53>INSERT>GBL.INS.SPL
FILE B:  PMSRC_54>INSERT>GBL.INS.SPL


A6        %replace rev_number by '5.3.1';
CHANGED TO
B6        %replace rev_number by '5.3';


A36          max_print_line_len by 500,
CHANGED TO
B36          max_print_line_len by 2000,

COMPARISON FINISHED.
2 DISCREPANCIES FOUND.

[CMPF 19.4.5]     COMPARISON OF PMSRC_53>INSERT>GBL_EXT.INS.SPL        SUN, FEB 05 1989 16:16:33

FILE A:  PMSRC_53>INSERT>GBL_EXT.INS.SPL
FILE B:  PMSRC_54>INSERT>GBL_EXT.INS.SPL


A6        %replace rev_number by '5.3.1';
CHANGED TO
B6        %replace rev_number by '5.3';


A36          max_print_line_len by 500,
CHANGED TO
B36          max_print_line_len by 2000,

COMPARISON FINISHED.
2 DISCREPANCIES FOUND.

[CMPF 19.4.5]     COMPARISON OF PMSRC_53>L2>L2$IO.SPL        SUN, FEB 05 1989 16:17:19

FILE A:  PMSRC_53>L2>L2$IO.SPL
FILE B:  PMSRC_54>L2>L2$IO.SPL


B12       %include '*>entry>bio$.ins.spl';
INSERTED BEFORE
A12       %include '*>entry>err$.ins.spl';


B626         if kwl$find_kw ('JOB_INIT_FILE', ds.p_device_kwl, kwp) then
B627            if kwl$get_nth_value (kwp, 1, value) then
B628               call download_file (value);
B629
INSERTED BEFORE
A625         if handled (key, data_line, number) then


B637         if kwl$find_kw ('JOB_INIT_FILE', ds.p_job_kwl, kwp) then
B638            if kwl$get_nth_value (kwp, 1, value) then
B639               call download_file (value);
B640
INSERTED BEFORE
A632         if kwl$find_kw ('JOB_INIT_STRING', ds.p_job_kwl, kwp) then


B661         if kwl$find_kw ('JOB_TERMINATE_FILE', ds.p_job_kwl, kwp) then
B662            if kwl$get_nth_value (kwp, 1, value) then
B663               call download_file (value);
B664
INSERTED BEFORE
A652         if handled (key, data_line, number) then


B672         if kwl$find_kw ('JOB_TERMINATE_FILE', ds.p_device_kwl, kwp) then
B673            if kwl$get_nth_value (kwp, 1, value) then
B674               call download_file (value);
B675
INSERTED BEFORE
A659         if kwl$find_kw ('JOB_TERMINATE_STRING', ds.p_device_kwl, kwp) then


A667
A668      /******************************************************************************/
A669      /* ALIGNMENT_CHECK                                                            */
A670      /*                                                                            */
A671      /*    Called when the device is in alignment mode; checks for the device      */
A672      /*    changing from on-line to off-line to on-line, and sets a flag to tell   */
A673      /*    the main print loop to resume printing at the alignment page if this    */
A674      /*    occurs.                                                                 */
A675      /******************************************************************************/
A676
A677      alignment_check : procedure;
A678
A679      dcl
A680         was_offline       bit aligned,
A681         online_flag       bin;
A682
A683         was_offline = false;
A684         call l2$io (l2$online_test, '', online_flag);
A685         do while (online_flag = 0);
A686            was_offline = true;
A687            if ds$process_request (false) then;
A688            call sleep$ (one_second);
A689            call l2$io (l2$online_test, '', online_flag);
A690         end;
A691
A692         if was_offline then
A693            l2.need_to_realign = true;
A694
A695      end alignment_check;
A696
A697      /******************************************************************************/
A698      /* HANDLED                                                                    */
A699      /*                                                                            */
A700      /*    Calls level 3 driver if necessary, and checks return code.              */
A701      /*    Returns true if function was handled by level 3,                        */
A702      /*            false if function should be handled by this level.              */
A703      /******************************************************************************/
A704
A705      handled: procedure (key, data, n) returns (bit);
A706
A707      dcl
A708         key            bin,
A709         data           char(*),
A710         n              bin,
A711
A712         return_code    bin;                      /* return code from level 3 */
A713
A714
A715         if l23.func_implemented (key) then do;
A716            return_code = l2.l3_driver (key, data, n);
A717            select (return_code);
A718               when (l2$func_handled_rc)
A719                  return (true);
A720               when (l2$func_not_handled_rc)
A721                  return (false);
A722               when (l2$unrecognized_func_rc)
A723                  call err$ (err$coding_et,
A724                             'Level 3 didn''t recognize a requested function.',
A725                             0, 0, 0);
A726               otherwise
A727                  call err$ (err$coding_et,
A728                             'Level 3 returned unrecognized return code.',
A729                             0, 0, 0);
CHANGED TO
B684      /******************************************************************************/
B685      /* DOWNLOAD_FILE                                                              */
B686      /*                                                                            */
B687      /*    Download a file to the device for (JOB DEVICE)_(INIT TERMINATE)_FILE    */
B688      /*    keywords.  If any line begins with ^001^005 or ^201^005, rest of file   */
B689      /*    is sent in "raw" mode - no translation, linefeeds, etc.  Otherwise,     */
B690      /*    the file is sent with translation enabled, & CRLF is sent after each    */
B691      /*    line UNLESS the line ends with a backslash.                             */
B692      /******************************************************************************/
B693
B694      download_file: proc (filename);
B695
B696      dcl
B697         filename char(*) var,                    /* pathname of file to download */
B698
B699         c2       char(2) based,
B700         lfcr     bit(16) static init ('8A8D'b4), /* linefeed & carriage-return */
B701         is_binary bit,                           /* true if "binary" download file */
B702         fp       ptr,                            /* pointer to file control block */
B703         pos      bin(31),                        /* word position of this line */
B704         translate_save bit,
B705         unit     bin,                            /* file unit */
B706         buf_ptr  ptr,
B707         buf      char(4096) var based (buf_ptr),
B708         1  buf_bit16 based (buf_ptr),            /* bit16 overlay of buf */
B709            2  len      bin,
B710            2  bit16    bit(16),
B711         1  buf_nonvar based (buf_ptr),           /* non-varying overlay of buf */
B712            2  len      bin,
B713            2  chars    char(length(buf)) aligned;
B714
B715
B716         buf_ptr = null;
B717         is_binary = false;
B718         translate_save = ds.need_device_translate;
B719
B720         /* don't forget to clean up if an error occurs */
B721
B722         on condition (cleanup$)
B723            begin;
B724            ds.need_device_translate = translate_save;
B725            if buf_ptr ^= null then do;
B726               free buf_ptr->buf;
B727               buf_ptr = null;


B731         allocate buf set (buf_ptr);
B732         call gp$open_path (k$read+k$getu, filename, unit);
B733         fp = bio$init_file (unit, 0);
B734
B735         do while (read_file());
B736
B737            /* test for the binary control sequence at the start of the line */
B738
B739            if ^is_binary
B740             & length (buf) >= 2
B741             & (buf_bit16.bit16 = '0105'b4
B742                | buf_bit16.bit16 = '8105'b4) then do;
B743                     is_binary = true;
B744                     ds.need_device_translate = false;
B745                     end;
B746
B747            /* not a control sequence; output string/buffer and possibly CR/LF */
B748
B749            else do;
B750               call l2$io (l2$output_string, buf_nonvar.chars, 0);
B751               if ^is_binary then
B752                  if substr (buf, length (buf), 1) ^= '\' then
B753                     call l2$io (l2$output_string, addr (lfcr)->c2, 0);
B754
B755               end;
B756
B757            end;  /* do while read_file */
B758
B759         ds.need_device_translate = translate_save;
B760         call bio$close_file (fp);
B761
B762
B763         read_file: proc returns (bit);
B764
B765            if ^is_binary then
B766               return (bio$read_line (fp, buf, pos));
B767            else
B768               return (bio$read_buffer (fp, buf, 70)); /* max 70 words */
B769
B770         end read_file;
B771
B772      end download_file;
B773
B774      %page;
B775
B776
B777      /******************************************************************************/
B778      /* ALIGNMENT_CHECK                                                            */
B779      /*                                                                            */
B780      /*    Called when the device is in alignment mode; checks for the device      */
B781      /*    changing from on-line to off-line to on-line, and sets a flag to tell   */
B782      /*    the main print loop to resume printing at the alignment page if this    */
B783      /*    occurs.                                                                 */
B784      /******************************************************************************/
B785
B786      alignment_check : procedure;
B787
B788      dcl
B789         was_offline       bit aligned,
B790         online_flag       bin;
B791
B792         was_offline = false;
B793         call l2$io (l2$online_test, '', online_flag);
B794         do while (online_flag = 0);
B795            was_offline = true;
B796            if ds$process_request (false) then;
B797            call sleep$ (one_second);
B798            call l2$io (l2$online_test, '', online_flag);
B799         end;
B800
B801         if was_offline then
B802            l2.need_to_realign = true;
B803
B804      end alignment_check;
B805
B806      /******************************************************************************/
B807      /* HANDLED                                                                    */
B808      /*                                                                            */
B809      /*    Calls level 3 driver if necessary, and checks return code.              */
B810      /*    Returns true if function was handled by level 3,                        */
B811      /*            false if function should be handled by this level.              */
B812      /******************************************************************************/
B813
B814      handled: procedure (key, data, n) returns (bit);
B815
B816      dcl
B817         key            bin,
B818         data           char(*),
B819         n              bin,
B820
B821         return_code    bin;                      /* return code from level 3 */
B822
B823
B824         if l23.func_implemented (key) then do;
B825            return_code = l2.l3_driver (key, data, n);
B826            select (return_code);
B827               when (l2$func_handled_rc)
B828                  return (true);
B829               when (l2$func_not_handled_rc)
B830                  return (false);
B831               when (l2$unrecognized_func_rc)
B832                  call err$ (err$coding_et,
B833                             'Level 3 didn''t recognize a requested function.',
B834                             0, 0, 0);
B835               otherwise
B836                  call err$ (err$coding_et,
B837                             'Level 3 returned unrecognized return code.',
B838                             0, 0, 0);
B839               end;
B840            end;
B841
INSERTED BEFORE
A733         return (false);

COMPARISON FINISHED.
7 DISCREPANCIES FOUND.

