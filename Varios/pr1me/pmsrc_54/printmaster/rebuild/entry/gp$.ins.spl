/* GP$.INS.SPL, PrintMaster, Jeff Hostetler, August 5, 1983                   */
/* Entry declarations for general purpose subroutines.                        */
/* Copyright (C) 1984 J.E. Wilcoxson, J.L. Hostetler.  All rights reserved.   */
/******************************************************************************/

%include '*>entry>gp$dynamic_link.ins.spl';
%include '*>entry>gp$file_position.ins.spl';
%include '*>entry>gp$lock_shared_area.ins.spl';
%include '*>entry>gp$hex.ins.spl';
%include '*>entry>gp$unlock_shared_area.ins.spl';
%include '*>entry>gp$make_dynt.ins.spl';
%include '*>entry>gp$open_file.ins.spl';
%include '*>entry>gp$open_path.ins.spl';
%include '*>entry>gp$open_pde.ins.spl';
%include '*>entry>gp$partial_init.ins.spl';
%include '*>entry>gp$split_pathname.ins.spl';
%include '*>entry>gp$sswitch.ins.spl';
%include '*>entry>gp$ticks.ins.spl';

dcl gp$como_state entry (bin)               /* turn tty on (in) */
                  returns (bin);            /* was tty on (out) */

dcl gp$check_pacl entry (char(*) var,       /* partition (in) */
                         ptr,               /* acl (in/out) */
                         bin)               /* status (out) */
                  returns (bit);

dcl gp$message entry (char(*),              /* message (in) */
                      bin(31))              /* last tick counter (in) */
               returns (bin(31));           /* current tick counter */

dcl gp$get_dtm entry (char(*) var, char(28) var, char(28) var);

dcl gp$quote entry (char(*) var);

dcl gp$unquote entry (char(*) var);

dcl

      any$              condition,

   /* handler for ANY$ condition */
      gp$any            entry,

   /* attach to system directory */
      gp$attach_system_dir
                        entry (bin)         /* status code (out) */
                        returns (bit),      /* false if status is nonzero */

   /* copy n bytes from one address to another */
      gp$copy           entry (ptr,         /* "from" address (in) */
                               ptr,         /* "to" address (in) */
                               bin),        /* # of bytes to copy (in) */

   /* close a file unit */
      gp$close          entry (bin),        /* file unit (in) */

   /* delete a file (not pathname) */
      gp$delete_file    entry (char(*) var), /* file name (in) */

   /* check for file (not pathname)  existance */
      gp$file_exists    entry (char(*) var) /* file name (in) */
                        returns (bit),

   /* global initialization procedure */
      gp$init           entry (char(*) var, /* user type (in) */
                               char(*) var, /* device id (in) */
                               label)       /* error exit label (in) */
                        returns (bit),

   /* open current directory */
      gp$open_curdir    entry
                        returns (bin),      /* file unit */

   /* returns the partition name of an open file */
      gp$partition_name entry (bin)         /* unit (in) */
                        returns (char(32) var), /* partition name (out) */

   /* read a line from a (text) file */
      gp$read_line      entry (bin,         /* unit (in) */
                               char(*) var) /* line (out) */
                        returns (bit),

   /* setup/modify translation tables */
      gp$set_translation entry (char(256),     /* translation table (in/out) */
                                char(*) var,   /* "from" string (in) */
                                char(*) var),  /* "to" string (in) */

   /* returns the system name of an open file */
      gp$system_name    entry (bin)         /* unit (in) */
                        returns (char(32) var), /* system name (out) */

   /* global clean up routine */
      gp$terminate      entry,

   /* translate a string */
      gp$translate      entry (char(*),     /* string to translate (in) */
                               char(*),     /* translated string (out) */
                               bin,         /* string length (in) */
                               char(256))   /* translation table (in) */
                        options (shortcall),

   /* returns a unique (network wide) id */
      gp$uid            entry returns (char(8)),

   /* print version and copyright message */
      gp$version        entry (char(*)),    /* program name (in) */

   /* write a line to a disk file */
      gp$write_line     entry (bin,         /* file unit (in) */
                               char(*) var);/* line (in) */

/* End of insert file GP$.INS.SPL                                             */
/******************************************************************************/
