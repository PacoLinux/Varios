/* Read.plp, Dutil, JEW, 7-Feb-81
   READ command handler.

   READ {<dvno> <record>} | <record> | <treename>

*/

read: proc (cl, info, clp);

$Insert *>insert>cl.plp.ins
$Insert *>insert>global.plp.ins
$Insert *>insert>diskio.plp.ins

dcl
   findbra entry (1, 2, 3 bin(31), 3 bin(31), 3 bin, 3 bin, 3 bin(31),
                  3 bin(31), 3 bin, 3 (5) bin, 2 (0:1023) bin,
                  char(*) var, bin(31), bit, bin),
   help entry (char(*) var, bit),
   ioa$ entry options (variable),
   print_header entry (1, 2, 3 bin(31), 3 bin(31), 3 bin, 3 bin, 3 bin(31),
                       3 bin(31), 3 bin, 3 (5) bin, 2 (0:1023) bin),
   tree_ok entry (char(*) var) returns (bit);

dcl
   error    bit,
   1  my_rec like disk_record,
   ra       bin(31),
   dvno     bin;


   error = false;
   call cl$par ('0'b, cl, token, token_sz, info, clp, status);
   if info.flags.oct_number then
      do;
      ra = info.oct_val;
      dvno = cpartition;
      call cl$par ('0'b, cl, token, token_sz, info, clp, status);
      if info.flags.oct_number then
         do;
         dvno = ra;
         ra = info.oct_val;
         call cl$par ('0'b, cl, token, token_sz, info, clp, status);
         end;

      if ^info.flags.eol then
         error = true;
      end;
   else
      if tree_ok (token) then
         do;
         call findbra (my_rec, token, ra, '0'b, status);
         if status ^= 0 then
            do;
            call ioa$ ('"%v" not found.%.', -1, token);
            return;
            end;
         else
            dvno = cpartition;    /* can only use trees on current */
         end;
      else
         error = true;

   if ^error then
      do;
      call diskio (read_key, ra, dvno, rec, status);
      if status = 0 then
         call print_header (rec);
      end;
   else
      call help ('READ', false);

end;    /* Read */
