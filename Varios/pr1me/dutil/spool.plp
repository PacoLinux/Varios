/* Spool.plp, Dutil, JEW, 15-Apr-81
   Spool command handler.

   SPOOL [-START | -END | -QUIT]

   If option is omitted, -START is implied.
*/

Spool: proc (cl, info, clp);

$Insert syscom>keys.pl1
$Insert syscom>a$keys.pl1
$Insert *>insert>global.plp.ins
$Insert *>insert>cl.plp.ins

dcl
   como$$   entry (bin, char(*), bin, bin, bin),
   errpr$   entry (bin, bin, char(*), bin, char(*), bin),
   help     entry (char(*) var, bin),
   ioa$     entry options (variable),
   ioa$er   entry options (variable),
   srch$$   entry (bin, char(*), bin, bin, bin, bin);

dcl
   error    bit,
   unit     bin;


   error = false;
   call cl$par ('0'b, cl, token, token_sz, info, clp, status);

   if info.eol then
      token = '-START';

   select (token);
      when ('-START', '-S')
         do;
         call abort_spool;
         call start_spool;
         end;

      when ('-END', '-E')
         call end_spool;

      when ('-QUIT', '-Q')
         call abort_spool;

      otherwise
         error = true;

      end;     /* select */

   if ^error then
      call cl$par ('0'b, cl, token, token_sz, info, clp, status);

   if error | ^info.eol then
      call help ('SPOOL', false);


   /* Internal procedure to abort the current spool file */

   abort_spool: proc;

      if spool_active then
         do;
         call como$$ ('10'b3, '', 0, 0, status);    /* como -e */
         call srch$$ (k$clos, spool_file, 6, 0, 0, status);
         call srch$$ (k$dele, spool_file, 6, 0, 0, status);
         if status ^= 0 then
            call errpr$ (k$nrtn, status, 'Deleting como file.', 19, 'Abort_spool', 11);
         spool_active = false;
         end;

   end;     /* abort_spool */


   start_spool: proc;

   dcl
      temp$a entry (bin, char(*), bin, bin);

      call temp$a (a$getu, spool_file, 6, unit);
      call srch$$ (k$clos, '', 0, unit, 0, status);
      call como$$ ('20'b3, spool_file, 6, 0, status);    /* start como file */
      if status = 0 then
         spool_active = true;
      else
         call errpr$ (k$irtn, status, 'Opening comoutput file.', 23, '', 0);

   end;     /* start_spool */


   end_spool: proc;

   %replace
      buflen by 100;

   dcl
      spool$ entry options (variable);

   dcl
      buf (buflen)      bin,
      1  info    static,
         2  fill1(2)    bin,
         2  pow         bin init (32),
         2  form        char(6) init ('      '),
         2  fill2       bin,
         2  retname     char(6),
         2  fill3(10)   bin,
         2  newname     char(16) init ('dutil.spool'),
         2  fill4       bin;

      if spool_active then
         do;
         call como$$ ('10'b3, '', 0, 0, status);    /* como -e */
         call srch$$ (k$clos, spool_file, 6, 0, 0, status);
         call spool$ (1, spool_file, 6, info, buf, buflen, status);
         if status = 0 then
            do;
            call srch$$ (k$dele, spool_file, 6, 0, 0, status);
            spool_active = false;
            end;
         else
            call errpr$ (k$irtn, status, 'Spooling output.', 16, '', 0);
         end;
      else
         call ioa$er ('No spool file currently active.%.', -1);

   end;     /* end_spool */

end;     /* Spool */
