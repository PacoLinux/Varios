/* Verify.plp, Dutil, JEW, 8-Feb-81
   Verify command.  Verifies the structure of a file.
   Currently handles sam strings only.

   VERIFY | VFY [<bra>] [{-T | -TRACE}]

*/

verify: proc (cl, info, clp);

$Insert *>insert>global.plp.ins
$Insert *>insert>diskio.plp.ins
$Insert *>insert>cl.plp.ins
$Insert *>insert>query.plp.ins


dcl
   nr_records  bin(31),
   ra    bin(31),
   trace bit;

dcl
   help entry (char(*) var, bit),
   ioa$ entry options (variable),
   sam_ok  entry (1, 2, 3 bin(31), 3 bin(31), 3 bin, 3 bin, 3 bin(31),
                  3 bin(31), 3 bin, 3 (5) bin, 2 (0:1023) bin,
                  bin(31), bit, bit, bin(31)) returns (bit);

dcl
   1  my_rec   like  disk_record;


   call cl$par ('0'b, cl, token, token_sz, info, clp, status);
   if info.oct_number then do;
      ra = info.oct_val;
      call cl$par ('0'b, cl, token, token_sz, info, clp, status);
      end;
   else
      ra = rec.cra;

   if token = '-T' | token = '-TRACE' then
      trace = true;
   else
      if info.flags.eol then
         trace = false;
      else
         goto help_me;

   /* check for verifying in the middle of a file...sam_ok can handle
      this, but tell ding-dong */

   call diskio (read_key, ra, cpartition, my_rec, status);
   if status = 0 then
      do;
      if my_rec.back ^= 0 then
         do;
         call ioa$ ('Not verifying from bof, bra is %:3o.%.', -1, my_rec.bra);
         if ^query ('Continue verify? ', def_yes) then return;
         end;

      nr_records = 0;
      if sam_ok (my_rec, ra, trace, '1'b, nr_records) then     /* '1'b => called from VERIFY */
         call ioa$ ('File is ok.%$', -1);
      else
         call ioa$ ('File contains errors.%$', -1);
      call ioa$ ('  %:3d records checked.%.', -1, nr_records);
      end;
   else
      call ioa$ ('I can''t even read the first record!%.', -1);

   return;

help_me:
   call help ('VERIFY', false);

end;
