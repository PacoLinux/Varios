/* Display.plp, Dutil, JEW, 8-Feb-81
   Display command handler.  Displays portions of the current record.

   DISPLAY [<start> [<end>]] [<format>]

*/

display: proc (cl, info, clp);

$Insert *>insert>global.plp.ins
$Insert *>insert>cl.plp.ins

dcl
   ioa$ entry options (variable);

dcl
   els_printed    bin,       /* elements already printed */
   end            bin,
   1  my_format like print_format,
   start          bin;

dcl
   parsefmt entry options (variable),
   print entry options (variable);


   start = 0;
   end = 1023;
   my_format.picture      = def_format.picture;
   my_format.mode         = def_format.mode;
   my_format.els_per_line = def_format.els_per_line;
   my_format.words        = def_format.words;
   call cl$par ('0'b, cl, token, token_sz, info, clp, status);
   if info.flags.dec_number then
      do;
      start = info.dec_val;
      call cl$par ('0'b, cl, token, token_sz, info, clp, status);
      if info.flags.dec_number then
         do;
         end = info.dec_val;
         call cl$par ('0'b, cl, token, token_sz, info, clp, status);
         end;
      end;

   /* check start and end within range */

   if (-16<=start & start<=1023) & (-16<=end & end<=1023) & (start<=end) then
      do;
      if ^info.flags.eol then
         do;
         call parsefmt (token, my_format, status);
         if status ^= 0 then
            do;
            call ioa$ ('Bad format string.%.', -1);
            return;
            end;
         end;

      /* now that parsing is complete, do it */

      els_printed = 0;
      do while (start <= end);
         if mod (els_printed, my_format.els_per_line) = 0 then
            call ioa$ ('%/(%4d) %$', -1, start);
         call print (rec, my_format, start);   /* advances start */
         els_printed = els_printed + 1;
      end;
      call ioa$ ('%.', -1);
      end;
   else
      call ioa$ ('<Start> or <End> out of range or incorrect.%.', -1);

end;   /* display */
