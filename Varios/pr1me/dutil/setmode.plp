/* Setmode.plp, Dutil, JEW, 12-Apr-81
   Changes mode flags.
*/

Setmode: proc (cl, info, clp);

$Insert *>insert>global.plp.ins
$Insert *>insert>cl.plp.ins

dcl
   help     entry (char(*) var, bit),
   ioa$     entry options (variable);

dcl
   mode_value  bit;      /* true/false value for mode switch */


   call cl$par ('0'b, cl, token, token_sz, info, clp, status);
   if ^info.eol then
      do until (info.eol);

         if substr(token, 1, 1) = '^' then
            do;
            mode_value = false;
            token = substr (token, 2);     /* erase ^ */
            end;
         else
            mode_value = true;

         select (token);

            when ('CHECKSUMS', 'CHKSUM')
               addr(read_key) -> diskio_key.ignore_checksum = ^mode_value;

            when ('FORCE_READ', 'FR')
               addr(read_key) -> diskio_key.force_io = mode_value;

            when ('FORCE_WRITE', 'FW')
               addr(write_key) -> diskio_key.force_io = mode_value;

            when ('WRITE_PROTECT', 'WP')
               mode_flags.write_protect = mode_value;

            when ('UPDATE_RAT', 'UR')
               mode_flags.update_rat = mode_value;

            when ('VERIFY_CHANGES', 'VC')
               mode_flags.verify_changes = mode_value;

            when ('CHECK_CRA', 'CHKCRA')
               addr(read_key) -> diskio_key.check_cra = mode_value;

            when ('-LIST', '-L')
               call list_modes;

            otherwise
               call ioa$ ('Unrecognized mode %v ignored.%.', -1, token);

            end;     /* select */

         call cl$par ('0'b, cl, token, token_sz, info, clp, status);

      end;    /* do until */

   else
      call help ('MODES', false);


   /* Internal procedure to list current modes */

   list_modes: proc;

   dcl
      tonl entry;

      call ioa$ ('Modes: %.', -1);
      call print_mode ('checksums', (^addr(read_key) -> diskio_key.ignore_checksum));
      call print_mode ('force_read', (addr(read_key) -> diskio_key.force_io));
      call print_mode ('force_write', (addr(write_key) -> diskio_key.force_io));
      call print_mode ('write_protect', (mode_flags.write_protect));
      call print_mode ('update_rat', (mode_flags.update_rat));
      call print_mode ('verify_changes', (mode_flags.verify_changes));
      call print_mode ('check_cra', (addr(read_key) -> diskio_key.check_cra));
      call tonl;


      /* Internal procedure to print 1 mode setting */

      print_mode: proc (name, value);

      dcl
         tnoua entry (char(*), bin);

      dcl
         name     char(32) var,
         value    bit;

         if ^value then
            call tnoua ('   ^', 4);
         else
            call tnoua ('    ', 4);
         call ioa$ ('%v %.', -1, name);

      end;    /* print_mode */
   end;    /* list_modes */

end;     /* Setmode */
