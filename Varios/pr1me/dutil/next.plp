/* Next.plp, Dutil, JEW, 8-Feb-81
   Step forward or backward from the current record, following the
   record forward and backward pointers. */

next: proc (cl, info, clp);

$Insert *>insert>global.plp.ins
$Insert *>insert>diskio.plp.ins
$Insert *>insert>cl.plp.ins

dcl
   help entry (char(*) var, bit),
   ioa$ entry options (variable),
   print_header entry (1, 2, 3 bin(31), 3 bin(31), 3 bin, 3 bin, 3 bin(31),
                       3 bin(31), 3 bin, 3 (5) bin, 2 (0:1023) bin);

dcl
   done     bit,
   n        bin,          /* number of steps to take */
   next_ra  bin(31),
   reason   char(3),
   step     bin,
   steps_taken bin;


   call cl$par ('0'b, cl, token, token_sz, info, clp, status);
   if info.flags.dec_number then
      n = info.dec_val;
   else if info.flags.eol then
      n = 1;
   else
      goto help_me;

   /* setup for loop */

   if n < 0 then
      step = 1;
   else
      step = -1;
   done = false;
   steps_taken = 0;

   do until (n=0 | done);

      if n > 0 then
         next_ra = rec.next;
      else
         next_ra = rec.back;

      if next_ra = 0 then

         /* have a special case if going backward and record's bra is
            zero (e.g., the second record of BOOT. */

         if n > 0 | rec.bra ^= 0 then
            done = true;

      if ^done then
         do;
         call diskio (read_key, next_ra, cpartition, rec, status);
         if status = 0 then
            steps_taken = steps_taken + 1;
         else
            done = true;
         n = n + step;
         end;

   end;

   /* check for premature end (done is true) */

   if done & status = 0 then
      do;
      if n > 0 then
         reason = 'eof';
      else
         reason = 'bof';
      call ioa$ ('Reached %c, %d steps taken.%/%.', -1, reason, 3, steps_taken);
      end;

   call print_header (rec);
   return;


help_me:
   call help ('NEXT', false);

end;
