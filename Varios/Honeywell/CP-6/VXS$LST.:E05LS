VERSION E05

PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:1    
        1        1        /*M* VXS$LST - builds a VX$LST structure for a file.          */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=6,IND=4,CSU=2,EXM=0,ECU=2,MOC,DCI=4,CRT=4,CTI=8,CCC    */
        8        8
        9        9        /*F*  NAME:       VXS$LST
       10       10              PURPOSE:    Builds a VX$LST structure for a file.
       11       11              DESCRIPTION:
       12       12              Calls M$FID to guarantee the file name is a valid fid, if it isn't
       13       13              a diagnostic is reported.  If the user is online the procedure
       14       14              will query the user for the correct file name, parse the file name
       15       15              and call M$FID until it gets a valid fid.  Otherwise, the link is errored.
       16       16              When the procedure gets a valid fid, it allocates and initializes
       17       17              a VX$LST element for the file and returns a pointer to it.
       18       18        */
       19       19
       20       20        VXS$LST:
       21       21              PROC( PREV$, TXT$,    TYPE, SUB_TYPE, FILE$, ON_ERROR ) ALTRET;
       22       22        /*
       23       23                          Include files
       24       24        */
       25       25        %INCLUDE CP_6;
       26      106        %INCLUDE B$OBJECT_C;
       27     3536        %INCLUDE XU_MACRO_C;
       28     6642        %INCLUDE VX_SUBS_C;
       29     6860        %INCLUDE VX_MACRO_C;
       30     7997        %INCLUDE VX_DATA_R;
       31     9616        %INCLUDE VX_FIXED_R;
       32    10278        %INCLUDE VX_PERR_C;
       33    10532        %INCLUDE CP_6_SUBS;
       34    11072        %VX$LST;

             11085    1   /*******************************************************************************
             11086    1   *                                                                              *
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:2    
             11087    1   *                          VX$LST                                                 *
             11088    1   *                                                                              *
             11089    1   *******************************************************************************/

             11094    1   DCL 1 VX$LST                          ALIGNED BASED,
             11095    1         2 LINK$        PTR,               /* Link to next item                  */
             11096    1         2 TYPE         UBIN( 18) UNAL,    /* Type                               */
             11097    1         2 SUB_TYPE     UBIN( 18) UNAL,    /* Sub-type                           */
             11098    1         2 OBJECT_NAME$ PTR,               /* Pointer to object unit name        */
             11099    1         2 PRIOR$ REDEF OBJECT_NAME$ PTR,  /* Pointer to prior element in list   */
             11100    1         2 SC_HEAD$     PTR,               /* Head pointer to section link list  */
             11101    1         2 LIBSRCH$ REDEF SC_HEAD$ PTR,    /* Pointer to account list for library*/
             11102    1         2 SC_TAIL$     PTR,               /* Tail pointer to section link list  */
             11103    1         2 LIB REDEF SC_TAIL$,             /* Used only by UNSAT library files   */
             11104    1           3 USED UBIN HALF UNAL,          /* 1 => library file used, 0=>not used*/
             11105    1           3 NEEDED UBIN HALF UNAL,   /* 1 => library file needed, 0=>not needed*/
             11106    1         2 P,
             11107    1           3 NAME_       ALIGNED,
             11108    1             4 BOUND      UBIN(20)  UNAL,
             11109    1             4 FLAGSV     UBIN(11)  UNAL,
             11110    1             4 *          BIT(5)    UNAL,
             11111    1             4 NAME$      PTR,
             11112    1           3 ACCT_       ALIGNED,
             11113    1             4 BOUND      UBIN(20)  UNAL,
             11114    1             4 FLAGSV     UBIN(11)  UNAL,
             11115    1             4 *          BIT(5)    UNAL,
             11116    1             4 ACCT$      PTR,
             11117    1           3 PASS_       ALIGNED,
             11118    1             4 BOUND      UBIN(20)  UNAL,
             11119    1             4 FLAGSV     UBIN(11)  UNAL,
             11120    1             4 *          BIT(5)    UNAL,
             11121    1             4 PASS$      PTR,
             11122    1           3 SN_         ALIGNED,
             11123    1             4 BOUND      UBIN(20)  UNAL,
             11124    1             4 FLAGSV     UBIN(11)  UNAL,
             11125    1             4 *          BIT(5)    UNAL,
             11126    1             4 SN$        PTR,
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:3    
             11127    1           3 WSN_        ALIGNED,
             11128    1             4 BOUND      UBIN(20)  UNAL,
             11129    1             4 FLAGSV     UBIN(11)  UNAL,
             11130    1             4 *          BIT(5)    UNAL,
             11131    1             4 WSN$       PTR,
             11132    1           3 B           ALIGNED,
             11133    1             4 RES        BIT(1)    UNAL,
             11134    1             4 ASN        BIT(1)    UNAL,
             11135    1             4 ACCT       BIT(1)    UNAL,
             11136    1             4 *          BIT(33)   UNAL,
             11137    1           3 RES         CHAR(4)   ALIGNED,
             11138    1           3 ASN         UBIN(36)  ALIGNED;
       35    11141        %T$C;

             11153    1   /*******************************************************************************
             11154    1   *                                                                              *
             11155    1   *                          T$C                                                 *
             11156    1   *                                                                              *
             11157    1   *******************************************************************************/

             11162    1   DCL 1 T$C           BASED     ALIGNED,  /* Text count                         */
             11163    1         2 COUNT        UBIN( 9) UNAL,
             11164    1         2 CHARS        CHAR( T$C.COUNT )   UNAL;
             11165    1   DCL 1 T$C_UNAL      BASED     UNAL,     /* Text count                         */
             11166    1         2 COUNT        UBIN( 9) UNAL,
             11167    1         2 CHARS        CHAR( T$C_UNAL.COUNT ) UNAL;
       36    11170        %SET LISTMAC='1'B;
       37    11171        %SET LISTEXP='1'B;
       38    11172        %SET LISTSUB='1'B;
       39    11173        %FILE;
             11174    1   DCL 1 F$NAME_                 BASED,
             11175    1         2 COUNT             UBIN( 9) UNAL,
             11176    1         2 CHARS             CHAR( F$NAME_.COUNT ) UNAL;
             11177    1   DCL F$ACCT_         CHAR(8/*@F_ACCT_SIZEC*/) BASED;
             11178    1   DCL F$ACCT_A(0:7/*@F_ACCT_SIZEC1*/)     CHAR(1)   BASED;
             11179    1   DCL F$PASS_         CHAR(8/*@F_PASS_SIZEC*/) BASED;
             11180    1   DCL F$PASS_A(0:7/*@F_PASS_SIZEC1*/)     CHAR(1)   BASED;
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:4    
       40    11182        %PARSE$OUT( NAME=O$B, STCLASS="BASED");
             11183        /*F*  NAME:     PARSE$OUT
             11184              FUNCTION: a structure built by X$PARSE which corresponds to a "list",
             11185                  "alternative", "reducing alternative", or "koncat" node in
             11186                  the user's parse tree.
             11187        */
             11188    1   DCL 1 O$B BASED ALIGNED,
             11189    1         2 TEMP BIT(1) UNAL,
             11190    1         2 * BIT (11) UNAL,
             11191    1         2 NDTYPE UBIN (6) UNAL,
             11192        /*K* NDTYPE - specifies the type of parse node to which this PARSE$OUT
             11193                  block corresponds.  See the XU_SUBS_C file for the
             11194                  %EQU symbols whose values may appear in this field.
             11195        */
             11196    1         2 CODE UBIN HALF HALIGNED,
             11197        /*K* CODE - Contains the numeric "node code" specified by the user when
             11198                  the corresponding parse-node was defined.
             11199        */
             11200    1         2 NSUBLKS UBIN HALF HALIGNED,
             11201        /*K* NSUBLKS - "number of sub-blocks".  This field contains the count of
             11202                  pointers actually available in the PARSE$OUT.SUBLK$ array.
             11203        */
             11204    1         2 SCRITCH UBIN HALF HALIGNED,
             11205        /*K* SCRITCH - an 18-bit scratch field reserved for the user.  X$PARSE
             11206                  initializes this field to zero when the PARSE$OUT structure
             11207                  is allocated, and never sets or examines it thereafter.
             11208                  The name of this field may be changed when the PARSE$OUT macro
             11209                  is invoked by the user (say "SCRITCH=yourname"), and its data
             11210                  type may also be changed (say "SCRMODE=pl6datatype" and
             11211                  "SCRALGN=alignment").  BEWARE: this field MUST be 18-bits long,
             11212                  and be UNALIGNED, CALIGNED, or HALIGNED.
             11213        */
             11214    1         2 CPOS UBIN WORD,
             11215        /*K* CPOS - "character position" of this block.  This field will contain
             11216                  a character index (starting at 0) into the original parse
             11217                  string;  the index identifies the first character of the
             11218                  string which was accepted by this node (or by any of its
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:5    
             11219                  sub-nodes).
             11220        */
             11221    1         2 SUBLK$(0:0) PTR UNAL;
             11222        /*K* SUBLK$ - an array of PL-6 PTRs.  The number of elements in this array
             11223                  is found in OUT$BLK.NSUBLKS;  each PTR will point to another
             11224                  OUT$BLK structure, or to an OUT$SYM structure.
             11225        */
       41    11227        %PLIST;
       42    11228        %FPT_FID( FPTN = FID,
       43    11229                  NAME = VLP_NAME,
       44    11230                  ACCT = VLP_ACCT,
       45    11231                  PASS = VLP_PASS,
       46    11232                  SN   = VLP_SN,
       47    11233                  WSN  = VLP_WSN,
       48    11234                  ASN  = F.ASN_,
       49    11235                  RES  = F.RES_,
       50    11236                  RESULTS = FR );
       51    11259    1   DCL 1 F ALIGNED STATIC,
       52    11260    1         2 ASN_ UBIN(9) ALIGNED,
       53    11261    1         2 RES_ CHAR(4) ALIGNED;
       54    11262        %VLP_NAME(FPTN=VLP_NAME,STCLASS=STATIC );
       55    11289        %VLP_ACCT(FPTN=VLP_ACCT,STCLASS=STATIC);
       56    11302        %VLP_PASS(FPTN=VLP_PASS,STCLASS=STATIC);
       57    11315        %VLP_SN  (FPTN=VLP_SN,N=9,STCLASS=STATIC);
       58    11328        %VLP_WSN (FPTN=VLP_WSN,STCLASS=STATIC);
       59    11341        %VLP_ACCT(FPTN=VLP$ACCT,STCLASS=BASED);
       60    11354        %VLP_PASS(FPTN=VLP$PASS,STCLASS=BASED);
       61    11367        %VLP_SN  (FPTN=VLP$SN,N=9,STCLASS=BASED);
       62    11380        %VLP_WSN (FPTN=VLP$WSN,STCLASS=BASED);
       63    11393        %PLIST;
       64    11394        /**/
       65    11395        %VLR_FID(FPTN=FR);
       66    11414        %P;

             11422    1   /*******************************************************************************
             11423    1   *                                                                              *
             11424    1   *                          PARAMETERS                                              *
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:6    
             11425    1   *                                                                              *
             11426    1   *******************************************************************************/

       67    11430    1   DCL PREV$           PTR       ALIGNED;
       68    11431    1   DCL TXT$           PTR       ALIGNED;
       69    11432    1   DCL TYPE            UBIN(36)  ALIGNED;
       70    11433    1   DCL SUB_TYPE        UBIN(36)  ALIGNED;
       71    11434    1   DCL FILE$           PTR       ALIGNED;
       72    11435    1   DCL ON_ERROR        SBIN WORD ALIGNED;
       73    11436        %PTR;

             11444    1   /*******************************************************************************
             11445    1   *                                                                              *
             11446    1   *                          PTR                                                 *
             11447    1   *                                                                              *
             11448    1   *******************************************************************************/

       74    11452    1   DCL ALL$            PTR       ALIGNED   AUTO;
       75    11453    1   DCL CURR$           PTR       ALIGNED   AUTO;
       76    11454    1   DCL WORK$           PTR       ALIGNED   AUTO;
       77    11455    1   DCL WHERE$          PTR       ALIGNED   AUTO;
       78    11456    1   DCL TEXT$           PTR       ALIGNED   AUTO;
       79    11457        %E;

             11465    1   /*******************************************************************************
             11466    1   *                                                                              *
             11467    1   *                          ENTRY                                                 *
             11468    1   *                                                                              *
             11469    1   *******************************************************************************/

       80    11473    1   DCL VXA$GET         ENTRY(3);
       81    11474    1   DCL VXE$ERROR        ENTRY(4);
       82    11475    1   DCL VXP$PAR          ENTRY(5)  ALTRET;
       83    11476    1   DCL VXF$FREE         ENTRY(3);
       84    11477    1   DCL VXD$B2C          ENTRY(5);
       85    11478        %U;

PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:7    
             11486    1   /*******************************************************************************
             11487    1   *                                                                              *
             11488    1   *                          UBIN                                                 *
             11489    1   *                                                                              *
             11490    1   *******************************************************************************/

       86    11494    1   DCL SIZE            UBIN(36)  ALIGNED   AUTO;
       87    11495    1   DCL STOP            UBIN(36)  ALIGNED   AUTO;
       88    11496    1   DCL I               UBIN(36)  ALIGNED   AUTO;
       89    11497    1   DCL J               UBIN(36)  ALIGNED   AUTO;
       90    11498    1   DCL NCHARS           UBIN(36)  ALIGNED   AUTO;
       91    11499    1   DCL WKSZ            UBIN(36)  ALIGNED   AUTO;
       92    11500    1   DCL SIZE_ALL        UBIN(36)  ALIGNED   AUTO;
       93    11501        /**/
       94    11502    1   DCL VX_N_START_FID   UBIN(36)  ALIGNED   SYMREF;
       95    11503        %PLIST;
       96    11504        %EJECT;
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:8    
       97    11505    1         TEXT$ = TXT$;
       98    11506    1         SIZE_ALL = 0;
       99    11507    1         IF ON_ERROR = -8 THEN ALL$ = PREV$;
      100    11508    2         ELSE DO;
      101    11509                  %ALLOCATE( PTR$=ALL$, TYPE=@GDP, SIZE="SIZEW(VX$LST)" );
      102    11516    2             PREV$ = ALL$;
      103    11517    2             ALL$ -> VX$LST.LINK$ = ADDR(NIL);
      104    11518    2             ALL$ -> VX$LST.TYPE  = TYPE;
      105    11519    2             ALL$ -> VX$LST.SUB_TYPE = SUB_TYPE;
      106    11520    2             ALL$ -> VX$LST.OBJECT_NAME$ = ADDR(NIL);
      107    11521    2             ALL$ -> VX$LST.SC_HEAD$     = ADDR(NIL);
      108    11522    2             ALL$ -> VX$LST.SC_TAIL$     = ADDR( ALL$ -> VX$LST.SC_HEAD$ );
      109    11523    2            END;
      110    11524    2         IF FILE$ = ADDR(NIL) OR ON_ERROR = -10 THEN DO;
      111    11525    2   RETRY:
      112    11526    2             FID.TEXTFID_ = VECTOR( TEXT$ -> T$C.CHARS );
      113    11527    2             CALL M$FID( FID )   ALTRET(FID_ERR);
      114    11528    3             IF F.ASN_ ~= 1 THEN DO;
      115    11529    4                 IF ON_ERROR ~= -9 THEN DO;
      116    11530        /*E*  ERROR: VXS-E$NO_FILE_NAME_VX-0
      117    11531              MESSAGE: "%U1" is not a file; Enter correct file name.
      118    11532              DESCRIPTION: Self-explanatory.
      119    11533        */
      120    11534        /*E*  ERROR: VXS-E$NO_FILE_NAME_BATCH_VX-0
      121    11535              MESSAGE: "%U1" is not a file.
      122    11536              DESCRIPTION: Self-explanatory.
      123    11537        */
      124    11538    4   REPORT_NO_NAME:
      125    11539    4                     IF VX_ONLINE = 1/*@YES*/ THEN J = 115;
      126    11540    4                     ELSE J = 116;
      127    11541    4                     GOTO REPORT_ERROR;
      128    11542    4                    END;
      129    11543    3                END;
      130    11544    2             ALL$ -> VX$LST.P.B.ASN = '1'B/*@TRUE_B*/;
      131    11545    2             ALL$ -> VX$LST.P.ASN = F.ASN_;
      132    11546    2             ALL$ -> VX$LST.P.NAME_ = VECTOR(NIL);
      133    11547    3             IF FR.NAME THEN DO;
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:9    
      134    11548    3                 ALL$ -> VX$LST.P.NAME_.BOUND = VLP_NAME.L#;
      135    11549    3                 SIZE = ( VLP_NAME.L# + 4 ) / 4;
      136    11550                      %ALLOCATE( PTR$=WHERE$, TYPE=@GDP, SIZE=SIZE );
      137    11557    3                 ALL$ -> VX$LST.P.NAME_.NAME$ = WHERE$;
      138    11558    3                 WHERE$ -> T$C.COUNT = VLP_NAME.L#;
      139    11559    3                 WHERE$ -> T$C.CHARS = VLP_NAME.NAME#;
      140    11560    3                END;
      141    11561    2             ELSE
      142    11562    2                 IF ON_ERROR ~= -9 THEN GOTO REPORT_NO_NAME;
      143    11563    2                 ELSE ALL$ -> VX$LST.P.NAME_ = VECTOR(NIL);
      144    11564    3             IF FR.RES THEN DO;
      145    11565    3                 ALL$ -> VX$LST.P.B.RES = '1'B/*@TRUE_B*/;
      146    11566    3                 ALL$ -> VX$LST.P.RES   = F.RES_;
      147    11567    3                END;
      148    11568    2             ELSE ALL$ -> VX$LST.P.B.RES = '0'B/*@FALSE_B*/;
      149    11569    3             IF FR.WSN THEN DO;
      150    11570                      %ALLOCATE( PTR$=WHERE$, TYPE=@GDP, SIZE="SIZEW(VLP_WSN)" );
      151    11577    3                 WHERE$ -> VLP$WSN = VLP_WSN;
      152    11578    3                 ALL$ -> VX$LST.P.WSN_ = VECTOR( WHERE$ -> VLP$WSN );
      153    11579    3                END;
      154    11580    2             ELSE ALL$ -> VX$LST.P.WSN_ = VECTOR(NIL);
      155    11581    3             IF FR.SN THEN DO;
      156    11582                      %ALLOCATE( PTR$=WHERE$, TYPE=@GDP, SIZE="SIZEW(VLP_SN)" );
      157    11589    3                 WHERE$ -> VLP$SN = VLP_SN;
      158    11590    3                 ALL$ -> VX$LST.P.SN_ = VECTOR( WHERE$ -> VLP$SN );
      159    11591    3                END;
      160    11592    2             ELSE ALL$ -> VX$LST.P.SN_ = VECTOR(NIL);
      161    11593    3             IF FR.PASS THEN DO;
      162    11594                      %ALLOCATE( PTR$=WHERE$, TYPE=@GDP, SIZE=@F_PASS_SIZEW );
      163    11601    3                 WHERE$ -> VLP$PASS   = VLP_PASS;
      164    11602    3                 ALL$ -> VX$LST.P.PASS_ = VECTOR( WHERE$ -> VLP$PASS );
      165    11603    3                END;
      166    11604    2             ELSE ALL$ -> VX$LST.P.PASS_ = VECTOR(NIL);
      167    11605    3             IF FR.ACCT THEN DO;
      168    11606                      %ALLOCATE( PTR$=WHERE$, TYPE=@GDP, SIZE=@F_ACCT_SIZEW );
      169    11613    3                 WHERE$ -> VLP$ACCT   = VLP_ACCT;
      170    11614    3                 ALL$ -> VX$LST.P.ACCT_ = VECTOR( WHERE$ -> VLP$ACCT );
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:10   
      171    11615    3                END;
      172    11616    3             ELSE DO;
      173    11617    3                 IF TYPE = 2/*@LF*/ AND (SUB_TYPE = 1/*@LF_ALIB*/ OR SUB_TYPE = 2
             11617                          /*@LF_SLIB*/)
      174    11618    3                 THEN ALL$ -> VX$LST.P.ACCT_ = VECTOR( VX_SYS );
      175    11619    3                 ELSE ALL$ -> VX$LST.P.ACCT_ = VECTOR( NIL );
      176    11620    3                END;
      177    11621    2             ALL$ -> VX$LST.P.B.ACCT = ( ALL$ -> VX$LST.P.ACCT_.ACCT$ ~= ADDR(NIL) ) |
             11621                      ( FR.SN );
      178    11622    3             IF ON_ERROR = -10 THEN DO;
      179    11623    3                 J = (FILE$->T$C.COUNT + 4/*@CHAR_WORD*/ + LENGTHC(VX_O_KEY_HEAD) ) / 4
             11623                          /*@CHAR_WORD*/;
      180    11624                      %ALLOCATE( PTR$=WHERE$, TYPE=@GDP, SIZE=J );
      181    11631    3                 WHERE$ -> T$C.COUNT = FILE$ -> T$C.COUNT+LENGTHC(VX_O_KEY_HEAD);
             11631                          /* For object unit name and head byte */
      182    11632    3                 CALL CONCAT( WHERE$ -> T$C.CHARS, VX_O_KEY_HEAD, FILE$ -> T$C.CHARS );
      183    11633    3                 ALL$ -> VX$LST.OBJECT_NAME$ = WHERE$; /* And stow away */
      184    11634    3                END;
      185    11635    2             IF VX_COUNT_FID ~= 0/*@NO*/ THEN VX_FID_COUNT = VX_FID_COUNT + 1;
             11635                      /* If counting fids => inc */
      186    11636    2             IF SIZE_ALL > 0 THEN CALL VXF$FREE( 3/*@DS3*/, SIZE_ALL, 1 );
      187    11637    2             RETURN;
      188    11638        %EJECT;
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:11   
      189    11639    2   FID_ERR:  ;
      190    11640        /*E*  ERROR: VXS-E$FID_ERROR_VX-0
      191    11641              MESSAGE: Illegal fid in %U1; Enter correct file name.
      192    11642              DESCRIPTION: Self-explanatory.
      193    11643        */
      194    11644        /*E*  ERROR: VXS-E$FID_ERROR_BATCH_VX-0
      195    11645              MESSAGE: Illegal fid in %U1.
      196    11646              DESCRIPTION: Self-explanatory.
      197    11647        */
      198    11648    2             IF VX_ONLINE = 1/*@YES*/ THEN J = 117;
      199    11649    2             ELSE J = 118;
      200    11650    2   REPORT_ERROR:
      201    11651    2             IF VX_ONLINE = 1/*@YES*/ THEN I=3;
      202    11652    2             ELSE I = 4;
      203    11653    2             VX_EFIELD1.COUNT = TEXT$ -> T$C.COUNT;
      204    11654    2             VX_EFIELD1.CHARS = TEXT$ -> T$C.CHARS;
      205    11655                  %SCREAM( ERR#=J, LEVEL=I, MID="'S'" );
      206    11658    3             IF VX_ONLINE = 1/*@YES*/ THEN DO;
      207    11659    3                 WKSZ = 256/4;
      208    11660    3                 CALL VXP$PAR( 2, ADDR(VX_N_START_FID),
      209    11661    3                         TEXT$, NCHARS, WKSZ );
      210    11662    3                 SIZE_ALL = SIZE_ALL + WKSZ;
      211    11663    3                 TEXT$ = VX_P_PCB_MAIN.OUT$ -> O$B.SUBLK$(0)->
      212    11664    3                         O$B.SUBLK$(0) -> O$B.SUBLK$(0);
      213    11665    3                 GOTO RETRY;
      214    11666    3                END;
      215    11667    3             ELSE DO;
      216    11668                      %ERROR_IT;
      217    11671    3                END;                       /* Else do; */
      218    11672    2            END;
      219    11673        %EJECT;
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:12   
      220    11674    2         ELSE DO;                  /* For cobol object units/ tree specification */
      221    11675                                                /* Point to ancestor file */
      222    11676    2             ALL$ -> VX$LST.P = FILE$ -> VX$LST.P;
      223    11677    2             J = (TEXT$->T$C.COUNT + 4/*@CHAR_WORD*/ + LENGTHC(VX_O_KEY_HEAD) ) / 4
             11677                      /*@CHAR_WORD*/;
      224    11678                  %ALLOCATE( PTR$=WHERE$, TYPE=@GDP, SIZE=J );
      225    11685    2             WHERE$ -> T$C.COUNT = TEXT$ -> T$C.COUNT+LENGTHC(VX_O_KEY_HEAD);
             11685                      /* For object unit name and head byte */
      226    11686    2             CALL CONCAT( WHERE$ -> T$C.CHARS, VX_O_KEY_HEAD, TEXT$ -> T$C.CHARS );
      227    11687    2             ALL$ -> VX$LST.OBJECT_NAME$ = WHERE$; /* And stow away */
      228    11688    2            END;
      229    11689    1   END VXS$LST;
      230    11690        %EOD;

PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:13   
--  Include file information  --

   CP_6_SUBS.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXS$LST.

   Procedure VXS$LST requires 571 words for executable code.
   Procedure VXS$LST requires 28 words of local(AUTO) storage.

PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:14   

 Object Unit name= VXS$LST                                    File name= VXS$LST.:E05TOU
 UTS= JUL 30 '97 08:36:12.20 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none    66    102  VXS$LST
    2   Proc  even  none   571   1073  VXS$LST
    3  RoData even  none    21     25  VXS$LST

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        6  VXS$LST

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       3 VXA$GET
         yes           Std       3 VXF$FREE
         yes           Std       4 VXE$ERROR
 yes     yes           Std       5 VXP$PAR
                       nStd      0 X66_AUTO_N
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:15   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VX_OU_HEAD                            VX_COUNT_FID
     VX_FID_COUNT                          VX_ERRORS                             VX_M_FREE
     VX_M_ALL                              VX_M_BASE_PTR                         VX_ONLINE
     VX_EFIELD1                            VX_O_KEY_HEAD                         VX_SYS
     VX_P_PCB_MAIN                         VX_N_START_FID                        B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:16   


        1        1        /*M* VXS$LST - builds a VX$LST structure for a file.          */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=6,IND=4,CSU=2,EXM=0,ECU=2,MOC,DCI=4,CRT=4,CTI=8,CCC    */
        8        8
        9        9        /*F*  NAME:       VXS$LST
       10       10              PURPOSE:    Builds a VX$LST structure for a file.
       11       11              DESCRIPTION:
       12       12              Calls M$FID to guarantee the file name is a valid fid, if it isn't
       13       13              a diagnostic is reported.  If the user is online the procedure
       14       14              will query the user for the correct file name, parse the file name
       15       15              and call M$FID until it gets a valid fid.  Otherwise, the link is errored.
       16       16              When the procedure gets a valid fid, it allocates and initializes
       17       17              a VX$LST element for the file and returns a pointer to it.
       18       18        */
       19       19
       20       20        VXS$LST:
       21       21              PROC( PREV$, TXT$,    TYPE, SUB_TYPE, FILE$, ON_ERROR ) ALTRET;

     21  2 000000   000000 700200 xent  VXS$LST      TSX0  ! X66_AUTO_N
         2 000001   000034 000006                    ZERO    28,6

       22       22        /*
       23       23                          Include files
       24       24        */
       25       25        %INCLUDE CP_6;
       26      106        %INCLUDE B$OBJECT_C;
       27     3536        %INCLUDE XU_MACRO_C;
       28     6642        %INCLUDE VX_SUBS_C;
       29     6860        %INCLUDE VX_MACRO_C;
       30     7997        %INCLUDE VX_DATA_R;
       31     9616        %INCLUDE VX_FIXED_R;
       32    10278        %INCLUDE VX_PERR_C;
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:17   
       33    10532        %INCLUDE CP_6_SUBS;
       34    11072        %VX$LST;

             11085    1   /*******************************************************************************
             11086    1   *                                                                              *
             11087    1   *                          VX$LST                                                 *
             11088    1   *                                                                              *
             11089    1   *******************************************************************************/

             11094    1   DCL 1 VX$LST                          ALIGNED BASED,
             11095    1         2 LINK$        PTR,               /* Link to next item                  */
             11096    1         2 TYPE         UBIN( 18) UNAL,    /* Type                               */
             11097    1         2 SUB_TYPE     UBIN( 18) UNAL,    /* Sub-type                           */
             11098    1         2 OBJECT_NAME$ PTR,               /* Pointer to object unit name        */
             11099    1         2 PRIOR$ REDEF OBJECT_NAME$ PTR,  /* Pointer to prior element in list   */
             11100    1         2 SC_HEAD$     PTR,               /* Head pointer to section link list  */
             11101    1         2 LIBSRCH$ REDEF SC_HEAD$ PTR,    /* Pointer to account list for library*/
             11102    1         2 SC_TAIL$     PTR,               /* Tail pointer to section link list  */
             11103    1         2 LIB REDEF SC_TAIL$,             /* Used only by UNSAT library files   */
             11104    1           3 USED UBIN HALF UNAL,          /* 1 => library file used, 0=>not used*/
             11105    1           3 NEEDED UBIN HALF UNAL,   /* 1 => library file needed, 0=>not needed*/
             11106    1         2 P,
             11107    1           3 NAME_       ALIGNED,
             11108    1             4 BOUND      UBIN(20)  UNAL,
             11109    1             4 FLAGSV     UBIN(11)  UNAL,
             11110    1             4 *          BIT(5)    UNAL,
             11111    1             4 NAME$      PTR,
             11112    1           3 ACCT_       ALIGNED,
             11113    1             4 BOUND      UBIN(20)  UNAL,
             11114    1             4 FLAGSV     UBIN(11)  UNAL,
             11115    1             4 *          BIT(5)    UNAL,
             11116    1             4 ACCT$      PTR,
             11117    1           3 PASS_       ALIGNED,
             11118    1             4 BOUND      UBIN(20)  UNAL,
             11119    1             4 FLAGSV     UBIN(11)  UNAL,
             11120    1             4 *          BIT(5)    UNAL,
             11121    1             4 PASS$      PTR,
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:18   
             11122    1           3 SN_         ALIGNED,
             11123    1             4 BOUND      UBIN(20)  UNAL,
             11124    1             4 FLAGSV     UBIN(11)  UNAL,
             11125    1             4 *          BIT(5)    UNAL,
             11126    1             4 SN$        PTR,
             11127    1           3 WSN_        ALIGNED,
             11128    1             4 BOUND      UBIN(20)  UNAL,
             11129    1             4 FLAGSV     UBIN(11)  UNAL,
             11130    1             4 *          BIT(5)    UNAL,
             11131    1             4 WSN$       PTR,
             11132    1           3 B           ALIGNED,
             11133    1             4 RES        BIT(1)    UNAL,
             11134    1             4 ASN        BIT(1)    UNAL,
             11135    1             4 ACCT       BIT(1)    UNAL,
             11136    1             4 *          BIT(33)   UNAL,
             11137    1           3 RES         CHAR(4)   ALIGNED,
             11138    1           3 ASN         UBIN(36)  ALIGNED;
       35    11141        %T$C;

             11153    1   /*******************************************************************************
             11154    1   *                                                                              *
             11155    1   *                          T$C                                                 *
             11156    1   *                                                                              *
             11157    1   *******************************************************************************/

             11162    1   DCL 1 T$C           BASED     ALIGNED,  /* Text count                         */
             11163    1         2 COUNT        UBIN( 9) UNAL,
             11164    1         2 CHARS        CHAR( T$C.COUNT )   UNAL;
             11165    1   DCL 1 T$C_UNAL      BASED     UNAL,     /* Text count                         */
             11166    1         2 COUNT        UBIN( 9) UNAL,
             11167    1         2 CHARS        CHAR( T$C_UNAL.COUNT ) UNAL;
       36    11170        %SET LISTMAC='1'B;
       37    11171        %SET LISTEXP='1'B;
       38    11172        %SET LISTSUB='1'B;
       39    11173        %FILE;
             11174    1   DCL 1 F$NAME_                 BASED,
             11175    1         2 COUNT             UBIN( 9) UNAL,
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:19   
             11176    1         2 CHARS             CHAR( F$NAME_.COUNT ) UNAL;
             11177    1   DCL F$ACCT_         CHAR(8/*@F_ACCT_SIZEC*/) BASED;
             11178    1   DCL F$ACCT_A(0:7/*@F_ACCT_SIZEC1*/)     CHAR(1)   BASED;
             11179    1   DCL F$PASS_         CHAR(8/*@F_PASS_SIZEC*/) BASED;
             11180    1   DCL F$PASS_A(0:7/*@F_PASS_SIZEC1*/)     CHAR(1)   BASED;
       40    11182        %PARSE$OUT( NAME=O$B, STCLASS="BASED");
             11183        /*F*  NAME:     PARSE$OUT
             11184              FUNCTION: a structure built by X$PARSE which corresponds to a "list",
             11185                  "alternative", "reducing alternative", or "koncat" node in
             11186                  the user's parse tree.
             11187        */
             11188    1   DCL 1 O$B BASED ALIGNED,
             11189    1         2 TEMP BIT(1) UNAL,
             11190    1         2 * BIT (11) UNAL,
             11191    1         2 NDTYPE UBIN (6) UNAL,
             11192        /*K* NDTYPE - specifies the type of parse node to which this PARSE$OUT
             11193                  block corresponds.  See the XU_SUBS_C file for the
             11194                  %EQU symbols whose values may appear in this field.
             11195        */
             11196    1         2 CODE UBIN HALF HALIGNED,
             11197        /*K* CODE - Contains the numeric "node code" specified by the user when
             11198                  the corresponding parse-node was defined.
             11199        */
             11200    1         2 NSUBLKS UBIN HALF HALIGNED,
             11201        /*K* NSUBLKS - "number of sub-blocks".  This field contains the count of
             11202                  pointers actually available in the PARSE$OUT.SUBLK$ array.
             11203        */
             11204    1         2 SCRITCH UBIN HALF HALIGNED,
             11205        /*K* SCRITCH - an 18-bit scratch field reserved for the user.  X$PARSE
             11206                  initializes this field to zero when the PARSE$OUT structure
             11207                  is allocated, and never sets or examines it thereafter.
             11208                  The name of this field may be changed when the PARSE$OUT macro
             11209                  is invoked by the user (say "SCRITCH=yourname"), and its data
             11210                  type may also be changed (say "SCRMODE=pl6datatype" and
             11211                  "SCRALGN=alignment").  BEWARE: this field MUST be 18-bits long,
             11212                  and be UNALIGNED, CALIGNED, or HALIGNED.
             11213        */
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:20   
             11214    1         2 CPOS UBIN WORD,
             11215        /*K* CPOS - "character position" of this block.  This field will contain
             11216                  a character index (starting at 0) into the original parse
             11217                  string;  the index identifies the first character of the
             11218                  string which was accepted by this node (or by any of its
             11219                  sub-nodes).
             11220        */
             11221    1         2 SUBLK$(0:0) PTR UNAL;
             11222        /*K* SUBLK$ - an array of PL-6 PTRs.  The number of elements in this array
             11223                  is found in OUT$BLK.NSUBLKS;  each PTR will point to another
             11224                  OUT$BLK structure, or to an OUT$SYM structure.
             11225        */
       41    11227        %PLIST;
       42    11228        %FPT_FID( FPTN = FID,
       43    11229                  NAME = VLP_NAME,
       44    11230                  ACCT = VLP_ACCT,
       45    11231                  PASS = VLP_PASS,
       46    11232                  SN   = VLP_SN,
       47    11233                  WSN  = VLP_WSN,
       48    11234                  ASN  = F.ASN_,
       49    11235                  RES  = F.RES_,
       50    11236                  RESULTS = FR );
       51    11259    1   DCL 1 F ALIGNED STATIC,
       52    11260    1         2 ASN_ UBIN(9) ALIGNED,
       53    11261    1         2 RES_ CHAR(4) ALIGNED;
       54    11262        %VLP_NAME(FPTN=VLP_NAME,STCLASS=STATIC );
       55    11289        %VLP_ACCT(FPTN=VLP_ACCT,STCLASS=STATIC);
       56    11302        %VLP_PASS(FPTN=VLP_PASS,STCLASS=STATIC);
       57    11315        %VLP_SN  (FPTN=VLP_SN,N=9,STCLASS=STATIC);
       58    11328        %VLP_WSN (FPTN=VLP_WSN,STCLASS=STATIC);
       59    11341        %VLP_ACCT(FPTN=VLP$ACCT,STCLASS=BASED);
       60    11354        %VLP_PASS(FPTN=VLP$PASS,STCLASS=BASED);
       61    11367        %VLP_SN  (FPTN=VLP$SN,N=9,STCLASS=BASED);
       62    11380        %VLP_WSN (FPTN=VLP$WSN,STCLASS=BASED);
       63    11393        %PLIST;
       64    11394        /**/
       65    11395        %VLR_FID(FPTN=FR);
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:21   
       66    11414        %P;

             11422    1   /*******************************************************************************
             11423    1   *                                                                              *
             11424    1   *                          PARAMETERS                                             *
             11425    1   *                                                                              *
             11426    1   *******************************************************************************/

       67    11430    1   DCL PREV$           PTR       ALIGNED;
       68    11431    1   DCL TXT$           PTR       ALIGNED;
       69    11432    1   DCL TYPE            UBIN(36)  ALIGNED;
       70    11433    1   DCL SUB_TYPE        UBIN(36)  ALIGNED;
       71    11434    1   DCL FILE$           PTR       ALIGNED;
       72    11435    1   DCL ON_ERROR        SBIN WORD ALIGNED;
       73    11436        %PTR;

             11444    1   /*******************************************************************************
             11445    1   *                                                                              *
             11446    1   *                          PTR                                                 *
             11447    1   *                                                                              *
             11448    1   *******************************************************************************/

       74    11452    1   DCL ALL$            PTR       ALIGNED   AUTO;
       75    11453    1   DCL CURR$           PTR       ALIGNED   AUTO;
       76    11454    1   DCL WORK$           PTR       ALIGNED   AUTO;
       77    11455    1   DCL WHERE$          PTR       ALIGNED   AUTO;
       78    11456    1   DCL TEXT$           PTR       ALIGNED   AUTO;
       79    11457        %E;

             11465    1   /*******************************************************************************
             11466    1   *                                                                              *
             11467    1   *                          ENTRY                                                 *
             11468    1   *                                                                              *
             11469    1   *******************************************************************************/

       80    11473    1   DCL VXA$GET         ENTRY(3);
       81    11474    1   DCL VXE$ERROR        ENTRY(4);
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:22   
       82    11475    1   DCL VXP$PAR          ENTRY(5)  ALTRET;
       83    11476    1   DCL VXF$FREE         ENTRY(3);
       84    11477    1   DCL VXD$B2C          ENTRY(5);
       85    11478        %U;

             11486    1   /*******************************************************************************
             11487    1   *                                                                              *
             11488    1   *                          UBIN                                                 *
             11489    1   *                                                                              *
             11490    1   *******************************************************************************/

       86    11494    1   DCL SIZE            UBIN(36)  ALIGNED   AUTO;
       87    11495    1   DCL STOP            UBIN(36)  ALIGNED   AUTO;
       88    11496    1   DCL I               UBIN(36)  ALIGNED   AUTO;
       89    11497    1   DCL J               UBIN(36)  ALIGNED   AUTO;
       90    11498    1   DCL NCHARS           UBIN(36)  ALIGNED   AUTO;
       91    11499    1   DCL WKSZ            UBIN(36)  ALIGNED   AUTO;
       92    11500    1   DCL SIZE_ALL        UBIN(36)  ALIGNED   AUTO;
       93    11501        /**/
       94    11502    1   DCL VX_N_START_FID   UBIN(36)  ALIGNED   SYMREF;
       95    11503        %PLIST;
       96    11504        %EJECT;
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:23   
       97    11505    1         TEXT$ = TXT$;

  11505  2 000002   200004 470500                    LDP0    @TXT$,,AUTO
         2 000003   000000 236100                    LDQ     0,,PR0
         2 000004   200015 756100                    STQ     TEXT$,,AUTO

       98    11506    1         SIZE_ALL = 0;

  11506  2 000005   200024 450100                    STZ     SIZE_ALL,,AUTO

       99    11507    1         IF ON_ERROR = -8 THEN ALL$ = PREV$;

  11507  2 000006   200010 471500                    LDP1    @ON_ERROR,,AUTO
         2 000007   100000 235100                    LDA     0,,PR1
         2 000010   000000 115000 3                  CMPA    0
         2 000011   000016 601000 2                  TNZ     s:11510

  11507  2 000012   200003 473500                    LDP3    @PREV$,,AUTO
         2 000013   300000 236100                    LDQ     0,,PR3
         2 000014   200011 756100                    STQ     ALL$,,AUTO
         2 000015   000072 710000 2                  TRA     s:11524

      100    11508    2         ELSE DO;

      101    11509                  %ALLOCATE( PTR$=ALL$, TYPE=@GDP, SIZE="SIZEW(VX$LST)" );

  11510  2 000016   000010 236000 xsym               LDQ     VX_M_ALL+8
         2 000017   000010 136000 xsym               SBLQ    VX_M_FREE+8
         2 000020   000022 116007                    CMPQ    18,DL
         2 000021   000031 604000 2                  TMI     s:11514

  11511  2 000022   000010 236000 xsym               LDQ     VX_M_FREE+8
         2 000023   000022 736000                    QLS     18
         2 000024   000010 036000 xsym               ADLQ    VX_M_BASE_PTR+8
         2 000025   200011 756100                    STQ     ALL$,,AUTO

  11512  2 000026   000022 236007                    LDQ     18,DL
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:24   
         2 000027   000010 056000 xsym               ASQ     VX_M_FREE+8

  11513  2 000030   000043 710000 2                  TRA     s:11516

  11514  2 000031   000002 236000 3                  LDQ     2
         2 000032   200030 756100                    STQ     SIZE_ALL+4,,AUTO
         2 000033   000003 236000 3                  LDQ     3
         2 000034   200027 756100                    STQ     SIZE_ALL+3,,AUTO
         2 000035   200011 633500                    EPPR3   ALL$,,AUTO
         2 000036   200026 453500                    STP3    SIZE_ALL+2,,AUTO
         2 000037   200026 630500                    EPPR0   SIZE_ALL+2,,AUTO
         2 000040   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000041   000000 701000 xent               TSX1    VXA$GET
         2 000042   000000 011000                    NOP     0

      102    11516    2             PREV$ = ALL$;

  11516  2 000043   200011 236100                    LDQ     ALL$,,AUTO
         2 000044   200003 470500                    LDP0    @PREV$,,AUTO
         2 000045   000000 756100                    STQ     0,,PR0

      103    11517    2             ALL$ -> VX$LST.LINK$ = ADDR(NIL);

  11517  2 000046   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 000047   200011 471500                    LDP1    ALL$,,AUTO
         2 000050   100000 756100                    STQ     0,,PR1

      104    11518    2             ALL$ -> VX$LST.TYPE  = TYPE;

  11518  2 000051   200005 471500                    LDP1    @TYPE,,AUTO
         2 000052   100000 720100                    LXL0    0,,PR1
         2 000053   200011 473500                    LDP3    ALL$,,AUTO
         2 000054   300001 740100                    STX0    1,,PR3

      105    11519    2             ALL$ -> VX$LST.SUB_TYPE = SUB_TYPE;

  11519  2 000055   200006 473500                    LDP3    @SUB_TYPE,,AUTO
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:25   
         2 000056   300000 720100                    LXL0    0,,PR3
         2 000057   200011 474500                    LDP4    ALL$,,AUTO
         2 000060   400001 440100                    SXL0    1,,PR4

      106    11520    2             ALL$ -> VX$LST.OBJECT_NAME$ = ADDR(NIL);

  11520  2 000061   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 000062   200011 474500                    LDP4    ALL$,,AUTO
         2 000063   400002 756100                    STQ     2,,PR4

      107    11521    2             ALL$ -> VX$LST.SC_HEAD$     = ADDR(NIL);

  11521  2 000064   200011 474500                    LDP4    ALL$,,AUTO
         2 000065   400003 756100                    STQ     3,,PR4

      108    11522    2             ALL$ -> VX$LST.SC_TAIL$     = ADDR( ALL$ -> VX$LST.SC_HEAD$ );

  11522  2 000066   200011 236100                    LDQ     ALL$,,AUTO
         2 000067   000003 036003                    ADLQ    3,DU
         2 000070   200011 474500                    LDP4    ALL$,,AUTO
         2 000071   400004 756100                    STQ     4,,PR4

      109    11523    2            END;

      110    11524    2         IF FILE$ = ADDR(NIL) OR ON_ERROR = -10 THEN DO;

  11524  2 000072   200007 470500                    LDP0    @FILE$,,AUTO
         2 000073   000000 236100                    LDQ     0,,PR0
         2 000074   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000075   000102 600000 2                  TZE     RETRY
         2 000076   200010 471500                    LDP1    @ON_ERROR,,AUTO
         2 000077   100000 235100                    LDA     0,,PR1
         2 000100   000004 115000 3                  CMPA    4
         2 000101   000771 601000 2                  TNZ     s:11676

      111    11525    2   RETRY:
      112    11526    2             FID.TEXTFID_ = VECTOR( TEXT$ -> T$C.CHARS );
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:26   

  11526  2 000102   200015 470500       RETRY        LDP0    TEXT$,,AUTO
         2 000103   000000 236100                    LDQ     0,,PR0
         2 000104   000033 772000                    QRL     27
         2 000105   000064 737000                    LLS     52
         2 000106   000140 135007                    SBLA    96,DL
         2 000107   200015 236100                    LDQ     TEXT$,,AUTO
         2 000110   200000 036007                    ADLQ    65536,DL
         2 000111   000002 757000 1                  STAQ    FID+2

      113    11527    2             CALL M$FID( FID )   ALTRET(FID_ERR);

  11527  2 000112   000000 630400 1                  EPPR0   FID
         2 000113   420001 713400                    CLIMB   alt,+8193
         2 000114   404400 401760                    pmme    nvectors=10
         2 000115   000666 702000 2                  TSX2    FID_ERR

      114    11528    3             IF F.ASN_ ~= 1 THEN DO;

  11528  2 000116   000030 236000 1                  LDQ     F
         2 000117   777000 376003                    ANQ     -512,DU
         2 000120   001000 116003                    CMPQ    512,DU
         2 000121   000137 600000 2                  TZE     s:11544

      115    11529    4                 IF ON_ERROR ~= -9 THEN DO;

  11529  2 000122   200010 470500                    LDP0    @ON_ERROR,,AUTO
         2 000123   000000 235100                    LDA     0,,PR0
         2 000124   000005 115000 3                  CMPA    5
         2 000125   000137 600000 2                  TZE     s:11544

      116    11530        /*E*  ERROR: VXS-E$NO_FILE_NAME_VX-0
      117    11531              MESSAGE: "%U1" is not a file; Enter correct file name.
      118    11532              DESCRIPTION: Self-explanatory.
      119    11533        */
      120    11534        /*E*  ERROR: VXS-E$NO_FILE_NAME_BATCH_VX-0
      121    11535              MESSAGE: "%U1" is not a file.
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:27   
      122    11536              DESCRIPTION: Self-explanatory.
      123    11537        */
      124    11538    4   REPORT_NO_NAME:
      125    11539    4                     IF VX_ONLINE = 1/*@YES*/ THEN J = 115;

  11539  2 000126   000000 235000 xsym  REPORT_NO_N* LDA     VX_ONLINE
         2 000127   000001 115007                    CMPA    1,DL
         2 000130   000134 601000 2                  TNZ     s:11540

  11539  2 000131   000163 236007                    LDQ     115,DL
         2 000132   200021 756100                    STQ     J,,AUTO
         2 000133   000136 710000 2                  TRA     s:11541

      126    11540    4                     ELSE J = 116;

  11540  2 000134   000164 236007                    LDQ     116,DL
         2 000135   200021 756100                    STQ     J,,AUTO

      127    11541    4                     GOTO REPORT_ERROR;

  11541  2 000136   000676 710000 2                  TRA     REPORT_ERROR

      128    11542    4                    END;
      129    11543    3                END;
      130    11544    2             ALL$ -> VX$LST.P.B.ASN = '1'B/*@TRUE_B*/;

  11544  2 000137   200011 470500                    LDP0    ALL$,,AUTO
         2 000140   200000 236003                    LDQ     65536,DU
         2 000141   000017 256100                    ORSQ    15,,PR0

      131    11545    2             ALL$ -> VX$LST.P.ASN = F.ASN_;

  11545  2 000142   000030 236000 1                  LDQ     F
         2 000143   000033 772000                    QRL     27
         2 000144   000021 756100                    STQ     17,,PR0

      132    11546    2             ALL$ -> VX$LST.P.NAME_ = VECTOR(NIL);
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:28   

  11546  2 000145   000006 237000 3                  LDAQ    6
         2 000146   000005 755100                    STA     5,,PR0
         2 000147   000006 756100                    STQ     6,,PR0

      133    11547    3             IF FR.NAME THEN DO;

  11547  2 000150   000070 234000 1                  SZN     FR
         2 000151   000233 605000 2                  TPL     s:11562

      134    11548    3                 ALL$ -> VX$LST.P.NAME_.BOUND = VLP_NAME.L#;

  11548  2 000152   200011 470500                    LDP0    ALL$,,AUTO
         2 000153   000032 236000 1                  LDQ     VLP_NAME
         2 000154   777000 376003                    ANQ     -512,DU
         2 000155   000013 772000                    QRL     11
         2 000156   000005 676100                    ERQ     5,,PR0
         2 000157   000034 376000 xsym               ANQ     B_VECTNIL+28
         2 000160   000005 656100                    ERSQ    5,,PR0

      135    11549    3                 SIZE = ( VLP_NAME.L# + 4 ) / 4;

  11549  2 000161   000032 236000 1                  LDQ     VLP_NAME
         2 000162   000033 772000                    QRL     27
         2 000163   000004 036007                    ADLQ    4,DL
         2 000164   000002 772000                    QRL     2
         2 000165   200016 756100                    STQ     SIZE,,AUTO

      136    11550                      %ALLOCATE( PTR$=WHERE$, TYPE=@GDP, SIZE=SIZE );

  11551  2 000166   000010 236000 xsym               LDQ     VX_M_ALL+8
         2 000167   000010 136000 xsym               SBLQ    VX_M_FREE+8
         2 000170   000203 604000 2                  TMI     s:11555
         2 000171   200016 116100                    CMPQ    SIZE,,AUTO
         2 000172   000203 602000 2                  TNC     s:11555

  11552  2 000173   000010 236000 xsym               LDQ     VX_M_FREE+8
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:29   
         2 000174   000022 736000                    QLS     18
         2 000175   000010 036000 xsym               ADLQ    VX_M_BASE_PTR+8
         2 000176   200014 756100                    STQ     WHERE$,,AUTO

  11553  2 000177   000010 236000 xsym               LDQ     VX_M_FREE+8
         2 000200   200016 036100                    ADLQ    SIZE,,AUTO
         2 000201   000010 756000 xsym               STQ     VX_M_FREE+8

  11554  2 000202   000215 710000 2                  TRA     s:11557

  11555  2 000203   200016 630500                    EPPR0   SIZE,,AUTO
         2 000204   200030 450500                    STP0    SIZE_ALL+4,,AUTO
         2 000205   000003 236000 3                  LDQ     3
         2 000206   200027 756100                    STQ     SIZE_ALL+3,,AUTO
         2 000207   200014 631500                    EPPR1   WHERE$,,AUTO
         2 000210   200026 451500                    STP1    SIZE_ALL+2,,AUTO
         2 000211   200026 630500                    EPPR0   SIZE_ALL+2,,AUTO
         2 000212   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000213   000000 701000 xent               TSX1    VXA$GET
         2 000214   000000 011000                    NOP     0

      137    11557    3                 ALL$ -> VX$LST.P.NAME_.NAME$ = WHERE$;

  11557  2 000215   200014 236100                    LDQ     WHERE$,,AUTO
         2 000216   200011 470500                    LDP0    ALL$,,AUTO
         2 000217   000006 756100                    STQ     6,,PR0

      138    11558    3                 WHERE$ -> T$C.COUNT = VLP_NAME.L#;

  11558  2 000220   200014 470500                    LDP0    WHERE$,,AUTO
         2 000221   000032 236000 1                  LDQ     VLP_NAME
         2 000222   000000 552140                    STBQ    0,'40'O,PR0

      139    11559    3                 WHERE$ -> T$C.CHARS = VLP_NAME.NAME#;

  11559  2 000223   200014 470500                    LDP0    WHERE$,,AUTO
         2 000224   000000 236100                    LDQ     0,,PR0
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:30   
         2 000225   000033 772000                    QRL     27
         2 000226   000000 620006                    EAX0    0,QL
         2 000227   040140 100400                    MLR     fill='040'O
         2 000230   000032 200037 1                  ADSC9   VLP_NAME                 cn=1,n=31
         2 000231   000000 200010                    ADSC9   0,,PR0                   cn=1,n=*X0

      140    11560    3                END;

  11560  2 000232   000243 710000 2                  TRA     s:11564

      141    11561    2             ELSE
      142    11562    2                 IF ON_ERROR ~= -9 THEN GOTO REPORT_NO_NAME;

  11562  2 000233   200010 470500                    LDP0    @ON_ERROR,,AUTO
         2 000234   000000 235100                    LDA     0,,PR0
         2 000235   000005 115000 3                  CMPA    5
         2 000236   000126 601000 2                  TNZ     REPORT_NO_NAME

      143    11563    2                 ELSE ALL$ -> VX$LST.P.NAME_ = VECTOR(NIL);

  11563  2 000237   200011 471500                    LDP1    ALL$,,AUTO
         2 000240   000006 237000 3                  LDAQ    6
         2 000241   100005 755100                    STA     5,,PR1
         2 000242   100006 756100                    STQ     6,,PR1

      144    11564    3             IF FR.RES THEN DO;

  11564  2 000243   000070 236000 1                  LDQ     FR
         2 000244   004000 316003                    CANQ    2048,DU
         2 000245   000254 600000 2                  TZE     s:11568

      145    11565    3                 ALL$ -> VX$LST.P.B.RES = '1'B/*@TRUE_B*/;

  11565  2 000246   200011 470500                    LDP0    ALL$,,AUTO
         2 000247   400000 236003                    LDQ     -131072,DU
         2 000250   000017 256100                    ORSQ    15,,PR0

PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:31   
      146    11566    3                 ALL$ -> VX$LST.P.RES   = F.RES_;

  11566  2 000251   000031 236000 1                  LDQ     F+1
         2 000252   000020 756100                    STQ     16,,PR0

      147    11567    3                END;

  11567  2 000253   000257 710000 2                  TRA     s:11569

      148    11568    2             ELSE ALL$ -> VX$LST.P.B.RES = '0'B/*@FALSE_B*/;

  11568  2 000254   200011 470500                    LDP0    ALL$,,AUTO
         2 000255   000031 236000 xsym               LDQ     B_VECTNIL+25
         2 000256   000017 356100                    ANSQ    15,,PR0

      149    11569    3             IF FR.WSN THEN DO;

  11569  2 000257   000070 236000 1                  LDQ     FR
         2 000260   020000 316003                    CANQ    8192,DU
         2 000261   000321 600000 2                  TZE     s:11580

      150    11570                      %ALLOCATE( PTR$=WHERE$, TYPE=@GDP, SIZE="SIZEW(VLP_WSN)" );

  11571  2 000262   000010 236000 xsym               LDQ     VX_M_ALL+8
         2 000263   000010 136000 xsym               SBLQ    VX_M_FREE+8
         2 000264   000002 116007                    CMPQ    2,DL
         2 000265   000275 604000 2                  TMI     s:11575

  11572  2 000266   000010 236000 xsym               LDQ     VX_M_FREE+8
         2 000267   000022 736000                    QLS     18
         2 000270   000010 036000 xsym               ADLQ    VX_M_BASE_PTR+8
         2 000271   200014 756100                    STQ     WHERE$,,AUTO

  11573  2 000272   000002 236007                    LDQ     2,DL
         2 000273   000010 056000 xsym               ASQ     VX_M_FREE+8

  11574  2 000274   000307 710000 2                  TRA     s:11577
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:32   

  11575  2 000275   000010 236000 3                  LDQ     8
         2 000276   200030 756100                    STQ     SIZE_ALL+4,,AUTO
         2 000277   000003 236000 3                  LDQ     3
         2 000300   200027 756100                    STQ     SIZE_ALL+3,,AUTO
         2 000301   200014 631500                    EPPR1   WHERE$,,AUTO
         2 000302   200026 451500                    STP1    SIZE_ALL+2,,AUTO
         2 000303   200026 630500                    EPPR0   SIZE_ALL+2,,AUTO
         2 000304   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000305   000000 701000 xent               TSX1    VXA$GET
         2 000306   000000 011000                    NOP     0

      151    11577    3                 WHERE$ -> VLP$WSN = VLP_WSN;

  11577  2 000307   200014 470500                    LDP0    WHERE$,,AUTO
         2 000310   000100 100400                    MLR     fill='000'O
         2 000311   000066 000010 1                  ADSC9   VLP_WSN                  cn=0,n=8
         2 000312   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8

      152    11578    3                 ALL$ -> VX$LST.P.WSN_ = VECTOR( WHERE$ -> VLP$WSN );

  11578  2 000313   000011 235000 3                  LDA     9
         2 000314   200014 236100                    LDQ     WHERE$,,AUTO
         2 000315   200011 470500                    LDP0    ALL$,,AUTO
         2 000316   000015 755100                    STA     13,,PR0
         2 000317   000016 756100                    STQ     14,,PR0

      153    11579    3                END;

  11579  2 000320   000324 710000 2                  TRA     s:11581

      154    11580    2             ELSE ALL$ -> VX$LST.P.WSN_ = VECTOR(NIL);

  11580  2 000321   000006 237000 3                  LDAQ    6
         2 000322   000015 755100                    STA     13,,PR0
         2 000323   000016 756100                    STQ     14,,PR0

PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:33   
      155    11581    3             IF FR.SN THEN DO;

  11581  2 000324   000070 236000 1                  LDQ     FR
         2 000325   040000 316003                    CANQ    16384,DU
         2 000326   000366 600000 2                  TZE     s:11592

      156    11582                      %ALLOCATE( PTR$=WHERE$, TYPE=@GDP, SIZE="SIZEW(VLP_SN)" );

  11583  2 000327   000010 236000 xsym               LDQ     VX_M_ALL+8
         2 000330   000010 136000 xsym               SBLQ    VX_M_FREE+8
         2 000331   000020 116007                    CMPQ    16,DL
         2 000332   000342 604000 2                  TMI     s:11587

  11584  2 000333   000010 236000 xsym               LDQ     VX_M_FREE+8
         2 000334   000022 736000                    QLS     18
         2 000335   000010 036000 xsym               ADLQ    VX_M_BASE_PTR+8
         2 000336   200014 756100                    STQ     WHERE$,,AUTO

  11585  2 000337   000020 236007                    LDQ     16,DL
         2 000340   000010 056000 xsym               ASQ     VX_M_FREE+8

  11586  2 000341   000354 710000 2                  TRA     s:11589

  11587  2 000342   000013 236000 3                  LDQ     11
         2 000343   200030 756100                    STQ     SIZE_ALL+4,,AUTO
         2 000344   000003 236000 3                  LDQ     3
         2 000345   200027 756100                    STQ     SIZE_ALL+3,,AUTO
         2 000346   200014 631500                    EPPR1   WHERE$,,AUTO
         2 000347   200026 451500                    STP1    SIZE_ALL+2,,AUTO
         2 000350   200026 630500                    EPPR0   SIZE_ALL+2,,AUTO
         2 000351   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000352   000000 701000 xent               TSX1    VXA$GET
         2 000353   000000 011000                    NOP     0

      157    11589    3                 WHERE$ -> VLP$SN = VLP_SN;

  11589  2 000354   200014 470500                    LDP0    WHERE$,,AUTO
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:34   
         2 000355   000100 100400                    MLR     fill='000'O
         2 000356   000046 000072 1                  ADSC9   VLP_SN                   cn=0,n=58
         2 000357   000000 000072                    ADSC9   0,,PR0                   cn=0,n=58

      158    11590    3                 ALL$ -> VX$LST.P.SN_ = VECTOR( WHERE$ -> VLP$SN );

  11590  2 000360   000014 235000 3                  LDA     12
         2 000361   200014 236100                    LDQ     WHERE$,,AUTO
         2 000362   200011 470500                    LDP0    ALL$,,AUTO
         2 000363   000013 755100                    STA     11,,PR0
         2 000364   000014 756100                    STQ     12,,PR0

      159    11591    3                END;

  11591  2 000365   000371 710000 2                  TRA     s:11593

      160    11592    2             ELSE ALL$ -> VX$LST.P.SN_ = VECTOR(NIL);

  11592  2 000366   000006 237000 3                  LDAQ    6
         2 000367   000013 755100                    STA     11,,PR0
         2 000370   000014 756100                    STQ     12,,PR0

      161    11593    3             IF FR.PASS THEN DO;

  11593  2 000371   000070 236000 1                  LDQ     FR
         2 000372   100000 316003                    CANQ    32768,DU
         2 000373   000433 600000 2                  TZE     s:11604

      162    11594                      %ALLOCATE( PTR$=WHERE$, TYPE=@GDP, SIZE=@F_PASS_SIZEW );

  11595  2 000374   000010 236000 xsym               LDQ     VX_M_ALL+8
         2 000375   000010 136000 xsym               SBLQ    VX_M_FREE+8
         2 000376   000002 116007                    CMPQ    2,DL
         2 000377   000407 604000 2                  TMI     s:11599

  11596  2 000400   000010 236000 xsym               LDQ     VX_M_FREE+8
         2 000401   000022 736000                    QLS     18
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:35   
         2 000402   000010 036000 xsym               ADLQ    VX_M_BASE_PTR+8
         2 000403   200014 756100                    STQ     WHERE$,,AUTO

  11597  2 000404   000002 236007                    LDQ     2,DL
         2 000405   000010 056000 xsym               ASQ     VX_M_FREE+8

  11598  2 000406   000421 710000 2                  TRA     s:11601

  11599  2 000407   000010 236000 3                  LDQ     8
         2 000410   200030 756100                    STQ     SIZE_ALL+4,,AUTO
         2 000411   000003 236000 3                  LDQ     3
         2 000412   200027 756100                    STQ     SIZE_ALL+3,,AUTO
         2 000413   200014 631500                    EPPR1   WHERE$,,AUTO
         2 000414   200026 451500                    STP1    SIZE_ALL+2,,AUTO
         2 000415   200026 630500                    EPPR0   SIZE_ALL+2,,AUTO
         2 000416   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000417   000000 701000 xent               TSX1    VXA$GET
         2 000420   000000 011000                    NOP     0

      163    11601    3                 WHERE$ -> VLP$PASS   = VLP_PASS;

  11601  2 000421   200014 470500                    LDP0    WHERE$,,AUTO
         2 000422   000100 100400                    MLR     fill='000'O
         2 000423   000044 000010 1                  ADSC9   VLP_PASS                 cn=0,n=8
         2 000424   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8

      164    11602    3                 ALL$ -> VX$LST.P.PASS_ = VECTOR( WHERE$ -> VLP$PASS );

  11602  2 000425   000011 235000 3                  LDA     9
         2 000426   200014 236100                    LDQ     WHERE$,,AUTO
         2 000427   200011 470500                    LDP0    ALL$,,AUTO
         2 000430   000011 755100                    STA     9,,PR0
         2 000431   000012 756100                    STQ     10,,PR0

      165    11603    3                END;

  11603  2 000432   000436 710000 2                  TRA     s:11605
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:36   

      166    11604    2             ELSE ALL$ -> VX$LST.P.PASS_ = VECTOR(NIL);

  11604  2 000433   000006 237000 3                  LDAQ    6
         2 000434   000011 755100                    STA     9,,PR0
         2 000435   000012 756100                    STQ     10,,PR0

      167    11605    3             IF FR.ACCT THEN DO;

  11605  2 000436   000070 236000 1                  LDQ     FR
         2 000437   200000 316003                    CANQ    65536,DU
         2 000440   000500 600000 2                  TZE     s:11617

      168    11606                      %ALLOCATE( PTR$=WHERE$, TYPE=@GDP, SIZE=@F_ACCT_SIZEW );

  11607  2 000441   000010 236000 xsym               LDQ     VX_M_ALL+8
         2 000442   000010 136000 xsym               SBLQ    VX_M_FREE+8
         2 000443   000002 116007                    CMPQ    2,DL
         2 000444   000454 604000 2                  TMI     s:11611

  11608  2 000445   000010 236000 xsym               LDQ     VX_M_FREE+8
         2 000446   000022 736000                    QLS     18
         2 000447   000010 036000 xsym               ADLQ    VX_M_BASE_PTR+8
         2 000450   200014 756100                    STQ     WHERE$,,AUTO

  11609  2 000451   000002 236007                    LDQ     2,DL
         2 000452   000010 056000 xsym               ASQ     VX_M_FREE+8

  11610  2 000453   000466 710000 2                  TRA     s:11613

  11611  2 000454   000010 236000 3                  LDQ     8
         2 000455   200030 756100                    STQ     SIZE_ALL+4,,AUTO
         2 000456   000003 236000 3                  LDQ     3
         2 000457   200027 756100                    STQ     SIZE_ALL+3,,AUTO
         2 000460   200014 630500                    EPPR0   WHERE$,,AUTO
         2 000461   200026 450500                    STP0    SIZE_ALL+2,,AUTO
         2 000462   200026 630500                    EPPR0   SIZE_ALL+2,,AUTO
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:37   
         2 000463   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000464   000000 701000 xent               TSX1    VXA$GET
         2 000465   000000 011000                    NOP     0

      169    11613    3                 WHERE$ -> VLP$ACCT   = VLP_ACCT;

  11613  2 000466   200014 470500                    LDP0    WHERE$,,AUTO
         2 000467   000100 100400                    MLR     fill='000'O
         2 000470   000042 000010 1                  ADSC9   VLP_ACCT                 cn=0,n=8
         2 000471   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8

      170    11614    3                 ALL$ -> VX$LST.P.ACCT_ = VECTOR( WHERE$ -> VLP$ACCT );

  11614  2 000472   000011 235000 3                  LDA     9
         2 000473   200014 236100                    LDQ     WHERE$,,AUTO
         2 000474   200011 470500                    LDP0    ALL$,,AUTO
         2 000475   000007 755100                    STA     7,,PR0
         2 000476   000010 756100                    STQ     8,,PR0

      171    11615    3                END;

  11615  2 000477   000523 710000 2                  TRA     s:11621

      172    11616    3             ELSE DO;

      173    11617    3                 IF TYPE = 2/*@LF*/ AND (SUB_TYPE = 1/*@LF_ALIB*/ OR SUB_TYPE = 2
             11617                          /*@LF_SLIB*/)

  11617  2 000500   200005 470500                    LDP0    @TYPE,,AUTO
         2 000501   000000 235100                    LDA     0,,PR0
         2 000502   000002 115007                    CMPA    2,DL
         2 000503   000517 601000 2                  TNZ     s:11619
         2 000504   200006 471500                    LDP1    @SUB_TYPE,,AUTO
         2 000505   100000 235100                    LDA     0,,PR1
         2 000506   000001 115007                    CMPA    1,DL
         2 000507   000512 600000 2                  TZE     s:11618
         2 000510   000002 115007                    CMPA    2,DL
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:38   
         2 000511   000517 601000 2                  TNZ     s:11619

      174    11618    3                 THEN ALL$ -> VX$LST.P.ACCT_ = VECTOR( VX_SYS );

  11618  2 000512   200011 473500                    LDP3    ALL$,,AUTO
         2 000513   000016 237000 3                  LDAQ    14
         2 000514   300007 755100                    STA     7,,PR3
         2 000515   300010 756100                    STQ     8,,PR3
         2 000516   000523 710000 2                  TRA     s:11621

      175    11619    3                 ELSE ALL$ -> VX$LST.P.ACCT_ = VECTOR( NIL );

  11619  2 000517   200011 471500                    LDP1    ALL$,,AUTO
         2 000520   000006 237000 3                  LDAQ    6
         2 000521   100007 755100                    STA     7,,PR1
         2 000522   100010 756100                    STQ     8,,PR1

      176    11620    3                END;

      177    11621    2             ALL$ -> VX$LST.P.B.ACCT = ( ALL$ -> VX$LST.P.ACCT_.ACCT$ ~= ADDR(NIL) ) |
             11621                      ( FR.SN );

  11621  2 000523   400000 220003                    LDX0    -131072,DU
         2 000524   200011 470500                    LDP0    ALL$,,AUTO
         2 000525   000010 236100                    LDQ     8,,PR0
         2 000526   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000527   000531 601000 2                  TNZ     s:11621+6
         2 000530   000000 220003                    LDX0    0,DU
         2 000531   000070 236000 1                  LDQ     FR
         2 000532   000003 736000                    QLS     3
         2 000533   400000 376003                    ANQ     -131072,DU
         2 000534   200026 756100                    STQ     SIZE_ALL+2,,AUTO
         2 000535   000000 636010                    EAQ     0,X0
         2 000536   200026 276100                    ORQ     SIZE_ALL+2,,AUTO
         2 000537   000002 772000                    QRL     2
         2 000540   000017 676100                    ERQ     15,,PR0
         2 000541   100000 376003                    ANQ     32768,DU
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:39   
         2 000542   000017 656100                    ERSQ    15,,PR0

      178    11622    3             IF ON_ERROR = -10 THEN DO;

  11622  2 000543   200010 471500                    LDP1    @ON_ERROR,,AUTO
         2 000544   100000 235100                    LDA     0,,PR1
         2 000545   000004 115000 3                  CMPA    4
         2 000546   000644 601000 2                  TNZ     s:11635

      179    11623    3                J = (FILE$->T$C.COUNT + 4/*@CHAR_WORD*/ + LENGTHC(VX_O_KEY_HEAD) ) / 4
             11623                          /*@CHAR_WORD*/;

  11623  2 000547   200007 473500                    LDP3    @FILE$,,AUTO
         2 000550   300000 474500                    LDP4    0,,PR3
         2 000551   400000 236100                    LDQ     0,,PR4
         2 000552   000033 772000                    QRL     27
         2 000553   000005 036007                    ADLQ    5,DL
         2 000554   000002 772000                    QRL     2
         2 000555   200021 756100                    STQ     J,,AUTO

      180    11624                      %ALLOCATE( PTR$=WHERE$, TYPE=@GDP, SIZE=J );

  11625  2 000556   000010 236000 xsym               LDQ     VX_M_ALL+8
         2 000557   000010 136000 xsym               SBLQ    VX_M_FREE+8
         2 000560   000573 604000 2                  TMI     s:11629
         2 000561   200021 116100                    CMPQ    J,,AUTO
         2 000562   000573 602000 2                  TNC     s:11629

  11626  2 000563   000010 236000 xsym               LDQ     VX_M_FREE+8
         2 000564   000022 736000                    QLS     18
         2 000565   000010 036000 xsym               ADLQ    VX_M_BASE_PTR+8
         2 000566   200014 756100                    STQ     WHERE$,,AUTO

  11627  2 000567   000010 236000 xsym               LDQ     VX_M_FREE+8
         2 000570   200021 036100                    ADLQ    J,,AUTO
         2 000571   000010 756000 xsym               STQ     VX_M_FREE+8

PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:40   
  11628  2 000572   000605 710000 2                  TRA     s:11631

  11629  2 000573   200021 634500                    EPPR4   J,,AUTO
         2 000574   200030 454500                    STP4    SIZE_ALL+4,,AUTO
         2 000575   000003 236000 3                  LDQ     3
         2 000576   200027 756100                    STQ     SIZE_ALL+3,,AUTO
         2 000577   200014 635500                    EPPR5   WHERE$,,AUTO
         2 000600   200026 455500                    STP5    SIZE_ALL+2,,AUTO
         2 000601   200026 630500                    EPPR0   SIZE_ALL+2,,AUTO
         2 000602   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000603   000000 701000 xent               TSX1    VXA$GET
         2 000604   000000 011000                    NOP     0

      181    11631    3                 WHERE$ -> T$C.COUNT = FILE$ -> T$C.COUNT+LENGTHC(VX_O_KEY_HEAD);
             11631                          /* For object unit name and head byte */

  11631  2 000605   200007 470500                    LDP0    @FILE$,,AUTO
         2 000606   000000 471500                    LDP1    0,,PR0
         2 000607   200014 473500                    LDP3    WHERE$,,AUTO
         2 000610   100000 236100                    LDQ     0,,PR1
         2 000611   000033 772000                    QRL     27
         2 000612   000001 036007                    ADLQ    1,DL
         2 000613   000033 736000                    QLS     27
         2 000614   300000 552140                    STBQ    0,'40'O,PR3

      182    11632    3                CALL CONCAT( WHERE$ -> T$C.CHARS, VX_O_KEY_HEAD, FILE$ -> T$C.CHARS );

  11632  2 000615   200014 471500                    LDP1    WHERE$,,AUTO
         2 000616   100000 236100                    LDQ     0,,PR1
         2 000617   000033 772000                    QRL     27
         2 000620   000000 473500                    LDP3    0,,PR0
         2 000621   000000 620006                    EAX0    0,QL
         2 000622   300000 236100                    LDQ     0,,PR3
         2 000623   000033 772000                    QRL     27
         2 000624   040140 100400                    MLR     fill='040'O
         2 000625   000000 000001 xsym               ADSC9   VX_O_KEY_HEAD            cn=0,n=1
         2 000626   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:41   
         2 000627   000000 621006                    EAX1    0,QL
         2 000630   000000 636010                    EAQ     0,X0
         2 000631   000022 772000                    QRL     18
         2 000632   000002 116007                    CMPQ    2,DL
         2 000633   000641 602000 2                  TNC     s:11633
         2 000634   777777 622010                    EAX2    -1,X0
         2 000635   200014 471500                    LDP1    WHERE$,,AUTO
         2 000636   040140 100540                    MLR     fill='040'O
         2 000637   300000 200011                    ADSC9   0,,PR3                   cn=1,n=*X1
         2 000640   100000 400012                    ADSC9   0,,PR1                   cn=2,n=*X2

      183    11633    3                 ALL$ -> VX$LST.OBJECT_NAME$ = WHERE$; /* And stow away */

  11633  2 000641   200014 236100                    LDQ     WHERE$,,AUTO
         2 000642   200011 471500                    LDP1    ALL$,,AUTO
         2 000643   100002 756100                    STQ     2,,PR1

      184    11634    3                END;

      185    11635    2             IF VX_COUNT_FID ~= 0/*@NO*/ THEN VX_FID_COUNT = VX_FID_COUNT + 1;
             11635                      /* If counting fids => inc */

  11635  2 000644   000000 235000 xsym               LDA     VX_COUNT_FID
         2 000645   000651 600000 2                  TZE     s:11636

  11635  2 000646   000000 236000 xsym               LDQ     VX_FID_COUNT
         2 000647   000001 036007                    ADLQ    1,DL
         2 000650   000000 756000 xsym               STQ     VX_FID_COUNT

      186    11636    2             IF SIZE_ALL > 0 THEN CALL VXF$FREE( 3/*@DS3*/, SIZE_ALL, 1 );

  11636  2 000651   200024 236100                    LDQ     SIZE_ALL,,AUTO
         2 000652   000665 600000 2                  TZE     s:11637

  11636  2 000653   000015 236000 3                  LDQ     13
         2 000654   200030 756100                    STQ     SIZE_ALL+4,,AUTO
         2 000655   200024 630500                    EPPR0   SIZE_ALL,,AUTO
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:42   
         2 000656   200027 450500                    STP0    SIZE_ALL+3,,AUTO
         2 000657   000020 236000 3                  LDQ     16
         2 000660   200026 756100                    STQ     SIZE_ALL+2,,AUTO
         2 000661   200026 630500                    EPPR0   SIZE_ALL+2,,AUTO
         2 000662   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000663   000000 701000 xent               TSX1    VXF$FREE
         2 000664   000000 011000                    NOP     0

      187    11637    2             RETURN;

  11637  2 000665   000000 702200 xent               TSX2  ! X66_ARET

  11636  2 000666                       FID_ERR      null
      188    11638        %EJECT;
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:43   
      189    11639    2   FID_ERR:  ;
      190    11640        /*E*  ERROR: VXS-E$FID_ERROR_VX-0
      191    11641              MESSAGE: Illegal fid in %U1; Enter correct file name.
      192    11642              DESCRIPTION: Self-explanatory.
      193    11643        */
      194    11644        /*E*  ERROR: VXS-E$FID_ERROR_BATCH_VX-0
      195    11645              MESSAGE: Illegal fid in %U1.
      196    11646              DESCRIPTION: Self-explanatory.
      197    11647        */
      198    11648    2             IF VX_ONLINE = 1/*@YES*/ THEN J = 117;

  11648  2 000666   000000 235000 xsym               LDA     VX_ONLINE
         2 000667   000001 115007                    CMPA    1,DL
         2 000670   000674 601000 2                  TNZ     s:11649

  11648  2 000671   000165 236007                    LDQ     117,DL
         2 000672   200021 756100                    STQ     J,,AUTO
         2 000673   000676 710000 2                  TRA     REPORT_ERROR

      199    11649    2             ELSE J = 118;

  11649  2 000674   000166 236007                    LDQ     118,DL
         2 000675   200021 756100                    STQ     J,,AUTO

      200    11650    2   REPORT_ERROR:
      201    11651    2             IF VX_ONLINE = 1/*@YES*/ THEN I=3;

  11651  2 000676   000001 115007       REPORT_ERROR CMPA    1,DL
         2 000677   000703 601000 2                  TNZ     s:11652

  11651  2 000700   000003 235007                    LDA     3,DL
         2 000701   200020 755100                    STA     I,,AUTO
         2 000702   000705 710000 2                  TRA     s:11653

      202    11652    2             ELSE I = 4;

  11652  2 000703   000004 235007                    LDA     4,DL
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:44   
         2 000704   200020 755100                    STA     I,,AUTO

      203    11653    2             VX_EFIELD1.COUNT = TEXT$ -> T$C.COUNT;

  11653  2 000705   200015 470500                    LDP0    TEXT$,,AUTO
         2 000706   000000 236100                    LDQ     0,,PR0
         2 000707   000000 552040 xsym               STBQ    VX_EFIELD1,'40'O

      204    11654    2             VX_EFIELD1.CHARS = TEXT$ -> T$C.CHARS;

  11654  2 000710   000000 236100                    LDQ     0,,PR0
         2 000711   000033 772000                    QRL     27
         2 000712   000000 620006                    EAX0    0,QL
         2 000713   040000 100540                    MLR     fill='040'O
         2 000714   000000 200010                    ADSC9   0,,PR0                   cn=1,n=*X0
         2 000715   000000 200117 xsym               ADSC9   VX_EFIELD1               cn=1,n=79

      205    11655                  %SCREAM( ERR#=J, LEVEL=I, MID="'S'" );

  11656  2 000716   000022 237000 3                  LDAQ    18
         2 000717   200030 757100                    STAQ    SIZE_ALL+4,,AUTO
         2 000720   200020 631500                    EPPR1   I,,AUTO
         2 000721   200027 451500                    STP1    SIZE_ALL+3,,AUTO
         2 000722   200021 633500                    EPPR3   J,,AUTO
         2 000723   200026 453500                    STP3    SIZE_ALL+2,,AUTO
         2 000724   200026 630500                    EPPR0   SIZE_ALL+2,,AUTO
         2 000725   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 000726   000000 701000 xent               TSX1    VXE$ERROR
         2 000727   000000 011000                    NOP     0

      206    11658    3             IF VX_ONLINE = 1/*@YES*/ THEN DO;

  11658  2 000730   000000 235000 xsym               LDA     VX_ONLINE
         2 000731   000001 115007                    CMPA    1,DL
         2 000732   000766 601000 2                  TNZ     s:11669

      207    11659    3                 WKSZ = 256/4;
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:45   

  11659  2 000733   000100 236007                    LDQ     64,DL
         2 000734   200023 756100                    STQ     WKSZ,,AUTO

      208    11660    3                 CALL VXP$PAR( 2, ADDR(VX_N_START_FID),

  11660  2 000735   000024 236000 3                  LDQ     20
         2 000736   200026 756100                    STQ     SIZE_ALL+2,,AUTO
         2 000737   200023 630500                    EPPR0   WKSZ,,AUTO
         2 000740   200033 450500                    STP0    SIZE_ALL+7,,AUTO
         2 000741   200022 631500                    EPPR1   NCHARS,,AUTO
         2 000742   200032 451500                    STP1    SIZE_ALL+6,,AUTO
         2 000743   200015 633500                    EPPR3   TEXT$,,AUTO
         2 000744   200031 453500                    STP3    SIZE_ALL+5,,AUTO
         2 000745   200026 634500                    EPPR4   SIZE_ALL+2,,AUTO
         2 000746   200030 454500                    STP4    SIZE_ALL+4,,AUTO
         2 000747   000010 236000 3                  LDQ     8
         2 000750   200027 756100                    STQ     SIZE_ALL+3,,AUTO
         2 000751   200027 630500                    EPPR0   SIZE_ALL+3,,AUTO
         2 000752   000023 631400 xsym               EPPR1   B_VECTNIL+19
         2 000753   000000 701000 xent               TSX1    VXP$PAR
         2 000754   000000 011000                    NOP     0

      209    11661    3                         TEXT$, NCHARS, WKSZ );
      210    11662    3                 SIZE_ALL = SIZE_ALL + WKSZ;

  11662  2 000755   200024 236100                    LDQ     SIZE_ALL,,AUTO
         2 000756   200023 036100                    ADLQ    WKSZ,,AUTO
         2 000757   200024 756100                    STQ     SIZE_ALL,,AUTO

      211    11663    3                 TEXT$ = VX_P_PCB_MAIN.OUT$ -> O$B.SUBLK$(0)->

  11663  2 000760   000003 470400 xsym               LDP0    VX_P_PCB_MAIN+3
         2 000761   000003 471500                    LDP1    3,,PR0
         2 000762   100003 473500                    LDP3    3,,PR1
         2 000763   300003 236100                    LDQ     3,,PR3
         2 000764   200015 756100                    STQ     TEXT$,,AUTO
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:46   

      212    11664    3                         O$B.SUBLK$(0) -> O$B.SUBLK$(0);
      213    11665    3                 GOTO RETRY;

  11665  2 000765   000102 710000 2                  TRA     RETRY

      214    11666    3                END;
      215    11667    3             ELSE DO;

      216    11668                      %ERROR_IT;

  11669  2 000766   000002 713400                    CLIMB   err
         2 000767   000000 401760                    pmme    nvectors=0

      217    11671    3                END;                       /* Else do; */

      218    11672    2            END;

  11672  2 000770   001072 710000 2                  TRA     s:11689

      219    11673        %EJECT;
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:47   
      220    11674    2         ELSE DO;                  /* For cobol object units/ tree specification */

      221    11675                                                /* Point to ancestor file */
      222    11676    2             ALL$ -> VX$LST.P = FILE$ -> VX$LST.P;

  11676  2 000771   000000 473500                    LDP3    0,,PR0
         2 000772   200011 474500                    LDP4    ALL$,,AUTO
         2 000773   000100 100500                    MLR     fill='000'O
         2 000774   300005 000064                    ADSC9   5,,PR3                   cn=0,n=52
         2 000775   400005 000064                    ADSC9   5,,PR4                   cn=0,n=52

      223    11677    2             J = (TEXT$->T$C.COUNT + 4/*@CHAR_WORD*/ + LENGTHC(VX_O_KEY_HEAD) ) / 4
             11677                      /*@CHAR_WORD*/;

  11677  2 000776   200015 473500                    LDP3    TEXT$,,AUTO
         2 000777   300000 236100                    LDQ     0,,PR3
         2 001000   000033 772000                    QRL     27
         2 001001   000005 036007                    ADLQ    5,DL
         2 001002   000002 772000                    QRL     2
         2 001003   200021 756100                    STQ     J,,AUTO

      224    11678                  %ALLOCATE( PTR$=WHERE$, TYPE=@GDP, SIZE=J );

  11679  2 001004   000010 236000 xsym               LDQ     VX_M_ALL+8
         2 001005   000010 136000 xsym               SBLQ    VX_M_FREE+8
         2 001006   001021 604000 2                  TMI     s:11683
         2 001007   200021 116100                    CMPQ    J,,AUTO
         2 001010   001021 602000 2                  TNC     s:11683

  11680  2 001011   000010 236000 xsym               LDQ     VX_M_FREE+8
         2 001012   000022 736000                    QLS     18
         2 001013   000010 036000 xsym               ADLQ    VX_M_BASE_PTR+8
         2 001014   200014 756100                    STQ     WHERE$,,AUTO

  11681  2 001015   000010 236000 xsym               LDQ     VX_M_FREE+8
         2 001016   200021 036100                    ADLQ    J,,AUTO
         2 001017   000010 756000 xsym               STQ     VX_M_FREE+8
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:48   

  11682  2 001020   001033 710000 2                  TRA     s:11685

  11683  2 001021   200021 634500                    EPPR4   J,,AUTO
         2 001022   200030 454500                    STP4    SIZE_ALL+4,,AUTO
         2 001023   000003 236000 3                  LDQ     3
         2 001024   200027 756100                    STQ     SIZE_ALL+3,,AUTO
         2 001025   200014 635500                    EPPR5   WHERE$,,AUTO
         2 001026   200026 455500                    STP5    SIZE_ALL+2,,AUTO
         2 001027   200026 630500                    EPPR0   SIZE_ALL+2,,AUTO
         2 001030   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 001031   000000 701000 xent               TSX1    VXA$GET
         2 001032   000000 011000                    NOP     0

      225    11685    2             WHERE$ -> T$C.COUNT = TEXT$ -> T$C.COUNT+LENGTHC(VX_O_KEY_HEAD);
             11685                      /* For object unit name and head byte */

  11685  2 001033   200015 470500                    LDP0    TEXT$,,AUTO
         2 001034   200014 471500                    LDP1    WHERE$,,AUTO
         2 001035   000000 236100                    LDQ     0,,PR0
         2 001036   000033 772000                    QRL     27
         2 001037   000001 036007                    ADLQ    1,DL
         2 001040   000033 736000                    QLS     27
         2 001041   100000 552140                    STBQ    0,'40'O,PR1

      226    11686    2             CALL CONCAT( WHERE$ -> T$C.CHARS, VX_O_KEY_HEAD, TEXT$ -> T$C.CHARS );

  11686  2 001042   200014 470500                    LDP0    WHERE$,,AUTO
         2 001043   000000 236100                    LDQ     0,,PR0
         2 001044   000033 772000                    QRL     27
         2 001045   200015 471500                    LDP1    TEXT$,,AUTO
         2 001046   000000 620006                    EAX0    0,QL
         2 001047   100000 236100                    LDQ     0,,PR1
         2 001050   000033 772000                    QRL     27
         2 001051   040140 100400                    MLR     fill='040'O
         2 001052   000000 000001 xsym               ADSC9   VX_O_KEY_HEAD            cn=0,n=1
         2 001053   000000 200010                    ADSC9   0,,PR0                   cn=1,n=*X0
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:49   
         2 001054   000000 621006                    EAX1    0,QL
         2 001055   000000 636010                    EAQ     0,X0
         2 001056   000022 772000                    QRL     18
         2 001057   000002 116007                    CMPQ    2,DL
         2 001060   001067 602000 2                  TNC     s:11687
         2 001061   777777 622010                    EAX2    -1,X0
         2 001062   200015 470500                    LDP0    TEXT$,,AUTO
         2 001063   200014 471500                    LDP1    WHERE$,,AUTO
         2 001064   040140 100540                    MLR     fill='040'O
         2 001065   000000 200011                    ADSC9   0,,PR0                   cn=1,n=*X1
         2 001066   100000 400012                    ADSC9   0,,PR1                   cn=2,n=*X2

      227    11687    2             ALL$ -> VX$LST.OBJECT_NAME$ = WHERE$; /* And stow away */

  11687  2 001067   200014 236100                    LDQ     WHERE$,,AUTO
         2 001070   200011 470500                    LDP0    ALL$,,AUTO
         2 001071   000002 756100                    STQ     2,,PR0

      228    11688    2            END;

      229    11689    1   END VXS$LST;

  11689  2 001072   000000 702200 xent               TSX2  ! X66_ARET
      230    11690        %EOD;

PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:50   
--  Include file information  --

   CP_6_SUBS.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXS$LST.
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:51   

 **** Variables and constants ****

  ****  Section 001  Data  VXS$LST

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    30-0-0/w STRC(72)    r     1 F                          0-0-0/d STRC(864)   r     1 FID
    70-0-0/d STRC(324)   r     1 FR                        42-0-0/c STRC(72)    r     1 VLP_ACCT
    32-0-0/c STRC(288)   r     1 VLP_NAME                  44-0-0/c STRC(72)    r     1 VLP_PASS
    46-0-0/d STRC(522)   r     1 VLP_SN                    66-0-0/c STRC(72)    r     1 VLP_WSN

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     7-0-0/w PTR         r     1 @FILE$                    10-0-0/w PTR         r     1 @ON_ERROR
     3-0-0/w PTR         r     1 @PREV$                     6-0-0/w PTR         r     1 @SUB_TYPE
     4-0-0/w PTR         r     1 @TXT$                      5-0-0/w PTR         r     1 @TYPE
    11-0-0/w PTR         r     1 ALL$                      *0-0-0/w PTR         r     1 FILE$
    20-0-0/w UBIN        r     1 I                         21-0-0/w UBIN        r     1 J
    22-0-0/w UBIN        r     1 NCHARS                    *0-0-0/w SBIN        r     1 ON_ERROR
    *0-0-0/w PTR         r     1 PREV$                     16-0-0/w UBIN        r     1 SIZE
    24-0-0/w UBIN        r     1 SIZE_ALL                  *0-0-0/w UBIN        r     1 SUB_TYPE
    15-0-0/w PTR         r     1 TEXT$                     *0-0-0/w PTR         r     1 TXT$
    *0-0-0/w UBIN        r     1 TYPE                      14-0-0/w PTR         r     1 WHERE$
    23-0-0/w UBIN        r     1 WKSZ

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 VX_COUNT_FID               0-0-0/w STRC(720)   r     1 VX_EFIELD1
     0-0-0/w UBIN        r     1 VX_FID_COUNT
     0-0-0/w SBIN        r     1 VX_M_ALL(0:8)
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:52   
     0-0-0/w PTR         r     1 VX_M_BASE_PTR(0:8)
     0-0-0/w SBIN        r     1 VX_M_FREE(0:8)
     0-0-0/w UBIN        r     1 VX_N_START_FID             0-0-0/w UBIN        r     1 VX_ONLINE
     0-0-0/c CHAR        r     1 VX_O_KEY_HEAD              0-0-0/w STRC(504)   r     1 VX_P_PCB_MAIN
     0-0-0/c CHAR(8)     r     1 VX_SYS

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c ASTR(9)     r     1 F$NAME_                    0-0-0/w STRC(144)   r     1 O$B
     0-0-0/w ASTR(9)     r     1 T$C                        0-0-0/c ASTR(9)     r     1 T$C_UNAL
     0-0-0/c STRC(72)    r     1 VLP$ACCT                   0-0-0/c STRC(72)    r     1 VLP$PASS
     0-0-0/d STRC(522)   r     1 VLP$SN                     0-0-0/c STRC(72)    r     1 VLP$WSN
     0-0-0/w STRC(648)   r     1 VX$LST


   Procedure VXS$LST requires 571 words for executable code.
   Procedure VXS$LST requires 28 words of local(AUTO) storage.
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:53   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:54   
          MINI XREF LISTING

ALL$
     11452**DCL     11507<<ASSIGN  11511<<ASSIGN  11514<>CALL    11516>>ASSIGN  11517>>ASSIGN  11518>>ASSIGN
     11519>>ASSIGN  11520>>ASSIGN  11521>>ASSIGN  11522>>ASSIGN  11522>>ASSIGN  11544>>ASSIGN  11545>>ASSIGN
     11546>>ASSIGN  11548>>ASSIGN  11557>>ASSIGN  11563>>ASSIGN  11565>>ASSIGN  11566>>ASSIGN  11568>>ASSIGN
     11578>>ASSIGN  11580>>ASSIGN  11590>>ASSIGN  11592>>ASSIGN  11602>>ASSIGN  11604>>ASSIGN  11614>>ASSIGN
     11618>>ASSIGN  11619>>ASSIGN  11621>>ASSIGN  11621>>ASSIGN  11633>>ASSIGN  11676>>ASSIGN  11687>>ASSIGN
F.ASN_
     11260**DCL     11250--DCLINIT 11528>>IF      11545>>ASSIGN
F.RES_
     11261**DCL     11250--DCLINIT 11566>>ASSIGN
F$NAME_.COUNT
     11175**DCL     11176--IMP-SIZ
FID
     11247**DCL     11527<>CALL
FID.TEXTFID_
     11247**DCL     11526<<ASSIGN
FID.V
     11251**DCL     11247--DCLINIT
FID_ERR
     11636**LABEL   11527--CALLALT
FILE$
     11434**DCL        20--PROC    11524>>IF      11623>>ASSIGN  11631>>ASSIGN  11632>>CALLBLT 11632>>CALLBLT
     11676>>ASSIGN
FR
     11406**DCL     11251--DCLINIT
FR.ACCT
     11406**DCL     11605>>IF
FR.NAME
     11406**DCL     11547>>IF
FR.PASS
     11406**DCL     11593>>IF
FR.RES
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:55   
     11406**DCL     11564>>IF
FR.SN
     11406**DCL     11581>>IF      11621>>ASSIGN
FR.WSN
     11406**DCL     11569>>IF
I
     11496**DCL     11651<<ASSIGN  11652<<ASSIGN  11656<>CALL
J
     11497**DCL     11539<<ASSIGN  11540<<ASSIGN  11623<<ASSIGN  11625>>IF      11627>>ASSIGN  11629<>CALL
     11648<<ASSIGN  11649<<ASSIGN  11656<>CALL    11677<<ASSIGN  11679>>IF      11681>>ASSIGN  11683<>CALL
M$ERR
        46**DCL-ENT 11669--CALL
M$FID
        97**DCL-ENT 11527--CALL
NCHARS
     11498**DCL     11660<>CALL
O$B.SUBLK$
     11221**DCL     11663>>ASSIGN  11663>>ASSIGN  11663>>ASSIGN
ON_ERROR
     11435**DCL        20--PROC    11507>>IF      11524>>IF      11529>>IF      11562>>IF      11622>>IF
PREV$
     11430**DCL        20--PROC    11507>>ASSIGN  11516<<ASSIGN
REPORT_ERROR
     11651**LABEL   11541--GOTO
REPORT_NO_NAME
     11539**LABEL   11562--GOTO
RETRY
     11526**LABEL   11665--GOTO
SIZE
     11494**DCL     11549<<ASSIGN  11551>>IF      11553>>ASSIGN  11555<>CALL
SIZE_ALL
     11500**DCL     11506<<ASSIGN  11636>>IF      11636<>CALL    11662<<ASSIGN  11662>>ASSIGN
SUB_TYPE
     11433**DCL        20--PROC    11519>>ASSIGN  11617>>IF      11617>>IF
T$C.CHARS
     11164**DCL     11526--ASSIGN  11559<<ASSIGN  11632<<CALLBLT 11632>>CALLBLT 11654>>ASSIGN  11686<<CALLBLT
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:56   
     11686>>CALLBLT
T$C.COUNT
     11163**DCL     11164--IMP-SIZ 11526>>ASSIGN  11558<<ASSIGN  11559>>ASSIGN  11623>>ASSIGN  11631<<ASSIGN
     11631>>ASSIGN  11632>>CALLBLT 11632>>CALLBLT 11653>>ASSIGN  11654>>ASSIGN  11677>>ASSIGN  11685<<ASSIGN
     11685>>ASSIGN  11686>>CALLBLT 11686>>CALLBLT
T$C_UNAL.COUNT
     11166**DCL     11167--IMP-SIZ
TEXT$
     11456**DCL     11505<<ASSIGN  11526>>ASSIGN  11526>>ASSIGN  11653>>ASSIGN  11654>>ASSIGN  11654>>ASSIGN
     11660<>CALL    11663<<ASSIGN  11677>>ASSIGN  11685>>ASSIGN  11686>>CALLBLT 11686>>CALLBLT
TXT$
     11431**DCL        20--PROC    11505>>ASSIGN
TYPE
     11432**DCL        20--PROC    11518>>ASSIGN  11617>>IF
VLP$ACCT
     11352**DCL     11613<<ASSIGN  11614--ASSIGN
VLP$PASS
     11365**DCL     11601<<ASSIGN  11602--ASSIGN
VLP$SN
     11378**DCL     11589<<ASSIGN  11590--ASSIGN
VLP$WSN
     11391**DCL     11577<<ASSIGN  11578--ASSIGN
VLP_ACCT
     11300**DCL     11248--DCLINIT 11613>>ASSIGN
VLP_NAME
     11287**DCL     11248--DCLINIT
VLP_NAME.L#
     11287**DCL     11548>>ASSIGN  11549>>ASSIGN  11558>>ASSIGN
VLP_NAME.NAME#
     11287**DCL     11559>>ASSIGN
VLP_PASS
     11313**DCL     11249--DCLINIT 11601>>ASSIGN
VLP_SN
     11326**DCL     11249--DCLINIT 11583--IF      11585--ASSIGN  11587--CALL    11589>>ASSIGN
VLP_WSN
     11339**DCL     11249--DCLINIT 11571--IF      11573--ASSIGN  11575--CALL    11577>>ASSIGN
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:57   
VX$LST
     11094**DCL     11510--IF      11512--ASSIGN  11514--CALL
VX$LST.LINK$
     11095**DCL     11517<<ASSIGN
VX$LST.OBJECT_NAME$
     11098**DCL     11099--REDEF   11520<<ASSIGN  11633<<ASSIGN  11687<<ASSIGN
VX$LST.P
     11106**DCL     11676<<ASSIGN  11676>>ASSIGN
VX$LST.P.ACCT_
     11112**DCL     11614<<ASSIGN  11618<<ASSIGN  11619<<ASSIGN
VX$LST.P.ACCT_.ACCT$
     11116**DCL     11621>>ASSIGN
VX$LST.P.ASN
     11138**DCL     11545<<ASSIGN
VX$LST.P.B.ACCT
     11135**DCL     11621<<ASSIGN
VX$LST.P.B.ASN
     11134**DCL     11544<<ASSIGN
VX$LST.P.B.RES
     11133**DCL     11565<<ASSIGN  11568<<ASSIGN
VX$LST.P.NAME_
     11107**DCL     11546<<ASSIGN  11563<<ASSIGN
VX$LST.P.NAME_.BOUND
     11108**DCL     11548<<ASSIGN
VX$LST.P.NAME_.NAME$
     11111**DCL     11557<<ASSIGN
VX$LST.P.PASS_
     11117**DCL     11602<<ASSIGN  11604<<ASSIGN
VX$LST.P.RES
     11137**DCL     11566<<ASSIGN
VX$LST.P.SN_
     11122**DCL     11590<<ASSIGN  11592<<ASSIGN
VX$LST.P.WSN_
     11127**DCL     11578<<ASSIGN  11580<<ASSIGN
VX$LST.SC_HEAD$
     11100**DCL     11101--REDEF   11521<<ASSIGN  11522--ASSIGN
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:58   
VX$LST.SC_TAIL$
     11102**DCL     11103--REDEF   11522<<ASSIGN
VX$LST.SUB_TYPE
     11097**DCL     11519<<ASSIGN
VX$LST.TYPE
     11096**DCL     11518<<ASSIGN
VXA$GET
     11473**DCL-ENT 11514--CALL    11555--CALL    11575--CALL    11587--CALL    11599--CALL    11611--CALL
     11629--CALL    11683--CALL
VXE$ERROR
     11474**DCL-ENT 11656--CALL
VXF$FREE
     11476**DCL-ENT 11636--CALL
VXP$PAR
     11475**DCL-ENT 11660--CALL
VX_BIAS.A
      8660**DCL      8661--REDEF
VX_CBUF.CHARS_A
      8594**DCL      8595--REDEF
VX_COUNT_FID
      8613**DCL     11635>>IF
VX_EBUF.CHARS_A
      9183**DCL      9184--REDEF
VX_EFIELD1.CHARS
      9192**DCL      9193--REDEF   11654<<ASSIGN
VX_EFIELD1.COUNT
      9191**DCL     11653<<ASSIGN
VX_EFIELD2.CHARS
      9196**DCL      9197--REDEF
VX_EFIELD3.CHARS
      9200**DCL      9201--REDEF
VX_EI_KEY_BUF.KEY
      9576**DCL      9577--REDEF
VX_ERRORS
      8637**DCL      8648--REDEF
VX_ERRORS.CONFLICT_A
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:59   
      8643**DCL      8644--REDEF
VX_ERRORS.UNSAT_A
      8639**DCL      8640--REDEF
VX_FID_COUNT
      8614**DCL     11635<<ASSIGN  11635>>ASSIGN
VX_IMAGE_DATA.CPAGE#_A
     10055**DCL     10056--REDEF
VX_IMAGE_DATA.NODE_A$
     10067**DCL     10068--REDEF
VX_IMAGE_DATA.START_A$
     10059**DCL     10060--REDEF
VX_IMAGE_DATA.STOP_A$
     10063**DCL     10064--REDEF
VX_IMAGE_DS3.CPAGE#_A
     10124**DCL     10125--REDEF
VX_IMAGE_DS3.NODE_A$
     10136**DCL     10137--REDEF
VX_IMAGE_DS3.START_A$
     10128**DCL     10129--REDEF
VX_IMAGE_DS3.STOP_A$
     10132**DCL     10133--REDEF
VX_IMAGE_DS4.CPAGE#_A
     10147**DCL     10148--REDEF
VX_IMAGE_DS4.NODE_A$
     10159**DCL     10160--REDEF
VX_IMAGE_DS4.START_A$
     10151**DCL     10152--REDEF
VX_IMAGE_DS4.STOP_A$
     10155**DCL     10156--REDEF
VX_IMAGE_DS5.CPAGE#_A
     10170**DCL     10171--REDEF
VX_IMAGE_DS5.NODE_A$
     10182**DCL     10183--REDEF
VX_IMAGE_DS5.START_A$
     10174**DCL     10175--REDEF
VX_IMAGE_DS5.STOP_A$
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:60   
     10178**DCL     10179--REDEF
VX_IMAGE_DS6.CPAGE#_A
     10193**DCL     10194--REDEF
VX_IMAGE_DS6.NODE_A$
     10205**DCL     10206--REDEF
VX_IMAGE_DS6.START_A$
     10197**DCL     10198--REDEF
VX_IMAGE_DS6.STOP_A$
     10201**DCL     10202--REDEF
VX_IMAGE_DS7.CPAGE#_A
     10216**DCL     10217--REDEF
VX_IMAGE_DS7.NODE_A$
     10228**DCL     10229--REDEF
VX_IMAGE_DS7.START_A$
     10220**DCL     10221--REDEF
VX_IMAGE_DS7.STOP_A$
     10224**DCL     10225--REDEF
VX_IMAGE_DS8.CPAGE#_A
     10239**DCL     10240--REDEF
VX_IMAGE_DS8.NODE_A$
     10251**DCL     10252--REDEF
VX_IMAGE_DS8.START_A$
     10243**DCL     10244--REDEF
VX_IMAGE_DS8.STOP_A$
     10247**DCL     10248--REDEF
VX_IMAGE_PROC.CPAGE#_A
     10078**DCL     10079--REDEF
VX_IMAGE_PROC.NODE_A$
     10090**DCL     10091--REDEF
VX_IMAGE_PROC.START_A$
     10082**DCL     10083--REDEF
VX_IMAGE_PROC.STOP_A$
     10086**DCL     10087--REDEF
VX_IMAGE_ROS.CPAGE#_A
     10101**DCL     10102--REDEF
VX_IMAGE_ROS.NODE_A$
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:61   
     10113**DCL     10114--REDEF
VX_IMAGE_ROS.START_A$
     10105**DCL     10106--REDEF
VX_IMAGE_ROS.STOP_A$
     10109**DCL     10110--REDEF
VX_M_ALL
      8671**DCL     11510>>IF      11551>>IF      11571>>IF      11583>>IF      11595>>IF      11607>>IF
     11625>>IF      11679>>IF
VX_M_BASE_PTR
      8673**DCL     11511>>ASSIGN  11552>>ASSIGN  11572>>ASSIGN  11584>>ASSIGN  11596>>ASSIGN  11608>>ASSIGN
     11626>>ASSIGN  11680>>ASSIGN
VX_M_FREE
      8669**DCL     11510>>IF      11511>>ASSIGN  11512<<ASSIGN  11512>>ASSIGN  11551>>IF      11552>>ASSIGN
     11553<<ASSIGN  11553>>ASSIGN  11571>>IF      11572>>ASSIGN  11573<<ASSIGN  11573>>ASSIGN  11583>>IF
     11584>>ASSIGN  11585<<ASSIGN  11585>>ASSIGN  11595>>IF      11596>>ASSIGN  11597<<ASSIGN  11597>>ASSIGN
     11607>>IF      11608>>ASSIGN  11609<<ASSIGN  11609>>ASSIGN  11625>>IF      11626>>ASSIGN  11627<<ASSIGN
     11627>>ASSIGN  11679>>IF      11680>>ASSIGN  11681<<ASSIGN  11681>>ASSIGN
VX_M_VECTOR.F
      9906**DCL      9910--REDEF
VX_M_VECTOR_DP.F
      9941**DCL      9945--REDEF
VX_N_START_FID
     11502**DCL     11660--CALL
VX_O.ACCTN_A$
      8789**DCL      8790--REDEF
VX_O.DCB_MATCH_A$
      8798**DCL      8799--REDEF
VX_O.DCB_MATCH_HIT_A
      8804**DCL      8805--REDEF
VX_O.FIDN_A$
      8783**DCL      8784--REDEF
VX_O.FID_A$
      8775**DCL      8776--REDEF
VX_O.INCLUDE_A$
      8795**DCL      8796--REDEF
VX_O.MAP_A
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:62   
      8769**DCL      8770--REDEF
VX_O.NODCB_A
      8826**DCL      8827--REDEF
VX_O.NUM_A
      8714**DCL      8716--REDEF
VX_O.OPT_A
      8814**DCL      8815--REDEF
VX_O.PRIV_A
      8730**DCL      8732--REDEF
VX_O.SIN_A
      8683**DCL      8684--REDEF
VX_O.TCB_A
      8810**DCL      8811--REDEF
VX_OD.ACCTN_A$
      8987**DCL      8988--REDEF
VX_OD.DCB_MATCH_A$
      8996**DCL      8997--REDEF
VX_OD.FIDN_A$
      8981**DCL      8982--REDEF
VX_OD.FID_A$
      8973**DCL      8974--REDEF
VX_OD.INCLUDE_A$
      8993**DCL      8994--REDEF
VX_OD.MAP_A
      8967**DCL      8968--REDEF
VX_OD.NODCB_A
      9011**DCL      9012--REDEF
VX_OD.NUM_A
      8914**DCL      8915--REDEF
VX_OD.PRIV_A
      8929**DCL      8930--REDEF
VX_OD.SIN_A
      8883**DCL      8884--REDEF
VX_OD.VECTOR_A$
      9002**DCL      9003--REDEF
VX_OL.MAX_A
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:63   
      8858**DCL      8860--REDEF
VX_OL.MIN_A
      8843**DCL      8844--REDEF
VX_ON.ACCTN_A$
      9132**DCL      9134--REDEF
VX_ON.DCB_MATCH_A$
      9143**DCL      9145--REDEF
VX_ON.FIDN_A$
      9125**DCL      9127--REDEF
VX_ON.FID_A$
      9116**DCL      9118--REDEF
VX_ON.INCLUDE_A$
      9139**DCL      9141--REDEF
VX_ON.MAP_A
      9109**DCL      9111--REDEF
VX_ON.NODCB_A$
      9159**DCL      9160--REDEF
VX_ON.NUM_A
      9054**DCL      9056--REDEF
VX_ON.PRIV_A
      9070**DCL      9072--REDEF
VX_ON.SIN_A
      9022**DCL      9024--REDEF
VX_ON.VECTOR_A$
      9150**DCL      9151--REDEF
VX_ONLINE
      8680**DCL     11539>>IF      11648>>IF      11651>>IF      11658>>IF
VX_OUHEAD.VERSION
      8469**DCL      8471--REDEF
VX_OU_HEAD
      8412**DCL      8451--REDEF
VX_OU_HEAD.REC_A
      8424**DCL      8427--REDEF
VX_O_KEY_BUF.FORM0
      9954**DCL      9957--REDEF    9964--REDEF
VX_O_KEY_BUF_L.FORM0
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:64   
      9977**DCL      9980--REDEF    9987--REDEF
VX_O_KEY_HEAD
      9231**DCL     11623--ASSIGN  11631--ASSIGN  11632>>CALLBLT 11677--ASSIGN  11685--ASSIGN  11686>>CALLBLT
VX_PASS2_REF.OU.L_START
      9362**DCL      9367--REDEF
VX_PASS2_REF.OU.L_STOP
      9368**DCL      9373--REDEF
VX_PASS2_REF.OU.MAX
      9356**DCL      9361--REDEF
VX_PASS2_REF.OU.SIZE
      9374**DCL      9379--REDEF
VX_PASS2_REF.SAT.COUNT
      9401**DCL      9407--REDEF
VX_PASS2_REF.SAT.ENT_SIZE
      9408**DCL      9414--REDEF
VX_PASS2_REF.SAT.L_START
      9387**DCL      9393--REDEF
VX_PASS2_REF.SAT.L_STOP
      9394**DCL      9400--REDEF
VX_PASS2_REF.SAT.MAX
      9381**DCL      9386--REDEF
VX_PASS2_REF.UNSAT.L_START
      9449**DCL      9454--REDEF
VX_PASS2_REF.UNSAT.L_STOP
      9455**DCL      9460--REDEF
VX_PASS2_REF.UNSAT.L_WHERE
      9461**DCL      9466--REDEF
VX_PASS2_REF.UNSAT.MAX
      9443**DCL      9448--REDEF
VX_PASS2_REF.UNSAT.PAGE#
      9473**DCL      9478--REDEF
VX_PASS2_REF.UNSAT.SIZE
      9467**DCL      9472--REDEF
VX_PHRASE.PHRASE
      8875**DCL      8877--REDEF
VX_PROGRAM_BIAS.A
PL6.E3A0      #001=VXS$LST File=VXS$LST.:E05TSI                                  WED 07/30/97 08:36 Page:65   
      8653**DCL      8654--REDEF
VX_P_PCB_MAIN.OUT$
      9681**DCL     11663>>ASSIGN
VX_R_KEY_BUF.FORM0
     10003**DCL     10007--REDEF   10013--REDEF
VX_SD.A
      9631**DCL      9632--REDEF
VX_SPC.B$.MINE
      9544**DCL      9550--REDEF
VX_SPC.B$.NAME
      9523**DCL      9529--REDEF
VX_SPC.B$.SKIP
      9537**DCL      9543--REDEF
VX_SPC.B$.VALUE
      9530**DCL      9536--REDEF
VX_SPC.SEG.NAME
      9492**DCL      9498--REDEF
VX_SPC.SEG.VALUE
      9499**DCL      9505--REDEF
VX_SYS
      9288**DCL     11618--ASSIGN
VX_TSX0_OVERLAY.H
      9267**DCL      9270--REDEF
WHERE$
     11455**DCL     11552<<ASSIGN  11555<>CALL    11557>>ASSIGN  11558>>ASSIGN  11559>>ASSIGN  11559>>ASSIGN
     11572<<ASSIGN  11575<>CALL    11577>>ASSIGN  11578>>ASSIGN  11584<<ASSIGN  11587<>CALL    11589>>ASSIGN
     11590>>ASSIGN  11596<<ASSIGN  11599<>CALL    11601>>ASSIGN  11602>>ASSIGN  11608<<ASSIGN  11611<>CALL
     11613>>ASSIGN  11614>>ASSIGN  11626<<ASSIGN  11629<>CALL    11631>>ASSIGN  11632>>CALLBLT 11632>>CALLBLT
     11633>>ASSIGN  11680<<ASSIGN  11683<>CALL    11685>>ASSIGN  11686>>CALLBLT 11686>>CALLBLT 11687>>ASSIGN
WKSZ
     11499**DCL     11659<<ASSIGN  11660<>CALL    11662>>ASSIGN

PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:66   
      231        1        /*M* VXS$ACCT - builds a VX$ACCT structure for an account.          */
      232        2        /*T***********************************************************/
      233        3        /*T*                                                         */
      234        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      235        5        /*T*                                                         */
      236        6        /*T***********************************************************/
      237        7        /*X* DMR,PLM=6,IND=4,CSU=2,EXM=0,ECU=2,MOC,DCI=4,CRT=4,CTI=8,CCC    */
      238        8
      239        9        /*F*  NAME:       VXS$ACCT
      240       10              PURPOSE:    Builds a VX$ACCT structure for an account.
      241       11              DESCRIPTION:
      242       12              Calls M$FID to guarantee the account name is a valid account, if it isn't
      243       13              a diagnostic is reported.  If the user is online the procedure
      244       14              will query the user for the correct account name, parse the account name
      245       15              and call M$FID until it gets a valid account.  Otherwise, the link is errored.
      246       16              When the procedure gets a valid account, it allocates and initializes
      247       17              a VX$ACCT element for the account and returns a pointer to it.
      248       18        */
      249       19
      250       20        VXS$ACCT: PROC  ( PREV$, TXT$, TYPE );
      251       21
      252       22        /*
      253       23                          Include files
      254       24        */
      255       25        %INCLUDE CP_6;
      256      106        %INCLUDE B$OBJECT_C;
      257     3536        %INCLUDE XU_MACRO_C;
      258     6642        %INCLUDE VX_SUBS_C;
      259     6860        %INCLUDE VX_MACRO_C;
      260     7997        %INCLUDE VX_DATA_R;
      261     9616        %INCLUDE VX_FIXED_R;
      262    10278        %INCLUDE VX_PERR_C;
      263    10532        %VX$ACCT;

             10545    1   /*******************************************************************************
             10546    1   *                                                                              *
             10547    1   *                          VX$ACCT                                                 *
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:67   
             10548    1   *                                                                              *
             10549    1   *******************************************************************************/

             10554    1   DCL 1 VX$ACCT ALIGNED BASED,
             10555    1         2 LINK$ PTR,
             10556    1         2 ACCT_,
             10557    1           3 * UBIN WORD,
             10558    1           3 ACCT$ PTR,
             10559    1         2 SN_,
             10560    1           3 * UBIN WORD,
             10561    1           3 SN$ PTR;
      264    10564        %T$C;

             10576    1   /*******************************************************************************
             10577    1   *                                                                              *
             10578    1   *                          T$C                                                 *
             10579    1   *                                                                              *
             10580    1   *******************************************************************************/

             10585    1   DCL 1 T$C           BASED     ALIGNED,  /* Text count                         */
             10586    1         2 COUNT        UBIN( 9) UNAL,
             10587    1         2 CHARS        CHAR( T$C.COUNT )   UNAL;
             10588    1   DCL 1 T$C_UNAL      BASED     UNAL,     /* Text count                         */
             10589    1         2 COUNT        UBIN( 9) UNAL,
             10590    1         2 CHARS        CHAR( T$C_UNAL.COUNT ) UNAL;
      265    10593        %SET LISTMAC='1'B;
      266    10594        %SET LISTEXP='1'B;
      267    10595        %SET LISTSUB='1'B;
      268    10596        %FILE;
             10597    1   DCL 1 F$NAME_                 BASED,
             10598    1         2 COUNT             UBIN( 9) UNAL,
             10599    1         2 CHARS             CHAR( F$NAME_.COUNT ) UNAL;
             10600    1   DCL F$ACCT_         CHAR(8/*@F_ACCT_SIZEC*/) BASED;
             10601    1   DCL F$ACCT_A(0:7/*@F_ACCT_SIZEC1*/)     CHAR(1)   BASED;
             10602    1   DCL F$PASS_         CHAR(8/*@F_PASS_SIZEC*/) BASED;
             10603    1   DCL F$PASS_A(0:7/*@F_PASS_SIZEC1*/)     CHAR(1)   BASED;
      269    10605        %PARSE$OUT( NAME=O$B, STCLASS="BASED");
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:68   
             10606        /*F*  NAME:     PARSE$OUT
             10607              FUNCTION: a structure built by X$PARSE which corresponds to a "list",
             10608                  "alternative", "reducing alternative", or "koncat" node in
             10609                  the user's parse tree.
             10610        */
             10611    1   DCL 1 O$B BASED ALIGNED,
             10612    1         2 TEMP BIT(1) UNAL,
             10613    1         2 * BIT (11) UNAL,
             10614    1         2 NDTYPE UBIN (6) UNAL,
             10615        /*K* NDTYPE - specifies the type of parse node to which this PARSE$OUT
             10616                  block corresponds.  See the XU_SUBS_C file for the
             10617                  %EQU symbols whose values may appear in this field.
             10618        */
             10619    1         2 CODE UBIN HALF HALIGNED,
             10620        /*K* CODE - Contains the numeric "node code" specified by the user when
             10621                  the corresponding parse-node was defined.
             10622        */
             10623    1         2 NSUBLKS UBIN HALF HALIGNED,
             10624        /*K* NSUBLKS - "number of sub-blocks".  This field contains the count of
             10625                  pointers actually available in the PARSE$OUT.SUBLK$ array.
             10626        */
             10627    1         2 SCRITCH UBIN HALF HALIGNED,
             10628        /*K* SCRITCH - an 18-bit scratch field reserved for the user.  X$PARSE
             10629                  initializes this field to zero when the PARSE$OUT structure
             10630                  is allocated, and never sets or examines it thereafter.
             10631                  The name of this field may be changed when the PARSE$OUT macro
             10632                  is invoked by the user (say "SCRITCH=yourname"), and its data
             10633                  type may also be changed (say "SCRMODE=pl6datatype" and
             10634                  "SCRALGN=alignment").  BEWARE: this field MUST be 18-bits long,
             10635                  and be UNALIGNED, CALIGNED, or HALIGNED.
             10636        */
             10637    1         2 CPOS UBIN WORD,
             10638        /*K* CPOS - "character position" of this block.  This field will contain
             10639                  a character index (starting at 0) into the original parse
             10640                  string;  the index identifies the first character of the
             10641                  string which was accepted by this node (or by any of its
             10642                  sub-nodes).
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:69   
             10643        */
             10644    1         2 SUBLK$(0:0) PTR UNAL;
             10645        /*K* SUBLK$ - an array of PL-6 PTRs.  The number of elements in this array
             10646                  is found in OUT$BLK.NSUBLKS;  each PTR will point to another
             10647                  OUT$BLK structure, or to an OUT$SYM structure.
             10648        */
      270    10650        %P$LIT( NAME=P$LIT, STCLASS=BASED, LEN="P$LIT.COUNT" );
             10651        /*F*  NAME:     P$LIT
             10652              FUNCTION: a structure used to describe "literal" parse nodes, as
             10653                  built by PARTRGE and interrogated by X$PARSE.  The P$LIT
             10654                  structure is a sort of "overlay" of P$NODE;  these structures
             10655                  have many sub-fields in common (TYPE, P_F, S_F, O_F,
             10656                  OPT, RPEAT, SKBL, and RTEXT).  Documentation for these
             10657                  common sub-fields may be found under the P$NODE structure.
             10658        */
             10659        %IF '1'B;
             10660    1   DCL 1 P$LIT BASED ALIGNED,
             10661        %ELSE;
             10663        %ENDIF;
             10664    1         2 TYPE UBIN(3) UNAL,
             10665        /*K* TYPE - identifies the type of this P$LIT node.  This field always
             10666                  contains the value %TYPE_LITERAL# as found in XU_SUBS_C.
             10667        */
             10668    1         2 P_F BIT(1) UNAL,
             10669    1         2 S_F BIT(1) UNAL,
             10670    1         2 F_F BIT(1) UNAL,
             10671    1         2 O_F BIT(1) UNAL,
             10672    1         2 OPT BIT(1) UNAL,
             10673    1         2 RPEAT BIT(1) UNAL,
             10674    1         2 SKBL BIT(1) UNAL,
             10675    1         2 RTEXT BIT(1) UNAL,
             10676    1         2 UPRLOWR BIT(1) UNAL,
             10677        /*K* UPRLOWR - specifies that this node is to be compared to the input
             10678                  string in a case-insensitive fashion;  upper- and lower-case
             10679                  characters are considered equivalent.  This option is normally
             10680                  set for all 'literal' nodes;  it is reset if the first character
             10681                  of a literal node is an '=' character, which indicates that
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:70   
             10682                  the literal text must be matched '=ExactLy'.
             10683        */
             10684    1         2 ABREV UBIN (8) UNAL,
             10685        /*K* ABREV - an integer field which contains either 0, or the minimum
             10686                  length of an acceptable abbreviation of this literal.
             10687                  For example:  the PARTRGE literal 'ABCDEF' has an ABREV of 0;
             10688                  the literal 'ABC/DEF' has an ABREV of 3.
             10689        */
             10690    1         2 CODE UBIN (16) UNAL,
             10691    1         2 COUNT UBIN BYTE CALIGNED,
             10692        /*K* COUNT - the number of characters in this literal.
             10693        */
             10694    1         2 TEXT CHAR(P$LIT.COUNT)
             10695        /*K* TEXT - a CHAR variable which contains the text of this literal.
             10696        */
             10697        %IF '1'B;
             10698    1         ;
             10699        %ELSE;
             10701        %ENDIF;
      271    10703        %PLIST;
      272    10704        %FPT_FID( FPTN = ACCT,
      273    10705                  ACCT = VLP_ACCT,
      274    10706                  SN   = VLP_SN,
      275    10707                  ASN  = F.ASN_,
      276    10708                  RES  = F.RES_,
      277    10709                  SNAME = NO,
      278    10710                  SPASS = NO,
      279    10711                  SWSN  = NO,
      280    10712                  RESULTS = ACCT_RESULT );
      281    10735        %VLP_ACCT(FPTN=VLP_ACCT,STCLASS=STATIC);
      282    10748        %VLP_SN  (FPTN=VLP_SN,N=9,STCLASS=STATIC);
      283    10761        %VLP_ACCT(FPTN=VLP$ACCT,STCLASS=BASED);
      284    10774        %VLP_SN  (FPTN=VLP$SN,N=9,STCLASS=BASED);
      285    10787    1   DCL 1 F ALIGNED STATIC,
      286    10788    1         2 ASN_ UBIN(9) ALIGNED,
      287    10789    1         2 RES_ CHAR(4) ALIGNED;
      288    10790        %PLIST;
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:71   
      289    10791        /**/
      290    10792        %VLR_FID(FPTN=ACCT_RESULT);
      291    10811        %P;

             10819    1   /*******************************************************************************
             10820    1   *                                                                              *
             10821    1   *                          PARAMETERS                                              *
             10822    1   *                                                                              *
             10823    1   *******************************************************************************/

      292    10827    1   DCL PREV$           PTR       ALIGNED;
      293    10828    1   DCL TXT$           PTR       ALIGNED;
      294    10829    1   DCL TYPE            UBIN(36)  ALIGNED;
      295    10830        %PTR;

             10838    1   /*******************************************************************************
             10839    1   *                                                                              *
             10840    1   *                          PTR                                                 *
             10841    1   *                                                                              *
             10842    1   *******************************************************************************/

      296    10846    1   DCL ALL$            PTR       ALIGNED   AUTO;
      297    10847    1   DCL WHERE$          PTR       ALIGNED   AUTO;
      298    10848    1   DCL TEXT$           PTR       ALIGNED   AUTO;
      299    10849    1   DCL WORK$           PTR       ALIGNED   AUTO;
      300    10850        %E;

             10858    1   /*******************************************************************************
             10859    1   *                                                                              *
             10860    1   *                          ENTRY                                                 *
             10861    1   *                                                                              *
             10862    1   *******************************************************************************/

      301    10866    1   DCL VXA$GET         ENTRY(3);
      302    10867    1   DCL VXE$ERROR        ENTRY(4);
      303    10868    1   DCL VXP$PAR          ENTRY(5)  ALTRET;
      304    10869    1   DCL VXF$FREE         ENTRY(3);
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:72   
      305    10870    1   DCL VXD$B2C          ENTRY(5);
      306    10871        %U;

             10879    1   /*******************************************************************************
             10880    1   *                                                                              *
             10881    1   *                          UBIN                                                 *
             10882    1   *                                                                              *
             10883    1   *******************************************************************************/

      307    10887    1   DCL SIZE            UBIN(36)  ALIGNED   AUTO;
      308    10888    1   DCL STOP            UBIN(36)  ALIGNED   AUTO;
      309    10889    1   DCL I               UBIN(36)  ALIGNED   AUTO;
      310    10890    1   DCL J               UBIN(36)  ALIGNED   AUTO;
      311    10891    1   DCL NCHARS           UBIN(36)  ALIGNED   AUTO;
      312    10892    1   DCL WKSZ            UBIN(36)  ALIGNED   AUTO;
      313    10893    1   DCL SIZE_ALL        UBIN(36)  ALIGNED   AUTO;
      314    10894        /**/
      315    10895    1   DCL VX_N_START_ACCT  UBIN(36)  ALIGNED   SYMREF;
      316    10896        %PLIST;
      317    10897        %EJECT;
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:73   
      318    10898    1         TEXT$ = TXT$;
      319    10899    1         SIZE_ALL = 0;
      320    10900              %ALLOCATE( PTR$=ALL$, TYPE=@GDP, SIZE="SIZEW(VX$ACCT)" );
      321    10907    1         PREV$ = ALL$;
      322    10908    1         ALL$ -> VX$ACCT.LINK$ = ADDR(NIL);
      323    10909    1   RETRY:
      324    10910    1         ACCT.TEXTFID_ = VECTOR( TEXT$ -> T$C.CHARS );
      325    10911    1         CALL M$FID( ACCT ) ALTRET( ACCT_ERR );
      326    10912    2         IF ACCT_RESULT.SN THEN DO;
      327    10913                  %ALLOCATE( PTR$=WHERE$, TYPE=@GDP, SIZE="SIZEW(VLP_SN)" );
      328    10920    2             WHERE$ -> VLP$SN = VLP_SN;
      329    10921    2             ALL$ -> VX$ACCT.SN_ = VECTOR( WHERE$ -> VLP$SN );
      330    10922    2            END;
      331    10923    1         ELSE ALL$ -> VX$ACCT.SN_ = VECTOR( NIL );
      332    10924    2         IF ACCT_RESULT.ACCT THEN DO;
      333    10925                  %ALLOCATE( PTR$=WHERE$, TYPE=@GDP, SIZE=@F_ACCT_SIZEW );
      334    10932    2             WHERE$ -> VLP$ACCT = VLP_ACCT;
      335    10933    2             ALL$ -> VX$ACCT.ACCT_ = VECTOR( WHERE$ -> VLP$ACCT );
      336    10934    2            END;
      337    10935    2         ELSE DO;
      338    10936
      339    10937    2   ACCT_ERR:
      340    10938    2             VX_EFIELD1.COUNT = VX_ON.ACCTN_A$(TYPE) -> P$LIT.COUNT;
      341    10939    2             VX_EFIELD1.CHARS = VX_ON.ACCTN_A$(TYPE) -> P$LIT.TEXT;
      342    10940    2             VX_EFIELD2.COUNT = TEXT$ -> T$C.COUNT;
      343    10941    2             VX_EFIELD2.CHARS = TEXT$ -> T$C.CHARS;
      344    10942    3             IF VX_ONLINE = 1/*@YES*/ THEN DO;
      345    10943        /*E*  ERROR: VXS-E$ACCT_ERR_VX-C
      346    10944              MESSAGE: Invalid account specified for %U1 option: "%U2"
      347    10945                       Enter correct account.
      348    10946              DESCRIPTION: Self-explantory.
      349    10947        */
      350    10948                      %SCREAM( ERR#=E$ACCT_ERR_VX, LEVEL=E$S_VX, MID="'S'" );
      351    10951    3                 WKSZ = 256/4;
      352    10952    3                 CALL VXP$PAR( 2, ADDR(VX_N_START_ACCT), TEXT$, NCHARS, WKSZ );
      353    10953    3                 SIZE_ALL = SIZE_ALL + WKSZ;
      354    10954    3                 TEXT$ = VX_P_PCB_MAIN.OUT$ -> O$B.SUBLK$(0) -> O$B.SUBLK$(0) -> O$B.
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:74   
             10954                          SUBLK$(0);
      355    10955    3                 GOTO RETRY;
      356    10956    3                END;
      357    10957    3             ELSE DO;
      358    10958        /*E*  ERROR: VXS-E$ACCT_ERR_BATCH_VX
      359    10959              MESSAGE: Invalid account specified for %U1 option: "%U2"
      360    10960              DESCRIPTION: Self-explantory.
      361    10961        */
      362    10962                      %SCREAM( ERR#=E$ACCT_ERR_BATCH_VX, LEVEL=@E$S_VX, MID="'S'" );
      363    10965                      %ERROR_IT;
      364    10968    3                END;
      365    10969    2            END;
      366    10970    1         IF SIZE_ALL > 0 THEN CALL VXF$FREE( 3/*@DS3*/, SIZE_ALL, 1 );
      367    10971
      368    10972    1   END VXS$ACCT;

PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:75   
--  Include file information  --

   VX_PERR_C.:E05TOU  is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXS$ACCT.

   Procedure VXS$ACCT requires 192 words for executable code.
   Procedure VXS$ACCT requires 24 words of local(AUTO) storage.

    No errors detected in file VXS$LST.:E05TSI    .

PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:76   

 Object Unit name= VXS$ACCT                                   File name= VXS$LST.:E05TOU
 UTS= JUL 30 '97 08:36:56.72 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none    54     66  VXS$ACCT
    2   Proc  even  none   192    300  VXS$ACCT
    3  RoData even  none    22     26  VXS$ACCT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes      Std        3  VXS$ACCT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       3 VXA$GET
         yes           Std       4 VXE$ERROR
         yes           Std       3 VXF$FREE
 yes     yes           Std       5 VXP$PAR
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:77   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VX_OU_HEAD                            VX_ERRORS
     VX_M_FREE                             VX_M_ALL                              VX_M_BASE_PTR
     VX_ONLINE                             VX_ON                                 VX_EFIELD1
     VX_EFIELD2                            VX_P_PCB_MAIN                         VX_N_START_ACCT
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:78   


      231        1        /*M* VXS$ACCT - builds a VX$ACCT structure for an account.          */
      232        2        /*T***********************************************************/
      233        3        /*T*                                                         */
      234        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      235        5        /*T*                                                         */
      236        6        /*T***********************************************************/
      237        7        /*X* DMR,PLM=6,IND=4,CSU=2,EXM=0,ECU=2,MOC,DCI=4,CRT=4,CTI=8,CCC    */
      238        8
      239        9        /*F*  NAME:       VXS$ACCT
      240       10              PURPOSE:    Builds a VX$ACCT structure for an account.
      241       11              DESCRIPTION:
      242       12              Calls M$FID to guarantee the account name is a valid account, if it isn't
      243       13              a diagnostic is reported.  If the user is online the procedure
      244       14              will query the user for the correct account name, parse the account name
      245       15              and call M$FID until it gets a valid account. Otherwise, the link is errored.
      246       16              When the procedure gets a valid account, it allocates and initializes
      247       17              a VX$ACCT element for the account and returns a pointer to it.
      248       18        */
      249       19
      250       20        VXS$ACCT: PROC  ( PREV$, TXT$, TYPE );

     20  2 000000   000000 700200 xent  VXS$ACCT     TSX0  ! X66_AUTO_3
         2 000001   000030 000003                    ZERO    24,3

      251       21
      252       22        /*
      253       23                          Include files
      254       24        */
      255       25        %INCLUDE CP_6;
      256      106        %INCLUDE B$OBJECT_C;
      257     3536        %INCLUDE XU_MACRO_C;
      258     6642        %INCLUDE VX_SUBS_C;
      259     6860        %INCLUDE VX_MACRO_C;
      260     7997        %INCLUDE VX_DATA_R;
      261     9616        %INCLUDE VX_FIXED_R;
      262    10278        %INCLUDE VX_PERR_C;
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:79   
      263    10532        %VX$ACCT;

             10545    1   /*******************************************************************************
             10546    1   *                                                                              *
             10547    1   *                          VX$ACCT                                                *
             10548    1   *                                                                              *
             10549    1   *******************************************************************************/

             10554    1   DCL 1 VX$ACCT ALIGNED BASED,
             10555    1         2 LINK$ PTR,
             10556    1         2 ACCT_,
             10557    1           3 * UBIN WORD,
             10558    1           3 ACCT$ PTR,
             10559    1         2 SN_,
             10560    1           3 * UBIN WORD,
             10561    1           3 SN$ PTR;
      264    10564        %T$C;

             10576    1   /*******************************************************************************
             10577    1   *                                                                              *
             10578    1   *                          T$C                                                 *
             10579    1   *                                                                              *
             10580    1   *******************************************************************************/

             10585    1   DCL 1 T$C           BASED     ALIGNED,  /* Text count                         */
             10586    1         2 COUNT        UBIN( 9) UNAL,
             10587    1         2 CHARS        CHAR( T$C.COUNT )   UNAL;
             10588    1   DCL 1 T$C_UNAL      BASED     UNAL,     /* Text count                         */
             10589    1         2 COUNT        UBIN( 9) UNAL,
             10590    1         2 CHARS        CHAR( T$C_UNAL.COUNT ) UNAL;
      265    10593        %SET LISTMAC='1'B;
      266    10594        %SET LISTEXP='1'B;
      267    10595        %SET LISTSUB='1'B;
      268    10596        %FILE;
             10597    1   DCL 1 F$NAME_                 BASED,
             10598    1         2 COUNT             UBIN( 9) UNAL,
             10599    1         2 CHARS             CHAR( F$NAME_.COUNT ) UNAL;
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:80   
             10600    1   DCL F$ACCT_         CHAR(8/*@F_ACCT_SIZEC*/) BASED;
             10601    1   DCL F$ACCT_A(0:7/*@F_ACCT_SIZEC1*/)     CHAR(1)   BASED;
             10602    1   DCL F$PASS_         CHAR(8/*@F_PASS_SIZEC*/) BASED;
             10603    1   DCL F$PASS_A(0:7/*@F_PASS_SIZEC1*/)     CHAR(1)   BASED;
      269    10605        %PARSE$OUT( NAME=O$B, STCLASS="BASED");
             10606        /*F*  NAME:     PARSE$OUT
             10607              FUNCTION: a structure built by X$PARSE which corresponds to a "list",
             10608                  "alternative", "reducing alternative", or "koncat" node in
             10609                  the user's parse tree.
             10610        */
             10611    1   DCL 1 O$B BASED ALIGNED,
             10612    1         2 TEMP BIT(1) UNAL,
             10613    1         2 * BIT (11) UNAL,
             10614    1         2 NDTYPE UBIN (6) UNAL,
             10615        /*K* NDTYPE - specifies the type of parse node to which this PARSE$OUT
             10616                  block corresponds.  See the XU_SUBS_C file for the
             10617                  %EQU symbols whose values may appear in this field.
             10618        */
             10619    1         2 CODE UBIN HALF HALIGNED,
             10620        /*K* CODE - Contains the numeric "node code" specified by the user when
             10621                  the corresponding parse-node was defined.
             10622        */
             10623    1         2 NSUBLKS UBIN HALF HALIGNED,
             10624        /*K* NSUBLKS - "number of sub-blocks".  This field contains the count of
             10625                  pointers actually available in the PARSE$OUT.SUBLK$ array.
             10626        */
             10627    1         2 SCRITCH UBIN HALF HALIGNED,
             10628        /*K* SCRITCH - an 18-bit scratch field reserved for the user.  X$PARSE
             10629                  initializes this field to zero when the PARSE$OUT structure
             10630                  is allocated, and never sets or examines it thereafter.
             10631                  The name of this field may be changed when the PARSE$OUT macro
             10632                  is invoked by the user (say "SCRITCH=yourname"), and its data
             10633                  type may also be changed (say "SCRMODE=pl6datatype" and
             10634                  "SCRALGN=alignment").  BEWARE: this field MUST be 18-bits long,
             10635                  and be UNALIGNED, CALIGNED, or HALIGNED.
             10636        */
             10637    1         2 CPOS UBIN WORD,
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:81   
             10638        /*K* CPOS - "character position" of this block.  This field will contain
             10639                  a character index (starting at 0) into the original parse
             10640                  string;  the index identifies the first character of the
             10641                  string which was accepted by this node (or by any of its
             10642                  sub-nodes).
             10643        */
             10644    1         2 SUBLK$(0:0) PTR UNAL;
             10645        /*K* SUBLK$ - an array of PL-6 PTRs.  The number of elements in this array
             10646                  is found in OUT$BLK.NSUBLKS;  each PTR will point to another
             10647                  OUT$BLK structure, or to an OUT$SYM structure.
             10648        */
      270    10650        %P$LIT( NAME=P$LIT, STCLASS=BASED, LEN="P$LIT.COUNT" );
             10651        /*F*  NAME:     P$LIT
             10652              FUNCTION: a structure used to describe "literal" parse nodes, as
             10653                  built by PARTRGE and interrogated by X$PARSE.  The P$LIT
             10654                  structure is a sort of "overlay" of P$NODE;  these structures
             10655                  have many sub-fields in common (TYPE, P_F, S_F, O_F,
             10656                  OPT, RPEAT, SKBL, and RTEXT).  Documentation for these
             10657                  common sub-fields may be found under the P$NODE structure.
             10658        */
             10659        %IF '1'B;
             10660    1   DCL 1 P$LIT BASED ALIGNED,
             10661        %ELSE;
             10663        %ENDIF;
             10664    1         2 TYPE UBIN(3) UNAL,
             10665        /*K* TYPE - identifies the type of this P$LIT node.  This field always
             10666                  contains the value %TYPE_LITERAL# as found in XU_SUBS_C.
             10667        */
             10668    1         2 P_F BIT(1) UNAL,
             10669    1         2 S_F BIT(1) UNAL,
             10670    1         2 F_F BIT(1) UNAL,
             10671    1         2 O_F BIT(1) UNAL,
             10672    1         2 OPT BIT(1) UNAL,
             10673    1         2 RPEAT BIT(1) UNAL,
             10674    1         2 SKBL BIT(1) UNAL,
             10675    1         2 RTEXT BIT(1) UNAL,
             10676    1         2 UPRLOWR BIT(1) UNAL,
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:82   
             10677        /*K* UPRLOWR - specifies that this node is to be compared to the input
             10678                  string in a case-insensitive fashion;  upper- and lower-case
             10679                  characters are considered equivalent.  This option is normally
             10680                  set for all 'literal' nodes;  it is reset if the first character
             10681                  of a literal node is an '=' character, which indicates that
             10682                  the literal text must be matched '=ExactLy'.
             10683        */
             10684    1         2 ABREV UBIN (8) UNAL,
             10685        /*K* ABREV - an integer field which contains either 0, or the minimum
             10686                  length of an acceptable abbreviation of this literal.
             10687                  For example:  the PARTRGE literal 'ABCDEF' has an ABREV of 0;
             10688                  the literal 'ABC/DEF' has an ABREV of 3.
             10689        */
             10690    1         2 CODE UBIN (16) UNAL,
             10691    1         2 COUNT UBIN BYTE CALIGNED,
             10692        /*K* COUNT - the number of characters in this literal.
             10693        */
             10694    1         2 TEXT CHAR(P$LIT.COUNT)
             10695        /*K* TEXT - a CHAR variable which contains the text of this literal.
             10696        */
             10697        %IF '1'B;
             10698    1         ;
             10699        %ELSE;
             10701        %ENDIF;
      271    10703        %PLIST;
      272    10704        %FPT_FID( FPTN = ACCT,
      273    10705                  ACCT = VLP_ACCT,
      274    10706                  SN   = VLP_SN,
      275    10707                  ASN  = F.ASN_,
      276    10708                  RES  = F.RES_,
      277    10709                  SNAME = NO,
      278    10710                  SPASS = NO,
      279    10711                  SWSN  = NO,
      280    10712                  RESULTS = ACCT_RESULT );
      281    10735        %VLP_ACCT(FPTN=VLP_ACCT,STCLASS=STATIC);
      282    10748        %VLP_SN  (FPTN=VLP_SN,N=9,STCLASS=STATIC);
      283    10761        %VLP_ACCT(FPTN=VLP$ACCT,STCLASS=BASED);
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:83   
      284    10774        %VLP_SN  (FPTN=VLP$SN,N=9,STCLASS=BASED);
      285    10787    1   DCL 1 F ALIGNED STATIC,
      286    10788    1         2 ASN_ UBIN(9) ALIGNED,
      287    10789    1         2 RES_ CHAR(4) ALIGNED;
      288    10790        %PLIST;
      289    10791        /**/
      290    10792        %VLR_FID(FPTN=ACCT_RESULT);
      291    10811        %P;

             10819    1   /*******************************************************************************
             10820    1   *                                                                              *
             10821    1   *                          PARAMETERS                                             *
             10822    1   *                                                                              *
             10823    1   *******************************************************************************/

      292    10827    1   DCL PREV$           PTR       ALIGNED;
      293    10828    1   DCL TXT$           PTR       ALIGNED;
      294    10829    1   DCL TYPE            UBIN(36)  ALIGNED;
      295    10830        %PTR;

             10838    1   /*******************************************************************************
             10839    1   *                                                                              *
             10840    1   *                          PTR                                                 *
             10841    1   *                                                                              *
             10842    1   *******************************************************************************/

      296    10846    1   DCL ALL$            PTR       ALIGNED   AUTO;
      297    10847    1   DCL WHERE$          PTR       ALIGNED   AUTO;
      298    10848    1   DCL TEXT$           PTR       ALIGNED   AUTO;
      299    10849    1   DCL WORK$           PTR       ALIGNED   AUTO;
      300    10850        %E;

             10858    1   /*******************************************************************************
             10859    1   *                                                                              *
             10860    1   *                          ENTRY                                                 *
             10861    1   *                                                                              *
             10862    1   *******************************************************************************/
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:84   

      301    10866    1   DCL VXA$GET         ENTRY(3);
      302    10867    1   DCL VXE$ERROR        ENTRY(4);
      303    10868    1   DCL VXP$PAR          ENTRY(5)  ALTRET;
      304    10869    1   DCL VXF$FREE         ENTRY(3);
      305    10870    1   DCL VXD$B2C          ENTRY(5);
      306    10871        %U;

             10879    1   /*******************************************************************************
             10880    1   *                                                                              *
             10881    1   *                          UBIN                                                 *
             10882    1   *                                                                              *
             10883    1   *******************************************************************************/

      307    10887    1   DCL SIZE            UBIN(36)  ALIGNED   AUTO;
      308    10888    1   DCL STOP            UBIN(36)  ALIGNED   AUTO;
      309    10889    1   DCL I               UBIN(36)  ALIGNED   AUTO;
      310    10890    1   DCL J               UBIN(36)  ALIGNED   AUTO;
      311    10891    1   DCL NCHARS           UBIN(36)  ALIGNED   AUTO;
      312    10892    1   DCL WKSZ            UBIN(36)  ALIGNED   AUTO;
      313    10893    1   DCL SIZE_ALL        UBIN(36)  ALIGNED   AUTO;
      314    10894        /**/
      315    10895    1   DCL VX_N_START_ACCT  UBIN(36)  ALIGNED   SYMREF;
      316    10896        %PLIST;
      317    10897        %EJECT;
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:85   
      318    10898    1         TEXT$ = TXT$;

  10898  2 000002   200004 470500                    LDP0    @TXT$,,AUTO
         2 000003   000000 236100                    LDQ     0,,PR0
         2 000004   200010 756100                    STQ     TEXT$,,AUTO

      319    10899    1         SIZE_ALL = 0;

  10899  2 000005   200020 450100                    STZ     SIZE_ALL,,AUTO

      320    10900              %ALLOCATE( PTR$=ALL$, TYPE=@GDP, SIZE="SIZEW(VX$ACCT)" );

  10901  2 000006   000010 236000 xsym               LDQ     VX_M_ALL+8
         2 000007   000010 136000 xsym               SBLQ    VX_M_FREE+8
         2 000010   000005 116007                    CMPQ    5,DL
         2 000011   000021 604000 2                  TMI     s:10905

  10902  2 000012   000010 236000 xsym               LDQ     VX_M_FREE+8
         2 000013   000022 736000                    QLS     18
         2 000014   000010 036000 xsym               ADLQ    VX_M_BASE_PTR+8
         2 000015   200006 756100                    STQ     ALL$,,AUTO

  10903  2 000016   000005 236007                    LDQ     5,DL
         2 000017   000010 056000 xsym               ASQ     VX_M_FREE+8

  10904  2 000020   000033 710000 2                  TRA     s:10907

  10905  2 000021   000000 236000 3                  LDQ     0
         2 000022   200024 756100                    STQ     SIZE_ALL+4,,AUTO
         2 000023   000001 236000 3                  LDQ     1
         2 000024   200023 756100                    STQ     SIZE_ALL+3,,AUTO
         2 000025   200006 631500                    EPPR1   ALL$,,AUTO
         2 000026   200022 451500                    STP1    SIZE_ALL+2,,AUTO
         2 000027   200022 630500                    EPPR0   SIZE_ALL+2,,AUTO
         2 000030   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000031   000000 701000 xent               TSX1    VXA$GET
         2 000032   000000 011000                    NOP     0
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:86   

      321    10907    1         PREV$ = ALL$;

  10907  2 000033   200006 236100                    LDQ     ALL$,,AUTO
         2 000034   200003 470500                    LDP0    @PREV$,,AUTO
         2 000035   000000 756100                    STQ     0,,PR0

      322    10908    1         ALL$ -> VX$ACCT.LINK$ = ADDR(NIL);

  10908  2 000036   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 000037   200006 471500                    LDP1    ALL$,,AUTO
         2 000040   100000 756100                    STQ     0,,PR1

      323    10909    1   RETRY:
      324    10910    1         ACCT.TEXTFID_ = VECTOR( TEXT$ -> T$C.CHARS );

  10910  2 000041   200010 470500       RETRY        LDP0    TEXT$,,AUTO
         2 000042   000000 236100                    LDQ     0,,PR0
         2 000043   000033 772000                    QRL     27
         2 000044   000064 737000                    LLS     52
         2 000045   000140 135007                    SBLA    96,DL
         2 000046   200010 236100                    LDQ     TEXT$,,AUTO
         2 000047   200000 036007                    ADLQ    65536,DL
         2 000050   000002 757000 1                  STAQ    ACCT+2

      325    10911    1         CALL M$FID( ACCT ) ALTRET( ACCT_ERR );

  10911  2 000051   000000 630400 1                  EPPR0   ACCT
         2 000052   420001 713400                    CLIMB   alt,+8193
         2 000053   404400 401760                    pmme    nvectors=10
         2 000054   000165 702000 2                  TSX2    ACCT_ERR

      326    10912    2         IF ACCT_RESULT.SN THEN DO;

  10912  2 000055   000054 236000 1                  LDQ     ACCT_RESULT
         2 000056   040000 316003                    CANQ    16384,DU
         2 000057   000117 600000 2                  TZE     s:10923
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:87   

      327    10913                  %ALLOCATE( PTR$=WHERE$, TYPE=@GDP, SIZE="SIZEW(VLP_SN)" );

  10914  2 000060   000010 236000 xsym               LDQ     VX_M_ALL+8
         2 000061   000010 136000 xsym               SBLQ    VX_M_FREE+8
         2 000062   000020 116007                    CMPQ    16,DL
         2 000063   000073 604000 2                  TMI     s:10918

  10915  2 000064   000010 236000 xsym               LDQ     VX_M_FREE+8
         2 000065   000022 736000                    QLS     18
         2 000066   000010 036000 xsym               ADLQ    VX_M_BASE_PTR+8
         2 000067   200007 756100                    STQ     WHERE$,,AUTO

  10916  2 000070   000020 236007                    LDQ     16,DL
         2 000071   000010 056000 xsym               ASQ     VX_M_FREE+8

  10917  2 000072   000105 710000 2                  TRA     s:10920

  10918  2 000073   000003 236000 3                  LDQ     3
         2 000074   200024 756100                    STQ     SIZE_ALL+4,,AUTO
         2 000075   000001 236000 3                  LDQ     1
         2 000076   200023 756100                    STQ     SIZE_ALL+3,,AUTO
         2 000077   200007 630500                    EPPR0   WHERE$,,AUTO
         2 000100   200022 450500                    STP0    SIZE_ALL+2,,AUTO
         2 000101   200022 630500                    EPPR0   SIZE_ALL+2,,AUTO
         2 000102   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000103   000000 701000 xent               TSX1    VXA$GET
         2 000104   000000 011000                    NOP     0

      328    10920    2             WHERE$ -> VLP$SN = VLP_SN;

  10920  2 000105   200007 470500                    LDP0    WHERE$,,AUTO
         2 000106   000100 100400                    MLR     fill='000'O
         2 000107   000032 000072 1                  ADSC9   VLP_SN                   cn=0,n=58
         2 000110   000000 000072                    ADSC9   0,,PR0                   cn=0,n=58

      329    10921    2             ALL$ -> VX$ACCT.SN_ = VECTOR( WHERE$ -> VLP$SN );
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:88   

  10921  2 000111   000004 235000 3                  LDA     4
         2 000112   200007 236100                    LDQ     WHERE$,,AUTO
         2 000113   200006 470500                    LDP0    ALL$,,AUTO
         2 000114   000003 755100                    STA     3,,PR0
         2 000115   000004 756100                    STQ     4,,PR0

      330    10922    2            END;

  10922  2 000116   000123 710000 2                  TRA     s:10924

      331    10923    1         ELSE ALL$ -> VX$ACCT.SN_ = VECTOR( NIL );

  10923  2 000117   200006 470500                    LDP0    ALL$,,AUTO
         2 000120   000006 237000 3                  LDAQ    6
         2 000121   000003 755100                    STA     3,,PR0
         2 000122   000004 756100                    STQ     4,,PR0

      332    10924    2         IF ACCT_RESULT.ACCT THEN DO;

  10924  2 000123   000054 236000 1                  LDQ     ACCT_RESULT
         2 000124   200000 316003                    CANQ    65536,DU
         2 000125   000165 600000 2                  TZE     ACCT_ERR

      333    10925                  %ALLOCATE( PTR$=WHERE$, TYPE=@GDP, SIZE=@F_ACCT_SIZEW );

  10926  2 000126   000010 236000 xsym               LDQ     VX_M_ALL+8
         2 000127   000010 136000 xsym               SBLQ    VX_M_FREE+8
         2 000130   000002 116007                    CMPQ    2,DL
         2 000131   000141 604000 2                  TMI     s:10930

  10927  2 000132   000010 236000 xsym               LDQ     VX_M_FREE+8
         2 000133   000022 736000                    QLS     18
         2 000134   000010 036000 xsym               ADLQ    VX_M_BASE_PTR+8
         2 000135   200007 756100                    STQ     WHERE$,,AUTO

  10928  2 000136   000002 236007                    LDQ     2,DL
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:89   
         2 000137   000010 056000 xsym               ASQ     VX_M_FREE+8

  10929  2 000140   000153 710000 2                  TRA     s:10932

  10930  2 000141   000005 236000 3                  LDQ     5
         2 000142   200024 756100                    STQ     SIZE_ALL+4,,AUTO
         2 000143   000001 236000 3                  LDQ     1
         2 000144   200023 756100                    STQ     SIZE_ALL+3,,AUTO
         2 000145   200007 630500                    EPPR0   WHERE$,,AUTO
         2 000146   200022 450500                    STP0    SIZE_ALL+2,,AUTO
         2 000147   200022 630500                    EPPR0   SIZE_ALL+2,,AUTO
         2 000150   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000151   000000 701000 xent               TSX1    VXA$GET
         2 000152   000000 011000                    NOP     0

      334    10932    2             WHERE$ -> VLP$ACCT = VLP_ACCT;

  10932  2 000153   200007 470500                    LDP0    WHERE$,,AUTO
         2 000154   000100 100400                    MLR     fill='000'O
         2 000155   000030 000010 1                  ADSC9   VLP_ACCT                 cn=0,n=8
         2 000156   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8

      335    10933    2             ALL$ -> VX$ACCT.ACCT_ = VECTOR( WHERE$ -> VLP$ACCT );

  10933  2 000157   000010 235000 3                  LDA     8
         2 000160   200007 236100                    LDQ     WHERE$,,AUTO
         2 000161   200006 470500                    LDP0    ALL$,,AUTO
         2 000162   000001 755100                    STA     1,,PR0
         2 000163   000002 756100                    STQ     2,,PR0

      336    10934    2            END;

  10934  2 000164   000263 710000 2                  TRA     s:10970

      337    10935    2         ELSE DO;

      338    10936
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:90   
      339    10937    2   ACCT_ERR:
      340    10938    2             VX_EFIELD1.COUNT = VX_ON.ACCTN_A$(TYPE) -> P$LIT.COUNT;

  10938  2 000165   200005 470500       ACCT_ERR     LDP0    @TYPE,,AUTO
         2 000166   000000 720100                    LXL0    0,,PR0
         2 000167   000134 471410 xsym               LDP1    VX_ON+92,X0
         2 000170   100001 236100                    LDQ     1,,PR1
         2 000171   000000 552040 xsym               STBQ    VX_EFIELD1,'40'O

      341    10939    2             VX_EFIELD1.CHARS = VX_ON.ACCTN_A$(TYPE) -> P$LIT.TEXT;

  10939  2 000172   000000 720100                    LXL0    0,,PR0
         2 000173   000134 471410 xsym               LDP1    VX_ON+92,X0
         2 000174   100001 236100                    LDQ     1,,PR1
         2 000175   000033 772000                    QRL     27
         2 000176   000000 621006                    EAX1    0,QL
         2 000177   040000 100540                    MLR     fill='040'O
         2 000200   100001 200011                    ADSC9   1,,PR1                   cn=1,n=*X1
         2 000201   000000 200117 xsym               ADSC9   VX_EFIELD1               cn=1,n=79

      342    10940    2             VX_EFIELD2.COUNT = TEXT$ -> T$C.COUNT;

  10940  2 000202   200010 471500                    LDP1    TEXT$,,AUTO
         2 000203   100000 236100                    LDQ     0,,PR1
         2 000204   000000 552040 xsym               STBQ    VX_EFIELD2,'40'O

      343    10941    2             VX_EFIELD2.CHARS = TEXT$ -> T$C.CHARS;

  10941  2 000205   100000 236100                    LDQ     0,,PR1
         2 000206   000033 772000                    QRL     27
         2 000207   000000 620006                    EAX0    0,QL
         2 000210   040000 100540                    MLR     fill='040'O
         2 000211   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
         2 000212   000000 200117 xsym               ADSC9   VX_EFIELD2               cn=1,n=79

      344    10942    3             IF VX_ONLINE = 1/*@YES*/ THEN DO;

PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:91   
  10942  2 000213   000000 235000 xsym               LDA     VX_ONLINE
         2 000214   000001 115007                    CMPA    1,DL
         2 000215   000255 601000 2                  TNZ     s:10963

      345    10943        /*E*  ERROR: VXS-E$ACCT_ERR_VX-C
      346    10944              MESSAGE: Invalid account specified for %U1 option: "%U2"
      347    10945                       Enter correct account.
      348    10946              DESCRIPTION: Self-explantory.
      349    10947        */
      350    10948                      %SCREAM( ERR#=E$ACCT_ERR_VX, LEVEL=E$S_VX, MID="'S'" );

  10949  2 000216   000013 630400 3                  EPPR0   11
         2 000217   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 000220   000000 701000 xent               TSX1    VXE$ERROR
         2 000221   000000 011000                    NOP     0

      351    10951    3                 WKSZ = 256/4;

  10951  2 000222   000100 235007                    LDA     64,DL
         2 000223   200017 755100                    STA     WKSZ,,AUTO

      352    10952    3                 CALL VXP$PAR( 2, ADDR(VX_N_START_ACCT), TEXT$, NCHARS, WKSZ );

  10952  2 000224   000017 236000 3                  LDQ     15
         2 000225   200022 756100                    STQ     SIZE_ALL+2,,AUTO
         2 000226   200017 630500                    EPPR0   WKSZ,,AUTO
         2 000227   200027 450500                    STP0    SIZE_ALL+7,,AUTO
         2 000230   200016 631500                    EPPR1   NCHARS,,AUTO
         2 000231   200026 451500                    STP1    SIZE_ALL+6,,AUTO
         2 000232   200010 633500                    EPPR3   TEXT$,,AUTO
         2 000233   200025 453500                    STP3    SIZE_ALL+5,,AUTO
         2 000234   200022 634500                    EPPR4   SIZE_ALL+2,,AUTO
         2 000235   200024 454500                    STP4    SIZE_ALL+4,,AUTO
         2 000236   000005 236000 3                  LDQ     5
         2 000237   200023 756100                    STQ     SIZE_ALL+3,,AUTO
         2 000240   200023 630500                    EPPR0   SIZE_ALL+3,,AUTO
         2 000241   000023 631400 xsym               EPPR1   B_VECTNIL+19
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:92   
         2 000242   000000 701000 xent               TSX1    VXP$PAR
         2 000243   000000 011000                    NOP     0

      353    10953    3                 SIZE_ALL = SIZE_ALL + WKSZ;

  10953  2 000244   200020 236100                    LDQ     SIZE_ALL,,AUTO
         2 000245   200017 036100                    ADLQ    WKSZ,,AUTO
         2 000246   200020 756100                    STQ     SIZE_ALL,,AUTO

      354    10954    3                 TEXT$ = VX_P_PCB_MAIN.OUT$ -> O$B.SUBLK$(0) -> O$B.SUBLK$(0) -> O$B.
             10954                          SUBLK$(0);

  10954  2 000247   000003 470400 xsym               LDP0    VX_P_PCB_MAIN+3
         2 000250   000003 471500                    LDP1    3,,PR0
         2 000251   100003 473500                    LDP3    3,,PR1
         2 000252   300003 236100                    LDQ     3,,PR3
         2 000253   200010 756100                    STQ     TEXT$,,AUTO

      355    10955    3                 GOTO RETRY;

  10955  2 000254   000041 710000 2                  TRA     RETRY

      356    10956    3                END;
      357    10957    3             ELSE DO;

      358    10958        /*E*  ERROR: VXS-E$ACCT_ERR_BATCH_VX
      359    10959              MESSAGE: Invalid account specified for %U1 option: "%U2"
      360    10960              DESCRIPTION: Self-explantory.
      361    10961        */
      362    10962                      %SCREAM( ERR#=E$ACCT_ERR_BATCH_VX, LEVEL=@E$S_VX, MID="'S'" );

  10963  2 000255   000021 630400 3                  EPPR0   17
         2 000256   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 000257   000000 701000 xent               TSX1    VXE$ERROR
         2 000260   000000 011000                    NOP     0

      363    10965                      %ERROR_IT;
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:93   

  10966  2 000261   000002 713400                    CLIMB   err
         2 000262   000000 401760                    pmme    nvectors=0

      364    10968    3                END;

      365    10969    2            END;

      366    10970    1         IF SIZE_ALL > 0 THEN CALL VXF$FREE( 3/*@DS3*/, SIZE_ALL, 1 );

  10970  2 000263   200020 235100                    LDA     SIZE_ALL,,AUTO
         2 000264   000277 600000 2                  TZE     s:10972

  10970  2 000265   000025 236000 3                  LDQ     21
         2 000266   200024 756100                    STQ     SIZE_ALL+4,,AUTO
         2 000267   200020 630500                    EPPR0   SIZE_ALL,,AUTO
         2 000270   200023 450500                    STP0    SIZE_ALL+3,,AUTO
         2 000271   000014 236000 3                  LDQ     12
         2 000272   200022 756100                    STQ     SIZE_ALL+2,,AUTO
         2 000273   200022 630500                    EPPR0   SIZE_ALL+2,,AUTO
         2 000274   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000275   000000 701000 xent               TSX1    VXF$FREE
         2 000276   000000 011000                    NOP     0

      367    10971
      368    10972    1   END VXS$ACCT;

  10972  2 000277   000000 702200 xent               TSX2  ! X66_ARET

PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:94   
--  Include file information  --

   VX_PERR_C.:E05TOU  is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXS$ACCT.
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:95   

 **** Variables and constants ****

  ****  Section 001  Data  VXS$ACCT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(864)   r     1 ACCT                      54-0-0/d STRC(324)   r     1 ACCT_RESULT
    52-0-0/w STRC(72)    r     1 F                         30-0-0/c STRC(72)    r     1 VLP_ACCT
    32-0-0/d STRC(522)   r     1 VLP_SN

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @PREV$                     4-0-0/w PTR         r     1 @TXT$
     5-0-0/w PTR         r     1 @TYPE                      6-0-0/w PTR         r     1 ALL$
    16-0-0/w UBIN        r     1 NCHARS                    *0-0-0/w PTR         r     1 PREV$
    20-0-0/w UBIN        r     1 SIZE_ALL                  10-0-0/w PTR         r     1 TEXT$
    *0-0-0/w PTR         r     1 TXT$                      *0-0-0/w UBIN        r     1 TYPE
     7-0-0/w PTR         r     1 WHERE$                    17-0-0/w UBIN        r     1 WKSZ

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(720)   r     1 VX_EFIELD1                 0-0-0/w STRC(720)   r     1 VX_EFIELD2
     0-0-0/w SBIN        r     1 VX_M_ALL(0:8)
     0-0-0/w PTR         r     1 VX_M_BASE_PTR(0:8)
     0-0-0/w SBIN        r     1 VX_M_FREE(0:8)
     0-0-0/w UBIN        r     1 VX_N_START_ACCT            0-0-0/w STRC(4176)  r     1 VX_ON
     0-0-0/w UBIN        r     1 VX_ONLINE                  0-0-0/w STRC(504)   r     1 VX_P_PCB_MAIN

  ****  BASED and DCB variables  ****

PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:96   
  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c ASTR(9)     r     1 F$NAME_                    0-0-0/w STRC(144)   r     1 O$B
     0-0-0/w ASTR(45)    r     1 P$LIT                      0-0-0/w ASTR(9)     r     1 T$C
     0-0-0/c ASTR(9)     r     1 T$C_UNAL                   0-0-0/c STRC(72)    r     1 VLP$ACCT
     0-0-0/d STRC(522)   r     1 VLP$SN                     0-0-0/w STRC(180)   r     1 VX$ACCT


   Procedure VXS$ACCT requires 192 words for executable code.
   Procedure VXS$ACCT requires 24 words of local(AUTO) storage.

    No errors detected in file VXS$LST.:E05TSI    .
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:97   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:98   
          MINI XREF LISTING

ACCT
     10723**DCL     10911<>CALL
ACCT.TEXTFID_
     10723**DCL     10910<<ASSIGN
ACCT.V
     10727**DCL     10723--DCLINIT
ACCT_ERR
     10938**LABEL   10911--CALLALT
ACCT_RESULT
     10803**DCL     10727--DCLINIT
ACCT_RESULT.ACCT
     10803**DCL     10924>>IF
ACCT_RESULT.SN
     10803**DCL     10912>>IF
ALL$
     10846**DCL     10902<<ASSIGN  10905<>CALL    10907>>ASSIGN  10908>>ASSIGN  10921>>ASSIGN  10923>>ASSIGN
     10933>>ASSIGN
F.ASN_
     10788**DCL     10726--DCLINIT
F.RES_
     10789**DCL     10726--DCLINIT
F$NAME_.COUNT
     10598**DCL     10599--IMP-SIZ
M$ERR
        46**DCL-ENT 10966--CALL
M$FID
        97**DCL-ENT 10911--CALL
NCHARS
     10891**DCL     10952<>CALL
O$B.SUBLK$
     10644**DCL     10954>>ASSIGN  10954>>ASSIGN  10954>>ASSIGN
P$LIT.COUNT
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:99   
     10691**DCL     10694--IMP-SIZ 10938>>ASSIGN  10939>>ASSIGN
P$LIT.TEXT
     10694**DCL     10939>>ASSIGN
PREV$
     10827**DCL        20--PROC    10907<<ASSIGN
RETRY
     10910**LABEL   10955--GOTO
SIZE_ALL
     10893**DCL     10899<<ASSIGN  10953<<ASSIGN  10953>>ASSIGN  10970>>IF      10970<>CALL
T$C.CHARS
     10587**DCL     10910--ASSIGN  10941>>ASSIGN
T$C.COUNT
     10586**DCL     10587--IMP-SIZ 10910>>ASSIGN  10940>>ASSIGN  10941>>ASSIGN
T$C_UNAL.COUNT
     10589**DCL     10590--IMP-SIZ
TEXT$
     10848**DCL     10898<<ASSIGN  10910>>ASSIGN  10910>>ASSIGN  10940>>ASSIGN  10941>>ASSIGN  10941>>ASSIGN
     10952<>CALL    10954<<ASSIGN
TXT$
     10828**DCL        20--PROC    10898>>ASSIGN
TYPE
     10829**DCL        20--PROC    10938>>ASSIGN  10939>>ASSIGN  10939>>ASSIGN
VLP$ACCT
     10772**DCL     10932<<ASSIGN  10933--ASSIGN
VLP$SN
     10785**DCL     10920<<ASSIGN  10921--ASSIGN
VLP_ACCT
     10746**DCL     10724--DCLINIT 10932>>ASSIGN
VLP_SN
     10759**DCL     10725--DCLINIT 10914--IF      10916--ASSIGN  10918--CALL    10920>>ASSIGN
VX$ACCT
     10554**DCL     10901--IF      10903--ASSIGN  10905--CALL
VX$ACCT.ACCT_
     10556**DCL     10933<<ASSIGN
VX$ACCT.LINK$
     10555**DCL     10908<<ASSIGN
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:100  
VX$ACCT.SN_
     10559**DCL     10921<<ASSIGN  10923<<ASSIGN
VXA$GET
     10866**DCL-ENT 10905--CALL    10918--CALL    10930--CALL
VXE$ERROR
     10867**DCL-ENT 10949--CALL    10963--CALL
VXF$FREE
     10869**DCL-ENT 10970--CALL
VXP$PAR
     10868**DCL-ENT 10952--CALL
VX_BIAS.A
      8660**DCL      8661--REDEF
VX_CBUF.CHARS_A
      8594**DCL      8595--REDEF
VX_EBUF.CHARS_A
      9183**DCL      9184--REDEF
VX_EFIELD1.CHARS
      9192**DCL      9193--REDEF   10939<<ASSIGN
VX_EFIELD1.COUNT
      9191**DCL     10938<<ASSIGN
VX_EFIELD2.CHARS
      9196**DCL      9197--REDEF   10941<<ASSIGN
VX_EFIELD2.COUNT
      9195**DCL     10940<<ASSIGN
VX_EFIELD3.CHARS
      9200**DCL      9201--REDEF
VX_EI_KEY_BUF.KEY
      9576**DCL      9577--REDEF
VX_ERRORS
      8637**DCL      8648--REDEF
VX_ERRORS.CONFLICT_A
      8643**DCL      8644--REDEF
VX_ERRORS.UNSAT_A
      8639**DCL      8640--REDEF
VX_IMAGE_DATA.CPAGE#_A
     10055**DCL     10056--REDEF
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:101  
VX_IMAGE_DATA.NODE_A$
     10067**DCL     10068--REDEF
VX_IMAGE_DATA.START_A$
     10059**DCL     10060--REDEF
VX_IMAGE_DATA.STOP_A$
     10063**DCL     10064--REDEF
VX_IMAGE_DS3.CPAGE#_A
     10124**DCL     10125--REDEF
VX_IMAGE_DS3.NODE_A$
     10136**DCL     10137--REDEF
VX_IMAGE_DS3.START_A$
     10128**DCL     10129--REDEF
VX_IMAGE_DS3.STOP_A$
     10132**DCL     10133--REDEF
VX_IMAGE_DS4.CPAGE#_A
     10147**DCL     10148--REDEF
VX_IMAGE_DS4.NODE_A$
     10159**DCL     10160--REDEF
VX_IMAGE_DS4.START_A$
     10151**DCL     10152--REDEF
VX_IMAGE_DS4.STOP_A$
     10155**DCL     10156--REDEF
VX_IMAGE_DS5.CPAGE#_A
     10170**DCL     10171--REDEF
VX_IMAGE_DS5.NODE_A$
     10182**DCL     10183--REDEF
VX_IMAGE_DS5.START_A$
     10174**DCL     10175--REDEF
VX_IMAGE_DS5.STOP_A$
     10178**DCL     10179--REDEF
VX_IMAGE_DS6.CPAGE#_A
     10193**DCL     10194--REDEF
VX_IMAGE_DS6.NODE_A$
     10205**DCL     10206--REDEF
VX_IMAGE_DS6.START_A$
     10197**DCL     10198--REDEF
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:102  
VX_IMAGE_DS6.STOP_A$
     10201**DCL     10202--REDEF
VX_IMAGE_DS7.CPAGE#_A
     10216**DCL     10217--REDEF
VX_IMAGE_DS7.NODE_A$
     10228**DCL     10229--REDEF
VX_IMAGE_DS7.START_A$
     10220**DCL     10221--REDEF
VX_IMAGE_DS7.STOP_A$
     10224**DCL     10225--REDEF
VX_IMAGE_DS8.CPAGE#_A
     10239**DCL     10240--REDEF
VX_IMAGE_DS8.NODE_A$
     10251**DCL     10252--REDEF
VX_IMAGE_DS8.START_A$
     10243**DCL     10244--REDEF
VX_IMAGE_DS8.STOP_A$
     10247**DCL     10248--REDEF
VX_IMAGE_PROC.CPAGE#_A
     10078**DCL     10079--REDEF
VX_IMAGE_PROC.NODE_A$
     10090**DCL     10091--REDEF
VX_IMAGE_PROC.START_A$
     10082**DCL     10083--REDEF
VX_IMAGE_PROC.STOP_A$
     10086**DCL     10087--REDEF
VX_IMAGE_ROS.CPAGE#_A
     10101**DCL     10102--REDEF
VX_IMAGE_ROS.NODE_A$
     10113**DCL     10114--REDEF
VX_IMAGE_ROS.START_A$
     10105**DCL     10106--REDEF
VX_IMAGE_ROS.STOP_A$
     10109**DCL     10110--REDEF
VX_M_ALL
      8671**DCL     10901>>IF      10914>>IF      10926>>IF
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:103  
VX_M_BASE_PTR
      8673**DCL     10902>>ASSIGN  10915>>ASSIGN  10927>>ASSIGN
VX_M_FREE
      8669**DCL     10901>>IF      10902>>ASSIGN  10903<<ASSIGN  10903>>ASSIGN  10914>>IF      10915>>ASSIGN
     10916<<ASSIGN  10916>>ASSIGN  10926>>IF      10927>>ASSIGN  10928<<ASSIGN  10928>>ASSIGN
VX_M_VECTOR.F
      9906**DCL      9910--REDEF
VX_M_VECTOR_DP.F
      9941**DCL      9945--REDEF
VX_N_START_ACCT
     10895**DCL     10952--CALL
VX_O.ACCTN_A$
      8789**DCL      8790--REDEF
VX_O.DCB_MATCH_A$
      8798**DCL      8799--REDEF
VX_O.DCB_MATCH_HIT_A
      8804**DCL      8805--REDEF
VX_O.FIDN_A$
      8783**DCL      8784--REDEF
VX_O.FID_A$
      8775**DCL      8776--REDEF
VX_O.INCLUDE_A$
      8795**DCL      8796--REDEF
VX_O.MAP_A
      8769**DCL      8770--REDEF
VX_O.NODCB_A
      8826**DCL      8827--REDEF
VX_O.NUM_A
      8714**DCL      8716--REDEF
VX_O.OPT_A
      8814**DCL      8815--REDEF
VX_O.PRIV_A
      8730**DCL      8732--REDEF
VX_O.SIN_A
      8683**DCL      8684--REDEF
VX_O.TCB_A
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:104  
      8810**DCL      8811--REDEF
VX_OD.ACCTN_A$
      8987**DCL      8988--REDEF
VX_OD.DCB_MATCH_A$
      8996**DCL      8997--REDEF
VX_OD.FIDN_A$
      8981**DCL      8982--REDEF
VX_OD.FID_A$
      8973**DCL      8974--REDEF
VX_OD.INCLUDE_A$
      8993**DCL      8994--REDEF
VX_OD.MAP_A
      8967**DCL      8968--REDEF
VX_OD.NODCB_A
      9011**DCL      9012--REDEF
VX_OD.NUM_A
      8914**DCL      8915--REDEF
VX_OD.PRIV_A
      8929**DCL      8930--REDEF
VX_OD.SIN_A
      8883**DCL      8884--REDEF
VX_OD.VECTOR_A$
      9002**DCL      9003--REDEF
VX_OL.MAX_A
      8858**DCL      8860--REDEF
VX_OL.MIN_A
      8843**DCL      8844--REDEF
VX_ON.ACCTN_A$
      9132**DCL      9134--REDEF   10938>>ASSIGN  10939>>ASSIGN  10939>>ASSIGN
VX_ON.DCB_MATCH_A$
      9143**DCL      9145--REDEF
VX_ON.FIDN_A$
      9125**DCL      9127--REDEF
VX_ON.FID_A$
      9116**DCL      9118--REDEF
VX_ON.INCLUDE_A$
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:105  
      9139**DCL      9141--REDEF
VX_ON.MAP_A
      9109**DCL      9111--REDEF
VX_ON.NODCB_A$
      9159**DCL      9160--REDEF
VX_ON.NUM_A
      9054**DCL      9056--REDEF
VX_ON.PRIV_A
      9070**DCL      9072--REDEF
VX_ON.SIN_A
      9022**DCL      9024--REDEF
VX_ON.VECTOR_A$
      9150**DCL      9151--REDEF
VX_ONLINE
      8680**DCL     10942>>IF
VX_OUHEAD.VERSION
      8469**DCL      8471--REDEF
VX_OU_HEAD
      8412**DCL      8451--REDEF
VX_OU_HEAD.REC_A
      8424**DCL      8427--REDEF
VX_O_KEY_BUF.FORM0
      9954**DCL      9957--REDEF    9964--REDEF
VX_O_KEY_BUF_L.FORM0
      9977**DCL      9980--REDEF    9987--REDEF
VX_PASS2_REF.OU.L_START
      9362**DCL      9367--REDEF
VX_PASS2_REF.OU.L_STOP
      9368**DCL      9373--REDEF
VX_PASS2_REF.OU.MAX
      9356**DCL      9361--REDEF
VX_PASS2_REF.OU.SIZE
      9374**DCL      9379--REDEF
VX_PASS2_REF.SAT.COUNT
      9401**DCL      9407--REDEF
VX_PASS2_REF.SAT.ENT_SIZE
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:106  
      9408**DCL      9414--REDEF
VX_PASS2_REF.SAT.L_START
      9387**DCL      9393--REDEF
VX_PASS2_REF.SAT.L_STOP
      9394**DCL      9400--REDEF
VX_PASS2_REF.SAT.MAX
      9381**DCL      9386--REDEF
VX_PASS2_REF.UNSAT.L_START
      9449**DCL      9454--REDEF
VX_PASS2_REF.UNSAT.L_STOP
      9455**DCL      9460--REDEF
VX_PASS2_REF.UNSAT.L_WHERE
      9461**DCL      9466--REDEF
VX_PASS2_REF.UNSAT.MAX
      9443**DCL      9448--REDEF
VX_PASS2_REF.UNSAT.PAGE#
      9473**DCL      9478--REDEF
VX_PASS2_REF.UNSAT.SIZE
      9467**DCL      9472--REDEF
VX_PHRASE.PHRASE
      8875**DCL      8877--REDEF
VX_PROGRAM_BIAS.A
      8653**DCL      8654--REDEF
VX_P_PCB_MAIN.OUT$
      9681**DCL     10954>>ASSIGN
VX_R_KEY_BUF.FORM0
     10003**DCL     10007--REDEF   10013--REDEF
VX_SD.A
      9631**DCL      9632--REDEF
VX_SPC.B$.MINE
      9544**DCL      9550--REDEF
VX_SPC.B$.NAME
      9523**DCL      9529--REDEF
VX_SPC.B$.SKIP
      9537**DCL      9543--REDEF
VX_SPC.B$.VALUE
PL6.E3A0      #002=VXS$ACCT File=VXS$LST.:E05TSI                                 WED 07/30/97 08:36 Page:107  
      9530**DCL      9536--REDEF
VX_SPC.SEG.NAME
      9492**DCL      9498--REDEF
VX_SPC.SEG.VALUE
      9499**DCL      9505--REDEF
VX_TSX0_OVERLAY.H
      9267**DCL      9270--REDEF
WHERE$
     10847**DCL     10915<<ASSIGN  10918<>CALL    10920>>ASSIGN  10921>>ASSIGN  10927<<ASSIGN  10930<>CALL
     10932>>ASSIGN  10933>>ASSIGN
WKSZ
     10892**DCL     10951<<ASSIGN  10952<>CALL    10953>>ASSIGN
