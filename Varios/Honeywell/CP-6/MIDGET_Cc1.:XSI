/*M* MIDGET_Cc1 (def:h) -- Header file for MIDGET defines & data defs */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
 
/*P*    NAME:     MIDGET_Cc1
        PURPOSE:  File to contain all of MIDGETs global #defines, macros,
                  data structs, extern declarations, & functional prototypes.
*/
/********************************************************************/
 
#ifndef __MIDGET_Cc1__
#define __MIDGET_Cc1__
 
#include <stdio.h>
#include <time.h>
#include <SEAGULL:h>
 
/*==================================================================*/
/*D*  NAME:    #defines
      PURPOSE: common location for often used #define values
*/
 
#ifndef VERSION
#define VERSION  "test"
#endif
#ifndef TOOLNAME
#define TOOLNAME  "MIDGET.JTBHOST"
#endif
 
#ifndef PUBLIC
#define PUBLIC  extern
#endif
 
/* DEFINE values used in MIDGET */
#define  MODE_STD_FILE     1
#define  MODE_WILDCARD     2
#define  MODE_MAKE_STD     3
#define  MAX_INDENTATION  38
#define  MAX_COLON_POS    35
#define  PathNameLen      41
#define  IN_REC_LEN      256
#define  OUT_REC_LEN     132
#ifndef  INP_BUFSIZE
#define  INP_BUFSIZE     511
#endif
#define  OK       0
#define  TRUE     1
#define  FALSE    0
#define  YES      1
#define  NO       0
#define  SYNTAX   3
#define  ERROR    5
#define  FATAL    7
 
#define FID_LEN          132
#define TARGET_LEN        40
#define RULE_LEN          40
#define STD_REC_LEN       FID_LEN*2 + TARGET_LEN*2 + RULE_LEN
#define TIMESTAMP_LEN     20
 
#define  MD_NO_DEFAULT_RULE    0
#define  MD_GENERIC_SOURCE    99
#define  MD_C_SOURCE           1
#define  MD_PL6_SOURCE         2
#define  MD_FORTRAN_SOURCE     3
#define  MD_PASCAL_SOURCE      4
#define  MD_PARTRGE_SOURCE     5
#define  MD_BMAP_SOURCE        6
#define  MD_GRAMMER_SOURCE     7
#define  MD_FLEX_SOURCE        8
#define  MD_BISON_SOURCE       9
#define  MD_HERMAN_SOURCE     10
#define  MD_TEX_SOURCE        11
#define  MD_CAP_SOURCE        12
#define  MD_ADAPT_DIALOGUE    13
#define  MD_TEX_DVI_FILE      14
#define  MD_ERRMSG_FILE       15
#define  MD_HELP_FILE         16
#define  MD_LISTING_FILE      17
#define  MD_OBJECT_FILE       18
#define  MD_RUNUNIT           19
#define  MD_LEMUR_LIB         20
#define  MD_SHARED_LIB        21
#define  MD_EXTERNAL_LIB      22
/* */
 
/*==================================================================*/
/*D*  NAME:    macros
      PURPOSE: common location for macros
*/
 
#ifdef  REWORK
#ifdef Warning
#undef Warning
#endif
#define Warning  { \
            ++md_warning_cnt; \
            sg1__Warning \
        };
#endif
/* make some he'pful macros */
#define  md_UTS_COMMENT(c,n)  { \
            sscanf( out_rec, "%s", n); \
            fprintf( ofp, "#%s %s %s %s \n", #c, n, \
                     md_time_stamp, md_English_time ); \
         };
#define  md_TARGET_COMMENT(n)  { \
            if (!md_info.opt.forget_nulls)  { \
               md_UTS_COMMENT( *UTS*, n); \
               if (md_info.opt.compressed) \
                  fprintf( ofp, "#%s \n", out_rec); \
               else \
                  fprintf( ofp, "#%s \n\n", out_rec); \
            } \
            else \
               out_rec[ 0] = 0;  /*scratch it*/  \
         };
 
 
/*==================================================================*/
/*D*  NAME:    struct definitions
      PURPOSE: common location for often used struct defs
*/
 
struct  file_ref  {
   FILE  *fp;           /* C file ptr                              */
   char  *buffer;       /* read/write buffer pointer               */
   char  access[15];    /* access mode  (r/w)                      */
   int   length;        /* size of r/w request                     */
   int   in_length;     /* size of message                         */
   char  *pathname;     /* file path name / acount                 */
   char  name[32];      /* file name only                          */
   char  account[10];   /* account name only                       */
};
 
 
struct  global_info  {
/* stuff to be filled in from data grabbed off the command line */
   struct file_ref    in_fid;             /* input file information */
   struct file_ref    out_fid;            /* output file stuff      */
   struct file_ref    out_save;           /* temp to save old output*/
   struct options  {
      unsigned      cc;                   /* C syntax used          */
      unsigned      bmap;                 /* BMAP (assembler) syntax*/
      unsigned      pl6;                  /* PL-6 syntax            */
      unsigned      fortran;              /* FORTRAN syntax         */
      unsigned      out_fid;              /* output file given flag */
      unsigned      append_to_outfid;     /* "+" operator given -o+ */
      unsigned      std_file;             /* STD file given flag    */
      unsigned      wildcard;             /* WILDCARD given flag    */
      unsigned      make_std;             /* MAKE std file given flg*/
      unsigned      library;              /* specify :LIB_E0x acct  */
      unsigned      keep;                 /* keep temp/old output   */
      unsigned      forget_nulls;         /* forget targets w/0 deps*/
      unsigned      indentation;          /* indentation flg & value*/
      unsigned      colon_column;         /* colon column flg& value*/
      unsigned      compressed;           /* single or double spaced*/
      unsigned      test_includes;        /* test incls for exist   */
      unsigned      include_path;         /* include path given flag*/
      unsigned      updates;              /* update path given flag */
      unsigned      header;               /* header comments flag   */
      unsigned      verbose;              /* verbose flag           */
      unsigned      warn;                 /* warnings given flag    */
   }  opt;
/* stuff that will get filled in depending on the above info */
   int                operation_mode;
#define MAX_SRCH_ACCT   20
   char              *search_account[ MAX_SRCH_ACCT];
   char              *wildcard_str;
#define MAX_PREFIXES    26
   char              *prefix_str[ MAX_PREFIXES];
   int                prefix_cnt;
   char               srch_path[ MAX_SRCH_ACCT][ 20];
   int                srch_count;
   char               update_path[ 10];      /* UI account path     */
   char               lib_acct[ 10];         /* :LIB_E0x account    */
/* stuff that is kept here for ease of global use */
   char              *source_file;
   int                break_count;
   time_t             last_break_time;
   FILE              *breakfp;
   char               time[ 30];
   struct utility_flags  {
      int             source;             /* name put in out buffer */
      int             include;            /* name put in out buffer */
      int             source_type;        /* compiler type for rule */
      int             table_built;        /* hash table constructed */
   } flag;
   struct program  {
      char           version[ 20];
      char           name[ 20];
      char           account[ 9];
      char           pathname[ 42];
      char           time[ 30];
   } tool;
   struct context  {
      enum op_mode  {
         invalid,
         std_file,
         wildcard,
         make_std
      } mode;
      enum language  {
         none,
         c,
         pl6,
         fortran,
         all
      } lang;
   } context;
};
typedef  struct global_info  MD_CTX;
 
 
typedef  struct  md_sym_target  {
   struct md_sym_target    *next;
   int                      ta_len;
   int                      ta_collision_cnt;
   char                    *ta_key;
   char                    *ta_in_fid;
   char                    *ta_in_target;
   char                    *ta_out_fid;
   char                    *ta_out_target;
   char                    *ta_rule;
   int                      ta_dependent;
   char                    *ta_time_stamp;
   time_t                   ta_uts;
   }  TARGET;
 
#define MD_INIT_TARGET  {0,0,0,0, 0,0,0,0,0, 0,0}
 
 
/*==================================================================*/
/*D*  NAME:    external references
      PURPOSE: common location for external data references for MIDGET
*/
 
PUBLIC        MD_CTX          md_info;
extern        int             md_debug;  /* initialized in MIDGET_SIc1 */
PUBLIC        int             md_warning_cnt;
PUBLIC  const SGFILEINFO      md_fileinfo;
PUBLIC        SGHASHTABLE     md_target_hash_table;
extern        SGHASHTABLE     md_init_target_ht;  /* init in MIDGET_SIc1 */
PUBLIC        TARGET         *md_target_head;
PUBLIC        TARGET          md_init_target;
PUBLIC        int             md_source_file_num;
PUBLIC        char            md_input_buf[ INP_BUFSIZE];
PUBLIC        char            md_out_buf[ OUT_REC_LEN];
PUBLIC        char            md_file_name[ 41];
PUBLIC        char            md_directive[ 12];
PUBLIC        char            md_time_stamp[ TIMESTAMP_LEN];
PUBLIC        char            md_English_time[ TIMESTAMP_LEN];
PUBLIC        time_t          md_uts;
PUBLIC        char            md_tmp_out_fid[ FID_LEN];
 
/*==================================================================*/
/*D*  NAME:    functional prototypes
      PURPOSE: common location for functional prototypes of MIDGET
*/
 
/* -- MIDGET_SIc1 -- (main:c)  FUNCTIONS */
int   md1_StartUp (int, char **);
int   md1_CmdOptionHandler (int, char**);
char *md1_GetNameFromOpts (char **, int, char **, int *);
int   md1_GetNumberFromOpts (char **, int, char **, int *);
void  md1_SetSearchPath (char *);
void  md1_DoHeaderInfo (char **);
void  md1_DoSetInfoDefaults ();
void  md1_DoInitInfo (char **);
void  md1_DoHelpInfo ();
void  md1_ByeBye ();
 
/* -- MIDGET_SIc2 --  (mdg:c)  FUNCTIONS */
void  md2_OpenFiles( FILE **, char *, FILE **, char *);
void  md2_DoStdFileMode ();
void  md2_DoWildcardMode ();
void  md2_DoMakeStdMode ();
void  md2_DoCommentHeader (FILE *);
 
/* -- MIDGET_SIc3  --  (parse:c) FUNCTIONS */
char *md3_ConvertSourceName (char *);
char *md3_ConvertIncludeName (char *, char *);
char *md3_CheckForReal (char *);
char *md3_CheckAnsiInclude (char *);
char *md3_CheckLibraryInclude (char *);
char *md3_SearchForInclude (char *);
int   md3_PutInOutRecord (char *, char*);
void  md3_PutIncludeName (FILE *, char *, char *);
void  md3_PutSourceFileName (FILE *, char *, char *);
void  md3_PutFlushStuff (FILE *, char *);
int   md3_TestOpen (char *);
void  md3_SetupBreak ();
void  md3_BreakHandler (int);
 
/* -- MIDGET_SIc4 -- (makestd:c) FUNCTIONS */
int        md4_SetupByRule( char *);
int        md4_BuildTargetTable( FILE *);
SGSYMBOL  *md4_AllocSymTarget( char *, int, unsigned);
char      *md4_IsInclude( char *);
char      *md4_IsCInclude( char *);
char      *md4_IsPL6Include( char *);
char      *md4_IsFortranInclude( char *);
char      *md4_IsDependent( char *);
int        md4_GenerateUTS( char *, char *, time_t *);
int        md4_GetTimeStamp( FILE *);
int        md4_IsUpToDate( char *, char *, char *);
int        md4_SaveOldOutput();
int        md4_CopyOldDepends( FILE *, char *, char *);
 
/* ifndef __MIDGET_Cc1__ */
#endif
