VERSION E05

PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:1    
        1        1        /*M* TOX$ERR     TOLTS Error Handling Routines */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        /*P* NAME:         TOX$ERR
       12       12             PURPOSE:      Error and wrapup routines for TOLTS
       13       13             DESCRIPTION:  The entry points in this module print an error
       14       14                           message  via  a call  to the  library service,
       15       15                           XUR$ERRMSG.      Control is then passed to the
       16       16                           appropriate  module   for   continuing   after
       17       17                           notification of the error.
       18       18
       19       19                           1. TOX$ERROR   routine TOLTS errors
       20       20                           2. TOX$WARN    expected TOLTS warnings
       21       21                           3. TOX$ABORT   serious TOLTS / CP6 errors
       22       22                           4. TOX$SCREECH critical TOLTS / CP6 errors
       23       23
       24       24                           For TOX$ABORT and TOX$SCREECH, TOLTS processing
       25       25                           does not continue.
       26       26             REFERENCE:    CP-6 Release D0E0
       27       27             LAST UPDATE:  02/27/86
       28       28        */
       29       29        %EJECT;
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:2    
       30       30        TOX$ERROR: PROC (ERROR_CODE) ;
       31       31
       32       32        /* Include Files */
       33       33
       34       34           %INCLUDE CP_6;
       35     5593           %INCLUDE CP_6_SUBS ;
       36     6133           %INCLUDE TOT_TOLTS_M ;
       37     7251           %INCLUDE TO_PERR_C ;
       38     7836           %INCLUDE TO_SCODE_C ;
       39     7844           %INCLUDE XUG_ENTRY ;
       40     7875           %INCLUDE XU_MACRO_C;
       41    10981
       42    10982        /* Fault Frame Declarations */
       43    10983
       44    10984           %B$EXCFR;
       45    11002           %B$TCB;
       46    11005           %B$ALT;
       47    11013
       48    11014        /* Parameter */
       49    11015
       50    11016    1      DCL 1 ERROR_CODE               ALIGNED,
       51    11017    1            2 FUNCTIONAL_CODE_GROUP  BIT  (12) UNAL,
       52    11018    1            2 MODULE_IDENTIFIER      BIT  (6)  UNAL,
       53    11019    1            2 MONITOR_FAULT          BIT  (1)  UNAL,
       54    11020    1            2 ERROR_NUMBER           UBIN (14) UNAL,
       55    11021    1            2 ERROR_SEVERITY         UBIN (3)  UNAL ;
       56    11022
       57    11023        /* Variables */
       58    11024
       59    11025    1      DCL WRAPUP$     PTR ALIGNED ;
       60    11026    1      DCL WRAPUP_RETURN$ REDEF WRAPUP$ EPTR ALIGNED ;
       61    11027           %EJECT ;
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:3    
       62    11028        /* Functional Parameter Tables */
       63    11029
       64    11030           %FPT_SCREECH (FPTN      = TOLTS_SNAP,
       65    11031                         SCREECHID = DUMP_NAME,
       66    11032                         SCODE     = SC_TOLTS) ;
       67    11046           %VLP_NAME (FPTN = DUMP_NAME,
       68    11047                      LEN  = 31) ;
       69    11074           %VLP_SCODE (FPTN  = SC_TOLTS,
       70    11075                       CODE  = %S$TOLTSABORT,
       71    11076                       FCG   = 'TO',
       72    11077                       MID   = 'T',
       73    11078                       SEV   = %SEV_SNAP#,
       74    11079                       CUSR  = YES,
       75    11080                       DDSEG = YES,
       76    11081                       FMBUF = YES,
       77    11082                       ROSEG = YES,
       78    11083                       ISEG  = YES) ;
       79    11144
       80    11145        /* External Variables */
       81    11146
       82    11147    1      DCL B$TCB$                     PTR SYMREF ALIGNED ;
       83    11148           %TOT$ECP (STCLASS = SYMREF) ;
       84    11197    1      DCL TOD$SPA$                   PTR SYMREF ALIGNED ;
       85    11198           %TOD$SPA (STCLASS = "BASED (TOD$SPA$)") ;
       86    11250           %XUG_GETCMD (STCLASS = SYMREF,
       87    11251                        NAME    = TOLTS_GETCMD,
       88    11252                        FCG     = 'TOX');
       89    11590
       90    11591        /* External Entries */
       91    11592
       92    11593    1      DCL TOT$RESTART                ENTRY ;
       93    11594           %EJECT;
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:4    
       94    11595        /*D* NAME:         TOX$ERROR
       95    11596             INTERFACE:    XUR$ERRMSG
       96    11597                           TOF$SUBEXEC_WRAPUP$
       97    11598                           TOT$RESTART
       98    11599             INPUT:        ERROR_CODE - a standard CP6 error code
       99    11600             OUTPUT:       Error message printed to the user.
      100    11601             DESCRIPTION:  This routine is called by any module in TOLTS that
      101    11602                           detects a  software type error  or  inconsistency.
      102    11603                           It prints out an applicable error message and then
      103    11604                           determines where the error occurred.   If it is in
      104    11605                           TOLTS, it is restarted, otherwise the current sub-
      105    11606                           executive is wrapped up and TOLTS is restarted.
      106    11607        */
      107    11608
      108    11609        /* Main Code */
      109    11610
      110    11611    1      IF TOT$ECP.SUBEXEC.WRAPUP_TRIED
      111    11612    1      THEN CALL TOX$SCREECH (ERROR_CODE) ;
      112    11613    2      ELSE DO ;
      113    11614    2              TOT$ECP.SUBEXEC.WRAPUP_TRIED = %TRUE ;
      114    11615    2              TOLTS_GETCMD.ERR_CODE = ERROR_CODE;
      115    11616    2              TOLTS_GETCMD.FLGLEV# = 4;
      116    11617    2              CALL XUG$ERRMSG (TOLTS_GETCMD);
      117    11618    2              IF B$TCB$ -> B$TCB.STK$ -> B$EXCFR.IC < TOT$ECP.SUBEXEC.ADDRESS
      118    11619    2              THEN CALL TOT$RESTART ;
      119    11620    3              ELSE DO ;
      120    11621    3                      IF TOT$ECP.SUBEXEC.CURRENT = %NONE
      121    11622    3                      THEN ;
      122    11623    3                      ELSE CALL SET_SPA_WD11;
      123    11624    3                      CALL M$CLRSTK ;
      124    11625    3                      WRAPUP$ = TOT$ECP.SUBEXEC.WRAPUP$ ;
      125    11626    3                      CALL WRAPUP_RETURN$ ;
      126    11627    3                   END /* ELSE */ ;
      127    11628    2           END /* ELSE */ ;
      128    11629
      129    11630        /* End of Main */
      130    11631        %EJECT;
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:5    
      131    11632        /*I* NAME:         SET_SPA_WD11
      132    11633             AUTHOR:       Kathy Larkin
      133    11634             PURPOSE:      Set word 11 of the Slave Prefix Area
      134    11635             INTERFACE:    None called.
      135    11636             PARAMETERS:   None passed.
      136    11637             DATA:         B$TCB$ - input
      137    11638                           TOD$SPA.WD11.IC - output
      138    11639             DESCRIPTION:  Set  WD11 of the  Slave Prefix Area  to the IC
      139    11640                           value  found in  either the  EXCFR or  the ALT
      140    11641                           frame pointed to by B$TCB$.
      141    11642        */
      142    11643
      143    11644    1   SET_SPA_WD11: PROC ;
      144    11645
      145    11646    2      IF B$TCB$ -> B$TCB.ALT$ ~= ADDR (NIL)
      146    11647    2      THEN TOD$SPA.WD11.IC = B$TCB$ -> B$TCB.ALT$ -> B$EXCFR.IC ;
      147    11648    2      ELSE TOD$SPA.WD11.IC = B$TCB$ -> B$TCB.STK$ -> B$EXCFR.IC ;
      148    11649
      149    11650    2   END SET_SPA_WD11 ;
      150    11651        %EJECT;
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:6    
      151    11652        /*D* NAME:         TOX$WARN
      152    11653             INTERFACE:    XUR$ERRMSG
      153    11654             INPUT:        ERROR_CODE - a standard CP6 error code
      154    11655             OUTPUT:       Error message printed to the user.
      155    11656             DESCRIPTION:  This entry is called when an error message is
      156    11657                           needed for an error than will be  handled  by
      157    11658                           a TOLTS subexecutive.
      158    11659        */
      159    11660
      160    11661    1   TOX$WARN: ENTRY (ERROR_CODE) ;
      161    11662
      162    11663    1      TOLTS_GETCMD.ERR_CODE = ERROR_CODE;
      163    11664    1      TOLTS_GETCMD.FLGLEV# = 2;
      164    11665    1      CALL XUG$ERRMSG (TOLTS_GETCMD);
      165    11666    1      RETURN ;
      166    11667        %EJECT;
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:7    
      167    11668        /*D* NAME:         TOX$ABORT
      168    11669             INTERFACE:    XUR$ERRMSG
      169    11670                           M$ERR Monitor Service
      170    11671             INPUT:        ERROR_CODE - a standard CP6 error code
      171    11672             OUTPUT:       Error message printed to the user.
      172    11673                           Termination of TOLTS.
      173    11674             DESCRIPTION:  This entry is called when TOLTS encounters an error
      174    11675                           from which it can not recover.
      175    11676        */
      176    11677
      177    11678    1   TOX$ABORT: ENTRY (ERROR_CODE) ;
      178    11679
      179    11680    1      TOLTS_GETCMD.ERR_CODE = ERROR_CODE;
      180    11681    1      TOLTS_GETCMD.FLGLEV# = 4;
      181    11682    1      CALL XUG$ERRMSG (TOLTS_GETCMD);
      182    11683    1      CALL M$ERR ;
      183    11684        %EJECT;
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:8    
      184    11685        /*D* NAME:         TOX$SCREECH
      185    11686             INTERFACE:    XUR$ERRMSG
      186    11687                           M$SCREECH Monitor Service
      187    11688                           M$ERR Monitor Service
      188    11689             INPUT:        ERROR_CODE - a standard CP6 error code
      189    11690             OUTPUT:       Error message printed to the user.
      190    11691                           Dump produced by the SCREECH
      191    11692             DESCRIPTION:  This entry point is called when TOLTS discovers an
      192    11693                           internal inconsistency or interface error.  A snap
      193    11694                           is done to yield a dump and TOLTS is terminated.
      194    11695        */
      195    11696
      196    11697    1   TOX$SCREECH: ENTRY (ERROR_CODE) ;
      197    11698
      198    11699    1      TOLTS_GETCMD.ERR_CODE = ERROR_CODE;
      199    11700    1      TOLTS_GETCMD.FLGLEV# = 4;
      200    11701    1      CALL XUG$ERRMSG (TOLTS_GETCMD) ALTRET (TRY_SCREECH);
      201    11702    1   TRY_SCREECH:
      202    11703    1      TOLTS_SNAP.JERR_ = VECTOR (ERROR_CODE) ;
      203    11704    1      IF ERROR_CODE.FUNCTIONAL_CODE_GROUP = SC_TOLTS.FCG#
      204    11705    1      THEN SC_TOLTS.MID# = ERROR_CODE.MODULE_IDENTIFIER ;
      205    11706    1      ELSE /* some non-TOLTS error, leave MID set to 'T' */ ;
      206    11707    1      TOLTS_GETCMD.FLGLEV# = 0;
      207    11708    1      CALL M$SCREECH (TOLTS_SNAP) WHENRETURN
      208    11709    2           DO ;
      209    11710    2              TOLTS_GETCMD.ERR_CODE.CODE# = %E$GOODSCREECH ;
      210    11711    2              TOLTS_GETCMD.F1_ = VECTOR (DUMP_NAME);
      211    11712    2              CALL XUG$ERRMSG (TOLTS_GETCMD) ALTRET (RUN_AWAY);
      212    11713    2           END /* WHENRETURN */ ;
      213    11714    1      WHENALTRETURN
      214    11715    2           DO ;
      215    11716    2              TOLTS_GETCMD.ERR_CODE.CODE# = %E$BADSCREECH ;
      216    11717    2              CALL XUG$ERRMSG (TOLTS_GETCMD) ALTRET (RUN_AWAY);
      217    11718    2              TOLTS_GETCMD.ERR_CODE = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR;
      218    11719    2              CALL XUG$ERRMSG (TOLTS_GETCMD) ALTRET (RUN_AWAY);
      219    11720    2           END /* WHENALTRETURN */ ;
      220    11721    1   RUN_AWAY:
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:9    
      221    11722    1      CALL M$ERR ;
      222    11723
      223    11724        /* END TOX$ERROR */
      224    11725        %EJECT ;
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:10   
      225    11726        /*S* SCREECH_CODE: TOC-S$TOLTSABORT
      226    11727             TYPE:    SNAP
      227    11728             MESSAGE: TOLTS test control does not agree with the COLTS subexecutive
      228    11729                      that it is interfacing with.
      229    11730             REMARKS: The problem can occur either from an internal error
      230    11731                      on the part of TOLTS or from an executive / subexec
      231    11732                      interface error.
      232    11733        */
      233    11734        /*S* SCREECH_CODE: TOD-S$TOLTSABORT
      234    11735             TYPE:    SNAP
      235    11736             MESSAGE: An error related to the TOLTS Dispatcher has been
      236    11737                      encountered.
      237    11738             REMARKS: The problem occurs from an internal error on the part
      238    11739                      of TOLTS.
      239    11740        */
      240    11741        /*S* SCREECH_CODE: TOE-S$TOLTSABORT
      241    11742             TYPE:    SNAP
      242    11743             MESSAGE: An error related to the TOLTS Event Handler has been
      243    11744                      encountered.
      244    11745             REMARKS: The problem occurs from an internal error on the part
      245    11746                      of TOLTS.
      246    11747        */
      247    11748        /*S* SCREECH_CODE: TOF-S$TOLTSABORT
      248    11749             TYPE:    SNAP
      249    11750             MESSAGE: An irrecoverable and unexpected fault has occurred
      250    11751                      during TOLTS processing.
      251    11752             REMARKS: The problem can occur either from an internal error
      252    11753                      on the part of TOLTS, an executive / subexec interface
      253    11754                      error, or an executive / CP-6 operating system interface
      254    11755                      error.
      255    11756        */
      256    11757        %EJECT ;
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:11   
      257    11758        /*S* SCREECH_CODE: TOG-S$TOLTSABORT
      258    11759             TYPE:    SNAP
      259    11760             MESSAGE: An error or inconsistency has been encountered by TOLTS
      260    11761                      during the processing of a GCOS Master Mode Entry.
      261    11762             REMARKS: The problem can occur either from an internal error
      262    11763                      on the part of TOLTS or from an executive / subexec
      263    11764                      interface error.
      264    11765        */
      265    11766        /*S* SCREECH_CODE: TOL-S$TOLTSABORT
      266    11767             TYPE:    SNAP
      267    11768             MESSAGE: An inconsistency or error has been encountered by the
      268    11769                      TOLTS Loader program.
      269    11770             REMARKS: The problem can occur either from an internal error
      270    11771                      on the part of TOLTS or from an executive / CP-6
      271    11772                      operating system interface error.
      272    11773        */
      273    11774        /*S* SCREECH_CODE: TOM-S$TOLTSABORT
      274    11775             TYPE:    SNAP
      275    11776             MESSAGE: TOLTS test control does not agree with the MOLTS subexecutive
      276    11777                      that it is interfacing with.
      277    11778             REMARKS: The problem can occur either from an internal error
      278    11779                      on the part of TOLTS or from an executive / subexec
      279    11780                      interface error.
      280    11781        */
      281    11782        /*S* SCREECH_CODE: TOO-S$TOLTSABORT
      282    11783             TYPE:    SNAP
      283    11784             MESSAGE: An error or inconsistency has been encountered by TOLTS
      284    11785                      during the processing of a TOLTS Master Mode Entry.
      285    11786             REMARKS: The problem can occur either from an internal error
      286    11787                      on the part of TOLTS or from an executive / subexec
      287    11788                      interface error.
      288    11789        */
      289    11790        %EJECT ;
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:12   
      290    11791        /*S* SCREECH_CODE: TOP-S$TOLTSABORT
      291    11792             TYPE:    SNAP
      292    11793             MESSAGE: TOLTS test control does not agree with the POLTS subexecutive
      293    11794                      that it is interfacing with.
      294    11795             REMARKS: The problem can occur either from an internal error
      295    11796                      on the part of TOLTS or from an executive / subexec
      296    11797                      interface error.
      297    11798        */
      298    11799        /*S* SCREECH_CODE: TOT-S$TOLTSABORT
      299    11800             TYPE:    SNAP
      300    11801             MESSAGE: An unexpected TOLTS processing error has been encountered.
      301    11802             REMARKS: The problem occurs from an internal accounting error on
      302    11803                      the part of TOLTS or an interface error between TOLTS
      303    11804                      and the CP-6 operating system.
      304    11805        */
      305    11806
      306    11807    1   END TOX$ERROR ;

PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:13   
--  Include file information  --

   XU_MACRO_C.:E05TOU  is referenced.
   XUG_ENTRY.:E05TOU  cannot be made into a system file and is referenced.
   TO_SCODE_C.:E05TOU  is referenced.
   TO_PERR_C.:E05TOU  is referenced.
   TOT_TOLTS_M.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure TOX$ERROR.

   Procedure TOX$ERROR requires 143 words for executable code.
   Procedure TOX$ERROR requires 8 words of local(AUTO) storage.

    No errors detected in file TOX$ERR.:E05TSI    .

PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:14   

 Object Unit name= TOX$ERROR                                  File name= TOX$ERR.:E05TOU
 UTS= JUL 30 '97 06:52:34.48 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none    16     20  TOX$ERROR
    2   Proc  even  none   143    217  TOX$ERROR
    3  RoData even  none     4      4  TOX$ERROR

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes      Std        1  TOX$ERROR
     2     73                  yes      Std        1  TOX$WARN
     2    107                  yes      Std        1  TOX$ABORT
     2    125                  yes      Std        1  TOX$SCREECH

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 TOT$RESTART
 yes     yes           Std       1 XUG$ERRMSG
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:15   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B$TCB$                                TOT$ECP
     TOD$SPA$                              TOLTS_GETCMD                          B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:16   


        1        1        /*M* TOX$ERR     TOLTS Error Handling Routines */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        /*P* NAME:         TOX$ERR
       12       12             PURPOSE:      Error and wrapup routines for TOLTS
       13       13             DESCRIPTION:  The entry points in this module print an error
       14       14                           message  via  a call  to the  library service,
       15       15                           XUR$ERRMSG.      Control is then passed to the
       16       16                           appropriate  module   for   continuing   after
       17       17                           notification of the error.
       18       18
       19       19                           1. TOX$ERROR   routine TOLTS errors
       20       20                           2. TOX$WARN    expected TOLTS warnings
       21       21                           3. TOX$ABORT   serious TOLTS / CP6 errors
       22       22                           4. TOX$SCREECH critical TOLTS / CP6 errors
       23       23
       24       24                           For TOX$ABORT and TOX$SCREECH, TOLTS processing
       25       25                           does not continue.
       26       26             REFERENCE:    CP-6 Release D0E0
       27       27             LAST UPDATE:  02/27/86
       28       28        */
       29       29        %EJECT;
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:17   
       30       30        TOX$ERROR: PROC (ERROR_CODE) ;

     30  2 000000   000000 700200 xent  TOX$ERROR    TSX0  ! X66_AUTO_1
         2 000001   000010 000001                    ZERO    8,1

       31       31
       32       32        /* Include Files */
       33       33
       34       34           %INCLUDE CP_6;
       35     5593           %INCLUDE CP_6_SUBS ;
       36     6133           %INCLUDE TOT_TOLTS_M ;
       37     7251           %INCLUDE TO_PERR_C ;
       38     7836           %INCLUDE TO_SCODE_C ;
       39     7844           %INCLUDE XUG_ENTRY ;
       40     7875           %INCLUDE XU_MACRO_C;
       41    10981
       42    10982        /* Fault Frame Declarations */
       43    10983
       44    10984           %B$EXCFR;
       45    11002           %B$TCB;
       46    11005           %B$ALT;
       47    11013
       48    11014        /* Parameter */
       49    11015
       50    11016    1      DCL 1 ERROR_CODE               ALIGNED,
       51    11017    1            2 FUNCTIONAL_CODE_GROUP  BIT  (12) UNAL,
       52    11018    1            2 MODULE_IDENTIFIER      BIT  (6)  UNAL,
       53    11019    1            2 MONITOR_FAULT          BIT  (1)  UNAL,
       54    11020    1            2 ERROR_NUMBER           UBIN (14) UNAL,
       55    11021    1            2 ERROR_SEVERITY         UBIN (3)  UNAL ;
       56    11022
       57    11023        /* Variables */
       58    11024
       59    11025    1      DCL WRAPUP$     PTR ALIGNED ;
       60    11026    1      DCL WRAPUP_RETURN$ REDEF WRAPUP$ EPTR ALIGNED ;
       61    11027           %EJECT ;
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:18   
       62    11028        /* Functional Parameter Tables */
       63    11029
       64    11030           %FPT_SCREECH (FPTN      = TOLTS_SNAP,
       65    11031                         SCREECHID = DUMP_NAME,
       66    11032                         SCODE     = SC_TOLTS) ;
       67    11046           %VLP_NAME (FPTN = DUMP_NAME,
       68    11047                      LEN  = 31) ;
       69    11074           %VLP_SCODE (FPTN  = SC_TOLTS,
       70    11075                       CODE  = %S$TOLTSABORT,
       71    11076                       FCG   = 'TO',
       72    11077                       MID   = 'T',
       73    11078                       SEV   = %SEV_SNAP#,
       74    11079                       CUSR  = YES,
       75    11080                       DDSEG = YES,
       76    11081                       FMBUF = YES,
       77    11082                       ROSEG = YES,
       78    11083                       ISEG  = YES) ;
       79    11144
       80    11145        /* External Variables */
       81    11146
       82    11147    1      DCL B$TCB$                     PTR SYMREF ALIGNED ;
       83    11148           %TOT$ECP (STCLASS = SYMREF) ;
       84    11197    1      DCL TOD$SPA$                   PTR SYMREF ALIGNED ;
       85    11198           %TOD$SPA (STCLASS = "BASED (TOD$SPA$)") ;
       86    11250           %XUG_GETCMD (STCLASS = SYMREF,
       87    11251                        NAME    = TOLTS_GETCMD,
       88    11252                        FCG     = 'TOX');
       89    11590
       90    11591        /* External Entries */
       91    11592
       92    11593    1      DCL TOT$RESTART                ENTRY ;
       93    11594           %EJECT;
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:19   
       94    11595        /*D* NAME:         TOX$ERROR
       95    11596             INTERFACE:    XUR$ERRMSG
       96    11597                           TOF$SUBEXEC_WRAPUP$
       97    11598                           TOT$RESTART
       98    11599             INPUT:        ERROR_CODE - a standard CP6 error code
       99    11600             OUTPUT:       Error message printed to the user.
      100    11601             DESCRIPTION:  This routine is called by any module in TOLTS that
      101    11602                           detects a  software type error  or  inconsistency.
      102    11603                           It prints out an applicable error message and then
      103    11604                           determines where the error occurred.   If it is in
      104    11605                           TOLTS, it is restarted, otherwise the current sub-
      105    11606                           executive is wrapped up and TOLTS is restarted.
      106    11607        */
      107    11608
      108    11609        /* Main Code */
      109    11610
      110    11611    1      IF TOT$ECP.SUBEXEC.WRAPUP_TRIED

  11611  2 000002   000012 234000 xsym               SZN     TOT$ECP+10
         2 000003   000011 605000 2                  TPL     s:11614

      111    11612    1      THEN CALL TOX$SCREECH (ERROR_CODE) ;

  11612  2 000004   200003 630500                    EPPR0   @ERROR_CODE,,AUTO
         2 000005   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000006   000125 701000 2                  TSX1    s:11697
         2 000007   000000 011000                    NOP     0
         2 000010   000052 710000 2                  TRA     s:11628

      112    11613    2      ELSE DO ;

      113    11614    2              TOT$ECP.SUBEXEC.WRAPUP_TRIED = %TRUE ;

  11614  2 000011   400000 236003                    LDQ     -131072,DU
         2 000012   000012 756000 xsym               STQ     TOT$ECP+10

      114    11615    2              TOLTS_GETCMD.ERR_CODE = ERROR_CODE;
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:20   

  11615  2 000013   200003 470500                    LDP0    @ERROR_CODE,,AUTO
         2 000014   000000 236100                    LDQ     0,,PR0
         2 000015   000010 756000 xsym               STQ     TOLTS_GETCMD+8

      115    11616    2              TOLTS_GETCMD.FLGLEV# = 4;

  11616  2 000016   000004 236003                    LDQ     4,DU
         2 000017   000006 552020 xsym               STBQ    TOLTS_GETCMD+6,'20'O

      116    11617    2              CALL XUG$ERRMSG (TOLTS_GETCMD);

  11617  2 000020   000000 630400 3                  EPPR0   0
         2 000021   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000022   000000 701000 xent               TSX1    XUG$ERRMSG
         2 000023   000000 011000                    NOP     0

      117    11618    2              IF B$TCB$ -> B$TCB.STK$ -> B$EXCFR.IC < TOT$ECP.SUBEXEC.ADDRESS

  11618  2 000024   000000 470400 xsym               LDP0    B$TCB$
         2 000025   000001 471500                    LDP1    1,,PR0
         2 000026   100004 236100                    LDQ     4,,PR1
         2 000027   000022 772000                    QRL     18
         2 000030   000010 116000 xsym               CMPQ    TOT$ECP+8
         2 000031   000036 603000 2                  TRC     s:11621

      118    11619    2              THEN CALL TOT$RESTART ;

  11619  2 000032   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000033   000000 701000 xent               TSX1    TOT$RESTART
         2 000034   000000 011000                    NOP     0
         2 000035   000052 710000 2                  TRA     s:11628

      119    11620    3              ELSE DO ;

      120    11621    3                      IF TOT$ECP.SUBEXEC.CURRENT = %NONE

PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:21   
  11621  2 000036   000007 235000 xsym               LDA     TOT$ECP+7
         2 000037   000042 600000 2                  TZE     s:11624

      121    11622    3                      THEN ;
      122    11623    3                      ELSE CALL SET_SPA_WD11;

  11623  2 000040   000053 701000 2                  TSX1    SET_SPA_WD11
         2 000041   000000 011000                    NOP     0

      123    11624    3                      CALL M$CLRSTK ;

  11624  2 000042   010013 713400                    CLIMB   4107
         2 000043   000000 401760                    pmme    nvectors=0

      124    11625    3                      WRAPUP$ = TOT$ECP.SUBEXEC.WRAPUP$ ;

  11625  2 000044   000013 236000 xsym               LDQ     TOT$ECP+11
         2 000045   200004 756100                    STQ     WRAPUP$,,AUTO

      125    11626    3                      CALL WRAPUP_RETURN$ ;

  11626  2 000046   200004 220100                    LDX0    WRAPUP$,,AUTO
         2 000047   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000050   000000 701010                    TSX1    0,X0
         2 000051   000000 011000                    NOP     0

      126    11627    3                   END /* ELSE */ ;

      127    11628    2           END /* ELSE */ ;

  11628  2 000052   000072 710000 2                  TRA     s:11650+1

      128    11629
      129    11630        /* End of Main */
      130    11631        %EJECT;
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:22   
      131    11632        /*I* NAME:         SET_SPA_WD11
      132    11633             AUTHOR:       Kathy Larkin
      133    11634             PURPOSE:      Set word 11 of the Slave Prefix Area
      134    11635             INTERFACE:    None called.
      135    11636             PARAMETERS:   None passed.
      136    11637             DATA:         B$TCB$ - input
      137    11638                           TOD$SPA.WD11.IC - output
      138    11639             DESCRIPTION:  Set  WD11 of the  Slave Prefix Area  to the IC
      139    11640                           value  found in  either the  EXCFR or  the ALT
      140    11641                           frame pointed to by B$TCB$.
      141    11642        */
      142    11643
      143    11644    1   SET_SPA_WD11: PROC ;

  11644  2 000053   200006 741300       SET_SPA_WD11 STX1  ! WRAPUP$+2,,AUTO

      144    11645
      145    11646    2      IF B$TCB$ -> B$TCB.ALT$ ~= ADDR (NIL)

  11646  2 000054   000000 470400 xsym               LDP0    B$TCB$
         2 000055   000000 236100                    LDQ     0,,PR0
         2 000056   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000057   000065 600000 2                  TZE     s:11648

      146    11647    2      THEN TOD$SPA.WD11.IC = B$TCB$ -> B$TCB.ALT$ -> B$EXCFR.IC ;

  11647  2 000060   000000 471500                    LDP1    0,,PR0
         2 000061   100004 220100                    LDX0    4,,PR1
         2 000062   000000 473400 xsym               LDP3    TOD$SPA$
         2 000063   300013 740100                    STX0    11,,PR3
         2 000064   000071 710000 2                  TRA     s:11650

      147    11648    2      ELSE TOD$SPA.WD11.IC = B$TCB$ -> B$TCB.STK$ -> B$EXCFR.IC ;

  11648  2 000065   000001 471500                    LDP1    1,,PR0
         2 000066   100004 220100                    LDX0    4,,PR1
         2 000067   000000 473400 xsym               LDP3    TOD$SPA$
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:23   
         2 000070   300013 740100                    STX0    11,,PR3

      148    11649
      149    11650    2   END SET_SPA_WD11 ;

  11650  2 000071   000001 702211                    TSX2  ! 1,X1
         2 000072   000075 710000 2                  TRA     s:11663

      150    11651        %EJECT;
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:24   
      151    11652        /*D* NAME:         TOX$WARN
      152    11653             INTERFACE:    XUR$ERRMSG
      153    11654             INPUT:        ERROR_CODE - a standard CP6 error code
      154    11655             OUTPUT:       Error message printed to the user.
      155    11656             DESCRIPTION:  This entry is called when an error message is
      156    11657                           needed for an error than will be  handled  by
      157    11658                           a TOLTS subexecutive.
      158    11659        */
      159    11660
      160    11661    1   TOX$WARN: ENTRY (ERROR_CODE) ;

  11661  2 000073   000000 700200 xent  TOX$WARN     TSX0  ! X66_AUTO_1
         2 000074   000010 000001                    ZERO    8,1

      161    11662
      162    11663    1      TOLTS_GETCMD.ERR_CODE = ERROR_CODE;

  11663  2 000075   200003 470500                    LDP0    @ERROR_CODE,,AUTO
         2 000076   000000 236100                    LDQ     0,,PR0
         2 000077   000010 756000 xsym               STQ     TOLTS_GETCMD+8

      163    11664    1      TOLTS_GETCMD.FLGLEV# = 2;

  11664  2 000100   000002 236003                    LDQ     2,DU
         2 000101   000006 552020 xsym               STBQ    TOLTS_GETCMD+6,'20'O

      164    11665    1      CALL XUG$ERRMSG (TOLTS_GETCMD);

  11665  2 000102   000000 630400 3                  EPPR0   0
         2 000103   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000104   000000 701000 xent               TSX1    XUG$ERRMSG
         2 000105   000000 011000                    NOP     0

      165    11666    1      RETURN ;

  11666  2 000106   000000 702200 xent               TSX2  ! X66_ARET

PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:25   
      166    11667        %EJECT;
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:26   
      167    11668        /*D* NAME:         TOX$ABORT
      168    11669             INTERFACE:    XUR$ERRMSG
      169    11670                           M$ERR Monitor Service
      170    11671             INPUT:        ERROR_CODE - a standard CP6 error code
      171    11672             OUTPUT:       Error message printed to the user.
      172    11673                           Termination of TOLTS.
      173    11674             DESCRIPTION:  This entry is called when TOLTS encounters an error
      174    11675                           from which it can not recover.
      175    11676        */
      176    11677
      177    11678    1   TOX$ABORT: ENTRY (ERROR_CODE) ;

  11678  2 000107   000000 700200 xent  TOX$ABORT    TSX0  ! X66_AUTO_1
         2 000110   000010 000001                    ZERO    8,1

      178    11679
      179    11680    1      TOLTS_GETCMD.ERR_CODE = ERROR_CODE;

  11680  2 000111   200003 470500                    LDP0    @ERROR_CODE,,AUTO
         2 000112   000000 236100                    LDQ     0,,PR0
         2 000113   000010 756000 xsym               STQ     TOLTS_GETCMD+8

      180    11681    1      TOLTS_GETCMD.FLGLEV# = 4;

  11681  2 000114   000004 236003                    LDQ     4,DU
         2 000115   000006 552020 xsym               STBQ    TOLTS_GETCMD+6,'20'O

      181    11682    1      CALL XUG$ERRMSG (TOLTS_GETCMD);

  11682  2 000116   000000 630400 3                  EPPR0   0
         2 000117   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000120   000000 701000 xent               TSX1    XUG$ERRMSG
         2 000121   000000 011000                    NOP     0

      182    11683    1      CALL M$ERR ;

  11683  2 000122   000002 713400                    CLIMB   err
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:27   
         2 000123   000000 401760                    pmme    nvectors=0
         2 000124   000127 710000 2                  TRA     s:11699

      183    11684        %EJECT;
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:28   
      184    11685        /*D* NAME:         TOX$SCREECH
      185    11686             INTERFACE:    XUR$ERRMSG
      186    11687                           M$SCREECH Monitor Service
      187    11688                           M$ERR Monitor Service
      188    11689             INPUT:        ERROR_CODE - a standard CP6 error code
      189    11690             OUTPUT:       Error message printed to the user.
      190    11691                           Dump produced by the SCREECH
      191    11692             DESCRIPTION:  This entry point is called when TOLTS discovers an
      192    11693                           internal inconsistency or interface error.  A snap
      193    11694                           is done to yield a dump and TOLTS is terminated.
      194    11695        */
      195    11696
      196    11697    1   TOX$SCREECH: ENTRY (ERROR_CODE) ;

  11697  2 000125   000000 700200 xent  TOX$SCREECH  TSX0  ! X66_AUTO_1
         2 000126   000010 000001                    ZERO    8,1

      197    11698
      198    11699    1      TOLTS_GETCMD.ERR_CODE = ERROR_CODE;

  11699  2 000127   200003 470500                    LDP0    @ERROR_CODE,,AUTO
         2 000130   000000 236100                    LDQ     0,,PR0
         2 000131   000010 756000 xsym               STQ     TOLTS_GETCMD+8

      199    11700    1      TOLTS_GETCMD.FLGLEV# = 4;

  11700  2 000132   000004 236003                    LDQ     4,DU
         2 000133   000006 552020 xsym               STBQ    TOLTS_GETCMD+6,'20'O

      200    11701    1      CALL XUG$ERRMSG (TOLTS_GETCMD) ALTRET (TRY_SCREECH);

  11701  2 000134   000000 630400 3                  EPPR0   0
         2 000135   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000136   000000 701000 xent               TSX1    XUG$ERRMSG
         2 000137   000140 702000 2                  TSX2    TRY_SCREECH

      201    11702    1   TRY_SCREECH:
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:29   
      202    11703    1      TOLTS_SNAP.JERR_ = VECTOR (ERROR_CODE) ;

  11703  2 000140   777640 235007       TRY_SCREECH  LDA     -96,DL
         2 000141   200003 236100                    LDQ     @ERROR_CODE,,AUTO
         2 000142   000002 757000 1                  STAQ    TOLTS_SNAP+2

      203    11704    1      IF ERROR_CODE.FUNCTIONAL_CODE_GROUP = SC_TOLTS.FCG#

  11704  2 000143   200003 470500                    LDP0    @ERROR_CODE,,AUTO
         2 000144   000000 236100                    LDQ     0,,PR0
         2 000145   000016 676000 1                  ERQ     SC_TOLTS
         2 000146   777700 376003                    ANQ     -64,DU
         2 000147   000152 601000 2                  TNZ     s:11707

      204    11705    1      THEN SC_TOLTS.MID# = ERROR_CODE.MODULE_IDENTIFIER ;

  11705  2 000150   000000 236100                    LDQ     0,,PR0
         2 000151   000016 752010 1                  STCQ    SC_TOLTS,'10'O

      205    11706    1      ELSE /* some non-TOLTS error, leave MID set to 'T' */ ;
      206    11707    1      TOLTS_GETCMD.FLGLEV# = 0;

  11707  2 000152   000000 236003                    LDQ     0,DU
         2 000153   000006 552020 xsym               STBQ    TOLTS_GETCMD+6,'20'O

      207    11708    1      CALL M$SCREECH (TOLTS_SNAP) WHENRETURN

  11708  2 000154   000000 630400 1                  EPPR0   TOLTS_SNAP
         2 000155   400013 713400                    CLIMB   alt,+11
         2 000156   401000 401760                    pmme    nvectors=3
         2 000157   000174 702000 2                  TSX2    s:11716

      208    11709    2           DO ;

      209    11710    2              TOLTS_GETCMD.ERR_CODE.CODE# = %E$GOODSCREECH ;

  11710  2 000160   000010 236000 xsym               LDQ     TOLTS_GETCMD+8
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:30   
         2 000161   000001 376000 3                  ANQ     1
         2 000162   004360 276007                    ORQ     2288,DL
         2 000163   000010 756000 xsym               STQ     TOLTS_GETCMD+8

      210    11711    2              TOLTS_GETCMD.F1_ = VECTOR (DUMP_NAME);

  11711  2 000164   000002 237000 3                  LDAQ    2
         2 000165   000017 755000 xsym               STA     TOLTS_GETCMD+15
         2 000166   000020 756000 xsym               STQ     TOLTS_GETCMD+16

      211    11712    2              CALL XUG$ERRMSG (TOLTS_GETCMD) ALTRET (RUN_AWAY);

  11712  2 000167   000000 630400 3                  EPPR0   0
         2 000170   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000171   000000 701000 xent               TSX1    XUG$ERRMSG
         2 000172   000214 702000 2                  TSX2    RUN_AWAY

      212    11713    2           END /* WHENRETURN */ ;

  11713  2 000173   000214 710000 2                  TRA     RUN_AWAY

      213    11714    1      WHENALTRETURN
      214    11715    2           DO ;

      215    11716    2              TOLTS_GETCMD.ERR_CODE.CODE# = %E$BADSCREECH ;

  11716  2 000174   000010 236000 xsym               LDQ     TOLTS_GETCMD+8
         2 000175   000001 376000 3                  ANQ     1
         2 000176   004370 276007                    ORQ     2296,DL
         2 000177   000010 756000 xsym               STQ     TOLTS_GETCMD+8

      216    11717    2              CALL XUG$ERRMSG (TOLTS_GETCMD) ALTRET (RUN_AWAY);

  11717  2 000200   000000 630400 3                  EPPR0   0
         2 000201   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000202   000000 701000 xent               TSX1    XUG$ERRMSG
         2 000203   000214 702000 2                  TSX2    RUN_AWAY
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:31   

      217    11718    2              TOLTS_GETCMD.ERR_CODE = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR;

  11718  2 000204   000000 470400 xsym               LDP0    B$TCB$
         2 000205   000000 471500                    LDP1    0,,PR0
         2 000206   100102 236100                    LDQ     66,,PR1
         2 000207   000010 756000 xsym               STQ     TOLTS_GETCMD+8

      218    11719    2              CALL XUG$ERRMSG (TOLTS_GETCMD) ALTRET (RUN_AWAY);

  11719  2 000210   000000 630400 3                  EPPR0   0
         2 000211   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000212   000000 701000 xent               TSX1    XUG$ERRMSG
         2 000213   000214 702000 2                  TSX2    RUN_AWAY

      219    11720    2           END /* WHENALTRETURN */ ;

      220    11721    1   RUN_AWAY:
      221    11722    1      CALL M$ERR ;

  11722  2 000214   000002 713400       RUN_AWAY     CLIMB   err
         2 000215   000000 401760                    pmme    nvectors=0

      222    11723
      223    11724        /* END TOX$ERROR */
      224    11725        %EJECT ;
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:32   
      225    11726        /*S* SCREECH_CODE: TOC-S$TOLTSABORT
      226    11727             TYPE:    SNAP
      227    11728             MESSAGE: TOLTS test control does not agree with the COLTS subexecutive
      228    11729                      that it is interfacing with.
      229    11730             REMARKS: The problem can occur either from an internal error
      230    11731                      on the part of TOLTS or from an executive / subexec
      231    11732                      interface error.
      232    11733        */
      233    11734        /*S* SCREECH_CODE: TOD-S$TOLTSABORT
      234    11735             TYPE:    SNAP
      235    11736             MESSAGE: An error related to the TOLTS Dispatcher has been
      236    11737                      encountered.
      237    11738             REMARKS: The problem occurs from an internal error on the part
      238    11739                      of TOLTS.
      239    11740        */
      240    11741        /*S* SCREECH_CODE: TOE-S$TOLTSABORT
      241    11742             TYPE:    SNAP
      242    11743             MESSAGE: An error related to the TOLTS Event Handler has been
      243    11744                      encountered.
      244    11745             REMARKS: The problem occurs from an internal error on the part
      245    11746                      of TOLTS.
      246    11747        */
      247    11748        /*S* SCREECH_CODE: TOF-S$TOLTSABORT
      248    11749             TYPE:    SNAP
      249    11750             MESSAGE: An irrecoverable and unexpected fault has occurred
      250    11751                      during TOLTS processing.
      251    11752             REMARKS: The problem can occur either from an internal error
      252    11753                      on the part of TOLTS, an executive / subexec interface
      253    11754                      error, or an executive / CP-6 operating system interface
      254    11755                      error.
      255    11756        */
      256    11757        %EJECT ;
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:33   
      257    11758        /*S* SCREECH_CODE: TOG-S$TOLTSABORT
      258    11759             TYPE:    SNAP
      259    11760             MESSAGE: An error or inconsistency has been encountered by TOLTS
      260    11761                      during the processing of a GCOS Master Mode Entry.
      261    11762             REMARKS: The problem can occur either from an internal error
      262    11763                      on the part of TOLTS or from an executive / subexec
      263    11764                      interface error.
      264    11765        */
      265    11766        /*S* SCREECH_CODE: TOL-S$TOLTSABORT
      266    11767             TYPE:    SNAP
      267    11768             MESSAGE: An inconsistency or error has been encountered by the
      268    11769                      TOLTS Loader program.
      269    11770             REMARKS: The problem can occur either from an internal error
      270    11771                      on the part of TOLTS or from an executive / CP-6
      271    11772                      operating system interface error.
      272    11773        */
      273    11774        /*S* SCREECH_CODE: TOM-S$TOLTSABORT
      274    11775             TYPE:    SNAP
      275    11776             MESSAGE: TOLTS test control does not agree with the MOLTS subexecutive
      276    11777                      that it is interfacing with.
      277    11778             REMARKS: The problem can occur either from an internal error
      278    11779                      on the part of TOLTS or from an executive / subexec
      279    11780                      interface error.
      280    11781        */
      281    11782        /*S* SCREECH_CODE: TOO-S$TOLTSABORT
      282    11783             TYPE:    SNAP
      283    11784             MESSAGE: An error or inconsistency has been encountered by TOLTS
      284    11785                      during the processing of a TOLTS Master Mode Entry.
      285    11786             REMARKS: The problem can occur either from an internal error
      286    11787                      on the part of TOLTS or from an executive / subexec
      287    11788                      interface error.
      288    11789        */
      289    11790        %EJECT ;
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:34   
      290    11791        /*S* SCREECH_CODE: TOP-S$TOLTSABORT
      291    11792             TYPE:    SNAP
      292    11793             MESSAGE: TOLTS test control does not agree with the POLTS subexecutive
      293    11794                      that it is interfacing with.
      294    11795             REMARKS: The problem can occur either from an internal error
      295    11796                      on the part of TOLTS or from an executive / subexec
      296    11797                      interface error.
      297    11798        */
      298    11799        /*S* SCREECH_CODE: TOT-S$TOLTSABORT
      299    11800             TYPE:    SNAP
      300    11801             MESSAGE: An unexpected TOLTS processing error has been encountered.
      301    11802             REMARKS: The problem occurs from an internal accounting error on
      302    11803                      the part of TOLTS or an interface error between TOLTS
      303    11804                      and the CP-6 operating system.
      304    11805        */
      305    11806
      306    11807    1   END TOX$ERROR ;

  11807  2 000216   000000 702200 xent               TSX2  ! X66_ARET

TOLTS_SNAP
 Sect OctLoc
   1     000   000001 777640   000016 006000   000000 177640   000000 006014    ................
   1     004   000007 777640   000006 006000                                    ........

DUMP_NAME
 Sect OctLoc
   1     006   037040 040040   040040 040040   040040 040040   040040 040040    .
   1     012   040040 040040   040040 040040   040040 040040   040040 040040

SC_TOLTS
 Sect OctLoc
   1     016   241724 405065   000000 103600                                    ...5..C.

(unnamed)
 Sect OctLoc
   3     000   000000 006000   777777 400007   000007 777640   000006 006000    ................
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:35   

PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:36   
--  Include file information  --

   XU_MACRO_C.:E05TOU  is referenced.
   XUG_ENTRY.:E05TOU  cannot be made into a system file and is referenced.
   TO_SCODE_C.:E05TOU  is referenced.
   TO_PERR_C.:E05TOU  is referenced.
   TOT_TOLTS_M.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure TOX$ERROR.
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:37   

 **** Procedure blocks ****

LB#    Line#s    #stmts #vars Sect# OctLoc  P A C   NP Lvl/name
  0    30- 11807     55    35     2      0  y   y    1   1 TOX$ERROR
                                  2     73      y    1     TOX$WARN
                                  2    107      y    1     TOX$ABORT
                                  2    125      y    1     TOX$SCREECH
  1 11644- 11650      5     0     2     53  y   y    0     2 SET_SPA_WD11
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:38   

    **** Executable statements  ****

  Exec cost Stmt Sec OctLoc Type   LB Label              Exec cost Stmt Sec OctLoc Type   LB Label

              30   2      0 Proc    0                             11611   2      2 If      0
           11612   2      4 Call    0                             11613   2     11 Do      0
           11614   2     11 Assign  0                             11615   2     13 Assign  0
           11616   2     16 Assign  0                             11617   2     20 Call    0
        $$ 11618   2     24 If      0                             11619   2     32 Call    0
           11620   2     36 Do      0                             11621   2     36 If      0
           11623   2     40 Call    0                      $$$$$$ 11624   2     42 MonCal  0
           11625   2     44 Assign  0                             11626   2     46 Call    0
           11627   2     52 EndDo   0                             11628   2     52 EndDo   0
           11644   2     53 Proc    1                           $ 11646   2     54 If      1
        $$ 11647   2     60 Assign  1                          $$ 11648   2     65 Assign  1
           11650   2     71 EndPrc  1                             11661   2     73 Entry   0
           11663   2     75 Assign  0                             11664   2    100 Assign  0
           11665   2    102 Call    0                             11666   2    106 Return  0
           11678   2    107 Entry   0                             11680   2    111 Assign  0
           11681   2    114 Assign  0                             11682   2    116 Call    0
    $$$$$$ 11683   2    122 MonCal  0                             11697   2    125 Entry   0
           11699   2    127 Assign  0                             11700   2    132 Assign  0
           11701   2    134 Call    0                             11703   2    140 Assign  0 TRY_SCREECH
         $ 11704   2    143 If      0                             11705   2    150 Assign  0
           11707   2    152 Assign  0                  $$$$$$$$$$ 11708   2    154 MonCal  0
           11709   2    160 Do      0                             11710   2    160 Assign  0
           11711   2    164 Assign  0                             11712   2    167 Call    0
           11713   2    173 EndDo   0                             11715   2    174 Do      0
           11716   2    174 Assign  0                             11717   2    200 Call    0
        $$ 11718   2    204 Assign  0                             11719   2    210 Call    0
           11720   2    214 EndDo   0                      $$$$$$ 11722   2    214 MonCal  0 RUN_AWAY
           11807   2    216 EndPrc  0

  **** Statement type totals  ****

    19 Assign    11 Call       4 MonCal     5 If         1 Return     4 Do
     4 EndDo      2 Proc       2 EndPrc     3 Entry      2 Labels
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:39   

 # major stmts=   40 Code/major= 3.57 # stmts=   55 Code/stmt= 2.60  Point total= 93.4
 Cost/major stmt=  4.8 Cost/stmt=  3.4 Total cost=    192.4

   0-4  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
   4-6  $$$$
   6-8  $$$$$$$$
  8-10
 10-12
 12-14
 14-16  $$$$$$
 16-18
 18-20
 20-22
 22-??  $$
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:40   

 **** Variables and constants ****

  ****  Section 001  Data  TOX$ERROR

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     6-0-0/c STRC(288)   r     1 DUMP_NAME

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

    16-0-0/d STRC(72)    r     1 SC_TOLTS
    16-0-0/b BIT (12)    r         2 FCG#
    16-1-3/b BIT (6)     r         2 MID#

     0-0-0/d STRC(216)   r     1 TOLTS_SNAP
     2-0-0/b BIT (72)    r         2 JERR_


  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @ERROR_CODE                4-0-0/w PTR         r     1 WRAPUP$
     4-0-0/w EPTR        r     1 WRAPUP_RETURN$

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

    *0-0-0/w STRC        r     1 ERROR_CODE
     0-0-0/b BIT (12)    r         2 FUNCTIONAL_CODE_GROUP
     0-1-3/b BIT (6)     r         2 MODULE_IDENTIFIER


  ****  SYMREF variables  ****
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:41   

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/w PTR         r     1 TOD$SPA$

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(1512)  r     1 TOLTS_GETCMD
     6-1-0/c UBIN(9)     r         2 FLGLEV#
    10-0-0/w STRC        r         2 ERR_CODE
    10-2-1/b UBIN(14)    r          3 CODE#
    17-0-0/w VECT        r         2 F1_

     0-0-0/w STRC(495)   r     1 TOT$ECP
     7-0-0/w STRC(216)   r         2 SUBEXEC
     7-0-0/w UBIN        r          3 CURRENT
    10-0-0/w UBIN        r          3 ADDRESS
    12-0-0/c BIT         r          3 WRAPUP_TRIED
    13-0-0/w PTR         r          3 WRAPUP$


  ****  BASED and DCB variables  ****

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT
   102-0-0/b STRC        r         2 ERR

     0-0-0/w STRC(2448)  r     1 B$EXCFR
     4-0-0/b UBIN(18)    r         2 IC

     0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/w PTR         r         2 ALT$
     1-0-0/w PTR         r         2 STK$
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:42   

     0-0-0/w STRC(2592)  r     1 TOD$SPA
    13-0-0/w STRC        r         2 WD11
    13-0-0/b UBIN(18)    r          3 IC



   Procedure TOX$ERROR requires 143 words for executable code.
   Procedure TOX$ERROR requires 8 words of local(AUTO) storage.

    No errors detected in file TOX$ERR.:E05TSI    .
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:43   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:44   
          MINI XREF LISTING

B$ALT.CODE
     11007**DCL     11007--REDEF   11008--REDEF   11008--REDEF
B$ALT.ERR
     11008**DCL     11718>>ASSIGN
B$ALT.ERR.ERR#
     11009**DCL     11009--REDEF
B$ALT.EVID
     11008**DCL     11008--REDEF   11008--REDEF
B$EXCFR.ASL
     10985**DCL     10985--REDEF
B$EXCFR.ERR.ERR#
     10999**DCL     10999--REDEF
B$EXCFR.EVID
     10998**DCL     10998--REDEF   10999--REDEF
B$EXCFR.IC
     10986**DCL     11618>>IF      11647>>ASSIGN  11648>>ASSIGN
B$EXCFR.IR
     10986**DCL     10986--REDEF
B$EXCFR.PREVSZ
     10985**DCL     10985--REDEF
B$EXCFR.SUBC
     10997**DCL     10997--REDEF   10998--REDEF   10998--REDEF
B$TCB.ALT$
     11003**DCL     11646>>IF      11647>>ASSIGN  11718>>ASSIGN
B$TCB.STK$
     11003**DCL     11618>>IF      11648>>ASSIGN
B$TCB$
     11147**DCL     11618>>IF      11646>>IF      11647>>ASSIGN  11648>>ASSIGN  11718>>ASSIGN
DUMP_NAME
     11072**DCL     11044--DCLINIT 11711--ASSIGN
ERROR_CODE
     11016**DCL        30--PROC    11612<>CALL    11615>>ASSIGN  11661--ENTRY   11663>>ASSIGN  11678--ENTRY
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:45   
     11680>>ASSIGN  11697--ENTRY   11699>>ASSIGN  11703--ASSIGN
ERROR_CODE.FUNCTIONAL_CODE_GROUP
     11017**DCL     11704>>IF
ERROR_CODE.MODULE_IDENTIFIER
     11018**DCL     11705>>ASSIGN
M$CLRSTK
      5579**DCL-ENT 11624--CALL
M$ERR
      5533**DCL-ENT 11683--CALL    11722--CALL
M$SCREECH
      5535**DCL-ENT 11708--CALL
RUN_AWAY
     11722**LABEL   11712--CALLALT 11717--CALLALT 11719--CALLALT
SC_TOLTS
     11098**DCL     11043--DCLINIT
SC_TOLTS.FCG#
     11111**DCL     11704>>IF
SC_TOLTS.MID#
     11124**DCL     11705<<ASSIGN
SET_SPA_WD11
     11644**PROC    11623--CALL
TOD$SPA.WD11
     11209**DCL     11212--REDEF
TOD$SPA.WD11.IC
     11210**DCL     11647<<ASSIGN  11648<<ASSIGN
TOD$SPA.WD18
     11219**DCL     11222--REDEF
TOD$SPA.WD22.HREG_BUF_
     11227**DCL     11228--REDEF
TOD$SPA$
     11197**DCL     11207--IMP-PTR 11647>>ASSIGN  11648>>ASSIGN
TOLTS_GETCMD
     11265**DCL     11617<>CALL    11665<>CALL    11682<>CALL    11701<>CALL    11712<>CALL    11717<>CALL
     11719<>CALL
TOLTS_GETCMD.ERR_CODE
     11413**DCL     11615<<ASSIGN  11663<<ASSIGN  11680<<ASSIGN  11699<<ASSIGN  11718<<ASSIGN
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:46   
TOLTS_GETCMD.ERR_CODE.CODE#
     11416**DCL     11710<<ASSIGN  11716<<ASSIGN
TOLTS_GETCMD.F1_
     11462**DCL     11711<<ASSIGN
TOLTS_GETCMD.FLGLEV#
     11370**DCL     11616<<ASSIGN  11664<<ASSIGN  11681<<ASSIGN  11700<<ASSIGN  11707<<ASSIGN
TOLTS_GETCMD.OUT$
     11270**DCL     11276--REDEF
TOLTS_SNAP
     11043**DCL     11708<>CALL
TOLTS_SNAP.JERR_
     11043**DCL     11703<<ASSIGN
TOT$ECP.SUBEXEC.ADDRESS
     11180**DCL     11618>>IF
TOT$ECP.SUBEXEC.CURRENT
     11178**DCL     11621>>IF
TOT$ECP.SUBEXEC.WRAPUP$
     11186**DCL     11625>>ASSIGN
TOT$ECP.SUBEXEC.WRAPUP_TRIED
     11184**DCL     11611>>IF      11614<<ASSIGN
TOT$ECP.TEST_REQ
     11158**DCL     11160--REDEF
TOT$RESTART
     11593**DCL-ENT 11619--CALL
TOX$SCREECH
     11697**ENTRY   11612--CALL
TRY_SCREECH
     11703**LABEL   11701--CALLALT
WRAPUP$
     11025**DCL     11026--REDEF   11625<<ASSIGN
WRAPUP_RETURN$
     11026**DCL     11626>>CALL
XUG$ERRMSG
      7858**DCL-ENT 11617--CALL    11665--CALL    11682--CALL    11701--CALL    11712--CALL    11717--CALL
     11719--CALL
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:47   
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:48   
              FULL UREF LISTING

B$ALT
     11007**DCL
B$ALT.BRKCNT
     11008**DCL
B$ALT.DCB#
     11008**DCL
B$ALT.ERR.CODE
     11009**DCL
B$ALT.ERR.FCG
     11009**DCL
B$ALT.ERR.MID
     11009**DCL
B$ALT.ERR.MON
     11009**DCL
B$ALT.ERR.SEV
     11009**DCL
B$ALT.EVSC
     11008**DCL
B$ALT.FPT
     11007**DCL
B$ALT.FPT.FCG
     11007**DCL
B$ALT.FPT.PMME
     11007**DCL
B$ALT.P#
     11011**DCL
B$ALT.SSFRAME
     11007**DCL
B$ALT.SUBC
     11008**DCL
B$EXCFR
     10985**DCL
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:49   
B$EXCFR.ALTEMPTY
     10985**DCL
B$EXCFR.ASLIC
     10985**DCL
B$EXCFR.ASR
     10991**DCL
B$EXCFR.ASR.BASE
     10992**DCL
B$EXCFR.ASR.BOUND
     10991**DCL
B$EXCFR.ASR.FLAGS
     10991**DCL
B$EXCFR.ASR.FLAGS.BOUND
     10992**DCL
B$EXCFR.ASR.FLAGS.CACHE
     10992**DCL
B$EXCFR.ASR.FLAGS.EXU
     10992**DCL
B$EXCFR.ASR.FLAGS.MON
     10992**DCL
B$EXCFR.ASR.FLAGS.PRIV
     10992**DCL
B$EXCFR.ASR.FLAGS.READ
     10991**DCL
B$EXCFR.ASR.FLAGS.SAVE
     10991**DCL
B$EXCFR.ASR.FLAGS.SEGMENT
     10992**DCL
B$EXCFR.ASR.FLAGS.WRITE
     10991**DCL
B$EXCFR.ASR.TYPE
     10992**DCL
B$EXCFR.ASR.WSR
     10992**DCL
B$EXCFR.BRKCNT
     10999**DCL
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:50   
B$EXCFR.CODE
     10998**DCL
B$EXCFR.CP#
     10988**DCL
B$EXCFR.DCB#
     10998**DCL
B$EXCFR.DRS
     10996**DCL
B$EXCFR.DSAR
     10989**DCL
B$EXCFR.ECC
     10985**DCL
B$EXCFR.EIS
     10997**DCL
B$EXCFR.ERR
     10999**DCL
B$EXCFR.ERR.CODE
     10999**DCL
B$EXCFR.ERR.FCG
     10999**DCL
B$EXCFR.ERR.MID
     10999**DCL
B$EXCFR.ERR.MON
     10999**DCL
B$EXCFR.ERR.SEV
     11000**DCL
B$EXCFR.EVSC
     10997**DCL
B$EXCFR.EWSQ#
     10989**DCL
B$EXCFR.FCODE
     10988**DCL
B$EXCFR.FI
     10988**DCL
B$EXCFR.FPT
     10998**DCL
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:51   
B$EXCFR.FPT.FCG
     10998**DCL
B$EXCFR.FPT.PMME
     10998**DCL
B$EXCFR.INST
     10986**DCL
B$EXCFR.INST.EVEN
     10986**DCL
B$EXCFR.INST.ODD
     10986**DCL
B$EXCFR.IRBIT
     10986**DCL
B$EXCFR.IRBIT.CARRY
     10987**DCL
B$EXCFR.IRBIT.EXOF
     10987**DCL
B$EXCFR.IRBIT.EXUF
     10987**DCL
B$EXCFR.IRBIT.EXUFM
     10988**DCL
B$EXCFR.IRBIT.HEX
     10988**DCL
B$EXCFR.IRBIT.MIR
     10987**DCL
B$EXCFR.IRBIT.MM
     10987**DCL
B$EXCFR.IRBIT.NEG
     10986**DCL
B$EXCFR.IRBIT.OF
     10987**DCL
B$EXCFR.IRBIT.OFM
     10987**DCL
B$EXCFR.IRBIT.PE
     10987**DCL
B$EXCFR.IRBIT.PM
     10987**DCL
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:52   
B$EXCFR.IRBIT.TR
     10987**DCL
B$EXCFR.IRBIT.TRC
     10987**DCL
B$EXCFR.IRBIT.ZERO
     10986**DCL
B$EXCFR.ISR
     10989**DCL
B$EXCFR.ISR.BASE
     10991**DCL
B$EXCFR.ISR.BOUND
     10989**DCL
B$EXCFR.ISR.FLAGS
     10989**DCL
B$EXCFR.ISR.FLAGS.BOUND
     10990**DCL
B$EXCFR.ISR.FLAGS.CACHE
     10990**DCL
B$EXCFR.ISR.FLAGS.EXU
     10990**DCL
B$EXCFR.ISR.FLAGS.MON
     10990**DCL
B$EXCFR.ISR.FLAGS.PRIV
     10990**DCL
B$EXCFR.ISR.FLAGS.READ
     10990**DCL
B$EXCFR.ISR.FLAGS.SAVE
     10990**DCL
B$EXCFR.ISR.FLAGS.SEGMENT
     10990**DCL
B$EXCFR.ISR.FLAGS.WRITE
     10990**DCL
B$EXCFR.ISR.TYPE
     10991**DCL
B$EXCFR.ISR.WSR
     10991**DCL
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:53   
B$EXCFR.IS_SEGID
     10989**DCL
B$EXCFR.LSR
     10993**DCL
B$EXCFR.LSR.BASE
     10994**DCL
B$EXCFR.LSR.BOUND
     10993**DCL
B$EXCFR.LSR.FLAGS
     10993**DCL
B$EXCFR.LSR.FLAGS.BOUND
     10994**DCL
B$EXCFR.LSR.FLAGS.CACHE
     10993**DCL
B$EXCFR.LSR.FLAGS.EXU
     10993**DCL
B$EXCFR.LSR.FLAGS.MON
     10993**DCL
B$EXCFR.LSR.FLAGS.PRIV
     10993**DCL
B$EXCFR.LSR.FLAGS.READ
     10993**DCL
B$EXCFR.LSR.FLAGS.SAVE
     10993**DCL
B$EXCFR.LSR.FLAGS.SEGMENT
     10994**DCL
B$EXCFR.LSR.FLAGS.WRITE
     10993**DCL
B$EXCFR.LSR.TYPE
     10994**DCL
B$EXCFR.LSR.WSR
     10994**DCL
B$EXCFR.P#
     11000**DCL
B$EXCFR.PRS
     10996**DCL
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:54   
B$EXCFR.PSR
     10994**DCL
B$EXCFR.PSR.BASE
     10996**DCL
B$EXCFR.PSR.BOUND
     10994**DCL
B$EXCFR.PSR.FLAGS
     10994**DCL
B$EXCFR.PSR.FLAGS.BOUND
     10995**DCL
B$EXCFR.PSR.FLAGS.CACHE
     10995**DCL
B$EXCFR.PSR.FLAGS.EXU
     10995**DCL
B$EXCFR.PSR.FLAGS.MON
     10995**DCL
B$EXCFR.PSR.FLAGS.PRIV
     10995**DCL
B$EXCFR.PSR.FLAGS.READ
     10994**DCL
B$EXCFR.PSR.FLAGS.SAVE
     10995**DCL
B$EXCFR.PSR.FLAGS.SEGMENT
     10995**DCL
B$EXCFR.PSR.FLAGS.WRITE
     10995**DCL
B$EXCFR.PSR.TYPE
     10996**DCL
B$EXCFR.PSR.WSR
     10995**DCL
B$EXCFR.REGS
     10996**DCL
B$EXCFR.REGS.A
     10996**DCL
B$EXCFR.REGS.E
     10997**DCL
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:55   
B$EXCFR.REGS.Q
     10996**DCL
B$EXCFR.REGS.XREG
     10996**DCL
B$EXCFR.RVA
     10989**DCL
B$EXCFR.SCR
     10989**DCL
B$EXCFR.SSF
     10988**DCL
B$EXCFR.U1
     10997**DCL
B$TCB
     11003**DCL
B$TCB.CURRSZ
     11003**DCL
B$TCB.TCBAVSZ
     11003**DCL
DUMP_NAME.L#
     11072**DCL
DUMP_NAME.NAME#
     11072**DCL
ERROR_CODE.ERROR_NUMBER
     11020**DCL
ERROR_CODE.ERROR_SEVERITY
     11021**DCL
ERROR_CODE.MONITOR_FAULT
     11019**DCL
M$ACCT
      5538**DCL-ENT
M$ACTIVATE
      5541**DCL-ENT
M$ALIB
      5534**DCL-ENT
M$ASUSER
      5536**DCL-ENT
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:56   
M$ATTACH
      5543**DCL-ENT
M$BADPP
      5561**DCL-ENT
M$CGCTL
      5542**DCL-ENT
M$CGINFO
      5542**DCL-ENT
M$CHECK
      5523**DCL-ENT
M$CHGUNIT
      5581**DCL-ENT
M$CLOSE
      5521**DCL-ENT
M$CMDVAR
      5590**DCL-ENT
M$CONFIG
      5551**DCL-ENT
M$CORRES
      5526**DCL-ENT
M$CPEXIT
      5535**DCL-ENT
M$CVM
      5559**DCL-ENT
M$CVOL
      5524**DCL-ENT
M$DCLFLD
      5551**DCL-ENT
M$DEACTIVATE
      5541**DCL-ENT
M$DELREC
      5523**DCL-ENT
M$DEQ
      5588**DCL-ENT
M$DETACH
      5543**DCL-ENT
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:57   
M$DEVICE
      5525**DCL-ENT
M$DISPLAY
      5588**DCL-ENT
M$DISPRES
      5528**DCL-ENT
M$DLIB
      5534**DCL-ENT
M$DRIBBLE
      5551**DCL-ENT
M$DRTN
      5579**DCL-ENT
M$DSUSER
      5536**DCL-ENT
M$ENQ
      5587**DCL-ENT
M$EOM
      5546**DCL-ENT
M$ERASE
      5552**DCL-ENT
M$ERRMSG
      5584**DCL-ENT
M$EVENT
      5576**DCL-ENT
M$EXHUME
      5585**DCL-ENT
M$EXIT
      5533**DCL-ENT
M$EXTEND
      5525**DCL-ENT
M$FDP
      5557**DCL-ENT
M$FDS
      5556**DCL-ENT
M$FEBOOT
      5549**DCL-ENT
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:58   
M$FECTL
      5550**DCL-ENT
M$FEDUMP
      5549**DCL-ENT
M$FID
      5584**DCL-ENT
M$FINDPROC
      5538**DCL-ENT
M$FSUSER
      5536**DCL-ENT
M$FVP
      5558**DCL-ENT
M$FWCG
      5542**DCL-ENT
M$GBPL
      5562**DCL-ENT
M$GDDL
      5558**DCL-ENT
M$GDP
      5557**DCL-ENT
M$GDS
      5556**DCL-ENT
M$GETDCB
      5527**DCL-ENT
M$GETMOUSE
      5567**DCL-ENT
M$GETPM
      5568**DCL-ENT
M$GJOB
      5586**DCL-ENT
M$GLINEATTR
      5546**DCL-ENT
M$GOODPP
      5561**DCL-ENT
M$GPLATEN
      5554**DCL-ENT
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:59   
M$GPROMPT
      5553**DCL-ENT
M$GTRMATTR
      5547**DCL-ENT
M$GTRMCTL
      5545**DCL-ENT
M$GTRMTAB
      5548**DCL-ENT
M$GVP
      5557**DCL-ENT
M$HELP
      5584**DCL-ENT
M$INT
      5576**DCL-ENT
M$INTRTN
      5537**DCL-ENT
M$IOQ
      5572**DCL-ENT
M$JOBSTATS
      5586**DCL-ENT
M$KEYIN
      5526**DCL-ENT
M$LDEV
      5521**DCL-ENT
M$LDTRC
      5534**DCL-ENT
M$LIMIT
      5527**DCL-ENT
M$LINES
      5526**DCL-ENT
M$LINK
      5533**DCL-ENT
M$MADMUCK
      5529**DCL-ENT
M$MAKUSER
      5560**DCL-ENT
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:60   
M$MBS
      5528**DCL-ENT
M$MDFFLD
      5552**DCL-ENT
M$MERC
      5577**DCL-ENT
M$MERCS
      5578**DCL-ENT
M$MIRROR
      5572**DCL-ENT
M$MONINFO
      5589**DCL-ENT
M$MPL
      5562**DCL-ENT
M$NODEINFO
      5553**DCL-ENT
M$NXTUSR
      5587**DCL-ENT
M$OCMSG
      5585**DCL-ENT
M$OLAY
      5533**DCL-ENT
M$OPEN
      5521**DCL-ENT
M$PAS
      5562**DCL-ENT
M$PATHCON
      5585**DCL-ENT
M$PDS
      5556**DCL-ENT
M$PFIL
      5523**DCL-ENT
M$PLATEN
      5547**DCL-ENT
M$PRECORD
      5525**DCL-ENT
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:61   
M$PROCNAME
      5538**DCL-ENT
M$PROFILE
      5549**DCL-ENT
M$PROMPT
      5545**DCL-ENT
M$RACST
      5529**DCL-ENT
M$RDSYSLOG
      5570**DCL-ENT
M$READ
      5522**DCL-ENT
M$RELDCB
      5527**DCL-ENT
M$RELRES
      5528**DCL-ENT
M$RELSTARF
      5530**DCL-ENT
M$REM
      5530**DCL-ENT
M$RENV
      5577**DCL-ENT
M$REQUIRE
      5529**DCL-ENT
M$RETRY
      5578**DCL-ENT
M$RETRYS
      5578**DCL-ENT
M$REW
      5524**DCL-ENT
M$RLSFLD
      5552**DCL-ENT
M$RPRIV
      5580**DCL-ENT
M$RSPP
      5559**DCL-ENT
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:62   
M$RSWITCH
      5581**DCL-ENT
M$RUE
      5587**DCL-ENT
M$SAD
      5560**DCL-ENT
M$SAVE
      5536**DCL-ENT
M$SCON
      5537**DCL-ENT
M$SENV
      5577**DCL-ENT
M$SETFMA
      5521**DCL-ENT
M$SETFP
      5550**DCL-ENT
M$SINPUT
      5548**DCL-ENT
M$SLCFLD
      5553**DCL-ENT
M$SMOUSE
      5567**DCL-ENT
M$SMPRT
      5559**DCL-ENT
M$SPRIV
      5580**DCL-ENT
M$SSC
      5560**DCL-ENT
M$SSWITCH
      5580**DCL-ENT
M$STATE
      5589**DCL-ENT
M$STD
      5561**DCL-ENT
M$STIMER
      5575**DCL-ENT
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:63   
M$STLPP
      5558**DCL-ENT
M$STRAP
      5575**DCL-ENT
M$STRMATTR
      5547**DCL-ENT
M$STRMCTL
      5545**DCL-ENT
M$STRMTAB
      5548**DCL-ENT
M$SYMBIO
      5586**DCL-ENT
M$SYSCON
      5572**DCL-ENT
M$SYSID
      5590**DCL-ENT
M$TDCLOSE
      5571**DCL-ENT
M$TDIO
      5571**DCL-ENT
M$TDOPEN
      5570**DCL-ENT
M$TDREQCPU
      5571**DCL-ENT
M$TEMPWROC
      5565**DCL-ENT
M$TIME
      5588**DCL-ENT
M$TRAP
      5575**DCL-ENT
M$TRMISC
      5550**DCL-ENT
M$TRMPRG
      5546**DCL-ENT
M$TRTN
      5579**DCL-ENT
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:64   
M$TRUNC
      5522**DCL-ENT
M$TTIMER
      5575**DCL-ENT
M$UC
      5545**DCL
M$UMPL
      5562**DCL-ENT
M$UNFID
      5584**DCL-ENT
M$UNLATCH
      5541**DCL-ENT
M$UNSHARE
      5538**DCL-ENT
M$USRFIELD
      5581**DCL-ENT
M$VIRTUAL
      5556**DCL-ENT
M$WAIT
      5579**DCL-ENT
M$WEOF
      5524**DCL-ENT
M$WRITE
      5522**DCL-ENT
M$WRSYSLOG
      5570**DCL-ENT
M$XCON
      5576**DCL-ENT
M$XCONRTN
      5537**DCL-ENT
M$XEQTIME
      5589**DCL-ENT
M$XFLUSH
      5530**DCL-ENT
M$XMOUSE
      5567**DCL-ENT
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:65   
M$XXX
      5533**DCL-ENT
M$YC
      5535**DCL-ENT
SC_TOLTS.ALLUSR#
     11132**DCL
SC_TOLTS.ASAVE#
     11126**DCL
SC_TOLTS.ASLSEG#
     11135**DCL
SC_TOLTS.AUSER#
     11138**DCL
SC_TOLTS.CFUS#
     11126**DCL
SC_TOLTS.CGDATA#
     11129**DCL
SC_TOLTS.CODE#
     11124**DCL
SC_TOLTS.CPSEG#
     11135**DCL
SC_TOLTS.CURCG#
     11130**DCL
SC_TOLTS.CUSR#
     11131**DCL
SC_TOLTS.CUSRS#
     11132**DCL
SC_TOLTS.CWSPT#
     11129**DCL
SC_TOLTS.DBSEG#
     11134**DCL
SC_TOLTS.DDSEG#
     11134**DCL
SC_TOLTS.DS4#
     11127**DCL
SC_TOLTS.DS5#
     11127**DCL
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:66   
SC_TOLTS.DS6#
     11127**DCL
SC_TOLTS.DS7#
     11128**DCL
SC_TOLTS.ENQ#
     11126**DCL
SC_TOLTS.FMBUF#
     11133**DCL
SC_TOLTS.IOUSRS#
     11132**DCL
SC_TOLTS.ISEG#
     11134**DCL
SC_TOLTS.LDCTS#
     11128**DCL
SC_TOLTS.LRM#
     11125**DCL
SC_TOLTS.MON#
     11124**DCL
SC_TOLTS.MPROC#
     11131**DCL
SC_TOLTS.PMDATA#
     11130**DCL
SC_TOLTS.PMST#
     11130**DCL
SC_TOLTS.PPUT#
     11128**DCL
SC_TOLTS.ROSEG#
     11133**DCL
SC_TOLTS.SEV#
     11125**DCL
SC_TOLTS.SHJIT#
     11129**DCL
SC_TOLTS.SPBUF#
     11133**DCL
TOD$SPA
     11207**DCL
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:67   
TOD$SPA.WD0_10
     11208**DCL
TOD$SPA.WD11.RC
     11211**DCL
TOD$SPA.WD11_
     11212**DCL
TOD$SPA.WD12
     11213**DCL
TOD$SPA.WD13
     11214**DCL
TOD$SPA.WD14
     11215**DCL
TOD$SPA.WD15
     11216**DCL
TOD$SPA.WD16
     11217**DCL
TOD$SPA.WD17
     11218**DCL
TOD$SPA.WD18.IC
     11220**DCL
TOD$SPA.WD18.IR
     11221**DCL
TOD$SPA.WD18_
     11222**DCL
TOD$SPA.WD19
     11223**DCL
TOD$SPA.WD20
     11224**DCL
TOD$SPA.WD21
     11225**DCL
TOD$SPA.WD22
     11226**DCL
TOD$SPA.WD22.HREG_BUF
     11228**DCL
TOD$SPA.WD22.HREG_BUF.ADDR#
     11229**DCL
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:68   
TOD$SPA.WD22.HREG_BUF.RETRY_FLAG
     11230**DCL
TOD$SPA.WD22.HREG_BUF_SIZE
     11231**DCL
TOD$SPA.WD23
     11232**DCL
TOD$SPA.WD24
     11233**DCL
TOD$SPA.WD25
     11234**DCL
TOD$SPA.WD25.BAR
     11235**DCL
TOD$SPA.WD25.BAR.BASE
     11236**DCL
TOD$SPA.WD25.BAR.BOUNDS
     11237**DCL
TOD$SPA.WD25.DIVIDE
     11246**DCL
TOD$SPA.WD25.EXP_OVERFLOW
     11242**DCL
TOD$SPA.WD25.EXP_UNDERFLOW
     11243**DCL
TOD$SPA.WD25.FAULT
     11239**DCL
TOD$SPA.WD25.FAULT_TYPE
     11247**DCL
TOD$SPA.WD25.IPR
     11244**DCL
TOD$SPA.WD25.OVERFLOW
     11241**DCL
TOD$SPA.WD26_71
     11248**DCL
TOLTS_GETCMD.ALWAYS_SET_PROMPT#
     11353**DCL
TOLTS_GETCMD.BUF$
     11542**DCL
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:69   
TOLTS_GETCMD.CONTINUED#
     11325**DCL
TOLTS_GETCMD.CONTINUE_OK#
     11329**DCL
TOLTS_GETCMD.DCB2_PARAM#
     11450**DCL
TOLTS_GETCMD.DCB_PARAM#
     11445**DCL
TOLTS_GETCMD.DISP#
     11456**DCL
TOLTS_GETCMD.ECHO
     11385**DCL
TOLTS_GETCMD.EOMCHAR#
     11405**DCL
TOLTS_GETCMD.EPOS#
     11375**DCL
TOLTS_GETCMD.ERR#
     11276**DCL
TOLTS_GETCMD.ERR#.CODE#
     11279**DCL
TOLTS_GETCMD.ERR#.FCG#
     11277**DCL
TOLTS_GETCMD.ERR#.MON#
     11278**DCL
TOLTS_GETCMD.ERR#.SEV#
     11280**DCL
TOLTS_GETCMD.ERRDCB#
     11424**DCL
TOLTS_GETCMD.ERRMFID$
     11284**DCL
TOLTS_GETCMD.ERRMSG_VFC#
     11380**DCL
TOLTS_GETCMD.ERR_CODE.FCG#
     11414**DCL
TOLTS_GETCMD.ERR_CODE.MON#
     11415**DCL
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:70   
TOLTS_GETCMD.ERR_CODE.SEV#
     11417**DCL
TOLTS_GETCMD.F2_
     11466**DCL
TOLTS_GETCMD.F3_
     11470**DCL
TOLTS_GETCMD.FPT$
     11562**DCL
TOLTS_GETCMD.INDCB#
     11436**DCL
TOLTS_GETCMD.INFOMSG#
     11361**DCL
TOLTS_GETCMD.NLINES
     11581**DCL
TOLTS_GETCMD.NODES$
     11266**DCL
TOLTS_GETCMD.OUTDCB#
     11441**DCL
TOLTS_GETCMD.PASS
     11395**DCL
TOLTS_GETCMD.PCB$
     11290**DCL
TOLTS_GETCMD.PP_FUN$$
     11483**DCL
TOLTS_GETCMD.PP_ROOT$
     11570**DCL
TOLTS_GETCMD.PROMPT_
     11474**DCL
TOLTS_GETCMD.PROMPT_VFC#
     11340**DCL
TOLTS_GETCMD.RCVD_PROMPT#
     11335**DCL
TOLTS_GETCMD.READR$$
     11488**DCL
TOLTS_GETCMD.RFU10#
     11586**DCL
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:71   
TOLTS_GETCMD.RFU11#
     11587**DCL
TOLTS_GETCMD.RFU12#
     11588**DCL
TOLTS_GETCMD.RFU2$
     11541**DCL
TOLTS_GETCMD.RFU9#
     11585**DCL
TOLTS_GETCMD.RFUBIT2
     11404**DCL
TOLTS_GETCMD.RFUBYTE
     11412**DCL
TOLTS_GETCMD.RLT$
     11547**DCL
TOLTS_GETCMD.RPROMPT_
     11478**DCL
TOLTS_GETCMD.SFROUTINE$
     11515**DCL
TOLTS_GETCMD.SKIP_PREPROCESS#
     11346**DCL
TOLTS_GETCMD.SYNERR_NODES$
     11554**DCL
TOLTS_GETCMD.TEXT_
     11528**DCL
TOLTS_GETCMD.TREAD#
     11314**DCL
TOLTS_GETCMD.USE_EPOS#
     11308**DCL
TOLTS_GETCMD.UTIL$
     11566**DCL
TOLTS_GETCMD.WORK$
     11298**DCL
TOLTS_GETCMD.XT_PARAM$
     11534**DCL
TOLTS_GETCMD.XUH$
     11303**DCL
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:72   
TOLTS_SNAP.SCODE_
     11043**DCL
TOLTS_SNAP.SCREECHID_
     11044**DCL
TOT$ECP
     11157**DCL
TOT$ECP.BOOT_CPU_TYPE
     11194**DCL
TOT$ECP.BREAK_ALLOWED
     11190**DCL
TOT$ECP.BREAK_RECEIVED
     11192**DCL
TOT$ECP.DYNAMIC_PAGE_COUNT
     11175**DCL
TOT$ECP.IO
     11161**DCL
TOT$ECP.IO.COUNT
     11164**DCL
TOT$ECP.IO.TYPE
     11162**DCL
TOT$ECP.ISC
     11166**DCL
TOT$ECP.ISC.GERELC_WAIT
     11171**DCL
TOT$ECP.ISC.READ_OUT
     11167**DCL
TOT$ECP.ISC.READ_PENDING
     11173**DCL
TOT$ECP.ISC.WRITE_OUT
     11169**DCL
TOT$ECP.SUBEXEC
     11177**DCL
TOT$ECP.SUBEXEC.EDIT_NAME
     11182**DCL
TOT$ECP.SUBEXEC.TEST_PAGE_COUNT
     11188**DCL
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:73   
TOT$ECP.TEST_REQ_
     11160**DCL
TOX$ABORT
     11678**ENTRY
TOX$ERROR
        30**PROC
TOX$WARN
     11661**ENTRY
XUG$ALLMSG
      7868**DCL-ENT
XUG$BLANK_PASSWORD
      7871**DCL-ENT
XUG$BREAK
      7861**DCL-ENT
XUG$CLOSE_DCBS
      7860**DCL-ENT
XUG$CLRENABLE
      7864**DCL-ENT
XUG$CORRES
      7856**DCL-ENT
XUG$DISABLE
      7862**DCL-ENT
XUG$ECHO
      7854**DCL-ENT
XUG$ECHOIF
      7853**DCL-ENT
XUG$ECHOLAST
      7857**DCL-ENT
XUG$ENABLE
      7863**DCL-ENT
XUG$ERRCNVRT
      7873**DCL-ENT
XUG$ERRPTR
      7852**DCL-ENT
XUG$ERRTOLCP6
      7874**DCL-ENT
PL6.E3A0      #001=TOX$ERROR File=TOX$ERR.:E05TSI                                WED 07/30/97 06:52 Page:74   
XUG$FINDDCB
      7869**DCL-ENT
XUG$GETCMD
      7851**DCL-ENT
XUG$GETDCB
      7870**DCL-ENT
XUG$HELP
      7866**DCL-ENT
XUG$INIT
      7855**DCL-ENT
XUG$MOREMSG
      7867**DCL-ENT
XUG$OPENOUT
      7872**DCL-ENT
XUG$SETERRMSG
      7859**DCL-ENT
XUG$SIMULATE_BREAK
      7865**DCL-ENT
