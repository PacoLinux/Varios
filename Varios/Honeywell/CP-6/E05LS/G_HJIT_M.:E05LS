

14:36 JUL 28 '97 G_HJIT_M.:E05SI                                           1    
    1      /*M* G_HJIT_M   HJIT Macros                    */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7
    8      /*X*   MEC,MOC,EXM=20,CLM=30,CRM=100           */
    9
   10                          /*F*   NAME: G_HJIT_M.
   11
   12                          The file G_HJIT_M contains the macro definitions
   13                          to be used to generate the monitor and the user
   14                          HJITs.
   15
   16                          Macros contained in this file contain the following:
   17                          }
   18                          } G$MHJIT
   19                          } G$UHJIT
   20                          } G$HHJIT
   21                          }
   22                          */
   23
   24
   25
   26
   27
   28                          /*F*   NAME:   G$MHJIT.
   29
   30                          The G$MHJIT macro may be used to generate a structure
   31                          defining the monitor's HJIT.
   32                          */
   33
   34      %MACRO G$MHJIT (FPTN=G$MHJIT,
   35        LVL=1,
   36        LAST=";",
   37        ALGN=WALIGNED,
14:36 JUL 28 '97 G_HJIT_M.:E05SI                                           2    
   38        STCLASS=BASED);
   39
   40      %LSET LISTDIR='0'B;
   41      %LSET LISTEXP='1'B;
   42      %LSET LISTCOM='0'B;
   43      %LSET LISTSUB='1'B;
   44
   45      %LSET FNAM=CHARTEXT(TEXTCHAR(FPTN));
   46
   47      %LSET STR=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
   48      %IF (STR='STA') OR (STR='CON') OR STR='EXT';
   49      %LSET INIT=CHARTEXT(' INIT');
   50      DCL GHI$SCHD_INT_SERV ENTRY;
   51      DCL GHI$PFS_INT_SERV ENTRY;
   52      DCL GHI$TSAOV_INT_SERV ENTRY;
   53      DCL GHI$WDT_INT_SERV ENTRY;
   54      DCL GHI$RTC_INT_SERV ENTRY;
   55      DCL GHI$IDL_INT_SERV ENTRY;
   56      DCL GHI$CIH_RECV ENTRY;
   57      DCL GHI$SATYR_RCVINT ENTRY;
   58      DCL GHI$SATYR_TRNINT ENTRY;
   59      %LSET EINIT=CHARTEXT('');
   60      %ELSE;
   61      %LSET INIT=CHARTEXT('/*');
   62      %LSET EINIT=CHARTEXT('*/');
   63      %ENDIF;
   64
   65      %IF LVL=1;
   66      DCL 1 FPTN STCLASS ALGN,
   67      %ELSE;
   68              %LVL FPTN,
   69      %ENDIF;
   70      %LSET MHJIT_NXT_LVL=LVL+1;
   71
   72                %G$ASDT_MON (FPTN=ASDT_MON,
   73                STCLASS=STCLASS,
   74                LVL=MHJIT_NXT_LVL,
14:36 JUL 28 '97 G_HJIT_M.:E05SI                                           3    
   75                LAST=",");
   76
   77              %G$ASDT_MON (FPTN=ASDT_BIGFOOT,
   78              STCLASS=STCLASS,
   79              LVL=MHJIT_NXT_LVL,
   80              LAST=",");
   81
   82              %G$ISA_MINI (FPTN=ISA_IDLE,
   83              ASV$="%FNAM.ASDT_MON",
   84              RING=G_R_MON#,
   85              P$$=GHI$IDL_INT_SERV,
   86              STCLASS=STCLASS,
   87              LVL=MHJIT_NXT_LVL,
   88              MMU=YES,
   89              LAST=",");
   90
   91              %G$TSA (FPTN=TSA_MON,
   92              TSAL$="%FNAM.TSA_DB",
   93              STCLASS=STCLASS,
   94              LVL=MHJIT_NXT_LVL,
   95              SAVE_SIP=NO,
   96              LAST=",");
   97
   98              %G$TSA (FPTN=TSA_DB,
   99              TSAL$="%FNAM.TSA_OV",
  100              STCLASS=STCLASS,
  101              LVL=MHJIT_NXT_LVL,
  102              SAVE_SIP=NO,
  103              LAST=",");
  104
  105              %G$TSA (FPTN=TSA_OV,
  106              STCLASS=STCLASS,
  107              LVL=MHJIT_NXT_LVL,
  108              SAVE_SIP=NO,
  109              LAST=",");
  110
  111              %G$ISA_MINI (FPTN=ISA_PFS,
14:36 JUL 28 '97 G_HJIT_M.:E05SI                                           4    
  112              RING=G_R_MON#,
  113              P$$=GHI$PFS_INT_SERV,
  114              ASV$="%FNAM.ASDT_MON",
  115              MMU=YES,
  116              STCLASS=STCLASS,
  117              LVL=MHJIT_NXT_LVL,
  118              LAST=",");
  119
  120              %G$ISA_MINI (FPTN=ISA_WDOG,
  121              RING=G_R_MON#,
  122              P$$=GHI$WDT_INT_SERV,
  123              STCLASS=STCLASS,
  124              LVL=MHJIT_NXT_LVL,
  125              LAST=",");
  126              %VLP_REGISTERS (FPTN=WDT_REGS,
  127              STCLASS=STCLASS,
  128              SAVE_ISM2=NO,
  129              LVL=MHJIT_NXT_LVL,
  130              LAST=",");
  131
  132
  133              %G$ISA (FPTN=ISA_OV,
  134              ASV$="%FNAM.ASDT_MON",
  135              RING=G_RING0#,
  136              P$$=GHI$TSAOV_INT_SERV,
  137              STCLASS=STCLASS,
  138              LVL=MHJIT_NXT_LVL,
  139              SAVE_SIP=NO,
  140              LAST=",");
  141
  142              %G$ISA (FPTN=ISA_BIGFOOT,
  143              ASV$="%FNAM.ASDT_BIGFOOT",
  144              STCLASS=STCLASS,
  145              LVL=MHJIT_NXT_LVL,
  146              SAVE_SIP=NO,
  147              LAST=",");
  148
14:36 JUL 28 '97 G_HJIT_M.:E05SI                                           5    
  149              %G$ISA (FPTN=ISA_LVL5,
  150              STCLASS=STCLASS,
  151              LVL=MHJIT_NXT_LVL,
  152              SAVE_SIP=NO,
  153              LAST=",");
  154
  155              %G$ISA (FPTN=ISA_SATYR_RCV,
  156              P$$=GHI$SATYR_RCVINT,
  157              ASV$="%FNAM.ASDT_MON",
  158              RING=G_RING0#,
  159              STCLASS=STCLASS,
  160              LVL=MHJIT_NXT_LVL,
  161              SAVE_SIP=NO,
  162              LAST=",");
  163
  164              %G$ISA (FPTN=ISA_SATYR_TRN,
  165              P$$=GHI$SATYR_TRNINT,
  166              ASV$="%FNAM.ASDT_MON",
  167              RING=G_RING0#,
  168              STCLASS=STCLASS,
  169              LVL=MHJIT_NXT_LVL,
  170              SAVE_SIP=NO,
  171              LAST=",");
  172
  173              %G$ISA (FPTN=ISA_DBINH,
  174              ASV$="%FNAM.ASDT_MON",
  175              STCLASS=STCLASS,
  176              LVL=MHJIT_NXT_LVL,
  177              SAVE_SIP=NO,
  178              LAST=",");
  179
  180              %G$ISA (FPTN=ISA_LVL10,
  181              STCLASS=STCLASS,
  182              LVL=MHJIT_NXT_LVL,
  183              SAVE_SIP=NO,
  184              LAST=",");
  185
14:36 JUL 28 '97 G_HJIT_M.:E05SI                                           6    
  186              %G$ISA (FPTN=ISA_LVL11,
  187              STCLASS=STCLASS,
  188              LVL=MHJIT_NXT_LVL,
  189              SAVE_SIP=NO,
  190              LAST=",");
  191
  192              %G$ISA (FPTN=ISA_LVL12,
  193              STCLASS=STCLASS,
  194              LVL=MHJIT_NXT_LVL,
  195              SAVE_SIP=NO,
  196              LAST=",");
  197
  198              %G$ISA (FPTN=ISA_SCHD,
  199              ASV$="%FNAM.ASDT_MON",
  200              RING=G_R_MON#,
  201              P$$=GHI$SCHD_INT_SERV,
  202              STCLASS=STCLASS,
  203              LVL=MHJIT_NXT_LVL,
  204              LAST=",");
  205
  206              %G$ISA (FPTN=ISA_RT_CLOCK,
  207              ASV$="%FNAM.ASDT_MON",
  208              RING=G_R_MON#,
  209              P$$=GHI$RTC_INT_SERV,
  210              STCLASS=STCLASS,
  211              LVL=MHJIT_NXT_LVL,
  212              SAVE_SIP=NO,
  213              LAST=",");
  214
  215
  216              %G$MHJIT_CPU(STCLASS=STCLASS,
  217              LVL=%MHJIT_NXT_LVL,
  218              LAST=",");
  219
  220      %G$INTCON(STCLASS=STCLASS,
  221              FPTN=INTCON,
  222              LVL=%MHJIT_NXT_LVL,
14:36 JUL 28 '97 G_HJIT_M.:E05SI                                           7    
  223              LAST=",");
  224
  225              %G$TSA (FPTN=TSA_HND,
  226              TSAL$="%FNAM.TSA_DB",
  227              STCLASS=STCLASS,
  228              LVL=MHJIT_NXT_LVL,
  229              SAVE_SIP=NO,
  230              LAST=LAST);
  231
  232      %MEND;
  233
  234
  235
  236
  237
  238                          /*F*  NAME:  G$MHJIT_CPU
  239
  240                          The G$MHJIT_CPU macro generates the structure that defines
  241                          the processor dependent data that resides in the
  242                          monitor's HJIT.
  243                          */
  244
  245      %MACRO G$MHJIT_CPU (FPTN=G$MHJIT_CPU,
  246           LVL=1,
  247           LAST=";",
  248           ALGN=WALIGNED,
  249           STCLASS=BASED);
  250
  251      %LSET LISTDIR='0'B;
  252      %LSET LISTEXP='1'B;
  253      %LSET LISTCOM='0'B;
  254      %LSET LISTSUB='1'B;
  255
  256      %LSET STR=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
  257      %IF (STR='STA') OR (STR='CON') OR STR='EXT';
  258      %LSET INIT=CHARTEXT(' INIT');
  259      %LSET EINIT=CHARTEXT('');
14:36 JUL 28 '97 G_HJIT_M.:E05SI                                           8    
  260      %ELSE;
  261      %LSET INIT=CHARTEXT('/*');
  262      %LSET EINIT=CHARTEXT('*/');
  263      %ENDIF;
  264
  265      %IF LVL=1;
  266      DCL 1 FPTN STCLASS ALGN,
  267      %LSET THIS_LVL=LVL+1;
  268      %ELSE;
  269      %LSET THIS_LVL=LVL;
  270      %ENDIF;
  271
  272              %(THIS_LVL) CUN UBIN(16) CALIGNED %INIT(0)%EINIT,
  273             %(THIS_LVL) CU$ PTR CALIGNED %INIT(ADDR(NIL))%EINIT,
  274             %(THIS_LVL) PNO UBIN(16) CALIGNED %INIT(0)%EINIT,
  275             %(THIS_LVL) INTRVL_TYPE UBIN(16) CALIGNED %INIT(0)%EINIT,
  276             %(THIS_LVL) UTS UBIN(32) CALIGNED %INIT(1)%EINIT,
  277             %(THIS_LVL) TICKS UBIN(16) CALIGNED %INIT(0)%EINIT,
  278             %(THIS_LVL) WDT_INIT UBIN(16) CALIGNED %INIT(768)%EINIT,
  279                                    /* WDT init value in 1/120 sec                                      */
  280             %(THIS_LVL) BOOTUTS UBIN(32) CALIGNED %INIT(0)%EINIT LAST
  281
  282      %MEND;
  283
  284
  285
  286                          /*F*   NAME:   G$UHJIT
  287
  288                          The User Housekeeping Job Information Table
  289                          (UHJIT) contains the data required by the hardware
  290                          and the LCP-6 Scheduler for running a user.
  291
  292                          The G$UHJIT macro, which is contained in the G_HJIT_M
  293                          include file, may be used to generate a structure
  294                          defining the UHJIT.
  295                          Because the G$UHJIT macro requires some of the
  296                          macros contained in the GH_LCP6_M include file,
14:36 JUL 28 '97 G_HJIT_M.:E05SI                                           9    
  297                          GH_LCP6_M (or LCP_6) must also be specified as an
  298                          include file in a compile unit that requires the
  299                          G$UHJIT structure.
  300
  301                          A user may reference the UHJIT through the pointer
  302                          G$UHJIT$.  This pointer is defined in the G_UPTRS_D
  303                          object unit file.
  304
  305                          The fields within the UHJIT of particular interest
  306                          to the system programmer are:
  307                          */
  308
  309      %MACRO G$UHJIT (FPTN=G$UHJIT,
  310        LVL=1,
  311        LAST=";",
  312        ALGN=WALIGNED,
  313        SAVE_SIP(YES=1,NO=0,ANY)=1,
  314        STCLASS=BASED);
  315
  316      %LSET LISTDIR='0'B;
  317      %LSET LISTEXP='1'B;
  318      %LSET LISTCOM='0'B;
  319      %LSET LISTSUB='1'B;
  320
  321      %LSET FNAM=CHARTEXT(TEXTCHAR(FPTN));
  322
  323      %LSET STR=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
  324      %IF (STR='STA') OR (STR='CON') OR STR='EXT';
  325      %LSET INIT=CHARTEXT(' INIT');
  326      DCL GJI$INIT_USR ENTRY;
  327      %G$MHJIT (FPTN=G_MHJIT, STCLASS=SYMREF);
  328      %LSET EINIT=CHARTEXT('');
  329      %ELSE;
  330      %LSET INIT=CHARTEXT('/*');
  331      %LSET EINIT=CHARTEXT('*/');
  332      %ENDIF;
  333
14:36 JUL 28 '97 G_HJIT_M.:E05SI                                           10   
  334      %IF LVL=1;
  335      DCL 1 FPTN STCLASS ALGN,
  336      %ELSE;
  337              %LVL FPTN,
  338      %ENDIF;
  339      %LSET UHJIT_NXT_LVL=LVL+1;
  340
  341                %G$ASDT_USR (FPTN=ASDT_USR,
  342                STCLASS=STCLASS,
  343                LVL=UHJIT_NXT_LVL,
  344                LAST=",");
  345                          /*K* ASDT_USR -
  346                          The User Address Space Descriptor Table
  347                          contains the segment descriptors that are
  348                          loaded into the Memory Management Unit for
  349                          user program execution.
  350                          */
  351
  352      %G$ASDT_MCL (FPTN=ASDT_MCL,
  353              STCLASS=STCLASS,
  354              LVL=UHJIT_NXT_LVL,
  355              LAST=",");
  356                          /*K* ASDT_MCL -
  357                          The MCL Address Space Descriptor Table
  358                          contains the segment descriptors that are
  359                          loaded into the Memory Management Unit while
  360                          processing a user's monitor service request.
  361                          */
  362
  363              %G$ISA (FPTN=ISA_USR,
  364              ASV$="%FNAM.ASDT_MCL",
  365              RING=G_R_MON#,
  366              NATSAP_SEL=G_NATSAP_USR#,
  367              P$$=GJI$INIT_USR,
  368              STCLASS=STCLASS,
  369              LVL=UHJIT_NXT_LVL,
  370              SAVE_SIP=SAVE_SIP,
14:36 JUL 28 '97 G_HJIT_M.:E05SI                                           11   
  371              LAST=",");
  372                          /*K* ISA_USR -
  373                          The User Interrupt Save Area is accessed by the hardware
  374                          on the occurrence of the user's interrupt level.
  375                          Refer to the description of G$ISA.
  376                          */
  377              %(LVL+1) DMN REDEF ISA_USR,
  378              %(LVL+2) * PTR,
  379              %(LVL+2) ID UBIN,
  380              %(LVL+2) *(0:54) UBIN,
  381                          /*K* UHJIT.DMN.ID - UBIN
  382                          contains the DoMaiN IDentification which indicates
  383                          which process is running; Monitor, Debugger,
  384                          User, user Interrupt Level, or monitor service.
  385                          The value will be one of the following EQUated values
  386                          from the G_LCP6_E (or LCP_6) include file:
  387
  388                          .fif
  389                          %G_DMN_MON_SVC  0       %G_DMN_MON  4
  390                          %G_DMN_DB_SVC   1       %G_DMN_DB   5
  391                          %G_DMN_INT_SVC  2       %G_DMN_INT  6
  392                          %G_DMN_USR_SVC  3       %G_DMN_USR  7
  393                          .fin
  394                          */
  395
  396              %G$TSA (FPTN=TSA_USR,
  397              TSAL$="%FNAM.TSA_DB",
  398              STCLASS=STCLASS,
  399              LVL=UHJIT_NXT_LVL,
  400              SAVE_SIP=SAVE_SIP,
  401              LAST=",");
  402                          /*K* TSA_USR -
  403                          The User Trap Save Area is used by the hardware and
  404                          the LCP-6 system to store the environment at the time
  405                          of a user trap.
  406                          Refer to the description of G$TSA.
  407                          */
14:36 JUL 28 '97 G_HJIT_M.:E05SI                                           12   
  408
  409              %(LVL+1) NATSAP$ PTR %INIT(ADDR(FPTN.TSA_USR)) %EINIT,
  410
  411      %G$TSA  (FPTN=TSA_DB,
  412              TSAL$="%FNAM.TSA_CP",
  413              STCLASS=STCLASS,
  414              LVL=UHJIT_NXT_LVL,
  415              SAVE_SIP=NO,
  416              LAST=",");
  417
  418              %G$TSA (FPTN=TSA_CP,
  419              TSAL$="%FNAM.TSA_RTT",
  420              STCLASS=STCLASS,
  421              LVL=UHJIT_NXT_LVL,
  422              SAVE_SIP=NO,
  423              LAST=",");
  424
  425              %G$TSA_HDR (FPTN=TSA_RTT,
  426              TSAL$=G_MHJIT.TSA_MON,
  427              STCLASS=STCLASS,
  428              LVL=UHJIT_NXT_LVL,
  429              LAST=",");
  430
  431              %(LVL+1) CNCTD_LVLS(0:63) BIT(1) %INIT('0'B*0)%EINIT,
  432                          /*B* UHJIT.CNCTD_LVLS - Bit array of allocated levels
  433                          */
  434              %(LVL+1) SHRD_SEG(0:31) UBIN(8) UNAL %INIT(0*0) %EINIT,
  435                          /*B* UHJIT.SHRD_SEGS - Byte array linking users of
  436                           shared segments
  437                          */
  438
  439              %(LVL+1) SHRD_FLAG(0:31) BIT(1) %INIT('0'B*0) %EINIT LAST
  440                          /*B* UHJIT.SHRD_FLAG Bit(1) array identifying users
  441                           of shared segments.
  442                           These bits exist so ANLZ can easily tell that
  443                           a segment is shared.  The SHRD_SEGS  array is
  444                           inadequate for that purpose as the value will
14:36 JUL 28 '97 G_HJIT_M.:E05SI                                           13   
  445                           be zero if only one user is associated with the
  446                           shared segment.
  447                          */
  448
  449      %MEND;
  450
  451
  452
  453
  454
  455                          /*F*   NAME:   G$HHJIT.
  456
  457                          The G$HHJIT macro may be used to generate a structure
  458                          defining a handler's HJIT.
  459                          */
  460
  461      %MACRO G$HHJIT (FPTN=G$HHJIT,
  462        LVL=1,
  463        LAST=";",
  464        ALGN=WALIGNED,
  465        SAVE_SIP(YES=1,NO=0,ANY)=1,
  466        STCLASS=BASED);
  467
  468      %LSET LISTDIR='0'B;
  469      %LSET LISTEXP='1'B;
  470      %LSET LISTCOM='0'B;
  471      %LSET LISTSUB='1'B;
  472
  473      %LSET STR=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
  474      %IF (STR='STA') OR (STR='CON') OR STR='EXT';
  475      %LSET INIT=CHARTEXT(' INIT');
  476      %LSET EINIT=CHARTEXT('');
  477      %ELSE;
  478      %LSET INIT=CHARTEXT('/*');
  479      %LSET EINIT=CHARTEXT('*/');
  480      %ENDIF;
  481
14:36 JUL 28 '97 G_HJIT_M.:E05SI                                           14   
  482      %IF LVL=1;
  483      DCL 1 FPTN STCLASS ALGN,
  484      %ELSE;
  485              %LVL FPTN,
  486      %ENDIF;
  487      %LSET HHJIT_NXT_LVL=LVL+1;
  488      %LSET FNAM=CHARTEXT(TEXTCHAR(FPTN));
  489
  490                %G$ASDT_USR (FPTN=ASDT_USR,
  491                STCLASS=STCLASS,
  492                LVL=HHJIT_NXT_LVL,
  493                LAST=",");
  494
  495              %G$ASDT_MCL (FPTN=ASDT_MCL,
  496              STCLASS=STCLASS,
  497              LVL=HHJIT_NXT_LVL,
  498              LAST=",");
  499
  500              %G$ISA (FPTN=ISA_HND,
  501              ASV$="%FNAM.ASDT_USR",
  502              RING=G_R_USR#,
  503              STCLASS=STCLASS,
  504              LVL=HHJIT_NXT_LVL,
  505              SAVE_SIP=SAVE_SIP,
  506              LAST=",");
  507                          /*B* HHJIT.DMN.ID - Ubin domain ID. Values are G_DMN_xxx#
  508                          in G_LCP6_E, where xxx is MON,DB,INT, or HND, perhaps
  509                          followed by _SVC.                                                             */
  510              %(LVL+1) DMN REDEF ISA_HND,
  511              %(LVL+2) * PTR,
  512              %(LVL+2) ID UBIN,
  513              %(LVL+2) *(0:54) UBIN,
  514
  515              %G$TSA (FPTN=TSA_HND,
  516              STCLASS=STCLASS,
  517              LVL=HHJIT_NXT_LVL,
  518              SAVE_SIP=SAVE_SIP,
14:36 JUL 28 '97 G_HJIT_M.:E05SI                                           15   
  519              LAST=",");
  520
  521              %(LVL+1) NATSAP$ PTR %INIT(ADDR(NIL)) %EINIT,
  522              %(LVL+1) HJITPAGE UBIN %INIT(0)%EINIT LAST
  523      %MEND;
  524
  525
  526
  527
  528

