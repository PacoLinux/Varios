VERSION E05

PL6.E3A0      #001=VXA$GET File=VXA$GET.:E05TSI                                  WED 07/30/97 08:04 Page:1    
        1        1        /*M* VXA$GET - allocates dynamic memory for linker. */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=6,IND=4,CSU=2,EXM=0,ECU=2,MOC,DCI=4,CRT=4,CCC,CTI=8 */
        8        8        /*M*  VXA$GET allocates dynamic data segments      */
        9        9        /*P*  NAME: VXA$GET
       10       10              PURPOSE: Allocates dynamic data segments
       11       11              DESCRIPTION: Allocates dynamic data segments */
       12       12        /*D*  NAME: VXA$GET
       13       13              CALL: CALL VXA$GET( START$, TYPE, SIZE );
       14       14              INPUT: TYPE     - data segment number.
       15       15                     SIZE     - request size in words.
       16       16              OUTPUT: START$  - pointer to start of area allocated.
       17       17              DESCRIPTION: Allocates dynamic data segments.
       18       18                           An unused space list is maintained. If the
       19       19                           request may be honored from the available space
       20       20                           no additional pages are acquired. Otherwise additional
       21       21                           pages are acquired from the monitor. The pointer,
       22       22                           START$, is returned pointing to the start of the
       23       23                           area returned. The address space is treated like a stack.
       24       24                                                                        */
       25       25        VXA$GET:
       26       26              PROC( START$, TYPE, SIZE );
       27       27        /*
       28       28                          Include files
       29       29        */
       30       30        %INCLUDE CP_6;
       31      111        %INCLUDE B$OBJECT_C;
       32     3541        %INCLUDE XU_MACRO_C;
       33     6647        %INCLUDE VX_SUBS_C;
       34     6865        %INCLUDE VX_MACRO_C;
       35     8002        %INCLUDE VX_FIXED_R;
       36     8664        %INCLUDE VX_DATA_R;
       37    10283        %INCLUDE VX_PERR_C;
PL6.E3A0      #001=VXA$GET File=VXA$GET.:E05TSI                                  WED 07/30/97 08:04 Page:2    
       38    10537        %INCLUDE VX_SWITCH_C;
       39    10545        %E;

             10553    1   /*******************************************************************************
             10554    1   *                                                                              *
             10555    1   *                          ENTRY                                                 *
             10556    1   *                                                                              *
             10557    1   *******************************************************************************/

       40    10561    1   DCL VXE$ERROR       ENTRY(4);
       41    10562    1   DCL VXE$ERR         ENTRY(3);
       42    10563    1   DCL VXD$B2C         ENTRY(5);
       43    10564        %P;

             10572    1   /*******************************************************************************
             10573    1   *                                                                              *
             10574    1   *                          PARAMETERS                                              *
             10575    1   *                                                                              *
             10576    1   *******************************************************************************/

       44    10580    1   DCL START$          PTR;                /* Return pointer for allocated area */
       45    10581    1   DCL TYPE            UBIN(36);   /* Alias for which segment to allocate from */
       46    10582    1   DCL SIZE            UBIN(36);           /* Size in words of the request */
       47    10583        %S;

             10591    1   /*******************************************************************************
             10592    1   *                                                                              *
             10593    1   *                          SBIN                                                 *
             10594    1   *                                                                              *
             10595    1   *******************************************************************************/

       48    10599    1   DCL DIFF            SBIN WORD ALIGNED   AUTO;
       49    10600        %U;

             10608    1   /*******************************************************************************
             10609    1   *                                                                              *
             10610    1   *                          UBIN                                                 *
PL6.E3A0      #001=VXA$GET File=VXA$GET.:E05TSI                                  WED 07/30/97 08:04 Page:3    
             10611    1   *                                                                              *
             10612    1   *******************************************************************************/

       50    10616    1   DCL GET             UBIN(36)  ALIGNED   AUTO;
       51    10617    1   DCL WGET             UBIN(36)  ALIGNED   AUTO;
       52    10618        %BANNER(ARG=FPTS);

             10626    1   /*******************************************************************************
             10627    1   *                                                                              *
             10628    1   *                          FPTS                                                 *
             10629    1   *                                                                              *
             10630    1   *******************************************************************************/

       53    10634        %FPT_GDS( FPTN=FPT_GDS, RESULTS=VX_M_VECTOR, STCLASS=STATIC);
       54    10650        %FPT_GDP( FPTN=FPT_GDP, RESULTS=VX_M_VECTOR_DP, STCLASS=STATIC);
       55    10664        %EJECT;
PL6.E3A0      #001=VXA$GET File=VXA$GET.:E05TSI                                  WED 07/30/97 08:04 Page:4    
       56    10665    2         DO CASE( TYPE );
       57    10666    2           CASE(     0, 1, 2, 3, 4, 5, 6, 7 );
       58    10667    2             DIFF = VX_M_ALL(TYPE) - VX_M_FREE(TYPE);
       59    10668    3             IF SIZE > DIFF THEN DO;
       60    10669    3                 GET = (( SIZE - DIFF + @PAGE_SIZE1 ) / @PAGE_SIZE ) * @PAGE_SIZE;
       61    10670    3                 FPT_GDS.V.SEGSIZE# = GET;
       62    10671    3                 IF TYPE = 1 THEN FPT_GDS.V.COMMON# = @TRUE_B;
       63    10672    3                 ELSE FPT_GDS.V.COMMON# = @FALSE_B;
       64    10673    3                 VX_M_VECTOR.F.SEGID = VX_M_SEGID(TYPE);
       65    10674    3                 CALL M$GDS( FPT_GDS )  ALTRET( NOROOM_SEGS );
       66    10675                                                /* Increase allocated counter */
       67    10676    3                 VX_M_ALL(TYPE) = VX_M_ALL(TYPE) + GET; /* Increase allocated */
       68    10677                                        /* Check if base pointer needs to be set     */
       69    10678    4                 IF VX_M_BASE_PTR(TYPE) = ADDR(NIL) THEN DO;
       70    10679    4                     VX_M_BASE_PTR(TYPE) = VX_M_VECTOR.P.POINTER;
       71    10680    4                     VX_M_SEGID(TYPE) = VX_M_VECTOR.F.SEGID;
       72    10681    4                    END;
       73    10682    3                END;
       74    10683    2             START$ = PINCRW( VX_M_BASE_PTR(TYPE),   VX_M_FREE(TYPE)   );
       75    10684                                            /* Set free allocated word in segment     */
       76    10685    2             VX_M_FREE(TYPE) = VX_M_FREE(TYPE) + SIZE;
       77    10686    2           CASE(8);
       78    10687    2             DIFF = VX_M_ALL(8) - VX_M_FREE(8);
       79    10688    3             IF SIZE > DIFF THEN DO;
       80    10689    3                 GET = (( SIZE - DIFF + @PAGE_SIZE1) / @PAGE_SIZE);
       81    10690    3                 WGET = GET * @PAGE_SIZE;
       82    10691    3                 FPT_GDP.V.PAGES#   = GET;
       83    10692    3                 CALL M$GDP( FPT_GDP )  ALTRET( NOROOM_PAGE );
       84    10693                                                /* Increase allocated counter */
       85    10694    3                 VX_M_ALL(8) = VX_M_ALL(8) + WGET; /* Increase allocated */
       86    10695                                        /* Check if base pointer needs to be set     */
       87    10696    3                 IF VX_M_BASE_PTR(8) = ADDR(NIL) THEN
       88    10697    3                     VX_M_BASE_PTR(8) = VX_M_VECTOR_DP.P.POINTER;
       89    10698    3                END;
       90    10699    2             START$ = PINCRW( VX_M_BASE_PTR(8),   VX_M_FREE(8)   );
       91    10700                                                /* Set free allocated word in segment */
       92    10701    2             VX_M_FREE(8) = VX_M_FREE(8) + SIZE;
PL6.E3A0      #001=VXA$GET File=VXA$GET.:E05TSI                                  WED 07/30/97 08:04 Page:5    
       93    10702    2           CASE(ELSE);
       94    10703        /*E*  ERROR: VXA-E$INTERNAL_ALL_TYPE_VX-0
       95    10704              MESSAGE: Internal link error; Bad type passed to VXA$GET: TYPE = %U1.
       96    10705              DESCRIPTION: Self-explanatory.
       97    10706        */
       98    10707                  %NUMBER(
       99    10708                  NUM1=TYPE, BASE1=10, SIZE1=12 );
      100    10725                  %SCREAM(
      101    10726                  ERR#=E$INTERNAL_ALL_TYPE_VX,
      102    10727                  LEVEL=@E$F_VX,
      103    10728                  MID="'A'");
      104    10731    2           END;
      105    10732    1         RETURN;
      106    10733    1   NOROOM_SEGS:;
      107    10734        /*E*  ERROR: VXA-E$INTERNAL_ALL_REQ_SEG_VX-0
      108    10735              MESSAGE: Data segment allocation request failed.
      109    10736              DESCRIPTION: Self-explanatory.
      110    10737        */
      111    10738              %SCREAM(
      112    10739              ERR#=E$INTERNAL_ALL_REQ_SEG_VX,
      113    10740              LEVEL=@E$F_VX,
      114    10741              MID="'A'");
      115    10744    1   NOROOM_PAGE:;
      116    10745        /*E*  ERROR: VXA-E$INTERNAL_ALL_REQ_PAGE_VX-0
      117    10746              MESSAGE: Data page allocation request failed.
      118    10747              DESCRIPTION: Self-explanatory.
      119    10748        */
      120    10749              %SCREAM(
      121    10750              ERR#=E$INTERNAL_ALL_REQ_PAGE_VX,
      122    10751              LEVEL=@E$F_VX,
      123    10752              MID="'A'");
      124    10755    1   END VXA$GET;

PL6.E3A0      #001=VXA$GET File=VXA$GET.:E05TSI                                  WED 07/30/97 08:04 Page:6    
--  Include file information  --

   VX_SWITCH_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXA$GET.

   Procedure VXA$GET requires 137 words for executable code.
   Procedure VXA$GET requires 16 words of local(AUTO) storage.

    No errors detected in file VXA$GET.:E05TSI    .

PL6.E3A0      #001=VXA$GET File=VXA$GET.:E05TSI                                  WED 07/30/97 08:04 Page:7    

 Object Unit name= VXA$GET                                    File name= VXA$GET.:E05TOU
 UTS= JUL 30 '97 08:04:04.56 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none    12     14  VXA$GET
    2   Proc  even  none   137    211  VXA$GET
    3  RoData even  none    22     26  VXA$GET

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes      Std        3  VXA$GET

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       4 VXE$ERROR
         yes           Std       5 VXD$B2C
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #001=VXA$GET File=VXA$GET.:E05TSI                                  WED 07/30/97 08:04 Page:8    

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VX_M_VECTOR                           VX_M_VECTOR_DP
     VX_OU_HEAD                            VX_ERRORS                             VX_M_FREE
     VX_M_ALL                              VX_M_BASE_PTR                         VX_M_SEGID
     VX_EFIELD1                            B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #001=VXA$GET File=VXA$GET.:E05TSI                                  WED 07/30/97 08:04 Page:9    


        1        1        /*M* VXA$GET - allocates dynamic memory for linker. */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=6,IND=4,CSU=2,EXM=0,ECU=2,MOC,DCI=4,CRT=4,CCC,CTI=8 */
        8        8        /*M*  VXA$GET allocates dynamic data segments      */
        9        9        /*P*  NAME: VXA$GET
       10       10              PURPOSE: Allocates dynamic data segments
       11       11              DESCRIPTION: Allocates dynamic data segments */
       12       12        /*D*  NAME: VXA$GET
       13       13              CALL: CALL VXA$GET( START$, TYPE, SIZE );
       14       14              INPUT: TYPE     - data segment number.
       15       15                     SIZE     - request size in words.
       16       16              OUTPUT: START$  - pointer to start of area allocated.
       17       17              DESCRIPTION: Allocates dynamic data segments.
       18       18                           An unused space list is maintained. If the
       19       19                           request may be honored from the available space
       20       20                           no additional pages are acquired. Otherwise additional
       21       21                           pages are acquired from the monitor. The pointer,
       22       22                           START$, is returned pointing to the start of the
       23       23                           area returned. The address space is treated like a stack.
       24       24                                                                        */
       25       25        VXA$GET:
       26       26              PROC( START$, TYPE, SIZE );

     26  2 000000   000000 700200 xent  VXA$GET      TSX0  ! X66_AUTO_3
         2 000001   000020 000003                    ZERO    16,3

       27       27        /*
       28       28                          Include files
       29       29        */
       30       30        %INCLUDE CP_6;
       31      111        %INCLUDE B$OBJECT_C;
       32     3541        %INCLUDE XU_MACRO_C;
PL6.E3A0      #001=VXA$GET File=VXA$GET.:E05TSI                                  WED 07/30/97 08:04 Page:10   
       33     6647        %INCLUDE VX_SUBS_C;
       34     6865        %INCLUDE VX_MACRO_C;
       35     8002        %INCLUDE VX_FIXED_R;
       36     8664        %INCLUDE VX_DATA_R;
       37    10283        %INCLUDE VX_PERR_C;
       38    10537        %INCLUDE VX_SWITCH_C;
       39    10545        %E;

             10553    1   /*******************************************************************************
             10554    1   *                                                                              *
             10555    1   *                          ENTRY                                                 *
             10556    1   *                                                                              *
             10557    1   *******************************************************************************/

       40    10561    1   DCL VXE$ERROR       ENTRY(4);
       41    10562    1   DCL VXE$ERR         ENTRY(3);
       42    10563    1   DCL VXD$B2C         ENTRY(5);
       43    10564        %P;

             10572    1   /*******************************************************************************
             10573    1   *                                                                              *
             10574    1   *                          PARAMETERS                                             *
             10575    1   *                                                                              *
             10576    1   *******************************************************************************/

       44    10580    1   DCL START$          PTR;                /* Return pointer for allocated area */
       45    10581    1   DCL TYPE            UBIN(36);   /* Alias for which segment to allocate from */
       46    10582    1   DCL SIZE            UBIN(36);           /* Size in words of the request */
       47    10583        %S;

             10591    1   /*******************************************************************************
             10592    1   *                                                                              *
             10593    1   *                          SBIN                                                 *
             10594    1   *                                                                              *
             10595    1   *******************************************************************************/

       48    10599    1   DCL DIFF            SBIN WORD ALIGNED   AUTO;
PL6.E3A0      #001=VXA$GET File=VXA$GET.:E05TSI                                  WED 07/30/97 08:04 Page:11   
       49    10600        %U;

             10608    1   /*******************************************************************************
             10609    1   *                                                                              *
             10610    1   *                          UBIN                                                 *
             10611    1   *                                                                              *
             10612    1   *******************************************************************************/

       50    10616    1   DCL GET             UBIN(36)  ALIGNED   AUTO;
       51    10617    1   DCL WGET             UBIN(36)  ALIGNED   AUTO;
       52    10618        %BANNER(ARG=FPTS);

             10626    1   /*******************************************************************************
             10627    1   *                                                                              *
             10628    1   *                          FPTS                                                 *
             10629    1   *                                                                              *
             10630    1   *******************************************************************************/

       53    10634        %FPT_GDS( FPTN=FPT_GDS, RESULTS=VX_M_VECTOR, STCLASS=STATIC);
       54    10650        %FPT_GDP( FPTN=FPT_GDP, RESULTS=VX_M_VECTOR_DP, STCLASS=STATIC);
       55    10664        %EJECT;
PL6.E3A0      #001=VXA$GET File=VXA$GET.:E05TSI                                  WED 07/30/97 08:04 Page:12   
       56    10665    2         DO CASE( TYPE );

  10665  2 000002   200004 470500                    LDP0    @TYPE,,AUTO
         2 000003   000000 235100                    LDA     0,,PR0
         2 000004   000011 115007                    CMPA    9,DL
         2 000005   000007 602005 2                  TNC     s:10665+5,AL
         2 000006   000160 710000 2                  TRA     s:10714
         2 000007   000020 710000 2                  TRA     s:10667
         2 000010   000020 710000 2                  TRA     s:10667
         2 000011   000020 710000 2                  TRA     s:10667
         2 000012   000020 710000 2                  TRA     s:10667
         2 000013   000020 710000 2                  TRA     s:10667
         2 000014   000020 710000 2                  TRA     s:10667
         2 000015   000020 710000 2                  TRA     s:10667
         2 000016   000020 710000 2                  TRA     s:10667
         2 000017   000112 710000 2                  TRA     s:10687

       57    10666    2           CASE(     0, 1, 2, 3, 4, 5, 6, 7 );

       58    10667    2             DIFF = VX_M_ALL(TYPE) - VX_M_FREE(TYPE);

  10667  2 000020   000000 720100                    LXL0    0,,PR0
         2 000021   000000 236010 xsym               LDQ     VX_M_ALL,X0
         2 000022   000000 136010 xsym               SBLQ    VX_M_FREE,X0
         2 000023   200006 756100                    STQ     DIFF,,AUTO

       59    10668    3             IF SIZE > DIFF THEN DO;

  10668  2 000024   200005 471500                    LDP1    @SIZE,,AUTO
         2 000025   000030 604000 2                  TMI     s:10669
         2 000026   100000 116100                    CMPQ    0,,PR1
         2 000027   000076 603000 2                  TRC     s:10683

       60    10669    3                 GET = (( SIZE - DIFF + @PAGE_SIZE1 ) / @PAGE_SIZE ) * @PAGE_SIZE;

  10669  2 000030   100000 236100                    LDQ     0,,PR1
         2 000031   200006 136100                    SBLQ    DIFF,,AUTO
PL6.E3A0      #001=VXA$GET File=VXA$GET.:E05TSI                                  WED 07/30/97 08:04 Page:13   
         2 000032   001777 036007                    ADLQ    1023,DL
         2 000033   002000 506007                    DIV     1024,DL
         2 000034   000012 736000                    QLS     10
         2 000035   200007 756100                    STQ     GET,,AUTO

       61    10670    3                 FPT_GDS.V.SEGSIZE# = GET;

  10670  2 000036   000000 621006                    EAX1    0,QL
         2 000037   000004 441000 1                  SXL1    FPT_GDS+4

       62    10671    3                 IF TYPE = 1 THEN FPT_GDS.V.COMMON# = @TRUE_B;

  10671  2 000040   000000 235100                    LDA     0,,PR0
         2 000041   000001 115007                    CMPA    1,DL
         2 000042   000046 601000 2                  TNZ     s:10672

  10671  2 000043   200000 236003                    LDQ     65536,DU
         2 000044   000004 256000 1                  ORSQ    FPT_GDS+4
         2 000045   000050 710000 2                  TRA     s:10673

       63    10672    3                 ELSE FPT_GDS.V.COMMON# = @FALSE_B;

  10672  2 000046   000000 236000 3                  LDQ     0
         2 000047   000004 356000 1                  ANSQ    FPT_GDS+4

       64    10673    3                 VX_M_VECTOR.F.SEGID = VX_M_SEGID(TYPE);

  10673  2 000050   000000 720100                    LXL0    0,,PR0
         2 000051   000000 236010 xsym               LDQ     VX_M_SEGID,X0
         2 000052   000001 752003 xsym               STCQ    VX_M_VECTOR+1,'03'O

       65    10674    3                 CALL M$GDS( FPT_GDS )  ALTRET( NOROOM_SEGS );

  10674  2 000053   000000 630400 1                  EPPR0   FPT_GDS
         2 000054   430001 713400                    CLIMB   alt,gds
         2 000055   400400 401760                    pmme    nvectors=2
         2 000056   000200 702000 2                  TSX2    NOROOM_SEGS
PL6.E3A0      #001=VXA$GET File=VXA$GET.:E05TSI                                  WED 07/30/97 08:04 Page:14   

       66    10675                                                /* Increase allocated counter */
       67    10676    3                 VX_M_ALL(TYPE) = VX_M_ALL(TYPE) + GET; /* Increase allocated */

  10676  2 000057   200004 470500                    LDP0    @TYPE,,AUTO
         2 000060   000000 720100                    LXL0    0,,PR0
         2 000061   000000 236010 xsym               LDQ     VX_M_ALL,X0
         2 000062   200007 036100                    ADLQ    GET,,AUTO
         2 000063   000000 756010 xsym               STQ     VX_M_ALL,X0

       68    10677                                        /* Check if base pointer needs to be set     */
       69    10678    4                 IF VX_M_BASE_PTR(TYPE) = ADDR(NIL) THEN DO;

  10678  2 000064   000000 720100                    LXL0    0,,PR0
         2 000065   000000 236010 xsym               LDQ     VX_M_BASE_PTR,X0
         2 000066   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000067   000076 601000 2                  TNZ     s:10683

       70    10679    4                     VX_M_BASE_PTR(TYPE) = VX_M_VECTOR.P.POINTER;

  10679  2 000070   000001 236000 xsym               LDQ     VX_M_VECTOR+1
         2 000071   000000 756010 xsym               STQ     VX_M_BASE_PTR,X0

       71    10680    4                     VX_M_SEGID(TYPE) = VX_M_VECTOR.F.SEGID;

  10680  2 000072   000000 720100                    LXL0    0,,PR0
         2 000073   000001 236000 xsym               LDQ     VX_M_VECTOR+1
         2 000074   007777 376007                    ANQ     4095,DL
         2 000075   000000 756010 xsym               STQ     VX_M_SEGID,X0

       72    10681    4                    END;

       73    10682    3                END;

       74    10683    2             START$ = PINCRW( VX_M_BASE_PTR(TYPE),   VX_M_FREE(TYPE)   );

  10683  2 000076   000000 720100                    LXL0    0,,PR0
PL6.E3A0      #001=VXA$GET File=VXA$GET.:E05TSI                                  WED 07/30/97 08:04 Page:15   
         2 000077   000000 236010 xsym               LDQ     VX_M_FREE,X0
         2 000100   000000 471410 xsym               LDP1    VX_M_BASE_PTR,X0
         2 000101   100000 633506                    EPPR3   0,QL,PR1
         2 000102   200003 474500                    LDP4    @START$,,AUTO
         2 000103   400000 453500                    STP3    0,,PR4

       75    10684                                            /* Set free allocated word in segment     */
       76    10685    2             VX_M_FREE(TYPE) = VX_M_FREE(TYPE) + SIZE;

  10685  2 000104   000000 720100                    LXL0    0,,PR0
         2 000105   200005 471500                    LDP1    @SIZE,,AUTO
         2 000106   000000 236010 xsym               LDQ     VX_M_FREE,X0
         2 000107   100000 036100                    ADLQ    0,,PR1
         2 000110   000000 756010 xsym               STQ     VX_M_FREE,X0
         2 000111   000177 710000 2                  TRA     s:10732

       77    10686    2           CASE(8);

       78    10687    2             DIFF = VX_M_ALL(8) - VX_M_FREE(8);

  10687  2 000112   000010 236000 xsym               LDQ     VX_M_ALL+8
         2 000113   000010 136000 xsym               SBLQ    VX_M_FREE+8
         2 000114   200006 756100                    STQ     DIFF,,AUTO

       79    10688    3             IF SIZE > DIFF THEN DO;

  10688  2 000115   200005 471500                    LDP1    @SIZE,,AUTO
         2 000116   000121 604000 2                  TMI     s:10689
         2 000117   100000 116100                    CMPQ    0,,PR1
         2 000120   000146 603000 2                  TRC     s:10699

       80    10689    3                 GET = (( SIZE - DIFF + @PAGE_SIZE1) / @PAGE_SIZE);

  10689  2 000121   100000 236100                    LDQ     0,,PR1
         2 000122   200006 136100                    SBLQ    DIFF,,AUTO
         2 000123   001777 036007                    ADLQ    1023,DL
         2 000124   002000 506007                    DIV     1024,DL
PL6.E3A0      #001=VXA$GET File=VXA$GET.:E05TSI                                  WED 07/30/97 08:04 Page:16   
         2 000125   200007 756100                    STQ     GET,,AUTO

       81    10690    3                 WGET = GET * @PAGE_SIZE;

  10690  2 000126   200007 235100                    LDA     GET,,AUTO
         2 000127   000012 735000                    ALS     10
         2 000130   200010 755100                    STA     WGET,,AUTO

       82    10691    3                 FPT_GDP.V.PAGES#   = GET;

  10691  2 000131   000012 756000 1                  STQ     FPT_GDP+4

       83    10692    3                 CALL M$GDP( FPT_GDP )  ALTRET( NOROOM_PAGE );

  10692  2 000132   000006 630400 1                  EPPR0   FPT_GDP
         2 000133   430003 713400                    CLIMB   alt,+12291
         2 000134   400400 401760                    pmme    nvectors=2
         2 000135   000204 702000 2                  TSX2    NOROOM_PAGE

       84    10693                                                /* Increase allocated counter */
       85    10694    3                 VX_M_ALL(8) = VX_M_ALL(8) + WGET; /* Increase allocated */

  10694  2 000136   000010 236000 xsym               LDQ     VX_M_ALL+8
         2 000137   200010 036100                    ADLQ    WGET,,AUTO
         2 000140   000010 756000 xsym               STQ     VX_M_ALL+8

       86    10695                                        /* Check if base pointer needs to be set     */
       87    10696    3                 IF VX_M_BASE_PTR(8) = ADDR(NIL) THEN

  10696  2 000141   000010 236000 xsym               LDQ     VX_M_BASE_PTR+8
         2 000142   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000143   000146 601000 2                  TNZ     s:10699

       88    10697    3                     VX_M_BASE_PTR(8) = VX_M_VECTOR_DP.P.POINTER;

  10697  2 000144   000001 236000 xsym               LDQ     VX_M_VECTOR_DP+1
         2 000145   000010 756000 xsym               STQ     VX_M_BASE_PTR+8
PL6.E3A0      #001=VXA$GET File=VXA$GET.:E05TSI                                  WED 07/30/97 08:04 Page:17   

       89    10698    3                END;

       90    10699    2             START$ = PINCRW( VX_M_BASE_PTR(8),   VX_M_FREE(8)   );

  10699  2 000146   000010 236000 xsym               LDQ     VX_M_FREE+8
         2 000147   000022 736000                    QLS     18
         2 000150   000010 036000 xsym               ADLQ    VX_M_BASE_PTR+8
         2 000151   200003 470500                    LDP0    @START$,,AUTO
         2 000152   000000 756100                    STQ     0,,PR0

       91    10700                                                /* Set free allocated word in segment */
       92    10701    2             VX_M_FREE(8) = VX_M_FREE(8) + SIZE;

  10701  2 000153   200005 471500                    LDP1    @SIZE,,AUTO
         2 000154   000010 236000 xsym               LDQ     VX_M_FREE+8
         2 000155   100000 036100                    ADLQ    0,,PR1
         2 000156   000010 756000 xsym               STQ     VX_M_FREE+8
         2 000157   000177 710000 2                  TRA     s:10732

       93    10702    2           CASE(ELSE);

       94    10703        /*E*  ERROR: VXA-E$INTERNAL_ALL_TYPE_VX-0
       95    10704              MESSAGE: Internal link error; Bad type passed to VXA$GET: TYPE = %U1.
       96    10705              DESCRIPTION: Self-explanatory.
       97    10706        */
       98    10707                  %NUMBER(
       99    10708                  NUM1=TYPE, BASE1=10, SIZE1=12 );

  10714  2 000160   000001 236000 3                  LDQ     1
         2 000161   200016 756100                    STQ     WGET+6,,AUTO
         2 000162   200004 236100                    LDQ     @TYPE,,AUTO
         2 000163   000002 235000 3                  LDA     2
         2 000164   200014 757100                    STAQ    WGET+4,,AUTO
         2 000165   000004 237000 3                  LDAQ    4
         2 000166   200012 757100                    STAQ    WGET+2,,AUTO
         2 000167   200012 630500                    EPPR0   WGET+2,,AUTO
PL6.E3A0      #001=VXA$GET File=VXA$GET.:E05TSI                                  WED 07/30/97 08:04 Page:18   
         2 000170   000023 631400 xsym               EPPR1   B_VECTNIL+19
         2 000171   000000 701000 xent               TSX1    VXD$B2C
         2 000172   000000 011000                    NOP     0

      100    10725                  %SCREAM(
      101    10726                  ERR#=E$INTERNAL_ALL_TYPE_VX,
      102    10727                  LEVEL=@E$F_VX,
      103    10728                  MID="'A'");

  10729  2 000173   000010 630400 3                  EPPR0   8
         2 000174   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 000175   000000 701000 xent               TSX1    VXE$ERROR
         2 000176   000000 011000                    NOP     0

      104    10731    2           END;

      105    10732    1         RETURN;

  10732  2 000177   000000 702200 xent               TSX2  ! X66_ARET

  10701  2 000200                       NOROOM_SEGS  null
      106    10733    1   NOROOM_SEGS:;
      107    10734        /*E*  ERROR: VXA-E$INTERNAL_ALL_REQ_SEG_VX-0
      108    10735              MESSAGE: Data segment allocation request failed.
      109    10736              DESCRIPTION: Self-explanatory.
      110    10737        */
      111    10738              %SCREAM(
      112    10739              ERR#=E$INTERNAL_ALL_REQ_SEG_VX,
      113    10740              LEVEL=@E$F_VX,
      114    10741              MID="'A'");

  10742  2 000200   000015 630400 3                  EPPR0   13
         2 000201   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 000202   000000 701000 xent               TSX1    VXE$ERROR
         2 000203   000000 011000                    NOP     0

  10742  2 000204                       NOROOM_PAGE  null
PL6.E3A0      #001=VXA$GET File=VXA$GET.:E05TSI                                  WED 07/30/97 08:04 Page:19   
      115    10744    1   NOROOM_PAGE:;
      116    10745        /*E*  ERROR: VXA-E$INTERNAL_ALL_REQ_PAGE_VX-0
      117    10746              MESSAGE: Data page allocation request failed.
      118    10747              DESCRIPTION: Self-explanatory.
      119    10748        */
      120    10749              %SCREAM(
      121    10750              ERR#=E$INTERNAL_ALL_REQ_PAGE_VX,
      122    10751              LEVEL=@E$F_VX,
      123    10752              MID="'A'");

  10753  2 000204   000022 630400 3                  EPPR0   18
         2 000205   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 000206   000000 701000 xent               TSX1    VXE$ERROR
         2 000207   000000 011000                    NOP     0

      124    10755    1   END VXA$GET;

  10755  2 000210   000000 702200 xent               TSX2  ! X66_ARET

PL6.E3A0      #001=VXA$GET File=VXA$GET.:E05TSI                                  WED 07/30/97 08:04 Page:20   
--  Include file information  --

   VX_SWITCH_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXA$GET.
PL6.E3A0      #001=VXA$GET File=VXA$GET.:E05TSI                                  WED 07/30/97 08:04 Page:21   

 **** Variables and constants ****

  ****  Section 001  Data  VXA$GET

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     6-0-0/d STRC(216)   r     1 FPT_GDP                    0-0-0/d STRC(216)   r     1 FPT_GDS

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @SIZE                      3-0-0/w PTR         r     1 @START$
     4-0-0/w PTR         r     1 @TYPE                      6-0-0/w SBIN        r     1 DIFF
     7-0-0/w UBIN        r     1 GET                       *0-0-0/w UBIN        r     1 SIZE
    *0-0-0/w PTR         r     1 START$                    *0-0-0/w UBIN        r     1 TYPE
    10-0-0/w UBIN        r     1 WGET

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(720)   r     1 VX_EFIELD1
     0-0-0/w SBIN        r     1 VX_M_ALL(0:8)
     0-0-0/w PTR         r     1 VX_M_BASE_PTR(0:8)
     0-0-0/w SBIN        r     1 VX_M_FREE(0:8)
     0-0-0/w UBIN        r     1 VX_M_SEGID(0:8)
     0-0-0/w STRC(72)    r     1 VX_M_VECTOR                0-0-0/w STRC(72)    r     1 VX_M_VECTOR_DP


   Procedure VXA$GET requires 137 words for executable code.
   Procedure VXA$GET requires 16 words of local(AUTO) storage.
PL6.E3A0      #001=VXA$GET File=VXA$GET.:E05TSI                                  WED 07/30/97 08:04 Page:22   

    No errors detected in file VXA$GET.:E05TSI    .
PL6.E3A0      #001=VXA$GET File=VXA$GET.:E05TSI                                  WED 07/30/97 08:04 Page:23   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VXA$GET File=VXA$GET.:E05TSI                                  WED 07/30/97 08:04 Page:24   
          MINI XREF LISTING

DIFF
     10599**DCL     10667<<ASSIGN  10668>>IF      10669>>ASSIGN  10687<<ASSIGN  10688>>IF      10689>>ASSIGN
FPT_GDP
     10661**DCL     10692<>CALL
FPT_GDP.V
     10661**DCL     10661--DCLINIT
FPT_GDP.V.PAGES#
     10662**DCL     10691<<ASSIGN
FPT_GDS
     10645**DCL     10674<>CALL
FPT_GDS.V
     10645**DCL     10645--DCLINIT
FPT_GDS.V.COMMON#
     10646**DCL     10671<<ASSIGN  10672<<ASSIGN
FPT_GDS.V.SEGSIZE#
     10648**DCL     10670<<ASSIGN
GET
     10616**DCL     10669<<ASSIGN  10670>>ASSIGN  10676>>ASSIGN  10689<<ASSIGN  10690>>ASSIGN  10691>>ASSIGN
M$GDP
        75**DCL-ENT 10692--CALL
M$GDS
        74**DCL-ENT 10674--CALL
NOROOM_PAGE
     10742**LABEL   10692--CALLALT
NOROOM_SEGS
     10701**LABEL   10674--CALLALT
SIZE
     10582**DCL        25--PROC    10668>>IF      10669>>ASSIGN  10685>>ASSIGN  10688>>IF      10689>>ASSIGN
     10701>>ASSIGN
START$
     10580**DCL        25--PROC    10683<<ASSIGN  10699<<ASSIGN
TYPE
PL6.E3A0      #001=VXA$GET File=VXA$GET.:E05TSI                                  WED 07/30/97 08:04 Page:25   
     10581**DCL        25--PROC    10665>>DOCASE  10667>>ASSIGN  10667>>ASSIGN  10671>>IF      10673>>ASSIGN
     10676>>ASSIGN  10676>>ASSIGN  10678>>IF      10679>>ASSIGN  10680>>ASSIGN  10683>>ASSIGN  10683>>ASSIGN
     10685>>ASSIGN  10685>>ASSIGN  10714<>CALL
VXD$B2C
     10563**DCL-ENT 10714--CALL
VXE$ERROR
     10561**DCL-ENT 10729--CALL    10742--CALL    10753--CALL
VX_BIAS.A
      9327**DCL      9328--REDEF
VX_CBUF.CHARS_A
      9261**DCL      9262--REDEF
VX_EBUF.CHARS_A
      9850**DCL      9851--REDEF
VX_EFIELD1.CHARS
      9859**DCL      9860--REDEF
VX_EFIELD1.CHARS_A
      9860**DCL     10714<>CALL
VX_EFIELD2.CHARS
      9863**DCL      9864--REDEF
VX_EFIELD3.CHARS
      9867**DCL      9868--REDEF
VX_EI_KEY_BUF.KEY
     10243**DCL     10244--REDEF
VX_ERRORS
      9304**DCL      9315--REDEF
VX_ERRORS.CONFLICT_A
      9310**DCL      9311--REDEF
VX_ERRORS.UNSAT_A
      9306**DCL      9307--REDEF
VX_IMAGE_DATA.CPAGE#_A
      8441**DCL      8442--REDEF
VX_IMAGE_DATA.NODE_A$
      8453**DCL      8454--REDEF
VX_IMAGE_DATA.START_A$
      8445**DCL      8446--REDEF
VX_IMAGE_DATA.STOP_A$
PL6.E3A0      #001=VXA$GET File=VXA$GET.:E05TSI                                  WED 07/30/97 08:04 Page:26   
      8449**DCL      8450--REDEF
VX_IMAGE_DS3.CPAGE#_A
      8510**DCL      8511--REDEF
VX_IMAGE_DS3.NODE_A$
      8522**DCL      8523--REDEF
VX_IMAGE_DS3.START_A$
      8514**DCL      8515--REDEF
VX_IMAGE_DS3.STOP_A$
      8518**DCL      8519--REDEF
VX_IMAGE_DS4.CPAGE#_A
      8533**DCL      8534--REDEF
VX_IMAGE_DS4.NODE_A$
      8545**DCL      8546--REDEF
VX_IMAGE_DS4.START_A$
      8537**DCL      8538--REDEF
VX_IMAGE_DS4.STOP_A$
      8541**DCL      8542--REDEF
VX_IMAGE_DS5.CPAGE#_A
      8556**DCL      8557--REDEF
VX_IMAGE_DS5.NODE_A$
      8568**DCL      8569--REDEF
VX_IMAGE_DS5.START_A$
      8560**DCL      8561--REDEF
VX_IMAGE_DS5.STOP_A$
      8564**DCL      8565--REDEF
VX_IMAGE_DS6.CPAGE#_A
      8579**DCL      8580--REDEF
VX_IMAGE_DS6.NODE_A$
      8591**DCL      8592--REDEF
VX_IMAGE_DS6.START_A$
      8583**DCL      8584--REDEF
VX_IMAGE_DS6.STOP_A$
      8587**DCL      8588--REDEF
VX_IMAGE_DS7.CPAGE#_A
      8602**DCL      8603--REDEF
VX_IMAGE_DS7.NODE_A$
PL6.E3A0      #001=VXA$GET File=VXA$GET.:E05TSI                                  WED 07/30/97 08:04 Page:27   
      8614**DCL      8615--REDEF
VX_IMAGE_DS7.START_A$
      8606**DCL      8607--REDEF
VX_IMAGE_DS7.STOP_A$
      8610**DCL      8611--REDEF
VX_IMAGE_DS8.CPAGE#_A
      8625**DCL      8626--REDEF
VX_IMAGE_DS8.NODE_A$
      8637**DCL      8638--REDEF
VX_IMAGE_DS8.START_A$
      8629**DCL      8630--REDEF
VX_IMAGE_DS8.STOP_A$
      8633**DCL      8634--REDEF
VX_IMAGE_PROC.CPAGE#_A
      8464**DCL      8465--REDEF
VX_IMAGE_PROC.NODE_A$
      8476**DCL      8477--REDEF
VX_IMAGE_PROC.START_A$
      8468**DCL      8469--REDEF
VX_IMAGE_PROC.STOP_A$
      8472**DCL      8473--REDEF
VX_IMAGE_ROS.CPAGE#_A
      8487**DCL      8488--REDEF
VX_IMAGE_ROS.NODE_A$
      8499**DCL      8500--REDEF
VX_IMAGE_ROS.START_A$
      8491**DCL      8492--REDEF
VX_IMAGE_ROS.STOP_A$
      8495**DCL      8496--REDEF
VX_M_ALL
      9338**DCL     10667>>ASSIGN  10676<<ASSIGN  10676>>ASSIGN  10687>>ASSIGN  10694<<ASSIGN  10694>>ASSIGN
VX_M_BASE_PTR
      9340**DCL     10678>>IF      10679<<ASSIGN  10683>>ASSIGN  10696>>IF      10697<<ASSIGN  10699>>ASSIGN
VX_M_FREE
      9336**DCL     10667>>ASSIGN  10683>>ASSIGN  10685<<ASSIGN  10685>>ASSIGN  10687>>ASSIGN  10699>>ASSIGN
     10701<<ASSIGN  10701>>ASSIGN
PL6.E3A0      #001=VXA$GET File=VXA$GET.:E05TSI                                  WED 07/30/97 08:04 Page:28   
VX_M_SEGID
      9342**DCL     10673>>ASSIGN  10680<<ASSIGN
VX_M_VECTOR
      8287**DCL     10645--DCLINIT
VX_M_VECTOR.F
      8292**DCL      8296--REDEF
VX_M_VECTOR.F.SEGID
      8295**DCL     10673<<ASSIGN  10680>>ASSIGN
VX_M_VECTOR.P.POINTER
      8297**DCL     10679>>ASSIGN
VX_M_VECTOR_DP
      8322**DCL     10661--DCLINIT
VX_M_VECTOR_DP.F
      8327**DCL      8331--REDEF
VX_M_VECTOR_DP.P.POINTER
      8332**DCL     10697>>ASSIGN
VX_O.ACCTN_A$
      9456**DCL      9457--REDEF
VX_O.DCB_MATCH_A$
      9465**DCL      9466--REDEF
VX_O.DCB_MATCH_HIT_A
      9471**DCL      9472--REDEF
VX_O.FIDN_A$
      9450**DCL      9451--REDEF
VX_O.FID_A$
      9442**DCL      9443--REDEF
VX_O.INCLUDE_A$
      9462**DCL      9463--REDEF
VX_O.MAP_A
      9436**DCL      9437--REDEF
VX_O.NODCB_A
      9493**DCL      9494--REDEF
VX_O.NUM_A
      9381**DCL      9383--REDEF
VX_O.OPT_A
      9481**DCL      9482--REDEF
PL6.E3A0      #001=VXA$GET File=VXA$GET.:E05TSI                                  WED 07/30/97 08:04 Page:29   
VX_O.PRIV_A
      9397**DCL      9399--REDEF
VX_O.SIN_A
      9350**DCL      9351--REDEF
VX_O.TCB_A
      9477**DCL      9478--REDEF
VX_OD.ACCTN_A$
      9654**DCL      9655--REDEF
VX_OD.DCB_MATCH_A$
      9663**DCL      9664--REDEF
VX_OD.FIDN_A$
      9648**DCL      9649--REDEF
VX_OD.FID_A$
      9640**DCL      9641--REDEF
VX_OD.INCLUDE_A$
      9660**DCL      9661--REDEF
VX_OD.MAP_A
      9634**DCL      9635--REDEF
VX_OD.NODCB_A
      9678**DCL      9679--REDEF
VX_OD.NUM_A
      9581**DCL      9582--REDEF
VX_OD.PRIV_A
      9596**DCL      9597--REDEF
VX_OD.SIN_A
      9550**DCL      9551--REDEF
VX_OD.VECTOR_A$
      9669**DCL      9670--REDEF
VX_OL.MAX_A
      9525**DCL      9527--REDEF
VX_OL.MIN_A
      9510**DCL      9511--REDEF
VX_ON.ACCTN_A$
      9799**DCL      9801--REDEF
VX_ON.DCB_MATCH_A$
      9810**DCL      9812--REDEF
PL6.E3A0      #001=VXA$GET File=VXA$GET.:E05TSI                                  WED 07/30/97 08:04 Page:30   
VX_ON.FIDN_A$
      9792**DCL      9794--REDEF
VX_ON.FID_A$
      9783**DCL      9785--REDEF
VX_ON.INCLUDE_A$
      9806**DCL      9808--REDEF
VX_ON.MAP_A
      9776**DCL      9778--REDEF
VX_ON.NODCB_A$
      9826**DCL      9827--REDEF
VX_ON.NUM_A
      9721**DCL      9723--REDEF
VX_ON.PRIV_A
      9737**DCL      9739--REDEF
VX_ON.SIN_A
      9689**DCL      9691--REDEF
VX_ON.VECTOR_A$
      9817**DCL      9818--REDEF
VX_OUHEAD.VERSION
      9136**DCL      9138--REDEF
VX_OU_HEAD
      9079**DCL      9118--REDEF
VX_OU_HEAD.REC_A
      9091**DCL      9094--REDEF
VX_O_KEY_BUF.FORM0
      8340**DCL      8343--REDEF    8350--REDEF
VX_O_KEY_BUF_L.FORM0
      8363**DCL      8366--REDEF    8373--REDEF
VX_PASS2_REF.OU.L_START
     10029**DCL     10034--REDEF
VX_PASS2_REF.OU.L_STOP
     10035**DCL     10040--REDEF
VX_PASS2_REF.OU.MAX
     10023**DCL     10028--REDEF
VX_PASS2_REF.OU.SIZE
     10041**DCL     10046--REDEF
PL6.E3A0      #001=VXA$GET File=VXA$GET.:E05TSI                                  WED 07/30/97 08:04 Page:31   
VX_PASS2_REF.SAT.COUNT
     10068**DCL     10074--REDEF
VX_PASS2_REF.SAT.ENT_SIZE
     10075**DCL     10081--REDEF
VX_PASS2_REF.SAT.L_START
     10054**DCL     10060--REDEF
VX_PASS2_REF.SAT.L_STOP
     10061**DCL     10067--REDEF
VX_PASS2_REF.SAT.MAX
     10048**DCL     10053--REDEF
VX_PASS2_REF.UNSAT.L_START
     10116**DCL     10121--REDEF
VX_PASS2_REF.UNSAT.L_STOP
     10122**DCL     10127--REDEF
VX_PASS2_REF.UNSAT.L_WHERE
     10128**DCL     10133--REDEF
VX_PASS2_REF.UNSAT.MAX
     10110**DCL     10115--REDEF
VX_PASS2_REF.UNSAT.PAGE#
     10140**DCL     10145--REDEF
VX_PASS2_REF.UNSAT.SIZE
     10134**DCL     10139--REDEF
VX_PHRASE.PHRASE
      9542**DCL      9544--REDEF
VX_PROGRAM_BIAS.A
      9320**DCL      9321--REDEF
VX_R_KEY_BUF.FORM0
      8389**DCL      8393--REDEF    8399--REDEF
VX_SD.A
      8017**DCL      8018--REDEF
VX_SPC.B$.MINE
     10211**DCL     10217--REDEF
VX_SPC.B$.NAME
     10190**DCL     10196--REDEF
VX_SPC.B$.SKIP
     10204**DCL     10210--REDEF
PL6.E3A0      #001=VXA$GET File=VXA$GET.:E05TSI                                  WED 07/30/97 08:04 Page:32   
VX_SPC.B$.VALUE
     10197**DCL     10203--REDEF
VX_SPC.SEG.NAME
     10159**DCL     10165--REDEF
VX_SPC.SEG.VALUE
     10166**DCL     10172--REDEF
VX_TSX0_OVERLAY.H
      9934**DCL      9937--REDEF
WGET
     10617**DCL     10690<<ASSIGN  10694>>ASSIGN
