

14:53 JUL 28 '97 KV$BPC.:E05SI                                             1    
    1      /*M* KV$BPC Free buffer pool control block - used by KVB$SVC and stats. */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      %MACRO KV$BPC (NAME=KV$BPC, STCLASS=BASED, STATS(YES='1'B,NO='0'B)='0'B,
    8                     LVL=1, LAST=";");
    9                   /*F* NAME: KV$BPC - Free Buffer Pool Control Block
   10
   11                   KV$BPC is the free buffer pool control block used by
   12                   the memory pool services and displayed by STATS.
   13
   14                   NOTE:  For all arrays in the structure whose size is
   15                   (0:12), if x is the index into the array, then the size
   16                   of the buffer is MINSIZ * 2(** x).
   17
   18                   The contents of this structure are as follows:
   19                   */
   20      %IF LVL>1 AND STATS;
   21            %(LVL) NAME,
   22      %LSET LV=LVL+1;
   23      %ELSE;
   24      DCL 1 NAME STCLASS ALIGNED,
   25      %LSET LV=2;
   26      %ENDIF;
   27      %LSET DWD=CHARTEXT(SUBSTR('(32)',0,4*BITBIN(MODE_FEP)));
   28                    /*K* TOT - UBIN(32).
   29                    Total buffer space words.
   30                    */
   31             %LV TOT UBIN%DWD,                  /* WORDS TOTAL                     */
   32                    /*K* USE - UBIN(32).
   33                    Buffer space words in use.
   34                    */
   35             %LV USE UBIN%DWD,                  /* WORDS IN USE                     */
   36                    /*K* MXU - UBIN(32).
   37                    Peak buffer space words in use.
14:53 JUL 28 '97 KV$BPC.:E05SI                                             2    
   38                    */
   39             %LV MXU UBIN%DWD,                  /* PEAK OF KV$BPC.USE               */
   40                    /*K* GETC - UBIN(32).
   41                    Number of buffer requests.
   42                    */
   43             %LV GETC UBIN%DWD,                 /* # OF GET CALLS                   */
   44                    /*K* RLSC - UBIN(32).
   45                    Number of release calls.
   46                    */
   47             %LV RLSC UBIN%DWD,                 /* # OF RLS CALLS                   */
   48                    /*K* GETT - UBIN(32).
   49                    Time taken by buffer requests.
   50                    */
   51             %LV GETT UBIN%DWD,                 /* TIME OF GET CALLS                */
   52                    /*K* RLST - UBIN(32).
   53                    Time taken by release calls.
   54                    */
   55             %LV RLST UBIN%DWD,                 /* TIME OF RLS CALLS                */
   56                    /*K* GETF - UBIN(32).
   57                    Number of buffer requests that failed even though memory
   58                    was available.
   59                    */
   60             %LV GETF UBIN%DWD,                 /* # OF GET FAILURES WITH ENOUGH FREE */
   61                    /*K* FRG - UBIN(32).
   62                    Number of memory fragmentations.
   63                    */
   64             %LV FRG UBIN%DWD,                  /* # OF FRAGMENTATIONS              */
   65                    /*K* CMB - UBIN(32).
   66                    Number of times memory was recombined.
   67                    */
   68             %LV CMB UBIN%DWD,                  /* # OF RE-COMBINATIONS             */
   69                    /*K* SCH - UBIN(32).
   70                    Number of buddy space searches.
   71                    */
   72             %LV SCH UBIN%DWD,                  /* # OF BUDDY SEARCHES              */
   73                    /*K* CLKCTX - UBIN(32).
   74                    Number of clock context blocks.
14:53 JUL 28 '97 KV$BPC.:E05SI                                             3    
   75                    */
   76             %LV CLKCTX UBIN%DWD,                  /* CLOCK CONTEXT BLOCKS.         */
   77                    /*K* CLKC - UBIN(32).
   78                    Number of clock service calls.
   79                    */
   80             %LV CLKC UBIN%DWD,                  /* CLOCK SERVICE CALLS.            */
   81                    /*K* CLKE - UBIN(32).
   82                    Number of clock expirations.
   83                    */
   84             %LV CLKE UBIN%DWD,                  /* CLOCK EXPIRATIONS.              */
   85      %IF STATS;
   86             %LV COUNT(0:12) UBIN%DWD,     /* CURRENT BUFFERS AVAILABLE. */
   87             %LV PKCNT(0:12) UBIN%DWD,     /* PEAK BUFFERS EVER AVAILABLE. */
   88             %LV MINSIZ UBIN%DWD LAST            /* MINIMUM BUFFER SIZE. */
   89      %ELSE;
   90                    /*K* COUNT - ARRAY(0:12).
   91                    Count of free buffers.
   92                    */
   93      %LSET WD=CHARTEXT(SUBSTR('(18)',4*BITBIN(MODE_FEP)));
   94             2 COUNT(0:12) UBIN%WD UNAL,
   95                    /*K* PKCNT - ARRAY(0:12).
   96                    Peak number of buffers ever available.
   97                    */
   98             2 PKCNT(0:12) UBIN%WD UNAL,
   99                    /*K* HEAD$ - PTR ARRAY(0:12).
  100                    Starting pointers for chains of buffers of different
  101                    sizes.
  102                    */
  103             2 HEAD$(0:12) PTR,
  104                    /*K* TAIL$ - PTR ARRAY(0:12).
  105                    Ending pointers for chains of buffers of different
  106                    sizes.
  107                    */
  108             2 TAIL$(0:12) PTR,
  109                    /*K* MINSIZ - UBIN.
  110                    Minimum buffer size.
  111                    */
14:53 JUL 28 '97 KV$BPC.:E05SI                                             4    
  112             2 MINSIZ UBIN%WD UNAL,           /* MIN BUFFER SIZE                    */
  113                    /*K* MAXSIZ - UBIN.
  114                    Maximum buffer size.
  115                    */
  116             2 MAXSIZ UBIN%WD UNAL,           /* MAX BUFFER SIZE                    */
  117                    /*K* BGN$ - PTR.
  118                    Minimum legal buffer address.
  119                    */
  120             2 BGN$ PTR,                      /* MIN LEGAL FREE ADDR                */
  121                    /*K* END$ - PTR.
  122                    Maximum legal buffer address (+1).
  123                    */
  124             2 END$ PTR,                      /* MAX LEGAL FREE ADDR(+1)            */
  125                    /*K* BITMAPSIZ - UBIN.
  126                    Size in bytes of DBG.BITMAP.
  127                    */
  128             2 BITMAPSIZ UBIN%WD UNAL,        /* Size in chars of bitmap            */
  129
  130      /* Structure of options for buffer management debugging aids           */
  131
  132             2 DBG,
  133
  134      %CHARTEXT(SUBSTR('3 * BIT(1),',11*BITBIN(MODE_FEP)))
  135                    /*K* DBG.BITMAP - BIT(1).
  136                    If this bit is set, a bitmap is maintained to indicate
  137                    the availability of every buffer segment in the buffer
  138                    segment in the buffer pool so that problems with
  139                    multiple allocation and release of buffers can be
  140                    detected more quickly.  Each bit in the bit map
  141                    represents a single minimum size buffer.
  142                    */
  143
  144                3 BITMAP BIT(1),
  145
  146                    /*K* DBG.BUSY - BIT(1).
  147                    If this bit is set, identifying information is to be
  148                    part of the buffers allocated to a calling program.
14:53 JUL 28 '97 KV$BPC.:E05SI                                             5    
  149                    When allocated, each buffer is initialized to a
  150                    repeating pattern consisting of the four ASCII
  151                    characters "BUSY" followed by the 8-hexadecimal digit
  152                    string .BADaaaaa.  "aaaaa" is the address of the
  153                    calling program.  "BUSY.BADaaaaa" is stored throughout
  154                    the words of the buffer so that lost memory can be
  155                    traced back to the caller.
  156                    */
  157
  158                3 BUSY BIT(1),
  159
  160                    /*K* DBG.VALCHAINS - BIT(1).
  161                    If this bit is set, chains and sizes in the free buffers
  162                    are to be validated before each attempt to allocate or
  163                    release a buffer.  No overlapping checks are done.
  164                    */
  165
  166                3 VALCHAINS BIT(1),
  167                    /*K* DBG.VALCHAINS_AFTGET - BIT(1).
  168                    If this bit is set, the chains of free buffers are to
  169                    be validated after each attempt to allocate a buffer.
  170                    */
  171                3 VALCHAINS_AFTGET BIT(1),
  172                    /*K* DBG.VALCHAINS_AFTRLS - BIT(1).
  173                    If this bit is set, the chains of free buffers are to be
  174                    validated after each buffer release.
  175                    */
  176                3 VALCHAINS_AFTRLS BIT(1),
  177                    /*K* DBG.SORT - BIT(1).
  178                    If this bit is set, the chains of free buffers are kept
  179                    sorted by buffer address.  The considerable overhead
  180                    required by this option must be weighed against the
  181                    possible increase in fragmented buffer recombination
  182                    probability.
  183                    */
  184               3 SORT BIT(1),
  185              3 * BIT(10),
14:53 JUL 28 '97 KV$BPC.:E05SI                                             6    
  186      /* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */
  187      /* The following equate circumvents PL6's inablility to      */
  188      /* evaluate POFFW(ADDR(KV$BPC.BITMAP),ADDR(KV$BPC)) at       */
  189      /* compile time.  FIX IT WHEN ALTERING THE STRUCTURE!!!!!!!! */
  190      /* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */
  191      %EQU                                                       BITMAP_OFFSET=114;
  192             2 BITMAP CHAR(KV$BPC.BITMAPSIZ);
  193      %ENDIF;
  194      %MEND;

